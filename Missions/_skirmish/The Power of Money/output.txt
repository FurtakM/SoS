// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10803 0 4
// PrepareAmerican ;
  31: CALL 4022 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8517 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: PUSH
3136: LD_INT 22
3138: PUSH
3139: LD_INT 6
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 69
3150: AND
3151: IFFALSE 3926
3153: GO 3155
3155: DISABLE
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// begin enable ;
3160: ENABLE
// if conv_squad then
3161: LD_EXP 1
3165: IFFALSE 3436
// for i = conv_squad downto 1 do
3167: LD_ADDR_VAR 0 1
3171: PUSH
3172: DOUBLE
3173: LD_EXP 1
3177: INC
3178: ST_TO_ADDR
3179: LD_INT 1
3181: PUSH
3182: FOR_DOWNTO
3183: IFFALSE 3434
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3185: LD_EXP 1
3189: PUSH
3190: LD_VAR 0 1
3194: ARRAY
3195: PUSH
3196: LD_INT 1
3198: ARRAY
3199: PPUSH
3200: LD_INT 9
3202: PPUSH
3203: CALL_OW 308
3207: IFFALSE 3284
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3209: LD_ADDR_VAR 0 2
3213: PUSH
3214: LD_INT 9
3216: PPUSH
3217: LD_INT 22
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 70
3231: PUSH
3232: FOR_IN
3233: IFFALSE 3260
// begin safeCounter := safeCounter + 1 ;
3235: LD_ADDR_EXP 15
3239: PUSH
3240: LD_EXP 15
3244: PUSH
3245: LD_INT 1
3247: PLUS
3248: ST_TO_ADDR
// RemoveUnit ( j ) ;
3249: LD_VAR 0 2
3253: PPUSH
3254: CALL_OW 64
// end ;
3258: GO 3232
3260: POP
3261: POP
// conv_squad := Delete ( conv_squad , i ) ;
3262: LD_ADDR_EXP 1
3266: PUSH
3267: LD_EXP 1
3271: PPUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: CALL_OW 3
3281: ST_TO_ADDR
// break ;
3282: GO 3434
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3284: LD_EXP 1
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_EXP 6
3303: PUSH
3304: LD_EXP 1
3308: PUSH
3309: LD_VAR 0 1
3313: ARRAY
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: ARRAY
3319: PPUSH
3320: CALL_OW 308
3324: IFFALSE 3370
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3326: LD_ADDR_EXP 1
3330: PUSH
3331: LD_EXP 1
3335: PPUSH
3336: LD_VAR 0 1
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: LD_EXP 1
3348: PUSH
3349: LD_VAR 0 1
3353: ARRAY
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: PLUS
3362: PPUSH
3363: CALL 10422 0 4
3367: ST_TO_ADDR
3368: GO 3432
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3370: LD_EXP 1
3374: PUSH
3375: LD_VAR 0 1
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 314
3389: NOT
3390: IFFALSE 3432
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: LD_EXP 6
3411: PUSH
3412: LD_EXP 1
3416: PUSH
3417: LD_VAR 0 1
3421: ARRAY
3422: PUSH
3423: LD_INT 2
3425: ARRAY
3426: ARRAY
3427: PPUSH
3428: CALL_OW 113
// end ;
3432: GO 3182
3434: POP
3435: POP
// if escort then
3436: LD_EXP 2
3440: IFFALSE 3779
// for i = escort downto 1 do
3442: LD_ADDR_VAR 0 1
3446: PUSH
3447: DOUBLE
3448: LD_EXP 2
3452: INC
3453: ST_TO_ADDR
3454: LD_INT 1
3456: PUSH
3457: FOR_DOWNTO
3458: IFFALSE 3777
// begin if IsInArea ( escort [ i ] , conv_end ) then
3460: LD_EXP 2
3464: PUSH
3465: LD_VAR 0 1
3469: ARRAY
3470: PPUSH
3471: LD_INT 9
3473: PPUSH
3474: CALL_OW 308
3478: IFFALSE 3555
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: LD_INT 9
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_INT 6
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 70
3502: PUSH
3503: FOR_IN
3504: IFFALSE 3531
// begin safeCounter := safeCounter + 1 ;
3506: LD_ADDR_EXP 15
3510: PUSH
3511: LD_EXP 15
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: ST_TO_ADDR
// RemoveUnit ( j ) ;
3520: LD_VAR 0 2
3524: PPUSH
3525: CALL_OW 64
// end ;
3529: GO 3503
3531: POP
3532: POP
// escort := Delete ( escort , i ) ;
3533: LD_ADDR_EXP 2
3537: PUSH
3538: LD_EXP 2
3542: PPUSH
3543: LD_VAR 0 1
3547: PPUSH
3548: CALL_OW 3
3552: ST_TO_ADDR
// break ;
3553: GO 3777
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3555: LD_EXP 2
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: PPUSH
3566: CALL 10679 0 1
3570: PUSH
3571: LD_EXP 2
3575: PUSH
3576: LD_VAR 0 1
3580: ARRAY
3581: PPUSH
3582: LD_EXP 2
3586: PUSH
3587: LD_VAR 0 1
3591: ARRAY
3592: PPUSH
3593: CALL 10679 0 1
3597: PPUSH
3598: CALL_OW 296
3602: PUSH
3603: LD_INT 13
3605: LESS
3606: AND
3607: IFFALSE 3642
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3609: LD_EXP 2
3613: PUSH
3614: LD_VAR 0 1
3618: ARRAY
3619: PPUSH
3620: LD_EXP 2
3624: PUSH
3625: LD_VAR 0 1
3629: ARRAY
3630: PPUSH
3631: CALL 10679 0 1
3635: PPUSH
3636: CALL_OW 115
3640: GO 3775
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3642: LD_EXP 1
3646: PUSH
3647: LD_EXP 2
3651: PUSH
3652: LD_VAR 0 1
3656: ARRAY
3657: PPUSH
3658: LD_INT 64
3660: PPUSH
3661: LD_INT 117
3663: PPUSH
3664: CALL_OW 297
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: AND
3673: PUSH
3674: LD_EXP 2
3678: PUSH
3679: LD_VAR 0 1
3683: ARRAY
3684: PPUSH
3685: CALL_OW 314
3689: NOT
3690: AND
3691: IFFALSE 3757
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3693: LD_EXP 2
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: PPUSH
3704: LD_EXP 1
3708: PUSH
3709: LD_INT 1
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 296
3721: PUSH
3722: LD_INT 6
3724: GREATER
3725: IFFALSE 3755
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3727: LD_EXP 2
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: PPUSH
3738: LD_EXP 1
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: PPUSH
3751: CALL_OW 112
3755: GO 3775
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3757: LD_EXP 2
3761: PUSH
3762: LD_VAR 0 1
3766: ARRAY
3767: PPUSH
3768: LD_INT 9
3770: PPUSH
3771: CALL_OW 113
// end ;
3775: GO 3457
3777: POP
3778: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 6
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 21
3791: PUSH
3792: LD_INT 1
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3926
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 6
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: LD_INT 21
3826: PUSH
3827: LD_INT 1
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: PPUSH
3838: CALL_OW 69
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3924
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3846: LD_VAR 0 2
3850: PPUSH
3851: CALL_OW 314
3855: NOT
3856: PUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_INT 9
3864: PPUSH
3865: CALL_OW 308
3869: NOT
3870: AND
3871: IFFALSE 3885
// ComMoveToArea ( j , conv_end ) ;
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 9
3880: PPUSH
3881: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3885: LD_VAR 0 2
3889: PPUSH
3890: LD_INT 9
3892: PPUSH
3893: CALL_OW 308
3897: IFFALSE 3922
// begin safeCounter := safeCounter + 1 ;
3899: LD_ADDR_EXP 15
3903: PUSH
3904: LD_EXP 15
3908: PUSH
3909: LD_INT 1
3911: PLUS
3912: ST_TO_ADDR
// RemoveUnit ( j ) ;
3913: LD_VAR 0 2
3917: PPUSH
3918: CALL_OW 64
// end ; end ;
3922: GO 3843
3924: POP
3925: POP
// end ;
3926: PPOPN 2
3928: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3929: LD_EXP 2
3933: PUSH
3934: LD_EXP 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: LD_INT 22
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 72
3957: IFFALSE 4019
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
// begin enable ;
3965: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_EXP 2
3975: PUSH
3976: LD_EXP 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: LD_INT 22
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: CALL_OW 72
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4017
// SetSide ( i , 6 ) ;
4003: LD_VAR 0 1
4007: PPUSH
4008: LD_INT 6
4010: PPUSH
4011: CALL_OW 235
4015: GO 4000
4017: POP
4018: POP
// end ; end_of_file
4019: PPOPN 1
4021: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4022: LD_INT 0
4024: PPUSH
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 1 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// uc_nation := 1 ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// us_alert := false ;
4045: LD_ADDR_EXP 21
4049: PUSH
4050: LD_INT 0
4052: ST_TO_ADDR
// us_retreat := false ;
4053: LD_ADDR_EXP 22
4057: PUSH
4058: LD_INT 0
4060: ST_TO_ADDR
// us_patrol := false ;
4061: LD_ADDR_EXP 23
4065: PUSH
4066: LD_INT 0
4068: ST_TO_ADDR
// us_count := 0 ;
4069: LD_ADDR_EXP 24
4073: PUSH
4074: LD_INT 0
4076: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4077: LD_ADDR_VAR 0 4
4081: PUSH
4082: LD_INT 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_INT 7
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_OWVAR 67
4100: ARRAY
4101: ST_TO_ADDR
// hc_class := 1 ;
4102: LD_ADDR_OWVAR 28
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// hc_sex := sex_male ;
4110: LD_ADDR_OWVAR 27
4114: PUSH
4115: LD_INT 1
4117: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4118: LD_ADDR_OWVAR 31
4122: PUSH
4123: LD_INT 6
4125: PUSH
4126: LD_INT 3
4128: PUSH
4129: LD_INT 4
4131: PUSH
4132: LD_INT 2
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: ST_TO_ADDR
// hc_name := Jack Collins ;
4141: LD_ADDR_OWVAR 26
4145: PUSH
4146: LD_STRING Jack Collins
4148: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4149: LD_ADDR_OWVAR 29
4153: PUSH
4154: LD_INT 11
4156: PUSH
4157: LD_INT 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// hc_gallery :=  ;
4164: LD_ADDR_OWVAR 33
4168: PUSH
4169: LD_STRING 
4171: ST_TO_ADDR
// Collins := CreateHuman ;
4172: LD_ADDR_EXP 20
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4182: LD_EXP 20
4186: PPUSH
4187: LD_INT 50
4189: PPUSH
4190: CALL_OW 52
// hc_name :=  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// if Difficulty > 1 then
4202: LD_OWVAR 67
4206: PUSH
4207: LD_INT 1
4209: GREATER
4210: IFFALSE 4264
// begin bc_type := b_bunker ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 32
4219: ST_TO_ADDR
// bc_level := 5 ;
4220: LD_ADDR_OWVAR 43
4224: PUSH
4225: LD_INT 5
4227: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4228: LD_INT 40
4230: PPUSH
4231: LD_INT 33
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL_OW 47
// if Difficulty > 2 then
4241: LD_OWVAR 67
4245: PUSH
4246: LD_INT 2
4248: GREATER
4249: IFFALSE 4264
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4251: LD_INT 41
4253: PPUSH
4254: LD_INT 42
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: LD_VAR 0 4
4274: PPUSH
4275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4279: CALL_OW 44
4283: PPUSH
4284: LD_INT 50
4286: PPUSH
4287: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4291: LD_INT 0
4293: PPUSH
4294: LD_INT 3
4296: PPUSH
4297: LD_VAR 0 4
4301: PPUSH
4302: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4306: CALL_OW 44
4310: PPUSH
4311: LD_INT 56
4313: PPUSH
4314: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4318: CALL_OW 44
4322: PPUSH
4323: LD_INT 56
4325: PPUSH
4326: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4330: LD_INT 0
4332: PPUSH
4333: LD_INT 4
4335: PPUSH
4336: LD_VAR 0 4
4340: PPUSH
4341: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4345: CALL_OW 44
4349: PPUSH
4350: LD_INT 63
4352: PPUSH
4353: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4357: LD_INT 0
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: CALL_OW 380
// un := CreateHuman ;
4372: LD_ADDR_VAR 0 3
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4382: LD_VAR 0 3
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4436: LD_ADDR_VAR 0 5
4440: PUSH
4441: LD_INT 22
4443: PUSH
4444: LD_INT 1
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 30
4453: PUSH
4454: LD_INT 32
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: ST_TO_ADDR
// for i in towers do
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_VAR 0 5
4479: PUSH
4480: FOR_IN
4481: IFFALSE 4549
// begin PrepareHuman ( false , 1 , skill ) ;
4483: LD_INT 0
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4498: CALL_OW 44
4502: PPUSH
4503: LD_VAR 0 2
4507: PPUSH
4508: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 4
4519: PUSH
4520: LD_INT 3
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 3
4536: PPUSH
4537: CALL_OW 12
4541: ARRAY
4542: PPUSH
4543: CALL_OW 431
// end ;
4547: GO 4480
4549: POP
4550: POP
// PrepareHuman ( false , 1 , skill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_VAR 0 4
4561: PPUSH
4562: CALL_OW 380
// us_patrol := CreateHuman ;
4566: LD_ADDR_EXP 23
4570: PUSH
4571: CALL_OW 44
4575: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4576: LD_EXP 23
4580: PPUSH
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 48
// end ;
4594: LD_VAR 0 1
4598: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4599: LD_EXP 24
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: LD_INT 5
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_OWVAR 67
4622: ARRAY
4623: GREATEREQUAL
4624: IFFALSE 4649
4626: GO 4628
4628: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4629: LD_EXP 20
4633: PPUSH
4634: LD_STRING DPM_C2
4636: PPUSH
4637: CALL_OW 88
// us_retreat := true ;
4641: LD_ADDR_EXP 22
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// end ;
4649: END
// every 10 10$00 trigger not us_alert do var R ;
4650: LD_EXP 21
4654: NOT
4655: IFFALSE 4729
4657: GO 4659
4659: DISABLE
4660: LD_INT 0
4662: PPUSH
// begin uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4679: LD_INT 0
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 380
// R := CreateHuman ;
4692: LD_ADDR_VAR 0 1
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4702: LD_VAR 0 1
4706: PPUSH
4707: LD_STRING DPM_R1
4709: PPUSH
4710: CALL_OW 94
// Wait ( 0 0$03 ) ;
4714: LD_INT 105
4716: PPUSH
4717: CALL_OW 67
// us_retreat := true ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// end ;
4729: PPOPN 1
4731: END
// every 0 0$01 trigger us_alert do var i ;
4732: LD_EXP 21
4736: IFFALSE 4996
4738: GO 4740
4740: DISABLE
4741: LD_INT 0
4743: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4744: LD_EXP 20
4748: PPUSH
4749: LD_STRING DPM_C1
4751: PPUSH
4752: CALL_OW 88
// if UnitsInside ( us_fac ) then
4756: LD_INT 56
4758: PPUSH
4759: CALL_OW 313
4763: IFFALSE 4818
// for i in UnitsInside ( us_fac ) do
4765: LD_ADDR_VAR 0 1
4769: PUSH
4770: LD_INT 56
4772: PPUSH
4773: CALL_OW 313
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4816
// begin ComExitBuilding ( i ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_INT 69
4797: PPUSH
4798: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4802: LD_VAR 0 1
4806: PPUSH
4807: LD_INT 1
4809: PPUSH
4810: CALL_OW 183
// end ;
4814: GO 4778
4816: POP
4817: POP
// ComExitBuilding ( Collins ) ;
4818: LD_EXP 20
4822: PPUSH
4823: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4827: LD_EXP 20
4831: PPUSH
4832: LD_INT 69
4834: PPUSH
4835: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4839: LD_INT 22
4841: PUSH
4842: LD_INT 1
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 25
4851: PUSH
4852: LD_INT 2
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: CALL_OW 69
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 2
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 69
4904: PUSH
4905: LD_INT 1
4907: ARRAY
4908: PPUSH
4909: LD_INT 67
4911: PPUSH
4912: LD_INT 52
4914: PPUSH
4915: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4919: LD_INT 22
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: LD_INT 25
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4956: LD_INT 22
4958: PUSH
4959: LD_INT 1
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 25
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: PUSH
4985: LD_INT 1
4987: ARRAY
4988: PPUSH
4989: LD_INT 69
4991: PPUSH
4992: CALL_OW 180
// end ;
4996: PPOPN 1
4998: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
4999: LD_EXP 21
5003: NOT
5004: PUSH
5005: LD_INT 56
5007: PPUSH
5008: CALL_OW 255
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5060
5019: GO 5021
5021: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5022: LD_INT 56
5024: PPUSH
5025: LD_INT 2
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5041: LD_INT 56
5043: PPUSH
5044: LD_INT 3
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 5
5055: PPUSH
5056: CALL_OW 185
// end ;
5060: END
// every 0 0$01 trigger us_patrol do
5061: LD_EXP 23
5065: IFFALSE 5113
5067: GO 5069
5069: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5070: LD_EXP 23
5074: PPUSH
5075: LD_INT 12
5077: PUSH
5078: LD_INT 5
5080: PUSH
5081: LD_INT 56
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: LD_INT 94
5089: PUSH
5090: LD_INT 34
5092: PUSH
5093: LD_INT 92
5095: PUSH
5096: LD_INT 108
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL 5114 0 2
5113: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5114: LD_INT 0
5116: PPUSH
5117: PPUSH
5118: PPUSH
5119: PPUSH
// s = 1 ;
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// turn := true ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: LD_INT 1
5135: ST_TO_ADDR
// while ( un and not us_alert ) do
5136: LD_VAR 0 1
5140: PUSH
5141: LD_EXP 21
5145: NOT
5146: AND
5147: IFFALSE 5326
// begin wait ( 35 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// if not HasTask ( un ) then
5156: LD_VAR 0 1
5160: PPUSH
5161: CALL_OW 314
5165: NOT
5166: IFFALSE 5285
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5168: LD_VAR 0 1
5172: PPUSH
5173: LD_VAR 0 2
5177: PUSH
5178: LD_VAR 0 4
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 1
5196: PLUS
5197: ARRAY
5198: PPUSH
5199: CALL_OW 111
// if s + 2 > points then
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 2
5210: PLUS
5211: PUSH
5212: LD_VAR 0 2
5216: GREATER
5217: IFFALSE 5227
// turn := false ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 0
5226: ST_TO_ADDR
// if s - 2 < 1 then
5227: LD_VAR 0 4
5231: PUSH
5232: LD_INT 2
5234: MINUS
5235: PUSH
5236: LD_INT 1
5238: LESS
5239: IFFALSE 5249
// turn := true ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// if turn then
5249: LD_VAR 0 6
5253: IFFALSE 5271
// s := s + 2 else
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_VAR 0 4
5264: PUSH
5265: LD_INT 2
5267: PLUS
5268: ST_TO_ADDR
5269: GO 5285
// s := s - 2 ;
5271: LD_ADDR_VAR 0 4
5275: PUSH
5276: LD_VAR 0 4
5280: PUSH
5281: LD_INT 2
5283: MINUS
5284: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 256
5294: PUSH
5295: LD_INT 1000
5297: LESS
5298: PUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_VAR 0 1
5306: PPUSH
5307: CALL_OW 292
5311: OR
5312: IFFALSE 5324
// begin us_alert := true ;
5314: LD_ADDR_EXP 21
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// break ;
5322: GO 5326
// end ; end ;
5324: GO 5136
// ComEnterUnit ( un , us_arm ) ;
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 69
5333: PPUSH
5334: CALL_OW 120
// end ;
5338: LD_VAR 0 3
5342: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5343: LD_EXP 22
5347: IFFALSE 5522
5349: GO 5351
5351: DISABLE
5352: LD_INT 0
5354: PPUSH
5355: PPUSH
// begin point := false ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 0
5363: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5364: LD_INT 5
5366: PPUSH
5367: LD_INT 22
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PPUSH
5377: CALL_OW 70
5381: PUSH
5382: LD_INT 0
5384: EQUAL
5385: IFFALSE 5397
// point := us_ret1 else
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_INT 3
5394: ST_TO_ADDR
5395: GO 5438
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 22
5402: PUSH
5403: LD_INT 3
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PPUSH
5410: CALL_OW 70
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5430
// point := us_ret2 else
5420: LD_ADDR_VAR 0 2
5424: PUSH
5425: LD_INT 2
5427: ST_TO_ADDR
5428: GO 5438
// point := us_ret3 ;
5430: LD_ADDR_VAR 0 2
5434: PUSH
5435: LD_INT 4
5437: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5438: LD_ADDR_VAR 0 1
5442: PUSH
5443: LD_INT 22
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 21
5455: PUSH
5456: LD_INT 1
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5520
// begin if IsInUnit ( i ) then
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL_OW 310
5484: IFFALSE 5504
// begin ComExitBuilding ( i ) ;
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 122
// ComExitVehicle ( i ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 173
// end ;
5518: GO 5472
5520: POP
5521: POP
// end ;
5522: PPOPN 2
5524: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5525: LD_EXP 22
5529: PUSH
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_INT 1
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PPUSH
5543: CALL_OW 70
5547: AND
5548: IFFALSE 5594
5550: GO 5552
5552: DISABLE
// begin enable ;
5553: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5554: LD_INT 3
5556: PPUSH
5557: LD_INT 22
5559: PUSH
5560: LD_INT 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 64
// if medal1 then
5580: LD_EXP 3
5584: IFFALSE 5594
// medal1 := false ;
5586: LD_ADDR_EXP 3
5590: PUSH
5591: LD_INT 0
5593: ST_TO_ADDR
// end ;
5594: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5595: LD_EXP 22
5599: PUSH
5600: LD_INT 2
5602: PPUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 70
5617: AND
5618: IFFALSE 5664
5620: GO 5622
5622: DISABLE
// begin enable ;
5623: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 22
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 70
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: CALL_OW 64
// if medal1 then
5650: LD_EXP 3
5654: IFFALSE 5664
// medal1 := false ;
5656: LD_ADDR_EXP 3
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// end ;
5664: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5665: LD_EXP 22
5669: PUSH
5670: LD_INT 4
5672: PPUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 70
5687: AND
5688: IFFALSE 5734
5690: GO 5692
5692: DISABLE
// begin enable ;
5693: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_INT 1
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 70
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: CALL_OW 64
// if medal1 then
5720: LD_EXP 3
5724: IFFALSE 5734
// medal1 := false ;
5726: LD_ADDR_EXP 3
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// end ;
5734: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5735: LD_INT 22
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: LD_INT 0
5752: EQUAL
5753: IFFALSE 5766
5755: GO 5757
5757: DISABLE
// us_retreat := false ;
5758: LD_ADDR_EXP 22
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
5766: END
// export function CounterAttack ; var i , j , un , skill ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5790: LD_ADDR_VAR 0 5
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 5
5800: PUSH
5801: LD_INT 5
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: PUSH
5809: LD_OWVAR 67
5813: ARRAY
5814: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5815: LD_ADDR_VAR 0 2
5819: PUSH
5820: DOUBLE
5821: LD_INT 1
5823: DEC
5824: ST_TO_ADDR
5825: LD_INT 4
5827: PUSH
5828: LD_INT 5
5830: PUSH
5831: LD_INT 6
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_OWVAR 67
5843: ARRAY
5844: PUSH
5845: FOR_TO
5846: IFFALSE 6062
// begin uc_side := 1 ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// uc_nation := 1 ;
5856: LD_ADDR_OWVAR 21
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_INT 2
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: CALL_OW 12
5893: ARRAY
5894: ST_TO_ADDR
// vc_engine := engine_combustion ;
5895: LD_ADDR_OWVAR 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// vc_control := control_manual ;
5903: LD_ADDR_OWVAR 38
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5911: LD_ADDR_OWVAR 40
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: LD_INT 5
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: LD_INT 1
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 12
5940: ARRAY
5941: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5942: LD_ADDR_OWVAR 41
5946: PUSH
5947: LD_INT 88
5949: PPUSH
5950: LD_INT 99
5952: PPUSH
5953: CALL_OW 12
5957: ST_TO_ADDR
// un := CreateVehicle ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: CALL_OW 45
5967: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5968: LD_VAR 0 4
5972: PPUSH
5973: LD_INT 64
5975: PPUSH
5976: LD_INT 117
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5986: LD_INT 0
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_VAR 0 5
5996: PPUSH
5997: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6001: CALL_OW 44
6005: PPUSH
6006: LD_VAR 0 4
6010: PPUSH
6011: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6015: LD_ADDR_EXP 12
6019: PUSH
6020: LD_EXP 12
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 2
6037: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6038: LD_VAR 0 4
6042: PPUSH
6043: LD_INT 60
6045: PPUSH
6046: LD_INT 109
6048: PPUSH
6049: CALL_OW 111
// Wait ( 0 0$02 ) ;
6053: LD_INT 70
6055: PPUSH
6056: CALL_OW 67
// end ;
6060: GO 5845
6062: POP
6063: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6064: LD_INT 62
6066: PPUSH
6067: LD_INT 113
6069: PPUSH
6070: LD_INT 3
6072: PPUSH
6073: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6077: LD_INT 22
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: IFFALSE 6292
// begin Wait ( 0 0$01 ) ;
6093: LD_INT 35
6095: PPUSH
6096: CALL_OW 67
// for i = 1 to us_force do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_EXP 12
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6151
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6118: LD_EXP 12
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PPUSH
6129: LD_EXP 12
6133: PUSH
6134: LD_VAR 0 2
6138: ARRAY
6139: PPUSH
6140: CALL 10679 0 1
6144: PPUSH
6145: CALL_OW 115
6149: GO 6115
6151: POP
6152: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6153: LD_INT 22
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 25
6165: PUSH
6166: LD_INT 3
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: EMPTY
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 69
6195: IFFALSE 6290
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 55
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6288
// if not IsInArea ( j , conv_end ) then
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_INT 9
6255: PPUSH
6256: CALL_OW 308
6260: NOT
6261: IFFALSE 6277
// ComMoveToArea ( j , conv_end ) else
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 9
6270: PPUSH
6271: CALL_OW 113
6275: GO 6286
// RemoveUnit ( j ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: CALL_OW 64
6286: GO 6245
6288: POP
6289: POP
// end ;
6290: GO 6077
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareArabian ; begin
6297: LD_INT 0
6299: PPUSH
// RobertFarmer ;
6300: CALL 6321 0 0
// PrepareHovercrafts ;
6304: CALL 7318 0 0
// ar_attacks := true ;
6308: LD_ADDR_EXP 10
6312: PUSH
6313: LD_INT 1
6315: ST_TO_ADDR
// end ;
6316: LD_VAR 0 1
6320: RET
// export Farmer ; export function RobertFarmer ; begin
6321: LD_INT 0
6323: PPUSH
// uc_side := 2 ;
6324: LD_ADDR_OWVAR 20
6328: PUSH
6329: LD_INT 2
6331: ST_TO_ADDR
// uc_nation := 2 ;
6332: LD_ADDR_OWVAR 21
6336: PUSH
6337: LD_INT 2
6339: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6340: LD_ADDR_EXP 25
6344: PUSH
6345: LD_STRING Farmer
6347: PPUSH
6348: CALL_OW 25
6352: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6353: LD_EXP 25
6357: PPUSH
6358: LD_STRING DPM_F1
6360: PPUSH
6361: CALL_OW 94
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
// uc_side := 2 ;
6377: LD_ADDR_OWVAR 20
6381: PUSH
6382: LD_INT 2
6384: ST_TO_ADDR
// uc_nation := 2 ;
6385: LD_ADDR_OWVAR 21
6389: PUSH
6390: LD_INT 2
6392: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 4
6400: PUSH
6401: LD_INT 6
6403: PUSH
6404: LD_INT 7
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_OWVAR 67
6416: ARRAY
6417: ST_TO_ADDR
// Randomize ;
6418: CALL_OW 10
// case type of 1 :
6422: LD_VAR 0 1
6426: PUSH
6427: LD_INT 1
6429: DOUBLE
6430: EQUAL
6431: IFTRUE 6435
6433: GO 6573
6435: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 3
6448: PUSH
6449: LD_INT 4
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 67
6464: ARRAY
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6569
// begin uc_side := 2 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 2
6476: ST_TO_ADDR
// uc_nation := 2 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 2
6484: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6485: LD_INT 0
6487: PPUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: LD_INT 8
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PUSH
6502: LD_INT 1
6504: PPUSH
6505: LD_INT 3
6507: PPUSH
6508: CALL_OW 12
6512: ARRAY
6513: PPUSH
6514: LD_VAR 0 6
6518: PPUSH
6519: CALL_OW 380
// un := CreateHuman ;
6523: LD_ADDR_VAR 0 4
6527: PUSH
6528: CALL_OW 44
6532: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6533: LD_VAR 0 4
6537: PPUSH
6538: LD_INT 18
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 113
// Wait ( 0 0$01 ) ;
6560: LD_INT 35
6562: PPUSH
6563: CALL_OW 67
// end ;
6567: GO 6466
6569: POP
6570: POP
// end ; 2 :
6571: GO 7313
6573: LD_INT 2
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6907
6581: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: LD_INT 6
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6692
// begin uc_side := 2 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 2
6622: ST_TO_ADDR
// uc_nation := 2 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 2
6630: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6631: LD_INT 0
6633: PPUSH
6634: LD_INT 1
6636: PPUSH
6637: LD_VAR 0 6
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6656: LD_VAR 0 4
6660: PPUSH
6661: LD_INT 17
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6671: LD_VAR 0 4
6675: PPUSH
6676: LD_INT 19
6678: PPUSH
6679: CALL_OW 113
// Wait ( 0 0$01 ) ;
6683: LD_INT 35
6685: PPUSH
6686: CALL_OW 67
// end ;
6690: GO 6612
6692: POP
6693: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6694: LD_ADDR_VAR 0 3
6698: PUSH
6699: DOUBLE
6700: LD_INT 1
6702: DEC
6703: ST_TO_ADDR
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: LD_OWVAR 67
6722: ARRAY
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6903
// begin uc_side := 2 ;
6727: LD_ADDR_OWVAR 20
6731: PUSH
6732: LD_INT 2
6734: ST_TO_ADDR
// uc_nation := 2 ;
6735: LD_ADDR_OWVAR 21
6739: PUSH
6740: LD_INT 2
6742: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6743: LD_ADDR_OWVAR 37
6747: PUSH
6748: LD_INT 13
6750: PUSH
6751: LD_INT 14
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 1
6760: PPUSH
6761: LD_INT 2
6763: PPUSH
6764: CALL_OW 12
6768: ARRAY
6769: ST_TO_ADDR
// vc_engine := engine_combustion ;
6770: LD_ADDR_OWVAR 39
6774: PUSH
6775: LD_INT 1
6777: ST_TO_ADDR
// vc_control := control_manual ;
6778: LD_ADDR_OWVAR 38
6782: PUSH
6783: LD_INT 1
6785: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6786: LD_ADDR_OWVAR 40
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 27
6799: PUSH
6800: LD_INT 28
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 5
6818: PPUSH
6819: CALL_OW 12
6823: ARRAY
6824: ST_TO_ADDR
// veh := CreateVehicle ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 45
6834: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6835: LD_VAR 0 5
6839: PPUSH
6840: LD_INT 17
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6850: LD_INT 0
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 6
6860: PPUSH
6861: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6865: CALL_OW 44
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6879: LD_VAR 0 5
6883: PPUSH
6884: LD_INT 89
6886: PPUSH
6887: LD_INT 40
6889: PPUSH
6890: CALL_OW 111
// Wait ( 0 0$02 ) ;
6894: LD_INT 70
6896: PPUSH
6897: CALL_OW 67
// end ;
6901: GO 6724
6903: POP
6904: POP
// end ; 3 :
6905: GO 7313
6907: LD_INT 3
6909: DOUBLE
6910: EQUAL
6911: IFTRUE 6915
6913: GO 7312
6915: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 3
6928: PUSH
6929: LD_INT 4
6931: PUSH
6932: LD_INT 5
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: PUSH
6940: LD_OWVAR 67
6944: ARRAY
6945: PUSH
6946: LD_OWVAR 1
6950: PUSH
6951: LD_INT 31500
6953: DIV
6954: PLUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7087
// begin uc_side := 2 ;
6959: LD_ADDR_OWVAR 20
6963: PUSH
6964: LD_INT 2
6966: ST_TO_ADDR
// uc_nation := 2 ;
6967: LD_ADDR_OWVAR 21
6971: PUSH
6972: LD_INT 2
6974: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PUSH
6981: LD_INT 8
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 1
6990: PPUSH
6991: LD_INT 2
6993: PPUSH
6994: CALL_OW 12
6998: ARRAY
6999: PPUSH
7000: LD_VAR 0 6
7004: PPUSH
7005: CALL_OW 380
// un := CreateHuman ;
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: CALL_OW 44
7018: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: LD_INT 17
7026: PPUSH
7027: LD_INT 0
7029: PPUSH
7030: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7034: LD_ADDR_EXP 11
7038: PUSH
7039: LD_EXP 11
7043: PPUSH
7044: LD_EXP 11
7048: PUSH
7049: LD_INT 1
7051: PLUS
7052: PPUSH
7053: LD_VAR 0 5
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7063: LD_VAR 0 4
7067: PPUSH
7068: LD_INT 17
7070: PPUSH
7071: LD_INT 9
7073: PPUSH
7074: CALL_OW 111
// Wait ( 0 0$01 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// end ;
7085: GO 6956
7087: POP
7088: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_INT 4
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_OWVAR 67
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7308
// begin uc_side := 2 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 2
7129: ST_TO_ADDR
// uc_nation := 2 ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 2
7137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7138: LD_ADDR_OWVAR 37
7142: PUSH
7143: LD_INT 14
7145: ST_TO_ADDR
// vc_engine := engine_combustion ;
7146: LD_ADDR_OWVAR 39
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// vc_control := control_manual ;
7154: LD_ADDR_OWVAR 38
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7162: LD_ADDR_OWVAR 40
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 27
7172: PUSH
7173: LD_INT 28
7175: PUSH
7176: LD_INT 26
7178: PUSH
7179: LD_INT 92
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 1
7191: PPUSH
7192: LD_INT 5
7194: PPUSH
7195: CALL_OW 12
7199: ARRAY
7200: ST_TO_ADDR
// veh := CreateVehicle ;
7201: LD_ADDR_VAR 0 5
7205: PUSH
7206: CALL_OW 45
7210: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7211: LD_VAR 0 5
7215: PPUSH
7216: LD_INT 16
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7226: LD_INT 0
7228: PPUSH
7229: LD_INT 3
7231: PPUSH
7232: LD_VAR 0 6
7236: PPUSH
7237: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7241: CALL_OW 44
7245: PPUSH
7246: LD_VAR 0 5
7250: PPUSH
7251: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7255: LD_ADDR_EXP 11
7259: PUSH
7260: LD_EXP 11
7264: PPUSH
7265: LD_EXP 11
7269: PUSH
7270: LD_INT 1
7272: PLUS
7273: PPUSH
7274: LD_VAR 0 5
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7284: LD_VAR 0 5
7288: PPUSH
7289: LD_INT 125
7291: PPUSH
7292: LD_INT 31
7294: PPUSH
7295: CALL_OW 111
// Wait ( 0 0$02 ) ;
7299: LD_INT 70
7301: PPUSH
7302: CALL_OW 67
// end ;
7306: GO 7119
7308: POP
7309: POP
// end ; end ;
7310: GO 7313
7312: POP
// end ;
7313: LD_VAR 0 2
7317: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
// areas := [ river1 , river2 ] ;
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: LD_INT 14
7332: PUSH
7333: LD_INT 15
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: LD_INT 6
7350: PUSH
7351: LD_INT 7
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_OWVAR 67
7363: ARRAY
7364: ST_TO_ADDR
// uc_side := 2 ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_INT 2
7372: ST_TO_ADDR
// uc_nation := 2 ;
7373: LD_ADDR_OWVAR 21
7377: PUSH
7378: LD_INT 2
7380: ST_TO_ADDR
// hc_name :=  ;
7381: LD_ADDR_OWVAR 26
7385: PUSH
7386: LD_STRING 
7388: ST_TO_ADDR
// hc_gallery :=  ;
7389: LD_ADDR_OWVAR 33
7393: PUSH
7394: LD_STRING 
7396: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_INT 1
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: LD_OWVAR 67
7425: ARRAY
7426: PUSH
7427: FOR_TO
7428: IFFALSE 7580
// begin uc_side := 2 ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_INT 2
7437: ST_TO_ADDR
// uc_nation := 2 ;
7438: LD_ADDR_OWVAR 21
7442: PUSH
7443: LD_INT 2
7445: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7446: LD_ADDR_OWVAR 37
7450: PUSH
7451: LD_INT 11
7453: ST_TO_ADDR
// vc_engine := engine_solar ;
7454: LD_ADDR_OWVAR 39
7458: PUSH
7459: LD_INT 2
7461: ST_TO_ADDR
// vc_control := control_manual ;
7462: LD_ADDR_OWVAR 38
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7470: LD_ADDR_OWVAR 40
7474: PUSH
7475: LD_INT 24
7477: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7478: LD_ADDR_OWVAR 41
7482: PUSH
7483: LD_INT 100
7485: ST_TO_ADDR
// un := CreateVehicle ;
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: CALL_OW 45
7495: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_INT 121
7503: PPUSH
7504: LD_INT 69
7506: PPUSH
7507: LD_INT 4
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 3
7522: PPUSH
7523: LD_VAR 0 5
7527: PPUSH
7528: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7532: CALL_OW 44
7536: PPUSH
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7546: LD_ADDR_EXP 9
7550: PUSH
7551: LD_EXP 9
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: LD_VAR 0 3
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PPUSH
7573: CALL_OW 2
7577: ST_TO_ADDR
// end ;
7578: GO 7427
7580: POP
7581: POP
// end ;
7582: LD_VAR 0 1
7586: RET
// every 0 0$01 trigger riv do var i , c ;
7587: LD_EXP 9
7591: IFFALSE 8026
7593: GO 7595
7595: DISABLE
7596: LD_INT 0
7598: PPUSH
7599: PPUSH
// begin enable ;
7600: ENABLE
// for i = riv downto 1 do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: DOUBLE
7607: LD_EXP 9
7611: INC
7612: ST_TO_ADDR
7613: LD_INT 1
7615: PUSH
7616: FOR_DOWNTO
7617: IFFALSE 8024
// begin if not riv [ i ] [ 1 ] then
7619: LD_EXP 9
7623: PUSH
7624: LD_VAR 0 1
7628: ARRAY
7629: PUSH
7630: LD_INT 1
7632: ARRAY
7633: NOT
7634: IFFALSE 7656
// begin riv := Delete ( riv , 1 ) ;
7636: LD_ADDR_EXP 9
7640: PUSH
7641: LD_EXP 9
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// break ;
7654: GO 8024
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: CALL_OW 314
7675: NOT
7676: IFFALSE 7744
// begin if riv [ i ] [ 2 ] = 1 then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 2
7691: ARRAY
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7708
// c := 2 else
7698: LD_ADDR_VAR 0 2
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
7706: GO 7716
// c := 1 ;
7708: LD_ADDR_VAR 0 2
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7716: LD_ADDR_EXP 9
7720: PUSH
7721: LD_EXP 9
7725: PPUSH
7726: LD_VAR 0 1
7730: PPUSH
7731: LD_INT 2
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 10422 0 4
7743: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7744: LD_EXP 9
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: PPUSH
7759: LD_INT 14
7761: PUSH
7762: LD_INT 15
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: ARRAY
7784: PPUSH
7785: CALL_OW 308
7789: NOT
7790: IFFALSE 8022
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7792: LD_EXP 9
7796: PUSH
7797: LD_VAR 0 1
7801: ARRAY
7802: PUSH
7803: LD_INT 1
7805: ARRAY
7806: PPUSH
7807: CALL_OW 261
7811: PUSH
7812: LD_INT 50
7814: LESS
7815: IFFALSE 7839
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7817: LD_EXP 9
7821: PUSH
7822: LD_VAR 0 1
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_INT 67
7834: PPUSH
7835: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 22
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_EXP 9
7873: PUSH
7874: LD_VAR 0 1
7878: ARRAY
7879: PUSH
7880: LD_INT 1
7882: ARRAY
7883: PPUSH
7884: CALL_OW 74
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 9
7896: LESS
7897: IFFALSE 7955
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7899: LD_EXP 9
7903: PUSH
7904: LD_VAR 0 1
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: PPUSH
7929: LD_EXP 9
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: CALL_OW 74
7948: PPUSH
7949: CALL_OW 115
7953: GO 8022
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7955: LD_EXP 9
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: PPUSH
7970: LD_INT 14
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_EXP 9
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PUSH
7991: LD_INT 2
7993: ARRAY
7994: ARRAY
7995: PPUSH
7996: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8000: LD_EXP 9
8004: PUSH
8005: LD_VAR 0 1
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_INT 350
8017: PPUSH
8018: CALL_OW 202
// end ; end ; end ;
8022: GO 7616
8024: POP
8025: POP
// end ;
8026: PPOPN 2
8028: END
// every 10 10$00 trigger convoy_start do var i , un ;
8029: LD_EXP 7
8033: IFFALSE 8154
8035: GO 8037
8037: DISABLE
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
// begin enable ;
8042: ENABLE
// for i = 1 to 2 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 2
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8152
// begin uc_side := 2 ;
8059: LD_ADDR_OWVAR 20
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// uc_nation := 2 ;
8067: LD_ADDR_OWVAR 21
8071: PUSH
8072: LD_INT 2
8074: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8075: LD_INT 0
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: LD_INT 4
8083: PPUSH
8084: CALL_OW 380
// un := CreateHuman ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: CALL_OW 44
8097: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_INT 10
8105: PPUSH
8106: LD_INT 2
8108: PPUSH
8109: LD_INT 0
8111: PPUSH
8112: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8116: LD_VAR 0 2
8120: PPUSH
8121: LD_INT 24
8123: PPUSH
8124: LD_INT 36
8126: PPUSH
8127: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8131: LD_VAR 0 2
8135: PPUSH
8136: LD_INT 9
8138: PPUSH
8139: CALL_OW 173
// Wait ( 0 0$02 ) ;
8143: LD_INT 70
8145: PPUSH
8146: CALL_OW 67
// end ;
8150: GO 8056
8152: POP
8153: POP
// end ;
8154: PPOPN 2
8156: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 69
8171: IFFALSE 8483
8173: GO 8175
8175: DISABLE
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin enable ;
8180: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8181: LD_ADDR_VAR 0 2
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: LD_EXP 11
8205: DIFF
8206: ST_TO_ADDR
// if rest then
8207: LD_VAR 0 2
8211: IFFALSE 8283
// for i in rest do
8213: LD_ADDR_VAR 0 1
8217: PUSH
8218: LD_VAR 0 2
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8281
// if GetClass ( i ) = 3 then
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 257
8235: PUSH
8236: LD_INT 3
8238: EQUAL
8239: IFFALSE 8279
// begin if not IsInArea ( i , ar2 ) then
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 17
8248: PPUSH
8249: CALL_OW 308
8253: NOT
8254: IFFALSE 8270
// ComMoveToArea ( i , ar2 ) else
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_INT 17
8263: PPUSH
8264: CALL_OW 113
8268: GO 8279
// RemoveUnit ( i ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 64
// end ;
8279: GO 8223
8281: POP
8282: POP
// if ar_force then
8283: LD_EXP 11
8287: IFFALSE 8483
// begin if ar_force > 15 then
8289: LD_EXP 11
8293: PUSH
8294: LD_INT 15
8296: GREATER
8297: IFFALSE 8314
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8299: LD_EXP 11
8303: PPUSH
8304: LD_INT 58
8306: PPUSH
8307: LD_INT 51
8309: PPUSH
8310: CALL_OW 114
// for i in ar_force do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 11
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8481
// begin if GetClass ( i ) = class_soldier then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 257
8336: PUSH
8337: LD_INT 1
8339: EQUAL
8340: IFFALSE 8432
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8342: LD_VAR 0 1
8346: PPUSH
8347: CALL 10679 0 1
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: IN
8367: IFFALSE 8413
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8369: LD_VAR 0 1
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL 10679 0 1
8383: PPUSH
8384: CALL_OW 250
8388: PPUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL 10679 0 1
8398: PPUSH
8399: CALL_OW 251
8403: PPUSH
8404: LD_INT 0
8406: PPUSH
8407: CALL_OW 132
8411: GO 8432
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL 10679 0 1
8427: PPUSH
8428: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 257
8441: PUSH
8442: LD_INT 1
8444: EQUAL
8445: NOT
8446: PUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 314
8456: NOT
8457: AND
8458: IFFALSE 8479
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8460: LD_VAR 0 1
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL 10679 0 1
8474: PPUSH
8475: CALL_OW 115
// end ;
8479: GO 8324
8481: POP
8482: POP
// end ; end ;
8483: PPOPN 2
8485: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8486: LD_INT 9
8488: PPUSH
8489: LD_INT 22
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: IFFALSE 8516
8505: GO 8507
8507: DISABLE
// medal2 := false ; end_of_file
8508: LD_ADDR_EXP 4
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
8516: END
// export function Action ; begin
8517: LD_INT 0
8519: PPUSH
// case Query ( info ) of 1 :
8520: LD_STRING info
8522: PPUSH
8523: CALL_OW 97
8527: PUSH
8528: LD_INT 1
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8539
8536: POP
// ; end ;
8537: GO 8540
8539: POP
// ChangeMissionObjectives ( PM_1 ) ;
8540: LD_STRING PM_1
8542: PPUSH
8543: CALL_OW 337
// SaveForQuickRestart ;
8547: CALL_OW 22
// end ;
8551: LD_VAR 0 1
8555: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8556: LD_INT 50
8558: PPUSH
8559: CALL_OW 255
8563: PUSH
8564: LD_INT 3
8566: EQUAL
8567: IFFALSE 8848
8569: GO 8571
8571: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8572: LD_EXP 16
8576: PPUSH
8577: LD_STRING DPM_S1
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING DPM_P1
8591: PPUSH
8592: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S2
8603: PPUSH
8604: CALL_OW 88
// SaveForQuickRestart ;
8608: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8612: LD_STRING PM_2
8614: PPUSH
8615: CALL_OW 337
// Wait ( 2 2$30 ) ;
8619: LD_INT 5250
8621: PPUSH
8622: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8626: LD_INT 117
8628: PPUSH
8629: LD_INT 4
8631: PPUSH
8632: CALL_OW 84
// Convoy ( 1 ) ;
8636: LD_INT 1
8638: PPUSH
8639: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// Convoy ( 2 ) ;
8650: LD_INT 2
8652: PPUSH
8653: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8657: LD_INT 3150
8659: PPUSH
8660: CALL_OW 67
// Convoy ( 3 ) ;
8664: LD_INT 3
8666: PPUSH
8667: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8671: LD_INT 8400
8673: PPUSH
8674: CALL_OW 67
// convoy_start := true ;
8678: LD_ADDR_EXP 7
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// PrepareArabian ;
8686: CALL 6297 0 0
// PrepareAttack ( 1 ) ;
8690: LD_INT 1
8692: PPUSH
8693: CALL 6370 0 1
// while ( convoy_start ) do
8697: LD_EXP 7
8701: IFFALSE 8848
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8703: LD_INT 4200
8705: PPUSH
8706: LD_INT 7350
8708: PPUSH
8709: CALL_OW 12
8713: PPUSH
8714: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8718: LD_INT 22
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL_OW 69
8732: PUSH
8733: LD_INT 20
8735: LESS
8736: IFFALSE 8753
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 2
8743: PPUSH
8744: CALL_OW 12
8748: PPUSH
8749: CALL 6370 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8753: LD_INT 1
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 12
8763: PPUSH
8764: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8768: LD_ADDR_EXP 13
8772: PUSH
8773: LD_EXP 13
8777: PUSH
8778: LD_INT 1
8780: PLUS
8781: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 4
8789: PUSH
8790: LD_INT 3
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: MOD
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: IFFALSE 8846
// begin Wait ( 1 1$20 ) ;
8813: LD_INT 2800
8815: PPUSH
8816: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8820: LD_EXP 25
8824: PPUSH
8825: LD_STRING DPM_F2
8827: PPUSH
8828: CALL_OW 94
// PrepareAttack ( 3 ) ;
8832: LD_INT 3
8834: PPUSH
8835: CALL 6370 0 1
// Wait ( 3 3$00 ) ;
8839: LD_INT 6300
8841: PPUSH
8842: CALL_OW 67
// end ; end ;
8846: GO 8697
// end ;
8848: END
// every 0 0$1 trigger safeCounter > 30 do
8849: LD_EXP 15
8853: PUSH
8854: LD_INT 30
8856: GREATER
8857: IFFALSE 8869
8859: GO 8861
8861: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8862: LD_STRING ACH_SAFE
8864: PPUSH
8865: CALL_OW 543
8869: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8870: LD_EXP 13
8874: PUSH
8875: LD_INT 3
8877: MOD
8878: PUSH
8879: LD_INT 0
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PPUSH
8893: CALL_OW 69
8897: PUSH
8898: LD_INT 0
8900: EQUAL
8901: AND
8902: IFFALSE 8919
8904: GO 8906
8906: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8907: LD_EXP 25
8911: PPUSH
8912: LD_STRING DPM_F3
8914: PPUSH
8915: CALL_OW 94
8919: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8920: LD_EXP 13
8924: PUSH
8925: LD_INT 5
8927: MOD
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: PUSH
8948: LD_INT 0
8950: EQUAL
8951: AND
8952: IFFALSE 8969
8954: GO 8956
8956: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8957: LD_EXP 25
8961: PPUSH
8962: LD_STRING DPM_F4
8964: PPUSH
8965: CALL_OW 94
8969: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8970: LD_EXP 7
8974: PUSH
8975: LD_EXP 13
8979: PUSH
8980: LD_INT 8
8982: PUSH
8983: LD_INT 9
8985: PUSH
8986: LD_INT 10
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: LD_OWVAR 67
8998: ARRAY
8999: GREATEREQUAL
9000: AND
9001: PUSH
9002: LD_INT 22
9004: PUSH
9005: LD_INT 6
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PUSH
9017: LD_INT 0
9019: EQUAL
9020: AND
9021: IFFALSE 9120
9023: GO 9025
9025: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9026: LD_EXP 17
9030: PPUSH
9031: LD_STRING DPM_PEnd
9033: PPUSH
9034: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9038: LD_STRING med1
9040: PPUSH
9041: LD_EXP 3
9045: PPUSH
9046: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9050: LD_STRING med2
9052: PPUSH
9053: LD_EXP 4
9057: PPUSH
9058: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9062: LD_EXP 8
9066: PUSH
9067: LD_INT 15
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 7
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: PUSH
9081: LD_OWVAR 67
9085: ARRAY
9086: GREATEREQUAL
9087: IFFALSE 9097
// medal3 := false ;
9089: LD_ADDR_EXP 5
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9097: LD_STRING med3
9099: PPUSH
9100: LD_EXP 5
9104: PPUSH
9105: CALL_OW 101
// GiveMedals ( MAIN ) ;
9109: LD_STRING MAIN
9111: PPUSH
9112: CALL_OW 102
// YouWin ;
9116: CALL_OW 103
// end ;
9120: END
// every 4 4$10 trigger convoy_start do var i ;
9121: LD_EXP 7
9125: IFFALSE 9491
9127: GO 9129
9129: DISABLE
9130: LD_INT 0
9132: PPUSH
// begin DialogueOn ;
9133: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9137: LD_EXP 17
9141: PPUSH
9142: LD_STRING DPM_PHelp
9144: PPUSH
9145: CALL_OW 94
// DialogueOff ;
9149: CALL_OW 7
// Wait ( 0 0$30 ) ;
9153: LD_INT 1050
9155: PPUSH
9156: CALL_OW 67
// Randomize ;
9160: CALL_OW 10
// uc_side := 3 ;
9164: LD_ADDR_OWVAR 20
9168: PUSH
9169: LD_INT 3
9171: ST_TO_ADDR
// uc_nation := 3 ;
9172: LD_ADDR_OWVAR 21
9176: PUSH
9177: LD_INT 3
9179: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_INT 1
9188: DEC
9189: ST_TO_ADDR
9190: LD_INT 5
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: LD_INT 3
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_OWVAR 67
9208: ARRAY
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9251
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9213: LD_INT 0
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: LD_INT 3
9221: PPUSH
9222: CALL_OW 12
9226: PPUSH
9227: LD_INT 5
9229: PPUSH
9230: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9234: CALL_OW 44
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_INT 0
9244: PPUSH
9245: CALL_OW 49
// end ;
9249: GO 9210
9251: POP
9252: POP
// vc_chassis := ru_heavy_wheeled ;
9253: LD_ADDR_OWVAR 37
9257: PUSH
9258: LD_INT 23
9260: ST_TO_ADDR
// vc_engine := engine_combustion ;
9261: LD_ADDR_OWVAR 39
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
// vc_control := control_manual ;
9269: LD_ADDR_OWVAR 38
9273: PUSH
9274: LD_INT 1
9276: ST_TO_ADDR
// vc_weapon := 89 ;
9277: LD_ADDR_OWVAR 40
9281: PUSH
9282: LD_INT 89
9284: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9285: LD_ADDR_OWVAR 41
9289: PUSH
9290: LD_INT 88
9292: ST_TO_ADDR
// i := CreateVehicle ;
9293: LD_ADDR_VAR 0 1
9297: PUSH
9298: CALL_OW 45
9302: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: LD_INT 63
9322: PPUSH
9323: LD_INT 115
9325: PPUSH
9326: LD_INT 0
9328: PPUSH
9329: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: LD_INT 200
9343: PPUSH
9344: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9348: LD_INT 0
9350: PPUSH
9351: LD_INT 3
9353: PPUSH
9354: LD_INT 5
9356: PPUSH
9357: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9361: CALL_OW 44
9365: PPUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 52
// DialogueOn ;
9375: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9379: LD_INT 169
9381: PPUSH
9382: LD_INT 115
9384: PPUSH
9385: CALL_OW 86
// DWait ( 0 0$01 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9396: LD_INT 63
9398: PPUSH
9399: LD_INT 115
9401: PPUSH
9402: CALL_OW 86
// DWait ( 0 0$01 ) ;
9406: LD_INT 35
9408: PPUSH
9409: CALL_OW 68
// DialogueOff ;
9413: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9417: LD_VAR 0 1
9421: PPUSH
9422: LD_INT 57
9424: PPUSH
9425: LD_INT 53
9427: PPUSH
9428: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9432: LD_INT 6300
9434: PPUSH
9435: LD_INT 14700
9437: PPUSH
9438: CALL_OW 12
9442: PPUSH
9443: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9447: LD_EXP 18
9451: PPUSH
9452: LD_INT 86
9454: PPUSH
9455: LD_INT 112
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9465: LD_INT 10
9467: PPUSH
9468: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9472: LD_EXP 18
9476: PPUSH
9477: LD_STRING DPM_Sa1
9479: PPUSH
9480: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9484: LD_STRING PM_3
9486: PPUSH
9487: CALL_OW 337
// end ;
9491: PPOPN 1
9493: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_EXP 18
9501: PPUSH
9502: CALL_OW 292
9506: IFFALSE 9555
9508: GO 9510
9510: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9511: LD_EXP 18
9515: PPUSH
9516: LD_STRING DPM_Sa2
9518: PPUSH
9519: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9523: LD_STRING PM_4
9525: PPUSH
9526: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9530: LD_INT 40
9532: PPUSH
9533: LD_INT 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_INT 3
9550: PPUSH
9551: CALL_OW 235
// end ;
9555: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9556: LD_EXP 3
9560: NOT
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: PUSH
9577: LD_INT 0
9579: EQUAL
9580: AND
9581: IFFALSE 9643
9583: GO 9585
9585: DISABLE
// begin DialogueOn ;
9586: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9590: LD_EXP 16
9594: PPUSH
9595: LD_STRING DPM_S3
9597: PPUSH
9598: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9602: LD_INT 62
9604: PPUSH
9605: LD_INT 113
9607: PPUSH
9608: LD_INT 3
9610: PPUSH
9611: LD_INT 10
9613: PPUSH
9614: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9618: LD_INT 62
9620: PPUSH
9621: LD_INT 113
9623: PPUSH
9624: CALL_OW 84
// dwait ( 0 0$1 ) ;
9628: LD_INT 35
9630: PPUSH
9631: CALL_OW 68
// DialogueOff ;
9635: CALL_OW 7
// CounterAttack ;
9639: CALL 5767 0 0
// end ; end_of_file
9643: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9644: LD_VAR 0 1
9648: PPUSH
9649: CALL_OW 255
9653: PUSH
9654: LD_INT 1
9656: EQUAL
9657: IFFALSE 9693
// if not us_retreat then
9659: LD_EXP 22
9663: NOT
9664: IFFALSE 9693
// if GetClass ( h ) = 1 then
9666: LD_VAR 0 2
9670: PPUSH
9671: CALL_OW 257
9675: PUSH
9676: LD_INT 1
9678: EQUAL
9679: IFFALSE 9693
// ComEnterUnit ( h , us_arm ) ;
9681: LD_VAR 0 2
9685: PPUSH
9686: LD_INT 69
9688: PPUSH
9689: CALL_OW 120
// end ;
9693: PPOPN 2
9695: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: CALL 26994 0 1
// if GetSide ( un ) = 1 then
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 1
9717: EQUAL
9718: IFFALSE 9734
// us_count := us_count + 1 ;
9720: LD_ADDR_EXP 24
9724: PUSH
9725: LD_EXP 24
9729: PUSH
9730: LD_INT 1
9732: PLUS
9733: ST_TO_ADDR
// if un in us_force then
9734: LD_VAR 0 1
9738: PUSH
9739: LD_EXP 12
9743: IN
9744: IFFALSE 9762
// us_force := us_force diff un ;
9746: LD_ADDR_EXP 12
9750: PUSH
9751: LD_EXP 12
9755: PUSH
9756: LD_VAR 0 1
9760: DIFF
9761: ST_TO_ADDR
// if un in ar_force then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 11
9771: IN
9772: IFFALSE 9790
// ar_force := ar_force diff un ;
9774: LD_ADDR_EXP 11
9778: PUSH
9779: LD_EXP 11
9783: PUSH
9784: LD_VAR 0 1
9788: DIFF
9789: ST_TO_ADDR
// if un = Stolypin then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_EXP 16
9799: EQUAL
9800: IFFALSE 9809
// YouLost ( dead ) ;
9802: LD_STRING dead
9804: PPUSH
9805: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_INT 22
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 0
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 69
9842: IN
9843: IFFALSE 9852
// YouLost ( depot ) ;
9845: LD_STRING depot
9847: PPUSH
9848: CALL_OW 104
// if GetSide ( un ) = 6 then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: PUSH
9862: LD_INT 6
9864: EQUAL
9865: IFFALSE 9881
// dest_counter := dest_counter + 1 ;
9867: LD_ADDR_EXP 8
9871: PUSH
9872: LD_EXP 8
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ST_TO_ADDR
// end ;
9881: PPOPN 1
9883: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9884: LD_VAR 0 1
9888: PPUSH
9889: LD_VAR 0 2
9893: PPUSH
9894: CALL 27114 0 2
// if GetSide ( un ) = 1 then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 1
9910: EQUAL
9911: IFFALSE 9928
// ComMoveXY ( un , 57 , 52 ) ;
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 57
9920: PPUSH
9921: LD_INT 52
9923: PPUSH
9924: CALL_OW 111
// end ;
9928: PPOPN 2
9930: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9931: LD_EXP 21
9935: NOT
9936: IFFALSE 9986
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 3
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 2
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: AND
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 2
9970: PUSH
9971: LD_INT 3
9973: EQUAL
9974: AND
9975: OR
9976: IFFALSE 9986
// us_alert := true ;
9978: LD_ADDR_EXP 21
9982: PUSH
9983: LD_INT 1
9985: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9986: LD_VAR 0 1
9990: PUSH
9991: LD_INT 6
9993: EQUAL
9994: PUSH
9995: LD_VAR 0 2
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: PUSH
10014: LD_VAR 0 2
10018: PUSH
10019: LD_INT 6
10021: EQUAL
10022: AND
10023: OR
10024: IFFALSE 10033
// YouLost ( alat ) ;
10026: LD_STRING alat
10028: PPUSH
10029: CALL_OW 104
// end ;
10033: PPOPN 2
10035: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 2
10048: EQUAL
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 58
10057: PUSH
10058: EMPTY
10059: LIST
10060: PUSH
10061: LD_INT 21
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: IN
10080: AND
10081: IFFALSE 10202
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10083: LD_OWVAR 3
10087: PUSH
10088: LD_VAR 0 1
10092: DIFF
10093: PPUSH
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 74
10103: PPUSH
10104: CALL_OW 255
10108: PUSH
10109: LD_INT 2
10111: NONEQUAL
10112: IFFALSE 10202
// begin Wait ( 0 0$1.3 ) ;
10114: LD_INT 46
10116: PPUSH
10117: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10121: LD_VAR 0 1
10125: PPUSH
10126: CALL_OW 250
10130: PPUSH
10131: LD_VAR 0 1
10135: PPUSH
10136: CALL_OW 251
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 250
10157: PPUSH
10158: LD_VAR 0 1
10162: PPUSH
10163: CALL_OW 251
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 453
// end ; end ;
10202: PPOPN 1
10204: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10205: LD_VAR 0 2
10209: PUSH
10210: LD_INT 22
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 21
10222: PUSH
10223: LD_INT 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: IN
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL 10724 0 1
10249: PPUSH
10250: CALL_OW 255
10254: PUSH
10255: LD_INT 2
10257: EQUAL
10258: NOT
10259: AND
10260: IFFALSE 10385
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10262: LD_INT 105
10264: PPUSH
10265: LD_INT 210
10267: PPUSH
10268: CALL_OW 12
10272: PPUSH
10273: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10277: LD_VAR 0 2
10281: PPUSH
10282: CALL_OW 250
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 251
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10304: LD_VAR 0 2
10308: PPUSH
10309: CALL_OW 250
10313: PPUSH
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 251
10323: PPUSH
10324: LD_INT 3
10326: PPUSH
10327: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: CALL_OW 250
10340: PPUSH
10341: LD_VAR 0 2
10345: PPUSH
10346: CALL_OW 251
10350: PPUSH
10351: LD_INT 3
10353: PPUSH
10354: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 250
10367: PPUSH
10368: LD_VAR 0 2
10372: PPUSH
10373: CALL_OW 251
10377: PPUSH
10378: LD_INT 3
10380: PPUSH
10381: CALL_OW 453
// end ; end ;
10385: PPOPN 4
10387: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 2
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: CALL 27090 0 3
// end ;
10407: PPOPN 3
10409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL 27098 0 1
// end ; end_of_file
10419: PPOPN 1
10421: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_VAR 0 2
10441: ARRAY
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: CALL_OW 1
10457: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 7
10477: PPUSH
10478: CALL_OW 1
10482: ST_TO_ADDR
// result := tab ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 1
10492: ST_TO_ADDR
// end ;
10493: LD_VAR 0 5
10497: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
10502: PPUSH
// if not GetControl ( veh ) = control_manual then
10503: LD_VAR 0 1
10507: PPUSH
10508: CALL_OW 263
10512: PUSH
10513: LD_INT 1
10515: EQUAL
10516: NOT
10517: IFFALSE 10529
// result := false else
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
10527: GO 10674
// if veh in FilterAllUnits ( [ f_empty ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_INT 58
10536: PUSH
10537: EMPTY
10538: LIST
10539: PPUSH
10540: CALL_OW 69
10544: IN
10545: IFFALSE 10557
// result := false else
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
10555: GO 10674
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_INT 22
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 55
10581: PUSH
10582: EMPTY
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// if not filter then
10594: LD_VAR 0 4
10598: NOT
10599: IFFALSE 10611
// result := false else
10601: LD_ADDR_VAR 0 2
10605: PUSH
10606: LD_INT 0
10608: ST_TO_ADDR
10609: GO 10674
// for i = 1 to filter do
10611: LD_ADDR_VAR 0 3
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_VAR 0 4
10625: PUSH
10626: FOR_TO
10627: IFFALSE 10672
// if IsDriver ( filter [ i ] ) = veh then
10629: LD_VAR 0 4
10633: PUSH
10634: LD_VAR 0 3
10638: ARRAY
10639: PPUSH
10640: CALL 66367 0 1
10644: PUSH
10645: LD_VAR 0 1
10649: EQUAL
10650: IFFALSE 10670
// begin result := filter [ i ] ;
10652: LD_ADDR_VAR 0 2
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: LD_VAR 0 3
10666: ARRAY
10667: ST_TO_ADDR
// break ;
10668: GO 10672
// end ;
10670: GO 10626
10672: POP
10673: POP
// end ; end ;
10674: LD_VAR 0 2
10678: RET
// export function FindTarget ( unit ) ; begin
10679: LD_INT 0
10681: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 81
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: PPUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 74
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 2
10723: RET
// export function NearestUnit ( unit ) ; begin
10724: LD_INT 0
10726: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10727: LD_ADDR_VAR 0 2
10731: PUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: ST_TO_ADDR
// end ; end_of_file
10753: LD_VAR 0 2
10757: RET
// every 12 12$00 do
10758: GO 10760
10760: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 570
10766: PPUSH
10767: LD_INT 350
10769: PPUSH
10770: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10774: LD_INT 10500
10776: PPUSH
10777: LD_INT 21000
10779: PPUSH
10780: CALL_OW 12
10784: PPUSH
10785: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 570
10794: PPUSH
10795: LD_INT 350
10797: PPUSH
10798: CALL_OW 550
// end ;
10802: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10803: LD_INT 0
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// uc_nation = nation_nature ;
10810: LD_ADDR_OWVAR 21
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// uc_side = 0 ;
10818: LD_ADDR_OWVAR 20
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// l = 0 ;
10826: LD_ADDR_VAR 0 6
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10834: LD_ADDR_OWVAR 24
10838: PUSH
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 5
10844: PPUSH
10845: CALL_OW 12
10849: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10850: LD_ADDR_OWVAR 35
10854: PUSH
10855: LD_INT 5
10857: NEG
10858: PPUSH
10859: LD_INT 5
10861: PPUSH
10862: CALL_OW 12
10866: ST_TO_ADDR
// hc_gallery =  ;
10867: LD_ADDR_OWVAR 33
10871: PUSH
10872: LD_STRING 
10874: ST_TO_ADDR
// hc_class = class_apeman ;
10875: LD_ADDR_OWVAR 28
10879: PUSH
10880: LD_INT 12
10882: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10883: LD_ADDR_OWVAR 29
10887: PUSH
10888: LD_INT 11
10890: PPUSH
10891: LD_INT 13
10893: PPUSH
10894: CALL_OW 12
10898: PUSH
10899: LD_INT 10
10901: PPUSH
10902: LD_INT 11
10904: PPUSH
10905: CALL_OW 12
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// hc_sex = sex_male ;
10914: LD_ADDR_OWVAR 27
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10922: LD_ADDR_OWVAR 31
10926: PUSH
10927: LD_INT 0
10929: PPUSH
10930: LD_INT 2
10932: PPUSH
10933: CALL_OW 12
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: LD_INT 0
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// apeman = CreateHuman ;
10953: LD_ADDR_VAR 0 7
10957: PUSH
10958: CALL_OW 44
10962: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10963: LD_VAR 0 7
10967: PPUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 49
// l = l + 1 ;
10980: LD_ADDR_VAR 0 6
10984: PUSH
10985: LD_VAR 0 6
10989: PUSH
10990: LD_INT 1
10992: PLUS
10993: ST_TO_ADDR
// end until l = num1 ;
10994: LD_VAR 0 6
10998: PUSH
10999: LD_VAR 0 1
11003: EQUAL
11004: IFFALSE 10834
// l = 0 ;
11006: LD_ADDR_VAR 0 6
11010: PUSH
11011: LD_INT 0
11013: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11014: LD_ADDR_OWVAR 35
11018: PUSH
11019: LD_INT 0
11021: PPUSH
11022: LD_INT 25
11024: PPUSH
11025: CALL_OW 12
11029: ST_TO_ADDR
// hc_class = class_tiger ;
11030: LD_ADDR_OWVAR 28
11034: PUSH
11035: LD_INT 14
11037: ST_TO_ADDR
// hc_sex = sex_male ;
11038: LD_ADDR_OWVAR 27
11042: PUSH
11043: LD_INT 1
11045: ST_TO_ADDR
// hc_gallery = sandnature ;
11046: LD_ADDR_OWVAR 33
11050: PUSH
11051: LD_STRING sandnature
11053: ST_TO_ADDR
// hc_face_number = 3 ;
11054: LD_ADDR_OWVAR 34
11058: PUSH
11059: LD_INT 3
11061: ST_TO_ADDR
// tiger = CreateHuman ;
11062: LD_ADDR_VAR 0 8
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 4
11081: PPUSH
11082: LD_INT 0
11084: PPUSH
11085: CALL_OW 49
// l = l + 1 ;
11089: LD_ADDR_VAR 0 6
11093: PUSH
11094: LD_VAR 0 6
11098: PUSH
11099: LD_INT 1
11101: PLUS
11102: ST_TO_ADDR
// end until l = num2 ;
11103: LD_VAR 0 6
11107: PUSH
11108: LD_VAR 0 2
11112: EQUAL
11113: IFFALSE 11014
// l = 0 ;
11115: LD_ADDR_VAR 0 6
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11123: LD_ADDR_OWVAR 28
11127: PUSH
11128: LD_INT 18
11130: ST_TO_ADDR
// hc_gallery = sandnature ;
11131: LD_ADDR_OWVAR 33
11135: PUSH
11136: LD_STRING sandnature
11138: ST_TO_ADDR
// hc_face_number = 1 ;
11139: LD_ADDR_OWVAR 34
11143: PUSH
11144: LD_INT 1
11146: ST_TO_ADDR
// bird = CreateHuman ;
11147: LD_ADDR_VAR 0 9
11151: PUSH
11152: CALL_OW 44
11156: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11157: LD_VAR 0 9
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 51
// l = l + 1 ;
11169: LD_ADDR_VAR 0 6
11173: PUSH
11174: LD_VAR 0 6
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: ST_TO_ADDR
// end until l = num3 ;
11183: LD_VAR 0 6
11187: PUSH
11188: LD_VAR 0 3
11192: EQUAL
11193: IFFALSE 11123
// end ; end_of_file end_of_file
11195: LD_VAR 0 5
11199: RET
// export globalGameSaveCounter ; every 0 0$1 do
11200: GO 11202
11202: DISABLE
// begin enable ;
11203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11204: LD_STRING updateTimer(
11206: PUSH
11207: LD_OWVAR 1
11211: STR
11212: PUSH
11213: LD_STRING );
11215: STR
11216: PPUSH
11217: CALL_OW 559
// end ;
11221: END
// every 0 0$1 do
11222: GO 11224
11224: DISABLE
// begin globalGameSaveCounter := 0 ;
11225: LD_ADDR_EXP 26
11229: PUSH
11230: LD_INT 0
11232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11233: LD_STRING setGameSaveCounter(0)
11235: PPUSH
11236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11240: LD_STRING initStreamRollete();
11242: PPUSH
11243: CALL_OW 559
// InitStreamMode ;
11247: CALL 12573 0 0
// DefineStreamItems ( false ) ;
11251: LD_INT 0
11253: PPUSH
11254: CALL 13037 0 1
// end ;
11258: END
// export function SOS_MapStart ( ) ; begin
11259: LD_INT 0
11261: PPUSH
// if streamModeActive then
11262: LD_EXP 27
11266: IFFALSE 11275
// DefineStreamItems ( true ) ;
11268: LD_INT 1
11270: PPUSH
11271: CALL 13037 0 1
// UpdateLuaVariables ( ) ;
11275: CALL 11292 0 0
// UpdateFactoryWaypoints ( ) ;
11279: CALL 25898 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11283: CALL 26155 0 0
// end ;
11287: LD_VAR 0 1
11291: RET
// function UpdateLuaVariables ( ) ; begin
11292: LD_INT 0
11294: PPUSH
// if globalGameSaveCounter then
11295: LD_EXP 26
11299: IFFALSE 11333
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11301: LD_ADDR_EXP 26
11305: PUSH
11306: LD_EXP 26
11310: PPUSH
11311: CALL 70112 0 1
11315: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11316: LD_STRING setGameSaveCounter(
11318: PUSH
11319: LD_EXP 26
11323: STR
11324: PUSH
11325: LD_STRING )
11327: STR
11328: PPUSH
11329: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11333: LD_STRING setGameDifficulty(
11335: PUSH
11336: LD_OWVAR 67
11340: STR
11341: PUSH
11342: LD_STRING )
11344: STR
11345: PPUSH
11346: CALL_OW 559
// end ;
11350: LD_VAR 0 1
11354: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11355: LD_INT 0
11357: PPUSH
// if p2 = stream_mode then
11358: LD_VAR 0 2
11362: PUSH
11363: LD_INT 100
11365: EQUAL
11366: IFFALSE 12369
// begin if not StreamModeActive then
11368: LD_EXP 27
11372: NOT
11373: IFFALSE 11383
// StreamModeActive := true ;
11375: LD_ADDR_EXP 27
11379: PUSH
11380: LD_INT 1
11382: ST_TO_ADDR
// if p3 = 0 then
11383: LD_VAR 0 3
11387: PUSH
11388: LD_INT 0
11390: EQUAL
11391: IFFALSE 11397
// InitStreamMode ;
11393: CALL 12573 0 0
// if p3 = 1 then
11397: LD_VAR 0 3
11401: PUSH
11402: LD_INT 1
11404: EQUAL
11405: IFFALSE 11415
// sRocket := true ;
11407: LD_ADDR_EXP 32
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// if p3 = 2 then
11415: LD_VAR 0 3
11419: PUSH
11420: LD_INT 2
11422: EQUAL
11423: IFFALSE 11433
// sSpeed := true ;
11425: LD_ADDR_EXP 31
11429: PUSH
11430: LD_INT 1
11432: ST_TO_ADDR
// if p3 = 3 then
11433: LD_VAR 0 3
11437: PUSH
11438: LD_INT 3
11440: EQUAL
11441: IFFALSE 11451
// sEngine := true ;
11443: LD_ADDR_EXP 33
11447: PUSH
11448: LD_INT 1
11450: ST_TO_ADDR
// if p3 = 4 then
11451: LD_VAR 0 3
11455: PUSH
11456: LD_INT 4
11458: EQUAL
11459: IFFALSE 11469
// sSpec := true ;
11461: LD_ADDR_EXP 30
11465: PUSH
11466: LD_INT 1
11468: ST_TO_ADDR
// if p3 = 5 then
11469: LD_VAR 0 3
11473: PUSH
11474: LD_INT 5
11476: EQUAL
11477: IFFALSE 11487
// sLevel := true ;
11479: LD_ADDR_EXP 34
11483: PUSH
11484: LD_INT 1
11486: ST_TO_ADDR
// if p3 = 6 then
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 6
11494: EQUAL
11495: IFFALSE 11505
// sArmoury := true ;
11497: LD_ADDR_EXP 35
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// if p3 = 7 then
11505: LD_VAR 0 3
11509: PUSH
11510: LD_INT 7
11512: EQUAL
11513: IFFALSE 11523
// sRadar := true ;
11515: LD_ADDR_EXP 36
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// if p3 = 8 then
11523: LD_VAR 0 3
11527: PUSH
11528: LD_INT 8
11530: EQUAL
11531: IFFALSE 11541
// sBunker := true ;
11533: LD_ADDR_EXP 37
11537: PUSH
11538: LD_INT 1
11540: ST_TO_ADDR
// if p3 = 9 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 9
11548: EQUAL
11549: IFFALSE 11559
// sHack := true ;
11551: LD_ADDR_EXP 38
11555: PUSH
11556: LD_INT 1
11558: ST_TO_ADDR
// if p3 = 10 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 10
11566: EQUAL
11567: IFFALSE 11577
// sFire := true ;
11569: LD_ADDR_EXP 39
11573: PUSH
11574: LD_INT 1
11576: ST_TO_ADDR
// if p3 = 11 then
11577: LD_VAR 0 3
11581: PUSH
11582: LD_INT 11
11584: EQUAL
11585: IFFALSE 11595
// sRefresh := true ;
11587: LD_ADDR_EXP 40
11591: PUSH
11592: LD_INT 1
11594: ST_TO_ADDR
// if p3 = 12 then
11595: LD_VAR 0 3
11599: PUSH
11600: LD_INT 12
11602: EQUAL
11603: IFFALSE 11613
// sExp := true ;
11605: LD_ADDR_EXP 41
11609: PUSH
11610: LD_INT 1
11612: ST_TO_ADDR
// if p3 = 13 then
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 13
11620: EQUAL
11621: IFFALSE 11631
// sDepot := true ;
11623: LD_ADDR_EXP 42
11627: PUSH
11628: LD_INT 1
11630: ST_TO_ADDR
// if p3 = 14 then
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 14
11638: EQUAL
11639: IFFALSE 11649
// sFlag := true ;
11641: LD_ADDR_EXP 43
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
// if p3 = 15 then
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 15
11656: EQUAL
11657: IFFALSE 11667
// sKamikadze := true ;
11659: LD_ADDR_EXP 51
11663: PUSH
11664: LD_INT 1
11666: ST_TO_ADDR
// if p3 = 16 then
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 16
11674: EQUAL
11675: IFFALSE 11685
// sTroll := true ;
11677: LD_ADDR_EXP 52
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// if p3 = 17 then
11685: LD_VAR 0 3
11689: PUSH
11690: LD_INT 17
11692: EQUAL
11693: IFFALSE 11703
// sSlow := true ;
11695: LD_ADDR_EXP 53
11699: PUSH
11700: LD_INT 1
11702: ST_TO_ADDR
// if p3 = 18 then
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 18
11710: EQUAL
11711: IFFALSE 11721
// sLack := true ;
11713: LD_ADDR_EXP 54
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// if p3 = 19 then
11721: LD_VAR 0 3
11725: PUSH
11726: LD_INT 19
11728: EQUAL
11729: IFFALSE 11739
// sTank := true ;
11731: LD_ADDR_EXP 56
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// if p3 = 20 then
11739: LD_VAR 0 3
11743: PUSH
11744: LD_INT 20
11746: EQUAL
11747: IFFALSE 11757
// sRemote := true ;
11749: LD_ADDR_EXP 57
11753: PUSH
11754: LD_INT 1
11756: ST_TO_ADDR
// if p3 = 21 then
11757: LD_VAR 0 3
11761: PUSH
11762: LD_INT 21
11764: EQUAL
11765: IFFALSE 11775
// sPowell := true ;
11767: LD_ADDR_EXP 58
11771: PUSH
11772: LD_INT 1
11774: ST_TO_ADDR
// if p3 = 22 then
11775: LD_VAR 0 3
11779: PUSH
11780: LD_INT 22
11782: EQUAL
11783: IFFALSE 11793
// sTeleport := true ;
11785: LD_ADDR_EXP 61
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// if p3 = 23 then
11793: LD_VAR 0 3
11797: PUSH
11798: LD_INT 23
11800: EQUAL
11801: IFFALSE 11811
// sOilTower := true ;
11803: LD_ADDR_EXP 63
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// if p3 = 24 then
11811: LD_VAR 0 3
11815: PUSH
11816: LD_INT 24
11818: EQUAL
11819: IFFALSE 11829
// sShovel := true ;
11821: LD_ADDR_EXP 64
11825: PUSH
11826: LD_INT 1
11828: ST_TO_ADDR
// if p3 = 25 then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_INT 25
11836: EQUAL
11837: IFFALSE 11847
// sSheik := true ;
11839: LD_ADDR_EXP 65
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// if p3 = 26 then
11847: LD_VAR 0 3
11851: PUSH
11852: LD_INT 26
11854: EQUAL
11855: IFFALSE 11865
// sEarthquake := true ;
11857: LD_ADDR_EXP 67
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// if p3 = 27 then
11865: LD_VAR 0 3
11869: PUSH
11870: LD_INT 27
11872: EQUAL
11873: IFFALSE 11883
// sAI := true ;
11875: LD_ADDR_EXP 68
11879: PUSH
11880: LD_INT 1
11882: ST_TO_ADDR
// if p3 = 28 then
11883: LD_VAR 0 3
11887: PUSH
11888: LD_INT 28
11890: EQUAL
11891: IFFALSE 11901
// sCargo := true ;
11893: LD_ADDR_EXP 71
11897: PUSH
11898: LD_INT 1
11900: ST_TO_ADDR
// if p3 = 29 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 29
11908: EQUAL
11909: IFFALSE 11919
// sDLaser := true ;
11911: LD_ADDR_EXP 72
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// if p3 = 30 then
11919: LD_VAR 0 3
11923: PUSH
11924: LD_INT 30
11926: EQUAL
11927: IFFALSE 11937
// sExchange := true ;
11929: LD_ADDR_EXP 73
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// if p3 = 31 then
11937: LD_VAR 0 3
11941: PUSH
11942: LD_INT 31
11944: EQUAL
11945: IFFALSE 11955
// sFac := true ;
11947: LD_ADDR_EXP 74
11951: PUSH
11952: LD_INT 1
11954: ST_TO_ADDR
// if p3 = 32 then
11955: LD_VAR 0 3
11959: PUSH
11960: LD_INT 32
11962: EQUAL
11963: IFFALSE 11973
// sPower := true ;
11965: LD_ADDR_EXP 75
11969: PUSH
11970: LD_INT 1
11972: ST_TO_ADDR
// if p3 = 33 then
11973: LD_VAR 0 3
11977: PUSH
11978: LD_INT 33
11980: EQUAL
11981: IFFALSE 11991
// sRandom := true ;
11983: LD_ADDR_EXP 76
11987: PUSH
11988: LD_INT 1
11990: ST_TO_ADDR
// if p3 = 34 then
11991: LD_VAR 0 3
11995: PUSH
11996: LD_INT 34
11998: EQUAL
11999: IFFALSE 12009
// sShield := true ;
12001: LD_ADDR_EXP 77
12005: PUSH
12006: LD_INT 1
12008: ST_TO_ADDR
// if p3 = 35 then
12009: LD_VAR 0 3
12013: PUSH
12014: LD_INT 35
12016: EQUAL
12017: IFFALSE 12027
// sTime := true ;
12019: LD_ADDR_EXP 78
12023: PUSH
12024: LD_INT 1
12026: ST_TO_ADDR
// if p3 = 36 then
12027: LD_VAR 0 3
12031: PUSH
12032: LD_INT 36
12034: EQUAL
12035: IFFALSE 12045
// sTools := true ;
12037: LD_ADDR_EXP 79
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// if p3 = 101 then
12045: LD_VAR 0 3
12049: PUSH
12050: LD_INT 101
12052: EQUAL
12053: IFFALSE 12063
// sSold := true ;
12055: LD_ADDR_EXP 44
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// if p3 = 102 then
12063: LD_VAR 0 3
12067: PUSH
12068: LD_INT 102
12070: EQUAL
12071: IFFALSE 12081
// sDiff := true ;
12073: LD_ADDR_EXP 45
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// if p3 = 103 then
12081: LD_VAR 0 3
12085: PUSH
12086: LD_INT 103
12088: EQUAL
12089: IFFALSE 12099
// sFog := true ;
12091: LD_ADDR_EXP 48
12095: PUSH
12096: LD_INT 1
12098: ST_TO_ADDR
// if p3 = 104 then
12099: LD_VAR 0 3
12103: PUSH
12104: LD_INT 104
12106: EQUAL
12107: IFFALSE 12117
// sReset := true ;
12109: LD_ADDR_EXP 49
12113: PUSH
12114: LD_INT 1
12116: ST_TO_ADDR
// if p3 = 105 then
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 105
12124: EQUAL
12125: IFFALSE 12135
// sSun := true ;
12127: LD_ADDR_EXP 50
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// if p3 = 106 then
12135: LD_VAR 0 3
12139: PUSH
12140: LD_INT 106
12142: EQUAL
12143: IFFALSE 12153
// sTiger := true ;
12145: LD_ADDR_EXP 46
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// if p3 = 107 then
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 107
12160: EQUAL
12161: IFFALSE 12171
// sBomb := true ;
12163: LD_ADDR_EXP 47
12167: PUSH
12168: LD_INT 1
12170: ST_TO_ADDR
// if p3 = 108 then
12171: LD_VAR 0 3
12175: PUSH
12176: LD_INT 108
12178: EQUAL
12179: IFFALSE 12189
// sWound := true ;
12181: LD_ADDR_EXP 55
12185: PUSH
12186: LD_INT 1
12188: ST_TO_ADDR
// if p3 = 109 then
12189: LD_VAR 0 3
12193: PUSH
12194: LD_INT 109
12196: EQUAL
12197: IFFALSE 12207
// sBetray := true ;
12199: LD_ADDR_EXP 59
12203: PUSH
12204: LD_INT 1
12206: ST_TO_ADDR
// if p3 = 110 then
12207: LD_VAR 0 3
12211: PUSH
12212: LD_INT 110
12214: EQUAL
12215: IFFALSE 12225
// sContamin := true ;
12217: LD_ADDR_EXP 60
12221: PUSH
12222: LD_INT 1
12224: ST_TO_ADDR
// if p3 = 111 then
12225: LD_VAR 0 3
12229: PUSH
12230: LD_INT 111
12232: EQUAL
12233: IFFALSE 12243
// sOil := true ;
12235: LD_ADDR_EXP 62
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
// if p3 = 112 then
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 112
12250: EQUAL
12251: IFFALSE 12261
// sStu := true ;
12253: LD_ADDR_EXP 66
12257: PUSH
12258: LD_INT 1
12260: ST_TO_ADDR
// if p3 = 113 then
12261: LD_VAR 0 3
12265: PUSH
12266: LD_INT 113
12268: EQUAL
12269: IFFALSE 12279
// sBazooka := true ;
12271: LD_ADDR_EXP 69
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// if p3 = 114 then
12279: LD_VAR 0 3
12283: PUSH
12284: LD_INT 114
12286: EQUAL
12287: IFFALSE 12297
// sMortar := true ;
12289: LD_ADDR_EXP 70
12293: PUSH
12294: LD_INT 1
12296: ST_TO_ADDR
// if p3 = 115 then
12297: LD_VAR 0 3
12301: PUSH
12302: LD_INT 115
12304: EQUAL
12305: IFFALSE 12315
// sRanger := true ;
12307: LD_ADDR_EXP 80
12311: PUSH
12312: LD_INT 1
12314: ST_TO_ADDR
// if p3 = 116 then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_INT 116
12322: EQUAL
12323: IFFALSE 12333
// sComputer := true ;
12325: LD_ADDR_EXP 81
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// if p3 = 117 then
12333: LD_VAR 0 3
12337: PUSH
12338: LD_INT 117
12340: EQUAL
12341: IFFALSE 12351
// s30 := true ;
12343: LD_ADDR_EXP 82
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// if p3 = 118 then
12351: LD_VAR 0 3
12355: PUSH
12356: LD_INT 118
12358: EQUAL
12359: IFFALSE 12369
// s60 := true ;
12361: LD_ADDR_EXP 83
12365: PUSH
12366: LD_INT 1
12368: ST_TO_ADDR
// end ; if p2 = hack_mode then
12369: LD_VAR 0 2
12373: PUSH
12374: LD_INT 101
12376: EQUAL
12377: IFFALSE 12505
// begin case p3 of 1 :
12379: LD_VAR 0 3
12383: PUSH
12384: LD_INT 1
12386: DOUBLE
12387: EQUAL
12388: IFTRUE 12392
12390: GO 12399
12392: POP
// hHackUnlimitedResources ; 2 :
12393: CALL 24644 0 0
12397: GO 12505
12399: LD_INT 2
12401: DOUBLE
12402: EQUAL
12403: IFTRUE 12407
12405: GO 12414
12407: POP
// hHackSetLevel10 ; 3 :
12408: CALL 24777 0 0
12412: GO 12505
12414: LD_INT 3
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12429
12422: POP
// hHackSetLevel10YourUnits ; 4 :
12423: CALL 24862 0 0
12427: GO 12505
12429: LD_INT 4
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12444
12437: POP
// hHackInvincible ; 5 :
12438: CALL 25310 0 0
12442: GO 12505
12444: LD_INT 5
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12459
12452: POP
// hHackInvisible ; 6 :
12453: CALL 25421 0 0
12457: GO 12505
12459: LD_INT 6
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12474
12467: POP
// hHackChangeYourSide ; 7 :
12468: CALL 25478 0 0
12472: GO 12505
12474: LD_INT 7
12476: DOUBLE
12477: EQUAL
12478: IFTRUE 12482
12480: GO 12489
12482: POP
// hHackChangeUnitSide ; 8 :
12483: CALL 25520 0 0
12487: GO 12505
12489: LD_INT 8
12491: DOUBLE
12492: EQUAL
12493: IFTRUE 12497
12495: GO 12504
12497: POP
// hHackFog ; end ;
12498: CALL 25621 0 0
12502: GO 12505
12504: POP
// end ; if p2 = game_save_mode then
12505: LD_VAR 0 2
12509: PUSH
12510: LD_INT 102
12512: EQUAL
12513: IFFALSE 12568
// begin if p3 = 1 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: IFFALSE 12535
// globalGameSaveCounter := p4 ;
12525: LD_ADDR_EXP 26
12529: PUSH
12530: LD_VAR 0 4
12534: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 2
12542: EQUAL
12543: PUSH
12544: LD_EXP 26
12548: AND
12549: IFFALSE 12568
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12551: LD_STRING setGameSaveCounter(
12553: PUSH
12554: LD_EXP 26
12558: STR
12559: PUSH
12560: LD_STRING )
12562: STR
12563: PPUSH
12564: CALL_OW 559
// end ; end ;
12568: LD_VAR 0 7
12572: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12573: LD_INT 0
12575: PPUSH
// streamModeActive := false ;
12576: LD_ADDR_EXP 27
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// normalCounter := 36 ;
12584: LD_ADDR_EXP 28
12588: PUSH
12589: LD_INT 36
12591: ST_TO_ADDR
// hardcoreCounter := 18 ;
12592: LD_ADDR_EXP 29
12596: PUSH
12597: LD_INT 18
12599: ST_TO_ADDR
// sRocket := false ;
12600: LD_ADDR_EXP 32
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sSpeed := false ;
12608: LD_ADDR_EXP 31
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sEngine := false ;
12616: LD_ADDR_EXP 33
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sSpec := false ;
12624: LD_ADDR_EXP 30
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sLevel := false ;
12632: LD_ADDR_EXP 34
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sArmoury := false ;
12640: LD_ADDR_EXP 35
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sRadar := false ;
12648: LD_ADDR_EXP 36
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sBunker := false ;
12656: LD_ADDR_EXP 37
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sHack := false ;
12664: LD_ADDR_EXP 38
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sFire := false ;
12672: LD_ADDR_EXP 39
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sRefresh := false ;
12680: LD_ADDR_EXP 40
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sExp := false ;
12688: LD_ADDR_EXP 41
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sDepot := false ;
12696: LD_ADDR_EXP 42
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sFlag := false ;
12704: LD_ADDR_EXP 43
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sKamikadze := false ;
12712: LD_ADDR_EXP 51
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sTroll := false ;
12720: LD_ADDR_EXP 52
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sSlow := false ;
12728: LD_ADDR_EXP 53
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sLack := false ;
12736: LD_ADDR_EXP 54
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sTank := false ;
12744: LD_ADDR_EXP 56
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sRemote := false ;
12752: LD_ADDR_EXP 57
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sPowell := false ;
12760: LD_ADDR_EXP 58
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sTeleport := false ;
12768: LD_ADDR_EXP 61
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sOilTower := false ;
12776: LD_ADDR_EXP 63
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sShovel := false ;
12784: LD_ADDR_EXP 64
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sSheik := false ;
12792: LD_ADDR_EXP 65
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// sEarthquake := false ;
12800: LD_ADDR_EXP 67
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// sAI := false ;
12808: LD_ADDR_EXP 68
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// sCargo := false ;
12816: LD_ADDR_EXP 71
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// sDLaser := false ;
12824: LD_ADDR_EXP 72
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// sExchange := false ;
12832: LD_ADDR_EXP 73
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sFac := false ;
12840: LD_ADDR_EXP 74
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sPower := false ;
12848: LD_ADDR_EXP 75
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sRandom := false ;
12856: LD_ADDR_EXP 76
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sShield := false ;
12864: LD_ADDR_EXP 77
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sTime := false ;
12872: LD_ADDR_EXP 78
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sTools := false ;
12880: LD_ADDR_EXP 79
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sSold := false ;
12888: LD_ADDR_EXP 44
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sDiff := false ;
12896: LD_ADDR_EXP 45
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sFog := false ;
12904: LD_ADDR_EXP 48
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sReset := false ;
12912: LD_ADDR_EXP 49
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sSun := false ;
12920: LD_ADDR_EXP 50
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// sTiger := false ;
12928: LD_ADDR_EXP 46
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// sBomb := false ;
12936: LD_ADDR_EXP 47
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// sWound := false ;
12944: LD_ADDR_EXP 55
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// sBetray := false ;
12952: LD_ADDR_EXP 59
12956: PUSH
12957: LD_INT 0
12959: ST_TO_ADDR
// sContamin := false ;
12960: LD_ADDR_EXP 60
12964: PUSH
12965: LD_INT 0
12967: ST_TO_ADDR
// sOil := false ;
12968: LD_ADDR_EXP 62
12972: PUSH
12973: LD_INT 0
12975: ST_TO_ADDR
// sStu := false ;
12976: LD_ADDR_EXP 66
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sBazooka := false ;
12984: LD_ADDR_EXP 69
12988: PUSH
12989: LD_INT 0
12991: ST_TO_ADDR
// sMortar := false ;
12992: LD_ADDR_EXP 70
12996: PUSH
12997: LD_INT 0
12999: ST_TO_ADDR
// sRanger := false ;
13000: LD_ADDR_EXP 80
13004: PUSH
13005: LD_INT 0
13007: ST_TO_ADDR
// sComputer := false ;
13008: LD_ADDR_EXP 81
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// s30 := false ;
13016: LD_ADDR_EXP 82
13020: PUSH
13021: LD_INT 0
13023: ST_TO_ADDR
// s60 := false ;
13024: LD_ADDR_EXP 83
13028: PUSH
13029: LD_INT 0
13031: ST_TO_ADDR
// end ;
13032: LD_VAR 0 1
13036: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
// result := [ ] ;
13046: LD_ADDR_VAR 0 2
13050: PUSH
13051: EMPTY
13052: ST_TO_ADDR
// if campaign_id = 1 then
13053: LD_OWVAR 69
13057: PUSH
13058: LD_INT 1
13060: EQUAL
13061: IFFALSE 16227
// begin case mission_number of 1 :
13063: LD_OWVAR 70
13067: PUSH
13068: LD_INT 1
13070: DOUBLE
13071: EQUAL
13072: IFTRUE 13076
13074: GO 13152
13076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13077: LD_ADDR_VAR 0 2
13081: PUSH
13082: LD_INT 2
13084: PUSH
13085: LD_INT 4
13087: PUSH
13088: LD_INT 11
13090: PUSH
13091: LD_INT 12
13093: PUSH
13094: LD_INT 15
13096: PUSH
13097: LD_INT 16
13099: PUSH
13100: LD_INT 22
13102: PUSH
13103: LD_INT 23
13105: PUSH
13106: LD_INT 26
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 101
13122: PUSH
13123: LD_INT 102
13125: PUSH
13126: LD_INT 106
13128: PUSH
13129: LD_INT 116
13131: PUSH
13132: LD_INT 117
13134: PUSH
13135: LD_INT 118
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: ST_TO_ADDR
13150: GO 16225
13152: LD_INT 2
13154: DOUBLE
13155: EQUAL
13156: IFTRUE 13160
13158: GO 13244
13160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: LD_INT 4
13171: PUSH
13172: LD_INT 11
13174: PUSH
13175: LD_INT 12
13177: PUSH
13178: LD_INT 15
13180: PUSH
13181: LD_INT 16
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_INT 23
13189: PUSH
13190: LD_INT 26
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 101
13206: PUSH
13207: LD_INT 102
13209: PUSH
13210: LD_INT 105
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 108
13218: PUSH
13219: LD_INT 116
13221: PUSH
13222: LD_INT 117
13224: PUSH
13225: LD_INT 118
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 16225
13244: LD_INT 3
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13340
13252: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 2
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: LD_INT 5
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: LD_INT 12
13272: PUSH
13273: LD_INT 15
13275: PUSH
13276: LD_INT 16
13278: PUSH
13279: LD_INT 22
13281: PUSH
13282: LD_INT 26
13284: PUSH
13285: LD_INT 36
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 101
13302: PUSH
13303: LD_INT 102
13305: PUSH
13306: LD_INT 105
13308: PUSH
13309: LD_INT 106
13311: PUSH
13312: LD_INT 108
13314: PUSH
13315: LD_INT 116
13317: PUSH
13318: LD_INT 117
13320: PUSH
13321: LD_INT 118
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 16225
13340: LD_INT 4
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13444
13348: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13349: LD_ADDR_VAR 0 2
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 4
13359: PUSH
13360: LD_INT 5
13362: PUSH
13363: LD_INT 8
13365: PUSH
13366: LD_INT 11
13368: PUSH
13369: LD_INT 12
13371: PUSH
13372: LD_INT 15
13374: PUSH
13375: LD_INT 16
13377: PUSH
13378: LD_INT 22
13380: PUSH
13381: LD_INT 23
13383: PUSH
13384: LD_INT 26
13386: PUSH
13387: LD_INT 36
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 101
13406: PUSH
13407: LD_INT 102
13409: PUSH
13410: LD_INT 105
13412: PUSH
13413: LD_INT 106
13415: PUSH
13416: LD_INT 108
13418: PUSH
13419: LD_INT 116
13421: PUSH
13422: LD_INT 117
13424: PUSH
13425: LD_INT 118
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: ST_TO_ADDR
13442: GO 16225
13444: LD_INT 5
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13564
13452: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: LD_INT 4
13463: PUSH
13464: LD_INT 5
13466: PUSH
13467: LD_INT 6
13469: PUSH
13470: LD_INT 8
13472: PUSH
13473: LD_INT 11
13475: PUSH
13476: LD_INT 12
13478: PUSH
13479: LD_INT 15
13481: PUSH
13482: LD_INT 16
13484: PUSH
13485: LD_INT 22
13487: PUSH
13488: LD_INT 23
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 26
13496: PUSH
13497: LD_INT 36
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 101
13518: PUSH
13519: LD_INT 102
13521: PUSH
13522: LD_INT 105
13524: PUSH
13525: LD_INT 106
13527: PUSH
13528: LD_INT 108
13530: PUSH
13531: LD_INT 109
13533: PUSH
13534: LD_INT 112
13536: PUSH
13537: LD_INT 116
13539: PUSH
13540: LD_INT 117
13542: PUSH
13543: LD_INT 118
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: ST_TO_ADDR
13562: GO 16225
13564: LD_INT 6
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13704
13572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 4
13583: PUSH
13584: LD_INT 5
13586: PUSH
13587: LD_INT 6
13589: PUSH
13590: LD_INT 8
13592: PUSH
13593: LD_INT 11
13595: PUSH
13596: LD_INT 12
13598: PUSH
13599: LD_INT 15
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: LD_INT 20
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 23
13616: PUSH
13617: LD_INT 25
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 31
13628: PUSH
13629: LD_INT 32
13631: PUSH
13632: LD_INT 36
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 101
13658: PUSH
13659: LD_INT 102
13661: PUSH
13662: LD_INT 105
13664: PUSH
13665: LD_INT 106
13667: PUSH
13668: LD_INT 108
13670: PUSH
13671: LD_INT 109
13673: PUSH
13674: LD_INT 112
13676: PUSH
13677: LD_INT 116
13679: PUSH
13680: LD_INT 117
13682: PUSH
13683: LD_INT 118
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: ST_TO_ADDR
13702: GO 16225
13704: LD_INT 7
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13824
13712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: LD_INT 4
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: LD_INT 7
13729: PUSH
13730: LD_INT 11
13732: PUSH
13733: LD_INT 12
13735: PUSH
13736: LD_INT 15
13738: PUSH
13739: LD_INT 16
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 25
13756: PUSH
13757: LD_INT 26
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 101
13778: PUSH
13779: LD_INT 102
13781: PUSH
13782: LD_INT 103
13784: PUSH
13785: LD_INT 105
13787: PUSH
13788: LD_INT 106
13790: PUSH
13791: LD_INT 108
13793: PUSH
13794: LD_INT 112
13796: PUSH
13797: LD_INT 116
13799: PUSH
13800: LD_INT 117
13802: PUSH
13803: LD_INT 118
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: ST_TO_ADDR
13822: GO 16225
13824: LD_INT 8
13826: DOUBLE
13827: EQUAL
13828: IFTRUE 13832
13830: GO 13972
13832: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_INT 2
13840: PUSH
13841: LD_INT 4
13843: PUSH
13844: LD_INT 5
13846: PUSH
13847: LD_INT 6
13849: PUSH
13850: LD_INT 7
13852: PUSH
13853: LD_INT 8
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 12
13861: PUSH
13862: LD_INT 15
13864: PUSH
13865: LD_INT 16
13867: PUSH
13868: LD_INT 20
13870: PUSH
13871: LD_INT 21
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_INT 23
13879: PUSH
13880: LD_INT 25
13882: PUSH
13883: LD_INT 26
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: LD_INT 31
13891: PUSH
13892: LD_INT 32
13894: PUSH
13895: LD_INT 36
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 101
13922: PUSH
13923: LD_INT 102
13925: PUSH
13926: LD_INT 103
13928: PUSH
13929: LD_INT 105
13931: PUSH
13932: LD_INT 106
13934: PUSH
13935: LD_INT 108
13937: PUSH
13938: LD_INT 109
13940: PUSH
13941: LD_INT 112
13943: PUSH
13944: LD_INT 116
13946: PUSH
13947: LD_INT 117
13949: PUSH
13950: LD_INT 118
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: ST_TO_ADDR
13970: GO 16225
13972: LD_INT 9
13974: DOUBLE
13975: EQUAL
13976: IFTRUE 13980
13978: GO 14128
13980: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13981: LD_ADDR_VAR 0 2
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: LD_INT 6
13997: PUSH
13998: LD_INT 7
14000: PUSH
14001: LD_INT 8
14003: PUSH
14004: LD_INT 11
14006: PUSH
14007: LD_INT 12
14009: PUSH
14010: LD_INT 15
14012: PUSH
14013: LD_INT 16
14015: PUSH
14016: LD_INT 20
14018: PUSH
14019: LD_INT 21
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 23
14027: PUSH
14028: LD_INT 25
14030: PUSH
14031: LD_INT 26
14033: PUSH
14034: LD_INT 28
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: LD_INT 31
14042: PUSH
14043: LD_INT 32
14045: PUSH
14046: LD_INT 36
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 101
14074: PUSH
14075: LD_INT 102
14077: PUSH
14078: LD_INT 103
14080: PUSH
14081: LD_INT 105
14083: PUSH
14084: LD_INT 106
14086: PUSH
14087: LD_INT 108
14089: PUSH
14090: LD_INT 109
14092: PUSH
14093: LD_INT 112
14095: PUSH
14096: LD_INT 114
14098: PUSH
14099: LD_INT 116
14101: PUSH
14102: LD_INT 117
14104: PUSH
14105: LD_INT 118
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: ST_TO_ADDR
14126: GO 16225
14128: LD_INT 10
14130: DOUBLE
14131: EQUAL
14132: IFTRUE 14136
14134: GO 14332
14136: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_INT 2
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: LD_INT 5
14150: PUSH
14151: LD_INT 6
14153: PUSH
14154: LD_INT 7
14156: PUSH
14157: LD_INT 8
14159: PUSH
14160: LD_INT 9
14162: PUSH
14163: LD_INT 10
14165: PUSH
14166: LD_INT 11
14168: PUSH
14169: LD_INT 12
14171: PUSH
14172: LD_INT 13
14174: PUSH
14175: LD_INT 14
14177: PUSH
14178: LD_INT 15
14180: PUSH
14181: LD_INT 16
14183: PUSH
14184: LD_INT 17
14186: PUSH
14187: LD_INT 18
14189: PUSH
14190: LD_INT 19
14192: PUSH
14193: LD_INT 20
14195: PUSH
14196: LD_INT 21
14198: PUSH
14199: LD_INT 22
14201: PUSH
14202: LD_INT 23
14204: PUSH
14205: LD_INT 24
14207: PUSH
14208: LD_INT 25
14210: PUSH
14211: LD_INT 26
14213: PUSH
14214: LD_INT 28
14216: PUSH
14217: LD_INT 30
14219: PUSH
14220: LD_INT 31
14222: PUSH
14223: LD_INT 32
14225: PUSH
14226: LD_INT 36
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 101
14262: PUSH
14263: LD_INT 102
14265: PUSH
14266: LD_INT 103
14268: PUSH
14269: LD_INT 104
14271: PUSH
14272: LD_INT 105
14274: PUSH
14275: LD_INT 106
14277: PUSH
14278: LD_INT 107
14280: PUSH
14281: LD_INT 108
14283: PUSH
14284: LD_INT 109
14286: PUSH
14287: LD_INT 110
14289: PUSH
14290: LD_INT 111
14292: PUSH
14293: LD_INT 112
14295: PUSH
14296: LD_INT 114
14298: PUSH
14299: LD_INT 116
14301: PUSH
14302: LD_INT 117
14304: PUSH
14305: LD_INT 118
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: ST_TO_ADDR
14330: GO 16225
14332: LD_INT 11
14334: DOUBLE
14335: EQUAL
14336: IFTRUE 14340
14338: GO 14544
14340: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14341: LD_ADDR_VAR 0 2
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 4
14354: PUSH
14355: LD_INT 5
14357: PUSH
14358: LD_INT 6
14360: PUSH
14361: LD_INT 7
14363: PUSH
14364: LD_INT 8
14366: PUSH
14367: LD_INT 9
14369: PUSH
14370: LD_INT 10
14372: PUSH
14373: LD_INT 11
14375: PUSH
14376: LD_INT 12
14378: PUSH
14379: LD_INT 13
14381: PUSH
14382: LD_INT 14
14384: PUSH
14385: LD_INT 15
14387: PUSH
14388: LD_INT 16
14390: PUSH
14391: LD_INT 17
14393: PUSH
14394: LD_INT 18
14396: PUSH
14397: LD_INT 19
14399: PUSH
14400: LD_INT 20
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 23
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: LD_INT 25
14417: PUSH
14418: LD_INT 26
14420: PUSH
14421: LD_INT 28
14423: PUSH
14424: LD_INT 30
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: LD_INT 32
14432: PUSH
14433: LD_INT 34
14435: PUSH
14436: LD_INT 36
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 101
14474: PUSH
14475: LD_INT 102
14477: PUSH
14478: LD_INT 103
14480: PUSH
14481: LD_INT 104
14483: PUSH
14484: LD_INT 105
14486: PUSH
14487: LD_INT 106
14489: PUSH
14490: LD_INT 107
14492: PUSH
14493: LD_INT 108
14495: PUSH
14496: LD_INT 109
14498: PUSH
14499: LD_INT 110
14501: PUSH
14502: LD_INT 111
14504: PUSH
14505: LD_INT 112
14507: PUSH
14508: LD_INT 114
14510: PUSH
14511: LD_INT 116
14513: PUSH
14514: LD_INT 117
14516: PUSH
14517: LD_INT 118
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: ST_TO_ADDR
14542: GO 16225
14544: LD_INT 12
14546: DOUBLE
14547: EQUAL
14548: IFTRUE 14552
14550: GO 14772
14552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14553: LD_ADDR_VAR 0 2
14557: PUSH
14558: LD_INT 1
14560: PUSH
14561: LD_INT 2
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: LD_INT 4
14569: PUSH
14570: LD_INT 5
14572: PUSH
14573: LD_INT 6
14575: PUSH
14576: LD_INT 7
14578: PUSH
14579: LD_INT 8
14581: PUSH
14582: LD_INT 9
14584: PUSH
14585: LD_INT 10
14587: PUSH
14588: LD_INT 11
14590: PUSH
14591: LD_INT 12
14593: PUSH
14594: LD_INT 13
14596: PUSH
14597: LD_INT 14
14599: PUSH
14600: LD_INT 15
14602: PUSH
14603: LD_INT 16
14605: PUSH
14606: LD_INT 17
14608: PUSH
14609: LD_INT 18
14611: PUSH
14612: LD_INT 19
14614: PUSH
14615: LD_INT 20
14617: PUSH
14618: LD_INT 21
14620: PUSH
14621: LD_INT 22
14623: PUSH
14624: LD_INT 23
14626: PUSH
14627: LD_INT 24
14629: PUSH
14630: LD_INT 25
14632: PUSH
14633: LD_INT 26
14635: PUSH
14636: LD_INT 27
14638: PUSH
14639: LD_INT 28
14641: PUSH
14642: LD_INT 30
14644: PUSH
14645: LD_INT 31
14647: PUSH
14648: LD_INT 32
14650: PUSH
14651: LD_INT 33
14653: PUSH
14654: LD_INT 34
14656: PUSH
14657: LD_INT 36
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 101
14698: PUSH
14699: LD_INT 102
14701: PUSH
14702: LD_INT 103
14704: PUSH
14705: LD_INT 104
14707: PUSH
14708: LD_INT 105
14710: PUSH
14711: LD_INT 106
14713: PUSH
14714: LD_INT 107
14716: PUSH
14717: LD_INT 108
14719: PUSH
14720: LD_INT 109
14722: PUSH
14723: LD_INT 110
14725: PUSH
14726: LD_INT 111
14728: PUSH
14729: LD_INT 112
14731: PUSH
14732: LD_INT 113
14734: PUSH
14735: LD_INT 114
14737: PUSH
14738: LD_INT 116
14740: PUSH
14741: LD_INT 117
14743: PUSH
14744: LD_INT 118
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 16225
14772: LD_INT 13
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14988
14780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14781: LD_ADDR_VAR 0 2
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: LD_INT 3
14794: PUSH
14795: LD_INT 4
14797: PUSH
14798: LD_INT 5
14800: PUSH
14801: LD_INT 8
14803: PUSH
14804: LD_INT 9
14806: PUSH
14807: LD_INT 10
14809: PUSH
14810: LD_INT 11
14812: PUSH
14813: LD_INT 12
14815: PUSH
14816: LD_INT 14
14818: PUSH
14819: LD_INT 15
14821: PUSH
14822: LD_INT 16
14824: PUSH
14825: LD_INT 17
14827: PUSH
14828: LD_INT 18
14830: PUSH
14831: LD_INT 19
14833: PUSH
14834: LD_INT 20
14836: PUSH
14837: LD_INT 21
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 23
14845: PUSH
14846: LD_INT 24
14848: PUSH
14849: LD_INT 25
14851: PUSH
14852: LD_INT 26
14854: PUSH
14855: LD_INT 27
14857: PUSH
14858: LD_INT 28
14860: PUSH
14861: LD_INT 30
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: LD_INT 33
14872: PUSH
14873: LD_INT 34
14875: PUSH
14876: LD_INT 36
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 101
14914: PUSH
14915: LD_INT 102
14917: PUSH
14918: LD_INT 103
14920: PUSH
14921: LD_INT 104
14923: PUSH
14924: LD_INT 105
14926: PUSH
14927: LD_INT 106
14929: PUSH
14930: LD_INT 107
14932: PUSH
14933: LD_INT 108
14935: PUSH
14936: LD_INT 109
14938: PUSH
14939: LD_INT 110
14941: PUSH
14942: LD_INT 111
14944: PUSH
14945: LD_INT 112
14947: PUSH
14948: LD_INT 113
14950: PUSH
14951: LD_INT 114
14953: PUSH
14954: LD_INT 116
14956: PUSH
14957: LD_INT 117
14959: PUSH
14960: LD_INT 118
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: ST_TO_ADDR
14986: GO 16225
14988: LD_INT 14
14990: DOUBLE
14991: EQUAL
14992: IFTRUE 14996
14994: GO 15220
14996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14997: LD_ADDR_VAR 0 2
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 5
15016: PUSH
15017: LD_INT 6
15019: PUSH
15020: LD_INT 7
15022: PUSH
15023: LD_INT 8
15025: PUSH
15026: LD_INT 9
15028: PUSH
15029: LD_INT 10
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 13
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: LD_INT 15
15046: PUSH
15047: LD_INT 16
15049: PUSH
15050: LD_INT 17
15052: PUSH
15053: LD_INT 18
15055: PUSH
15056: LD_INT 19
15058: PUSH
15059: LD_INT 20
15061: PUSH
15062: LD_INT 21
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 23
15070: PUSH
15071: LD_INT 24
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 27
15082: PUSH
15083: LD_INT 28
15085: PUSH
15086: LD_INT 29
15088: PUSH
15089: LD_INT 30
15091: PUSH
15092: LD_INT 31
15094: PUSH
15095: LD_INT 32
15097: PUSH
15098: LD_INT 33
15100: PUSH
15101: LD_INT 34
15103: PUSH
15104: LD_INT 36
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 101
15146: PUSH
15147: LD_INT 102
15149: PUSH
15150: LD_INT 103
15152: PUSH
15153: LD_INT 104
15155: PUSH
15156: LD_INT 105
15158: PUSH
15159: LD_INT 106
15161: PUSH
15162: LD_INT 107
15164: PUSH
15165: LD_INT 108
15167: PUSH
15168: LD_INT 109
15170: PUSH
15171: LD_INT 110
15173: PUSH
15174: LD_INT 111
15176: PUSH
15177: LD_INT 112
15179: PUSH
15180: LD_INT 113
15182: PUSH
15183: LD_INT 114
15185: PUSH
15186: LD_INT 116
15188: PUSH
15189: LD_INT 117
15191: PUSH
15192: LD_INT 118
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: ST_TO_ADDR
15218: GO 16225
15220: LD_INT 15
15222: DOUBLE
15223: EQUAL
15224: IFTRUE 15228
15226: GO 15452
15228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: LD_INT 2
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: LD_INT 4
15245: PUSH
15246: LD_INT 5
15248: PUSH
15249: LD_INT 6
15251: PUSH
15252: LD_INT 7
15254: PUSH
15255: LD_INT 8
15257: PUSH
15258: LD_INT 9
15260: PUSH
15261: LD_INT 10
15263: PUSH
15264: LD_INT 11
15266: PUSH
15267: LD_INT 12
15269: PUSH
15270: LD_INT 13
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: LD_INT 15
15278: PUSH
15279: LD_INT 16
15281: PUSH
15282: LD_INT 17
15284: PUSH
15285: LD_INT 18
15287: PUSH
15288: LD_INT 19
15290: PUSH
15291: LD_INT 20
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 23
15302: PUSH
15303: LD_INT 24
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 27
15314: PUSH
15315: LD_INT 28
15317: PUSH
15318: LD_INT 29
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 31
15326: PUSH
15327: LD_INT 32
15329: PUSH
15330: LD_INT 33
15332: PUSH
15333: LD_INT 34
15335: PUSH
15336: LD_INT 36
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 101
15378: PUSH
15379: LD_INT 102
15381: PUSH
15382: LD_INT 103
15384: PUSH
15385: LD_INT 104
15387: PUSH
15388: LD_INT 105
15390: PUSH
15391: LD_INT 106
15393: PUSH
15394: LD_INT 107
15396: PUSH
15397: LD_INT 108
15399: PUSH
15400: LD_INT 109
15402: PUSH
15403: LD_INT 110
15405: PUSH
15406: LD_INT 111
15408: PUSH
15409: LD_INT 112
15411: PUSH
15412: LD_INT 113
15414: PUSH
15415: LD_INT 114
15417: PUSH
15418: LD_INT 116
15420: PUSH
15421: LD_INT 117
15423: PUSH
15424: LD_INT 118
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: ST_TO_ADDR
15450: GO 16225
15452: LD_INT 16
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15596
15460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15461: LD_ADDR_VAR 0 2
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 4
15471: PUSH
15472: LD_INT 5
15474: PUSH
15475: LD_INT 7
15477: PUSH
15478: LD_INT 11
15480: PUSH
15481: LD_INT 12
15483: PUSH
15484: LD_INT 15
15486: PUSH
15487: LD_INT 16
15489: PUSH
15490: LD_INT 20
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 22
15498: PUSH
15499: LD_INT 23
15501: PUSH
15502: LD_INT 25
15504: PUSH
15505: LD_INT 26
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: LD_INT 31
15513: PUSH
15514: LD_INT 32
15516: PUSH
15517: LD_INT 33
15519: PUSH
15520: LD_INT 34
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 101
15546: PUSH
15547: LD_INT 102
15549: PUSH
15550: LD_INT 103
15552: PUSH
15553: LD_INT 106
15555: PUSH
15556: LD_INT 108
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 113
15564: PUSH
15565: LD_INT 114
15567: PUSH
15568: LD_INT 116
15570: PUSH
15571: LD_INT 117
15573: PUSH
15574: LD_INT 118
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: ST_TO_ADDR
15594: GO 16225
15596: LD_INT 17
15598: DOUBLE
15599: EQUAL
15600: IFTRUE 15604
15602: GO 15828
15604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_INT 1
15612: PUSH
15613: LD_INT 2
15615: PUSH
15616: LD_INT 3
15618: PUSH
15619: LD_INT 4
15621: PUSH
15622: LD_INT 5
15624: PUSH
15625: LD_INT 6
15627: PUSH
15628: LD_INT 7
15630: PUSH
15631: LD_INT 8
15633: PUSH
15634: LD_INT 9
15636: PUSH
15637: LD_INT 10
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: LD_INT 13
15648: PUSH
15649: LD_INT 14
15651: PUSH
15652: LD_INT 15
15654: PUSH
15655: LD_INT 16
15657: PUSH
15658: LD_INT 17
15660: PUSH
15661: LD_INT 18
15663: PUSH
15664: LD_INT 19
15666: PUSH
15667: LD_INT 20
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 22
15675: PUSH
15676: LD_INT 23
15678: PUSH
15679: LD_INT 24
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 26
15687: PUSH
15688: LD_INT 27
15690: PUSH
15691: LD_INT 28
15693: PUSH
15694: LD_INT 29
15696: PUSH
15697: LD_INT 30
15699: PUSH
15700: LD_INT 31
15702: PUSH
15703: LD_INT 32
15705: PUSH
15706: LD_INT 33
15708: PUSH
15709: LD_INT 34
15711: PUSH
15712: LD_INT 36
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 101
15754: PUSH
15755: LD_INT 102
15757: PUSH
15758: LD_INT 103
15760: PUSH
15761: LD_INT 104
15763: PUSH
15764: LD_INT 105
15766: PUSH
15767: LD_INT 106
15769: PUSH
15770: LD_INT 107
15772: PUSH
15773: LD_INT 108
15775: PUSH
15776: LD_INT 109
15778: PUSH
15779: LD_INT 110
15781: PUSH
15782: LD_INT 111
15784: PUSH
15785: LD_INT 112
15787: PUSH
15788: LD_INT 113
15790: PUSH
15791: LD_INT 114
15793: PUSH
15794: LD_INT 116
15796: PUSH
15797: LD_INT 117
15799: PUSH
15800: LD_INT 118
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: ST_TO_ADDR
15826: GO 16225
15828: LD_INT 18
15830: DOUBLE
15831: EQUAL
15832: IFTRUE 15836
15834: GO 15984
15836: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15837: LD_ADDR_VAR 0 2
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: LD_INT 4
15847: PUSH
15848: LD_INT 5
15850: PUSH
15851: LD_INT 7
15853: PUSH
15854: LD_INT 11
15856: PUSH
15857: LD_INT 12
15859: PUSH
15860: LD_INT 15
15862: PUSH
15863: LD_INT 16
15865: PUSH
15866: LD_INT 20
15868: PUSH
15869: LD_INT 21
15871: PUSH
15872: LD_INT 22
15874: PUSH
15875: LD_INT 23
15877: PUSH
15878: LD_INT 25
15880: PUSH
15881: LD_INT 26
15883: PUSH
15884: LD_INT 30
15886: PUSH
15887: LD_INT 31
15889: PUSH
15890: LD_INT 32
15892: PUSH
15893: LD_INT 33
15895: PUSH
15896: LD_INT 34
15898: PUSH
15899: LD_INT 35
15901: PUSH
15902: LD_INT 36
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 101
15930: PUSH
15931: LD_INT 102
15933: PUSH
15934: LD_INT 103
15936: PUSH
15937: LD_INT 106
15939: PUSH
15940: LD_INT 108
15942: PUSH
15943: LD_INT 112
15945: PUSH
15946: LD_INT 113
15948: PUSH
15949: LD_INT 114
15951: PUSH
15952: LD_INT 115
15954: PUSH
15955: LD_INT 116
15957: PUSH
15958: LD_INT 117
15960: PUSH
15961: LD_INT 118
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: ST_TO_ADDR
15982: GO 16225
15984: LD_INT 19
15986: DOUBLE
15987: EQUAL
15988: IFTRUE 15992
15990: GO 16224
15992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15993: LD_ADDR_VAR 0 2
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: LD_INT 4
16009: PUSH
16010: LD_INT 5
16012: PUSH
16013: LD_INT 6
16015: PUSH
16016: LD_INT 7
16018: PUSH
16019: LD_INT 8
16021: PUSH
16022: LD_INT 9
16024: PUSH
16025: LD_INT 10
16027: PUSH
16028: LD_INT 11
16030: PUSH
16031: LD_INT 12
16033: PUSH
16034: LD_INT 13
16036: PUSH
16037: LD_INT 14
16039: PUSH
16040: LD_INT 15
16042: PUSH
16043: LD_INT 16
16045: PUSH
16046: LD_INT 17
16048: PUSH
16049: LD_INT 18
16051: PUSH
16052: LD_INT 19
16054: PUSH
16055: LD_INT 20
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_INT 23
16066: PUSH
16067: LD_INT 24
16069: PUSH
16070: LD_INT 25
16072: PUSH
16073: LD_INT 26
16075: PUSH
16076: LD_INT 27
16078: PUSH
16079: LD_INT 28
16081: PUSH
16082: LD_INT 29
16084: PUSH
16085: LD_INT 30
16087: PUSH
16088: LD_INT 31
16090: PUSH
16091: LD_INT 32
16093: PUSH
16094: LD_INT 33
16096: PUSH
16097: LD_INT 34
16099: PUSH
16100: LD_INT 35
16102: PUSH
16103: LD_INT 36
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 101
16146: PUSH
16147: LD_INT 102
16149: PUSH
16150: LD_INT 103
16152: PUSH
16153: LD_INT 104
16155: PUSH
16156: LD_INT 105
16158: PUSH
16159: LD_INT 106
16161: PUSH
16162: LD_INT 107
16164: PUSH
16165: LD_INT 108
16167: PUSH
16168: LD_INT 109
16170: PUSH
16171: LD_INT 110
16173: PUSH
16174: LD_INT 111
16176: PUSH
16177: LD_INT 112
16179: PUSH
16180: LD_INT 113
16182: PUSH
16183: LD_INT 114
16185: PUSH
16186: LD_INT 115
16188: PUSH
16189: LD_INT 116
16191: PUSH
16192: LD_INT 117
16194: PUSH
16195: LD_INT 118
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: ST_TO_ADDR
16222: GO 16225
16224: POP
// end else
16225: GO 16456
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16227: LD_ADDR_VAR 0 2
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 3
16240: PUSH
16241: LD_INT 4
16243: PUSH
16244: LD_INT 5
16246: PUSH
16247: LD_INT 6
16249: PUSH
16250: LD_INT 7
16252: PUSH
16253: LD_INT 8
16255: PUSH
16256: LD_INT 9
16258: PUSH
16259: LD_INT 10
16261: PUSH
16262: LD_INT 11
16264: PUSH
16265: LD_INT 12
16267: PUSH
16268: LD_INT 13
16270: PUSH
16271: LD_INT 14
16273: PUSH
16274: LD_INT 15
16276: PUSH
16277: LD_INT 16
16279: PUSH
16280: LD_INT 17
16282: PUSH
16283: LD_INT 18
16285: PUSH
16286: LD_INT 19
16288: PUSH
16289: LD_INT 20
16291: PUSH
16292: LD_INT 21
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: LD_INT 25
16306: PUSH
16307: LD_INT 26
16309: PUSH
16310: LD_INT 27
16312: PUSH
16313: LD_INT 28
16315: PUSH
16316: LD_INT 29
16318: PUSH
16319: LD_INT 30
16321: PUSH
16322: LD_INT 31
16324: PUSH
16325: LD_INT 32
16327: PUSH
16328: LD_INT 33
16330: PUSH
16331: LD_INT 34
16333: PUSH
16334: LD_INT 35
16336: PUSH
16337: LD_INT 36
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 101
16380: PUSH
16381: LD_INT 102
16383: PUSH
16384: LD_INT 103
16386: PUSH
16387: LD_INT 104
16389: PUSH
16390: LD_INT 105
16392: PUSH
16393: LD_INT 106
16395: PUSH
16396: LD_INT 107
16398: PUSH
16399: LD_INT 108
16401: PUSH
16402: LD_INT 109
16404: PUSH
16405: LD_INT 110
16407: PUSH
16408: LD_INT 111
16410: PUSH
16411: LD_INT 112
16413: PUSH
16414: LD_INT 113
16416: PUSH
16417: LD_INT 114
16419: PUSH
16420: LD_INT 115
16422: PUSH
16423: LD_INT 116
16425: PUSH
16426: LD_INT 117
16428: PUSH
16429: LD_INT 118
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: ST_TO_ADDR
// if result then
16456: LD_VAR 0 2
16460: IFFALSE 17246
// begin normal :=  ;
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: LD_STRING 
16469: ST_TO_ADDR
// hardcore :=  ;
16470: LD_ADDR_VAR 0 6
16474: PUSH
16475: LD_STRING 
16477: ST_TO_ADDR
// active :=  ;
16478: LD_ADDR_VAR 0 7
16482: PUSH
16483: LD_STRING 
16485: ST_TO_ADDR
// for i = 1 to normalCounter do
16486: LD_ADDR_VAR 0 8
16490: PUSH
16491: DOUBLE
16492: LD_INT 1
16494: DEC
16495: ST_TO_ADDR
16496: LD_EXP 28
16500: PUSH
16501: FOR_TO
16502: IFFALSE 16603
// begin tmp := 0 ;
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_STRING 0
16511: ST_TO_ADDR
// if result [ 1 ] then
16512: LD_VAR 0 2
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: IFFALSE 16585
// if result [ 1 ] [ 1 ] = i then
16522: LD_VAR 0 2
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PUSH
16535: LD_VAR 0 8
16539: EQUAL
16540: IFFALSE 16585
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: LD_VAR 0 2
16559: PUSH
16560: LD_INT 1
16562: ARRAY
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 3
16571: PPUSH
16572: CALL_OW 1
16576: ST_TO_ADDR
// tmp := 1 ;
16577: LD_ADDR_VAR 0 3
16581: PUSH
16582: LD_STRING 1
16584: ST_TO_ADDR
// end ; normal := normal & tmp ;
16585: LD_ADDR_VAR 0 5
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: LD_VAR 0 3
16599: STR
16600: ST_TO_ADDR
// end ;
16601: GO 16501
16603: POP
16604: POP
// for i = 1 to hardcoreCounter do
16605: LD_ADDR_VAR 0 8
16609: PUSH
16610: DOUBLE
16611: LD_INT 1
16613: DEC
16614: ST_TO_ADDR
16615: LD_EXP 29
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16726
// begin tmp := 0 ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_STRING 0
16630: ST_TO_ADDR
// if result [ 2 ] then
16631: LD_VAR 0 2
16635: PUSH
16636: LD_INT 2
16638: ARRAY
16639: IFFALSE 16708
// if result [ 2 ] [ 1 ] = 100 + i then
16641: LD_VAR 0 2
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: PUSH
16650: LD_INT 1
16652: ARRAY
16653: PUSH
16654: LD_INT 100
16656: PUSH
16657: LD_VAR 0 8
16661: PLUS
16662: EQUAL
16663: IFFALSE 16708
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16665: LD_ADDR_VAR 0 2
16669: PUSH
16670: LD_VAR 0 2
16674: PPUSH
16675: LD_INT 2
16677: PPUSH
16678: LD_VAR 0 2
16682: PUSH
16683: LD_INT 2
16685: ARRAY
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 3
16694: PPUSH
16695: CALL_OW 1
16699: ST_TO_ADDR
// tmp := 1 ;
16700: LD_ADDR_VAR 0 3
16704: PUSH
16705: LD_STRING 1
16707: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16708: LD_ADDR_VAR 0 6
16712: PUSH
16713: LD_VAR 0 6
16717: PUSH
16718: LD_VAR 0 3
16722: STR
16723: ST_TO_ADDR
// end ;
16724: GO 16620
16726: POP
16727: POP
// if isGameLoad then
16728: LD_VAR 0 1
16732: IFFALSE 17207
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16734: LD_ADDR_VAR 0 4
16738: PUSH
16739: LD_EXP 32
16743: PUSH
16744: LD_EXP 31
16748: PUSH
16749: LD_EXP 33
16753: PUSH
16754: LD_EXP 30
16758: PUSH
16759: LD_EXP 34
16763: PUSH
16764: LD_EXP 35
16768: PUSH
16769: LD_EXP 36
16773: PUSH
16774: LD_EXP 37
16778: PUSH
16779: LD_EXP 38
16783: PUSH
16784: LD_EXP 39
16788: PUSH
16789: LD_EXP 40
16793: PUSH
16794: LD_EXP 41
16798: PUSH
16799: LD_EXP 42
16803: PUSH
16804: LD_EXP 43
16808: PUSH
16809: LD_EXP 51
16813: PUSH
16814: LD_EXP 52
16818: PUSH
16819: LD_EXP 53
16823: PUSH
16824: LD_EXP 54
16828: PUSH
16829: LD_EXP 56
16833: PUSH
16834: LD_EXP 57
16838: PUSH
16839: LD_EXP 58
16843: PUSH
16844: LD_EXP 61
16848: PUSH
16849: LD_EXP 63
16853: PUSH
16854: LD_EXP 64
16858: PUSH
16859: LD_EXP 65
16863: PUSH
16864: LD_EXP 67
16868: PUSH
16869: LD_EXP 68
16873: PUSH
16874: LD_EXP 71
16878: PUSH
16879: LD_EXP 72
16883: PUSH
16884: LD_EXP 73
16888: PUSH
16889: LD_EXP 74
16893: PUSH
16894: LD_EXP 75
16898: PUSH
16899: LD_EXP 76
16903: PUSH
16904: LD_EXP 77
16908: PUSH
16909: LD_EXP 78
16913: PUSH
16914: LD_EXP 79
16918: PUSH
16919: LD_EXP 44
16923: PUSH
16924: LD_EXP 45
16928: PUSH
16929: LD_EXP 48
16933: PUSH
16934: LD_EXP 49
16938: PUSH
16939: LD_EXP 50
16943: PUSH
16944: LD_EXP 46
16948: PUSH
16949: LD_EXP 47
16953: PUSH
16954: LD_EXP 55
16958: PUSH
16959: LD_EXP 59
16963: PUSH
16964: LD_EXP 60
16968: PUSH
16969: LD_EXP 62
16973: PUSH
16974: LD_EXP 66
16978: PUSH
16979: LD_EXP 69
16983: PUSH
16984: LD_EXP 70
16988: PUSH
16989: LD_EXP 80
16993: PUSH
16994: LD_EXP 81
16998: PUSH
16999: LD_EXP 82
17003: PUSH
17004: LD_EXP 83
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: ST_TO_ADDR
// tmp :=  ;
17065: LD_ADDR_VAR 0 3
17069: PUSH
17070: LD_STRING 
17072: ST_TO_ADDR
// for i = 1 to normalCounter do
17073: LD_ADDR_VAR 0 8
17077: PUSH
17078: DOUBLE
17079: LD_INT 1
17081: DEC
17082: ST_TO_ADDR
17083: LD_EXP 28
17087: PUSH
17088: FOR_TO
17089: IFFALSE 17125
// begin if flags [ i ] then
17091: LD_VAR 0 4
17095: PUSH
17096: LD_VAR 0 8
17100: ARRAY
17101: IFFALSE 17123
// tmp := tmp & i & ; ;
17103: LD_ADDR_VAR 0 3
17107: PUSH
17108: LD_VAR 0 3
17112: PUSH
17113: LD_VAR 0 8
17117: STR
17118: PUSH
17119: LD_STRING ;
17121: STR
17122: ST_TO_ADDR
// end ;
17123: GO 17088
17125: POP
17126: POP
// for i = 1 to hardcoreCounter do
17127: LD_ADDR_VAR 0 8
17131: PUSH
17132: DOUBLE
17133: LD_INT 1
17135: DEC
17136: ST_TO_ADDR
17137: LD_EXP 29
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17189
// begin if flags [ normalCounter + i ] then
17145: LD_VAR 0 4
17149: PUSH
17150: LD_EXP 28
17154: PUSH
17155: LD_VAR 0 8
17159: PLUS
17160: ARRAY
17161: IFFALSE 17187
// tmp := tmp & ( 100 + i ) & ; ;
17163: LD_ADDR_VAR 0 3
17167: PUSH
17168: LD_VAR 0 3
17172: PUSH
17173: LD_INT 100
17175: PUSH
17176: LD_VAR 0 8
17180: PLUS
17181: STR
17182: PUSH
17183: LD_STRING ;
17185: STR
17186: ST_TO_ADDR
// end ;
17187: GO 17142
17189: POP
17190: POP
// if tmp then
17191: LD_VAR 0 3
17195: IFFALSE 17207
// active := tmp ;
17197: LD_ADDR_VAR 0 7
17201: PUSH
17202: LD_VAR 0 3
17206: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17207: LD_STRING getStreamItemsFromMission("
17209: PUSH
17210: LD_VAR 0 5
17214: STR
17215: PUSH
17216: LD_STRING ","
17218: STR
17219: PUSH
17220: LD_VAR 0 6
17224: STR
17225: PUSH
17226: LD_STRING ","
17228: STR
17229: PUSH
17230: LD_VAR 0 7
17234: STR
17235: PUSH
17236: LD_STRING ")
17238: STR
17239: PPUSH
17240: CALL_OW 559
// end else
17244: GO 17253
// ToLua ( getStreamItemsFromMission("","","") ) ;
17246: LD_STRING getStreamItemsFromMission("","","")
17248: PPUSH
17249: CALL_OW 559
// end ;
17253: LD_VAR 0 2
17257: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17258: LD_EXP 27
17262: PUSH
17263: LD_EXP 32
17267: AND
17268: IFFALSE 17392
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
17276: PPUSH
// begin enable ;
17277: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 22
17285: PUSH
17286: LD_OWVAR 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 2
17297: PUSH
17298: LD_INT 34
17300: PUSH
17301: LD_INT 7
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 34
17310: PUSH
17311: LD_INT 45
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 34
17320: PUSH
17321: LD_INT 28
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 34
17330: PUSH
17331: LD_INT 47
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: ST_TO_ADDR
// if not tmp then
17354: LD_VAR 0 2
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17392
// for i in tmp do
17363: LD_ADDR_VAR 0 1
17367: PUSH
17368: LD_VAR 0 2
17372: PUSH
17373: FOR_IN
17374: IFFALSE 17390
// begin SetLives ( i , 0 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 0
17383: PPUSH
17384: CALL_OW 234
// end ;
17388: GO 17373
17390: POP
17391: POP
// end ;
17392: PPOPN 2
17394: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17395: LD_EXP 27
17399: PUSH
17400: LD_EXP 33
17404: AND
17405: IFFALSE 17489
17407: GO 17409
17409: DISABLE
17410: LD_INT 0
17412: PPUSH
17413: PPUSH
// begin enable ;
17414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17415: LD_ADDR_VAR 0 2
17419: PUSH
17420: LD_INT 22
17422: PUSH
17423: LD_OWVAR 2
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 32
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 69
17450: ST_TO_ADDR
// if not tmp then
17451: LD_VAR 0 2
17455: NOT
17456: IFFALSE 17460
// exit ;
17458: GO 17489
// for i in tmp do
17460: LD_ADDR_VAR 0 1
17464: PUSH
17465: LD_VAR 0 2
17469: PUSH
17470: FOR_IN
17471: IFFALSE 17487
// begin SetLives ( i , 0 ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 234
// end ;
17485: GO 17470
17487: POP
17488: POP
// end ;
17489: PPOPN 2
17491: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17492: LD_EXP 27
17496: PUSH
17497: LD_EXP 30
17501: AND
17502: IFFALSE 17595
17504: GO 17506
17506: DISABLE
17507: LD_INT 0
17509: PPUSH
// begin enable ;
17510: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17511: LD_ADDR_VAR 0 1
17515: PUSH
17516: LD_INT 22
17518: PUSH
17519: LD_OWVAR 2
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 5
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 25
17543: PUSH
17544: LD_INT 9
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 25
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PPUSH
17571: CALL_OW 69
17575: PUSH
17576: FOR_IN
17577: IFFALSE 17593
// begin SetClass ( i , 1 ) ;
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: CALL_OW 336
// end ;
17591: GO 17576
17593: POP
17594: POP
// end ;
17595: PPOPN 1
17597: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17598: LD_EXP 27
17602: PUSH
17603: LD_EXP 31
17607: AND
17608: PUSH
17609: LD_OWVAR 65
17613: PUSH
17614: LD_INT 7
17616: LESS
17617: AND
17618: IFFALSE 17632
17620: GO 17622
17622: DISABLE
// begin enable ;
17623: ENABLE
// game_speed := 7 ;
17624: LD_ADDR_OWVAR 65
17628: PUSH
17629: LD_INT 7
17631: ST_TO_ADDR
// end ;
17632: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17633: LD_EXP 27
17637: PUSH
17638: LD_EXP 34
17642: AND
17643: IFFALSE 17845
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
17652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: LD_INT 81
17660: PUSH
17661: LD_OWVAR 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PPUSH
17684: CALL_OW 69
17688: ST_TO_ADDR
// if not tmp then
17689: LD_VAR 0 3
17693: NOT
17694: IFFALSE 17698
// exit ;
17696: GO 17845
// if tmp > 5 then
17698: LD_VAR 0 3
17702: PUSH
17703: LD_INT 5
17705: GREATER
17706: IFFALSE 17718
// k := 5 else
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_INT 5
17715: ST_TO_ADDR
17716: GO 17728
// k := tmp ;
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_VAR 0 3
17727: ST_TO_ADDR
// for i := 1 to k do
17728: LD_ADDR_VAR 0 1
17732: PUSH
17733: DOUBLE
17734: LD_INT 1
17736: DEC
17737: ST_TO_ADDR
17738: LD_VAR 0 2
17742: PUSH
17743: FOR_TO
17744: IFFALSE 17843
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 1
17755: ARRAY
17756: PPUSH
17757: LD_VAR 0 1
17761: PUSH
17762: LD_INT 4
17764: MOD
17765: PUSH
17766: LD_INT 1
17768: PLUS
17769: PPUSH
17770: CALL_OW 259
17774: PUSH
17775: LD_INT 10
17777: LESS
17778: IFFALSE 17841
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17780: LD_VAR 0 3
17784: PUSH
17785: LD_VAR 0 1
17789: ARRAY
17790: PPUSH
17791: LD_VAR 0 1
17795: PUSH
17796: LD_INT 4
17798: MOD
17799: PUSH
17800: LD_INT 1
17802: PLUS
17803: PPUSH
17804: LD_VAR 0 3
17808: PUSH
17809: LD_VAR 0 1
17813: ARRAY
17814: PPUSH
17815: LD_VAR 0 1
17819: PUSH
17820: LD_INT 4
17822: MOD
17823: PUSH
17824: LD_INT 1
17826: PLUS
17827: PPUSH
17828: CALL_OW 259
17832: PUSH
17833: LD_INT 1
17835: PLUS
17836: PPUSH
17837: CALL_OW 237
17841: GO 17743
17843: POP
17844: POP
// end ;
17845: PPOPN 3
17847: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17848: LD_EXP 27
17852: PUSH
17853: LD_EXP 35
17857: AND
17858: IFFALSE 17878
17860: GO 17862
17862: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17863: LD_INT 4
17865: PPUSH
17866: LD_OWVAR 2
17870: PPUSH
17871: LD_INT 0
17873: PPUSH
17874: CALL_OW 324
17878: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17879: LD_EXP 27
17883: PUSH
17884: LD_EXP 64
17888: AND
17889: IFFALSE 17909
17891: GO 17893
17893: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17894: LD_INT 19
17896: PPUSH
17897: LD_OWVAR 2
17901: PPUSH
17902: LD_INT 0
17904: PPUSH
17905: CALL_OW 324
17909: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17910: LD_EXP 27
17914: PUSH
17915: LD_EXP 36
17919: AND
17920: IFFALSE 18022
17922: GO 17924
17924: DISABLE
17925: LD_INT 0
17927: PPUSH
17928: PPUSH
// begin enable ;
17929: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17930: LD_ADDR_VAR 0 2
17934: PUSH
17935: LD_INT 22
17937: PUSH
17938: LD_OWVAR 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: LD_INT 34
17952: PUSH
17953: LD_INT 11
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 34
17962: PUSH
17963: LD_INT 30
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 2
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18022
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18020
// begin SetLives ( i , 0 ) ;
18006: LD_VAR 0 1
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: CALL_OW 234
// end ;
18018: GO 18003
18020: POP
18021: POP
// end ;
18022: PPOPN 2
18024: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18025: LD_EXP 27
18029: PUSH
18030: LD_EXP 37
18034: AND
18035: IFFALSE 18055
18037: GO 18039
18039: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18040: LD_INT 32
18042: PPUSH
18043: LD_OWVAR 2
18047: PPUSH
18048: LD_INT 0
18050: PPUSH
18051: CALL_OW 324
18055: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18056: LD_EXP 27
18060: PUSH
18061: LD_EXP 38
18065: AND
18066: IFFALSE 18247
18068: GO 18070
18070: DISABLE
18071: LD_INT 0
18073: PPUSH
18074: PPUSH
18075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18076: LD_ADDR_VAR 0 2
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_OWVAR 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 33
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: ST_TO_ADDR
// if not tmp then
18112: LD_VAR 0 2
18116: NOT
18117: IFFALSE 18121
// exit ;
18119: GO 18247
// side := 0 ;
18121: LD_ADDR_VAR 0 3
18125: PUSH
18126: LD_INT 0
18128: ST_TO_ADDR
// for i := 1 to 8 do
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: DOUBLE
18135: LD_INT 1
18137: DEC
18138: ST_TO_ADDR
18139: LD_INT 8
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18191
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18145: LD_OWVAR 2
18149: PUSH
18150: LD_VAR 0 1
18154: NONEQUAL
18155: PUSH
18156: LD_OWVAR 2
18160: PPUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 81
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: AND
18175: IFFALSE 18189
// begin side := i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 1
18186: ST_TO_ADDR
// break ;
18187: GO 18191
// end ;
18189: GO 18142
18191: POP
18192: POP
// if not side then
18193: LD_VAR 0 3
18197: NOT
18198: IFFALSE 18202
// exit ;
18200: GO 18247
// for i := 1 to tmp do
18202: LD_ADDR_VAR 0 1
18206: PUSH
18207: DOUBLE
18208: LD_INT 1
18210: DEC
18211: ST_TO_ADDR
18212: LD_VAR 0 2
18216: PUSH
18217: FOR_TO
18218: IFFALSE 18245
// if Prob ( 60 ) then
18220: LD_INT 60
18222: PPUSH
18223: CALL_OW 13
18227: IFFALSE 18243
// SetSide ( i , side ) ;
18229: LD_VAR 0 1
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: CALL_OW 235
18243: GO 18217
18245: POP
18246: POP
// end ;
18247: PPOPN 3
18249: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18250: LD_EXP 27
18254: PUSH
18255: LD_EXP 40
18259: AND
18260: IFFALSE 18379
18262: GO 18264
18264: DISABLE
18265: LD_INT 0
18267: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18268: LD_ADDR_VAR 0 1
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_OWVAR 2
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 21
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: LD_INT 23
18300: PUSH
18301: LD_INT 0
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: PPUSH
18317: CALL_OW 69
18321: PUSH
18322: FOR_IN
18323: IFFALSE 18377
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 257
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: IN
18353: IFFALSE 18375
// SetClass ( un , rand ( 1 , 4 ) ) ;
18355: LD_VAR 0 1
18359: PPUSH
18360: LD_INT 1
18362: PPUSH
18363: LD_INT 4
18365: PPUSH
18366: CALL_OW 12
18370: PPUSH
18371: CALL_OW 336
18375: GO 18322
18377: POP
18378: POP
// end ;
18379: PPOPN 1
18381: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18382: LD_EXP 27
18386: PUSH
18387: LD_EXP 39
18391: AND
18392: IFFALSE 18471
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18400: LD_ADDR_VAR 0 1
18404: PUSH
18405: LD_INT 22
18407: PUSH
18408: LD_OWVAR 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 3
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: ST_TO_ADDR
// if not tmp then
18436: LD_VAR 0 1
18440: NOT
18441: IFFALSE 18445
// exit ;
18443: GO 18471
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18445: LD_VAR 0 1
18449: PUSH
18450: LD_INT 1
18452: PPUSH
18453: LD_VAR 0 1
18457: PPUSH
18458: CALL_OW 12
18462: ARRAY
18463: PPUSH
18464: LD_INT 100
18466: PPUSH
18467: CALL_OW 234
// end ;
18471: PPOPN 1
18473: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18474: LD_EXP 27
18478: PUSH
18479: LD_EXP 41
18483: AND
18484: IFFALSE 18582
18486: GO 18488
18488: DISABLE
18489: LD_INT 0
18491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18492: LD_ADDR_VAR 0 1
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_OWVAR 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: ST_TO_ADDR
// if not tmp then
18528: LD_VAR 0 1
18532: NOT
18533: IFFALSE 18537
// exit ;
18535: GO 18582
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18537: LD_VAR 0 1
18541: PUSH
18542: LD_INT 1
18544: PPUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 12
18554: ARRAY
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: LD_INT 4
18561: PPUSH
18562: CALL_OW 12
18566: PPUSH
18567: LD_INT 3000
18569: PPUSH
18570: LD_INT 9000
18572: PPUSH
18573: CALL_OW 12
18577: PPUSH
18578: CALL_OW 492
// end ;
18582: PPOPN 1
18584: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18585: LD_EXP 27
18589: PUSH
18590: LD_EXP 42
18594: AND
18595: IFFALSE 18615
18597: GO 18599
18599: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18600: LD_INT 1
18602: PPUSH
18603: LD_OWVAR 2
18607: PPUSH
18608: LD_INT 0
18610: PPUSH
18611: CALL_OW 324
18615: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18616: LD_EXP 27
18620: PUSH
18621: LD_EXP 43
18625: AND
18626: IFFALSE 18709
18628: GO 18630
18630: DISABLE
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18635: LD_ADDR_VAR 0 2
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_OWVAR 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 21
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 69
18670: ST_TO_ADDR
// if not tmp then
18671: LD_VAR 0 2
18675: NOT
18676: IFFALSE 18680
// exit ;
18678: GO 18709
// for i in tmp do
18680: LD_ADDR_VAR 0 1
18684: PUSH
18685: LD_VAR 0 2
18689: PUSH
18690: FOR_IN
18691: IFFALSE 18707
// SetBLevel ( i , 10 ) ;
18693: LD_VAR 0 1
18697: PPUSH
18698: LD_INT 10
18700: PPUSH
18701: CALL_OW 241
18705: GO 18690
18707: POP
18708: POP
// end ;
18709: PPOPN 2
18711: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18712: LD_EXP 27
18716: PUSH
18717: LD_EXP 44
18721: AND
18722: IFFALSE 18833
18724: GO 18726
18726: DISABLE
18727: LD_INT 0
18729: PPUSH
18730: PPUSH
18731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18732: LD_ADDR_VAR 0 3
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_OWVAR 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: ST_TO_ADDR
// if not tmp then
18768: LD_VAR 0 3
18772: NOT
18773: IFFALSE 18777
// exit ;
18775: GO 18833
// un := tmp [ rand ( 1 , tmp ) ] ;
18777: LD_ADDR_VAR 0 2
18781: PUSH
18782: LD_VAR 0 3
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 3
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: ST_TO_ADDR
// if Crawls ( un ) then
18801: LD_VAR 0 2
18805: PPUSH
18806: CALL_OW 318
18810: IFFALSE 18821
// ComWalk ( un ) ;
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_INT 5
18828: PPUSH
18829: CALL_OW 336
// end ;
18833: PPOPN 3
18835: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18836: LD_EXP 27
18840: PUSH
18841: LD_EXP 45
18845: AND
18846: PUSH
18847: LD_OWVAR 67
18851: PUSH
18852: LD_INT 4
18854: LESS
18855: AND
18856: IFFALSE 18875
18858: GO 18860
18860: DISABLE
// begin Difficulty := Difficulty + 1 ;
18861: LD_ADDR_OWVAR 67
18865: PUSH
18866: LD_OWVAR 67
18870: PUSH
18871: LD_INT 1
18873: PLUS
18874: ST_TO_ADDR
// end ;
18875: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18876: LD_EXP 27
18880: PUSH
18881: LD_EXP 46
18885: AND
18886: IFFALSE 18989
18888: GO 18890
18890: DISABLE
18891: LD_INT 0
18893: PPUSH
// begin for i := 1 to 5 do
18894: LD_ADDR_VAR 0 1
18898: PUSH
18899: DOUBLE
18900: LD_INT 1
18902: DEC
18903: ST_TO_ADDR
18904: LD_INT 5
18906: PUSH
18907: FOR_TO
18908: IFFALSE 18987
// begin uc_nation := nation_nature ;
18910: LD_ADDR_OWVAR 21
18914: PUSH
18915: LD_INT 0
18917: ST_TO_ADDR
// uc_side := 0 ;
18918: LD_ADDR_OWVAR 20
18922: PUSH
18923: LD_INT 0
18925: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18926: LD_ADDR_OWVAR 29
18930: PUSH
18931: LD_INT 12
18933: PUSH
18934: LD_INT 12
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: ST_TO_ADDR
// hc_agressivity := 20 ;
18941: LD_ADDR_OWVAR 35
18945: PUSH
18946: LD_INT 20
18948: ST_TO_ADDR
// hc_class := class_tiger ;
18949: LD_ADDR_OWVAR 28
18953: PUSH
18954: LD_INT 14
18956: ST_TO_ADDR
// hc_gallery :=  ;
18957: LD_ADDR_OWVAR 33
18961: PUSH
18962: LD_STRING 
18964: ST_TO_ADDR
// hc_name :=  ;
18965: LD_ADDR_OWVAR 26
18969: PUSH
18970: LD_STRING 
18972: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18973: CALL_OW 44
18977: PPUSH
18978: LD_INT 0
18980: PPUSH
18981: CALL_OW 51
// end ;
18985: GO 18907
18987: POP
18988: POP
// end ;
18989: PPOPN 1
18991: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18992: LD_EXP 27
18996: PUSH
18997: LD_EXP 47
19001: AND
19002: IFFALSE 19011
19004: GO 19006
19006: DISABLE
// StreamSibBomb ;
19007: CALL 19012 0 0
19011: END
// export function StreamSibBomb ; var i , x , y ; begin
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
// result := false ;
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_INT 0
19025: ST_TO_ADDR
// for i := 1 to 16 do
19026: LD_ADDR_VAR 0 2
19030: PUSH
19031: DOUBLE
19032: LD_INT 1
19034: DEC
19035: ST_TO_ADDR
19036: LD_INT 16
19038: PUSH
19039: FOR_TO
19040: IFFALSE 19239
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: LD_INT 10
19049: PUSH
19050: LD_INT 20
19052: PUSH
19053: LD_INT 30
19055: PUSH
19056: LD_INT 40
19058: PUSH
19059: LD_INT 50
19061: PUSH
19062: LD_INT 60
19064: PUSH
19065: LD_INT 70
19067: PUSH
19068: LD_INT 80
19070: PUSH
19071: LD_INT 90
19073: PUSH
19074: LD_INT 100
19076: PUSH
19077: LD_INT 110
19079: PUSH
19080: LD_INT 120
19082: PUSH
19083: LD_INT 130
19085: PUSH
19086: LD_INT 140
19088: PUSH
19089: LD_INT 150
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 1
19111: PPUSH
19112: LD_INT 15
19114: PPUSH
19115: CALL_OW 12
19119: ARRAY
19120: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 10
19128: PUSH
19129: LD_INT 20
19131: PUSH
19132: LD_INT 30
19134: PUSH
19135: LD_INT 40
19137: PUSH
19138: LD_INT 50
19140: PUSH
19141: LD_INT 60
19143: PUSH
19144: LD_INT 70
19146: PUSH
19147: LD_INT 80
19149: PUSH
19150: LD_INT 90
19152: PUSH
19153: LD_INT 100
19155: PUSH
19156: LD_INT 110
19158: PUSH
19159: LD_INT 120
19161: PUSH
19162: LD_INT 130
19164: PUSH
19165: LD_INT 140
19167: PUSH
19168: LD_INT 150
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_INT 15
19193: PPUSH
19194: CALL_OW 12
19198: ARRAY
19199: ST_TO_ADDR
// if ValidHex ( x , y ) then
19200: LD_VAR 0 3
19204: PPUSH
19205: LD_VAR 0 4
19209: PPUSH
19210: CALL_OW 488
19214: IFFALSE 19237
// begin result := [ x , y ] ;
19216: LD_ADDR_VAR 0 1
19220: PUSH
19221: LD_VAR 0 3
19225: PUSH
19226: LD_VAR 0 4
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: ST_TO_ADDR
// break ;
19235: GO 19239
// end ; end ;
19237: GO 19039
19239: POP
19240: POP
// if result then
19241: LD_VAR 0 1
19245: IFFALSE 19305
// begin ToLua ( playSibBomb() ) ;
19247: LD_STRING playSibBomb()
19249: PPUSH
19250: CALL_OW 559
// wait ( 0 0$14 ) ;
19254: LD_INT 490
19256: PPUSH
19257: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19261: LD_VAR 0 1
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 1
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19283: LD_VAR 0 1
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PPUSH
19292: LD_VAR 0 1
19296: PUSH
19297: LD_INT 2
19299: ARRAY
19300: PPUSH
19301: CALL_OW 429
// end ; end ;
19305: LD_VAR 0 1
19309: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19310: LD_EXP 27
19314: PUSH
19315: LD_EXP 49
19319: AND
19320: IFFALSE 19332
19322: GO 19324
19324: DISABLE
// YouLost (  ) ;
19325: LD_STRING 
19327: PPUSH
19328: CALL_OW 104
19332: END
// every 0 0$1 trigger StreamModeActive and sFog do
19333: LD_EXP 27
19337: PUSH
19338: LD_EXP 48
19342: AND
19343: IFFALSE 19357
19345: GO 19347
19347: DISABLE
// FogOff ( your_side ) ;
19348: LD_OWVAR 2
19352: PPUSH
19353: CALL_OW 344
19357: END
// every 0 0$1 trigger StreamModeActive and sSun do
19358: LD_EXP 27
19362: PUSH
19363: LD_EXP 50
19367: AND
19368: IFFALSE 19396
19370: GO 19372
19372: DISABLE
// begin solar_recharge_percent := 0 ;
19373: LD_ADDR_OWVAR 79
19377: PUSH
19378: LD_INT 0
19380: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19381: LD_INT 10500
19383: PPUSH
19384: CALL_OW 67
// solar_recharge_percent := 100 ;
19388: LD_ADDR_OWVAR 79
19392: PUSH
19393: LD_INT 100
19395: ST_TO_ADDR
// end ;
19396: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19397: LD_EXP 27
19401: PUSH
19402: LD_EXP 51
19406: AND
19407: IFFALSE 19646
19409: GO 19411
19411: DISABLE
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
19416: PPUSH
// begin tmp := [ ] ;
19417: LD_ADDR_VAR 0 3
19421: PUSH
19422: EMPTY
19423: ST_TO_ADDR
// for i := 1 to 6 do
19424: LD_ADDR_VAR 0 1
19428: PUSH
19429: DOUBLE
19430: LD_INT 1
19432: DEC
19433: ST_TO_ADDR
19434: LD_INT 6
19436: PUSH
19437: FOR_TO
19438: IFFALSE 19543
// begin uc_nation := nation_nature ;
19440: LD_ADDR_OWVAR 21
19444: PUSH
19445: LD_INT 0
19447: ST_TO_ADDR
// uc_side := 0 ;
19448: LD_ADDR_OWVAR 20
19452: PUSH
19453: LD_INT 0
19455: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19456: LD_ADDR_OWVAR 29
19460: PUSH
19461: LD_INT 12
19463: PUSH
19464: LD_INT 12
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: ST_TO_ADDR
// hc_agressivity := 20 ;
19471: LD_ADDR_OWVAR 35
19475: PUSH
19476: LD_INT 20
19478: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19479: LD_ADDR_OWVAR 28
19483: PUSH
19484: LD_INT 17
19486: ST_TO_ADDR
// hc_gallery :=  ;
19487: LD_ADDR_OWVAR 33
19491: PUSH
19492: LD_STRING 
19494: ST_TO_ADDR
// hc_name :=  ;
19495: LD_ADDR_OWVAR 26
19499: PUSH
19500: LD_STRING 
19502: ST_TO_ADDR
// un := CreateHuman ;
19503: LD_ADDR_VAR 0 2
19507: PUSH
19508: CALL_OW 44
19512: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19513: LD_VAR 0 2
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: CALL_OW 51
// tmp := tmp ^ un ;
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: LD_VAR 0 3
19534: PUSH
19535: LD_VAR 0 2
19539: ADD
19540: ST_TO_ADDR
// end ;
19541: GO 19437
19543: POP
19544: POP
// repeat wait ( 0 0$1 ) ;
19545: LD_INT 35
19547: PPUSH
19548: CALL_OW 67
// for un in tmp do
19552: LD_ADDR_VAR 0 2
19556: PUSH
19557: LD_VAR 0 3
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19637
// begin if IsDead ( un ) then
19565: LD_VAR 0 2
19569: PPUSH
19570: CALL_OW 301
19574: IFFALSE 19594
// begin tmp := tmp diff un ;
19576: LD_ADDR_VAR 0 3
19580: PUSH
19581: LD_VAR 0 3
19585: PUSH
19586: LD_VAR 0 2
19590: DIFF
19591: ST_TO_ADDR
// continue ;
19592: GO 19562
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19594: LD_VAR 0 2
19598: PPUSH
19599: LD_INT 3
19601: PUSH
19602: LD_INT 22
19604: PUSH
19605: LD_INT 0
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PPUSH
19616: CALL_OW 69
19620: PPUSH
19621: LD_VAR 0 2
19625: PPUSH
19626: CALL_OW 74
19630: PPUSH
19631: CALL_OW 115
// end ;
19635: GO 19562
19637: POP
19638: POP
// until not tmp ;
19639: LD_VAR 0 3
19643: NOT
19644: IFFALSE 19545
// end ;
19646: PPOPN 3
19648: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19649: LD_EXP 27
19653: PUSH
19654: LD_EXP 52
19658: AND
19659: IFFALSE 19713
19661: GO 19663
19663: DISABLE
// begin ToLua ( displayTroll(); ) ;
19664: LD_STRING displayTroll();
19666: PPUSH
19667: CALL_OW 559
// wait ( 3 3$00 ) ;
19671: LD_INT 6300
19673: PPUSH
19674: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19678: LD_STRING hideTroll();
19680: PPUSH
19681: CALL_OW 559
// wait ( 1 1$00 ) ;
19685: LD_INT 2100
19687: PPUSH
19688: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19692: LD_STRING displayTroll();
19694: PPUSH
19695: CALL_OW 559
// wait ( 1 1$00 ) ;
19699: LD_INT 2100
19701: PPUSH
19702: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19706: LD_STRING hideTroll();
19708: PPUSH
19709: CALL_OW 559
// end ;
19713: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19714: LD_EXP 27
19718: PUSH
19719: LD_EXP 53
19723: AND
19724: IFFALSE 19787
19726: GO 19728
19728: DISABLE
19729: LD_INT 0
19731: PPUSH
// begin p := 0 ;
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: LD_INT 0
19739: ST_TO_ADDR
// repeat game_speed := 1 ;
19740: LD_ADDR_OWVAR 65
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19748: LD_INT 35
19750: PPUSH
19751: CALL_OW 67
// p := p + 1 ;
19755: LD_ADDR_VAR 0 1
19759: PUSH
19760: LD_VAR 0 1
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// until p >= 60 ;
19769: LD_VAR 0 1
19773: PUSH
19774: LD_INT 60
19776: GREATEREQUAL
19777: IFFALSE 19740
// game_speed := 4 ;
19779: LD_ADDR_OWVAR 65
19783: PUSH
19784: LD_INT 4
19786: ST_TO_ADDR
// end ;
19787: PPOPN 1
19789: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19790: LD_EXP 27
19794: PUSH
19795: LD_EXP 54
19799: AND
19800: IFFALSE 19946
19802: GO 19804
19804: DISABLE
19805: LD_INT 0
19807: PPUSH
19808: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19809: LD_ADDR_VAR 0 1
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_OWVAR 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: ST_TO_ADDR
// if not depot then
19863: LD_VAR 0 1
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 19946
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: LD_VAR 0 1
19881: PUSH
19882: LD_INT 1
19884: PPUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 12
19894: ARRAY
19895: PPUSH
19896: CALL_OW 274
19900: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19901: LD_VAR 0 2
19905: PPUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 0
19911: PPUSH
19912: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19916: LD_VAR 0 2
19920: PPUSH
19921: LD_INT 2
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_INT 3
19938: PPUSH
19939: LD_INT 0
19941: PPUSH
19942: CALL_OW 277
// end ;
19946: PPOPN 2
19948: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19949: LD_EXP 27
19953: PUSH
19954: LD_EXP 55
19958: AND
19959: IFFALSE 20056
19961: GO 19963
19963: DISABLE
19964: LD_INT 0
19966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19967: LD_ADDR_VAR 0 1
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_OWVAR 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 21
19986: PUSH
19987: LD_INT 1
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 3
19996: PUSH
19997: LD_INT 23
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: PPUSH
20016: CALL_OW 69
20020: ST_TO_ADDR
// if not tmp then
20021: LD_VAR 0 1
20025: NOT
20026: IFFALSE 20030
// exit ;
20028: GO 20056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20030: LD_VAR 0 1
20034: PUSH
20035: LD_INT 1
20037: PPUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: CALL_OW 12
20047: ARRAY
20048: PPUSH
20049: LD_INT 200
20051: PPUSH
20052: CALL_OW 234
// end ;
20056: PPOPN 1
20058: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20059: LD_EXP 27
20063: PUSH
20064: LD_EXP 56
20068: AND
20069: IFFALSE 20148
20071: GO 20073
20073: DISABLE
20074: LD_INT 0
20076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20077: LD_ADDR_VAR 0 1
20081: PUSH
20082: LD_INT 22
20084: PUSH
20085: LD_OWVAR 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 21
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 69
20112: ST_TO_ADDR
// if not tmp then
20113: LD_VAR 0 1
20117: NOT
20118: IFFALSE 20122
// exit ;
20120: GO 20148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20122: LD_VAR 0 1
20126: PUSH
20127: LD_INT 1
20129: PPUSH
20130: LD_VAR 0 1
20134: PPUSH
20135: CALL_OW 12
20139: ARRAY
20140: PPUSH
20141: LD_INT 60
20143: PPUSH
20144: CALL_OW 234
// end ;
20148: PPOPN 1
20150: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20151: LD_EXP 27
20155: PUSH
20156: LD_EXP 57
20160: AND
20161: IFFALSE 20260
20163: GO 20165
20165: DISABLE
20166: LD_INT 0
20168: PPUSH
20169: PPUSH
// begin enable ;
20170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20171: LD_ADDR_VAR 0 1
20175: PUSH
20176: LD_INT 22
20178: PUSH
20179: LD_OWVAR 2
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 61
20190: PUSH
20191: EMPTY
20192: LIST
20193: PUSH
20194: LD_INT 33
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: PPUSH
20209: CALL_OW 69
20213: ST_TO_ADDR
// if not tmp then
20214: LD_VAR 0 1
20218: NOT
20219: IFFALSE 20223
// exit ;
20221: GO 20260
// for i in tmp do
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: LD_VAR 0 1
20232: PUSH
20233: FOR_IN
20234: IFFALSE 20258
// if IsControledBy ( i ) then
20236: LD_VAR 0 2
20240: PPUSH
20241: CALL_OW 312
20245: IFFALSE 20256
// ComUnlink ( i ) ;
20247: LD_VAR 0 2
20251: PPUSH
20252: CALL_OW 136
20256: GO 20233
20258: POP
20259: POP
// end ;
20260: PPOPN 2
20262: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20263: LD_EXP 27
20267: PUSH
20268: LD_EXP 58
20272: AND
20273: IFFALSE 20413
20275: GO 20277
20277: DISABLE
20278: LD_INT 0
20280: PPUSH
20281: PPUSH
// begin ToLua ( displayPowell(); ) ;
20282: LD_STRING displayPowell();
20284: PPUSH
20285: CALL_OW 559
// uc_side := 0 ;
20289: LD_ADDR_OWVAR 20
20293: PUSH
20294: LD_INT 0
20296: ST_TO_ADDR
// uc_nation := 2 ;
20297: LD_ADDR_OWVAR 21
20301: PUSH
20302: LD_INT 2
20304: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20305: LD_ADDR_OWVAR 37
20309: PUSH
20310: LD_INT 14
20312: ST_TO_ADDR
// vc_engine := engine_siberite ;
20313: LD_ADDR_OWVAR 39
20317: PUSH
20318: LD_INT 3
20320: ST_TO_ADDR
// vc_control := control_apeman ;
20321: LD_ADDR_OWVAR 38
20325: PUSH
20326: LD_INT 5
20328: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20329: LD_ADDR_OWVAR 40
20333: PUSH
20334: LD_INT 29
20336: ST_TO_ADDR
// un := CreateVehicle ;
20337: LD_ADDR_VAR 0 2
20341: PUSH
20342: CALL_OW 45
20346: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20359: LD_INT 35
20361: PPUSH
20362: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20366: LD_VAR 0 2
20370: PPUSH
20371: LD_INT 22
20373: PUSH
20374: LD_OWVAR 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PPUSH
20383: CALL_OW 69
20387: PPUSH
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 74
20397: PPUSH
20398: CALL_OW 115
// until IsDead ( un ) ;
20402: LD_VAR 0 2
20406: PPUSH
20407: CALL_OW 301
20411: IFFALSE 20359
// end ;
20413: PPOPN 2
20415: END
// every 0 0$1 trigger StreamModeActive and sStu do
20416: LD_EXP 27
20420: PUSH
20421: LD_EXP 66
20425: AND
20426: IFFALSE 20442
20428: GO 20430
20430: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20431: LD_STRING displayStucuk();
20433: PPUSH
20434: CALL_OW 559
// ResetFog ;
20438: CALL_OW 335
// end ;
20442: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20443: LD_EXP 27
20447: PUSH
20448: LD_EXP 59
20452: AND
20453: IFFALSE 20594
20455: GO 20457
20457: DISABLE
20458: LD_INT 0
20460: PPUSH
20461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: LD_INT 22
20469: PUSH
20470: LD_OWVAR 2
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 21
20481: PUSH
20482: LD_INT 1
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PPUSH
20493: CALL_OW 69
20497: ST_TO_ADDR
// if not tmp then
20498: LD_VAR 0 2
20502: NOT
20503: IFFALSE 20507
// exit ;
20505: GO 20594
// un := tmp [ rand ( 1 , tmp ) ] ;
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_VAR 0 2
20516: PUSH
20517: LD_INT 1
20519: PPUSH
20520: LD_VAR 0 2
20524: PPUSH
20525: CALL_OW 12
20529: ARRAY
20530: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20531: LD_VAR 0 1
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20543: LD_VAR 0 1
20547: PPUSH
20548: LD_OWVAR 3
20552: PUSH
20553: LD_VAR 0 1
20557: DIFF
20558: PPUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 74
20568: PPUSH
20569: CALL_OW 115
// wait ( 0 0$20 ) ;
20573: LD_INT 700
20575: PPUSH
20576: CALL_OW 67
// SetSide ( un , your_side ) ;
20580: LD_VAR 0 1
20584: PPUSH
20585: LD_OWVAR 2
20589: PPUSH
20590: CALL_OW 235
// end ;
20594: PPOPN 2
20596: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20597: LD_EXP 27
20601: PUSH
20602: LD_EXP 60
20606: AND
20607: IFFALSE 20713
20609: GO 20611
20611: DISABLE
20612: LD_INT 0
20614: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20615: LD_ADDR_VAR 0 1
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_OWVAR 2
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 2
20634: PUSH
20635: LD_INT 30
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 30
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: ST_TO_ADDR
// if not depot then
20669: LD_VAR 0 1
20673: NOT
20674: IFFALSE 20678
// exit ;
20676: GO 20713
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20678: LD_VAR 0 1
20682: PUSH
20683: LD_INT 1
20685: ARRAY
20686: PPUSH
20687: CALL_OW 250
20691: PPUSH
20692: LD_VAR 0 1
20696: PUSH
20697: LD_INT 1
20699: ARRAY
20700: PPUSH
20701: CALL_OW 251
20705: PPUSH
20706: LD_INT 70
20708: PPUSH
20709: CALL_OW 495
// end ;
20713: PPOPN 1
20715: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20716: LD_EXP 27
20720: PUSH
20721: LD_EXP 61
20725: AND
20726: IFFALSE 20937
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20738: LD_ADDR_VAR 0 5
20742: PUSH
20743: LD_INT 22
20745: PUSH
20746: LD_OWVAR 2
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 21
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PPUSH
20769: CALL_OW 69
20773: ST_TO_ADDR
// if not tmp then
20774: LD_VAR 0 5
20778: NOT
20779: IFFALSE 20783
// exit ;
20781: GO 20937
// for i in tmp do
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_VAR 0 5
20792: PUSH
20793: FOR_IN
20794: IFFALSE 20935
// begin d := rand ( 0 , 5 ) ;
20796: LD_ADDR_VAR 0 4
20800: PUSH
20801: LD_INT 0
20803: PPUSH
20804: LD_INT 5
20806: PPUSH
20807: CALL_OW 12
20811: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20812: LD_ADDR_VAR 0 2
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 250
20826: PPUSH
20827: LD_VAR 0 4
20831: PPUSH
20832: LD_INT 3
20834: PPUSH
20835: LD_INT 12
20837: PPUSH
20838: CALL_OW 12
20842: PPUSH
20843: CALL_OW 272
20847: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 251
20862: PPUSH
20863: LD_VAR 0 4
20867: PPUSH
20868: LD_INT 3
20870: PPUSH
20871: LD_INT 12
20873: PPUSH
20874: CALL_OW 12
20878: PPUSH
20879: CALL_OW 273
20883: ST_TO_ADDR
// if ValidHex ( x , y ) then
20884: LD_VAR 0 2
20888: PPUSH
20889: LD_VAR 0 3
20893: PPUSH
20894: CALL_OW 488
20898: IFFALSE 20933
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20900: LD_VAR 0 1
20904: PPUSH
20905: LD_VAR 0 2
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 3
20917: PPUSH
20918: LD_INT 6
20920: PPUSH
20921: CALL_OW 12
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 483
// end ;
20933: GO 20793
20935: POP
20936: POP
// end ;
20937: PPOPN 5
20939: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20940: LD_EXP 27
20944: PUSH
20945: LD_EXP 62
20949: AND
20950: IFFALSE 21044
20952: GO 20954
20954: DISABLE
20955: LD_INT 0
20957: PPUSH
20958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20959: LD_ADDR_VAR 0 2
20963: PUSH
20964: LD_INT 22
20966: PUSH
20967: LD_OWVAR 2
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 32
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: LIST
21000: PPUSH
21001: CALL_OW 69
21005: ST_TO_ADDR
// if not tmp then
21006: LD_VAR 0 2
21010: NOT
21011: IFFALSE 21015
// exit ;
21013: GO 21044
// for i in tmp do
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_VAR 0 2
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21042
// SetFuel ( i , 0 ) ;
21028: LD_VAR 0 1
21032: PPUSH
21033: LD_INT 0
21035: PPUSH
21036: CALL_OW 240
21040: GO 21025
21042: POP
21043: POP
// end ;
21044: PPOPN 2
21046: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21047: LD_EXP 27
21051: PUSH
21052: LD_EXP 63
21056: AND
21057: IFFALSE 21123
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21065: LD_ADDR_VAR 0 1
21069: PUSH
21070: LD_INT 22
21072: PUSH
21073: LD_OWVAR 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 30
21084: PUSH
21085: LD_INT 29
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PPUSH
21096: CALL_OW 69
21100: ST_TO_ADDR
// if not tmp then
21101: LD_VAR 0 1
21105: NOT
21106: IFFALSE 21110
// exit ;
21108: GO 21123
// DestroyUnit ( tmp [ 1 ] ) ;
21110: LD_VAR 0 1
21114: PUSH
21115: LD_INT 1
21117: ARRAY
21118: PPUSH
21119: CALL_OW 65
// end ;
21123: PPOPN 1
21125: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21126: LD_EXP 27
21130: PUSH
21131: LD_EXP 65
21135: AND
21136: IFFALSE 21265
21138: GO 21140
21140: DISABLE
21141: LD_INT 0
21143: PPUSH
// begin uc_side := 0 ;
21144: LD_ADDR_OWVAR 20
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// uc_nation := nation_arabian ;
21152: LD_ADDR_OWVAR 21
21156: PUSH
21157: LD_INT 2
21159: ST_TO_ADDR
// hc_gallery :=  ;
21160: LD_ADDR_OWVAR 33
21164: PUSH
21165: LD_STRING 
21167: ST_TO_ADDR
// hc_name :=  ;
21168: LD_ADDR_OWVAR 26
21172: PUSH
21173: LD_STRING 
21175: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21176: LD_INT 1
21178: PPUSH
21179: LD_INT 11
21181: PPUSH
21182: LD_INT 10
21184: PPUSH
21185: CALL_OW 380
// un := CreateHuman ;
21189: LD_ADDR_VAR 0 1
21193: PUSH
21194: CALL_OW 44
21198: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21199: LD_VAR 0 1
21203: PPUSH
21204: LD_INT 1
21206: PPUSH
21207: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21211: LD_INT 35
21213: PPUSH
21214: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_INT 22
21225: PUSH
21226: LD_OWVAR 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: PPUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: CALL_OW 74
21249: PPUSH
21250: CALL_OW 115
// until IsDead ( un ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 301
21263: IFFALSE 21211
// end ;
21265: PPOPN 1
21267: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21268: LD_EXP 27
21272: PUSH
21273: LD_EXP 67
21277: AND
21278: IFFALSE 21290
21280: GO 21282
21282: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21283: LD_STRING earthquake(getX(game), 0, 32)
21285: PPUSH
21286: CALL_OW 559
21290: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21291: LD_EXP 27
21295: PUSH
21296: LD_EXP 68
21300: AND
21301: IFFALSE 21392
21303: GO 21305
21305: DISABLE
21306: LD_INT 0
21308: PPUSH
// begin enable ;
21309: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21310: LD_ADDR_VAR 0 1
21314: PUSH
21315: LD_INT 22
21317: PUSH
21318: LD_OWVAR 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 21
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 33
21339: PUSH
21340: LD_INT 3
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: PPUSH
21352: CALL_OW 69
21356: ST_TO_ADDR
// if not tmp then
21357: LD_VAR 0 1
21361: NOT
21362: IFFALSE 21366
// exit ;
21364: GO 21392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21366: LD_VAR 0 1
21370: PUSH
21371: LD_INT 1
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 12
21383: ARRAY
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: CALL_OW 234
// end ;
21392: PPOPN 1
21394: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21395: LD_EXP 27
21399: PUSH
21400: LD_EXP 69
21404: AND
21405: IFFALSE 21546
21407: GO 21409
21409: DISABLE
21410: LD_INT 0
21412: PPUSH
21413: PPUSH
21414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_OWVAR 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 25
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PPUSH
21446: CALL_OW 69
21450: ST_TO_ADDR
// if not tmp then
21451: LD_VAR 0 3
21455: NOT
21456: IFFALSE 21460
// exit ;
21458: GO 21546
// un := tmp [ rand ( 1 , tmp ) ] ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_VAR 0 3
21477: PPUSH
21478: CALL_OW 12
21482: ARRAY
21483: ST_TO_ADDR
// if Crawls ( un ) then
21484: LD_VAR 0 2
21488: PPUSH
21489: CALL_OW 318
21493: IFFALSE 21504
// ComWalk ( un ) ;
21495: LD_VAR 0 2
21499: PPUSH
21500: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_INT 9
21511: PPUSH
21512: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21516: LD_INT 28
21518: PPUSH
21519: LD_OWVAR 2
21523: PPUSH
21524: LD_INT 2
21526: PPUSH
21527: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21531: LD_INT 29
21533: PPUSH
21534: LD_OWVAR 2
21538: PPUSH
21539: LD_INT 2
21541: PPUSH
21542: CALL_OW 322
// end ;
21546: PPOPN 3
21548: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21549: LD_EXP 27
21553: PUSH
21554: LD_EXP 70
21558: AND
21559: IFFALSE 21670
21561: GO 21563
21563: DISABLE
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_OWVAR 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 25
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 69
21604: ST_TO_ADDR
// if not tmp then
21605: LD_VAR 0 3
21609: NOT
21610: IFFALSE 21614
// exit ;
21612: GO 21670
// un := tmp [ rand ( 1 , tmp ) ] ;
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 1
21626: PPUSH
21627: LD_VAR 0 3
21631: PPUSH
21632: CALL_OW 12
21636: ARRAY
21637: ST_TO_ADDR
// if Crawls ( un ) then
21638: LD_VAR 0 2
21642: PPUSH
21643: CALL_OW 318
21647: IFFALSE 21658
// ComWalk ( un ) ;
21649: LD_VAR 0 2
21653: PPUSH
21654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21658: LD_VAR 0 2
21662: PPUSH
21663: LD_INT 8
21665: PPUSH
21666: CALL_OW 336
// end ;
21670: PPOPN 3
21672: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21673: LD_EXP 27
21677: PUSH
21678: LD_EXP 71
21682: AND
21683: IFFALSE 21827
21685: GO 21687
21687: DISABLE
21688: LD_INT 0
21690: PPUSH
21691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 34
21724: PUSH
21725: LD_INT 12
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 34
21734: PUSH
21735: LD_INT 51
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 34
21744: PUSH
21745: LD_INT 32
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: PPUSH
21763: CALL_OW 69
21767: ST_TO_ADDR
// if not tmp then
21768: LD_VAR 0 2
21772: NOT
21773: IFFALSE 21777
// exit ;
21775: GO 21827
// for i in tmp do
21777: LD_ADDR_VAR 0 1
21781: PUSH
21782: LD_VAR 0 2
21786: PUSH
21787: FOR_IN
21788: IFFALSE 21825
// if GetCargo ( i , mat_artifact ) = 0 then
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_INT 4
21797: PPUSH
21798: CALL_OW 289
21802: PUSH
21803: LD_INT 0
21805: EQUAL
21806: IFFALSE 21823
// SetCargo ( i , mat_siberit , 100 ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 3
21815: PPUSH
21816: LD_INT 100
21818: PPUSH
21819: CALL_OW 290
21823: GO 21787
21825: POP
21826: POP
// end ;
21827: PPOPN 2
21829: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21830: LD_EXP 27
21834: PUSH
21835: LD_EXP 72
21839: AND
21840: IFFALSE 22023
21842: GO 21844
21844: DISABLE
21845: LD_INT 0
21847: PPUSH
21848: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21849: LD_ADDR_VAR 0 2
21853: PUSH
21854: LD_INT 22
21856: PUSH
21857: LD_OWVAR 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 69
21870: ST_TO_ADDR
// if not tmp then
21871: LD_VAR 0 2
21875: NOT
21876: IFFALSE 21880
// exit ;
21878: GO 22023
// for i := 1 to 2 do
21880: LD_ADDR_VAR 0 1
21884: PUSH
21885: DOUBLE
21886: LD_INT 1
21888: DEC
21889: ST_TO_ADDR
21890: LD_INT 2
21892: PUSH
21893: FOR_TO
21894: IFFALSE 22021
// begin uc_side := your_side ;
21896: LD_ADDR_OWVAR 20
21900: PUSH
21901: LD_OWVAR 2
21905: ST_TO_ADDR
// uc_nation := nation_american ;
21906: LD_ADDR_OWVAR 21
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// vc_chassis := us_morphling ;
21914: LD_ADDR_OWVAR 37
21918: PUSH
21919: LD_INT 5
21921: ST_TO_ADDR
// vc_engine := engine_siberite ;
21922: LD_ADDR_OWVAR 39
21926: PUSH
21927: LD_INT 3
21929: ST_TO_ADDR
// vc_control := control_computer ;
21930: LD_ADDR_OWVAR 38
21934: PUSH
21935: LD_INT 3
21937: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21938: LD_ADDR_OWVAR 40
21942: PUSH
21943: LD_INT 10
21945: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21946: LD_VAR 0 2
21950: PUSH
21951: LD_INT 1
21953: ARRAY
21954: PPUSH
21955: CALL_OW 310
21959: NOT
21960: IFFALSE 22007
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21962: CALL_OW 45
21966: PPUSH
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: ARRAY
21975: PPUSH
21976: CALL_OW 250
21980: PPUSH
21981: LD_VAR 0 2
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: PPUSH
21990: CALL_OW 251
21994: PPUSH
21995: LD_INT 12
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: CALL_OW 50
22005: GO 22019
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22007: CALL_OW 45
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 51
// end ;
22019: GO 21893
22021: POP
22022: POP
// end ;
22023: PPOPN 2
22025: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22026: LD_EXP 27
22030: PUSH
22031: LD_EXP 73
22035: AND
22036: IFFALSE 22258
22038: GO 22040
22040: DISABLE
22041: LD_INT 0
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22049: LD_ADDR_VAR 0 6
22053: PUSH
22054: LD_INT 22
22056: PUSH
22057: LD_OWVAR 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 21
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: PUSH
22079: LD_INT 23
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: ST_TO_ADDR
// if not tmp then
22103: LD_VAR 0 6
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 22258
// s1 := rand ( 1 , 4 ) ;
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_INT 1
22119: PPUSH
22120: LD_INT 4
22122: PPUSH
22123: CALL_OW 12
22127: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22128: LD_ADDR_VAR 0 4
22132: PUSH
22133: LD_VAR 0 6
22137: PUSH
22138: LD_INT 1
22140: ARRAY
22141: PPUSH
22142: LD_VAR 0 2
22146: PPUSH
22147: CALL_OW 259
22151: ST_TO_ADDR
// if s1 = 1 then
22152: LD_VAR 0 2
22156: PUSH
22157: LD_INT 1
22159: EQUAL
22160: IFFALSE 22180
// s2 := rand ( 2 , 4 ) else
22162: LD_ADDR_VAR 0 3
22166: PUSH
22167: LD_INT 2
22169: PPUSH
22170: LD_INT 4
22172: PPUSH
22173: CALL_OW 12
22177: ST_TO_ADDR
22178: GO 22188
// s2 := 1 ;
22180: LD_ADDR_VAR 0 3
22184: PUSH
22185: LD_INT 1
22187: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22188: LD_ADDR_VAR 0 5
22192: PUSH
22193: LD_VAR 0 6
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: CALL_OW 259
22211: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22212: LD_VAR 0 6
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: PPUSH
22221: LD_VAR 0 2
22225: PPUSH
22226: LD_VAR 0 5
22230: PPUSH
22231: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22235: LD_VAR 0 6
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: LD_VAR 0 4
22253: PPUSH
22254: CALL_OW 237
// end ;
22258: PPOPN 6
22260: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22261: LD_EXP 27
22265: PUSH
22266: LD_EXP 74
22270: AND
22271: IFFALSE 22350
22273: GO 22275
22275: DISABLE
22276: LD_INT 0
22278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22279: LD_ADDR_VAR 0 1
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 30
22298: PUSH
22299: LD_INT 3
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 69
22314: ST_TO_ADDR
// if not tmp then
22315: LD_VAR 0 1
22319: NOT
22320: IFFALSE 22324
// exit ;
22322: GO 22350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 1
22331: PPUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 12
22341: ARRAY
22342: PPUSH
22343: LD_INT 1
22345: PPUSH
22346: CALL_OW 234
// end ;
22350: PPOPN 1
22352: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22353: LD_EXP 27
22357: PUSH
22358: LD_EXP 75
22362: AND
22363: IFFALSE 22475
22365: GO 22367
22367: DISABLE
22368: LD_INT 0
22370: PPUSH
22371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22372: LD_ADDR_VAR 0 2
22376: PUSH
22377: LD_INT 22
22379: PUSH
22380: LD_OWVAR 2
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: LD_INT 30
22394: PUSH
22395: LD_INT 27
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_INT 26
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 30
22414: PUSH
22415: LD_INT 28
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PPUSH
22432: CALL_OW 69
22436: ST_TO_ADDR
// if not tmp then
22437: LD_VAR 0 2
22441: NOT
22442: IFFALSE 22446
// exit ;
22444: GO 22475
// for i in tmp do
22446: LD_ADDR_VAR 0 1
22450: PUSH
22451: LD_VAR 0 2
22455: PUSH
22456: FOR_IN
22457: IFFALSE 22473
// SetLives ( i , 1 ) ;
22459: LD_VAR 0 1
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 234
22471: GO 22456
22473: POP
22474: POP
// end ;
22475: PPOPN 2
22477: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22478: LD_EXP 27
22482: PUSH
22483: LD_EXP 76
22487: AND
22488: IFFALSE 22775
22490: GO 22492
22492: DISABLE
22493: LD_INT 0
22495: PPUSH
22496: PPUSH
22497: PPUSH
// begin i := rand ( 1 , 7 ) ;
22498: LD_ADDR_VAR 0 1
22502: PUSH
22503: LD_INT 1
22505: PPUSH
22506: LD_INT 7
22508: PPUSH
22509: CALL_OW 12
22513: ST_TO_ADDR
// case i of 1 :
22514: LD_VAR 0 1
22518: PUSH
22519: LD_INT 1
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22537
22527: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22528: LD_STRING earthquake(getX(game), 0, 32)
22530: PPUSH
22531: CALL_OW 559
22535: GO 22775
22537: LD_INT 2
22539: DOUBLE
22540: EQUAL
22541: IFTRUE 22545
22543: GO 22559
22545: POP
// begin ToLua ( displayStucuk(); ) ;
22546: LD_STRING displayStucuk();
22548: PPUSH
22549: CALL_OW 559
// ResetFog ;
22553: CALL_OW 335
// end ; 3 :
22557: GO 22775
22559: LD_INT 3
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22671
22567: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22568: LD_ADDR_VAR 0 2
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_OWVAR 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 25
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: ST_TO_ADDR
// if not tmp then
22604: LD_VAR 0 2
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22775
// un := tmp [ rand ( 1 , tmp ) ] ;
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_VAR 0 2
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 2
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: ST_TO_ADDR
// if Crawls ( un ) then
22637: LD_VAR 0 3
22641: PPUSH
22642: CALL_OW 318
22646: IFFALSE 22657
// ComWalk ( un ) ;
22648: LD_VAR 0 3
22652: PPUSH
22653: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22657: LD_VAR 0 3
22661: PPUSH
22662: LD_INT 8
22664: PPUSH
22665: CALL_OW 336
// end ; 4 :
22669: GO 22775
22671: LD_INT 4
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 22753
22679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_OWVAR 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 30
22699: PUSH
22700: LD_INT 29
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PPUSH
22711: CALL_OW 69
22715: ST_TO_ADDR
// if not tmp then
22716: LD_VAR 0 2
22720: NOT
22721: IFFALSE 22725
// exit ;
22723: GO 22775
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22725: LD_VAR 0 2
22729: PUSH
22730: LD_INT 1
22732: ARRAY
22733: PPUSH
22734: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22738: LD_VAR 0 2
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: PPUSH
22747: CALL_OW 65
// end ; 5 .. 7 :
22751: GO 22775
22753: LD_INT 5
22755: DOUBLE
22756: GREATEREQUAL
22757: IFFALSE 22765
22759: LD_INT 7
22761: DOUBLE
22762: LESSEQUAL
22763: IFTRUE 22767
22765: GO 22774
22767: POP
// StreamSibBomb ; end ;
22768: CALL 19012 0 0
22772: GO 22775
22774: POP
// end ;
22775: PPOPN 3
22777: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22778: LD_EXP 27
22782: PUSH
22783: LD_EXP 77
22787: AND
22788: IFFALSE 22944
22790: GO 22792
22792: DISABLE
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22798: LD_ADDR_VAR 0 2
22802: PUSH
22803: LD_INT 81
22805: PUSH
22806: LD_OWVAR 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: LD_INT 21
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL_OW 69
22851: ST_TO_ADDR
// if not tmp then
22852: LD_VAR 0 2
22856: NOT
22857: IFFALSE 22861
// exit ;
22859: GO 22944
// p := 0 ;
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: LD_INT 0
22868: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22869: LD_INT 35
22871: PPUSH
22872: CALL_OW 67
// p := p + 1 ;
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: LD_VAR 0 3
22885: PUSH
22886: LD_INT 1
22888: PLUS
22889: ST_TO_ADDR
// for i in tmp do
22890: LD_ADDR_VAR 0 1
22894: PUSH
22895: LD_VAR 0 2
22899: PUSH
22900: FOR_IN
22901: IFFALSE 22932
// if GetLives ( i ) < 1000 then
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 256
22912: PUSH
22913: LD_INT 1000
22915: LESS
22916: IFFALSE 22930
// SetLives ( i , 1000 ) ;
22918: LD_VAR 0 1
22922: PPUSH
22923: LD_INT 1000
22925: PPUSH
22926: CALL_OW 234
22930: GO 22900
22932: POP
22933: POP
// until p > 20 ;
22934: LD_VAR 0 3
22938: PUSH
22939: LD_INT 20
22941: GREATER
22942: IFFALSE 22869
// end ;
22944: PPOPN 3
22946: END
// every 0 0$1 trigger StreamModeActive and sTime do
22947: LD_EXP 27
22951: PUSH
22952: LD_EXP 78
22956: AND
22957: IFFALSE 22992
22959: GO 22961
22961: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22962: LD_INT 28
22964: PPUSH
22965: LD_OWVAR 2
22969: PPUSH
22970: LD_INT 2
22972: PPUSH
22973: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22977: LD_INT 30
22979: PPUSH
22980: LD_OWVAR 2
22984: PPUSH
22985: LD_INT 2
22987: PPUSH
22988: CALL_OW 322
// end ;
22992: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22993: LD_EXP 27
22997: PUSH
22998: LD_EXP 79
23002: AND
23003: IFFALSE 23124
23005: GO 23007
23007: DISABLE
23008: LD_INT 0
23010: PPUSH
23011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23012: LD_ADDR_VAR 0 2
23016: PUSH
23017: LD_INT 22
23019: PUSH
23020: LD_OWVAR 2
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 21
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 3
23041: PUSH
23042: LD_INT 23
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 69
23065: ST_TO_ADDR
// if not tmp then
23066: LD_VAR 0 2
23070: NOT
23071: IFFALSE 23075
// exit ;
23073: GO 23124
// for i in tmp do
23075: LD_ADDR_VAR 0 1
23079: PUSH
23080: LD_VAR 0 2
23084: PUSH
23085: FOR_IN
23086: IFFALSE 23122
// begin if Crawls ( i ) then
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 318
23097: IFFALSE 23108
// ComWalk ( i ) ;
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 138
// SetClass ( i , 2 ) ;
23108: LD_VAR 0 1
23112: PPUSH
23113: LD_INT 2
23115: PPUSH
23116: CALL_OW 336
// end ;
23120: GO 23085
23122: POP
23123: POP
// end ;
23124: PPOPN 2
23126: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23127: LD_EXP 27
23131: PUSH
23132: LD_EXP 80
23136: AND
23137: IFFALSE 23425
23139: GO 23141
23141: DISABLE
23142: LD_INT 0
23144: PPUSH
23145: PPUSH
23146: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23147: LD_OWVAR 2
23151: PPUSH
23152: LD_INT 9
23154: PPUSH
23155: LD_INT 1
23157: PPUSH
23158: LD_INT 1
23160: PPUSH
23161: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23165: LD_INT 9
23167: PPUSH
23168: LD_OWVAR 2
23172: PPUSH
23173: CALL_OW 343
// uc_side := 9 ;
23177: LD_ADDR_OWVAR 20
23181: PUSH
23182: LD_INT 9
23184: ST_TO_ADDR
// uc_nation := 2 ;
23185: LD_ADDR_OWVAR 21
23189: PUSH
23190: LD_INT 2
23192: ST_TO_ADDR
// hc_name := Dark Warrior ;
23193: LD_ADDR_OWVAR 26
23197: PUSH
23198: LD_STRING Dark Warrior
23200: ST_TO_ADDR
// hc_gallery :=  ;
23201: LD_ADDR_OWVAR 33
23205: PUSH
23206: LD_STRING 
23208: ST_TO_ADDR
// hc_noskilllimit := true ;
23209: LD_ADDR_OWVAR 76
23213: PUSH
23214: LD_INT 1
23216: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23217: LD_ADDR_OWVAR 31
23221: PUSH
23222: LD_INT 30
23224: PUSH
23225: LD_INT 30
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 30
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// un := CreateHuman ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: CALL_OW 44
23249: ST_TO_ADDR
// hc_noskilllimit := false ;
23250: LD_ADDR_OWVAR 76
23254: PUSH
23255: LD_INT 0
23257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23258: LD_VAR 0 3
23262: PPUSH
23263: LD_INT 1
23265: PPUSH
23266: CALL_OW 51
// ToLua ( playRanger() ) ;
23270: LD_STRING playRanger()
23272: PPUSH
23273: CALL_OW 559
// p := 0 ;
23277: LD_ADDR_VAR 0 2
23281: PUSH
23282: LD_INT 0
23284: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23285: LD_INT 35
23287: PPUSH
23288: CALL_OW 67
// p := p + 1 ;
23292: LD_ADDR_VAR 0 2
23296: PUSH
23297: LD_VAR 0 2
23301: PUSH
23302: LD_INT 1
23304: PLUS
23305: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23306: LD_VAR 0 3
23310: PPUSH
23311: CALL_OW 256
23315: PUSH
23316: LD_INT 1000
23318: LESS
23319: IFFALSE 23333
// SetLives ( un , 1000 ) ;
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1000
23328: PPUSH
23329: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23333: LD_VAR 0 3
23337: PPUSH
23338: LD_INT 81
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 91
23352: PUSH
23353: LD_VAR 0 3
23357: PUSH
23358: LD_INT 30
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PPUSH
23370: CALL_OW 69
23374: PPUSH
23375: LD_VAR 0 3
23379: PPUSH
23380: CALL_OW 74
23384: PPUSH
23385: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23389: LD_VAR 0 2
23393: PUSH
23394: LD_INT 80
23396: GREATER
23397: PUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: CALL_OW 301
23407: OR
23408: IFFALSE 23285
// if un then
23410: LD_VAR 0 3
23414: IFFALSE 23425
// RemoveUnit ( un ) ;
23416: LD_VAR 0 3
23420: PPUSH
23421: CALL_OW 64
// end ;
23425: PPOPN 3
23427: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23428: LD_EXP 81
23432: IFFALSE 23548
23434: GO 23436
23436: DISABLE
23437: LD_INT 0
23439: PPUSH
23440: PPUSH
23441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23442: LD_ADDR_VAR 0 2
23446: PUSH
23447: LD_INT 81
23449: PUSH
23450: LD_OWVAR 2
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 21
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PPUSH
23473: CALL_OW 69
23477: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23478: LD_STRING playComputer()
23480: PPUSH
23481: CALL_OW 559
// if not tmp then
23485: LD_VAR 0 2
23489: NOT
23490: IFFALSE 23494
// exit ;
23492: GO 23548
// for i in tmp do
23494: LD_ADDR_VAR 0 1
23498: PUSH
23499: LD_VAR 0 2
23503: PUSH
23504: FOR_IN
23505: IFFALSE 23546
// for j := 1 to 4 do
23507: LD_ADDR_VAR 0 3
23511: PUSH
23512: DOUBLE
23513: LD_INT 1
23515: DEC
23516: ST_TO_ADDR
23517: LD_INT 4
23519: PUSH
23520: FOR_TO
23521: IFFALSE 23542
// SetSkill ( i , j , 10 ) ;
23523: LD_VAR 0 1
23527: PPUSH
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_INT 10
23535: PPUSH
23536: CALL_OW 237
23540: GO 23520
23542: POP
23543: POP
23544: GO 23504
23546: POP
23547: POP
// end ;
23548: PPOPN 3
23550: END
// every 0 0$1 trigger s30 do var i , tmp ;
23551: LD_EXP 82
23555: IFFALSE 23624
23557: GO 23559
23559: DISABLE
23560: LD_INT 0
23562: PPUSH
23563: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23564: LD_ADDR_VAR 0 2
23568: PUSH
23569: LD_INT 22
23571: PUSH
23572: LD_OWVAR 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: ST_TO_ADDR
// if not tmp then
23586: LD_VAR 0 2
23590: NOT
23591: IFFALSE 23595
// exit ;
23593: GO 23624
// for i in tmp do
23595: LD_ADDR_VAR 0 1
23599: PUSH
23600: LD_VAR 0 2
23604: PUSH
23605: FOR_IN
23606: IFFALSE 23622
// SetLives ( i , 300 ) ;
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_INT 300
23615: PPUSH
23616: CALL_OW 234
23620: GO 23605
23622: POP
23623: POP
// end ;
23624: PPOPN 2
23626: END
// every 0 0$1 trigger s60 do var i , tmp ;
23627: LD_EXP 83
23631: IFFALSE 23700
23633: GO 23635
23635: DISABLE
23636: LD_INT 0
23638: PPUSH
23639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23640: LD_ADDR_VAR 0 2
23644: PUSH
23645: LD_INT 22
23647: PUSH
23648: LD_OWVAR 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PPUSH
23657: CALL_OW 69
23661: ST_TO_ADDR
// if not tmp then
23662: LD_VAR 0 2
23666: NOT
23667: IFFALSE 23671
// exit ;
23669: GO 23700
// for i in tmp do
23671: LD_ADDR_VAR 0 1
23675: PUSH
23676: LD_VAR 0 2
23680: PUSH
23681: FOR_IN
23682: IFFALSE 23698
// SetLives ( i , 600 ) ;
23684: LD_VAR 0 1
23688: PPUSH
23689: LD_INT 600
23691: PPUSH
23692: CALL_OW 234
23696: GO 23681
23698: POP
23699: POP
// end ;
23700: PPOPN 2
23702: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23703: LD_INT 0
23705: PPUSH
// case cmd of 301 :
23706: LD_VAR 0 1
23710: PUSH
23711: LD_INT 301
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23751
23719: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23720: LD_VAR 0 6
23724: PPUSH
23725: LD_VAR 0 7
23729: PPUSH
23730: LD_VAR 0 8
23734: PPUSH
23735: LD_VAR 0 4
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: CALL 24952 0 5
23749: GO 23872
23751: LD_INT 302
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23796
23759: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23760: LD_VAR 0 6
23764: PPUSH
23765: LD_VAR 0 7
23769: PPUSH
23770: LD_VAR 0 8
23774: PPUSH
23775: LD_VAR 0 9
23779: PPUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: LD_VAR 0 5
23789: PPUSH
23790: CALL 25043 0 6
23794: GO 23872
23796: LD_INT 303
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23841
23804: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23805: LD_VAR 0 6
23809: PPUSH
23810: LD_VAR 0 7
23814: PPUSH
23815: LD_VAR 0 8
23819: PPUSH
23820: LD_VAR 0 9
23824: PPUSH
23825: LD_VAR 0 4
23829: PPUSH
23830: LD_VAR 0 5
23834: PPUSH
23835: CALL 23877 0 6
23839: GO 23872
23841: LD_INT 304
23843: DOUBLE
23844: EQUAL
23845: IFTRUE 23849
23847: GO 23871
23849: POP
// hHackTeleport ( unit , x , y ) ; end ;
23850: LD_VAR 0 2
23854: PPUSH
23855: LD_VAR 0 4
23859: PPUSH
23860: LD_VAR 0 5
23864: PPUSH
23865: CALL 25636 0 3
23869: GO 23872
23871: POP
// end ;
23872: LD_VAR 0 12
23876: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23877: LD_INT 0
23879: PPUSH
23880: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23881: LD_VAR 0 1
23885: PUSH
23886: LD_INT 1
23888: LESS
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_INT 3
23897: GREATER
23898: OR
23899: PUSH
23900: LD_VAR 0 5
23904: PPUSH
23905: LD_VAR 0 6
23909: PPUSH
23910: CALL_OW 428
23914: OR
23915: IFFALSE 23919
// exit ;
23917: GO 24639
// uc_side := your_side ;
23919: LD_ADDR_OWVAR 20
23923: PUSH
23924: LD_OWVAR 2
23928: ST_TO_ADDR
// uc_nation := nation ;
23929: LD_ADDR_OWVAR 21
23933: PUSH
23934: LD_VAR 0 1
23938: ST_TO_ADDR
// bc_level = 1 ;
23939: LD_ADDR_OWVAR 43
23943: PUSH
23944: LD_INT 1
23946: ST_TO_ADDR
// case btype of 1 :
23947: LD_VAR 0 2
23951: PUSH
23952: LD_INT 1
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23971
23960: POP
// bc_type := b_depot ; 2 :
23961: LD_ADDR_OWVAR 42
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
23969: GO 24583
23971: LD_INT 2
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 23990
23979: POP
// bc_type := b_warehouse ; 3 :
23980: LD_ADDR_OWVAR 42
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
23988: GO 24583
23990: LD_INT 3
23992: DOUBLE
23993: EQUAL
23994: IFTRUE 23998
23996: GO 24009
23998: POP
// bc_type := b_lab ; 4 .. 9 :
23999: LD_ADDR_OWVAR 42
24003: PUSH
24004: LD_INT 6
24006: ST_TO_ADDR
24007: GO 24583
24009: LD_INT 4
24011: DOUBLE
24012: GREATEREQUAL
24013: IFFALSE 24021
24015: LD_INT 9
24017: DOUBLE
24018: LESSEQUAL
24019: IFTRUE 24023
24021: GO 24075
24023: POP
// begin bc_type := b_lab_half ;
24024: LD_ADDR_OWVAR 42
24028: PUSH
24029: LD_INT 7
24031: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24032: LD_ADDR_OWVAR 44
24036: PUSH
24037: LD_INT 10
24039: PUSH
24040: LD_INT 11
24042: PUSH
24043: LD_INT 12
24045: PUSH
24046: LD_INT 15
24048: PUSH
24049: LD_INT 14
24051: PUSH
24052: LD_INT 13
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: PUSH
24063: LD_VAR 0 2
24067: PUSH
24068: LD_INT 3
24070: MINUS
24071: ARRAY
24072: ST_TO_ADDR
// end ; 10 .. 13 :
24073: GO 24583
24075: LD_INT 10
24077: DOUBLE
24078: GREATEREQUAL
24079: IFFALSE 24087
24081: LD_INT 13
24083: DOUBLE
24084: LESSEQUAL
24085: IFTRUE 24089
24087: GO 24166
24089: POP
// begin bc_type := b_lab_full ;
24090: LD_ADDR_OWVAR 42
24094: PUSH
24095: LD_INT 8
24097: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24098: LD_ADDR_OWVAR 44
24102: PUSH
24103: LD_INT 10
24105: PUSH
24106: LD_INT 12
24108: PUSH
24109: LD_INT 14
24111: PUSH
24112: LD_INT 13
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: PUSH
24121: LD_VAR 0 2
24125: PUSH
24126: LD_INT 9
24128: MINUS
24129: ARRAY
24130: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24131: LD_ADDR_OWVAR 45
24135: PUSH
24136: LD_INT 11
24138: PUSH
24139: LD_INT 15
24141: PUSH
24142: LD_INT 12
24144: PUSH
24145: LD_INT 15
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: PUSH
24154: LD_VAR 0 2
24158: PUSH
24159: LD_INT 9
24161: MINUS
24162: ARRAY
24163: ST_TO_ADDR
// end ; 14 :
24164: GO 24583
24166: LD_INT 14
24168: DOUBLE
24169: EQUAL
24170: IFTRUE 24174
24172: GO 24185
24174: POP
// bc_type := b_workshop ; 15 :
24175: LD_ADDR_OWVAR 42
24179: PUSH
24180: LD_INT 2
24182: ST_TO_ADDR
24183: GO 24583
24185: LD_INT 15
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24204
24193: POP
// bc_type := b_factory ; 16 :
24194: LD_ADDR_OWVAR 42
24198: PUSH
24199: LD_INT 3
24201: ST_TO_ADDR
24202: GO 24583
24204: LD_INT 16
24206: DOUBLE
24207: EQUAL
24208: IFTRUE 24212
24210: GO 24223
24212: POP
// bc_type := b_ext_gun ; 17 :
24213: LD_ADDR_OWVAR 42
24217: PUSH
24218: LD_INT 17
24220: ST_TO_ADDR
24221: GO 24583
24223: LD_INT 17
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24259
24231: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24232: LD_ADDR_OWVAR 42
24236: PUSH
24237: LD_INT 19
24239: PUSH
24240: LD_INT 23
24242: PUSH
24243: LD_INT 19
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: PUSH
24251: LD_VAR 0 1
24255: ARRAY
24256: ST_TO_ADDR
24257: GO 24583
24259: LD_INT 18
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24278
24267: POP
// bc_type := b_ext_radar ; 19 :
24268: LD_ADDR_OWVAR 42
24272: PUSH
24273: LD_INT 20
24275: ST_TO_ADDR
24276: GO 24583
24278: LD_INT 19
24280: DOUBLE
24281: EQUAL
24282: IFTRUE 24286
24284: GO 24297
24286: POP
// bc_type := b_ext_radio ; 20 :
24287: LD_ADDR_OWVAR 42
24291: PUSH
24292: LD_INT 22
24294: ST_TO_ADDR
24295: GO 24583
24297: LD_INT 20
24299: DOUBLE
24300: EQUAL
24301: IFTRUE 24305
24303: GO 24316
24305: POP
// bc_type := b_ext_siberium ; 21 :
24306: LD_ADDR_OWVAR 42
24310: PUSH
24311: LD_INT 21
24313: ST_TO_ADDR
24314: GO 24583
24316: LD_INT 21
24318: DOUBLE
24319: EQUAL
24320: IFTRUE 24324
24322: GO 24335
24324: POP
// bc_type := b_ext_computer ; 22 :
24325: LD_ADDR_OWVAR 42
24329: PUSH
24330: LD_INT 24
24332: ST_TO_ADDR
24333: GO 24583
24335: LD_INT 22
24337: DOUBLE
24338: EQUAL
24339: IFTRUE 24343
24341: GO 24354
24343: POP
// bc_type := b_ext_track ; 23 :
24344: LD_ADDR_OWVAR 42
24348: PUSH
24349: LD_INT 16
24351: ST_TO_ADDR
24352: GO 24583
24354: LD_INT 23
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24373
24362: POP
// bc_type := b_ext_laser ; 24 :
24363: LD_ADDR_OWVAR 42
24367: PUSH
24368: LD_INT 25
24370: ST_TO_ADDR
24371: GO 24583
24373: LD_INT 24
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24381
24379: GO 24392
24381: POP
// bc_type := b_control_tower ; 25 :
24382: LD_ADDR_OWVAR 42
24386: PUSH
24387: LD_INT 36
24389: ST_TO_ADDR
24390: GO 24583
24392: LD_INT 25
24394: DOUBLE
24395: EQUAL
24396: IFTRUE 24400
24398: GO 24411
24400: POP
// bc_type := b_breastwork ; 26 :
24401: LD_ADDR_OWVAR 42
24405: PUSH
24406: LD_INT 31
24408: ST_TO_ADDR
24409: GO 24583
24411: LD_INT 26
24413: DOUBLE
24414: EQUAL
24415: IFTRUE 24419
24417: GO 24430
24419: POP
// bc_type := b_bunker ; 27 :
24420: LD_ADDR_OWVAR 42
24424: PUSH
24425: LD_INT 32
24427: ST_TO_ADDR
24428: GO 24583
24430: LD_INT 27
24432: DOUBLE
24433: EQUAL
24434: IFTRUE 24438
24436: GO 24449
24438: POP
// bc_type := b_turret ; 28 :
24439: LD_ADDR_OWVAR 42
24443: PUSH
24444: LD_INT 33
24446: ST_TO_ADDR
24447: GO 24583
24449: LD_INT 28
24451: DOUBLE
24452: EQUAL
24453: IFTRUE 24457
24455: GO 24468
24457: POP
// bc_type := b_armoury ; 29 :
24458: LD_ADDR_OWVAR 42
24462: PUSH
24463: LD_INT 4
24465: ST_TO_ADDR
24466: GO 24583
24468: LD_INT 29
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24476
24474: GO 24487
24476: POP
// bc_type := b_barracks ; 30 :
24477: LD_ADDR_OWVAR 42
24481: PUSH
24482: LD_INT 5
24484: ST_TO_ADDR
24485: GO 24583
24487: LD_INT 30
24489: DOUBLE
24490: EQUAL
24491: IFTRUE 24495
24493: GO 24506
24495: POP
// bc_type := b_solar_power ; 31 :
24496: LD_ADDR_OWVAR 42
24500: PUSH
24501: LD_INT 27
24503: ST_TO_ADDR
24504: GO 24583
24506: LD_INT 31
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24525
24514: POP
// bc_type := b_oil_power ; 32 :
24515: LD_ADDR_OWVAR 42
24519: PUSH
24520: LD_INT 26
24522: ST_TO_ADDR
24523: GO 24583
24525: LD_INT 32
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24544
24533: POP
// bc_type := b_siberite_power ; 33 :
24534: LD_ADDR_OWVAR 42
24538: PUSH
24539: LD_INT 28
24541: ST_TO_ADDR
24542: GO 24583
24544: LD_INT 33
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24563
24552: POP
// bc_type := b_oil_mine ; 34 :
24553: LD_ADDR_OWVAR 42
24557: PUSH
24558: LD_INT 29
24560: ST_TO_ADDR
24561: GO 24583
24563: LD_INT 34
24565: DOUBLE
24566: EQUAL
24567: IFTRUE 24571
24569: GO 24582
24571: POP
// bc_type := b_siberite_mine ; end ;
24572: LD_ADDR_OWVAR 42
24576: PUSH
24577: LD_INT 30
24579: ST_TO_ADDR
24580: GO 24583
24582: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24583: LD_ADDR_VAR 0 8
24587: PUSH
24588: LD_VAR 0 5
24592: PPUSH
24593: LD_VAR 0 6
24597: PPUSH
24598: LD_VAR 0 3
24602: PPUSH
24603: CALL_OW 47
24607: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24608: LD_OWVAR 42
24612: PUSH
24613: LD_INT 32
24615: PUSH
24616: LD_INT 33
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: IN
24623: IFFALSE 24639
// PlaceWeaponTurret ( b , weapon ) ;
24625: LD_VAR 0 8
24629: PPUSH
24630: LD_VAR 0 4
24634: PPUSH
24635: CALL_OW 431
// end ;
24639: LD_VAR 0 7
24643: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24644: LD_INT 0
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24650: LD_ADDR_VAR 0 4
24654: PUSH
24655: LD_INT 22
24657: PUSH
24658: LD_OWVAR 2
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 30
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 30
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: ST_TO_ADDR
// if not tmp then
24704: LD_VAR 0 4
24708: NOT
24709: IFFALSE 24713
// exit ;
24711: GO 24772
// for i in tmp do
24713: LD_ADDR_VAR 0 2
24717: PUSH
24718: LD_VAR 0 4
24722: PUSH
24723: FOR_IN
24724: IFFALSE 24770
// for j = 1 to 3 do
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: DOUBLE
24732: LD_INT 1
24734: DEC
24735: ST_TO_ADDR
24736: LD_INT 3
24738: PUSH
24739: FOR_TO
24740: IFFALSE 24766
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24742: LD_VAR 0 2
24746: PPUSH
24747: CALL_OW 274
24751: PPUSH
24752: LD_VAR 0 3
24756: PPUSH
24757: LD_INT 99999
24759: PPUSH
24760: CALL_OW 277
24764: GO 24739
24766: POP
24767: POP
24768: GO 24723
24770: POP
24771: POP
// end ;
24772: LD_VAR 0 1
24776: RET
// export function hHackSetLevel10 ; var i , j ; begin
24777: LD_INT 0
24779: PPUSH
24780: PPUSH
24781: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24782: LD_ADDR_VAR 0 2
24786: PUSH
24787: LD_INT 21
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PPUSH
24797: CALL_OW 69
24801: PUSH
24802: FOR_IN
24803: IFFALSE 24855
// if IsSelected ( i ) then
24805: LD_VAR 0 2
24809: PPUSH
24810: CALL_OW 306
24814: IFFALSE 24853
// begin for j := 1 to 4 do
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: DOUBLE
24822: LD_INT 1
24824: DEC
24825: ST_TO_ADDR
24826: LD_INT 4
24828: PUSH
24829: FOR_TO
24830: IFFALSE 24851
// SetSkill ( i , j , 10 ) ;
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: LD_INT 10
24844: PPUSH
24845: CALL_OW 237
24849: GO 24829
24851: POP
24852: POP
// end ;
24853: GO 24802
24855: POP
24856: POP
// end ;
24857: LD_VAR 0 1
24861: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
24866: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24867: LD_ADDR_VAR 0 2
24871: PUSH
24872: LD_INT 22
24874: PUSH
24875: LD_OWVAR 2
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 21
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: PUSH
24903: FOR_IN
24904: IFFALSE 24945
// begin for j := 1 to 4 do
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: DOUBLE
24912: LD_INT 1
24914: DEC
24915: ST_TO_ADDR
24916: LD_INT 4
24918: PUSH
24919: FOR_TO
24920: IFFALSE 24941
// SetSkill ( i , j , 10 ) ;
24922: LD_VAR 0 2
24926: PPUSH
24927: LD_VAR 0 3
24931: PPUSH
24932: LD_INT 10
24934: PPUSH
24935: CALL_OW 237
24939: GO 24919
24941: POP
24942: POP
// end ;
24943: GO 24903
24945: POP
24946: POP
// end ;
24947: LD_VAR 0 1
24951: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24952: LD_INT 0
24954: PPUSH
// uc_side := your_side ;
24955: LD_ADDR_OWVAR 20
24959: PUSH
24960: LD_OWVAR 2
24964: ST_TO_ADDR
// uc_nation := nation ;
24965: LD_ADDR_OWVAR 21
24969: PUSH
24970: LD_VAR 0 1
24974: ST_TO_ADDR
// InitHc ;
24975: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24979: LD_INT 0
24981: PPUSH
24982: LD_VAR 0 2
24986: PPUSH
24987: LD_VAR 0 3
24991: PPUSH
24992: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24996: LD_VAR 0 4
25000: PPUSH
25001: LD_VAR 0 5
25005: PPUSH
25006: CALL_OW 428
25010: PUSH
25011: LD_INT 0
25013: EQUAL
25014: IFFALSE 25038
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25016: CALL_OW 44
25020: PPUSH
25021: LD_VAR 0 4
25025: PPUSH
25026: LD_VAR 0 5
25030: PPUSH
25031: LD_INT 1
25033: PPUSH
25034: CALL_OW 48
// end ;
25038: LD_VAR 0 6
25042: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25043: LD_INT 0
25045: PPUSH
25046: PPUSH
// uc_side := your_side ;
25047: LD_ADDR_OWVAR 20
25051: PUSH
25052: LD_OWVAR 2
25056: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25057: LD_VAR 0 1
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: LD_INT 4
25073: PUSH
25074: LD_INT 5
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: IN
25084: IFFALSE 25096
// uc_nation := nation_american else
25086: LD_ADDR_OWVAR 21
25090: PUSH
25091: LD_INT 1
25093: ST_TO_ADDR
25094: GO 25139
// if chassis in [ 11 , 12 , 13 , 14 ] then
25096: LD_VAR 0 1
25100: PUSH
25101: LD_INT 11
25103: PUSH
25104: LD_INT 12
25106: PUSH
25107: LD_INT 13
25109: PUSH
25110: LD_INT 14
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: IN
25119: IFFALSE 25131
// uc_nation := nation_arabian else
25121: LD_ADDR_OWVAR 21
25125: PUSH
25126: LD_INT 2
25128: ST_TO_ADDR
25129: GO 25139
// uc_nation := nation_russian ;
25131: LD_ADDR_OWVAR 21
25135: PUSH
25136: LD_INT 3
25138: ST_TO_ADDR
// vc_chassis := chassis ;
25139: LD_ADDR_OWVAR 37
25143: PUSH
25144: LD_VAR 0 1
25148: ST_TO_ADDR
// vc_engine := engine ;
25149: LD_ADDR_OWVAR 39
25153: PUSH
25154: LD_VAR 0 2
25158: ST_TO_ADDR
// vc_control := control ;
25159: LD_ADDR_OWVAR 38
25163: PUSH
25164: LD_VAR 0 3
25168: ST_TO_ADDR
// vc_weapon := weapon ;
25169: LD_ADDR_OWVAR 40
25173: PUSH
25174: LD_VAR 0 4
25178: ST_TO_ADDR
// un := CreateVehicle ;
25179: LD_ADDR_VAR 0 8
25183: PUSH
25184: CALL_OW 45
25188: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25189: LD_VAR 0 8
25193: PPUSH
25194: LD_INT 0
25196: PPUSH
25197: LD_INT 5
25199: PPUSH
25200: CALL_OW 12
25204: PPUSH
25205: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25209: LD_VAR 0 8
25213: PPUSH
25214: LD_VAR 0 5
25218: PPUSH
25219: LD_VAR 0 6
25223: PPUSH
25224: LD_INT 1
25226: PPUSH
25227: CALL_OW 48
// end ;
25231: LD_VAR 0 7
25235: RET
// export hInvincible ; every 1 do
25236: GO 25238
25238: DISABLE
// hInvincible := [ ] ;
25239: LD_ADDR_EXP 84
25243: PUSH
25244: EMPTY
25245: ST_TO_ADDR
25246: END
// every 10 do var i ;
25247: GO 25249
25249: DISABLE
25250: LD_INT 0
25252: PPUSH
// begin enable ;
25253: ENABLE
// if not hInvincible then
25254: LD_EXP 84
25258: NOT
25259: IFFALSE 25263
// exit ;
25261: GO 25307
// for i in hInvincible do
25263: LD_ADDR_VAR 0 1
25267: PUSH
25268: LD_EXP 84
25272: PUSH
25273: FOR_IN
25274: IFFALSE 25305
// if GetLives ( i ) < 1000 then
25276: LD_VAR 0 1
25280: PPUSH
25281: CALL_OW 256
25285: PUSH
25286: LD_INT 1000
25288: LESS
25289: IFFALSE 25303
// SetLives ( i , 1000 ) ;
25291: LD_VAR 0 1
25295: PPUSH
25296: LD_INT 1000
25298: PPUSH
25299: CALL_OW 234
25303: GO 25273
25305: POP
25306: POP
// end ;
25307: PPOPN 1
25309: END
// export function hHackInvincible ; var i ; begin
25310: LD_INT 0
25312: PPUSH
25313: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25314: LD_ADDR_VAR 0 2
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 21
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 21
25334: PUSH
25335: LD_INT 2
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: LIST
25346: PPUSH
25347: CALL_OW 69
25351: PUSH
25352: FOR_IN
25353: IFFALSE 25414
// if IsSelected ( i ) then
25355: LD_VAR 0 2
25359: PPUSH
25360: CALL_OW 306
25364: IFFALSE 25412
// begin if i in hInvincible then
25366: LD_VAR 0 2
25370: PUSH
25371: LD_EXP 84
25375: IN
25376: IFFALSE 25396
// hInvincible := hInvincible diff i else
25378: LD_ADDR_EXP 84
25382: PUSH
25383: LD_EXP 84
25387: PUSH
25388: LD_VAR 0 2
25392: DIFF
25393: ST_TO_ADDR
25394: GO 25412
// hInvincible := hInvincible union i ;
25396: LD_ADDR_EXP 84
25400: PUSH
25401: LD_EXP 84
25405: PUSH
25406: LD_VAR 0 2
25410: UNION
25411: ST_TO_ADDR
// end ;
25412: GO 25352
25414: POP
25415: POP
// end ;
25416: LD_VAR 0 1
25420: RET
// export function hHackInvisible ; var i , j ; begin
25421: LD_INT 0
25423: PPUSH
25424: PPUSH
25425: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25426: LD_ADDR_VAR 0 2
25430: PUSH
25431: LD_INT 21
25433: PUSH
25434: LD_INT 1
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PPUSH
25441: CALL_OW 69
25445: PUSH
25446: FOR_IN
25447: IFFALSE 25471
// if IsSelected ( i ) then
25449: LD_VAR 0 2
25453: PPUSH
25454: CALL_OW 306
25458: IFFALSE 25469
// ComForceInvisible ( i ) ;
25460: LD_VAR 0 2
25464: PPUSH
25465: CALL_OW 496
25469: GO 25446
25471: POP
25472: POP
// end ;
25473: LD_VAR 0 1
25477: RET
// export function hHackChangeYourSide ; begin
25478: LD_INT 0
25480: PPUSH
// if your_side = 8 then
25481: LD_OWVAR 2
25485: PUSH
25486: LD_INT 8
25488: EQUAL
25489: IFFALSE 25501
// your_side := 0 else
25491: LD_ADDR_OWVAR 2
25495: PUSH
25496: LD_INT 0
25498: ST_TO_ADDR
25499: GO 25515
// your_side := your_side + 1 ;
25501: LD_ADDR_OWVAR 2
25505: PUSH
25506: LD_OWVAR 2
25510: PUSH
25511: LD_INT 1
25513: PLUS
25514: ST_TO_ADDR
// end ;
25515: LD_VAR 0 1
25519: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25520: LD_INT 0
25522: PPUSH
25523: PPUSH
25524: PPUSH
// for i in all_units do
25525: LD_ADDR_VAR 0 2
25529: PUSH
25530: LD_OWVAR 3
25534: PUSH
25535: FOR_IN
25536: IFFALSE 25614
// if IsSelected ( i ) then
25538: LD_VAR 0 2
25542: PPUSH
25543: CALL_OW 306
25547: IFFALSE 25612
// begin j := GetSide ( i ) ;
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_VAR 0 2
25558: PPUSH
25559: CALL_OW 255
25563: ST_TO_ADDR
// if j = 8 then
25564: LD_VAR 0 3
25568: PUSH
25569: LD_INT 8
25571: EQUAL
25572: IFFALSE 25584
// j := 0 else
25574: LD_ADDR_VAR 0 3
25578: PUSH
25579: LD_INT 0
25581: ST_TO_ADDR
25582: GO 25598
// j := j + 1 ;
25584: LD_ADDR_VAR 0 3
25588: PUSH
25589: LD_VAR 0 3
25593: PUSH
25594: LD_INT 1
25596: PLUS
25597: ST_TO_ADDR
// SetSide ( i , j ) ;
25598: LD_VAR 0 2
25602: PPUSH
25603: LD_VAR 0 3
25607: PPUSH
25608: CALL_OW 235
// end ;
25612: GO 25535
25614: POP
25615: POP
// end ;
25616: LD_VAR 0 1
25620: RET
// export function hHackFog ; begin
25621: LD_INT 0
25623: PPUSH
// FogOff ( true ) ;
25624: LD_INT 1
25626: PPUSH
25627: CALL_OW 344
// end ;
25631: LD_VAR 0 1
25635: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25636: LD_INT 0
25638: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25639: LD_VAR 0 1
25643: PPUSH
25644: LD_VAR 0 2
25648: PPUSH
25649: LD_VAR 0 3
25653: PPUSH
25654: LD_INT 1
25656: PPUSH
25657: LD_INT 1
25659: PPUSH
25660: CALL_OW 483
// CenterOnXY ( x , y ) ;
25664: LD_VAR 0 2
25668: PPUSH
25669: LD_VAR 0 3
25673: PPUSH
25674: CALL_OW 84
// end ;
25678: LD_VAR 0 4
25682: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25683: LD_INT 0
25685: PPUSH
25686: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25687: LD_VAR 0 1
25691: NOT
25692: PUSH
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: CALL_OW 488
25707: NOT
25708: OR
25709: PUSH
25710: LD_VAR 0 1
25714: PPUSH
25715: CALL_OW 266
25719: PUSH
25720: LD_INT 3
25722: NONEQUAL
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 247
25733: PUSH
25734: LD_INT 1
25736: EQUAL
25737: NOT
25738: AND
25739: OR
25740: IFFALSE 25744
// exit ;
25742: GO 25893
// if GetType ( factory ) = unit_human then
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 247
25753: PUSH
25754: LD_INT 1
25756: EQUAL
25757: IFFALSE 25774
// factory := IsInUnit ( factory ) ;
25759: LD_ADDR_VAR 0 1
25763: PUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 310
25773: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 266
25783: PUSH
25784: LD_INT 3
25786: NONEQUAL
25787: IFFALSE 25791
// exit ;
25789: GO 25893
// if HexInfo ( x , y ) = factory then
25791: LD_VAR 0 2
25795: PPUSH
25796: LD_VAR 0 3
25800: PPUSH
25801: CALL_OW 428
25805: PUSH
25806: LD_VAR 0 1
25810: EQUAL
25811: IFFALSE 25838
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25813: LD_ADDR_EXP 85
25817: PUSH
25818: LD_EXP 85
25822: PPUSH
25823: LD_VAR 0 1
25827: PPUSH
25828: LD_INT 0
25830: PPUSH
25831: CALL_OW 1
25835: ST_TO_ADDR
25836: GO 25889
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25838: LD_ADDR_EXP 85
25842: PUSH
25843: LD_EXP 85
25847: PPUSH
25848: LD_VAR 0 1
25852: PPUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 255
25862: PUSH
25863: LD_VAR 0 1
25867: PUSH
25868: LD_VAR 0 2
25872: PUSH
25873: LD_VAR 0 3
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 1
25888: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25889: CALL 25898 0 0
// end ;
25893: LD_VAR 0 4
25897: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
25902: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25903: LD_STRING resetFactoryWaypoint();
25905: PPUSH
25906: CALL_OW 559
// if factoryWaypoints then
25910: LD_EXP 85
25914: IFFALSE 26040
// begin list := PrepareArray ( factoryWaypoints ) ;
25916: LD_ADDR_VAR 0 3
25920: PUSH
25921: LD_EXP 85
25925: PPUSH
25926: CALL 72509 0 1
25930: ST_TO_ADDR
// for i := 1 to list do
25931: LD_ADDR_VAR 0 2
25935: PUSH
25936: DOUBLE
25937: LD_INT 1
25939: DEC
25940: ST_TO_ADDR
25941: LD_VAR 0 3
25945: PUSH
25946: FOR_TO
25947: IFFALSE 26038
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25949: LD_STRING setFactoryWaypointXY(
25951: PUSH
25952: LD_VAR 0 3
25956: PUSH
25957: LD_VAR 0 2
25961: ARRAY
25962: PUSH
25963: LD_INT 1
25965: ARRAY
25966: STR
25967: PUSH
25968: LD_STRING ,
25970: STR
25971: PUSH
25972: LD_VAR 0 3
25976: PUSH
25977: LD_VAR 0 2
25981: ARRAY
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: STR
25987: PUSH
25988: LD_STRING ,
25990: STR
25991: PUSH
25992: LD_VAR 0 3
25996: PUSH
25997: LD_VAR 0 2
26001: ARRAY
26002: PUSH
26003: LD_INT 3
26005: ARRAY
26006: STR
26007: PUSH
26008: LD_STRING ,
26010: STR
26011: PUSH
26012: LD_VAR 0 3
26016: PUSH
26017: LD_VAR 0 2
26021: ARRAY
26022: PUSH
26023: LD_INT 4
26025: ARRAY
26026: STR
26027: PUSH
26028: LD_STRING )
26030: STR
26031: PPUSH
26032: CALL_OW 559
26036: GO 25946
26038: POP
26039: POP
// end ; end ;
26040: LD_VAR 0 1
26044: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26045: LD_INT 0
26047: PPUSH
// if HexInfo ( x , y ) = warehouse then
26048: LD_VAR 0 2
26052: PPUSH
26053: LD_VAR 0 3
26057: PPUSH
26058: CALL_OW 428
26062: PUSH
26063: LD_VAR 0 1
26067: EQUAL
26068: IFFALSE 26095
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26070: LD_ADDR_EXP 86
26074: PUSH
26075: LD_EXP 86
26079: PPUSH
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_INT 0
26087: PPUSH
26088: CALL_OW 1
26092: ST_TO_ADDR
26093: GO 26146
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26095: LD_ADDR_EXP 86
26099: PUSH
26100: LD_EXP 86
26104: PPUSH
26105: LD_VAR 0 1
26109: PPUSH
26110: LD_VAR 0 1
26114: PPUSH
26115: CALL_OW 255
26119: PUSH
26120: LD_VAR 0 1
26124: PUSH
26125: LD_VAR 0 2
26129: PUSH
26130: LD_VAR 0 3
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: PPUSH
26141: CALL_OW 1
26145: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26146: CALL 26155 0 0
// end ;
26150: LD_VAR 0 4
26154: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26160: LD_STRING resetWarehouseGatheringPoints();
26162: PPUSH
26163: CALL_OW 559
// if warehouseGatheringPoints then
26167: LD_EXP 86
26171: IFFALSE 26297
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26173: LD_ADDR_VAR 0 3
26177: PUSH
26178: LD_EXP 86
26182: PPUSH
26183: CALL 72509 0 1
26187: ST_TO_ADDR
// for i := 1 to list do
26188: LD_ADDR_VAR 0 2
26192: PUSH
26193: DOUBLE
26194: LD_INT 1
26196: DEC
26197: ST_TO_ADDR
26198: LD_VAR 0 3
26202: PUSH
26203: FOR_TO
26204: IFFALSE 26295
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26206: LD_STRING setWarehouseGatheringPointXY(
26208: PUSH
26209: LD_VAR 0 3
26213: PUSH
26214: LD_VAR 0 2
26218: ARRAY
26219: PUSH
26220: LD_INT 1
26222: ARRAY
26223: STR
26224: PUSH
26225: LD_STRING ,
26227: STR
26228: PUSH
26229: LD_VAR 0 3
26233: PUSH
26234: LD_VAR 0 2
26238: ARRAY
26239: PUSH
26240: LD_INT 2
26242: ARRAY
26243: STR
26244: PUSH
26245: LD_STRING ,
26247: STR
26248: PUSH
26249: LD_VAR 0 3
26253: PUSH
26254: LD_VAR 0 2
26258: ARRAY
26259: PUSH
26260: LD_INT 3
26262: ARRAY
26263: STR
26264: PUSH
26265: LD_STRING ,
26267: STR
26268: PUSH
26269: LD_VAR 0 3
26273: PUSH
26274: LD_VAR 0 2
26278: ARRAY
26279: PUSH
26280: LD_INT 4
26282: ARRAY
26283: STR
26284: PUSH
26285: LD_STRING )
26287: STR
26288: PPUSH
26289: CALL_OW 559
26293: GO 26203
26295: POP
26296: POP
// end ; end ;
26297: LD_VAR 0 1
26301: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26302: LD_EXP 86
26306: IFFALSE 26991
26308: GO 26310
26310: DISABLE
26311: LD_INT 0
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
26318: PPUSH
26319: PPUSH
26320: PPUSH
26321: PPUSH
// begin enable ;
26322: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: LD_EXP 86
26332: PPUSH
26333: CALL 72509 0 1
26337: ST_TO_ADDR
// if not list then
26338: LD_VAR 0 3
26342: NOT
26343: IFFALSE 26347
// exit ;
26345: GO 26991
// for i := 1 to list do
26347: LD_ADDR_VAR 0 1
26351: PUSH
26352: DOUBLE
26353: LD_INT 1
26355: DEC
26356: ST_TO_ADDR
26357: LD_VAR 0 3
26361: PUSH
26362: FOR_TO
26363: IFFALSE 26989
// begin depot := list [ i ] [ 2 ] ;
26365: LD_ADDR_VAR 0 8
26369: PUSH
26370: LD_VAR 0 3
26374: PUSH
26375: LD_VAR 0 1
26379: ARRAY
26380: PUSH
26381: LD_INT 2
26383: ARRAY
26384: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26385: LD_ADDR_VAR 0 5
26389: PUSH
26390: LD_VAR 0 3
26394: PUSH
26395: LD_VAR 0 1
26399: ARRAY
26400: PUSH
26401: LD_INT 1
26403: ARRAY
26404: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26405: LD_VAR 0 8
26409: PPUSH
26410: CALL_OW 301
26414: PUSH
26415: LD_VAR 0 5
26419: PUSH
26420: LD_VAR 0 8
26424: PPUSH
26425: CALL_OW 255
26429: NONEQUAL
26430: OR
26431: IFFALSE 26460
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26433: LD_ADDR_EXP 86
26437: PUSH
26438: LD_EXP 86
26442: PPUSH
26443: LD_VAR 0 8
26447: PPUSH
26448: LD_INT 0
26450: PPUSH
26451: CALL_OW 1
26455: ST_TO_ADDR
// exit ;
26456: POP
26457: POP
26458: GO 26991
// end ; x := list [ i ] [ 3 ] ;
26460: LD_ADDR_VAR 0 6
26464: PUSH
26465: LD_VAR 0 3
26469: PUSH
26470: LD_VAR 0 1
26474: ARRAY
26475: PUSH
26476: LD_INT 3
26478: ARRAY
26479: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26480: LD_ADDR_VAR 0 7
26484: PUSH
26485: LD_VAR 0 3
26489: PUSH
26490: LD_VAR 0 1
26494: ARRAY
26495: PUSH
26496: LD_INT 4
26498: ARRAY
26499: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26500: LD_ADDR_VAR 0 9
26504: PUSH
26505: LD_VAR 0 6
26509: PPUSH
26510: LD_VAR 0 7
26514: PPUSH
26515: LD_INT 16
26517: PPUSH
26518: CALL 71097 0 3
26522: ST_TO_ADDR
// if not cratesNearbyPoint then
26523: LD_VAR 0 9
26527: NOT
26528: IFFALSE 26534
// exit ;
26530: POP
26531: POP
26532: GO 26991
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26534: LD_ADDR_VAR 0 4
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_VAR 0 5
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 3
26553: PUSH
26554: LD_INT 60
26556: PUSH
26557: EMPTY
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 91
26566: PUSH
26567: LD_VAR 0 8
26571: PUSH
26572: LD_INT 6
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: PUSH
26583: LD_INT 25
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 25
26595: PUSH
26596: LD_INT 16
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: PUSH
26619: LD_VAR 0 8
26623: PPUSH
26624: CALL_OW 313
26628: PPUSH
26629: LD_INT 3
26631: PUSH
26632: LD_INT 60
26634: PUSH
26635: EMPTY
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: LD_INT 25
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 25
26657: PUSH
26658: LD_INT 16
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 72
26678: UNION
26679: ST_TO_ADDR
// if tmp then
26680: LD_VAR 0 4
26684: IFFALSE 26764
// begin tmp := ShrinkArray ( tmp , 3 ) ;
26686: LD_ADDR_VAR 0 4
26690: PUSH
26691: LD_VAR 0 4
26695: PPUSH
26696: LD_INT 3
26698: PPUSH
26699: CALL 69066 0 2
26703: ST_TO_ADDR
// for j in tmp do
26704: LD_ADDR_VAR 0 2
26708: PUSH
26709: LD_VAR 0 4
26713: PUSH
26714: FOR_IN
26715: IFFALSE 26758
// begin if IsInUnit ( j ) then
26717: LD_VAR 0 2
26721: PPUSH
26722: CALL_OW 310
26726: IFFALSE 26737
// ComExit ( j ) ;
26728: LD_VAR 0 2
26732: PPUSH
26733: CALL 69149 0 1
// AddComCollect ( j , x , y ) ;
26737: LD_VAR 0 2
26741: PPUSH
26742: LD_VAR 0 6
26746: PPUSH
26747: LD_VAR 0 7
26751: PPUSH
26752: CALL_OW 177
// end ;
26756: GO 26714
26758: POP
26759: POP
// exit ;
26760: POP
26761: POP
26762: GO 26991
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: LD_INT 22
26771: PUSH
26772: LD_VAR 0 5
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 91
26783: PUSH
26784: LD_VAR 0 8
26788: PUSH
26789: LD_INT 8
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 2
26799: PUSH
26800: LD_INT 34
26802: PUSH
26803: LD_INT 12
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 34
26812: PUSH
26813: LD_INT 51
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 34
26822: PUSH
26823: LD_INT 32
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 34
26832: PUSH
26833: LD_INT 89
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: PPUSH
26852: CALL_OW 69
26856: ST_TO_ADDR
// if tmp then
26857: LD_VAR 0 4
26861: IFFALSE 26987
// begin for j in tmp do
26863: LD_ADDR_VAR 0 2
26867: PUSH
26868: LD_VAR 0 4
26872: PUSH
26873: FOR_IN
26874: IFFALSE 26985
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26876: LD_VAR 0 2
26880: PPUSH
26881: CALL_OW 262
26885: PUSH
26886: LD_INT 3
26888: EQUAL
26889: PUSH
26890: LD_VAR 0 2
26894: PPUSH
26895: CALL_OW 261
26899: PUSH
26900: LD_INT 20
26902: GREATER
26903: OR
26904: PUSH
26905: LD_VAR 0 2
26909: PPUSH
26910: CALL_OW 314
26914: NOT
26915: AND
26916: PUSH
26917: LD_VAR 0 2
26921: PPUSH
26922: CALL_OW 263
26926: PUSH
26927: LD_INT 1
26929: NONEQUAL
26930: PUSH
26931: LD_VAR 0 2
26935: PPUSH
26936: CALL_OW 311
26940: OR
26941: AND
26942: IFFALSE 26983
// begin ComCollect ( j , x , y ) ;
26944: LD_VAR 0 2
26948: PPUSH
26949: LD_VAR 0 6
26953: PPUSH
26954: LD_VAR 0 7
26958: PPUSH
26959: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26963: LD_VAR 0 2
26967: PPUSH
26968: LD_VAR 0 8
26972: PPUSH
26973: CALL_OW 172
// exit ;
26977: POP
26978: POP
26979: POP
26980: POP
26981: GO 26991
// end ;
26983: GO 26873
26985: POP
26986: POP
// end ; end ;
26987: GO 26362
26989: POP
26990: POP
// end ; end_of_file
26991: PPOPN 9
26993: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26994: LD_INT 0
26996: PPUSH
26997: PPUSH
26998: PPUSH
26999: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27000: LD_VAR 0 1
27004: PPUSH
27005: CALL_OW 264
27009: PUSH
27010: LD_INT 91
27012: EQUAL
27013: IFFALSE 27085
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27015: LD_INT 68
27017: PPUSH
27018: LD_VAR 0 1
27022: PPUSH
27023: CALL_OW 255
27027: PPUSH
27028: CALL_OW 321
27032: PUSH
27033: LD_INT 2
27035: EQUAL
27036: IFFALSE 27048
// eff := 70 else
27038: LD_ADDR_VAR 0 4
27042: PUSH
27043: LD_INT 70
27045: ST_TO_ADDR
27046: GO 27056
// eff := 30 ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_INT 30
27055: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27056: LD_VAR 0 1
27060: PPUSH
27061: CALL_OW 250
27065: PPUSH
27066: LD_VAR 0 1
27070: PPUSH
27071: CALL_OW 251
27075: PPUSH
27076: LD_VAR 0 4
27080: PPUSH
27081: CALL_OW 495
// end ; end ;
27085: LD_VAR 0 2
27089: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27090: LD_INT 0
27092: PPUSH
// end ;
27093: LD_VAR 0 4
27097: RET
// export function SOS_Command ( cmd ) ; begin
27098: LD_INT 0
27100: PPUSH
// end ;
27101: LD_VAR 0 2
27105: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27106: LD_INT 0
27108: PPUSH
// end ;
27109: LD_VAR 0 6
27113: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
27114: LD_INT 0
27116: PPUSH
27117: PPUSH
// if not vehicle or not factory then
27118: LD_VAR 0 1
27122: NOT
27123: PUSH
27124: LD_VAR 0 2
27128: NOT
27129: OR
27130: IFFALSE 27134
// exit ;
27132: GO 27365
// if factoryWaypoints >= factory then
27134: LD_EXP 85
27138: PUSH
27139: LD_VAR 0 2
27143: GREATEREQUAL
27144: IFFALSE 27365
// if factoryWaypoints [ factory ] then
27146: LD_EXP 85
27150: PUSH
27151: LD_VAR 0 2
27155: ARRAY
27156: IFFALSE 27365
// begin if GetControl ( vehicle ) = control_manual then
27158: LD_VAR 0 1
27162: PPUSH
27163: CALL_OW 263
27167: PUSH
27168: LD_INT 1
27170: EQUAL
27171: IFFALSE 27252
// begin driver := IsDrivenBy ( vehicle ) ;
27173: LD_ADDR_VAR 0 4
27177: PUSH
27178: LD_VAR 0 1
27182: PPUSH
27183: CALL_OW 311
27187: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27188: LD_VAR 0 4
27192: PPUSH
27193: LD_EXP 85
27197: PUSH
27198: LD_VAR 0 2
27202: ARRAY
27203: PUSH
27204: LD_INT 3
27206: ARRAY
27207: PPUSH
27208: LD_EXP 85
27212: PUSH
27213: LD_VAR 0 2
27217: ARRAY
27218: PUSH
27219: LD_INT 4
27221: ARRAY
27222: PPUSH
27223: CALL_OW 171
// AddComExitVehicle ( driver ) ;
27227: LD_VAR 0 4
27231: PPUSH
27232: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27236: LD_VAR 0 4
27240: PPUSH
27241: LD_VAR 0 2
27245: PPUSH
27246: CALL_OW 180
// end else
27250: GO 27365
// if GetControl ( vehicle ) = control_remote then
27252: LD_VAR 0 1
27256: PPUSH
27257: CALL_OW 263
27261: PUSH
27262: LD_INT 2
27264: EQUAL
27265: IFFALSE 27326
// begin wait ( 0 0$2 ) ;
27267: LD_INT 70
27269: PPUSH
27270: CALL_OW 67
// if Connect ( vehicle ) then
27274: LD_VAR 0 1
27278: PPUSH
27279: CALL 39389 0 1
27283: IFFALSE 27324
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27285: LD_VAR 0 1
27289: PPUSH
27290: LD_EXP 85
27294: PUSH
27295: LD_VAR 0 2
27299: ARRAY
27300: PUSH
27301: LD_INT 3
27303: ARRAY
27304: PPUSH
27305: LD_EXP 85
27309: PUSH
27310: LD_VAR 0 2
27314: ARRAY
27315: PUSH
27316: LD_INT 4
27318: ARRAY
27319: PPUSH
27320: CALL_OW 171
// end else
27324: GO 27365
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
27326: LD_VAR 0 1
27330: PPUSH
27331: LD_EXP 85
27335: PUSH
27336: LD_VAR 0 2
27340: ARRAY
27341: PUSH
27342: LD_INT 3
27344: ARRAY
27345: PPUSH
27346: LD_EXP 85
27350: PUSH
27351: LD_VAR 0 2
27355: ARRAY
27356: PUSH
27357: LD_INT 4
27359: ARRAY
27360: PPUSH
27361: CALL_OW 171
// end ; end ;
27365: LD_VAR 0 3
27369: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27370: LD_INT 0
27372: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27373: LD_VAR 0 1
27377: PUSH
27378: LD_INT 250
27380: EQUAL
27381: PUSH
27382: LD_VAR 0 2
27386: PPUSH
27387: CALL_OW 264
27391: PUSH
27392: LD_INT 81
27394: EQUAL
27395: AND
27396: IFFALSE 27417
// MinerPlaceMine ( unit , x , y ) ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_VAR 0 4
27407: PPUSH
27408: LD_VAR 0 5
27412: PPUSH
27413: CALL 29802 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27417: LD_VAR 0 1
27421: PUSH
27422: LD_INT 251
27424: EQUAL
27425: PUSH
27426: LD_VAR 0 2
27430: PPUSH
27431: CALL_OW 264
27435: PUSH
27436: LD_INT 81
27438: EQUAL
27439: AND
27440: IFFALSE 27461
// MinerDetonateMine ( unit , x , y ) ;
27442: LD_VAR 0 2
27446: PPUSH
27447: LD_VAR 0 4
27451: PPUSH
27452: LD_VAR 0 5
27456: PPUSH
27457: CALL 30077 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27461: LD_VAR 0 1
27465: PUSH
27466: LD_INT 252
27468: EQUAL
27469: PUSH
27470: LD_VAR 0 2
27474: PPUSH
27475: CALL_OW 264
27479: PUSH
27480: LD_INT 81
27482: EQUAL
27483: AND
27484: IFFALSE 27505
// MinerCreateMinefield ( unit , x , y ) ;
27486: LD_VAR 0 2
27490: PPUSH
27491: LD_VAR 0 4
27495: PPUSH
27496: LD_VAR 0 5
27500: PPUSH
27501: CALL 30494 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27505: LD_VAR 0 1
27509: PUSH
27510: LD_INT 253
27512: EQUAL
27513: PUSH
27514: LD_VAR 0 2
27518: PPUSH
27519: CALL_OW 257
27523: PUSH
27524: LD_INT 5
27526: EQUAL
27527: AND
27528: IFFALSE 27549
// ComBinocular ( unit , x , y ) ;
27530: LD_VAR 0 2
27534: PPUSH
27535: LD_VAR 0 4
27539: PPUSH
27540: LD_VAR 0 5
27544: PPUSH
27545: CALL 30863 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27549: LD_VAR 0 1
27553: PUSH
27554: LD_INT 254
27556: EQUAL
27557: PUSH
27558: LD_VAR 0 2
27562: PPUSH
27563: CALL_OW 264
27567: PUSH
27568: LD_INT 99
27570: EQUAL
27571: AND
27572: PUSH
27573: LD_VAR 0 3
27577: PPUSH
27578: CALL_OW 263
27582: PUSH
27583: LD_INT 3
27585: EQUAL
27586: AND
27587: IFFALSE 27603
// HackDestroyVehicle ( unit , selectedUnit ) ;
27589: LD_VAR 0 2
27593: PPUSH
27594: LD_VAR 0 3
27598: PPUSH
27599: CALL 29166 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27603: LD_VAR 0 1
27607: PUSH
27608: LD_INT 255
27610: EQUAL
27611: PUSH
27612: LD_VAR 0 2
27616: PPUSH
27617: CALL_OW 264
27621: PUSH
27622: LD_INT 14
27624: PUSH
27625: LD_INT 53
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: IN
27632: AND
27633: PUSH
27634: LD_VAR 0 4
27638: PPUSH
27639: LD_VAR 0 5
27643: PPUSH
27644: CALL_OW 488
27648: AND
27649: IFFALSE 27673
// CutTreeXYR ( unit , x , y , 12 ) ;
27651: LD_VAR 0 2
27655: PPUSH
27656: LD_VAR 0 4
27660: PPUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: LD_INT 12
27668: PPUSH
27669: CALL 27736 0 4
// if cmd = 256 then
27673: LD_VAR 0 1
27677: PUSH
27678: LD_INT 256
27680: EQUAL
27681: IFFALSE 27702
// SetFactoryWaypoint ( unit , x , y ) ;
27683: LD_VAR 0 2
27687: PPUSH
27688: LD_VAR 0 4
27692: PPUSH
27693: LD_VAR 0 5
27697: PPUSH
27698: CALL 25683 0 3
// if cmd = 257 then
27702: LD_VAR 0 1
27706: PUSH
27707: LD_INT 257
27709: EQUAL
27710: IFFALSE 27731
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27712: LD_VAR 0 2
27716: PPUSH
27717: LD_VAR 0 4
27721: PPUSH
27722: LD_VAR 0 5
27726: PPUSH
27727: CALL 26045 0 3
// end ;
27731: LD_VAR 0 6
27735: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27736: LD_INT 0
27738: PPUSH
27739: PPUSH
27740: PPUSH
27741: PPUSH
27742: PPUSH
27743: PPUSH
27744: PPUSH
27745: PPUSH
27746: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27747: LD_VAR 0 1
27751: NOT
27752: PUSH
27753: LD_VAR 0 2
27757: PPUSH
27758: LD_VAR 0 3
27762: PPUSH
27763: CALL_OW 488
27767: NOT
27768: OR
27769: PUSH
27770: LD_VAR 0 4
27774: NOT
27775: OR
27776: IFFALSE 27780
// exit ;
27778: GO 28120
// list := [ ] ;
27780: LD_ADDR_VAR 0 13
27784: PUSH
27785: EMPTY
27786: ST_TO_ADDR
// if x - r < 0 then
27787: LD_VAR 0 2
27791: PUSH
27792: LD_VAR 0 4
27796: MINUS
27797: PUSH
27798: LD_INT 0
27800: LESS
27801: IFFALSE 27813
// min_x := 0 else
27803: LD_ADDR_VAR 0 7
27807: PUSH
27808: LD_INT 0
27810: ST_TO_ADDR
27811: GO 27829
// min_x := x - r ;
27813: LD_ADDR_VAR 0 7
27817: PUSH
27818: LD_VAR 0 2
27822: PUSH
27823: LD_VAR 0 4
27827: MINUS
27828: ST_TO_ADDR
// if y - r < 0 then
27829: LD_VAR 0 3
27833: PUSH
27834: LD_VAR 0 4
27838: MINUS
27839: PUSH
27840: LD_INT 0
27842: LESS
27843: IFFALSE 27855
// min_y := 0 else
27845: LD_ADDR_VAR 0 8
27849: PUSH
27850: LD_INT 0
27852: ST_TO_ADDR
27853: GO 27871
// min_y := y - r ;
27855: LD_ADDR_VAR 0 8
27859: PUSH
27860: LD_VAR 0 3
27864: PUSH
27865: LD_VAR 0 4
27869: MINUS
27870: ST_TO_ADDR
// max_x := x + r ;
27871: LD_ADDR_VAR 0 9
27875: PUSH
27876: LD_VAR 0 2
27880: PUSH
27881: LD_VAR 0 4
27885: PLUS
27886: ST_TO_ADDR
// max_y := y + r ;
27887: LD_ADDR_VAR 0 10
27891: PUSH
27892: LD_VAR 0 3
27896: PUSH
27897: LD_VAR 0 4
27901: PLUS
27902: ST_TO_ADDR
// for _x = min_x to max_x do
27903: LD_ADDR_VAR 0 11
27907: PUSH
27908: DOUBLE
27909: LD_VAR 0 7
27913: DEC
27914: ST_TO_ADDR
27915: LD_VAR 0 9
27919: PUSH
27920: FOR_TO
27921: IFFALSE 28038
// for _y = min_y to max_y do
27923: LD_ADDR_VAR 0 12
27927: PUSH
27928: DOUBLE
27929: LD_VAR 0 8
27933: DEC
27934: ST_TO_ADDR
27935: LD_VAR 0 10
27939: PUSH
27940: FOR_TO
27941: IFFALSE 28034
// begin if not ValidHex ( _x , _y ) then
27943: LD_VAR 0 11
27947: PPUSH
27948: LD_VAR 0 12
27952: PPUSH
27953: CALL_OW 488
27957: NOT
27958: IFFALSE 27962
// continue ;
27960: GO 27940
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27962: LD_VAR 0 11
27966: PPUSH
27967: LD_VAR 0 12
27971: PPUSH
27972: CALL_OW 351
27976: PUSH
27977: LD_VAR 0 11
27981: PPUSH
27982: LD_VAR 0 12
27986: PPUSH
27987: CALL_OW 554
27991: AND
27992: IFFALSE 28032
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27994: LD_ADDR_VAR 0 13
27998: PUSH
27999: LD_VAR 0 13
28003: PPUSH
28004: LD_VAR 0 13
28008: PUSH
28009: LD_INT 1
28011: PLUS
28012: PPUSH
28013: LD_VAR 0 11
28017: PUSH
28018: LD_VAR 0 12
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PPUSH
28027: CALL_OW 2
28031: ST_TO_ADDR
// end ;
28032: GO 27940
28034: POP
28035: POP
28036: GO 27920
28038: POP
28039: POP
// if not list then
28040: LD_VAR 0 13
28044: NOT
28045: IFFALSE 28049
// exit ;
28047: GO 28120
// for i in list do
28049: LD_ADDR_VAR 0 6
28053: PUSH
28054: LD_VAR 0 13
28058: PUSH
28059: FOR_IN
28060: IFFALSE 28118
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28062: LD_VAR 0 1
28066: PPUSH
28067: LD_STRING M
28069: PUSH
28070: LD_VAR 0 6
28074: PUSH
28075: LD_INT 1
28077: ARRAY
28078: PUSH
28079: LD_VAR 0 6
28083: PUSH
28084: LD_INT 2
28086: ARRAY
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: PPUSH
28112: CALL_OW 447
28116: GO 28059
28118: POP
28119: POP
// end ;
28120: LD_VAR 0 5
28124: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28125: LD_EXP 88
28129: NOT
28130: IFFALSE 28180
28132: GO 28134
28134: DISABLE
// begin initHack := true ;
28135: LD_ADDR_EXP 88
28139: PUSH
28140: LD_INT 1
28142: ST_TO_ADDR
// hackTanks := [ ] ;
28143: LD_ADDR_EXP 89
28147: PUSH
28148: EMPTY
28149: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28150: LD_ADDR_EXP 90
28154: PUSH
28155: EMPTY
28156: ST_TO_ADDR
// hackLimit := 3 ;
28157: LD_ADDR_EXP 91
28161: PUSH
28162: LD_INT 3
28164: ST_TO_ADDR
// hackDist := 12 ;
28165: LD_ADDR_EXP 92
28169: PUSH
28170: LD_INT 12
28172: ST_TO_ADDR
// hackCounter := [ ] ;
28173: LD_ADDR_EXP 93
28177: PUSH
28178: EMPTY
28179: ST_TO_ADDR
// end ;
28180: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28181: LD_EXP 88
28185: PUSH
28186: LD_INT 34
28188: PUSH
28189: LD_INT 99
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PPUSH
28196: CALL_OW 69
28200: AND
28201: IFFALSE 28454
28203: GO 28205
28205: DISABLE
28206: LD_INT 0
28208: PPUSH
28209: PPUSH
// begin enable ;
28210: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28211: LD_ADDR_VAR 0 1
28215: PUSH
28216: LD_INT 34
28218: PUSH
28219: LD_INT 99
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PPUSH
28226: CALL_OW 69
28230: PUSH
28231: FOR_IN
28232: IFFALSE 28452
// begin if not i in hackTanks then
28234: LD_VAR 0 1
28238: PUSH
28239: LD_EXP 89
28243: IN
28244: NOT
28245: IFFALSE 28328
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28247: LD_ADDR_EXP 89
28251: PUSH
28252: LD_EXP 89
28256: PPUSH
28257: LD_EXP 89
28261: PUSH
28262: LD_INT 1
28264: PLUS
28265: PPUSH
28266: LD_VAR 0 1
28270: PPUSH
28271: CALL_OW 1
28275: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28276: LD_ADDR_EXP 90
28280: PUSH
28281: LD_EXP 90
28285: PPUSH
28286: LD_EXP 90
28290: PUSH
28291: LD_INT 1
28293: PLUS
28294: PPUSH
28295: EMPTY
28296: PPUSH
28297: CALL_OW 1
28301: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28302: LD_ADDR_EXP 93
28306: PUSH
28307: LD_EXP 93
28311: PPUSH
28312: LD_EXP 93
28316: PUSH
28317: LD_INT 1
28319: PLUS
28320: PPUSH
28321: EMPTY
28322: PPUSH
28323: CALL_OW 1
28327: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 302
28337: NOT
28338: IFFALSE 28351
// begin HackUnlinkAll ( i ) ;
28340: LD_VAR 0 1
28344: PPUSH
28345: CALL 28457 0 1
// continue ;
28349: GO 28231
// end ; HackCheckCapturedStatus ( i ) ;
28351: LD_VAR 0 1
28355: PPUSH
28356: CALL 28900 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28360: LD_ADDR_VAR 0 2
28364: PUSH
28365: LD_INT 81
28367: PUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 255
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 33
28384: PUSH
28385: LD_INT 3
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 91
28394: PUSH
28395: LD_VAR 0 1
28399: PUSH
28400: LD_EXP 92
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 50
28412: PUSH
28413: EMPTY
28414: LIST
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: PPUSH
28422: CALL_OW 69
28426: ST_TO_ADDR
// if not tmp then
28427: LD_VAR 0 2
28431: NOT
28432: IFFALSE 28436
// continue ;
28434: GO 28231
// HackLink ( i , tmp ) ;
28436: LD_VAR 0 1
28440: PPUSH
28441: LD_VAR 0 2
28445: PPUSH
28446: CALL 28593 0 2
// end ;
28450: GO 28231
28452: POP
28453: POP
// end ;
28454: PPOPN 2
28456: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28457: LD_INT 0
28459: PPUSH
28460: PPUSH
28461: PPUSH
// if not hack in hackTanks then
28462: LD_VAR 0 1
28466: PUSH
28467: LD_EXP 89
28471: IN
28472: NOT
28473: IFFALSE 28477
// exit ;
28475: GO 28588
// index := GetElementIndex ( hackTanks , hack ) ;
28477: LD_ADDR_VAR 0 4
28481: PUSH
28482: LD_EXP 89
28486: PPUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL 36205 0 2
28496: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28497: LD_EXP 90
28501: PUSH
28502: LD_VAR 0 4
28506: ARRAY
28507: IFFALSE 28588
// begin for i in hackTanksCaptured [ index ] do
28509: LD_ADDR_VAR 0 3
28513: PUSH
28514: LD_EXP 90
28518: PUSH
28519: LD_VAR 0 4
28523: ARRAY
28524: PUSH
28525: FOR_IN
28526: IFFALSE 28552
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28528: LD_VAR 0 3
28532: PUSH
28533: LD_INT 1
28535: ARRAY
28536: PPUSH
28537: LD_VAR 0 3
28541: PUSH
28542: LD_INT 2
28544: ARRAY
28545: PPUSH
28546: CALL_OW 235
28550: GO 28525
28552: POP
28553: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28554: LD_ADDR_EXP 90
28558: PUSH
28559: LD_EXP 90
28563: PPUSH
28564: LD_VAR 0 4
28568: PPUSH
28569: EMPTY
28570: PPUSH
28571: CALL_OW 1
28575: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28576: LD_VAR 0 1
28580: PPUSH
28581: LD_INT 0
28583: PPUSH
28584: CALL_OW 505
// end ; end ;
28588: LD_VAR 0 2
28592: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28593: LD_INT 0
28595: PPUSH
28596: PPUSH
28597: PPUSH
// if not hack in hackTanks or not vehicles then
28598: LD_VAR 0 1
28602: PUSH
28603: LD_EXP 89
28607: IN
28608: NOT
28609: PUSH
28610: LD_VAR 0 2
28614: NOT
28615: OR
28616: IFFALSE 28620
// exit ;
28618: GO 28895
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28620: LD_ADDR_VAR 0 2
28624: PUSH
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_VAR 0 2
28634: PPUSH
28635: LD_INT 1
28637: PPUSH
28638: LD_INT 1
28640: PPUSH
28641: CALL 36855 0 4
28645: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28646: LD_ADDR_VAR 0 5
28650: PUSH
28651: LD_EXP 89
28655: PPUSH
28656: LD_VAR 0 1
28660: PPUSH
28661: CALL 36205 0 2
28665: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28666: LD_EXP 90
28670: PUSH
28671: LD_VAR 0 5
28675: ARRAY
28676: PUSH
28677: LD_EXP 91
28681: LESS
28682: IFFALSE 28871
// begin for i := 1 to vehicles do
28684: LD_ADDR_VAR 0 4
28688: PUSH
28689: DOUBLE
28690: LD_INT 1
28692: DEC
28693: ST_TO_ADDR
28694: LD_VAR 0 2
28698: PUSH
28699: FOR_TO
28700: IFFALSE 28869
// begin if hackTanksCaptured [ index ] = hackLimit then
28702: LD_EXP 90
28706: PUSH
28707: LD_VAR 0 5
28711: ARRAY
28712: PUSH
28713: LD_EXP 91
28717: EQUAL
28718: IFFALSE 28722
// break ;
28720: GO 28869
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28722: LD_ADDR_EXP 93
28726: PUSH
28727: LD_EXP 93
28731: PPUSH
28732: LD_VAR 0 5
28736: PPUSH
28737: LD_EXP 93
28741: PUSH
28742: LD_VAR 0 5
28746: ARRAY
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: PPUSH
28752: CALL_OW 1
28756: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28757: LD_ADDR_EXP 90
28761: PUSH
28762: LD_EXP 90
28766: PPUSH
28767: LD_VAR 0 5
28771: PUSH
28772: LD_EXP 90
28776: PUSH
28777: LD_VAR 0 5
28781: ARRAY
28782: PUSH
28783: LD_INT 1
28785: PLUS
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PPUSH
28791: LD_VAR 0 2
28795: PUSH
28796: LD_VAR 0 4
28800: ARRAY
28801: PUSH
28802: LD_VAR 0 2
28806: PUSH
28807: LD_VAR 0 4
28811: ARRAY
28812: PPUSH
28813: CALL_OW 255
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PPUSH
28822: CALL 36420 0 3
28826: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28827: LD_VAR 0 2
28831: PUSH
28832: LD_VAR 0 4
28836: ARRAY
28837: PPUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 255
28847: PPUSH
28848: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28852: LD_VAR 0 2
28856: PUSH
28857: LD_VAR 0 4
28861: ARRAY
28862: PPUSH
28863: CALL_OW 141
// end ;
28867: GO 28699
28869: POP
28870: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28871: LD_VAR 0 1
28875: PPUSH
28876: LD_EXP 90
28880: PUSH
28881: LD_VAR 0 5
28885: ARRAY
28886: PUSH
28887: LD_INT 0
28889: PLUS
28890: PPUSH
28891: CALL_OW 505
// end ;
28895: LD_VAR 0 3
28899: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28900: LD_INT 0
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
// if not hack in hackTanks then
28906: LD_VAR 0 1
28910: PUSH
28911: LD_EXP 89
28915: IN
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 29161
// index := GetElementIndex ( hackTanks , hack ) ;
28921: LD_ADDR_VAR 0 4
28925: PUSH
28926: LD_EXP 89
28930: PPUSH
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL 36205 0 2
28940: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28941: LD_ADDR_VAR 0 3
28945: PUSH
28946: DOUBLE
28947: LD_EXP 90
28951: PUSH
28952: LD_VAR 0 4
28956: ARRAY
28957: INC
28958: ST_TO_ADDR
28959: LD_INT 1
28961: PUSH
28962: FOR_DOWNTO
28963: IFFALSE 29135
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28965: LD_ADDR_VAR 0 5
28969: PUSH
28970: LD_EXP 90
28974: PUSH
28975: LD_VAR 0 4
28979: ARRAY
28980: PUSH
28981: LD_VAR 0 3
28985: ARRAY
28986: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28987: LD_VAR 0 5
28991: PUSH
28992: LD_INT 1
28994: ARRAY
28995: PPUSH
28996: CALL_OW 302
29000: NOT
29001: PUSH
29002: LD_VAR 0 5
29006: PUSH
29007: LD_INT 1
29009: ARRAY
29010: PPUSH
29011: CALL_OW 255
29015: PUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 255
29025: NONEQUAL
29026: OR
29027: IFFALSE 29133
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29029: LD_VAR 0 5
29033: PUSH
29034: LD_INT 1
29036: ARRAY
29037: PPUSH
29038: CALL_OW 305
29042: PUSH
29043: LD_VAR 0 5
29047: PUSH
29048: LD_INT 1
29050: ARRAY
29051: PPUSH
29052: CALL_OW 255
29056: PUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 255
29066: EQUAL
29067: AND
29068: IFFALSE 29092
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29070: LD_VAR 0 5
29074: PUSH
29075: LD_INT 1
29077: ARRAY
29078: PPUSH
29079: LD_VAR 0 5
29083: PUSH
29084: LD_INT 2
29086: ARRAY
29087: PPUSH
29088: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29092: LD_ADDR_EXP 90
29096: PUSH
29097: LD_EXP 90
29101: PPUSH
29102: LD_VAR 0 4
29106: PPUSH
29107: LD_EXP 90
29111: PUSH
29112: LD_VAR 0 4
29116: ARRAY
29117: PPUSH
29118: LD_VAR 0 3
29122: PPUSH
29123: CALL_OW 3
29127: PPUSH
29128: CALL_OW 1
29132: ST_TO_ADDR
// end ; end ;
29133: GO 28962
29135: POP
29136: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29137: LD_VAR 0 1
29141: PPUSH
29142: LD_EXP 90
29146: PUSH
29147: LD_VAR 0 4
29151: ARRAY
29152: PUSH
29153: LD_INT 0
29155: PLUS
29156: PPUSH
29157: CALL_OW 505
// end ;
29161: LD_VAR 0 2
29165: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29166: LD_INT 0
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
// if not hack in hackTanks then
29172: LD_VAR 0 1
29176: PUSH
29177: LD_EXP 89
29181: IN
29182: NOT
29183: IFFALSE 29187
// exit ;
29185: GO 29272
// index := GetElementIndex ( hackTanks , hack ) ;
29187: LD_ADDR_VAR 0 5
29191: PUSH
29192: LD_EXP 89
29196: PPUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL 36205 0 2
29206: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29207: LD_ADDR_VAR 0 4
29211: PUSH
29212: DOUBLE
29213: LD_INT 1
29215: DEC
29216: ST_TO_ADDR
29217: LD_EXP 90
29221: PUSH
29222: LD_VAR 0 5
29226: ARRAY
29227: PUSH
29228: FOR_TO
29229: IFFALSE 29270
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29231: LD_EXP 90
29235: PUSH
29236: LD_VAR 0 5
29240: ARRAY
29241: PUSH
29242: LD_VAR 0 4
29246: ARRAY
29247: PUSH
29248: LD_INT 1
29250: ARRAY
29251: PUSH
29252: LD_VAR 0 2
29256: EQUAL
29257: IFFALSE 29268
// KillUnit ( vehicle ) ;
29259: LD_VAR 0 2
29263: PPUSH
29264: CALL_OW 66
29268: GO 29228
29270: POP
29271: POP
// end ;
29272: LD_VAR 0 3
29276: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29277: LD_EXP 94
29281: NOT
29282: IFFALSE 29317
29284: GO 29286
29286: DISABLE
// begin initMiner := true ;
29287: LD_ADDR_EXP 94
29291: PUSH
29292: LD_INT 1
29294: ST_TO_ADDR
// minersList := [ ] ;
29295: LD_ADDR_EXP 95
29299: PUSH
29300: EMPTY
29301: ST_TO_ADDR
// minerMinesList := [ ] ;
29302: LD_ADDR_EXP 96
29306: PUSH
29307: EMPTY
29308: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29309: LD_ADDR_EXP 97
29313: PUSH
29314: LD_INT 5
29316: ST_TO_ADDR
// end ;
29317: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29318: LD_EXP 94
29322: PUSH
29323: LD_INT 34
29325: PUSH
29326: LD_INT 81
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PPUSH
29333: CALL_OW 69
29337: AND
29338: IFFALSE 29799
29340: GO 29342
29342: DISABLE
29343: LD_INT 0
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin enable ;
29349: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29350: LD_ADDR_VAR 0 1
29354: PUSH
29355: LD_INT 34
29357: PUSH
29358: LD_INT 81
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 69
29369: PUSH
29370: FOR_IN
29371: IFFALSE 29443
// begin if not i in minersList then
29373: LD_VAR 0 1
29377: PUSH
29378: LD_EXP 95
29382: IN
29383: NOT
29384: IFFALSE 29441
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29386: LD_ADDR_EXP 95
29390: PUSH
29391: LD_EXP 95
29395: PPUSH
29396: LD_EXP 95
29400: PUSH
29401: LD_INT 1
29403: PLUS
29404: PPUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 1
29414: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29415: LD_ADDR_EXP 96
29419: PUSH
29420: LD_EXP 96
29424: PPUSH
29425: LD_EXP 96
29429: PUSH
29430: LD_INT 1
29432: PLUS
29433: PPUSH
29434: EMPTY
29435: PPUSH
29436: CALL_OW 1
29440: ST_TO_ADDR
// end end ;
29441: GO 29370
29443: POP
29444: POP
// for i := minerMinesList downto 1 do
29445: LD_ADDR_VAR 0 1
29449: PUSH
29450: DOUBLE
29451: LD_EXP 96
29455: INC
29456: ST_TO_ADDR
29457: LD_INT 1
29459: PUSH
29460: FOR_DOWNTO
29461: IFFALSE 29797
// begin if IsLive ( minersList [ i ] ) then
29463: LD_EXP 95
29467: PUSH
29468: LD_VAR 0 1
29472: ARRAY
29473: PPUSH
29474: CALL_OW 300
29478: IFFALSE 29506
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29480: LD_EXP 95
29484: PUSH
29485: LD_VAR 0 1
29489: ARRAY
29490: PPUSH
29491: LD_EXP 96
29495: PUSH
29496: LD_VAR 0 1
29500: ARRAY
29501: PPUSH
29502: CALL_OW 505
// if not minerMinesList [ i ] then
29506: LD_EXP 96
29510: PUSH
29511: LD_VAR 0 1
29515: ARRAY
29516: NOT
29517: IFFALSE 29521
// continue ;
29519: GO 29460
// for j := minerMinesList [ i ] downto 1 do
29521: LD_ADDR_VAR 0 2
29525: PUSH
29526: DOUBLE
29527: LD_EXP 96
29531: PUSH
29532: LD_VAR 0 1
29536: ARRAY
29537: INC
29538: ST_TO_ADDR
29539: LD_INT 1
29541: PUSH
29542: FOR_DOWNTO
29543: IFFALSE 29793
// begin side := GetSide ( minersList [ i ] ) ;
29545: LD_ADDR_VAR 0 3
29549: PUSH
29550: LD_EXP 95
29554: PUSH
29555: LD_VAR 0 1
29559: ARRAY
29560: PPUSH
29561: CALL_OW 255
29565: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29566: LD_ADDR_VAR 0 4
29570: PUSH
29571: LD_EXP 96
29575: PUSH
29576: LD_VAR 0 1
29580: ARRAY
29581: PUSH
29582: LD_VAR 0 2
29586: ARRAY
29587: PUSH
29588: LD_INT 1
29590: ARRAY
29591: PPUSH
29592: LD_EXP 96
29596: PUSH
29597: LD_VAR 0 1
29601: ARRAY
29602: PUSH
29603: LD_VAR 0 2
29607: ARRAY
29608: PUSH
29609: LD_INT 2
29611: ARRAY
29612: PPUSH
29613: CALL_OW 428
29617: ST_TO_ADDR
// if not tmp then
29618: LD_VAR 0 4
29622: NOT
29623: IFFALSE 29627
// continue ;
29625: GO 29542
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29627: LD_VAR 0 4
29631: PUSH
29632: LD_INT 81
29634: PUSH
29635: LD_VAR 0 3
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PPUSH
29644: CALL_OW 69
29648: IN
29649: PUSH
29650: LD_EXP 96
29654: PUSH
29655: LD_VAR 0 1
29659: ARRAY
29660: PUSH
29661: LD_VAR 0 2
29665: ARRAY
29666: PUSH
29667: LD_INT 1
29669: ARRAY
29670: PPUSH
29671: LD_EXP 96
29675: PUSH
29676: LD_VAR 0 1
29680: ARRAY
29681: PUSH
29682: LD_VAR 0 2
29686: ARRAY
29687: PUSH
29688: LD_INT 2
29690: ARRAY
29691: PPUSH
29692: CALL_OW 458
29696: AND
29697: IFFALSE 29791
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29699: LD_EXP 96
29703: PUSH
29704: LD_VAR 0 1
29708: ARRAY
29709: PUSH
29710: LD_VAR 0 2
29714: ARRAY
29715: PUSH
29716: LD_INT 1
29718: ARRAY
29719: PPUSH
29720: LD_EXP 96
29724: PUSH
29725: LD_VAR 0 1
29729: ARRAY
29730: PUSH
29731: LD_VAR 0 2
29735: ARRAY
29736: PUSH
29737: LD_INT 2
29739: ARRAY
29740: PPUSH
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29750: LD_ADDR_EXP 96
29754: PUSH
29755: LD_EXP 96
29759: PPUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: LD_EXP 96
29769: PUSH
29770: LD_VAR 0 1
29774: ARRAY
29775: PPUSH
29776: LD_VAR 0 2
29780: PPUSH
29781: CALL_OW 3
29785: PPUSH
29786: CALL_OW 1
29790: ST_TO_ADDR
// end ; end ;
29791: GO 29542
29793: POP
29794: POP
// end ;
29795: GO 29460
29797: POP
29798: POP
// end ;
29799: PPOPN 4
29801: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29802: LD_INT 0
29804: PPUSH
29805: PPUSH
// result := false ;
29806: LD_ADDR_VAR 0 4
29810: PUSH
29811: LD_INT 0
29813: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 264
29823: PUSH
29824: LD_INT 81
29826: EQUAL
29827: NOT
29828: IFFALSE 29832
// exit ;
29830: GO 30072
// index := GetElementIndex ( minersList , unit ) ;
29832: LD_ADDR_VAR 0 5
29836: PUSH
29837: LD_EXP 95
29841: PPUSH
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL 36205 0 2
29851: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29852: LD_EXP 96
29856: PUSH
29857: LD_VAR 0 5
29861: ARRAY
29862: PUSH
29863: LD_EXP 97
29867: GREATEREQUAL
29868: IFFALSE 29872
// exit ;
29870: GO 30072
// ComMoveXY ( unit , x , y ) ;
29872: LD_VAR 0 1
29876: PPUSH
29877: LD_VAR 0 2
29881: PPUSH
29882: LD_VAR 0 3
29886: PPUSH
29887: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29891: LD_INT 35
29893: PPUSH
29894: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29898: LD_VAR 0 1
29902: PPUSH
29903: LD_VAR 0 2
29907: PPUSH
29908: LD_VAR 0 3
29912: PPUSH
29913: CALL 67560 0 3
29917: NOT
29918: PUSH
29919: LD_VAR 0 1
29923: PPUSH
29924: CALL_OW 314
29928: AND
29929: IFFALSE 29933
// exit ;
29931: GO 30072
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29933: LD_VAR 0 2
29937: PPUSH
29938: LD_VAR 0 3
29942: PPUSH
29943: CALL_OW 428
29947: PUSH
29948: LD_VAR 0 1
29952: EQUAL
29953: PUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: CALL_OW 314
29963: NOT
29964: AND
29965: IFFALSE 29891
// PlaySoundXY ( x , y , PlantMine ) ;
29967: LD_VAR 0 2
29971: PPUSH
29972: LD_VAR 0 3
29976: PPUSH
29977: LD_STRING PlantMine
29979: PPUSH
29980: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29984: LD_VAR 0 2
29988: PPUSH
29989: LD_VAR 0 3
29993: PPUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: CALL_OW 255
30003: PPUSH
30004: LD_INT 0
30006: PPUSH
30007: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30011: LD_ADDR_EXP 96
30015: PUSH
30016: LD_EXP 96
30020: PPUSH
30021: LD_VAR 0 5
30025: PUSH
30026: LD_EXP 96
30030: PUSH
30031: LD_VAR 0 5
30035: ARRAY
30036: PUSH
30037: LD_INT 1
30039: PLUS
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PPUSH
30045: LD_VAR 0 2
30049: PUSH
30050: LD_VAR 0 3
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PPUSH
30059: CALL 36420 0 3
30063: ST_TO_ADDR
// result := true ;
30064: LD_ADDR_VAR 0 4
30068: PUSH
30069: LD_INT 1
30071: ST_TO_ADDR
// end ;
30072: LD_VAR 0 4
30076: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30077: LD_INT 0
30079: PPUSH
30080: PPUSH
30081: PPUSH
// if not unit in minersList then
30082: LD_VAR 0 1
30086: PUSH
30087: LD_EXP 95
30091: IN
30092: NOT
30093: IFFALSE 30097
// exit ;
30095: GO 30489
// index := GetElementIndex ( minersList , unit ) ;
30097: LD_ADDR_VAR 0 6
30101: PUSH
30102: LD_EXP 95
30106: PPUSH
30107: LD_VAR 0 1
30111: PPUSH
30112: CALL 36205 0 2
30116: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30117: LD_ADDR_VAR 0 5
30121: PUSH
30122: DOUBLE
30123: LD_EXP 96
30127: PUSH
30128: LD_VAR 0 6
30132: ARRAY
30133: INC
30134: ST_TO_ADDR
30135: LD_INT 1
30137: PUSH
30138: FOR_DOWNTO
30139: IFFALSE 30300
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30141: LD_EXP 96
30145: PUSH
30146: LD_VAR 0 6
30150: ARRAY
30151: PUSH
30152: LD_VAR 0 5
30156: ARRAY
30157: PUSH
30158: LD_INT 1
30160: ARRAY
30161: PUSH
30162: LD_VAR 0 2
30166: EQUAL
30167: PUSH
30168: LD_EXP 96
30172: PUSH
30173: LD_VAR 0 6
30177: ARRAY
30178: PUSH
30179: LD_VAR 0 5
30183: ARRAY
30184: PUSH
30185: LD_INT 2
30187: ARRAY
30188: PUSH
30189: LD_VAR 0 3
30193: EQUAL
30194: AND
30195: IFFALSE 30298
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30197: LD_EXP 96
30201: PUSH
30202: LD_VAR 0 6
30206: ARRAY
30207: PUSH
30208: LD_VAR 0 5
30212: ARRAY
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: PPUSH
30218: LD_EXP 96
30222: PUSH
30223: LD_VAR 0 6
30227: ARRAY
30228: PUSH
30229: LD_VAR 0 5
30233: ARRAY
30234: PUSH
30235: LD_INT 2
30237: ARRAY
30238: PPUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 255
30248: PPUSH
30249: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30253: LD_ADDR_EXP 96
30257: PUSH
30258: LD_EXP 96
30262: PPUSH
30263: LD_VAR 0 6
30267: PPUSH
30268: LD_EXP 96
30272: PUSH
30273: LD_VAR 0 6
30277: ARRAY
30278: PPUSH
30279: LD_VAR 0 5
30283: PPUSH
30284: CALL_OW 3
30288: PPUSH
30289: CALL_OW 1
30293: ST_TO_ADDR
// exit ;
30294: POP
30295: POP
30296: GO 30489
// end ; end ;
30298: GO 30138
30300: POP
30301: POP
// for i := minerMinesList [ index ] downto 1 do
30302: LD_ADDR_VAR 0 5
30306: PUSH
30307: DOUBLE
30308: LD_EXP 96
30312: PUSH
30313: LD_VAR 0 6
30317: ARRAY
30318: INC
30319: ST_TO_ADDR
30320: LD_INT 1
30322: PUSH
30323: FOR_DOWNTO
30324: IFFALSE 30487
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30326: LD_EXP 96
30330: PUSH
30331: LD_VAR 0 6
30335: ARRAY
30336: PUSH
30337: LD_VAR 0 5
30341: ARRAY
30342: PUSH
30343: LD_INT 1
30345: ARRAY
30346: PPUSH
30347: LD_EXP 96
30351: PUSH
30352: LD_VAR 0 6
30356: ARRAY
30357: PUSH
30358: LD_VAR 0 5
30362: ARRAY
30363: PUSH
30364: LD_INT 2
30366: ARRAY
30367: PPUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_VAR 0 3
30377: PPUSH
30378: CALL_OW 298
30382: PUSH
30383: LD_INT 6
30385: LESS
30386: IFFALSE 30485
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30388: LD_EXP 96
30392: PUSH
30393: LD_VAR 0 6
30397: ARRAY
30398: PUSH
30399: LD_VAR 0 5
30403: ARRAY
30404: PUSH
30405: LD_INT 1
30407: ARRAY
30408: PPUSH
30409: LD_EXP 96
30413: PUSH
30414: LD_VAR 0 6
30418: ARRAY
30419: PUSH
30420: LD_VAR 0 5
30424: ARRAY
30425: PUSH
30426: LD_INT 2
30428: ARRAY
30429: PPUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 255
30439: PPUSH
30440: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30444: LD_ADDR_EXP 96
30448: PUSH
30449: LD_EXP 96
30453: PPUSH
30454: LD_VAR 0 6
30458: PPUSH
30459: LD_EXP 96
30463: PUSH
30464: LD_VAR 0 6
30468: ARRAY
30469: PPUSH
30470: LD_VAR 0 5
30474: PPUSH
30475: CALL_OW 3
30479: PPUSH
30480: CALL_OW 1
30484: ST_TO_ADDR
// end ; end ;
30485: GO 30323
30487: POP
30488: POP
// end ;
30489: LD_VAR 0 4
30493: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30494: LD_INT 0
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30505: LD_VAR 0 1
30509: PPUSH
30510: CALL_OW 264
30514: PUSH
30515: LD_INT 81
30517: EQUAL
30518: NOT
30519: PUSH
30520: LD_VAR 0 1
30524: PUSH
30525: LD_EXP 95
30529: IN
30530: NOT
30531: OR
30532: IFFALSE 30536
// exit ;
30534: GO 30858
// index := GetElementIndex ( minersList , unit ) ;
30536: LD_ADDR_VAR 0 6
30540: PUSH
30541: LD_EXP 95
30545: PPUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL 36205 0 2
30555: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30556: LD_ADDR_VAR 0 8
30560: PUSH
30561: LD_EXP 97
30565: PUSH
30566: LD_EXP 96
30570: PUSH
30571: LD_VAR 0 6
30575: ARRAY
30576: MINUS
30577: ST_TO_ADDR
// if not minesFreeAmount then
30578: LD_VAR 0 8
30582: NOT
30583: IFFALSE 30587
// exit ;
30585: GO 30858
// tmp := [ ] ;
30587: LD_ADDR_VAR 0 7
30591: PUSH
30592: EMPTY
30593: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30594: LD_ADDR_VAR 0 5
30598: PUSH
30599: DOUBLE
30600: LD_INT 1
30602: DEC
30603: ST_TO_ADDR
30604: LD_VAR 0 8
30608: PUSH
30609: FOR_TO
30610: IFFALSE 30805
// begin _d := rand ( 0 , 5 ) ;
30612: LD_ADDR_VAR 0 11
30616: PUSH
30617: LD_INT 0
30619: PPUSH
30620: LD_INT 5
30622: PPUSH
30623: CALL_OW 12
30627: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30628: LD_ADDR_VAR 0 12
30632: PUSH
30633: LD_INT 2
30635: PPUSH
30636: LD_INT 6
30638: PPUSH
30639: CALL_OW 12
30643: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30644: LD_ADDR_VAR 0 9
30648: PUSH
30649: LD_VAR 0 2
30653: PPUSH
30654: LD_VAR 0 11
30658: PPUSH
30659: LD_VAR 0 12
30663: PPUSH
30664: CALL_OW 272
30668: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30669: LD_ADDR_VAR 0 10
30673: PUSH
30674: LD_VAR 0 3
30678: PPUSH
30679: LD_VAR 0 11
30683: PPUSH
30684: LD_VAR 0 12
30688: PPUSH
30689: CALL_OW 273
30693: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30694: LD_VAR 0 9
30698: PPUSH
30699: LD_VAR 0 10
30703: PPUSH
30704: CALL_OW 488
30708: PUSH
30709: LD_VAR 0 9
30713: PUSH
30714: LD_VAR 0 10
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_VAR 0 7
30727: IN
30728: NOT
30729: AND
30730: PUSH
30731: LD_VAR 0 9
30735: PPUSH
30736: LD_VAR 0 10
30740: PPUSH
30741: CALL_OW 458
30745: NOT
30746: AND
30747: IFFALSE 30789
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30749: LD_ADDR_VAR 0 7
30753: PUSH
30754: LD_VAR 0 7
30758: PPUSH
30759: LD_VAR 0 7
30763: PUSH
30764: LD_INT 1
30766: PLUS
30767: PPUSH
30768: LD_VAR 0 9
30772: PUSH
30773: LD_VAR 0 10
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PPUSH
30782: CALL_OW 1
30786: ST_TO_ADDR
30787: GO 30803
// i := i - 1 ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 5
30798: PUSH
30799: LD_INT 1
30801: MINUS
30802: ST_TO_ADDR
// end ;
30803: GO 30609
30805: POP
30806: POP
// for i in tmp do
30807: LD_ADDR_VAR 0 5
30811: PUSH
30812: LD_VAR 0 7
30816: PUSH
30817: FOR_IN
30818: IFFALSE 30856
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30820: LD_VAR 0 1
30824: PPUSH
30825: LD_VAR 0 5
30829: PUSH
30830: LD_INT 1
30832: ARRAY
30833: PPUSH
30834: LD_VAR 0 5
30838: PUSH
30839: LD_INT 2
30841: ARRAY
30842: PPUSH
30843: CALL 29802 0 3
30847: NOT
30848: IFFALSE 30854
// exit ;
30850: POP
30851: POP
30852: GO 30858
30854: GO 30817
30856: POP
30857: POP
// end ;
30858: LD_VAR 0 4
30862: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30863: LD_INT 0
30865: PPUSH
30866: PPUSH
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
30871: PPUSH
// if not GetClass ( unit ) = class_sniper then
30872: LD_VAR 0 1
30876: PPUSH
30877: CALL_OW 257
30881: PUSH
30882: LD_INT 5
30884: EQUAL
30885: NOT
30886: IFFALSE 30890
// exit ;
30888: GO 31278
// dist := 8 ;
30890: LD_ADDR_VAR 0 5
30894: PUSH
30895: LD_INT 8
30897: ST_TO_ADDR
// viewRange := 12 ;
30898: LD_ADDR_VAR 0 7
30902: PUSH
30903: LD_INT 12
30905: ST_TO_ADDR
// side := GetSide ( unit ) ;
30906: LD_ADDR_VAR 0 6
30910: PUSH
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 255
30920: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30921: LD_INT 61
30923: PPUSH
30924: LD_VAR 0 6
30928: PPUSH
30929: CALL_OW 321
30933: PUSH
30934: LD_INT 2
30936: EQUAL
30937: IFFALSE 30947
// viewRange := 16 ;
30939: LD_ADDR_VAR 0 7
30943: PUSH
30944: LD_INT 16
30946: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30947: LD_VAR 0 1
30951: PPUSH
30952: LD_VAR 0 2
30956: PPUSH
30957: LD_VAR 0 3
30961: PPUSH
30962: CALL_OW 297
30966: PUSH
30967: LD_VAR 0 5
30971: GREATER
30972: IFFALSE 31051
// begin ComMoveXY ( unit , x , y ) ;
30974: LD_VAR 0 1
30978: PPUSH
30979: LD_VAR 0 2
30983: PPUSH
30984: LD_VAR 0 3
30988: PPUSH
30989: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30993: LD_INT 35
30995: PPUSH
30996: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31000: LD_VAR 0 1
31004: PPUSH
31005: LD_VAR 0 2
31009: PPUSH
31010: LD_VAR 0 3
31014: PPUSH
31015: CALL 67560 0 3
31019: NOT
31020: IFFALSE 31024
// exit ;
31022: GO 31278
// until GetDistUnitXY ( unit , x , y ) < dist ;
31024: LD_VAR 0 1
31028: PPUSH
31029: LD_VAR 0 2
31033: PPUSH
31034: LD_VAR 0 3
31038: PPUSH
31039: CALL_OW 297
31043: PUSH
31044: LD_VAR 0 5
31048: LESS
31049: IFFALSE 30993
// end ; ComTurnXY ( unit , x , y ) ;
31051: LD_VAR 0 1
31055: PPUSH
31056: LD_VAR 0 2
31060: PPUSH
31061: LD_VAR 0 3
31065: PPUSH
31066: CALL_OW 118
// wait ( 5 ) ;
31070: LD_INT 5
31072: PPUSH
31073: CALL_OW 67
// _d := GetDir ( unit ) ;
31077: LD_ADDR_VAR 0 10
31081: PUSH
31082: LD_VAR 0 1
31086: PPUSH
31087: CALL_OW 254
31091: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31092: LD_ADDR_VAR 0 8
31096: PUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 250
31106: PPUSH
31107: LD_VAR 0 10
31111: PPUSH
31112: LD_VAR 0 5
31116: PPUSH
31117: CALL_OW 272
31121: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 251
31136: PPUSH
31137: LD_VAR 0 10
31141: PPUSH
31142: LD_VAR 0 5
31146: PPUSH
31147: CALL_OW 273
31151: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31152: LD_VAR 0 8
31156: PPUSH
31157: LD_VAR 0 9
31161: PPUSH
31162: CALL_OW 488
31166: NOT
31167: IFFALSE 31171
// exit ;
31169: GO 31278
// ComAnimCustom ( unit , 1 ) ;
31171: LD_VAR 0 1
31175: PPUSH
31176: LD_INT 1
31178: PPUSH
31179: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31183: LD_VAR 0 8
31187: PPUSH
31188: LD_VAR 0 9
31192: PPUSH
31193: LD_VAR 0 6
31197: PPUSH
31198: LD_VAR 0 7
31202: PPUSH
31203: CALL_OW 330
// repeat wait ( 1 ) ;
31207: LD_INT 1
31209: PPUSH
31210: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 316
31223: PUSH
31224: LD_VAR 0 1
31228: PPUSH
31229: CALL_OW 314
31233: OR
31234: PUSH
31235: LD_VAR 0 1
31239: PPUSH
31240: CALL_OW 302
31244: NOT
31245: OR
31246: PUSH
31247: LD_VAR 0 1
31251: PPUSH
31252: CALL_OW 301
31256: OR
31257: IFFALSE 31207
// RemoveSeeing ( _x , _y , side ) ;
31259: LD_VAR 0 8
31263: PPUSH
31264: LD_VAR 0 9
31268: PPUSH
31269: LD_VAR 0 6
31273: PPUSH
31274: CALL_OW 331
// end ; end_of_file
31278: LD_VAR 0 4
31282: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
// if exist_mode then
31287: LD_VAR 0 2
31291: IFFALSE 31316
// unit := CreateCharacter ( prefix & ident ) else
31293: LD_ADDR_VAR 0 5
31297: PUSH
31298: LD_VAR 0 3
31302: PUSH
31303: LD_VAR 0 1
31307: STR
31308: PPUSH
31309: CALL_OW 34
31313: ST_TO_ADDR
31314: GO 31331
// unit := NewCharacter ( ident ) ;
31316: LD_ADDR_VAR 0 5
31320: PUSH
31321: LD_VAR 0 1
31325: PPUSH
31326: CALL_OW 25
31330: ST_TO_ADDR
// result := unit ;
31331: LD_ADDR_VAR 0 4
31335: PUSH
31336: LD_VAR 0 5
31340: ST_TO_ADDR
// end ;
31341: LD_VAR 0 4
31345: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31346: LD_INT 0
31348: PPUSH
31349: PPUSH
// if not side or not nation then
31350: LD_VAR 0 1
31354: NOT
31355: PUSH
31356: LD_VAR 0 2
31360: NOT
31361: OR
31362: IFFALSE 31366
// exit ;
31364: GO 32134
// case nation of nation_american :
31366: LD_VAR 0 2
31370: PUSH
31371: LD_INT 1
31373: DOUBLE
31374: EQUAL
31375: IFTRUE 31379
31377: GO 31593
31379: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31380: LD_ADDR_VAR 0 4
31384: PUSH
31385: LD_INT 35
31387: PUSH
31388: LD_INT 45
31390: PUSH
31391: LD_INT 46
31393: PUSH
31394: LD_INT 47
31396: PUSH
31397: LD_INT 82
31399: PUSH
31400: LD_INT 83
31402: PUSH
31403: LD_INT 84
31405: PUSH
31406: LD_INT 85
31408: PUSH
31409: LD_INT 86
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 6
31420: PUSH
31421: LD_INT 15
31423: PUSH
31424: LD_INT 16
31426: PUSH
31427: LD_INT 7
31429: PUSH
31430: LD_INT 12
31432: PUSH
31433: LD_INT 13
31435: PUSH
31436: LD_INT 10
31438: PUSH
31439: LD_INT 14
31441: PUSH
31442: LD_INT 20
31444: PUSH
31445: LD_INT 21
31447: PUSH
31448: LD_INT 22
31450: PUSH
31451: LD_INT 25
31453: PUSH
31454: LD_INT 32
31456: PUSH
31457: LD_INT 27
31459: PUSH
31460: LD_INT 36
31462: PUSH
31463: LD_INT 69
31465: PUSH
31466: LD_INT 39
31468: PUSH
31469: LD_INT 34
31471: PUSH
31472: LD_INT 40
31474: PUSH
31475: LD_INT 48
31477: PUSH
31478: LD_INT 49
31480: PUSH
31481: LD_INT 50
31483: PUSH
31484: LD_INT 51
31486: PUSH
31487: LD_INT 52
31489: PUSH
31490: LD_INT 53
31492: PUSH
31493: LD_INT 54
31495: PUSH
31496: LD_INT 55
31498: PUSH
31499: LD_INT 56
31501: PUSH
31502: LD_INT 57
31504: PUSH
31505: LD_INT 58
31507: PUSH
31508: LD_INT 59
31510: PUSH
31511: LD_INT 60
31513: PUSH
31514: LD_INT 61
31516: PUSH
31517: LD_INT 62
31519: PUSH
31520: LD_INT 80
31522: PUSH
31523: LD_INT 82
31525: PUSH
31526: LD_INT 83
31528: PUSH
31529: LD_INT 84
31531: PUSH
31532: LD_INT 85
31534: PUSH
31535: LD_INT 86
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
31591: GO 32058
31593: LD_INT 2
31595: DOUBLE
31596: EQUAL
31597: IFTRUE 31601
31599: GO 31827
31601: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31602: LD_ADDR_VAR 0 4
31606: PUSH
31607: LD_INT 35
31609: PUSH
31610: LD_INT 45
31612: PUSH
31613: LD_INT 46
31615: PUSH
31616: LD_INT 47
31618: PUSH
31619: LD_INT 82
31621: PUSH
31622: LD_INT 83
31624: PUSH
31625: LD_INT 84
31627: PUSH
31628: LD_INT 85
31630: PUSH
31631: LD_INT 87
31633: PUSH
31634: LD_INT 70
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 11
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 4
31648: PUSH
31649: LD_INT 5
31651: PUSH
31652: LD_INT 6
31654: PUSH
31655: LD_INT 15
31657: PUSH
31658: LD_INT 18
31660: PUSH
31661: LD_INT 7
31663: PUSH
31664: LD_INT 17
31666: PUSH
31667: LD_INT 8
31669: PUSH
31670: LD_INT 20
31672: PUSH
31673: LD_INT 21
31675: PUSH
31676: LD_INT 22
31678: PUSH
31679: LD_INT 72
31681: PUSH
31682: LD_INT 26
31684: PUSH
31685: LD_INT 69
31687: PUSH
31688: LD_INT 39
31690: PUSH
31691: LD_INT 40
31693: PUSH
31694: LD_INT 41
31696: PUSH
31697: LD_INT 42
31699: PUSH
31700: LD_INT 43
31702: PUSH
31703: LD_INT 48
31705: PUSH
31706: LD_INT 49
31708: PUSH
31709: LD_INT 50
31711: PUSH
31712: LD_INT 51
31714: PUSH
31715: LD_INT 52
31717: PUSH
31718: LD_INT 53
31720: PUSH
31721: LD_INT 54
31723: PUSH
31724: LD_INT 55
31726: PUSH
31727: LD_INT 56
31729: PUSH
31730: LD_INT 60
31732: PUSH
31733: LD_INT 61
31735: PUSH
31736: LD_INT 62
31738: PUSH
31739: LD_INT 66
31741: PUSH
31742: LD_INT 67
31744: PUSH
31745: LD_INT 68
31747: PUSH
31748: LD_INT 81
31750: PUSH
31751: LD_INT 82
31753: PUSH
31754: LD_INT 83
31756: PUSH
31757: LD_INT 84
31759: PUSH
31760: LD_INT 85
31762: PUSH
31763: LD_INT 87
31765: PUSH
31766: LD_INT 88
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
31825: GO 32058
31827: LD_INT 3
31829: DOUBLE
31830: EQUAL
31831: IFTRUE 31835
31833: GO 32057
31835: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31836: LD_ADDR_VAR 0 4
31840: PUSH
31841: LD_INT 46
31843: PUSH
31844: LD_INT 47
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: LD_INT 82
31855: PUSH
31856: LD_INT 83
31858: PUSH
31859: LD_INT 84
31861: PUSH
31862: LD_INT 85
31864: PUSH
31865: LD_INT 86
31867: PUSH
31868: LD_INT 11
31870: PUSH
31871: LD_INT 9
31873: PUSH
31874: LD_INT 20
31876: PUSH
31877: LD_INT 19
31879: PUSH
31880: LD_INT 21
31882: PUSH
31883: LD_INT 24
31885: PUSH
31886: LD_INT 22
31888: PUSH
31889: LD_INT 25
31891: PUSH
31892: LD_INT 28
31894: PUSH
31895: LD_INT 29
31897: PUSH
31898: LD_INT 30
31900: PUSH
31901: LD_INT 31
31903: PUSH
31904: LD_INT 37
31906: PUSH
31907: LD_INT 38
31909: PUSH
31910: LD_INT 32
31912: PUSH
31913: LD_INT 27
31915: PUSH
31916: LD_INT 33
31918: PUSH
31919: LD_INT 69
31921: PUSH
31922: LD_INT 39
31924: PUSH
31925: LD_INT 34
31927: PUSH
31928: LD_INT 40
31930: PUSH
31931: LD_INT 71
31933: PUSH
31934: LD_INT 23
31936: PUSH
31937: LD_INT 44
31939: PUSH
31940: LD_INT 48
31942: PUSH
31943: LD_INT 49
31945: PUSH
31946: LD_INT 50
31948: PUSH
31949: LD_INT 51
31951: PUSH
31952: LD_INT 52
31954: PUSH
31955: LD_INT 53
31957: PUSH
31958: LD_INT 54
31960: PUSH
31961: LD_INT 55
31963: PUSH
31964: LD_INT 56
31966: PUSH
31967: LD_INT 57
31969: PUSH
31970: LD_INT 58
31972: PUSH
31973: LD_INT 59
31975: PUSH
31976: LD_INT 63
31978: PUSH
31979: LD_INT 64
31981: PUSH
31982: LD_INT 65
31984: PUSH
31985: LD_INT 82
31987: PUSH
31988: LD_INT 83
31990: PUSH
31991: LD_INT 84
31993: PUSH
31994: LD_INT 85
31996: PUSH
31997: LD_INT 86
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
32055: GO 32058
32057: POP
// if state > - 1 and state < 3 then
32058: LD_VAR 0 3
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: GREATER
32067: PUSH
32068: LD_VAR 0 3
32072: PUSH
32073: LD_INT 3
32075: LESS
32076: AND
32077: IFFALSE 32134
// for i in result do
32079: LD_ADDR_VAR 0 5
32083: PUSH
32084: LD_VAR 0 4
32088: PUSH
32089: FOR_IN
32090: IFFALSE 32132
// if GetTech ( i , side ) <> state then
32092: LD_VAR 0 5
32096: PPUSH
32097: LD_VAR 0 1
32101: PPUSH
32102: CALL_OW 321
32106: PUSH
32107: LD_VAR 0 3
32111: NONEQUAL
32112: IFFALSE 32130
// result := result diff i ;
32114: LD_ADDR_VAR 0 4
32118: PUSH
32119: LD_VAR 0 4
32123: PUSH
32124: LD_VAR 0 5
32128: DIFF
32129: ST_TO_ADDR
32130: GO 32089
32132: POP
32133: POP
// end ;
32134: LD_VAR 0 4
32138: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32139: LD_INT 0
32141: PPUSH
32142: PPUSH
32143: PPUSH
// result := true ;
32144: LD_ADDR_VAR 0 3
32148: PUSH
32149: LD_INT 1
32151: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32152: LD_ADDR_VAR 0 5
32156: PUSH
32157: LD_VAR 0 2
32161: PPUSH
32162: CALL_OW 480
32166: ST_TO_ADDR
// if not tmp then
32167: LD_VAR 0 5
32171: NOT
32172: IFFALSE 32176
// exit ;
32174: GO 32225
// for i in tmp do
32176: LD_ADDR_VAR 0 4
32180: PUSH
32181: LD_VAR 0 5
32185: PUSH
32186: FOR_IN
32187: IFFALSE 32223
// if GetTech ( i , side ) <> state_researched then
32189: LD_VAR 0 4
32193: PPUSH
32194: LD_VAR 0 1
32198: PPUSH
32199: CALL_OW 321
32203: PUSH
32204: LD_INT 2
32206: NONEQUAL
32207: IFFALSE 32221
// begin result := false ;
32209: LD_ADDR_VAR 0 3
32213: PUSH
32214: LD_INT 0
32216: ST_TO_ADDR
// exit ;
32217: POP
32218: POP
32219: GO 32225
// end ;
32221: GO 32186
32223: POP
32224: POP
// end ;
32225: LD_VAR 0 3
32229: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32230: LD_INT 0
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32245: LD_VAR 0 1
32249: NOT
32250: PUSH
32251: LD_VAR 0 1
32255: PPUSH
32256: CALL_OW 257
32260: PUSH
32261: LD_INT 9
32263: NONEQUAL
32264: OR
32265: IFFALSE 32269
// exit ;
32267: GO 32842
// side := GetSide ( unit ) ;
32269: LD_ADDR_VAR 0 9
32273: PUSH
32274: LD_VAR 0 1
32278: PPUSH
32279: CALL_OW 255
32283: ST_TO_ADDR
// tech_space := tech_spacanom ;
32284: LD_ADDR_VAR 0 12
32288: PUSH
32289: LD_INT 29
32291: ST_TO_ADDR
// tech_time := tech_taurad ;
32292: LD_ADDR_VAR 0 13
32296: PUSH
32297: LD_INT 28
32299: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32300: LD_ADDR_VAR 0 11
32304: PUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 310
32314: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32315: LD_VAR 0 11
32319: PPUSH
32320: CALL_OW 247
32324: PUSH
32325: LD_INT 2
32327: EQUAL
32328: IFFALSE 32332
// exit ;
32330: GO 32842
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32332: LD_ADDR_VAR 0 8
32336: PUSH
32337: LD_INT 81
32339: PUSH
32340: LD_VAR 0 9
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: LD_INT 21
32354: PUSH
32355: LD_INT 3
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PPUSH
32370: CALL_OW 69
32374: ST_TO_ADDR
// if not tmp then
32375: LD_VAR 0 8
32379: NOT
32380: IFFALSE 32384
// exit ;
32382: GO 32842
// if in_unit then
32384: LD_VAR 0 11
32388: IFFALSE 32412
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32390: LD_ADDR_VAR 0 10
32394: PUSH
32395: LD_VAR 0 8
32399: PPUSH
32400: LD_VAR 0 11
32404: PPUSH
32405: CALL_OW 74
32409: ST_TO_ADDR
32410: GO 32432
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32412: LD_ADDR_VAR 0 10
32416: PUSH
32417: LD_VAR 0 8
32421: PPUSH
32422: LD_VAR 0 1
32426: PPUSH
32427: CALL_OW 74
32431: ST_TO_ADDR
// if not enemy then
32432: LD_VAR 0 10
32436: NOT
32437: IFFALSE 32441
// exit ;
32439: GO 32842
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32441: LD_VAR 0 11
32445: PUSH
32446: LD_VAR 0 11
32450: PPUSH
32451: LD_VAR 0 10
32455: PPUSH
32456: CALL_OW 296
32460: PUSH
32461: LD_INT 13
32463: GREATER
32464: AND
32465: PUSH
32466: LD_VAR 0 1
32470: PPUSH
32471: LD_VAR 0 10
32475: PPUSH
32476: CALL_OW 296
32480: PUSH
32481: LD_INT 12
32483: GREATER
32484: OR
32485: IFFALSE 32489
// exit ;
32487: GO 32842
// missile := [ 1 ] ;
32489: LD_ADDR_VAR 0 14
32493: PUSH
32494: LD_INT 1
32496: PUSH
32497: EMPTY
32498: LIST
32499: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32500: LD_VAR 0 9
32504: PPUSH
32505: LD_VAR 0 12
32509: PPUSH
32510: CALL_OW 325
32514: IFFALSE 32543
// missile := Replace ( missile , missile + 1 , 2 ) ;
32516: LD_ADDR_VAR 0 14
32520: PUSH
32521: LD_VAR 0 14
32525: PPUSH
32526: LD_VAR 0 14
32530: PUSH
32531: LD_INT 1
32533: PLUS
32534: PPUSH
32535: LD_INT 2
32537: PPUSH
32538: CALL_OW 1
32542: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32543: LD_VAR 0 9
32547: PPUSH
32548: LD_VAR 0 13
32552: PPUSH
32553: CALL_OW 325
32557: PUSH
32558: LD_VAR 0 10
32562: PPUSH
32563: CALL_OW 255
32567: PPUSH
32568: LD_VAR 0 13
32572: PPUSH
32573: CALL_OW 325
32577: NOT
32578: AND
32579: IFFALSE 32608
// missile := Replace ( missile , missile + 1 , 3 ) ;
32581: LD_ADDR_VAR 0 14
32585: PUSH
32586: LD_VAR 0 14
32590: PPUSH
32591: LD_VAR 0 14
32595: PUSH
32596: LD_INT 1
32598: PLUS
32599: PPUSH
32600: LD_INT 3
32602: PPUSH
32603: CALL_OW 1
32607: ST_TO_ADDR
// if missile < 2 then
32608: LD_VAR 0 14
32612: PUSH
32613: LD_INT 2
32615: LESS
32616: IFFALSE 32620
// exit ;
32618: GO 32842
// x := GetX ( enemy ) ;
32620: LD_ADDR_VAR 0 4
32624: PUSH
32625: LD_VAR 0 10
32629: PPUSH
32630: CALL_OW 250
32634: ST_TO_ADDR
// y := GetY ( enemy ) ;
32635: LD_ADDR_VAR 0 5
32639: PUSH
32640: LD_VAR 0 10
32644: PPUSH
32645: CALL_OW 251
32649: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32650: LD_ADDR_VAR 0 6
32654: PUSH
32655: LD_VAR 0 4
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PPUSH
32664: LD_INT 1
32666: PPUSH
32667: CALL_OW 12
32671: PLUS
32672: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32673: LD_ADDR_VAR 0 7
32677: PUSH
32678: LD_VAR 0 5
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PPUSH
32687: LD_INT 1
32689: PPUSH
32690: CALL_OW 12
32694: PLUS
32695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32696: LD_VAR 0 6
32700: PPUSH
32701: LD_VAR 0 7
32705: PPUSH
32706: CALL_OW 488
32710: NOT
32711: IFFALSE 32733
// begin _x := x ;
32713: LD_ADDR_VAR 0 6
32717: PUSH
32718: LD_VAR 0 4
32722: ST_TO_ADDR
// _y := y ;
32723: LD_ADDR_VAR 0 7
32727: PUSH
32728: LD_VAR 0 5
32732: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: LD_INT 1
32740: PPUSH
32741: LD_VAR 0 14
32745: PPUSH
32746: CALL_OW 12
32750: ST_TO_ADDR
// case i of 1 :
32751: LD_VAR 0 3
32755: PUSH
32756: LD_INT 1
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32781
32764: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32765: LD_VAR 0 1
32769: PPUSH
32770: LD_VAR 0 10
32774: PPUSH
32775: CALL_OW 115
32779: GO 32842
32781: LD_INT 2
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32789
32787: GO 32811
32789: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32790: LD_VAR 0 1
32794: PPUSH
32795: LD_VAR 0 6
32799: PPUSH
32800: LD_VAR 0 7
32804: PPUSH
32805: CALL_OW 153
32809: GO 32842
32811: LD_INT 3
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32819
32817: GO 32841
32819: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32820: LD_VAR 0 1
32824: PPUSH
32825: LD_VAR 0 6
32829: PPUSH
32830: LD_VAR 0 7
32834: PPUSH
32835: CALL_OW 154
32839: GO 32842
32841: POP
// end ;
32842: LD_VAR 0 2
32846: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32847: LD_INT 0
32849: PPUSH
32850: PPUSH
32851: PPUSH
32852: PPUSH
32853: PPUSH
32854: PPUSH
// if not unit or not building then
32855: LD_VAR 0 1
32859: NOT
32860: PUSH
32861: LD_VAR 0 2
32865: NOT
32866: OR
32867: IFFALSE 32871
// exit ;
32869: GO 33029
// x := GetX ( building ) ;
32871: LD_ADDR_VAR 0 5
32875: PUSH
32876: LD_VAR 0 2
32880: PPUSH
32881: CALL_OW 250
32885: ST_TO_ADDR
// y := GetY ( building ) ;
32886: LD_ADDR_VAR 0 6
32890: PUSH
32891: LD_VAR 0 2
32895: PPUSH
32896: CALL_OW 251
32900: ST_TO_ADDR
// for i = 0 to 5 do
32901: LD_ADDR_VAR 0 4
32905: PUSH
32906: DOUBLE
32907: LD_INT 0
32909: DEC
32910: ST_TO_ADDR
32911: LD_INT 5
32913: PUSH
32914: FOR_TO
32915: IFFALSE 33027
// begin _x := ShiftX ( x , i , 3 ) ;
32917: LD_ADDR_VAR 0 7
32921: PUSH
32922: LD_VAR 0 5
32926: PPUSH
32927: LD_VAR 0 4
32931: PPUSH
32932: LD_INT 3
32934: PPUSH
32935: CALL_OW 272
32939: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32940: LD_ADDR_VAR 0 8
32944: PUSH
32945: LD_VAR 0 6
32949: PPUSH
32950: LD_VAR 0 4
32954: PPUSH
32955: LD_INT 3
32957: PPUSH
32958: CALL_OW 273
32962: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32963: LD_VAR 0 7
32967: PPUSH
32968: LD_VAR 0 8
32972: PPUSH
32973: CALL_OW 488
32977: NOT
32978: IFFALSE 32982
// continue ;
32980: GO 32914
// if HexInfo ( _x , _y ) = 0 then
32982: LD_VAR 0 7
32986: PPUSH
32987: LD_VAR 0 8
32991: PPUSH
32992: CALL_OW 428
32996: PUSH
32997: LD_INT 0
32999: EQUAL
33000: IFFALSE 33025
// begin ComMoveXY ( unit , _x , _y ) ;
33002: LD_VAR 0 1
33006: PPUSH
33007: LD_VAR 0 7
33011: PPUSH
33012: LD_VAR 0 8
33016: PPUSH
33017: CALL_OW 111
// exit ;
33021: POP
33022: POP
33023: GO 33029
// end ; end ;
33025: GO 32914
33027: POP
33028: POP
// end ;
33029: LD_VAR 0 3
33033: RET
// export function ScanBase ( side , base_area ) ; begin
33034: LD_INT 0
33036: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33037: LD_ADDR_VAR 0 3
33041: PUSH
33042: LD_VAR 0 2
33046: PPUSH
33047: LD_INT 81
33049: PUSH
33050: LD_VAR 0 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PPUSH
33059: CALL_OW 70
33063: ST_TO_ADDR
// end ;
33064: LD_VAR 0 3
33068: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33069: LD_INT 0
33071: PPUSH
33072: PPUSH
33073: PPUSH
33074: PPUSH
// result := false ;
33075: LD_ADDR_VAR 0 2
33079: PUSH
33080: LD_INT 0
33082: ST_TO_ADDR
// side := GetSide ( unit ) ;
33083: LD_ADDR_VAR 0 3
33087: PUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: CALL_OW 255
33097: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33098: LD_ADDR_VAR 0 4
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 248
33112: ST_TO_ADDR
// case nat of 1 :
33113: LD_VAR 0 4
33117: PUSH
33118: LD_INT 1
33120: DOUBLE
33121: EQUAL
33122: IFTRUE 33126
33124: GO 33137
33126: POP
// tech := tech_lassight ; 2 :
33127: LD_ADDR_VAR 0 5
33131: PUSH
33132: LD_INT 12
33134: ST_TO_ADDR
33135: GO 33176
33137: LD_INT 2
33139: DOUBLE
33140: EQUAL
33141: IFTRUE 33145
33143: GO 33156
33145: POP
// tech := tech_mortar ; 3 :
33146: LD_ADDR_VAR 0 5
33150: PUSH
33151: LD_INT 41
33153: ST_TO_ADDR
33154: GO 33176
33156: LD_INT 3
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33164
33162: GO 33175
33164: POP
// tech := tech_bazooka ; end ;
33165: LD_ADDR_VAR 0 5
33169: PUSH
33170: LD_INT 44
33172: ST_TO_ADDR
33173: GO 33176
33175: POP
// if Researched ( side , tech ) then
33176: LD_VAR 0 3
33180: PPUSH
33181: LD_VAR 0 5
33185: PPUSH
33186: CALL_OW 325
33190: IFFALSE 33217
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33192: LD_ADDR_VAR 0 2
33196: PUSH
33197: LD_INT 5
33199: PUSH
33200: LD_INT 8
33202: PUSH
33203: LD_INT 9
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: PUSH
33211: LD_VAR 0 4
33215: ARRAY
33216: ST_TO_ADDR
// end ;
33217: LD_VAR 0 2
33221: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33222: LD_INT 0
33224: PPUSH
33225: PPUSH
33226: PPUSH
// if not mines then
33227: LD_VAR 0 2
33231: NOT
33232: IFFALSE 33236
// exit ;
33234: GO 33380
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33236: LD_ADDR_VAR 0 5
33240: PUSH
33241: LD_INT 81
33243: PUSH
33244: LD_VAR 0 1
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 3
33255: PUSH
33256: LD_INT 21
33258: PUSH
33259: LD_INT 3
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: ST_TO_ADDR
// for i in mines do
33279: LD_ADDR_VAR 0 4
33283: PUSH
33284: LD_VAR 0 2
33288: PUSH
33289: FOR_IN
33290: IFFALSE 33378
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33292: LD_VAR 0 4
33296: PUSH
33297: LD_INT 1
33299: ARRAY
33300: PPUSH
33301: LD_VAR 0 4
33305: PUSH
33306: LD_INT 2
33308: ARRAY
33309: PPUSH
33310: CALL_OW 458
33314: NOT
33315: IFFALSE 33319
// continue ;
33317: GO 33289
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33319: LD_VAR 0 4
33323: PUSH
33324: LD_INT 1
33326: ARRAY
33327: PPUSH
33328: LD_VAR 0 4
33332: PUSH
33333: LD_INT 2
33335: ARRAY
33336: PPUSH
33337: CALL_OW 428
33341: PUSH
33342: LD_VAR 0 5
33346: IN
33347: IFFALSE 33376
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33349: LD_VAR 0 4
33353: PUSH
33354: LD_INT 1
33356: ARRAY
33357: PPUSH
33358: LD_VAR 0 4
33362: PUSH
33363: LD_INT 2
33365: ARRAY
33366: PPUSH
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 456
// end ;
33376: GO 33289
33378: POP
33379: POP
// end ;
33380: LD_VAR 0 3
33384: RET
// export function Count ( array ) ; var i ; begin
33385: LD_INT 0
33387: PPUSH
33388: PPUSH
// result := 0 ;
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: LD_INT 0
33396: ST_TO_ADDR
// for i in array do
33397: LD_ADDR_VAR 0 3
33401: PUSH
33402: LD_VAR 0 1
33406: PUSH
33407: FOR_IN
33408: IFFALSE 33432
// if i then
33410: LD_VAR 0 3
33414: IFFALSE 33430
// result := result + 1 ;
33416: LD_ADDR_VAR 0 2
33420: PUSH
33421: LD_VAR 0 2
33425: PUSH
33426: LD_INT 1
33428: PLUS
33429: ST_TO_ADDR
33430: GO 33407
33432: POP
33433: POP
// end ;
33434: LD_VAR 0 2
33438: RET
// export function IsEmpty ( building ) ; begin
33439: LD_INT 0
33441: PPUSH
// if not building then
33442: LD_VAR 0 1
33446: NOT
33447: IFFALSE 33451
// exit ;
33449: GO 33494
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33451: LD_ADDR_VAR 0 2
33455: PUSH
33456: LD_VAR 0 1
33460: PUSH
33461: LD_INT 22
33463: PUSH
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 255
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 58
33480: PUSH
33481: EMPTY
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PPUSH
33488: CALL_OW 69
33492: IN
33493: ST_TO_ADDR
// end ;
33494: LD_VAR 0 2
33498: RET
// export function IsNotFull ( building ) ; var places ; begin
33499: LD_INT 0
33501: PPUSH
33502: PPUSH
// if not building then
33503: LD_VAR 0 1
33507: NOT
33508: IFFALSE 33512
// exit ;
33510: GO 33683
// result := false ;
33512: LD_ADDR_VAR 0 2
33516: PUSH
33517: LD_INT 0
33519: ST_TO_ADDR
// places := 0 ;
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_INT 0
33527: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33528: LD_VAR 0 1
33532: PPUSH
33533: CALL_OW 266
33537: PUSH
33538: LD_INT 0
33540: DOUBLE
33541: EQUAL
33542: IFTRUE 33600
33544: LD_INT 1
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33600
33550: LD_INT 6
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33600
33556: LD_INT 7
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33600
33562: LD_INT 8
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33600
33568: LD_INT 4
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33600
33574: LD_INT 5
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33600
33580: LD_INT 2
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33600
33586: LD_INT 3
33588: DOUBLE
33589: EQUAL
33590: IFTRUE 33600
33592: LD_INT 35
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33600
33598: GO 33611
33600: POP
// places := 6 ; b_bunker , b_breastwork :
33601: LD_ADDR_VAR 0 3
33605: PUSH
33606: LD_INT 6
33608: ST_TO_ADDR
33609: GO 33656
33611: LD_INT 32
33613: DOUBLE
33614: EQUAL
33615: IFTRUE 33625
33617: LD_INT 31
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33625
33623: GO 33636
33625: POP
// places := 1 ; b_control_tower :
33626: LD_ADDR_VAR 0 3
33630: PUSH
33631: LD_INT 1
33633: ST_TO_ADDR
33634: GO 33656
33636: LD_INT 36
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33655
33644: POP
// places := 3 ; end ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 3
33652: ST_TO_ADDR
33653: GO 33656
33655: POP
// if places then
33656: LD_VAR 0 3
33660: IFFALSE 33683
// result := UnitsInside ( building ) < places ;
33662: LD_ADDR_VAR 0 2
33666: PUSH
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 313
33676: PUSH
33677: LD_VAR 0 3
33681: LESS
33682: ST_TO_ADDR
// end ;
33683: LD_VAR 0 2
33687: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33688: LD_INT 0
33690: PPUSH
33691: PPUSH
33692: PPUSH
33693: PPUSH
// tmp := [ ] ;
33694: LD_ADDR_VAR 0 3
33698: PUSH
33699: EMPTY
33700: ST_TO_ADDR
// list := [ ] ;
33701: LD_ADDR_VAR 0 5
33705: PUSH
33706: EMPTY
33707: ST_TO_ADDR
// for i = 16 to 25 do
33708: LD_ADDR_VAR 0 4
33712: PUSH
33713: DOUBLE
33714: LD_INT 16
33716: DEC
33717: ST_TO_ADDR
33718: LD_INT 25
33720: PUSH
33721: FOR_TO
33722: IFFALSE 33795
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33724: LD_ADDR_VAR 0 3
33728: PUSH
33729: LD_VAR 0 3
33733: PUSH
33734: LD_INT 22
33736: PUSH
33737: LD_VAR 0 1
33741: PPUSH
33742: CALL_OW 255
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 91
33753: PUSH
33754: LD_VAR 0 1
33758: PUSH
33759: LD_INT 6
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 30
33769: PUSH
33770: LD_VAR 0 4
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: PPUSH
33787: CALL_OW 69
33791: ADD
33792: ST_TO_ADDR
33793: GO 33721
33795: POP
33796: POP
// for i = 1 to tmp do
33797: LD_ADDR_VAR 0 4
33801: PUSH
33802: DOUBLE
33803: LD_INT 1
33805: DEC
33806: ST_TO_ADDR
33807: LD_VAR 0 3
33811: PUSH
33812: FOR_TO
33813: IFFALSE 33901
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33815: LD_ADDR_VAR 0 5
33819: PUSH
33820: LD_VAR 0 5
33824: PUSH
33825: LD_VAR 0 3
33829: PUSH
33830: LD_VAR 0 4
33834: ARRAY
33835: PPUSH
33836: CALL_OW 266
33840: PUSH
33841: LD_VAR 0 3
33845: PUSH
33846: LD_VAR 0 4
33850: ARRAY
33851: PPUSH
33852: CALL_OW 250
33856: PUSH
33857: LD_VAR 0 3
33861: PUSH
33862: LD_VAR 0 4
33866: ARRAY
33867: PPUSH
33868: CALL_OW 251
33872: PUSH
33873: LD_VAR 0 3
33877: PUSH
33878: LD_VAR 0 4
33882: ARRAY
33883: PPUSH
33884: CALL_OW 254
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: PUSH
33895: EMPTY
33896: LIST
33897: ADD
33898: ST_TO_ADDR
33899: GO 33812
33901: POP
33902: POP
// result := list ;
33903: LD_ADDR_VAR 0 2
33907: PUSH
33908: LD_VAR 0 5
33912: ST_TO_ADDR
// end ;
33913: LD_VAR 0 2
33917: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33918: LD_INT 0
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
// if not factory then
33927: LD_VAR 0 1
33931: NOT
33932: IFFALSE 33936
// exit ;
33934: GO 34529
// if control = control_apeman then
33936: LD_VAR 0 4
33940: PUSH
33941: LD_INT 5
33943: EQUAL
33944: IFFALSE 34053
// begin tmp := UnitsInside ( factory ) ;
33946: LD_ADDR_VAR 0 8
33950: PUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 313
33960: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33961: LD_VAR 0 8
33965: PPUSH
33966: LD_INT 25
33968: PUSH
33969: LD_INT 12
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PPUSH
33976: CALL_OW 72
33980: NOT
33981: IFFALSE 33991
// control := control_manual ;
33983: LD_ADDR_VAR 0 4
33987: PUSH
33988: LD_INT 1
33990: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33991: LD_ADDR_VAR 0 8
33995: PUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL 33688 0 1
34005: ST_TO_ADDR
// if tmp then
34006: LD_VAR 0 8
34010: IFFALSE 34053
// begin for i in tmp do
34012: LD_ADDR_VAR 0 7
34016: PUSH
34017: LD_VAR 0 8
34021: PUSH
34022: FOR_IN
34023: IFFALSE 34051
// if i [ 1 ] = b_ext_radio then
34025: LD_VAR 0 7
34029: PUSH
34030: LD_INT 1
34032: ARRAY
34033: PUSH
34034: LD_INT 22
34036: EQUAL
34037: IFFALSE 34049
// begin control := control_remote ;
34039: LD_ADDR_VAR 0 4
34043: PUSH
34044: LD_INT 2
34046: ST_TO_ADDR
// break ;
34047: GO 34051
// end ;
34049: GO 34022
34051: POP
34052: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34053: LD_VAR 0 1
34057: PPUSH
34058: LD_VAR 0 2
34062: PPUSH
34063: LD_VAR 0 3
34067: PPUSH
34068: LD_VAR 0 4
34072: PPUSH
34073: LD_VAR 0 5
34077: PPUSH
34078: CALL_OW 448
34082: IFFALSE 34117
// begin result := [ chassis , engine , control , weapon ] ;
34084: LD_ADDR_VAR 0 6
34088: PUSH
34089: LD_VAR 0 2
34093: PUSH
34094: LD_VAR 0 3
34098: PUSH
34099: LD_VAR 0 4
34103: PUSH
34104: LD_VAR 0 5
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
// exit ;
34115: GO 34529
// end ; _chassis := AvailableChassisList ( factory ) ;
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 475
34131: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34132: LD_ADDR_VAR 0 11
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 476
34146: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34147: LD_ADDR_VAR 0 12
34151: PUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: CALL_OW 477
34161: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34162: LD_ADDR_VAR 0 10
34166: PUSH
34167: LD_VAR 0 1
34171: PPUSH
34172: CALL_OW 478
34176: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34177: LD_VAR 0 9
34181: NOT
34182: PUSH
34183: LD_VAR 0 11
34187: NOT
34188: OR
34189: PUSH
34190: LD_VAR 0 12
34194: NOT
34195: OR
34196: PUSH
34197: LD_VAR 0 10
34201: NOT
34202: OR
34203: IFFALSE 34238
// begin result := [ chassis , engine , control , weapon ] ;
34205: LD_ADDR_VAR 0 6
34209: PUSH
34210: LD_VAR 0 2
34214: PUSH
34215: LD_VAR 0 3
34219: PUSH
34220: LD_VAR 0 4
34224: PUSH
34225: LD_VAR 0 5
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
// exit ;
34236: GO 34529
// end ; if not chassis in _chassis then
34238: LD_VAR 0 2
34242: PUSH
34243: LD_VAR 0 9
34247: IN
34248: NOT
34249: IFFALSE 34275
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34251: LD_ADDR_VAR 0 2
34255: PUSH
34256: LD_VAR 0 9
34260: PUSH
34261: LD_INT 1
34263: PPUSH
34264: LD_VAR 0 9
34268: PPUSH
34269: CALL_OW 12
34273: ARRAY
34274: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34275: LD_VAR 0 2
34279: PPUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL 34534 0 2
34289: NOT
34290: IFFALSE 34349
// repeat engine := _engine [ 1 ] ;
34292: LD_ADDR_VAR 0 3
34296: PUSH
34297: LD_VAR 0 11
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34306: LD_ADDR_VAR 0 11
34310: PUSH
34311: LD_VAR 0 11
34315: PPUSH
34316: LD_INT 1
34318: PPUSH
34319: CALL_OW 3
34323: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34324: LD_VAR 0 2
34328: PPUSH
34329: LD_VAR 0 3
34333: PPUSH
34334: CALL 34534 0 2
34338: PUSH
34339: LD_VAR 0 11
34343: PUSH
34344: EMPTY
34345: EQUAL
34346: OR
34347: IFFALSE 34292
// if not control in _control then
34349: LD_VAR 0 4
34353: PUSH
34354: LD_VAR 0 12
34358: IN
34359: NOT
34360: IFFALSE 34386
// control := _control [ rand ( 1 , _control ) ] ;
34362: LD_ADDR_VAR 0 4
34366: PUSH
34367: LD_VAR 0 12
34371: PUSH
34372: LD_INT 1
34374: PPUSH
34375: LD_VAR 0 12
34379: PPUSH
34380: CALL_OW 12
34384: ARRAY
34385: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34386: LD_VAR 0 2
34390: PPUSH
34391: LD_VAR 0 5
34395: PPUSH
34396: CALL 34754 0 2
34400: NOT
34401: IFFALSE 34460
// repeat weapon := _weapon [ 1 ] ;
34403: LD_ADDR_VAR 0 5
34407: PUSH
34408: LD_VAR 0 10
34412: PUSH
34413: LD_INT 1
34415: ARRAY
34416: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34417: LD_ADDR_VAR 0 10
34421: PUSH
34422: LD_VAR 0 10
34426: PPUSH
34427: LD_INT 1
34429: PPUSH
34430: CALL_OW 3
34434: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34435: LD_VAR 0 2
34439: PPUSH
34440: LD_VAR 0 5
34444: PPUSH
34445: CALL 34754 0 2
34449: PUSH
34450: LD_VAR 0 10
34454: PUSH
34455: EMPTY
34456: EQUAL
34457: OR
34458: IFFALSE 34403
// result := [ ] ;
34460: LD_ADDR_VAR 0 6
34464: PUSH
34465: EMPTY
34466: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34467: LD_VAR 0 1
34471: PPUSH
34472: LD_VAR 0 2
34476: PPUSH
34477: LD_VAR 0 3
34481: PPUSH
34482: LD_VAR 0 4
34486: PPUSH
34487: LD_VAR 0 5
34491: PPUSH
34492: CALL_OW 448
34496: IFFALSE 34529
// result := [ chassis , engine , control , weapon ] ;
34498: LD_ADDR_VAR 0 6
34502: PUSH
34503: LD_VAR 0 2
34507: PUSH
34508: LD_VAR 0 3
34512: PUSH
34513: LD_VAR 0 4
34517: PUSH
34518: LD_VAR 0 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: ST_TO_ADDR
// end ;
34529: LD_VAR 0 6
34533: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34534: LD_INT 0
34536: PPUSH
// if not chassis or not engine then
34537: LD_VAR 0 1
34541: NOT
34542: PUSH
34543: LD_VAR 0 2
34547: NOT
34548: OR
34549: IFFALSE 34553
// exit ;
34551: GO 34749
// case engine of engine_solar :
34553: LD_VAR 0 2
34557: PUSH
34558: LD_INT 2
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34604
34566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_INT 11
34574: PUSH
34575: LD_INT 12
34577: PUSH
34578: LD_INT 13
34580: PUSH
34581: LD_INT 14
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
34602: GO 34733
34604: LD_INT 1
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34674
34612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_INT 11
34620: PUSH
34621: LD_INT 12
34623: PUSH
34624: LD_INT 13
34626: PUSH
34627: LD_INT 14
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 3
34638: PUSH
34639: LD_INT 4
34641: PUSH
34642: LD_INT 5
34644: PUSH
34645: LD_INT 21
34647: PUSH
34648: LD_INT 23
34650: PUSH
34651: LD_INT 22
34653: PUSH
34654: LD_INT 24
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
34672: GO 34733
34674: LD_INT 3
34676: DOUBLE
34677: EQUAL
34678: IFTRUE 34682
34680: GO 34732
34682: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34683: LD_ADDR_VAR 0 3
34687: PUSH
34688: LD_INT 13
34690: PUSH
34691: LD_INT 14
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: LD_INT 4
34702: PUSH
34703: LD_INT 5
34705: PUSH
34706: LD_INT 21
34708: PUSH
34709: LD_INT 22
34711: PUSH
34712: LD_INT 23
34714: PUSH
34715: LD_INT 24
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
34730: GO 34733
34732: POP
// result := ( chassis in result ) ;
34733: LD_ADDR_VAR 0 3
34737: PUSH
34738: LD_VAR 0 1
34742: PUSH
34743: LD_VAR 0 3
34747: IN
34748: ST_TO_ADDR
// end ;
34749: LD_VAR 0 3
34753: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34754: LD_INT 0
34756: PPUSH
// if not chassis or not weapon then
34757: LD_VAR 0 1
34761: NOT
34762: PUSH
34763: LD_VAR 0 2
34767: NOT
34768: OR
34769: IFFALSE 34773
// exit ;
34771: GO 35833
// case weapon of us_machine_gun :
34773: LD_VAR 0 2
34777: PUSH
34778: LD_INT 2
34780: DOUBLE
34781: EQUAL
34782: IFTRUE 34786
34784: GO 34816
34786: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34787: LD_ADDR_VAR 0 3
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: LD_INT 4
34803: PUSH
34804: LD_INT 5
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35817
34816: LD_INT 3
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34854
34824: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 5
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: ST_TO_ADDR
34852: GO 35817
34854: LD_INT 11
34856: DOUBLE
34857: EQUAL
34858: IFTRUE 34862
34860: GO 34892
34862: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34863: LD_ADDR_VAR 0 3
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: LD_INT 3
34876: PUSH
34877: LD_INT 4
34879: PUSH
34880: LD_INT 5
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
34890: GO 35817
34892: LD_INT 4
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 34926
34900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34901: LD_ADDR_VAR 0 3
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: LD_INT 3
34911: PUSH
34912: LD_INT 4
34914: PUSH
34915: LD_INT 5
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: ST_TO_ADDR
34924: GO 35817
34926: LD_INT 5
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34960
34934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34935: LD_ADDR_VAR 0 3
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 4
34948: PUSH
34949: LD_INT 5
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 35817
34960: LD_INT 9
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34994
34968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 5
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
34992: GO 35817
34994: LD_INT 7
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 35028
35002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: LD_INT 4
35016: PUSH
35017: LD_INT 5
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
35026: GO 35817
35028: LD_INT 12
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35062
35036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: LD_INT 4
35050: PUSH
35051: LD_INT 5
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 35817
35062: LD_INT 13
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35096
35070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: LD_INT 4
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
35094: GO 35817
35096: LD_INT 14
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35122
35104: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_INT 4
35112: PUSH
35113: LD_INT 5
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: ST_TO_ADDR
35120: GO 35817
35122: LD_INT 6
35124: DOUBLE
35125: EQUAL
35126: IFTRUE 35130
35128: GO 35148
35130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35131: LD_ADDR_VAR 0 3
35135: PUSH
35136: LD_INT 4
35138: PUSH
35139: LD_INT 5
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: ST_TO_ADDR
35146: GO 35817
35148: LD_INT 10
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35174
35156: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35157: LD_ADDR_VAR 0 3
35161: PUSH
35162: LD_INT 4
35164: PUSH
35165: LD_INT 5
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: ST_TO_ADDR
35172: GO 35817
35174: LD_INT 22
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35208
35182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 11
35190: PUSH
35191: LD_INT 12
35193: PUSH
35194: LD_INT 13
35196: PUSH
35197: LD_INT 14
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35817
35208: LD_INT 23
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35242
35216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 11
35224: PUSH
35225: LD_INT 12
35227: PUSH
35228: LD_INT 13
35230: PUSH
35231: LD_INT 14
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
35240: GO 35817
35242: LD_INT 24
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35276
35250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 11
35258: PUSH
35259: LD_INT 12
35261: PUSH
35262: LD_INT 13
35264: PUSH
35265: LD_INT 14
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: ST_TO_ADDR
35274: GO 35817
35276: LD_INT 30
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35284
35282: GO 35310
35284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35285: LD_ADDR_VAR 0 3
35289: PUSH
35290: LD_INT 11
35292: PUSH
35293: LD_INT 12
35295: PUSH
35296: LD_INT 13
35298: PUSH
35299: LD_INT 14
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
35308: GO 35817
35310: LD_INT 25
35312: DOUBLE
35313: EQUAL
35314: IFTRUE 35318
35316: GO 35336
35318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35319: LD_ADDR_VAR 0 3
35323: PUSH
35324: LD_INT 13
35326: PUSH
35327: LD_INT 14
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: ST_TO_ADDR
35334: GO 35817
35336: LD_INT 27
35338: DOUBLE
35339: EQUAL
35340: IFTRUE 35344
35342: GO 35362
35344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35345: LD_ADDR_VAR 0 3
35349: PUSH
35350: LD_INT 13
35352: PUSH
35353: LD_INT 14
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: ST_TO_ADDR
35360: GO 35817
35362: LD_INT 92
35364: DOUBLE
35365: EQUAL
35366: IFTRUE 35370
35368: GO 35396
35370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_INT 11
35378: PUSH
35379: LD_INT 12
35381: PUSH
35382: LD_INT 13
35384: PUSH
35385: LD_INT 14
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: ST_TO_ADDR
35394: GO 35817
35396: LD_INT 28
35398: DOUBLE
35399: EQUAL
35400: IFTRUE 35404
35402: GO 35422
35404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35405: LD_ADDR_VAR 0 3
35409: PUSH
35410: LD_INT 13
35412: PUSH
35413: LD_INT 14
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: ST_TO_ADDR
35420: GO 35817
35422: LD_INT 29
35424: DOUBLE
35425: EQUAL
35426: IFTRUE 35430
35428: GO 35448
35430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35431: LD_ADDR_VAR 0 3
35435: PUSH
35436: LD_INT 13
35438: PUSH
35439: LD_INT 14
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: ST_TO_ADDR
35446: GO 35817
35448: LD_INT 31
35450: DOUBLE
35451: EQUAL
35452: IFTRUE 35456
35454: GO 35474
35456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: LD_INT 13
35464: PUSH
35465: LD_INT 14
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: ST_TO_ADDR
35472: GO 35817
35474: LD_INT 26
35476: DOUBLE
35477: EQUAL
35478: IFTRUE 35482
35480: GO 35500
35482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35483: LD_ADDR_VAR 0 3
35487: PUSH
35488: LD_INT 13
35490: PUSH
35491: LD_INT 14
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: ST_TO_ADDR
35498: GO 35817
35500: LD_INT 42
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35534
35508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35509: LD_ADDR_VAR 0 3
35513: PUSH
35514: LD_INT 21
35516: PUSH
35517: LD_INT 22
35519: PUSH
35520: LD_INT 23
35522: PUSH
35523: LD_INT 24
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
35532: GO 35817
35534: LD_INT 43
35536: DOUBLE
35537: EQUAL
35538: IFTRUE 35542
35540: GO 35568
35542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35543: LD_ADDR_VAR 0 3
35547: PUSH
35548: LD_INT 21
35550: PUSH
35551: LD_INT 22
35553: PUSH
35554: LD_INT 23
35556: PUSH
35557: LD_INT 24
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: ST_TO_ADDR
35566: GO 35817
35568: LD_INT 44
35570: DOUBLE
35571: EQUAL
35572: IFTRUE 35576
35574: GO 35602
35576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_INT 21
35584: PUSH
35585: LD_INT 22
35587: PUSH
35588: LD_INT 23
35590: PUSH
35591: LD_INT 24
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: ST_TO_ADDR
35600: GO 35817
35602: LD_INT 45
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 35636
35610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: LD_INT 21
35618: PUSH
35619: LD_INT 22
35621: PUSH
35622: LD_INT 23
35624: PUSH
35625: LD_INT 24
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
35634: GO 35817
35636: LD_INT 49
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35644
35642: GO 35670
35644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35645: LD_ADDR_VAR 0 3
35649: PUSH
35650: LD_INT 21
35652: PUSH
35653: LD_INT 22
35655: PUSH
35656: LD_INT 23
35658: PUSH
35659: LD_INT 24
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: ST_TO_ADDR
35668: GO 35817
35670: LD_INT 51
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35704
35678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_INT 21
35686: PUSH
35687: LD_INT 22
35689: PUSH
35690: LD_INT 23
35692: PUSH
35693: LD_INT 24
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: ST_TO_ADDR
35702: GO 35817
35704: LD_INT 52
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35712
35710: GO 35738
35712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_INT 21
35720: PUSH
35721: LD_INT 22
35723: PUSH
35724: LD_INT 23
35726: PUSH
35727: LD_INT 24
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: ST_TO_ADDR
35736: GO 35817
35738: LD_INT 53
35740: DOUBLE
35741: EQUAL
35742: IFTRUE 35746
35744: GO 35764
35746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35747: LD_ADDR_VAR 0 3
35751: PUSH
35752: LD_INT 23
35754: PUSH
35755: LD_INT 24
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: ST_TO_ADDR
35762: GO 35817
35764: LD_INT 46
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35772
35770: GO 35790
35772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35773: LD_ADDR_VAR 0 3
35777: PUSH
35778: LD_INT 23
35780: PUSH
35781: LD_INT 24
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: ST_TO_ADDR
35788: GO 35817
35790: LD_INT 47
35792: DOUBLE
35793: EQUAL
35794: IFTRUE 35798
35796: GO 35816
35798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35799: LD_ADDR_VAR 0 3
35803: PUSH
35804: LD_INT 23
35806: PUSH
35807: LD_INT 24
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: ST_TO_ADDR
35814: GO 35817
35816: POP
// result := ( chassis in result ) ;
35817: LD_ADDR_VAR 0 3
35821: PUSH
35822: LD_VAR 0 1
35826: PUSH
35827: LD_VAR 0 3
35831: IN
35832: ST_TO_ADDR
// end ;
35833: LD_VAR 0 3
35837: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35838: LD_INT 0
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
// result := array ;
35847: LD_ADDR_VAR 0 5
35851: PUSH
35852: LD_VAR 0 1
35856: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35857: LD_VAR 0 1
35861: NOT
35862: PUSH
35863: LD_VAR 0 2
35867: NOT
35868: OR
35869: PUSH
35870: LD_VAR 0 3
35874: NOT
35875: OR
35876: PUSH
35877: LD_VAR 0 2
35881: PUSH
35882: LD_VAR 0 1
35886: GREATER
35887: OR
35888: PUSH
35889: LD_VAR 0 3
35893: PUSH
35894: LD_VAR 0 1
35898: GREATER
35899: OR
35900: IFFALSE 35904
// exit ;
35902: GO 36200
// if direction then
35904: LD_VAR 0 4
35908: IFFALSE 35972
// begin d := 1 ;
35910: LD_ADDR_VAR 0 9
35914: PUSH
35915: LD_INT 1
35917: ST_TO_ADDR
// if i_from > i_to then
35918: LD_VAR 0 2
35922: PUSH
35923: LD_VAR 0 3
35927: GREATER
35928: IFFALSE 35954
// length := ( array - i_from ) + i_to else
35930: LD_ADDR_VAR 0 11
35934: PUSH
35935: LD_VAR 0 1
35939: PUSH
35940: LD_VAR 0 2
35944: MINUS
35945: PUSH
35946: LD_VAR 0 3
35950: PLUS
35951: ST_TO_ADDR
35952: GO 35970
// length := i_to - i_from ;
35954: LD_ADDR_VAR 0 11
35958: PUSH
35959: LD_VAR 0 3
35963: PUSH
35964: LD_VAR 0 2
35968: MINUS
35969: ST_TO_ADDR
// end else
35970: GO 36033
// begin d := - 1 ;
35972: LD_ADDR_VAR 0 9
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: ST_TO_ADDR
// if i_from > i_to then
35981: LD_VAR 0 2
35985: PUSH
35986: LD_VAR 0 3
35990: GREATER
35991: IFFALSE 36011
// length := i_from - i_to else
35993: LD_ADDR_VAR 0 11
35997: PUSH
35998: LD_VAR 0 2
36002: PUSH
36003: LD_VAR 0 3
36007: MINUS
36008: ST_TO_ADDR
36009: GO 36033
// length := ( array - i_to ) + i_from ;
36011: LD_ADDR_VAR 0 11
36015: PUSH
36016: LD_VAR 0 1
36020: PUSH
36021: LD_VAR 0 3
36025: MINUS
36026: PUSH
36027: LD_VAR 0 2
36031: PLUS
36032: ST_TO_ADDR
// end ; if not length then
36033: LD_VAR 0 11
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36200
// tmp := array ;
36042: LD_ADDR_VAR 0 10
36046: PUSH
36047: LD_VAR 0 1
36051: ST_TO_ADDR
// for i = 1 to length do
36052: LD_ADDR_VAR 0 6
36056: PUSH
36057: DOUBLE
36058: LD_INT 1
36060: DEC
36061: ST_TO_ADDR
36062: LD_VAR 0 11
36066: PUSH
36067: FOR_TO
36068: IFFALSE 36188
// begin for j = 1 to array do
36070: LD_ADDR_VAR 0 7
36074: PUSH
36075: DOUBLE
36076: LD_INT 1
36078: DEC
36079: ST_TO_ADDR
36080: LD_VAR 0 1
36084: PUSH
36085: FOR_TO
36086: IFFALSE 36174
// begin k := j + d ;
36088: LD_ADDR_VAR 0 8
36092: PUSH
36093: LD_VAR 0 7
36097: PUSH
36098: LD_VAR 0 9
36102: PLUS
36103: ST_TO_ADDR
// if k > array then
36104: LD_VAR 0 8
36108: PUSH
36109: LD_VAR 0 1
36113: GREATER
36114: IFFALSE 36124
// k := 1 ;
36116: LD_ADDR_VAR 0 8
36120: PUSH
36121: LD_INT 1
36123: ST_TO_ADDR
// if not k then
36124: LD_VAR 0 8
36128: NOT
36129: IFFALSE 36141
// k := array ;
36131: LD_ADDR_VAR 0 8
36135: PUSH
36136: LD_VAR 0 1
36140: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36141: LD_ADDR_VAR 0 10
36145: PUSH
36146: LD_VAR 0 10
36150: PPUSH
36151: LD_VAR 0 8
36155: PPUSH
36156: LD_VAR 0 1
36160: PUSH
36161: LD_VAR 0 7
36165: ARRAY
36166: PPUSH
36167: CALL_OW 1
36171: ST_TO_ADDR
// end ;
36172: GO 36085
36174: POP
36175: POP
// array := tmp ;
36176: LD_ADDR_VAR 0 1
36180: PUSH
36181: LD_VAR 0 10
36185: ST_TO_ADDR
// end ;
36186: GO 36067
36188: POP
36189: POP
// result := array ;
36190: LD_ADDR_VAR 0 5
36194: PUSH
36195: LD_VAR 0 1
36199: ST_TO_ADDR
// end ;
36200: LD_VAR 0 5
36204: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36205: LD_INT 0
36207: PPUSH
36208: PPUSH
// result := 0 ;
36209: LD_ADDR_VAR 0 3
36213: PUSH
36214: LD_INT 0
36216: ST_TO_ADDR
// if not array or not value in array then
36217: LD_VAR 0 1
36221: NOT
36222: PUSH
36223: LD_VAR 0 2
36227: PUSH
36228: LD_VAR 0 1
36232: IN
36233: NOT
36234: OR
36235: IFFALSE 36239
// exit ;
36237: GO 36293
// for i = 1 to array do
36239: LD_ADDR_VAR 0 4
36243: PUSH
36244: DOUBLE
36245: LD_INT 1
36247: DEC
36248: ST_TO_ADDR
36249: LD_VAR 0 1
36253: PUSH
36254: FOR_TO
36255: IFFALSE 36291
// if value = array [ i ] then
36257: LD_VAR 0 2
36261: PUSH
36262: LD_VAR 0 1
36266: PUSH
36267: LD_VAR 0 4
36271: ARRAY
36272: EQUAL
36273: IFFALSE 36289
// begin result := i ;
36275: LD_ADDR_VAR 0 3
36279: PUSH
36280: LD_VAR 0 4
36284: ST_TO_ADDR
// exit ;
36285: POP
36286: POP
36287: GO 36293
// end ;
36289: GO 36254
36291: POP
36292: POP
// end ;
36293: LD_VAR 0 3
36297: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36298: LD_INT 0
36300: PPUSH
// vc_chassis := chassis ;
36301: LD_ADDR_OWVAR 37
36305: PUSH
36306: LD_VAR 0 1
36310: ST_TO_ADDR
// vc_engine := engine ;
36311: LD_ADDR_OWVAR 39
36315: PUSH
36316: LD_VAR 0 2
36320: ST_TO_ADDR
// vc_control := control ;
36321: LD_ADDR_OWVAR 38
36325: PUSH
36326: LD_VAR 0 3
36330: ST_TO_ADDR
// vc_weapon := weapon ;
36331: LD_ADDR_OWVAR 40
36335: PUSH
36336: LD_VAR 0 4
36340: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36341: LD_ADDR_OWVAR 41
36345: PUSH
36346: LD_VAR 0 5
36350: ST_TO_ADDR
// end ;
36351: LD_VAR 0 6
36355: RET
// export function WantPlant ( unit ) ; var task ; begin
36356: LD_INT 0
36358: PPUSH
36359: PPUSH
// result := false ;
36360: LD_ADDR_VAR 0 2
36364: PUSH
36365: LD_INT 0
36367: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36368: LD_ADDR_VAR 0 3
36372: PUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 437
36382: ST_TO_ADDR
// if task then
36383: LD_VAR 0 3
36387: IFFALSE 36415
// if task [ 1 ] [ 1 ] = p then
36389: LD_VAR 0 3
36393: PUSH
36394: LD_INT 1
36396: ARRAY
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PUSH
36402: LD_STRING p
36404: EQUAL
36405: IFFALSE 36415
// result := true ;
36407: LD_ADDR_VAR 0 2
36411: PUSH
36412: LD_INT 1
36414: ST_TO_ADDR
// end ;
36415: LD_VAR 0 2
36419: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36420: LD_INT 0
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
// if pos < 1 then
36426: LD_VAR 0 2
36430: PUSH
36431: LD_INT 1
36433: LESS
36434: IFFALSE 36438
// exit ;
36436: GO 36741
// if pos = 1 then
36438: LD_VAR 0 2
36442: PUSH
36443: LD_INT 1
36445: EQUAL
36446: IFFALSE 36479
// result := Replace ( arr , pos [ 1 ] , value ) else
36448: LD_ADDR_VAR 0 4
36452: PUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: LD_VAR 0 2
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PPUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: CALL_OW 1
36476: ST_TO_ADDR
36477: GO 36741
// begin tmp := arr ;
36479: LD_ADDR_VAR 0 6
36483: PUSH
36484: LD_VAR 0 1
36488: ST_TO_ADDR
// s_arr := [ tmp ] ;
36489: LD_ADDR_VAR 0 7
36493: PUSH
36494: LD_VAR 0 6
36498: PUSH
36499: EMPTY
36500: LIST
36501: ST_TO_ADDR
// for i = 1 to pos - 1 do
36502: LD_ADDR_VAR 0 5
36506: PUSH
36507: DOUBLE
36508: LD_INT 1
36510: DEC
36511: ST_TO_ADDR
36512: LD_VAR 0 2
36516: PUSH
36517: LD_INT 1
36519: MINUS
36520: PUSH
36521: FOR_TO
36522: IFFALSE 36567
// begin tmp := tmp [ pos [ i ] ] ;
36524: LD_ADDR_VAR 0 6
36528: PUSH
36529: LD_VAR 0 6
36533: PUSH
36534: LD_VAR 0 2
36538: PUSH
36539: LD_VAR 0 5
36543: ARRAY
36544: ARRAY
36545: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36546: LD_ADDR_VAR 0 7
36550: PUSH
36551: LD_VAR 0 7
36555: PUSH
36556: LD_VAR 0 6
36560: PUSH
36561: EMPTY
36562: LIST
36563: ADD
36564: ST_TO_ADDR
// end ;
36565: GO 36521
36567: POP
36568: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36569: LD_ADDR_VAR 0 6
36573: PUSH
36574: LD_VAR 0 6
36578: PPUSH
36579: LD_VAR 0 2
36583: PUSH
36584: LD_VAR 0 2
36588: ARRAY
36589: PPUSH
36590: LD_VAR 0 3
36594: PPUSH
36595: CALL_OW 1
36599: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36600: LD_ADDR_VAR 0 7
36604: PUSH
36605: LD_VAR 0 7
36609: PPUSH
36610: LD_VAR 0 7
36614: PPUSH
36615: LD_VAR 0 6
36619: PPUSH
36620: CALL_OW 1
36624: ST_TO_ADDR
// for i = s_arr downto 2 do
36625: LD_ADDR_VAR 0 5
36629: PUSH
36630: DOUBLE
36631: LD_VAR 0 7
36635: INC
36636: ST_TO_ADDR
36637: LD_INT 2
36639: PUSH
36640: FOR_DOWNTO
36641: IFFALSE 36725
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36643: LD_ADDR_VAR 0 6
36647: PUSH
36648: LD_VAR 0 7
36652: PUSH
36653: LD_VAR 0 5
36657: PUSH
36658: LD_INT 1
36660: MINUS
36661: ARRAY
36662: PPUSH
36663: LD_VAR 0 2
36667: PUSH
36668: LD_VAR 0 5
36672: PUSH
36673: LD_INT 1
36675: MINUS
36676: ARRAY
36677: PPUSH
36678: LD_VAR 0 7
36682: PUSH
36683: LD_VAR 0 5
36687: ARRAY
36688: PPUSH
36689: CALL_OW 1
36693: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36694: LD_ADDR_VAR 0 7
36698: PUSH
36699: LD_VAR 0 7
36703: PPUSH
36704: LD_VAR 0 5
36708: PUSH
36709: LD_INT 1
36711: MINUS
36712: PPUSH
36713: LD_VAR 0 6
36717: PPUSH
36718: CALL_OW 1
36722: ST_TO_ADDR
// end ;
36723: GO 36640
36725: POP
36726: POP
// result := s_arr [ 1 ] ;
36727: LD_ADDR_VAR 0 4
36731: PUSH
36732: LD_VAR 0 7
36736: PUSH
36737: LD_INT 1
36739: ARRAY
36740: ST_TO_ADDR
// end ; end ;
36741: LD_VAR 0 4
36745: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36746: LD_INT 0
36748: PPUSH
36749: PPUSH
// if not list then
36750: LD_VAR 0 1
36754: NOT
36755: IFFALSE 36759
// exit ;
36757: GO 36850
// i := list [ pos1 ] ;
36759: LD_ADDR_VAR 0 5
36763: PUSH
36764: LD_VAR 0 1
36768: PUSH
36769: LD_VAR 0 2
36773: ARRAY
36774: ST_TO_ADDR
// if not i then
36775: LD_VAR 0 5
36779: NOT
36780: IFFALSE 36784
// exit ;
36782: GO 36850
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36784: LD_ADDR_VAR 0 1
36788: PUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: LD_VAR 0 2
36798: PPUSH
36799: LD_VAR 0 1
36803: PUSH
36804: LD_VAR 0 3
36808: ARRAY
36809: PPUSH
36810: CALL_OW 1
36814: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36815: LD_ADDR_VAR 0 1
36819: PUSH
36820: LD_VAR 0 1
36824: PPUSH
36825: LD_VAR 0 3
36829: PPUSH
36830: LD_VAR 0 5
36834: PPUSH
36835: CALL_OW 1
36839: ST_TO_ADDR
// result := list ;
36840: LD_ADDR_VAR 0 4
36844: PUSH
36845: LD_VAR 0 1
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 4
36854: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36855: LD_INT 0
36857: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36858: LD_ADDR_VAR 0 5
36862: PUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 250
36872: PPUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 251
36882: PPUSH
36883: LD_VAR 0 2
36887: PPUSH
36888: LD_VAR 0 3
36892: PPUSH
36893: LD_VAR 0 4
36897: PPUSH
36898: CALL 36908 0 5
36902: ST_TO_ADDR
// end ;
36903: LD_VAR 0 5
36907: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36908: LD_INT 0
36910: PPUSH
36911: PPUSH
36912: PPUSH
36913: PPUSH
// if not list then
36914: LD_VAR 0 3
36918: NOT
36919: IFFALSE 36923
// exit ;
36921: GO 37311
// result := [ ] ;
36923: LD_ADDR_VAR 0 6
36927: PUSH
36928: EMPTY
36929: ST_TO_ADDR
// for i in list do
36930: LD_ADDR_VAR 0 7
36934: PUSH
36935: LD_VAR 0 3
36939: PUSH
36940: FOR_IN
36941: IFFALSE 37143
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36943: LD_ADDR_VAR 0 9
36947: PUSH
36948: LD_VAR 0 7
36952: PPUSH
36953: LD_VAR 0 1
36957: PPUSH
36958: LD_VAR 0 2
36962: PPUSH
36963: CALL_OW 297
36967: ST_TO_ADDR
// if not result then
36968: LD_VAR 0 6
36972: NOT
36973: IFFALSE 36999
// result := [ [ i , tmp ] ] else
36975: LD_ADDR_VAR 0 6
36979: PUSH
36980: LD_VAR 0 7
36984: PUSH
36985: LD_VAR 0 9
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: EMPTY
36995: LIST
36996: ST_TO_ADDR
36997: GO 37141
// begin if result [ result ] [ 2 ] < tmp then
36999: LD_VAR 0 6
37003: PUSH
37004: LD_VAR 0 6
37008: ARRAY
37009: PUSH
37010: LD_INT 2
37012: ARRAY
37013: PUSH
37014: LD_VAR 0 9
37018: LESS
37019: IFFALSE 37061
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37021: LD_ADDR_VAR 0 6
37025: PUSH
37026: LD_VAR 0 6
37030: PPUSH
37031: LD_VAR 0 6
37035: PUSH
37036: LD_INT 1
37038: PLUS
37039: PPUSH
37040: LD_VAR 0 7
37044: PUSH
37045: LD_VAR 0 9
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PPUSH
37054: CALL_OW 2
37058: ST_TO_ADDR
37059: GO 37141
// for j = 1 to result do
37061: LD_ADDR_VAR 0 8
37065: PUSH
37066: DOUBLE
37067: LD_INT 1
37069: DEC
37070: ST_TO_ADDR
37071: LD_VAR 0 6
37075: PUSH
37076: FOR_TO
37077: IFFALSE 37139
// begin if tmp < result [ j ] [ 2 ] then
37079: LD_VAR 0 9
37083: PUSH
37084: LD_VAR 0 6
37088: PUSH
37089: LD_VAR 0 8
37093: ARRAY
37094: PUSH
37095: LD_INT 2
37097: ARRAY
37098: LESS
37099: IFFALSE 37137
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37101: LD_ADDR_VAR 0 6
37105: PUSH
37106: LD_VAR 0 6
37110: PPUSH
37111: LD_VAR 0 8
37115: PPUSH
37116: LD_VAR 0 7
37120: PUSH
37121: LD_VAR 0 9
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL_OW 2
37134: ST_TO_ADDR
// break ;
37135: GO 37139
// end ; end ;
37137: GO 37076
37139: POP
37140: POP
// end ; end ;
37141: GO 36940
37143: POP
37144: POP
// if result and not asc then
37145: LD_VAR 0 6
37149: PUSH
37150: LD_VAR 0 4
37154: NOT
37155: AND
37156: IFFALSE 37231
// begin tmp := result ;
37158: LD_ADDR_VAR 0 9
37162: PUSH
37163: LD_VAR 0 6
37167: ST_TO_ADDR
// for i = tmp downto 1 do
37168: LD_ADDR_VAR 0 7
37172: PUSH
37173: DOUBLE
37174: LD_VAR 0 9
37178: INC
37179: ST_TO_ADDR
37180: LD_INT 1
37182: PUSH
37183: FOR_DOWNTO
37184: IFFALSE 37229
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37186: LD_ADDR_VAR 0 6
37190: PUSH
37191: LD_VAR 0 6
37195: PPUSH
37196: LD_VAR 0 9
37200: PUSH
37201: LD_VAR 0 7
37205: MINUS
37206: PUSH
37207: LD_INT 1
37209: PLUS
37210: PPUSH
37211: LD_VAR 0 9
37215: PUSH
37216: LD_VAR 0 7
37220: ARRAY
37221: PPUSH
37222: CALL_OW 1
37226: ST_TO_ADDR
37227: GO 37183
37229: POP
37230: POP
// end ; tmp := [ ] ;
37231: LD_ADDR_VAR 0 9
37235: PUSH
37236: EMPTY
37237: ST_TO_ADDR
// if mode then
37238: LD_VAR 0 5
37242: IFFALSE 37311
// begin for i = 1 to result do
37244: LD_ADDR_VAR 0 7
37248: PUSH
37249: DOUBLE
37250: LD_INT 1
37252: DEC
37253: ST_TO_ADDR
37254: LD_VAR 0 6
37258: PUSH
37259: FOR_TO
37260: IFFALSE 37299
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_VAR 0 9
37271: PPUSH
37272: LD_VAR 0 7
37276: PPUSH
37277: LD_VAR 0 6
37281: PUSH
37282: LD_VAR 0 7
37286: ARRAY
37287: PUSH
37288: LD_INT 1
37290: ARRAY
37291: PPUSH
37292: CALL_OW 1
37296: ST_TO_ADDR
37297: GO 37259
37299: POP
37300: POP
// result := tmp ;
37301: LD_ADDR_VAR 0 6
37305: PUSH
37306: LD_VAR 0 9
37310: ST_TO_ADDR
// end ; end ;
37311: LD_VAR 0 6
37315: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37316: LD_INT 0
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37324: LD_ADDR_VAR 0 5
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: ST_TO_ADDR
// if not x or not y then
37346: LD_VAR 0 2
37350: NOT
37351: PUSH
37352: LD_VAR 0 3
37356: NOT
37357: OR
37358: IFFALSE 37362
// exit ;
37360: GO 39012
// if not range then
37362: LD_VAR 0 4
37366: NOT
37367: IFFALSE 37377
// range := 10 ;
37369: LD_ADDR_VAR 0 4
37373: PUSH
37374: LD_INT 10
37376: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37377: LD_ADDR_VAR 0 8
37381: PUSH
37382: LD_INT 81
37384: PUSH
37385: LD_VAR 0 1
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 92
37396: PUSH
37397: LD_VAR 0 2
37401: PUSH
37402: LD_VAR 0 3
37406: PUSH
37407: LD_VAR 0 4
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 21
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: PPUSH
37440: CALL_OW 69
37444: ST_TO_ADDR
// if not tmp then
37445: LD_VAR 0 8
37449: NOT
37450: IFFALSE 37454
// exit ;
37452: GO 39012
// for i in tmp do
37454: LD_ADDR_VAR 0 6
37458: PUSH
37459: LD_VAR 0 8
37463: PUSH
37464: FOR_IN
37465: IFFALSE 38987
// begin points := [ 0 , 0 , 0 ] ;
37467: LD_ADDR_VAR 0 9
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// bpoints := 1 ;
37486: LD_ADDR_VAR 0 10
37490: PUSH
37491: LD_INT 1
37493: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37494: LD_VAR 0 6
37498: PPUSH
37499: CALL_OW 247
37503: PUSH
37504: LD_INT 1
37506: DOUBLE
37507: EQUAL
37508: IFTRUE 37512
37510: GO 38090
37512: POP
// begin if GetClass ( i ) = 1 then
37513: LD_VAR 0 6
37517: PPUSH
37518: CALL_OW 257
37522: PUSH
37523: LD_INT 1
37525: EQUAL
37526: IFFALSE 37547
// points := [ 10 , 5 , 3 ] ;
37528: LD_ADDR_VAR 0 9
37532: PUSH
37533: LD_INT 10
37535: PUSH
37536: LD_INT 5
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37547: LD_VAR 0 6
37551: PPUSH
37552: CALL_OW 257
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: LD_INT 4
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: IN
37571: IFFALSE 37592
// points := [ 3 , 2 , 1 ] ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37592: LD_VAR 0 6
37596: PPUSH
37597: CALL_OW 257
37601: PUSH
37602: LD_INT 5
37604: EQUAL
37605: IFFALSE 37626
// points := [ 130 , 5 , 2 ] ;
37607: LD_ADDR_VAR 0 9
37611: PUSH
37612: LD_INT 130
37614: PUSH
37615: LD_INT 5
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37626: LD_VAR 0 6
37630: PPUSH
37631: CALL_OW 257
37635: PUSH
37636: LD_INT 8
37638: EQUAL
37639: IFFALSE 37660
// points := [ 35 , 35 , 30 ] ;
37641: LD_ADDR_VAR 0 9
37645: PUSH
37646: LD_INT 35
37648: PUSH
37649: LD_INT 35
37651: PUSH
37652: LD_INT 30
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37660: LD_VAR 0 6
37664: PPUSH
37665: CALL_OW 257
37669: PUSH
37670: LD_INT 9
37672: EQUAL
37673: IFFALSE 37694
// points := [ 20 , 55 , 40 ] ;
37675: LD_ADDR_VAR 0 9
37679: PUSH
37680: LD_INT 20
37682: PUSH
37683: LD_INT 55
37685: PUSH
37686: LD_INT 40
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37694: LD_VAR 0 6
37698: PPUSH
37699: CALL_OW 257
37703: PUSH
37704: LD_INT 12
37706: PUSH
37707: LD_INT 16
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: IN
37714: IFFALSE 37735
// points := [ 5 , 3 , 2 ] ;
37716: LD_ADDR_VAR 0 9
37720: PUSH
37721: LD_INT 5
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: LIST
37734: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37735: LD_VAR 0 6
37739: PPUSH
37740: CALL_OW 257
37744: PUSH
37745: LD_INT 17
37747: EQUAL
37748: IFFALSE 37769
// points := [ 100 , 50 , 75 ] ;
37750: LD_ADDR_VAR 0 9
37754: PUSH
37755: LD_INT 100
37757: PUSH
37758: LD_INT 50
37760: PUSH
37761: LD_INT 75
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37769: LD_VAR 0 6
37773: PPUSH
37774: CALL_OW 257
37778: PUSH
37779: LD_INT 15
37781: EQUAL
37782: IFFALSE 37803
// points := [ 10 , 5 , 3 ] ;
37784: LD_ADDR_VAR 0 9
37788: PUSH
37789: LD_INT 10
37791: PUSH
37792: LD_INT 5
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37803: LD_VAR 0 6
37807: PPUSH
37808: CALL_OW 257
37812: PUSH
37813: LD_INT 14
37815: EQUAL
37816: IFFALSE 37837
// points := [ 10 , 0 , 0 ] ;
37818: LD_ADDR_VAR 0 9
37822: PUSH
37823: LD_INT 10
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37837: LD_VAR 0 6
37841: PPUSH
37842: CALL_OW 257
37846: PUSH
37847: LD_INT 11
37849: EQUAL
37850: IFFALSE 37871
// points := [ 30 , 10 , 5 ] ;
37852: LD_ADDR_VAR 0 9
37856: PUSH
37857: LD_INT 30
37859: PUSH
37860: LD_INT 10
37862: PUSH
37863: LD_INT 5
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37871: LD_VAR 0 1
37875: PPUSH
37876: LD_INT 5
37878: PPUSH
37879: CALL_OW 321
37883: PUSH
37884: LD_INT 2
37886: EQUAL
37887: IFFALSE 37904
// bpoints := bpoints * 1.8 ;
37889: LD_ADDR_VAR 0 10
37893: PUSH
37894: LD_VAR 0 10
37898: PUSH
37899: LD_REAL  1.80000000000000E+0000
37902: MUL
37903: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37904: LD_VAR 0 6
37908: PPUSH
37909: CALL_OW 257
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: LD_INT 2
37919: PUSH
37920: LD_INT 3
37922: PUSH
37923: LD_INT 4
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: IN
37932: PUSH
37933: LD_VAR 0 1
37937: PPUSH
37938: LD_INT 51
37940: PPUSH
37941: CALL_OW 321
37945: PUSH
37946: LD_INT 2
37948: EQUAL
37949: AND
37950: IFFALSE 37967
// bpoints := bpoints * 1.2 ;
37952: LD_ADDR_VAR 0 10
37956: PUSH
37957: LD_VAR 0 10
37961: PUSH
37962: LD_REAL  1.20000000000000E+0000
37965: MUL
37966: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37967: LD_VAR 0 6
37971: PPUSH
37972: CALL_OW 257
37976: PUSH
37977: LD_INT 5
37979: PUSH
37980: LD_INT 7
37982: PUSH
37983: LD_INT 9
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: IN
37991: PUSH
37992: LD_VAR 0 1
37996: PPUSH
37997: LD_INT 52
37999: PPUSH
38000: CALL_OW 321
38004: PUSH
38005: LD_INT 2
38007: EQUAL
38008: AND
38009: IFFALSE 38026
// bpoints := bpoints * 1.5 ;
38011: LD_ADDR_VAR 0 10
38015: PUSH
38016: LD_VAR 0 10
38020: PUSH
38021: LD_REAL  1.50000000000000E+0000
38024: MUL
38025: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38026: LD_VAR 0 1
38030: PPUSH
38031: LD_INT 66
38033: PPUSH
38034: CALL_OW 321
38038: PUSH
38039: LD_INT 2
38041: EQUAL
38042: IFFALSE 38059
// bpoints := bpoints * 1.1 ;
38044: LD_ADDR_VAR 0 10
38048: PUSH
38049: LD_VAR 0 10
38053: PUSH
38054: LD_REAL  1.10000000000000E+0000
38057: MUL
38058: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38059: LD_ADDR_VAR 0 10
38063: PUSH
38064: LD_VAR 0 10
38068: PUSH
38069: LD_VAR 0 6
38073: PPUSH
38074: LD_INT 1
38076: PPUSH
38077: CALL_OW 259
38081: PUSH
38082: LD_REAL  1.15000000000000E+0000
38085: MUL
38086: MUL
38087: ST_TO_ADDR
// end ; unit_vehicle :
38088: GO 38916
38090: LD_INT 2
38092: DOUBLE
38093: EQUAL
38094: IFTRUE 38098
38096: GO 38904
38098: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38099: LD_VAR 0 6
38103: PPUSH
38104: CALL_OW 264
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: LD_INT 42
38114: PUSH
38115: LD_INT 24
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: IN
38123: IFFALSE 38144
// points := [ 25 , 5 , 3 ] ;
38125: LD_ADDR_VAR 0 9
38129: PUSH
38130: LD_INT 25
38132: PUSH
38133: LD_INT 5
38135: PUSH
38136: LD_INT 3
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38144: LD_VAR 0 6
38148: PPUSH
38149: CALL_OW 264
38153: PUSH
38154: LD_INT 4
38156: PUSH
38157: LD_INT 43
38159: PUSH
38160: LD_INT 25
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: IN
38168: IFFALSE 38189
// points := [ 40 , 15 , 5 ] ;
38170: LD_ADDR_VAR 0 9
38174: PUSH
38175: LD_INT 40
38177: PUSH
38178: LD_INT 15
38180: PUSH
38181: LD_INT 5
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38189: LD_VAR 0 6
38193: PPUSH
38194: CALL_OW 264
38198: PUSH
38199: LD_INT 3
38201: PUSH
38202: LD_INT 23
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: IN
38209: IFFALSE 38230
// points := [ 7 , 25 , 8 ] ;
38211: LD_ADDR_VAR 0 9
38215: PUSH
38216: LD_INT 7
38218: PUSH
38219: LD_INT 25
38221: PUSH
38222: LD_INT 8
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38230: LD_VAR 0 6
38234: PPUSH
38235: CALL_OW 264
38239: PUSH
38240: LD_INT 5
38242: PUSH
38243: LD_INT 27
38245: PUSH
38246: LD_INT 44
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: IN
38254: IFFALSE 38275
// points := [ 14 , 50 , 16 ] ;
38256: LD_ADDR_VAR 0 9
38260: PUSH
38261: LD_INT 14
38263: PUSH
38264: LD_INT 50
38266: PUSH
38267: LD_INT 16
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38275: LD_VAR 0 6
38279: PPUSH
38280: CALL_OW 264
38284: PUSH
38285: LD_INT 6
38287: PUSH
38288: LD_INT 46
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: IN
38295: IFFALSE 38316
// points := [ 32 , 120 , 70 ] ;
38297: LD_ADDR_VAR 0 9
38301: PUSH
38302: LD_INT 32
38304: PUSH
38305: LD_INT 120
38307: PUSH
38308: LD_INT 70
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: LIST
38315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38316: LD_VAR 0 6
38320: PPUSH
38321: CALL_OW 264
38325: PUSH
38326: LD_INT 7
38328: PUSH
38329: LD_INT 28
38331: PUSH
38332: LD_INT 45
38334: PUSH
38335: LD_INT 92
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: IN
38344: IFFALSE 38365
// points := [ 35 , 20 , 45 ] ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_INT 35
38353: PUSH
38354: LD_INT 20
38356: PUSH
38357: LD_INT 45
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38365: LD_VAR 0 6
38369: PPUSH
38370: CALL_OW 264
38374: PUSH
38375: LD_INT 47
38377: PUSH
38378: EMPTY
38379: LIST
38380: IN
38381: IFFALSE 38402
// points := [ 67 , 45 , 75 ] ;
38383: LD_ADDR_VAR 0 9
38387: PUSH
38388: LD_INT 67
38390: PUSH
38391: LD_INT 45
38393: PUSH
38394: LD_INT 75
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38402: LD_VAR 0 6
38406: PPUSH
38407: CALL_OW 264
38411: PUSH
38412: LD_INT 26
38414: PUSH
38415: EMPTY
38416: LIST
38417: IN
38418: IFFALSE 38439
// points := [ 120 , 30 , 80 ] ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_INT 120
38427: PUSH
38428: LD_INT 30
38430: PUSH
38431: LD_INT 80
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38439: LD_VAR 0 6
38443: PPUSH
38444: CALL_OW 264
38448: PUSH
38449: LD_INT 22
38451: PUSH
38452: EMPTY
38453: LIST
38454: IN
38455: IFFALSE 38476
// points := [ 40 , 1 , 1 ] ;
38457: LD_ADDR_VAR 0 9
38461: PUSH
38462: LD_INT 40
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38476: LD_VAR 0 6
38480: PPUSH
38481: CALL_OW 264
38485: PUSH
38486: LD_INT 29
38488: PUSH
38489: EMPTY
38490: LIST
38491: IN
38492: IFFALSE 38513
// points := [ 70 , 200 , 400 ] ;
38494: LD_ADDR_VAR 0 9
38498: PUSH
38499: LD_INT 70
38501: PUSH
38502: LD_INT 200
38504: PUSH
38505: LD_INT 400
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38513: LD_VAR 0 6
38517: PPUSH
38518: CALL_OW 264
38522: PUSH
38523: LD_INT 14
38525: PUSH
38526: LD_INT 53
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: IN
38533: IFFALSE 38554
// points := [ 40 , 10 , 20 ] ;
38535: LD_ADDR_VAR 0 9
38539: PUSH
38540: LD_INT 40
38542: PUSH
38543: LD_INT 10
38545: PUSH
38546: LD_INT 20
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38554: LD_VAR 0 6
38558: PPUSH
38559: CALL_OW 264
38563: PUSH
38564: LD_INT 9
38566: PUSH
38567: EMPTY
38568: LIST
38569: IN
38570: IFFALSE 38591
// points := [ 5 , 70 , 20 ] ;
38572: LD_ADDR_VAR 0 9
38576: PUSH
38577: LD_INT 5
38579: PUSH
38580: LD_INT 70
38582: PUSH
38583: LD_INT 20
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38591: LD_VAR 0 6
38595: PPUSH
38596: CALL_OW 264
38600: PUSH
38601: LD_INT 10
38603: PUSH
38604: EMPTY
38605: LIST
38606: IN
38607: IFFALSE 38628
// points := [ 35 , 110 , 70 ] ;
38609: LD_ADDR_VAR 0 9
38613: PUSH
38614: LD_INT 35
38616: PUSH
38617: LD_INT 110
38619: PUSH
38620: LD_INT 70
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38628: LD_VAR 0 6
38632: PPUSH
38633: CALL_OW 265
38637: PUSH
38638: LD_INT 25
38640: EQUAL
38641: IFFALSE 38662
// points := [ 80 , 65 , 100 ] ;
38643: LD_ADDR_VAR 0 9
38647: PUSH
38648: LD_INT 80
38650: PUSH
38651: LD_INT 65
38653: PUSH
38654: LD_INT 100
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38662: LD_VAR 0 6
38666: PPUSH
38667: CALL_OW 263
38671: PUSH
38672: LD_INT 1
38674: EQUAL
38675: IFFALSE 38710
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38677: LD_ADDR_VAR 0 10
38681: PUSH
38682: LD_VAR 0 10
38686: PUSH
38687: LD_VAR 0 6
38691: PPUSH
38692: CALL_OW 311
38696: PPUSH
38697: LD_INT 3
38699: PPUSH
38700: CALL_OW 259
38704: PUSH
38705: LD_INT 4
38707: MUL
38708: MUL
38709: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38710: LD_VAR 0 6
38714: PPUSH
38715: CALL_OW 263
38719: PUSH
38720: LD_INT 2
38722: EQUAL
38723: IFFALSE 38774
// begin j := IsControledBy ( i ) ;
38725: LD_ADDR_VAR 0 7
38729: PUSH
38730: LD_VAR 0 6
38734: PPUSH
38735: CALL_OW 312
38739: ST_TO_ADDR
// if j then
38740: LD_VAR 0 7
38744: IFFALSE 38774
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38746: LD_ADDR_VAR 0 10
38750: PUSH
38751: LD_VAR 0 10
38755: PUSH
38756: LD_VAR 0 7
38760: PPUSH
38761: LD_INT 3
38763: PPUSH
38764: CALL_OW 259
38768: PUSH
38769: LD_INT 3
38771: MUL
38772: MUL
38773: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 264
38783: PUSH
38784: LD_INT 5
38786: PUSH
38787: LD_INT 6
38789: PUSH
38790: LD_INT 46
38792: PUSH
38793: LD_INT 44
38795: PUSH
38796: LD_INT 47
38798: PUSH
38799: LD_INT 45
38801: PUSH
38802: LD_INT 28
38804: PUSH
38805: LD_INT 7
38807: PUSH
38808: LD_INT 27
38810: PUSH
38811: LD_INT 29
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: IN
38826: PUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: LD_INT 52
38834: PPUSH
38835: CALL_OW 321
38839: PUSH
38840: LD_INT 2
38842: EQUAL
38843: AND
38844: IFFALSE 38861
// bpoints := bpoints * 1.2 ;
38846: LD_ADDR_VAR 0 10
38850: PUSH
38851: LD_VAR 0 10
38855: PUSH
38856: LD_REAL  1.20000000000000E+0000
38859: MUL
38860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38861: LD_VAR 0 6
38865: PPUSH
38866: CALL_OW 264
38870: PUSH
38871: LD_INT 6
38873: PUSH
38874: LD_INT 46
38876: PUSH
38877: LD_INT 47
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: IN
38885: IFFALSE 38902
// bpoints := bpoints * 1.2 ;
38887: LD_ADDR_VAR 0 10
38891: PUSH
38892: LD_VAR 0 10
38896: PUSH
38897: LD_REAL  1.20000000000000E+0000
38900: MUL
38901: ST_TO_ADDR
// end ; unit_building :
38902: GO 38916
38904: LD_INT 3
38906: DOUBLE
38907: EQUAL
38908: IFTRUE 38912
38910: GO 38915
38912: POP
// ; end ;
38913: GO 38916
38915: POP
// for j = 1 to 3 do
38916: LD_ADDR_VAR 0 7
38920: PUSH
38921: DOUBLE
38922: LD_INT 1
38924: DEC
38925: ST_TO_ADDR
38926: LD_INT 3
38928: PUSH
38929: FOR_TO
38930: IFFALSE 38983
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38932: LD_ADDR_VAR 0 5
38936: PUSH
38937: LD_VAR 0 5
38941: PPUSH
38942: LD_VAR 0 7
38946: PPUSH
38947: LD_VAR 0 5
38951: PUSH
38952: LD_VAR 0 7
38956: ARRAY
38957: PUSH
38958: LD_VAR 0 9
38962: PUSH
38963: LD_VAR 0 7
38967: ARRAY
38968: PUSH
38969: LD_VAR 0 10
38973: MUL
38974: PLUS
38975: PPUSH
38976: CALL_OW 1
38980: ST_TO_ADDR
38981: GO 38929
38983: POP
38984: POP
// end ;
38985: GO 37464
38987: POP
38988: POP
// result := Replace ( result , 4 , tmp ) ;
38989: LD_ADDR_VAR 0 5
38993: PUSH
38994: LD_VAR 0 5
38998: PPUSH
38999: LD_INT 4
39001: PPUSH
39002: LD_VAR 0 8
39006: PPUSH
39007: CALL_OW 1
39011: ST_TO_ADDR
// end ;
39012: LD_VAR 0 5
39016: RET
// export function DangerAtRange ( unit , range ) ; begin
39017: LD_INT 0
39019: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39020: LD_ADDR_VAR 0 3
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: CALL_OW 255
39034: PPUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL_OW 250
39044: PPUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 251
39054: PPUSH
39055: LD_VAR 0 2
39059: PPUSH
39060: CALL 37316 0 4
39064: ST_TO_ADDR
// end ;
39065: LD_VAR 0 3
39069: RET
// export function DangerInArea ( side , area ) ; begin
39070: LD_INT 0
39072: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39073: LD_ADDR_VAR 0 3
39077: PUSH
39078: LD_VAR 0 2
39082: PPUSH
39083: LD_INT 81
39085: PUSH
39086: LD_VAR 0 1
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PPUSH
39095: CALL_OW 70
39099: ST_TO_ADDR
// end ;
39100: LD_VAR 0 3
39104: RET
// export function IsExtension ( b ) ; begin
39105: LD_INT 0
39107: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39108: LD_ADDR_VAR 0 2
39112: PUSH
39113: LD_VAR 0 1
39117: PUSH
39118: LD_INT 23
39120: PUSH
39121: LD_INT 20
39123: PUSH
39124: LD_INT 22
39126: PUSH
39127: LD_INT 17
39129: PUSH
39130: LD_INT 24
39132: PUSH
39133: LD_INT 21
39135: PUSH
39136: LD_INT 19
39138: PUSH
39139: LD_INT 16
39141: PUSH
39142: LD_INT 25
39144: PUSH
39145: LD_INT 18
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: IN
39160: ST_TO_ADDR
// end ;
39161: LD_VAR 0 2
39165: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39166: LD_INT 0
39168: PPUSH
39169: PPUSH
39170: PPUSH
// result := [ ] ;
39171: LD_ADDR_VAR 0 4
39175: PUSH
39176: EMPTY
39177: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39178: LD_ADDR_VAR 0 5
39182: PUSH
39183: LD_VAR 0 2
39187: PPUSH
39188: LD_INT 21
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PPUSH
39198: CALL_OW 70
39202: ST_TO_ADDR
// if not tmp then
39203: LD_VAR 0 5
39207: NOT
39208: IFFALSE 39212
// exit ;
39210: GO 39276
// if checkLink then
39212: LD_VAR 0 3
39216: IFFALSE 39266
// begin for i in tmp do
39218: LD_ADDR_VAR 0 6
39222: PUSH
39223: LD_VAR 0 5
39227: PUSH
39228: FOR_IN
39229: IFFALSE 39264
// if GetBase ( i ) <> base then
39231: LD_VAR 0 6
39235: PPUSH
39236: CALL_OW 274
39240: PUSH
39241: LD_VAR 0 1
39245: NONEQUAL
39246: IFFALSE 39262
// ComLinkToBase ( base , i ) ;
39248: LD_VAR 0 1
39252: PPUSH
39253: LD_VAR 0 6
39257: PPUSH
39258: CALL_OW 169
39262: GO 39228
39264: POP
39265: POP
// end ; result := tmp ;
39266: LD_ADDR_VAR 0 4
39270: PUSH
39271: LD_VAR 0 5
39275: ST_TO_ADDR
// end ;
39276: LD_VAR 0 4
39280: RET
// export function ComComplete ( units , b ) ; var i ; begin
39281: LD_INT 0
39283: PPUSH
39284: PPUSH
// if not units then
39285: LD_VAR 0 1
39289: NOT
39290: IFFALSE 39294
// exit ;
39292: GO 39384
// for i in units do
39294: LD_ADDR_VAR 0 4
39298: PUSH
39299: LD_VAR 0 1
39303: PUSH
39304: FOR_IN
39305: IFFALSE 39382
// if BuildingStatus ( b ) = bs_build then
39307: LD_VAR 0 2
39311: PPUSH
39312: CALL_OW 461
39316: PUSH
39317: LD_INT 1
39319: EQUAL
39320: IFFALSE 39380
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39322: LD_VAR 0 4
39326: PPUSH
39327: LD_STRING h
39329: PUSH
39330: LD_VAR 0 2
39334: PPUSH
39335: CALL_OW 250
39339: PUSH
39340: LD_VAR 0 2
39344: PPUSH
39345: CALL_OW 251
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: PUSH
39373: EMPTY
39374: LIST
39375: PPUSH
39376: CALL_OW 446
39380: GO 39304
39382: POP
39383: POP
// end ;
39384: LD_VAR 0 3
39388: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39389: LD_INT 0
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39397: LD_VAR 0 1
39401: NOT
39402: PUSH
39403: LD_VAR 0 1
39407: PPUSH
39408: CALL_OW 263
39412: PUSH
39413: LD_INT 2
39415: NONEQUAL
39416: OR
39417: IFFALSE 39421
// exit ;
39419: GO 39737
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39421: LD_ADDR_VAR 0 6
39425: PUSH
39426: LD_INT 22
39428: PUSH
39429: LD_VAR 0 1
39433: PPUSH
39434: CALL_OW 255
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 30
39448: PUSH
39449: LD_INT 36
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 34
39458: PUSH
39459: LD_INT 31
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PPUSH
39475: CALL_OW 69
39479: ST_TO_ADDR
// if not tmp then
39480: LD_VAR 0 6
39484: NOT
39485: IFFALSE 39489
// exit ;
39487: GO 39737
// result := [ ] ;
39489: LD_ADDR_VAR 0 2
39493: PUSH
39494: EMPTY
39495: ST_TO_ADDR
// for i in tmp do
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_VAR 0 6
39505: PUSH
39506: FOR_IN
39507: IFFALSE 39578
// begin t := UnitsInside ( i ) ;
39509: LD_ADDR_VAR 0 4
39513: PUSH
39514: LD_VAR 0 3
39518: PPUSH
39519: CALL_OW 313
39523: ST_TO_ADDR
// if t then
39524: LD_VAR 0 4
39528: IFFALSE 39576
// for j in t do
39530: LD_ADDR_VAR 0 7
39534: PUSH
39535: LD_VAR 0 4
39539: PUSH
39540: FOR_IN
39541: IFFALSE 39574
// result := Replace ( result , result + 1 , j ) ;
39543: LD_ADDR_VAR 0 2
39547: PUSH
39548: LD_VAR 0 2
39552: PPUSH
39553: LD_VAR 0 2
39557: PUSH
39558: LD_INT 1
39560: PLUS
39561: PPUSH
39562: LD_VAR 0 7
39566: PPUSH
39567: CALL_OW 1
39571: ST_TO_ADDR
39572: GO 39540
39574: POP
39575: POP
// end ;
39576: GO 39506
39578: POP
39579: POP
// if not result then
39580: LD_VAR 0 2
39584: NOT
39585: IFFALSE 39589
// exit ;
39587: GO 39737
// mech := result [ 1 ] ;
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_VAR 0 2
39598: PUSH
39599: LD_INT 1
39601: ARRAY
39602: ST_TO_ADDR
// if result > 1 then
39603: LD_VAR 0 2
39607: PUSH
39608: LD_INT 1
39610: GREATER
39611: IFFALSE 39723
// begin for i = 2 to result do
39613: LD_ADDR_VAR 0 3
39617: PUSH
39618: DOUBLE
39619: LD_INT 2
39621: DEC
39622: ST_TO_ADDR
39623: LD_VAR 0 2
39627: PUSH
39628: FOR_TO
39629: IFFALSE 39721
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39631: LD_ADDR_VAR 0 4
39635: PUSH
39636: LD_VAR 0 2
39640: PUSH
39641: LD_VAR 0 3
39645: ARRAY
39646: PPUSH
39647: LD_INT 3
39649: PPUSH
39650: CALL_OW 259
39654: PUSH
39655: LD_VAR 0 2
39659: PUSH
39660: LD_VAR 0 3
39664: ARRAY
39665: PPUSH
39666: CALL_OW 432
39670: MINUS
39671: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39672: LD_VAR 0 4
39676: PUSH
39677: LD_VAR 0 5
39681: PPUSH
39682: LD_INT 3
39684: PPUSH
39685: CALL_OW 259
39689: PUSH
39690: LD_VAR 0 5
39694: PPUSH
39695: CALL_OW 432
39699: MINUS
39700: GREATEREQUAL
39701: IFFALSE 39719
// mech := result [ i ] ;
39703: LD_ADDR_VAR 0 5
39707: PUSH
39708: LD_VAR 0 2
39712: PUSH
39713: LD_VAR 0 3
39717: ARRAY
39718: ST_TO_ADDR
// end ;
39719: GO 39628
39721: POP
39722: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39723: LD_VAR 0 1
39727: PPUSH
39728: LD_VAR 0 5
39732: PPUSH
39733: CALL_OW 135
// end ;
39737: LD_VAR 0 2
39741: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39742: LD_INT 0
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
// result := [ ] ;
39757: LD_ADDR_VAR 0 7
39761: PUSH
39762: EMPTY
39763: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 266
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: IN
39784: NOT
39785: IFFALSE 39789
// exit ;
39787: GO 41423
// if name then
39789: LD_VAR 0 3
39793: IFFALSE 39809
// SetBName ( base_dep , name ) ;
39795: LD_VAR 0 1
39799: PPUSH
39800: LD_VAR 0 3
39804: PPUSH
39805: CALL_OW 500
// base := GetBase ( base_dep ) ;
39809: LD_ADDR_VAR 0 15
39813: PUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 274
39823: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39824: LD_ADDR_VAR 0 16
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 255
39838: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39839: LD_ADDR_VAR 0 17
39843: PUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: CALL_OW 248
39853: ST_TO_ADDR
// if sources then
39854: LD_VAR 0 5
39858: IFFALSE 39905
// for i = 1 to 3 do
39860: LD_ADDR_VAR 0 8
39864: PUSH
39865: DOUBLE
39866: LD_INT 1
39868: DEC
39869: ST_TO_ADDR
39870: LD_INT 3
39872: PUSH
39873: FOR_TO
39874: IFFALSE 39903
// AddResourceType ( base , i , sources [ i ] ) ;
39876: LD_VAR 0 15
39880: PPUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: LD_VAR 0 5
39890: PUSH
39891: LD_VAR 0 8
39895: ARRAY
39896: PPUSH
39897: CALL_OW 276
39901: GO 39873
39903: POP
39904: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39905: LD_ADDR_VAR 0 18
39909: PUSH
39910: LD_VAR 0 15
39914: PPUSH
39915: LD_VAR 0 2
39919: PPUSH
39920: LD_INT 1
39922: PPUSH
39923: CALL 39166 0 3
39927: ST_TO_ADDR
// InitHc ;
39928: CALL_OW 19
// InitUc ;
39932: CALL_OW 18
// uc_side := side ;
39936: LD_ADDR_OWVAR 20
39940: PUSH
39941: LD_VAR 0 16
39945: ST_TO_ADDR
// uc_nation := nation ;
39946: LD_ADDR_OWVAR 21
39950: PUSH
39951: LD_VAR 0 17
39955: ST_TO_ADDR
// if buildings then
39956: LD_VAR 0 18
39960: IFFALSE 41282
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39962: LD_ADDR_VAR 0 19
39966: PUSH
39967: LD_VAR 0 18
39971: PPUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 30
39977: PUSH
39978: LD_INT 29
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 30
39987: PUSH
39988: LD_INT 30
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: PPUSH
40000: CALL_OW 72
40004: ST_TO_ADDR
// if tmp then
40005: LD_VAR 0 19
40009: IFFALSE 40057
// for i in tmp do
40011: LD_ADDR_VAR 0 8
40015: PUSH
40016: LD_VAR 0 19
40020: PUSH
40021: FOR_IN
40022: IFFALSE 40055
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40024: LD_VAR 0 8
40028: PPUSH
40029: CALL_OW 250
40033: PPUSH
40034: LD_VAR 0 8
40038: PPUSH
40039: CALL_OW 251
40043: PPUSH
40044: LD_VAR 0 16
40048: PPUSH
40049: CALL_OW 441
40053: GO 40021
40055: POP
40056: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40057: LD_VAR 0 18
40061: PPUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 30
40067: PUSH
40068: LD_INT 32
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 30
40077: PUSH
40078: LD_INT 33
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: PPUSH
40090: CALL_OW 72
40094: IFFALSE 40182
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40096: LD_ADDR_VAR 0 8
40100: PUSH
40101: LD_VAR 0 18
40105: PPUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 30
40111: PUSH
40112: LD_INT 32
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 30
40121: PUSH
40122: LD_INT 33
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: LIST
40133: PPUSH
40134: CALL_OW 72
40138: PUSH
40139: FOR_IN
40140: IFFALSE 40180
// begin if not GetBWeapon ( i ) then
40142: LD_VAR 0 8
40146: PPUSH
40147: CALL_OW 269
40151: NOT
40152: IFFALSE 40178
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40154: LD_VAR 0 8
40158: PPUSH
40159: LD_VAR 0 8
40163: PPUSH
40164: LD_VAR 0 2
40168: PPUSH
40169: CALL 41428 0 2
40173: PPUSH
40174: CALL_OW 431
// end ;
40178: GO 40139
40180: POP
40181: POP
// end ; for i = 1 to personel do
40182: LD_ADDR_VAR 0 8
40186: PUSH
40187: DOUBLE
40188: LD_INT 1
40190: DEC
40191: ST_TO_ADDR
40192: LD_VAR 0 6
40196: PUSH
40197: FOR_TO
40198: IFFALSE 41262
// begin if i > 4 then
40200: LD_VAR 0 8
40204: PUSH
40205: LD_INT 4
40207: GREATER
40208: IFFALSE 40212
// break ;
40210: GO 41262
// case i of 1 :
40212: LD_VAR 0 8
40216: PUSH
40217: LD_INT 1
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40305
40225: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40226: LD_ADDR_VAR 0 12
40230: PUSH
40231: LD_VAR 0 18
40235: PPUSH
40236: LD_INT 22
40238: PUSH
40239: LD_VAR 0 16
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 58
40250: PUSH
40251: EMPTY
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 30
40259: PUSH
40260: LD_INT 32
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 30
40269: PUSH
40270: LD_INT 4
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 30
40279: PUSH
40280: LD_INT 5
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: PPUSH
40298: CALL_OW 72
40302: ST_TO_ADDR
40303: GO 40527
40305: LD_INT 2
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40375
40313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40314: LD_ADDR_VAR 0 12
40318: PUSH
40319: LD_VAR 0 18
40323: PPUSH
40324: LD_INT 22
40326: PUSH
40327: LD_VAR 0 16
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 30
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 30
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PPUSH
40368: CALL_OW 72
40372: ST_TO_ADDR
40373: GO 40527
40375: LD_INT 3
40377: DOUBLE
40378: EQUAL
40379: IFTRUE 40383
40381: GO 40445
40383: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40384: LD_ADDR_VAR 0 12
40388: PUSH
40389: LD_VAR 0 18
40393: PPUSH
40394: LD_INT 22
40396: PUSH
40397: LD_VAR 0 16
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 30
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 30
40421: PUSH
40422: LD_INT 3
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PPUSH
40438: CALL_OW 72
40442: ST_TO_ADDR
40443: GO 40527
40445: LD_INT 4
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40453
40451: GO 40526
40453: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40454: LD_ADDR_VAR 0 12
40458: PUSH
40459: LD_VAR 0 18
40463: PPUSH
40464: LD_INT 22
40466: PUSH
40467: LD_VAR 0 16
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 30
40481: PUSH
40482: LD_INT 6
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 30
40491: PUSH
40492: LD_INT 7
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 30
40501: PUSH
40502: LD_INT 8
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PPUSH
40519: CALL_OW 72
40523: ST_TO_ADDR
40524: GO 40527
40526: POP
// if i = 1 then
40527: LD_VAR 0 8
40531: PUSH
40532: LD_INT 1
40534: EQUAL
40535: IFFALSE 40646
// begin tmp := [ ] ;
40537: LD_ADDR_VAR 0 19
40541: PUSH
40542: EMPTY
40543: ST_TO_ADDR
// for j in f do
40544: LD_ADDR_VAR 0 9
40548: PUSH
40549: LD_VAR 0 12
40553: PUSH
40554: FOR_IN
40555: IFFALSE 40628
// if GetBType ( j ) = b_bunker then
40557: LD_VAR 0 9
40561: PPUSH
40562: CALL_OW 266
40566: PUSH
40567: LD_INT 32
40569: EQUAL
40570: IFFALSE 40597
// tmp := Insert ( tmp , 1 , j ) else
40572: LD_ADDR_VAR 0 19
40576: PUSH
40577: LD_VAR 0 19
40581: PPUSH
40582: LD_INT 1
40584: PPUSH
40585: LD_VAR 0 9
40589: PPUSH
40590: CALL_OW 2
40594: ST_TO_ADDR
40595: GO 40626
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40597: LD_ADDR_VAR 0 19
40601: PUSH
40602: LD_VAR 0 19
40606: PPUSH
40607: LD_VAR 0 19
40611: PUSH
40612: LD_INT 1
40614: PLUS
40615: PPUSH
40616: LD_VAR 0 9
40620: PPUSH
40621: CALL_OW 2
40625: ST_TO_ADDR
40626: GO 40554
40628: POP
40629: POP
// if tmp then
40630: LD_VAR 0 19
40634: IFFALSE 40646
// f := tmp ;
40636: LD_ADDR_VAR 0 12
40640: PUSH
40641: LD_VAR 0 19
40645: ST_TO_ADDR
// end ; x := personel [ i ] ;
40646: LD_ADDR_VAR 0 13
40650: PUSH
40651: LD_VAR 0 6
40655: PUSH
40656: LD_VAR 0 8
40660: ARRAY
40661: ST_TO_ADDR
// if x = - 1 then
40662: LD_VAR 0 13
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: EQUAL
40671: IFFALSE 40880
// begin for j in f do
40673: LD_ADDR_VAR 0 9
40677: PUSH
40678: LD_VAR 0 12
40682: PUSH
40683: FOR_IN
40684: IFFALSE 40876
// repeat InitHc ;
40686: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40690: LD_VAR 0 9
40694: PPUSH
40695: CALL_OW 266
40699: PUSH
40700: LD_INT 5
40702: EQUAL
40703: IFFALSE 40773
// begin if UnitsInside ( j ) < 3 then
40705: LD_VAR 0 9
40709: PPUSH
40710: CALL_OW 313
40714: PUSH
40715: LD_INT 3
40717: LESS
40718: IFFALSE 40754
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40720: LD_INT 0
40722: PPUSH
40723: LD_INT 5
40725: PUSH
40726: LD_INT 8
40728: PUSH
40729: LD_INT 9
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: PUSH
40737: LD_VAR 0 17
40741: ARRAY
40742: PPUSH
40743: LD_VAR 0 4
40747: PPUSH
40748: CALL_OW 380
40752: GO 40771
// PrepareHuman ( false , i , skill ) ;
40754: LD_INT 0
40756: PPUSH
40757: LD_VAR 0 8
40761: PPUSH
40762: LD_VAR 0 4
40766: PPUSH
40767: CALL_OW 380
// end else
40771: GO 40790
// PrepareHuman ( false , i , skill ) ;
40773: LD_INT 0
40775: PPUSH
40776: LD_VAR 0 8
40780: PPUSH
40781: LD_VAR 0 4
40785: PPUSH
40786: CALL_OW 380
// un := CreateHuman ;
40790: LD_ADDR_VAR 0 14
40794: PUSH
40795: CALL_OW 44
40799: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40800: LD_ADDR_VAR 0 7
40804: PUSH
40805: LD_VAR 0 7
40809: PPUSH
40810: LD_INT 1
40812: PPUSH
40813: LD_VAR 0 14
40817: PPUSH
40818: CALL_OW 2
40822: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40823: LD_VAR 0 14
40827: PPUSH
40828: LD_VAR 0 9
40832: PPUSH
40833: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40837: LD_VAR 0 9
40841: PPUSH
40842: CALL_OW 313
40846: PUSH
40847: LD_INT 6
40849: EQUAL
40850: PUSH
40851: LD_VAR 0 9
40855: PPUSH
40856: CALL_OW 266
40860: PUSH
40861: LD_INT 32
40863: PUSH
40864: LD_INT 31
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: IN
40871: OR
40872: IFFALSE 40686
40874: GO 40683
40876: POP
40877: POP
// end else
40878: GO 41260
// for j = 1 to x do
40880: LD_ADDR_VAR 0 9
40884: PUSH
40885: DOUBLE
40886: LD_INT 1
40888: DEC
40889: ST_TO_ADDR
40890: LD_VAR 0 13
40894: PUSH
40895: FOR_TO
40896: IFFALSE 41258
// begin InitHc ;
40898: CALL_OW 19
// if not f then
40902: LD_VAR 0 12
40906: NOT
40907: IFFALSE 40996
// begin PrepareHuman ( false , i , skill ) ;
40909: LD_INT 0
40911: PPUSH
40912: LD_VAR 0 8
40916: PPUSH
40917: LD_VAR 0 4
40921: PPUSH
40922: CALL_OW 380
// un := CreateHuman ;
40926: LD_ADDR_VAR 0 14
40930: PUSH
40931: CALL_OW 44
40935: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40936: LD_ADDR_VAR 0 7
40940: PUSH
40941: LD_VAR 0 7
40945: PPUSH
40946: LD_INT 1
40948: PPUSH
40949: LD_VAR 0 14
40953: PPUSH
40954: CALL_OW 2
40958: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40959: LD_VAR 0 14
40963: PPUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 250
40973: PPUSH
40974: LD_VAR 0 1
40978: PPUSH
40979: CALL_OW 251
40983: PPUSH
40984: LD_INT 10
40986: PPUSH
40987: LD_INT 0
40989: PPUSH
40990: CALL_OW 50
// continue ;
40994: GO 40895
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40996: LD_VAR 0 12
41000: PUSH
41001: LD_INT 1
41003: ARRAY
41004: PPUSH
41005: CALL_OW 313
41009: PUSH
41010: LD_VAR 0 12
41014: PUSH
41015: LD_INT 1
41017: ARRAY
41018: PPUSH
41019: CALL_OW 266
41023: PUSH
41024: LD_INT 32
41026: PUSH
41027: LD_INT 31
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: IN
41034: AND
41035: PUSH
41036: LD_VAR 0 12
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: PPUSH
41045: CALL_OW 313
41049: PUSH
41050: LD_INT 6
41052: EQUAL
41053: OR
41054: IFFALSE 41074
// f := Delete ( f , 1 ) ;
41056: LD_ADDR_VAR 0 12
41060: PUSH
41061: LD_VAR 0 12
41065: PPUSH
41066: LD_INT 1
41068: PPUSH
41069: CALL_OW 3
41073: ST_TO_ADDR
// if not f then
41074: LD_VAR 0 12
41078: NOT
41079: IFFALSE 41097
// begin x := x + 2 ;
41081: LD_ADDR_VAR 0 13
41085: PUSH
41086: LD_VAR 0 13
41090: PUSH
41091: LD_INT 2
41093: PLUS
41094: ST_TO_ADDR
// continue ;
41095: GO 40895
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41097: LD_VAR 0 12
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PPUSH
41106: CALL_OW 266
41110: PUSH
41111: LD_INT 5
41113: EQUAL
41114: IFFALSE 41188
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41116: LD_VAR 0 12
41120: PUSH
41121: LD_INT 1
41123: ARRAY
41124: PPUSH
41125: CALL_OW 313
41129: PUSH
41130: LD_INT 3
41132: LESS
41133: IFFALSE 41169
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41135: LD_INT 0
41137: PPUSH
41138: LD_INT 5
41140: PUSH
41141: LD_INT 8
41143: PUSH
41144: LD_INT 9
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: LIST
41151: PUSH
41152: LD_VAR 0 17
41156: ARRAY
41157: PPUSH
41158: LD_VAR 0 4
41162: PPUSH
41163: CALL_OW 380
41167: GO 41186
// PrepareHuman ( false , i , skill ) ;
41169: LD_INT 0
41171: PPUSH
41172: LD_VAR 0 8
41176: PPUSH
41177: LD_VAR 0 4
41181: PPUSH
41182: CALL_OW 380
// end else
41186: GO 41205
// PrepareHuman ( false , i , skill ) ;
41188: LD_INT 0
41190: PPUSH
41191: LD_VAR 0 8
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: CALL_OW 380
// un := CreateHuman ;
41205: LD_ADDR_VAR 0 14
41209: PUSH
41210: CALL_OW 44
41214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41215: LD_ADDR_VAR 0 7
41219: PUSH
41220: LD_VAR 0 7
41224: PPUSH
41225: LD_INT 1
41227: PPUSH
41228: LD_VAR 0 14
41232: PPUSH
41233: CALL_OW 2
41237: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41238: LD_VAR 0 14
41242: PPUSH
41243: LD_VAR 0 12
41247: PUSH
41248: LD_INT 1
41250: ARRAY
41251: PPUSH
41252: CALL_OW 52
// end ;
41256: GO 40895
41258: POP
41259: POP
// end ;
41260: GO 40197
41262: POP
41263: POP
// result := result ^ buildings ;
41264: LD_ADDR_VAR 0 7
41268: PUSH
41269: LD_VAR 0 7
41273: PUSH
41274: LD_VAR 0 18
41278: ADD
41279: ST_TO_ADDR
// end else
41280: GO 41423
// begin for i = 1 to personel do
41282: LD_ADDR_VAR 0 8
41286: PUSH
41287: DOUBLE
41288: LD_INT 1
41290: DEC
41291: ST_TO_ADDR
41292: LD_VAR 0 6
41296: PUSH
41297: FOR_TO
41298: IFFALSE 41421
// begin if i > 4 then
41300: LD_VAR 0 8
41304: PUSH
41305: LD_INT 4
41307: GREATER
41308: IFFALSE 41312
// break ;
41310: GO 41421
// x := personel [ i ] ;
41312: LD_ADDR_VAR 0 13
41316: PUSH
41317: LD_VAR 0 6
41321: PUSH
41322: LD_VAR 0 8
41326: ARRAY
41327: ST_TO_ADDR
// if x = - 1 then
41328: LD_VAR 0 13
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: EQUAL
41337: IFFALSE 41341
// continue ;
41339: GO 41297
// PrepareHuman ( false , i , skill ) ;
41341: LD_INT 0
41343: PPUSH
41344: LD_VAR 0 8
41348: PPUSH
41349: LD_VAR 0 4
41353: PPUSH
41354: CALL_OW 380
// un := CreateHuman ;
41358: LD_ADDR_VAR 0 14
41362: PUSH
41363: CALL_OW 44
41367: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41368: LD_VAR 0 14
41372: PPUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 250
41382: PPUSH
41383: LD_VAR 0 1
41387: PPUSH
41388: CALL_OW 251
41392: PPUSH
41393: LD_INT 10
41395: PPUSH
41396: LD_INT 0
41398: PPUSH
41399: CALL_OW 50
// result := result ^ un ;
41403: LD_ADDR_VAR 0 7
41407: PUSH
41408: LD_VAR 0 7
41412: PUSH
41413: LD_VAR 0 14
41417: ADD
41418: ST_TO_ADDR
// end ;
41419: GO 41297
41421: POP
41422: POP
// end ; end ;
41423: LD_VAR 0 7
41427: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41428: LD_INT 0
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
// result := false ;
41446: LD_ADDR_VAR 0 3
41450: PUSH
41451: LD_INT 0
41453: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41454: LD_VAR 0 1
41458: NOT
41459: PUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 266
41469: PUSH
41470: LD_INT 32
41472: PUSH
41473: LD_INT 33
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: IN
41480: NOT
41481: OR
41482: IFFALSE 41486
// exit ;
41484: GO 42595
// nat := GetNation ( tower ) ;
41486: LD_ADDR_VAR 0 12
41490: PUSH
41491: LD_VAR 0 1
41495: PPUSH
41496: CALL_OW 248
41500: ST_TO_ADDR
// side := GetSide ( tower ) ;
41501: LD_ADDR_VAR 0 16
41505: PUSH
41506: LD_VAR 0 1
41510: PPUSH
41511: CALL_OW 255
41515: ST_TO_ADDR
// x := GetX ( tower ) ;
41516: LD_ADDR_VAR 0 10
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: CALL_OW 250
41530: ST_TO_ADDR
// y := GetY ( tower ) ;
41531: LD_ADDR_VAR 0 11
41535: PUSH
41536: LD_VAR 0 1
41540: PPUSH
41541: CALL_OW 251
41545: ST_TO_ADDR
// if not x or not y then
41546: LD_VAR 0 10
41550: NOT
41551: PUSH
41552: LD_VAR 0 11
41556: NOT
41557: OR
41558: IFFALSE 41562
// exit ;
41560: GO 42595
// weapon := 0 ;
41562: LD_ADDR_VAR 0 18
41566: PUSH
41567: LD_INT 0
41569: ST_TO_ADDR
// fac_list := [ ] ;
41570: LD_ADDR_VAR 0 17
41574: PUSH
41575: EMPTY
41576: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41577: LD_ADDR_VAR 0 6
41581: PUSH
41582: LD_VAR 0 1
41586: PPUSH
41587: CALL_OW 274
41591: PPUSH
41592: LD_VAR 0 2
41596: PPUSH
41597: LD_INT 0
41599: PPUSH
41600: CALL 39166 0 3
41604: PPUSH
41605: LD_INT 30
41607: PUSH
41608: LD_INT 3
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PPUSH
41615: CALL_OW 72
41619: ST_TO_ADDR
// if not factories then
41620: LD_VAR 0 6
41624: NOT
41625: IFFALSE 41629
// exit ;
41627: GO 42595
// for i in factories do
41629: LD_ADDR_VAR 0 8
41633: PUSH
41634: LD_VAR 0 6
41638: PUSH
41639: FOR_IN
41640: IFFALSE 41665
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41642: LD_ADDR_VAR 0 17
41646: PUSH
41647: LD_VAR 0 17
41651: PUSH
41652: LD_VAR 0 8
41656: PPUSH
41657: CALL_OW 478
41661: UNION
41662: ST_TO_ADDR
41663: GO 41639
41665: POP
41666: POP
// if not fac_list then
41667: LD_VAR 0 17
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 42595
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41676: LD_ADDR_VAR 0 5
41680: PUSH
41681: LD_INT 4
41683: PUSH
41684: LD_INT 5
41686: PUSH
41687: LD_INT 9
41689: PUSH
41690: LD_INT 10
41692: PUSH
41693: LD_INT 6
41695: PUSH
41696: LD_INT 7
41698: PUSH
41699: LD_INT 11
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 27
41713: PUSH
41714: LD_INT 28
41716: PUSH
41717: LD_INT 26
41719: PUSH
41720: LD_INT 30
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 43
41731: PUSH
41732: LD_INT 44
41734: PUSH
41735: LD_INT 46
41737: PUSH
41738: LD_INT 45
41740: PUSH
41741: LD_INT 47
41743: PUSH
41744: LD_INT 49
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: PUSH
41760: LD_VAR 0 12
41764: ARRAY
41765: ST_TO_ADDR
// list := list isect fac_list ;
41766: LD_ADDR_VAR 0 5
41770: PUSH
41771: LD_VAR 0 5
41775: PUSH
41776: LD_VAR 0 17
41780: ISECT
41781: ST_TO_ADDR
// if not list then
41782: LD_VAR 0 5
41786: NOT
41787: IFFALSE 41791
// exit ;
41789: GO 42595
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41791: LD_VAR 0 12
41795: PUSH
41796: LD_INT 3
41798: EQUAL
41799: PUSH
41800: LD_INT 49
41802: PUSH
41803: LD_VAR 0 5
41807: IN
41808: AND
41809: PUSH
41810: LD_INT 31
41812: PPUSH
41813: LD_VAR 0 16
41817: PPUSH
41818: CALL_OW 321
41822: PUSH
41823: LD_INT 2
41825: EQUAL
41826: AND
41827: IFFALSE 41887
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41829: LD_INT 22
41831: PUSH
41832: LD_VAR 0 16
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 35
41843: PUSH
41844: LD_INT 49
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 91
41853: PUSH
41854: LD_VAR 0 1
41858: PUSH
41859: LD_INT 10
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: PPUSH
41872: CALL_OW 69
41876: NOT
41877: IFFALSE 41887
// weapon := ru_time_lapser ;
41879: LD_ADDR_VAR 0 18
41883: PUSH
41884: LD_INT 49
41886: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41887: LD_VAR 0 12
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: IN
41902: PUSH
41903: LD_INT 11
41905: PUSH
41906: LD_VAR 0 5
41910: IN
41911: PUSH
41912: LD_INT 30
41914: PUSH
41915: LD_VAR 0 5
41919: IN
41920: OR
41921: AND
41922: PUSH
41923: LD_INT 6
41925: PPUSH
41926: LD_VAR 0 16
41930: PPUSH
41931: CALL_OW 321
41935: PUSH
41936: LD_INT 2
41938: EQUAL
41939: AND
41940: IFFALSE 42105
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41942: LD_INT 22
41944: PUSH
41945: LD_VAR 0 16
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 35
41959: PUSH
41960: LD_INT 11
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 35
41969: PUSH
41970: LD_INT 30
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 91
41984: PUSH
41985: LD_VAR 0 1
41989: PUSH
41990: LD_INT 18
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: PPUSH
42003: CALL_OW 69
42007: NOT
42008: PUSH
42009: LD_INT 22
42011: PUSH
42012: LD_VAR 0 16
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 30
42026: PUSH
42027: LD_INT 32
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 30
42036: PUSH
42037: LD_INT 33
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 91
42051: PUSH
42052: LD_VAR 0 1
42056: PUSH
42057: LD_INT 12
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: LIST
42069: PUSH
42070: EMPTY
42071: LIST
42072: PPUSH
42073: CALL_OW 69
42077: PUSH
42078: LD_INT 2
42080: GREATER
42081: AND
42082: IFFALSE 42105
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42084: LD_ADDR_VAR 0 18
42088: PUSH
42089: LD_INT 11
42091: PUSH
42092: LD_INT 30
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_VAR 0 12
42103: ARRAY
42104: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42105: LD_VAR 0 18
42109: NOT
42110: PUSH
42111: LD_INT 40
42113: PPUSH
42114: LD_VAR 0 16
42118: PPUSH
42119: CALL_OW 321
42123: PUSH
42124: LD_INT 2
42126: EQUAL
42127: AND
42128: PUSH
42129: LD_INT 7
42131: PUSH
42132: LD_VAR 0 5
42136: IN
42137: PUSH
42138: LD_INT 28
42140: PUSH
42141: LD_VAR 0 5
42145: IN
42146: OR
42147: PUSH
42148: LD_INT 45
42150: PUSH
42151: LD_VAR 0 5
42155: IN
42156: OR
42157: AND
42158: IFFALSE 42412
// begin hex := GetHexInfo ( x , y ) ;
42160: LD_ADDR_VAR 0 4
42164: PUSH
42165: LD_VAR 0 10
42169: PPUSH
42170: LD_VAR 0 11
42174: PPUSH
42175: CALL_OW 546
42179: ST_TO_ADDR
// if hex [ 1 ] then
42180: LD_VAR 0 4
42184: PUSH
42185: LD_INT 1
42187: ARRAY
42188: IFFALSE 42192
// exit ;
42190: GO 42595
// height := hex [ 2 ] ;
42192: LD_ADDR_VAR 0 15
42196: PUSH
42197: LD_VAR 0 4
42201: PUSH
42202: LD_INT 2
42204: ARRAY
42205: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42206: LD_ADDR_VAR 0 14
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// for i in tmp do
42229: LD_ADDR_VAR 0 8
42233: PUSH
42234: LD_VAR 0 14
42238: PUSH
42239: FOR_IN
42240: IFFALSE 42410
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42242: LD_ADDR_VAR 0 9
42246: PUSH
42247: LD_VAR 0 10
42251: PPUSH
42252: LD_VAR 0 8
42256: PPUSH
42257: LD_INT 5
42259: PPUSH
42260: CALL_OW 272
42264: PUSH
42265: LD_VAR 0 11
42269: PPUSH
42270: LD_VAR 0 8
42274: PPUSH
42275: LD_INT 5
42277: PPUSH
42278: CALL_OW 273
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42287: LD_VAR 0 9
42291: PUSH
42292: LD_INT 1
42294: ARRAY
42295: PPUSH
42296: LD_VAR 0 9
42300: PUSH
42301: LD_INT 2
42303: ARRAY
42304: PPUSH
42305: CALL_OW 488
42309: IFFALSE 42408
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42311: LD_ADDR_VAR 0 4
42315: PUSH
42316: LD_VAR 0 9
42320: PUSH
42321: LD_INT 1
42323: ARRAY
42324: PPUSH
42325: LD_VAR 0 9
42329: PUSH
42330: LD_INT 2
42332: ARRAY
42333: PPUSH
42334: CALL_OW 546
42338: ST_TO_ADDR
// if hex [ 1 ] then
42339: LD_VAR 0 4
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: IFFALSE 42351
// continue ;
42349: GO 42239
// h := hex [ 2 ] ;
42351: LD_ADDR_VAR 0 13
42355: PUSH
42356: LD_VAR 0 4
42360: PUSH
42361: LD_INT 2
42363: ARRAY
42364: ST_TO_ADDR
// if h + 7 < height then
42365: LD_VAR 0 13
42369: PUSH
42370: LD_INT 7
42372: PLUS
42373: PUSH
42374: LD_VAR 0 15
42378: LESS
42379: IFFALSE 42408
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42381: LD_ADDR_VAR 0 18
42385: PUSH
42386: LD_INT 7
42388: PUSH
42389: LD_INT 28
42391: PUSH
42392: LD_INT 45
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: PUSH
42400: LD_VAR 0 12
42404: ARRAY
42405: ST_TO_ADDR
// break ;
42406: GO 42410
// end ; end ; end ;
42408: GO 42239
42410: POP
42411: POP
// end ; if not weapon then
42412: LD_VAR 0 18
42416: NOT
42417: IFFALSE 42477
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42419: LD_ADDR_VAR 0 5
42423: PUSH
42424: LD_VAR 0 5
42428: PUSH
42429: LD_INT 11
42431: PUSH
42432: LD_INT 30
42434: PUSH
42435: LD_INT 49
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: DIFF
42443: ST_TO_ADDR
// if not list then
42444: LD_VAR 0 5
42448: NOT
42449: IFFALSE 42453
// exit ;
42451: GO 42595
// weapon := list [ rand ( 1 , list ) ] ;
42453: LD_ADDR_VAR 0 18
42457: PUSH
42458: LD_VAR 0 5
42462: PUSH
42463: LD_INT 1
42465: PPUSH
42466: LD_VAR 0 5
42470: PPUSH
42471: CALL_OW 12
42475: ARRAY
42476: ST_TO_ADDR
// end ; if weapon then
42477: LD_VAR 0 18
42481: IFFALSE 42595
// begin tmp := CostOfWeapon ( weapon ) ;
42483: LD_ADDR_VAR 0 14
42487: PUSH
42488: LD_VAR 0 18
42492: PPUSH
42493: CALL_OW 451
42497: ST_TO_ADDR
// j := GetBase ( tower ) ;
42498: LD_ADDR_VAR 0 9
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 274
42512: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42513: LD_VAR 0 9
42517: PPUSH
42518: LD_INT 1
42520: PPUSH
42521: CALL_OW 275
42525: PUSH
42526: LD_VAR 0 14
42530: PUSH
42531: LD_INT 1
42533: ARRAY
42534: GREATEREQUAL
42535: PUSH
42536: LD_VAR 0 9
42540: PPUSH
42541: LD_INT 2
42543: PPUSH
42544: CALL_OW 275
42548: PUSH
42549: LD_VAR 0 14
42553: PUSH
42554: LD_INT 2
42556: ARRAY
42557: GREATEREQUAL
42558: AND
42559: PUSH
42560: LD_VAR 0 9
42564: PPUSH
42565: LD_INT 3
42567: PPUSH
42568: CALL_OW 275
42572: PUSH
42573: LD_VAR 0 14
42577: PUSH
42578: LD_INT 3
42580: ARRAY
42581: GREATEREQUAL
42582: AND
42583: IFFALSE 42595
// result := weapon ;
42585: LD_ADDR_VAR 0 3
42589: PUSH
42590: LD_VAR 0 18
42594: ST_TO_ADDR
// end ; end ;
42595: LD_VAR 0 3
42599: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42600: LD_INT 0
42602: PPUSH
42603: PPUSH
// result := true ;
42604: LD_ADDR_VAR 0 3
42608: PUSH
42609: LD_INT 1
42611: ST_TO_ADDR
// if array1 = array2 then
42612: LD_VAR 0 1
42616: PUSH
42617: LD_VAR 0 2
42621: EQUAL
42622: IFFALSE 42682
// begin for i = 1 to array1 do
42624: LD_ADDR_VAR 0 4
42628: PUSH
42629: DOUBLE
42630: LD_INT 1
42632: DEC
42633: ST_TO_ADDR
42634: LD_VAR 0 1
42638: PUSH
42639: FOR_TO
42640: IFFALSE 42678
// if array1 [ i ] <> array2 [ i ] then
42642: LD_VAR 0 1
42646: PUSH
42647: LD_VAR 0 4
42651: ARRAY
42652: PUSH
42653: LD_VAR 0 2
42657: PUSH
42658: LD_VAR 0 4
42662: ARRAY
42663: NONEQUAL
42664: IFFALSE 42676
// begin result := false ;
42666: LD_ADDR_VAR 0 3
42670: PUSH
42671: LD_INT 0
42673: ST_TO_ADDR
// break ;
42674: GO 42678
// end ;
42676: GO 42639
42678: POP
42679: POP
// end else
42680: GO 42690
// result := false ;
42682: LD_ADDR_VAR 0 3
42686: PUSH
42687: LD_INT 0
42689: ST_TO_ADDR
// end ;
42690: LD_VAR 0 3
42694: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42695: LD_INT 0
42697: PPUSH
42698: PPUSH
// if not array1 or not array2 then
42699: LD_VAR 0 1
42703: NOT
42704: PUSH
42705: LD_VAR 0 2
42709: NOT
42710: OR
42711: IFFALSE 42715
// exit ;
42713: GO 42779
// result := true ;
42715: LD_ADDR_VAR 0 3
42719: PUSH
42720: LD_INT 1
42722: ST_TO_ADDR
// for i = 1 to array1 do
42723: LD_ADDR_VAR 0 4
42727: PUSH
42728: DOUBLE
42729: LD_INT 1
42731: DEC
42732: ST_TO_ADDR
42733: LD_VAR 0 1
42737: PUSH
42738: FOR_TO
42739: IFFALSE 42777
// if array1 [ i ] <> array2 [ i ] then
42741: LD_VAR 0 1
42745: PUSH
42746: LD_VAR 0 4
42750: ARRAY
42751: PUSH
42752: LD_VAR 0 2
42756: PUSH
42757: LD_VAR 0 4
42761: ARRAY
42762: NONEQUAL
42763: IFFALSE 42775
// begin result := false ;
42765: LD_ADDR_VAR 0 3
42769: PUSH
42770: LD_INT 0
42772: ST_TO_ADDR
// break ;
42773: GO 42777
// end ;
42775: GO 42738
42777: POP
42778: POP
// end ;
42779: LD_VAR 0 3
42783: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42784: LD_INT 0
42786: PPUSH
42787: PPUSH
42788: PPUSH
// pom := GetBase ( fac ) ;
42789: LD_ADDR_VAR 0 5
42793: PUSH
42794: LD_VAR 0 1
42798: PPUSH
42799: CALL_OW 274
42803: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42804: LD_ADDR_VAR 0 4
42808: PUSH
42809: LD_VAR 0 2
42813: PUSH
42814: LD_INT 1
42816: ARRAY
42817: PPUSH
42818: LD_VAR 0 2
42822: PUSH
42823: LD_INT 2
42825: ARRAY
42826: PPUSH
42827: LD_VAR 0 2
42831: PUSH
42832: LD_INT 3
42834: ARRAY
42835: PPUSH
42836: LD_VAR 0 2
42840: PUSH
42841: LD_INT 4
42843: ARRAY
42844: PPUSH
42845: CALL_OW 449
42849: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42850: LD_ADDR_VAR 0 3
42854: PUSH
42855: LD_VAR 0 5
42859: PPUSH
42860: LD_INT 1
42862: PPUSH
42863: CALL_OW 275
42867: PUSH
42868: LD_VAR 0 4
42872: PUSH
42873: LD_INT 1
42875: ARRAY
42876: GREATEREQUAL
42877: PUSH
42878: LD_VAR 0 5
42882: PPUSH
42883: LD_INT 2
42885: PPUSH
42886: CALL_OW 275
42890: PUSH
42891: LD_VAR 0 4
42895: PUSH
42896: LD_INT 2
42898: ARRAY
42899: GREATEREQUAL
42900: AND
42901: PUSH
42902: LD_VAR 0 5
42906: PPUSH
42907: LD_INT 3
42909: PPUSH
42910: CALL_OW 275
42914: PUSH
42915: LD_VAR 0 4
42919: PUSH
42920: LD_INT 3
42922: ARRAY
42923: GREATEREQUAL
42924: AND
42925: ST_TO_ADDR
// end ;
42926: LD_VAR 0 3
42930: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42931: LD_INT 0
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
// pom := GetBase ( building ) ;
42937: LD_ADDR_VAR 0 3
42941: PUSH
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 274
42951: ST_TO_ADDR
// if not pom then
42952: LD_VAR 0 3
42956: NOT
42957: IFFALSE 42961
// exit ;
42959: GO 43131
// btype := GetBType ( building ) ;
42961: LD_ADDR_VAR 0 5
42965: PUSH
42966: LD_VAR 0 1
42970: PPUSH
42971: CALL_OW 266
42975: ST_TO_ADDR
// if btype = b_armoury then
42976: LD_VAR 0 5
42980: PUSH
42981: LD_INT 4
42983: EQUAL
42984: IFFALSE 42994
// btype := b_barracks ;
42986: LD_ADDR_VAR 0 5
42990: PUSH
42991: LD_INT 5
42993: ST_TO_ADDR
// if btype = b_depot then
42994: LD_VAR 0 5
42998: PUSH
42999: LD_INT 0
43001: EQUAL
43002: IFFALSE 43012
// btype := b_warehouse ;
43004: LD_ADDR_VAR 0 5
43008: PUSH
43009: LD_INT 1
43011: ST_TO_ADDR
// if btype = b_workshop then
43012: LD_VAR 0 5
43016: PUSH
43017: LD_INT 2
43019: EQUAL
43020: IFFALSE 43030
// btype := b_factory ;
43022: LD_ADDR_VAR 0 5
43026: PUSH
43027: LD_INT 3
43029: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43030: LD_ADDR_VAR 0 4
43034: PUSH
43035: LD_VAR 0 5
43039: PPUSH
43040: LD_VAR 0 1
43044: PPUSH
43045: CALL_OW 248
43049: PPUSH
43050: CALL_OW 450
43054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43055: LD_ADDR_VAR 0 2
43059: PUSH
43060: LD_VAR 0 3
43064: PPUSH
43065: LD_INT 1
43067: PPUSH
43068: CALL_OW 275
43072: PUSH
43073: LD_VAR 0 4
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: GREATEREQUAL
43082: PUSH
43083: LD_VAR 0 3
43087: PPUSH
43088: LD_INT 2
43090: PPUSH
43091: CALL_OW 275
43095: PUSH
43096: LD_VAR 0 4
43100: PUSH
43101: LD_INT 2
43103: ARRAY
43104: GREATEREQUAL
43105: AND
43106: PUSH
43107: LD_VAR 0 3
43111: PPUSH
43112: LD_INT 3
43114: PPUSH
43115: CALL_OW 275
43119: PUSH
43120: LD_VAR 0 4
43124: PUSH
43125: LD_INT 3
43127: ARRAY
43128: GREATEREQUAL
43129: AND
43130: ST_TO_ADDR
// end ;
43131: LD_VAR 0 2
43135: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43136: LD_INT 0
43138: PPUSH
43139: PPUSH
43140: PPUSH
// pom := GetBase ( building ) ;
43141: LD_ADDR_VAR 0 4
43145: PUSH
43146: LD_VAR 0 1
43150: PPUSH
43151: CALL_OW 274
43155: ST_TO_ADDR
// if not pom then
43156: LD_VAR 0 4
43160: NOT
43161: IFFALSE 43165
// exit ;
43163: GO 43266
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43165: LD_ADDR_VAR 0 5
43169: PUSH
43170: LD_VAR 0 2
43174: PPUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: CALL_OW 248
43184: PPUSH
43185: CALL_OW 450
43189: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43190: LD_ADDR_VAR 0 3
43194: PUSH
43195: LD_VAR 0 4
43199: PPUSH
43200: LD_INT 1
43202: PPUSH
43203: CALL_OW 275
43207: PUSH
43208: LD_VAR 0 5
43212: PUSH
43213: LD_INT 1
43215: ARRAY
43216: GREATEREQUAL
43217: PUSH
43218: LD_VAR 0 4
43222: PPUSH
43223: LD_INT 2
43225: PPUSH
43226: CALL_OW 275
43230: PUSH
43231: LD_VAR 0 5
43235: PUSH
43236: LD_INT 2
43238: ARRAY
43239: GREATEREQUAL
43240: AND
43241: PUSH
43242: LD_VAR 0 4
43246: PPUSH
43247: LD_INT 3
43249: PPUSH
43250: CALL_OW 275
43254: PUSH
43255: LD_VAR 0 5
43259: PUSH
43260: LD_INT 3
43262: ARRAY
43263: GREATEREQUAL
43264: AND
43265: ST_TO_ADDR
// end ;
43266: LD_VAR 0 3
43270: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43271: LD_INT 0
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
// result := false ;
43284: LD_ADDR_VAR 0 8
43288: PUSH
43289: LD_INT 0
43291: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43292: LD_VAR 0 5
43296: NOT
43297: PUSH
43298: LD_VAR 0 1
43302: NOT
43303: OR
43304: PUSH
43305: LD_VAR 0 2
43309: NOT
43310: OR
43311: PUSH
43312: LD_VAR 0 3
43316: NOT
43317: OR
43318: IFFALSE 43322
// exit ;
43320: GO 44136
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43322: LD_ADDR_VAR 0 14
43326: PUSH
43327: LD_VAR 0 1
43331: PPUSH
43332: LD_VAR 0 2
43336: PPUSH
43337: LD_VAR 0 3
43341: PPUSH
43342: LD_VAR 0 4
43346: PPUSH
43347: LD_VAR 0 5
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: PPUSH
43356: CALL_OW 248
43360: PPUSH
43361: LD_INT 0
43363: PPUSH
43364: CALL 45369 0 6
43368: ST_TO_ADDR
// if not hexes then
43369: LD_VAR 0 14
43373: NOT
43374: IFFALSE 43378
// exit ;
43376: GO 44136
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43378: LD_ADDR_VAR 0 17
43382: PUSH
43383: LD_VAR 0 5
43387: PPUSH
43388: LD_INT 22
43390: PUSH
43391: LD_VAR 0 13
43395: PPUSH
43396: CALL_OW 255
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 30
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 30
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PPUSH
43437: CALL_OW 72
43441: ST_TO_ADDR
// for i = 1 to hexes do
43442: LD_ADDR_VAR 0 9
43446: PUSH
43447: DOUBLE
43448: LD_INT 1
43450: DEC
43451: ST_TO_ADDR
43452: LD_VAR 0 14
43456: PUSH
43457: FOR_TO
43458: IFFALSE 44134
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43460: LD_ADDR_VAR 0 13
43464: PUSH
43465: LD_VAR 0 14
43469: PUSH
43470: LD_VAR 0 9
43474: ARRAY
43475: PUSH
43476: LD_INT 1
43478: ARRAY
43479: PPUSH
43480: LD_VAR 0 14
43484: PUSH
43485: LD_VAR 0 9
43489: ARRAY
43490: PUSH
43491: LD_INT 2
43493: ARRAY
43494: PPUSH
43495: CALL_OW 428
43499: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43500: LD_VAR 0 14
43504: PUSH
43505: LD_VAR 0 9
43509: ARRAY
43510: PUSH
43511: LD_INT 1
43513: ARRAY
43514: PPUSH
43515: LD_VAR 0 14
43519: PUSH
43520: LD_VAR 0 9
43524: ARRAY
43525: PUSH
43526: LD_INT 2
43528: ARRAY
43529: PPUSH
43530: CALL_OW 351
43534: PUSH
43535: LD_VAR 0 14
43539: PUSH
43540: LD_VAR 0 9
43544: ARRAY
43545: PUSH
43546: LD_INT 1
43548: ARRAY
43549: PPUSH
43550: LD_VAR 0 14
43554: PUSH
43555: LD_VAR 0 9
43559: ARRAY
43560: PUSH
43561: LD_INT 2
43563: ARRAY
43564: PPUSH
43565: CALL_OW 488
43569: NOT
43570: OR
43571: PUSH
43572: LD_VAR 0 13
43576: PPUSH
43577: CALL_OW 247
43581: PUSH
43582: LD_INT 3
43584: EQUAL
43585: OR
43586: IFFALSE 43592
// exit ;
43588: POP
43589: POP
43590: GO 44136
// if not tmp then
43592: LD_VAR 0 13
43596: NOT
43597: IFFALSE 43601
// continue ;
43599: GO 43457
// result := true ;
43601: LD_ADDR_VAR 0 8
43605: PUSH
43606: LD_INT 1
43608: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43609: LD_VAR 0 6
43613: PUSH
43614: LD_VAR 0 13
43618: PPUSH
43619: CALL_OW 247
43623: PUSH
43624: LD_INT 2
43626: EQUAL
43627: AND
43628: PUSH
43629: LD_VAR 0 13
43633: PPUSH
43634: CALL_OW 263
43638: PUSH
43639: LD_INT 1
43641: EQUAL
43642: AND
43643: IFFALSE 43807
// begin if IsDrivenBy ( tmp ) then
43645: LD_VAR 0 13
43649: PPUSH
43650: CALL_OW 311
43654: IFFALSE 43658
// continue ;
43656: GO 43457
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43658: LD_VAR 0 6
43662: PPUSH
43663: LD_INT 3
43665: PUSH
43666: LD_INT 60
43668: PUSH
43669: EMPTY
43670: LIST
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: LD_INT 55
43681: PUSH
43682: EMPTY
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PPUSH
43693: CALL_OW 72
43697: IFFALSE 43805
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43699: LD_ADDR_VAR 0 18
43703: PUSH
43704: LD_VAR 0 6
43708: PPUSH
43709: LD_INT 3
43711: PUSH
43712: LD_INT 60
43714: PUSH
43715: EMPTY
43716: LIST
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 3
43724: PUSH
43725: LD_INT 55
43727: PUSH
43728: EMPTY
43729: LIST
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PPUSH
43739: CALL_OW 72
43743: PUSH
43744: LD_INT 1
43746: ARRAY
43747: ST_TO_ADDR
// if IsInUnit ( driver ) then
43748: LD_VAR 0 18
43752: PPUSH
43753: CALL_OW 310
43757: IFFALSE 43768
// ComExit ( driver ) ;
43759: LD_VAR 0 18
43763: PPUSH
43764: CALL 69149 0 1
// AddComEnterUnit ( driver , tmp ) ;
43768: LD_VAR 0 18
43772: PPUSH
43773: LD_VAR 0 13
43777: PPUSH
43778: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43782: LD_VAR 0 18
43786: PPUSH
43787: LD_VAR 0 7
43791: PPUSH
43792: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43796: LD_VAR 0 18
43800: PPUSH
43801: CALL_OW 181
// end ; continue ;
43805: GO 43457
// end ; if not cleaners or not tmp in cleaners then
43807: LD_VAR 0 6
43811: NOT
43812: PUSH
43813: LD_VAR 0 13
43817: PUSH
43818: LD_VAR 0 6
43822: IN
43823: NOT
43824: OR
43825: IFFALSE 44132
// begin if dep then
43827: LD_VAR 0 17
43831: IFFALSE 43967
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43833: LD_ADDR_VAR 0 16
43837: PUSH
43838: LD_VAR 0 17
43842: PUSH
43843: LD_INT 1
43845: ARRAY
43846: PPUSH
43847: CALL_OW 250
43851: PPUSH
43852: LD_VAR 0 17
43856: PUSH
43857: LD_INT 1
43859: ARRAY
43860: PPUSH
43861: CALL_OW 254
43865: PPUSH
43866: LD_INT 5
43868: PPUSH
43869: CALL_OW 272
43873: PUSH
43874: LD_VAR 0 17
43878: PUSH
43879: LD_INT 1
43881: ARRAY
43882: PPUSH
43883: CALL_OW 251
43887: PPUSH
43888: LD_VAR 0 17
43892: PUSH
43893: LD_INT 1
43895: ARRAY
43896: PPUSH
43897: CALL_OW 254
43901: PPUSH
43902: LD_INT 5
43904: PPUSH
43905: CALL_OW 273
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43914: LD_VAR 0 16
43918: PUSH
43919: LD_INT 1
43921: ARRAY
43922: PPUSH
43923: LD_VAR 0 16
43927: PUSH
43928: LD_INT 2
43930: ARRAY
43931: PPUSH
43932: CALL_OW 488
43936: IFFALSE 43967
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43938: LD_VAR 0 13
43942: PPUSH
43943: LD_VAR 0 16
43947: PUSH
43948: LD_INT 1
43950: ARRAY
43951: PPUSH
43952: LD_VAR 0 16
43956: PUSH
43957: LD_INT 2
43959: ARRAY
43960: PPUSH
43961: CALL_OW 111
// continue ;
43965: GO 43457
// end ; end ; r := GetDir ( tmp ) ;
43967: LD_ADDR_VAR 0 15
43971: PUSH
43972: LD_VAR 0 13
43976: PPUSH
43977: CALL_OW 254
43981: ST_TO_ADDR
// if r = 5 then
43982: LD_VAR 0 15
43986: PUSH
43987: LD_INT 5
43989: EQUAL
43990: IFFALSE 44000
// r := 0 ;
43992: LD_ADDR_VAR 0 15
43996: PUSH
43997: LD_INT 0
43999: ST_TO_ADDR
// for j = r to 5 do
44000: LD_ADDR_VAR 0 10
44004: PUSH
44005: DOUBLE
44006: LD_VAR 0 15
44010: DEC
44011: ST_TO_ADDR
44012: LD_INT 5
44014: PUSH
44015: FOR_TO
44016: IFFALSE 44130
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44018: LD_ADDR_VAR 0 11
44022: PUSH
44023: LD_VAR 0 13
44027: PPUSH
44028: CALL_OW 250
44032: PPUSH
44033: LD_VAR 0 10
44037: PPUSH
44038: LD_INT 2
44040: PPUSH
44041: CALL_OW 272
44045: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44046: LD_ADDR_VAR 0 12
44050: PUSH
44051: LD_VAR 0 13
44055: PPUSH
44056: CALL_OW 251
44060: PPUSH
44061: LD_VAR 0 10
44065: PPUSH
44066: LD_INT 2
44068: PPUSH
44069: CALL_OW 273
44073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44074: LD_VAR 0 11
44078: PPUSH
44079: LD_VAR 0 12
44083: PPUSH
44084: CALL_OW 488
44088: PUSH
44089: LD_VAR 0 11
44093: PPUSH
44094: LD_VAR 0 12
44098: PPUSH
44099: CALL_OW 428
44103: NOT
44104: AND
44105: IFFALSE 44128
// begin ComMoveXY ( tmp , _x , _y ) ;
44107: LD_VAR 0 13
44111: PPUSH
44112: LD_VAR 0 11
44116: PPUSH
44117: LD_VAR 0 12
44121: PPUSH
44122: CALL_OW 111
// break ;
44126: GO 44130
// end ; end ;
44128: GO 44015
44130: POP
44131: POP
// end ; end ;
44132: GO 43457
44134: POP
44135: POP
// end ;
44136: LD_VAR 0 8
44140: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44141: LD_INT 0
44143: PPUSH
// result := true ;
44144: LD_ADDR_VAR 0 3
44148: PUSH
44149: LD_INT 1
44151: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44152: LD_VAR 0 2
44156: PUSH
44157: LD_INT 24
44159: DOUBLE
44160: EQUAL
44161: IFTRUE 44171
44163: LD_INT 33
44165: DOUBLE
44166: EQUAL
44167: IFTRUE 44171
44169: GO 44196
44171: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44172: LD_ADDR_VAR 0 3
44176: PUSH
44177: LD_INT 32
44179: PPUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: CALL_OW 321
44189: PUSH
44190: LD_INT 2
44192: EQUAL
44193: ST_TO_ADDR
44194: GO 44512
44196: LD_INT 20
44198: DOUBLE
44199: EQUAL
44200: IFTRUE 44204
44202: GO 44229
44204: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44205: LD_ADDR_VAR 0 3
44209: PUSH
44210: LD_INT 6
44212: PPUSH
44213: LD_VAR 0 1
44217: PPUSH
44218: CALL_OW 321
44222: PUSH
44223: LD_INT 2
44225: EQUAL
44226: ST_TO_ADDR
44227: GO 44512
44229: LD_INT 22
44231: DOUBLE
44232: EQUAL
44233: IFTRUE 44243
44235: LD_INT 36
44237: DOUBLE
44238: EQUAL
44239: IFTRUE 44243
44241: GO 44268
44243: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44244: LD_ADDR_VAR 0 3
44248: PUSH
44249: LD_INT 15
44251: PPUSH
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 321
44261: PUSH
44262: LD_INT 2
44264: EQUAL
44265: ST_TO_ADDR
44266: GO 44512
44268: LD_INT 30
44270: DOUBLE
44271: EQUAL
44272: IFTRUE 44276
44274: GO 44301
44276: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44277: LD_ADDR_VAR 0 3
44281: PUSH
44282: LD_INT 20
44284: PPUSH
44285: LD_VAR 0 1
44289: PPUSH
44290: CALL_OW 321
44294: PUSH
44295: LD_INT 2
44297: EQUAL
44298: ST_TO_ADDR
44299: GO 44512
44301: LD_INT 28
44303: DOUBLE
44304: EQUAL
44305: IFTRUE 44315
44307: LD_INT 21
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44315
44313: GO 44340
44315: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: LD_INT 21
44323: PPUSH
44324: LD_VAR 0 1
44328: PPUSH
44329: CALL_OW 321
44333: PUSH
44334: LD_INT 2
44336: EQUAL
44337: ST_TO_ADDR
44338: GO 44512
44340: LD_INT 16
44342: DOUBLE
44343: EQUAL
44344: IFTRUE 44348
44346: GO 44373
44348: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44349: LD_ADDR_VAR 0 3
44353: PUSH
44354: LD_INT 84
44356: PPUSH
44357: LD_VAR 0 1
44361: PPUSH
44362: CALL_OW 321
44366: PUSH
44367: LD_INT 2
44369: EQUAL
44370: ST_TO_ADDR
44371: GO 44512
44373: LD_INT 19
44375: DOUBLE
44376: EQUAL
44377: IFTRUE 44387
44379: LD_INT 23
44381: DOUBLE
44382: EQUAL
44383: IFTRUE 44387
44385: GO 44412
44387: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44388: LD_ADDR_VAR 0 3
44392: PUSH
44393: LD_INT 83
44395: PPUSH
44396: LD_VAR 0 1
44400: PPUSH
44401: CALL_OW 321
44405: PUSH
44406: LD_INT 2
44408: EQUAL
44409: ST_TO_ADDR
44410: GO 44512
44412: LD_INT 17
44414: DOUBLE
44415: EQUAL
44416: IFTRUE 44420
44418: GO 44445
44420: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44421: LD_ADDR_VAR 0 3
44425: PUSH
44426: LD_INT 39
44428: PPUSH
44429: LD_VAR 0 1
44433: PPUSH
44434: CALL_OW 321
44438: PUSH
44439: LD_INT 2
44441: EQUAL
44442: ST_TO_ADDR
44443: GO 44512
44445: LD_INT 18
44447: DOUBLE
44448: EQUAL
44449: IFTRUE 44453
44451: GO 44478
44453: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44454: LD_ADDR_VAR 0 3
44458: PUSH
44459: LD_INT 40
44461: PPUSH
44462: LD_VAR 0 1
44466: PPUSH
44467: CALL_OW 321
44471: PUSH
44472: LD_INT 2
44474: EQUAL
44475: ST_TO_ADDR
44476: GO 44512
44478: LD_INT 27
44480: DOUBLE
44481: EQUAL
44482: IFTRUE 44486
44484: GO 44511
44486: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_INT 35
44494: PPUSH
44495: LD_VAR 0 1
44499: PPUSH
44500: CALL_OW 321
44504: PUSH
44505: LD_INT 2
44507: EQUAL
44508: ST_TO_ADDR
44509: GO 44512
44511: POP
// end ;
44512: LD_VAR 0 3
44516: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44517: LD_INT 0
44519: PPUSH
44520: PPUSH
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
44528: PPUSH
44529: PPUSH
// result := false ;
44530: LD_ADDR_VAR 0 6
44534: PUSH
44535: LD_INT 0
44537: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44538: LD_VAR 0 1
44542: NOT
44543: PUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 266
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: IN
44564: NOT
44565: OR
44566: PUSH
44567: LD_VAR 0 2
44571: NOT
44572: OR
44573: PUSH
44574: LD_VAR 0 5
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 3
44590: PUSH
44591: LD_INT 4
44593: PUSH
44594: LD_INT 5
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: IN
44605: NOT
44606: OR
44607: PUSH
44608: LD_VAR 0 3
44612: PPUSH
44613: LD_VAR 0 4
44617: PPUSH
44618: CALL_OW 488
44622: NOT
44623: OR
44624: IFFALSE 44628
// exit ;
44626: GO 45364
// side := GetSide ( depot ) ;
44628: LD_ADDR_VAR 0 9
44632: PUSH
44633: LD_VAR 0 1
44637: PPUSH
44638: CALL_OW 255
44642: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44643: LD_VAR 0 9
44647: PPUSH
44648: LD_VAR 0 2
44652: PPUSH
44653: CALL 44141 0 2
44657: NOT
44658: IFFALSE 44662
// exit ;
44660: GO 45364
// pom := GetBase ( depot ) ;
44662: LD_ADDR_VAR 0 10
44666: PUSH
44667: LD_VAR 0 1
44671: PPUSH
44672: CALL_OW 274
44676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44677: LD_ADDR_VAR 0 11
44681: PUSH
44682: LD_VAR 0 2
44686: PPUSH
44687: LD_VAR 0 1
44691: PPUSH
44692: CALL_OW 248
44696: PPUSH
44697: CALL_OW 450
44701: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44702: LD_VAR 0 10
44706: PPUSH
44707: LD_INT 1
44709: PPUSH
44710: CALL_OW 275
44714: PUSH
44715: LD_VAR 0 11
44719: PUSH
44720: LD_INT 1
44722: ARRAY
44723: GREATEREQUAL
44724: PUSH
44725: LD_VAR 0 10
44729: PPUSH
44730: LD_INT 2
44732: PPUSH
44733: CALL_OW 275
44737: PUSH
44738: LD_VAR 0 11
44742: PUSH
44743: LD_INT 2
44745: ARRAY
44746: GREATEREQUAL
44747: AND
44748: PUSH
44749: LD_VAR 0 10
44753: PPUSH
44754: LD_INT 3
44756: PPUSH
44757: CALL_OW 275
44761: PUSH
44762: LD_VAR 0 11
44766: PUSH
44767: LD_INT 3
44769: ARRAY
44770: GREATEREQUAL
44771: AND
44772: NOT
44773: IFFALSE 44777
// exit ;
44775: GO 45364
// if GetBType ( depot ) = b_depot then
44777: LD_VAR 0 1
44781: PPUSH
44782: CALL_OW 266
44786: PUSH
44787: LD_INT 0
44789: EQUAL
44790: IFFALSE 44802
// dist := 28 else
44792: LD_ADDR_VAR 0 14
44796: PUSH
44797: LD_INT 28
44799: ST_TO_ADDR
44800: GO 44810
// dist := 36 ;
44802: LD_ADDR_VAR 0 14
44806: PUSH
44807: LD_INT 36
44809: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44810: LD_VAR 0 1
44814: PPUSH
44815: LD_VAR 0 3
44819: PPUSH
44820: LD_VAR 0 4
44824: PPUSH
44825: CALL_OW 297
44829: PUSH
44830: LD_VAR 0 14
44834: GREATER
44835: IFFALSE 44839
// exit ;
44837: GO 45364
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44839: LD_ADDR_VAR 0 12
44843: PUSH
44844: LD_VAR 0 2
44848: PPUSH
44849: LD_VAR 0 3
44853: PPUSH
44854: LD_VAR 0 4
44858: PPUSH
44859: LD_VAR 0 5
44863: PPUSH
44864: LD_VAR 0 1
44868: PPUSH
44869: CALL_OW 248
44873: PPUSH
44874: LD_INT 0
44876: PPUSH
44877: CALL 45369 0 6
44881: ST_TO_ADDR
// if not hexes then
44882: LD_VAR 0 12
44886: NOT
44887: IFFALSE 44891
// exit ;
44889: GO 45364
// hex := GetHexInfo ( x , y ) ;
44891: LD_ADDR_VAR 0 15
44895: PUSH
44896: LD_VAR 0 3
44900: PPUSH
44901: LD_VAR 0 4
44905: PPUSH
44906: CALL_OW 546
44910: ST_TO_ADDR
// if hex [ 1 ] then
44911: LD_VAR 0 15
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: IFFALSE 44923
// exit ;
44921: GO 45364
// height := hex [ 2 ] ;
44923: LD_ADDR_VAR 0 13
44927: PUSH
44928: LD_VAR 0 15
44932: PUSH
44933: LD_INT 2
44935: ARRAY
44936: ST_TO_ADDR
// for i = 1 to hexes do
44937: LD_ADDR_VAR 0 7
44941: PUSH
44942: DOUBLE
44943: LD_INT 1
44945: DEC
44946: ST_TO_ADDR
44947: LD_VAR 0 12
44951: PUSH
44952: FOR_TO
44953: IFFALSE 45283
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44955: LD_VAR 0 12
44959: PUSH
44960: LD_VAR 0 7
44964: ARRAY
44965: PUSH
44966: LD_INT 1
44968: ARRAY
44969: PPUSH
44970: LD_VAR 0 12
44974: PUSH
44975: LD_VAR 0 7
44979: ARRAY
44980: PUSH
44981: LD_INT 2
44983: ARRAY
44984: PPUSH
44985: CALL_OW 488
44989: NOT
44990: PUSH
44991: LD_VAR 0 12
44995: PUSH
44996: LD_VAR 0 7
45000: ARRAY
45001: PUSH
45002: LD_INT 1
45004: ARRAY
45005: PPUSH
45006: LD_VAR 0 12
45010: PUSH
45011: LD_VAR 0 7
45015: ARRAY
45016: PUSH
45017: LD_INT 2
45019: ARRAY
45020: PPUSH
45021: CALL_OW 428
45025: PUSH
45026: LD_INT 0
45028: GREATER
45029: OR
45030: PUSH
45031: LD_VAR 0 12
45035: PUSH
45036: LD_VAR 0 7
45040: ARRAY
45041: PUSH
45042: LD_INT 1
45044: ARRAY
45045: PPUSH
45046: LD_VAR 0 12
45050: PUSH
45051: LD_VAR 0 7
45055: ARRAY
45056: PUSH
45057: LD_INT 2
45059: ARRAY
45060: PPUSH
45061: CALL_OW 351
45065: OR
45066: IFFALSE 45072
// exit ;
45068: POP
45069: POP
45070: GO 45364
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45072: LD_ADDR_VAR 0 8
45076: PUSH
45077: LD_VAR 0 12
45081: PUSH
45082: LD_VAR 0 7
45086: ARRAY
45087: PUSH
45088: LD_INT 1
45090: ARRAY
45091: PPUSH
45092: LD_VAR 0 12
45096: PUSH
45097: LD_VAR 0 7
45101: ARRAY
45102: PUSH
45103: LD_INT 2
45105: ARRAY
45106: PPUSH
45107: CALL_OW 546
45111: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45112: LD_VAR 0 8
45116: PUSH
45117: LD_INT 1
45119: ARRAY
45120: PUSH
45121: LD_VAR 0 8
45125: PUSH
45126: LD_INT 2
45128: ARRAY
45129: PUSH
45130: LD_VAR 0 13
45134: PUSH
45135: LD_INT 2
45137: PLUS
45138: GREATER
45139: OR
45140: PUSH
45141: LD_VAR 0 8
45145: PUSH
45146: LD_INT 2
45148: ARRAY
45149: PUSH
45150: LD_VAR 0 13
45154: PUSH
45155: LD_INT 2
45157: MINUS
45158: LESS
45159: OR
45160: PUSH
45161: LD_VAR 0 8
45165: PUSH
45166: LD_INT 3
45168: ARRAY
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 8
45175: PUSH
45176: LD_INT 9
45178: PUSH
45179: LD_INT 10
45181: PUSH
45182: LD_INT 11
45184: PUSH
45185: LD_INT 12
45187: PUSH
45188: LD_INT 13
45190: PUSH
45191: LD_INT 16
45193: PUSH
45194: LD_INT 17
45196: PUSH
45197: LD_INT 18
45199: PUSH
45200: LD_INT 19
45202: PUSH
45203: LD_INT 20
45205: PUSH
45206: LD_INT 21
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: IN
45224: NOT
45225: OR
45226: PUSH
45227: LD_VAR 0 8
45231: PUSH
45232: LD_INT 5
45234: ARRAY
45235: NOT
45236: OR
45237: PUSH
45238: LD_VAR 0 8
45242: PUSH
45243: LD_INT 6
45245: ARRAY
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 7
45255: PUSH
45256: LD_INT 9
45258: PUSH
45259: LD_INT 10
45261: PUSH
45262: LD_INT 11
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: IN
45273: NOT
45274: OR
45275: IFFALSE 45281
// exit ;
45277: POP
45278: POP
45279: GO 45364
// end ;
45281: GO 44952
45283: POP
45284: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45285: LD_VAR 0 9
45289: PPUSH
45290: LD_VAR 0 3
45294: PPUSH
45295: LD_VAR 0 4
45299: PPUSH
45300: LD_INT 20
45302: PPUSH
45303: CALL 37316 0 4
45307: PUSH
45308: LD_INT 4
45310: ARRAY
45311: IFFALSE 45315
// exit ;
45313: GO 45364
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45315: LD_VAR 0 2
45319: PUSH
45320: LD_INT 29
45322: PUSH
45323: LD_INT 30
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: IN
45330: PUSH
45331: LD_VAR 0 3
45335: PPUSH
45336: LD_VAR 0 4
45340: PPUSH
45341: LD_VAR 0 9
45345: PPUSH
45346: CALL_OW 440
45350: NOT
45351: AND
45352: IFFALSE 45356
// exit ;
45354: GO 45364
// result := true ;
45356: LD_ADDR_VAR 0 6
45360: PUSH
45361: LD_INT 1
45363: ST_TO_ADDR
// end ;
45364: LD_VAR 0 6
45368: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45369: LD_INT 0
45371: PPUSH
45372: PPUSH
45373: PPUSH
45374: PPUSH
45375: PPUSH
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
45412: PPUSH
45413: PPUSH
45414: PPUSH
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
45426: PPUSH
45427: PPUSH
45428: PPUSH
// result = [ ] ;
45429: LD_ADDR_VAR 0 7
45433: PUSH
45434: EMPTY
45435: ST_TO_ADDR
// temp_list = [ ] ;
45436: LD_ADDR_VAR 0 9
45440: PUSH
45441: EMPTY
45442: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45443: LD_VAR 0 4
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: LD_INT 3
45459: PUSH
45460: LD_INT 4
45462: PUSH
45463: LD_INT 5
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: IN
45474: NOT
45475: PUSH
45476: LD_VAR 0 1
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: IN
45491: PUSH
45492: LD_VAR 0 5
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: IN
45511: NOT
45512: AND
45513: OR
45514: IFFALSE 45518
// exit ;
45516: GO 63909
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 6
45525: PUSH
45526: LD_INT 7
45528: PUSH
45529: LD_INT 8
45531: PUSH
45532: LD_INT 13
45534: PUSH
45535: LD_INT 12
45537: PUSH
45538: LD_INT 15
45540: PUSH
45541: LD_INT 11
45543: PUSH
45544: LD_INT 14
45546: PUSH
45547: LD_INT 10
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: IN
45561: IFFALSE 45571
// btype = b_lab ;
45563: LD_ADDR_VAR 0 1
45567: PUSH
45568: LD_INT 6
45570: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45571: LD_VAR 0 6
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: IN
45590: NOT
45591: PUSH
45592: LD_VAR 0 1
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: LD_INT 6
45611: PUSH
45612: LD_INT 36
45614: PUSH
45615: LD_INT 4
45617: PUSH
45618: LD_INT 5
45620: PUSH
45621: LD_INT 31
45623: PUSH
45624: LD_INT 32
45626: PUSH
45627: LD_INT 33
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: IN
45643: NOT
45644: PUSH
45645: LD_VAR 0 6
45649: PUSH
45650: LD_INT 1
45652: EQUAL
45653: AND
45654: OR
45655: PUSH
45656: LD_VAR 0 1
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 3
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: IN
45671: NOT
45672: PUSH
45673: LD_VAR 0 6
45677: PUSH
45678: LD_INT 2
45680: EQUAL
45681: AND
45682: OR
45683: IFFALSE 45693
// mode = 0 ;
45685: LD_ADDR_VAR 0 6
45689: PUSH
45690: LD_INT 0
45692: ST_TO_ADDR
// case mode of 0 :
45693: LD_VAR 0 6
45697: PUSH
45698: LD_INT 0
45700: DOUBLE
45701: EQUAL
45702: IFTRUE 45706
45704: GO 57159
45706: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45707: LD_ADDR_VAR 0 11
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 2
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 3
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45900: LD_ADDR_VAR 0 12
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: NEG
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 3
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46096: LD_ADDR_VAR 0 13
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: LD_INT 3
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46295: LD_ADDR_VAR 0 14
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 0
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 3
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46491: LD_ADDR_VAR 0 15
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46684: LD_ADDR_VAR 0 16
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 2
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46877: LD_ADDR_VAR 0 17
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 1
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 2
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47107: LD_ADDR_VAR 0 18
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47337: LD_ADDR_VAR 0 19
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47567: LD_ADDR_VAR 0 20
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47797: LD_ADDR_VAR 0 21
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48027: LD_ADDR_VAR 0 22
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: LD_INT 2
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48257: LD_ADDR_VAR 0 23
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 3
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48537: LD_ADDR_VAR 0 24
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 2
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48813: LD_ADDR_VAR 0 25
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 3
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 3
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49087: LD_ADDR_VAR 0 26
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: LD_INT 2
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 2
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 3
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 3
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49363: LD_ADDR_VAR 0 27
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 3
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49643: LD_ADDR_VAR 0 28
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49925: LD_ADDR_VAR 0 29
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 3
50169: NEG
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50204: LD_ADDR_VAR 0 30
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50482: LD_ADDR_VAR 0 31
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 3
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50760: LD_ADDR_VAR 0 32
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 3
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51038: LD_ADDR_VAR 0 33
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: NEG
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51317: LD_ADDR_VAR 0 34
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 2
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 3
51562: NEG
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51597: LD_ADDR_VAR 0 35
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51709: LD_ADDR_VAR 0 36
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 1
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51821: LD_ADDR_VAR 0 37
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51933: LD_ADDR_VAR 0 38
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52045: LD_ADDR_VAR 0 39
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: NEG
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52157: LD_ADDR_VAR 0 40
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52269: LD_ADDR_VAR 0 41
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 0
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: LD_INT 3
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52619: LD_ADDR_VAR 0 42
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: LD_INT 2
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 3
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 3
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 3
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 3
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52969: LD_ADDR_VAR 0 43
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53317: LD_ADDR_VAR 0 44
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: NEG
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 3
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53667: LD_ADDR_VAR 0 45
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 3
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: PUSH
53914: LD_INT 3
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54017: LD_ADDR_VAR 0 46
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 3
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 3
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54365: LD_ADDR_VAR 0 47
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54516: LD_ADDR_VAR 0 48
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54663: LD_ADDR_VAR 0 49
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54807: LD_ADDR_VAR 0 50
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 1
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54951: LD_ADDR_VAR 0 51
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55098: LD_ADDR_VAR 0 52
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55249: LD_ADDR_VAR 0 53
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55479: LD_ADDR_VAR 0 54
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55709: LD_ADDR_VAR 0 55
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55939: LD_ADDR_VAR 0 56
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 2
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56169: LD_ADDR_VAR 0 57
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 0
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 2
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56399: LD_ADDR_VAR 0 58
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: NEG
56576: PUSH
56577: LD_INT 0
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56629: LD_ADDR_VAR 0 59
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56717: LD_ADDR_VAR 0 60
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: LD_INT 1
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56805: LD_ADDR_VAR 0 61
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56893: LD_ADDR_VAR 0 62
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 1
56951: NEG
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 1
56966: NEG
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56981: LD_ADDR_VAR 0 63
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57069: LD_ADDR_VAR 0 64
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 1
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 1
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// end ; 1 :
57157: GO 63054
57159: LD_INT 1
57161: DOUBLE
57162: EQUAL
57163: IFTRUE 57167
57165: GO 59790
57167: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57168: LD_ADDR_VAR 0 11
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: LD_INT 3
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57212: LD_ADDR_VAR 0 12
57216: PUSH
57217: LD_INT 2
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57253: LD_ADDR_VAR 0 13
57257: PUSH
57258: LD_INT 3
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: PUSH
57271: LD_INT 3
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57293: LD_ADDR_VAR 0 14
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57334: LD_ADDR_VAR 0 15
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57378: LD_ADDR_VAR 0 16
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 3
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 3
57397: NEG
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: LD_INT 3
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57424: LD_ADDR_VAR 0 17
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57468: LD_ADDR_VAR 0 18
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57509: LD_ADDR_VAR 0 19
57513: PUSH
57514: LD_INT 3
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 3
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57549: LD_ADDR_VAR 0 20
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 3
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57590: LD_ADDR_VAR 0 21
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57634: LD_ADDR_VAR 0 22
57638: PUSH
57639: LD_INT 2
57641: NEG
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 2
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 3
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57680: LD_ADDR_VAR 0 23
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57724: LD_ADDR_VAR 0 24
57728: PUSH
57729: LD_INT 3
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: LIST
57764: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57765: LD_ADDR_VAR 0 25
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 4
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: PUSH
57793: LD_INT 4
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57805: LD_ADDR_VAR 0 26
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 4
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 3
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57846: LD_ADDR_VAR 0 27
57850: PUSH
57851: LD_INT 3
57853: NEG
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 3
57864: NEG
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57890: LD_ADDR_VAR 0 28
57894: PUSH
57895: LD_INT 3
57897: NEG
57898: PUSH
57899: LD_INT 3
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: LD_INT 4
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 4
57921: NEG
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57936: LD_ADDR_VAR 0 29
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 3
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: LD_INT 4
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 4
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 5
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 5
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 4
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 6
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 6
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 5
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58091: LD_ADDR_VAR 0 30
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 5
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 5
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 5
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 6
58202: PUSH
58203: LD_INT 0
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 6
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58234: LD_ADDR_VAR 0 31
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: LD_INT 2
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: LD_INT 3
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: LD_INT 4
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: LD_INT 4
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 5
58301: PUSH
58302: LD_INT 4
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: LD_INT 5
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: LD_INT 5
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 6
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 6
58341: PUSH
58342: LD_INT 6
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 5
58351: PUSH
58352: LD_INT 6
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58373: LD_ADDR_VAR 0 32
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 5
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 5
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: LD_INT 4
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 6
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: LD_INT 6
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: LD_INT 5
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58516: LD_ADDR_VAR 0 33
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 4
58568: NEG
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 4
58579: NEG
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: NEG
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 5
58602: NEG
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 5
58613: NEG
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 5
58625: NEG
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 6
58636: NEG
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 6
58647: NEG
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58671: LD_ADDR_VAR 0 34
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 3
58682: NEG
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: NEG
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 3
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: NEG
58715: PUSH
58716: LD_INT 4
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 4
58726: NEG
58727: PUSH
58728: LD_INT 3
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 4
58738: NEG
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 4
58750: NEG
58751: PUSH
58752: LD_INT 5
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 5
58762: NEG
58763: PUSH
58764: LD_INT 4
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 5
58774: NEG
58775: PUSH
58776: LD_INT 5
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 5
58786: NEG
58787: PUSH
58788: LD_INT 6
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 6
58798: NEG
58799: PUSH
58800: LD_INT 5
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 6
58810: NEG
58811: PUSH
58812: LD_INT 6
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58834: LD_ADDR_VAR 0 41
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: LD_INT 2
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58878: LD_ADDR_VAR 0 42
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 3
58906: PUSH
58907: LD_INT 1
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58919: LD_ADDR_VAR 0 43
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58959: LD_ADDR_VAR 0 44
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59000: LD_ADDR_VAR 0 45
59004: PUSH
59005: LD_INT 2
59007: NEG
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: LIST
59043: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59044: LD_ADDR_VAR 0 46
59048: PUSH
59049: LD_INT 2
59051: NEG
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: LD_INT 3
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59090: LD_ADDR_VAR 0 47
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59123: LD_ADDR_VAR 0 48
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: LD_INT 2
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59154: LD_ADDR_VAR 0 49
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 3
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59183: LD_ADDR_VAR 0 50
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59212: LD_ADDR_VAR 0 51
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59243: LD_ADDR_VAR 0 52
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59276: LD_ADDR_VAR 0 53
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 3
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: LD_INT 3
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59320: LD_ADDR_VAR 0 54
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59361: LD_ADDR_VAR 0 55
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: LD_INT 2
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: LD_INT 3
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59401: LD_ADDR_VAR 0 56
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59442: LD_ADDR_VAR 0 57
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 3
59471: NEG
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59486: LD_ADDR_VAR 0 58
59490: PUSH
59491: LD_INT 2
59493: NEG
59494: PUSH
59495: LD_INT 3
59497: NEG
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 3
59505: NEG
59506: PUSH
59507: LD_INT 2
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: NEG
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59532: LD_ADDR_VAR 0 59
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 2
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59576: LD_ADDR_VAR 0 60
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59617: LD_ADDR_VAR 0 61
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: LIST
59656: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59657: LD_ADDR_VAR 0 62
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59698: LD_ADDR_VAR 0 63
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: LIST
59741: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59742: LD_ADDR_VAR 0 64
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// end ; 2 :
59788: GO 63054
59790: LD_INT 2
59792: DOUBLE
59793: EQUAL
59794: IFTRUE 59798
59796: GO 63053
59798: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59799: LD_ADDR_VAR 0 29
59803: PUSH
59804: LD_INT 4
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 4
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 5
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 5
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: LD_INT 2
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 5
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 3
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 3
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 4
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: PUSH
59930: LD_INT 4
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: LD_INT 4
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 3
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 4
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 4
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 4
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: LD_INT 3
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: LD_INT 5
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 0
60029: PUSH
60030: LD_INT 5
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 4
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 3
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 3
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: LD_INT 0
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 1
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: NEG
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 4
60184: NEG
60185: PUSH
60186: LD_INT 4
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 4
60196: NEG
60197: PUSH
60198: LD_INT 5
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 3
60208: NEG
60209: PUSH
60210: LD_INT 4
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 3
60220: NEG
60221: PUSH
60222: LD_INT 3
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 4
60232: NEG
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 5
60244: NEG
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 5
60256: NEG
60257: PUSH
60258: LD_INT 5
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 5
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 5
60280: NEG
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60337: LD_ADDR_VAR 0 30
60341: PUSH
60342: LD_INT 4
60344: PUSH
60345: LD_INT 4
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 4
60354: PUSH
60355: LD_INT 3
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 5
60364: PUSH
60365: LD_INT 4
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 5
60374: PUSH
60375: LD_INT 5
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 4
60384: PUSH
60385: LD_INT 5
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 4
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 3
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 5
60414: PUSH
60415: LD_INT 3
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 3
60424: PUSH
60425: LD_INT 5
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: LD_INT 4
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: NEG
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 5
60583: NEG
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 5
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 3
60641: NEG
60642: PUSH
60643: LD_INT 4
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: LD_INT 3
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: NEG
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 3
60677: NEG
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 4
60689: NEG
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 4
60701: NEG
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 4
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 4
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 4
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 5
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 4
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 3
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 4
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: LD_INT 5
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: NEG
60828: PUSH
60829: LD_INT 5
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60884: LD_ADDR_VAR 0 31
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 4
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: LD_INT 4
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: LD_INT 5
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 5
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: LD_INT 4
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 4
61051: NEG
61052: PUSH
61053: LD_INT 1
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: LD_INT 2
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: LD_INT 4
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 4
61098: NEG
61099: PUSH
61100: LD_INT 5
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 3
61122: NEG
61123: PUSH
61124: LD_INT 3
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: NEG
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 5
61146: NEG
61147: PUSH
61148: LD_INT 4
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 5
61158: NEG
61159: PUSH
61160: LD_INT 5
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: NEG
61171: PUSH
61172: LD_INT 5
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 5
61182: NEG
61183: PUSH
61184: LD_INT 3
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 4
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 4
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: LD_INT 4
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 4
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 5
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 5
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 4
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: LD_INT 1
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 5
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61434: LD_ADDR_VAR 0 32
61438: PUSH
61439: LD_INT 4
61441: NEG
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 4
61452: NEG
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: NEG
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 3
61475: NEG
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 5
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 5
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 3
61532: NEG
61533: PUSH
61534: LD_INT 2
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: LD_INT 3
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: NEG
61556: PUSH
61557: LD_INT 4
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: LD_INT 3
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 2
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: LD_INT 3
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 4
61615: NEG
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 2
61627: NEG
61628: PUSH
61629: LD_INT 4
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 4
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 4
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 5
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: LD_INT 4
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 1
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 4
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 5
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 2
61741: NEG
61742: PUSH
61743: LD_INT 5
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 4
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 4
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 3
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 4
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 4
61846: PUSH
61847: LD_INT 4
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 4
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: LD_INT 4
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 5
61876: PUSH
61877: LD_INT 5
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 4
61886: PUSH
61887: LD_INT 5
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 3
61896: PUSH
61897: LD_INT 4
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 5
61916: PUSH
61917: LD_INT 3
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 3
61926: PUSH
61927: LD_INT 5
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61981: LD_ADDR_VAR 0 33
61985: PUSH
61986: LD_INT 4
61988: NEG
61989: PUSH
61990: LD_INT 4
61992: NEG
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 4
62000: NEG
62001: PUSH
62002: LD_INT 5
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 4
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: LD_INT 3
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 4
62036: NEG
62037: PUSH
62038: LD_INT 3
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 5
62048: NEG
62049: PUSH
62050: LD_INT 4
62052: NEG
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 5
62060: NEG
62061: PUSH
62062: LD_INT 5
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: LD_INT 5
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 5
62084: NEG
62085: PUSH
62086: LD_INT 3
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 3
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 4
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 3
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 4
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: LD_INT 4
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 4
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 4
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 5
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 5
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 4
62239: PUSH
62240: LD_INT 1
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: LD_INT 1
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 3
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 5
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 3
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 4
62321: PUSH
62322: LD_INT 4
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 3
62331: PUSH
62332: LD_INT 4
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: LD_INT 3
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 4
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 4
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: LD_INT 4
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 4
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: LD_INT 5
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 5
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 4
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: PUSH
62454: LD_INT 5
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62519: LD_ADDR_VAR 0 34
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 4
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 5
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 4
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 4
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 5
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 2
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: NEG
62617: PUSH
62618: LD_INT 5
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 4
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 4
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 2
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 4
62711: PUSH
62712: LD_INT 2
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 4
62721: PUSH
62722: LD_INT 4
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 4
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 5
62741: PUSH
62742: LD_INT 4
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 5
62751: PUSH
62752: LD_INT 5
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 4
62761: PUSH
62762: LD_INT 5
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: LD_INT 4
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: LD_INT 3
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 5
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: LD_INT 3
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: LD_INT 2
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: LD_INT 3
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: LD_INT 4
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 3
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: LD_INT 4
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 3
62927: NEG
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 3
62938: NEG
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 4
62949: NEG
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 5
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 5
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 5
62983: NEG
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: LD_INT 2
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// end ; end ;
63051: GO 63054
63053: POP
// case btype of b_depot , b_warehouse :
63054: LD_VAR 0 1
63058: PUSH
63059: LD_INT 0
63061: DOUBLE
63062: EQUAL
63063: IFTRUE 63073
63065: LD_INT 1
63067: DOUBLE
63068: EQUAL
63069: IFTRUE 63073
63071: GO 63274
63073: POP
// case nation of nation_american :
63074: LD_VAR 0 5
63078: PUSH
63079: LD_INT 1
63081: DOUBLE
63082: EQUAL
63083: IFTRUE 63087
63085: GO 63143
63087: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63088: LD_ADDR_VAR 0 9
63092: PUSH
63093: LD_VAR 0 11
63097: PUSH
63098: LD_VAR 0 12
63102: PUSH
63103: LD_VAR 0 13
63107: PUSH
63108: LD_VAR 0 14
63112: PUSH
63113: LD_VAR 0 15
63117: PUSH
63118: LD_VAR 0 16
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: PUSH
63131: LD_VAR 0 4
63135: PUSH
63136: LD_INT 1
63138: PLUS
63139: ARRAY
63140: ST_TO_ADDR
63141: GO 63272
63143: LD_INT 2
63145: DOUBLE
63146: EQUAL
63147: IFTRUE 63151
63149: GO 63207
63151: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63152: LD_ADDR_VAR 0 9
63156: PUSH
63157: LD_VAR 0 17
63161: PUSH
63162: LD_VAR 0 18
63166: PUSH
63167: LD_VAR 0 19
63171: PUSH
63172: LD_VAR 0 20
63176: PUSH
63177: LD_VAR 0 21
63181: PUSH
63182: LD_VAR 0 22
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: PUSH
63195: LD_VAR 0 4
63199: PUSH
63200: LD_INT 1
63202: PLUS
63203: ARRAY
63204: ST_TO_ADDR
63205: GO 63272
63207: LD_INT 3
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63271
63215: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63216: LD_ADDR_VAR 0 9
63220: PUSH
63221: LD_VAR 0 23
63225: PUSH
63226: LD_VAR 0 24
63230: PUSH
63231: LD_VAR 0 25
63235: PUSH
63236: LD_VAR 0 26
63240: PUSH
63241: LD_VAR 0 27
63245: PUSH
63246: LD_VAR 0 28
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: PUSH
63259: LD_VAR 0 4
63263: PUSH
63264: LD_INT 1
63266: PLUS
63267: ARRAY
63268: ST_TO_ADDR
63269: GO 63272
63271: POP
63272: GO 63827
63274: LD_INT 2
63276: DOUBLE
63277: EQUAL
63278: IFTRUE 63288
63280: LD_INT 3
63282: DOUBLE
63283: EQUAL
63284: IFTRUE 63288
63286: GO 63344
63288: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63289: LD_ADDR_VAR 0 9
63293: PUSH
63294: LD_VAR 0 29
63298: PUSH
63299: LD_VAR 0 30
63303: PUSH
63304: LD_VAR 0 31
63308: PUSH
63309: LD_VAR 0 32
63313: PUSH
63314: LD_VAR 0 33
63318: PUSH
63319: LD_VAR 0 34
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: PUSH
63332: LD_VAR 0 4
63336: PUSH
63337: LD_INT 1
63339: PLUS
63340: ARRAY
63341: ST_TO_ADDR
63342: GO 63827
63344: LD_INT 16
63346: DOUBLE
63347: EQUAL
63348: IFTRUE 63406
63350: LD_INT 17
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63406
63356: LD_INT 18
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63406
63362: LD_INT 19
63364: DOUBLE
63365: EQUAL
63366: IFTRUE 63406
63368: LD_INT 22
63370: DOUBLE
63371: EQUAL
63372: IFTRUE 63406
63374: LD_INT 20
63376: DOUBLE
63377: EQUAL
63378: IFTRUE 63406
63380: LD_INT 21
63382: DOUBLE
63383: EQUAL
63384: IFTRUE 63406
63386: LD_INT 23
63388: DOUBLE
63389: EQUAL
63390: IFTRUE 63406
63392: LD_INT 24
63394: DOUBLE
63395: EQUAL
63396: IFTRUE 63406
63398: LD_INT 25
63400: DOUBLE
63401: EQUAL
63402: IFTRUE 63406
63404: GO 63462
63406: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63407: LD_ADDR_VAR 0 9
63411: PUSH
63412: LD_VAR 0 35
63416: PUSH
63417: LD_VAR 0 36
63421: PUSH
63422: LD_VAR 0 37
63426: PUSH
63427: LD_VAR 0 38
63431: PUSH
63432: LD_VAR 0 39
63436: PUSH
63437: LD_VAR 0 40
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: PUSH
63450: LD_VAR 0 4
63454: PUSH
63455: LD_INT 1
63457: PLUS
63458: ARRAY
63459: ST_TO_ADDR
63460: GO 63827
63462: LD_INT 6
63464: DOUBLE
63465: EQUAL
63466: IFTRUE 63518
63468: LD_INT 7
63470: DOUBLE
63471: EQUAL
63472: IFTRUE 63518
63474: LD_INT 8
63476: DOUBLE
63477: EQUAL
63478: IFTRUE 63518
63480: LD_INT 13
63482: DOUBLE
63483: EQUAL
63484: IFTRUE 63518
63486: LD_INT 12
63488: DOUBLE
63489: EQUAL
63490: IFTRUE 63518
63492: LD_INT 15
63494: DOUBLE
63495: EQUAL
63496: IFTRUE 63518
63498: LD_INT 11
63500: DOUBLE
63501: EQUAL
63502: IFTRUE 63518
63504: LD_INT 14
63506: DOUBLE
63507: EQUAL
63508: IFTRUE 63518
63510: LD_INT 10
63512: DOUBLE
63513: EQUAL
63514: IFTRUE 63518
63516: GO 63574
63518: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63519: LD_ADDR_VAR 0 9
63523: PUSH
63524: LD_VAR 0 41
63528: PUSH
63529: LD_VAR 0 42
63533: PUSH
63534: LD_VAR 0 43
63538: PUSH
63539: LD_VAR 0 44
63543: PUSH
63544: LD_VAR 0 45
63548: PUSH
63549: LD_VAR 0 46
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: PUSH
63562: LD_VAR 0 4
63566: PUSH
63567: LD_INT 1
63569: PLUS
63570: ARRAY
63571: ST_TO_ADDR
63572: GO 63827
63574: LD_INT 36
63576: DOUBLE
63577: EQUAL
63578: IFTRUE 63582
63580: GO 63638
63582: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63583: LD_ADDR_VAR 0 9
63587: PUSH
63588: LD_VAR 0 47
63592: PUSH
63593: LD_VAR 0 48
63597: PUSH
63598: LD_VAR 0 49
63602: PUSH
63603: LD_VAR 0 50
63607: PUSH
63608: LD_VAR 0 51
63612: PUSH
63613: LD_VAR 0 52
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: PUSH
63626: LD_VAR 0 4
63630: PUSH
63631: LD_INT 1
63633: PLUS
63634: ARRAY
63635: ST_TO_ADDR
63636: GO 63827
63638: LD_INT 4
63640: DOUBLE
63641: EQUAL
63642: IFTRUE 63664
63644: LD_INT 5
63646: DOUBLE
63647: EQUAL
63648: IFTRUE 63664
63650: LD_INT 34
63652: DOUBLE
63653: EQUAL
63654: IFTRUE 63664
63656: LD_INT 37
63658: DOUBLE
63659: EQUAL
63660: IFTRUE 63664
63662: GO 63720
63664: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63665: LD_ADDR_VAR 0 9
63669: PUSH
63670: LD_VAR 0 53
63674: PUSH
63675: LD_VAR 0 54
63679: PUSH
63680: LD_VAR 0 55
63684: PUSH
63685: LD_VAR 0 56
63689: PUSH
63690: LD_VAR 0 57
63694: PUSH
63695: LD_VAR 0 58
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: PUSH
63708: LD_VAR 0 4
63712: PUSH
63713: LD_INT 1
63715: PLUS
63716: ARRAY
63717: ST_TO_ADDR
63718: GO 63827
63720: LD_INT 31
63722: DOUBLE
63723: EQUAL
63724: IFTRUE 63770
63726: LD_INT 32
63728: DOUBLE
63729: EQUAL
63730: IFTRUE 63770
63732: LD_INT 33
63734: DOUBLE
63735: EQUAL
63736: IFTRUE 63770
63738: LD_INT 27
63740: DOUBLE
63741: EQUAL
63742: IFTRUE 63770
63744: LD_INT 26
63746: DOUBLE
63747: EQUAL
63748: IFTRUE 63770
63750: LD_INT 28
63752: DOUBLE
63753: EQUAL
63754: IFTRUE 63770
63756: LD_INT 29
63758: DOUBLE
63759: EQUAL
63760: IFTRUE 63770
63762: LD_INT 30
63764: DOUBLE
63765: EQUAL
63766: IFTRUE 63770
63768: GO 63826
63770: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63771: LD_ADDR_VAR 0 9
63775: PUSH
63776: LD_VAR 0 59
63780: PUSH
63781: LD_VAR 0 60
63785: PUSH
63786: LD_VAR 0 61
63790: PUSH
63791: LD_VAR 0 62
63795: PUSH
63796: LD_VAR 0 63
63800: PUSH
63801: LD_VAR 0 64
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: PUSH
63814: LD_VAR 0 4
63818: PUSH
63819: LD_INT 1
63821: PLUS
63822: ARRAY
63823: ST_TO_ADDR
63824: GO 63827
63826: POP
// temp_list2 = [ ] ;
63827: LD_ADDR_VAR 0 10
63831: PUSH
63832: EMPTY
63833: ST_TO_ADDR
// for i in temp_list do
63834: LD_ADDR_VAR 0 8
63838: PUSH
63839: LD_VAR 0 9
63843: PUSH
63844: FOR_IN
63845: IFFALSE 63897
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63847: LD_ADDR_VAR 0 10
63851: PUSH
63852: LD_VAR 0 10
63856: PUSH
63857: LD_VAR 0 8
63861: PUSH
63862: LD_INT 1
63864: ARRAY
63865: PUSH
63866: LD_VAR 0 2
63870: PLUS
63871: PUSH
63872: LD_VAR 0 8
63876: PUSH
63877: LD_INT 2
63879: ARRAY
63880: PUSH
63881: LD_VAR 0 3
63885: PLUS
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: EMPTY
63892: LIST
63893: ADD
63894: ST_TO_ADDR
63895: GO 63844
63897: POP
63898: POP
// result = temp_list2 ;
63899: LD_ADDR_VAR 0 7
63903: PUSH
63904: LD_VAR 0 10
63908: ST_TO_ADDR
// end ;
63909: LD_VAR 0 7
63913: RET
// export function EnemyInRange ( unit , dist ) ; begin
63914: LD_INT 0
63916: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63917: LD_ADDR_VAR 0 3
63921: PUSH
63922: LD_VAR 0 1
63926: PPUSH
63927: CALL_OW 255
63931: PPUSH
63932: LD_VAR 0 1
63936: PPUSH
63937: CALL_OW 250
63941: PPUSH
63942: LD_VAR 0 1
63946: PPUSH
63947: CALL_OW 251
63951: PPUSH
63952: LD_VAR 0 2
63956: PPUSH
63957: CALL 37316 0 4
63961: PUSH
63962: LD_INT 4
63964: ARRAY
63965: ST_TO_ADDR
// end ;
63966: LD_VAR 0 3
63970: RET
// export function PlayerSeeMe ( unit ) ; begin
63971: LD_INT 0
63973: PPUSH
// result := See ( your_side , unit ) ;
63974: LD_ADDR_VAR 0 2
63978: PUSH
63979: LD_OWVAR 2
63983: PPUSH
63984: LD_VAR 0 1
63988: PPUSH
63989: CALL_OW 292
63993: ST_TO_ADDR
// end ;
63994: LD_VAR 0 2
63998: RET
// export function ReverseDir ( unit ) ; begin
63999: LD_INT 0
64001: PPUSH
// if not unit then
64002: LD_VAR 0 1
64006: NOT
64007: IFFALSE 64011
// exit ;
64009: GO 64034
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64011: LD_ADDR_VAR 0 2
64015: PUSH
64016: LD_VAR 0 1
64020: PPUSH
64021: CALL_OW 254
64025: PUSH
64026: LD_INT 3
64028: PLUS
64029: PUSH
64030: LD_INT 6
64032: MOD
64033: ST_TO_ADDR
// end ;
64034: LD_VAR 0 2
64038: RET
// export function ReverseArray ( array ) ; var i ; begin
64039: LD_INT 0
64041: PPUSH
64042: PPUSH
// if not array then
64043: LD_VAR 0 1
64047: NOT
64048: IFFALSE 64052
// exit ;
64050: GO 64107
// result := [ ] ;
64052: LD_ADDR_VAR 0 2
64056: PUSH
64057: EMPTY
64058: ST_TO_ADDR
// for i := array downto 1 do
64059: LD_ADDR_VAR 0 3
64063: PUSH
64064: DOUBLE
64065: LD_VAR 0 1
64069: INC
64070: ST_TO_ADDR
64071: LD_INT 1
64073: PUSH
64074: FOR_DOWNTO
64075: IFFALSE 64105
// result := Join ( result , array [ i ] ) ;
64077: LD_ADDR_VAR 0 2
64081: PUSH
64082: LD_VAR 0 2
64086: PPUSH
64087: LD_VAR 0 1
64091: PUSH
64092: LD_VAR 0 3
64096: ARRAY
64097: PPUSH
64098: CALL 68751 0 2
64102: ST_TO_ADDR
64103: GO 64074
64105: POP
64106: POP
// end ;
64107: LD_VAR 0 2
64111: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64112: LD_INT 0
64114: PPUSH
64115: PPUSH
64116: PPUSH
64117: PPUSH
64118: PPUSH
64119: PPUSH
// if not unit or not hexes then
64120: LD_VAR 0 1
64124: NOT
64125: PUSH
64126: LD_VAR 0 2
64130: NOT
64131: OR
64132: IFFALSE 64136
// exit ;
64134: GO 64259
// dist := 9999 ;
64136: LD_ADDR_VAR 0 5
64140: PUSH
64141: LD_INT 9999
64143: ST_TO_ADDR
// for i = 1 to hexes do
64144: LD_ADDR_VAR 0 4
64148: PUSH
64149: DOUBLE
64150: LD_INT 1
64152: DEC
64153: ST_TO_ADDR
64154: LD_VAR 0 2
64158: PUSH
64159: FOR_TO
64160: IFFALSE 64247
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64162: LD_ADDR_VAR 0 6
64166: PUSH
64167: LD_VAR 0 1
64171: PPUSH
64172: LD_VAR 0 2
64176: PUSH
64177: LD_VAR 0 4
64181: ARRAY
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PPUSH
64187: LD_VAR 0 2
64191: PUSH
64192: LD_VAR 0 4
64196: ARRAY
64197: PUSH
64198: LD_INT 2
64200: ARRAY
64201: PPUSH
64202: CALL_OW 297
64206: ST_TO_ADDR
// if tdist < dist then
64207: LD_VAR 0 6
64211: PUSH
64212: LD_VAR 0 5
64216: LESS
64217: IFFALSE 64245
// begin hex := hexes [ i ] ;
64219: LD_ADDR_VAR 0 8
64223: PUSH
64224: LD_VAR 0 2
64228: PUSH
64229: LD_VAR 0 4
64233: ARRAY
64234: ST_TO_ADDR
// dist := tdist ;
64235: LD_ADDR_VAR 0 5
64239: PUSH
64240: LD_VAR 0 6
64244: ST_TO_ADDR
// end ; end ;
64245: GO 64159
64247: POP
64248: POP
// result := hex ;
64249: LD_ADDR_VAR 0 3
64253: PUSH
64254: LD_VAR 0 8
64258: ST_TO_ADDR
// end ;
64259: LD_VAR 0 3
64263: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64264: LD_INT 0
64266: PPUSH
64267: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64268: LD_VAR 0 1
64272: NOT
64273: PUSH
64274: LD_VAR 0 1
64278: PUSH
64279: LD_INT 21
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 23
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PPUSH
64303: CALL_OW 69
64307: IN
64308: NOT
64309: OR
64310: IFFALSE 64314
// exit ;
64312: GO 64361
// for i = 1 to 3 do
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: DOUBLE
64320: LD_INT 1
64322: DEC
64323: ST_TO_ADDR
64324: LD_INT 3
64326: PUSH
64327: FOR_TO
64328: IFFALSE 64359
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64330: LD_VAR 0 1
64334: PPUSH
64335: CALL_OW 250
64339: PPUSH
64340: LD_VAR 0 1
64344: PPUSH
64345: CALL_OW 251
64349: PPUSH
64350: LD_INT 1
64352: PPUSH
64353: CALL_OW 453
64357: GO 64327
64359: POP
64360: POP
// end ;
64361: LD_VAR 0 2
64365: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64366: LD_INT 0
64368: PPUSH
64369: PPUSH
64370: PPUSH
64371: PPUSH
64372: PPUSH
64373: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64374: LD_VAR 0 1
64378: NOT
64379: PUSH
64380: LD_VAR 0 2
64384: NOT
64385: OR
64386: PUSH
64387: LD_VAR 0 1
64391: PPUSH
64392: CALL_OW 314
64396: OR
64397: IFFALSE 64401
// exit ;
64399: GO 64868
// if GetLives ( i ) < 250 then
64401: LD_VAR 0 4
64405: PPUSH
64406: CALL_OW 256
64410: PUSH
64411: LD_INT 250
64413: LESS
64414: IFFALSE 64427
// begin ComAutodestruct ( i ) ;
64416: LD_VAR 0 4
64420: PPUSH
64421: CALL 64264 0 1
// exit ;
64425: GO 64868
// end ; x := GetX ( enemy_unit ) ;
64427: LD_ADDR_VAR 0 7
64431: PUSH
64432: LD_VAR 0 2
64436: PPUSH
64437: CALL_OW 250
64441: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64442: LD_ADDR_VAR 0 8
64446: PUSH
64447: LD_VAR 0 2
64451: PPUSH
64452: CALL_OW 251
64456: ST_TO_ADDR
// if not x or not y then
64457: LD_VAR 0 7
64461: NOT
64462: PUSH
64463: LD_VAR 0 8
64467: NOT
64468: OR
64469: IFFALSE 64473
// exit ;
64471: GO 64868
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64473: LD_ADDR_VAR 0 6
64477: PUSH
64478: LD_VAR 0 7
64482: PPUSH
64483: LD_INT 0
64485: PPUSH
64486: LD_INT 4
64488: PPUSH
64489: CALL_OW 272
64493: PUSH
64494: LD_VAR 0 8
64498: PPUSH
64499: LD_INT 0
64501: PPUSH
64502: LD_INT 4
64504: PPUSH
64505: CALL_OW 273
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_VAR 0 7
64518: PPUSH
64519: LD_INT 1
64521: PPUSH
64522: LD_INT 4
64524: PPUSH
64525: CALL_OW 272
64529: PUSH
64530: LD_VAR 0 8
64534: PPUSH
64535: LD_INT 1
64537: PPUSH
64538: LD_INT 4
64540: PPUSH
64541: CALL_OW 273
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_VAR 0 7
64554: PPUSH
64555: LD_INT 2
64557: PPUSH
64558: LD_INT 4
64560: PPUSH
64561: CALL_OW 272
64565: PUSH
64566: LD_VAR 0 8
64570: PPUSH
64571: LD_INT 2
64573: PPUSH
64574: LD_INT 4
64576: PPUSH
64577: CALL_OW 273
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_VAR 0 7
64590: PPUSH
64591: LD_INT 3
64593: PPUSH
64594: LD_INT 4
64596: PPUSH
64597: CALL_OW 272
64601: PUSH
64602: LD_VAR 0 8
64606: PPUSH
64607: LD_INT 3
64609: PPUSH
64610: LD_INT 4
64612: PPUSH
64613: CALL_OW 273
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_VAR 0 7
64626: PPUSH
64627: LD_INT 4
64629: PPUSH
64630: LD_INT 4
64632: PPUSH
64633: CALL_OW 272
64637: PUSH
64638: LD_VAR 0 8
64642: PPUSH
64643: LD_INT 4
64645: PPUSH
64646: LD_INT 4
64648: PPUSH
64649: CALL_OW 273
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_VAR 0 7
64662: PPUSH
64663: LD_INT 5
64665: PPUSH
64666: LD_INT 4
64668: PPUSH
64669: CALL_OW 272
64673: PUSH
64674: LD_VAR 0 8
64678: PPUSH
64679: LD_INT 5
64681: PPUSH
64682: LD_INT 4
64684: PPUSH
64685: CALL_OW 273
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: ST_TO_ADDR
// for i = tmp downto 1 do
64702: LD_ADDR_VAR 0 4
64706: PUSH
64707: DOUBLE
64708: LD_VAR 0 6
64712: INC
64713: ST_TO_ADDR
64714: LD_INT 1
64716: PUSH
64717: FOR_DOWNTO
64718: IFFALSE 64819
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64720: LD_VAR 0 6
64724: PUSH
64725: LD_VAR 0 4
64729: ARRAY
64730: PUSH
64731: LD_INT 1
64733: ARRAY
64734: PPUSH
64735: LD_VAR 0 6
64739: PUSH
64740: LD_VAR 0 4
64744: ARRAY
64745: PUSH
64746: LD_INT 2
64748: ARRAY
64749: PPUSH
64750: CALL_OW 488
64754: NOT
64755: PUSH
64756: LD_VAR 0 6
64760: PUSH
64761: LD_VAR 0 4
64765: ARRAY
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 6
64775: PUSH
64776: LD_VAR 0 4
64780: ARRAY
64781: PUSH
64782: LD_INT 2
64784: ARRAY
64785: PPUSH
64786: CALL_OW 428
64790: PUSH
64791: LD_INT 0
64793: NONEQUAL
64794: OR
64795: IFFALSE 64817
// tmp := Delete ( tmp , i ) ;
64797: LD_ADDR_VAR 0 6
64801: PUSH
64802: LD_VAR 0 6
64806: PPUSH
64807: LD_VAR 0 4
64811: PPUSH
64812: CALL_OW 3
64816: ST_TO_ADDR
64817: GO 64717
64819: POP
64820: POP
// j := GetClosestHex ( unit , tmp ) ;
64821: LD_ADDR_VAR 0 5
64825: PUSH
64826: LD_VAR 0 1
64830: PPUSH
64831: LD_VAR 0 6
64835: PPUSH
64836: CALL 64112 0 2
64840: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64841: LD_VAR 0 1
64845: PPUSH
64846: LD_VAR 0 5
64850: PUSH
64851: LD_INT 1
64853: ARRAY
64854: PPUSH
64855: LD_VAR 0 5
64859: PUSH
64860: LD_INT 2
64862: ARRAY
64863: PPUSH
64864: CALL_OW 111
// end ;
64868: LD_VAR 0 3
64872: RET
// export function PrepareApemanSoldier ( ) ; begin
64873: LD_INT 0
64875: PPUSH
// uc_nation := 0 ;
64876: LD_ADDR_OWVAR 21
64880: PUSH
64881: LD_INT 0
64883: ST_TO_ADDR
// hc_sex := sex_male ;
64884: LD_ADDR_OWVAR 27
64888: PUSH
64889: LD_INT 1
64891: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64892: LD_ADDR_OWVAR 28
64896: PUSH
64897: LD_INT 15
64899: ST_TO_ADDR
// hc_gallery :=  ;
64900: LD_ADDR_OWVAR 33
64904: PUSH
64905: LD_STRING 
64907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64908: LD_ADDR_OWVAR 31
64912: PUSH
64913: LD_INT 0
64915: PPUSH
64916: LD_INT 3
64918: PPUSH
64919: CALL_OW 12
64923: PUSH
64924: LD_INT 0
64926: PPUSH
64927: LD_INT 3
64929: PPUSH
64930: CALL_OW 12
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// end ;
64947: LD_VAR 0 1
64951: RET
// export function PrepareApemanEngineer ( ) ; begin
64952: LD_INT 0
64954: PPUSH
// uc_nation := 0 ;
64955: LD_ADDR_OWVAR 21
64959: PUSH
64960: LD_INT 0
64962: ST_TO_ADDR
// hc_sex := sex_male ;
64963: LD_ADDR_OWVAR 27
64967: PUSH
64968: LD_INT 1
64970: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64971: LD_ADDR_OWVAR 28
64975: PUSH
64976: LD_INT 16
64978: ST_TO_ADDR
// hc_gallery :=  ;
64979: LD_ADDR_OWVAR 33
64983: PUSH
64984: LD_STRING 
64986: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64987: LD_ADDR_OWVAR 31
64991: PUSH
64992: LD_INT 0
64994: PPUSH
64995: LD_INT 3
64997: PPUSH
64998: CALL_OW 12
65002: PUSH
65003: LD_INT 0
65005: PPUSH
65006: LD_INT 3
65008: PPUSH
65009: CALL_OW 12
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: ST_TO_ADDR
// end ;
65026: LD_VAR 0 1
65030: RET
// export function PrepareApeman ( agressivity ) ; begin
65031: LD_INT 0
65033: PPUSH
// uc_side := 0 ;
65034: LD_ADDR_OWVAR 20
65038: PUSH
65039: LD_INT 0
65041: ST_TO_ADDR
// uc_nation := 0 ;
65042: LD_ADDR_OWVAR 21
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
// hc_sex := sex_male ;
65050: LD_ADDR_OWVAR 27
65054: PUSH
65055: LD_INT 1
65057: ST_TO_ADDR
// hc_class := class_apeman ;
65058: LD_ADDR_OWVAR 28
65062: PUSH
65063: LD_INT 12
65065: ST_TO_ADDR
// hc_gallery :=  ;
65066: LD_ADDR_OWVAR 33
65070: PUSH
65071: LD_STRING 
65073: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65074: LD_ADDR_OWVAR 35
65078: PUSH
65079: LD_VAR 0 1
65083: NEG
65084: PPUSH
65085: LD_VAR 0 1
65089: PPUSH
65090: CALL_OW 12
65094: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65095: LD_ADDR_OWVAR 31
65099: PUSH
65100: LD_INT 0
65102: PPUSH
65103: LD_INT 3
65105: PPUSH
65106: CALL_OW 12
65110: PUSH
65111: LD_INT 0
65113: PPUSH
65114: LD_INT 3
65116: PPUSH
65117: CALL_OW 12
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: ST_TO_ADDR
// end ;
65134: LD_VAR 0 2
65138: RET
// export function PrepareTiger ( agressivity ) ; begin
65139: LD_INT 0
65141: PPUSH
// uc_side := 0 ;
65142: LD_ADDR_OWVAR 20
65146: PUSH
65147: LD_INT 0
65149: ST_TO_ADDR
// uc_nation := 0 ;
65150: LD_ADDR_OWVAR 21
65154: PUSH
65155: LD_INT 0
65157: ST_TO_ADDR
// hc_class := class_tiger ;
65158: LD_ADDR_OWVAR 28
65162: PUSH
65163: LD_INT 14
65165: ST_TO_ADDR
// hc_gallery :=  ;
65166: LD_ADDR_OWVAR 33
65170: PUSH
65171: LD_STRING 
65173: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65174: LD_ADDR_OWVAR 35
65178: PUSH
65179: LD_VAR 0 1
65183: NEG
65184: PPUSH
65185: LD_VAR 0 1
65189: PPUSH
65190: CALL_OW 12
65194: ST_TO_ADDR
// end ;
65195: LD_VAR 0 2
65199: RET
// export function PrepareEnchidna ( ) ; begin
65200: LD_INT 0
65202: PPUSH
// uc_side := 0 ;
65203: LD_ADDR_OWVAR 20
65207: PUSH
65208: LD_INT 0
65210: ST_TO_ADDR
// uc_nation := 0 ;
65211: LD_ADDR_OWVAR 21
65215: PUSH
65216: LD_INT 0
65218: ST_TO_ADDR
// hc_class := class_baggie ;
65219: LD_ADDR_OWVAR 28
65223: PUSH
65224: LD_INT 13
65226: ST_TO_ADDR
// hc_gallery :=  ;
65227: LD_ADDR_OWVAR 33
65231: PUSH
65232: LD_STRING 
65234: ST_TO_ADDR
// end ;
65235: LD_VAR 0 1
65239: RET
// export function PrepareFrog ( ) ; begin
65240: LD_INT 0
65242: PPUSH
// uc_side := 0 ;
65243: LD_ADDR_OWVAR 20
65247: PUSH
65248: LD_INT 0
65250: ST_TO_ADDR
// uc_nation := 0 ;
65251: LD_ADDR_OWVAR 21
65255: PUSH
65256: LD_INT 0
65258: ST_TO_ADDR
// hc_class := class_frog ;
65259: LD_ADDR_OWVAR 28
65263: PUSH
65264: LD_INT 19
65266: ST_TO_ADDR
// hc_gallery :=  ;
65267: LD_ADDR_OWVAR 33
65271: PUSH
65272: LD_STRING 
65274: ST_TO_ADDR
// end ;
65275: LD_VAR 0 1
65279: RET
// export function PrepareFish ( ) ; begin
65280: LD_INT 0
65282: PPUSH
// uc_side := 0 ;
65283: LD_ADDR_OWVAR 20
65287: PUSH
65288: LD_INT 0
65290: ST_TO_ADDR
// uc_nation := 0 ;
65291: LD_ADDR_OWVAR 21
65295: PUSH
65296: LD_INT 0
65298: ST_TO_ADDR
// hc_class := class_fish ;
65299: LD_ADDR_OWVAR 28
65303: PUSH
65304: LD_INT 20
65306: ST_TO_ADDR
// hc_gallery :=  ;
65307: LD_ADDR_OWVAR 33
65311: PUSH
65312: LD_STRING 
65314: ST_TO_ADDR
// end ;
65315: LD_VAR 0 1
65319: RET
// export function PrepareBird ( ) ; begin
65320: LD_INT 0
65322: PPUSH
// uc_side := 0 ;
65323: LD_ADDR_OWVAR 20
65327: PUSH
65328: LD_INT 0
65330: ST_TO_ADDR
// uc_nation := 0 ;
65331: LD_ADDR_OWVAR 21
65335: PUSH
65336: LD_INT 0
65338: ST_TO_ADDR
// hc_class := class_phororhacos ;
65339: LD_ADDR_OWVAR 28
65343: PUSH
65344: LD_INT 18
65346: ST_TO_ADDR
// hc_gallery :=  ;
65347: LD_ADDR_OWVAR 33
65351: PUSH
65352: LD_STRING 
65354: ST_TO_ADDR
// end ;
65355: LD_VAR 0 1
65359: RET
// export function PrepareHorse ( ) ; begin
65360: LD_INT 0
65362: PPUSH
// uc_side := 0 ;
65363: LD_ADDR_OWVAR 20
65367: PUSH
65368: LD_INT 0
65370: ST_TO_ADDR
// uc_nation := 0 ;
65371: LD_ADDR_OWVAR 21
65375: PUSH
65376: LD_INT 0
65378: ST_TO_ADDR
// hc_class := class_horse ;
65379: LD_ADDR_OWVAR 28
65383: PUSH
65384: LD_INT 21
65386: ST_TO_ADDR
// hc_gallery :=  ;
65387: LD_ADDR_OWVAR 33
65391: PUSH
65392: LD_STRING 
65394: ST_TO_ADDR
// end ;
65395: LD_VAR 0 1
65399: RET
// export function PrepareMastodont ( ) ; begin
65400: LD_INT 0
65402: PPUSH
// uc_side := 0 ;
65403: LD_ADDR_OWVAR 20
65407: PUSH
65408: LD_INT 0
65410: ST_TO_ADDR
// uc_nation := 0 ;
65411: LD_ADDR_OWVAR 21
65415: PUSH
65416: LD_INT 0
65418: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65419: LD_ADDR_OWVAR 37
65423: PUSH
65424: LD_INT 31
65426: ST_TO_ADDR
// vc_control := control_rider ;
65427: LD_ADDR_OWVAR 38
65431: PUSH
65432: LD_INT 4
65434: ST_TO_ADDR
// end ;
65435: LD_VAR 0 1
65439: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65440: LD_INT 0
65442: PPUSH
65443: PPUSH
65444: PPUSH
// uc_side = 0 ;
65445: LD_ADDR_OWVAR 20
65449: PUSH
65450: LD_INT 0
65452: ST_TO_ADDR
// uc_nation = 0 ;
65453: LD_ADDR_OWVAR 21
65457: PUSH
65458: LD_INT 0
65460: ST_TO_ADDR
// InitHc_All ( ) ;
65461: CALL_OW 584
// InitVc ;
65465: CALL_OW 20
// if mastodonts then
65469: LD_VAR 0 6
65473: IFFALSE 65540
// for i = 1 to mastodonts do
65475: LD_ADDR_VAR 0 11
65479: PUSH
65480: DOUBLE
65481: LD_INT 1
65483: DEC
65484: ST_TO_ADDR
65485: LD_VAR 0 6
65489: PUSH
65490: FOR_TO
65491: IFFALSE 65538
// begin vc_chassis := 31 ;
65493: LD_ADDR_OWVAR 37
65497: PUSH
65498: LD_INT 31
65500: ST_TO_ADDR
// vc_control := control_rider ;
65501: LD_ADDR_OWVAR 38
65505: PUSH
65506: LD_INT 4
65508: ST_TO_ADDR
// animal := CreateVehicle ;
65509: LD_ADDR_VAR 0 12
65513: PUSH
65514: CALL_OW 45
65518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65519: LD_VAR 0 12
65523: PPUSH
65524: LD_VAR 0 8
65528: PPUSH
65529: LD_INT 0
65531: PPUSH
65532: CALL 67668 0 3
// end ;
65536: GO 65490
65538: POP
65539: POP
// if horses then
65540: LD_VAR 0 5
65544: IFFALSE 65611
// for i = 1 to horses do
65546: LD_ADDR_VAR 0 11
65550: PUSH
65551: DOUBLE
65552: LD_INT 1
65554: DEC
65555: ST_TO_ADDR
65556: LD_VAR 0 5
65560: PUSH
65561: FOR_TO
65562: IFFALSE 65609
// begin hc_class := 21 ;
65564: LD_ADDR_OWVAR 28
65568: PUSH
65569: LD_INT 21
65571: ST_TO_ADDR
// hc_gallery :=  ;
65572: LD_ADDR_OWVAR 33
65576: PUSH
65577: LD_STRING 
65579: ST_TO_ADDR
// animal := CreateHuman ;
65580: LD_ADDR_VAR 0 12
65584: PUSH
65585: CALL_OW 44
65589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65590: LD_VAR 0 12
65594: PPUSH
65595: LD_VAR 0 8
65599: PPUSH
65600: LD_INT 0
65602: PPUSH
65603: CALL 67668 0 3
// end ;
65607: GO 65561
65609: POP
65610: POP
// if birds then
65611: LD_VAR 0 1
65615: IFFALSE 65682
// for i = 1 to birds do
65617: LD_ADDR_VAR 0 11
65621: PUSH
65622: DOUBLE
65623: LD_INT 1
65625: DEC
65626: ST_TO_ADDR
65627: LD_VAR 0 1
65631: PUSH
65632: FOR_TO
65633: IFFALSE 65680
// begin hc_class = 18 ;
65635: LD_ADDR_OWVAR 28
65639: PUSH
65640: LD_INT 18
65642: ST_TO_ADDR
// hc_gallery =  ;
65643: LD_ADDR_OWVAR 33
65647: PUSH
65648: LD_STRING 
65650: ST_TO_ADDR
// animal := CreateHuman ;
65651: LD_ADDR_VAR 0 12
65655: PUSH
65656: CALL_OW 44
65660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65661: LD_VAR 0 12
65665: PPUSH
65666: LD_VAR 0 8
65670: PPUSH
65671: LD_INT 0
65673: PPUSH
65674: CALL 67668 0 3
// end ;
65678: GO 65632
65680: POP
65681: POP
// if tigers then
65682: LD_VAR 0 2
65686: IFFALSE 65770
// for i = 1 to tigers do
65688: LD_ADDR_VAR 0 11
65692: PUSH
65693: DOUBLE
65694: LD_INT 1
65696: DEC
65697: ST_TO_ADDR
65698: LD_VAR 0 2
65702: PUSH
65703: FOR_TO
65704: IFFALSE 65768
// begin hc_class = class_tiger ;
65706: LD_ADDR_OWVAR 28
65710: PUSH
65711: LD_INT 14
65713: ST_TO_ADDR
// hc_gallery =  ;
65714: LD_ADDR_OWVAR 33
65718: PUSH
65719: LD_STRING 
65721: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65722: LD_ADDR_OWVAR 35
65726: PUSH
65727: LD_INT 7
65729: NEG
65730: PPUSH
65731: LD_INT 7
65733: PPUSH
65734: CALL_OW 12
65738: ST_TO_ADDR
// animal := CreateHuman ;
65739: LD_ADDR_VAR 0 12
65743: PUSH
65744: CALL_OW 44
65748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65749: LD_VAR 0 12
65753: PPUSH
65754: LD_VAR 0 8
65758: PPUSH
65759: LD_INT 0
65761: PPUSH
65762: CALL 67668 0 3
// end ;
65766: GO 65703
65768: POP
65769: POP
// if apemans then
65770: LD_VAR 0 3
65774: IFFALSE 65897
// for i = 1 to apemans do
65776: LD_ADDR_VAR 0 11
65780: PUSH
65781: DOUBLE
65782: LD_INT 1
65784: DEC
65785: ST_TO_ADDR
65786: LD_VAR 0 3
65790: PUSH
65791: FOR_TO
65792: IFFALSE 65895
// begin hc_class = class_apeman ;
65794: LD_ADDR_OWVAR 28
65798: PUSH
65799: LD_INT 12
65801: ST_TO_ADDR
// hc_gallery =  ;
65802: LD_ADDR_OWVAR 33
65806: PUSH
65807: LD_STRING 
65809: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65810: LD_ADDR_OWVAR 35
65814: PUSH
65815: LD_INT 2
65817: NEG
65818: PPUSH
65819: LD_INT 2
65821: PPUSH
65822: CALL_OW 12
65826: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65827: LD_ADDR_OWVAR 31
65831: PUSH
65832: LD_INT 1
65834: PPUSH
65835: LD_INT 3
65837: PPUSH
65838: CALL_OW 12
65842: PUSH
65843: LD_INT 1
65845: PPUSH
65846: LD_INT 3
65848: PPUSH
65849: CALL_OW 12
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// animal := CreateHuman ;
65866: LD_ADDR_VAR 0 12
65870: PUSH
65871: CALL_OW 44
65875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65876: LD_VAR 0 12
65880: PPUSH
65881: LD_VAR 0 8
65885: PPUSH
65886: LD_INT 0
65888: PPUSH
65889: CALL 67668 0 3
// end ;
65893: GO 65791
65895: POP
65896: POP
// if enchidnas then
65897: LD_VAR 0 4
65901: IFFALSE 65968
// for i = 1 to enchidnas do
65903: LD_ADDR_VAR 0 11
65907: PUSH
65908: DOUBLE
65909: LD_INT 1
65911: DEC
65912: ST_TO_ADDR
65913: LD_VAR 0 4
65917: PUSH
65918: FOR_TO
65919: IFFALSE 65966
// begin hc_class = 13 ;
65921: LD_ADDR_OWVAR 28
65925: PUSH
65926: LD_INT 13
65928: ST_TO_ADDR
// hc_gallery =  ;
65929: LD_ADDR_OWVAR 33
65933: PUSH
65934: LD_STRING 
65936: ST_TO_ADDR
// animal := CreateHuman ;
65937: LD_ADDR_VAR 0 12
65941: PUSH
65942: CALL_OW 44
65946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65947: LD_VAR 0 12
65951: PPUSH
65952: LD_VAR 0 8
65956: PPUSH
65957: LD_INT 0
65959: PPUSH
65960: CALL 67668 0 3
// end ;
65964: GO 65918
65966: POP
65967: POP
// if fishes then
65968: LD_VAR 0 7
65972: IFFALSE 66039
// for i = 1 to fishes do
65974: LD_ADDR_VAR 0 11
65978: PUSH
65979: DOUBLE
65980: LD_INT 1
65982: DEC
65983: ST_TO_ADDR
65984: LD_VAR 0 7
65988: PUSH
65989: FOR_TO
65990: IFFALSE 66037
// begin hc_class = 20 ;
65992: LD_ADDR_OWVAR 28
65996: PUSH
65997: LD_INT 20
65999: ST_TO_ADDR
// hc_gallery =  ;
66000: LD_ADDR_OWVAR 33
66004: PUSH
66005: LD_STRING 
66007: ST_TO_ADDR
// animal := CreateHuman ;
66008: LD_ADDR_VAR 0 12
66012: PUSH
66013: CALL_OW 44
66017: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66018: LD_VAR 0 12
66022: PPUSH
66023: LD_VAR 0 9
66027: PPUSH
66028: LD_INT 0
66030: PPUSH
66031: CALL 67668 0 3
// end ;
66035: GO 65989
66037: POP
66038: POP
// end ;
66039: LD_VAR 0 10
66043: RET
// export function WantHeal ( sci , unit ) ; begin
66044: LD_INT 0
66046: PPUSH
// if GetTaskList ( sci ) > 0 then
66047: LD_VAR 0 1
66051: PPUSH
66052: CALL_OW 437
66056: PUSH
66057: LD_INT 0
66059: GREATER
66060: IFFALSE 66130
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66062: LD_VAR 0 1
66066: PPUSH
66067: CALL_OW 437
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: PUSH
66076: LD_INT 1
66078: ARRAY
66079: PUSH
66080: LD_STRING l
66082: EQUAL
66083: PUSH
66084: LD_VAR 0 1
66088: PPUSH
66089: CALL_OW 437
66093: PUSH
66094: LD_INT 1
66096: ARRAY
66097: PUSH
66098: LD_INT 4
66100: ARRAY
66101: PUSH
66102: LD_VAR 0 2
66106: EQUAL
66107: AND
66108: IFFALSE 66120
// result := true else
66110: LD_ADDR_VAR 0 3
66114: PUSH
66115: LD_INT 1
66117: ST_TO_ADDR
66118: GO 66128
// result := false ;
66120: LD_ADDR_VAR 0 3
66124: PUSH
66125: LD_INT 0
66127: ST_TO_ADDR
// end else
66128: GO 66138
// result := false ;
66130: LD_ADDR_VAR 0 3
66134: PUSH
66135: LD_INT 0
66137: ST_TO_ADDR
// end ;
66138: LD_VAR 0 3
66142: RET
// export function HealTarget ( sci ) ; begin
66143: LD_INT 0
66145: PPUSH
// if not sci then
66146: LD_VAR 0 1
66150: NOT
66151: IFFALSE 66155
// exit ;
66153: GO 66220
// result := 0 ;
66155: LD_ADDR_VAR 0 2
66159: PUSH
66160: LD_INT 0
66162: ST_TO_ADDR
// if GetTaskList ( sci ) then
66163: LD_VAR 0 1
66167: PPUSH
66168: CALL_OW 437
66172: IFFALSE 66220
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66174: LD_VAR 0 1
66178: PPUSH
66179: CALL_OW 437
66183: PUSH
66184: LD_INT 1
66186: ARRAY
66187: PUSH
66188: LD_INT 1
66190: ARRAY
66191: PUSH
66192: LD_STRING l
66194: EQUAL
66195: IFFALSE 66220
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66197: LD_ADDR_VAR 0 2
66201: PUSH
66202: LD_VAR 0 1
66206: PPUSH
66207: CALL_OW 437
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: PUSH
66216: LD_INT 4
66218: ARRAY
66219: ST_TO_ADDR
// end ;
66220: LD_VAR 0 2
66224: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66225: LD_INT 0
66227: PPUSH
66228: PPUSH
66229: PPUSH
66230: PPUSH
// if not base_units then
66231: LD_VAR 0 1
66235: NOT
66236: IFFALSE 66240
// exit ;
66238: GO 66327
// result := false ;
66240: LD_ADDR_VAR 0 2
66244: PUSH
66245: LD_INT 0
66247: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66248: LD_ADDR_VAR 0 5
66252: PUSH
66253: LD_VAR 0 1
66257: PPUSH
66258: LD_INT 21
66260: PUSH
66261: LD_INT 3
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PPUSH
66268: CALL_OW 72
66272: ST_TO_ADDR
// if not tmp then
66273: LD_VAR 0 5
66277: NOT
66278: IFFALSE 66282
// exit ;
66280: GO 66327
// for i in tmp do
66282: LD_ADDR_VAR 0 3
66286: PUSH
66287: LD_VAR 0 5
66291: PUSH
66292: FOR_IN
66293: IFFALSE 66325
// begin result := EnemyInRange ( i , 22 ) ;
66295: LD_ADDR_VAR 0 2
66299: PUSH
66300: LD_VAR 0 3
66304: PPUSH
66305: LD_INT 22
66307: PPUSH
66308: CALL 63914 0 2
66312: ST_TO_ADDR
// if result then
66313: LD_VAR 0 2
66317: IFFALSE 66323
// exit ;
66319: POP
66320: POP
66321: GO 66327
// end ;
66323: GO 66292
66325: POP
66326: POP
// end ;
66327: LD_VAR 0 2
66331: RET
// export function FilterByTag ( units , tag ) ; begin
66332: LD_INT 0
66334: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66335: LD_ADDR_VAR 0 3
66339: PUSH
66340: LD_VAR 0 1
66344: PPUSH
66345: LD_INT 120
66347: PUSH
66348: LD_VAR 0 2
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PPUSH
66357: CALL_OW 72
66361: ST_TO_ADDR
// end ;
66362: LD_VAR 0 3
66366: RET
// export function IsDriver ( un ) ; begin
66367: LD_INT 0
66369: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66370: LD_ADDR_VAR 0 2
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 55
66382: PUSH
66383: EMPTY
66384: LIST
66385: PPUSH
66386: CALL_OW 69
66390: IN
66391: ST_TO_ADDR
// end ;
66392: LD_VAR 0 2
66396: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66397: LD_INT 0
66399: PPUSH
66400: PPUSH
// list := [ ] ;
66401: LD_ADDR_VAR 0 5
66405: PUSH
66406: EMPTY
66407: ST_TO_ADDR
// case d of 0 :
66408: LD_VAR 0 3
66412: PUSH
66413: LD_INT 0
66415: DOUBLE
66416: EQUAL
66417: IFTRUE 66421
66419: GO 66554
66421: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66422: LD_ADDR_VAR 0 5
66426: PUSH
66427: LD_VAR 0 1
66431: PUSH
66432: LD_INT 4
66434: MINUS
66435: PUSH
66436: LD_VAR 0 2
66440: PUSH
66441: LD_INT 4
66443: MINUS
66444: PUSH
66445: LD_INT 2
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: PUSH
66453: LD_VAR 0 1
66457: PUSH
66458: LD_INT 3
66460: MINUS
66461: PUSH
66462: LD_VAR 0 2
66466: PUSH
66467: LD_INT 1
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: PUSH
66475: LD_VAR 0 1
66479: PUSH
66480: LD_INT 4
66482: PLUS
66483: PUSH
66484: LD_VAR 0 2
66488: PUSH
66489: LD_INT 4
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: PUSH
66497: LD_VAR 0 1
66501: PUSH
66502: LD_INT 3
66504: PLUS
66505: PUSH
66506: LD_VAR 0 2
66510: PUSH
66511: LD_INT 3
66513: PLUS
66514: PUSH
66515: LD_INT 5
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: LIST
66522: PUSH
66523: LD_VAR 0 1
66527: PUSH
66528: LD_VAR 0 2
66532: PUSH
66533: LD_INT 4
66535: PLUS
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: ST_TO_ADDR
// end ; 1 :
66552: GO 67252
66554: LD_INT 1
66556: DOUBLE
66557: EQUAL
66558: IFTRUE 66562
66560: GO 66695
66562: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66563: LD_ADDR_VAR 0 5
66567: PUSH
66568: LD_VAR 0 1
66572: PUSH
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 4
66580: MINUS
66581: PUSH
66582: LD_INT 3
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: PUSH
66590: LD_VAR 0 1
66594: PUSH
66595: LD_INT 3
66597: MINUS
66598: PUSH
66599: LD_VAR 0 2
66603: PUSH
66604: LD_INT 3
66606: MINUS
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: PUSH
66616: LD_VAR 0 1
66620: PUSH
66621: LD_INT 4
66623: MINUS
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: LIST
66637: PUSH
66638: LD_VAR 0 1
66642: PUSH
66643: LD_VAR 0 2
66647: PUSH
66648: LD_INT 3
66650: PLUS
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: PUSH
66660: LD_VAR 0 1
66664: PUSH
66665: LD_INT 4
66667: PLUS
66668: PUSH
66669: LD_VAR 0 2
66673: PUSH
66674: LD_INT 4
66676: PLUS
66677: PUSH
66678: LD_INT 5
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: ST_TO_ADDR
// end ; 2 :
66693: GO 67252
66695: LD_INT 2
66697: DOUBLE
66698: EQUAL
66699: IFTRUE 66703
66701: GO 66832
66703: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66704: LD_ADDR_VAR 0 5
66708: PUSH
66709: LD_VAR 0 1
66713: PUSH
66714: LD_VAR 0 2
66718: PUSH
66719: LD_INT 3
66721: MINUS
66722: PUSH
66723: LD_INT 3
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: PUSH
66731: LD_VAR 0 1
66735: PUSH
66736: LD_INT 4
66738: PLUS
66739: PUSH
66740: LD_VAR 0 2
66744: PUSH
66745: LD_INT 4
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: PUSH
66753: LD_VAR 0 1
66757: PUSH
66758: LD_VAR 0 2
66762: PUSH
66763: LD_INT 4
66765: PLUS
66766: PUSH
66767: LD_INT 0
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: PUSH
66775: LD_VAR 0 1
66779: PUSH
66780: LD_INT 3
66782: MINUS
66783: PUSH
66784: LD_VAR 0 2
66788: PUSH
66789: LD_INT 1
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: LIST
66796: PUSH
66797: LD_VAR 0 1
66801: PUSH
66802: LD_INT 4
66804: MINUS
66805: PUSH
66806: LD_VAR 0 2
66810: PUSH
66811: LD_INT 4
66813: MINUS
66814: PUSH
66815: LD_INT 2
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: ST_TO_ADDR
// end ; 3 :
66830: GO 67252
66832: LD_INT 3
66834: DOUBLE
66835: EQUAL
66836: IFTRUE 66840
66838: GO 66973
66840: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66841: LD_ADDR_VAR 0 5
66845: PUSH
66846: LD_VAR 0 1
66850: PUSH
66851: LD_INT 3
66853: PLUS
66854: PUSH
66855: LD_VAR 0 2
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: PUSH
66868: LD_VAR 0 1
66872: PUSH
66873: LD_INT 4
66875: PLUS
66876: PUSH
66877: LD_VAR 0 2
66881: PUSH
66882: LD_INT 4
66884: PLUS
66885: PUSH
66886: LD_INT 5
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: PUSH
66894: LD_VAR 0 1
66898: PUSH
66899: LD_INT 4
66901: MINUS
66902: PUSH
66903: LD_VAR 0 2
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: PUSH
66916: LD_VAR 0 1
66920: PUSH
66921: LD_VAR 0 2
66925: PUSH
66926: LD_INT 4
66928: MINUS
66929: PUSH
66930: LD_INT 3
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: LIST
66937: PUSH
66938: LD_VAR 0 1
66942: PUSH
66943: LD_INT 3
66945: MINUS
66946: PUSH
66947: LD_VAR 0 2
66951: PUSH
66952: LD_INT 3
66954: MINUS
66955: PUSH
66956: LD_INT 2
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: LIST
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: ST_TO_ADDR
// end ; 4 :
66971: GO 67252
66973: LD_INT 4
66975: DOUBLE
66976: EQUAL
66977: IFTRUE 66981
66979: GO 67114
66981: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66982: LD_ADDR_VAR 0 5
66986: PUSH
66987: LD_VAR 0 1
66991: PUSH
66992: LD_VAR 0 2
66996: PUSH
66997: LD_INT 4
66999: PLUS
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: PUSH
67009: LD_VAR 0 1
67013: PUSH
67014: LD_INT 3
67016: PLUS
67017: PUSH
67018: LD_VAR 0 2
67022: PUSH
67023: LD_INT 3
67025: PLUS
67026: PUSH
67027: LD_INT 5
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: LIST
67034: PUSH
67035: LD_VAR 0 1
67039: PUSH
67040: LD_INT 4
67042: PLUS
67043: PUSH
67044: LD_VAR 0 2
67048: PUSH
67049: LD_INT 4
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: PUSH
67057: LD_VAR 0 1
67061: PUSH
67062: LD_VAR 0 2
67066: PUSH
67067: LD_INT 3
67069: MINUS
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: LIST
67078: PUSH
67079: LD_VAR 0 1
67083: PUSH
67084: LD_INT 4
67086: MINUS
67087: PUSH
67088: LD_VAR 0 2
67092: PUSH
67093: LD_INT 4
67095: MINUS
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: ST_TO_ADDR
// end ; 5 :
67112: GO 67252
67114: LD_INT 5
67116: DOUBLE
67117: EQUAL
67118: IFTRUE 67122
67120: GO 67251
67122: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67123: LD_ADDR_VAR 0 5
67127: PUSH
67128: LD_VAR 0 1
67132: PUSH
67133: LD_INT 4
67135: MINUS
67136: PUSH
67137: LD_VAR 0 2
67141: PUSH
67142: LD_INT 1
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: PUSH
67150: LD_VAR 0 1
67154: PUSH
67155: LD_VAR 0 2
67159: PUSH
67160: LD_INT 4
67162: MINUS
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: LIST
67171: PUSH
67172: LD_VAR 0 1
67176: PUSH
67177: LD_INT 4
67179: PLUS
67180: PUSH
67181: LD_VAR 0 2
67185: PUSH
67186: LD_INT 4
67188: PLUS
67189: PUSH
67190: LD_INT 5
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: PUSH
67198: LD_VAR 0 1
67202: PUSH
67203: LD_INT 3
67205: PLUS
67206: PUSH
67207: LD_VAR 0 2
67211: PUSH
67212: LD_INT 4
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: LIST
67219: PUSH
67220: LD_VAR 0 1
67224: PUSH
67225: LD_VAR 0 2
67229: PUSH
67230: LD_INT 3
67232: PLUS
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: ST_TO_ADDR
// end ; end ;
67249: GO 67252
67251: POP
// result := list ;
67252: LD_ADDR_VAR 0 4
67256: PUSH
67257: LD_VAR 0 5
67261: ST_TO_ADDR
// end ;
67262: LD_VAR 0 4
67266: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67267: LD_INT 0
67269: PPUSH
67270: PPUSH
67271: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67272: LD_VAR 0 1
67276: NOT
67277: PUSH
67278: LD_VAR 0 2
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: LD_INT 2
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: LD_INT 4
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: IN
67301: NOT
67302: OR
67303: IFFALSE 67307
// exit ;
67305: GO 67390
// tmp := [ ] ;
67307: LD_ADDR_VAR 0 5
67311: PUSH
67312: EMPTY
67313: ST_TO_ADDR
// for i in units do
67314: LD_ADDR_VAR 0 4
67318: PUSH
67319: LD_VAR 0 1
67323: PUSH
67324: FOR_IN
67325: IFFALSE 67359
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67327: LD_ADDR_VAR 0 5
67331: PUSH
67332: LD_VAR 0 5
67336: PPUSH
67337: LD_VAR 0 4
67341: PPUSH
67342: LD_VAR 0 2
67346: PPUSH
67347: CALL_OW 259
67351: PPUSH
67352: CALL 68751 0 2
67356: ST_TO_ADDR
67357: GO 67324
67359: POP
67360: POP
// if not tmp then
67361: LD_VAR 0 5
67365: NOT
67366: IFFALSE 67370
// exit ;
67368: GO 67390
// result := SortListByListDesc ( units , tmp ) ;
67370: LD_ADDR_VAR 0 3
67374: PUSH
67375: LD_VAR 0 1
67379: PPUSH
67380: LD_VAR 0 5
67384: PPUSH
67385: CALL_OW 77
67389: ST_TO_ADDR
// end ;
67390: LD_VAR 0 3
67394: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67395: LD_INT 0
67397: PPUSH
67398: PPUSH
67399: PPUSH
// result := false ;
67400: LD_ADDR_VAR 0 3
67404: PUSH
67405: LD_INT 0
67407: ST_TO_ADDR
// if not building then
67408: LD_VAR 0 2
67412: NOT
67413: IFFALSE 67417
// exit ;
67415: GO 67555
// x := GetX ( building ) ;
67417: LD_ADDR_VAR 0 4
67421: PUSH
67422: LD_VAR 0 2
67426: PPUSH
67427: CALL_OW 250
67431: ST_TO_ADDR
// y := GetY ( building ) ;
67432: LD_ADDR_VAR 0 5
67436: PUSH
67437: LD_VAR 0 2
67441: PPUSH
67442: CALL_OW 251
67446: ST_TO_ADDR
// if not x or not y then
67447: LD_VAR 0 4
67451: NOT
67452: PUSH
67453: LD_VAR 0 5
67457: NOT
67458: OR
67459: IFFALSE 67463
// exit ;
67461: GO 67555
// if GetTaskList ( unit ) then
67463: LD_VAR 0 1
67467: PPUSH
67468: CALL_OW 437
67472: IFFALSE 67555
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67474: LD_STRING e
67476: PUSH
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 437
67486: PUSH
67487: LD_INT 1
67489: ARRAY
67490: PUSH
67491: LD_INT 1
67493: ARRAY
67494: EQUAL
67495: PUSH
67496: LD_VAR 0 4
67500: PUSH
67501: LD_VAR 0 1
67505: PPUSH
67506: CALL_OW 437
67510: PUSH
67511: LD_INT 1
67513: ARRAY
67514: PUSH
67515: LD_INT 2
67517: ARRAY
67518: EQUAL
67519: AND
67520: PUSH
67521: LD_VAR 0 5
67525: PUSH
67526: LD_VAR 0 1
67530: PPUSH
67531: CALL_OW 437
67535: PUSH
67536: LD_INT 1
67538: ARRAY
67539: PUSH
67540: LD_INT 3
67542: ARRAY
67543: EQUAL
67544: AND
67545: IFFALSE 67555
// result := true end ;
67547: LD_ADDR_VAR 0 3
67551: PUSH
67552: LD_INT 1
67554: ST_TO_ADDR
// end ;
67555: LD_VAR 0 3
67559: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67560: LD_INT 0
67562: PPUSH
// result := false ;
67563: LD_ADDR_VAR 0 4
67567: PUSH
67568: LD_INT 0
67570: ST_TO_ADDR
// if GetTaskList ( unit ) then
67571: LD_VAR 0 1
67575: PPUSH
67576: CALL_OW 437
67580: IFFALSE 67663
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67582: LD_STRING M
67584: PUSH
67585: LD_VAR 0 1
67589: PPUSH
67590: CALL_OW 437
67594: PUSH
67595: LD_INT 1
67597: ARRAY
67598: PUSH
67599: LD_INT 1
67601: ARRAY
67602: EQUAL
67603: PUSH
67604: LD_VAR 0 2
67608: PUSH
67609: LD_VAR 0 1
67613: PPUSH
67614: CALL_OW 437
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PUSH
67623: LD_INT 2
67625: ARRAY
67626: EQUAL
67627: AND
67628: PUSH
67629: LD_VAR 0 3
67633: PUSH
67634: LD_VAR 0 1
67638: PPUSH
67639: CALL_OW 437
67643: PUSH
67644: LD_INT 1
67646: ARRAY
67647: PUSH
67648: LD_INT 3
67650: ARRAY
67651: EQUAL
67652: AND
67653: IFFALSE 67663
// result := true ;
67655: LD_ADDR_VAR 0 4
67659: PUSH
67660: LD_INT 1
67662: ST_TO_ADDR
// end ; end ;
67663: LD_VAR 0 4
67667: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
67672: PPUSH
67673: PPUSH
// if not unit or not area then
67674: LD_VAR 0 1
67678: NOT
67679: PUSH
67680: LD_VAR 0 2
67684: NOT
67685: OR
67686: IFFALSE 67690
// exit ;
67688: GO 67854
// tmp := AreaToList ( area , i ) ;
67690: LD_ADDR_VAR 0 6
67694: PUSH
67695: LD_VAR 0 2
67699: PPUSH
67700: LD_VAR 0 5
67704: PPUSH
67705: CALL_OW 517
67709: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67710: LD_ADDR_VAR 0 5
67714: PUSH
67715: DOUBLE
67716: LD_INT 1
67718: DEC
67719: ST_TO_ADDR
67720: LD_VAR 0 6
67724: PUSH
67725: LD_INT 1
67727: ARRAY
67728: PUSH
67729: FOR_TO
67730: IFFALSE 67852
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67732: LD_ADDR_VAR 0 7
67736: PUSH
67737: LD_VAR 0 6
67741: PUSH
67742: LD_INT 1
67744: ARRAY
67745: PUSH
67746: LD_VAR 0 5
67750: ARRAY
67751: PUSH
67752: LD_VAR 0 6
67756: PUSH
67757: LD_INT 2
67759: ARRAY
67760: PUSH
67761: LD_VAR 0 5
67765: ARRAY
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67771: LD_VAR 0 7
67775: PUSH
67776: LD_INT 1
67778: ARRAY
67779: PPUSH
67780: LD_VAR 0 7
67784: PUSH
67785: LD_INT 2
67787: ARRAY
67788: PPUSH
67789: CALL_OW 428
67793: PUSH
67794: LD_INT 0
67796: EQUAL
67797: IFFALSE 67850
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67799: LD_VAR 0 1
67803: PPUSH
67804: LD_VAR 0 7
67808: PUSH
67809: LD_INT 1
67811: ARRAY
67812: PPUSH
67813: LD_VAR 0 7
67817: PUSH
67818: LD_INT 2
67820: ARRAY
67821: PPUSH
67822: LD_VAR 0 3
67826: PPUSH
67827: CALL_OW 48
// result := IsPlaced ( unit ) ;
67831: LD_ADDR_VAR 0 4
67835: PUSH
67836: LD_VAR 0 1
67840: PPUSH
67841: CALL_OW 305
67845: ST_TO_ADDR
// exit ;
67846: POP
67847: POP
67848: GO 67854
// end ; end ;
67850: GO 67729
67852: POP
67853: POP
// end ;
67854: LD_VAR 0 4
67858: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67859: LD_INT 0
67861: PPUSH
67862: PPUSH
67863: PPUSH
// if not side or side > 8 then
67864: LD_VAR 0 1
67868: NOT
67869: PUSH
67870: LD_VAR 0 1
67874: PUSH
67875: LD_INT 8
67877: GREATER
67878: OR
67879: IFFALSE 67883
// exit ;
67881: GO 68070
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67883: LD_ADDR_VAR 0 4
67887: PUSH
67888: LD_INT 22
67890: PUSH
67891: LD_VAR 0 1
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 21
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PPUSH
67914: CALL_OW 69
67918: ST_TO_ADDR
// if not tmp then
67919: LD_VAR 0 4
67923: NOT
67924: IFFALSE 67928
// exit ;
67926: GO 68070
// enable_addtolog := true ;
67928: LD_ADDR_OWVAR 81
67932: PUSH
67933: LD_INT 1
67935: ST_TO_ADDR
// AddToLog ( [ ) ;
67936: LD_STRING [
67938: PPUSH
67939: CALL_OW 561
// for i in tmp do
67943: LD_ADDR_VAR 0 3
67947: PUSH
67948: LD_VAR 0 4
67952: PUSH
67953: FOR_IN
67954: IFFALSE 68061
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67956: LD_STRING [
67958: PUSH
67959: LD_VAR 0 3
67963: PPUSH
67964: CALL_OW 266
67968: STR
67969: PUSH
67970: LD_STRING , 
67972: STR
67973: PUSH
67974: LD_VAR 0 3
67978: PPUSH
67979: CALL_OW 250
67983: STR
67984: PUSH
67985: LD_STRING , 
67987: STR
67988: PUSH
67989: LD_VAR 0 3
67993: PPUSH
67994: CALL_OW 251
67998: STR
67999: PUSH
68000: LD_STRING , 
68002: STR
68003: PUSH
68004: LD_VAR 0 3
68008: PPUSH
68009: CALL_OW 254
68013: STR
68014: PUSH
68015: LD_STRING , 
68017: STR
68018: PUSH
68019: LD_VAR 0 3
68023: PPUSH
68024: LD_INT 1
68026: PPUSH
68027: CALL_OW 268
68031: STR
68032: PUSH
68033: LD_STRING , 
68035: STR
68036: PUSH
68037: LD_VAR 0 3
68041: PPUSH
68042: LD_INT 2
68044: PPUSH
68045: CALL_OW 268
68049: STR
68050: PUSH
68051: LD_STRING ],
68053: STR
68054: PPUSH
68055: CALL_OW 561
// end ;
68059: GO 67953
68061: POP
68062: POP
// AddToLog ( ]; ) ;
68063: LD_STRING ];
68065: PPUSH
68066: CALL_OW 561
// end ;
68070: LD_VAR 0 2
68074: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68075: LD_INT 0
68077: PPUSH
68078: PPUSH
68079: PPUSH
68080: PPUSH
68081: PPUSH
// if not area or not rate or not max then
68082: LD_VAR 0 1
68086: NOT
68087: PUSH
68088: LD_VAR 0 2
68092: NOT
68093: OR
68094: PUSH
68095: LD_VAR 0 4
68099: NOT
68100: OR
68101: IFFALSE 68105
// exit ;
68103: GO 68294
// while 1 do
68105: LD_INT 1
68107: IFFALSE 68294
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68109: LD_ADDR_VAR 0 9
68113: PUSH
68114: LD_VAR 0 1
68118: PPUSH
68119: LD_INT 1
68121: PPUSH
68122: CALL_OW 287
68126: PUSH
68127: LD_INT 10
68129: MUL
68130: ST_TO_ADDR
// r := rate / 10 ;
68131: LD_ADDR_VAR 0 7
68135: PUSH
68136: LD_VAR 0 2
68140: PUSH
68141: LD_INT 10
68143: DIVREAL
68144: ST_TO_ADDR
// time := 1 1$00 ;
68145: LD_ADDR_VAR 0 8
68149: PUSH
68150: LD_INT 2100
68152: ST_TO_ADDR
// if amount < min then
68153: LD_VAR 0 9
68157: PUSH
68158: LD_VAR 0 3
68162: LESS
68163: IFFALSE 68181
// r := r * 2 else
68165: LD_ADDR_VAR 0 7
68169: PUSH
68170: LD_VAR 0 7
68174: PUSH
68175: LD_INT 2
68177: MUL
68178: ST_TO_ADDR
68179: GO 68207
// if amount > max then
68181: LD_VAR 0 9
68185: PUSH
68186: LD_VAR 0 4
68190: GREATER
68191: IFFALSE 68207
// r := r / 2 ;
68193: LD_ADDR_VAR 0 7
68197: PUSH
68198: LD_VAR 0 7
68202: PUSH
68203: LD_INT 2
68205: DIVREAL
68206: ST_TO_ADDR
// time := time / r ;
68207: LD_ADDR_VAR 0 8
68211: PUSH
68212: LD_VAR 0 8
68216: PUSH
68217: LD_VAR 0 7
68221: DIVREAL
68222: ST_TO_ADDR
// if time < 0 then
68223: LD_VAR 0 8
68227: PUSH
68228: LD_INT 0
68230: LESS
68231: IFFALSE 68248
// time := time * - 1 ;
68233: LD_ADDR_VAR 0 8
68237: PUSH
68238: LD_VAR 0 8
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: MUL
68247: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68248: LD_VAR 0 8
68252: PUSH
68253: LD_INT 35
68255: PPUSH
68256: LD_INT 875
68258: PPUSH
68259: CALL_OW 12
68263: PLUS
68264: PPUSH
68265: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68269: LD_INT 1
68271: PPUSH
68272: LD_INT 5
68274: PPUSH
68275: CALL_OW 12
68279: PPUSH
68280: LD_VAR 0 1
68284: PPUSH
68285: LD_INT 1
68287: PPUSH
68288: CALL_OW 55
// end ;
68292: GO 68105
// end ;
68294: LD_VAR 0 5
68298: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68299: LD_INT 0
68301: PPUSH
68302: PPUSH
68303: PPUSH
68304: PPUSH
68305: PPUSH
68306: PPUSH
68307: PPUSH
68308: PPUSH
// if not turrets or not factories then
68309: LD_VAR 0 1
68313: NOT
68314: PUSH
68315: LD_VAR 0 2
68319: NOT
68320: OR
68321: IFFALSE 68325
// exit ;
68323: GO 68632
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68325: LD_ADDR_VAR 0 10
68329: PUSH
68330: LD_INT 5
68332: PUSH
68333: LD_INT 6
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: PUSH
68343: LD_INT 4
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 3
68352: PUSH
68353: LD_INT 5
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 24
68367: PUSH
68368: LD_INT 25
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 23
68377: PUSH
68378: LD_INT 27
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 42
68391: PUSH
68392: LD_INT 43
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 44
68401: PUSH
68402: LD_INT 46
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 45
68411: PUSH
68412: LD_INT 47
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: LIST
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: LIST
68428: ST_TO_ADDR
// result := [ ] ;
68429: LD_ADDR_VAR 0 3
68433: PUSH
68434: EMPTY
68435: ST_TO_ADDR
// for i in turrets do
68436: LD_ADDR_VAR 0 4
68440: PUSH
68441: LD_VAR 0 1
68445: PUSH
68446: FOR_IN
68447: IFFALSE 68630
// begin nat := GetNation ( i ) ;
68449: LD_ADDR_VAR 0 7
68453: PUSH
68454: LD_VAR 0 4
68458: PPUSH
68459: CALL_OW 248
68463: ST_TO_ADDR
// weapon := 0 ;
68464: LD_ADDR_VAR 0 8
68468: PUSH
68469: LD_INT 0
68471: ST_TO_ADDR
// if not nat then
68472: LD_VAR 0 7
68476: NOT
68477: IFFALSE 68481
// continue ;
68479: GO 68446
// for j in list [ nat ] do
68481: LD_ADDR_VAR 0 5
68485: PUSH
68486: LD_VAR 0 10
68490: PUSH
68491: LD_VAR 0 7
68495: ARRAY
68496: PUSH
68497: FOR_IN
68498: IFFALSE 68539
// if GetBWeapon ( i ) = j [ 1 ] then
68500: LD_VAR 0 4
68504: PPUSH
68505: CALL_OW 269
68509: PUSH
68510: LD_VAR 0 5
68514: PUSH
68515: LD_INT 1
68517: ARRAY
68518: EQUAL
68519: IFFALSE 68537
// begin weapon := j [ 2 ] ;
68521: LD_ADDR_VAR 0 8
68525: PUSH
68526: LD_VAR 0 5
68530: PUSH
68531: LD_INT 2
68533: ARRAY
68534: ST_TO_ADDR
// break ;
68535: GO 68539
// end ;
68537: GO 68497
68539: POP
68540: POP
// if not weapon then
68541: LD_VAR 0 8
68545: NOT
68546: IFFALSE 68550
// continue ;
68548: GO 68446
// for k in factories do
68550: LD_ADDR_VAR 0 6
68554: PUSH
68555: LD_VAR 0 2
68559: PUSH
68560: FOR_IN
68561: IFFALSE 68626
// begin weapons := AvailableWeaponList ( k ) ;
68563: LD_ADDR_VAR 0 9
68567: PUSH
68568: LD_VAR 0 6
68572: PPUSH
68573: CALL_OW 478
68577: ST_TO_ADDR
// if not weapons then
68578: LD_VAR 0 9
68582: NOT
68583: IFFALSE 68587
// continue ;
68585: GO 68560
// if weapon in weapons then
68587: LD_VAR 0 8
68591: PUSH
68592: LD_VAR 0 9
68596: IN
68597: IFFALSE 68624
// begin result := [ i , weapon ] ;
68599: LD_ADDR_VAR 0 3
68603: PUSH
68604: LD_VAR 0 4
68608: PUSH
68609: LD_VAR 0 8
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: ST_TO_ADDR
// exit ;
68618: POP
68619: POP
68620: POP
68621: POP
68622: GO 68632
// end ; end ;
68624: GO 68560
68626: POP
68627: POP
// end ;
68628: GO 68446
68630: POP
68631: POP
// end ;
68632: LD_VAR 0 3
68636: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68637: LD_INT 0
68639: PPUSH
// if not side or side > 8 then
68640: LD_VAR 0 3
68644: NOT
68645: PUSH
68646: LD_VAR 0 3
68650: PUSH
68651: LD_INT 8
68653: GREATER
68654: OR
68655: IFFALSE 68659
// exit ;
68657: GO 68718
// if not range then
68659: LD_VAR 0 4
68663: NOT
68664: IFFALSE 68675
// range := - 12 ;
68666: LD_ADDR_VAR 0 4
68670: PUSH
68671: LD_INT 12
68673: NEG
68674: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68675: LD_VAR 0 1
68679: PPUSH
68680: LD_VAR 0 2
68684: PPUSH
68685: LD_VAR 0 3
68689: PPUSH
68690: LD_VAR 0 4
68694: PPUSH
68695: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68699: LD_VAR 0 1
68703: PPUSH
68704: LD_VAR 0 2
68708: PPUSH
68709: LD_VAR 0 3
68713: PPUSH
68714: CALL_OW 331
// end ;
68718: LD_VAR 0 5
68722: RET
// export function Video ( mode ) ; begin
68723: LD_INT 0
68725: PPUSH
// ingame_video = mode ;
68726: LD_ADDR_OWVAR 52
68730: PUSH
68731: LD_VAR 0 1
68735: ST_TO_ADDR
// interface_hidden = mode ;
68736: LD_ADDR_OWVAR 54
68740: PUSH
68741: LD_VAR 0 1
68745: ST_TO_ADDR
// end ;
68746: LD_VAR 0 2
68750: RET
// export function Join ( array , element ) ; begin
68751: LD_INT 0
68753: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68754: LD_ADDR_VAR 0 3
68758: PUSH
68759: LD_VAR 0 1
68763: PPUSH
68764: LD_VAR 0 1
68768: PUSH
68769: LD_INT 1
68771: PLUS
68772: PPUSH
68773: LD_VAR 0 2
68777: PPUSH
68778: CALL_OW 1
68782: ST_TO_ADDR
// end ;
68783: LD_VAR 0 3
68787: RET
// export function JoinUnion ( array , element ) ; begin
68788: LD_INT 0
68790: PPUSH
// result := array union element ;
68791: LD_ADDR_VAR 0 3
68795: PUSH
68796: LD_VAR 0 1
68800: PUSH
68801: LD_VAR 0 2
68805: UNION
68806: ST_TO_ADDR
// end ;
68807: LD_VAR 0 3
68811: RET
// export function GetBehemoths ( side ) ; begin
68812: LD_INT 0
68814: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68815: LD_ADDR_VAR 0 2
68819: PUSH
68820: LD_INT 22
68822: PUSH
68823: LD_VAR 0 1
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 31
68834: PUSH
68835: LD_INT 25
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PPUSH
68846: CALL_OW 69
68850: ST_TO_ADDR
// end ;
68851: LD_VAR 0 2
68855: RET
// export function Shuffle ( array ) ; var i , index ; begin
68856: LD_INT 0
68858: PPUSH
68859: PPUSH
68860: PPUSH
// result := [ ] ;
68861: LD_ADDR_VAR 0 2
68865: PUSH
68866: EMPTY
68867: ST_TO_ADDR
// if not array then
68868: LD_VAR 0 1
68872: NOT
68873: IFFALSE 68877
// exit ;
68875: GO 68976
// Randomize ;
68877: CALL_OW 10
// for i = array downto 1 do
68881: LD_ADDR_VAR 0 3
68885: PUSH
68886: DOUBLE
68887: LD_VAR 0 1
68891: INC
68892: ST_TO_ADDR
68893: LD_INT 1
68895: PUSH
68896: FOR_DOWNTO
68897: IFFALSE 68974
// begin index := rand ( 1 , array ) ;
68899: LD_ADDR_VAR 0 4
68903: PUSH
68904: LD_INT 1
68906: PPUSH
68907: LD_VAR 0 1
68911: PPUSH
68912: CALL_OW 12
68916: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68917: LD_ADDR_VAR 0 2
68921: PUSH
68922: LD_VAR 0 2
68926: PPUSH
68927: LD_VAR 0 2
68931: PUSH
68932: LD_INT 1
68934: PLUS
68935: PPUSH
68936: LD_VAR 0 1
68940: PUSH
68941: LD_VAR 0 4
68945: ARRAY
68946: PPUSH
68947: CALL_OW 2
68951: ST_TO_ADDR
// array := Delete ( array , index ) ;
68952: LD_ADDR_VAR 0 1
68956: PUSH
68957: LD_VAR 0 1
68961: PPUSH
68962: LD_VAR 0 4
68966: PPUSH
68967: CALL_OW 3
68971: ST_TO_ADDR
// end ;
68972: GO 68896
68974: POP
68975: POP
// end ;
68976: LD_VAR 0 2
68980: RET
// export function GetBaseMaterials ( base ) ; begin
68981: LD_INT 0
68983: PPUSH
// result := [ 0 , 0 , 0 ] ;
68984: LD_ADDR_VAR 0 2
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: LD_INT 0
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// if not base then
69003: LD_VAR 0 1
69007: NOT
69008: IFFALSE 69012
// exit ;
69010: GO 69061
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69012: LD_ADDR_VAR 0 2
69016: PUSH
69017: LD_VAR 0 1
69021: PPUSH
69022: LD_INT 1
69024: PPUSH
69025: CALL_OW 275
69029: PUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: LD_INT 2
69037: PPUSH
69038: CALL_OW 275
69042: PUSH
69043: LD_VAR 0 1
69047: PPUSH
69048: LD_INT 3
69050: PPUSH
69051: CALL_OW 275
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: LIST
69060: ST_TO_ADDR
// end ;
69061: LD_VAR 0 2
69065: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69066: LD_INT 0
69068: PPUSH
69069: PPUSH
// result := array ;
69070: LD_ADDR_VAR 0 3
69074: PUSH
69075: LD_VAR 0 1
69079: ST_TO_ADDR
// if size >= result then
69080: LD_VAR 0 2
69084: PUSH
69085: LD_VAR 0 3
69089: GREATEREQUAL
69090: IFFALSE 69094
// exit ;
69092: GO 69144
// if size then
69094: LD_VAR 0 2
69098: IFFALSE 69144
// for i := array downto size do
69100: LD_ADDR_VAR 0 4
69104: PUSH
69105: DOUBLE
69106: LD_VAR 0 1
69110: INC
69111: ST_TO_ADDR
69112: LD_VAR 0 2
69116: PUSH
69117: FOR_DOWNTO
69118: IFFALSE 69142
// result := Delete ( result , result ) ;
69120: LD_ADDR_VAR 0 3
69124: PUSH
69125: LD_VAR 0 3
69129: PPUSH
69130: LD_VAR 0 3
69134: PPUSH
69135: CALL_OW 3
69139: ST_TO_ADDR
69140: GO 69117
69142: POP
69143: POP
// end ;
69144: LD_VAR 0 3
69148: RET
// export function ComExit ( unit ) ; var tmp ; begin
69149: LD_INT 0
69151: PPUSH
69152: PPUSH
// if not IsInUnit ( unit ) then
69153: LD_VAR 0 1
69157: PPUSH
69158: CALL_OW 310
69162: NOT
69163: IFFALSE 69167
// exit ;
69165: GO 69227
// tmp := IsInUnit ( unit ) ;
69167: LD_ADDR_VAR 0 3
69171: PUSH
69172: LD_VAR 0 1
69176: PPUSH
69177: CALL_OW 310
69181: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69182: LD_VAR 0 3
69186: PPUSH
69187: CALL_OW 247
69191: PUSH
69192: LD_INT 2
69194: EQUAL
69195: IFFALSE 69208
// ComExitVehicle ( unit ) else
69197: LD_VAR 0 1
69201: PPUSH
69202: CALL_OW 121
69206: GO 69217
// ComExitBuilding ( unit ) ;
69208: LD_VAR 0 1
69212: PPUSH
69213: CALL_OW 122
// result := tmp ;
69217: LD_ADDR_VAR 0 2
69221: PUSH
69222: LD_VAR 0 3
69226: ST_TO_ADDR
// end ;
69227: LD_VAR 0 2
69231: RET
// export function ComExitAll ( units ) ; var i ; begin
69232: LD_INT 0
69234: PPUSH
69235: PPUSH
// if not units then
69236: LD_VAR 0 1
69240: NOT
69241: IFFALSE 69245
// exit ;
69243: GO 69271
// for i in units do
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: LD_VAR 0 1
69254: PUSH
69255: FOR_IN
69256: IFFALSE 69269
// ComExit ( i ) ;
69258: LD_VAR 0 3
69262: PPUSH
69263: CALL 69149 0 1
69267: GO 69255
69269: POP
69270: POP
// end ;
69271: LD_VAR 0 2
69275: RET
// export function ResetHc ; begin
69276: LD_INT 0
69278: PPUSH
// InitHc ;
69279: CALL_OW 19
// hc_importance := 0 ;
69283: LD_ADDR_OWVAR 32
69287: PUSH
69288: LD_INT 0
69290: ST_TO_ADDR
// end ;
69291: LD_VAR 0 1
69295: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69296: LD_INT 0
69298: PPUSH
69299: PPUSH
69300: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69301: LD_ADDR_VAR 0 6
69305: PUSH
69306: LD_VAR 0 1
69310: PUSH
69311: LD_VAR 0 3
69315: PLUS
69316: PUSH
69317: LD_INT 2
69319: DIV
69320: ST_TO_ADDR
// if _x < 0 then
69321: LD_VAR 0 6
69325: PUSH
69326: LD_INT 0
69328: LESS
69329: IFFALSE 69346
// _x := _x * - 1 ;
69331: LD_ADDR_VAR 0 6
69335: PUSH
69336: LD_VAR 0 6
69340: PUSH
69341: LD_INT 1
69343: NEG
69344: MUL
69345: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69346: LD_ADDR_VAR 0 7
69350: PUSH
69351: LD_VAR 0 2
69355: PUSH
69356: LD_VAR 0 4
69360: PLUS
69361: PUSH
69362: LD_INT 2
69364: DIV
69365: ST_TO_ADDR
// if _y < 0 then
69366: LD_VAR 0 7
69370: PUSH
69371: LD_INT 0
69373: LESS
69374: IFFALSE 69391
// _y := _y * - 1 ;
69376: LD_ADDR_VAR 0 7
69380: PUSH
69381: LD_VAR 0 7
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: MUL
69390: ST_TO_ADDR
// result := [ _x , _y ] ;
69391: LD_ADDR_VAR 0 5
69395: PUSH
69396: LD_VAR 0 6
69400: PUSH
69401: LD_VAR 0 7
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: ST_TO_ADDR
// end ;
69410: LD_VAR 0 5
69414: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69415: LD_INT 0
69417: PPUSH
69418: PPUSH
69419: PPUSH
69420: PPUSH
// task := GetTaskList ( unit ) ;
69421: LD_ADDR_VAR 0 7
69425: PUSH
69426: LD_VAR 0 1
69430: PPUSH
69431: CALL_OW 437
69435: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69436: LD_VAR 0 7
69440: NOT
69441: PUSH
69442: LD_VAR 0 1
69446: PPUSH
69447: LD_VAR 0 2
69451: PPUSH
69452: CALL_OW 308
69456: NOT
69457: AND
69458: IFFALSE 69462
// exit ;
69460: GO 69580
// if IsInArea ( unit , area ) then
69462: LD_VAR 0 1
69466: PPUSH
69467: LD_VAR 0 2
69471: PPUSH
69472: CALL_OW 308
69476: IFFALSE 69494
// begin ComMoveToArea ( unit , goAway ) ;
69478: LD_VAR 0 1
69482: PPUSH
69483: LD_VAR 0 3
69487: PPUSH
69488: CALL_OW 113
// exit ;
69492: GO 69580
// end ; if task [ 1 ] [ 1 ] <> M then
69494: LD_VAR 0 7
69498: PUSH
69499: LD_INT 1
69501: ARRAY
69502: PUSH
69503: LD_INT 1
69505: ARRAY
69506: PUSH
69507: LD_STRING M
69509: NONEQUAL
69510: IFFALSE 69514
// exit ;
69512: GO 69580
// x := task [ 1 ] [ 2 ] ;
69514: LD_ADDR_VAR 0 5
69518: PUSH
69519: LD_VAR 0 7
69523: PUSH
69524: LD_INT 1
69526: ARRAY
69527: PUSH
69528: LD_INT 2
69530: ARRAY
69531: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69532: LD_ADDR_VAR 0 6
69536: PUSH
69537: LD_VAR 0 7
69541: PUSH
69542: LD_INT 1
69544: ARRAY
69545: PUSH
69546: LD_INT 3
69548: ARRAY
69549: ST_TO_ADDR
// if InArea ( x , y , area ) then
69550: LD_VAR 0 5
69554: PPUSH
69555: LD_VAR 0 6
69559: PPUSH
69560: LD_VAR 0 2
69564: PPUSH
69565: CALL_OW 309
69569: IFFALSE 69580
// ComStop ( unit ) ;
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 141
// end ;
69580: LD_VAR 0 4
69584: RET
// export function Abs ( value ) ; begin
69585: LD_INT 0
69587: PPUSH
// result := value ;
69588: LD_ADDR_VAR 0 2
69592: PUSH
69593: LD_VAR 0 1
69597: ST_TO_ADDR
// if value < 0 then
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 0
69605: LESS
69606: IFFALSE 69623
// result := value * - 1 ;
69608: LD_ADDR_VAR 0 2
69612: PUSH
69613: LD_VAR 0 1
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: MUL
69622: ST_TO_ADDR
// end ;
69623: LD_VAR 0 2
69627: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69628: LD_INT 0
69630: PPUSH
69631: PPUSH
69632: PPUSH
69633: PPUSH
69634: PPUSH
69635: PPUSH
69636: PPUSH
69637: PPUSH
// if not unit or not building then
69638: LD_VAR 0 1
69642: NOT
69643: PUSH
69644: LD_VAR 0 2
69648: NOT
69649: OR
69650: IFFALSE 69654
// exit ;
69652: GO 69880
// x := GetX ( building ) ;
69654: LD_ADDR_VAR 0 4
69658: PUSH
69659: LD_VAR 0 2
69663: PPUSH
69664: CALL_OW 250
69668: ST_TO_ADDR
// y := GetY ( building ) ;
69669: LD_ADDR_VAR 0 6
69673: PUSH
69674: LD_VAR 0 2
69678: PPUSH
69679: CALL_OW 251
69683: ST_TO_ADDR
// d := GetDir ( building ) ;
69684: LD_ADDR_VAR 0 8
69688: PUSH
69689: LD_VAR 0 2
69693: PPUSH
69694: CALL_OW 254
69698: ST_TO_ADDR
// r := 4 ;
69699: LD_ADDR_VAR 0 9
69703: PUSH
69704: LD_INT 4
69706: ST_TO_ADDR
// for i := 1 to 5 do
69707: LD_ADDR_VAR 0 10
69711: PUSH
69712: DOUBLE
69713: LD_INT 1
69715: DEC
69716: ST_TO_ADDR
69717: LD_INT 5
69719: PUSH
69720: FOR_TO
69721: IFFALSE 69878
// begin _x := ShiftX ( x , d , r + i ) ;
69723: LD_ADDR_VAR 0 5
69727: PUSH
69728: LD_VAR 0 4
69732: PPUSH
69733: LD_VAR 0 8
69737: PPUSH
69738: LD_VAR 0 9
69742: PUSH
69743: LD_VAR 0 10
69747: PLUS
69748: PPUSH
69749: CALL_OW 272
69753: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69754: LD_ADDR_VAR 0 7
69758: PUSH
69759: LD_VAR 0 6
69763: PPUSH
69764: LD_VAR 0 8
69768: PPUSH
69769: LD_VAR 0 9
69773: PUSH
69774: LD_VAR 0 10
69778: PLUS
69779: PPUSH
69780: CALL_OW 273
69784: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69785: LD_VAR 0 5
69789: PPUSH
69790: LD_VAR 0 7
69794: PPUSH
69795: CALL_OW 488
69799: PUSH
69800: LD_VAR 0 5
69804: PPUSH
69805: LD_VAR 0 7
69809: PPUSH
69810: CALL_OW 428
69814: PPUSH
69815: CALL_OW 247
69819: PUSH
69820: LD_INT 3
69822: PUSH
69823: LD_INT 2
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: IN
69830: NOT
69831: AND
69832: IFFALSE 69876
// begin ComMoveXY ( unit , _x , _y ) ;
69834: LD_VAR 0 1
69838: PPUSH
69839: LD_VAR 0 5
69843: PPUSH
69844: LD_VAR 0 7
69848: PPUSH
69849: CALL_OW 111
// result := [ _x , _y ] ;
69853: LD_ADDR_VAR 0 3
69857: PUSH
69858: LD_VAR 0 5
69862: PUSH
69863: LD_VAR 0 7
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: ST_TO_ADDR
// exit ;
69872: POP
69873: POP
69874: GO 69880
// end ; end ;
69876: GO 69720
69878: POP
69879: POP
// end ;
69880: LD_VAR 0 3
69884: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69885: LD_INT 0
69887: PPUSH
69888: PPUSH
69889: PPUSH
// result := 0 ;
69890: LD_ADDR_VAR 0 3
69894: PUSH
69895: LD_INT 0
69897: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69898: LD_VAR 0 1
69902: PUSH
69903: LD_INT 0
69905: LESS
69906: PUSH
69907: LD_VAR 0 1
69911: PUSH
69912: LD_INT 8
69914: GREATER
69915: OR
69916: PUSH
69917: LD_VAR 0 2
69921: PUSH
69922: LD_INT 0
69924: LESS
69925: OR
69926: PUSH
69927: LD_VAR 0 2
69931: PUSH
69932: LD_INT 8
69934: GREATER
69935: OR
69936: IFFALSE 69940
// exit ;
69938: GO 70015
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69940: LD_ADDR_VAR 0 4
69944: PUSH
69945: LD_INT 22
69947: PUSH
69948: LD_VAR 0 2
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PPUSH
69957: CALL_OW 69
69961: PUSH
69962: FOR_IN
69963: IFFALSE 70013
// begin un := UnitShoot ( i ) ;
69965: LD_ADDR_VAR 0 5
69969: PUSH
69970: LD_VAR 0 4
69974: PPUSH
69975: CALL_OW 504
69979: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69980: LD_VAR 0 5
69984: PPUSH
69985: CALL_OW 255
69989: PUSH
69990: LD_VAR 0 1
69994: EQUAL
69995: IFFALSE 70011
// begin result := un ;
69997: LD_ADDR_VAR 0 3
70001: PUSH
70002: LD_VAR 0 5
70006: ST_TO_ADDR
// exit ;
70007: POP
70008: POP
70009: GO 70015
// end ; end ;
70011: GO 69962
70013: POP
70014: POP
// end ;
70015: LD_VAR 0 3
70019: RET
// export function GetCargoBay ( units ) ; begin
70020: LD_INT 0
70022: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70023: LD_ADDR_VAR 0 2
70027: PUSH
70028: LD_VAR 0 1
70032: PPUSH
70033: LD_INT 2
70035: PUSH
70036: LD_INT 34
70038: PUSH
70039: LD_INT 12
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 34
70048: PUSH
70049: LD_INT 51
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 34
70058: PUSH
70059: LD_INT 32
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 34
70068: PUSH
70069: LD_INT 89
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: PPUSH
70083: CALL_OW 72
70087: ST_TO_ADDR
// end ;
70088: LD_VAR 0 2
70092: RET
// export function Negate ( value ) ; begin
70093: LD_INT 0
70095: PPUSH
// result := not value ;
70096: LD_ADDR_VAR 0 2
70100: PUSH
70101: LD_VAR 0 1
70105: NOT
70106: ST_TO_ADDR
// end ;
70107: LD_VAR 0 2
70111: RET
// export function Inc ( value ) ; begin
70112: LD_INT 0
70114: PPUSH
// result := value + 1 ;
70115: LD_ADDR_VAR 0 2
70119: PUSH
70120: LD_VAR 0 1
70124: PUSH
70125: LD_INT 1
70127: PLUS
70128: ST_TO_ADDR
// end ;
70129: LD_VAR 0 2
70133: RET
// export function Dec ( value ) ; begin
70134: LD_INT 0
70136: PPUSH
// result := value - 1 ;
70137: LD_ADDR_VAR 0 2
70141: PUSH
70142: LD_VAR 0 1
70146: PUSH
70147: LD_INT 1
70149: MINUS
70150: ST_TO_ADDR
// end ;
70151: LD_VAR 0 2
70155: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70156: LD_INT 0
70158: PPUSH
70159: PPUSH
70160: PPUSH
70161: PPUSH
70162: PPUSH
70163: PPUSH
70164: PPUSH
70165: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70166: LD_VAR 0 1
70170: PPUSH
70171: LD_VAR 0 2
70175: PPUSH
70176: CALL_OW 488
70180: NOT
70181: PUSH
70182: LD_VAR 0 3
70186: PPUSH
70187: LD_VAR 0 4
70191: PPUSH
70192: CALL_OW 488
70196: NOT
70197: OR
70198: IFFALSE 70211
// begin result := - 1 ;
70200: LD_ADDR_VAR 0 5
70204: PUSH
70205: LD_INT 1
70207: NEG
70208: ST_TO_ADDR
// exit ;
70209: GO 70446
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70211: LD_ADDR_VAR 0 12
70215: PUSH
70216: LD_VAR 0 1
70220: PPUSH
70221: LD_VAR 0 2
70225: PPUSH
70226: LD_VAR 0 3
70230: PPUSH
70231: LD_VAR 0 4
70235: PPUSH
70236: CALL 69296 0 4
70240: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70241: LD_ADDR_VAR 0 11
70245: PUSH
70246: LD_VAR 0 1
70250: PPUSH
70251: LD_VAR 0 2
70255: PPUSH
70256: LD_VAR 0 12
70260: PUSH
70261: LD_INT 1
70263: ARRAY
70264: PPUSH
70265: LD_VAR 0 12
70269: PUSH
70270: LD_INT 2
70272: ARRAY
70273: PPUSH
70274: CALL_OW 298
70278: ST_TO_ADDR
// distance := 9999 ;
70279: LD_ADDR_VAR 0 10
70283: PUSH
70284: LD_INT 9999
70286: ST_TO_ADDR
// for i := 0 to 5 do
70287: LD_ADDR_VAR 0 6
70291: PUSH
70292: DOUBLE
70293: LD_INT 0
70295: DEC
70296: ST_TO_ADDR
70297: LD_INT 5
70299: PUSH
70300: FOR_TO
70301: IFFALSE 70444
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70303: LD_ADDR_VAR 0 7
70307: PUSH
70308: LD_VAR 0 1
70312: PPUSH
70313: LD_VAR 0 6
70317: PPUSH
70318: LD_VAR 0 11
70322: PPUSH
70323: CALL_OW 272
70327: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70328: LD_ADDR_VAR 0 8
70332: PUSH
70333: LD_VAR 0 2
70337: PPUSH
70338: LD_VAR 0 6
70342: PPUSH
70343: LD_VAR 0 11
70347: PPUSH
70348: CALL_OW 273
70352: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70353: LD_VAR 0 7
70357: PPUSH
70358: LD_VAR 0 8
70362: PPUSH
70363: CALL_OW 488
70367: NOT
70368: IFFALSE 70372
// continue ;
70370: GO 70300
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70372: LD_ADDR_VAR 0 9
70376: PUSH
70377: LD_VAR 0 12
70381: PUSH
70382: LD_INT 1
70384: ARRAY
70385: PPUSH
70386: LD_VAR 0 12
70390: PUSH
70391: LD_INT 2
70393: ARRAY
70394: PPUSH
70395: LD_VAR 0 7
70399: PPUSH
70400: LD_VAR 0 8
70404: PPUSH
70405: CALL_OW 298
70409: ST_TO_ADDR
// if tmp < distance then
70410: LD_VAR 0 9
70414: PUSH
70415: LD_VAR 0 10
70419: LESS
70420: IFFALSE 70442
// begin result := i ;
70422: LD_ADDR_VAR 0 5
70426: PUSH
70427: LD_VAR 0 6
70431: ST_TO_ADDR
// distance := tmp ;
70432: LD_ADDR_VAR 0 10
70436: PUSH
70437: LD_VAR 0 9
70441: ST_TO_ADDR
// end ; end ;
70442: GO 70300
70444: POP
70445: POP
// end ;
70446: LD_VAR 0 5
70450: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70451: LD_INT 0
70453: PPUSH
70454: PPUSH
// if not driver or not IsInUnit ( driver ) then
70455: LD_VAR 0 1
70459: NOT
70460: PUSH
70461: LD_VAR 0 1
70465: PPUSH
70466: CALL_OW 310
70470: NOT
70471: OR
70472: IFFALSE 70476
// exit ;
70474: GO 70566
// vehicle := IsInUnit ( driver ) ;
70476: LD_ADDR_VAR 0 3
70480: PUSH
70481: LD_VAR 0 1
70485: PPUSH
70486: CALL_OW 310
70490: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70491: LD_VAR 0 1
70495: PPUSH
70496: LD_STRING \
70498: PUSH
70499: LD_INT 0
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: PUSH
70526: LD_STRING E
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: LD_INT 0
70534: PUSH
70535: LD_VAR 0 3
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: LD_INT 0
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PPUSH
70562: CALL_OW 446
// end ;
70566: LD_VAR 0 2
70570: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70571: LD_INT 0
70573: PPUSH
70574: PPUSH
// if not driver or not IsInUnit ( driver ) then
70575: LD_VAR 0 1
70579: NOT
70580: PUSH
70581: LD_VAR 0 1
70585: PPUSH
70586: CALL_OW 310
70590: NOT
70591: OR
70592: IFFALSE 70596
// exit ;
70594: GO 70686
// vehicle := IsInUnit ( driver ) ;
70596: LD_ADDR_VAR 0 3
70600: PUSH
70601: LD_VAR 0 1
70605: PPUSH
70606: CALL_OW 310
70610: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70611: LD_VAR 0 1
70615: PPUSH
70616: LD_STRING \
70618: PUSH
70619: LD_INT 0
70621: PUSH
70622: LD_INT 0
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: LD_INT 0
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: PUSH
70646: LD_STRING E
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_VAR 0 3
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: LD_INT 0
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PPUSH
70682: CALL_OW 447
// end ;
70686: LD_VAR 0 2
70690: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70691: LD_INT 0
70693: PPUSH
70694: PPUSH
70695: PPUSH
// tmp := [ ] ;
70696: LD_ADDR_VAR 0 5
70700: PUSH
70701: EMPTY
70702: ST_TO_ADDR
// for i in units do
70703: LD_ADDR_VAR 0 4
70707: PUSH
70708: LD_VAR 0 1
70712: PUSH
70713: FOR_IN
70714: IFFALSE 70752
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70716: LD_ADDR_VAR 0 5
70720: PUSH
70721: LD_VAR 0 5
70725: PPUSH
70726: LD_VAR 0 5
70730: PUSH
70731: LD_INT 1
70733: PLUS
70734: PPUSH
70735: LD_VAR 0 4
70739: PPUSH
70740: CALL_OW 256
70744: PPUSH
70745: CALL_OW 2
70749: ST_TO_ADDR
70750: GO 70713
70752: POP
70753: POP
// if not tmp then
70754: LD_VAR 0 5
70758: NOT
70759: IFFALSE 70763
// exit ;
70761: GO 70811
// if asc then
70763: LD_VAR 0 2
70767: IFFALSE 70791
// result := SortListByListAsc ( units , tmp ) else
70769: LD_ADDR_VAR 0 3
70773: PUSH
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_VAR 0 5
70783: PPUSH
70784: CALL_OW 76
70788: ST_TO_ADDR
70789: GO 70811
// result := SortListByListDesc ( units , tmp ) ;
70791: LD_ADDR_VAR 0 3
70795: PUSH
70796: LD_VAR 0 1
70800: PPUSH
70801: LD_VAR 0 5
70805: PPUSH
70806: CALL_OW 77
70810: ST_TO_ADDR
// end ;
70811: LD_VAR 0 3
70815: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70816: LD_INT 0
70818: PPUSH
70819: PPUSH
// task := GetTaskList ( mech ) ;
70820: LD_ADDR_VAR 0 4
70824: PUSH
70825: LD_VAR 0 1
70829: PPUSH
70830: CALL_OW 437
70834: ST_TO_ADDR
// if not task then
70835: LD_VAR 0 4
70839: NOT
70840: IFFALSE 70844
// exit ;
70842: GO 70886
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70844: LD_ADDR_VAR 0 3
70848: PUSH
70849: LD_VAR 0 4
70853: PUSH
70854: LD_INT 1
70856: ARRAY
70857: PUSH
70858: LD_INT 1
70860: ARRAY
70861: PUSH
70862: LD_STRING r
70864: EQUAL
70865: PUSH
70866: LD_VAR 0 4
70870: PUSH
70871: LD_INT 1
70873: ARRAY
70874: PUSH
70875: LD_INT 4
70877: ARRAY
70878: PUSH
70879: LD_VAR 0 2
70883: EQUAL
70884: AND
70885: ST_TO_ADDR
// end ;
70886: LD_VAR 0 3
70890: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70891: LD_INT 0
70893: PPUSH
// SetDir ( unit , d ) ;
70894: LD_VAR 0 1
70898: PPUSH
70899: LD_VAR 0 4
70903: PPUSH
70904: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70908: LD_VAR 0 1
70912: PPUSH
70913: LD_VAR 0 2
70917: PPUSH
70918: LD_VAR 0 3
70922: PPUSH
70923: LD_VAR 0 5
70927: PPUSH
70928: CALL_OW 48
// end ;
70932: LD_VAR 0 6
70936: RET
// export function ToNaturalNumber ( number ) ; begin
70937: LD_INT 0
70939: PPUSH
// result := number div 1 ;
70940: LD_ADDR_VAR 0 2
70944: PUSH
70945: LD_VAR 0 1
70949: PUSH
70950: LD_INT 1
70952: DIV
70953: ST_TO_ADDR
// if number < 0 then
70954: LD_VAR 0 1
70958: PUSH
70959: LD_INT 0
70961: LESS
70962: IFFALSE 70972
// result := 0 ;
70964: LD_ADDR_VAR 0 2
70968: PUSH
70969: LD_INT 0
70971: ST_TO_ADDR
// end ;
70972: LD_VAR 0 2
70976: RET
// export function SortByClass ( units , class ) ; var un ; begin
70977: LD_INT 0
70979: PPUSH
70980: PPUSH
// if not units or not class then
70981: LD_VAR 0 1
70985: NOT
70986: PUSH
70987: LD_VAR 0 2
70991: NOT
70992: OR
70993: IFFALSE 70997
// exit ;
70995: GO 71092
// result := [ ] ;
70997: LD_ADDR_VAR 0 3
71001: PUSH
71002: EMPTY
71003: ST_TO_ADDR
// for un in units do
71004: LD_ADDR_VAR 0 4
71008: PUSH
71009: LD_VAR 0 1
71013: PUSH
71014: FOR_IN
71015: IFFALSE 71090
// if GetClass ( un ) = class then
71017: LD_VAR 0 4
71021: PPUSH
71022: CALL_OW 257
71026: PUSH
71027: LD_VAR 0 2
71031: EQUAL
71032: IFFALSE 71059
// result := Insert ( result , 1 , un ) else
71034: LD_ADDR_VAR 0 3
71038: PUSH
71039: LD_VAR 0 3
71043: PPUSH
71044: LD_INT 1
71046: PPUSH
71047: LD_VAR 0 4
71051: PPUSH
71052: CALL_OW 2
71056: ST_TO_ADDR
71057: GO 71088
// result := Replace ( result , result + 1 , un ) ;
71059: LD_ADDR_VAR 0 3
71063: PUSH
71064: LD_VAR 0 3
71068: PPUSH
71069: LD_VAR 0 3
71073: PUSH
71074: LD_INT 1
71076: PLUS
71077: PPUSH
71078: LD_VAR 0 4
71082: PPUSH
71083: CALL_OW 1
71087: ST_TO_ADDR
71088: GO 71014
71090: POP
71091: POP
// end ;
71092: LD_VAR 0 3
71096: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71097: LD_INT 0
71099: PPUSH
71100: PPUSH
71101: PPUSH
71102: PPUSH
71103: PPUSH
71104: PPUSH
71105: PPUSH
// result := [ ] ;
71106: LD_ADDR_VAR 0 4
71110: PUSH
71111: EMPTY
71112: ST_TO_ADDR
// if x - r < 0 then
71113: LD_VAR 0 1
71117: PUSH
71118: LD_VAR 0 3
71122: MINUS
71123: PUSH
71124: LD_INT 0
71126: LESS
71127: IFFALSE 71139
// min_x := 0 else
71129: LD_ADDR_VAR 0 8
71133: PUSH
71134: LD_INT 0
71136: ST_TO_ADDR
71137: GO 71155
// min_x := x - r ;
71139: LD_ADDR_VAR 0 8
71143: PUSH
71144: LD_VAR 0 1
71148: PUSH
71149: LD_VAR 0 3
71153: MINUS
71154: ST_TO_ADDR
// if y - r < 0 then
71155: LD_VAR 0 2
71159: PUSH
71160: LD_VAR 0 3
71164: MINUS
71165: PUSH
71166: LD_INT 0
71168: LESS
71169: IFFALSE 71181
// min_y := 0 else
71171: LD_ADDR_VAR 0 7
71175: PUSH
71176: LD_INT 0
71178: ST_TO_ADDR
71179: GO 71197
// min_y := y - r ;
71181: LD_ADDR_VAR 0 7
71185: PUSH
71186: LD_VAR 0 2
71190: PUSH
71191: LD_VAR 0 3
71195: MINUS
71196: ST_TO_ADDR
// max_x := x + r ;
71197: LD_ADDR_VAR 0 9
71201: PUSH
71202: LD_VAR 0 1
71206: PUSH
71207: LD_VAR 0 3
71211: PLUS
71212: ST_TO_ADDR
// max_y := y + r ;
71213: LD_ADDR_VAR 0 10
71217: PUSH
71218: LD_VAR 0 2
71222: PUSH
71223: LD_VAR 0 3
71227: PLUS
71228: ST_TO_ADDR
// for _x = min_x to max_x do
71229: LD_ADDR_VAR 0 5
71233: PUSH
71234: DOUBLE
71235: LD_VAR 0 8
71239: DEC
71240: ST_TO_ADDR
71241: LD_VAR 0 9
71245: PUSH
71246: FOR_TO
71247: IFFALSE 71348
// for _y = min_y to max_y do
71249: LD_ADDR_VAR 0 6
71253: PUSH
71254: DOUBLE
71255: LD_VAR 0 7
71259: DEC
71260: ST_TO_ADDR
71261: LD_VAR 0 10
71265: PUSH
71266: FOR_TO
71267: IFFALSE 71344
// begin if not ValidHex ( _x , _y ) then
71269: LD_VAR 0 5
71273: PPUSH
71274: LD_VAR 0 6
71278: PPUSH
71279: CALL_OW 488
71283: NOT
71284: IFFALSE 71288
// continue ;
71286: GO 71266
// if GetResourceTypeXY ( _x , _y ) then
71288: LD_VAR 0 5
71292: PPUSH
71293: LD_VAR 0 6
71297: PPUSH
71298: CALL_OW 283
71302: IFFALSE 71342
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71304: LD_ADDR_VAR 0 4
71308: PUSH
71309: LD_VAR 0 4
71313: PPUSH
71314: LD_VAR 0 4
71318: PUSH
71319: LD_INT 1
71321: PLUS
71322: PPUSH
71323: LD_VAR 0 5
71327: PUSH
71328: LD_VAR 0 6
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PPUSH
71337: CALL_OW 1
71341: ST_TO_ADDR
// end ;
71342: GO 71266
71344: POP
71345: POP
71346: GO 71246
71348: POP
71349: POP
// end ;
71350: LD_VAR 0 4
71354: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71355: LD_INT 0
71357: PPUSH
71358: PPUSH
71359: PPUSH
71360: PPUSH
71361: PPUSH
71362: PPUSH
71363: PPUSH
71364: PPUSH
// if not units then
71365: LD_VAR 0 1
71369: NOT
71370: IFFALSE 71374
// exit ;
71372: GO 71898
// result := UnitFilter ( units , [ f_ok ] ) ;
71374: LD_ADDR_VAR 0 3
71378: PUSH
71379: LD_VAR 0 1
71383: PPUSH
71384: LD_INT 50
71386: PUSH
71387: EMPTY
71388: LIST
71389: PPUSH
71390: CALL_OW 72
71394: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71395: LD_ADDR_VAR 0 8
71399: PUSH
71400: LD_VAR 0 1
71404: PUSH
71405: LD_INT 1
71407: ARRAY
71408: PPUSH
71409: CALL_OW 255
71413: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71414: LD_ADDR_VAR 0 10
71418: PUSH
71419: LD_INT 29
71421: PUSH
71422: LD_INT 91
71424: PUSH
71425: LD_INT 49
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: LIST
71432: ST_TO_ADDR
// if not result then
71433: LD_VAR 0 3
71437: NOT
71438: IFFALSE 71442
// exit ;
71440: GO 71898
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71442: LD_ADDR_VAR 0 5
71446: PUSH
71447: LD_INT 81
71449: PUSH
71450: LD_VAR 0 8
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PPUSH
71459: CALL_OW 69
71463: ST_TO_ADDR
// for i in result do
71464: LD_ADDR_VAR 0 4
71468: PUSH
71469: LD_VAR 0 3
71473: PUSH
71474: FOR_IN
71475: IFFALSE 71896
// begin tag := GetTag ( i ) + 1 ;
71477: LD_ADDR_VAR 0 9
71481: PUSH
71482: LD_VAR 0 4
71486: PPUSH
71487: CALL_OW 110
71491: PUSH
71492: LD_INT 1
71494: PLUS
71495: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71496: LD_ADDR_VAR 0 7
71500: PUSH
71501: LD_VAR 0 4
71505: PPUSH
71506: CALL_OW 250
71510: PPUSH
71511: LD_VAR 0 4
71515: PPUSH
71516: CALL_OW 251
71520: PPUSH
71521: LD_INT 6
71523: PPUSH
71524: CALL 71097 0 3
71528: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71529: LD_VAR 0 4
71533: PPUSH
71534: CALL_OW 247
71538: PUSH
71539: LD_INT 2
71541: EQUAL
71542: PUSH
71543: LD_VAR 0 7
71547: AND
71548: PUSH
71549: LD_VAR 0 4
71553: PPUSH
71554: CALL_OW 264
71558: PUSH
71559: LD_VAR 0 10
71563: IN
71564: NOT
71565: AND
71566: IFFALSE 71605
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71568: LD_VAR 0 4
71572: PPUSH
71573: LD_VAR 0 7
71577: PUSH
71578: LD_INT 1
71580: ARRAY
71581: PUSH
71582: LD_INT 1
71584: ARRAY
71585: PPUSH
71586: LD_VAR 0 7
71590: PUSH
71591: LD_INT 1
71593: ARRAY
71594: PUSH
71595: LD_INT 2
71597: ARRAY
71598: PPUSH
71599: CALL_OW 116
71603: GO 71894
// if path > tag then
71605: LD_VAR 0 2
71609: PUSH
71610: LD_VAR 0 9
71614: GREATER
71615: IFFALSE 71823
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71617: LD_ADDR_VAR 0 6
71621: PUSH
71622: LD_VAR 0 5
71626: PPUSH
71627: LD_INT 91
71629: PUSH
71630: LD_VAR 0 4
71634: PUSH
71635: LD_INT 8
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: LIST
71642: PPUSH
71643: CALL_OW 72
71647: ST_TO_ADDR
// if nearEnemy then
71648: LD_VAR 0 6
71652: IFFALSE 71721
// begin if GetWeapon ( i ) = ru_time_lapser then
71654: LD_VAR 0 4
71658: PPUSH
71659: CALL_OW 264
71663: PUSH
71664: LD_INT 49
71666: EQUAL
71667: IFFALSE 71695
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71669: LD_VAR 0 4
71673: PPUSH
71674: LD_VAR 0 6
71678: PPUSH
71679: LD_VAR 0 4
71683: PPUSH
71684: CALL_OW 74
71688: PPUSH
71689: CALL_OW 112
71693: GO 71719
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71695: LD_VAR 0 4
71699: PPUSH
71700: LD_VAR 0 6
71704: PPUSH
71705: LD_VAR 0 4
71709: PPUSH
71710: CALL_OW 74
71714: PPUSH
71715: CALL_OW 115
// end else
71719: GO 71821
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71721: LD_VAR 0 4
71725: PPUSH
71726: LD_VAR 0 2
71730: PUSH
71731: LD_VAR 0 9
71735: ARRAY
71736: PUSH
71737: LD_INT 1
71739: ARRAY
71740: PPUSH
71741: LD_VAR 0 2
71745: PUSH
71746: LD_VAR 0 9
71750: ARRAY
71751: PUSH
71752: LD_INT 2
71754: ARRAY
71755: PPUSH
71756: CALL_OW 297
71760: PUSH
71761: LD_INT 6
71763: GREATER
71764: IFFALSE 71807
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71766: LD_VAR 0 4
71770: PPUSH
71771: LD_VAR 0 2
71775: PUSH
71776: LD_VAR 0 9
71780: ARRAY
71781: PUSH
71782: LD_INT 1
71784: ARRAY
71785: PPUSH
71786: LD_VAR 0 2
71790: PUSH
71791: LD_VAR 0 9
71795: ARRAY
71796: PUSH
71797: LD_INT 2
71799: ARRAY
71800: PPUSH
71801: CALL_OW 114
71805: GO 71821
// SetTag ( i , tag ) ;
71807: LD_VAR 0 4
71811: PPUSH
71812: LD_VAR 0 9
71816: PPUSH
71817: CALL_OW 109
// end else
71821: GO 71894
// if enemy then
71823: LD_VAR 0 5
71827: IFFALSE 71894
// begin if GetWeapon ( i ) = ru_time_lapser then
71829: LD_VAR 0 4
71833: PPUSH
71834: CALL_OW 264
71838: PUSH
71839: LD_INT 49
71841: EQUAL
71842: IFFALSE 71870
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71844: LD_VAR 0 4
71848: PPUSH
71849: LD_VAR 0 5
71853: PPUSH
71854: LD_VAR 0 4
71858: PPUSH
71859: CALL_OW 74
71863: PPUSH
71864: CALL_OW 112
71868: GO 71894
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71870: LD_VAR 0 4
71874: PPUSH
71875: LD_VAR 0 5
71879: PPUSH
71880: LD_VAR 0 4
71884: PPUSH
71885: CALL_OW 74
71889: PPUSH
71890: CALL_OW 115
// end ; end ;
71894: GO 71474
71896: POP
71897: POP
// end ;
71898: LD_VAR 0 3
71902: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71903: LD_INT 0
71905: PPUSH
71906: PPUSH
71907: PPUSH
// if not unit or IsInUnit ( unit ) then
71908: LD_VAR 0 1
71912: NOT
71913: PUSH
71914: LD_VAR 0 1
71918: PPUSH
71919: CALL_OW 310
71923: OR
71924: IFFALSE 71928
// exit ;
71926: GO 72019
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71928: LD_ADDR_VAR 0 4
71932: PUSH
71933: LD_VAR 0 1
71937: PPUSH
71938: CALL_OW 250
71942: PPUSH
71943: LD_VAR 0 2
71947: PPUSH
71948: LD_INT 1
71950: PPUSH
71951: CALL_OW 272
71955: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71956: LD_ADDR_VAR 0 5
71960: PUSH
71961: LD_VAR 0 1
71965: PPUSH
71966: CALL_OW 251
71970: PPUSH
71971: LD_VAR 0 2
71975: PPUSH
71976: LD_INT 1
71978: PPUSH
71979: CALL_OW 273
71983: ST_TO_ADDR
// if ValidHex ( x , y ) then
71984: LD_VAR 0 4
71988: PPUSH
71989: LD_VAR 0 5
71993: PPUSH
71994: CALL_OW 488
71998: IFFALSE 72019
// ComTurnXY ( unit , x , y ) ;
72000: LD_VAR 0 1
72004: PPUSH
72005: LD_VAR 0 4
72009: PPUSH
72010: LD_VAR 0 5
72014: PPUSH
72015: CALL_OW 118
// end ;
72019: LD_VAR 0 3
72023: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72024: LD_INT 0
72026: PPUSH
72027: PPUSH
// result := false ;
72028: LD_ADDR_VAR 0 3
72032: PUSH
72033: LD_INT 0
72035: ST_TO_ADDR
// if not units then
72036: LD_VAR 0 2
72040: NOT
72041: IFFALSE 72045
// exit ;
72043: GO 72090
// for i in units do
72045: LD_ADDR_VAR 0 4
72049: PUSH
72050: LD_VAR 0 2
72054: PUSH
72055: FOR_IN
72056: IFFALSE 72088
// if See ( side , i ) then
72058: LD_VAR 0 1
72062: PPUSH
72063: LD_VAR 0 4
72067: PPUSH
72068: CALL_OW 292
72072: IFFALSE 72086
// begin result := true ;
72074: LD_ADDR_VAR 0 3
72078: PUSH
72079: LD_INT 1
72081: ST_TO_ADDR
// exit ;
72082: POP
72083: POP
72084: GO 72090
// end ;
72086: GO 72055
72088: POP
72089: POP
// end ;
72090: LD_VAR 0 3
72094: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72095: LD_INT 0
72097: PPUSH
72098: PPUSH
72099: PPUSH
72100: PPUSH
// if not unit or not points then
72101: LD_VAR 0 1
72105: NOT
72106: PUSH
72107: LD_VAR 0 2
72111: NOT
72112: OR
72113: IFFALSE 72117
// exit ;
72115: GO 72207
// dist := 99999 ;
72117: LD_ADDR_VAR 0 5
72121: PUSH
72122: LD_INT 99999
72124: ST_TO_ADDR
// for i in points do
72125: LD_ADDR_VAR 0 4
72129: PUSH
72130: LD_VAR 0 2
72134: PUSH
72135: FOR_IN
72136: IFFALSE 72205
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72138: LD_ADDR_VAR 0 6
72142: PUSH
72143: LD_VAR 0 1
72147: PPUSH
72148: LD_VAR 0 4
72152: PUSH
72153: LD_INT 1
72155: ARRAY
72156: PPUSH
72157: LD_VAR 0 4
72161: PUSH
72162: LD_INT 2
72164: ARRAY
72165: PPUSH
72166: CALL_OW 297
72170: ST_TO_ADDR
// if tmpDist < dist then
72171: LD_VAR 0 6
72175: PUSH
72176: LD_VAR 0 5
72180: LESS
72181: IFFALSE 72203
// begin result := i ;
72183: LD_ADDR_VAR 0 3
72187: PUSH
72188: LD_VAR 0 4
72192: ST_TO_ADDR
// dist := tmpDist ;
72193: LD_ADDR_VAR 0 5
72197: PUSH
72198: LD_VAR 0 6
72202: ST_TO_ADDR
// end ; end ;
72203: GO 72135
72205: POP
72206: POP
// end ;
72207: LD_VAR 0 3
72211: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72212: LD_INT 0
72214: PPUSH
// uc_side := side ;
72215: LD_ADDR_OWVAR 20
72219: PUSH
72220: LD_VAR 0 1
72224: ST_TO_ADDR
// uc_nation := 3 ;
72225: LD_ADDR_OWVAR 21
72229: PUSH
72230: LD_INT 3
72232: ST_TO_ADDR
// vc_chassis := 25 ;
72233: LD_ADDR_OWVAR 37
72237: PUSH
72238: LD_INT 25
72240: ST_TO_ADDR
// vc_engine := engine_siberite ;
72241: LD_ADDR_OWVAR 39
72245: PUSH
72246: LD_INT 3
72248: ST_TO_ADDR
// vc_control := control_computer ;
72249: LD_ADDR_OWVAR 38
72253: PUSH
72254: LD_INT 3
72256: ST_TO_ADDR
// vc_weapon := 59 ;
72257: LD_ADDR_OWVAR 40
72261: PUSH
72262: LD_INT 59
72264: ST_TO_ADDR
// result := CreateVehicle ;
72265: LD_ADDR_VAR 0 5
72269: PUSH
72270: CALL_OW 45
72274: ST_TO_ADDR
// SetDir ( result , d ) ;
72275: LD_VAR 0 5
72279: PPUSH
72280: LD_VAR 0 4
72284: PPUSH
72285: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72289: LD_VAR 0 5
72293: PPUSH
72294: LD_VAR 0 2
72298: PPUSH
72299: LD_VAR 0 3
72303: PPUSH
72304: LD_INT 0
72306: PPUSH
72307: CALL_OW 48
// end ;
72311: LD_VAR 0 5
72315: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72316: LD_INT 0
72318: PPUSH
72319: PPUSH
72320: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72321: LD_ADDR_VAR 0 2
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 0
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72344: LD_VAR 0 1
72348: NOT
72349: PUSH
72350: LD_VAR 0 1
72354: PPUSH
72355: CALL_OW 264
72359: PUSH
72360: LD_INT 12
72362: PUSH
72363: LD_INT 51
72365: PUSH
72366: LD_INT 32
72368: PUSH
72369: LD_INT 89
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: IN
72378: NOT
72379: OR
72380: IFFALSE 72384
// exit ;
72382: GO 72482
// for i := 1 to 3 do
72384: LD_ADDR_VAR 0 3
72388: PUSH
72389: DOUBLE
72390: LD_INT 1
72392: DEC
72393: ST_TO_ADDR
72394: LD_INT 3
72396: PUSH
72397: FOR_TO
72398: IFFALSE 72480
// begin tmp := GetCargo ( cargo , i ) ;
72400: LD_ADDR_VAR 0 4
72404: PUSH
72405: LD_VAR 0 1
72409: PPUSH
72410: LD_VAR 0 3
72414: PPUSH
72415: CALL_OW 289
72419: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72420: LD_ADDR_VAR 0 2
72424: PUSH
72425: LD_VAR 0 2
72429: PPUSH
72430: LD_VAR 0 3
72434: PPUSH
72435: LD_VAR 0 4
72439: PPUSH
72440: CALL_OW 1
72444: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72445: LD_ADDR_VAR 0 2
72449: PUSH
72450: LD_VAR 0 2
72454: PPUSH
72455: LD_INT 4
72457: PPUSH
72458: LD_VAR 0 2
72462: PUSH
72463: LD_INT 4
72465: ARRAY
72466: PUSH
72467: LD_VAR 0 4
72471: PLUS
72472: PPUSH
72473: CALL_OW 1
72477: ST_TO_ADDR
// end ;
72478: GO 72397
72480: POP
72481: POP
// end ;
72482: LD_VAR 0 2
72486: RET
// export function Length ( array ) ; begin
72487: LD_INT 0
72489: PPUSH
// result := array + 0 ;
72490: LD_ADDR_VAR 0 2
72494: PUSH
72495: LD_VAR 0 1
72499: PUSH
72500: LD_INT 0
72502: PLUS
72503: ST_TO_ADDR
// end ;
72504: LD_VAR 0 2
72508: RET
// export function PrepareArray ( array ) ; begin
72509: LD_INT 0
72511: PPUSH
// result := array diff 0 ;
72512: LD_ADDR_VAR 0 2
72516: PUSH
72517: LD_VAR 0 1
72521: PUSH
72522: LD_INT 0
72524: DIFF
72525: ST_TO_ADDR
// if not result [ 1 ] then
72526: LD_VAR 0 2
72530: PUSH
72531: LD_INT 1
72533: ARRAY
72534: NOT
72535: IFFALSE 72555
// result := Delete ( result , 1 ) ;
72537: LD_ADDR_VAR 0 2
72541: PUSH
72542: LD_VAR 0 2
72546: PPUSH
72547: LD_INT 1
72549: PPUSH
72550: CALL_OW 3
72554: ST_TO_ADDR
// end ;
72555: LD_VAR 0 2
72559: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72560: LD_INT 0
72562: PPUSH
72563: PPUSH
72564: PPUSH
72565: PPUSH
// sibRocketRange := 25 ;
72566: LD_ADDR_VAR 0 6
72570: PUSH
72571: LD_INT 25
72573: ST_TO_ADDR
// result := false ;
72574: LD_ADDR_VAR 0 4
72578: PUSH
72579: LD_INT 0
72581: ST_TO_ADDR
// for i := 0 to 5 do
72582: LD_ADDR_VAR 0 5
72586: PUSH
72587: DOUBLE
72588: LD_INT 0
72590: DEC
72591: ST_TO_ADDR
72592: LD_INT 5
72594: PUSH
72595: FOR_TO
72596: IFFALSE 72663
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72598: LD_VAR 0 1
72602: PPUSH
72603: LD_VAR 0 5
72607: PPUSH
72608: LD_VAR 0 6
72612: PPUSH
72613: CALL_OW 272
72617: PPUSH
72618: LD_VAR 0 2
72622: PPUSH
72623: LD_VAR 0 5
72627: PPUSH
72628: LD_VAR 0 6
72632: PPUSH
72633: CALL_OW 273
72637: PPUSH
72638: LD_VAR 0 3
72642: PPUSH
72643: CALL_OW 309
72647: IFFALSE 72661
// begin result := true ;
72649: LD_ADDR_VAR 0 4
72653: PUSH
72654: LD_INT 1
72656: ST_TO_ADDR
// exit ;
72657: POP
72658: POP
72659: GO 72665
// end ;
72661: GO 72595
72663: POP
72664: POP
// end ;
72665: LD_VAR 0 4
72669: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72670: LD_INT 0
72672: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72673: LD_VAR 0 1
72677: PPUSH
72678: LD_VAR 0 2
72682: PPUSH
72683: LD_INT 0
72685: PPUSH
72686: LD_INT 0
72688: PPUSH
72689: LD_INT 1
72691: PPUSH
72692: LD_INT 0
72694: PPUSH
72695: CALL_OW 587
// end ; end_of_file
72699: LD_VAR 0 3
72703: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72704: LD_VAR 0 1
72708: PUSH
72709: LD_INT 200
72711: DOUBLE
72712: GREATEREQUAL
72713: IFFALSE 72721
72715: LD_INT 299
72717: DOUBLE
72718: LESSEQUAL
72719: IFTRUE 72723
72721: GO 72755
72723: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72724: LD_VAR 0 1
72728: PPUSH
72729: LD_VAR 0 2
72733: PPUSH
72734: LD_VAR 0 3
72738: PPUSH
72739: LD_VAR 0 4
72743: PPUSH
72744: LD_VAR 0 5
72748: PPUSH
72749: CALL 27370 0 5
72753: GO 72832
72755: LD_INT 300
72757: DOUBLE
72758: GREATEREQUAL
72759: IFFALSE 72767
72761: LD_INT 399
72763: DOUBLE
72764: LESSEQUAL
72765: IFTRUE 72769
72767: GO 72831
72769: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72770: LD_VAR 0 1
72774: PPUSH
72775: LD_VAR 0 2
72779: PPUSH
72780: LD_VAR 0 3
72784: PPUSH
72785: LD_VAR 0 4
72789: PPUSH
72790: LD_VAR 0 5
72794: PPUSH
72795: LD_VAR 0 6
72799: PPUSH
72800: LD_VAR 0 7
72804: PPUSH
72805: LD_VAR 0 8
72809: PPUSH
72810: LD_VAR 0 9
72814: PPUSH
72815: LD_VAR 0 10
72819: PPUSH
72820: LD_VAR 0 11
72824: PPUSH
72825: CALL 23703 0 11
72829: GO 72832
72831: POP
// end ;
72832: PPOPN 11
72834: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72835: LD_VAR 0 1
72839: PPUSH
72840: LD_VAR 0 2
72844: PPUSH
72845: LD_VAR 0 3
72849: PPUSH
72850: LD_VAR 0 4
72854: PPUSH
72855: LD_VAR 0 5
72859: PPUSH
72860: CALL 27106 0 5
// end ; end_of_file
72864: PPOPN 5
72866: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72867: LD_VAR 0 1
72871: PPUSH
72872: LD_VAR 0 2
72876: PPUSH
72877: LD_VAR 0 3
72881: PPUSH
72882: LD_VAR 0 4
72886: PPUSH
72887: LD_VAR 0 5
72891: PPUSH
72892: LD_VAR 0 6
72896: PPUSH
72897: CALL 11355 0 6
// end ;
72901: PPOPN 6
72903: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72904: LD_INT 0
72906: PPUSH
// begin if not units then
72907: LD_VAR 0 1
72911: NOT
72912: IFFALSE 72916
// exit ;
72914: GO 72916
// end ;
72916: PPOPN 7
72918: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72919: CALL 11259 0 0
// end ;
72923: PPOPN 1
72925: END
