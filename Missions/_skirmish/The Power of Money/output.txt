// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10701 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8429 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10320 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10577 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10577 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10577 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10577 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7246 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7241
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7241
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7240
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7029
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_EXP 11
6990: PUSH
6991: LD_INT 1
6993: PLUS
6994: PPUSH
6995: LD_VAR 0 5
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7005: LD_VAR 0 4
7009: PPUSH
7010: LD_INT 17
7012: PPUSH
7013: LD_INT 9
7015: PPUSH
7016: CALL_OW 111
// Wait ( 0 0$01 ) ;
7020: LD_INT 35
7022: PPUSH
7023: CALL_OW 67
// end ;
7027: GO 6914
7029: POP
7030: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7031: LD_ADDR_VAR 0 3
7035: PUSH
7036: DOUBLE
7037: LD_INT 1
7039: DEC
7040: ST_TO_ADDR
7041: LD_INT 4
7043: PUSH
7044: LD_INT 5
7046: PUSH
7047: LD_INT 6
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_OWVAR 67
7059: ARRAY
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7236
// begin vc_chassis := ar_half_tracked ;
7064: LD_ADDR_OWVAR 37
7068: PUSH
7069: LD_INT 14
7071: ST_TO_ADDR
// vc_engine := engine_combustion ;
7072: LD_ADDR_OWVAR 39
7076: PUSH
7077: LD_INT 1
7079: ST_TO_ADDR
// vc_control := control_manual ;
7080: LD_ADDR_OWVAR 38
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7088: LD_ADDR_OWVAR 40
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: LD_INT 27
7098: PUSH
7099: LD_INT 28
7101: PUSH
7102: LD_INT 26
7104: PUSH
7105: LD_EXP 31
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 5
7122: PPUSH
7123: CALL_OW 12
7127: ARRAY
7128: ST_TO_ADDR
// veh := CreateVehicle ;
7129: LD_ADDR_VAR 0 5
7133: PUSH
7134: CALL_OW 45
7138: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7139: LD_VAR 0 5
7143: PPUSH
7144: LD_INT 16
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7154: LD_INT 0
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: LD_VAR 0 6
7164: PPUSH
7165: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7169: CALL_OW 44
7173: PPUSH
7174: LD_VAR 0 5
7178: PPUSH
7179: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7183: LD_ADDR_EXP 11
7187: PUSH
7188: LD_EXP 11
7192: PPUSH
7193: LD_EXP 11
7197: PUSH
7198: LD_INT 1
7200: PLUS
7201: PPUSH
7202: LD_VAR 0 5
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7212: LD_VAR 0 5
7216: PPUSH
7217: LD_INT 125
7219: PPUSH
7220: LD_INT 31
7222: PPUSH
7223: CALL_OW 111
// Wait ( 0 0$02 ) ;
7227: LD_INT 70
7229: PPUSH
7230: CALL_OW 67
// end ;
7234: GO 7061
7236: POP
7237: POP
// end ; end ;
7238: GO 7241
7240: POP
// end ;
7241: LD_VAR 0 2
7245: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// areas := [ river1 , river2 ] ;
7253: LD_ADDR_VAR 0 4
7257: PUSH
7258: LD_INT 14
7260: PUSH
7261: LD_INT 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 5
7275: PUSH
7276: LD_INT 6
7278: PUSH
7279: LD_INT 7
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: PUSH
7287: LD_OWVAR 67
7291: ARRAY
7292: ST_TO_ADDR
// uc_side := 2 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 2
7300: ST_TO_ADDR
// uc_nation := 2 ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// hc_name :=  ;
7309: LD_ADDR_OWVAR 26
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// hc_gallery :=  ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING 
7324: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_OWVAR 67
7353: ARRAY
7354: PUSH
7355: FOR_TO
7356: IFFALSE 7492
// begin vc_chassis := ar_hovercraft ;
7358: LD_ADDR_OWVAR 37
7362: PUSH
7363: LD_INT 11
7365: ST_TO_ADDR
// vc_engine := engine_solar ;
7366: LD_ADDR_OWVAR 39
7370: PUSH
7371: LD_INT 2
7373: ST_TO_ADDR
// vc_control := control_manual ;
7374: LD_ADDR_OWVAR 38
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7382: LD_ADDR_OWVAR 40
7386: PUSH
7387: LD_INT 24
7389: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7390: LD_ADDR_OWVAR 41
7394: PUSH
7395: LD_INT 100
7397: ST_TO_ADDR
// un := CreateVehicle ;
7398: LD_ADDR_VAR 0 3
7402: PUSH
7403: CALL_OW 45
7407: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_INT 121
7415: PPUSH
7416: LD_INT 69
7418: PPUSH
7419: LD_INT 4
7421: PPUSH
7422: LD_INT 0
7424: PPUSH
7425: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7429: LD_INT 0
7431: PPUSH
7432: LD_INT 3
7434: PPUSH
7435: LD_VAR 0 5
7439: PPUSH
7440: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_VAR 0 3
7453: PPUSH
7454: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7458: LD_ADDR_EXP 9
7462: PUSH
7463: LD_EXP 9
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_VAR 0 2
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 2
7489: ST_TO_ADDR
// end ;
7490: GO 7355
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 1
7498: RET
// every 0 0$01 trigger riv do var i , c ;
7499: LD_EXP 9
7503: IFFALSE 7938
7505: GO 7507
7507: DISABLE
7508: LD_INT 0
7510: PPUSH
7511: PPUSH
// begin enable ;
7512: ENABLE
// for i = riv downto 1 do
7513: LD_ADDR_VAR 0 1
7517: PUSH
7518: DOUBLE
7519: LD_EXP 9
7523: INC
7524: ST_TO_ADDR
7525: LD_INT 1
7527: PUSH
7528: FOR_DOWNTO
7529: IFFALSE 7936
// begin if not riv [ i ] [ 1 ] then
7531: LD_EXP 9
7535: PUSH
7536: LD_VAR 0 1
7540: ARRAY
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: NOT
7546: IFFALSE 7568
// begin riv := Delete ( riv , 1 ) ;
7548: LD_ADDR_EXP 9
7552: PUSH
7553: LD_EXP 9
7557: PPUSH
7558: LD_INT 1
7560: PPUSH
7561: CALL_OW 3
7565: ST_TO_ADDR
// break ;
7566: GO 7936
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 1
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: CALL_OW 314
7587: NOT
7588: IFFALSE 7656
// begin if riv [ i ] [ 2 ] = 1 then
7590: LD_EXP 9
7594: PUSH
7595: LD_VAR 0 1
7599: ARRAY
7600: PUSH
7601: LD_INT 2
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: EQUAL
7608: IFFALSE 7620
// c := 2 else
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 2
7617: ST_TO_ADDR
7618: GO 7628
// c := 1 ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7628: LD_ADDR_EXP 9
7632: PUSH
7633: LD_EXP 9
7637: PPUSH
7638: LD_VAR 0 1
7642: PPUSH
7643: LD_INT 2
7645: PPUSH
7646: LD_VAR 0 2
7650: PPUSH
7651: CALL 10320 0 4
7655: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7656: LD_EXP 9
7660: PUSH
7661: LD_VAR 0 1
7665: ARRAY
7666: PUSH
7667: LD_INT 1
7669: ARRAY
7670: PPUSH
7671: LD_INT 14
7673: PUSH
7674: LD_INT 15
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_EXP 9
7685: PUSH
7686: LD_VAR 0 1
7690: ARRAY
7691: PUSH
7692: LD_INT 2
7694: ARRAY
7695: ARRAY
7696: PPUSH
7697: CALL_OW 308
7701: NOT
7702: IFFALSE 7934
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7704: LD_EXP 9
7708: PUSH
7709: LD_VAR 0 1
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 261
7723: PUSH
7724: LD_INT 50
7726: LESS
7727: IFFALSE 7751
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7729: LD_EXP 9
7733: PUSH
7734: LD_VAR 0 1
7738: ARRAY
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: LD_INT 67
7746: PPUSH
7747: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7751: LD_EXP 9
7755: PUSH
7756: LD_VAR 0 1
7760: ARRAY
7761: PUSH
7762: LD_INT 1
7764: ARRAY
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PPUSH
7781: LD_EXP 9
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: PUSH
7792: LD_INT 1
7794: ARRAY
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 296
7805: PUSH
7806: LD_INT 9
7808: LESS
7809: IFFALSE 7867
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7811: LD_EXP 9
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PPUSH
7826: LD_INT 22
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PPUSH
7836: CALL_OW 69
7840: PPUSH
7841: LD_EXP 9
7845: PUSH
7846: LD_VAR 0 1
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: PPUSH
7856: CALL_OW 74
7860: PPUSH
7861: CALL_OW 115
7865: GO 7934
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7867: LD_EXP 9
7871: PUSH
7872: LD_VAR 0 1
7876: ARRAY
7877: PUSH
7878: LD_INT 1
7880: ARRAY
7881: PPUSH
7882: LD_INT 14
7884: PUSH
7885: LD_INT 15
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_EXP 9
7896: PUSH
7897: LD_VAR 0 1
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: ARRAY
7907: PPUSH
7908: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7912: LD_EXP 9
7916: PUSH
7917: LD_VAR 0 1
7921: ARRAY
7922: PUSH
7923: LD_INT 1
7925: ARRAY
7926: PPUSH
7927: LD_INT 350
7929: PPUSH
7930: CALL_OW 202
// end ; end ; end ;
7934: GO 7528
7936: POP
7937: POP
// end ;
7938: PPOPN 2
7940: END
// every 10 10$00 trigger convoy_start do var i , un ;
7941: LD_EXP 7
7945: IFFALSE 8066
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// begin enable ;
7954: ENABLE
// for i = 1 to 2 do
7955: LD_ADDR_VAR 0 1
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_INT 2
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8064
// begin uc_side := 2 ;
7971: LD_ADDR_OWVAR 20
7975: PUSH
7976: LD_INT 2
7978: ST_TO_ADDR
// uc_nation := 2 ;
7979: LD_ADDR_OWVAR 21
7983: PUSH
7984: LD_INT 2
7986: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: CALL_OW 380
// un := CreateHuman ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: CALL_OW 44
8009: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8010: LD_VAR 0 2
8014: PPUSH
8015: LD_INT 10
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8028: LD_VAR 0 2
8032: PPUSH
8033: LD_INT 24
8035: PPUSH
8036: LD_INT 36
8038: PPUSH
8039: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8043: LD_VAR 0 2
8047: PPUSH
8048: LD_INT 9
8050: PPUSH
8051: CALL_OW 173
// Wait ( 0 0$02 ) ;
8055: LD_INT 70
8057: PPUSH
8058: CALL_OW 67
// end ;
8062: GO 7968
8064: POP
8065: POP
// end ;
8066: PPOPN 2
8068: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8069: LD_INT 22
8071: PUSH
8072: LD_INT 2
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 69
8083: IFFALSE 8395
8085: GO 8087
8087: DISABLE
8088: LD_INT 0
8090: PPUSH
8091: PPUSH
// begin enable ;
8092: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8093: LD_ADDR_VAR 0 2
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_EXP 11
8117: DIFF
8118: ST_TO_ADDR
// if rest then
8119: LD_VAR 0 2
8123: IFFALSE 8195
// for i in rest do
8125: LD_ADDR_VAR 0 1
8129: PUSH
8130: LD_VAR 0 2
8134: PUSH
8135: FOR_IN
8136: IFFALSE 8193
// if GetClass ( i ) = 3 then
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 257
8147: PUSH
8148: LD_INT 3
8150: EQUAL
8151: IFFALSE 8191
// begin if not IsInArea ( i , ar2 ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_INT 17
8160: PPUSH
8161: CALL_OW 308
8165: NOT
8166: IFFALSE 8182
// ComMoveToArea ( i , ar2 ) else
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_INT 17
8175: PPUSH
8176: CALL_OW 113
8180: GO 8191
// RemoveUnit ( i ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 64
// end ;
8191: GO 8135
8193: POP
8194: POP
// if ar_force then
8195: LD_EXP 11
8199: IFFALSE 8395
// begin if ar_force > 15 then
8201: LD_EXP 11
8205: PUSH
8206: LD_INT 15
8208: GREATER
8209: IFFALSE 8226
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8211: LD_EXP 11
8215: PPUSH
8216: LD_INT 58
8218: PPUSH
8219: LD_INT 51
8221: PPUSH
8222: CALL_OW 114
// for i in ar_force do
8226: LD_ADDR_VAR 0 1
8230: PUSH
8231: LD_EXP 11
8235: PUSH
8236: FOR_IN
8237: IFFALSE 8393
// begin if GetClass ( i ) = class_soldier then
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 257
8248: PUSH
8249: LD_INT 1
8251: EQUAL
8252: IFFALSE 8344
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8254: LD_VAR 0 1
8258: PPUSH
8259: CALL 10577 0 1
8263: PUSH
8264: LD_INT 21
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: IN
8279: IFFALSE 8325
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8281: LD_VAR 0 1
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL 10577 0 1
8295: PPUSH
8296: CALL_OW 250
8300: PPUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL 10577 0 1
8310: PPUSH
8311: CALL_OW 251
8315: PPUSH
8316: LD_INT 0
8318: PPUSH
8319: CALL_OW 132
8323: GO 8344
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: CALL 10577 0 1
8339: PPUSH
8340: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: EQUAL
8357: NOT
8358: PUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 314
8368: NOT
8369: AND
8370: IFFALSE 8391
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8372: LD_VAR 0 1
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL 10577 0 1
8386: PPUSH
8387: CALL_OW 115
// end ;
8391: GO 8236
8393: POP
8394: POP
// end ; end ;
8395: PPOPN 2
8397: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8398: LD_INT 9
8400: PPUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 70
8415: IFFALSE 8428
8417: GO 8419
8419: DISABLE
// medal2 := false ; end_of_file
8420: LD_ADDR_EXP 4
8424: PUSH
8425: LD_INT 0
8427: ST_TO_ADDR
8428: END
// export function Action ; begin
8429: LD_INT 0
8431: PPUSH
// case Query ( info ) of 1 :
8432: LD_STRING info
8434: PPUSH
8435: CALL_OW 97
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8451
8448: POP
// ; end ;
8449: GO 8452
8451: POP
// ChangeMissionObjectives ( PM_1 ) ;
8452: LD_STRING PM_1
8454: PPUSH
8455: CALL_OW 337
// SaveForQuickRestart ;
8459: CALL_OW 22
// end ;
8463: LD_VAR 0 1
8467: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8468: LD_INT 50
8470: PPUSH
8471: CALL_OW 255
8475: PUSH
8476: LD_INT 3
8478: EQUAL
8479: IFFALSE 8760
8481: GO 8483
8483: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8484: LD_EXP 16
8488: PPUSH
8489: LD_STRING DPM_S1
8491: PPUSH
8492: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8496: LD_EXP 17
8500: PPUSH
8501: LD_STRING DPM_P1
8503: PPUSH
8504: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8508: LD_EXP 16
8512: PPUSH
8513: LD_STRING DPM_S2
8515: PPUSH
8516: CALL_OW 88
// SaveForQuickRestart ;
8520: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8524: LD_STRING PM_2
8526: PPUSH
8527: CALL_OW 337
// Wait ( 2 2$30 ) ;
8531: LD_INT 5250
8533: PPUSH
8534: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8538: LD_INT 117
8540: PPUSH
8541: LD_INT 4
8543: PPUSH
8544: CALL_OW 84
// Convoy ( 1 ) ;
8548: LD_INT 1
8550: PPUSH
8551: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8555: LD_INT 1050
8557: PPUSH
8558: CALL_OW 67
// Convoy ( 2 ) ;
8562: LD_INT 2
8564: PPUSH
8565: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8569: LD_INT 3150
8571: PPUSH
8572: CALL_OW 67
// Convoy ( 3 ) ;
8576: LD_INT 3
8578: PPUSH
8579: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8583: LD_INT 8400
8585: PPUSH
8586: CALL_OW 67
// convoy_start := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// PrepareArabian ;
8598: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8602: LD_INT 1
8604: PPUSH
8605: CALL 6376 0 1
// while ( convoy_start ) do
8609: LD_EXP 7
8613: IFFALSE 8760
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8615: LD_INT 4200
8617: PPUSH
8618: LD_INT 7350
8620: PPUSH
8621: CALL_OW 12
8625: PPUSH
8626: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8630: LD_INT 22
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 20
8647: LESS
8648: IFFALSE 8665
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 2
8655: PPUSH
8656: CALL_OW 12
8660: PPUSH
8661: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8665: LD_INT 1
8667: PPUSH
8668: LD_INT 5
8670: PPUSH
8671: CALL_OW 12
8675: PPUSH
8676: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8680: LD_ADDR_EXP 13
8684: PUSH
8685: LD_EXP 13
8689: PUSH
8690: LD_INT 1
8692: PLUS
8693: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8694: LD_EXP 13
8698: PUSH
8699: LD_INT 4
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_OWVAR 67
8717: ARRAY
8718: MOD
8719: PUSH
8720: LD_INT 0
8722: EQUAL
8723: IFFALSE 8758
// begin Wait ( 1 1$20 ) ;
8725: LD_INT 2800
8727: PPUSH
8728: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8732: LD_EXP 25
8736: PPUSH
8737: LD_STRING DPM_F2
8739: PPUSH
8740: CALL_OW 94
// PrepareAttack ( 3 ) ;
8744: LD_INT 3
8746: PPUSH
8747: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8751: LD_INT 6300
8753: PPUSH
8754: CALL_OW 67
// end ; end ;
8758: GO 8609
// end ;
8760: END
// every 0 0$1 trigger safeCounter > 30 do
8761: LD_EXP 15
8765: PUSH
8766: LD_INT 30
8768: GREATER
8769: IFFALSE 8781
8771: GO 8773
8773: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8774: LD_STRING ACH_SAFE
8776: PPUSH
8777: CALL_OW 543
8781: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8782: LD_EXP 13
8786: PUSH
8787: LD_INT 3
8789: MOD
8790: PUSH
8791: LD_INT 0
8793: EQUAL
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 2
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: PUSH
8810: LD_INT 0
8812: EQUAL
8813: AND
8814: IFFALSE 8831
8816: GO 8818
8818: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8819: LD_EXP 25
8823: PPUSH
8824: LD_STRING DPM_F3
8826: PPUSH
8827: CALL_OW 94
8831: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8832: LD_EXP 13
8836: PUSH
8837: LD_INT 5
8839: MOD
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: PUSH
8845: LD_INT 22
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PUSH
8860: LD_INT 0
8862: EQUAL
8863: AND
8864: IFFALSE 8881
8866: GO 8868
8868: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8869: LD_EXP 25
8873: PPUSH
8874: LD_STRING DPM_F4
8876: PPUSH
8877: CALL_OW 94
8881: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8882: LD_EXP 7
8886: PUSH
8887: LD_EXP 13
8891: PUSH
8892: LD_INT 8
8894: PUSH
8895: LD_INT 9
8897: PUSH
8898: LD_INT 10
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_OWVAR 67
8910: ARRAY
8911: GREATEREQUAL
8912: AND
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: AND
8933: IFFALSE 9032
8935: GO 8937
8937: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8938: LD_EXP 17
8942: PPUSH
8943: LD_STRING DPM_PEnd
8945: PPUSH
8946: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8950: LD_STRING med1
8952: PPUSH
8953: LD_EXP 3
8957: PPUSH
8958: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8962: LD_STRING med2
8964: PPUSH
8965: LD_EXP 4
8969: PPUSH
8970: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8974: LD_EXP 8
8978: PUSH
8979: LD_INT 15
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 7
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_OWVAR 67
8997: ARRAY
8998: GREATEREQUAL
8999: IFFALSE 9009
// medal3 := false ;
9001: LD_ADDR_EXP 5
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9009: LD_STRING med3
9011: PPUSH
9012: LD_EXP 5
9016: PPUSH
9017: CALL_OW 101
// GiveMedals ( MAIN ) ;
9021: LD_STRING MAIN
9023: PPUSH
9024: CALL_OW 102
// YouWin ;
9028: CALL_OW 103
// end ;
9032: END
// every 4 4$10 trigger convoy_start do var i ;
9033: LD_EXP 7
9037: IFFALSE 9403
9039: GO 9041
9041: DISABLE
9042: LD_INT 0
9044: PPUSH
// begin DialogueOn ;
9045: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9049: LD_EXP 17
9053: PPUSH
9054: LD_STRING DPM_PHelp
9056: PPUSH
9057: CALL_OW 94
// DialogueOff ;
9061: CALL_OW 7
// Wait ( 0 0$30 ) ;
9065: LD_INT 1050
9067: PPUSH
9068: CALL_OW 67
// Randomize ;
9072: CALL_OW 10
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_INT 5
9104: PUSH
9105: LD_INT 4
9107: PUSH
9108: LD_INT 3
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PUSH
9116: LD_OWVAR 67
9120: ARRAY
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9163
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: CALL_OW 12
9138: PPUSH
9139: LD_INT 5
9141: PPUSH
9142: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9146: CALL_OW 44
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 49
// end ;
9161: GO 9122
9163: POP
9164: POP
// vc_chassis := ru_heavy_wheeled ;
9165: LD_ADDR_OWVAR 37
9169: PUSH
9170: LD_INT 23
9172: ST_TO_ADDR
// vc_engine := engine_combustion ;
9173: LD_ADDR_OWVAR 39
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// vc_control := control_manual ;
9181: LD_ADDR_OWVAR 38
9185: PUSH
9186: LD_INT 1
9188: ST_TO_ADDR
// vc_weapon := 89 ;
9189: LD_ADDR_OWVAR 40
9193: PUSH
9194: LD_INT 89
9196: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9197: LD_ADDR_OWVAR 41
9201: PUSH
9202: LD_INT 88
9204: ST_TO_ADDR
// i := CreateVehicle ;
9205: LD_ADDR_VAR 0 1
9209: PUSH
9210: CALL_OW 45
9214: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 5
9222: PPUSH
9223: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_INT 63
9234: PPUSH
9235: LD_INT 115
9237: PPUSH
9238: LD_INT 0
9240: PPUSH
9241: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_INT 200
9255: PPUSH
9256: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9260: LD_INT 0
9262: PPUSH
9263: LD_INT 3
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9273: CALL_OW 44
9277: PPUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 52
// DialogueOn ;
9287: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9291: LD_INT 169
9293: PPUSH
9294: LD_INT 115
9296: PPUSH
9297: CALL_OW 86
// DWait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9308: LD_INT 63
9310: PPUSH
9311: LD_INT 115
9313: PPUSH
9314: CALL_OW 86
// DWait ( 0 0$01 ) ;
9318: LD_INT 35
9320: PPUSH
9321: CALL_OW 68
// DialogueOff ;
9325: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: LD_INT 57
9336: PPUSH
9337: LD_INT 53
9339: PPUSH
9340: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9344: LD_INT 6300
9346: PPUSH
9347: LD_INT 14700
9349: PPUSH
9350: CALL_OW 12
9354: PPUSH
9355: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9359: LD_EXP 18
9363: PPUSH
9364: LD_INT 86
9366: PPUSH
9367: LD_INT 112
9369: PPUSH
9370: LD_INT 0
9372: PPUSH
9373: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9377: LD_INT 10
9379: PPUSH
9380: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9384: LD_EXP 18
9388: PPUSH
9389: LD_STRING DPM_Sa1
9391: PPUSH
9392: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9396: LD_STRING PM_3
9398: PPUSH
9399: CALL_OW 337
// end ;
9403: PPOPN 1
9405: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9406: LD_INT 3
9408: PPUSH
9409: LD_EXP 18
9413: PPUSH
9414: CALL_OW 292
9418: IFFALSE 9467
9420: GO 9422
9422: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9423: LD_EXP 18
9427: PPUSH
9428: LD_STRING DPM_Sa2
9430: PPUSH
9431: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9435: LD_STRING PM_4
9437: PPUSH
9438: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9442: LD_INT 40
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9455: LD_EXP 18
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: CALL_OW 235
// end ;
9467: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9468: LD_EXP 3
9472: NOT
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 6
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: PUSH
9489: LD_INT 0
9491: EQUAL
9492: AND
9493: IFFALSE 9555
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9502: LD_EXP 16
9506: PPUSH
9507: LD_STRING DPM_S3
9509: PPUSH
9510: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9514: LD_INT 62
9516: PPUSH
9517: LD_INT 113
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 10
9525: PPUSH
9526: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9530: LD_INT 62
9532: PPUSH
9533: LD_INT 113
9535: PPUSH
9536: CALL_OW 84
// dwait ( 0 0$1 ) ;
9540: LD_INT 35
9542: PPUSH
9543: CALL_OW 68
// DialogueOff ;
9547: CALL_OW 7
// CounterAttack ;
9551: CALL 5789 0 0
// end ; end_of_file
9555: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9556: LD_VAR 0 1
9560: PPUSH
9561: CALL_OW 255
9565: PUSH
9566: LD_INT 1
9568: EQUAL
9569: IFFALSE 9605
// if not us_retreat then
9571: LD_EXP 22
9575: NOT
9576: IFFALSE 9605
// if GetClass ( h ) = 1 then
9578: LD_VAR 0 2
9582: PPUSH
9583: CALL_OW 257
9587: PUSH
9588: LD_INT 1
9590: EQUAL
9591: IFFALSE 9605
// ComEnterUnit ( h , us_arm ) ;
9593: LD_VAR 0 2
9597: PPUSH
9598: LD_INT 69
9600: PPUSH
9601: CALL_OW 120
// end ;
9605: PPOPN 2
9607: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: CALL 25595 0 1
// if GetSide ( un ) = 1 then
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 1
9629: EQUAL
9630: IFFALSE 9646
// us_count := us_count + 1 ;
9632: LD_ADDR_EXP 24
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 1
9644: PLUS
9645: ST_TO_ADDR
// if un in us_force then
9646: LD_VAR 0 1
9650: PUSH
9651: LD_EXP 12
9655: IN
9656: IFFALSE 9674
// us_force := us_force diff un ;
9658: LD_ADDR_EXP 12
9662: PUSH
9663: LD_EXP 12
9667: PUSH
9668: LD_VAR 0 1
9672: DIFF
9673: ST_TO_ADDR
// if un in ar_force then
9674: LD_VAR 0 1
9678: PUSH
9679: LD_EXP 11
9683: IN
9684: IFFALSE 9702
// ar_force := ar_force diff un ;
9686: LD_ADDR_EXP 11
9690: PUSH
9691: LD_EXP 11
9695: PUSH
9696: LD_VAR 0 1
9700: DIFF
9701: ST_TO_ADDR
// if un = Stolypin then
9702: LD_VAR 0 1
9706: PUSH
9707: LD_EXP 16
9711: EQUAL
9712: IFFALSE 9721
// YouLost ( dead ) ;
9714: LD_STRING dead
9716: PPUSH
9717: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 30
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: IN
9755: IFFALSE 9764
// YouLost ( depot ) ;
9757: LD_STRING depot
9759: PPUSH
9760: CALL_OW 104
// if GetSide ( un ) = 6 then
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 255
9773: PUSH
9774: LD_INT 6
9776: EQUAL
9777: IFFALSE 9793
// dest_counter := dest_counter + 1 ;
9779: LD_ADDR_EXP 8
9783: PUSH
9784: LD_EXP 8
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: ST_TO_ADDR
// end ;
9793: PPOPN 1
9795: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 255
9805: PUSH
9806: LD_INT 1
9808: EQUAL
9809: IFFALSE 9826
// ComMoveXY ( un , 57 , 52 ) ;
9811: LD_VAR 0 1
9815: PPUSH
9816: LD_INT 57
9818: PPUSH
9819: LD_INT 52
9821: PPUSH
9822: CALL_OW 111
// end ;
9826: PPOPN 2
9828: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9829: LD_EXP 21
9833: NOT
9834: IFFALSE 9884
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9836: LD_VAR 0 1
9840: PUSH
9841: LD_INT 3
9843: EQUAL
9844: PUSH
9845: LD_VAR 0 2
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: PUSH
9855: LD_VAR 0 1
9859: PUSH
9860: LD_INT 1
9862: EQUAL
9863: PUSH
9864: LD_VAR 0 2
9868: PUSH
9869: LD_INT 3
9871: EQUAL
9872: AND
9873: OR
9874: IFFALSE 9884
// us_alert := true ;
9876: LD_ADDR_EXP 21
9880: PUSH
9881: LD_INT 1
9883: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 6
9891: EQUAL
9892: PUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_INT 3
9900: EQUAL
9901: AND
9902: PUSH
9903: LD_VAR 0 1
9907: PUSH
9908: LD_INT 3
9910: EQUAL
9911: PUSH
9912: LD_VAR 0 2
9916: PUSH
9917: LD_INT 6
9919: EQUAL
9920: AND
9921: OR
9922: IFFALSE 9931
// YouLost ( alat ) ;
9924: LD_STRING alat
9926: PPUSH
9927: CALL_OW 104
// end ;
9931: PPOPN 2
9933: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 2
9946: EQUAL
9947: PUSH
9948: LD_VAR 0 1
9952: PUSH
9953: LD_INT 58
9955: PUSH
9956: EMPTY
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: IN
9978: AND
9979: IFFALSE 10100
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9981: LD_OWVAR 3
9985: PUSH
9986: LD_VAR 0 1
9990: DIFF
9991: PPUSH
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 74
10001: PPUSH
10002: CALL_OW 255
10006: PUSH
10007: LD_INT 2
10009: NONEQUAL
10010: IFFALSE 10100
// begin Wait ( 0 0$1.3 ) ;
10012: LD_INT 46
10014: PPUSH
10015: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 250
10028: PPUSH
10029: LD_VAR 0 1
10033: PPUSH
10034: CALL_OW 251
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: CALL_OW 250
10055: PPUSH
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 251
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 250
10082: PPUSH
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL_OW 251
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 453
// end ; end ;
10100: PPOPN 1
10102: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10103: LD_VAR 0 2
10107: PUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PPUSH
10132: CALL_OW 69
10136: IN
10137: PUSH
10138: LD_VAR 0 2
10142: PPUSH
10143: CALL 10622 0 1
10147: PPUSH
10148: CALL_OW 255
10152: PUSH
10153: LD_INT 2
10155: EQUAL
10156: NOT
10157: AND
10158: IFFALSE 10283
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10160: LD_INT 105
10162: PPUSH
10163: LD_INT 210
10165: PPUSH
10166: CALL_OW 12
10170: PPUSH
10171: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 250
10184: PPUSH
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 251
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10202: LD_VAR 0 2
10206: PPUSH
10207: CALL_OW 250
10211: PPUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 251
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10229: LD_VAR 0 2
10233: PPUSH
10234: CALL_OW 250
10238: PPUSH
10239: LD_VAR 0 2
10243: PPUSH
10244: CALL_OW 251
10248: PPUSH
10249: LD_INT 3
10251: PPUSH
10252: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10256: LD_VAR 0 2
10260: PPUSH
10261: CALL_OW 250
10265: PPUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: CALL_OW 251
10275: PPUSH
10276: LD_INT 3
10278: PPUSH
10279: CALL_OW 453
// end ; end ;
10283: PPOPN 4
10285: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: CALL 25693 0 3
// end ;
10305: PPOPN 3
10307: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL 25701 0 1
// end ; end_of_file
10317: PPOPN 1
10319: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10325: LD_ADDR_VAR 0 7
10329: PUSH
10330: LD_VAR 0 1
10334: PUSH
10335: LD_VAR 0 2
10339: ARRAY
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_VAR 0 4
10350: PPUSH
10351: CALL_OW 1
10355: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10356: LD_ADDR_VAR 0 1
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_VAR 0 2
10370: PPUSH
10371: LD_VAR 0 7
10375: PPUSH
10376: CALL_OW 1
10380: ST_TO_ADDR
// result := tab ;
10381: LD_ADDR_VAR 0 5
10385: PUSH
10386: LD_VAR 0 1
10390: ST_TO_ADDR
// end ;
10391: LD_VAR 0 5
10395: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10396: LD_INT 0
10398: PPUSH
10399: PPUSH
10400: PPUSH
// if not GetControl ( veh ) = control_manual then
10401: LD_VAR 0 1
10405: PPUSH
10406: CALL_OW 263
10410: PUSH
10411: LD_INT 1
10413: EQUAL
10414: NOT
10415: IFFALSE 10427
// result := false else
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_INT 0
10424: ST_TO_ADDR
10425: GO 10572
// if veh in FilterAllUnits ( [ f_empty ] ) then
10427: LD_VAR 0 1
10431: PUSH
10432: LD_INT 58
10434: PUSH
10435: EMPTY
10436: LIST
10437: PPUSH
10438: CALL_OW 69
10442: IN
10443: IFFALSE 10455
// result := false else
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
10453: GO 10572
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10455: LD_ADDR_VAR 0 4
10459: PUSH
10460: LD_INT 22
10462: PUSH
10463: LD_VAR 0 1
10467: PPUSH
10468: CALL_OW 255
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 55
10479: PUSH
10480: EMPTY
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// if not filter then
10492: LD_VAR 0 4
10496: NOT
10497: IFFALSE 10509
// result := false else
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_INT 0
10506: ST_TO_ADDR
10507: GO 10572
// for i = 1 to filter do
10509: LD_ADDR_VAR 0 3
10513: PUSH
10514: DOUBLE
10515: LD_INT 1
10517: DEC
10518: ST_TO_ADDR
10519: LD_VAR 0 4
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10570
// if IsDriver ( filter [ i ] ) = veh then
10527: LD_VAR 0 4
10531: PUSH
10532: LD_VAR 0 3
10536: ARRAY
10537: PPUSH
10538: CALL 64578 0 1
10542: PUSH
10543: LD_VAR 0 1
10547: EQUAL
10548: IFFALSE 10568
// begin result := filter [ i ] ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 4
10559: PUSH
10560: LD_VAR 0 3
10564: ARRAY
10565: ST_TO_ADDR
// break ;
10566: GO 10570
// end ;
10568: GO 10524
10570: POP
10571: POP
// end ; end ;
10572: LD_VAR 0 2
10576: RET
// export function FindTarget ( unit ) ; begin
10577: LD_INT 0
10579: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 81
10587: PUSH
10588: LD_VAR 0 1
10592: PPUSH
10593: CALL_OW 255
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PPUSH
10602: CALL_OW 69
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 74
10616: ST_TO_ADDR
// end ;
10617: LD_VAR 0 2
10621: RET
// export function NearestUnit ( unit ) ; begin
10622: LD_INT 0
10624: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_OWVAR 3
10634: PUSH
10635: LD_VAR 0 1
10639: DIFF
10640: PPUSH
10641: LD_VAR 0 1
10645: PPUSH
10646: CALL_OW 74
10650: ST_TO_ADDR
// end ; end_of_file
10651: LD_VAR 0 2
10655: RET
// every 12 12$00 do
10656: GO 10658
10658: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10659: LD_INT 1
10661: PPUSH
10662: LD_INT 570
10664: PPUSH
10665: LD_INT 350
10667: PPUSH
10668: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10672: LD_INT 10500
10674: PPUSH
10675: LD_INT 21000
10677: PPUSH
10678: CALL_OW 12
10682: PPUSH
10683: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10687: LD_INT 0
10689: PPUSH
10690: LD_INT 570
10692: PPUSH
10693: LD_INT 350
10695: PPUSH
10696: CALL_OW 550
// end ;
10700: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10701: LD_INT 0
10703: PPUSH
10704: PPUSH
10705: PPUSH
10706: PPUSH
10707: PPUSH
// uc_nation = nation_nature ;
10708: LD_ADDR_OWVAR 21
10712: PUSH
10713: LD_INT 0
10715: ST_TO_ADDR
// uc_side = 0 ;
10716: LD_ADDR_OWVAR 20
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// l = 0 ;
10724: LD_ADDR_VAR 0 6
10728: PUSH
10729: LD_INT 0
10731: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10732: LD_ADDR_OWVAR 24
10736: PUSH
10737: LD_INT 0
10739: PPUSH
10740: LD_INT 5
10742: PPUSH
10743: CALL_OW 12
10747: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10748: LD_ADDR_OWVAR 35
10752: PUSH
10753: LD_INT 5
10755: NEG
10756: PPUSH
10757: LD_INT 5
10759: PPUSH
10760: CALL_OW 12
10764: ST_TO_ADDR
// hc_gallery =  ;
10765: LD_ADDR_OWVAR 33
10769: PUSH
10770: LD_STRING 
10772: ST_TO_ADDR
// hc_class = class_apeman ;
10773: LD_ADDR_OWVAR 28
10777: PUSH
10778: LD_INT 12
10780: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10781: LD_ADDR_OWVAR 29
10785: PUSH
10786: LD_INT 11
10788: PPUSH
10789: LD_INT 13
10791: PPUSH
10792: CALL_OW 12
10796: PUSH
10797: LD_INT 10
10799: PPUSH
10800: LD_INT 11
10802: PPUSH
10803: CALL_OW 12
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: ST_TO_ADDR
// hc_sex = sex_male ;
10812: LD_ADDR_OWVAR 27
10816: PUSH
10817: LD_INT 1
10819: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10820: LD_ADDR_OWVAR 31
10824: PUSH
10825: LD_INT 0
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 12
10835: PUSH
10836: LD_INT 0
10838: PUSH
10839: LD_INT 0
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: ST_TO_ADDR
// apeman = CreateHuman ;
10851: LD_ADDR_VAR 0 7
10855: PUSH
10856: CALL_OW 44
10860: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10861: LD_VAR 0 7
10865: PPUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_INT 0
10873: PPUSH
10874: CALL_OW 49
// l = l + 1 ;
10878: LD_ADDR_VAR 0 6
10882: PUSH
10883: LD_VAR 0 6
10887: PUSH
10888: LD_INT 1
10890: PLUS
10891: ST_TO_ADDR
// end until l = num1 ;
10892: LD_VAR 0 6
10896: PUSH
10897: LD_VAR 0 1
10901: EQUAL
10902: IFFALSE 10732
// l = 0 ;
10904: LD_ADDR_VAR 0 6
10908: PUSH
10909: LD_INT 0
10911: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10912: LD_ADDR_OWVAR 35
10916: PUSH
10917: LD_INT 0
10919: PPUSH
10920: LD_INT 25
10922: PPUSH
10923: CALL_OW 12
10927: ST_TO_ADDR
// hc_class = class_tiger ;
10928: LD_ADDR_OWVAR 28
10932: PUSH
10933: LD_INT 14
10935: ST_TO_ADDR
// hc_sex = sex_male ;
10936: LD_ADDR_OWVAR 27
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// hc_gallery = sandnature ;
10944: LD_ADDR_OWVAR 33
10948: PUSH
10949: LD_STRING sandnature
10951: ST_TO_ADDR
// hc_face_number = 3 ;
10952: LD_ADDR_OWVAR 34
10956: PUSH
10957: LD_INT 3
10959: ST_TO_ADDR
// tiger = CreateHuman ;
10960: LD_ADDR_VAR 0 8
10964: PUSH
10965: CALL_OW 44
10969: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10970: LD_VAR 0 8
10974: PPUSH
10975: LD_VAR 0 4
10979: PPUSH
10980: LD_INT 0
10982: PPUSH
10983: CALL_OW 49
// l = l + 1 ;
10987: LD_ADDR_VAR 0 6
10991: PUSH
10992: LD_VAR 0 6
10996: PUSH
10997: LD_INT 1
10999: PLUS
11000: ST_TO_ADDR
// end until l = num2 ;
11001: LD_VAR 0 6
11005: PUSH
11006: LD_VAR 0 2
11010: EQUAL
11011: IFFALSE 10912
// l = 0 ;
11013: LD_ADDR_VAR 0 6
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11021: LD_ADDR_OWVAR 28
11025: PUSH
11026: LD_INT 18
11028: ST_TO_ADDR
// hc_gallery = sandnature ;
11029: LD_ADDR_OWVAR 33
11033: PUSH
11034: LD_STRING sandnature
11036: ST_TO_ADDR
// hc_face_number = 1 ;
11037: LD_ADDR_OWVAR 34
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// bird = CreateHuman ;
11045: LD_ADDR_VAR 0 9
11049: PUSH
11050: CALL_OW 44
11054: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11055: LD_VAR 0 9
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 51
// l = l + 1 ;
11067: LD_ADDR_VAR 0 6
11071: PUSH
11072: LD_VAR 0 6
11076: PUSH
11077: LD_INT 1
11079: PLUS
11080: ST_TO_ADDR
// end until l = num3 ;
11081: LD_VAR 0 6
11085: PUSH
11086: LD_VAR 0 3
11090: EQUAL
11091: IFFALSE 11021
// end ; end_of_file
11093: LD_VAR 0 5
11097: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11098: LD_INT 0
11100: PPUSH
// ar_miner := 81 ;
11101: LD_ADDR_EXP 33
11105: PUSH
11106: LD_INT 81
11108: ST_TO_ADDR
// ar_crane := 88 ;
11109: LD_ADDR_EXP 32
11113: PUSH
11114: LD_INT 88
11116: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11117: LD_ADDR_EXP 27
11121: PUSH
11122: LD_INT 89
11124: ST_TO_ADDR
// us_hack := 99 ;
11125: LD_ADDR_EXP 28
11129: PUSH
11130: LD_INT 99
11132: ST_TO_ADDR
// us_artillery := 97 ;
11133: LD_ADDR_EXP 29
11137: PUSH
11138: LD_INT 97
11140: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11141: LD_ADDR_EXP 30
11145: PUSH
11146: LD_INT 91
11148: ST_TO_ADDR
// ar_mortar := 92 ;
11149: LD_ADDR_EXP 31
11153: PUSH
11154: LD_INT 92
11156: ST_TO_ADDR
// ru_radar := 98 ;
11157: LD_ADDR_EXP 26
11161: PUSH
11162: LD_INT 98
11164: ST_TO_ADDR
// tech_Artillery := 80 ;
11165: LD_ADDR_EXP 34
11169: PUSH
11170: LD_INT 80
11172: ST_TO_ADDR
// tech_RadMat := 81 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 81
11180: ST_TO_ADDR
// tech_BasicTools := 82 ;
11181: LD_ADDR_EXP 36
11185: PUSH
11186: LD_INT 82
11188: ST_TO_ADDR
// tech_Cargo := 83 ;
11189: LD_ADDR_EXP 37
11193: PUSH
11194: LD_INT 83
11196: ST_TO_ADDR
// tech_Track := 84 ;
11197: LD_ADDR_EXP 38
11201: PUSH
11202: LD_INT 84
11204: ST_TO_ADDR
// tech_Crane := 85 ;
11205: LD_ADDR_EXP 39
11209: PUSH
11210: LD_INT 85
11212: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11213: LD_ADDR_EXP 40
11217: PUSH
11218: LD_INT 86
11220: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11221: LD_ADDR_EXP 41
11225: PUSH
11226: LD_INT 87
11228: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11229: LD_ADDR_EXP 42
11233: PUSH
11234: LD_INT 88
11236: ST_TO_ADDR
// class_mastodont := 31 ;
11237: LD_ADDR_EXP 43
11241: PUSH
11242: LD_INT 31
11244: ST_TO_ADDR
// class_horse := 21 ;
11245: LD_ADDR_EXP 44
11249: PUSH
11250: LD_INT 21
11252: ST_TO_ADDR
// end ;
11253: LD_VAR 0 1
11257: RET
// every 1 do
11258: GO 11260
11260: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11261: CALL 11098 0 0
11265: END
// every 0 0$1 do
11266: GO 11268
11268: DISABLE
// begin enable ;
11269: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11270: LD_STRING updateTimer(
11272: PUSH
11273: LD_OWVAR 1
11277: STR
11278: PUSH
11279: LD_STRING );
11281: STR
11282: PPUSH
11283: CALL_OW 559
// end ;
11287: END
// on MapStart ( p ) do begin if streamModeActive then
11288: LD_EXP 45
11292: IFFALSE 11301
// DefineStreamItems ( true ) ;
11294: LD_INT 1
11296: PPUSH
11297: CALL 12949 0 1
// UpdateFactoryWaypoints ( ) ;
11301: CALL 26533 0 0
// end ;
11305: PPOPN 1
11307: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11308: LD_INT 0
11310: PPUSH
// if p2 = 100 then
11311: LD_VAR 0 2
11315: PUSH
11316: LD_INT 100
11318: EQUAL
11319: IFFALSE 12322
// begin if not StreamModeActive then
11321: LD_EXP 45
11325: NOT
11326: IFFALSE 11336
// StreamModeActive := true ;
11328: LD_ADDR_EXP 45
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// if p3 = 0 then
11336: LD_VAR 0 3
11340: PUSH
11341: LD_INT 0
11343: EQUAL
11344: IFFALSE 11350
// InitStreamMode ;
11346: CALL 12485 0 0
// if p3 = 1 then
11350: LD_VAR 0 3
11354: PUSH
11355: LD_INT 1
11357: EQUAL
11358: IFFALSE 11368
// sRocket := true ;
11360: LD_ADDR_EXP 50
11364: PUSH
11365: LD_INT 1
11367: ST_TO_ADDR
// if p3 = 2 then
11368: LD_VAR 0 3
11372: PUSH
11373: LD_INT 2
11375: EQUAL
11376: IFFALSE 11386
// sSpeed := true ;
11378: LD_ADDR_EXP 49
11382: PUSH
11383: LD_INT 1
11385: ST_TO_ADDR
// if p3 = 3 then
11386: LD_VAR 0 3
11390: PUSH
11391: LD_INT 3
11393: EQUAL
11394: IFFALSE 11404
// sEngine := true ;
11396: LD_ADDR_EXP 51
11400: PUSH
11401: LD_INT 1
11403: ST_TO_ADDR
// if p3 = 4 then
11404: LD_VAR 0 3
11408: PUSH
11409: LD_INT 4
11411: EQUAL
11412: IFFALSE 11422
// sSpec := true ;
11414: LD_ADDR_EXP 48
11418: PUSH
11419: LD_INT 1
11421: ST_TO_ADDR
// if p3 = 5 then
11422: LD_VAR 0 3
11426: PUSH
11427: LD_INT 5
11429: EQUAL
11430: IFFALSE 11440
// sLevel := true ;
11432: LD_ADDR_EXP 52
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// if p3 = 6 then
11440: LD_VAR 0 3
11444: PUSH
11445: LD_INT 6
11447: EQUAL
11448: IFFALSE 11458
// sArmoury := true ;
11450: LD_ADDR_EXP 53
11454: PUSH
11455: LD_INT 1
11457: ST_TO_ADDR
// if p3 = 7 then
11458: LD_VAR 0 3
11462: PUSH
11463: LD_INT 7
11465: EQUAL
11466: IFFALSE 11476
// sRadar := true ;
11468: LD_ADDR_EXP 54
11472: PUSH
11473: LD_INT 1
11475: ST_TO_ADDR
// if p3 = 8 then
11476: LD_VAR 0 3
11480: PUSH
11481: LD_INT 8
11483: EQUAL
11484: IFFALSE 11494
// sBunker := true ;
11486: LD_ADDR_EXP 55
11490: PUSH
11491: LD_INT 1
11493: ST_TO_ADDR
// if p3 = 9 then
11494: LD_VAR 0 3
11498: PUSH
11499: LD_INT 9
11501: EQUAL
11502: IFFALSE 11512
// sHack := true ;
11504: LD_ADDR_EXP 56
11508: PUSH
11509: LD_INT 1
11511: ST_TO_ADDR
// if p3 = 10 then
11512: LD_VAR 0 3
11516: PUSH
11517: LD_INT 10
11519: EQUAL
11520: IFFALSE 11530
// sFire := true ;
11522: LD_ADDR_EXP 57
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// if p3 = 11 then
11530: LD_VAR 0 3
11534: PUSH
11535: LD_INT 11
11537: EQUAL
11538: IFFALSE 11548
// sRefresh := true ;
11540: LD_ADDR_EXP 58
11544: PUSH
11545: LD_INT 1
11547: ST_TO_ADDR
// if p3 = 12 then
11548: LD_VAR 0 3
11552: PUSH
11553: LD_INT 12
11555: EQUAL
11556: IFFALSE 11566
// sExp := true ;
11558: LD_ADDR_EXP 59
11562: PUSH
11563: LD_INT 1
11565: ST_TO_ADDR
// if p3 = 13 then
11566: LD_VAR 0 3
11570: PUSH
11571: LD_INT 13
11573: EQUAL
11574: IFFALSE 11584
// sDepot := true ;
11576: LD_ADDR_EXP 60
11580: PUSH
11581: LD_INT 1
11583: ST_TO_ADDR
// if p3 = 14 then
11584: LD_VAR 0 3
11588: PUSH
11589: LD_INT 14
11591: EQUAL
11592: IFFALSE 11602
// sFlag := true ;
11594: LD_ADDR_EXP 61
11598: PUSH
11599: LD_INT 1
11601: ST_TO_ADDR
// if p3 = 15 then
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 15
11609: EQUAL
11610: IFFALSE 11620
// sKamikadze := true ;
11612: LD_ADDR_EXP 69
11616: PUSH
11617: LD_INT 1
11619: ST_TO_ADDR
// if p3 = 16 then
11620: LD_VAR 0 3
11624: PUSH
11625: LD_INT 16
11627: EQUAL
11628: IFFALSE 11638
// sTroll := true ;
11630: LD_ADDR_EXP 70
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// if p3 = 17 then
11638: LD_VAR 0 3
11642: PUSH
11643: LD_INT 17
11645: EQUAL
11646: IFFALSE 11656
// sSlow := true ;
11648: LD_ADDR_EXP 71
11652: PUSH
11653: LD_INT 1
11655: ST_TO_ADDR
// if p3 = 18 then
11656: LD_VAR 0 3
11660: PUSH
11661: LD_INT 18
11663: EQUAL
11664: IFFALSE 11674
// sLack := true ;
11666: LD_ADDR_EXP 72
11670: PUSH
11671: LD_INT 1
11673: ST_TO_ADDR
// if p3 = 19 then
11674: LD_VAR 0 3
11678: PUSH
11679: LD_INT 19
11681: EQUAL
11682: IFFALSE 11692
// sTank := true ;
11684: LD_ADDR_EXP 74
11688: PUSH
11689: LD_INT 1
11691: ST_TO_ADDR
// if p3 = 20 then
11692: LD_VAR 0 3
11696: PUSH
11697: LD_INT 20
11699: EQUAL
11700: IFFALSE 11710
// sRemote := true ;
11702: LD_ADDR_EXP 75
11706: PUSH
11707: LD_INT 1
11709: ST_TO_ADDR
// if p3 = 21 then
11710: LD_VAR 0 3
11714: PUSH
11715: LD_INT 21
11717: EQUAL
11718: IFFALSE 11728
// sPowell := true ;
11720: LD_ADDR_EXP 76
11724: PUSH
11725: LD_INT 1
11727: ST_TO_ADDR
// if p3 = 22 then
11728: LD_VAR 0 3
11732: PUSH
11733: LD_INT 22
11735: EQUAL
11736: IFFALSE 11746
// sTeleport := true ;
11738: LD_ADDR_EXP 79
11742: PUSH
11743: LD_INT 1
11745: ST_TO_ADDR
// if p3 = 23 then
11746: LD_VAR 0 3
11750: PUSH
11751: LD_INT 23
11753: EQUAL
11754: IFFALSE 11764
// sOilTower := true ;
11756: LD_ADDR_EXP 81
11760: PUSH
11761: LD_INT 1
11763: ST_TO_ADDR
// if p3 = 24 then
11764: LD_VAR 0 3
11768: PUSH
11769: LD_INT 24
11771: EQUAL
11772: IFFALSE 11782
// sShovel := true ;
11774: LD_ADDR_EXP 82
11778: PUSH
11779: LD_INT 1
11781: ST_TO_ADDR
// if p3 = 25 then
11782: LD_VAR 0 3
11786: PUSH
11787: LD_INT 25
11789: EQUAL
11790: IFFALSE 11800
// sSheik := true ;
11792: LD_ADDR_EXP 83
11796: PUSH
11797: LD_INT 1
11799: ST_TO_ADDR
// if p3 = 26 then
11800: LD_VAR 0 3
11804: PUSH
11805: LD_INT 26
11807: EQUAL
11808: IFFALSE 11818
// sEarthquake := true ;
11810: LD_ADDR_EXP 85
11814: PUSH
11815: LD_INT 1
11817: ST_TO_ADDR
// if p3 = 27 then
11818: LD_VAR 0 3
11822: PUSH
11823: LD_INT 27
11825: EQUAL
11826: IFFALSE 11836
// sAI := true ;
11828: LD_ADDR_EXP 86
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// if p3 = 28 then
11836: LD_VAR 0 3
11840: PUSH
11841: LD_INT 28
11843: EQUAL
11844: IFFALSE 11854
// sCargo := true ;
11846: LD_ADDR_EXP 89
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// if p3 = 29 then
11854: LD_VAR 0 3
11858: PUSH
11859: LD_INT 29
11861: EQUAL
11862: IFFALSE 11872
// sDLaser := true ;
11864: LD_ADDR_EXP 90
11868: PUSH
11869: LD_INT 1
11871: ST_TO_ADDR
// if p3 = 30 then
11872: LD_VAR 0 3
11876: PUSH
11877: LD_INT 30
11879: EQUAL
11880: IFFALSE 11890
// sExchange := true ;
11882: LD_ADDR_EXP 91
11886: PUSH
11887: LD_INT 1
11889: ST_TO_ADDR
// if p3 = 31 then
11890: LD_VAR 0 3
11894: PUSH
11895: LD_INT 31
11897: EQUAL
11898: IFFALSE 11908
// sFac := true ;
11900: LD_ADDR_EXP 92
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// if p3 = 32 then
11908: LD_VAR 0 3
11912: PUSH
11913: LD_INT 32
11915: EQUAL
11916: IFFALSE 11926
// sPower := true ;
11918: LD_ADDR_EXP 93
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// if p3 = 33 then
11926: LD_VAR 0 3
11930: PUSH
11931: LD_INT 33
11933: EQUAL
11934: IFFALSE 11944
// sRandom := true ;
11936: LD_ADDR_EXP 94
11940: PUSH
11941: LD_INT 1
11943: ST_TO_ADDR
// if p3 = 34 then
11944: LD_VAR 0 3
11948: PUSH
11949: LD_INT 34
11951: EQUAL
11952: IFFALSE 11962
// sShield := true ;
11954: LD_ADDR_EXP 95
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// if p3 = 35 then
11962: LD_VAR 0 3
11966: PUSH
11967: LD_INT 35
11969: EQUAL
11970: IFFALSE 11980
// sTime := true ;
11972: LD_ADDR_EXP 96
11976: PUSH
11977: LD_INT 1
11979: ST_TO_ADDR
// if p3 = 36 then
11980: LD_VAR 0 3
11984: PUSH
11985: LD_INT 36
11987: EQUAL
11988: IFFALSE 11998
// sTools := true ;
11990: LD_ADDR_EXP 97
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// if p3 = 101 then
11998: LD_VAR 0 3
12002: PUSH
12003: LD_INT 101
12005: EQUAL
12006: IFFALSE 12016
// sSold := true ;
12008: LD_ADDR_EXP 62
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// if p3 = 102 then
12016: LD_VAR 0 3
12020: PUSH
12021: LD_INT 102
12023: EQUAL
12024: IFFALSE 12034
// sDiff := true ;
12026: LD_ADDR_EXP 63
12030: PUSH
12031: LD_INT 1
12033: ST_TO_ADDR
// if p3 = 103 then
12034: LD_VAR 0 3
12038: PUSH
12039: LD_INT 103
12041: EQUAL
12042: IFFALSE 12052
// sFog := true ;
12044: LD_ADDR_EXP 66
12048: PUSH
12049: LD_INT 1
12051: ST_TO_ADDR
// if p3 = 104 then
12052: LD_VAR 0 3
12056: PUSH
12057: LD_INT 104
12059: EQUAL
12060: IFFALSE 12070
// sReset := true ;
12062: LD_ADDR_EXP 67
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// if p3 = 105 then
12070: LD_VAR 0 3
12074: PUSH
12075: LD_INT 105
12077: EQUAL
12078: IFFALSE 12088
// sSun := true ;
12080: LD_ADDR_EXP 68
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// if p3 = 106 then
12088: LD_VAR 0 3
12092: PUSH
12093: LD_INT 106
12095: EQUAL
12096: IFFALSE 12106
// sTiger := true ;
12098: LD_ADDR_EXP 64
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// if p3 = 107 then
12106: LD_VAR 0 3
12110: PUSH
12111: LD_INT 107
12113: EQUAL
12114: IFFALSE 12124
// sBomb := true ;
12116: LD_ADDR_EXP 65
12120: PUSH
12121: LD_INT 1
12123: ST_TO_ADDR
// if p3 = 108 then
12124: LD_VAR 0 3
12128: PUSH
12129: LD_INT 108
12131: EQUAL
12132: IFFALSE 12142
// sWound := true ;
12134: LD_ADDR_EXP 73
12138: PUSH
12139: LD_INT 1
12141: ST_TO_ADDR
// if p3 = 109 then
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 109
12149: EQUAL
12150: IFFALSE 12160
// sBetray := true ;
12152: LD_ADDR_EXP 77
12156: PUSH
12157: LD_INT 1
12159: ST_TO_ADDR
// if p3 = 110 then
12160: LD_VAR 0 3
12164: PUSH
12165: LD_INT 110
12167: EQUAL
12168: IFFALSE 12178
// sContamin := true ;
12170: LD_ADDR_EXP 78
12174: PUSH
12175: LD_INT 1
12177: ST_TO_ADDR
// if p3 = 111 then
12178: LD_VAR 0 3
12182: PUSH
12183: LD_INT 111
12185: EQUAL
12186: IFFALSE 12196
// sOil := true ;
12188: LD_ADDR_EXP 80
12192: PUSH
12193: LD_INT 1
12195: ST_TO_ADDR
// if p3 = 112 then
12196: LD_VAR 0 3
12200: PUSH
12201: LD_INT 112
12203: EQUAL
12204: IFFALSE 12214
// sStu := true ;
12206: LD_ADDR_EXP 84
12210: PUSH
12211: LD_INT 1
12213: ST_TO_ADDR
// if p3 = 113 then
12214: LD_VAR 0 3
12218: PUSH
12219: LD_INT 113
12221: EQUAL
12222: IFFALSE 12232
// sBazooka := true ;
12224: LD_ADDR_EXP 87
12228: PUSH
12229: LD_INT 1
12231: ST_TO_ADDR
// if p3 = 114 then
12232: LD_VAR 0 3
12236: PUSH
12237: LD_INT 114
12239: EQUAL
12240: IFFALSE 12250
// sMortar := true ;
12242: LD_ADDR_EXP 88
12246: PUSH
12247: LD_INT 1
12249: ST_TO_ADDR
// if p3 = 115 then
12250: LD_VAR 0 3
12254: PUSH
12255: LD_INT 115
12257: EQUAL
12258: IFFALSE 12268
// sRanger := true ;
12260: LD_ADDR_EXP 98
12264: PUSH
12265: LD_INT 1
12267: ST_TO_ADDR
// if p3 = 116 then
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 116
12275: EQUAL
12276: IFFALSE 12286
// sComputer := true ;
12278: LD_ADDR_EXP 99
12282: PUSH
12283: LD_INT 1
12285: ST_TO_ADDR
// if p3 = 117 then
12286: LD_VAR 0 3
12290: PUSH
12291: LD_INT 117
12293: EQUAL
12294: IFFALSE 12304
// s30 := true ;
12296: LD_ADDR_EXP 100
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// if p3 = 118 then
12304: LD_VAR 0 3
12308: PUSH
12309: LD_INT 118
12311: EQUAL
12312: IFFALSE 12322
// s60 := true ;
12314: LD_ADDR_EXP 101
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// end ; if p2 = 101 then
12322: LD_VAR 0 2
12326: PUSH
12327: LD_INT 101
12329: EQUAL
12330: IFFALSE 12458
// begin case p3 of 1 :
12332: LD_VAR 0 3
12336: PUSH
12337: LD_INT 1
12339: DOUBLE
12340: EQUAL
12341: IFTRUE 12345
12343: GO 12352
12345: POP
// hHackUnlimitedResources ; 2 :
12346: CALL 24556 0 0
12350: GO 12458
12352: LD_INT 2
12354: DOUBLE
12355: EQUAL
12356: IFTRUE 12360
12358: GO 12367
12360: POP
// hHackSetLevel10 ; 3 :
12361: CALL 24689 0 0
12365: GO 12458
12367: LD_INT 3
12369: DOUBLE
12370: EQUAL
12371: IFTRUE 12375
12373: GO 12382
12375: POP
// hHackSetLevel10YourUnits ; 4 :
12376: CALL 24774 0 0
12380: GO 12458
12382: LD_INT 4
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12397
12390: POP
// hHackInvincible ; 5 :
12391: CALL 25222 0 0
12395: GO 12458
12397: LD_INT 5
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12412
12405: POP
// hHackInvisible ; 6 :
12406: CALL 25333 0 0
12410: GO 12458
12412: LD_INT 6
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12427
12420: POP
// hHackChangeYourSide ; 7 :
12421: CALL 25390 0 0
12425: GO 12458
12427: LD_INT 7
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12442
12435: POP
// hHackChangeUnitSide ; 8 :
12436: CALL 25432 0 0
12440: GO 12458
12442: LD_INT 8
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12457
12450: POP
// hHackFog ; end ;
12451: CALL 25533 0 0
12455: GO 12458
12457: POP
// end ; end ;
12458: LD_VAR 0 7
12462: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
12463: GO 12465
12465: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12466: LD_STRING initStreamRollete();
12468: PPUSH
12469: CALL_OW 559
// InitStreamMode ;
12473: CALL 12485 0 0
// DefineStreamItems ( false ) ;
12477: LD_INT 0
12479: PPUSH
12480: CALL 12949 0 1
// end ;
12484: END
// function InitStreamMode ; begin
12485: LD_INT 0
12487: PPUSH
// streamModeActive := false ;
12488: LD_ADDR_EXP 45
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// normalCounter := 36 ;
12496: LD_ADDR_EXP 46
12500: PUSH
12501: LD_INT 36
12503: ST_TO_ADDR
// hardcoreCounter := 18 ;
12504: LD_ADDR_EXP 47
12508: PUSH
12509: LD_INT 18
12511: ST_TO_ADDR
// sRocket := false ;
12512: LD_ADDR_EXP 50
12516: PUSH
12517: LD_INT 0
12519: ST_TO_ADDR
// sSpeed := false ;
12520: LD_ADDR_EXP 49
12524: PUSH
12525: LD_INT 0
12527: ST_TO_ADDR
// sEngine := false ;
12528: LD_ADDR_EXP 51
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// sSpec := false ;
12536: LD_ADDR_EXP 48
12540: PUSH
12541: LD_INT 0
12543: ST_TO_ADDR
// sLevel := false ;
12544: LD_ADDR_EXP 52
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// sArmoury := false ;
12552: LD_ADDR_EXP 53
12556: PUSH
12557: LD_INT 0
12559: ST_TO_ADDR
// sRadar := false ;
12560: LD_ADDR_EXP 54
12564: PUSH
12565: LD_INT 0
12567: ST_TO_ADDR
// sBunker := false ;
12568: LD_ADDR_EXP 55
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// sHack := false ;
12576: LD_ADDR_EXP 56
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// sFire := false ;
12584: LD_ADDR_EXP 57
12588: PUSH
12589: LD_INT 0
12591: ST_TO_ADDR
// sRefresh := false ;
12592: LD_ADDR_EXP 58
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// sExp := false ;
12600: LD_ADDR_EXP 59
12604: PUSH
12605: LD_INT 0
12607: ST_TO_ADDR
// sDepot := false ;
12608: LD_ADDR_EXP 60
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// sFlag := false ;
12616: LD_ADDR_EXP 61
12620: PUSH
12621: LD_INT 0
12623: ST_TO_ADDR
// sKamikadze := false ;
12624: LD_ADDR_EXP 69
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// sTroll := false ;
12632: LD_ADDR_EXP 70
12636: PUSH
12637: LD_INT 0
12639: ST_TO_ADDR
// sSlow := false ;
12640: LD_ADDR_EXP 71
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// sLack := false ;
12648: LD_ADDR_EXP 72
12652: PUSH
12653: LD_INT 0
12655: ST_TO_ADDR
// sTank := false ;
12656: LD_ADDR_EXP 74
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// sRemote := false ;
12664: LD_ADDR_EXP 75
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// sPowell := false ;
12672: LD_ADDR_EXP 76
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// sTeleport := false ;
12680: LD_ADDR_EXP 79
12684: PUSH
12685: LD_INT 0
12687: ST_TO_ADDR
// sOilTower := false ;
12688: LD_ADDR_EXP 81
12692: PUSH
12693: LD_INT 0
12695: ST_TO_ADDR
// sShovel := false ;
12696: LD_ADDR_EXP 82
12700: PUSH
12701: LD_INT 0
12703: ST_TO_ADDR
// sSheik := false ;
12704: LD_ADDR_EXP 83
12708: PUSH
12709: LD_INT 0
12711: ST_TO_ADDR
// sEarthquake := false ;
12712: LD_ADDR_EXP 85
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// sAI := false ;
12720: LD_ADDR_EXP 86
12724: PUSH
12725: LD_INT 0
12727: ST_TO_ADDR
// sCargo := false ;
12728: LD_ADDR_EXP 89
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// sDLaser := false ;
12736: LD_ADDR_EXP 90
12740: PUSH
12741: LD_INT 0
12743: ST_TO_ADDR
// sExchange := false ;
12744: LD_ADDR_EXP 91
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// sFac := false ;
12752: LD_ADDR_EXP 92
12756: PUSH
12757: LD_INT 0
12759: ST_TO_ADDR
// sPower := false ;
12760: LD_ADDR_EXP 93
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// sRandom := false ;
12768: LD_ADDR_EXP 94
12772: PUSH
12773: LD_INT 0
12775: ST_TO_ADDR
// sShield := false ;
12776: LD_ADDR_EXP 95
12780: PUSH
12781: LD_INT 0
12783: ST_TO_ADDR
// sTime := false ;
12784: LD_ADDR_EXP 96
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// sTools := false ;
12792: LD_ADDR_EXP 97
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// sSold := false ;
12800: LD_ADDR_EXP 62
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// sDiff := false ;
12808: LD_ADDR_EXP 63
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// sFog := false ;
12816: LD_ADDR_EXP 66
12820: PUSH
12821: LD_INT 0
12823: ST_TO_ADDR
// sReset := false ;
12824: LD_ADDR_EXP 67
12828: PUSH
12829: LD_INT 0
12831: ST_TO_ADDR
// sSun := false ;
12832: LD_ADDR_EXP 68
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// sTiger := false ;
12840: LD_ADDR_EXP 64
12844: PUSH
12845: LD_INT 0
12847: ST_TO_ADDR
// sBomb := false ;
12848: LD_ADDR_EXP 65
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// sWound := false ;
12856: LD_ADDR_EXP 73
12860: PUSH
12861: LD_INT 0
12863: ST_TO_ADDR
// sBetray := false ;
12864: LD_ADDR_EXP 77
12868: PUSH
12869: LD_INT 0
12871: ST_TO_ADDR
// sContamin := false ;
12872: LD_ADDR_EXP 78
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// sOil := false ;
12880: LD_ADDR_EXP 80
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// sStu := false ;
12888: LD_ADDR_EXP 84
12892: PUSH
12893: LD_INT 0
12895: ST_TO_ADDR
// sBazooka := false ;
12896: LD_ADDR_EXP 87
12900: PUSH
12901: LD_INT 0
12903: ST_TO_ADDR
// sMortar := false ;
12904: LD_ADDR_EXP 88
12908: PUSH
12909: LD_INT 0
12911: ST_TO_ADDR
// sRanger := false ;
12912: LD_ADDR_EXP 98
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// sComputer := false ;
12920: LD_ADDR_EXP 99
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// s30 := false ;
12928: LD_ADDR_EXP 100
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// s60 := false ;
12936: LD_ADDR_EXP 101
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// end ;
12944: LD_VAR 0 1
12948: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12949: LD_INT 0
12951: PPUSH
12952: PPUSH
12953: PPUSH
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
// result := [ ] ;
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: EMPTY
12964: ST_TO_ADDR
// if campaign_id = 1 then
12965: LD_OWVAR 69
12969: PUSH
12970: LD_INT 1
12972: EQUAL
12973: IFFALSE 16139
// begin case mission_number of 1 :
12975: LD_OWVAR 70
12979: PUSH
12980: LD_INT 1
12982: DOUBLE
12983: EQUAL
12984: IFTRUE 12988
12986: GO 13064
12988: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12989: LD_ADDR_VAR 0 2
12993: PUSH
12994: LD_INT 2
12996: PUSH
12997: LD_INT 4
12999: PUSH
13000: LD_INT 11
13002: PUSH
13003: LD_INT 12
13005: PUSH
13006: LD_INT 15
13008: PUSH
13009: LD_INT 16
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_INT 23
13017: PUSH
13018: LD_INT 26
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 101
13034: PUSH
13035: LD_INT 102
13037: PUSH
13038: LD_INT 106
13040: PUSH
13041: LD_INT 116
13043: PUSH
13044: LD_INT 117
13046: PUSH
13047: LD_INT 118
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: ST_TO_ADDR
13062: GO 16137
13064: LD_INT 2
13066: DOUBLE
13067: EQUAL
13068: IFTRUE 13072
13070: GO 13156
13072: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13073: LD_ADDR_VAR 0 2
13077: PUSH
13078: LD_INT 2
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: LD_INT 11
13086: PUSH
13087: LD_INT 12
13089: PUSH
13090: LD_INT 15
13092: PUSH
13093: LD_INT 16
13095: PUSH
13096: LD_INT 22
13098: PUSH
13099: LD_INT 23
13101: PUSH
13102: LD_INT 26
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 101
13118: PUSH
13119: LD_INT 102
13121: PUSH
13122: LD_INT 105
13124: PUSH
13125: LD_INT 106
13127: PUSH
13128: LD_INT 108
13130: PUSH
13131: LD_INT 116
13133: PUSH
13134: LD_INT 117
13136: PUSH
13137: LD_INT 118
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: ST_TO_ADDR
13154: GO 16137
13156: LD_INT 3
13158: DOUBLE
13159: EQUAL
13160: IFTRUE 13164
13162: GO 13252
13164: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13165: LD_ADDR_VAR 0 2
13169: PUSH
13170: LD_INT 2
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: LD_INT 5
13178: PUSH
13179: LD_INT 11
13181: PUSH
13182: LD_INT 12
13184: PUSH
13185: LD_INT 15
13187: PUSH
13188: LD_INT 16
13190: PUSH
13191: LD_INT 22
13193: PUSH
13194: LD_INT 26
13196: PUSH
13197: LD_INT 36
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 101
13214: PUSH
13215: LD_INT 102
13217: PUSH
13218: LD_INT 105
13220: PUSH
13221: LD_INT 106
13223: PUSH
13224: LD_INT 108
13226: PUSH
13227: LD_INT 116
13229: PUSH
13230: LD_INT 117
13232: PUSH
13233: LD_INT 118
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: ST_TO_ADDR
13250: GO 16137
13252: LD_INT 4
13254: DOUBLE
13255: EQUAL
13256: IFTRUE 13260
13258: GO 13356
13260: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 2
13268: PUSH
13269: LD_INT 4
13271: PUSH
13272: LD_INT 5
13274: PUSH
13275: LD_INT 8
13277: PUSH
13278: LD_INT 11
13280: PUSH
13281: LD_INT 12
13283: PUSH
13284: LD_INT 15
13286: PUSH
13287: LD_INT 16
13289: PUSH
13290: LD_INT 22
13292: PUSH
13293: LD_INT 23
13295: PUSH
13296: LD_INT 26
13298: PUSH
13299: LD_INT 36
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 101
13318: PUSH
13319: LD_INT 102
13321: PUSH
13322: LD_INT 105
13324: PUSH
13325: LD_INT 106
13327: PUSH
13328: LD_INT 108
13330: PUSH
13331: LD_INT 116
13333: PUSH
13334: LD_INT 117
13336: PUSH
13337: LD_INT 118
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: ST_TO_ADDR
13354: GO 16137
13356: LD_INT 5
13358: DOUBLE
13359: EQUAL
13360: IFTRUE 13364
13362: GO 13476
13364: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13365: LD_ADDR_VAR 0 2
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 4
13375: PUSH
13376: LD_INT 5
13378: PUSH
13379: LD_INT 6
13381: PUSH
13382: LD_INT 8
13384: PUSH
13385: LD_INT 11
13387: PUSH
13388: LD_INT 12
13390: PUSH
13391: LD_INT 15
13393: PUSH
13394: LD_INT 16
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 23
13402: PUSH
13403: LD_INT 25
13405: PUSH
13406: LD_INT 26
13408: PUSH
13409: LD_INT 36
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 101
13430: PUSH
13431: LD_INT 102
13433: PUSH
13434: LD_INT 105
13436: PUSH
13437: LD_INT 106
13439: PUSH
13440: LD_INT 108
13442: PUSH
13443: LD_INT 109
13445: PUSH
13446: LD_INT 112
13448: PUSH
13449: LD_INT 116
13451: PUSH
13452: LD_INT 117
13454: PUSH
13455: LD_INT 118
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: ST_TO_ADDR
13474: GO 16137
13476: LD_INT 6
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13616
13484: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13485: LD_ADDR_VAR 0 2
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: LD_INT 4
13495: PUSH
13496: LD_INT 5
13498: PUSH
13499: LD_INT 6
13501: PUSH
13502: LD_INT 8
13504: PUSH
13505: LD_INT 11
13507: PUSH
13508: LD_INT 12
13510: PUSH
13511: LD_INT 15
13513: PUSH
13514: LD_INT 16
13516: PUSH
13517: LD_INT 20
13519: PUSH
13520: LD_INT 21
13522: PUSH
13523: LD_INT 22
13525: PUSH
13526: LD_INT 23
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 26
13534: PUSH
13535: LD_INT 30
13537: PUSH
13538: LD_INT 31
13540: PUSH
13541: LD_INT 32
13543: PUSH
13544: LD_INT 36
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 101
13570: PUSH
13571: LD_INT 102
13573: PUSH
13574: LD_INT 105
13576: PUSH
13577: LD_INT 106
13579: PUSH
13580: LD_INT 108
13582: PUSH
13583: LD_INT 109
13585: PUSH
13586: LD_INT 112
13588: PUSH
13589: LD_INT 116
13591: PUSH
13592: LD_INT 117
13594: PUSH
13595: LD_INT 118
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: ST_TO_ADDR
13614: GO 16137
13616: LD_INT 7
13618: DOUBLE
13619: EQUAL
13620: IFTRUE 13624
13622: GO 13736
13624: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13625: LD_ADDR_VAR 0 2
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 4
13635: PUSH
13636: LD_INT 5
13638: PUSH
13639: LD_INT 7
13641: PUSH
13642: LD_INT 11
13644: PUSH
13645: LD_INT 12
13647: PUSH
13648: LD_INT 15
13650: PUSH
13651: LD_INT 16
13653: PUSH
13654: LD_INT 20
13656: PUSH
13657: LD_INT 21
13659: PUSH
13660: LD_INT 22
13662: PUSH
13663: LD_INT 23
13665: PUSH
13666: LD_INT 25
13668: PUSH
13669: LD_INT 26
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 101
13690: PUSH
13691: LD_INT 102
13693: PUSH
13694: LD_INT 103
13696: PUSH
13697: LD_INT 105
13699: PUSH
13700: LD_INT 106
13702: PUSH
13703: LD_INT 108
13705: PUSH
13706: LD_INT 112
13708: PUSH
13709: LD_INT 116
13711: PUSH
13712: LD_INT 117
13714: PUSH
13715: LD_INT 118
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
13734: GO 16137
13736: LD_INT 8
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13884
13744: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13745: LD_ADDR_VAR 0 2
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: LD_INT 4
13755: PUSH
13756: LD_INT 5
13758: PUSH
13759: LD_INT 6
13761: PUSH
13762: LD_INT 7
13764: PUSH
13765: LD_INT 8
13767: PUSH
13768: LD_INT 11
13770: PUSH
13771: LD_INT 12
13773: PUSH
13774: LD_INT 15
13776: PUSH
13777: LD_INT 16
13779: PUSH
13780: LD_INT 20
13782: PUSH
13783: LD_INT 21
13785: PUSH
13786: LD_INT 22
13788: PUSH
13789: LD_INT 23
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: LD_INT 26
13797: PUSH
13798: LD_INT 30
13800: PUSH
13801: LD_INT 31
13803: PUSH
13804: LD_INT 32
13806: PUSH
13807: LD_INT 36
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 101
13834: PUSH
13835: LD_INT 102
13837: PUSH
13838: LD_INT 103
13840: PUSH
13841: LD_INT 105
13843: PUSH
13844: LD_INT 106
13846: PUSH
13847: LD_INT 108
13849: PUSH
13850: LD_INT 109
13852: PUSH
13853: LD_INT 112
13855: PUSH
13856: LD_INT 116
13858: PUSH
13859: LD_INT 117
13861: PUSH
13862: LD_INT 118
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: ST_TO_ADDR
13882: GO 16137
13884: LD_INT 9
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 14040
13892: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13893: LD_ADDR_VAR 0 2
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: LD_INT 4
13903: PUSH
13904: LD_INT 5
13906: PUSH
13907: LD_INT 6
13909: PUSH
13910: LD_INT 7
13912: PUSH
13913: LD_INT 8
13915: PUSH
13916: LD_INT 11
13918: PUSH
13919: LD_INT 12
13921: PUSH
13922: LD_INT 15
13924: PUSH
13925: LD_INT 16
13927: PUSH
13928: LD_INT 20
13930: PUSH
13931: LD_INT 21
13933: PUSH
13934: LD_INT 22
13936: PUSH
13937: LD_INT 23
13939: PUSH
13940: LD_INT 25
13942: PUSH
13943: LD_INT 26
13945: PUSH
13946: LD_INT 28
13948: PUSH
13949: LD_INT 30
13951: PUSH
13952: LD_INT 31
13954: PUSH
13955: LD_INT 32
13957: PUSH
13958: LD_INT 36
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 101
13986: PUSH
13987: LD_INT 102
13989: PUSH
13990: LD_INT 103
13992: PUSH
13993: LD_INT 105
13995: PUSH
13996: LD_INT 106
13998: PUSH
13999: LD_INT 108
14001: PUSH
14002: LD_INT 109
14004: PUSH
14005: LD_INT 112
14007: PUSH
14008: LD_INT 114
14010: PUSH
14011: LD_INT 116
14013: PUSH
14014: LD_INT 117
14016: PUSH
14017: LD_INT 118
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: ST_TO_ADDR
14038: GO 16137
14040: LD_INT 10
14042: DOUBLE
14043: EQUAL
14044: IFTRUE 14048
14046: GO 14244
14048: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: LD_INT 4
14059: PUSH
14060: LD_INT 5
14062: PUSH
14063: LD_INT 6
14065: PUSH
14066: LD_INT 7
14068: PUSH
14069: LD_INT 8
14071: PUSH
14072: LD_INT 9
14074: PUSH
14075: LD_INT 10
14077: PUSH
14078: LD_INT 11
14080: PUSH
14081: LD_INT 12
14083: PUSH
14084: LD_INT 13
14086: PUSH
14087: LD_INT 14
14089: PUSH
14090: LD_INT 15
14092: PUSH
14093: LD_INT 16
14095: PUSH
14096: LD_INT 17
14098: PUSH
14099: LD_INT 18
14101: PUSH
14102: LD_INT 19
14104: PUSH
14105: LD_INT 20
14107: PUSH
14108: LD_INT 21
14110: PUSH
14111: LD_INT 22
14113: PUSH
14114: LD_INT 23
14116: PUSH
14117: LD_INT 24
14119: PUSH
14120: LD_INT 25
14122: PUSH
14123: LD_INT 26
14125: PUSH
14126: LD_INT 28
14128: PUSH
14129: LD_INT 30
14131: PUSH
14132: LD_INT 31
14134: PUSH
14135: LD_INT 32
14137: PUSH
14138: LD_INT 36
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 101
14174: PUSH
14175: LD_INT 102
14177: PUSH
14178: LD_INT 103
14180: PUSH
14181: LD_INT 104
14183: PUSH
14184: LD_INT 105
14186: PUSH
14187: LD_INT 106
14189: PUSH
14190: LD_INT 107
14192: PUSH
14193: LD_INT 108
14195: PUSH
14196: LD_INT 109
14198: PUSH
14199: LD_INT 110
14201: PUSH
14202: LD_INT 111
14204: PUSH
14205: LD_INT 112
14207: PUSH
14208: LD_INT 114
14210: PUSH
14211: LD_INT 116
14213: PUSH
14214: LD_INT 117
14216: PUSH
14217: LD_INT 118
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: ST_TO_ADDR
14242: GO 16137
14244: LD_INT 11
14246: DOUBLE
14247: EQUAL
14248: IFTRUE 14252
14250: GO 14456
14252: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14253: LD_ADDR_VAR 0 2
14257: PUSH
14258: LD_INT 2
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: LD_INT 4
14266: PUSH
14267: LD_INT 5
14269: PUSH
14270: LD_INT 6
14272: PUSH
14273: LD_INT 7
14275: PUSH
14276: LD_INT 8
14278: PUSH
14279: LD_INT 9
14281: PUSH
14282: LD_INT 10
14284: PUSH
14285: LD_INT 11
14287: PUSH
14288: LD_INT 12
14290: PUSH
14291: LD_INT 13
14293: PUSH
14294: LD_INT 14
14296: PUSH
14297: LD_INT 15
14299: PUSH
14300: LD_INT 16
14302: PUSH
14303: LD_INT 17
14305: PUSH
14306: LD_INT 18
14308: PUSH
14309: LD_INT 19
14311: PUSH
14312: LD_INT 20
14314: PUSH
14315: LD_INT 21
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_INT 23
14323: PUSH
14324: LD_INT 24
14326: PUSH
14327: LD_INT 25
14329: PUSH
14330: LD_INT 26
14332: PUSH
14333: LD_INT 28
14335: PUSH
14336: LD_INT 30
14338: PUSH
14339: LD_INT 31
14341: PUSH
14342: LD_INT 32
14344: PUSH
14345: LD_INT 34
14347: PUSH
14348: LD_INT 36
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 101
14386: PUSH
14387: LD_INT 102
14389: PUSH
14390: LD_INT 103
14392: PUSH
14393: LD_INT 104
14395: PUSH
14396: LD_INT 105
14398: PUSH
14399: LD_INT 106
14401: PUSH
14402: LD_INT 107
14404: PUSH
14405: LD_INT 108
14407: PUSH
14408: LD_INT 109
14410: PUSH
14411: LD_INT 110
14413: PUSH
14414: LD_INT 111
14416: PUSH
14417: LD_INT 112
14419: PUSH
14420: LD_INT 114
14422: PUSH
14423: LD_INT 116
14425: PUSH
14426: LD_INT 117
14428: PUSH
14429: LD_INT 118
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: ST_TO_ADDR
14454: GO 16137
14456: LD_INT 12
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14684
14464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14465: LD_ADDR_VAR 0 2
14469: PUSH
14470: LD_INT 1
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 3
14478: PUSH
14479: LD_INT 4
14481: PUSH
14482: LD_INT 5
14484: PUSH
14485: LD_INT 6
14487: PUSH
14488: LD_INT 7
14490: PUSH
14491: LD_INT 8
14493: PUSH
14494: LD_INT 9
14496: PUSH
14497: LD_INT 10
14499: PUSH
14500: LD_INT 11
14502: PUSH
14503: LD_INT 12
14505: PUSH
14506: LD_INT 13
14508: PUSH
14509: LD_INT 14
14511: PUSH
14512: LD_INT 15
14514: PUSH
14515: LD_INT 16
14517: PUSH
14518: LD_INT 17
14520: PUSH
14521: LD_INT 18
14523: PUSH
14524: LD_INT 19
14526: PUSH
14527: LD_INT 20
14529: PUSH
14530: LD_INT 21
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_INT 23
14538: PUSH
14539: LD_INT 24
14541: PUSH
14542: LD_INT 25
14544: PUSH
14545: LD_INT 26
14547: PUSH
14548: LD_INT 27
14550: PUSH
14551: LD_INT 28
14553: PUSH
14554: LD_INT 30
14556: PUSH
14557: LD_INT 31
14559: PUSH
14560: LD_INT 32
14562: PUSH
14563: LD_INT 33
14565: PUSH
14566: LD_INT 34
14568: PUSH
14569: LD_INT 36
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 101
14610: PUSH
14611: LD_INT 102
14613: PUSH
14614: LD_INT 103
14616: PUSH
14617: LD_INT 104
14619: PUSH
14620: LD_INT 105
14622: PUSH
14623: LD_INT 106
14625: PUSH
14626: LD_INT 107
14628: PUSH
14629: LD_INT 108
14631: PUSH
14632: LD_INT 109
14634: PUSH
14635: LD_INT 110
14637: PUSH
14638: LD_INT 111
14640: PUSH
14641: LD_INT 112
14643: PUSH
14644: LD_INT 113
14646: PUSH
14647: LD_INT 114
14649: PUSH
14650: LD_INT 116
14652: PUSH
14653: LD_INT 117
14655: PUSH
14656: LD_INT 118
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: ST_TO_ADDR
14682: GO 16137
14684: LD_INT 13
14686: DOUBLE
14687: EQUAL
14688: IFTRUE 14692
14690: GO 14900
14692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14693: LD_ADDR_VAR 0 2
14697: PUSH
14698: LD_INT 1
14700: PUSH
14701: LD_INT 2
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: LD_INT 4
14709: PUSH
14710: LD_INT 5
14712: PUSH
14713: LD_INT 8
14715: PUSH
14716: LD_INT 9
14718: PUSH
14719: LD_INT 10
14721: PUSH
14722: LD_INT 11
14724: PUSH
14725: LD_INT 12
14727: PUSH
14728: LD_INT 14
14730: PUSH
14731: LD_INT 15
14733: PUSH
14734: LD_INT 16
14736: PUSH
14737: LD_INT 17
14739: PUSH
14740: LD_INT 18
14742: PUSH
14743: LD_INT 19
14745: PUSH
14746: LD_INT 20
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 22
14754: PUSH
14755: LD_INT 23
14757: PUSH
14758: LD_INT 24
14760: PUSH
14761: LD_INT 25
14763: PUSH
14764: LD_INT 26
14766: PUSH
14767: LD_INT 27
14769: PUSH
14770: LD_INT 28
14772: PUSH
14773: LD_INT 30
14775: PUSH
14776: LD_INT 31
14778: PUSH
14779: LD_INT 32
14781: PUSH
14782: LD_INT 33
14784: PUSH
14785: LD_INT 34
14787: PUSH
14788: LD_INT 36
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 101
14826: PUSH
14827: LD_INT 102
14829: PUSH
14830: LD_INT 103
14832: PUSH
14833: LD_INT 104
14835: PUSH
14836: LD_INT 105
14838: PUSH
14839: LD_INT 106
14841: PUSH
14842: LD_INT 107
14844: PUSH
14845: LD_INT 108
14847: PUSH
14848: LD_INT 109
14850: PUSH
14851: LD_INT 110
14853: PUSH
14854: LD_INT 111
14856: PUSH
14857: LD_INT 112
14859: PUSH
14860: LD_INT 113
14862: PUSH
14863: LD_INT 114
14865: PUSH
14866: LD_INT 116
14868: PUSH
14869: LD_INT 117
14871: PUSH
14872: LD_INT 118
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: ST_TO_ADDR
14898: GO 16137
14900: LD_INT 14
14902: DOUBLE
14903: EQUAL
14904: IFTRUE 14908
14906: GO 15132
14908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14909: LD_ADDR_VAR 0 2
14913: PUSH
14914: LD_INT 1
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: LD_INT 4
14925: PUSH
14926: LD_INT 5
14928: PUSH
14929: LD_INT 6
14931: PUSH
14932: LD_INT 7
14934: PUSH
14935: LD_INT 8
14937: PUSH
14938: LD_INT 9
14940: PUSH
14941: LD_INT 10
14943: PUSH
14944: LD_INT 11
14946: PUSH
14947: LD_INT 12
14949: PUSH
14950: LD_INT 13
14952: PUSH
14953: LD_INT 14
14955: PUSH
14956: LD_INT 15
14958: PUSH
14959: LD_INT 16
14961: PUSH
14962: LD_INT 17
14964: PUSH
14965: LD_INT 18
14967: PUSH
14968: LD_INT 19
14970: PUSH
14971: LD_INT 20
14973: PUSH
14974: LD_INT 21
14976: PUSH
14977: LD_INT 22
14979: PUSH
14980: LD_INT 23
14982: PUSH
14983: LD_INT 24
14985: PUSH
14986: LD_INT 25
14988: PUSH
14989: LD_INT 26
14991: PUSH
14992: LD_INT 27
14994: PUSH
14995: LD_INT 28
14997: PUSH
14998: LD_INT 29
15000: PUSH
15001: LD_INT 30
15003: PUSH
15004: LD_INT 31
15006: PUSH
15007: LD_INT 32
15009: PUSH
15010: LD_INT 33
15012: PUSH
15013: LD_INT 34
15015: PUSH
15016: LD_INT 36
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 101
15058: PUSH
15059: LD_INT 102
15061: PUSH
15062: LD_INT 103
15064: PUSH
15065: LD_INT 104
15067: PUSH
15068: LD_INT 105
15070: PUSH
15071: LD_INT 106
15073: PUSH
15074: LD_INT 107
15076: PUSH
15077: LD_INT 108
15079: PUSH
15080: LD_INT 109
15082: PUSH
15083: LD_INT 110
15085: PUSH
15086: LD_INT 111
15088: PUSH
15089: LD_INT 112
15091: PUSH
15092: LD_INT 113
15094: PUSH
15095: LD_INT 114
15097: PUSH
15098: LD_INT 116
15100: PUSH
15101: LD_INT 117
15103: PUSH
15104: LD_INT 118
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: ST_TO_ADDR
15130: GO 16137
15132: LD_INT 15
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15140
15138: GO 15364
15140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: LD_INT 3
15154: PUSH
15155: LD_INT 4
15157: PUSH
15158: LD_INT 5
15160: PUSH
15161: LD_INT 6
15163: PUSH
15164: LD_INT 7
15166: PUSH
15167: LD_INT 8
15169: PUSH
15170: LD_INT 9
15172: PUSH
15173: LD_INT 10
15175: PUSH
15176: LD_INT 11
15178: PUSH
15179: LD_INT 12
15181: PUSH
15182: LD_INT 13
15184: PUSH
15185: LD_INT 14
15187: PUSH
15188: LD_INT 15
15190: PUSH
15191: LD_INT 16
15193: PUSH
15194: LD_INT 17
15196: PUSH
15197: LD_INT 18
15199: PUSH
15200: LD_INT 19
15202: PUSH
15203: LD_INT 20
15205: PUSH
15206: LD_INT 21
15208: PUSH
15209: LD_INT 22
15211: PUSH
15212: LD_INT 23
15214: PUSH
15215: LD_INT 24
15217: PUSH
15218: LD_INT 25
15220: PUSH
15221: LD_INT 26
15223: PUSH
15224: LD_INT 27
15226: PUSH
15227: LD_INT 28
15229: PUSH
15230: LD_INT 29
15232: PUSH
15233: LD_INT 30
15235: PUSH
15236: LD_INT 31
15238: PUSH
15239: LD_INT 32
15241: PUSH
15242: LD_INT 33
15244: PUSH
15245: LD_INT 34
15247: PUSH
15248: LD_INT 36
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 101
15290: PUSH
15291: LD_INT 102
15293: PUSH
15294: LD_INT 103
15296: PUSH
15297: LD_INT 104
15299: PUSH
15300: LD_INT 105
15302: PUSH
15303: LD_INT 106
15305: PUSH
15306: LD_INT 107
15308: PUSH
15309: LD_INT 108
15311: PUSH
15312: LD_INT 109
15314: PUSH
15315: LD_INT 110
15317: PUSH
15318: LD_INT 111
15320: PUSH
15321: LD_INT 112
15323: PUSH
15324: LD_INT 113
15326: PUSH
15327: LD_INT 114
15329: PUSH
15330: LD_INT 116
15332: PUSH
15333: LD_INT 117
15335: PUSH
15336: LD_INT 118
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: ST_TO_ADDR
15362: GO 16137
15364: LD_INT 16
15366: DOUBLE
15367: EQUAL
15368: IFTRUE 15372
15370: GO 15508
15372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_INT 2
15380: PUSH
15381: LD_INT 4
15383: PUSH
15384: LD_INT 5
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: LD_INT 11
15392: PUSH
15393: LD_INT 12
15395: PUSH
15396: LD_INT 15
15398: PUSH
15399: LD_INT 16
15401: PUSH
15402: LD_INT 20
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 22
15410: PUSH
15411: LD_INT 23
15413: PUSH
15414: LD_INT 25
15416: PUSH
15417: LD_INT 26
15419: PUSH
15420: LD_INT 30
15422: PUSH
15423: LD_INT 31
15425: PUSH
15426: LD_INT 32
15428: PUSH
15429: LD_INT 33
15431: PUSH
15432: LD_INT 34
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 101
15458: PUSH
15459: LD_INT 102
15461: PUSH
15462: LD_INT 103
15464: PUSH
15465: LD_INT 106
15467: PUSH
15468: LD_INT 108
15470: PUSH
15471: LD_INT 112
15473: PUSH
15474: LD_INT 113
15476: PUSH
15477: LD_INT 114
15479: PUSH
15480: LD_INT 116
15482: PUSH
15483: LD_INT 117
15485: PUSH
15486: LD_INT 118
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: ST_TO_ADDR
15506: GO 16137
15508: LD_INT 17
15510: DOUBLE
15511: EQUAL
15512: IFTRUE 15516
15514: GO 15740
15516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15517: LD_ADDR_VAR 0 2
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: LD_INT 4
15533: PUSH
15534: LD_INT 5
15536: PUSH
15537: LD_INT 6
15539: PUSH
15540: LD_INT 7
15542: PUSH
15543: LD_INT 8
15545: PUSH
15546: LD_INT 9
15548: PUSH
15549: LD_INT 10
15551: PUSH
15552: LD_INT 11
15554: PUSH
15555: LD_INT 12
15557: PUSH
15558: LD_INT 13
15560: PUSH
15561: LD_INT 14
15563: PUSH
15564: LD_INT 15
15566: PUSH
15567: LD_INT 16
15569: PUSH
15570: LD_INT 17
15572: PUSH
15573: LD_INT 18
15575: PUSH
15576: LD_INT 19
15578: PUSH
15579: LD_INT 20
15581: PUSH
15582: LD_INT 21
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_INT 23
15590: PUSH
15591: LD_INT 24
15593: PUSH
15594: LD_INT 25
15596: PUSH
15597: LD_INT 26
15599: PUSH
15600: LD_INT 27
15602: PUSH
15603: LD_INT 28
15605: PUSH
15606: LD_INT 29
15608: PUSH
15609: LD_INT 30
15611: PUSH
15612: LD_INT 31
15614: PUSH
15615: LD_INT 32
15617: PUSH
15618: LD_INT 33
15620: PUSH
15621: LD_INT 34
15623: PUSH
15624: LD_INT 36
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 101
15666: PUSH
15667: LD_INT 102
15669: PUSH
15670: LD_INT 103
15672: PUSH
15673: LD_INT 104
15675: PUSH
15676: LD_INT 105
15678: PUSH
15679: LD_INT 106
15681: PUSH
15682: LD_INT 107
15684: PUSH
15685: LD_INT 108
15687: PUSH
15688: LD_INT 109
15690: PUSH
15691: LD_INT 110
15693: PUSH
15694: LD_INT 111
15696: PUSH
15697: LD_INT 112
15699: PUSH
15700: LD_INT 113
15702: PUSH
15703: LD_INT 114
15705: PUSH
15706: LD_INT 116
15708: PUSH
15709: LD_INT 117
15711: PUSH
15712: LD_INT 118
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: ST_TO_ADDR
15738: GO 16137
15740: LD_INT 18
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15896
15748: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15749: LD_ADDR_VAR 0 2
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 4
15759: PUSH
15760: LD_INT 5
15762: PUSH
15763: LD_INT 7
15765: PUSH
15766: LD_INT 11
15768: PUSH
15769: LD_INT 12
15771: PUSH
15772: LD_INT 15
15774: PUSH
15775: LD_INT 16
15777: PUSH
15778: LD_INT 20
15780: PUSH
15781: LD_INT 21
15783: PUSH
15784: LD_INT 22
15786: PUSH
15787: LD_INT 23
15789: PUSH
15790: LD_INT 25
15792: PUSH
15793: LD_INT 26
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 31
15801: PUSH
15802: LD_INT 32
15804: PUSH
15805: LD_INT 33
15807: PUSH
15808: LD_INT 34
15810: PUSH
15811: LD_INT 35
15813: PUSH
15814: LD_INT 36
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 101
15842: PUSH
15843: LD_INT 102
15845: PUSH
15846: LD_INT 103
15848: PUSH
15849: LD_INT 106
15851: PUSH
15852: LD_INT 108
15854: PUSH
15855: LD_INT 112
15857: PUSH
15858: LD_INT 113
15860: PUSH
15861: LD_INT 114
15863: PUSH
15864: LD_INT 115
15866: PUSH
15867: LD_INT 116
15869: PUSH
15870: LD_INT 117
15872: PUSH
15873: LD_INT 118
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: ST_TO_ADDR
15894: GO 16137
15896: LD_INT 19
15898: DOUBLE
15899: EQUAL
15900: IFTRUE 15904
15902: GO 16136
15904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15905: LD_ADDR_VAR 0 2
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: LD_INT 6
15927: PUSH
15928: LD_INT 7
15930: PUSH
15931: LD_INT 8
15933: PUSH
15934: LD_INT 9
15936: PUSH
15937: LD_INT 10
15939: PUSH
15940: LD_INT 11
15942: PUSH
15943: LD_INT 12
15945: PUSH
15946: LD_INT 13
15948: PUSH
15949: LD_INT 14
15951: PUSH
15952: LD_INT 15
15954: PUSH
15955: LD_INT 16
15957: PUSH
15958: LD_INT 17
15960: PUSH
15961: LD_INT 18
15963: PUSH
15964: LD_INT 19
15966: PUSH
15967: LD_INT 20
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 22
15975: PUSH
15976: LD_INT 23
15978: PUSH
15979: LD_INT 24
15981: PUSH
15982: LD_INT 25
15984: PUSH
15985: LD_INT 26
15987: PUSH
15988: LD_INT 27
15990: PUSH
15991: LD_INT 28
15993: PUSH
15994: LD_INT 29
15996: PUSH
15997: LD_INT 30
15999: PUSH
16000: LD_INT 31
16002: PUSH
16003: LD_INT 32
16005: PUSH
16006: LD_INT 33
16008: PUSH
16009: LD_INT 34
16011: PUSH
16012: LD_INT 35
16014: PUSH
16015: LD_INT 36
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 101
16058: PUSH
16059: LD_INT 102
16061: PUSH
16062: LD_INT 103
16064: PUSH
16065: LD_INT 104
16067: PUSH
16068: LD_INT 105
16070: PUSH
16071: LD_INT 106
16073: PUSH
16074: LD_INT 107
16076: PUSH
16077: LD_INT 108
16079: PUSH
16080: LD_INT 109
16082: PUSH
16083: LD_INT 110
16085: PUSH
16086: LD_INT 111
16088: PUSH
16089: LD_INT 112
16091: PUSH
16092: LD_INT 113
16094: PUSH
16095: LD_INT 114
16097: PUSH
16098: LD_INT 115
16100: PUSH
16101: LD_INT 116
16103: PUSH
16104: LD_INT 117
16106: PUSH
16107: LD_INT 118
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: ST_TO_ADDR
16134: GO 16137
16136: POP
// end else
16137: GO 16368
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_INT 1
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 4
16155: PUSH
16156: LD_INT 5
16158: PUSH
16159: LD_INT 6
16161: PUSH
16162: LD_INT 7
16164: PUSH
16165: LD_INT 8
16167: PUSH
16168: LD_INT 9
16170: PUSH
16171: LD_INT 10
16173: PUSH
16174: LD_INT 11
16176: PUSH
16177: LD_INT 12
16179: PUSH
16180: LD_INT 13
16182: PUSH
16183: LD_INT 14
16185: PUSH
16186: LD_INT 15
16188: PUSH
16189: LD_INT 16
16191: PUSH
16192: LD_INT 17
16194: PUSH
16195: LD_INT 18
16197: PUSH
16198: LD_INT 19
16200: PUSH
16201: LD_INT 20
16203: PUSH
16204: LD_INT 21
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 23
16212: PUSH
16213: LD_INT 24
16215: PUSH
16216: LD_INT 25
16218: PUSH
16219: LD_INT 26
16221: PUSH
16222: LD_INT 27
16224: PUSH
16225: LD_INT 28
16227: PUSH
16228: LD_INT 29
16230: PUSH
16231: LD_INT 30
16233: PUSH
16234: LD_INT 31
16236: PUSH
16237: LD_INT 32
16239: PUSH
16240: LD_INT 33
16242: PUSH
16243: LD_INT 34
16245: PUSH
16246: LD_INT 35
16248: PUSH
16249: LD_INT 36
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 101
16292: PUSH
16293: LD_INT 102
16295: PUSH
16296: LD_INT 103
16298: PUSH
16299: LD_INT 104
16301: PUSH
16302: LD_INT 105
16304: PUSH
16305: LD_INT 106
16307: PUSH
16308: LD_INT 107
16310: PUSH
16311: LD_INT 108
16313: PUSH
16314: LD_INT 109
16316: PUSH
16317: LD_INT 110
16319: PUSH
16320: LD_INT 111
16322: PUSH
16323: LD_INT 112
16325: PUSH
16326: LD_INT 113
16328: PUSH
16329: LD_INT 114
16331: PUSH
16332: LD_INT 115
16334: PUSH
16335: LD_INT 116
16337: PUSH
16338: LD_INT 117
16340: PUSH
16341: LD_INT 118
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: ST_TO_ADDR
// if result then
16368: LD_VAR 0 2
16372: IFFALSE 17158
// begin normal :=  ;
16374: LD_ADDR_VAR 0 5
16378: PUSH
16379: LD_STRING 
16381: ST_TO_ADDR
// hardcore :=  ;
16382: LD_ADDR_VAR 0 6
16386: PUSH
16387: LD_STRING 
16389: ST_TO_ADDR
// active :=  ;
16390: LD_ADDR_VAR 0 7
16394: PUSH
16395: LD_STRING 
16397: ST_TO_ADDR
// for i = 1 to normalCounter do
16398: LD_ADDR_VAR 0 8
16402: PUSH
16403: DOUBLE
16404: LD_INT 1
16406: DEC
16407: ST_TO_ADDR
16408: LD_EXP 46
16412: PUSH
16413: FOR_TO
16414: IFFALSE 16515
// begin tmp := 0 ;
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_STRING 0
16423: ST_TO_ADDR
// if result [ 1 ] then
16424: LD_VAR 0 2
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: IFFALSE 16497
// if result [ 1 ] [ 1 ] = i then
16434: LD_VAR 0 2
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PUSH
16443: LD_INT 1
16445: ARRAY
16446: PUSH
16447: LD_VAR 0 8
16451: EQUAL
16452: IFFALSE 16497
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16454: LD_ADDR_VAR 0 2
16458: PUSH
16459: LD_VAR 0 2
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: LD_VAR 0 2
16471: PUSH
16472: LD_INT 1
16474: ARRAY
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 3
16483: PPUSH
16484: CALL_OW 1
16488: ST_TO_ADDR
// tmp := 1 ;
16489: LD_ADDR_VAR 0 3
16493: PUSH
16494: LD_STRING 1
16496: ST_TO_ADDR
// end ; normal := normal & tmp ;
16497: LD_ADDR_VAR 0 5
16501: PUSH
16502: LD_VAR 0 5
16506: PUSH
16507: LD_VAR 0 3
16511: STR
16512: ST_TO_ADDR
// end ;
16513: GO 16413
16515: POP
16516: POP
// for i = 1 to hardcoreCounter do
16517: LD_ADDR_VAR 0 8
16521: PUSH
16522: DOUBLE
16523: LD_INT 1
16525: DEC
16526: ST_TO_ADDR
16527: LD_EXP 47
16531: PUSH
16532: FOR_TO
16533: IFFALSE 16638
// begin tmp := 0 ;
16535: LD_ADDR_VAR 0 3
16539: PUSH
16540: LD_STRING 0
16542: ST_TO_ADDR
// if result [ 2 ] then
16543: LD_VAR 0 2
16547: PUSH
16548: LD_INT 2
16550: ARRAY
16551: IFFALSE 16620
// if result [ 2 ] [ 1 ] = 100 + i then
16553: LD_VAR 0 2
16557: PUSH
16558: LD_INT 2
16560: ARRAY
16561: PUSH
16562: LD_INT 1
16564: ARRAY
16565: PUSH
16566: LD_INT 100
16568: PUSH
16569: LD_VAR 0 8
16573: PLUS
16574: EQUAL
16575: IFFALSE 16620
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16577: LD_ADDR_VAR 0 2
16581: PUSH
16582: LD_VAR 0 2
16586: PPUSH
16587: LD_INT 2
16589: PPUSH
16590: LD_VAR 0 2
16594: PUSH
16595: LD_INT 2
16597: ARRAY
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 3
16606: PPUSH
16607: CALL_OW 1
16611: ST_TO_ADDR
// tmp := 1 ;
16612: LD_ADDR_VAR 0 3
16616: PUSH
16617: LD_STRING 1
16619: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16620: LD_ADDR_VAR 0 6
16624: PUSH
16625: LD_VAR 0 6
16629: PUSH
16630: LD_VAR 0 3
16634: STR
16635: ST_TO_ADDR
// end ;
16636: GO 16532
16638: POP
16639: POP
// if isGameLoad then
16640: LD_VAR 0 1
16644: IFFALSE 17119
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16646: LD_ADDR_VAR 0 4
16650: PUSH
16651: LD_EXP 50
16655: PUSH
16656: LD_EXP 49
16660: PUSH
16661: LD_EXP 51
16665: PUSH
16666: LD_EXP 48
16670: PUSH
16671: LD_EXP 52
16675: PUSH
16676: LD_EXP 53
16680: PUSH
16681: LD_EXP 54
16685: PUSH
16686: LD_EXP 55
16690: PUSH
16691: LD_EXP 56
16695: PUSH
16696: LD_EXP 57
16700: PUSH
16701: LD_EXP 58
16705: PUSH
16706: LD_EXP 59
16710: PUSH
16711: LD_EXP 60
16715: PUSH
16716: LD_EXP 61
16720: PUSH
16721: LD_EXP 69
16725: PUSH
16726: LD_EXP 70
16730: PUSH
16731: LD_EXP 71
16735: PUSH
16736: LD_EXP 72
16740: PUSH
16741: LD_EXP 74
16745: PUSH
16746: LD_EXP 75
16750: PUSH
16751: LD_EXP 76
16755: PUSH
16756: LD_EXP 79
16760: PUSH
16761: LD_EXP 81
16765: PUSH
16766: LD_EXP 82
16770: PUSH
16771: LD_EXP 83
16775: PUSH
16776: LD_EXP 85
16780: PUSH
16781: LD_EXP 86
16785: PUSH
16786: LD_EXP 89
16790: PUSH
16791: LD_EXP 90
16795: PUSH
16796: LD_EXP 91
16800: PUSH
16801: LD_EXP 92
16805: PUSH
16806: LD_EXP 93
16810: PUSH
16811: LD_EXP 94
16815: PUSH
16816: LD_EXP 95
16820: PUSH
16821: LD_EXP 96
16825: PUSH
16826: LD_EXP 97
16830: PUSH
16831: LD_EXP 62
16835: PUSH
16836: LD_EXP 63
16840: PUSH
16841: LD_EXP 66
16845: PUSH
16846: LD_EXP 67
16850: PUSH
16851: LD_EXP 68
16855: PUSH
16856: LD_EXP 64
16860: PUSH
16861: LD_EXP 65
16865: PUSH
16866: LD_EXP 73
16870: PUSH
16871: LD_EXP 77
16875: PUSH
16876: LD_EXP 78
16880: PUSH
16881: LD_EXP 80
16885: PUSH
16886: LD_EXP 84
16890: PUSH
16891: LD_EXP 87
16895: PUSH
16896: LD_EXP 88
16900: PUSH
16901: LD_EXP 98
16905: PUSH
16906: LD_EXP 99
16910: PUSH
16911: LD_EXP 100
16915: PUSH
16916: LD_EXP 101
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: ST_TO_ADDR
// tmp :=  ;
16977: LD_ADDR_VAR 0 3
16981: PUSH
16982: LD_STRING 
16984: ST_TO_ADDR
// for i = 1 to normalCounter do
16985: LD_ADDR_VAR 0 8
16989: PUSH
16990: DOUBLE
16991: LD_INT 1
16993: DEC
16994: ST_TO_ADDR
16995: LD_EXP 46
16999: PUSH
17000: FOR_TO
17001: IFFALSE 17037
// begin if flags [ i ] then
17003: LD_VAR 0 4
17007: PUSH
17008: LD_VAR 0 8
17012: ARRAY
17013: IFFALSE 17035
// tmp := tmp & i & ; ;
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: LD_VAR 0 3
17024: PUSH
17025: LD_VAR 0 8
17029: STR
17030: PUSH
17031: LD_STRING ;
17033: STR
17034: ST_TO_ADDR
// end ;
17035: GO 17000
17037: POP
17038: POP
// for i = 1 to hardcoreCounter do
17039: LD_ADDR_VAR 0 8
17043: PUSH
17044: DOUBLE
17045: LD_INT 1
17047: DEC
17048: ST_TO_ADDR
17049: LD_EXP 47
17053: PUSH
17054: FOR_TO
17055: IFFALSE 17101
// begin if flags [ normalCounter + i ] then
17057: LD_VAR 0 4
17061: PUSH
17062: LD_EXP 46
17066: PUSH
17067: LD_VAR 0 8
17071: PLUS
17072: ARRAY
17073: IFFALSE 17099
// tmp := tmp & ( 100 + i ) & ; ;
17075: LD_ADDR_VAR 0 3
17079: PUSH
17080: LD_VAR 0 3
17084: PUSH
17085: LD_INT 100
17087: PUSH
17088: LD_VAR 0 8
17092: PLUS
17093: STR
17094: PUSH
17095: LD_STRING ;
17097: STR
17098: ST_TO_ADDR
// end ;
17099: GO 17054
17101: POP
17102: POP
// if tmp then
17103: LD_VAR 0 3
17107: IFFALSE 17119
// active := tmp ;
17109: LD_ADDR_VAR 0 7
17113: PUSH
17114: LD_VAR 0 3
17118: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17119: LD_STRING getStreamItemsFromMission("
17121: PUSH
17122: LD_VAR 0 5
17126: STR
17127: PUSH
17128: LD_STRING ","
17130: STR
17131: PUSH
17132: LD_VAR 0 6
17136: STR
17137: PUSH
17138: LD_STRING ","
17140: STR
17141: PUSH
17142: LD_VAR 0 7
17146: STR
17147: PUSH
17148: LD_STRING ")
17150: STR
17151: PPUSH
17152: CALL_OW 559
// end else
17156: GO 17165
// ToLua ( getStreamItemsFromMission("","","") ) ;
17158: LD_STRING getStreamItemsFromMission("","","")
17160: PPUSH
17161: CALL_OW 559
// end ;
17165: LD_VAR 0 2
17169: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17170: LD_EXP 45
17174: PUSH
17175: LD_EXP 50
17179: AND
17180: IFFALSE 17304
17182: GO 17184
17184: DISABLE
17185: LD_INT 0
17187: PPUSH
17188: PPUSH
// begin enable ;
17189: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: LD_INT 22
17197: PUSH
17198: LD_OWVAR 2
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: PUSH
17210: LD_INT 34
17212: PUSH
17213: LD_INT 7
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 34
17222: PUSH
17223: LD_INT 45
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 34
17232: PUSH
17233: LD_INT 28
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 34
17242: PUSH
17243: LD_INT 47
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PPUSH
17261: CALL_OW 69
17265: ST_TO_ADDR
// if not tmp then
17266: LD_VAR 0 2
17270: NOT
17271: IFFALSE 17275
// exit ;
17273: GO 17304
// for i in tmp do
17275: LD_ADDR_VAR 0 1
17279: PUSH
17280: LD_VAR 0 2
17284: PUSH
17285: FOR_IN
17286: IFFALSE 17302
// begin SetLives ( i , 0 ) ;
17288: LD_VAR 0 1
17292: PPUSH
17293: LD_INT 0
17295: PPUSH
17296: CALL_OW 234
// end ;
17300: GO 17285
17302: POP
17303: POP
// end ;
17304: PPOPN 2
17306: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17307: LD_EXP 45
17311: PUSH
17312: LD_EXP 51
17316: AND
17317: IFFALSE 17401
17319: GO 17321
17321: DISABLE
17322: LD_INT 0
17324: PPUSH
17325: PPUSH
// begin enable ;
17326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17327: LD_ADDR_VAR 0 2
17331: PUSH
17332: LD_INT 22
17334: PUSH
17335: LD_OWVAR 2
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 32
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: ST_TO_ADDR
// if not tmp then
17363: LD_VAR 0 2
17367: NOT
17368: IFFALSE 17372
// exit ;
17370: GO 17401
// for i in tmp do
17372: LD_ADDR_VAR 0 1
17376: PUSH
17377: LD_VAR 0 2
17381: PUSH
17382: FOR_IN
17383: IFFALSE 17399
// begin SetLives ( i , 0 ) ;
17385: LD_VAR 0 1
17389: PPUSH
17390: LD_INT 0
17392: PPUSH
17393: CALL_OW 234
// end ;
17397: GO 17382
17399: POP
17400: POP
// end ;
17401: PPOPN 2
17403: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17404: LD_EXP 45
17408: PUSH
17409: LD_EXP 48
17413: AND
17414: IFFALSE 17507
17416: GO 17418
17418: DISABLE
17419: LD_INT 0
17421: PPUSH
// begin enable ;
17422: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17423: LD_ADDR_VAR 0 1
17427: PUSH
17428: LD_INT 22
17430: PUSH
17431: LD_OWVAR 2
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 2
17442: PUSH
17443: LD_INT 25
17445: PUSH
17446: LD_INT 5
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 25
17455: PUSH
17456: LD_INT 9
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 25
17465: PUSH
17466: LD_INT 8
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PPUSH
17483: CALL_OW 69
17487: PUSH
17488: FOR_IN
17489: IFFALSE 17505
// begin SetClass ( i , 1 ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 336
// end ;
17503: GO 17488
17505: POP
17506: POP
// end ;
17507: PPOPN 1
17509: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17510: LD_EXP 45
17514: PUSH
17515: LD_EXP 49
17519: AND
17520: PUSH
17521: LD_OWVAR 65
17525: PUSH
17526: LD_INT 7
17528: LESS
17529: AND
17530: IFFALSE 17544
17532: GO 17534
17534: DISABLE
// begin enable ;
17535: ENABLE
// game_speed := 7 ;
17536: LD_ADDR_OWVAR 65
17540: PUSH
17541: LD_INT 7
17543: ST_TO_ADDR
// end ;
17544: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17545: LD_EXP 45
17549: PUSH
17550: LD_EXP 52
17554: AND
17555: IFFALSE 17757
17557: GO 17559
17559: DISABLE
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
17564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17565: LD_ADDR_VAR 0 3
17569: PUSH
17570: LD_INT 81
17572: PUSH
17573: LD_OWVAR 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 21
17584: PUSH
17585: LD_INT 1
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 3
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17757
// if tmp > 5 then
17610: LD_VAR 0 3
17614: PUSH
17615: LD_INT 5
17617: GREATER
17618: IFFALSE 17630
// k := 5 else
17620: LD_ADDR_VAR 0 2
17624: PUSH
17625: LD_INT 5
17627: ST_TO_ADDR
17628: GO 17640
// k := tmp ;
17630: LD_ADDR_VAR 0 2
17634: PUSH
17635: LD_VAR 0 3
17639: ST_TO_ADDR
// for i := 1 to k do
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: DOUBLE
17646: LD_INT 1
17648: DEC
17649: ST_TO_ADDR
17650: LD_VAR 0 2
17654: PUSH
17655: FOR_TO
17656: IFFALSE 17755
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17658: LD_VAR 0 3
17662: PUSH
17663: LD_VAR 0 1
17667: ARRAY
17668: PPUSH
17669: LD_VAR 0 1
17673: PUSH
17674: LD_INT 4
17676: MOD
17677: PUSH
17678: LD_INT 1
17680: PLUS
17681: PPUSH
17682: CALL_OW 259
17686: PUSH
17687: LD_INT 10
17689: LESS
17690: IFFALSE 17753
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17692: LD_VAR 0 3
17696: PUSH
17697: LD_VAR 0 1
17701: ARRAY
17702: PPUSH
17703: LD_VAR 0 1
17707: PUSH
17708: LD_INT 4
17710: MOD
17711: PUSH
17712: LD_INT 1
17714: PLUS
17715: PPUSH
17716: LD_VAR 0 3
17720: PUSH
17721: LD_VAR 0 1
17725: ARRAY
17726: PPUSH
17727: LD_VAR 0 1
17731: PUSH
17732: LD_INT 4
17734: MOD
17735: PUSH
17736: LD_INT 1
17738: PLUS
17739: PPUSH
17740: CALL_OW 259
17744: PUSH
17745: LD_INT 1
17747: PLUS
17748: PPUSH
17749: CALL_OW 237
17753: GO 17655
17755: POP
17756: POP
// end ;
17757: PPOPN 3
17759: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17760: LD_EXP 45
17764: PUSH
17765: LD_EXP 53
17769: AND
17770: IFFALSE 17790
17772: GO 17774
17774: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17775: LD_INT 4
17777: PPUSH
17778: LD_OWVAR 2
17782: PPUSH
17783: LD_INT 0
17785: PPUSH
17786: CALL_OW 324
17790: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17791: LD_EXP 45
17795: PUSH
17796: LD_EXP 82
17800: AND
17801: IFFALSE 17821
17803: GO 17805
17805: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17806: LD_INT 19
17808: PPUSH
17809: LD_OWVAR 2
17813: PPUSH
17814: LD_INT 0
17816: PPUSH
17817: CALL_OW 324
17821: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17822: LD_EXP 45
17826: PUSH
17827: LD_EXP 54
17831: AND
17832: IFFALSE 17934
17834: GO 17836
17836: DISABLE
17837: LD_INT 0
17839: PPUSH
17840: PPUSH
// begin enable ;
17841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17842: LD_ADDR_VAR 0 2
17846: PUSH
17847: LD_INT 22
17849: PUSH
17850: LD_OWVAR 2
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 2
17861: PUSH
17862: LD_INT 34
17864: PUSH
17865: LD_INT 11
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 34
17874: PUSH
17875: LD_INT 30
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: ST_TO_ADDR
// if not tmp then
17896: LD_VAR 0 2
17900: NOT
17901: IFFALSE 17905
// exit ;
17903: GO 17934
// for i in tmp do
17905: LD_ADDR_VAR 0 1
17909: PUSH
17910: LD_VAR 0 2
17914: PUSH
17915: FOR_IN
17916: IFFALSE 17932
// begin SetLives ( i , 0 ) ;
17918: LD_VAR 0 1
17922: PPUSH
17923: LD_INT 0
17925: PPUSH
17926: CALL_OW 234
// end ;
17930: GO 17915
17932: POP
17933: POP
// end ;
17934: PPOPN 2
17936: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17937: LD_EXP 45
17941: PUSH
17942: LD_EXP 55
17946: AND
17947: IFFALSE 17967
17949: GO 17951
17951: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17952: LD_INT 32
17954: PPUSH
17955: LD_OWVAR 2
17959: PPUSH
17960: LD_INT 0
17962: PPUSH
17963: CALL_OW 324
17967: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17968: LD_EXP 45
17972: PUSH
17973: LD_EXP 56
17977: AND
17978: IFFALSE 18159
17980: GO 17982
17982: DISABLE
17983: LD_INT 0
17985: PPUSH
17986: PPUSH
17987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_INT 22
17995: PUSH
17996: LD_OWVAR 2
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 33
18007: PUSH
18008: LD_INT 3
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: ST_TO_ADDR
// if not tmp then
18024: LD_VAR 0 2
18028: NOT
18029: IFFALSE 18033
// exit ;
18031: GO 18159
// side := 0 ;
18033: LD_ADDR_VAR 0 3
18037: PUSH
18038: LD_INT 0
18040: ST_TO_ADDR
// for i := 1 to 8 do
18041: LD_ADDR_VAR 0 1
18045: PUSH
18046: DOUBLE
18047: LD_INT 1
18049: DEC
18050: ST_TO_ADDR
18051: LD_INT 8
18053: PUSH
18054: FOR_TO
18055: IFFALSE 18103
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18057: LD_OWVAR 2
18061: PUSH
18062: LD_VAR 0 1
18066: NONEQUAL
18067: PUSH
18068: LD_OWVAR 2
18072: PPUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 81
18082: PUSH
18083: LD_INT 2
18085: EQUAL
18086: AND
18087: IFFALSE 18101
// begin side := i ;
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: LD_VAR 0 1
18098: ST_TO_ADDR
// break ;
18099: GO 18103
// end ;
18101: GO 18054
18103: POP
18104: POP
// if not side then
18105: LD_VAR 0 3
18109: NOT
18110: IFFALSE 18114
// exit ;
18112: GO 18159
// for i := 1 to tmp do
18114: LD_ADDR_VAR 0 1
18118: PUSH
18119: DOUBLE
18120: LD_INT 1
18122: DEC
18123: ST_TO_ADDR
18124: LD_VAR 0 2
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18157
// if Prob ( 60 ) then
18132: LD_INT 60
18134: PPUSH
18135: CALL_OW 13
18139: IFFALSE 18155
// SetSide ( i , side ) ;
18141: LD_VAR 0 1
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: CALL_OW 235
18155: GO 18129
18157: POP
18158: POP
// end ;
18159: PPOPN 3
18161: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18162: LD_EXP 45
18166: PUSH
18167: LD_EXP 58
18171: AND
18172: IFFALSE 18291
18174: GO 18176
18176: DISABLE
18177: LD_INT 0
18179: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_OWVAR 2
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 21
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: LD_INT 23
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 69
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18289
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 257
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 3
18255: PUSH
18256: LD_INT 4
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: IN
18265: IFFALSE 18287
// SetClass ( un , rand ( 1 , 4 ) ) ;
18267: LD_VAR 0 1
18271: PPUSH
18272: LD_INT 1
18274: PPUSH
18275: LD_INT 4
18277: PPUSH
18278: CALL_OW 12
18282: PPUSH
18283: CALL_OW 336
18287: GO 18234
18289: POP
18290: POP
// end ;
18291: PPOPN 1
18293: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18294: LD_EXP 45
18298: PUSH
18299: LD_EXP 57
18303: AND
18304: IFFALSE 18383
18306: GO 18308
18308: DISABLE
18309: LD_INT 0
18311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18312: LD_ADDR_VAR 0 1
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 21
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: ST_TO_ADDR
// if not tmp then
18348: LD_VAR 0 1
18352: NOT
18353: IFFALSE 18357
// exit ;
18355: GO 18383
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18357: LD_VAR 0 1
18361: PUSH
18362: LD_INT 1
18364: PPUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 12
18374: ARRAY
18375: PPUSH
18376: LD_INT 100
18378: PPUSH
18379: CALL_OW 234
// end ;
18383: PPOPN 1
18385: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18386: LD_EXP 45
18390: PUSH
18391: LD_EXP 59
18395: AND
18396: IFFALSE 18494
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18404: LD_ADDR_VAR 0 1
18408: PUSH
18409: LD_INT 22
18411: PUSH
18412: LD_OWVAR 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 21
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PPUSH
18435: CALL_OW 69
18439: ST_TO_ADDR
// if not tmp then
18440: LD_VAR 0 1
18444: NOT
18445: IFFALSE 18449
// exit ;
18447: GO 18494
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18449: LD_VAR 0 1
18453: PUSH
18454: LD_INT 1
18456: PPUSH
18457: LD_VAR 0 1
18461: PPUSH
18462: CALL_OW 12
18466: ARRAY
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: LD_INT 4
18473: PPUSH
18474: CALL_OW 12
18478: PPUSH
18479: LD_INT 3000
18481: PPUSH
18482: LD_INT 9000
18484: PPUSH
18485: CALL_OW 12
18489: PPUSH
18490: CALL_OW 492
// end ;
18494: PPOPN 1
18496: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18497: LD_EXP 45
18501: PUSH
18502: LD_EXP 60
18506: AND
18507: IFFALSE 18527
18509: GO 18511
18511: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18512: LD_INT 1
18514: PPUSH
18515: LD_OWVAR 2
18519: PPUSH
18520: LD_INT 0
18522: PPUSH
18523: CALL_OW 324
18527: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18528: LD_EXP 45
18532: PUSH
18533: LD_EXP 61
18537: AND
18538: IFFALSE 18621
18540: GO 18542
18542: DISABLE
18543: LD_INT 0
18545: PPUSH
18546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18547: LD_ADDR_VAR 0 2
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_OWVAR 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 21
18566: PUSH
18567: LD_INT 3
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 69
18582: ST_TO_ADDR
// if not tmp then
18583: LD_VAR 0 2
18587: NOT
18588: IFFALSE 18592
// exit ;
18590: GO 18621
// for i in tmp do
18592: LD_ADDR_VAR 0 1
18596: PUSH
18597: LD_VAR 0 2
18601: PUSH
18602: FOR_IN
18603: IFFALSE 18619
// SetBLevel ( i , 10 ) ;
18605: LD_VAR 0 1
18609: PPUSH
18610: LD_INT 10
18612: PPUSH
18613: CALL_OW 241
18617: GO 18602
18619: POP
18620: POP
// end ;
18621: PPOPN 2
18623: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18624: LD_EXP 45
18628: PUSH
18629: LD_EXP 62
18633: AND
18634: IFFALSE 18745
18636: GO 18638
18638: DISABLE
18639: LD_INT 0
18641: PPUSH
18642: PPUSH
18643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18644: LD_ADDR_VAR 0 3
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_OWVAR 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 25
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PPUSH
18675: CALL_OW 69
18679: ST_TO_ADDR
// if not tmp then
18680: LD_VAR 0 3
18684: NOT
18685: IFFALSE 18689
// exit ;
18687: GO 18745
// un := tmp [ rand ( 1 , tmp ) ] ;
18689: LD_ADDR_VAR 0 2
18693: PUSH
18694: LD_VAR 0 3
18698: PUSH
18699: LD_INT 1
18701: PPUSH
18702: LD_VAR 0 3
18706: PPUSH
18707: CALL_OW 12
18711: ARRAY
18712: ST_TO_ADDR
// if Crawls ( un ) then
18713: LD_VAR 0 2
18717: PPUSH
18718: CALL_OW 318
18722: IFFALSE 18733
// ComWalk ( un ) ;
18724: LD_VAR 0 2
18728: PPUSH
18729: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18733: LD_VAR 0 2
18737: PPUSH
18738: LD_INT 5
18740: PPUSH
18741: CALL_OW 336
// end ;
18745: PPOPN 3
18747: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18748: LD_EXP 45
18752: PUSH
18753: LD_EXP 63
18757: AND
18758: PUSH
18759: LD_OWVAR 67
18763: PUSH
18764: LD_INT 4
18766: LESS
18767: AND
18768: IFFALSE 18787
18770: GO 18772
18772: DISABLE
// begin Difficulty := Difficulty + 1 ;
18773: LD_ADDR_OWVAR 67
18777: PUSH
18778: LD_OWVAR 67
18782: PUSH
18783: LD_INT 1
18785: PLUS
18786: ST_TO_ADDR
// end ;
18787: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18788: LD_EXP 45
18792: PUSH
18793: LD_EXP 64
18797: AND
18798: IFFALSE 18901
18800: GO 18802
18802: DISABLE
18803: LD_INT 0
18805: PPUSH
// begin for i := 1 to 5 do
18806: LD_ADDR_VAR 0 1
18810: PUSH
18811: DOUBLE
18812: LD_INT 1
18814: DEC
18815: ST_TO_ADDR
18816: LD_INT 5
18818: PUSH
18819: FOR_TO
18820: IFFALSE 18899
// begin uc_nation := nation_nature ;
18822: LD_ADDR_OWVAR 21
18826: PUSH
18827: LD_INT 0
18829: ST_TO_ADDR
// uc_side := 0 ;
18830: LD_ADDR_OWVAR 20
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18838: LD_ADDR_OWVAR 29
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 12
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: ST_TO_ADDR
// hc_agressivity := 20 ;
18853: LD_ADDR_OWVAR 35
18857: PUSH
18858: LD_INT 20
18860: ST_TO_ADDR
// hc_class := class_tiger ;
18861: LD_ADDR_OWVAR 28
18865: PUSH
18866: LD_INT 14
18868: ST_TO_ADDR
// hc_gallery :=  ;
18869: LD_ADDR_OWVAR 33
18873: PUSH
18874: LD_STRING 
18876: ST_TO_ADDR
// hc_name :=  ;
18877: LD_ADDR_OWVAR 26
18881: PUSH
18882: LD_STRING 
18884: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18885: CALL_OW 44
18889: PPUSH
18890: LD_INT 0
18892: PPUSH
18893: CALL_OW 51
// end ;
18897: GO 18819
18899: POP
18900: POP
// end ;
18901: PPOPN 1
18903: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18904: LD_EXP 45
18908: PUSH
18909: LD_EXP 65
18913: AND
18914: IFFALSE 18923
18916: GO 18918
18918: DISABLE
// StreamSibBomb ;
18919: CALL 18924 0 0
18923: END
// export function StreamSibBomb ; var i , x , y ; begin
18924: LD_INT 0
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
// result := false ;
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: LD_INT 0
18937: ST_TO_ADDR
// for i := 1 to 16 do
18938: LD_ADDR_VAR 0 2
18942: PUSH
18943: DOUBLE
18944: LD_INT 1
18946: DEC
18947: ST_TO_ADDR
18948: LD_INT 16
18950: PUSH
18951: FOR_TO
18952: IFFALSE 19151
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_INT 10
18961: PUSH
18962: LD_INT 20
18964: PUSH
18965: LD_INT 30
18967: PUSH
18968: LD_INT 40
18970: PUSH
18971: LD_INT 50
18973: PUSH
18974: LD_INT 60
18976: PUSH
18977: LD_INT 70
18979: PUSH
18980: LD_INT 80
18982: PUSH
18983: LD_INT 90
18985: PUSH
18986: LD_INT 100
18988: PUSH
18989: LD_INT 110
18991: PUSH
18992: LD_INT 120
18994: PUSH
18995: LD_INT 130
18997: PUSH
18998: LD_INT 140
19000: PUSH
19001: LD_INT 150
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_INT 15
19026: PPUSH
19027: CALL_OW 12
19031: ARRAY
19032: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19033: LD_ADDR_VAR 0 4
19037: PUSH
19038: LD_INT 10
19040: PUSH
19041: LD_INT 20
19043: PUSH
19044: LD_INT 30
19046: PUSH
19047: LD_INT 40
19049: PUSH
19050: LD_INT 50
19052: PUSH
19053: LD_INT 60
19055: PUSH
19056: LD_INT 70
19058: PUSH
19059: LD_INT 80
19061: PUSH
19062: LD_INT 90
19064: PUSH
19065: LD_INT 100
19067: PUSH
19068: LD_INT 110
19070: PUSH
19071: LD_INT 120
19073: PUSH
19074: LD_INT 130
19076: PUSH
19077: LD_INT 140
19079: PUSH
19080: LD_INT 150
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: PPUSH
19103: LD_INT 15
19105: PPUSH
19106: CALL_OW 12
19110: ARRAY
19111: ST_TO_ADDR
// if ValidHex ( x , y ) then
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_VAR 0 4
19121: PPUSH
19122: CALL_OW 488
19126: IFFALSE 19149
// begin result := [ x , y ] ;
19128: LD_ADDR_VAR 0 1
19132: PUSH
19133: LD_VAR 0 3
19137: PUSH
19138: LD_VAR 0 4
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: ST_TO_ADDR
// break ;
19147: GO 19151
// end ; end ;
19149: GO 18951
19151: POP
19152: POP
// if result then
19153: LD_VAR 0 1
19157: IFFALSE 19217
// begin ToLua ( playSibBomb() ) ;
19159: LD_STRING playSibBomb()
19161: PPUSH
19162: CALL_OW 559
// wait ( 0 0$14 ) ;
19166: LD_INT 490
19168: PPUSH
19169: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19173: LD_VAR 0 1
19177: PUSH
19178: LD_INT 1
19180: ARRAY
19181: PPUSH
19182: LD_VAR 0 1
19186: PUSH
19187: LD_INT 2
19189: ARRAY
19190: PPUSH
19191: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19195: LD_VAR 0 1
19199: PUSH
19200: LD_INT 1
19202: ARRAY
19203: PPUSH
19204: LD_VAR 0 1
19208: PUSH
19209: LD_INT 2
19211: ARRAY
19212: PPUSH
19213: CALL_OW 429
// end ; end ;
19217: LD_VAR 0 1
19221: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19222: LD_EXP 45
19226: PUSH
19227: LD_EXP 67
19231: AND
19232: IFFALSE 19244
19234: GO 19236
19236: DISABLE
// YouLost (  ) ;
19237: LD_STRING 
19239: PPUSH
19240: CALL_OW 104
19244: END
// every 0 0$1 trigger StreamModeActive and sFog do
19245: LD_EXP 45
19249: PUSH
19250: LD_EXP 66
19254: AND
19255: IFFALSE 19269
19257: GO 19259
19259: DISABLE
// FogOff ( your_side ) ;
19260: LD_OWVAR 2
19264: PPUSH
19265: CALL_OW 344
19269: END
// every 0 0$1 trigger StreamModeActive and sSun do
19270: LD_EXP 45
19274: PUSH
19275: LD_EXP 68
19279: AND
19280: IFFALSE 19308
19282: GO 19284
19284: DISABLE
// begin solar_recharge_percent := 0 ;
19285: LD_ADDR_OWVAR 79
19289: PUSH
19290: LD_INT 0
19292: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19293: LD_INT 10500
19295: PPUSH
19296: CALL_OW 67
// solar_recharge_percent := 100 ;
19300: LD_ADDR_OWVAR 79
19304: PUSH
19305: LD_INT 100
19307: ST_TO_ADDR
// end ;
19308: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19309: LD_EXP 45
19313: PUSH
19314: LD_EXP 69
19318: AND
19319: IFFALSE 19558
19321: GO 19323
19323: DISABLE
19324: LD_INT 0
19326: PPUSH
19327: PPUSH
19328: PPUSH
// begin tmp := [ ] ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: EMPTY
19335: ST_TO_ADDR
// for i := 1 to 6 do
19336: LD_ADDR_VAR 0 1
19340: PUSH
19341: DOUBLE
19342: LD_INT 1
19344: DEC
19345: ST_TO_ADDR
19346: LD_INT 6
19348: PUSH
19349: FOR_TO
19350: IFFALSE 19455
// begin uc_nation := nation_nature ;
19352: LD_ADDR_OWVAR 21
19356: PUSH
19357: LD_INT 0
19359: ST_TO_ADDR
// uc_side := 0 ;
19360: LD_ADDR_OWVAR 20
19364: PUSH
19365: LD_INT 0
19367: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19368: LD_ADDR_OWVAR 29
19372: PUSH
19373: LD_INT 12
19375: PUSH
19376: LD_INT 12
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: ST_TO_ADDR
// hc_agressivity := 20 ;
19383: LD_ADDR_OWVAR 35
19387: PUSH
19388: LD_INT 20
19390: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19391: LD_ADDR_OWVAR 28
19395: PUSH
19396: LD_INT 17
19398: ST_TO_ADDR
// hc_gallery :=  ;
19399: LD_ADDR_OWVAR 33
19403: PUSH
19404: LD_STRING 
19406: ST_TO_ADDR
// hc_name :=  ;
19407: LD_ADDR_OWVAR 26
19411: PUSH
19412: LD_STRING 
19414: ST_TO_ADDR
// un := CreateHuman ;
19415: LD_ADDR_VAR 0 2
19419: PUSH
19420: CALL_OW 44
19424: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19425: LD_VAR 0 2
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: CALL_OW 51
// tmp := tmp ^ un ;
19437: LD_ADDR_VAR 0 3
19441: PUSH
19442: LD_VAR 0 3
19446: PUSH
19447: LD_VAR 0 2
19451: ADD
19452: ST_TO_ADDR
// end ;
19453: GO 19349
19455: POP
19456: POP
// repeat wait ( 0 0$1 ) ;
19457: LD_INT 35
19459: PPUSH
19460: CALL_OW 67
// for un in tmp do
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: LD_VAR 0 3
19473: PUSH
19474: FOR_IN
19475: IFFALSE 19549
// begin if IsDead ( un ) then
19477: LD_VAR 0 2
19481: PPUSH
19482: CALL_OW 301
19486: IFFALSE 19506
// begin tmp := tmp diff un ;
19488: LD_ADDR_VAR 0 3
19492: PUSH
19493: LD_VAR 0 3
19497: PUSH
19498: LD_VAR 0 2
19502: DIFF
19503: ST_TO_ADDR
// continue ;
19504: GO 19474
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19506: LD_VAR 0 2
19510: PPUSH
19511: LD_INT 3
19513: PUSH
19514: LD_INT 22
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PPUSH
19528: CALL_OW 69
19532: PPUSH
19533: LD_VAR 0 2
19537: PPUSH
19538: CALL_OW 74
19542: PPUSH
19543: CALL_OW 115
// end ;
19547: GO 19474
19549: POP
19550: POP
// until not tmp ;
19551: LD_VAR 0 3
19555: NOT
19556: IFFALSE 19457
// end ;
19558: PPOPN 3
19560: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19561: LD_EXP 45
19565: PUSH
19566: LD_EXP 70
19570: AND
19571: IFFALSE 19625
19573: GO 19575
19575: DISABLE
// begin ToLua ( displayTroll(); ) ;
19576: LD_STRING displayTroll();
19578: PPUSH
19579: CALL_OW 559
// wait ( 3 3$00 ) ;
19583: LD_INT 6300
19585: PPUSH
19586: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19590: LD_STRING hideTroll();
19592: PPUSH
19593: CALL_OW 559
// wait ( 1 1$00 ) ;
19597: LD_INT 2100
19599: PPUSH
19600: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19604: LD_STRING displayTroll();
19606: PPUSH
19607: CALL_OW 559
// wait ( 1 1$00 ) ;
19611: LD_INT 2100
19613: PPUSH
19614: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19618: LD_STRING hideTroll();
19620: PPUSH
19621: CALL_OW 559
// end ;
19625: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19626: LD_EXP 45
19630: PUSH
19631: LD_EXP 71
19635: AND
19636: IFFALSE 19699
19638: GO 19640
19640: DISABLE
19641: LD_INT 0
19643: PPUSH
// begin p := 0 ;
19644: LD_ADDR_VAR 0 1
19648: PUSH
19649: LD_INT 0
19651: ST_TO_ADDR
// repeat game_speed := 1 ;
19652: LD_ADDR_OWVAR 65
19656: PUSH
19657: LD_INT 1
19659: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19660: LD_INT 35
19662: PPUSH
19663: CALL_OW 67
// p := p + 1 ;
19667: LD_ADDR_VAR 0 1
19671: PUSH
19672: LD_VAR 0 1
19676: PUSH
19677: LD_INT 1
19679: PLUS
19680: ST_TO_ADDR
// until p >= 60 ;
19681: LD_VAR 0 1
19685: PUSH
19686: LD_INT 60
19688: GREATEREQUAL
19689: IFFALSE 19652
// game_speed := 4 ;
19691: LD_ADDR_OWVAR 65
19695: PUSH
19696: LD_INT 4
19698: ST_TO_ADDR
// end ;
19699: PPOPN 1
19701: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19702: LD_EXP 45
19706: PUSH
19707: LD_EXP 72
19711: AND
19712: IFFALSE 19858
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
19720: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19721: LD_ADDR_VAR 0 1
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_OWVAR 2
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 2
19740: PUSH
19741: LD_INT 30
19743: PUSH
19744: LD_INT 0
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: ST_TO_ADDR
// if not depot then
19775: LD_VAR 0 1
19779: NOT
19780: IFFALSE 19784
// exit ;
19782: GO 19858
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19784: LD_ADDR_VAR 0 2
19788: PUSH
19789: LD_VAR 0 1
19793: PUSH
19794: LD_INT 1
19796: PPUSH
19797: LD_VAR 0 1
19801: PPUSH
19802: CALL_OW 12
19806: ARRAY
19807: PPUSH
19808: CALL_OW 274
19812: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19813: LD_VAR 0 2
19817: PPUSH
19818: LD_INT 1
19820: PPUSH
19821: LD_INT 0
19823: PPUSH
19824: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19828: LD_VAR 0 2
19832: PPUSH
19833: LD_INT 2
19835: PPUSH
19836: LD_INT 0
19838: PPUSH
19839: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19843: LD_VAR 0 2
19847: PPUSH
19848: LD_INT 3
19850: PPUSH
19851: LD_INT 0
19853: PPUSH
19854: CALL_OW 277
// end ;
19858: PPOPN 2
19860: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19861: LD_EXP 45
19865: PUSH
19866: LD_EXP 73
19870: AND
19871: IFFALSE 19968
19873: GO 19875
19875: DISABLE
19876: LD_INT 0
19878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19879: LD_ADDR_VAR 0 1
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_OWVAR 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 21
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: LD_INT 23
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: ST_TO_ADDR
// if not tmp then
19933: LD_VAR 0 1
19937: NOT
19938: IFFALSE 19942
// exit ;
19940: GO 19968
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19942: LD_VAR 0 1
19946: PUSH
19947: LD_INT 1
19949: PPUSH
19950: LD_VAR 0 1
19954: PPUSH
19955: CALL_OW 12
19959: ARRAY
19960: PPUSH
19961: LD_INT 200
19963: PPUSH
19964: CALL_OW 234
// end ;
19968: PPOPN 1
19970: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19971: LD_EXP 45
19975: PUSH
19976: LD_EXP 74
19980: AND
19981: IFFALSE 20060
19983: GO 19985
19985: DISABLE
19986: LD_INT 0
19988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19989: LD_ADDR_VAR 0 1
19993: PUSH
19994: LD_INT 22
19996: PUSH
19997: LD_OWVAR 2
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 21
20008: PUSH
20009: LD_INT 2
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PPUSH
20020: CALL_OW 69
20024: ST_TO_ADDR
// if not tmp then
20025: LD_VAR 0 1
20029: NOT
20030: IFFALSE 20034
// exit ;
20032: GO 20060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20034: LD_VAR 0 1
20038: PUSH
20039: LD_INT 1
20041: PPUSH
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 12
20051: ARRAY
20052: PPUSH
20053: LD_INT 60
20055: PPUSH
20056: CALL_OW 234
// end ;
20060: PPOPN 1
20062: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20063: LD_EXP 45
20067: PUSH
20068: LD_EXP 75
20072: AND
20073: IFFALSE 20172
20075: GO 20077
20077: DISABLE
20078: LD_INT 0
20080: PPUSH
20081: PPUSH
// begin enable ;
20082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20083: LD_ADDR_VAR 0 1
20087: PUSH
20088: LD_INT 22
20090: PUSH
20091: LD_OWVAR 2
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 61
20102: PUSH
20103: EMPTY
20104: LIST
20105: PUSH
20106: LD_INT 33
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: PPUSH
20121: CALL_OW 69
20125: ST_TO_ADDR
// if not tmp then
20126: LD_VAR 0 1
20130: NOT
20131: IFFALSE 20135
// exit ;
20133: GO 20172
// for i in tmp do
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: LD_VAR 0 1
20144: PUSH
20145: FOR_IN
20146: IFFALSE 20170
// if IsControledBy ( i ) then
20148: LD_VAR 0 2
20152: PPUSH
20153: CALL_OW 312
20157: IFFALSE 20168
// ComUnlink ( i ) ;
20159: LD_VAR 0 2
20163: PPUSH
20164: CALL_OW 136
20168: GO 20145
20170: POP
20171: POP
// end ;
20172: PPOPN 2
20174: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20175: LD_EXP 45
20179: PUSH
20180: LD_EXP 76
20184: AND
20185: IFFALSE 20325
20187: GO 20189
20189: DISABLE
20190: LD_INT 0
20192: PPUSH
20193: PPUSH
// begin ToLua ( displayPowell(); ) ;
20194: LD_STRING displayPowell();
20196: PPUSH
20197: CALL_OW 559
// uc_side := 0 ;
20201: LD_ADDR_OWVAR 20
20205: PUSH
20206: LD_INT 0
20208: ST_TO_ADDR
// uc_nation := 2 ;
20209: LD_ADDR_OWVAR 21
20213: PUSH
20214: LD_INT 2
20216: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20217: LD_ADDR_OWVAR 37
20221: PUSH
20222: LD_INT 14
20224: ST_TO_ADDR
// vc_engine := engine_siberite ;
20225: LD_ADDR_OWVAR 39
20229: PUSH
20230: LD_INT 3
20232: ST_TO_ADDR
// vc_control := control_apeman ;
20233: LD_ADDR_OWVAR 38
20237: PUSH
20238: LD_INT 5
20240: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20241: LD_ADDR_OWVAR 40
20245: PUSH
20246: LD_INT 29
20248: ST_TO_ADDR
// un := CreateVehicle ;
20249: LD_ADDR_VAR 0 2
20253: PUSH
20254: CALL_OW 45
20258: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20259: LD_VAR 0 2
20263: PPUSH
20264: LD_INT 1
20266: PPUSH
20267: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20271: LD_INT 35
20273: PPUSH
20274: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20278: LD_VAR 0 2
20282: PPUSH
20283: LD_INT 22
20285: PUSH
20286: LD_OWVAR 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PPUSH
20295: CALL_OW 69
20299: PPUSH
20300: LD_VAR 0 2
20304: PPUSH
20305: CALL_OW 74
20309: PPUSH
20310: CALL_OW 115
// until IsDead ( un ) ;
20314: LD_VAR 0 2
20318: PPUSH
20319: CALL_OW 301
20323: IFFALSE 20271
// end ;
20325: PPOPN 2
20327: END
// every 0 0$1 trigger StreamModeActive and sStu do
20328: LD_EXP 45
20332: PUSH
20333: LD_EXP 84
20337: AND
20338: IFFALSE 20354
20340: GO 20342
20342: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20343: LD_STRING displayStucuk();
20345: PPUSH
20346: CALL_OW 559
// ResetFog ;
20350: CALL_OW 335
// end ;
20354: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20355: LD_EXP 45
20359: PUSH
20360: LD_EXP 77
20364: AND
20365: IFFALSE 20506
20367: GO 20369
20369: DISABLE
20370: LD_INT 0
20372: PPUSH
20373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_OWVAR 2
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 21
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PPUSH
20405: CALL_OW 69
20409: ST_TO_ADDR
// if not tmp then
20410: LD_VAR 0 2
20414: NOT
20415: IFFALSE 20419
// exit ;
20417: GO 20506
// un := tmp [ rand ( 1 , tmp ) ] ;
20419: LD_ADDR_VAR 0 1
20423: PUSH
20424: LD_VAR 0 2
20428: PUSH
20429: LD_INT 1
20431: PPUSH
20432: LD_VAR 0 2
20436: PPUSH
20437: CALL_OW 12
20441: ARRAY
20442: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20443: LD_VAR 0 1
20447: PPUSH
20448: LD_INT 0
20450: PPUSH
20451: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20455: LD_VAR 0 1
20459: PPUSH
20460: LD_OWVAR 3
20464: PUSH
20465: LD_VAR 0 1
20469: DIFF
20470: PPUSH
20471: LD_VAR 0 1
20475: PPUSH
20476: CALL_OW 74
20480: PPUSH
20481: CALL_OW 115
// wait ( 0 0$20 ) ;
20485: LD_INT 700
20487: PPUSH
20488: CALL_OW 67
// SetSide ( un , your_side ) ;
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_OWVAR 2
20501: PPUSH
20502: CALL_OW 235
// end ;
20506: PPOPN 2
20508: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20509: LD_EXP 45
20513: PUSH
20514: LD_EXP 78
20518: AND
20519: IFFALSE 20625
20521: GO 20523
20523: DISABLE
20524: LD_INT 0
20526: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20527: LD_ADDR_VAR 0 1
20531: PUSH
20532: LD_INT 22
20534: PUSH
20535: LD_OWVAR 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 2
20546: PUSH
20547: LD_INT 30
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 30
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PPUSH
20576: CALL_OW 69
20580: ST_TO_ADDR
// if not depot then
20581: LD_VAR 0 1
20585: NOT
20586: IFFALSE 20590
// exit ;
20588: GO 20625
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20590: LD_VAR 0 1
20594: PUSH
20595: LD_INT 1
20597: ARRAY
20598: PPUSH
20599: CALL_OW 250
20603: PPUSH
20604: LD_VAR 0 1
20608: PUSH
20609: LD_INT 1
20611: ARRAY
20612: PPUSH
20613: CALL_OW 251
20617: PPUSH
20618: LD_INT 70
20620: PPUSH
20621: CALL_OW 495
// end ;
20625: PPOPN 1
20627: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20628: LD_EXP 45
20632: PUSH
20633: LD_EXP 79
20637: AND
20638: IFFALSE 20849
20640: GO 20642
20642: DISABLE
20643: LD_INT 0
20645: PPUSH
20646: PPUSH
20647: PPUSH
20648: PPUSH
20649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20650: LD_ADDR_VAR 0 5
20654: PUSH
20655: LD_INT 22
20657: PUSH
20658: LD_OWVAR 2
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: ST_TO_ADDR
// if not tmp then
20686: LD_VAR 0 5
20690: NOT
20691: IFFALSE 20695
// exit ;
20693: GO 20849
// for i in tmp do
20695: LD_ADDR_VAR 0 1
20699: PUSH
20700: LD_VAR 0 5
20704: PUSH
20705: FOR_IN
20706: IFFALSE 20847
// begin d := rand ( 0 , 5 ) ;
20708: LD_ADDR_VAR 0 4
20712: PUSH
20713: LD_INT 0
20715: PPUSH
20716: LD_INT 5
20718: PPUSH
20719: CALL_OW 12
20723: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20724: LD_ADDR_VAR 0 2
20728: PUSH
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 250
20738: PPUSH
20739: LD_VAR 0 4
20743: PPUSH
20744: LD_INT 3
20746: PPUSH
20747: LD_INT 12
20749: PPUSH
20750: CALL_OW 12
20754: PPUSH
20755: CALL_OW 272
20759: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20760: LD_ADDR_VAR 0 3
20764: PUSH
20765: LD_VAR 0 1
20769: PPUSH
20770: CALL_OW 251
20774: PPUSH
20775: LD_VAR 0 4
20779: PPUSH
20780: LD_INT 3
20782: PPUSH
20783: LD_INT 12
20785: PPUSH
20786: CALL_OW 12
20790: PPUSH
20791: CALL_OW 273
20795: ST_TO_ADDR
// if ValidHex ( x , y ) then
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_VAR 0 3
20805: PPUSH
20806: CALL_OW 488
20810: IFFALSE 20845
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20812: LD_VAR 0 1
20816: PPUSH
20817: LD_VAR 0 2
20821: PPUSH
20822: LD_VAR 0 3
20826: PPUSH
20827: LD_INT 3
20829: PPUSH
20830: LD_INT 6
20832: PPUSH
20833: CALL_OW 12
20837: PPUSH
20838: LD_INT 1
20840: PPUSH
20841: CALL_OW 483
// end ;
20845: GO 20705
20847: POP
20848: POP
// end ;
20849: PPOPN 5
20851: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20852: LD_EXP 45
20856: PUSH
20857: LD_EXP 80
20861: AND
20862: IFFALSE 20956
20864: GO 20866
20866: DISABLE
20867: LD_INT 0
20869: PPUSH
20870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20871: LD_ADDR_VAR 0 2
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_OWVAR 2
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 32
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 21
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: LIST
20912: PPUSH
20913: CALL_OW 69
20917: ST_TO_ADDR
// if not tmp then
20918: LD_VAR 0 2
20922: NOT
20923: IFFALSE 20927
// exit ;
20925: GO 20956
// for i in tmp do
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: LD_VAR 0 2
20936: PUSH
20937: FOR_IN
20938: IFFALSE 20954
// SetFuel ( i , 0 ) ;
20940: LD_VAR 0 1
20944: PPUSH
20945: LD_INT 0
20947: PPUSH
20948: CALL_OW 240
20952: GO 20937
20954: POP
20955: POP
// end ;
20956: PPOPN 2
20958: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20959: LD_EXP 45
20963: PUSH
20964: LD_EXP 81
20968: AND
20969: IFFALSE 21035
20971: GO 20973
20973: DISABLE
20974: LD_INT 0
20976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20977: LD_ADDR_VAR 0 1
20981: PUSH
20982: LD_INT 22
20984: PUSH
20985: LD_OWVAR 2
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 30
20996: PUSH
20997: LD_INT 29
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PPUSH
21008: CALL_OW 69
21012: ST_TO_ADDR
// if not tmp then
21013: LD_VAR 0 1
21017: NOT
21018: IFFALSE 21022
// exit ;
21020: GO 21035
// DestroyUnit ( tmp [ 1 ] ) ;
21022: LD_VAR 0 1
21026: PUSH
21027: LD_INT 1
21029: ARRAY
21030: PPUSH
21031: CALL_OW 65
// end ;
21035: PPOPN 1
21037: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21038: LD_EXP 45
21042: PUSH
21043: LD_EXP 83
21047: AND
21048: IFFALSE 21177
21050: GO 21052
21052: DISABLE
21053: LD_INT 0
21055: PPUSH
// begin uc_side := 0 ;
21056: LD_ADDR_OWVAR 20
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// uc_nation := nation_arabian ;
21064: LD_ADDR_OWVAR 21
21068: PUSH
21069: LD_INT 2
21071: ST_TO_ADDR
// hc_gallery :=  ;
21072: LD_ADDR_OWVAR 33
21076: PUSH
21077: LD_STRING 
21079: ST_TO_ADDR
// hc_name :=  ;
21080: LD_ADDR_OWVAR 26
21084: PUSH
21085: LD_STRING 
21087: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21088: LD_INT 1
21090: PPUSH
21091: LD_INT 11
21093: PPUSH
21094: LD_INT 10
21096: PPUSH
21097: CALL_OW 380
// un := CreateHuman ;
21101: LD_ADDR_VAR 0 1
21105: PUSH
21106: CALL_OW 44
21110: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21111: LD_VAR 0 1
21115: PPUSH
21116: LD_INT 1
21118: PPUSH
21119: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21123: LD_INT 35
21125: PPUSH
21126: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21130: LD_VAR 0 1
21134: PPUSH
21135: LD_INT 22
21137: PUSH
21138: LD_OWVAR 2
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 69
21151: PPUSH
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 74
21161: PPUSH
21162: CALL_OW 115
// until IsDead ( un ) ;
21166: LD_VAR 0 1
21170: PPUSH
21171: CALL_OW 301
21175: IFFALSE 21123
// end ;
21177: PPOPN 1
21179: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21180: LD_EXP 45
21184: PUSH
21185: LD_EXP 85
21189: AND
21190: IFFALSE 21202
21192: GO 21194
21194: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21195: LD_STRING earthquake(getX(game), 0, 32)
21197: PPUSH
21198: CALL_OW 559
21202: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21203: LD_EXP 45
21207: PUSH
21208: LD_EXP 86
21212: AND
21213: IFFALSE 21304
21215: GO 21217
21217: DISABLE
21218: LD_INT 0
21220: PPUSH
// begin enable ;
21221: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21222: LD_ADDR_VAR 0 1
21226: PUSH
21227: LD_INT 22
21229: PUSH
21230: LD_OWVAR 2
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 21
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 33
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: ST_TO_ADDR
// if not tmp then
21269: LD_VAR 0 1
21273: NOT
21274: IFFALSE 21278
// exit ;
21276: GO 21304
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21278: LD_VAR 0 1
21282: PUSH
21283: LD_INT 1
21285: PPUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 12
21295: ARRAY
21296: PPUSH
21297: LD_INT 1
21299: PPUSH
21300: CALL_OW 234
// end ;
21304: PPOPN 1
21306: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21307: LD_EXP 45
21311: PUSH
21312: LD_EXP 87
21316: AND
21317: IFFALSE 21458
21319: GO 21321
21321: DISABLE
21322: LD_INT 0
21324: PPUSH
21325: PPUSH
21326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21327: LD_ADDR_VAR 0 3
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_OWVAR 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 25
21346: PUSH
21347: LD_INT 1
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PPUSH
21358: CALL_OW 69
21362: ST_TO_ADDR
// if not tmp then
21363: LD_VAR 0 3
21367: NOT
21368: IFFALSE 21372
// exit ;
21370: GO 21458
// un := tmp [ rand ( 1 , tmp ) ] ;
21372: LD_ADDR_VAR 0 2
21376: PUSH
21377: LD_VAR 0 3
21381: PUSH
21382: LD_INT 1
21384: PPUSH
21385: LD_VAR 0 3
21389: PPUSH
21390: CALL_OW 12
21394: ARRAY
21395: ST_TO_ADDR
// if Crawls ( un ) then
21396: LD_VAR 0 2
21400: PPUSH
21401: CALL_OW 318
21405: IFFALSE 21416
// ComWalk ( un ) ;
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21416: LD_VAR 0 2
21420: PPUSH
21421: LD_INT 9
21423: PPUSH
21424: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21428: LD_INT 28
21430: PPUSH
21431: LD_OWVAR 2
21435: PPUSH
21436: LD_INT 2
21438: PPUSH
21439: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21443: LD_INT 29
21445: PPUSH
21446: LD_OWVAR 2
21450: PPUSH
21451: LD_INT 2
21453: PPUSH
21454: CALL_OW 322
// end ;
21458: PPOPN 3
21460: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21461: LD_EXP 45
21465: PUSH
21466: LD_EXP 88
21470: AND
21471: IFFALSE 21582
21473: GO 21475
21475: DISABLE
21476: LD_INT 0
21478: PPUSH
21479: PPUSH
21480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21481: LD_ADDR_VAR 0 3
21485: PUSH
21486: LD_INT 22
21488: PUSH
21489: LD_OWVAR 2
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 25
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 3
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21582
// un := tmp [ rand ( 1 , tmp ) ] ;
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_VAR 0 3
21535: PUSH
21536: LD_INT 1
21538: PPUSH
21539: LD_VAR 0 3
21543: PPUSH
21544: CALL_OW 12
21548: ARRAY
21549: ST_TO_ADDR
// if Crawls ( un ) then
21550: LD_VAR 0 2
21554: PPUSH
21555: CALL_OW 318
21559: IFFALSE 21570
// ComWalk ( un ) ;
21561: LD_VAR 0 2
21565: PPUSH
21566: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21570: LD_VAR 0 2
21574: PPUSH
21575: LD_INT 8
21577: PPUSH
21578: CALL_OW 336
// end ;
21582: PPOPN 3
21584: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21585: LD_EXP 45
21589: PUSH
21590: LD_EXP 89
21594: AND
21595: IFFALSE 21739
21597: GO 21599
21599: DISABLE
21600: LD_INT 0
21602: PPUSH
21603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21604: LD_ADDR_VAR 0 2
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_OWVAR 2
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 21
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 34
21636: PUSH
21637: LD_INT 12
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 34
21646: PUSH
21647: LD_INT 51
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 34
21656: PUSH
21657: LD_INT 32
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PPUSH
21675: CALL_OW 69
21679: ST_TO_ADDR
// if not tmp then
21680: LD_VAR 0 2
21684: NOT
21685: IFFALSE 21689
// exit ;
21687: GO 21739
// for i in tmp do
21689: LD_ADDR_VAR 0 1
21693: PUSH
21694: LD_VAR 0 2
21698: PUSH
21699: FOR_IN
21700: IFFALSE 21737
// if GetCargo ( i , mat_artifact ) = 0 then
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_INT 4
21709: PPUSH
21710: CALL_OW 289
21714: PUSH
21715: LD_INT 0
21717: EQUAL
21718: IFFALSE 21735
// SetCargo ( i , mat_siberit , 100 ) ;
21720: LD_VAR 0 1
21724: PPUSH
21725: LD_INT 3
21727: PPUSH
21728: LD_INT 100
21730: PPUSH
21731: CALL_OW 290
21735: GO 21699
21737: POP
21738: POP
// end ;
21739: PPOPN 2
21741: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21742: LD_EXP 45
21746: PUSH
21747: LD_EXP 90
21751: AND
21752: IFFALSE 21935
21754: GO 21756
21756: DISABLE
21757: LD_INT 0
21759: PPUSH
21760: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21761: LD_ADDR_VAR 0 2
21765: PUSH
21766: LD_INT 22
21768: PUSH
21769: LD_OWVAR 2
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PPUSH
21778: CALL_OW 69
21782: ST_TO_ADDR
// if not tmp then
21783: LD_VAR 0 2
21787: NOT
21788: IFFALSE 21792
// exit ;
21790: GO 21935
// for i := 1 to 2 do
21792: LD_ADDR_VAR 0 1
21796: PUSH
21797: DOUBLE
21798: LD_INT 1
21800: DEC
21801: ST_TO_ADDR
21802: LD_INT 2
21804: PUSH
21805: FOR_TO
21806: IFFALSE 21933
// begin uc_side := your_side ;
21808: LD_ADDR_OWVAR 20
21812: PUSH
21813: LD_OWVAR 2
21817: ST_TO_ADDR
// uc_nation := nation_american ;
21818: LD_ADDR_OWVAR 21
21822: PUSH
21823: LD_INT 1
21825: ST_TO_ADDR
// vc_chassis := us_morphling ;
21826: LD_ADDR_OWVAR 37
21830: PUSH
21831: LD_INT 5
21833: ST_TO_ADDR
// vc_engine := engine_siberite ;
21834: LD_ADDR_OWVAR 39
21838: PUSH
21839: LD_INT 3
21841: ST_TO_ADDR
// vc_control := control_computer ;
21842: LD_ADDR_OWVAR 38
21846: PUSH
21847: LD_INT 3
21849: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21850: LD_ADDR_OWVAR 40
21854: PUSH
21855: LD_INT 10
21857: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21858: LD_VAR 0 2
21862: PUSH
21863: LD_INT 1
21865: ARRAY
21866: PPUSH
21867: CALL_OW 310
21871: NOT
21872: IFFALSE 21919
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21874: CALL_OW 45
21878: PPUSH
21879: LD_VAR 0 2
21883: PUSH
21884: LD_INT 1
21886: ARRAY
21887: PPUSH
21888: CALL_OW 250
21892: PPUSH
21893: LD_VAR 0 2
21897: PUSH
21898: LD_INT 1
21900: ARRAY
21901: PPUSH
21902: CALL_OW 251
21906: PPUSH
21907: LD_INT 12
21909: PPUSH
21910: LD_INT 1
21912: PPUSH
21913: CALL_OW 50
21917: GO 21931
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21919: CALL_OW 45
21923: PPUSH
21924: LD_INT 1
21926: PPUSH
21927: CALL_OW 51
// end ;
21931: GO 21805
21933: POP
21934: POP
// end ;
21935: PPOPN 2
21937: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21938: LD_EXP 45
21942: PUSH
21943: LD_EXP 91
21947: AND
21948: IFFALSE 22170
21950: GO 21952
21952: DISABLE
21953: LD_INT 0
21955: PPUSH
21956: PPUSH
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21961: LD_ADDR_VAR 0 6
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_OWVAR 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 21
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 3
21990: PUSH
21991: LD_INT 23
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: PPUSH
22010: CALL_OW 69
22014: ST_TO_ADDR
// if not tmp then
22015: LD_VAR 0 6
22019: NOT
22020: IFFALSE 22024
// exit ;
22022: GO 22170
// s1 := rand ( 1 , 4 ) ;
22024: LD_ADDR_VAR 0 2
22028: PUSH
22029: LD_INT 1
22031: PPUSH
22032: LD_INT 4
22034: PPUSH
22035: CALL_OW 12
22039: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22040: LD_ADDR_VAR 0 4
22044: PUSH
22045: LD_VAR 0 6
22049: PUSH
22050: LD_INT 1
22052: ARRAY
22053: PPUSH
22054: LD_VAR 0 2
22058: PPUSH
22059: CALL_OW 259
22063: ST_TO_ADDR
// if s1 = 1 then
22064: LD_VAR 0 2
22068: PUSH
22069: LD_INT 1
22071: EQUAL
22072: IFFALSE 22092
// s2 := rand ( 2 , 4 ) else
22074: LD_ADDR_VAR 0 3
22078: PUSH
22079: LD_INT 2
22081: PPUSH
22082: LD_INT 4
22084: PPUSH
22085: CALL_OW 12
22089: ST_TO_ADDR
22090: GO 22100
// s2 := 1 ;
22092: LD_ADDR_VAR 0 3
22096: PUSH
22097: LD_INT 1
22099: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22100: LD_ADDR_VAR 0 5
22104: PUSH
22105: LD_VAR 0 6
22109: PUSH
22110: LD_INT 1
22112: ARRAY
22113: PPUSH
22114: LD_VAR 0 3
22118: PPUSH
22119: CALL_OW 259
22123: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22124: LD_VAR 0 6
22128: PUSH
22129: LD_INT 1
22131: ARRAY
22132: PPUSH
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_VAR 0 5
22142: PPUSH
22143: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22147: LD_VAR 0 6
22151: PUSH
22152: LD_INT 1
22154: ARRAY
22155: PPUSH
22156: LD_VAR 0 3
22160: PPUSH
22161: LD_VAR 0 4
22165: PPUSH
22166: CALL_OW 237
// end ;
22170: PPOPN 6
22172: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22173: LD_EXP 45
22177: PUSH
22178: LD_EXP 92
22182: AND
22183: IFFALSE 22262
22185: GO 22187
22187: DISABLE
22188: LD_INT 0
22190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22191: LD_ADDR_VAR 0 1
22195: PUSH
22196: LD_INT 22
22198: PUSH
22199: LD_OWVAR 2
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PPUSH
22222: CALL_OW 69
22226: ST_TO_ADDR
// if not tmp then
22227: LD_VAR 0 1
22231: NOT
22232: IFFALSE 22236
// exit ;
22234: GO 22262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22236: LD_VAR 0 1
22240: PUSH
22241: LD_INT 1
22243: PPUSH
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL_OW 12
22253: ARRAY
22254: PPUSH
22255: LD_INT 1
22257: PPUSH
22258: CALL_OW 234
// end ;
22262: PPOPN 1
22264: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22265: LD_EXP 45
22269: PUSH
22270: LD_EXP 93
22274: AND
22275: IFFALSE 22387
22277: GO 22279
22279: DISABLE
22280: LD_INT 0
22282: PPUSH
22283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22284: LD_ADDR_VAR 0 2
22288: PUSH
22289: LD_INT 22
22291: PUSH
22292: LD_OWVAR 2
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 30
22306: PUSH
22307: LD_INT 27
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 30
22316: PUSH
22317: LD_INT 26
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 30
22326: PUSH
22327: LD_INT 28
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 69
22348: ST_TO_ADDR
// if not tmp then
22349: LD_VAR 0 2
22353: NOT
22354: IFFALSE 22358
// exit ;
22356: GO 22387
// for i in tmp do
22358: LD_ADDR_VAR 0 1
22362: PUSH
22363: LD_VAR 0 2
22367: PUSH
22368: FOR_IN
22369: IFFALSE 22385
// SetLives ( i , 1 ) ;
22371: LD_VAR 0 1
22375: PPUSH
22376: LD_INT 1
22378: PPUSH
22379: CALL_OW 234
22383: GO 22368
22385: POP
22386: POP
// end ;
22387: PPOPN 2
22389: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22390: LD_EXP 45
22394: PUSH
22395: LD_EXP 94
22399: AND
22400: IFFALSE 22687
22402: GO 22404
22404: DISABLE
22405: LD_INT 0
22407: PPUSH
22408: PPUSH
22409: PPUSH
// begin i := rand ( 1 , 7 ) ;
22410: LD_ADDR_VAR 0 1
22414: PUSH
22415: LD_INT 1
22417: PPUSH
22418: LD_INT 7
22420: PPUSH
22421: CALL_OW 12
22425: ST_TO_ADDR
// case i of 1 :
22426: LD_VAR 0 1
22430: PUSH
22431: LD_INT 1
22433: DOUBLE
22434: EQUAL
22435: IFTRUE 22439
22437: GO 22449
22439: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22440: LD_STRING earthquake(getX(game), 0, 32)
22442: PPUSH
22443: CALL_OW 559
22447: GO 22687
22449: LD_INT 2
22451: DOUBLE
22452: EQUAL
22453: IFTRUE 22457
22455: GO 22471
22457: POP
// begin ToLua ( displayStucuk(); ) ;
22458: LD_STRING displayStucuk();
22460: PPUSH
22461: CALL_OW 559
// ResetFog ;
22465: CALL_OW 335
// end ; 3 :
22469: GO 22687
22471: LD_INT 3
22473: DOUBLE
22474: EQUAL
22475: IFTRUE 22479
22477: GO 22583
22479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_INT 22
22487: PUSH
22488: LD_OWVAR 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 25
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PPUSH
22511: CALL_OW 69
22515: ST_TO_ADDR
// if not tmp then
22516: LD_VAR 0 2
22520: NOT
22521: IFFALSE 22525
// exit ;
22523: GO 22687
// un := tmp [ rand ( 1 , tmp ) ] ;
22525: LD_ADDR_VAR 0 3
22529: PUSH
22530: LD_VAR 0 2
22534: PUSH
22535: LD_INT 1
22537: PPUSH
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 12
22547: ARRAY
22548: ST_TO_ADDR
// if Crawls ( un ) then
22549: LD_VAR 0 3
22553: PPUSH
22554: CALL_OW 318
22558: IFFALSE 22569
// ComWalk ( un ) ;
22560: LD_VAR 0 3
22564: PPUSH
22565: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22569: LD_VAR 0 3
22573: PPUSH
22574: LD_INT 8
22576: PPUSH
22577: CALL_OW 336
// end ; 4 :
22581: GO 22687
22583: LD_INT 4
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22665
22591: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22592: LD_ADDR_VAR 0 2
22596: PUSH
22597: LD_INT 22
22599: PUSH
22600: LD_OWVAR 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 30
22611: PUSH
22612: LD_INT 29
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PPUSH
22623: CALL_OW 69
22627: ST_TO_ADDR
// if not tmp then
22628: LD_VAR 0 2
22632: NOT
22633: IFFALSE 22637
// exit ;
22635: GO 22687
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22637: LD_VAR 0 2
22641: PUSH
22642: LD_INT 1
22644: ARRAY
22645: PPUSH
22646: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22650: LD_VAR 0 2
22654: PUSH
22655: LD_INT 1
22657: ARRAY
22658: PPUSH
22659: CALL_OW 65
// end ; 5 .. 7 :
22663: GO 22687
22665: LD_INT 5
22667: DOUBLE
22668: GREATEREQUAL
22669: IFFALSE 22677
22671: LD_INT 7
22673: DOUBLE
22674: LESSEQUAL
22675: IFTRUE 22679
22677: GO 22686
22679: POP
// StreamSibBomb ; end ;
22680: CALL 18924 0 0
22684: GO 22687
22686: POP
// end ;
22687: PPOPN 3
22689: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22690: LD_EXP 45
22694: PUSH
22695: LD_EXP 95
22699: AND
22700: IFFALSE 22856
22702: GO 22704
22704: DISABLE
22705: LD_INT 0
22707: PPUSH
22708: PPUSH
22709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: LD_INT 81
22717: PUSH
22718: LD_OWVAR 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 21
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 21
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PPUSH
22759: CALL_OW 69
22763: ST_TO_ADDR
// if not tmp then
22764: LD_VAR 0 2
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22856
// p := 0 ;
22773: LD_ADDR_VAR 0 3
22777: PUSH
22778: LD_INT 0
22780: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22781: LD_INT 35
22783: PPUSH
22784: CALL_OW 67
// p := p + 1 ;
22788: LD_ADDR_VAR 0 3
22792: PUSH
22793: LD_VAR 0 3
22797: PUSH
22798: LD_INT 1
22800: PLUS
22801: ST_TO_ADDR
// for i in tmp do
22802: LD_ADDR_VAR 0 1
22806: PUSH
22807: LD_VAR 0 2
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22844
// if GetLives ( i ) < 1000 then
22815: LD_VAR 0 1
22819: PPUSH
22820: CALL_OW 256
22824: PUSH
22825: LD_INT 1000
22827: LESS
22828: IFFALSE 22842
// SetLives ( i , 1000 ) ;
22830: LD_VAR 0 1
22834: PPUSH
22835: LD_INT 1000
22837: PPUSH
22838: CALL_OW 234
22842: GO 22812
22844: POP
22845: POP
// until p > 20 ;
22846: LD_VAR 0 3
22850: PUSH
22851: LD_INT 20
22853: GREATER
22854: IFFALSE 22781
// end ;
22856: PPOPN 3
22858: END
// every 0 0$1 trigger StreamModeActive and sTime do
22859: LD_EXP 45
22863: PUSH
22864: LD_EXP 96
22868: AND
22869: IFFALSE 22904
22871: GO 22873
22873: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22874: LD_INT 28
22876: PPUSH
22877: LD_OWVAR 2
22881: PPUSH
22882: LD_INT 2
22884: PPUSH
22885: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22889: LD_INT 30
22891: PPUSH
22892: LD_OWVAR 2
22896: PPUSH
22897: LD_INT 2
22899: PPUSH
22900: CALL_OW 322
// end ;
22904: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22905: LD_EXP 45
22909: PUSH
22910: LD_EXP 97
22914: AND
22915: IFFALSE 23036
22917: GO 22919
22919: DISABLE
22920: LD_INT 0
22922: PPUSH
22923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22924: LD_ADDR_VAR 0 2
22928: PUSH
22929: LD_INT 22
22931: PUSH
22932: LD_OWVAR 2
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 21
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 3
22953: PUSH
22954: LD_INT 23
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 69
22977: ST_TO_ADDR
// if not tmp then
22978: LD_VAR 0 2
22982: NOT
22983: IFFALSE 22987
// exit ;
22985: GO 23036
// for i in tmp do
22987: LD_ADDR_VAR 0 1
22991: PUSH
22992: LD_VAR 0 2
22996: PUSH
22997: FOR_IN
22998: IFFALSE 23034
// begin if Crawls ( i ) then
23000: LD_VAR 0 1
23004: PPUSH
23005: CALL_OW 318
23009: IFFALSE 23020
// ComWalk ( i ) ;
23011: LD_VAR 0 1
23015: PPUSH
23016: CALL_OW 138
// SetClass ( i , 2 ) ;
23020: LD_VAR 0 1
23024: PPUSH
23025: LD_INT 2
23027: PPUSH
23028: CALL_OW 336
// end ;
23032: GO 22997
23034: POP
23035: POP
// end ;
23036: PPOPN 2
23038: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23039: LD_EXP 45
23043: PUSH
23044: LD_EXP 98
23048: AND
23049: IFFALSE 23337
23051: GO 23053
23053: DISABLE
23054: LD_INT 0
23056: PPUSH
23057: PPUSH
23058: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23059: LD_OWVAR 2
23063: PPUSH
23064: LD_INT 9
23066: PPUSH
23067: LD_INT 1
23069: PPUSH
23070: LD_INT 1
23072: PPUSH
23073: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23077: LD_INT 9
23079: PPUSH
23080: LD_OWVAR 2
23084: PPUSH
23085: CALL_OW 343
// uc_side := 9 ;
23089: LD_ADDR_OWVAR 20
23093: PUSH
23094: LD_INT 9
23096: ST_TO_ADDR
// uc_nation := 2 ;
23097: LD_ADDR_OWVAR 21
23101: PUSH
23102: LD_INT 2
23104: ST_TO_ADDR
// hc_name := Dark Warrior ;
23105: LD_ADDR_OWVAR 26
23109: PUSH
23110: LD_STRING Dark Warrior
23112: ST_TO_ADDR
// hc_gallery :=  ;
23113: LD_ADDR_OWVAR 33
23117: PUSH
23118: LD_STRING 
23120: ST_TO_ADDR
// hc_noskilllimit := true ;
23121: LD_ADDR_OWVAR 76
23125: PUSH
23126: LD_INT 1
23128: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23129: LD_ADDR_OWVAR 31
23133: PUSH
23134: LD_INT 30
23136: PUSH
23137: LD_INT 30
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: ST_TO_ADDR
// un := CreateHuman ;
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: CALL_OW 44
23161: ST_TO_ADDR
// hc_noskilllimit := false ;
23162: LD_ADDR_OWVAR 76
23166: PUSH
23167: LD_INT 0
23169: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23170: LD_VAR 0 3
23174: PPUSH
23175: LD_INT 1
23177: PPUSH
23178: CALL_OW 51
// ToLua ( playRanger() ) ;
23182: LD_STRING playRanger()
23184: PPUSH
23185: CALL_OW 559
// p := 0 ;
23189: LD_ADDR_VAR 0 2
23193: PUSH
23194: LD_INT 0
23196: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23197: LD_INT 35
23199: PPUSH
23200: CALL_OW 67
// p := p + 1 ;
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: LD_VAR 0 2
23213: PUSH
23214: LD_INT 1
23216: PLUS
23217: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23218: LD_VAR 0 3
23222: PPUSH
23223: CALL_OW 256
23227: PUSH
23228: LD_INT 1000
23230: LESS
23231: IFFALSE 23245
// SetLives ( un , 1000 ) ;
23233: LD_VAR 0 3
23237: PPUSH
23238: LD_INT 1000
23240: PPUSH
23241: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23245: LD_VAR 0 3
23249: PPUSH
23250: LD_INT 81
23252: PUSH
23253: LD_OWVAR 2
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 91
23264: PUSH
23265: LD_VAR 0 3
23269: PUSH
23270: LD_INT 30
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PPUSH
23282: CALL_OW 69
23286: PPUSH
23287: LD_VAR 0 3
23291: PPUSH
23292: CALL_OW 74
23296: PPUSH
23297: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23301: LD_VAR 0 2
23305: PUSH
23306: LD_INT 80
23308: GREATER
23309: PUSH
23310: LD_VAR 0 3
23314: PPUSH
23315: CALL_OW 301
23319: OR
23320: IFFALSE 23197
// if un then
23322: LD_VAR 0 3
23326: IFFALSE 23337
// RemoveUnit ( un ) ;
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 64
// end ;
23337: PPOPN 3
23339: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23340: LD_EXP 99
23344: IFFALSE 23460
23346: GO 23348
23348: DISABLE
23349: LD_INT 0
23351: PPUSH
23352: PPUSH
23353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 81
23361: PUSH
23362: LD_OWVAR 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23390: LD_STRING playComputer()
23392: PPUSH
23393: CALL_OW 559
// if not tmp then
23397: LD_VAR 0 2
23401: NOT
23402: IFFALSE 23406
// exit ;
23404: GO 23460
// for i in tmp do
23406: LD_ADDR_VAR 0 1
23410: PUSH
23411: LD_VAR 0 2
23415: PUSH
23416: FOR_IN
23417: IFFALSE 23458
// for j := 1 to 4 do
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: DOUBLE
23425: LD_INT 1
23427: DEC
23428: ST_TO_ADDR
23429: LD_INT 4
23431: PUSH
23432: FOR_TO
23433: IFFALSE 23454
// SetSkill ( i , j , 10 ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_VAR 0 3
23444: PPUSH
23445: LD_INT 10
23447: PPUSH
23448: CALL_OW 237
23452: GO 23432
23454: POP
23455: POP
23456: GO 23416
23458: POP
23459: POP
// end ;
23460: PPOPN 3
23462: END
// every 0 0$1 trigger s30 do var i , tmp ;
23463: LD_EXP 100
23467: IFFALSE 23536
23469: GO 23471
23471: DISABLE
23472: LD_INT 0
23474: PPUSH
23475: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_INT 22
23483: PUSH
23484: LD_OWVAR 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PPUSH
23493: CALL_OW 69
23497: ST_TO_ADDR
// if not tmp then
23498: LD_VAR 0 2
23502: NOT
23503: IFFALSE 23507
// exit ;
23505: GO 23536
// for i in tmp do
23507: LD_ADDR_VAR 0 1
23511: PUSH
23512: LD_VAR 0 2
23516: PUSH
23517: FOR_IN
23518: IFFALSE 23534
// SetLives ( i , 300 ) ;
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_INT 300
23527: PPUSH
23528: CALL_OW 234
23532: GO 23517
23534: POP
23535: POP
// end ;
23536: PPOPN 2
23538: END
// every 0 0$1 trigger s60 do var i , tmp ;
23539: LD_EXP 101
23543: IFFALSE 23612
23545: GO 23547
23547: DISABLE
23548: LD_INT 0
23550: PPUSH
23551: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23552: LD_ADDR_VAR 0 2
23556: PUSH
23557: LD_INT 22
23559: PUSH
23560: LD_OWVAR 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PPUSH
23569: CALL_OW 69
23573: ST_TO_ADDR
// if not tmp then
23574: LD_VAR 0 2
23578: NOT
23579: IFFALSE 23583
// exit ;
23581: GO 23612
// for i in tmp do
23583: LD_ADDR_VAR 0 1
23587: PUSH
23588: LD_VAR 0 2
23592: PUSH
23593: FOR_IN
23594: IFFALSE 23610
// SetLives ( i , 600 ) ;
23596: LD_VAR 0 1
23600: PPUSH
23601: LD_INT 600
23603: PPUSH
23604: CALL_OW 234
23608: GO 23593
23610: POP
23611: POP
// end ;
23612: PPOPN 2
23614: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23615: LD_INT 0
23617: PPUSH
// case cmd of 301 :
23618: LD_VAR 0 1
23622: PUSH
23623: LD_INT 301
23625: DOUBLE
23626: EQUAL
23627: IFTRUE 23631
23629: GO 23663
23631: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23632: LD_VAR 0 6
23636: PPUSH
23637: LD_VAR 0 7
23641: PPUSH
23642: LD_VAR 0 8
23646: PPUSH
23647: LD_VAR 0 4
23651: PPUSH
23652: LD_VAR 0 5
23656: PPUSH
23657: CALL 24864 0 5
23661: GO 23784
23663: LD_INT 302
23665: DOUBLE
23666: EQUAL
23667: IFTRUE 23671
23669: GO 23708
23671: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23672: LD_VAR 0 6
23676: PPUSH
23677: LD_VAR 0 7
23681: PPUSH
23682: LD_VAR 0 8
23686: PPUSH
23687: LD_VAR 0 9
23691: PPUSH
23692: LD_VAR 0 4
23696: PPUSH
23697: LD_VAR 0 5
23701: PPUSH
23702: CALL 24955 0 6
23706: GO 23784
23708: LD_INT 303
23710: DOUBLE
23711: EQUAL
23712: IFTRUE 23716
23714: GO 23753
23716: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23717: LD_VAR 0 6
23721: PPUSH
23722: LD_VAR 0 7
23726: PPUSH
23727: LD_VAR 0 8
23731: PPUSH
23732: LD_VAR 0 9
23736: PPUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: CALL 23789 0 6
23751: GO 23784
23753: LD_INT 304
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23783
23761: POP
// hHackTeleport ( unit , x , y ) ; end ;
23762: LD_VAR 0 2
23766: PPUSH
23767: LD_VAR 0 4
23771: PPUSH
23772: LD_VAR 0 5
23776: PPUSH
23777: CALL 25548 0 3
23781: GO 23784
23783: POP
// end ;
23784: LD_VAR 0 12
23788: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23793: LD_VAR 0 1
23797: PUSH
23798: LD_INT 1
23800: LESS
23801: PUSH
23802: LD_VAR 0 1
23806: PUSH
23807: LD_INT 3
23809: GREATER
23810: OR
23811: PUSH
23812: LD_VAR 0 5
23816: PPUSH
23817: LD_VAR 0 6
23821: PPUSH
23822: CALL_OW 428
23826: OR
23827: IFFALSE 23831
// exit ;
23829: GO 24551
// uc_side := your_side ;
23831: LD_ADDR_OWVAR 20
23835: PUSH
23836: LD_OWVAR 2
23840: ST_TO_ADDR
// uc_nation := nation ;
23841: LD_ADDR_OWVAR 21
23845: PUSH
23846: LD_VAR 0 1
23850: ST_TO_ADDR
// bc_level = 1 ;
23851: LD_ADDR_OWVAR 43
23855: PUSH
23856: LD_INT 1
23858: ST_TO_ADDR
// case btype of 1 :
23859: LD_VAR 0 2
23863: PUSH
23864: LD_INT 1
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23883
23872: POP
// bc_type := b_depot ; 2 :
23873: LD_ADDR_OWVAR 42
23877: PUSH
23878: LD_INT 0
23880: ST_TO_ADDR
23881: GO 24495
23883: LD_INT 2
23885: DOUBLE
23886: EQUAL
23887: IFTRUE 23891
23889: GO 23902
23891: POP
// bc_type := b_warehouse ; 3 :
23892: LD_ADDR_OWVAR 42
23896: PUSH
23897: LD_INT 1
23899: ST_TO_ADDR
23900: GO 24495
23902: LD_INT 3
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23910
23908: GO 23921
23910: POP
// bc_type := b_lab ; 4 .. 9 :
23911: LD_ADDR_OWVAR 42
23915: PUSH
23916: LD_INT 6
23918: ST_TO_ADDR
23919: GO 24495
23921: LD_INT 4
23923: DOUBLE
23924: GREATEREQUAL
23925: IFFALSE 23933
23927: LD_INT 9
23929: DOUBLE
23930: LESSEQUAL
23931: IFTRUE 23935
23933: GO 23987
23935: POP
// begin bc_type := b_lab_half ;
23936: LD_ADDR_OWVAR 42
23940: PUSH
23941: LD_INT 7
23943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23944: LD_ADDR_OWVAR 44
23948: PUSH
23949: LD_INT 10
23951: PUSH
23952: LD_INT 11
23954: PUSH
23955: LD_INT 12
23957: PUSH
23958: LD_INT 15
23960: PUSH
23961: LD_INT 14
23963: PUSH
23964: LD_INT 13
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: PUSH
23975: LD_VAR 0 2
23979: PUSH
23980: LD_INT 3
23982: MINUS
23983: ARRAY
23984: ST_TO_ADDR
// end ; 10 .. 13 :
23985: GO 24495
23987: LD_INT 10
23989: DOUBLE
23990: GREATEREQUAL
23991: IFFALSE 23999
23993: LD_INT 13
23995: DOUBLE
23996: LESSEQUAL
23997: IFTRUE 24001
23999: GO 24078
24001: POP
// begin bc_type := b_lab_full ;
24002: LD_ADDR_OWVAR 42
24006: PUSH
24007: LD_INT 8
24009: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24010: LD_ADDR_OWVAR 44
24014: PUSH
24015: LD_INT 10
24017: PUSH
24018: LD_INT 12
24020: PUSH
24021: LD_INT 14
24023: PUSH
24024: LD_INT 13
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: PUSH
24033: LD_VAR 0 2
24037: PUSH
24038: LD_INT 9
24040: MINUS
24041: ARRAY
24042: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24043: LD_ADDR_OWVAR 45
24047: PUSH
24048: LD_INT 11
24050: PUSH
24051: LD_INT 15
24053: PUSH
24054: LD_INT 12
24056: PUSH
24057: LD_INT 15
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: PUSH
24066: LD_VAR 0 2
24070: PUSH
24071: LD_INT 9
24073: MINUS
24074: ARRAY
24075: ST_TO_ADDR
// end ; 14 :
24076: GO 24495
24078: LD_INT 14
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 24097
24086: POP
// bc_type := b_workshop ; 15 :
24087: LD_ADDR_OWVAR 42
24091: PUSH
24092: LD_INT 2
24094: ST_TO_ADDR
24095: GO 24495
24097: LD_INT 15
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24116
24105: POP
// bc_type := b_factory ; 16 :
24106: LD_ADDR_OWVAR 42
24110: PUSH
24111: LD_INT 3
24113: ST_TO_ADDR
24114: GO 24495
24116: LD_INT 16
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24135
24124: POP
// bc_type := b_ext_gun ; 17 :
24125: LD_ADDR_OWVAR 42
24129: PUSH
24130: LD_INT 17
24132: ST_TO_ADDR
24133: GO 24495
24135: LD_INT 17
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24171
24143: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24144: LD_ADDR_OWVAR 42
24148: PUSH
24149: LD_INT 19
24151: PUSH
24152: LD_INT 23
24154: PUSH
24155: LD_INT 19
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: PUSH
24163: LD_VAR 0 1
24167: ARRAY
24168: ST_TO_ADDR
24169: GO 24495
24171: LD_INT 18
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24190
24179: POP
// bc_type := b_ext_radar ; 19 :
24180: LD_ADDR_OWVAR 42
24184: PUSH
24185: LD_INT 20
24187: ST_TO_ADDR
24188: GO 24495
24190: LD_INT 19
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24209
24198: POP
// bc_type := b_ext_radio ; 20 :
24199: LD_ADDR_OWVAR 42
24203: PUSH
24204: LD_INT 22
24206: ST_TO_ADDR
24207: GO 24495
24209: LD_INT 20
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24228
24217: POP
// bc_type := b_ext_siberium ; 21 :
24218: LD_ADDR_OWVAR 42
24222: PUSH
24223: LD_INT 21
24225: ST_TO_ADDR
24226: GO 24495
24228: LD_INT 21
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24247
24236: POP
// bc_type := b_ext_computer ; 22 :
24237: LD_ADDR_OWVAR 42
24241: PUSH
24242: LD_INT 24
24244: ST_TO_ADDR
24245: GO 24495
24247: LD_INT 22
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24266
24255: POP
// bc_type := b_ext_track ; 23 :
24256: LD_ADDR_OWVAR 42
24260: PUSH
24261: LD_INT 16
24263: ST_TO_ADDR
24264: GO 24495
24266: LD_INT 23
24268: DOUBLE
24269: EQUAL
24270: IFTRUE 24274
24272: GO 24285
24274: POP
// bc_type := b_ext_laser ; 24 :
24275: LD_ADDR_OWVAR 42
24279: PUSH
24280: LD_INT 25
24282: ST_TO_ADDR
24283: GO 24495
24285: LD_INT 24
24287: DOUBLE
24288: EQUAL
24289: IFTRUE 24293
24291: GO 24304
24293: POP
// bc_type := b_control_tower ; 25 :
24294: LD_ADDR_OWVAR 42
24298: PUSH
24299: LD_INT 36
24301: ST_TO_ADDR
24302: GO 24495
24304: LD_INT 25
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24323
24312: POP
// bc_type := b_breastwork ; 26 :
24313: LD_ADDR_OWVAR 42
24317: PUSH
24318: LD_INT 31
24320: ST_TO_ADDR
24321: GO 24495
24323: LD_INT 26
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24342
24331: POP
// bc_type := b_bunker ; 27 :
24332: LD_ADDR_OWVAR 42
24336: PUSH
24337: LD_INT 32
24339: ST_TO_ADDR
24340: GO 24495
24342: LD_INT 27
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24361
24350: POP
// bc_type := b_turret ; 28 :
24351: LD_ADDR_OWVAR 42
24355: PUSH
24356: LD_INT 33
24358: ST_TO_ADDR
24359: GO 24495
24361: LD_INT 28
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24380
24369: POP
// bc_type := b_armoury ; 29 :
24370: LD_ADDR_OWVAR 42
24374: PUSH
24375: LD_INT 4
24377: ST_TO_ADDR
24378: GO 24495
24380: LD_INT 29
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24399
24388: POP
// bc_type := b_barracks ; 30 :
24389: LD_ADDR_OWVAR 42
24393: PUSH
24394: LD_INT 5
24396: ST_TO_ADDR
24397: GO 24495
24399: LD_INT 30
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24418
24407: POP
// bc_type := b_solar_power ; 31 :
24408: LD_ADDR_OWVAR 42
24412: PUSH
24413: LD_INT 27
24415: ST_TO_ADDR
24416: GO 24495
24418: LD_INT 31
24420: DOUBLE
24421: EQUAL
24422: IFTRUE 24426
24424: GO 24437
24426: POP
// bc_type := b_oil_power ; 32 :
24427: LD_ADDR_OWVAR 42
24431: PUSH
24432: LD_INT 26
24434: ST_TO_ADDR
24435: GO 24495
24437: LD_INT 32
24439: DOUBLE
24440: EQUAL
24441: IFTRUE 24445
24443: GO 24456
24445: POP
// bc_type := b_siberite_power ; 33 :
24446: LD_ADDR_OWVAR 42
24450: PUSH
24451: LD_INT 28
24453: ST_TO_ADDR
24454: GO 24495
24456: LD_INT 33
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24464
24462: GO 24475
24464: POP
// bc_type := b_oil_mine ; 34 :
24465: LD_ADDR_OWVAR 42
24469: PUSH
24470: LD_INT 29
24472: ST_TO_ADDR
24473: GO 24495
24475: LD_INT 34
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24494
24483: POP
// bc_type := b_siberite_mine ; end ;
24484: LD_ADDR_OWVAR 42
24488: PUSH
24489: LD_INT 30
24491: ST_TO_ADDR
24492: GO 24495
24494: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24495: LD_ADDR_VAR 0 8
24499: PUSH
24500: LD_VAR 0 5
24504: PPUSH
24505: LD_VAR 0 6
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: CALL_OW 47
24519: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24520: LD_OWVAR 42
24524: PUSH
24525: LD_INT 32
24527: PUSH
24528: LD_INT 33
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: IN
24535: IFFALSE 24551
// PlaceWeaponTurret ( b , weapon ) ;
24537: LD_VAR 0 8
24541: PPUSH
24542: LD_VAR 0 4
24546: PPUSH
24547: CALL_OW 431
// end ;
24551: LD_VAR 0 7
24555: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24556: LD_INT 0
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24562: LD_ADDR_VAR 0 4
24566: PUSH
24567: LD_INT 22
24569: PUSH
24570: LD_OWVAR 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: PUSH
24582: LD_INT 30
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 30
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL_OW 69
24615: ST_TO_ADDR
// if not tmp then
24616: LD_VAR 0 4
24620: NOT
24621: IFFALSE 24625
// exit ;
24623: GO 24684
// for i in tmp do
24625: LD_ADDR_VAR 0 2
24629: PUSH
24630: LD_VAR 0 4
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24682
// for j = 1 to 3 do
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: DOUBLE
24644: LD_INT 1
24646: DEC
24647: ST_TO_ADDR
24648: LD_INT 3
24650: PUSH
24651: FOR_TO
24652: IFFALSE 24678
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24654: LD_VAR 0 2
24658: PPUSH
24659: CALL_OW 274
24663: PPUSH
24664: LD_VAR 0 3
24668: PPUSH
24669: LD_INT 99999
24671: PPUSH
24672: CALL_OW 277
24676: GO 24651
24678: POP
24679: POP
24680: GO 24635
24682: POP
24683: POP
// end ;
24684: LD_VAR 0 1
24688: RET
// export function hHackSetLevel10 ; var i , j ; begin
24689: LD_INT 0
24691: PPUSH
24692: PPUSH
24693: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 21
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: CALL_OW 69
24713: PUSH
24714: FOR_IN
24715: IFFALSE 24767
// if IsSelected ( i ) then
24717: LD_VAR 0 2
24721: PPUSH
24722: CALL_OW 306
24726: IFFALSE 24765
// begin for j := 1 to 4 do
24728: LD_ADDR_VAR 0 3
24732: PUSH
24733: DOUBLE
24734: LD_INT 1
24736: DEC
24737: ST_TO_ADDR
24738: LD_INT 4
24740: PUSH
24741: FOR_TO
24742: IFFALSE 24763
// SetSkill ( i , j , 10 ) ;
24744: LD_VAR 0 2
24748: PPUSH
24749: LD_VAR 0 3
24753: PPUSH
24754: LD_INT 10
24756: PPUSH
24757: CALL_OW 237
24761: GO 24741
24763: POP
24764: POP
// end ;
24765: GO 24714
24767: POP
24768: POP
// end ;
24769: LD_VAR 0 1
24773: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24774: LD_INT 0
24776: PPUSH
24777: PPUSH
24778: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24779: LD_ADDR_VAR 0 2
24783: PUSH
24784: LD_INT 22
24786: PUSH
24787: LD_OWVAR 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 21
24798: PUSH
24799: LD_INT 1
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PPUSH
24810: CALL_OW 69
24814: PUSH
24815: FOR_IN
24816: IFFALSE 24857
// begin for j := 1 to 4 do
24818: LD_ADDR_VAR 0 3
24822: PUSH
24823: DOUBLE
24824: LD_INT 1
24826: DEC
24827: ST_TO_ADDR
24828: LD_INT 4
24830: PUSH
24831: FOR_TO
24832: IFFALSE 24853
// SetSkill ( i , j , 10 ) ;
24834: LD_VAR 0 2
24838: PPUSH
24839: LD_VAR 0 3
24843: PPUSH
24844: LD_INT 10
24846: PPUSH
24847: CALL_OW 237
24851: GO 24831
24853: POP
24854: POP
// end ;
24855: GO 24815
24857: POP
24858: POP
// end ;
24859: LD_VAR 0 1
24863: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24864: LD_INT 0
24866: PPUSH
// uc_side := your_side ;
24867: LD_ADDR_OWVAR 20
24871: PUSH
24872: LD_OWVAR 2
24876: ST_TO_ADDR
// uc_nation := nation ;
24877: LD_ADDR_OWVAR 21
24881: PUSH
24882: LD_VAR 0 1
24886: ST_TO_ADDR
// InitHc ;
24887: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24891: LD_INT 0
24893: PPUSH
24894: LD_VAR 0 2
24898: PPUSH
24899: LD_VAR 0 3
24903: PPUSH
24904: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24908: LD_VAR 0 4
24912: PPUSH
24913: LD_VAR 0 5
24917: PPUSH
24918: CALL_OW 428
24922: PUSH
24923: LD_INT 0
24925: EQUAL
24926: IFFALSE 24950
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24928: CALL_OW 44
24932: PPUSH
24933: LD_VAR 0 4
24937: PPUSH
24938: LD_VAR 0 5
24942: PPUSH
24943: LD_INT 1
24945: PPUSH
24946: CALL_OW 48
// end ;
24950: LD_VAR 0 6
24954: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// uc_side := your_side ;
24959: LD_ADDR_OWVAR 20
24963: PUSH
24964: LD_OWVAR 2
24968: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24969: LD_VAR 0 1
24973: PUSH
24974: LD_INT 1
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: LD_INT 3
24982: PUSH
24983: LD_INT 4
24985: PUSH
24986: LD_INT 5
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: IN
24996: IFFALSE 25008
// uc_nation := nation_american else
24998: LD_ADDR_OWVAR 21
25002: PUSH
25003: LD_INT 1
25005: ST_TO_ADDR
25006: GO 25051
// if chassis in [ 11 , 12 , 13 , 14 ] then
25008: LD_VAR 0 1
25012: PUSH
25013: LD_INT 11
25015: PUSH
25016: LD_INT 12
25018: PUSH
25019: LD_INT 13
25021: PUSH
25022: LD_INT 14
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: IN
25031: IFFALSE 25043
// uc_nation := nation_arabian else
25033: LD_ADDR_OWVAR 21
25037: PUSH
25038: LD_INT 2
25040: ST_TO_ADDR
25041: GO 25051
// uc_nation := nation_russian ;
25043: LD_ADDR_OWVAR 21
25047: PUSH
25048: LD_INT 3
25050: ST_TO_ADDR
// vc_chassis := chassis ;
25051: LD_ADDR_OWVAR 37
25055: PUSH
25056: LD_VAR 0 1
25060: ST_TO_ADDR
// vc_engine := engine ;
25061: LD_ADDR_OWVAR 39
25065: PUSH
25066: LD_VAR 0 2
25070: ST_TO_ADDR
// vc_control := control ;
25071: LD_ADDR_OWVAR 38
25075: PUSH
25076: LD_VAR 0 3
25080: ST_TO_ADDR
// vc_weapon := weapon ;
25081: LD_ADDR_OWVAR 40
25085: PUSH
25086: LD_VAR 0 4
25090: ST_TO_ADDR
// un := CreateVehicle ;
25091: LD_ADDR_VAR 0 8
25095: PUSH
25096: CALL_OW 45
25100: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25101: LD_VAR 0 8
25105: PPUSH
25106: LD_INT 0
25108: PPUSH
25109: LD_INT 5
25111: PPUSH
25112: CALL_OW 12
25116: PPUSH
25117: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25121: LD_VAR 0 8
25125: PPUSH
25126: LD_VAR 0 5
25130: PPUSH
25131: LD_VAR 0 6
25135: PPUSH
25136: LD_INT 1
25138: PPUSH
25139: CALL_OW 48
// end ;
25143: LD_VAR 0 7
25147: RET
// export hInvincible ; every 1 do
25148: GO 25150
25150: DISABLE
// hInvincible := [ ] ;
25151: LD_ADDR_EXP 102
25155: PUSH
25156: EMPTY
25157: ST_TO_ADDR
25158: END
// every 10 do var i ;
25159: GO 25161
25161: DISABLE
25162: LD_INT 0
25164: PPUSH
// begin enable ;
25165: ENABLE
// if not hInvincible then
25166: LD_EXP 102
25170: NOT
25171: IFFALSE 25175
// exit ;
25173: GO 25219
// for i in hInvincible do
25175: LD_ADDR_VAR 0 1
25179: PUSH
25180: LD_EXP 102
25184: PUSH
25185: FOR_IN
25186: IFFALSE 25217
// if GetLives ( i ) < 1000 then
25188: LD_VAR 0 1
25192: PPUSH
25193: CALL_OW 256
25197: PUSH
25198: LD_INT 1000
25200: LESS
25201: IFFALSE 25215
// SetLives ( i , 1000 ) ;
25203: LD_VAR 0 1
25207: PPUSH
25208: LD_INT 1000
25210: PPUSH
25211: CALL_OW 234
25215: GO 25185
25217: POP
25218: POP
// end ;
25219: PPOPN 1
25221: END
// export function hHackInvincible ; var i ; begin
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25226: LD_ADDR_VAR 0 2
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 21
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 21
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: PPUSH
25259: CALL_OW 69
25263: PUSH
25264: FOR_IN
25265: IFFALSE 25326
// if IsSelected ( i ) then
25267: LD_VAR 0 2
25271: PPUSH
25272: CALL_OW 306
25276: IFFALSE 25324
// begin if i in hInvincible then
25278: LD_VAR 0 2
25282: PUSH
25283: LD_EXP 102
25287: IN
25288: IFFALSE 25308
// hInvincible := hInvincible diff i else
25290: LD_ADDR_EXP 102
25294: PUSH
25295: LD_EXP 102
25299: PUSH
25300: LD_VAR 0 2
25304: DIFF
25305: ST_TO_ADDR
25306: GO 25324
// hInvincible := hInvincible union i ;
25308: LD_ADDR_EXP 102
25312: PUSH
25313: LD_EXP 102
25317: PUSH
25318: LD_VAR 0 2
25322: UNION
25323: ST_TO_ADDR
// end ;
25324: GO 25264
25326: POP
25327: POP
// end ;
25328: LD_VAR 0 1
25332: RET
// export function hHackInvisible ; var i , j ; begin
25333: LD_INT 0
25335: PPUSH
25336: PPUSH
25337: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25338: LD_ADDR_VAR 0 2
25342: PUSH
25343: LD_INT 21
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PPUSH
25353: CALL_OW 69
25357: PUSH
25358: FOR_IN
25359: IFFALSE 25383
// if IsSelected ( i ) then
25361: LD_VAR 0 2
25365: PPUSH
25366: CALL_OW 306
25370: IFFALSE 25381
// ComForceInvisible ( i ) ;
25372: LD_VAR 0 2
25376: PPUSH
25377: CALL_OW 496
25381: GO 25358
25383: POP
25384: POP
// end ;
25385: LD_VAR 0 1
25389: RET
// export function hHackChangeYourSide ; begin
25390: LD_INT 0
25392: PPUSH
// if your_side = 8 then
25393: LD_OWVAR 2
25397: PUSH
25398: LD_INT 8
25400: EQUAL
25401: IFFALSE 25413
// your_side := 0 else
25403: LD_ADDR_OWVAR 2
25407: PUSH
25408: LD_INT 0
25410: ST_TO_ADDR
25411: GO 25427
// your_side := your_side + 1 ;
25413: LD_ADDR_OWVAR 2
25417: PUSH
25418: LD_OWVAR 2
25422: PUSH
25423: LD_INT 1
25425: PLUS
25426: ST_TO_ADDR
// end ;
25427: LD_VAR 0 1
25431: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25432: LD_INT 0
25434: PPUSH
25435: PPUSH
25436: PPUSH
// for i in all_units do
25437: LD_ADDR_VAR 0 2
25441: PUSH
25442: LD_OWVAR 3
25446: PUSH
25447: FOR_IN
25448: IFFALSE 25526
// if IsSelected ( i ) then
25450: LD_VAR 0 2
25454: PPUSH
25455: CALL_OW 306
25459: IFFALSE 25524
// begin j := GetSide ( i ) ;
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: CALL_OW 255
25475: ST_TO_ADDR
// if j = 8 then
25476: LD_VAR 0 3
25480: PUSH
25481: LD_INT 8
25483: EQUAL
25484: IFFALSE 25496
// j := 0 else
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_INT 0
25493: ST_TO_ADDR
25494: GO 25510
// j := j + 1 ;
25496: LD_ADDR_VAR 0 3
25500: PUSH
25501: LD_VAR 0 3
25505: PUSH
25506: LD_INT 1
25508: PLUS
25509: ST_TO_ADDR
// SetSide ( i , j ) ;
25510: LD_VAR 0 2
25514: PPUSH
25515: LD_VAR 0 3
25519: PPUSH
25520: CALL_OW 235
// end ;
25524: GO 25447
25526: POP
25527: POP
// end ;
25528: LD_VAR 0 1
25532: RET
// export function hHackFog ; begin
25533: LD_INT 0
25535: PPUSH
// FogOff ( true ) ;
25536: LD_INT 1
25538: PPUSH
25539: CALL_OW 344
// end ;
25543: LD_VAR 0 1
25547: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25548: LD_INT 0
25550: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25551: LD_VAR 0 1
25555: PPUSH
25556: LD_VAR 0 2
25560: PPUSH
25561: LD_VAR 0 3
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: LD_INT 1
25571: PPUSH
25572: CALL_OW 483
// CenterOnXY ( x , y ) ;
25576: LD_VAR 0 2
25580: PPUSH
25581: LD_VAR 0 3
25585: PPUSH
25586: CALL_OW 84
// end ; end_of_file
25590: LD_VAR 0 4
25594: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25595: LD_INT 0
25597: PPUSH
25598: PPUSH
25599: PPUSH
25600: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25601: LD_VAR 0 1
25605: PPUSH
25606: CALL_OW 264
25610: PUSH
25611: LD_EXP 30
25615: EQUAL
25616: IFFALSE 25688
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25618: LD_INT 68
25620: PPUSH
25621: LD_VAR 0 1
25625: PPUSH
25626: CALL_OW 255
25630: PPUSH
25631: CALL_OW 321
25635: PUSH
25636: LD_INT 2
25638: EQUAL
25639: IFFALSE 25651
// eff := 70 else
25641: LD_ADDR_VAR 0 4
25645: PUSH
25646: LD_INT 70
25648: ST_TO_ADDR
25649: GO 25659
// eff := 30 ;
25651: LD_ADDR_VAR 0 4
25655: PUSH
25656: LD_INT 30
25658: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 250
25668: PPUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 251
25678: PPUSH
25679: LD_VAR 0 4
25683: PPUSH
25684: CALL_OW 495
// end ; end ;
25688: LD_VAR 0 2
25692: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25693: LD_INT 0
25695: PPUSH
// end ;
25696: LD_VAR 0 4
25700: RET
// export function SOS_Command ( cmd ) ; begin
25701: LD_INT 0
25703: PPUSH
// end ;
25704: LD_VAR 0 2
25708: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25709: LD_INT 0
25711: PPUSH
// end ;
25712: LD_VAR 0 6
25716: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
25717: LD_INT 0
25719: PPUSH
25720: PPUSH
// if not vehicle or not factory then
25721: LD_VAR 0 1
25725: NOT
25726: PUSH
25727: LD_VAR 0 2
25731: NOT
25732: OR
25733: IFFALSE 25737
// exit ;
25735: GO 25968
// if factoryWaypoints >= factory then
25737: LD_EXP 103
25741: PUSH
25742: LD_VAR 0 2
25746: GREATEREQUAL
25747: IFFALSE 25968
// if factoryWaypoints [ factory ] then
25749: LD_EXP 103
25753: PUSH
25754: LD_VAR 0 2
25758: ARRAY
25759: IFFALSE 25968
// begin if GetControl ( vehicle ) = control_manual then
25761: LD_VAR 0 1
25765: PPUSH
25766: CALL_OW 263
25770: PUSH
25771: LD_INT 1
25773: EQUAL
25774: IFFALSE 25855
// begin driver := IsDrivenBy ( vehicle ) ;
25776: LD_ADDR_VAR 0 4
25780: PUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 311
25790: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25791: LD_VAR 0 4
25795: PPUSH
25796: LD_EXP 103
25800: PUSH
25801: LD_VAR 0 2
25805: ARRAY
25806: PUSH
25807: LD_INT 1
25809: ARRAY
25810: PPUSH
25811: LD_EXP 103
25815: PUSH
25816: LD_VAR 0 2
25820: ARRAY
25821: PUSH
25822: LD_INT 2
25824: ARRAY
25825: PPUSH
25826: CALL_OW 171
// AddComExitVehicle ( driver ) ;
25830: LD_VAR 0 4
25834: PPUSH
25835: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
25839: LD_VAR 0 4
25843: PPUSH
25844: LD_VAR 0 2
25848: PPUSH
25849: CALL_OW 180
// end else
25853: GO 25968
// if GetControl ( vehicle ) = control_remote then
25855: LD_VAR 0 1
25859: PPUSH
25860: CALL_OW 263
25864: PUSH
25865: LD_INT 2
25867: EQUAL
25868: IFFALSE 25929
// begin wait ( 0 0$2 ) ;
25870: LD_INT 70
25872: PPUSH
25873: CALL_OW 67
// if Connect ( vehicle ) then
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL 38192 0 1
25886: IFFALSE 25927
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25888: LD_VAR 0 1
25892: PPUSH
25893: LD_EXP 103
25897: PUSH
25898: LD_VAR 0 2
25902: ARRAY
25903: PUSH
25904: LD_INT 1
25906: ARRAY
25907: PPUSH
25908: LD_EXP 103
25912: PUSH
25913: LD_VAR 0 2
25917: ARRAY
25918: PUSH
25919: LD_INT 2
25921: ARRAY
25922: PPUSH
25923: CALL_OW 171
// end else
25927: GO 25968
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
25929: LD_VAR 0 1
25933: PPUSH
25934: LD_EXP 103
25938: PUSH
25939: LD_VAR 0 2
25943: ARRAY
25944: PUSH
25945: LD_INT 1
25947: ARRAY
25948: PPUSH
25949: LD_EXP 103
25953: PUSH
25954: LD_VAR 0 2
25958: ARRAY
25959: PUSH
25960: LD_INT 2
25962: ARRAY
25963: PPUSH
25964: CALL_OW 171
// end ; end ;
25968: LD_VAR 0 3
25972: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25973: LD_INT 0
25975: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25976: LD_VAR 0 1
25980: PUSH
25981: LD_INT 250
25983: EQUAL
25984: PUSH
25985: LD_VAR 0 2
25989: PPUSH
25990: CALL_OW 264
25994: PUSH
25995: LD_EXP 33
25999: EQUAL
26000: AND
26001: IFFALSE 26022
// MinerPlaceMine ( unit , x , y ) ;
26003: LD_VAR 0 2
26007: PPUSH
26008: LD_VAR 0 4
26012: PPUSH
26013: LD_VAR 0 5
26017: PPUSH
26018: CALL 28750 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26022: LD_VAR 0 1
26026: PUSH
26027: LD_INT 251
26029: EQUAL
26030: PUSH
26031: LD_VAR 0 2
26035: PPUSH
26036: CALL_OW 264
26040: PUSH
26041: LD_EXP 33
26045: EQUAL
26046: AND
26047: IFFALSE 26068
// MinerDetonateMine ( unit , x , y ) ;
26049: LD_VAR 0 2
26053: PPUSH
26054: LD_VAR 0 4
26058: PPUSH
26059: LD_VAR 0 5
26063: PPUSH
26064: CALL 29027 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26068: LD_VAR 0 1
26072: PUSH
26073: LD_INT 252
26075: EQUAL
26076: PUSH
26077: LD_VAR 0 2
26081: PPUSH
26082: CALL_OW 264
26086: PUSH
26087: LD_EXP 33
26091: EQUAL
26092: AND
26093: IFFALSE 26114
// MinerCreateMinefield ( unit , x , y ) ;
26095: LD_VAR 0 2
26099: PPUSH
26100: LD_VAR 0 4
26104: PPUSH
26105: LD_VAR 0 5
26109: PPUSH
26110: CALL 29444 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26114: LD_VAR 0 1
26118: PUSH
26119: LD_INT 253
26121: EQUAL
26122: PUSH
26123: LD_VAR 0 2
26127: PPUSH
26128: CALL_OW 257
26132: PUSH
26133: LD_INT 5
26135: EQUAL
26136: AND
26137: IFFALSE 26158
// ComBinocular ( unit , x , y ) ;
26139: LD_VAR 0 2
26143: PPUSH
26144: LD_VAR 0 4
26148: PPUSH
26149: LD_VAR 0 5
26153: PPUSH
26154: CALL 29815 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26158: LD_VAR 0 1
26162: PUSH
26163: LD_INT 254
26165: EQUAL
26166: PUSH
26167: LD_VAR 0 2
26171: PPUSH
26172: CALL_OW 264
26176: PUSH
26177: LD_EXP 28
26181: EQUAL
26182: AND
26183: PUSH
26184: LD_VAR 0 3
26188: PPUSH
26189: CALL_OW 263
26193: PUSH
26194: LD_INT 3
26196: EQUAL
26197: AND
26198: IFFALSE 26214
// HackDestroyVehicle ( unit , selectedUnit ) ;
26200: LD_VAR 0 2
26204: PPUSH
26205: LD_VAR 0 3
26209: PPUSH
26210: CALL 28110 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26214: LD_VAR 0 1
26218: PUSH
26219: LD_INT 255
26221: EQUAL
26222: PUSH
26223: LD_VAR 0 2
26227: PPUSH
26228: CALL_OW 264
26232: PUSH
26233: LD_INT 14
26235: PUSH
26236: LD_INT 53
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: IN
26243: AND
26244: PUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: LD_VAR 0 5
26254: PPUSH
26255: CALL_OW 488
26259: AND
26260: IFFALSE 26284
// CutTreeXYR ( unit , x , y , 12 ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_VAR 0 4
26271: PPUSH
26272: LD_VAR 0 5
26276: PPUSH
26277: LD_INT 12
26279: PPUSH
26280: CALL 26676 0 4
// if cmd = 256 then
26284: LD_VAR 0 1
26288: PUSH
26289: LD_INT 256
26291: EQUAL
26292: IFFALSE 26313
// SetFactoryWaypoint ( unit , x , y ) ;
26294: LD_VAR 0 2
26298: PPUSH
26299: LD_VAR 0 4
26303: PPUSH
26304: LD_VAR 0 5
26308: PPUSH
26309: CALL 26318 0 3
// end ;
26313: LD_VAR 0 6
26317: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26318: LD_INT 0
26320: PPUSH
26321: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26322: LD_VAR 0 1
26326: NOT
26327: PUSH
26328: LD_VAR 0 2
26332: PPUSH
26333: LD_VAR 0 3
26337: PPUSH
26338: CALL_OW 488
26342: NOT
26343: OR
26344: PUSH
26345: LD_VAR 0 1
26349: PPUSH
26350: CALL_OW 266
26354: PUSH
26355: LD_INT 3
26357: NONEQUAL
26358: PUSH
26359: LD_VAR 0 1
26363: PPUSH
26364: CALL_OW 247
26368: PUSH
26369: LD_INT 1
26371: EQUAL
26372: NOT
26373: AND
26374: OR
26375: IFFALSE 26379
// exit ;
26377: GO 26528
// if GetType ( factory ) = unit_human then
26379: LD_VAR 0 1
26383: PPUSH
26384: CALL_OW 247
26388: PUSH
26389: LD_INT 1
26391: EQUAL
26392: IFFALSE 26409
// factory := IsInUnit ( factory ) ;
26394: LD_ADDR_VAR 0 1
26398: PUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 310
26408: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 266
26418: PUSH
26419: LD_INT 3
26421: NONEQUAL
26422: IFFALSE 26426
// exit ;
26424: GO 26528
// if HexInfo ( x , y ) = factory then
26426: LD_VAR 0 2
26430: PPUSH
26431: LD_VAR 0 3
26435: PPUSH
26436: CALL_OW 428
26440: PUSH
26441: LD_VAR 0 1
26445: EQUAL
26446: IFFALSE 26473
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26448: LD_ADDR_EXP 103
26452: PUSH
26453: LD_EXP 103
26457: PPUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: LD_INT 0
26465: PPUSH
26466: CALL_OW 1
26470: ST_TO_ADDR
26471: GO 26524
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26473: LD_ADDR_EXP 103
26477: PUSH
26478: LD_EXP 103
26482: PPUSH
26483: LD_VAR 0 1
26487: PPUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 255
26497: PUSH
26498: LD_VAR 0 1
26502: PUSH
26503: LD_VAR 0 2
26507: PUSH
26508: LD_VAR 0 3
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: PPUSH
26519: CALL_OW 1
26523: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26524: CALL 26533 0 0
// end ;
26528: LD_VAR 0 4
26532: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
26533: LD_INT 0
26535: PPUSH
26536: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26537: LD_STRING resetFactoryWaypoint();
26539: PPUSH
26540: CALL_OW 559
// if factoryWaypoints then
26544: LD_EXP 103
26548: IFFALSE 26671
// begin for i := 1 to factoryWaypoints do
26550: LD_ADDR_VAR 0 2
26554: PUSH
26555: DOUBLE
26556: LD_INT 1
26558: DEC
26559: ST_TO_ADDR
26560: LD_EXP 103
26564: PUSH
26565: FOR_TO
26566: IFFALSE 26669
// if factoryWaypoints [ i ] then
26568: LD_EXP 103
26572: PUSH
26573: LD_VAR 0 2
26577: ARRAY
26578: IFFALSE 26667
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
26580: LD_STRING setFactoryWaypointXY(
26582: PUSH
26583: LD_EXP 103
26587: PUSH
26588: LD_VAR 0 2
26592: ARRAY
26593: PUSH
26594: LD_INT 1
26596: ARRAY
26597: STR
26598: PUSH
26599: LD_STRING ,
26601: STR
26602: PUSH
26603: LD_EXP 103
26607: PUSH
26608: LD_VAR 0 2
26612: ARRAY
26613: PUSH
26614: LD_INT 2
26616: ARRAY
26617: STR
26618: PUSH
26619: LD_STRING ,
26621: STR
26622: PUSH
26623: LD_EXP 103
26627: PUSH
26628: LD_VAR 0 2
26632: ARRAY
26633: PUSH
26634: LD_INT 3
26636: ARRAY
26637: STR
26638: PUSH
26639: LD_STRING ,
26641: STR
26642: PUSH
26643: LD_EXP 103
26647: PUSH
26648: LD_VAR 0 2
26652: ARRAY
26653: PUSH
26654: LD_INT 4
26656: ARRAY
26657: STR
26658: PUSH
26659: LD_STRING )
26661: STR
26662: PPUSH
26663: CALL_OW 559
26667: GO 26565
26669: POP
26670: POP
// end ; end ;
26671: LD_VAR 0 1
26675: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26676: LD_INT 0
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26687: LD_VAR 0 1
26691: NOT
26692: PUSH
26693: LD_VAR 0 2
26697: PPUSH
26698: LD_VAR 0 3
26702: PPUSH
26703: CALL_OW 488
26707: NOT
26708: OR
26709: PUSH
26710: LD_VAR 0 4
26714: NOT
26715: OR
26716: IFFALSE 26720
// exit ;
26718: GO 27060
// list := [ ] ;
26720: LD_ADDR_VAR 0 13
26724: PUSH
26725: EMPTY
26726: ST_TO_ADDR
// if x - r < 0 then
26727: LD_VAR 0 2
26731: PUSH
26732: LD_VAR 0 4
26736: MINUS
26737: PUSH
26738: LD_INT 0
26740: LESS
26741: IFFALSE 26753
// min_x := 0 else
26743: LD_ADDR_VAR 0 7
26747: PUSH
26748: LD_INT 0
26750: ST_TO_ADDR
26751: GO 26769
// min_x := x - r ;
26753: LD_ADDR_VAR 0 7
26757: PUSH
26758: LD_VAR 0 2
26762: PUSH
26763: LD_VAR 0 4
26767: MINUS
26768: ST_TO_ADDR
// if y - r < 0 then
26769: LD_VAR 0 3
26773: PUSH
26774: LD_VAR 0 4
26778: MINUS
26779: PUSH
26780: LD_INT 0
26782: LESS
26783: IFFALSE 26795
// min_y := 0 else
26785: LD_ADDR_VAR 0 8
26789: PUSH
26790: LD_INT 0
26792: ST_TO_ADDR
26793: GO 26811
// min_y := y - r ;
26795: LD_ADDR_VAR 0 8
26799: PUSH
26800: LD_VAR 0 3
26804: PUSH
26805: LD_VAR 0 4
26809: MINUS
26810: ST_TO_ADDR
// max_x := x + r ;
26811: LD_ADDR_VAR 0 9
26815: PUSH
26816: LD_VAR 0 2
26820: PUSH
26821: LD_VAR 0 4
26825: PLUS
26826: ST_TO_ADDR
// max_y := y + r ;
26827: LD_ADDR_VAR 0 10
26831: PUSH
26832: LD_VAR 0 3
26836: PUSH
26837: LD_VAR 0 4
26841: PLUS
26842: ST_TO_ADDR
// for _x = min_x to max_x do
26843: LD_ADDR_VAR 0 11
26847: PUSH
26848: DOUBLE
26849: LD_VAR 0 7
26853: DEC
26854: ST_TO_ADDR
26855: LD_VAR 0 9
26859: PUSH
26860: FOR_TO
26861: IFFALSE 26978
// for _y = min_y to max_y do
26863: LD_ADDR_VAR 0 12
26867: PUSH
26868: DOUBLE
26869: LD_VAR 0 8
26873: DEC
26874: ST_TO_ADDR
26875: LD_VAR 0 10
26879: PUSH
26880: FOR_TO
26881: IFFALSE 26974
// begin if not ValidHex ( _x , _y ) then
26883: LD_VAR 0 11
26887: PPUSH
26888: LD_VAR 0 12
26892: PPUSH
26893: CALL_OW 488
26897: NOT
26898: IFFALSE 26902
// continue ;
26900: GO 26880
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26902: LD_VAR 0 11
26906: PPUSH
26907: LD_VAR 0 12
26911: PPUSH
26912: CALL_OW 351
26916: PUSH
26917: LD_VAR 0 11
26921: PPUSH
26922: LD_VAR 0 12
26926: PPUSH
26927: CALL_OW 554
26931: AND
26932: IFFALSE 26972
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26934: LD_ADDR_VAR 0 13
26938: PUSH
26939: LD_VAR 0 13
26943: PPUSH
26944: LD_VAR 0 13
26948: PUSH
26949: LD_INT 1
26951: PLUS
26952: PPUSH
26953: LD_VAR 0 11
26957: PUSH
26958: LD_VAR 0 12
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 2
26971: ST_TO_ADDR
// end ;
26972: GO 26880
26974: POP
26975: POP
26976: GO 26860
26978: POP
26979: POP
// if not list then
26980: LD_VAR 0 13
26984: NOT
26985: IFFALSE 26989
// exit ;
26987: GO 27060
// for i in list do
26989: LD_ADDR_VAR 0 6
26993: PUSH
26994: LD_VAR 0 13
26998: PUSH
26999: FOR_IN
27000: IFFALSE 27058
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27002: LD_VAR 0 1
27006: PPUSH
27007: LD_STRING M
27009: PUSH
27010: LD_VAR 0 6
27014: PUSH
27015: LD_INT 1
27017: ARRAY
27018: PUSH
27019: LD_VAR 0 6
27023: PUSH
27024: LD_INT 2
27026: ARRAY
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: PPUSH
27052: CALL_OW 447
27056: GO 26999
27058: POP
27059: POP
// end ;
27060: LD_VAR 0 5
27064: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27065: LD_EXP 104
27069: NOT
27070: IFFALSE 27120
27072: GO 27074
27074: DISABLE
// begin initHack := true ;
27075: LD_ADDR_EXP 104
27079: PUSH
27080: LD_INT 1
27082: ST_TO_ADDR
// hackTanks := [ ] ;
27083: LD_ADDR_EXP 105
27087: PUSH
27088: EMPTY
27089: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27090: LD_ADDR_EXP 106
27094: PUSH
27095: EMPTY
27096: ST_TO_ADDR
// hackLimit := 3 ;
27097: LD_ADDR_EXP 107
27101: PUSH
27102: LD_INT 3
27104: ST_TO_ADDR
// hackDist := 12 ;
27105: LD_ADDR_EXP 108
27109: PUSH
27110: LD_INT 12
27112: ST_TO_ADDR
// hackCounter := [ ] ;
27113: LD_ADDR_EXP 109
27117: PUSH
27118: EMPTY
27119: ST_TO_ADDR
// end ;
27120: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27121: LD_EXP 104
27125: PUSH
27126: LD_INT 34
27128: PUSH
27129: LD_EXP 28
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PPUSH
27138: CALL_OW 69
27142: AND
27143: IFFALSE 27398
27145: GO 27147
27147: DISABLE
27148: LD_INT 0
27150: PPUSH
27151: PPUSH
// begin enable ;
27152: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27153: LD_ADDR_VAR 0 1
27157: PUSH
27158: LD_INT 34
27160: PUSH
27161: LD_EXP 28
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: PUSH
27175: FOR_IN
27176: IFFALSE 27396
// begin if not i in hackTanks then
27178: LD_VAR 0 1
27182: PUSH
27183: LD_EXP 105
27187: IN
27188: NOT
27189: IFFALSE 27272
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27191: LD_ADDR_EXP 105
27195: PUSH
27196: LD_EXP 105
27200: PPUSH
27201: LD_EXP 105
27205: PUSH
27206: LD_INT 1
27208: PLUS
27209: PPUSH
27210: LD_VAR 0 1
27214: PPUSH
27215: CALL_OW 1
27219: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27220: LD_ADDR_EXP 106
27224: PUSH
27225: LD_EXP 106
27229: PPUSH
27230: LD_EXP 106
27234: PUSH
27235: LD_INT 1
27237: PLUS
27238: PPUSH
27239: EMPTY
27240: PPUSH
27241: CALL_OW 1
27245: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27246: LD_ADDR_EXP 109
27250: PUSH
27251: LD_EXP 109
27255: PPUSH
27256: LD_EXP 109
27260: PUSH
27261: LD_INT 1
27263: PLUS
27264: PPUSH
27265: EMPTY
27266: PPUSH
27267: CALL_OW 1
27271: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27272: LD_VAR 0 1
27276: PPUSH
27277: CALL_OW 302
27281: NOT
27282: IFFALSE 27295
// begin HackUnlinkAll ( i ) ;
27284: LD_VAR 0 1
27288: PPUSH
27289: CALL 27401 0 1
// continue ;
27293: GO 27175
// end ; HackCheckCapturedStatus ( i ) ;
27295: LD_VAR 0 1
27299: PPUSH
27300: CALL 27844 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27304: LD_ADDR_VAR 0 2
27308: PUSH
27309: LD_INT 81
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: CALL_OW 255
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 33
27328: PUSH
27329: LD_INT 3
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 91
27338: PUSH
27339: LD_VAR 0 1
27343: PUSH
27344: LD_EXP 108
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 50
27356: PUSH
27357: EMPTY
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: PPUSH
27366: CALL_OW 69
27370: ST_TO_ADDR
// if not tmp then
27371: LD_VAR 0 2
27375: NOT
27376: IFFALSE 27380
// continue ;
27378: GO 27175
// HackLink ( i , tmp ) ;
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL 27537 0 2
// end ;
27394: GO 27175
27396: POP
27397: POP
// end ;
27398: PPOPN 2
27400: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27401: LD_INT 0
27403: PPUSH
27404: PPUSH
27405: PPUSH
// if not hack in hackTanks then
27406: LD_VAR 0 1
27410: PUSH
27411: LD_EXP 105
27415: IN
27416: NOT
27417: IFFALSE 27421
// exit ;
27419: GO 27532
// index := GetElementIndex ( hackTanks , hack ) ;
27421: LD_ADDR_VAR 0 4
27425: PUSH
27426: LD_EXP 105
27430: PPUSH
27431: LD_VAR 0 1
27435: PPUSH
27436: CALL 35006 0 2
27440: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27441: LD_EXP 106
27445: PUSH
27446: LD_VAR 0 4
27450: ARRAY
27451: IFFALSE 27532
// begin for i in hackTanksCaptured [ index ] do
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: LD_EXP 106
27462: PUSH
27463: LD_VAR 0 4
27467: ARRAY
27468: PUSH
27469: FOR_IN
27470: IFFALSE 27496
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27472: LD_VAR 0 3
27476: PUSH
27477: LD_INT 1
27479: ARRAY
27480: PPUSH
27481: LD_VAR 0 3
27485: PUSH
27486: LD_INT 2
27488: ARRAY
27489: PPUSH
27490: CALL_OW 235
27494: GO 27469
27496: POP
27497: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27498: LD_ADDR_EXP 106
27502: PUSH
27503: LD_EXP 106
27507: PPUSH
27508: LD_VAR 0 4
27512: PPUSH
27513: EMPTY
27514: PPUSH
27515: CALL_OW 1
27519: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27520: LD_VAR 0 1
27524: PPUSH
27525: LD_INT 0
27527: PPUSH
27528: CALL_OW 505
// end ; end ;
27532: LD_VAR 0 2
27536: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27537: LD_INT 0
27539: PPUSH
27540: PPUSH
27541: PPUSH
// if not hack in hackTanks or not vehicles then
27542: LD_VAR 0 1
27546: PUSH
27547: LD_EXP 105
27551: IN
27552: NOT
27553: PUSH
27554: LD_VAR 0 2
27558: NOT
27559: OR
27560: IFFALSE 27564
// exit ;
27562: GO 27839
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27564: LD_ADDR_VAR 0 2
27568: PUSH
27569: LD_VAR 0 1
27573: PPUSH
27574: LD_VAR 0 2
27578: PPUSH
27579: LD_INT 1
27581: PPUSH
27582: LD_INT 1
27584: PPUSH
27585: CALL 35656 0 4
27589: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27590: LD_ADDR_VAR 0 5
27594: PUSH
27595: LD_EXP 105
27599: PPUSH
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL 35006 0 2
27609: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27610: LD_EXP 106
27614: PUSH
27615: LD_VAR 0 5
27619: ARRAY
27620: PUSH
27621: LD_EXP 107
27625: LESS
27626: IFFALSE 27815
// begin for i := 1 to vehicles do
27628: LD_ADDR_VAR 0 4
27632: PUSH
27633: DOUBLE
27634: LD_INT 1
27636: DEC
27637: ST_TO_ADDR
27638: LD_VAR 0 2
27642: PUSH
27643: FOR_TO
27644: IFFALSE 27813
// begin if hackTanksCaptured [ index ] = hackLimit then
27646: LD_EXP 106
27650: PUSH
27651: LD_VAR 0 5
27655: ARRAY
27656: PUSH
27657: LD_EXP 107
27661: EQUAL
27662: IFFALSE 27666
// break ;
27664: GO 27813
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27666: LD_ADDR_EXP 109
27670: PUSH
27671: LD_EXP 109
27675: PPUSH
27676: LD_VAR 0 5
27680: PPUSH
27681: LD_EXP 109
27685: PUSH
27686: LD_VAR 0 5
27690: ARRAY
27691: PUSH
27692: LD_INT 1
27694: PLUS
27695: PPUSH
27696: CALL_OW 1
27700: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27701: LD_ADDR_EXP 106
27705: PUSH
27706: LD_EXP 106
27710: PPUSH
27711: LD_VAR 0 5
27715: PUSH
27716: LD_EXP 106
27720: PUSH
27721: LD_VAR 0 5
27725: ARRAY
27726: PUSH
27727: LD_INT 1
27729: PLUS
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PPUSH
27735: LD_VAR 0 2
27739: PUSH
27740: LD_VAR 0 4
27744: ARRAY
27745: PUSH
27746: LD_VAR 0 2
27750: PUSH
27751: LD_VAR 0 4
27755: ARRAY
27756: PPUSH
27757: CALL_OW 255
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PPUSH
27766: CALL 35221 0 3
27770: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27771: LD_VAR 0 2
27775: PUSH
27776: LD_VAR 0 4
27780: ARRAY
27781: PPUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: CALL_OW 255
27791: PPUSH
27792: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27796: LD_VAR 0 2
27800: PUSH
27801: LD_VAR 0 4
27805: ARRAY
27806: PPUSH
27807: CALL_OW 141
// end ;
27811: GO 27643
27813: POP
27814: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27815: LD_VAR 0 1
27819: PPUSH
27820: LD_EXP 106
27824: PUSH
27825: LD_VAR 0 5
27829: ARRAY
27830: PUSH
27831: LD_INT 0
27833: PLUS
27834: PPUSH
27835: CALL_OW 505
// end ;
27839: LD_VAR 0 3
27843: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27844: LD_INT 0
27846: PPUSH
27847: PPUSH
27848: PPUSH
27849: PPUSH
// if not hack in hackTanks then
27850: LD_VAR 0 1
27854: PUSH
27855: LD_EXP 105
27859: IN
27860: NOT
27861: IFFALSE 27865
// exit ;
27863: GO 28105
// index := GetElementIndex ( hackTanks , hack ) ;
27865: LD_ADDR_VAR 0 4
27869: PUSH
27870: LD_EXP 105
27874: PPUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL 35006 0 2
27884: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: DOUBLE
27891: LD_EXP 106
27895: PUSH
27896: LD_VAR 0 4
27900: ARRAY
27901: INC
27902: ST_TO_ADDR
27903: LD_INT 1
27905: PUSH
27906: FOR_DOWNTO
27907: IFFALSE 28079
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27909: LD_ADDR_VAR 0 5
27913: PUSH
27914: LD_EXP 106
27918: PUSH
27919: LD_VAR 0 4
27923: ARRAY
27924: PUSH
27925: LD_VAR 0 3
27929: ARRAY
27930: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27931: LD_VAR 0 5
27935: PUSH
27936: LD_INT 1
27938: ARRAY
27939: PPUSH
27940: CALL_OW 302
27944: NOT
27945: PUSH
27946: LD_VAR 0 5
27950: PUSH
27951: LD_INT 1
27953: ARRAY
27954: PPUSH
27955: CALL_OW 255
27959: PUSH
27960: LD_VAR 0 1
27964: PPUSH
27965: CALL_OW 255
27969: NONEQUAL
27970: OR
27971: IFFALSE 28077
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27973: LD_VAR 0 5
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: PPUSH
27982: CALL_OW 305
27986: PUSH
27987: LD_VAR 0 5
27991: PUSH
27992: LD_INT 1
27994: ARRAY
27995: PPUSH
27996: CALL_OW 255
28000: PUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 255
28010: EQUAL
28011: AND
28012: IFFALSE 28036
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28014: LD_VAR 0 5
28018: PUSH
28019: LD_INT 1
28021: ARRAY
28022: PPUSH
28023: LD_VAR 0 5
28027: PUSH
28028: LD_INT 2
28030: ARRAY
28031: PPUSH
28032: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28036: LD_ADDR_EXP 106
28040: PUSH
28041: LD_EXP 106
28045: PPUSH
28046: LD_VAR 0 4
28050: PPUSH
28051: LD_EXP 106
28055: PUSH
28056: LD_VAR 0 4
28060: ARRAY
28061: PPUSH
28062: LD_VAR 0 3
28066: PPUSH
28067: CALL_OW 3
28071: PPUSH
28072: CALL_OW 1
28076: ST_TO_ADDR
// end ; end ;
28077: GO 27906
28079: POP
28080: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28081: LD_VAR 0 1
28085: PPUSH
28086: LD_EXP 106
28090: PUSH
28091: LD_VAR 0 4
28095: ARRAY
28096: PUSH
28097: LD_INT 0
28099: PLUS
28100: PPUSH
28101: CALL_OW 505
// end ;
28105: LD_VAR 0 2
28109: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28110: LD_INT 0
28112: PPUSH
28113: PPUSH
28114: PPUSH
28115: PPUSH
// if not hack in hackTanks then
28116: LD_VAR 0 1
28120: PUSH
28121: LD_EXP 105
28125: IN
28126: NOT
28127: IFFALSE 28131
// exit ;
28129: GO 28216
// index := GetElementIndex ( hackTanks , hack ) ;
28131: LD_ADDR_VAR 0 5
28135: PUSH
28136: LD_EXP 105
28140: PPUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL 35006 0 2
28150: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28151: LD_ADDR_VAR 0 4
28155: PUSH
28156: DOUBLE
28157: LD_INT 1
28159: DEC
28160: ST_TO_ADDR
28161: LD_EXP 106
28165: PUSH
28166: LD_VAR 0 5
28170: ARRAY
28171: PUSH
28172: FOR_TO
28173: IFFALSE 28214
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28175: LD_EXP 106
28179: PUSH
28180: LD_VAR 0 5
28184: ARRAY
28185: PUSH
28186: LD_VAR 0 4
28190: ARRAY
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PUSH
28196: LD_VAR 0 2
28200: EQUAL
28201: IFFALSE 28212
// KillUnit ( vehicle ) ;
28203: LD_VAR 0 2
28207: PPUSH
28208: CALL_OW 66
28212: GO 28172
28214: POP
28215: POP
// end ;
28216: LD_VAR 0 3
28220: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28221: LD_EXP 110
28225: NOT
28226: IFFALSE 28261
28228: GO 28230
28230: DISABLE
// begin initMiner := true ;
28231: LD_ADDR_EXP 110
28235: PUSH
28236: LD_INT 1
28238: ST_TO_ADDR
// minersList := [ ] ;
28239: LD_ADDR_EXP 111
28243: PUSH
28244: EMPTY
28245: ST_TO_ADDR
// minerMinesList := [ ] ;
28246: LD_ADDR_EXP 112
28250: PUSH
28251: EMPTY
28252: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28253: LD_ADDR_EXP 113
28257: PUSH
28258: LD_INT 5
28260: ST_TO_ADDR
// end ;
28261: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28262: LD_EXP 110
28266: PUSH
28267: LD_INT 34
28269: PUSH
28270: LD_EXP 33
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 69
28283: AND
28284: IFFALSE 28747
28286: GO 28288
28288: DISABLE
28289: LD_INT 0
28291: PPUSH
28292: PPUSH
28293: PPUSH
28294: PPUSH
// begin enable ;
28295: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28296: LD_ADDR_VAR 0 1
28300: PUSH
28301: LD_INT 34
28303: PUSH
28304: LD_EXP 33
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PPUSH
28313: CALL_OW 69
28317: PUSH
28318: FOR_IN
28319: IFFALSE 28391
// begin if not i in minersList then
28321: LD_VAR 0 1
28325: PUSH
28326: LD_EXP 111
28330: IN
28331: NOT
28332: IFFALSE 28389
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28334: LD_ADDR_EXP 111
28338: PUSH
28339: LD_EXP 111
28343: PPUSH
28344: LD_EXP 111
28348: PUSH
28349: LD_INT 1
28351: PLUS
28352: PPUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 1
28362: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28363: LD_ADDR_EXP 112
28367: PUSH
28368: LD_EXP 112
28372: PPUSH
28373: LD_EXP 112
28377: PUSH
28378: LD_INT 1
28380: PLUS
28381: PPUSH
28382: EMPTY
28383: PPUSH
28384: CALL_OW 1
28388: ST_TO_ADDR
// end end ;
28389: GO 28318
28391: POP
28392: POP
// for i := minerMinesList downto 1 do
28393: LD_ADDR_VAR 0 1
28397: PUSH
28398: DOUBLE
28399: LD_EXP 112
28403: INC
28404: ST_TO_ADDR
28405: LD_INT 1
28407: PUSH
28408: FOR_DOWNTO
28409: IFFALSE 28745
// begin if IsLive ( minersList [ i ] ) then
28411: LD_EXP 111
28415: PUSH
28416: LD_VAR 0 1
28420: ARRAY
28421: PPUSH
28422: CALL_OW 300
28426: IFFALSE 28454
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28428: LD_EXP 111
28432: PUSH
28433: LD_VAR 0 1
28437: ARRAY
28438: PPUSH
28439: LD_EXP 112
28443: PUSH
28444: LD_VAR 0 1
28448: ARRAY
28449: PPUSH
28450: CALL_OW 505
// if not minerMinesList [ i ] then
28454: LD_EXP 112
28458: PUSH
28459: LD_VAR 0 1
28463: ARRAY
28464: NOT
28465: IFFALSE 28469
// continue ;
28467: GO 28408
// for j := minerMinesList [ i ] downto 1 do
28469: LD_ADDR_VAR 0 2
28473: PUSH
28474: DOUBLE
28475: LD_EXP 112
28479: PUSH
28480: LD_VAR 0 1
28484: ARRAY
28485: INC
28486: ST_TO_ADDR
28487: LD_INT 1
28489: PUSH
28490: FOR_DOWNTO
28491: IFFALSE 28741
// begin side := GetSide ( minersList [ i ] ) ;
28493: LD_ADDR_VAR 0 3
28497: PUSH
28498: LD_EXP 111
28502: PUSH
28503: LD_VAR 0 1
28507: ARRAY
28508: PPUSH
28509: CALL_OW 255
28513: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28514: LD_ADDR_VAR 0 4
28518: PUSH
28519: LD_EXP 112
28523: PUSH
28524: LD_VAR 0 1
28528: ARRAY
28529: PUSH
28530: LD_VAR 0 2
28534: ARRAY
28535: PUSH
28536: LD_INT 1
28538: ARRAY
28539: PPUSH
28540: LD_EXP 112
28544: PUSH
28545: LD_VAR 0 1
28549: ARRAY
28550: PUSH
28551: LD_VAR 0 2
28555: ARRAY
28556: PUSH
28557: LD_INT 2
28559: ARRAY
28560: PPUSH
28561: CALL_OW 428
28565: ST_TO_ADDR
// if not tmp then
28566: LD_VAR 0 4
28570: NOT
28571: IFFALSE 28575
// continue ;
28573: GO 28490
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28575: LD_VAR 0 4
28579: PUSH
28580: LD_INT 81
28582: PUSH
28583: LD_VAR 0 3
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: IN
28597: PUSH
28598: LD_EXP 112
28602: PUSH
28603: LD_VAR 0 1
28607: ARRAY
28608: PUSH
28609: LD_VAR 0 2
28613: ARRAY
28614: PUSH
28615: LD_INT 1
28617: ARRAY
28618: PPUSH
28619: LD_EXP 112
28623: PUSH
28624: LD_VAR 0 1
28628: ARRAY
28629: PUSH
28630: LD_VAR 0 2
28634: ARRAY
28635: PUSH
28636: LD_INT 2
28638: ARRAY
28639: PPUSH
28640: CALL_OW 458
28644: AND
28645: IFFALSE 28739
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28647: LD_EXP 112
28651: PUSH
28652: LD_VAR 0 1
28656: ARRAY
28657: PUSH
28658: LD_VAR 0 2
28662: ARRAY
28663: PUSH
28664: LD_INT 1
28666: ARRAY
28667: PPUSH
28668: LD_EXP 112
28672: PUSH
28673: LD_VAR 0 1
28677: ARRAY
28678: PUSH
28679: LD_VAR 0 2
28683: ARRAY
28684: PUSH
28685: LD_INT 2
28687: ARRAY
28688: PPUSH
28689: LD_VAR 0 3
28693: PPUSH
28694: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28698: LD_ADDR_EXP 112
28702: PUSH
28703: LD_EXP 112
28707: PPUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: LD_EXP 112
28717: PUSH
28718: LD_VAR 0 1
28722: ARRAY
28723: PPUSH
28724: LD_VAR 0 2
28728: PPUSH
28729: CALL_OW 3
28733: PPUSH
28734: CALL_OW 1
28738: ST_TO_ADDR
// end ; end ;
28739: GO 28490
28741: POP
28742: POP
// end ;
28743: GO 28408
28745: POP
28746: POP
// end ;
28747: PPOPN 4
28749: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28750: LD_INT 0
28752: PPUSH
28753: PPUSH
// result := false ;
28754: LD_ADDR_VAR 0 4
28758: PUSH
28759: LD_INT 0
28761: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28762: LD_VAR 0 1
28766: PPUSH
28767: CALL_OW 264
28771: PUSH
28772: LD_EXP 33
28776: EQUAL
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 29022
// index := GetElementIndex ( minersList , unit ) ;
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_EXP 111
28791: PPUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL 35006 0 2
28801: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28802: LD_EXP 112
28806: PUSH
28807: LD_VAR 0 5
28811: ARRAY
28812: PUSH
28813: LD_EXP 113
28817: GREATEREQUAL
28818: IFFALSE 28822
// exit ;
28820: GO 29022
// ComMoveXY ( unit , x , y ) ;
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_VAR 0 2
28831: PPUSH
28832: LD_VAR 0 3
28836: PPUSH
28837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28841: LD_INT 35
28843: PPUSH
28844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28848: LD_VAR 0 1
28852: PPUSH
28853: LD_VAR 0 2
28857: PPUSH
28858: LD_VAR 0 3
28862: PPUSH
28863: CALL 65778 0 3
28867: NOT
28868: PUSH
28869: LD_VAR 0 1
28873: PPUSH
28874: CALL_OW 314
28878: AND
28879: IFFALSE 28883
// exit ;
28881: GO 29022
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28883: LD_VAR 0 2
28887: PPUSH
28888: LD_VAR 0 3
28892: PPUSH
28893: CALL_OW 428
28897: PUSH
28898: LD_VAR 0 1
28902: EQUAL
28903: PUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL_OW 314
28913: NOT
28914: AND
28915: IFFALSE 28841
// PlaySoundXY ( x , y , PlantMine ) ;
28917: LD_VAR 0 2
28921: PPUSH
28922: LD_VAR 0 3
28926: PPUSH
28927: LD_STRING PlantMine
28929: PPUSH
28930: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28934: LD_VAR 0 2
28938: PPUSH
28939: LD_VAR 0 3
28943: PPUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 255
28953: PPUSH
28954: LD_INT 0
28956: PPUSH
28957: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28961: LD_ADDR_EXP 112
28965: PUSH
28966: LD_EXP 112
28970: PPUSH
28971: LD_VAR 0 5
28975: PUSH
28976: LD_EXP 112
28980: PUSH
28981: LD_VAR 0 5
28985: ARRAY
28986: PUSH
28987: LD_INT 1
28989: PLUS
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PPUSH
28995: LD_VAR 0 2
28999: PUSH
29000: LD_VAR 0 3
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PPUSH
29009: CALL 35221 0 3
29013: ST_TO_ADDR
// result := true ;
29014: LD_ADDR_VAR 0 4
29018: PUSH
29019: LD_INT 1
29021: ST_TO_ADDR
// end ;
29022: LD_VAR 0 4
29026: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29027: LD_INT 0
29029: PPUSH
29030: PPUSH
29031: PPUSH
// if not unit in minersList then
29032: LD_VAR 0 1
29036: PUSH
29037: LD_EXP 111
29041: IN
29042: NOT
29043: IFFALSE 29047
// exit ;
29045: GO 29439
// index := GetElementIndex ( minersList , unit ) ;
29047: LD_ADDR_VAR 0 6
29051: PUSH
29052: LD_EXP 111
29056: PPUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL 35006 0 2
29066: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29067: LD_ADDR_VAR 0 5
29071: PUSH
29072: DOUBLE
29073: LD_EXP 112
29077: PUSH
29078: LD_VAR 0 6
29082: ARRAY
29083: INC
29084: ST_TO_ADDR
29085: LD_INT 1
29087: PUSH
29088: FOR_DOWNTO
29089: IFFALSE 29250
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29091: LD_EXP 112
29095: PUSH
29096: LD_VAR 0 6
29100: ARRAY
29101: PUSH
29102: LD_VAR 0 5
29106: ARRAY
29107: PUSH
29108: LD_INT 1
29110: ARRAY
29111: PUSH
29112: LD_VAR 0 2
29116: EQUAL
29117: PUSH
29118: LD_EXP 112
29122: PUSH
29123: LD_VAR 0 6
29127: ARRAY
29128: PUSH
29129: LD_VAR 0 5
29133: ARRAY
29134: PUSH
29135: LD_INT 2
29137: ARRAY
29138: PUSH
29139: LD_VAR 0 3
29143: EQUAL
29144: AND
29145: IFFALSE 29248
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29147: LD_EXP 112
29151: PUSH
29152: LD_VAR 0 6
29156: ARRAY
29157: PUSH
29158: LD_VAR 0 5
29162: ARRAY
29163: PUSH
29164: LD_INT 1
29166: ARRAY
29167: PPUSH
29168: LD_EXP 112
29172: PUSH
29173: LD_VAR 0 6
29177: ARRAY
29178: PUSH
29179: LD_VAR 0 5
29183: ARRAY
29184: PUSH
29185: LD_INT 2
29187: ARRAY
29188: PPUSH
29189: LD_VAR 0 1
29193: PPUSH
29194: CALL_OW 255
29198: PPUSH
29199: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29203: LD_ADDR_EXP 112
29207: PUSH
29208: LD_EXP 112
29212: PPUSH
29213: LD_VAR 0 6
29217: PPUSH
29218: LD_EXP 112
29222: PUSH
29223: LD_VAR 0 6
29227: ARRAY
29228: PPUSH
29229: LD_VAR 0 5
29233: PPUSH
29234: CALL_OW 3
29238: PPUSH
29239: CALL_OW 1
29243: ST_TO_ADDR
// exit ;
29244: POP
29245: POP
29246: GO 29439
// end ; end ;
29248: GO 29088
29250: POP
29251: POP
// for i := minerMinesList [ index ] downto 1 do
29252: LD_ADDR_VAR 0 5
29256: PUSH
29257: DOUBLE
29258: LD_EXP 112
29262: PUSH
29263: LD_VAR 0 6
29267: ARRAY
29268: INC
29269: ST_TO_ADDR
29270: LD_INT 1
29272: PUSH
29273: FOR_DOWNTO
29274: IFFALSE 29437
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29276: LD_EXP 112
29280: PUSH
29281: LD_VAR 0 6
29285: ARRAY
29286: PUSH
29287: LD_VAR 0 5
29291: ARRAY
29292: PUSH
29293: LD_INT 1
29295: ARRAY
29296: PPUSH
29297: LD_EXP 112
29301: PUSH
29302: LD_VAR 0 6
29306: ARRAY
29307: PUSH
29308: LD_VAR 0 5
29312: ARRAY
29313: PUSH
29314: LD_INT 2
29316: ARRAY
29317: PPUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 298
29332: PUSH
29333: LD_INT 6
29335: LESS
29336: IFFALSE 29435
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29338: LD_EXP 112
29342: PUSH
29343: LD_VAR 0 6
29347: ARRAY
29348: PUSH
29349: LD_VAR 0 5
29353: ARRAY
29354: PUSH
29355: LD_INT 1
29357: ARRAY
29358: PPUSH
29359: LD_EXP 112
29363: PUSH
29364: LD_VAR 0 6
29368: ARRAY
29369: PUSH
29370: LD_VAR 0 5
29374: ARRAY
29375: PUSH
29376: LD_INT 2
29378: ARRAY
29379: PPUSH
29380: LD_VAR 0 1
29384: PPUSH
29385: CALL_OW 255
29389: PPUSH
29390: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29394: LD_ADDR_EXP 112
29398: PUSH
29399: LD_EXP 112
29403: PPUSH
29404: LD_VAR 0 6
29408: PPUSH
29409: LD_EXP 112
29413: PUSH
29414: LD_VAR 0 6
29418: ARRAY
29419: PPUSH
29420: LD_VAR 0 5
29424: PPUSH
29425: CALL_OW 3
29429: PPUSH
29430: CALL_OW 1
29434: ST_TO_ADDR
// end ; end ;
29435: GO 29273
29437: POP
29438: POP
// end ;
29439: LD_VAR 0 4
29443: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29444: LD_INT 0
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 264
29464: PUSH
29465: LD_EXP 33
29469: EQUAL
29470: NOT
29471: PUSH
29472: LD_VAR 0 1
29476: PUSH
29477: LD_EXP 111
29481: IN
29482: NOT
29483: OR
29484: IFFALSE 29488
// exit ;
29486: GO 29810
// index := GetElementIndex ( minersList , unit ) ;
29488: LD_ADDR_VAR 0 6
29492: PUSH
29493: LD_EXP 111
29497: PPUSH
29498: LD_VAR 0 1
29502: PPUSH
29503: CALL 35006 0 2
29507: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29508: LD_ADDR_VAR 0 8
29512: PUSH
29513: LD_EXP 113
29517: PUSH
29518: LD_EXP 112
29522: PUSH
29523: LD_VAR 0 6
29527: ARRAY
29528: MINUS
29529: ST_TO_ADDR
// if not minesFreeAmount then
29530: LD_VAR 0 8
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29810
// tmp := [ ] ;
29539: LD_ADDR_VAR 0 7
29543: PUSH
29544: EMPTY
29545: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29546: LD_ADDR_VAR 0 5
29550: PUSH
29551: DOUBLE
29552: LD_INT 1
29554: DEC
29555: ST_TO_ADDR
29556: LD_VAR 0 8
29560: PUSH
29561: FOR_TO
29562: IFFALSE 29757
// begin _d := rand ( 0 , 5 ) ;
29564: LD_ADDR_VAR 0 11
29568: PUSH
29569: LD_INT 0
29571: PPUSH
29572: LD_INT 5
29574: PPUSH
29575: CALL_OW 12
29579: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29580: LD_ADDR_VAR 0 12
29584: PUSH
29585: LD_INT 2
29587: PPUSH
29588: LD_INT 6
29590: PPUSH
29591: CALL_OW 12
29595: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29596: LD_ADDR_VAR 0 9
29600: PUSH
29601: LD_VAR 0 2
29605: PPUSH
29606: LD_VAR 0 11
29610: PPUSH
29611: LD_VAR 0 12
29615: PPUSH
29616: CALL_OW 272
29620: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29621: LD_ADDR_VAR 0 10
29625: PUSH
29626: LD_VAR 0 3
29630: PPUSH
29631: LD_VAR 0 11
29635: PPUSH
29636: LD_VAR 0 12
29640: PPUSH
29641: CALL_OW 273
29645: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29646: LD_VAR 0 9
29650: PPUSH
29651: LD_VAR 0 10
29655: PPUSH
29656: CALL_OW 488
29660: PUSH
29661: LD_VAR 0 9
29665: PUSH
29666: LD_VAR 0 10
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_VAR 0 7
29679: IN
29680: NOT
29681: AND
29682: PUSH
29683: LD_VAR 0 9
29687: PPUSH
29688: LD_VAR 0 10
29692: PPUSH
29693: CALL_OW 458
29697: NOT
29698: AND
29699: IFFALSE 29741
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29701: LD_ADDR_VAR 0 7
29705: PUSH
29706: LD_VAR 0 7
29710: PPUSH
29711: LD_VAR 0 7
29715: PUSH
29716: LD_INT 1
29718: PLUS
29719: PPUSH
29720: LD_VAR 0 9
29724: PUSH
29725: LD_VAR 0 10
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PPUSH
29734: CALL_OW 1
29738: ST_TO_ADDR
29739: GO 29755
// i := i - 1 ;
29741: LD_ADDR_VAR 0 5
29745: PUSH
29746: LD_VAR 0 5
29750: PUSH
29751: LD_INT 1
29753: MINUS
29754: ST_TO_ADDR
// end ;
29755: GO 29561
29757: POP
29758: POP
// for i in tmp do
29759: LD_ADDR_VAR 0 5
29763: PUSH
29764: LD_VAR 0 7
29768: PUSH
29769: FOR_IN
29770: IFFALSE 29808
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_VAR 0 5
29781: PUSH
29782: LD_INT 1
29784: ARRAY
29785: PPUSH
29786: LD_VAR 0 5
29790: PUSH
29791: LD_INT 2
29793: ARRAY
29794: PPUSH
29795: CALL 28750 0 3
29799: NOT
29800: IFFALSE 29806
// exit ;
29802: POP
29803: POP
29804: GO 29810
29806: GO 29769
29808: POP
29809: POP
// end ;
29810: LD_VAR 0 4
29814: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29815: LD_INT 0
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
// if not GetClass ( unit ) = class_sniper then
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 257
29833: PUSH
29834: LD_INT 5
29836: EQUAL
29837: NOT
29838: IFFALSE 29842
// exit ;
29840: GO 30230
// dist := 8 ;
29842: LD_ADDR_VAR 0 5
29846: PUSH
29847: LD_INT 8
29849: ST_TO_ADDR
// viewRange := 12 ;
29850: LD_ADDR_VAR 0 7
29854: PUSH
29855: LD_INT 12
29857: ST_TO_ADDR
// side := GetSide ( unit ) ;
29858: LD_ADDR_VAR 0 6
29862: PUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 255
29872: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29873: LD_INT 61
29875: PPUSH
29876: LD_VAR 0 6
29880: PPUSH
29881: CALL_OW 321
29885: PUSH
29886: LD_INT 2
29888: EQUAL
29889: IFFALSE 29899
// viewRange := 16 ;
29891: LD_ADDR_VAR 0 7
29895: PUSH
29896: LD_INT 16
29898: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29899: LD_VAR 0 1
29903: PPUSH
29904: LD_VAR 0 2
29908: PPUSH
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL_OW 297
29918: PUSH
29919: LD_VAR 0 5
29923: GREATER
29924: IFFALSE 30003
// begin ComMoveXY ( unit , x , y ) ;
29926: LD_VAR 0 1
29930: PPUSH
29931: LD_VAR 0 2
29935: PPUSH
29936: LD_VAR 0 3
29940: PPUSH
29941: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29945: LD_INT 35
29947: PPUSH
29948: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29952: LD_VAR 0 1
29956: PPUSH
29957: LD_VAR 0 2
29961: PPUSH
29962: LD_VAR 0 3
29966: PPUSH
29967: CALL 65778 0 3
29971: NOT
29972: IFFALSE 29976
// exit ;
29974: GO 30230
// until GetDistUnitXY ( unit , x , y ) < dist ;
29976: LD_VAR 0 1
29980: PPUSH
29981: LD_VAR 0 2
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 297
29995: PUSH
29996: LD_VAR 0 5
30000: LESS
30001: IFFALSE 29945
// end ; ComTurnXY ( unit , x , y ) ;
30003: LD_VAR 0 1
30007: PPUSH
30008: LD_VAR 0 2
30012: PPUSH
30013: LD_VAR 0 3
30017: PPUSH
30018: CALL_OW 118
// wait ( 5 ) ;
30022: LD_INT 5
30024: PPUSH
30025: CALL_OW 67
// _d := GetDir ( unit ) ;
30029: LD_ADDR_VAR 0 10
30033: PUSH
30034: LD_VAR 0 1
30038: PPUSH
30039: CALL_OW 254
30043: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30044: LD_ADDR_VAR 0 8
30048: PUSH
30049: LD_VAR 0 1
30053: PPUSH
30054: CALL_OW 250
30058: PPUSH
30059: LD_VAR 0 10
30063: PPUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: CALL_OW 272
30073: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30074: LD_ADDR_VAR 0 9
30078: PUSH
30079: LD_VAR 0 1
30083: PPUSH
30084: CALL_OW 251
30088: PPUSH
30089: LD_VAR 0 10
30093: PPUSH
30094: LD_VAR 0 5
30098: PPUSH
30099: CALL_OW 273
30103: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30104: LD_VAR 0 8
30108: PPUSH
30109: LD_VAR 0 9
30113: PPUSH
30114: CALL_OW 488
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30230
// ComAnimCustom ( unit , 1 ) ;
30123: LD_VAR 0 1
30127: PPUSH
30128: LD_INT 1
30130: PPUSH
30131: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30135: LD_VAR 0 8
30139: PPUSH
30140: LD_VAR 0 9
30144: PPUSH
30145: LD_VAR 0 6
30149: PPUSH
30150: LD_VAR 0 7
30154: PPUSH
30155: CALL_OW 330
// repeat wait ( 1 ) ;
30159: LD_INT 1
30161: PPUSH
30162: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
30166: LD_VAR 0 1
30170: PPUSH
30171: CALL_OW 316
30175: PUSH
30176: LD_VAR 0 1
30180: PPUSH
30181: CALL_OW 314
30185: OR
30186: PUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL_OW 302
30196: NOT
30197: OR
30198: PUSH
30199: LD_VAR 0 1
30203: PPUSH
30204: CALL_OW 301
30208: OR
30209: IFFALSE 30159
// RemoveSeeing ( _x , _y , side ) ;
30211: LD_VAR 0 8
30215: PPUSH
30216: LD_VAR 0 9
30220: PPUSH
30221: LD_VAR 0 6
30225: PPUSH
30226: CALL_OW 331
// end ; end_of_file
30230: LD_VAR 0 4
30234: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30235: LD_INT 0
30237: PPUSH
30238: PPUSH
// if exist_mode then
30239: LD_VAR 0 2
30243: IFFALSE 30268
// unit := CreateCharacter ( prefix & ident ) else
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_VAR 0 3
30254: PUSH
30255: LD_VAR 0 1
30259: STR
30260: PPUSH
30261: CALL_OW 34
30265: ST_TO_ADDR
30266: GO 30283
// unit := NewCharacter ( ident ) ;
30268: LD_ADDR_VAR 0 5
30272: PUSH
30273: LD_VAR 0 1
30277: PPUSH
30278: CALL_OW 25
30282: ST_TO_ADDR
// result := unit ;
30283: LD_ADDR_VAR 0 4
30287: PUSH
30288: LD_VAR 0 5
30292: ST_TO_ADDR
// end ;
30293: LD_VAR 0 4
30297: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30298: LD_INT 0
30300: PPUSH
30301: PPUSH
// if not side or not nation then
30302: LD_VAR 0 1
30306: NOT
30307: PUSH
30308: LD_VAR 0 2
30312: NOT
30313: OR
30314: IFFALSE 30318
// exit ;
30316: GO 31086
// case nation of nation_american :
30318: LD_VAR 0 2
30322: PUSH
30323: LD_INT 1
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30545
30331: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30332: LD_ADDR_VAR 0 4
30336: PUSH
30337: LD_INT 35
30339: PUSH
30340: LD_INT 45
30342: PUSH
30343: LD_INT 46
30345: PUSH
30346: LD_INT 47
30348: PUSH
30349: LD_INT 82
30351: PUSH
30352: LD_INT 83
30354: PUSH
30355: LD_INT 84
30357: PUSH
30358: LD_INT 85
30360: PUSH
30361: LD_INT 86
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: LD_INT 6
30372: PUSH
30373: LD_INT 15
30375: PUSH
30376: LD_INT 16
30378: PUSH
30379: LD_INT 7
30381: PUSH
30382: LD_INT 12
30384: PUSH
30385: LD_INT 13
30387: PUSH
30388: LD_INT 10
30390: PUSH
30391: LD_INT 14
30393: PUSH
30394: LD_INT 20
30396: PUSH
30397: LD_INT 21
30399: PUSH
30400: LD_INT 22
30402: PUSH
30403: LD_INT 25
30405: PUSH
30406: LD_INT 32
30408: PUSH
30409: LD_INT 27
30411: PUSH
30412: LD_INT 36
30414: PUSH
30415: LD_INT 69
30417: PUSH
30418: LD_INT 39
30420: PUSH
30421: LD_INT 34
30423: PUSH
30424: LD_INT 40
30426: PUSH
30427: LD_INT 48
30429: PUSH
30430: LD_INT 49
30432: PUSH
30433: LD_INT 50
30435: PUSH
30436: LD_INT 51
30438: PUSH
30439: LD_INT 52
30441: PUSH
30442: LD_INT 53
30444: PUSH
30445: LD_INT 54
30447: PUSH
30448: LD_INT 55
30450: PUSH
30451: LD_INT 56
30453: PUSH
30454: LD_INT 57
30456: PUSH
30457: LD_INT 58
30459: PUSH
30460: LD_INT 59
30462: PUSH
30463: LD_INT 60
30465: PUSH
30466: LD_INT 61
30468: PUSH
30469: LD_INT 62
30471: PUSH
30472: LD_INT 80
30474: PUSH
30475: LD_INT 82
30477: PUSH
30478: LD_INT 83
30480: PUSH
30481: LD_INT 84
30483: PUSH
30484: LD_INT 85
30486: PUSH
30487: LD_INT 86
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
30543: GO 31010
30545: LD_INT 2
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30779
30553: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30554: LD_ADDR_VAR 0 4
30558: PUSH
30559: LD_INT 35
30561: PUSH
30562: LD_INT 45
30564: PUSH
30565: LD_INT 46
30567: PUSH
30568: LD_INT 47
30570: PUSH
30571: LD_INT 82
30573: PUSH
30574: LD_INT 83
30576: PUSH
30577: LD_INT 84
30579: PUSH
30580: LD_INT 85
30582: PUSH
30583: LD_INT 87
30585: PUSH
30586: LD_INT 70
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 11
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 4
30600: PUSH
30601: LD_INT 5
30603: PUSH
30604: LD_INT 6
30606: PUSH
30607: LD_INT 15
30609: PUSH
30610: LD_INT 18
30612: PUSH
30613: LD_INT 7
30615: PUSH
30616: LD_INT 17
30618: PUSH
30619: LD_INT 8
30621: PUSH
30622: LD_INT 20
30624: PUSH
30625: LD_INT 21
30627: PUSH
30628: LD_INT 22
30630: PUSH
30631: LD_INT 72
30633: PUSH
30634: LD_INT 26
30636: PUSH
30637: LD_INT 69
30639: PUSH
30640: LD_INT 39
30642: PUSH
30643: LD_INT 40
30645: PUSH
30646: LD_INT 41
30648: PUSH
30649: LD_INT 42
30651: PUSH
30652: LD_INT 43
30654: PUSH
30655: LD_INT 48
30657: PUSH
30658: LD_INT 49
30660: PUSH
30661: LD_INT 50
30663: PUSH
30664: LD_INT 51
30666: PUSH
30667: LD_INT 52
30669: PUSH
30670: LD_INT 53
30672: PUSH
30673: LD_INT 54
30675: PUSH
30676: LD_INT 55
30678: PUSH
30679: LD_INT 56
30681: PUSH
30682: LD_INT 60
30684: PUSH
30685: LD_INT 61
30687: PUSH
30688: LD_INT 62
30690: PUSH
30691: LD_INT 66
30693: PUSH
30694: LD_INT 67
30696: PUSH
30697: LD_INT 68
30699: PUSH
30700: LD_INT 81
30702: PUSH
30703: LD_INT 82
30705: PUSH
30706: LD_INT 83
30708: PUSH
30709: LD_INT 84
30711: PUSH
30712: LD_INT 85
30714: PUSH
30715: LD_INT 87
30717: PUSH
30718: LD_INT 88
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: ST_TO_ADDR
30777: GO 31010
30779: LD_INT 3
30781: DOUBLE
30782: EQUAL
30783: IFTRUE 30787
30785: GO 31009
30787: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30788: LD_ADDR_VAR 0 4
30792: PUSH
30793: LD_INT 46
30795: PUSH
30796: LD_INT 47
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 82
30807: PUSH
30808: LD_INT 83
30810: PUSH
30811: LD_INT 84
30813: PUSH
30814: LD_INT 85
30816: PUSH
30817: LD_INT 86
30819: PUSH
30820: LD_INT 11
30822: PUSH
30823: LD_INT 9
30825: PUSH
30826: LD_INT 20
30828: PUSH
30829: LD_INT 19
30831: PUSH
30832: LD_INT 21
30834: PUSH
30835: LD_INT 24
30837: PUSH
30838: LD_INT 22
30840: PUSH
30841: LD_INT 25
30843: PUSH
30844: LD_INT 28
30846: PUSH
30847: LD_INT 29
30849: PUSH
30850: LD_INT 30
30852: PUSH
30853: LD_INT 31
30855: PUSH
30856: LD_INT 37
30858: PUSH
30859: LD_INT 38
30861: PUSH
30862: LD_INT 32
30864: PUSH
30865: LD_INT 27
30867: PUSH
30868: LD_INT 33
30870: PUSH
30871: LD_INT 69
30873: PUSH
30874: LD_INT 39
30876: PUSH
30877: LD_INT 34
30879: PUSH
30880: LD_INT 40
30882: PUSH
30883: LD_INT 71
30885: PUSH
30886: LD_INT 23
30888: PUSH
30889: LD_INT 44
30891: PUSH
30892: LD_INT 48
30894: PUSH
30895: LD_INT 49
30897: PUSH
30898: LD_INT 50
30900: PUSH
30901: LD_INT 51
30903: PUSH
30904: LD_INT 52
30906: PUSH
30907: LD_INT 53
30909: PUSH
30910: LD_INT 54
30912: PUSH
30913: LD_INT 55
30915: PUSH
30916: LD_INT 56
30918: PUSH
30919: LD_INT 57
30921: PUSH
30922: LD_INT 58
30924: PUSH
30925: LD_INT 59
30927: PUSH
30928: LD_INT 63
30930: PUSH
30931: LD_INT 64
30933: PUSH
30934: LD_INT 65
30936: PUSH
30937: LD_INT 82
30939: PUSH
30940: LD_INT 83
30942: PUSH
30943: LD_INT 84
30945: PUSH
30946: LD_INT 85
30948: PUSH
30949: LD_INT 86
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 31010
31009: POP
// if state > - 1 and state < 3 then
31010: LD_VAR 0 3
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: GREATER
31019: PUSH
31020: LD_VAR 0 3
31024: PUSH
31025: LD_INT 3
31027: LESS
31028: AND
31029: IFFALSE 31086
// for i in result do
31031: LD_ADDR_VAR 0 5
31035: PUSH
31036: LD_VAR 0 4
31040: PUSH
31041: FOR_IN
31042: IFFALSE 31084
// if GetTech ( i , side ) <> state then
31044: LD_VAR 0 5
31048: PPUSH
31049: LD_VAR 0 1
31053: PPUSH
31054: CALL_OW 321
31058: PUSH
31059: LD_VAR 0 3
31063: NONEQUAL
31064: IFFALSE 31082
// result := result diff i ;
31066: LD_ADDR_VAR 0 4
31070: PUSH
31071: LD_VAR 0 4
31075: PUSH
31076: LD_VAR 0 5
31080: DIFF
31081: ST_TO_ADDR
31082: GO 31041
31084: POP
31085: POP
// end ;
31086: LD_VAR 0 4
31090: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
31095: PPUSH
// result := true ;
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 1
31103: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31104: LD_ADDR_VAR 0 5
31108: PUSH
31109: LD_VAR 0 2
31113: PPUSH
31114: CALL_OW 480
31118: ST_TO_ADDR
// if not tmp then
31119: LD_VAR 0 5
31123: NOT
31124: IFFALSE 31128
// exit ;
31126: GO 31177
// for i in tmp do
31128: LD_ADDR_VAR 0 4
31132: PUSH
31133: LD_VAR 0 5
31137: PUSH
31138: FOR_IN
31139: IFFALSE 31175
// if GetTech ( i , side ) <> state_researched then
31141: LD_VAR 0 4
31145: PPUSH
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 321
31155: PUSH
31156: LD_INT 2
31158: NONEQUAL
31159: IFFALSE 31173
// begin result := false ;
31161: LD_ADDR_VAR 0 3
31165: PUSH
31166: LD_INT 0
31168: ST_TO_ADDR
// exit ;
31169: POP
31170: POP
31171: GO 31177
// end ;
31173: GO 31138
31175: POP
31176: POP
// end ;
31177: LD_VAR 0 3
31181: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31182: LD_INT 0
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
31195: PPUSH
31196: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31197: LD_VAR 0 1
31201: NOT
31202: PUSH
31203: LD_VAR 0 1
31207: PPUSH
31208: CALL_OW 257
31212: PUSH
31213: LD_INT 9
31215: NONEQUAL
31216: OR
31217: IFFALSE 31221
// exit ;
31219: GO 31794
// side := GetSide ( unit ) ;
31221: LD_ADDR_VAR 0 9
31225: PUSH
31226: LD_VAR 0 1
31230: PPUSH
31231: CALL_OW 255
31235: ST_TO_ADDR
// tech_space := tech_spacanom ;
31236: LD_ADDR_VAR 0 12
31240: PUSH
31241: LD_INT 29
31243: ST_TO_ADDR
// tech_time := tech_taurad ;
31244: LD_ADDR_VAR 0 13
31248: PUSH
31249: LD_INT 28
31251: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31252: LD_ADDR_VAR 0 11
31256: PUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 310
31266: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31267: LD_VAR 0 11
31271: PPUSH
31272: CALL_OW 247
31276: PUSH
31277: LD_INT 2
31279: EQUAL
31280: IFFALSE 31284
// exit ;
31282: GO 31794
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31284: LD_ADDR_VAR 0 8
31288: PUSH
31289: LD_INT 81
31291: PUSH
31292: LD_VAR 0 9
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 3
31303: PUSH
31304: LD_INT 21
31306: PUSH
31307: LD_INT 3
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PPUSH
31322: CALL_OW 69
31326: ST_TO_ADDR
// if not tmp then
31327: LD_VAR 0 8
31331: NOT
31332: IFFALSE 31336
// exit ;
31334: GO 31794
// if in_unit then
31336: LD_VAR 0 11
31340: IFFALSE 31364
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31342: LD_ADDR_VAR 0 10
31346: PUSH
31347: LD_VAR 0 8
31351: PPUSH
31352: LD_VAR 0 11
31356: PPUSH
31357: CALL_OW 74
31361: ST_TO_ADDR
31362: GO 31384
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31364: LD_ADDR_VAR 0 10
31368: PUSH
31369: LD_VAR 0 8
31373: PPUSH
31374: LD_VAR 0 1
31378: PPUSH
31379: CALL_OW 74
31383: ST_TO_ADDR
// if not enemy then
31384: LD_VAR 0 10
31388: NOT
31389: IFFALSE 31393
// exit ;
31391: GO 31794
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31393: LD_VAR 0 11
31397: PUSH
31398: LD_VAR 0 11
31402: PPUSH
31403: LD_VAR 0 10
31407: PPUSH
31408: CALL_OW 296
31412: PUSH
31413: LD_INT 13
31415: GREATER
31416: AND
31417: PUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: LD_VAR 0 10
31427: PPUSH
31428: CALL_OW 296
31432: PUSH
31433: LD_INT 12
31435: GREATER
31436: OR
31437: IFFALSE 31441
// exit ;
31439: GO 31794
// missile := [ 1 ] ;
31441: LD_ADDR_VAR 0 14
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: EMPTY
31450: LIST
31451: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31452: LD_VAR 0 9
31456: PPUSH
31457: LD_VAR 0 12
31461: PPUSH
31462: CALL_OW 325
31466: IFFALSE 31495
// missile := Insert ( missile , missile + 1 , 2 ) ;
31468: LD_ADDR_VAR 0 14
31472: PUSH
31473: LD_VAR 0 14
31477: PPUSH
31478: LD_VAR 0 14
31482: PUSH
31483: LD_INT 1
31485: PLUS
31486: PPUSH
31487: LD_INT 2
31489: PPUSH
31490: CALL_OW 2
31494: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31495: LD_VAR 0 9
31499: PPUSH
31500: LD_VAR 0 13
31504: PPUSH
31505: CALL_OW 325
31509: PUSH
31510: LD_VAR 0 10
31514: PPUSH
31515: CALL_OW 255
31519: PPUSH
31520: LD_VAR 0 13
31524: PPUSH
31525: CALL_OW 325
31529: NOT
31530: AND
31531: IFFALSE 31560
// missile := Insert ( missile , missile + 1 , 3 ) ;
31533: LD_ADDR_VAR 0 14
31537: PUSH
31538: LD_VAR 0 14
31542: PPUSH
31543: LD_VAR 0 14
31547: PUSH
31548: LD_INT 1
31550: PLUS
31551: PPUSH
31552: LD_INT 3
31554: PPUSH
31555: CALL_OW 2
31559: ST_TO_ADDR
// if missile < 2 then
31560: LD_VAR 0 14
31564: PUSH
31565: LD_INT 2
31567: LESS
31568: IFFALSE 31572
// exit ;
31570: GO 31794
// x := GetX ( enemy ) ;
31572: LD_ADDR_VAR 0 4
31576: PUSH
31577: LD_VAR 0 10
31581: PPUSH
31582: CALL_OW 250
31586: ST_TO_ADDR
// y := GetY ( enemy ) ;
31587: LD_ADDR_VAR 0 5
31591: PUSH
31592: LD_VAR 0 10
31596: PPUSH
31597: CALL_OW 251
31601: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31602: LD_ADDR_VAR 0 6
31606: PUSH
31607: LD_VAR 0 4
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PPUSH
31616: LD_INT 1
31618: PPUSH
31619: CALL_OW 12
31623: PLUS
31624: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31625: LD_ADDR_VAR 0 7
31629: PUSH
31630: LD_VAR 0 5
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PPUSH
31639: LD_INT 1
31641: PPUSH
31642: CALL_OW 12
31646: PLUS
31647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31648: LD_VAR 0 6
31652: PPUSH
31653: LD_VAR 0 7
31657: PPUSH
31658: CALL_OW 488
31662: NOT
31663: IFFALSE 31685
// begin _x := x ;
31665: LD_ADDR_VAR 0 6
31669: PUSH
31670: LD_VAR 0 4
31674: ST_TO_ADDR
// _y := y ;
31675: LD_ADDR_VAR 0 7
31679: PUSH
31680: LD_VAR 0 5
31684: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31685: LD_ADDR_VAR 0 3
31689: PUSH
31690: LD_INT 1
31692: PPUSH
31693: LD_VAR 0 14
31697: PPUSH
31698: CALL_OW 12
31702: ST_TO_ADDR
// case i of 1 :
31703: LD_VAR 0 3
31707: PUSH
31708: LD_INT 1
31710: DOUBLE
31711: EQUAL
31712: IFTRUE 31716
31714: GO 31733
31716: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31717: LD_VAR 0 1
31721: PPUSH
31722: LD_VAR 0 10
31726: PPUSH
31727: CALL_OW 115
31731: GO 31794
31733: LD_INT 2
31735: DOUBLE
31736: EQUAL
31737: IFTRUE 31741
31739: GO 31763
31741: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31742: LD_VAR 0 1
31746: PPUSH
31747: LD_VAR 0 6
31751: PPUSH
31752: LD_VAR 0 7
31756: PPUSH
31757: CALL_OW 153
31761: GO 31794
31763: LD_INT 3
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31793
31771: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31772: LD_VAR 0 1
31776: PPUSH
31777: LD_VAR 0 6
31781: PPUSH
31782: LD_VAR 0 7
31786: PPUSH
31787: CALL_OW 154
31791: GO 31794
31793: POP
// end ;
31794: LD_VAR 0 2
31798: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31799: LD_INT 0
31801: PPUSH
31802: PPUSH
31803: PPUSH
31804: PPUSH
31805: PPUSH
31806: PPUSH
// if not unit or not building then
31807: LD_VAR 0 1
31811: NOT
31812: PUSH
31813: LD_VAR 0 2
31817: NOT
31818: OR
31819: IFFALSE 31823
// exit ;
31821: GO 31981
// x := GetX ( building ) ;
31823: LD_ADDR_VAR 0 5
31827: PUSH
31828: LD_VAR 0 2
31832: PPUSH
31833: CALL_OW 250
31837: ST_TO_ADDR
// y := GetY ( building ) ;
31838: LD_ADDR_VAR 0 6
31842: PUSH
31843: LD_VAR 0 2
31847: PPUSH
31848: CALL_OW 251
31852: ST_TO_ADDR
// for i = 0 to 5 do
31853: LD_ADDR_VAR 0 4
31857: PUSH
31858: DOUBLE
31859: LD_INT 0
31861: DEC
31862: ST_TO_ADDR
31863: LD_INT 5
31865: PUSH
31866: FOR_TO
31867: IFFALSE 31979
// begin _x := ShiftX ( x , i , 3 ) ;
31869: LD_ADDR_VAR 0 7
31873: PUSH
31874: LD_VAR 0 5
31878: PPUSH
31879: LD_VAR 0 4
31883: PPUSH
31884: LD_INT 3
31886: PPUSH
31887: CALL_OW 272
31891: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31892: LD_ADDR_VAR 0 8
31896: PUSH
31897: LD_VAR 0 6
31901: PPUSH
31902: LD_VAR 0 4
31906: PPUSH
31907: LD_INT 3
31909: PPUSH
31910: CALL_OW 273
31914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31915: LD_VAR 0 7
31919: PPUSH
31920: LD_VAR 0 8
31924: PPUSH
31925: CALL_OW 488
31929: NOT
31930: IFFALSE 31934
// continue ;
31932: GO 31866
// if HexInfo ( _x , _y ) = 0 then
31934: LD_VAR 0 7
31938: PPUSH
31939: LD_VAR 0 8
31943: PPUSH
31944: CALL_OW 428
31948: PUSH
31949: LD_INT 0
31951: EQUAL
31952: IFFALSE 31977
// begin ComMoveXY ( unit , _x , _y ) ;
31954: LD_VAR 0 1
31958: PPUSH
31959: LD_VAR 0 7
31963: PPUSH
31964: LD_VAR 0 8
31968: PPUSH
31969: CALL_OW 111
// exit ;
31973: POP
31974: POP
31975: GO 31981
// end ; end ;
31977: GO 31866
31979: POP
31980: POP
// end ;
31981: LD_VAR 0 3
31985: RET
// export function ScanBase ( side , base_area ) ; begin
31986: LD_INT 0
31988: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_VAR 0 2
31998: PPUSH
31999: LD_INT 81
32001: PUSH
32002: LD_VAR 0 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL_OW 70
32015: ST_TO_ADDR
// end ;
32016: LD_VAR 0 3
32020: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
// result := false ;
32027: LD_ADDR_VAR 0 2
32031: PUSH
32032: LD_INT 0
32034: ST_TO_ADDR
// side := GetSide ( unit ) ;
32035: LD_ADDR_VAR 0 3
32039: PUSH
32040: LD_VAR 0 1
32044: PPUSH
32045: CALL_OW 255
32049: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32050: LD_ADDR_VAR 0 4
32054: PUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 248
32064: ST_TO_ADDR
// case nat of 1 :
32065: LD_VAR 0 4
32069: PUSH
32070: LD_INT 1
32072: DOUBLE
32073: EQUAL
32074: IFTRUE 32078
32076: GO 32089
32078: POP
// tech := tech_lassight ; 2 :
32079: LD_ADDR_VAR 0 5
32083: PUSH
32084: LD_INT 12
32086: ST_TO_ADDR
32087: GO 32128
32089: LD_INT 2
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32108
32097: POP
// tech := tech_mortar ; 3 :
32098: LD_ADDR_VAR 0 5
32102: PUSH
32103: LD_INT 41
32105: ST_TO_ADDR
32106: GO 32128
32108: LD_INT 3
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32127
32116: POP
// tech := tech_bazooka ; end ;
32117: LD_ADDR_VAR 0 5
32121: PUSH
32122: LD_INT 44
32124: ST_TO_ADDR
32125: GO 32128
32127: POP
// if Researched ( side , tech ) then
32128: LD_VAR 0 3
32132: PPUSH
32133: LD_VAR 0 5
32137: PPUSH
32138: CALL_OW 325
32142: IFFALSE 32169
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32144: LD_ADDR_VAR 0 2
32148: PUSH
32149: LD_INT 5
32151: PUSH
32152: LD_INT 8
32154: PUSH
32155: LD_INT 9
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: PUSH
32163: LD_VAR 0 4
32167: ARRAY
32168: ST_TO_ADDR
// end ;
32169: LD_VAR 0 2
32173: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
32178: PPUSH
// if not mines then
32179: LD_VAR 0 2
32183: NOT
32184: IFFALSE 32188
// exit ;
32186: GO 32332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32188: LD_ADDR_VAR 0 5
32192: PUSH
32193: LD_INT 81
32195: PUSH
32196: LD_VAR 0 1
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: LD_INT 21
32210: PUSH
32211: LD_INT 3
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PPUSH
32226: CALL_OW 69
32230: ST_TO_ADDR
// for i in mines do
32231: LD_ADDR_VAR 0 4
32235: PUSH
32236: LD_VAR 0 2
32240: PUSH
32241: FOR_IN
32242: IFFALSE 32330
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32244: LD_VAR 0 4
32248: PUSH
32249: LD_INT 1
32251: ARRAY
32252: PPUSH
32253: LD_VAR 0 4
32257: PUSH
32258: LD_INT 2
32260: ARRAY
32261: PPUSH
32262: CALL_OW 458
32266: NOT
32267: IFFALSE 32271
// continue ;
32269: GO 32241
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32271: LD_VAR 0 4
32275: PUSH
32276: LD_INT 1
32278: ARRAY
32279: PPUSH
32280: LD_VAR 0 4
32284: PUSH
32285: LD_INT 2
32287: ARRAY
32288: PPUSH
32289: CALL_OW 428
32293: PUSH
32294: LD_VAR 0 5
32298: IN
32299: IFFALSE 32328
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32301: LD_VAR 0 4
32305: PUSH
32306: LD_INT 1
32308: ARRAY
32309: PPUSH
32310: LD_VAR 0 4
32314: PUSH
32315: LD_INT 2
32317: ARRAY
32318: PPUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 456
// end ;
32328: GO 32241
32330: POP
32331: POP
// end ;
32332: LD_VAR 0 3
32336: RET
// export function Count ( array ) ; var i ; begin
32337: LD_INT 0
32339: PPUSH
32340: PPUSH
// result := 0 ;
32341: LD_ADDR_VAR 0 2
32345: PUSH
32346: LD_INT 0
32348: ST_TO_ADDR
// for i in array do
32349: LD_ADDR_VAR 0 3
32353: PUSH
32354: LD_VAR 0 1
32358: PUSH
32359: FOR_IN
32360: IFFALSE 32384
// if i then
32362: LD_VAR 0 3
32366: IFFALSE 32382
// result := result + 1 ;
32368: LD_ADDR_VAR 0 2
32372: PUSH
32373: LD_VAR 0 2
32377: PUSH
32378: LD_INT 1
32380: PLUS
32381: ST_TO_ADDR
32382: GO 32359
32384: POP
32385: POP
// end ;
32386: LD_VAR 0 2
32390: RET
// export function IsEmpty ( building ) ; begin
32391: LD_INT 0
32393: PPUSH
// if not building then
32394: LD_VAR 0 1
32398: NOT
32399: IFFALSE 32403
// exit ;
32401: GO 32446
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32403: LD_ADDR_VAR 0 2
32407: PUSH
32408: LD_VAR 0 1
32412: PUSH
32413: LD_INT 22
32415: PUSH
32416: LD_VAR 0 1
32420: PPUSH
32421: CALL_OW 255
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 58
32432: PUSH
32433: EMPTY
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PPUSH
32440: CALL_OW 69
32444: IN
32445: ST_TO_ADDR
// end ;
32446: LD_VAR 0 2
32450: RET
// export function IsNotFull ( building ) ; begin
32451: LD_INT 0
32453: PPUSH
// if not building then
32454: LD_VAR 0 1
32458: NOT
32459: IFFALSE 32463
// exit ;
32461: GO 32482
// result := UnitsInside ( building ) < 6 ;
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 313
32477: PUSH
32478: LD_INT 6
32480: LESS
32481: ST_TO_ADDR
// end ;
32482: LD_VAR 0 2
32486: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32487: LD_INT 0
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
// tmp := [ ] ;
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: EMPTY
32499: ST_TO_ADDR
// list := [ ] ;
32500: LD_ADDR_VAR 0 5
32504: PUSH
32505: EMPTY
32506: ST_TO_ADDR
// for i = 16 to 25 do
32507: LD_ADDR_VAR 0 4
32511: PUSH
32512: DOUBLE
32513: LD_INT 16
32515: DEC
32516: ST_TO_ADDR
32517: LD_INT 25
32519: PUSH
32520: FOR_TO
32521: IFFALSE 32594
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_VAR 0 3
32532: PUSH
32533: LD_INT 22
32535: PUSH
32536: LD_VAR 0 1
32540: PPUSH
32541: CALL_OW 255
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 91
32552: PUSH
32553: LD_VAR 0 1
32557: PUSH
32558: LD_INT 6
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 30
32568: PUSH
32569: LD_VAR 0 4
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: PUSH
32583: EMPTY
32584: LIST
32585: PPUSH
32586: CALL_OW 69
32590: ADD
32591: ST_TO_ADDR
32592: GO 32520
32594: POP
32595: POP
// for i = 1 to tmp do
32596: LD_ADDR_VAR 0 4
32600: PUSH
32601: DOUBLE
32602: LD_INT 1
32604: DEC
32605: ST_TO_ADDR
32606: LD_VAR 0 3
32610: PUSH
32611: FOR_TO
32612: IFFALSE 32700
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32614: LD_ADDR_VAR 0 5
32618: PUSH
32619: LD_VAR 0 5
32623: PUSH
32624: LD_VAR 0 3
32628: PUSH
32629: LD_VAR 0 4
32633: ARRAY
32634: PPUSH
32635: CALL_OW 266
32639: PUSH
32640: LD_VAR 0 3
32644: PUSH
32645: LD_VAR 0 4
32649: ARRAY
32650: PPUSH
32651: CALL_OW 250
32655: PUSH
32656: LD_VAR 0 3
32660: PUSH
32661: LD_VAR 0 4
32665: ARRAY
32666: PPUSH
32667: CALL_OW 251
32671: PUSH
32672: LD_VAR 0 3
32676: PUSH
32677: LD_VAR 0 4
32681: ARRAY
32682: PPUSH
32683: CALL_OW 254
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: PUSH
32694: EMPTY
32695: LIST
32696: ADD
32697: ST_TO_ADDR
32698: GO 32611
32700: POP
32701: POP
// result := list ;
32702: LD_ADDR_VAR 0 2
32706: PUSH
32707: LD_VAR 0 5
32711: ST_TO_ADDR
// end ;
32712: LD_VAR 0 2
32716: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32717: LD_INT 0
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
32725: PPUSH
// if not factory then
32726: LD_VAR 0 1
32730: NOT
32731: IFFALSE 32735
// exit ;
32733: GO 33328
// if control = control_apeman then
32735: LD_VAR 0 4
32739: PUSH
32740: LD_INT 5
32742: EQUAL
32743: IFFALSE 32852
// begin tmp := UnitsInside ( factory ) ;
32745: LD_ADDR_VAR 0 8
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 313
32759: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32760: LD_VAR 0 8
32764: PPUSH
32765: LD_INT 25
32767: PUSH
32768: LD_INT 12
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PPUSH
32775: CALL_OW 72
32779: NOT
32780: IFFALSE 32790
// control := control_manual ;
32782: LD_ADDR_VAR 0 4
32786: PUSH
32787: LD_INT 1
32789: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32790: LD_ADDR_VAR 0 8
32794: PUSH
32795: LD_VAR 0 1
32799: PPUSH
32800: CALL 32487 0 1
32804: ST_TO_ADDR
// if tmp then
32805: LD_VAR 0 8
32809: IFFALSE 32852
// begin for i in tmp do
32811: LD_ADDR_VAR 0 7
32815: PUSH
32816: LD_VAR 0 8
32820: PUSH
32821: FOR_IN
32822: IFFALSE 32850
// if i [ 1 ] = b_ext_radio then
32824: LD_VAR 0 7
32828: PUSH
32829: LD_INT 1
32831: ARRAY
32832: PUSH
32833: LD_INT 22
32835: EQUAL
32836: IFFALSE 32848
// begin control := control_remote ;
32838: LD_ADDR_VAR 0 4
32842: PUSH
32843: LD_INT 2
32845: ST_TO_ADDR
// break ;
32846: GO 32850
// end ;
32848: GO 32821
32850: POP
32851: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: CALL_OW 448
32881: IFFALSE 32916
// begin result := [ chassis , engine , control , weapon ] ;
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: LD_VAR 0 2
32892: PUSH
32893: LD_VAR 0 3
32897: PUSH
32898: LD_VAR 0 4
32902: PUSH
32903: LD_VAR 0 5
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// exit ;
32914: GO 33328
// end ; _chassis := AvailableChassisList ( factory ) ;
32916: LD_ADDR_VAR 0 9
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 475
32930: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32931: LD_ADDR_VAR 0 11
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 476
32945: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32946: LD_ADDR_VAR 0 12
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 477
32960: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32961: LD_ADDR_VAR 0 10
32965: PUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL_OW 478
32975: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32976: LD_VAR 0 9
32980: NOT
32981: PUSH
32982: LD_VAR 0 11
32986: NOT
32987: OR
32988: PUSH
32989: LD_VAR 0 12
32993: NOT
32994: OR
32995: PUSH
32996: LD_VAR 0 10
33000: NOT
33001: OR
33002: IFFALSE 33037
// begin result := [ chassis , engine , control , weapon ] ;
33004: LD_ADDR_VAR 0 6
33008: PUSH
33009: LD_VAR 0 2
33013: PUSH
33014: LD_VAR 0 3
33018: PUSH
33019: LD_VAR 0 4
33023: PUSH
33024: LD_VAR 0 5
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: ST_TO_ADDR
// exit ;
33035: GO 33328
// end ; if not chassis in _chassis then
33037: LD_VAR 0 2
33041: PUSH
33042: LD_VAR 0 9
33046: IN
33047: NOT
33048: IFFALSE 33074
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33050: LD_ADDR_VAR 0 2
33054: PUSH
33055: LD_VAR 0 9
33059: PUSH
33060: LD_INT 1
33062: PPUSH
33063: LD_VAR 0 9
33067: PPUSH
33068: CALL_OW 12
33072: ARRAY
33073: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33074: LD_VAR 0 2
33078: PPUSH
33079: LD_VAR 0 3
33083: PPUSH
33084: CALL 33333 0 2
33088: NOT
33089: IFFALSE 33148
// repeat engine := _engine [ 1 ] ;
33091: LD_ADDR_VAR 0 3
33095: PUSH
33096: LD_VAR 0 11
33100: PUSH
33101: LD_INT 1
33103: ARRAY
33104: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33105: LD_ADDR_VAR 0 11
33109: PUSH
33110: LD_VAR 0 11
33114: PPUSH
33115: LD_INT 1
33117: PPUSH
33118: CALL_OW 3
33122: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33123: LD_VAR 0 2
33127: PPUSH
33128: LD_VAR 0 3
33132: PPUSH
33133: CALL 33333 0 2
33137: PUSH
33138: LD_VAR 0 11
33142: PUSH
33143: EMPTY
33144: EQUAL
33145: OR
33146: IFFALSE 33091
// if not control in _control then
33148: LD_VAR 0 4
33152: PUSH
33153: LD_VAR 0 12
33157: IN
33158: NOT
33159: IFFALSE 33185
// control := _control [ rand ( 1 , _control ) ] ;
33161: LD_ADDR_VAR 0 4
33165: PUSH
33166: LD_VAR 0 12
33170: PUSH
33171: LD_INT 1
33173: PPUSH
33174: LD_VAR 0 12
33178: PPUSH
33179: CALL_OW 12
33183: ARRAY
33184: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33185: LD_VAR 0 2
33189: PPUSH
33190: LD_VAR 0 5
33194: PPUSH
33195: CALL 33553 0 2
33199: NOT
33200: IFFALSE 33259
// repeat weapon := _weapon [ 1 ] ;
33202: LD_ADDR_VAR 0 5
33206: PUSH
33207: LD_VAR 0 10
33211: PUSH
33212: LD_INT 1
33214: ARRAY
33215: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33216: LD_ADDR_VAR 0 10
33220: PUSH
33221: LD_VAR 0 10
33225: PPUSH
33226: LD_INT 1
33228: PPUSH
33229: CALL_OW 3
33233: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33234: LD_VAR 0 2
33238: PPUSH
33239: LD_VAR 0 5
33243: PPUSH
33244: CALL 33553 0 2
33248: PUSH
33249: LD_VAR 0 10
33253: PUSH
33254: EMPTY
33255: EQUAL
33256: OR
33257: IFFALSE 33202
// result := [ ] ;
33259: LD_ADDR_VAR 0 6
33263: PUSH
33264: EMPTY
33265: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33266: LD_VAR 0 1
33270: PPUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: LD_VAR 0 3
33280: PPUSH
33281: LD_VAR 0 4
33285: PPUSH
33286: LD_VAR 0 5
33290: PPUSH
33291: CALL_OW 448
33295: IFFALSE 33328
// result := [ chassis , engine , control , weapon ] ;
33297: LD_ADDR_VAR 0 6
33301: PUSH
33302: LD_VAR 0 2
33306: PUSH
33307: LD_VAR 0 3
33311: PUSH
33312: LD_VAR 0 4
33316: PUSH
33317: LD_VAR 0 5
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: ST_TO_ADDR
// end ;
33328: LD_VAR 0 6
33332: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33333: LD_INT 0
33335: PPUSH
// if not chassis or not engine then
33336: LD_VAR 0 1
33340: NOT
33341: PUSH
33342: LD_VAR 0 2
33346: NOT
33347: OR
33348: IFFALSE 33352
// exit ;
33350: GO 33548
// case engine of engine_solar :
33352: LD_VAR 0 2
33356: PUSH
33357: LD_INT 2
33359: DOUBLE
33360: EQUAL
33361: IFTRUE 33365
33363: GO 33403
33365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_INT 11
33373: PUSH
33374: LD_INT 12
33376: PUSH
33377: LD_INT 13
33379: PUSH
33380: LD_INT 14
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
33401: GO 33532
33403: LD_INT 1
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33473
33411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 11
33419: PUSH
33420: LD_INT 12
33422: PUSH
33423: LD_INT 13
33425: PUSH
33426: LD_INT 14
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: LD_INT 3
33437: PUSH
33438: LD_INT 4
33440: PUSH
33441: LD_INT 5
33443: PUSH
33444: LD_INT 21
33446: PUSH
33447: LD_INT 23
33449: PUSH
33450: LD_INT 22
33452: PUSH
33453: LD_INT 24
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: ST_TO_ADDR
33471: GO 33532
33473: LD_INT 3
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33481
33479: GO 33531
33481: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33482: LD_ADDR_VAR 0 3
33486: PUSH
33487: LD_INT 13
33489: PUSH
33490: LD_INT 14
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: LD_INT 4
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: LD_INT 21
33507: PUSH
33508: LD_INT 22
33510: PUSH
33511: LD_INT 23
33513: PUSH
33514: LD_INT 24
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 33532
33531: POP
// result := ( chassis in result ) ;
33532: LD_ADDR_VAR 0 3
33536: PUSH
33537: LD_VAR 0 1
33541: PUSH
33542: LD_VAR 0 3
33546: IN
33547: ST_TO_ADDR
// end ;
33548: LD_VAR 0 3
33552: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33553: LD_INT 0
33555: PPUSH
// if not chassis or not weapon then
33556: LD_VAR 0 1
33560: NOT
33561: PUSH
33562: LD_VAR 0 2
33566: NOT
33567: OR
33568: IFFALSE 33572
// exit ;
33570: GO 34634
// case weapon of us_machine_gun :
33572: LD_VAR 0 2
33576: PUSH
33577: LD_INT 2
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33615
33585: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: LD_INT 3
33599: PUSH
33600: LD_INT 4
33602: PUSH
33603: LD_INT 5
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
33613: GO 34618
33615: LD_INT 3
33617: DOUBLE
33618: EQUAL
33619: IFTRUE 33623
33621: GO 33653
33623: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33624: LD_ADDR_VAR 0 3
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 3
33637: PUSH
33638: LD_INT 4
33640: PUSH
33641: LD_INT 5
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: ST_TO_ADDR
33651: GO 34618
33653: LD_INT 11
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 33691
33661: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33662: LD_ADDR_VAR 0 3
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: LD_INT 3
33675: PUSH
33676: LD_INT 4
33678: PUSH
33679: LD_INT 5
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
33689: GO 34618
33691: LD_INT 4
33693: DOUBLE
33694: EQUAL
33695: IFTRUE 33699
33697: GO 33725
33699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33700: LD_ADDR_VAR 0 3
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: LD_INT 3
33710: PUSH
33711: LD_INT 4
33713: PUSH
33714: LD_INT 5
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
33723: GO 34618
33725: LD_INT 5
33727: DOUBLE
33728: EQUAL
33729: IFTRUE 33733
33731: GO 33759
33733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33734: LD_ADDR_VAR 0 3
33738: PUSH
33739: LD_INT 2
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: LD_INT 4
33747: PUSH
33748: LD_INT 5
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: ST_TO_ADDR
33757: GO 34618
33759: LD_INT 9
33761: DOUBLE
33762: EQUAL
33763: IFTRUE 33767
33765: GO 33793
33767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33768: LD_ADDR_VAR 0 3
33772: PUSH
33773: LD_INT 2
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: LD_INT 5
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: ST_TO_ADDR
33791: GO 34618
33793: LD_INT 7
33795: DOUBLE
33796: EQUAL
33797: IFTRUE 33801
33799: GO 33827
33801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33802: LD_ADDR_VAR 0 3
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: LD_INT 4
33815: PUSH
33816: LD_INT 5
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
33825: GO 34618
33827: LD_INT 12
33829: DOUBLE
33830: EQUAL
33831: IFTRUE 33835
33833: GO 33861
33835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33836: LD_ADDR_VAR 0 3
33840: PUSH
33841: LD_INT 2
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: LD_INT 4
33849: PUSH
33850: LD_INT 5
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
33859: GO 34618
33861: LD_INT 13
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33869
33867: GO 33895
33869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 3
33880: PUSH
33881: LD_INT 4
33883: PUSH
33884: LD_INT 5
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
33893: GO 34618
33895: LD_INT 14
33897: DOUBLE
33898: EQUAL
33899: IFTRUE 33903
33901: GO 33921
33903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33904: LD_ADDR_VAR 0 3
33908: PUSH
33909: LD_INT 4
33911: PUSH
33912: LD_INT 5
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: ST_TO_ADDR
33919: GO 34618
33921: LD_INT 6
33923: DOUBLE
33924: EQUAL
33925: IFTRUE 33929
33927: GO 33947
33929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33930: LD_ADDR_VAR 0 3
33934: PUSH
33935: LD_INT 4
33937: PUSH
33938: LD_INT 5
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: ST_TO_ADDR
33945: GO 34618
33947: LD_INT 10
33949: DOUBLE
33950: EQUAL
33951: IFTRUE 33955
33953: GO 33973
33955: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33956: LD_ADDR_VAR 0 3
33960: PUSH
33961: LD_INT 4
33963: PUSH
33964: LD_INT 5
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: ST_TO_ADDR
33971: GO 34618
33973: LD_INT 22
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33981
33979: GO 34007
33981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33982: LD_ADDR_VAR 0 3
33986: PUSH
33987: LD_INT 11
33989: PUSH
33990: LD_INT 12
33992: PUSH
33993: LD_INT 13
33995: PUSH
33996: LD_INT 14
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
34005: GO 34618
34007: LD_INT 23
34009: DOUBLE
34010: EQUAL
34011: IFTRUE 34015
34013: GO 34041
34015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_INT 11
34023: PUSH
34024: LD_INT 12
34026: PUSH
34027: LD_INT 13
34029: PUSH
34030: LD_INT 14
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: ST_TO_ADDR
34039: GO 34618
34041: LD_INT 24
34043: DOUBLE
34044: EQUAL
34045: IFTRUE 34049
34047: GO 34075
34049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34050: LD_ADDR_VAR 0 3
34054: PUSH
34055: LD_INT 11
34057: PUSH
34058: LD_INT 12
34060: PUSH
34061: LD_INT 13
34063: PUSH
34064: LD_INT 14
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: ST_TO_ADDR
34073: GO 34618
34075: LD_INT 30
34077: DOUBLE
34078: EQUAL
34079: IFTRUE 34083
34081: GO 34109
34083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34084: LD_ADDR_VAR 0 3
34088: PUSH
34089: LD_INT 11
34091: PUSH
34092: LD_INT 12
34094: PUSH
34095: LD_INT 13
34097: PUSH
34098: LD_INT 14
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: ST_TO_ADDR
34107: GO 34618
34109: LD_INT 25
34111: DOUBLE
34112: EQUAL
34113: IFTRUE 34117
34115: GO 34135
34117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34118: LD_ADDR_VAR 0 3
34122: PUSH
34123: LD_INT 13
34125: PUSH
34126: LD_INT 14
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: ST_TO_ADDR
34133: GO 34618
34135: LD_INT 27
34137: DOUBLE
34138: EQUAL
34139: IFTRUE 34143
34141: GO 34161
34143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_INT 13
34151: PUSH
34152: LD_INT 14
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: ST_TO_ADDR
34159: GO 34618
34161: LD_EXP 31
34165: DOUBLE
34166: EQUAL
34167: IFTRUE 34171
34169: GO 34197
34171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34172: LD_ADDR_VAR 0 3
34176: PUSH
34177: LD_INT 11
34179: PUSH
34180: LD_INT 12
34182: PUSH
34183: LD_INT 13
34185: PUSH
34186: LD_INT 14
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: ST_TO_ADDR
34195: GO 34618
34197: LD_INT 28
34199: DOUBLE
34200: EQUAL
34201: IFTRUE 34205
34203: GO 34223
34205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34206: LD_ADDR_VAR 0 3
34210: PUSH
34211: LD_INT 13
34213: PUSH
34214: LD_INT 14
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: ST_TO_ADDR
34221: GO 34618
34223: LD_INT 29
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34231
34229: GO 34249
34231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34232: LD_ADDR_VAR 0 3
34236: PUSH
34237: LD_INT 13
34239: PUSH
34240: LD_INT 14
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: ST_TO_ADDR
34247: GO 34618
34249: LD_INT 31
34251: DOUBLE
34252: EQUAL
34253: IFTRUE 34257
34255: GO 34275
34257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34258: LD_ADDR_VAR 0 3
34262: PUSH
34263: LD_INT 13
34265: PUSH
34266: LD_INT 14
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: ST_TO_ADDR
34273: GO 34618
34275: LD_INT 26
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34283
34281: GO 34301
34283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34284: LD_ADDR_VAR 0 3
34288: PUSH
34289: LD_INT 13
34291: PUSH
34292: LD_INT 14
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: ST_TO_ADDR
34299: GO 34618
34301: LD_INT 42
34303: DOUBLE
34304: EQUAL
34305: IFTRUE 34309
34307: GO 34335
34309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34310: LD_ADDR_VAR 0 3
34314: PUSH
34315: LD_INT 21
34317: PUSH
34318: LD_INT 22
34320: PUSH
34321: LD_INT 23
34323: PUSH
34324: LD_INT 24
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: ST_TO_ADDR
34333: GO 34618
34335: LD_INT 43
34337: DOUBLE
34338: EQUAL
34339: IFTRUE 34343
34341: GO 34369
34343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_INT 21
34351: PUSH
34352: LD_INT 22
34354: PUSH
34355: LD_INT 23
34357: PUSH
34358: LD_INT 24
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: ST_TO_ADDR
34367: GO 34618
34369: LD_INT 44
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34377
34375: GO 34403
34377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34378: LD_ADDR_VAR 0 3
34382: PUSH
34383: LD_INT 21
34385: PUSH
34386: LD_INT 22
34388: PUSH
34389: LD_INT 23
34391: PUSH
34392: LD_INT 24
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: ST_TO_ADDR
34401: GO 34618
34403: LD_INT 45
34405: DOUBLE
34406: EQUAL
34407: IFTRUE 34411
34409: GO 34437
34411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34412: LD_ADDR_VAR 0 3
34416: PUSH
34417: LD_INT 21
34419: PUSH
34420: LD_INT 22
34422: PUSH
34423: LD_INT 23
34425: PUSH
34426: LD_INT 24
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
34435: GO 34618
34437: LD_INT 49
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34445
34443: GO 34471
34445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34446: LD_ADDR_VAR 0 3
34450: PUSH
34451: LD_INT 21
34453: PUSH
34454: LD_INT 22
34456: PUSH
34457: LD_INT 23
34459: PUSH
34460: LD_INT 24
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
34469: GO 34618
34471: LD_INT 51
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34505
34479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_INT 21
34487: PUSH
34488: LD_INT 22
34490: PUSH
34491: LD_INT 23
34493: PUSH
34494: LD_INT 24
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
34503: GO 34618
34505: LD_INT 52
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34539
34513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 21
34521: PUSH
34522: LD_INT 22
34524: PUSH
34525: LD_INT 23
34527: PUSH
34528: LD_INT 24
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
34537: GO 34618
34539: LD_INT 53
34541: DOUBLE
34542: EQUAL
34543: IFTRUE 34547
34545: GO 34565
34547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34548: LD_ADDR_VAR 0 3
34552: PUSH
34553: LD_INT 23
34555: PUSH
34556: LD_INT 24
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: ST_TO_ADDR
34563: GO 34618
34565: LD_INT 46
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34573
34571: GO 34591
34573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_INT 23
34581: PUSH
34582: LD_INT 24
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: ST_TO_ADDR
34589: GO 34618
34591: LD_INT 47
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34599
34597: GO 34617
34599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_INT 23
34607: PUSH
34608: LD_INT 24
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: ST_TO_ADDR
34615: GO 34618
34617: POP
// result := ( chassis in result ) ;
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: LD_VAR 0 1
34627: PUSH
34628: LD_VAR 0 3
34632: IN
34633: ST_TO_ADDR
// end ;
34634: LD_VAR 0 3
34638: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34639: LD_INT 0
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
// result := array ;
34648: LD_ADDR_VAR 0 5
34652: PUSH
34653: LD_VAR 0 1
34657: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34658: LD_VAR 0 1
34662: NOT
34663: PUSH
34664: LD_VAR 0 2
34668: NOT
34669: OR
34670: PUSH
34671: LD_VAR 0 3
34675: NOT
34676: OR
34677: PUSH
34678: LD_VAR 0 2
34682: PUSH
34683: LD_VAR 0 1
34687: GREATER
34688: OR
34689: PUSH
34690: LD_VAR 0 3
34694: PUSH
34695: LD_VAR 0 1
34699: GREATER
34700: OR
34701: IFFALSE 34705
// exit ;
34703: GO 35001
// if direction then
34705: LD_VAR 0 4
34709: IFFALSE 34773
// begin d := 1 ;
34711: LD_ADDR_VAR 0 9
34715: PUSH
34716: LD_INT 1
34718: ST_TO_ADDR
// if i_from > i_to then
34719: LD_VAR 0 2
34723: PUSH
34724: LD_VAR 0 3
34728: GREATER
34729: IFFALSE 34755
// length := ( array - i_from ) + i_to else
34731: LD_ADDR_VAR 0 11
34735: PUSH
34736: LD_VAR 0 1
34740: PUSH
34741: LD_VAR 0 2
34745: MINUS
34746: PUSH
34747: LD_VAR 0 3
34751: PLUS
34752: ST_TO_ADDR
34753: GO 34771
// length := i_to - i_from ;
34755: LD_ADDR_VAR 0 11
34759: PUSH
34760: LD_VAR 0 3
34764: PUSH
34765: LD_VAR 0 2
34769: MINUS
34770: ST_TO_ADDR
// end else
34771: GO 34834
// begin d := - 1 ;
34773: LD_ADDR_VAR 0 9
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: ST_TO_ADDR
// if i_from > i_to then
34782: LD_VAR 0 2
34786: PUSH
34787: LD_VAR 0 3
34791: GREATER
34792: IFFALSE 34812
// length := i_from - i_to else
34794: LD_ADDR_VAR 0 11
34798: PUSH
34799: LD_VAR 0 2
34803: PUSH
34804: LD_VAR 0 3
34808: MINUS
34809: ST_TO_ADDR
34810: GO 34834
// length := ( array - i_to ) + i_from ;
34812: LD_ADDR_VAR 0 11
34816: PUSH
34817: LD_VAR 0 1
34821: PUSH
34822: LD_VAR 0 3
34826: MINUS
34827: PUSH
34828: LD_VAR 0 2
34832: PLUS
34833: ST_TO_ADDR
// end ; if not length then
34834: LD_VAR 0 11
34838: NOT
34839: IFFALSE 34843
// exit ;
34841: GO 35001
// tmp := array ;
34843: LD_ADDR_VAR 0 10
34847: PUSH
34848: LD_VAR 0 1
34852: ST_TO_ADDR
// for i = 1 to length do
34853: LD_ADDR_VAR 0 6
34857: PUSH
34858: DOUBLE
34859: LD_INT 1
34861: DEC
34862: ST_TO_ADDR
34863: LD_VAR 0 11
34867: PUSH
34868: FOR_TO
34869: IFFALSE 34989
// begin for j = 1 to array do
34871: LD_ADDR_VAR 0 7
34875: PUSH
34876: DOUBLE
34877: LD_INT 1
34879: DEC
34880: ST_TO_ADDR
34881: LD_VAR 0 1
34885: PUSH
34886: FOR_TO
34887: IFFALSE 34975
// begin k := j + d ;
34889: LD_ADDR_VAR 0 8
34893: PUSH
34894: LD_VAR 0 7
34898: PUSH
34899: LD_VAR 0 9
34903: PLUS
34904: ST_TO_ADDR
// if k > array then
34905: LD_VAR 0 8
34909: PUSH
34910: LD_VAR 0 1
34914: GREATER
34915: IFFALSE 34925
// k := 1 ;
34917: LD_ADDR_VAR 0 8
34921: PUSH
34922: LD_INT 1
34924: ST_TO_ADDR
// if not k then
34925: LD_VAR 0 8
34929: NOT
34930: IFFALSE 34942
// k := array ;
34932: LD_ADDR_VAR 0 8
34936: PUSH
34937: LD_VAR 0 1
34941: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34942: LD_ADDR_VAR 0 10
34946: PUSH
34947: LD_VAR 0 10
34951: PPUSH
34952: LD_VAR 0 8
34956: PPUSH
34957: LD_VAR 0 1
34961: PUSH
34962: LD_VAR 0 7
34966: ARRAY
34967: PPUSH
34968: CALL_OW 1
34972: ST_TO_ADDR
// end ;
34973: GO 34886
34975: POP
34976: POP
// array := tmp ;
34977: LD_ADDR_VAR 0 1
34981: PUSH
34982: LD_VAR 0 10
34986: ST_TO_ADDR
// end ;
34987: GO 34868
34989: POP
34990: POP
// result := array ;
34991: LD_ADDR_VAR 0 5
34995: PUSH
34996: LD_VAR 0 1
35000: ST_TO_ADDR
// end ;
35001: LD_VAR 0 5
35005: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35006: LD_INT 0
35008: PPUSH
35009: PPUSH
// result := 0 ;
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 0
35017: ST_TO_ADDR
// if not array or not value in array then
35018: LD_VAR 0 1
35022: NOT
35023: PUSH
35024: LD_VAR 0 2
35028: PUSH
35029: LD_VAR 0 1
35033: IN
35034: NOT
35035: OR
35036: IFFALSE 35040
// exit ;
35038: GO 35094
// for i = 1 to array do
35040: LD_ADDR_VAR 0 4
35044: PUSH
35045: DOUBLE
35046: LD_INT 1
35048: DEC
35049: ST_TO_ADDR
35050: LD_VAR 0 1
35054: PUSH
35055: FOR_TO
35056: IFFALSE 35092
// if value = array [ i ] then
35058: LD_VAR 0 2
35062: PUSH
35063: LD_VAR 0 1
35067: PUSH
35068: LD_VAR 0 4
35072: ARRAY
35073: EQUAL
35074: IFFALSE 35090
// begin result := i ;
35076: LD_ADDR_VAR 0 3
35080: PUSH
35081: LD_VAR 0 4
35085: ST_TO_ADDR
// exit ;
35086: POP
35087: POP
35088: GO 35094
// end ;
35090: GO 35055
35092: POP
35093: POP
// end ;
35094: LD_VAR 0 3
35098: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35099: LD_INT 0
35101: PPUSH
// vc_chassis := chassis ;
35102: LD_ADDR_OWVAR 37
35106: PUSH
35107: LD_VAR 0 1
35111: ST_TO_ADDR
// vc_engine := engine ;
35112: LD_ADDR_OWVAR 39
35116: PUSH
35117: LD_VAR 0 2
35121: ST_TO_ADDR
// vc_control := control ;
35122: LD_ADDR_OWVAR 38
35126: PUSH
35127: LD_VAR 0 3
35131: ST_TO_ADDR
// vc_weapon := weapon ;
35132: LD_ADDR_OWVAR 40
35136: PUSH
35137: LD_VAR 0 4
35141: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35142: LD_ADDR_OWVAR 41
35146: PUSH
35147: LD_VAR 0 5
35151: ST_TO_ADDR
// end ;
35152: LD_VAR 0 6
35156: RET
// export function WantPlant ( unit ) ; var task ; begin
35157: LD_INT 0
35159: PPUSH
35160: PPUSH
// result := false ;
35161: LD_ADDR_VAR 0 2
35165: PUSH
35166: LD_INT 0
35168: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_VAR 0 1
35178: PPUSH
35179: CALL_OW 437
35183: ST_TO_ADDR
// if task then
35184: LD_VAR 0 3
35188: IFFALSE 35216
// if task [ 1 ] [ 1 ] = p then
35190: LD_VAR 0 3
35194: PUSH
35195: LD_INT 1
35197: ARRAY
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PUSH
35203: LD_STRING p
35205: EQUAL
35206: IFFALSE 35216
// result := true ;
35208: LD_ADDR_VAR 0 2
35212: PUSH
35213: LD_INT 1
35215: ST_TO_ADDR
// end ;
35216: LD_VAR 0 2
35220: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35221: LD_INT 0
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
// if pos < 1 then
35227: LD_VAR 0 2
35231: PUSH
35232: LD_INT 1
35234: LESS
35235: IFFALSE 35239
// exit ;
35237: GO 35542
// if pos = 1 then
35239: LD_VAR 0 2
35243: PUSH
35244: LD_INT 1
35246: EQUAL
35247: IFFALSE 35280
// result := Replace ( arr , pos [ 1 ] , value ) else
35249: LD_ADDR_VAR 0 4
35253: PUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: LD_VAR 0 2
35263: PUSH
35264: LD_INT 1
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 3
35272: PPUSH
35273: CALL_OW 1
35277: ST_TO_ADDR
35278: GO 35542
// begin tmp := arr ;
35280: LD_ADDR_VAR 0 6
35284: PUSH
35285: LD_VAR 0 1
35289: ST_TO_ADDR
// s_arr := [ tmp ] ;
35290: LD_ADDR_VAR 0 7
35294: PUSH
35295: LD_VAR 0 6
35299: PUSH
35300: EMPTY
35301: LIST
35302: ST_TO_ADDR
// for i = 1 to pos - 1 do
35303: LD_ADDR_VAR 0 5
35307: PUSH
35308: DOUBLE
35309: LD_INT 1
35311: DEC
35312: ST_TO_ADDR
35313: LD_VAR 0 2
35317: PUSH
35318: LD_INT 1
35320: MINUS
35321: PUSH
35322: FOR_TO
35323: IFFALSE 35368
// begin tmp := tmp [ pos [ i ] ] ;
35325: LD_ADDR_VAR 0 6
35329: PUSH
35330: LD_VAR 0 6
35334: PUSH
35335: LD_VAR 0 2
35339: PUSH
35340: LD_VAR 0 5
35344: ARRAY
35345: ARRAY
35346: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35347: LD_ADDR_VAR 0 7
35351: PUSH
35352: LD_VAR 0 7
35356: PUSH
35357: LD_VAR 0 6
35361: PUSH
35362: EMPTY
35363: LIST
35364: ADD
35365: ST_TO_ADDR
// end ;
35366: GO 35322
35368: POP
35369: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35370: LD_ADDR_VAR 0 6
35374: PUSH
35375: LD_VAR 0 6
35379: PPUSH
35380: LD_VAR 0 2
35384: PUSH
35385: LD_VAR 0 2
35389: ARRAY
35390: PPUSH
35391: LD_VAR 0 3
35395: PPUSH
35396: CALL_OW 1
35400: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35401: LD_ADDR_VAR 0 7
35405: PUSH
35406: LD_VAR 0 7
35410: PPUSH
35411: LD_VAR 0 7
35415: PPUSH
35416: LD_VAR 0 6
35420: PPUSH
35421: CALL_OW 1
35425: ST_TO_ADDR
// for i = s_arr downto 2 do
35426: LD_ADDR_VAR 0 5
35430: PUSH
35431: DOUBLE
35432: LD_VAR 0 7
35436: INC
35437: ST_TO_ADDR
35438: LD_INT 2
35440: PUSH
35441: FOR_DOWNTO
35442: IFFALSE 35526
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35444: LD_ADDR_VAR 0 6
35448: PUSH
35449: LD_VAR 0 7
35453: PUSH
35454: LD_VAR 0 5
35458: PUSH
35459: LD_INT 1
35461: MINUS
35462: ARRAY
35463: PPUSH
35464: LD_VAR 0 2
35468: PUSH
35469: LD_VAR 0 5
35473: PUSH
35474: LD_INT 1
35476: MINUS
35477: ARRAY
35478: PPUSH
35479: LD_VAR 0 7
35483: PUSH
35484: LD_VAR 0 5
35488: ARRAY
35489: PPUSH
35490: CALL_OW 1
35494: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35495: LD_ADDR_VAR 0 7
35499: PUSH
35500: LD_VAR 0 7
35504: PPUSH
35505: LD_VAR 0 5
35509: PUSH
35510: LD_INT 1
35512: MINUS
35513: PPUSH
35514: LD_VAR 0 6
35518: PPUSH
35519: CALL_OW 1
35523: ST_TO_ADDR
// end ;
35524: GO 35441
35526: POP
35527: POP
// result := s_arr [ 1 ] ;
35528: LD_ADDR_VAR 0 4
35532: PUSH
35533: LD_VAR 0 7
35537: PUSH
35538: LD_INT 1
35540: ARRAY
35541: ST_TO_ADDR
// end ; end ;
35542: LD_VAR 0 4
35546: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35547: LD_INT 0
35549: PPUSH
35550: PPUSH
// if not list then
35551: LD_VAR 0 1
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 35651
// i := list [ pos1 ] ;
35560: LD_ADDR_VAR 0 5
35564: PUSH
35565: LD_VAR 0 1
35569: PUSH
35570: LD_VAR 0 2
35574: ARRAY
35575: ST_TO_ADDR
// if not i then
35576: LD_VAR 0 5
35580: NOT
35581: IFFALSE 35585
// exit ;
35583: GO 35651
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35585: LD_ADDR_VAR 0 1
35589: PUSH
35590: LD_VAR 0 1
35594: PPUSH
35595: LD_VAR 0 2
35599: PPUSH
35600: LD_VAR 0 1
35604: PUSH
35605: LD_VAR 0 3
35609: ARRAY
35610: PPUSH
35611: CALL_OW 1
35615: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35616: LD_ADDR_VAR 0 1
35620: PUSH
35621: LD_VAR 0 1
35625: PPUSH
35626: LD_VAR 0 3
35630: PPUSH
35631: LD_VAR 0 5
35635: PPUSH
35636: CALL_OW 1
35640: ST_TO_ADDR
// result := list ;
35641: LD_ADDR_VAR 0 4
35645: PUSH
35646: LD_VAR 0 1
35650: ST_TO_ADDR
// end ;
35651: LD_VAR 0 4
35655: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35656: LD_INT 0
35658: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35659: LD_ADDR_VAR 0 5
35663: PUSH
35664: LD_VAR 0 1
35668: PPUSH
35669: CALL_OW 250
35673: PPUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 251
35683: PPUSH
35684: LD_VAR 0 2
35688: PPUSH
35689: LD_VAR 0 3
35693: PPUSH
35694: LD_VAR 0 4
35698: PPUSH
35699: CALL 35709 0 5
35703: ST_TO_ADDR
// end ;
35704: LD_VAR 0 5
35708: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35709: LD_INT 0
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
// if not list then
35715: LD_VAR 0 3
35719: NOT
35720: IFFALSE 35724
// exit ;
35722: GO 36112
// result := [ ] ;
35724: LD_ADDR_VAR 0 6
35728: PUSH
35729: EMPTY
35730: ST_TO_ADDR
// for i in list do
35731: LD_ADDR_VAR 0 7
35735: PUSH
35736: LD_VAR 0 3
35740: PUSH
35741: FOR_IN
35742: IFFALSE 35944
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35744: LD_ADDR_VAR 0 9
35748: PUSH
35749: LD_VAR 0 7
35753: PPUSH
35754: LD_VAR 0 1
35758: PPUSH
35759: LD_VAR 0 2
35763: PPUSH
35764: CALL_OW 297
35768: ST_TO_ADDR
// if not result then
35769: LD_VAR 0 6
35773: NOT
35774: IFFALSE 35800
// result := [ [ i , tmp ] ] else
35776: LD_ADDR_VAR 0 6
35780: PUSH
35781: LD_VAR 0 7
35785: PUSH
35786: LD_VAR 0 9
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: ST_TO_ADDR
35798: GO 35942
// begin if result [ result ] [ 2 ] < tmp then
35800: LD_VAR 0 6
35804: PUSH
35805: LD_VAR 0 6
35809: ARRAY
35810: PUSH
35811: LD_INT 2
35813: ARRAY
35814: PUSH
35815: LD_VAR 0 9
35819: LESS
35820: IFFALSE 35862
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35822: LD_ADDR_VAR 0 6
35826: PUSH
35827: LD_VAR 0 6
35831: PPUSH
35832: LD_VAR 0 6
35836: PUSH
35837: LD_INT 1
35839: PLUS
35840: PPUSH
35841: LD_VAR 0 7
35845: PUSH
35846: LD_VAR 0 9
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PPUSH
35855: CALL_OW 2
35859: ST_TO_ADDR
35860: GO 35942
// for j = 1 to result do
35862: LD_ADDR_VAR 0 8
35866: PUSH
35867: DOUBLE
35868: LD_INT 1
35870: DEC
35871: ST_TO_ADDR
35872: LD_VAR 0 6
35876: PUSH
35877: FOR_TO
35878: IFFALSE 35940
// begin if tmp < result [ j ] [ 2 ] then
35880: LD_VAR 0 9
35884: PUSH
35885: LD_VAR 0 6
35889: PUSH
35890: LD_VAR 0 8
35894: ARRAY
35895: PUSH
35896: LD_INT 2
35898: ARRAY
35899: LESS
35900: IFFALSE 35938
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35902: LD_ADDR_VAR 0 6
35906: PUSH
35907: LD_VAR 0 6
35911: PPUSH
35912: LD_VAR 0 8
35916: PPUSH
35917: LD_VAR 0 7
35921: PUSH
35922: LD_VAR 0 9
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PPUSH
35931: CALL_OW 2
35935: ST_TO_ADDR
// break ;
35936: GO 35940
// end ; end ;
35938: GO 35877
35940: POP
35941: POP
// end ; end ;
35942: GO 35741
35944: POP
35945: POP
// if result and not asc then
35946: LD_VAR 0 6
35950: PUSH
35951: LD_VAR 0 4
35955: NOT
35956: AND
35957: IFFALSE 36032
// begin tmp := result ;
35959: LD_ADDR_VAR 0 9
35963: PUSH
35964: LD_VAR 0 6
35968: ST_TO_ADDR
// for i = tmp downto 1 do
35969: LD_ADDR_VAR 0 7
35973: PUSH
35974: DOUBLE
35975: LD_VAR 0 9
35979: INC
35980: ST_TO_ADDR
35981: LD_INT 1
35983: PUSH
35984: FOR_DOWNTO
35985: IFFALSE 36030
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35987: LD_ADDR_VAR 0 6
35991: PUSH
35992: LD_VAR 0 6
35996: PPUSH
35997: LD_VAR 0 9
36001: PUSH
36002: LD_VAR 0 7
36006: MINUS
36007: PUSH
36008: LD_INT 1
36010: PLUS
36011: PPUSH
36012: LD_VAR 0 9
36016: PUSH
36017: LD_VAR 0 7
36021: ARRAY
36022: PPUSH
36023: CALL_OW 1
36027: ST_TO_ADDR
36028: GO 35984
36030: POP
36031: POP
// end ; tmp := [ ] ;
36032: LD_ADDR_VAR 0 9
36036: PUSH
36037: EMPTY
36038: ST_TO_ADDR
// if mode then
36039: LD_VAR 0 5
36043: IFFALSE 36112
// begin for i = 1 to result do
36045: LD_ADDR_VAR 0 7
36049: PUSH
36050: DOUBLE
36051: LD_INT 1
36053: DEC
36054: ST_TO_ADDR
36055: LD_VAR 0 6
36059: PUSH
36060: FOR_TO
36061: IFFALSE 36100
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36063: LD_ADDR_VAR 0 9
36067: PUSH
36068: LD_VAR 0 9
36072: PPUSH
36073: LD_VAR 0 7
36077: PPUSH
36078: LD_VAR 0 6
36082: PUSH
36083: LD_VAR 0 7
36087: ARRAY
36088: PUSH
36089: LD_INT 1
36091: ARRAY
36092: PPUSH
36093: CALL_OW 1
36097: ST_TO_ADDR
36098: GO 36060
36100: POP
36101: POP
// result := tmp ;
36102: LD_ADDR_VAR 0 6
36106: PUSH
36107: LD_VAR 0 9
36111: ST_TO_ADDR
// end ; end ;
36112: LD_VAR 0 6
36116: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36117: LD_INT 0
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36125: LD_ADDR_VAR 0 5
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: ST_TO_ADDR
// if not x or not y then
36147: LD_VAR 0 2
36151: NOT
36152: PUSH
36153: LD_VAR 0 3
36157: NOT
36158: OR
36159: IFFALSE 36163
// exit ;
36161: GO 37815
// if not range then
36163: LD_VAR 0 4
36167: NOT
36168: IFFALSE 36178
// range := 10 ;
36170: LD_ADDR_VAR 0 4
36174: PUSH
36175: LD_INT 10
36177: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36178: LD_ADDR_VAR 0 8
36182: PUSH
36183: LD_INT 81
36185: PUSH
36186: LD_VAR 0 1
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 92
36197: PUSH
36198: LD_VAR 0 2
36202: PUSH
36203: LD_VAR 0 3
36207: PUSH
36208: LD_VAR 0 4
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 3
36221: PUSH
36222: LD_INT 21
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: PPUSH
36241: CALL_OW 69
36245: ST_TO_ADDR
// if not tmp then
36246: LD_VAR 0 8
36250: NOT
36251: IFFALSE 36255
// exit ;
36253: GO 37815
// for i in tmp do
36255: LD_ADDR_VAR 0 6
36259: PUSH
36260: LD_VAR 0 8
36264: PUSH
36265: FOR_IN
36266: IFFALSE 37790
// begin points := [ 0 , 0 , 0 ] ;
36268: LD_ADDR_VAR 0 9
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// bpoints := 1 ;
36287: LD_ADDR_VAR 0 10
36291: PUSH
36292: LD_INT 1
36294: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 247
36304: PUSH
36305: LD_INT 1
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36891
36313: POP
// begin if GetClass ( i ) = 1 then
36314: LD_VAR 0 6
36318: PPUSH
36319: CALL_OW 257
36323: PUSH
36324: LD_INT 1
36326: EQUAL
36327: IFFALSE 36348
// points := [ 10 , 5 , 3 ] ;
36329: LD_ADDR_VAR 0 9
36333: PUSH
36334: LD_INT 10
36336: PUSH
36337: LD_INT 5
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36348: LD_VAR 0 6
36352: PPUSH
36353: CALL_OW 257
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: LD_INT 4
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: IN
36372: IFFALSE 36393
// points := [ 3 , 2 , 1 ] ;
36374: LD_ADDR_VAR 0 9
36378: PUSH
36379: LD_INT 3
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36393: LD_VAR 0 6
36397: PPUSH
36398: CALL_OW 257
36402: PUSH
36403: LD_INT 5
36405: EQUAL
36406: IFFALSE 36427
// points := [ 130 , 5 , 2 ] ;
36408: LD_ADDR_VAR 0 9
36412: PUSH
36413: LD_INT 130
36415: PUSH
36416: LD_INT 5
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36427: LD_VAR 0 6
36431: PPUSH
36432: CALL_OW 257
36436: PUSH
36437: LD_INT 8
36439: EQUAL
36440: IFFALSE 36461
// points := [ 35 , 35 , 30 ] ;
36442: LD_ADDR_VAR 0 9
36446: PUSH
36447: LD_INT 35
36449: PUSH
36450: LD_INT 35
36452: PUSH
36453: LD_INT 30
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36461: LD_VAR 0 6
36465: PPUSH
36466: CALL_OW 257
36470: PUSH
36471: LD_INT 9
36473: EQUAL
36474: IFFALSE 36495
// points := [ 20 , 55 , 40 ] ;
36476: LD_ADDR_VAR 0 9
36480: PUSH
36481: LD_INT 20
36483: PUSH
36484: LD_INT 55
36486: PUSH
36487: LD_INT 40
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36495: LD_VAR 0 6
36499: PPUSH
36500: CALL_OW 257
36504: PUSH
36505: LD_INT 12
36507: PUSH
36508: LD_INT 16
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: IN
36515: IFFALSE 36536
// points := [ 5 , 3 , 2 ] ;
36517: LD_ADDR_VAR 0 9
36521: PUSH
36522: LD_INT 5
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36536: LD_VAR 0 6
36540: PPUSH
36541: CALL_OW 257
36545: PUSH
36546: LD_INT 17
36548: EQUAL
36549: IFFALSE 36570
// points := [ 100 , 50 , 75 ] ;
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_INT 100
36558: PUSH
36559: LD_INT 50
36561: PUSH
36562: LD_INT 75
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36570: LD_VAR 0 6
36574: PPUSH
36575: CALL_OW 257
36579: PUSH
36580: LD_INT 15
36582: EQUAL
36583: IFFALSE 36604
// points := [ 10 , 5 , 3 ] ;
36585: LD_ADDR_VAR 0 9
36589: PUSH
36590: LD_INT 10
36592: PUSH
36593: LD_INT 5
36595: PUSH
36596: LD_INT 3
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36604: LD_VAR 0 6
36608: PPUSH
36609: CALL_OW 257
36613: PUSH
36614: LD_INT 14
36616: EQUAL
36617: IFFALSE 36638
// points := [ 10 , 0 , 0 ] ;
36619: LD_ADDR_VAR 0 9
36623: PUSH
36624: LD_INT 10
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36638: LD_VAR 0 6
36642: PPUSH
36643: CALL_OW 257
36647: PUSH
36648: LD_INT 11
36650: EQUAL
36651: IFFALSE 36672
// points := [ 30 , 10 , 5 ] ;
36653: LD_ADDR_VAR 0 9
36657: PUSH
36658: LD_INT 30
36660: PUSH
36661: LD_INT 10
36663: PUSH
36664: LD_INT 5
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36672: LD_VAR 0 1
36676: PPUSH
36677: LD_INT 5
36679: PPUSH
36680: CALL_OW 321
36684: PUSH
36685: LD_INT 2
36687: EQUAL
36688: IFFALSE 36705
// bpoints := bpoints * 1.8 ;
36690: LD_ADDR_VAR 0 10
36694: PUSH
36695: LD_VAR 0 10
36699: PUSH
36700: LD_REAL  1.80000000000000E+0000
36703: MUL
36704: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36705: LD_VAR 0 6
36709: PPUSH
36710: CALL_OW 257
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: LD_INT 4
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: IN
36733: PUSH
36734: LD_VAR 0 1
36738: PPUSH
36739: LD_INT 51
36741: PPUSH
36742: CALL_OW 321
36746: PUSH
36747: LD_INT 2
36749: EQUAL
36750: AND
36751: IFFALSE 36768
// bpoints := bpoints * 1.2 ;
36753: LD_ADDR_VAR 0 10
36757: PUSH
36758: LD_VAR 0 10
36762: PUSH
36763: LD_REAL  1.20000000000000E+0000
36766: MUL
36767: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36768: LD_VAR 0 6
36772: PPUSH
36773: CALL_OW 257
36777: PUSH
36778: LD_INT 5
36780: PUSH
36781: LD_INT 7
36783: PUSH
36784: LD_INT 9
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: IN
36792: PUSH
36793: LD_VAR 0 1
36797: PPUSH
36798: LD_INT 52
36800: PPUSH
36801: CALL_OW 321
36805: PUSH
36806: LD_INT 2
36808: EQUAL
36809: AND
36810: IFFALSE 36827
// bpoints := bpoints * 1.5 ;
36812: LD_ADDR_VAR 0 10
36816: PUSH
36817: LD_VAR 0 10
36821: PUSH
36822: LD_REAL  1.50000000000000E+0000
36825: MUL
36826: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36827: LD_VAR 0 1
36831: PPUSH
36832: LD_INT 66
36834: PPUSH
36835: CALL_OW 321
36839: PUSH
36840: LD_INT 2
36842: EQUAL
36843: IFFALSE 36860
// bpoints := bpoints * 1.1 ;
36845: LD_ADDR_VAR 0 10
36849: PUSH
36850: LD_VAR 0 10
36854: PUSH
36855: LD_REAL  1.10000000000000E+0000
36858: MUL
36859: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36860: LD_ADDR_VAR 0 10
36864: PUSH
36865: LD_VAR 0 10
36869: PUSH
36870: LD_VAR 0 6
36874: PPUSH
36875: LD_INT 1
36877: PPUSH
36878: CALL_OW 259
36882: PUSH
36883: LD_REAL  1.15000000000000E+0000
36886: MUL
36887: MUL
36888: ST_TO_ADDR
// end ; unit_vehicle :
36889: GO 37719
36891: LD_INT 2
36893: DOUBLE
36894: EQUAL
36895: IFTRUE 36899
36897: GO 37707
36899: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36900: LD_VAR 0 6
36904: PPUSH
36905: CALL_OW 264
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 42
36915: PUSH
36916: LD_INT 24
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: LIST
36923: IN
36924: IFFALSE 36945
// points := [ 25 , 5 , 3 ] ;
36926: LD_ADDR_VAR 0 9
36930: PUSH
36931: LD_INT 25
36933: PUSH
36934: LD_INT 5
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36945: LD_VAR 0 6
36949: PPUSH
36950: CALL_OW 264
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: LD_INT 43
36960: PUSH
36961: LD_INT 25
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: IN
36969: IFFALSE 36990
// points := [ 40 , 15 , 5 ] ;
36971: LD_ADDR_VAR 0 9
36975: PUSH
36976: LD_INT 40
36978: PUSH
36979: LD_INT 15
36981: PUSH
36982: LD_INT 5
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36990: LD_VAR 0 6
36994: PPUSH
36995: CALL_OW 264
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: LD_INT 23
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: IN
37010: IFFALSE 37031
// points := [ 7 , 25 , 8 ] ;
37012: LD_ADDR_VAR 0 9
37016: PUSH
37017: LD_INT 7
37019: PUSH
37020: LD_INT 25
37022: PUSH
37023: LD_INT 8
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37031: LD_VAR 0 6
37035: PPUSH
37036: CALL_OW 264
37040: PUSH
37041: LD_INT 5
37043: PUSH
37044: LD_INT 27
37046: PUSH
37047: LD_INT 44
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: IN
37055: IFFALSE 37076
// points := [ 14 , 50 , 16 ] ;
37057: LD_ADDR_VAR 0 9
37061: PUSH
37062: LD_INT 14
37064: PUSH
37065: LD_INT 50
37067: PUSH
37068: LD_INT 16
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37076: LD_VAR 0 6
37080: PPUSH
37081: CALL_OW 264
37085: PUSH
37086: LD_INT 6
37088: PUSH
37089: LD_INT 46
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: IN
37096: IFFALSE 37117
// points := [ 32 , 120 , 70 ] ;
37098: LD_ADDR_VAR 0 9
37102: PUSH
37103: LD_INT 32
37105: PUSH
37106: LD_INT 120
37108: PUSH
37109: LD_INT 70
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: LIST
37116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37117: LD_VAR 0 6
37121: PPUSH
37122: CALL_OW 264
37126: PUSH
37127: LD_INT 7
37129: PUSH
37130: LD_INT 28
37132: PUSH
37133: LD_INT 45
37135: PUSH
37136: LD_EXP 31
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: IN
37147: IFFALSE 37168
// points := [ 35 , 20 , 45 ] ;
37149: LD_ADDR_VAR 0 9
37153: PUSH
37154: LD_INT 35
37156: PUSH
37157: LD_INT 20
37159: PUSH
37160: LD_INT 45
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 264
37177: PUSH
37178: LD_INT 47
37180: PUSH
37181: EMPTY
37182: LIST
37183: IN
37184: IFFALSE 37205
// points := [ 67 , 45 , 75 ] ;
37186: LD_ADDR_VAR 0 9
37190: PUSH
37191: LD_INT 67
37193: PUSH
37194: LD_INT 45
37196: PUSH
37197: LD_INT 75
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37205: LD_VAR 0 6
37209: PPUSH
37210: CALL_OW 264
37214: PUSH
37215: LD_INT 26
37217: PUSH
37218: EMPTY
37219: LIST
37220: IN
37221: IFFALSE 37242
// points := [ 120 , 30 , 80 ] ;
37223: LD_ADDR_VAR 0 9
37227: PUSH
37228: LD_INT 120
37230: PUSH
37231: LD_INT 30
37233: PUSH
37234: LD_INT 80
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37242: LD_VAR 0 6
37246: PPUSH
37247: CALL_OW 264
37251: PUSH
37252: LD_INT 22
37254: PUSH
37255: EMPTY
37256: LIST
37257: IN
37258: IFFALSE 37279
// points := [ 40 , 1 , 1 ] ;
37260: LD_ADDR_VAR 0 9
37264: PUSH
37265: LD_INT 40
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37279: LD_VAR 0 6
37283: PPUSH
37284: CALL_OW 264
37288: PUSH
37289: LD_INT 29
37291: PUSH
37292: EMPTY
37293: LIST
37294: IN
37295: IFFALSE 37316
// points := [ 70 , 200 , 400 ] ;
37297: LD_ADDR_VAR 0 9
37301: PUSH
37302: LD_INT 70
37304: PUSH
37305: LD_INT 200
37307: PUSH
37308: LD_INT 400
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37316: LD_VAR 0 6
37320: PPUSH
37321: CALL_OW 264
37325: PUSH
37326: LD_INT 14
37328: PUSH
37329: LD_INT 53
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: IN
37336: IFFALSE 37357
// points := [ 40 , 10 , 20 ] ;
37338: LD_ADDR_VAR 0 9
37342: PUSH
37343: LD_INT 40
37345: PUSH
37346: LD_INT 10
37348: PUSH
37349: LD_INT 20
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37357: LD_VAR 0 6
37361: PPUSH
37362: CALL_OW 264
37366: PUSH
37367: LD_INT 9
37369: PUSH
37370: EMPTY
37371: LIST
37372: IN
37373: IFFALSE 37394
// points := [ 5 , 70 , 20 ] ;
37375: LD_ADDR_VAR 0 9
37379: PUSH
37380: LD_INT 5
37382: PUSH
37383: LD_INT 70
37385: PUSH
37386: LD_INT 20
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37394: LD_VAR 0 6
37398: PPUSH
37399: CALL_OW 264
37403: PUSH
37404: LD_INT 10
37406: PUSH
37407: EMPTY
37408: LIST
37409: IN
37410: IFFALSE 37431
// points := [ 35 , 110 , 70 ] ;
37412: LD_ADDR_VAR 0 9
37416: PUSH
37417: LD_INT 35
37419: PUSH
37420: LD_INT 110
37422: PUSH
37423: LD_INT 70
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37431: LD_VAR 0 6
37435: PPUSH
37436: CALL_OW 265
37440: PUSH
37441: LD_INT 25
37443: EQUAL
37444: IFFALSE 37465
// points := [ 80 , 65 , 100 ] ;
37446: LD_ADDR_VAR 0 9
37450: PUSH
37451: LD_INT 80
37453: PUSH
37454: LD_INT 65
37456: PUSH
37457: LD_INT 100
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37465: LD_VAR 0 6
37469: PPUSH
37470: CALL_OW 263
37474: PUSH
37475: LD_INT 1
37477: EQUAL
37478: IFFALSE 37513
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37480: LD_ADDR_VAR 0 10
37484: PUSH
37485: LD_VAR 0 10
37489: PUSH
37490: LD_VAR 0 6
37494: PPUSH
37495: CALL_OW 311
37499: PPUSH
37500: LD_INT 3
37502: PPUSH
37503: CALL_OW 259
37507: PUSH
37508: LD_INT 4
37510: MUL
37511: MUL
37512: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37513: LD_VAR 0 6
37517: PPUSH
37518: CALL_OW 263
37522: PUSH
37523: LD_INT 2
37525: EQUAL
37526: IFFALSE 37577
// begin j := IsControledBy ( i ) ;
37528: LD_ADDR_VAR 0 7
37532: PUSH
37533: LD_VAR 0 6
37537: PPUSH
37538: CALL_OW 312
37542: ST_TO_ADDR
// if j then
37543: LD_VAR 0 7
37547: IFFALSE 37577
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37549: LD_ADDR_VAR 0 10
37553: PUSH
37554: LD_VAR 0 10
37558: PUSH
37559: LD_VAR 0 7
37563: PPUSH
37564: LD_INT 3
37566: PPUSH
37567: CALL_OW 259
37571: PUSH
37572: LD_INT 3
37574: MUL
37575: MUL
37576: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37577: LD_VAR 0 6
37581: PPUSH
37582: CALL_OW 264
37586: PUSH
37587: LD_INT 5
37589: PUSH
37590: LD_INT 6
37592: PUSH
37593: LD_INT 46
37595: PUSH
37596: LD_INT 44
37598: PUSH
37599: LD_INT 47
37601: PUSH
37602: LD_INT 45
37604: PUSH
37605: LD_INT 28
37607: PUSH
37608: LD_INT 7
37610: PUSH
37611: LD_INT 27
37613: PUSH
37614: LD_INT 29
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: IN
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: LD_INT 52
37637: PPUSH
37638: CALL_OW 321
37642: PUSH
37643: LD_INT 2
37645: EQUAL
37646: AND
37647: IFFALSE 37664
// bpoints := bpoints * 1.2 ;
37649: LD_ADDR_VAR 0 10
37653: PUSH
37654: LD_VAR 0 10
37658: PUSH
37659: LD_REAL  1.20000000000000E+0000
37662: MUL
37663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37664: LD_VAR 0 6
37668: PPUSH
37669: CALL_OW 264
37673: PUSH
37674: LD_INT 6
37676: PUSH
37677: LD_INT 46
37679: PUSH
37680: LD_INT 47
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: IN
37688: IFFALSE 37705
// bpoints := bpoints * 1.2 ;
37690: LD_ADDR_VAR 0 10
37694: PUSH
37695: LD_VAR 0 10
37699: PUSH
37700: LD_REAL  1.20000000000000E+0000
37703: MUL
37704: ST_TO_ADDR
// end ; unit_building :
37705: GO 37719
37707: LD_INT 3
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37718
37715: POP
// ; end ;
37716: GO 37719
37718: POP
// for j = 1 to 3 do
37719: LD_ADDR_VAR 0 7
37723: PUSH
37724: DOUBLE
37725: LD_INT 1
37727: DEC
37728: ST_TO_ADDR
37729: LD_INT 3
37731: PUSH
37732: FOR_TO
37733: IFFALSE 37786
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37735: LD_ADDR_VAR 0 5
37739: PUSH
37740: LD_VAR 0 5
37744: PPUSH
37745: LD_VAR 0 7
37749: PPUSH
37750: LD_VAR 0 5
37754: PUSH
37755: LD_VAR 0 7
37759: ARRAY
37760: PUSH
37761: LD_VAR 0 9
37765: PUSH
37766: LD_VAR 0 7
37770: ARRAY
37771: PUSH
37772: LD_VAR 0 10
37776: MUL
37777: PLUS
37778: PPUSH
37779: CALL_OW 1
37783: ST_TO_ADDR
37784: GO 37732
37786: POP
37787: POP
// end ;
37788: GO 36265
37790: POP
37791: POP
// result := Replace ( result , 4 , tmp ) ;
37792: LD_ADDR_VAR 0 5
37796: PUSH
37797: LD_VAR 0 5
37801: PPUSH
37802: LD_INT 4
37804: PPUSH
37805: LD_VAR 0 8
37809: PPUSH
37810: CALL_OW 1
37814: ST_TO_ADDR
// end ;
37815: LD_VAR 0 5
37819: RET
// export function DangerAtRange ( unit , range ) ; begin
37820: LD_INT 0
37822: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37823: LD_ADDR_VAR 0 3
37827: PUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 255
37837: PPUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 250
37847: PPUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 251
37857: PPUSH
37858: LD_VAR 0 2
37862: PPUSH
37863: CALL 36117 0 4
37867: ST_TO_ADDR
// end ;
37868: LD_VAR 0 3
37872: RET
// export function DangerInArea ( side , area ) ; begin
37873: LD_INT 0
37875: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37876: LD_ADDR_VAR 0 3
37880: PUSH
37881: LD_VAR 0 2
37885: PPUSH
37886: LD_INT 81
37888: PUSH
37889: LD_VAR 0 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PPUSH
37898: CALL_OW 70
37902: ST_TO_ADDR
// end ;
37903: LD_VAR 0 3
37907: RET
// export function IsExtension ( b ) ; begin
37908: LD_INT 0
37910: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37911: LD_ADDR_VAR 0 2
37915: PUSH
37916: LD_VAR 0 1
37920: PUSH
37921: LD_INT 23
37923: PUSH
37924: LD_INT 20
37926: PUSH
37927: LD_INT 22
37929: PUSH
37930: LD_INT 17
37932: PUSH
37933: LD_INT 24
37935: PUSH
37936: LD_INT 21
37938: PUSH
37939: LD_INT 19
37941: PUSH
37942: LD_INT 16
37944: PUSH
37945: LD_INT 25
37947: PUSH
37948: LD_INT 18
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: IN
37963: ST_TO_ADDR
// end ;
37964: LD_VAR 0 2
37968: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37969: LD_INT 0
37971: PPUSH
37972: PPUSH
37973: PPUSH
// result := [ ] ;
37974: LD_ADDR_VAR 0 4
37978: PUSH
37979: EMPTY
37980: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37981: LD_ADDR_VAR 0 5
37985: PUSH
37986: LD_VAR 0 2
37990: PPUSH
37991: LD_INT 21
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PPUSH
38001: CALL_OW 70
38005: ST_TO_ADDR
// if not tmp then
38006: LD_VAR 0 5
38010: NOT
38011: IFFALSE 38015
// exit ;
38013: GO 38079
// if checkLink then
38015: LD_VAR 0 3
38019: IFFALSE 38069
// begin for i in tmp do
38021: LD_ADDR_VAR 0 6
38025: PUSH
38026: LD_VAR 0 5
38030: PUSH
38031: FOR_IN
38032: IFFALSE 38067
// if GetBase ( i ) <> base then
38034: LD_VAR 0 6
38038: PPUSH
38039: CALL_OW 274
38043: PUSH
38044: LD_VAR 0 1
38048: NONEQUAL
38049: IFFALSE 38065
// ComLinkToBase ( base , i ) ;
38051: LD_VAR 0 1
38055: PPUSH
38056: LD_VAR 0 6
38060: PPUSH
38061: CALL_OW 169
38065: GO 38031
38067: POP
38068: POP
// end ; result := tmp ;
38069: LD_ADDR_VAR 0 4
38073: PUSH
38074: LD_VAR 0 5
38078: ST_TO_ADDR
// end ;
38079: LD_VAR 0 4
38083: RET
// export function ComComplete ( units , b ) ; var i ; begin
38084: LD_INT 0
38086: PPUSH
38087: PPUSH
// if not units then
38088: LD_VAR 0 1
38092: NOT
38093: IFFALSE 38097
// exit ;
38095: GO 38187
// for i in units do
38097: LD_ADDR_VAR 0 4
38101: PUSH
38102: LD_VAR 0 1
38106: PUSH
38107: FOR_IN
38108: IFFALSE 38185
// if BuildingStatus ( b ) = bs_build then
38110: LD_VAR 0 2
38114: PPUSH
38115: CALL_OW 461
38119: PUSH
38120: LD_INT 1
38122: EQUAL
38123: IFFALSE 38183
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38125: LD_VAR 0 4
38129: PPUSH
38130: LD_STRING h
38132: PUSH
38133: LD_VAR 0 2
38137: PPUSH
38138: CALL_OW 250
38142: PUSH
38143: LD_VAR 0 2
38147: PPUSH
38148: CALL_OW 251
38152: PUSH
38153: LD_VAR 0 2
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: PPUSH
38179: CALL_OW 446
38183: GO 38107
38185: POP
38186: POP
// end ;
38187: LD_VAR 0 3
38191: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38192: LD_INT 0
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38200: LD_VAR 0 1
38204: NOT
38205: PUSH
38206: LD_VAR 0 1
38210: PPUSH
38211: CALL_OW 263
38215: PUSH
38216: LD_INT 2
38218: NONEQUAL
38219: OR
38220: IFFALSE 38224
// exit ;
38222: GO 38540
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38224: LD_ADDR_VAR 0 6
38228: PUSH
38229: LD_INT 22
38231: PUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 255
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: LD_INT 30
38251: PUSH
38252: LD_INT 36
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 34
38261: PUSH
38262: LD_INT 31
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PPUSH
38278: CALL_OW 69
38282: ST_TO_ADDR
// if not tmp then
38283: LD_VAR 0 6
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38540
// result := [ ] ;
38292: LD_ADDR_VAR 0 2
38296: PUSH
38297: EMPTY
38298: ST_TO_ADDR
// for i in tmp do
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_VAR 0 6
38308: PUSH
38309: FOR_IN
38310: IFFALSE 38381
// begin t := UnitsInside ( i ) ;
38312: LD_ADDR_VAR 0 4
38316: PUSH
38317: LD_VAR 0 3
38321: PPUSH
38322: CALL_OW 313
38326: ST_TO_ADDR
// if t then
38327: LD_VAR 0 4
38331: IFFALSE 38379
// for j in t do
38333: LD_ADDR_VAR 0 7
38337: PUSH
38338: LD_VAR 0 4
38342: PUSH
38343: FOR_IN
38344: IFFALSE 38377
// result := Replace ( result , result + 1 , j ) ;
38346: LD_ADDR_VAR 0 2
38350: PUSH
38351: LD_VAR 0 2
38355: PPUSH
38356: LD_VAR 0 2
38360: PUSH
38361: LD_INT 1
38363: PLUS
38364: PPUSH
38365: LD_VAR 0 7
38369: PPUSH
38370: CALL_OW 1
38374: ST_TO_ADDR
38375: GO 38343
38377: POP
38378: POP
// end ;
38379: GO 38309
38381: POP
38382: POP
// if not result then
38383: LD_VAR 0 2
38387: NOT
38388: IFFALSE 38392
// exit ;
38390: GO 38540
// mech := result [ 1 ] ;
38392: LD_ADDR_VAR 0 5
38396: PUSH
38397: LD_VAR 0 2
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: ST_TO_ADDR
// if result > 1 then
38406: LD_VAR 0 2
38410: PUSH
38411: LD_INT 1
38413: GREATER
38414: IFFALSE 38526
// begin for i = 2 to result do
38416: LD_ADDR_VAR 0 3
38420: PUSH
38421: DOUBLE
38422: LD_INT 2
38424: DEC
38425: ST_TO_ADDR
38426: LD_VAR 0 2
38430: PUSH
38431: FOR_TO
38432: IFFALSE 38524
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38434: LD_ADDR_VAR 0 4
38438: PUSH
38439: LD_VAR 0 2
38443: PUSH
38444: LD_VAR 0 3
38448: ARRAY
38449: PPUSH
38450: LD_INT 3
38452: PPUSH
38453: CALL_OW 259
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_VAR 0 3
38467: ARRAY
38468: PPUSH
38469: CALL_OW 432
38473: MINUS
38474: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38475: LD_VAR 0 4
38479: PUSH
38480: LD_VAR 0 5
38484: PPUSH
38485: LD_INT 3
38487: PPUSH
38488: CALL_OW 259
38492: PUSH
38493: LD_VAR 0 5
38497: PPUSH
38498: CALL_OW 432
38502: MINUS
38503: GREATEREQUAL
38504: IFFALSE 38522
// mech := result [ i ] ;
38506: LD_ADDR_VAR 0 5
38510: PUSH
38511: LD_VAR 0 2
38515: PUSH
38516: LD_VAR 0 3
38520: ARRAY
38521: ST_TO_ADDR
// end ;
38522: GO 38431
38524: POP
38525: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38526: LD_VAR 0 1
38530: PPUSH
38531: LD_VAR 0 5
38535: PPUSH
38536: CALL_OW 135
// end ;
38540: LD_VAR 0 2
38544: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38545: LD_INT 0
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
// result := [ ] ;
38560: LD_ADDR_VAR 0 7
38564: PUSH
38565: EMPTY
38566: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 266
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: IN
38587: NOT
38588: IFFALSE 38592
// exit ;
38590: GO 40226
// if name then
38592: LD_VAR 0 3
38596: IFFALSE 38612
// SetBName ( base_dep , name ) ;
38598: LD_VAR 0 1
38602: PPUSH
38603: LD_VAR 0 3
38607: PPUSH
38608: CALL_OW 500
// base := GetBase ( base_dep ) ;
38612: LD_ADDR_VAR 0 15
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 274
38626: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38627: LD_ADDR_VAR 0 16
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 255
38641: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38642: LD_ADDR_VAR 0 17
38646: PUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: CALL_OW 248
38656: ST_TO_ADDR
// if sources then
38657: LD_VAR 0 5
38661: IFFALSE 38708
// for i = 1 to 3 do
38663: LD_ADDR_VAR 0 8
38667: PUSH
38668: DOUBLE
38669: LD_INT 1
38671: DEC
38672: ST_TO_ADDR
38673: LD_INT 3
38675: PUSH
38676: FOR_TO
38677: IFFALSE 38706
// AddResourceType ( base , i , sources [ i ] ) ;
38679: LD_VAR 0 15
38683: PPUSH
38684: LD_VAR 0 8
38688: PPUSH
38689: LD_VAR 0 5
38693: PUSH
38694: LD_VAR 0 8
38698: ARRAY
38699: PPUSH
38700: CALL_OW 276
38704: GO 38676
38706: POP
38707: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38708: LD_ADDR_VAR 0 18
38712: PUSH
38713: LD_VAR 0 15
38717: PPUSH
38718: LD_VAR 0 2
38722: PPUSH
38723: LD_INT 1
38725: PPUSH
38726: CALL 37969 0 3
38730: ST_TO_ADDR
// InitHc ;
38731: CALL_OW 19
// InitUc ;
38735: CALL_OW 18
// uc_side := side ;
38739: LD_ADDR_OWVAR 20
38743: PUSH
38744: LD_VAR 0 16
38748: ST_TO_ADDR
// uc_nation := nation ;
38749: LD_ADDR_OWVAR 21
38753: PUSH
38754: LD_VAR 0 17
38758: ST_TO_ADDR
// if buildings then
38759: LD_VAR 0 18
38763: IFFALSE 40085
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38765: LD_ADDR_VAR 0 19
38769: PUSH
38770: LD_VAR 0 18
38774: PPUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 30
38780: PUSH
38781: LD_INT 29
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 30
38790: PUSH
38791: LD_INT 30
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PPUSH
38803: CALL_OW 72
38807: ST_TO_ADDR
// if tmp then
38808: LD_VAR 0 19
38812: IFFALSE 38860
// for i in tmp do
38814: LD_ADDR_VAR 0 8
38818: PUSH
38819: LD_VAR 0 19
38823: PUSH
38824: FOR_IN
38825: IFFALSE 38858
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38827: LD_VAR 0 8
38831: PPUSH
38832: CALL_OW 250
38836: PPUSH
38837: LD_VAR 0 8
38841: PPUSH
38842: CALL_OW 251
38846: PPUSH
38847: LD_VAR 0 16
38851: PPUSH
38852: CALL_OW 441
38856: GO 38824
38858: POP
38859: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38860: LD_VAR 0 18
38864: PPUSH
38865: LD_INT 2
38867: PUSH
38868: LD_INT 30
38870: PUSH
38871: LD_INT 32
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 30
38880: PUSH
38881: LD_INT 33
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: PPUSH
38893: CALL_OW 72
38897: IFFALSE 38985
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38899: LD_ADDR_VAR 0 8
38903: PUSH
38904: LD_VAR 0 18
38908: PPUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 30
38914: PUSH
38915: LD_INT 32
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 30
38924: PUSH
38925: LD_INT 33
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: PPUSH
38937: CALL_OW 72
38941: PUSH
38942: FOR_IN
38943: IFFALSE 38983
// begin if not GetBWeapon ( i ) then
38945: LD_VAR 0 8
38949: PPUSH
38950: CALL_OW 269
38954: NOT
38955: IFFALSE 38981
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38957: LD_VAR 0 8
38961: PPUSH
38962: LD_VAR 0 8
38966: PPUSH
38967: LD_VAR 0 2
38971: PPUSH
38972: CALL 40231 0 2
38976: PPUSH
38977: CALL_OW 431
// end ;
38981: GO 38942
38983: POP
38984: POP
// end ; for i = 1 to personel do
38985: LD_ADDR_VAR 0 8
38989: PUSH
38990: DOUBLE
38991: LD_INT 1
38993: DEC
38994: ST_TO_ADDR
38995: LD_VAR 0 6
38999: PUSH
39000: FOR_TO
39001: IFFALSE 40065
// begin if i > 4 then
39003: LD_VAR 0 8
39007: PUSH
39008: LD_INT 4
39010: GREATER
39011: IFFALSE 39015
// break ;
39013: GO 40065
// case i of 1 :
39015: LD_VAR 0 8
39019: PUSH
39020: LD_INT 1
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39028
39026: GO 39108
39028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39029: LD_ADDR_VAR 0 12
39033: PUSH
39034: LD_VAR 0 18
39038: PPUSH
39039: LD_INT 22
39041: PUSH
39042: LD_VAR 0 16
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 58
39053: PUSH
39054: EMPTY
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 30
39062: PUSH
39063: LD_INT 32
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 30
39072: PUSH
39073: LD_INT 4
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 30
39082: PUSH
39083: LD_INT 5
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PPUSH
39101: CALL_OW 72
39105: ST_TO_ADDR
39106: GO 39330
39108: LD_INT 2
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39116
39114: GO 39178
39116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39117: LD_ADDR_VAR 0 12
39121: PUSH
39122: LD_VAR 0 18
39126: PPUSH
39127: LD_INT 22
39129: PUSH
39130: LD_VAR 0 16
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: LD_INT 30
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 30
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PPUSH
39171: CALL_OW 72
39175: ST_TO_ADDR
39176: GO 39330
39178: LD_INT 3
39180: DOUBLE
39181: EQUAL
39182: IFTRUE 39186
39184: GO 39248
39186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39187: LD_ADDR_VAR 0 12
39191: PUSH
39192: LD_VAR 0 18
39196: PPUSH
39197: LD_INT 22
39199: PUSH
39200: LD_VAR 0 16
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: LD_INT 30
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 30
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PPUSH
39241: CALL_OW 72
39245: ST_TO_ADDR
39246: GO 39330
39248: LD_INT 4
39250: DOUBLE
39251: EQUAL
39252: IFTRUE 39256
39254: GO 39329
39256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39257: LD_ADDR_VAR 0 12
39261: PUSH
39262: LD_VAR 0 18
39266: PPUSH
39267: LD_INT 22
39269: PUSH
39270: LD_VAR 0 16
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 30
39284: PUSH
39285: LD_INT 6
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 30
39294: PUSH
39295: LD_INT 7
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 30
39304: PUSH
39305: LD_INT 8
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PPUSH
39322: CALL_OW 72
39326: ST_TO_ADDR
39327: GO 39330
39329: POP
// if i = 1 then
39330: LD_VAR 0 8
39334: PUSH
39335: LD_INT 1
39337: EQUAL
39338: IFFALSE 39449
// begin tmp := [ ] ;
39340: LD_ADDR_VAR 0 19
39344: PUSH
39345: EMPTY
39346: ST_TO_ADDR
// for j in f do
39347: LD_ADDR_VAR 0 9
39351: PUSH
39352: LD_VAR 0 12
39356: PUSH
39357: FOR_IN
39358: IFFALSE 39431
// if GetBType ( j ) = b_bunker then
39360: LD_VAR 0 9
39364: PPUSH
39365: CALL_OW 266
39369: PUSH
39370: LD_INT 32
39372: EQUAL
39373: IFFALSE 39400
// tmp := Insert ( tmp , 1 , j ) else
39375: LD_ADDR_VAR 0 19
39379: PUSH
39380: LD_VAR 0 19
39384: PPUSH
39385: LD_INT 1
39387: PPUSH
39388: LD_VAR 0 9
39392: PPUSH
39393: CALL_OW 2
39397: ST_TO_ADDR
39398: GO 39429
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39400: LD_ADDR_VAR 0 19
39404: PUSH
39405: LD_VAR 0 19
39409: PPUSH
39410: LD_VAR 0 19
39414: PUSH
39415: LD_INT 1
39417: PLUS
39418: PPUSH
39419: LD_VAR 0 9
39423: PPUSH
39424: CALL_OW 2
39428: ST_TO_ADDR
39429: GO 39357
39431: POP
39432: POP
// if tmp then
39433: LD_VAR 0 19
39437: IFFALSE 39449
// f := tmp ;
39439: LD_ADDR_VAR 0 12
39443: PUSH
39444: LD_VAR 0 19
39448: ST_TO_ADDR
// end ; x := personel [ i ] ;
39449: LD_ADDR_VAR 0 13
39453: PUSH
39454: LD_VAR 0 6
39458: PUSH
39459: LD_VAR 0 8
39463: ARRAY
39464: ST_TO_ADDR
// if x = - 1 then
39465: LD_VAR 0 13
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: EQUAL
39474: IFFALSE 39683
// begin for j in f do
39476: LD_ADDR_VAR 0 9
39480: PUSH
39481: LD_VAR 0 12
39485: PUSH
39486: FOR_IN
39487: IFFALSE 39679
// repeat InitHc ;
39489: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39493: LD_VAR 0 9
39497: PPUSH
39498: CALL_OW 266
39502: PUSH
39503: LD_INT 5
39505: EQUAL
39506: IFFALSE 39576
// begin if UnitsInside ( j ) < 3 then
39508: LD_VAR 0 9
39512: PPUSH
39513: CALL_OW 313
39517: PUSH
39518: LD_INT 3
39520: LESS
39521: IFFALSE 39557
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39523: LD_INT 0
39525: PPUSH
39526: LD_INT 5
39528: PUSH
39529: LD_INT 8
39531: PUSH
39532: LD_INT 9
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: LIST
39539: PUSH
39540: LD_VAR 0 17
39544: ARRAY
39545: PPUSH
39546: LD_VAR 0 4
39550: PPUSH
39551: CALL_OW 380
39555: GO 39574
// PrepareHuman ( false , i , skill ) ;
39557: LD_INT 0
39559: PPUSH
39560: LD_VAR 0 8
39564: PPUSH
39565: LD_VAR 0 4
39569: PPUSH
39570: CALL_OW 380
// end else
39574: GO 39593
// PrepareHuman ( false , i , skill ) ;
39576: LD_INT 0
39578: PPUSH
39579: LD_VAR 0 8
39583: PPUSH
39584: LD_VAR 0 4
39588: PPUSH
39589: CALL_OW 380
// un := CreateHuman ;
39593: LD_ADDR_VAR 0 14
39597: PUSH
39598: CALL_OW 44
39602: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39603: LD_ADDR_VAR 0 7
39607: PUSH
39608: LD_VAR 0 7
39612: PPUSH
39613: LD_INT 1
39615: PPUSH
39616: LD_VAR 0 14
39620: PPUSH
39621: CALL_OW 2
39625: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39626: LD_VAR 0 14
39630: PPUSH
39631: LD_VAR 0 9
39635: PPUSH
39636: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39640: LD_VAR 0 9
39644: PPUSH
39645: CALL_OW 313
39649: PUSH
39650: LD_INT 6
39652: EQUAL
39653: PUSH
39654: LD_VAR 0 9
39658: PPUSH
39659: CALL_OW 266
39663: PUSH
39664: LD_INT 32
39666: PUSH
39667: LD_INT 31
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: IN
39674: OR
39675: IFFALSE 39489
39677: GO 39486
39679: POP
39680: POP
// end else
39681: GO 40063
// for j = 1 to x do
39683: LD_ADDR_VAR 0 9
39687: PUSH
39688: DOUBLE
39689: LD_INT 1
39691: DEC
39692: ST_TO_ADDR
39693: LD_VAR 0 13
39697: PUSH
39698: FOR_TO
39699: IFFALSE 40061
// begin InitHc ;
39701: CALL_OW 19
// if not f then
39705: LD_VAR 0 12
39709: NOT
39710: IFFALSE 39799
// begin PrepareHuman ( false , i , skill ) ;
39712: LD_INT 0
39714: PPUSH
39715: LD_VAR 0 8
39719: PPUSH
39720: LD_VAR 0 4
39724: PPUSH
39725: CALL_OW 380
// un := CreateHuman ;
39729: LD_ADDR_VAR 0 14
39733: PUSH
39734: CALL_OW 44
39738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39739: LD_ADDR_VAR 0 7
39743: PUSH
39744: LD_VAR 0 7
39748: PPUSH
39749: LD_INT 1
39751: PPUSH
39752: LD_VAR 0 14
39756: PPUSH
39757: CALL_OW 2
39761: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39762: LD_VAR 0 14
39766: PPUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 250
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 251
39786: PPUSH
39787: LD_INT 10
39789: PPUSH
39790: LD_INT 0
39792: PPUSH
39793: CALL_OW 50
// continue ;
39797: GO 39698
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39799: LD_VAR 0 12
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: PPUSH
39808: CALL_OW 313
39812: PUSH
39813: LD_VAR 0 12
39817: PUSH
39818: LD_INT 1
39820: ARRAY
39821: PPUSH
39822: CALL_OW 266
39826: PUSH
39827: LD_INT 32
39829: PUSH
39830: LD_INT 31
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: IN
39837: AND
39838: PUSH
39839: LD_VAR 0 12
39843: PUSH
39844: LD_INT 1
39846: ARRAY
39847: PPUSH
39848: CALL_OW 313
39852: PUSH
39853: LD_INT 6
39855: EQUAL
39856: OR
39857: IFFALSE 39877
// f := Delete ( f , 1 ) ;
39859: LD_ADDR_VAR 0 12
39863: PUSH
39864: LD_VAR 0 12
39868: PPUSH
39869: LD_INT 1
39871: PPUSH
39872: CALL_OW 3
39876: ST_TO_ADDR
// if not f then
39877: LD_VAR 0 12
39881: NOT
39882: IFFALSE 39900
// begin x := x + 2 ;
39884: LD_ADDR_VAR 0 13
39888: PUSH
39889: LD_VAR 0 13
39893: PUSH
39894: LD_INT 2
39896: PLUS
39897: ST_TO_ADDR
// continue ;
39898: GO 39698
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39900: LD_VAR 0 12
39904: PUSH
39905: LD_INT 1
39907: ARRAY
39908: PPUSH
39909: CALL_OW 266
39913: PUSH
39914: LD_INT 5
39916: EQUAL
39917: IFFALSE 39991
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39919: LD_VAR 0 12
39923: PUSH
39924: LD_INT 1
39926: ARRAY
39927: PPUSH
39928: CALL_OW 313
39932: PUSH
39933: LD_INT 3
39935: LESS
39936: IFFALSE 39972
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39938: LD_INT 0
39940: PPUSH
39941: LD_INT 5
39943: PUSH
39944: LD_INT 8
39946: PUSH
39947: LD_INT 9
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: PUSH
39955: LD_VAR 0 17
39959: ARRAY
39960: PPUSH
39961: LD_VAR 0 4
39965: PPUSH
39966: CALL_OW 380
39970: GO 39989
// PrepareHuman ( false , i , skill ) ;
39972: LD_INT 0
39974: PPUSH
39975: LD_VAR 0 8
39979: PPUSH
39980: LD_VAR 0 4
39984: PPUSH
39985: CALL_OW 380
// end else
39989: GO 40008
// PrepareHuman ( false , i , skill ) ;
39991: LD_INT 0
39993: PPUSH
39994: LD_VAR 0 8
39998: PPUSH
39999: LD_VAR 0 4
40003: PPUSH
40004: CALL_OW 380
// un := CreateHuman ;
40008: LD_ADDR_VAR 0 14
40012: PUSH
40013: CALL_OW 44
40017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40018: LD_ADDR_VAR 0 7
40022: PUSH
40023: LD_VAR 0 7
40027: PPUSH
40028: LD_INT 1
40030: PPUSH
40031: LD_VAR 0 14
40035: PPUSH
40036: CALL_OW 2
40040: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40041: LD_VAR 0 14
40045: PPUSH
40046: LD_VAR 0 12
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: PPUSH
40055: CALL_OW 52
// end ;
40059: GO 39698
40061: POP
40062: POP
// end ;
40063: GO 39000
40065: POP
40066: POP
// result := result ^ buildings ;
40067: LD_ADDR_VAR 0 7
40071: PUSH
40072: LD_VAR 0 7
40076: PUSH
40077: LD_VAR 0 18
40081: ADD
40082: ST_TO_ADDR
// end else
40083: GO 40226
// begin for i = 1 to personel do
40085: LD_ADDR_VAR 0 8
40089: PUSH
40090: DOUBLE
40091: LD_INT 1
40093: DEC
40094: ST_TO_ADDR
40095: LD_VAR 0 6
40099: PUSH
40100: FOR_TO
40101: IFFALSE 40224
// begin if i > 4 then
40103: LD_VAR 0 8
40107: PUSH
40108: LD_INT 4
40110: GREATER
40111: IFFALSE 40115
// break ;
40113: GO 40224
// x := personel [ i ] ;
40115: LD_ADDR_VAR 0 13
40119: PUSH
40120: LD_VAR 0 6
40124: PUSH
40125: LD_VAR 0 8
40129: ARRAY
40130: ST_TO_ADDR
// if x = - 1 then
40131: LD_VAR 0 13
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: EQUAL
40140: IFFALSE 40144
// continue ;
40142: GO 40100
// PrepareHuman ( false , i , skill ) ;
40144: LD_INT 0
40146: PPUSH
40147: LD_VAR 0 8
40151: PPUSH
40152: LD_VAR 0 4
40156: PPUSH
40157: CALL_OW 380
// un := CreateHuman ;
40161: LD_ADDR_VAR 0 14
40165: PUSH
40166: CALL_OW 44
40170: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40171: LD_VAR 0 14
40175: PPUSH
40176: LD_VAR 0 1
40180: PPUSH
40181: CALL_OW 250
40185: PPUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 251
40195: PPUSH
40196: LD_INT 10
40198: PPUSH
40199: LD_INT 0
40201: PPUSH
40202: CALL_OW 50
// result := result ^ un ;
40206: LD_ADDR_VAR 0 7
40210: PUSH
40211: LD_VAR 0 7
40215: PUSH
40216: LD_VAR 0 14
40220: ADD
40221: ST_TO_ADDR
// end ;
40222: GO 40100
40224: POP
40225: POP
// end ; end ;
40226: LD_VAR 0 7
40230: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40231: LD_INT 0
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
// result := false ;
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_INT 0
40256: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40257: LD_VAR 0 1
40261: NOT
40262: PUSH
40263: LD_VAR 0 1
40267: PPUSH
40268: CALL_OW 266
40272: PUSH
40273: LD_INT 32
40275: PUSH
40276: LD_INT 33
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: IN
40283: NOT
40284: OR
40285: IFFALSE 40289
// exit ;
40287: GO 41398
// nat := GetNation ( tower ) ;
40289: LD_ADDR_VAR 0 12
40293: PUSH
40294: LD_VAR 0 1
40298: PPUSH
40299: CALL_OW 248
40303: ST_TO_ADDR
// side := GetSide ( tower ) ;
40304: LD_ADDR_VAR 0 16
40308: PUSH
40309: LD_VAR 0 1
40313: PPUSH
40314: CALL_OW 255
40318: ST_TO_ADDR
// x := GetX ( tower ) ;
40319: LD_ADDR_VAR 0 10
40323: PUSH
40324: LD_VAR 0 1
40328: PPUSH
40329: CALL_OW 250
40333: ST_TO_ADDR
// y := GetY ( tower ) ;
40334: LD_ADDR_VAR 0 11
40338: PUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: CALL_OW 251
40348: ST_TO_ADDR
// if not x or not y then
40349: LD_VAR 0 10
40353: NOT
40354: PUSH
40355: LD_VAR 0 11
40359: NOT
40360: OR
40361: IFFALSE 40365
// exit ;
40363: GO 41398
// weapon := 0 ;
40365: LD_ADDR_VAR 0 18
40369: PUSH
40370: LD_INT 0
40372: ST_TO_ADDR
// fac_list := [ ] ;
40373: LD_ADDR_VAR 0 17
40377: PUSH
40378: EMPTY
40379: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40380: LD_ADDR_VAR 0 6
40384: PUSH
40385: LD_VAR 0 1
40389: PPUSH
40390: CALL_OW 274
40394: PPUSH
40395: LD_VAR 0 2
40399: PPUSH
40400: LD_INT 0
40402: PPUSH
40403: CALL 37969 0 3
40407: PPUSH
40408: LD_INT 30
40410: PUSH
40411: LD_INT 3
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PPUSH
40418: CALL_OW 72
40422: ST_TO_ADDR
// if not factories then
40423: LD_VAR 0 6
40427: NOT
40428: IFFALSE 40432
// exit ;
40430: GO 41398
// for i in factories do
40432: LD_ADDR_VAR 0 8
40436: PUSH
40437: LD_VAR 0 6
40441: PUSH
40442: FOR_IN
40443: IFFALSE 40468
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40445: LD_ADDR_VAR 0 17
40449: PUSH
40450: LD_VAR 0 17
40454: PUSH
40455: LD_VAR 0 8
40459: PPUSH
40460: CALL_OW 478
40464: UNION
40465: ST_TO_ADDR
40466: GO 40442
40468: POP
40469: POP
// if not fac_list then
40470: LD_VAR 0 17
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 41398
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: LD_INT 5
40489: PUSH
40490: LD_INT 9
40492: PUSH
40493: LD_INT 10
40495: PUSH
40496: LD_INT 6
40498: PUSH
40499: LD_INT 7
40501: PUSH
40502: LD_INT 11
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 27
40516: PUSH
40517: LD_INT 28
40519: PUSH
40520: LD_INT 26
40522: PUSH
40523: LD_INT 30
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 43
40534: PUSH
40535: LD_INT 44
40537: PUSH
40538: LD_INT 46
40540: PUSH
40541: LD_INT 45
40543: PUSH
40544: LD_INT 47
40546: PUSH
40547: LD_INT 49
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: LD_VAR 0 12
40567: ARRAY
40568: ST_TO_ADDR
// list := list isect fac_list ;
40569: LD_ADDR_VAR 0 5
40573: PUSH
40574: LD_VAR 0 5
40578: PUSH
40579: LD_VAR 0 17
40583: ISECT
40584: ST_TO_ADDR
// if not list then
40585: LD_VAR 0 5
40589: NOT
40590: IFFALSE 40594
// exit ;
40592: GO 41398
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40594: LD_VAR 0 12
40598: PUSH
40599: LD_INT 3
40601: EQUAL
40602: PUSH
40603: LD_INT 49
40605: PUSH
40606: LD_VAR 0 5
40610: IN
40611: AND
40612: PUSH
40613: LD_INT 31
40615: PPUSH
40616: LD_VAR 0 16
40620: PPUSH
40621: CALL_OW 321
40625: PUSH
40626: LD_INT 2
40628: EQUAL
40629: AND
40630: IFFALSE 40690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40632: LD_INT 22
40634: PUSH
40635: LD_VAR 0 16
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 35
40646: PUSH
40647: LD_INT 49
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 91
40656: PUSH
40657: LD_VAR 0 1
40661: PUSH
40662: LD_INT 10
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: PPUSH
40675: CALL_OW 69
40679: NOT
40680: IFFALSE 40690
// weapon := ru_time_lapser ;
40682: LD_ADDR_VAR 0 18
40686: PUSH
40687: LD_INT 49
40689: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40690: LD_VAR 0 12
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: IN
40705: PUSH
40706: LD_INT 11
40708: PUSH
40709: LD_VAR 0 5
40713: IN
40714: PUSH
40715: LD_INT 30
40717: PUSH
40718: LD_VAR 0 5
40722: IN
40723: OR
40724: AND
40725: PUSH
40726: LD_INT 6
40728: PPUSH
40729: LD_VAR 0 16
40733: PPUSH
40734: CALL_OW 321
40738: PUSH
40739: LD_INT 2
40741: EQUAL
40742: AND
40743: IFFALSE 40908
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40745: LD_INT 22
40747: PUSH
40748: LD_VAR 0 16
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 35
40762: PUSH
40763: LD_INT 11
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 35
40772: PUSH
40773: LD_INT 30
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 91
40787: PUSH
40788: LD_VAR 0 1
40792: PUSH
40793: LD_INT 18
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: LIST
40805: PPUSH
40806: CALL_OW 69
40810: NOT
40811: PUSH
40812: LD_INT 22
40814: PUSH
40815: LD_VAR 0 16
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 30
40829: PUSH
40830: LD_INT 32
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 30
40839: PUSH
40840: LD_INT 33
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 91
40854: PUSH
40855: LD_VAR 0 1
40859: PUSH
40860: LD_INT 12
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: PPUSH
40876: CALL_OW 69
40880: PUSH
40881: LD_INT 2
40883: GREATER
40884: AND
40885: IFFALSE 40908
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40887: LD_ADDR_VAR 0 18
40891: PUSH
40892: LD_INT 11
40894: PUSH
40895: LD_INT 30
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_VAR 0 12
40906: ARRAY
40907: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40908: LD_VAR 0 18
40912: NOT
40913: PUSH
40914: LD_INT 40
40916: PPUSH
40917: LD_VAR 0 16
40921: PPUSH
40922: CALL_OW 321
40926: PUSH
40927: LD_INT 2
40929: EQUAL
40930: AND
40931: PUSH
40932: LD_INT 7
40934: PUSH
40935: LD_VAR 0 5
40939: IN
40940: PUSH
40941: LD_INT 28
40943: PUSH
40944: LD_VAR 0 5
40948: IN
40949: OR
40950: PUSH
40951: LD_INT 45
40953: PUSH
40954: LD_VAR 0 5
40958: IN
40959: OR
40960: AND
40961: IFFALSE 41215
// begin hex := GetHexInfo ( x , y ) ;
40963: LD_ADDR_VAR 0 4
40967: PUSH
40968: LD_VAR 0 10
40972: PPUSH
40973: LD_VAR 0 11
40977: PPUSH
40978: CALL_OW 546
40982: ST_TO_ADDR
// if hex [ 1 ] then
40983: LD_VAR 0 4
40987: PUSH
40988: LD_INT 1
40990: ARRAY
40991: IFFALSE 40995
// exit ;
40993: GO 41398
// height := hex [ 2 ] ;
40995: LD_ADDR_VAR 0 15
40999: PUSH
41000: LD_VAR 0 4
41004: PUSH
41005: LD_INT 2
41007: ARRAY
41008: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41009: LD_ADDR_VAR 0 14
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: LD_INT 5
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
// for i in tmp do
41032: LD_ADDR_VAR 0 8
41036: PUSH
41037: LD_VAR 0 14
41041: PUSH
41042: FOR_IN
41043: IFFALSE 41213
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41045: LD_ADDR_VAR 0 9
41049: PUSH
41050: LD_VAR 0 10
41054: PPUSH
41055: LD_VAR 0 8
41059: PPUSH
41060: LD_INT 5
41062: PPUSH
41063: CALL_OW 272
41067: PUSH
41068: LD_VAR 0 11
41072: PPUSH
41073: LD_VAR 0 8
41077: PPUSH
41078: LD_INT 5
41080: PPUSH
41081: CALL_OW 273
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41090: LD_VAR 0 9
41094: PUSH
41095: LD_INT 1
41097: ARRAY
41098: PPUSH
41099: LD_VAR 0 9
41103: PUSH
41104: LD_INT 2
41106: ARRAY
41107: PPUSH
41108: CALL_OW 488
41112: IFFALSE 41211
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41114: LD_ADDR_VAR 0 4
41118: PUSH
41119: LD_VAR 0 9
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: LD_VAR 0 9
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PPUSH
41137: CALL_OW 546
41141: ST_TO_ADDR
// if hex [ 1 ] then
41142: LD_VAR 0 4
41146: PUSH
41147: LD_INT 1
41149: ARRAY
41150: IFFALSE 41154
// continue ;
41152: GO 41042
// h := hex [ 2 ] ;
41154: LD_ADDR_VAR 0 13
41158: PUSH
41159: LD_VAR 0 4
41163: PUSH
41164: LD_INT 2
41166: ARRAY
41167: ST_TO_ADDR
// if h + 7 < height then
41168: LD_VAR 0 13
41172: PUSH
41173: LD_INT 7
41175: PLUS
41176: PUSH
41177: LD_VAR 0 15
41181: LESS
41182: IFFALSE 41211
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41184: LD_ADDR_VAR 0 18
41188: PUSH
41189: LD_INT 7
41191: PUSH
41192: LD_INT 28
41194: PUSH
41195: LD_INT 45
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: PUSH
41203: LD_VAR 0 12
41207: ARRAY
41208: ST_TO_ADDR
// break ;
41209: GO 41213
// end ; end ; end ;
41211: GO 41042
41213: POP
41214: POP
// end ; if not weapon then
41215: LD_VAR 0 18
41219: NOT
41220: IFFALSE 41280
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41222: LD_ADDR_VAR 0 5
41226: PUSH
41227: LD_VAR 0 5
41231: PUSH
41232: LD_INT 11
41234: PUSH
41235: LD_INT 30
41237: PUSH
41238: LD_INT 49
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: DIFF
41246: ST_TO_ADDR
// if not list then
41247: LD_VAR 0 5
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41398
// weapon := list [ rand ( 1 , list ) ] ;
41256: LD_ADDR_VAR 0 18
41260: PUSH
41261: LD_VAR 0 5
41265: PUSH
41266: LD_INT 1
41268: PPUSH
41269: LD_VAR 0 5
41273: PPUSH
41274: CALL_OW 12
41278: ARRAY
41279: ST_TO_ADDR
// end ; if weapon then
41280: LD_VAR 0 18
41284: IFFALSE 41398
// begin tmp := CostOfWeapon ( weapon ) ;
41286: LD_ADDR_VAR 0 14
41290: PUSH
41291: LD_VAR 0 18
41295: PPUSH
41296: CALL_OW 451
41300: ST_TO_ADDR
// j := GetBase ( tower ) ;
41301: LD_ADDR_VAR 0 9
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: CALL_OW 274
41315: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41316: LD_VAR 0 9
41320: PPUSH
41321: LD_INT 1
41323: PPUSH
41324: CALL_OW 275
41328: PUSH
41329: LD_VAR 0 14
41333: PUSH
41334: LD_INT 1
41336: ARRAY
41337: GREATEREQUAL
41338: PUSH
41339: LD_VAR 0 9
41343: PPUSH
41344: LD_INT 2
41346: PPUSH
41347: CALL_OW 275
41351: PUSH
41352: LD_VAR 0 14
41356: PUSH
41357: LD_INT 2
41359: ARRAY
41360: GREATEREQUAL
41361: AND
41362: PUSH
41363: LD_VAR 0 9
41367: PPUSH
41368: LD_INT 3
41370: PPUSH
41371: CALL_OW 275
41375: PUSH
41376: LD_VAR 0 14
41380: PUSH
41381: LD_INT 3
41383: ARRAY
41384: GREATEREQUAL
41385: AND
41386: IFFALSE 41398
// result := weapon ;
41388: LD_ADDR_VAR 0 3
41392: PUSH
41393: LD_VAR 0 18
41397: ST_TO_ADDR
// end ; end ;
41398: LD_VAR 0 3
41402: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41403: LD_INT 0
41405: PPUSH
41406: PPUSH
// result := true ;
41407: LD_ADDR_VAR 0 3
41411: PUSH
41412: LD_INT 1
41414: ST_TO_ADDR
// if array1 = array2 then
41415: LD_VAR 0 1
41419: PUSH
41420: LD_VAR 0 2
41424: EQUAL
41425: IFFALSE 41485
// begin for i = 1 to array1 do
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: DOUBLE
41433: LD_INT 1
41435: DEC
41436: ST_TO_ADDR
41437: LD_VAR 0 1
41441: PUSH
41442: FOR_TO
41443: IFFALSE 41481
// if array1 [ i ] <> array2 [ i ] then
41445: LD_VAR 0 1
41449: PUSH
41450: LD_VAR 0 4
41454: ARRAY
41455: PUSH
41456: LD_VAR 0 2
41460: PUSH
41461: LD_VAR 0 4
41465: ARRAY
41466: NONEQUAL
41467: IFFALSE 41479
// begin result := false ;
41469: LD_ADDR_VAR 0 3
41473: PUSH
41474: LD_INT 0
41476: ST_TO_ADDR
// break ;
41477: GO 41481
// end ;
41479: GO 41442
41481: POP
41482: POP
// end else
41483: GO 41493
// result := false ;
41485: LD_ADDR_VAR 0 3
41489: PUSH
41490: LD_INT 0
41492: ST_TO_ADDR
// end ;
41493: LD_VAR 0 3
41497: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
// if not array1 or not array2 then
41502: LD_VAR 0 1
41506: NOT
41507: PUSH
41508: LD_VAR 0 2
41512: NOT
41513: OR
41514: IFFALSE 41518
// exit ;
41516: GO 41582
// result := true ;
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_INT 1
41525: ST_TO_ADDR
// for i = 1 to array1 do
41526: LD_ADDR_VAR 0 4
41530: PUSH
41531: DOUBLE
41532: LD_INT 1
41534: DEC
41535: ST_TO_ADDR
41536: LD_VAR 0 1
41540: PUSH
41541: FOR_TO
41542: IFFALSE 41580
// if array1 [ i ] <> array2 [ i ] then
41544: LD_VAR 0 1
41548: PUSH
41549: LD_VAR 0 4
41553: ARRAY
41554: PUSH
41555: LD_VAR 0 2
41559: PUSH
41560: LD_VAR 0 4
41564: ARRAY
41565: NONEQUAL
41566: IFFALSE 41578
// begin result := false ;
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_INT 0
41575: ST_TO_ADDR
// break ;
41576: GO 41580
// end ;
41578: GO 41541
41580: POP
41581: POP
// end ;
41582: LD_VAR 0 3
41586: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41587: LD_INT 0
41589: PPUSH
41590: PPUSH
41591: PPUSH
// pom := GetBase ( fac ) ;
41592: LD_ADDR_VAR 0 5
41596: PUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: CALL_OW 274
41606: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41607: LD_ADDR_VAR 0 4
41611: PUSH
41612: LD_VAR 0 2
41616: PUSH
41617: LD_INT 1
41619: ARRAY
41620: PPUSH
41621: LD_VAR 0 2
41625: PUSH
41626: LD_INT 2
41628: ARRAY
41629: PPUSH
41630: LD_VAR 0 2
41634: PUSH
41635: LD_INT 3
41637: ARRAY
41638: PPUSH
41639: LD_VAR 0 2
41643: PUSH
41644: LD_INT 4
41646: ARRAY
41647: PPUSH
41648: CALL_OW 449
41652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41653: LD_ADDR_VAR 0 3
41657: PUSH
41658: LD_VAR 0 5
41662: PPUSH
41663: LD_INT 1
41665: PPUSH
41666: CALL_OW 275
41670: PUSH
41671: LD_VAR 0 4
41675: PUSH
41676: LD_INT 1
41678: ARRAY
41679: GREATEREQUAL
41680: PUSH
41681: LD_VAR 0 5
41685: PPUSH
41686: LD_INT 2
41688: PPUSH
41689: CALL_OW 275
41693: PUSH
41694: LD_VAR 0 4
41698: PUSH
41699: LD_INT 2
41701: ARRAY
41702: GREATEREQUAL
41703: AND
41704: PUSH
41705: LD_VAR 0 5
41709: PPUSH
41710: LD_INT 3
41712: PPUSH
41713: CALL_OW 275
41717: PUSH
41718: LD_VAR 0 4
41722: PUSH
41723: LD_INT 3
41725: ARRAY
41726: GREATEREQUAL
41727: AND
41728: ST_TO_ADDR
// end ;
41729: LD_VAR 0 3
41733: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
// pom := GetBase ( building ) ;
41740: LD_ADDR_VAR 0 3
41744: PUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: CALL_OW 274
41754: ST_TO_ADDR
// if not pom then
41755: LD_VAR 0 3
41759: NOT
41760: IFFALSE 41764
// exit ;
41762: GO 41934
// btype := GetBType ( building ) ;
41764: LD_ADDR_VAR 0 5
41768: PUSH
41769: LD_VAR 0 1
41773: PPUSH
41774: CALL_OW 266
41778: ST_TO_ADDR
// if btype = b_armoury then
41779: LD_VAR 0 5
41783: PUSH
41784: LD_INT 4
41786: EQUAL
41787: IFFALSE 41797
// btype := b_barracks ;
41789: LD_ADDR_VAR 0 5
41793: PUSH
41794: LD_INT 5
41796: ST_TO_ADDR
// if btype = b_depot then
41797: LD_VAR 0 5
41801: PUSH
41802: LD_INT 0
41804: EQUAL
41805: IFFALSE 41815
// btype := b_warehouse ;
41807: LD_ADDR_VAR 0 5
41811: PUSH
41812: LD_INT 1
41814: ST_TO_ADDR
// if btype = b_workshop then
41815: LD_VAR 0 5
41819: PUSH
41820: LD_INT 2
41822: EQUAL
41823: IFFALSE 41833
// btype := b_factory ;
41825: LD_ADDR_VAR 0 5
41829: PUSH
41830: LD_INT 3
41832: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41833: LD_ADDR_VAR 0 4
41837: PUSH
41838: LD_VAR 0 5
41842: PPUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 248
41852: PPUSH
41853: CALL_OW 450
41857: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41858: LD_ADDR_VAR 0 2
41862: PUSH
41863: LD_VAR 0 3
41867: PPUSH
41868: LD_INT 1
41870: PPUSH
41871: CALL_OW 275
41875: PUSH
41876: LD_VAR 0 4
41880: PUSH
41881: LD_INT 1
41883: ARRAY
41884: GREATEREQUAL
41885: PUSH
41886: LD_VAR 0 3
41890: PPUSH
41891: LD_INT 2
41893: PPUSH
41894: CALL_OW 275
41898: PUSH
41899: LD_VAR 0 4
41903: PUSH
41904: LD_INT 2
41906: ARRAY
41907: GREATEREQUAL
41908: AND
41909: PUSH
41910: LD_VAR 0 3
41914: PPUSH
41915: LD_INT 3
41917: PPUSH
41918: CALL_OW 275
41922: PUSH
41923: LD_VAR 0 4
41927: PUSH
41928: LD_INT 3
41930: ARRAY
41931: GREATEREQUAL
41932: AND
41933: ST_TO_ADDR
// end ;
41934: LD_VAR 0 2
41938: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41939: LD_INT 0
41941: PPUSH
41942: PPUSH
41943: PPUSH
// pom := GetBase ( building ) ;
41944: LD_ADDR_VAR 0 4
41948: PUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: CALL_OW 274
41958: ST_TO_ADDR
// if not pom then
41959: LD_VAR 0 4
41963: NOT
41964: IFFALSE 41968
// exit ;
41966: GO 42069
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41968: LD_ADDR_VAR 0 5
41972: PUSH
41973: LD_VAR 0 2
41977: PPUSH
41978: LD_VAR 0 1
41982: PPUSH
41983: CALL_OW 248
41987: PPUSH
41988: CALL_OW 450
41992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41993: LD_ADDR_VAR 0 3
41997: PUSH
41998: LD_VAR 0 4
42002: PPUSH
42003: LD_INT 1
42005: PPUSH
42006: CALL_OW 275
42010: PUSH
42011: LD_VAR 0 5
42015: PUSH
42016: LD_INT 1
42018: ARRAY
42019: GREATEREQUAL
42020: PUSH
42021: LD_VAR 0 4
42025: PPUSH
42026: LD_INT 2
42028: PPUSH
42029: CALL_OW 275
42033: PUSH
42034: LD_VAR 0 5
42038: PUSH
42039: LD_INT 2
42041: ARRAY
42042: GREATEREQUAL
42043: AND
42044: PUSH
42045: LD_VAR 0 4
42049: PPUSH
42050: LD_INT 3
42052: PPUSH
42053: CALL_OW 275
42057: PUSH
42058: LD_VAR 0 5
42062: PUSH
42063: LD_INT 3
42065: ARRAY
42066: GREATEREQUAL
42067: AND
42068: ST_TO_ADDR
// end ;
42069: LD_VAR 0 3
42073: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42074: LD_INT 0
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
// result := false ;
42087: LD_ADDR_VAR 0 8
42091: PUSH
42092: LD_INT 0
42094: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42095: LD_VAR 0 5
42099: NOT
42100: PUSH
42101: LD_VAR 0 1
42105: NOT
42106: OR
42107: PUSH
42108: LD_VAR 0 2
42112: NOT
42113: OR
42114: PUSH
42115: LD_VAR 0 3
42119: NOT
42120: OR
42121: IFFALSE 42125
// exit ;
42123: GO 42939
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42125: LD_ADDR_VAR 0 14
42129: PUSH
42130: LD_VAR 0 1
42134: PPUSH
42135: LD_VAR 0 2
42139: PPUSH
42140: LD_VAR 0 3
42144: PPUSH
42145: LD_VAR 0 4
42149: PPUSH
42150: LD_VAR 0 5
42154: PUSH
42155: LD_INT 1
42157: ARRAY
42158: PPUSH
42159: CALL_OW 248
42163: PPUSH
42164: LD_INT 0
42166: PPUSH
42167: CALL 44176 0 6
42171: ST_TO_ADDR
// if not hexes then
42172: LD_VAR 0 14
42176: NOT
42177: IFFALSE 42181
// exit ;
42179: GO 42939
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42181: LD_ADDR_VAR 0 17
42185: PUSH
42186: LD_VAR 0 5
42190: PPUSH
42191: LD_INT 22
42193: PUSH
42194: LD_VAR 0 13
42198: PPUSH
42199: CALL_OW 255
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 2
42210: PUSH
42211: LD_INT 30
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 30
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PPUSH
42240: CALL_OW 72
42244: ST_TO_ADDR
// for i = 1 to hexes do
42245: LD_ADDR_VAR 0 9
42249: PUSH
42250: DOUBLE
42251: LD_INT 1
42253: DEC
42254: ST_TO_ADDR
42255: LD_VAR 0 14
42259: PUSH
42260: FOR_TO
42261: IFFALSE 42937
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42263: LD_ADDR_VAR 0 13
42267: PUSH
42268: LD_VAR 0 14
42272: PUSH
42273: LD_VAR 0 9
42277: ARRAY
42278: PUSH
42279: LD_INT 1
42281: ARRAY
42282: PPUSH
42283: LD_VAR 0 14
42287: PUSH
42288: LD_VAR 0 9
42292: ARRAY
42293: PUSH
42294: LD_INT 2
42296: ARRAY
42297: PPUSH
42298: CALL_OW 428
42302: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42303: LD_VAR 0 14
42307: PUSH
42308: LD_VAR 0 9
42312: ARRAY
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 14
42322: PUSH
42323: LD_VAR 0 9
42327: ARRAY
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: PPUSH
42333: CALL_OW 351
42337: PUSH
42338: LD_VAR 0 14
42342: PUSH
42343: LD_VAR 0 9
42347: ARRAY
42348: PUSH
42349: LD_INT 1
42351: ARRAY
42352: PPUSH
42353: LD_VAR 0 14
42357: PUSH
42358: LD_VAR 0 9
42362: ARRAY
42363: PUSH
42364: LD_INT 2
42366: ARRAY
42367: PPUSH
42368: CALL_OW 488
42372: NOT
42373: OR
42374: PUSH
42375: LD_VAR 0 13
42379: PPUSH
42380: CALL_OW 247
42384: PUSH
42385: LD_INT 3
42387: EQUAL
42388: OR
42389: IFFALSE 42395
// exit ;
42391: POP
42392: POP
42393: GO 42939
// if not tmp then
42395: LD_VAR 0 13
42399: NOT
42400: IFFALSE 42404
// continue ;
42402: GO 42260
// result := true ;
42404: LD_ADDR_VAR 0 8
42408: PUSH
42409: LD_INT 1
42411: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42412: LD_VAR 0 6
42416: PUSH
42417: LD_VAR 0 13
42421: PPUSH
42422: CALL_OW 247
42426: PUSH
42427: LD_INT 2
42429: EQUAL
42430: AND
42431: PUSH
42432: LD_VAR 0 13
42436: PPUSH
42437: CALL_OW 263
42441: PUSH
42442: LD_INT 1
42444: EQUAL
42445: AND
42446: IFFALSE 42610
// begin if IsDrivenBy ( tmp ) then
42448: LD_VAR 0 13
42452: PPUSH
42453: CALL_OW 311
42457: IFFALSE 42461
// continue ;
42459: GO 42260
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42461: LD_VAR 0 6
42465: PPUSH
42466: LD_INT 3
42468: PUSH
42469: LD_INT 60
42471: PUSH
42472: EMPTY
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 3
42481: PUSH
42482: LD_INT 55
42484: PUSH
42485: EMPTY
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PPUSH
42496: CALL_OW 72
42500: IFFALSE 42608
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42502: LD_ADDR_VAR 0 18
42506: PUSH
42507: LD_VAR 0 6
42511: PPUSH
42512: LD_INT 3
42514: PUSH
42515: LD_INT 60
42517: PUSH
42518: EMPTY
42519: LIST
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: LD_INT 55
42530: PUSH
42531: EMPTY
42532: LIST
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PPUSH
42542: CALL_OW 72
42546: PUSH
42547: LD_INT 1
42549: ARRAY
42550: ST_TO_ADDR
// if IsInUnit ( driver ) then
42551: LD_VAR 0 18
42555: PPUSH
42556: CALL_OW 310
42560: IFFALSE 42571
// ComExit ( driver ) ;
42562: LD_VAR 0 18
42566: PPUSH
42567: CALL 67360 0 1
// AddComEnterUnit ( driver , tmp ) ;
42571: LD_VAR 0 18
42575: PPUSH
42576: LD_VAR 0 13
42580: PPUSH
42581: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42585: LD_VAR 0 18
42589: PPUSH
42590: LD_VAR 0 7
42594: PPUSH
42595: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42599: LD_VAR 0 18
42603: PPUSH
42604: CALL_OW 181
// end ; continue ;
42608: GO 42260
// end ; if not cleaners or not tmp in cleaners then
42610: LD_VAR 0 6
42614: NOT
42615: PUSH
42616: LD_VAR 0 13
42620: PUSH
42621: LD_VAR 0 6
42625: IN
42626: NOT
42627: OR
42628: IFFALSE 42935
// begin if dep then
42630: LD_VAR 0 17
42634: IFFALSE 42770
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42636: LD_ADDR_VAR 0 16
42640: PUSH
42641: LD_VAR 0 17
42645: PUSH
42646: LD_INT 1
42648: ARRAY
42649: PPUSH
42650: CALL_OW 250
42654: PPUSH
42655: LD_VAR 0 17
42659: PUSH
42660: LD_INT 1
42662: ARRAY
42663: PPUSH
42664: CALL_OW 254
42668: PPUSH
42669: LD_INT 5
42671: PPUSH
42672: CALL_OW 272
42676: PUSH
42677: LD_VAR 0 17
42681: PUSH
42682: LD_INT 1
42684: ARRAY
42685: PPUSH
42686: CALL_OW 251
42690: PPUSH
42691: LD_VAR 0 17
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: PPUSH
42700: CALL_OW 254
42704: PPUSH
42705: LD_INT 5
42707: PPUSH
42708: CALL_OW 273
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42717: LD_VAR 0 16
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: LD_VAR 0 16
42730: PUSH
42731: LD_INT 2
42733: ARRAY
42734: PPUSH
42735: CALL_OW 488
42739: IFFALSE 42770
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42741: LD_VAR 0 13
42745: PPUSH
42746: LD_VAR 0 16
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: PPUSH
42755: LD_VAR 0 16
42759: PUSH
42760: LD_INT 2
42762: ARRAY
42763: PPUSH
42764: CALL_OW 111
// continue ;
42768: GO 42260
// end ; end ; r := GetDir ( tmp ) ;
42770: LD_ADDR_VAR 0 15
42774: PUSH
42775: LD_VAR 0 13
42779: PPUSH
42780: CALL_OW 254
42784: ST_TO_ADDR
// if r = 5 then
42785: LD_VAR 0 15
42789: PUSH
42790: LD_INT 5
42792: EQUAL
42793: IFFALSE 42803
// r := 0 ;
42795: LD_ADDR_VAR 0 15
42799: PUSH
42800: LD_INT 0
42802: ST_TO_ADDR
// for j = r to 5 do
42803: LD_ADDR_VAR 0 10
42807: PUSH
42808: DOUBLE
42809: LD_VAR 0 15
42813: DEC
42814: ST_TO_ADDR
42815: LD_INT 5
42817: PUSH
42818: FOR_TO
42819: IFFALSE 42933
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42821: LD_ADDR_VAR 0 11
42825: PUSH
42826: LD_VAR 0 13
42830: PPUSH
42831: CALL_OW 250
42835: PPUSH
42836: LD_VAR 0 10
42840: PPUSH
42841: LD_INT 2
42843: PPUSH
42844: CALL_OW 272
42848: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42849: LD_ADDR_VAR 0 12
42853: PUSH
42854: LD_VAR 0 13
42858: PPUSH
42859: CALL_OW 251
42863: PPUSH
42864: LD_VAR 0 10
42868: PPUSH
42869: LD_INT 2
42871: PPUSH
42872: CALL_OW 273
42876: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42877: LD_VAR 0 11
42881: PPUSH
42882: LD_VAR 0 12
42886: PPUSH
42887: CALL_OW 488
42891: PUSH
42892: LD_VAR 0 11
42896: PPUSH
42897: LD_VAR 0 12
42901: PPUSH
42902: CALL_OW 428
42906: NOT
42907: AND
42908: IFFALSE 42931
// begin ComMoveXY ( tmp , _x , _y ) ;
42910: LD_VAR 0 13
42914: PPUSH
42915: LD_VAR 0 11
42919: PPUSH
42920: LD_VAR 0 12
42924: PPUSH
42925: CALL_OW 111
// break ;
42929: GO 42933
// end ; end ;
42931: GO 42818
42933: POP
42934: POP
// end ; end ;
42935: GO 42260
42937: POP
42938: POP
// end ;
42939: LD_VAR 0 8
42943: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42944: LD_INT 0
42946: PPUSH
// result := true ;
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: LD_INT 1
42954: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42955: LD_VAR 0 2
42959: PUSH
42960: LD_INT 24
42962: DOUBLE
42963: EQUAL
42964: IFTRUE 42974
42966: LD_INT 33
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 42999
42974: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42975: LD_ADDR_VAR 0 3
42979: PUSH
42980: LD_INT 32
42982: PPUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: CALL_OW 321
42992: PUSH
42993: LD_INT 2
42995: EQUAL
42996: ST_TO_ADDR
42997: GO 43319
42999: LD_INT 20
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43007
43005: GO 43032
43007: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43008: LD_ADDR_VAR 0 3
43012: PUSH
43013: LD_INT 6
43015: PPUSH
43016: LD_VAR 0 1
43020: PPUSH
43021: CALL_OW 321
43025: PUSH
43026: LD_INT 2
43028: EQUAL
43029: ST_TO_ADDR
43030: GO 43319
43032: LD_INT 22
43034: DOUBLE
43035: EQUAL
43036: IFTRUE 43046
43038: LD_INT 36
43040: DOUBLE
43041: EQUAL
43042: IFTRUE 43046
43044: GO 43071
43046: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43047: LD_ADDR_VAR 0 3
43051: PUSH
43052: LD_INT 15
43054: PPUSH
43055: LD_VAR 0 1
43059: PPUSH
43060: CALL_OW 321
43064: PUSH
43065: LD_INT 2
43067: EQUAL
43068: ST_TO_ADDR
43069: GO 43319
43071: LD_INT 30
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43079
43077: GO 43104
43079: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43080: LD_ADDR_VAR 0 3
43084: PUSH
43085: LD_INT 20
43087: PPUSH
43088: LD_VAR 0 1
43092: PPUSH
43093: CALL_OW 321
43097: PUSH
43098: LD_INT 2
43100: EQUAL
43101: ST_TO_ADDR
43102: GO 43319
43104: LD_INT 28
43106: DOUBLE
43107: EQUAL
43108: IFTRUE 43118
43110: LD_INT 21
43112: DOUBLE
43113: EQUAL
43114: IFTRUE 43118
43116: GO 43143
43118: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43119: LD_ADDR_VAR 0 3
43123: PUSH
43124: LD_INT 21
43126: PPUSH
43127: LD_VAR 0 1
43131: PPUSH
43132: CALL_OW 321
43136: PUSH
43137: LD_INT 2
43139: EQUAL
43140: ST_TO_ADDR
43141: GO 43319
43143: LD_INT 16
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43178
43151: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43152: LD_ADDR_VAR 0 3
43156: PUSH
43157: LD_EXP 38
43161: PPUSH
43162: LD_VAR 0 1
43166: PPUSH
43167: CALL_OW 321
43171: PUSH
43172: LD_INT 2
43174: EQUAL
43175: ST_TO_ADDR
43176: GO 43319
43178: LD_INT 19
43180: DOUBLE
43181: EQUAL
43182: IFTRUE 43192
43184: LD_INT 23
43186: DOUBLE
43187: EQUAL
43188: IFTRUE 43192
43190: GO 43219
43192: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43193: LD_ADDR_VAR 0 3
43197: PUSH
43198: LD_EXP 37
43202: PPUSH
43203: LD_VAR 0 1
43207: PPUSH
43208: CALL_OW 321
43212: PUSH
43213: LD_INT 2
43215: EQUAL
43216: ST_TO_ADDR
43217: GO 43319
43219: LD_INT 17
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43227
43225: GO 43252
43227: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43228: LD_ADDR_VAR 0 3
43232: PUSH
43233: LD_INT 39
43235: PPUSH
43236: LD_VAR 0 1
43240: PPUSH
43241: CALL_OW 321
43245: PUSH
43246: LD_INT 2
43248: EQUAL
43249: ST_TO_ADDR
43250: GO 43319
43252: LD_INT 18
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43285
43260: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43261: LD_ADDR_VAR 0 3
43265: PUSH
43266: LD_INT 40
43268: PPUSH
43269: LD_VAR 0 1
43273: PPUSH
43274: CALL_OW 321
43278: PUSH
43279: LD_INT 2
43281: EQUAL
43282: ST_TO_ADDR
43283: GO 43319
43285: LD_INT 27
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43293
43291: GO 43318
43293: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43294: LD_ADDR_VAR 0 3
43298: PUSH
43299: LD_INT 35
43301: PPUSH
43302: LD_VAR 0 1
43306: PPUSH
43307: CALL_OW 321
43311: PUSH
43312: LD_INT 2
43314: EQUAL
43315: ST_TO_ADDR
43316: GO 43319
43318: POP
// end ;
43319: LD_VAR 0 3
43323: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43324: LD_INT 0
43326: PPUSH
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
43334: PPUSH
43335: PPUSH
43336: PPUSH
// result := false ;
43337: LD_ADDR_VAR 0 6
43341: PUSH
43342: LD_INT 0
43344: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43345: LD_VAR 0 1
43349: NOT
43350: PUSH
43351: LD_VAR 0 1
43355: PPUSH
43356: CALL_OW 266
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: IN
43371: NOT
43372: OR
43373: PUSH
43374: LD_VAR 0 2
43378: NOT
43379: OR
43380: PUSH
43381: LD_VAR 0 5
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 4
43400: PUSH
43401: LD_INT 5
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: IN
43412: NOT
43413: OR
43414: PUSH
43415: LD_VAR 0 3
43419: PPUSH
43420: LD_VAR 0 4
43424: PPUSH
43425: CALL_OW 488
43429: NOT
43430: OR
43431: IFFALSE 43435
// exit ;
43433: GO 44171
// side := GetSide ( depot ) ;
43435: LD_ADDR_VAR 0 9
43439: PUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: CALL_OW 255
43449: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43450: LD_VAR 0 9
43454: PPUSH
43455: LD_VAR 0 2
43459: PPUSH
43460: CALL 42944 0 2
43464: NOT
43465: IFFALSE 43469
// exit ;
43467: GO 44171
// pom := GetBase ( depot ) ;
43469: LD_ADDR_VAR 0 10
43473: PUSH
43474: LD_VAR 0 1
43478: PPUSH
43479: CALL_OW 274
43483: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43484: LD_ADDR_VAR 0 11
43488: PUSH
43489: LD_VAR 0 2
43493: PPUSH
43494: LD_VAR 0 1
43498: PPUSH
43499: CALL_OW 248
43503: PPUSH
43504: CALL_OW 450
43508: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43509: LD_VAR 0 10
43513: PPUSH
43514: LD_INT 1
43516: PPUSH
43517: CALL_OW 275
43521: PUSH
43522: LD_VAR 0 11
43526: PUSH
43527: LD_INT 1
43529: ARRAY
43530: GREATEREQUAL
43531: PUSH
43532: LD_VAR 0 10
43536: PPUSH
43537: LD_INT 2
43539: PPUSH
43540: CALL_OW 275
43544: PUSH
43545: LD_VAR 0 11
43549: PUSH
43550: LD_INT 2
43552: ARRAY
43553: GREATEREQUAL
43554: AND
43555: PUSH
43556: LD_VAR 0 10
43560: PPUSH
43561: LD_INT 3
43563: PPUSH
43564: CALL_OW 275
43568: PUSH
43569: LD_VAR 0 11
43573: PUSH
43574: LD_INT 3
43576: ARRAY
43577: GREATEREQUAL
43578: AND
43579: NOT
43580: IFFALSE 43584
// exit ;
43582: GO 44171
// if GetBType ( depot ) = b_depot then
43584: LD_VAR 0 1
43588: PPUSH
43589: CALL_OW 266
43593: PUSH
43594: LD_INT 0
43596: EQUAL
43597: IFFALSE 43609
// dist := 28 else
43599: LD_ADDR_VAR 0 14
43603: PUSH
43604: LD_INT 28
43606: ST_TO_ADDR
43607: GO 43617
// dist := 36 ;
43609: LD_ADDR_VAR 0 14
43613: PUSH
43614: LD_INT 36
43616: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43617: LD_VAR 0 1
43621: PPUSH
43622: LD_VAR 0 3
43626: PPUSH
43627: LD_VAR 0 4
43631: PPUSH
43632: CALL_OW 297
43636: PUSH
43637: LD_VAR 0 14
43641: GREATER
43642: IFFALSE 43646
// exit ;
43644: GO 44171
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43646: LD_ADDR_VAR 0 12
43650: PUSH
43651: LD_VAR 0 2
43655: PPUSH
43656: LD_VAR 0 3
43660: PPUSH
43661: LD_VAR 0 4
43665: PPUSH
43666: LD_VAR 0 5
43670: PPUSH
43671: LD_VAR 0 1
43675: PPUSH
43676: CALL_OW 248
43680: PPUSH
43681: LD_INT 0
43683: PPUSH
43684: CALL 44176 0 6
43688: ST_TO_ADDR
// if not hexes then
43689: LD_VAR 0 12
43693: NOT
43694: IFFALSE 43698
// exit ;
43696: GO 44171
// hex := GetHexInfo ( x , y ) ;
43698: LD_ADDR_VAR 0 15
43702: PUSH
43703: LD_VAR 0 3
43707: PPUSH
43708: LD_VAR 0 4
43712: PPUSH
43713: CALL_OW 546
43717: ST_TO_ADDR
// if hex [ 1 ] then
43718: LD_VAR 0 15
43722: PUSH
43723: LD_INT 1
43725: ARRAY
43726: IFFALSE 43730
// exit ;
43728: GO 44171
// height := hex [ 2 ] ;
43730: LD_ADDR_VAR 0 13
43734: PUSH
43735: LD_VAR 0 15
43739: PUSH
43740: LD_INT 2
43742: ARRAY
43743: ST_TO_ADDR
// for i = 1 to hexes do
43744: LD_ADDR_VAR 0 7
43748: PUSH
43749: DOUBLE
43750: LD_INT 1
43752: DEC
43753: ST_TO_ADDR
43754: LD_VAR 0 12
43758: PUSH
43759: FOR_TO
43760: IFFALSE 44090
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43762: LD_VAR 0 12
43766: PUSH
43767: LD_VAR 0 7
43771: ARRAY
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PPUSH
43777: LD_VAR 0 12
43781: PUSH
43782: LD_VAR 0 7
43786: ARRAY
43787: PUSH
43788: LD_INT 2
43790: ARRAY
43791: PPUSH
43792: CALL_OW 488
43796: NOT
43797: PUSH
43798: LD_VAR 0 12
43802: PUSH
43803: LD_VAR 0 7
43807: ARRAY
43808: PUSH
43809: LD_INT 1
43811: ARRAY
43812: PPUSH
43813: LD_VAR 0 12
43817: PUSH
43818: LD_VAR 0 7
43822: ARRAY
43823: PUSH
43824: LD_INT 2
43826: ARRAY
43827: PPUSH
43828: CALL_OW 428
43832: PUSH
43833: LD_INT 0
43835: GREATER
43836: OR
43837: PUSH
43838: LD_VAR 0 12
43842: PUSH
43843: LD_VAR 0 7
43847: ARRAY
43848: PUSH
43849: LD_INT 1
43851: ARRAY
43852: PPUSH
43853: LD_VAR 0 12
43857: PUSH
43858: LD_VAR 0 7
43862: ARRAY
43863: PUSH
43864: LD_INT 2
43866: ARRAY
43867: PPUSH
43868: CALL_OW 351
43872: OR
43873: IFFALSE 43879
// exit ;
43875: POP
43876: POP
43877: GO 44171
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43879: LD_ADDR_VAR 0 8
43883: PUSH
43884: LD_VAR 0 12
43888: PUSH
43889: LD_VAR 0 7
43893: ARRAY
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: PPUSH
43899: LD_VAR 0 12
43903: PUSH
43904: LD_VAR 0 7
43908: ARRAY
43909: PUSH
43910: LD_INT 2
43912: ARRAY
43913: PPUSH
43914: CALL_OW 546
43918: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43919: LD_VAR 0 8
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: PUSH
43928: LD_VAR 0 8
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: PUSH
43937: LD_VAR 0 13
43941: PUSH
43942: LD_INT 2
43944: PLUS
43945: GREATER
43946: OR
43947: PUSH
43948: LD_VAR 0 8
43952: PUSH
43953: LD_INT 2
43955: ARRAY
43956: PUSH
43957: LD_VAR 0 13
43961: PUSH
43962: LD_INT 2
43964: MINUS
43965: LESS
43966: OR
43967: PUSH
43968: LD_VAR 0 8
43972: PUSH
43973: LD_INT 3
43975: ARRAY
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 8
43982: PUSH
43983: LD_INT 9
43985: PUSH
43986: LD_INT 10
43988: PUSH
43989: LD_INT 11
43991: PUSH
43992: LD_INT 12
43994: PUSH
43995: LD_INT 13
43997: PUSH
43998: LD_INT 16
44000: PUSH
44001: LD_INT 17
44003: PUSH
44004: LD_INT 18
44006: PUSH
44007: LD_INT 19
44009: PUSH
44010: LD_INT 20
44012: PUSH
44013: LD_INT 21
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: IN
44031: NOT
44032: OR
44033: PUSH
44034: LD_VAR 0 8
44038: PUSH
44039: LD_INT 5
44041: ARRAY
44042: NOT
44043: OR
44044: PUSH
44045: LD_VAR 0 8
44049: PUSH
44050: LD_INT 6
44052: ARRAY
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 7
44062: PUSH
44063: LD_INT 9
44065: PUSH
44066: LD_INT 10
44068: PUSH
44069: LD_INT 11
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: IN
44080: NOT
44081: OR
44082: IFFALSE 44088
// exit ;
44084: POP
44085: POP
44086: GO 44171
// end ;
44088: GO 43759
44090: POP
44091: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44092: LD_VAR 0 9
44096: PPUSH
44097: LD_VAR 0 3
44101: PPUSH
44102: LD_VAR 0 4
44106: PPUSH
44107: LD_INT 20
44109: PPUSH
44110: CALL 36117 0 4
44114: PUSH
44115: LD_INT 4
44117: ARRAY
44118: IFFALSE 44122
// exit ;
44120: GO 44171
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44122: LD_VAR 0 2
44126: PUSH
44127: LD_INT 29
44129: PUSH
44130: LD_INT 30
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: IN
44137: PUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: LD_VAR 0 4
44147: PPUSH
44148: LD_VAR 0 9
44152: PPUSH
44153: CALL_OW 440
44157: NOT
44158: AND
44159: IFFALSE 44163
// exit ;
44161: GO 44171
// result := true ;
44163: LD_ADDR_VAR 0 6
44167: PUSH
44168: LD_INT 1
44170: ST_TO_ADDR
// end ;
44171: LD_VAR 0 6
44175: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44176: LD_INT 0
44178: PPUSH
44179: PPUSH
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
// result = [ ] ;
44236: LD_ADDR_VAR 0 7
44240: PUSH
44241: EMPTY
44242: ST_TO_ADDR
// temp_list = [ ] ;
44243: LD_ADDR_VAR 0 9
44247: PUSH
44248: EMPTY
44249: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44250: LD_VAR 0 4
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: LD_INT 4
44269: PUSH
44270: LD_INT 5
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: IN
44281: NOT
44282: PUSH
44283: LD_VAR 0 1
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: IN
44298: PUSH
44299: LD_VAR 0 5
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: IN
44318: NOT
44319: AND
44320: OR
44321: IFFALSE 44325
// exit ;
44323: GO 62716
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44325: LD_VAR 0 1
44329: PUSH
44330: LD_INT 6
44332: PUSH
44333: LD_INT 7
44335: PUSH
44336: LD_INT 8
44338: PUSH
44339: LD_INT 13
44341: PUSH
44342: LD_INT 12
44344: PUSH
44345: LD_INT 15
44347: PUSH
44348: LD_INT 11
44350: PUSH
44351: LD_INT 14
44353: PUSH
44354: LD_INT 10
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: IN
44368: IFFALSE 44378
// btype = b_lab ;
44370: LD_ADDR_VAR 0 1
44374: PUSH
44375: LD_INT 6
44377: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44378: LD_VAR 0 6
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: IN
44397: NOT
44398: PUSH
44399: LD_VAR 0 1
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: LD_INT 6
44418: PUSH
44419: LD_INT 36
44421: PUSH
44422: LD_INT 4
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: LD_INT 31
44430: PUSH
44431: LD_INT 32
44433: PUSH
44434: LD_INT 33
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: IN
44450: NOT
44451: PUSH
44452: LD_VAR 0 6
44456: PUSH
44457: LD_INT 1
44459: EQUAL
44460: AND
44461: OR
44462: PUSH
44463: LD_VAR 0 1
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: IN
44478: NOT
44479: PUSH
44480: LD_VAR 0 6
44484: PUSH
44485: LD_INT 2
44487: EQUAL
44488: AND
44489: OR
44490: IFFALSE 44500
// mode = 0 ;
44492: LD_ADDR_VAR 0 6
44496: PUSH
44497: LD_INT 0
44499: ST_TO_ADDR
// case mode of 0 :
44500: LD_VAR 0 6
44504: PUSH
44505: LD_INT 0
44507: DOUBLE
44508: EQUAL
44509: IFTRUE 44513
44511: GO 55966
44513: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44514: LD_ADDR_VAR 0 11
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44707: LD_ADDR_VAR 0 12
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 3
44864: NEG
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 3
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44903: LD_ADDR_VAR 0 13
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 3
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 3
45062: NEG
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: NEG
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45102: LD_ADDR_VAR 0 14
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 2
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 3
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45298: LD_ADDR_VAR 0 15
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45491: LD_ADDR_VAR 0 16
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: LD_INT 3
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45684: LD_ADDR_VAR 0 17
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45914: LD_ADDR_VAR 0 18
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46144: LD_ADDR_VAR 0 19
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46374: LD_ADDR_VAR 0 20
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46604: LD_ADDR_VAR 0 21
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46834: LD_ADDR_VAR 0 22
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 1
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47064: LD_ADDR_VAR 0 23
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 3
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47344: LD_ADDR_VAR 0 24
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 2
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 3
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47620: LD_ADDR_VAR 0 25
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47894: LD_ADDR_VAR 0 26
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 3
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48170: LD_ADDR_VAR 0 27
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48450: LD_ADDR_VAR 0 28
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 3
48697: NEG
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48732: LD_ADDR_VAR 0 29
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49011: LD_ADDR_VAR 0 30
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 3
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49289: LD_ADDR_VAR 0 31
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 0
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 2
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49567: LD_ADDR_VAR 0 32
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 3
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: PUSH
49790: LD_INT 3
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49845: LD_ADDR_VAR 0 33
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 2
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 2
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50124: LD_ADDR_VAR 0 34
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50404: LD_ADDR_VAR 0 35
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50516: LD_ADDR_VAR 0 36
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50628: LD_ADDR_VAR 0 37
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50740: LD_ADDR_VAR 0 38
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50852: LD_ADDR_VAR 0 39
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50964: LD_ADDR_VAR 0 40
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51076: LD_ADDR_VAR 0 41
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: LD_INT 3
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51426: LD_ADDR_VAR 0 42
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 1
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 3
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 3
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 3
51735: NEG
51736: PUSH
51737: LD_INT 3
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51776: LD_ADDR_VAR 0 43
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 3
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 3
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52124: LD_ADDR_VAR 0 44
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: LD_INT 0
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: LD_INT 2
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52474: LD_ADDR_VAR 0 45
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 3
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 3
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 3
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: NEG
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: NEG
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52824: LD_ADDR_VAR 0 46
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 1
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 3
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53172: LD_ADDR_VAR 0 47
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 2
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53323: LD_ADDR_VAR 0 48
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53470: LD_ADDR_VAR 0 49
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53614: LD_ADDR_VAR 0 50
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53758: LD_ADDR_VAR 0 51
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53905: LD_ADDR_VAR 0 52
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54056: LD_ADDR_VAR 0 53
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 2
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54286: LD_ADDR_VAR 0 54
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 2
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 2
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54516: LD_ADDR_VAR 0 55
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: NEG
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54746: LD_ADDR_VAR 0 56
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: LD_INT 2
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54976: LD_ADDR_VAR 0 57
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55206: LD_ADDR_VAR 0 58
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: NEG
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: NEG
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55436: LD_ADDR_VAR 0 59
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 1
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55524: LD_ADDR_VAR 0 60
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55612: LD_ADDR_VAR 0 61
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55700: LD_ADDR_VAR 0 62
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 0
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55788: LD_ADDR_VAR 0 63
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55876: LD_ADDR_VAR 0 64
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 1
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// end ; 1 :
55964: GO 61861
55966: LD_INT 1
55968: DOUBLE
55969: EQUAL
55970: IFTRUE 55974
55972: GO 58597
55974: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55975: LD_ADDR_VAR 0 11
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 3
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56019: LD_ADDR_VAR 0 12
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56060: LD_ADDR_VAR 0 13
56064: PUSH
56065: LD_INT 3
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: LD_INT 3
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56100: LD_ADDR_VAR 0 14
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56141: LD_ADDR_VAR 0 15
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 3
56159: NEG
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56185: LD_ADDR_VAR 0 16
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56231: LD_ADDR_VAR 0 17
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56275: LD_ADDR_VAR 0 18
56279: PUSH
56280: LD_INT 2
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56316: LD_ADDR_VAR 0 19
56320: PUSH
56321: LD_INT 3
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: LIST
56355: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56356: LD_ADDR_VAR 0 20
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 0
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56397: LD_ADDR_VAR 0 21
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 3
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 3
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56441: LD_ADDR_VAR 0 22
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: NEG
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 3
56472: NEG
56473: PUSH
56474: LD_INT 3
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56487: LD_ADDR_VAR 0 23
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 4
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 3
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56531: LD_ADDR_VAR 0 24
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 4
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56572: LD_ADDR_VAR 0 25
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 4
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 4
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: LIST
56611: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56612: LD_ADDR_VAR 0 26
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: LD_INT 4
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56653: LD_ADDR_VAR 0 27
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 4
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56697: LD_ADDR_VAR 0 28
56701: PUSH
56702: LD_INT 3
56704: NEG
56705: PUSH
56706: LD_INT 3
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: NEG
56717: PUSH
56718: LD_INT 4
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 4
56728: NEG
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56743: LD_ADDR_VAR 0 29
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 3
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 2
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: LD_INT 4
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 4
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 5
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 0
56830: PUSH
56831: LD_INT 5
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 4
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 6
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 6
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 5
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56898: LD_ADDR_VAR 0 30
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 1
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 4
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 5
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 5
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 5
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 6
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 6
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57041: LD_ADDR_VAR 0 31
57045: PUSH
57046: LD_INT 3
57048: PUSH
57049: LD_INT 2
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 3
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 4
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 4
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: LD_INT 4
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 5
57108: PUSH
57109: LD_INT 4
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 5
57118: PUSH
57119: LD_INT 5
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: LD_INT 5
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 6
57138: PUSH
57139: LD_INT 5
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 6
57148: PUSH
57149: LD_INT 6
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 5
57158: PUSH
57159: LD_INT 6
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57180: LD_ADDR_VAR 0 32
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: LD_INT 4
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: LD_INT 4
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: NEG
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: PUSH
57250: LD_INT 5
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 5
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 6
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 6
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: LD_INT 5
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57323: LD_ADDR_VAR 0 33
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 4
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 4
57398: NEG
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 5
57409: NEG
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 6
57443: NEG
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 6
57454: NEG
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57478: LD_ADDR_VAR 0 34
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 3
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: LD_INT 4
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 4
57533: NEG
57534: PUSH
57535: LD_INT 3
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: LD_INT 4
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 4
57557: NEG
57558: PUSH
57559: LD_INT 5
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 5
57569: NEG
57570: PUSH
57571: LD_INT 4
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: NEG
57582: PUSH
57583: LD_INT 5
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: LD_INT 6
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 6
57605: NEG
57606: PUSH
57607: LD_INT 5
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 6
57617: NEG
57618: PUSH
57619: LD_INT 6
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57641: LD_ADDR_VAR 0 41
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: LD_INT 3
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 2
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57685: LD_ADDR_VAR 0 42
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57726: LD_ADDR_VAR 0 43
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: LIST
57765: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57766: LD_ADDR_VAR 0 44
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: LIST
57806: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57807: LD_ADDR_VAR 0 45
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57851: LD_ADDR_VAR 0 46
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 3
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57897: LD_ADDR_VAR 0 47
57901: PUSH
57902: LD_INT 2
57904: NEG
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57930: LD_ADDR_VAR 0 48
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57961: LD_ADDR_VAR 0 49
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57990: LD_ADDR_VAR 0 50
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58019: LD_ADDR_VAR 0 51
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58050: LD_ADDR_VAR 0 52
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58083: LD_ADDR_VAR 0 53
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 2
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: LIST
58126: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58127: LD_ADDR_VAR 0 54
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58168: LD_ADDR_VAR 0 55
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: LD_INT 2
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58208: LD_ADDR_VAR 0 56
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58249: LD_ADDR_VAR 0 57
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58293: LD_ADDR_VAR 0 58
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 3
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: NEG
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 3
58324: NEG
58325: PUSH
58326: LD_INT 3
58328: NEG
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58339: LD_ADDR_VAR 0 59
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58383: LD_ADDR_VAR 0 60
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 2
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58424: LD_ADDR_VAR 0 61
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58464: LD_ADDR_VAR 0 62
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58505: LD_ADDR_VAR 0 63
58509: PUSH
58510: LD_INT 1
58512: NEG
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58549: LD_ADDR_VAR 0 64
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// end ; 2 :
58595: GO 61861
58597: LD_INT 2
58599: DOUBLE
58600: EQUAL
58601: IFTRUE 58605
58603: GO 61860
58605: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58606: LD_ADDR_VAR 0 29
58610: PUSH
58611: LD_INT 4
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 4
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 5
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 5
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 4
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: LD_INT 1
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 5
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 4
58726: PUSH
58727: LD_INT 3
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 4
58736: PUSH
58737: LD_INT 4
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: LD_INT 4
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 3
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 4
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: LD_INT 4
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 4
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 4
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 5
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 5
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 3
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 2
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: NEG
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 3
58934: NEG
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 4
58945: NEG
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: LD_INT 4
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 4
59003: NEG
59004: PUSH
59005: LD_INT 5
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: NEG
59016: PUSH
59017: LD_INT 4
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 3
59027: NEG
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: NEG
59040: PUSH
59041: LD_INT 3
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 5
59051: NEG
59052: PUSH
59053: LD_INT 4
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 5
59063: NEG
59064: PUSH
59065: LD_INT 5
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 5
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 5
59087: NEG
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59144: LD_ADDR_VAR 0 30
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: LD_INT 4
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: LD_INT 3
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 5
59171: PUSH
59172: LD_INT 4
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 5
59181: PUSH
59182: LD_INT 5
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 4
59191: PUSH
59192: LD_INT 5
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 4
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 5
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: LD_INT 5
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 2
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 4
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: LD_INT 4
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 4
59334: NEG
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 4
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 3
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: NEG
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 5
59390: NEG
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 5
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 5
59413: NEG
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 3
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 3
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 4
59508: NEG
59509: PUSH
59510: LD_INT 4
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: LD_INT 2
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 5
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: LD_INT 4
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 3
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: LD_INT 5
59615: NEG
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: NEG
59635: PUSH
59636: LD_INT 5
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59691: LD_ADDR_VAR 0 31
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 5
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 5
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 4
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 5
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: LD_INT 1
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 4
59858: NEG
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 4
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: LD_INT 5
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 3
59917: NEG
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: LD_INT 3
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 4
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 5
59953: NEG
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 5
59965: NEG
59966: PUSH
59967: LD_INT 5
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: LD_INT 5
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 5
59989: NEG
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 3
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 4
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 1
60056: NEG
60057: PUSH
60058: LD_INT 3
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: LD_INT 4
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: LD_INT 2
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: LD_INT 4
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 5
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 5
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: LD_INT 2
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 5
60186: PUSH
60187: LD_INT 2
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60241: LD_ADDR_VAR 0 32
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 4
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: LD_INT 1
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 4
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 5
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 4
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 3
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 4
60446: NEG
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 0
60458: PUSH
60459: LD_INT 4
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 5
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 3
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 5
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: LD_INT 5
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 4
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: LD_INT 4
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 5
60673: PUSH
60674: LD_INT 4
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: LD_INT 5
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 4
60693: PUSH
60694: LD_INT 5
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 3
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 5
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: LD_INT 5
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60788: LD_ADDR_VAR 0 33
60792: PUSH
60793: LD_INT 4
60795: NEG
60796: PUSH
60797: LD_INT 4
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: LD_INT 5
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: LD_INT 3
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 5
60855: NEG
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 5
60867: NEG
60868: PUSH
60869: LD_INT 5
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: NEG
60880: PUSH
60881: LD_INT 5
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: LD_INT 3
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 4
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: LD_INT 3
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: LD_INT 4
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 5
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 5
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: LD_INT 2
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 5
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: LD_INT 3
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 4
61128: PUSH
61129: LD_INT 4
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: PUSH
61139: LD_INT 4
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: LD_INT 2
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: LD_INT 4
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: LD_INT 4
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: LD_INT 4
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 5
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 5
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 4
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 5
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61326: LD_ADDR_VAR 0 34
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 5
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 5
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: LD_INT 3
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: LD_INT 5
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 4
61456: PUSH
61457: LD_INT 0
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 4
61466: PUSH
61467: LD_INT 1
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: LD_INT 2
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 4
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: LD_INT 4
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 5
61548: PUSH
61549: LD_INT 4
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 5
61558: PUSH
61559: LD_INT 5
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: LD_INT 4
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 5
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: LD_INT 5
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 2
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 3
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 4
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 4
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: LD_INT 3
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: LD_INT 4
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 4
61711: NEG
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 4
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 3
61734: NEG
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 3
61745: NEG
61746: PUSH
61747: LD_INT 1
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 4
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 5
61767: NEG
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 5
61778: NEG
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 5
61790: NEG
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: NEG
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: ST_TO_ADDR
// end ; end ;
61858: GO 61861
61860: POP
// case btype of b_depot , b_warehouse :
61861: LD_VAR 0 1
61865: PUSH
61866: LD_INT 0
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61880
61872: LD_INT 1
61874: DOUBLE
61875: EQUAL
61876: IFTRUE 61880
61878: GO 62081
61880: POP
// case nation of nation_american :
61881: LD_VAR 0 5
61885: PUSH
61886: LD_INT 1
61888: DOUBLE
61889: EQUAL
61890: IFTRUE 61894
61892: GO 61950
61894: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61895: LD_ADDR_VAR 0 9
61899: PUSH
61900: LD_VAR 0 11
61904: PUSH
61905: LD_VAR 0 12
61909: PUSH
61910: LD_VAR 0 13
61914: PUSH
61915: LD_VAR 0 14
61919: PUSH
61920: LD_VAR 0 15
61924: PUSH
61925: LD_VAR 0 16
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_VAR 0 4
61942: PUSH
61943: LD_INT 1
61945: PLUS
61946: ARRAY
61947: ST_TO_ADDR
61948: GO 62079
61950: LD_INT 2
61952: DOUBLE
61953: EQUAL
61954: IFTRUE 61958
61956: GO 62014
61958: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61959: LD_ADDR_VAR 0 9
61963: PUSH
61964: LD_VAR 0 17
61968: PUSH
61969: LD_VAR 0 18
61973: PUSH
61974: LD_VAR 0 19
61978: PUSH
61979: LD_VAR 0 20
61983: PUSH
61984: LD_VAR 0 21
61988: PUSH
61989: LD_VAR 0 22
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: PUSH
62002: LD_VAR 0 4
62006: PUSH
62007: LD_INT 1
62009: PLUS
62010: ARRAY
62011: ST_TO_ADDR
62012: GO 62079
62014: LD_INT 3
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62022
62020: GO 62078
62022: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62023: LD_ADDR_VAR 0 9
62027: PUSH
62028: LD_VAR 0 23
62032: PUSH
62033: LD_VAR 0 24
62037: PUSH
62038: LD_VAR 0 25
62042: PUSH
62043: LD_VAR 0 26
62047: PUSH
62048: LD_VAR 0 27
62052: PUSH
62053: LD_VAR 0 28
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: PUSH
62066: LD_VAR 0 4
62070: PUSH
62071: LD_INT 1
62073: PLUS
62074: ARRAY
62075: ST_TO_ADDR
62076: GO 62079
62078: POP
62079: GO 62634
62081: LD_INT 2
62083: DOUBLE
62084: EQUAL
62085: IFTRUE 62095
62087: LD_INT 3
62089: DOUBLE
62090: EQUAL
62091: IFTRUE 62095
62093: GO 62151
62095: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62096: LD_ADDR_VAR 0 9
62100: PUSH
62101: LD_VAR 0 29
62105: PUSH
62106: LD_VAR 0 30
62110: PUSH
62111: LD_VAR 0 31
62115: PUSH
62116: LD_VAR 0 32
62120: PUSH
62121: LD_VAR 0 33
62125: PUSH
62126: LD_VAR 0 34
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: PUSH
62139: LD_VAR 0 4
62143: PUSH
62144: LD_INT 1
62146: PLUS
62147: ARRAY
62148: ST_TO_ADDR
62149: GO 62634
62151: LD_INT 16
62153: DOUBLE
62154: EQUAL
62155: IFTRUE 62213
62157: LD_INT 17
62159: DOUBLE
62160: EQUAL
62161: IFTRUE 62213
62163: LD_INT 18
62165: DOUBLE
62166: EQUAL
62167: IFTRUE 62213
62169: LD_INT 19
62171: DOUBLE
62172: EQUAL
62173: IFTRUE 62213
62175: LD_INT 22
62177: DOUBLE
62178: EQUAL
62179: IFTRUE 62213
62181: LD_INT 20
62183: DOUBLE
62184: EQUAL
62185: IFTRUE 62213
62187: LD_INT 21
62189: DOUBLE
62190: EQUAL
62191: IFTRUE 62213
62193: LD_INT 23
62195: DOUBLE
62196: EQUAL
62197: IFTRUE 62213
62199: LD_INT 24
62201: DOUBLE
62202: EQUAL
62203: IFTRUE 62213
62205: LD_INT 25
62207: DOUBLE
62208: EQUAL
62209: IFTRUE 62213
62211: GO 62269
62213: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62214: LD_ADDR_VAR 0 9
62218: PUSH
62219: LD_VAR 0 35
62223: PUSH
62224: LD_VAR 0 36
62228: PUSH
62229: LD_VAR 0 37
62233: PUSH
62234: LD_VAR 0 38
62238: PUSH
62239: LD_VAR 0 39
62243: PUSH
62244: LD_VAR 0 40
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: LD_VAR 0 4
62261: PUSH
62262: LD_INT 1
62264: PLUS
62265: ARRAY
62266: ST_TO_ADDR
62267: GO 62634
62269: LD_INT 6
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62325
62275: LD_INT 7
62277: DOUBLE
62278: EQUAL
62279: IFTRUE 62325
62281: LD_INT 8
62283: DOUBLE
62284: EQUAL
62285: IFTRUE 62325
62287: LD_INT 13
62289: DOUBLE
62290: EQUAL
62291: IFTRUE 62325
62293: LD_INT 12
62295: DOUBLE
62296: EQUAL
62297: IFTRUE 62325
62299: LD_INT 15
62301: DOUBLE
62302: EQUAL
62303: IFTRUE 62325
62305: LD_INT 11
62307: DOUBLE
62308: EQUAL
62309: IFTRUE 62325
62311: LD_INT 14
62313: DOUBLE
62314: EQUAL
62315: IFTRUE 62325
62317: LD_INT 10
62319: DOUBLE
62320: EQUAL
62321: IFTRUE 62325
62323: GO 62381
62325: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62326: LD_ADDR_VAR 0 9
62330: PUSH
62331: LD_VAR 0 41
62335: PUSH
62336: LD_VAR 0 42
62340: PUSH
62341: LD_VAR 0 43
62345: PUSH
62346: LD_VAR 0 44
62350: PUSH
62351: LD_VAR 0 45
62355: PUSH
62356: LD_VAR 0 46
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: PUSH
62369: LD_VAR 0 4
62373: PUSH
62374: LD_INT 1
62376: PLUS
62377: ARRAY
62378: ST_TO_ADDR
62379: GO 62634
62381: LD_INT 36
62383: DOUBLE
62384: EQUAL
62385: IFTRUE 62389
62387: GO 62445
62389: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62390: LD_ADDR_VAR 0 9
62394: PUSH
62395: LD_VAR 0 47
62399: PUSH
62400: LD_VAR 0 48
62404: PUSH
62405: LD_VAR 0 49
62409: PUSH
62410: LD_VAR 0 50
62414: PUSH
62415: LD_VAR 0 51
62419: PUSH
62420: LD_VAR 0 52
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: PUSH
62433: LD_VAR 0 4
62437: PUSH
62438: LD_INT 1
62440: PLUS
62441: ARRAY
62442: ST_TO_ADDR
62443: GO 62634
62445: LD_INT 4
62447: DOUBLE
62448: EQUAL
62449: IFTRUE 62471
62451: LD_INT 5
62453: DOUBLE
62454: EQUAL
62455: IFTRUE 62471
62457: LD_INT 34
62459: DOUBLE
62460: EQUAL
62461: IFTRUE 62471
62463: LD_INT 37
62465: DOUBLE
62466: EQUAL
62467: IFTRUE 62471
62469: GO 62527
62471: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62472: LD_ADDR_VAR 0 9
62476: PUSH
62477: LD_VAR 0 53
62481: PUSH
62482: LD_VAR 0 54
62486: PUSH
62487: LD_VAR 0 55
62491: PUSH
62492: LD_VAR 0 56
62496: PUSH
62497: LD_VAR 0 57
62501: PUSH
62502: LD_VAR 0 58
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: PUSH
62515: LD_VAR 0 4
62519: PUSH
62520: LD_INT 1
62522: PLUS
62523: ARRAY
62524: ST_TO_ADDR
62525: GO 62634
62527: LD_INT 31
62529: DOUBLE
62530: EQUAL
62531: IFTRUE 62577
62533: LD_INT 32
62535: DOUBLE
62536: EQUAL
62537: IFTRUE 62577
62539: LD_INT 33
62541: DOUBLE
62542: EQUAL
62543: IFTRUE 62577
62545: LD_INT 27
62547: DOUBLE
62548: EQUAL
62549: IFTRUE 62577
62551: LD_INT 26
62553: DOUBLE
62554: EQUAL
62555: IFTRUE 62577
62557: LD_INT 28
62559: DOUBLE
62560: EQUAL
62561: IFTRUE 62577
62563: LD_INT 29
62565: DOUBLE
62566: EQUAL
62567: IFTRUE 62577
62569: LD_INT 30
62571: DOUBLE
62572: EQUAL
62573: IFTRUE 62577
62575: GO 62633
62577: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62578: LD_ADDR_VAR 0 9
62582: PUSH
62583: LD_VAR 0 59
62587: PUSH
62588: LD_VAR 0 60
62592: PUSH
62593: LD_VAR 0 61
62597: PUSH
62598: LD_VAR 0 62
62602: PUSH
62603: LD_VAR 0 63
62607: PUSH
62608: LD_VAR 0 64
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: PUSH
62621: LD_VAR 0 4
62625: PUSH
62626: LD_INT 1
62628: PLUS
62629: ARRAY
62630: ST_TO_ADDR
62631: GO 62634
62633: POP
// temp_list2 = [ ] ;
62634: LD_ADDR_VAR 0 10
62638: PUSH
62639: EMPTY
62640: ST_TO_ADDR
// for i in temp_list do
62641: LD_ADDR_VAR 0 8
62645: PUSH
62646: LD_VAR 0 9
62650: PUSH
62651: FOR_IN
62652: IFFALSE 62704
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62654: LD_ADDR_VAR 0 10
62658: PUSH
62659: LD_VAR 0 10
62663: PUSH
62664: LD_VAR 0 8
62668: PUSH
62669: LD_INT 1
62671: ARRAY
62672: PUSH
62673: LD_VAR 0 2
62677: PLUS
62678: PUSH
62679: LD_VAR 0 8
62683: PUSH
62684: LD_INT 2
62686: ARRAY
62687: PUSH
62688: LD_VAR 0 3
62692: PLUS
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: ADD
62701: ST_TO_ADDR
62702: GO 62651
62704: POP
62705: POP
// result = temp_list2 ;
62706: LD_ADDR_VAR 0 7
62710: PUSH
62711: LD_VAR 0 10
62715: ST_TO_ADDR
// end ;
62716: LD_VAR 0 7
62720: RET
// export function EnemyInRange ( unit , dist ) ; begin
62721: LD_INT 0
62723: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62724: LD_ADDR_VAR 0 3
62728: PUSH
62729: LD_VAR 0 1
62733: PPUSH
62734: CALL_OW 255
62738: PPUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: CALL_OW 250
62748: PPUSH
62749: LD_VAR 0 1
62753: PPUSH
62754: CALL_OW 251
62758: PPUSH
62759: LD_VAR 0 2
62763: PPUSH
62764: CALL 36117 0 4
62768: PUSH
62769: LD_INT 4
62771: ARRAY
62772: ST_TO_ADDR
// end ;
62773: LD_VAR 0 3
62777: RET
// export function PlayerSeeMe ( unit ) ; begin
62778: LD_INT 0
62780: PPUSH
// result := See ( your_side , unit ) ;
62781: LD_ADDR_VAR 0 2
62785: PUSH
62786: LD_OWVAR 2
62790: PPUSH
62791: LD_VAR 0 1
62795: PPUSH
62796: CALL_OW 292
62800: ST_TO_ADDR
// end ;
62801: LD_VAR 0 2
62805: RET
// export function ReverseDir ( unit ) ; begin
62806: LD_INT 0
62808: PPUSH
// if not unit then
62809: LD_VAR 0 1
62813: NOT
62814: IFFALSE 62818
// exit ;
62816: GO 62841
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62818: LD_ADDR_VAR 0 2
62822: PUSH
62823: LD_VAR 0 1
62827: PPUSH
62828: CALL_OW 254
62832: PUSH
62833: LD_INT 3
62835: PLUS
62836: PUSH
62837: LD_INT 6
62839: MOD
62840: ST_TO_ADDR
// end ;
62841: LD_VAR 0 2
62845: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62846: LD_INT 0
62848: PPUSH
62849: PPUSH
62850: PPUSH
62851: PPUSH
62852: PPUSH
// if not hexes then
62853: LD_VAR 0 2
62857: NOT
62858: IFFALSE 62862
// exit ;
62860: GO 63010
// dist := 9999 ;
62862: LD_ADDR_VAR 0 5
62866: PUSH
62867: LD_INT 9999
62869: ST_TO_ADDR
// for i = 1 to hexes do
62870: LD_ADDR_VAR 0 4
62874: PUSH
62875: DOUBLE
62876: LD_INT 1
62878: DEC
62879: ST_TO_ADDR
62880: LD_VAR 0 2
62884: PUSH
62885: FOR_TO
62886: IFFALSE 62998
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62888: LD_VAR 0 1
62892: PPUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_VAR 0 4
62902: ARRAY
62903: PUSH
62904: LD_INT 1
62906: ARRAY
62907: PPUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_VAR 0 4
62917: ARRAY
62918: PUSH
62919: LD_INT 2
62921: ARRAY
62922: PPUSH
62923: CALL_OW 297
62927: PUSH
62928: LD_VAR 0 5
62932: LESS
62933: IFFALSE 62996
// begin hex := hexes [ i ] ;
62935: LD_ADDR_VAR 0 7
62939: PUSH
62940: LD_VAR 0 2
62944: PUSH
62945: LD_VAR 0 4
62949: ARRAY
62950: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62951: LD_ADDR_VAR 0 5
62955: PUSH
62956: LD_VAR 0 1
62960: PPUSH
62961: LD_VAR 0 2
62965: PUSH
62966: LD_VAR 0 4
62970: ARRAY
62971: PUSH
62972: LD_INT 1
62974: ARRAY
62975: PPUSH
62976: LD_VAR 0 2
62980: PUSH
62981: LD_VAR 0 4
62985: ARRAY
62986: PUSH
62987: LD_INT 2
62989: ARRAY
62990: PPUSH
62991: CALL_OW 297
62995: ST_TO_ADDR
// end ; end ;
62996: GO 62885
62998: POP
62999: POP
// result := hex ;
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: LD_VAR 0 7
63009: ST_TO_ADDR
// end ;
63010: LD_VAR 0 3
63014: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63015: LD_INT 0
63017: PPUSH
63018: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63019: LD_VAR 0 1
63023: NOT
63024: PUSH
63025: LD_VAR 0 1
63029: PUSH
63030: LD_INT 21
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 23
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PPUSH
63054: CALL_OW 69
63058: IN
63059: NOT
63060: OR
63061: IFFALSE 63065
// exit ;
63063: GO 63112
// for i = 1 to 3 do
63065: LD_ADDR_VAR 0 3
63069: PUSH
63070: DOUBLE
63071: LD_INT 1
63073: DEC
63074: ST_TO_ADDR
63075: LD_INT 3
63077: PUSH
63078: FOR_TO
63079: IFFALSE 63110
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63081: LD_VAR 0 1
63085: PPUSH
63086: CALL_OW 250
63090: PPUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 251
63100: PPUSH
63101: LD_INT 1
63103: PPUSH
63104: CALL_OW 453
63108: GO 63078
63110: POP
63111: POP
// end ;
63112: LD_VAR 0 2
63116: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63117: LD_INT 0
63119: PPUSH
63120: PPUSH
63121: PPUSH
63122: PPUSH
63123: PPUSH
63124: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63125: LD_VAR 0 1
63129: NOT
63130: PUSH
63131: LD_VAR 0 2
63135: NOT
63136: OR
63137: PUSH
63138: LD_VAR 0 1
63142: PPUSH
63143: CALL_OW 314
63147: OR
63148: IFFALSE 63152
// exit ;
63150: GO 63593
// x := GetX ( enemy_unit ) ;
63152: LD_ADDR_VAR 0 7
63156: PUSH
63157: LD_VAR 0 2
63161: PPUSH
63162: CALL_OW 250
63166: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63167: LD_ADDR_VAR 0 8
63171: PUSH
63172: LD_VAR 0 2
63176: PPUSH
63177: CALL_OW 251
63181: ST_TO_ADDR
// if not x or not y then
63182: LD_VAR 0 7
63186: NOT
63187: PUSH
63188: LD_VAR 0 8
63192: NOT
63193: OR
63194: IFFALSE 63198
// exit ;
63196: GO 63593
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63198: LD_ADDR_VAR 0 6
63202: PUSH
63203: LD_VAR 0 7
63207: PPUSH
63208: LD_INT 0
63210: PPUSH
63211: LD_INT 4
63213: PPUSH
63214: CALL_OW 272
63218: PUSH
63219: LD_VAR 0 8
63223: PPUSH
63224: LD_INT 0
63226: PPUSH
63227: LD_INT 4
63229: PPUSH
63230: CALL_OW 273
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_VAR 0 7
63243: PPUSH
63244: LD_INT 1
63246: PPUSH
63247: LD_INT 4
63249: PPUSH
63250: CALL_OW 272
63254: PUSH
63255: LD_VAR 0 8
63259: PPUSH
63260: LD_INT 1
63262: PPUSH
63263: LD_INT 4
63265: PPUSH
63266: CALL_OW 273
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_VAR 0 7
63279: PPUSH
63280: LD_INT 2
63282: PPUSH
63283: LD_INT 4
63285: PPUSH
63286: CALL_OW 272
63290: PUSH
63291: LD_VAR 0 8
63295: PPUSH
63296: LD_INT 2
63298: PPUSH
63299: LD_INT 4
63301: PPUSH
63302: CALL_OW 273
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_VAR 0 7
63315: PPUSH
63316: LD_INT 3
63318: PPUSH
63319: LD_INT 4
63321: PPUSH
63322: CALL_OW 272
63326: PUSH
63327: LD_VAR 0 8
63331: PPUSH
63332: LD_INT 3
63334: PPUSH
63335: LD_INT 4
63337: PPUSH
63338: CALL_OW 273
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_VAR 0 7
63351: PPUSH
63352: LD_INT 4
63354: PPUSH
63355: LD_INT 4
63357: PPUSH
63358: CALL_OW 272
63362: PUSH
63363: LD_VAR 0 8
63367: PPUSH
63368: LD_INT 4
63370: PPUSH
63371: LD_INT 4
63373: PPUSH
63374: CALL_OW 273
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_VAR 0 7
63387: PPUSH
63388: LD_INT 5
63390: PPUSH
63391: LD_INT 4
63393: PPUSH
63394: CALL_OW 272
63398: PUSH
63399: LD_VAR 0 8
63403: PPUSH
63404: LD_INT 5
63406: PPUSH
63407: LD_INT 4
63409: PPUSH
63410: CALL_OW 273
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: ST_TO_ADDR
// for i = tmp downto 1 do
63427: LD_ADDR_VAR 0 4
63431: PUSH
63432: DOUBLE
63433: LD_VAR 0 6
63437: INC
63438: ST_TO_ADDR
63439: LD_INT 1
63441: PUSH
63442: FOR_DOWNTO
63443: IFFALSE 63544
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63445: LD_VAR 0 6
63449: PUSH
63450: LD_VAR 0 4
63454: ARRAY
63455: PUSH
63456: LD_INT 1
63458: ARRAY
63459: PPUSH
63460: LD_VAR 0 6
63464: PUSH
63465: LD_VAR 0 4
63469: ARRAY
63470: PUSH
63471: LD_INT 2
63473: ARRAY
63474: PPUSH
63475: CALL_OW 488
63479: NOT
63480: PUSH
63481: LD_VAR 0 6
63485: PUSH
63486: LD_VAR 0 4
63490: ARRAY
63491: PUSH
63492: LD_INT 1
63494: ARRAY
63495: PPUSH
63496: LD_VAR 0 6
63500: PUSH
63501: LD_VAR 0 4
63505: ARRAY
63506: PUSH
63507: LD_INT 2
63509: ARRAY
63510: PPUSH
63511: CALL_OW 428
63515: PUSH
63516: LD_INT 0
63518: NONEQUAL
63519: OR
63520: IFFALSE 63542
// tmp := Delete ( tmp , i ) ;
63522: LD_ADDR_VAR 0 6
63526: PUSH
63527: LD_VAR 0 6
63531: PPUSH
63532: LD_VAR 0 4
63536: PPUSH
63537: CALL_OW 3
63541: ST_TO_ADDR
63542: GO 63442
63544: POP
63545: POP
// j := GetClosestHex ( unit , tmp ) ;
63546: LD_ADDR_VAR 0 5
63550: PUSH
63551: LD_VAR 0 1
63555: PPUSH
63556: LD_VAR 0 6
63560: PPUSH
63561: CALL 62846 0 2
63565: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63566: LD_VAR 0 1
63570: PPUSH
63571: LD_VAR 0 5
63575: PUSH
63576: LD_INT 1
63578: ARRAY
63579: PPUSH
63580: LD_VAR 0 5
63584: PUSH
63585: LD_INT 2
63587: ARRAY
63588: PPUSH
63589: CALL_OW 111
// end ;
63593: LD_VAR 0 3
63597: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63598: LD_INT 0
63600: PPUSH
63601: PPUSH
63602: PPUSH
// uc_side = 0 ;
63603: LD_ADDR_OWVAR 20
63607: PUSH
63608: LD_INT 0
63610: ST_TO_ADDR
// uc_nation = 0 ;
63611: LD_ADDR_OWVAR 21
63615: PUSH
63616: LD_INT 0
63618: ST_TO_ADDR
// InitHc_All ( ) ;
63619: CALL_OW 584
// InitVc ;
63623: CALL_OW 20
// if mastodonts then
63627: LD_VAR 0 6
63631: IFFALSE 63698
// for i = 1 to mastodonts do
63633: LD_ADDR_VAR 0 11
63637: PUSH
63638: DOUBLE
63639: LD_INT 1
63641: DEC
63642: ST_TO_ADDR
63643: LD_VAR 0 6
63647: PUSH
63648: FOR_TO
63649: IFFALSE 63696
// begin vc_chassis := 31 ;
63651: LD_ADDR_OWVAR 37
63655: PUSH
63656: LD_INT 31
63658: ST_TO_ADDR
// vc_control := control_rider ;
63659: LD_ADDR_OWVAR 38
63663: PUSH
63664: LD_INT 4
63666: ST_TO_ADDR
// animal := CreateVehicle ;
63667: LD_ADDR_VAR 0 12
63671: PUSH
63672: CALL_OW 45
63676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63677: LD_VAR 0 12
63681: PPUSH
63682: LD_VAR 0 8
63686: PPUSH
63687: LD_INT 0
63689: PPUSH
63690: CALL 65886 0 3
// end ;
63694: GO 63648
63696: POP
63697: POP
// if horses then
63698: LD_VAR 0 5
63702: IFFALSE 63769
// for i = 1 to horses do
63704: LD_ADDR_VAR 0 11
63708: PUSH
63709: DOUBLE
63710: LD_INT 1
63712: DEC
63713: ST_TO_ADDR
63714: LD_VAR 0 5
63718: PUSH
63719: FOR_TO
63720: IFFALSE 63767
// begin hc_class := 21 ;
63722: LD_ADDR_OWVAR 28
63726: PUSH
63727: LD_INT 21
63729: ST_TO_ADDR
// hc_gallery :=  ;
63730: LD_ADDR_OWVAR 33
63734: PUSH
63735: LD_STRING 
63737: ST_TO_ADDR
// animal := CreateHuman ;
63738: LD_ADDR_VAR 0 12
63742: PUSH
63743: CALL_OW 44
63747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63748: LD_VAR 0 12
63752: PPUSH
63753: LD_VAR 0 8
63757: PPUSH
63758: LD_INT 0
63760: PPUSH
63761: CALL 65886 0 3
// end ;
63765: GO 63719
63767: POP
63768: POP
// if birds then
63769: LD_VAR 0 1
63773: IFFALSE 63840
// for i = 1 to birds do
63775: LD_ADDR_VAR 0 11
63779: PUSH
63780: DOUBLE
63781: LD_INT 1
63783: DEC
63784: ST_TO_ADDR
63785: LD_VAR 0 1
63789: PUSH
63790: FOR_TO
63791: IFFALSE 63838
// begin hc_class = 18 ;
63793: LD_ADDR_OWVAR 28
63797: PUSH
63798: LD_INT 18
63800: ST_TO_ADDR
// hc_gallery =  ;
63801: LD_ADDR_OWVAR 33
63805: PUSH
63806: LD_STRING 
63808: ST_TO_ADDR
// animal := CreateHuman ;
63809: LD_ADDR_VAR 0 12
63813: PUSH
63814: CALL_OW 44
63818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63819: LD_VAR 0 12
63823: PPUSH
63824: LD_VAR 0 8
63828: PPUSH
63829: LD_INT 0
63831: PPUSH
63832: CALL 65886 0 3
// end ;
63836: GO 63790
63838: POP
63839: POP
// if tigers then
63840: LD_VAR 0 2
63844: IFFALSE 63928
// for i = 1 to tigers do
63846: LD_ADDR_VAR 0 11
63850: PUSH
63851: DOUBLE
63852: LD_INT 1
63854: DEC
63855: ST_TO_ADDR
63856: LD_VAR 0 2
63860: PUSH
63861: FOR_TO
63862: IFFALSE 63926
// begin hc_class = class_tiger ;
63864: LD_ADDR_OWVAR 28
63868: PUSH
63869: LD_INT 14
63871: ST_TO_ADDR
// hc_gallery =  ;
63872: LD_ADDR_OWVAR 33
63876: PUSH
63877: LD_STRING 
63879: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63880: LD_ADDR_OWVAR 35
63884: PUSH
63885: LD_INT 7
63887: NEG
63888: PPUSH
63889: LD_INT 7
63891: PPUSH
63892: CALL_OW 12
63896: ST_TO_ADDR
// animal := CreateHuman ;
63897: LD_ADDR_VAR 0 12
63901: PUSH
63902: CALL_OW 44
63906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63907: LD_VAR 0 12
63911: PPUSH
63912: LD_VAR 0 8
63916: PPUSH
63917: LD_INT 0
63919: PPUSH
63920: CALL 65886 0 3
// end ;
63924: GO 63861
63926: POP
63927: POP
// if apemans then
63928: LD_VAR 0 3
63932: IFFALSE 64055
// for i = 1 to apemans do
63934: LD_ADDR_VAR 0 11
63938: PUSH
63939: DOUBLE
63940: LD_INT 1
63942: DEC
63943: ST_TO_ADDR
63944: LD_VAR 0 3
63948: PUSH
63949: FOR_TO
63950: IFFALSE 64053
// begin hc_class = class_apeman ;
63952: LD_ADDR_OWVAR 28
63956: PUSH
63957: LD_INT 12
63959: ST_TO_ADDR
// hc_gallery =  ;
63960: LD_ADDR_OWVAR 33
63964: PUSH
63965: LD_STRING 
63967: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63968: LD_ADDR_OWVAR 35
63972: PUSH
63973: LD_INT 2
63975: NEG
63976: PPUSH
63977: LD_INT 2
63979: PPUSH
63980: CALL_OW 12
63984: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63985: LD_ADDR_OWVAR 31
63989: PUSH
63990: LD_INT 1
63992: PPUSH
63993: LD_INT 3
63995: PPUSH
63996: CALL_OW 12
64000: PUSH
64001: LD_INT 1
64003: PPUSH
64004: LD_INT 3
64006: PPUSH
64007: CALL_OW 12
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: ST_TO_ADDR
// animal := CreateHuman ;
64024: LD_ADDR_VAR 0 12
64028: PUSH
64029: CALL_OW 44
64033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64034: LD_VAR 0 12
64038: PPUSH
64039: LD_VAR 0 8
64043: PPUSH
64044: LD_INT 0
64046: PPUSH
64047: CALL 65886 0 3
// end ;
64051: GO 63949
64053: POP
64054: POP
// if enchidnas then
64055: LD_VAR 0 4
64059: IFFALSE 64126
// for i = 1 to enchidnas do
64061: LD_ADDR_VAR 0 11
64065: PUSH
64066: DOUBLE
64067: LD_INT 1
64069: DEC
64070: ST_TO_ADDR
64071: LD_VAR 0 4
64075: PUSH
64076: FOR_TO
64077: IFFALSE 64124
// begin hc_class = 13 ;
64079: LD_ADDR_OWVAR 28
64083: PUSH
64084: LD_INT 13
64086: ST_TO_ADDR
// hc_gallery =  ;
64087: LD_ADDR_OWVAR 33
64091: PUSH
64092: LD_STRING 
64094: ST_TO_ADDR
// animal := CreateHuman ;
64095: LD_ADDR_VAR 0 12
64099: PUSH
64100: CALL_OW 44
64104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64105: LD_VAR 0 12
64109: PPUSH
64110: LD_VAR 0 8
64114: PPUSH
64115: LD_INT 0
64117: PPUSH
64118: CALL 65886 0 3
// end ;
64122: GO 64076
64124: POP
64125: POP
// if fishes then
64126: LD_VAR 0 7
64130: IFFALSE 64197
// for i = 1 to fishes do
64132: LD_ADDR_VAR 0 11
64136: PUSH
64137: DOUBLE
64138: LD_INT 1
64140: DEC
64141: ST_TO_ADDR
64142: LD_VAR 0 7
64146: PUSH
64147: FOR_TO
64148: IFFALSE 64195
// begin hc_class = 20 ;
64150: LD_ADDR_OWVAR 28
64154: PUSH
64155: LD_INT 20
64157: ST_TO_ADDR
// hc_gallery =  ;
64158: LD_ADDR_OWVAR 33
64162: PUSH
64163: LD_STRING 
64165: ST_TO_ADDR
// animal := CreateHuman ;
64166: LD_ADDR_VAR 0 12
64170: PUSH
64171: CALL_OW 44
64175: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64176: LD_VAR 0 12
64180: PPUSH
64181: LD_VAR 0 9
64185: PPUSH
64186: LD_INT 0
64188: PPUSH
64189: CALL 65886 0 3
// end ;
64193: GO 64147
64195: POP
64196: POP
// end ;
64197: LD_VAR 0 10
64201: RET
// export function WantHeal ( sci , unit ) ; begin
64202: LD_INT 0
64204: PPUSH
// if GetTaskList ( sci ) > 0 then
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 437
64214: PUSH
64215: LD_INT 0
64217: GREATER
64218: IFFALSE 64288
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64220: LD_VAR 0 1
64224: PPUSH
64225: CALL_OW 437
64229: PUSH
64230: LD_INT 1
64232: ARRAY
64233: PUSH
64234: LD_INT 1
64236: ARRAY
64237: PUSH
64238: LD_STRING l
64240: EQUAL
64241: PUSH
64242: LD_VAR 0 1
64246: PPUSH
64247: CALL_OW 437
64251: PUSH
64252: LD_INT 1
64254: ARRAY
64255: PUSH
64256: LD_INT 4
64258: ARRAY
64259: PUSH
64260: LD_VAR 0 2
64264: EQUAL
64265: AND
64266: IFFALSE 64278
// result := true else
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_INT 1
64275: ST_TO_ADDR
64276: GO 64286
// result := false ;
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_INT 0
64285: ST_TO_ADDR
// end else
64286: GO 64296
// result := false ;
64288: LD_ADDR_VAR 0 3
64292: PUSH
64293: LD_INT 0
64295: ST_TO_ADDR
// end ;
64296: LD_VAR 0 3
64300: RET
// export function HealTarget ( sci ) ; begin
64301: LD_INT 0
64303: PPUSH
// if not sci then
64304: LD_VAR 0 1
64308: NOT
64309: IFFALSE 64313
// exit ;
64311: GO 64378
// result := 0 ;
64313: LD_ADDR_VAR 0 2
64317: PUSH
64318: LD_INT 0
64320: ST_TO_ADDR
// if GetTaskList ( sci ) then
64321: LD_VAR 0 1
64325: PPUSH
64326: CALL_OW 437
64330: IFFALSE 64378
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64332: LD_VAR 0 1
64336: PPUSH
64337: CALL_OW 437
64341: PUSH
64342: LD_INT 1
64344: ARRAY
64345: PUSH
64346: LD_INT 1
64348: ARRAY
64349: PUSH
64350: LD_STRING l
64352: EQUAL
64353: IFFALSE 64378
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64355: LD_ADDR_VAR 0 2
64359: PUSH
64360: LD_VAR 0 1
64364: PPUSH
64365: CALL_OW 437
64369: PUSH
64370: LD_INT 1
64372: ARRAY
64373: PUSH
64374: LD_INT 4
64376: ARRAY
64377: ST_TO_ADDR
// end ;
64378: LD_VAR 0 2
64382: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64383: LD_INT 0
64385: PPUSH
64386: PPUSH
64387: PPUSH
64388: PPUSH
// if not base_units then
64389: LD_VAR 0 1
64393: NOT
64394: IFFALSE 64398
// exit ;
64396: GO 64485
// result := false ;
64398: LD_ADDR_VAR 0 2
64402: PUSH
64403: LD_INT 0
64405: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64406: LD_ADDR_VAR 0 5
64410: PUSH
64411: LD_VAR 0 1
64415: PPUSH
64416: LD_INT 21
64418: PUSH
64419: LD_INT 3
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PPUSH
64426: CALL_OW 72
64430: ST_TO_ADDR
// if not tmp then
64431: LD_VAR 0 5
64435: NOT
64436: IFFALSE 64440
// exit ;
64438: GO 64485
// for i in tmp do
64440: LD_ADDR_VAR 0 3
64444: PUSH
64445: LD_VAR 0 5
64449: PUSH
64450: FOR_IN
64451: IFFALSE 64483
// begin result := EnemyInRange ( i , 22 ) ;
64453: LD_ADDR_VAR 0 2
64457: PUSH
64458: LD_VAR 0 3
64462: PPUSH
64463: LD_INT 22
64465: PPUSH
64466: CALL 62721 0 2
64470: ST_TO_ADDR
// if result then
64471: LD_VAR 0 2
64475: IFFALSE 64481
// exit ;
64477: POP
64478: POP
64479: GO 64485
// end ;
64481: GO 64450
64483: POP
64484: POP
// end ;
64485: LD_VAR 0 2
64489: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64490: LD_INT 0
64492: PPUSH
64493: PPUSH
// if not units then
64494: LD_VAR 0 1
64498: NOT
64499: IFFALSE 64503
// exit ;
64501: GO 64573
// result := [ ] ;
64503: LD_ADDR_VAR 0 3
64507: PUSH
64508: EMPTY
64509: ST_TO_ADDR
// for i in units do
64510: LD_ADDR_VAR 0 4
64514: PUSH
64515: LD_VAR 0 1
64519: PUSH
64520: FOR_IN
64521: IFFALSE 64571
// if GetTag ( i ) = tag then
64523: LD_VAR 0 4
64527: PPUSH
64528: CALL_OW 110
64532: PUSH
64533: LD_VAR 0 2
64537: EQUAL
64538: IFFALSE 64569
// result := Replace ( result , result + 1 , i ) ;
64540: LD_ADDR_VAR 0 3
64544: PUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: LD_VAR 0 3
64554: PUSH
64555: LD_INT 1
64557: PLUS
64558: PPUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: CALL_OW 1
64568: ST_TO_ADDR
64569: GO 64520
64571: POP
64572: POP
// end ;
64573: LD_VAR 0 3
64577: RET
// export function IsDriver ( un ) ; begin
64578: LD_INT 0
64580: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64581: LD_ADDR_VAR 0 2
64585: PUSH
64586: LD_VAR 0 1
64590: PUSH
64591: LD_INT 55
64593: PUSH
64594: EMPTY
64595: LIST
64596: PPUSH
64597: CALL_OW 69
64601: IN
64602: ST_TO_ADDR
// end ;
64603: LD_VAR 0 2
64607: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64608: LD_INT 0
64610: PPUSH
64611: PPUSH
// list := [ ] ;
64612: LD_ADDR_VAR 0 5
64616: PUSH
64617: EMPTY
64618: ST_TO_ADDR
// case d of 0 :
64619: LD_VAR 0 3
64623: PUSH
64624: LD_INT 0
64626: DOUBLE
64627: EQUAL
64628: IFTRUE 64632
64630: GO 64765
64632: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64633: LD_ADDR_VAR 0 5
64637: PUSH
64638: LD_VAR 0 1
64642: PUSH
64643: LD_INT 4
64645: MINUS
64646: PUSH
64647: LD_VAR 0 2
64651: PUSH
64652: LD_INT 4
64654: MINUS
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 1
64668: PUSH
64669: LD_INT 3
64671: MINUS
64672: PUSH
64673: LD_VAR 0 2
64677: PUSH
64678: LD_INT 1
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: PUSH
64686: LD_VAR 0 1
64690: PUSH
64691: LD_INT 4
64693: PLUS
64694: PUSH
64695: LD_VAR 0 2
64699: PUSH
64700: LD_INT 4
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: PUSH
64708: LD_VAR 0 1
64712: PUSH
64713: LD_INT 3
64715: PLUS
64716: PUSH
64717: LD_VAR 0 2
64721: PUSH
64722: LD_INT 3
64724: PLUS
64725: PUSH
64726: LD_INT 5
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: PUSH
64734: LD_VAR 0 1
64738: PUSH
64739: LD_VAR 0 2
64743: PUSH
64744: LD_INT 4
64746: PLUS
64747: PUSH
64748: LD_INT 0
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: ST_TO_ADDR
// end ; 1 :
64763: GO 65463
64765: LD_INT 1
64767: DOUBLE
64768: EQUAL
64769: IFTRUE 64773
64771: GO 64906
64773: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64774: LD_ADDR_VAR 0 5
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_VAR 0 2
64788: PUSH
64789: LD_INT 4
64791: MINUS
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: PUSH
64801: LD_VAR 0 1
64805: PUSH
64806: LD_INT 3
64808: MINUS
64809: PUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_INT 3
64817: MINUS
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: LD_VAR 0 1
64831: PUSH
64832: LD_INT 4
64834: MINUS
64835: PUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: PUSH
64849: LD_VAR 0 1
64853: PUSH
64854: LD_VAR 0 2
64858: PUSH
64859: LD_INT 3
64861: PLUS
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: LIST
64870: PUSH
64871: LD_VAR 0 1
64875: PUSH
64876: LD_INT 4
64878: PLUS
64879: PUSH
64880: LD_VAR 0 2
64884: PUSH
64885: LD_INT 4
64887: PLUS
64888: PUSH
64889: LD_INT 5
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: ST_TO_ADDR
// end ; 2 :
64904: GO 65463
64906: LD_INT 2
64908: DOUBLE
64909: EQUAL
64910: IFTRUE 64914
64912: GO 65043
64914: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64915: LD_ADDR_VAR 0 5
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_VAR 0 2
64929: PUSH
64930: LD_INT 3
64932: MINUS
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: LD_VAR 0 1
64946: PUSH
64947: LD_INT 4
64949: PLUS
64950: PUSH
64951: LD_VAR 0 2
64955: PUSH
64956: LD_INT 4
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: PUSH
64964: LD_VAR 0 1
64968: PUSH
64969: LD_VAR 0 2
64973: PUSH
64974: LD_INT 4
64976: PLUS
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: LIST
64985: PUSH
64986: LD_VAR 0 1
64990: PUSH
64991: LD_INT 3
64993: MINUS
64994: PUSH
64995: LD_VAR 0 2
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: LIST
65007: PUSH
65008: LD_VAR 0 1
65012: PUSH
65013: LD_INT 4
65015: MINUS
65016: PUSH
65017: LD_VAR 0 2
65021: PUSH
65022: LD_INT 4
65024: MINUS
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: ST_TO_ADDR
// end ; 3 :
65041: GO 65463
65043: LD_INT 3
65045: DOUBLE
65046: EQUAL
65047: IFTRUE 65051
65049: GO 65184
65051: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65052: LD_ADDR_VAR 0 5
65056: PUSH
65057: LD_VAR 0 1
65061: PUSH
65062: LD_INT 3
65064: PLUS
65065: PUSH
65066: LD_VAR 0 2
65070: PUSH
65071: LD_INT 4
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: LIST
65078: PUSH
65079: LD_VAR 0 1
65083: PUSH
65084: LD_INT 4
65086: PLUS
65087: PUSH
65088: LD_VAR 0 2
65092: PUSH
65093: LD_INT 4
65095: PLUS
65096: PUSH
65097: LD_INT 5
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: PUSH
65105: LD_VAR 0 1
65109: PUSH
65110: LD_INT 4
65112: MINUS
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: PUSH
65127: LD_VAR 0 1
65131: PUSH
65132: LD_VAR 0 2
65136: PUSH
65137: LD_INT 4
65139: MINUS
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: LIST
65148: PUSH
65149: LD_VAR 0 1
65153: PUSH
65154: LD_INT 3
65156: MINUS
65157: PUSH
65158: LD_VAR 0 2
65162: PUSH
65163: LD_INT 3
65165: MINUS
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// end ; 4 :
65182: GO 65463
65184: LD_INT 4
65186: DOUBLE
65187: EQUAL
65188: IFTRUE 65192
65190: GO 65325
65192: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65193: LD_ADDR_VAR 0 5
65197: PUSH
65198: LD_VAR 0 1
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: LD_INT 4
65210: PLUS
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: PUSH
65220: LD_VAR 0 1
65224: PUSH
65225: LD_INT 3
65227: PLUS
65228: PUSH
65229: LD_VAR 0 2
65233: PUSH
65234: LD_INT 3
65236: PLUS
65237: PUSH
65238: LD_INT 5
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: PUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_INT 4
65253: PLUS
65254: PUSH
65255: LD_VAR 0 2
65259: PUSH
65260: LD_INT 4
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: PUSH
65268: LD_VAR 0 1
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: LD_INT 3
65280: MINUS
65281: PUSH
65282: LD_INT 3
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: PUSH
65290: LD_VAR 0 1
65294: PUSH
65295: LD_INT 4
65297: MINUS
65298: PUSH
65299: LD_VAR 0 2
65303: PUSH
65304: LD_INT 4
65306: MINUS
65307: PUSH
65308: LD_INT 2
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: LIST
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: ST_TO_ADDR
// end ; 5 :
65323: GO 65463
65325: LD_INT 5
65327: DOUBLE
65328: EQUAL
65329: IFTRUE 65333
65331: GO 65462
65333: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65334: LD_ADDR_VAR 0 5
65338: PUSH
65339: LD_VAR 0 1
65343: PUSH
65344: LD_INT 4
65346: MINUS
65347: PUSH
65348: LD_VAR 0 2
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: PUSH
65361: LD_VAR 0 1
65365: PUSH
65366: LD_VAR 0 2
65370: PUSH
65371: LD_INT 4
65373: MINUS
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: PUSH
65383: LD_VAR 0 1
65387: PUSH
65388: LD_INT 4
65390: PLUS
65391: PUSH
65392: LD_VAR 0 2
65396: PUSH
65397: LD_INT 4
65399: PLUS
65400: PUSH
65401: LD_INT 5
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: LIST
65408: PUSH
65409: LD_VAR 0 1
65413: PUSH
65414: LD_INT 3
65416: PLUS
65417: PUSH
65418: LD_VAR 0 2
65422: PUSH
65423: LD_INT 4
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: PUSH
65431: LD_VAR 0 1
65435: PUSH
65436: LD_VAR 0 2
65440: PUSH
65441: LD_INT 3
65443: PLUS
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: ST_TO_ADDR
// end ; end ;
65460: GO 65463
65462: POP
// result := list ;
65463: LD_ADDR_VAR 0 4
65467: PUSH
65468: LD_VAR 0 5
65472: ST_TO_ADDR
// end ;
65473: LD_VAR 0 4
65477: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65478: LD_INT 0
65480: PPUSH
65481: PPUSH
65482: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65483: LD_VAR 0 1
65487: NOT
65488: PUSH
65489: LD_VAR 0 2
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: LD_INT 4
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: IN
65512: NOT
65513: OR
65514: IFFALSE 65518
// exit ;
65516: GO 65610
// tmp := [ ] ;
65518: LD_ADDR_VAR 0 5
65522: PUSH
65523: EMPTY
65524: ST_TO_ADDR
// for i in units do
65525: LD_ADDR_VAR 0 4
65529: PUSH
65530: LD_VAR 0 1
65534: PUSH
65535: FOR_IN
65536: IFFALSE 65579
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65538: LD_ADDR_VAR 0 5
65542: PUSH
65543: LD_VAR 0 5
65547: PPUSH
65548: LD_VAR 0 5
65552: PUSH
65553: LD_INT 1
65555: PLUS
65556: PPUSH
65557: LD_VAR 0 4
65561: PPUSH
65562: LD_VAR 0 2
65566: PPUSH
65567: CALL_OW 259
65571: PPUSH
65572: CALL_OW 2
65576: ST_TO_ADDR
65577: GO 65535
65579: POP
65580: POP
// if not tmp then
65581: LD_VAR 0 5
65585: NOT
65586: IFFALSE 65590
// exit ;
65588: GO 65610
// result := SortListByListDesc ( units , tmp ) ;
65590: LD_ADDR_VAR 0 3
65594: PUSH
65595: LD_VAR 0 1
65599: PPUSH
65600: LD_VAR 0 5
65604: PPUSH
65605: CALL_OW 77
65609: ST_TO_ADDR
// end ;
65610: LD_VAR 0 3
65614: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65615: LD_INT 0
65617: PPUSH
65618: PPUSH
65619: PPUSH
// result := false ;
65620: LD_ADDR_VAR 0 3
65624: PUSH
65625: LD_INT 0
65627: ST_TO_ADDR
// x := GetX ( building ) ;
65628: LD_ADDR_VAR 0 4
65632: PUSH
65633: LD_VAR 0 2
65637: PPUSH
65638: CALL_OW 250
65642: ST_TO_ADDR
// y := GetY ( building ) ;
65643: LD_ADDR_VAR 0 5
65647: PUSH
65648: LD_VAR 0 2
65652: PPUSH
65653: CALL_OW 251
65657: ST_TO_ADDR
// if not building or not x or not y then
65658: LD_VAR 0 2
65662: NOT
65663: PUSH
65664: LD_VAR 0 4
65668: NOT
65669: OR
65670: PUSH
65671: LD_VAR 0 5
65675: NOT
65676: OR
65677: IFFALSE 65681
// exit ;
65679: GO 65773
// if GetTaskList ( unit ) then
65681: LD_VAR 0 1
65685: PPUSH
65686: CALL_OW 437
65690: IFFALSE 65773
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65692: LD_STRING e
65694: PUSH
65695: LD_VAR 0 1
65699: PPUSH
65700: CALL_OW 437
65704: PUSH
65705: LD_INT 1
65707: ARRAY
65708: PUSH
65709: LD_INT 1
65711: ARRAY
65712: EQUAL
65713: PUSH
65714: LD_VAR 0 4
65718: PUSH
65719: LD_VAR 0 1
65723: PPUSH
65724: CALL_OW 437
65728: PUSH
65729: LD_INT 1
65731: ARRAY
65732: PUSH
65733: LD_INT 2
65735: ARRAY
65736: EQUAL
65737: AND
65738: PUSH
65739: LD_VAR 0 5
65743: PUSH
65744: LD_VAR 0 1
65748: PPUSH
65749: CALL_OW 437
65753: PUSH
65754: LD_INT 1
65756: ARRAY
65757: PUSH
65758: LD_INT 3
65760: ARRAY
65761: EQUAL
65762: AND
65763: IFFALSE 65773
// result := true end ;
65765: LD_ADDR_VAR 0 3
65769: PUSH
65770: LD_INT 1
65772: ST_TO_ADDR
// end ;
65773: LD_VAR 0 3
65777: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65778: LD_INT 0
65780: PPUSH
// result := false ;
65781: LD_ADDR_VAR 0 4
65785: PUSH
65786: LD_INT 0
65788: ST_TO_ADDR
// if GetTaskList ( unit ) then
65789: LD_VAR 0 1
65793: PPUSH
65794: CALL_OW 437
65798: IFFALSE 65881
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65800: LD_STRING M
65802: PUSH
65803: LD_VAR 0 1
65807: PPUSH
65808: CALL_OW 437
65812: PUSH
65813: LD_INT 1
65815: ARRAY
65816: PUSH
65817: LD_INT 1
65819: ARRAY
65820: EQUAL
65821: PUSH
65822: LD_VAR 0 2
65826: PUSH
65827: LD_VAR 0 1
65831: PPUSH
65832: CALL_OW 437
65836: PUSH
65837: LD_INT 1
65839: ARRAY
65840: PUSH
65841: LD_INT 2
65843: ARRAY
65844: EQUAL
65845: AND
65846: PUSH
65847: LD_VAR 0 3
65851: PUSH
65852: LD_VAR 0 1
65856: PPUSH
65857: CALL_OW 437
65861: PUSH
65862: LD_INT 1
65864: ARRAY
65865: PUSH
65866: LD_INT 3
65868: ARRAY
65869: EQUAL
65870: AND
65871: IFFALSE 65881
// result := true ;
65873: LD_ADDR_VAR 0 4
65877: PUSH
65878: LD_INT 1
65880: ST_TO_ADDR
// end ; end ;
65881: LD_VAR 0 4
65885: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65886: LD_INT 0
65888: PPUSH
65889: PPUSH
65890: PPUSH
65891: PPUSH
// if not unit or not area then
65892: LD_VAR 0 1
65896: NOT
65897: PUSH
65898: LD_VAR 0 2
65902: NOT
65903: OR
65904: IFFALSE 65908
// exit ;
65906: GO 66072
// tmp := AreaToList ( area , i ) ;
65908: LD_ADDR_VAR 0 6
65912: PUSH
65913: LD_VAR 0 2
65917: PPUSH
65918: LD_VAR 0 5
65922: PPUSH
65923: CALL_OW 517
65927: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65928: LD_ADDR_VAR 0 5
65932: PUSH
65933: DOUBLE
65934: LD_INT 1
65936: DEC
65937: ST_TO_ADDR
65938: LD_VAR 0 6
65942: PUSH
65943: LD_INT 1
65945: ARRAY
65946: PUSH
65947: FOR_TO
65948: IFFALSE 66070
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65950: LD_ADDR_VAR 0 7
65954: PUSH
65955: LD_VAR 0 6
65959: PUSH
65960: LD_INT 1
65962: ARRAY
65963: PUSH
65964: LD_VAR 0 5
65968: ARRAY
65969: PUSH
65970: LD_VAR 0 6
65974: PUSH
65975: LD_INT 2
65977: ARRAY
65978: PUSH
65979: LD_VAR 0 5
65983: ARRAY
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65989: LD_VAR 0 7
65993: PUSH
65994: LD_INT 1
65996: ARRAY
65997: PPUSH
65998: LD_VAR 0 7
66002: PUSH
66003: LD_INT 2
66005: ARRAY
66006: PPUSH
66007: CALL_OW 428
66011: PUSH
66012: LD_INT 0
66014: EQUAL
66015: IFFALSE 66068
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66017: LD_VAR 0 1
66021: PPUSH
66022: LD_VAR 0 7
66026: PUSH
66027: LD_INT 1
66029: ARRAY
66030: PPUSH
66031: LD_VAR 0 7
66035: PUSH
66036: LD_INT 2
66038: ARRAY
66039: PPUSH
66040: LD_VAR 0 3
66044: PPUSH
66045: CALL_OW 48
// result := IsPlaced ( unit ) ;
66049: LD_ADDR_VAR 0 4
66053: PUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: CALL_OW 305
66063: ST_TO_ADDR
// exit ;
66064: POP
66065: POP
66066: GO 66072
// end ; end ;
66068: GO 65947
66070: POP
66071: POP
// end ;
66072: LD_VAR 0 4
66076: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66077: LD_INT 0
66079: PPUSH
66080: PPUSH
66081: PPUSH
// if not side or side > 8 then
66082: LD_VAR 0 1
66086: NOT
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: LD_INT 8
66095: GREATER
66096: OR
66097: IFFALSE 66101
// exit ;
66099: GO 66288
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66101: LD_ADDR_VAR 0 4
66105: PUSH
66106: LD_INT 22
66108: PUSH
66109: LD_VAR 0 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 21
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PPUSH
66132: CALL_OW 69
66136: ST_TO_ADDR
// if not tmp then
66137: LD_VAR 0 4
66141: NOT
66142: IFFALSE 66146
// exit ;
66144: GO 66288
// enable_addtolog := true ;
66146: LD_ADDR_OWVAR 81
66150: PUSH
66151: LD_INT 1
66153: ST_TO_ADDR
// AddToLog ( [ ) ;
66154: LD_STRING [
66156: PPUSH
66157: CALL_OW 561
// for i in tmp do
66161: LD_ADDR_VAR 0 3
66165: PUSH
66166: LD_VAR 0 4
66170: PUSH
66171: FOR_IN
66172: IFFALSE 66279
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66174: LD_STRING [
66176: PUSH
66177: LD_VAR 0 3
66181: PPUSH
66182: CALL_OW 266
66186: STR
66187: PUSH
66188: LD_STRING , 
66190: STR
66191: PUSH
66192: LD_VAR 0 3
66196: PPUSH
66197: CALL_OW 250
66201: STR
66202: PUSH
66203: LD_STRING , 
66205: STR
66206: PUSH
66207: LD_VAR 0 3
66211: PPUSH
66212: CALL_OW 251
66216: STR
66217: PUSH
66218: LD_STRING , 
66220: STR
66221: PUSH
66222: LD_VAR 0 3
66226: PPUSH
66227: CALL_OW 254
66231: STR
66232: PUSH
66233: LD_STRING , 
66235: STR
66236: PUSH
66237: LD_VAR 0 3
66241: PPUSH
66242: LD_INT 1
66244: PPUSH
66245: CALL_OW 268
66249: STR
66250: PUSH
66251: LD_STRING , 
66253: STR
66254: PUSH
66255: LD_VAR 0 3
66259: PPUSH
66260: LD_INT 2
66262: PPUSH
66263: CALL_OW 268
66267: STR
66268: PUSH
66269: LD_STRING ],
66271: STR
66272: PPUSH
66273: CALL_OW 561
// end ;
66277: GO 66171
66279: POP
66280: POP
// AddToLog ( ]; ) ;
66281: LD_STRING ];
66283: PPUSH
66284: CALL_OW 561
// end ;
66288: LD_VAR 0 2
66292: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66293: LD_INT 0
66295: PPUSH
66296: PPUSH
66297: PPUSH
66298: PPUSH
66299: PPUSH
// if not area or not rate or not max then
66300: LD_VAR 0 1
66304: NOT
66305: PUSH
66306: LD_VAR 0 2
66310: NOT
66311: OR
66312: PUSH
66313: LD_VAR 0 4
66317: NOT
66318: OR
66319: IFFALSE 66323
// exit ;
66321: GO 66515
// while 1 do
66323: LD_INT 1
66325: IFFALSE 66515
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66327: LD_ADDR_VAR 0 9
66331: PUSH
66332: LD_VAR 0 1
66336: PPUSH
66337: LD_INT 1
66339: PPUSH
66340: CALL_OW 287
66344: PUSH
66345: LD_INT 10
66347: MUL
66348: ST_TO_ADDR
// r := rate / 10 ;
66349: LD_ADDR_VAR 0 7
66353: PUSH
66354: LD_VAR 0 2
66358: PUSH
66359: LD_INT 10
66361: DIVREAL
66362: ST_TO_ADDR
// time := 1 1$00 ;
66363: LD_ADDR_VAR 0 8
66367: PUSH
66368: LD_INT 2100
66370: ST_TO_ADDR
// if amount < min then
66371: LD_VAR 0 9
66375: PUSH
66376: LD_VAR 0 3
66380: LESS
66381: IFFALSE 66399
// r := r * 2 else
66383: LD_ADDR_VAR 0 7
66387: PUSH
66388: LD_VAR 0 7
66392: PUSH
66393: LD_INT 2
66395: MUL
66396: ST_TO_ADDR
66397: GO 66425
// if amount > max then
66399: LD_VAR 0 9
66403: PUSH
66404: LD_VAR 0 4
66408: GREATER
66409: IFFALSE 66425
// r := r / 2 ;
66411: LD_ADDR_VAR 0 7
66415: PUSH
66416: LD_VAR 0 7
66420: PUSH
66421: LD_INT 2
66423: DIVREAL
66424: ST_TO_ADDR
// time := time / r ;
66425: LD_ADDR_VAR 0 8
66429: PUSH
66430: LD_VAR 0 8
66434: PUSH
66435: LD_VAR 0 7
66439: DIVREAL
66440: ST_TO_ADDR
// if time < 0 then
66441: LD_VAR 0 8
66445: PUSH
66446: LD_INT 0
66448: LESS
66449: IFFALSE 66466
// time := time * - 1 ;
66451: LD_ADDR_VAR 0 8
66455: PUSH
66456: LD_VAR 0 8
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: MUL
66465: ST_TO_ADDR
// wait ( time ) ;
66466: LD_VAR 0 8
66470: PPUSH
66471: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66475: LD_INT 35
66477: PPUSH
66478: LD_INT 875
66480: PPUSH
66481: CALL_OW 12
66485: PPUSH
66486: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66490: LD_INT 1
66492: PPUSH
66493: LD_INT 5
66495: PPUSH
66496: CALL_OW 12
66500: PPUSH
66501: LD_VAR 0 1
66505: PPUSH
66506: LD_INT 1
66508: PPUSH
66509: CALL_OW 55
// end ;
66513: GO 66323
// end ;
66515: LD_VAR 0 5
66519: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66520: LD_INT 0
66522: PPUSH
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
66528: PPUSH
66529: PPUSH
// if not turrets or not factories then
66530: LD_VAR 0 1
66534: NOT
66535: PUSH
66536: LD_VAR 0 2
66540: NOT
66541: OR
66542: IFFALSE 66546
// exit ;
66544: GO 66853
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66546: LD_ADDR_VAR 0 10
66550: PUSH
66551: LD_INT 5
66553: PUSH
66554: LD_INT 6
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: LD_INT 4
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 3
66573: PUSH
66574: LD_INT 5
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 24
66588: PUSH
66589: LD_INT 25
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 23
66598: PUSH
66599: LD_INT 27
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 42
66612: PUSH
66613: LD_INT 43
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 44
66622: PUSH
66623: LD_INT 46
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 45
66632: PUSH
66633: LD_INT 47
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// result := [ ] ;
66650: LD_ADDR_VAR 0 3
66654: PUSH
66655: EMPTY
66656: ST_TO_ADDR
// for i in turrets do
66657: LD_ADDR_VAR 0 4
66661: PUSH
66662: LD_VAR 0 1
66666: PUSH
66667: FOR_IN
66668: IFFALSE 66851
// begin nat := GetNation ( i ) ;
66670: LD_ADDR_VAR 0 7
66674: PUSH
66675: LD_VAR 0 4
66679: PPUSH
66680: CALL_OW 248
66684: ST_TO_ADDR
// weapon := 0 ;
66685: LD_ADDR_VAR 0 8
66689: PUSH
66690: LD_INT 0
66692: ST_TO_ADDR
// if not nat then
66693: LD_VAR 0 7
66697: NOT
66698: IFFALSE 66702
// continue ;
66700: GO 66667
// for j in list [ nat ] do
66702: LD_ADDR_VAR 0 5
66706: PUSH
66707: LD_VAR 0 10
66711: PUSH
66712: LD_VAR 0 7
66716: ARRAY
66717: PUSH
66718: FOR_IN
66719: IFFALSE 66760
// if GetBWeapon ( i ) = j [ 1 ] then
66721: LD_VAR 0 4
66725: PPUSH
66726: CALL_OW 269
66730: PUSH
66731: LD_VAR 0 5
66735: PUSH
66736: LD_INT 1
66738: ARRAY
66739: EQUAL
66740: IFFALSE 66758
// begin weapon := j [ 2 ] ;
66742: LD_ADDR_VAR 0 8
66746: PUSH
66747: LD_VAR 0 5
66751: PUSH
66752: LD_INT 2
66754: ARRAY
66755: ST_TO_ADDR
// break ;
66756: GO 66760
// end ;
66758: GO 66718
66760: POP
66761: POP
// if not weapon then
66762: LD_VAR 0 8
66766: NOT
66767: IFFALSE 66771
// continue ;
66769: GO 66667
// for k in factories do
66771: LD_ADDR_VAR 0 6
66775: PUSH
66776: LD_VAR 0 2
66780: PUSH
66781: FOR_IN
66782: IFFALSE 66847
// begin weapons := AvailableWeaponList ( k ) ;
66784: LD_ADDR_VAR 0 9
66788: PUSH
66789: LD_VAR 0 6
66793: PPUSH
66794: CALL_OW 478
66798: ST_TO_ADDR
// if not weapons then
66799: LD_VAR 0 9
66803: NOT
66804: IFFALSE 66808
// continue ;
66806: GO 66781
// if weapon in weapons then
66808: LD_VAR 0 8
66812: PUSH
66813: LD_VAR 0 9
66817: IN
66818: IFFALSE 66845
// begin result := [ i , weapon ] ;
66820: LD_ADDR_VAR 0 3
66824: PUSH
66825: LD_VAR 0 4
66829: PUSH
66830: LD_VAR 0 8
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: ST_TO_ADDR
// exit ;
66839: POP
66840: POP
66841: POP
66842: POP
66843: GO 66853
// end ; end ;
66845: GO 66781
66847: POP
66848: POP
// end ;
66849: GO 66667
66851: POP
66852: POP
// end ;
66853: LD_VAR 0 3
66857: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66858: LD_INT 0
66860: PPUSH
// if not side or side > 8 then
66861: LD_VAR 0 3
66865: NOT
66866: PUSH
66867: LD_VAR 0 3
66871: PUSH
66872: LD_INT 8
66874: GREATER
66875: OR
66876: IFFALSE 66880
// exit ;
66878: GO 66939
// if not range then
66880: LD_VAR 0 4
66884: NOT
66885: IFFALSE 66896
// range := - 12 ;
66887: LD_ADDR_VAR 0 4
66891: PUSH
66892: LD_INT 12
66894: NEG
66895: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66896: LD_VAR 0 1
66900: PPUSH
66901: LD_VAR 0 2
66905: PPUSH
66906: LD_VAR 0 3
66910: PPUSH
66911: LD_VAR 0 4
66915: PPUSH
66916: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66920: LD_VAR 0 1
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 3
66934: PPUSH
66935: CALL_OW 331
// end ;
66939: LD_VAR 0 5
66943: RET
// export function Video ( mode ) ; begin
66944: LD_INT 0
66946: PPUSH
// ingame_video = mode ;
66947: LD_ADDR_OWVAR 52
66951: PUSH
66952: LD_VAR 0 1
66956: ST_TO_ADDR
// interface_hidden = mode ;
66957: LD_ADDR_OWVAR 54
66961: PUSH
66962: LD_VAR 0 1
66966: ST_TO_ADDR
// end ;
66967: LD_VAR 0 2
66971: RET
// export function Join ( array , element ) ; begin
66972: LD_INT 0
66974: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66975: LD_ADDR_VAR 0 3
66979: PUSH
66980: LD_VAR 0 1
66984: PPUSH
66985: LD_VAR 0 1
66989: PUSH
66990: LD_INT 1
66992: PLUS
66993: PPUSH
66994: LD_VAR 0 2
66998: PPUSH
66999: CALL_OW 1
67003: ST_TO_ADDR
// end ;
67004: LD_VAR 0 3
67008: RET
// export function JoinUnion ( array , element ) ; begin
67009: LD_INT 0
67011: PPUSH
// result := array union element ;
67012: LD_ADDR_VAR 0 3
67016: PUSH
67017: LD_VAR 0 1
67021: PUSH
67022: LD_VAR 0 2
67026: UNION
67027: ST_TO_ADDR
// end ;
67028: LD_VAR 0 3
67032: RET
// export function GetBehemoths ( side ) ; begin
67033: LD_INT 0
67035: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67036: LD_ADDR_VAR 0 2
67040: PUSH
67041: LD_INT 22
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 31
67055: PUSH
67056: LD_INT 25
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PPUSH
67067: CALL_OW 69
67071: ST_TO_ADDR
// end ;
67072: LD_VAR 0 2
67076: RET
// export function Shuffle ( array ) ; var i , index ; begin
67077: LD_INT 0
67079: PPUSH
67080: PPUSH
67081: PPUSH
// result := [ ] ;
67082: LD_ADDR_VAR 0 2
67086: PUSH
67087: EMPTY
67088: ST_TO_ADDR
// if not array then
67089: LD_VAR 0 1
67093: NOT
67094: IFFALSE 67098
// exit ;
67096: GO 67197
// Randomize ;
67098: CALL_OW 10
// for i = array downto 1 do
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: DOUBLE
67108: LD_VAR 0 1
67112: INC
67113: ST_TO_ADDR
67114: LD_INT 1
67116: PUSH
67117: FOR_DOWNTO
67118: IFFALSE 67195
// begin index := rand ( 1 , array ) ;
67120: LD_ADDR_VAR 0 4
67124: PUSH
67125: LD_INT 1
67127: PPUSH
67128: LD_VAR 0 1
67132: PPUSH
67133: CALL_OW 12
67137: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67138: LD_ADDR_VAR 0 2
67142: PUSH
67143: LD_VAR 0 2
67147: PPUSH
67148: LD_VAR 0 2
67152: PUSH
67153: LD_INT 1
67155: PLUS
67156: PPUSH
67157: LD_VAR 0 1
67161: PUSH
67162: LD_VAR 0 4
67166: ARRAY
67167: PPUSH
67168: CALL_OW 2
67172: ST_TO_ADDR
// array := Delete ( array , index ) ;
67173: LD_ADDR_VAR 0 1
67177: PUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: LD_VAR 0 4
67187: PPUSH
67188: CALL_OW 3
67192: ST_TO_ADDR
// end ;
67193: GO 67117
67195: POP
67196: POP
// end ;
67197: LD_VAR 0 2
67201: RET
// export function GetBaseMaterials ( base ) ; begin
67202: LD_INT 0
67204: PPUSH
// result := [ 0 , 0 , 0 ] ;
67205: LD_ADDR_VAR 0 2
67209: PUSH
67210: LD_INT 0
67212: PUSH
67213: LD_INT 0
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: LIST
67223: ST_TO_ADDR
// if not base then
67224: LD_VAR 0 1
67228: NOT
67229: IFFALSE 67233
// exit ;
67231: GO 67282
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67233: LD_ADDR_VAR 0 2
67237: PUSH
67238: LD_VAR 0 1
67242: PPUSH
67243: LD_INT 1
67245: PPUSH
67246: CALL_OW 275
67250: PUSH
67251: LD_VAR 0 1
67255: PPUSH
67256: LD_INT 2
67258: PPUSH
67259: CALL_OW 275
67263: PUSH
67264: LD_VAR 0 1
67268: PPUSH
67269: LD_INT 3
67271: PPUSH
67272: CALL_OW 275
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: LIST
67281: ST_TO_ADDR
// end ;
67282: LD_VAR 0 2
67286: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67287: LD_INT 0
67289: PPUSH
67290: PPUSH
// result := array ;
67291: LD_ADDR_VAR 0 3
67295: PUSH
67296: LD_VAR 0 1
67300: ST_TO_ADDR
// if size > 0 then
67301: LD_VAR 0 2
67305: PUSH
67306: LD_INT 0
67308: GREATER
67309: IFFALSE 67355
// for i := array downto size do
67311: LD_ADDR_VAR 0 4
67315: PUSH
67316: DOUBLE
67317: LD_VAR 0 1
67321: INC
67322: ST_TO_ADDR
67323: LD_VAR 0 2
67327: PUSH
67328: FOR_DOWNTO
67329: IFFALSE 67353
// result := Delete ( result , result ) ;
67331: LD_ADDR_VAR 0 3
67335: PUSH
67336: LD_VAR 0 3
67340: PPUSH
67341: LD_VAR 0 3
67345: PPUSH
67346: CALL_OW 3
67350: ST_TO_ADDR
67351: GO 67328
67353: POP
67354: POP
// end ;
67355: LD_VAR 0 3
67359: RET
// export function ComExit ( unit ) ; var tmp ; begin
67360: LD_INT 0
67362: PPUSH
67363: PPUSH
// if not IsInUnit ( unit ) then
67364: LD_VAR 0 1
67368: PPUSH
67369: CALL_OW 310
67373: NOT
67374: IFFALSE 67378
// exit ;
67376: GO 67438
// tmp := IsInUnit ( unit ) ;
67378: LD_ADDR_VAR 0 3
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: CALL_OW 310
67392: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67393: LD_VAR 0 3
67397: PPUSH
67398: CALL_OW 247
67402: PUSH
67403: LD_INT 2
67405: EQUAL
67406: IFFALSE 67419
// ComExitVehicle ( unit ) else
67408: LD_VAR 0 1
67412: PPUSH
67413: CALL_OW 121
67417: GO 67428
// ComExitBuilding ( unit ) ;
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 122
// result := tmp ;
67428: LD_ADDR_VAR 0 2
67432: PUSH
67433: LD_VAR 0 3
67437: ST_TO_ADDR
// end ;
67438: LD_VAR 0 2
67442: RET
// export function ComExitAll ( units ) ; var i ; begin
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
// if not units then
67447: LD_VAR 0 1
67451: NOT
67452: IFFALSE 67456
// exit ;
67454: GO 67482
// for i in units do
67456: LD_ADDR_VAR 0 3
67460: PUSH
67461: LD_VAR 0 1
67465: PUSH
67466: FOR_IN
67467: IFFALSE 67480
// ComExit ( i ) ;
67469: LD_VAR 0 3
67473: PPUSH
67474: CALL 67360 0 1
67478: GO 67466
67480: POP
67481: POP
// end ;
67482: LD_VAR 0 2
67486: RET
// export function ResetHc ; begin
67487: LD_INT 0
67489: PPUSH
// InitHc ;
67490: CALL_OW 19
// hc_importance := 0 ;
67494: LD_ADDR_OWVAR 32
67498: PUSH
67499: LD_INT 0
67501: ST_TO_ADDR
// end ;
67502: LD_VAR 0 1
67506: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
67511: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67512: LD_ADDR_VAR 0 6
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_VAR 0 3
67526: PLUS
67527: PUSH
67528: LD_INT 2
67530: DIV
67531: ST_TO_ADDR
// if _x < 0 then
67532: LD_VAR 0 6
67536: PUSH
67537: LD_INT 0
67539: LESS
67540: IFFALSE 67557
// _x := _x * - 1 ;
67542: LD_ADDR_VAR 0 6
67546: PUSH
67547: LD_VAR 0 6
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: MUL
67556: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67557: LD_ADDR_VAR 0 7
67561: PUSH
67562: LD_VAR 0 2
67566: PUSH
67567: LD_VAR 0 4
67571: PLUS
67572: PUSH
67573: LD_INT 2
67575: DIV
67576: ST_TO_ADDR
// if _y < 0 then
67577: LD_VAR 0 7
67581: PUSH
67582: LD_INT 0
67584: LESS
67585: IFFALSE 67602
// _y := _y * - 1 ;
67587: LD_ADDR_VAR 0 7
67591: PUSH
67592: LD_VAR 0 7
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: MUL
67601: ST_TO_ADDR
// result := [ _x , _y ] ;
67602: LD_ADDR_VAR 0 5
67606: PUSH
67607: LD_VAR 0 6
67611: PUSH
67612: LD_VAR 0 7
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: ST_TO_ADDR
// end ;
67621: LD_VAR 0 5
67625: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67626: LD_INT 0
67628: PPUSH
67629: PPUSH
67630: PPUSH
67631: PPUSH
// task := GetTaskList ( unit ) ;
67632: LD_ADDR_VAR 0 7
67636: PUSH
67637: LD_VAR 0 1
67641: PPUSH
67642: CALL_OW 437
67646: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67647: LD_VAR 0 7
67651: NOT
67652: PUSH
67653: LD_VAR 0 1
67657: PPUSH
67658: LD_VAR 0 2
67662: PPUSH
67663: CALL_OW 308
67667: NOT
67668: AND
67669: IFFALSE 67673
// exit ;
67671: GO 67791
// if IsInArea ( unit , area ) then
67673: LD_VAR 0 1
67677: PPUSH
67678: LD_VAR 0 2
67682: PPUSH
67683: CALL_OW 308
67687: IFFALSE 67705
// begin ComMoveToArea ( unit , goAway ) ;
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_VAR 0 3
67698: PPUSH
67699: CALL_OW 113
// exit ;
67703: GO 67791
// end ; if task [ 1 ] [ 1 ] <> M then
67705: LD_VAR 0 7
67709: PUSH
67710: LD_INT 1
67712: ARRAY
67713: PUSH
67714: LD_INT 1
67716: ARRAY
67717: PUSH
67718: LD_STRING M
67720: NONEQUAL
67721: IFFALSE 67725
// exit ;
67723: GO 67791
// x := task [ 1 ] [ 2 ] ;
67725: LD_ADDR_VAR 0 5
67729: PUSH
67730: LD_VAR 0 7
67734: PUSH
67735: LD_INT 1
67737: ARRAY
67738: PUSH
67739: LD_INT 2
67741: ARRAY
67742: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67743: LD_ADDR_VAR 0 6
67747: PUSH
67748: LD_VAR 0 7
67752: PUSH
67753: LD_INT 1
67755: ARRAY
67756: PUSH
67757: LD_INT 3
67759: ARRAY
67760: ST_TO_ADDR
// if InArea ( x , y , area ) then
67761: LD_VAR 0 5
67765: PPUSH
67766: LD_VAR 0 6
67770: PPUSH
67771: LD_VAR 0 2
67775: PPUSH
67776: CALL_OW 309
67780: IFFALSE 67791
// ComStop ( unit ) ;
67782: LD_VAR 0 1
67786: PPUSH
67787: CALL_OW 141
// end ;
67791: LD_VAR 0 4
67795: RET
// export function Abs ( value ) ; begin
67796: LD_INT 0
67798: PPUSH
// result := value ;
67799: LD_ADDR_VAR 0 2
67803: PUSH
67804: LD_VAR 0 1
67808: ST_TO_ADDR
// if value < 0 then
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 0
67816: LESS
67817: IFFALSE 67834
// result := value * - 1 ;
67819: LD_ADDR_VAR 0 2
67823: PUSH
67824: LD_VAR 0 1
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: MUL
67833: ST_TO_ADDR
// end ;
67834: LD_VAR 0 2
67838: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67839: LD_INT 0
67841: PPUSH
67842: PPUSH
67843: PPUSH
67844: PPUSH
67845: PPUSH
67846: PPUSH
67847: PPUSH
67848: PPUSH
// if not unit or not building then
67849: LD_VAR 0 1
67853: NOT
67854: PUSH
67855: LD_VAR 0 2
67859: NOT
67860: OR
67861: IFFALSE 67865
// exit ;
67863: GO 68091
// x := GetX ( building ) ;
67865: LD_ADDR_VAR 0 4
67869: PUSH
67870: LD_VAR 0 2
67874: PPUSH
67875: CALL_OW 250
67879: ST_TO_ADDR
// y := GetY ( building ) ;
67880: LD_ADDR_VAR 0 6
67884: PUSH
67885: LD_VAR 0 2
67889: PPUSH
67890: CALL_OW 251
67894: ST_TO_ADDR
// d := GetDir ( building ) ;
67895: LD_ADDR_VAR 0 8
67899: PUSH
67900: LD_VAR 0 2
67904: PPUSH
67905: CALL_OW 254
67909: ST_TO_ADDR
// r := 4 ;
67910: LD_ADDR_VAR 0 9
67914: PUSH
67915: LD_INT 4
67917: ST_TO_ADDR
// for i := 1 to 5 do
67918: LD_ADDR_VAR 0 10
67922: PUSH
67923: DOUBLE
67924: LD_INT 1
67926: DEC
67927: ST_TO_ADDR
67928: LD_INT 5
67930: PUSH
67931: FOR_TO
67932: IFFALSE 68089
// begin _x := ShiftX ( x , d , r + i ) ;
67934: LD_ADDR_VAR 0 5
67938: PUSH
67939: LD_VAR 0 4
67943: PPUSH
67944: LD_VAR 0 8
67948: PPUSH
67949: LD_VAR 0 9
67953: PUSH
67954: LD_VAR 0 10
67958: PLUS
67959: PPUSH
67960: CALL_OW 272
67964: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67965: LD_ADDR_VAR 0 7
67969: PUSH
67970: LD_VAR 0 6
67974: PPUSH
67975: LD_VAR 0 8
67979: PPUSH
67980: LD_VAR 0 9
67984: PUSH
67985: LD_VAR 0 10
67989: PLUS
67990: PPUSH
67991: CALL_OW 273
67995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67996: LD_VAR 0 5
68000: PPUSH
68001: LD_VAR 0 7
68005: PPUSH
68006: CALL_OW 488
68010: PUSH
68011: LD_VAR 0 5
68015: PPUSH
68016: LD_VAR 0 7
68020: PPUSH
68021: CALL_OW 428
68025: PPUSH
68026: CALL_OW 247
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: IN
68041: NOT
68042: AND
68043: IFFALSE 68087
// begin ComMoveXY ( unit , _x , _y ) ;
68045: LD_VAR 0 1
68049: PPUSH
68050: LD_VAR 0 5
68054: PPUSH
68055: LD_VAR 0 7
68059: PPUSH
68060: CALL_OW 111
// result := [ _x , _y ] ;
68064: LD_ADDR_VAR 0 3
68068: PUSH
68069: LD_VAR 0 5
68073: PUSH
68074: LD_VAR 0 7
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: ST_TO_ADDR
// exit ;
68083: POP
68084: POP
68085: GO 68091
// end ; end ;
68087: GO 67931
68089: POP
68090: POP
// end ;
68091: LD_VAR 0 3
68095: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68096: LD_INT 0
68098: PPUSH
68099: PPUSH
68100: PPUSH
// result := 0 ;
68101: LD_ADDR_VAR 0 3
68105: PUSH
68106: LD_INT 0
68108: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68109: LD_VAR 0 1
68113: PUSH
68114: LD_INT 0
68116: LESS
68117: PUSH
68118: LD_VAR 0 1
68122: PUSH
68123: LD_INT 8
68125: GREATER
68126: OR
68127: PUSH
68128: LD_VAR 0 2
68132: PUSH
68133: LD_INT 0
68135: LESS
68136: OR
68137: PUSH
68138: LD_VAR 0 2
68142: PUSH
68143: LD_INT 8
68145: GREATER
68146: OR
68147: IFFALSE 68151
// exit ;
68149: GO 68226
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68151: LD_ADDR_VAR 0 4
68155: PUSH
68156: LD_INT 22
68158: PUSH
68159: LD_VAR 0 2
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PPUSH
68168: CALL_OW 69
68172: PUSH
68173: FOR_IN
68174: IFFALSE 68224
// begin un := UnitShoot ( i ) ;
68176: LD_ADDR_VAR 0 5
68180: PUSH
68181: LD_VAR 0 4
68185: PPUSH
68186: CALL_OW 504
68190: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68191: LD_VAR 0 5
68195: PPUSH
68196: CALL_OW 255
68200: PUSH
68201: LD_VAR 0 1
68205: EQUAL
68206: IFFALSE 68222
// begin result := un ;
68208: LD_ADDR_VAR 0 3
68212: PUSH
68213: LD_VAR 0 5
68217: ST_TO_ADDR
// exit ;
68218: POP
68219: POP
68220: GO 68226
// end ; end ;
68222: GO 68173
68224: POP
68225: POP
// end ;
68226: LD_VAR 0 3
68230: RET
// export function GetCargoBay ( units ) ; begin
68231: LD_INT 0
68233: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68234: LD_ADDR_VAR 0 2
68238: PUSH
68239: LD_VAR 0 1
68243: PPUSH
68244: LD_INT 2
68246: PUSH
68247: LD_INT 34
68249: PUSH
68250: LD_INT 12
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 34
68259: PUSH
68260: LD_INT 51
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 34
68269: PUSH
68270: LD_INT 32
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 34
68279: PUSH
68280: LD_EXP 27
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: PPUSH
68296: CALL_OW 72
68300: ST_TO_ADDR
// end ;
68301: LD_VAR 0 2
68305: RET
// export function Negate ( value ) ; begin
68306: LD_INT 0
68308: PPUSH
// result := not value ;
68309: LD_ADDR_VAR 0 2
68313: PUSH
68314: LD_VAR 0 1
68318: NOT
68319: ST_TO_ADDR
// end ;
68320: LD_VAR 0 2
68324: RET
// export function Inc ( value ) ; begin
68325: LD_INT 0
68327: PPUSH
// result := value + 1 ;
68328: LD_ADDR_VAR 0 2
68332: PUSH
68333: LD_VAR 0 1
68337: PUSH
68338: LD_INT 1
68340: PLUS
68341: ST_TO_ADDR
// end ;
68342: LD_VAR 0 2
68346: RET
// export function Dec ( value ) ; begin
68347: LD_INT 0
68349: PPUSH
// result := value - 1 ;
68350: LD_ADDR_VAR 0 2
68354: PUSH
68355: LD_VAR 0 1
68359: PUSH
68360: LD_INT 1
68362: MINUS
68363: ST_TO_ADDR
// end ;
68364: LD_VAR 0 2
68368: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68369: LD_INT 0
68371: PPUSH
68372: PPUSH
68373: PPUSH
68374: PPUSH
68375: PPUSH
68376: PPUSH
68377: PPUSH
68378: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68379: LD_VAR 0 1
68383: PPUSH
68384: LD_VAR 0 2
68388: PPUSH
68389: CALL_OW 488
68393: NOT
68394: PUSH
68395: LD_VAR 0 3
68399: PPUSH
68400: LD_VAR 0 4
68404: PPUSH
68405: CALL_OW 488
68409: NOT
68410: OR
68411: IFFALSE 68424
// begin result := - 1 ;
68413: LD_ADDR_VAR 0 5
68417: PUSH
68418: LD_INT 1
68420: NEG
68421: ST_TO_ADDR
// exit ;
68422: GO 68659
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68424: LD_ADDR_VAR 0 12
68428: PUSH
68429: LD_VAR 0 1
68433: PPUSH
68434: LD_VAR 0 2
68438: PPUSH
68439: LD_VAR 0 3
68443: PPUSH
68444: LD_VAR 0 4
68448: PPUSH
68449: CALL 67507 0 4
68453: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68454: LD_ADDR_VAR 0 11
68458: PUSH
68459: LD_VAR 0 1
68463: PPUSH
68464: LD_VAR 0 2
68468: PPUSH
68469: LD_VAR 0 12
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PPUSH
68478: LD_VAR 0 12
68482: PUSH
68483: LD_INT 2
68485: ARRAY
68486: PPUSH
68487: CALL_OW 298
68491: ST_TO_ADDR
// distance := 9999 ;
68492: LD_ADDR_VAR 0 10
68496: PUSH
68497: LD_INT 9999
68499: ST_TO_ADDR
// for i := 0 to 5 do
68500: LD_ADDR_VAR 0 6
68504: PUSH
68505: DOUBLE
68506: LD_INT 0
68508: DEC
68509: ST_TO_ADDR
68510: LD_INT 5
68512: PUSH
68513: FOR_TO
68514: IFFALSE 68657
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68516: LD_ADDR_VAR 0 7
68520: PUSH
68521: LD_VAR 0 1
68525: PPUSH
68526: LD_VAR 0 6
68530: PPUSH
68531: LD_VAR 0 11
68535: PPUSH
68536: CALL_OW 272
68540: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68541: LD_ADDR_VAR 0 8
68545: PUSH
68546: LD_VAR 0 2
68550: PPUSH
68551: LD_VAR 0 6
68555: PPUSH
68556: LD_VAR 0 11
68560: PPUSH
68561: CALL_OW 273
68565: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68566: LD_VAR 0 7
68570: PPUSH
68571: LD_VAR 0 8
68575: PPUSH
68576: CALL_OW 488
68580: NOT
68581: IFFALSE 68585
// continue ;
68583: GO 68513
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68585: LD_ADDR_VAR 0 9
68589: PUSH
68590: LD_VAR 0 12
68594: PUSH
68595: LD_INT 1
68597: ARRAY
68598: PPUSH
68599: LD_VAR 0 12
68603: PUSH
68604: LD_INT 2
68606: ARRAY
68607: PPUSH
68608: LD_VAR 0 7
68612: PPUSH
68613: LD_VAR 0 8
68617: PPUSH
68618: CALL_OW 298
68622: ST_TO_ADDR
// if tmp < distance then
68623: LD_VAR 0 9
68627: PUSH
68628: LD_VAR 0 10
68632: LESS
68633: IFFALSE 68655
// begin result := i ;
68635: LD_ADDR_VAR 0 5
68639: PUSH
68640: LD_VAR 0 6
68644: ST_TO_ADDR
// distance := tmp ;
68645: LD_ADDR_VAR 0 10
68649: PUSH
68650: LD_VAR 0 9
68654: ST_TO_ADDR
// end ; end ;
68655: GO 68513
68657: POP
68658: POP
// end ;
68659: LD_VAR 0 5
68663: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68664: LD_INT 0
68666: PPUSH
68667: PPUSH
// if not driver or not IsInUnit ( driver ) then
68668: LD_VAR 0 1
68672: NOT
68673: PUSH
68674: LD_VAR 0 1
68678: PPUSH
68679: CALL_OW 310
68683: NOT
68684: OR
68685: IFFALSE 68689
// exit ;
68687: GO 68779
// vehicle := IsInUnit ( driver ) ;
68689: LD_ADDR_VAR 0 3
68693: PUSH
68694: LD_VAR 0 1
68698: PPUSH
68699: CALL_OW 310
68703: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68704: LD_VAR 0 1
68708: PPUSH
68709: LD_STRING \
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: PUSH
68739: LD_STRING E
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_VAR 0 3
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PPUSH
68775: CALL_OW 446
// end ;
68779: LD_VAR 0 2
68783: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68784: LD_INT 0
68786: PPUSH
68787: PPUSH
// if not driver or not IsInUnit ( driver ) then
68788: LD_VAR 0 1
68792: NOT
68793: PUSH
68794: LD_VAR 0 1
68798: PPUSH
68799: CALL_OW 310
68803: NOT
68804: OR
68805: IFFALSE 68809
// exit ;
68807: GO 68899
// vehicle := IsInUnit ( driver ) ;
68809: LD_ADDR_VAR 0 3
68813: PUSH
68814: LD_VAR 0 1
68818: PPUSH
68819: CALL_OW 310
68823: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68824: LD_VAR 0 1
68828: PPUSH
68829: LD_STRING \
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: LD_INT 0
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: PUSH
68859: LD_STRING E
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_VAR 0 3
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PPUSH
68895: CALL_OW 447
// end ;
68899: LD_VAR 0 2
68903: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
68908: PPUSH
// tmp := [ ] ;
68909: LD_ADDR_VAR 0 5
68913: PUSH
68914: EMPTY
68915: ST_TO_ADDR
// for i in units do
68916: LD_ADDR_VAR 0 4
68920: PUSH
68921: LD_VAR 0 1
68925: PUSH
68926: FOR_IN
68927: IFFALSE 68965
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68929: LD_ADDR_VAR 0 5
68933: PUSH
68934: LD_VAR 0 5
68938: PPUSH
68939: LD_VAR 0 5
68943: PUSH
68944: LD_INT 1
68946: PLUS
68947: PPUSH
68948: LD_VAR 0 4
68952: PPUSH
68953: CALL_OW 256
68957: PPUSH
68958: CALL_OW 2
68962: ST_TO_ADDR
68963: GO 68926
68965: POP
68966: POP
// if not tmp then
68967: LD_VAR 0 5
68971: NOT
68972: IFFALSE 68976
// exit ;
68974: GO 69024
// if asc then
68976: LD_VAR 0 2
68980: IFFALSE 69004
// result := SortListByListAsc ( units , tmp ) else
68982: LD_ADDR_VAR 0 3
68986: PUSH
68987: LD_VAR 0 1
68991: PPUSH
68992: LD_VAR 0 5
68996: PPUSH
68997: CALL_OW 76
69001: ST_TO_ADDR
69002: GO 69024
// result := SortListByListDesc ( units , tmp ) ;
69004: LD_ADDR_VAR 0 3
69008: PUSH
69009: LD_VAR 0 1
69013: PPUSH
69014: LD_VAR 0 5
69018: PPUSH
69019: CALL_OW 77
69023: ST_TO_ADDR
// end ;
69024: LD_VAR 0 3
69028: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69029: LD_INT 0
69031: PPUSH
69032: PPUSH
// task := GetTaskList ( mech ) ;
69033: LD_ADDR_VAR 0 4
69037: PUSH
69038: LD_VAR 0 1
69042: PPUSH
69043: CALL_OW 437
69047: ST_TO_ADDR
// if not task then
69048: LD_VAR 0 4
69052: NOT
69053: IFFALSE 69057
// exit ;
69055: GO 69099
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69057: LD_ADDR_VAR 0 3
69061: PUSH
69062: LD_VAR 0 4
69066: PUSH
69067: LD_INT 1
69069: ARRAY
69070: PUSH
69071: LD_INT 1
69073: ARRAY
69074: PUSH
69075: LD_STRING r
69077: EQUAL
69078: PUSH
69079: LD_VAR 0 4
69083: PUSH
69084: LD_INT 1
69086: ARRAY
69087: PUSH
69088: LD_INT 4
69090: ARRAY
69091: PUSH
69092: LD_VAR 0 2
69096: EQUAL
69097: AND
69098: ST_TO_ADDR
// end ;
69099: LD_VAR 0 3
69103: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69104: LD_INT 0
69106: PPUSH
// SetDir ( unit , d ) ;
69107: LD_VAR 0 1
69111: PPUSH
69112: LD_VAR 0 4
69116: PPUSH
69117: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69121: LD_VAR 0 1
69125: PPUSH
69126: LD_VAR 0 2
69130: PPUSH
69131: LD_VAR 0 3
69135: PPUSH
69136: LD_VAR 0 5
69140: PPUSH
69141: CALL_OW 48
// end ;
69145: LD_VAR 0 6
69149: RET
// export function ToNaturalNumber ( number ) ; begin
69150: LD_INT 0
69152: PPUSH
// result := number div 1 ;
69153: LD_ADDR_VAR 0 2
69157: PUSH
69158: LD_VAR 0 1
69162: PUSH
69163: LD_INT 1
69165: DIV
69166: ST_TO_ADDR
// if number < 0 then
69167: LD_VAR 0 1
69171: PUSH
69172: LD_INT 0
69174: LESS
69175: IFFALSE 69185
// result := 0 ;
69177: LD_ADDR_VAR 0 2
69181: PUSH
69182: LD_INT 0
69184: ST_TO_ADDR
// end ;
69185: LD_VAR 0 2
69189: RET
// export function SortByClass ( units , class ) ; var un ; begin
69190: LD_INT 0
69192: PPUSH
69193: PPUSH
// if not units or not class then
69194: LD_VAR 0 1
69198: NOT
69199: PUSH
69200: LD_VAR 0 2
69204: NOT
69205: OR
69206: IFFALSE 69210
// exit ;
69208: GO 69305
// result := [ ] ;
69210: LD_ADDR_VAR 0 3
69214: PUSH
69215: EMPTY
69216: ST_TO_ADDR
// for un in units do
69217: LD_ADDR_VAR 0 4
69221: PUSH
69222: LD_VAR 0 1
69226: PUSH
69227: FOR_IN
69228: IFFALSE 69303
// if GetClass ( un ) = class then
69230: LD_VAR 0 4
69234: PPUSH
69235: CALL_OW 257
69239: PUSH
69240: LD_VAR 0 2
69244: EQUAL
69245: IFFALSE 69272
// result := Insert ( result , 1 , un ) else
69247: LD_ADDR_VAR 0 3
69251: PUSH
69252: LD_VAR 0 3
69256: PPUSH
69257: LD_INT 1
69259: PPUSH
69260: LD_VAR 0 4
69264: PPUSH
69265: CALL_OW 2
69269: ST_TO_ADDR
69270: GO 69301
// result := Replace ( result , result + 1 , un ) ;
69272: LD_ADDR_VAR 0 3
69276: PUSH
69277: LD_VAR 0 3
69281: PPUSH
69282: LD_VAR 0 3
69286: PUSH
69287: LD_INT 1
69289: PLUS
69290: PPUSH
69291: LD_VAR 0 4
69295: PPUSH
69296: CALL_OW 1
69300: ST_TO_ADDR
69301: GO 69227
69303: POP
69304: POP
// end ;
69305: LD_VAR 0 3
69309: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69310: LD_INT 0
69312: PPUSH
69313: PPUSH
69314: PPUSH
69315: PPUSH
69316: PPUSH
69317: PPUSH
69318: PPUSH
// result := [ ] ;
69319: LD_ADDR_VAR 0 4
69323: PUSH
69324: EMPTY
69325: ST_TO_ADDR
// if x - r < 0 then
69326: LD_VAR 0 1
69330: PUSH
69331: LD_VAR 0 3
69335: MINUS
69336: PUSH
69337: LD_INT 0
69339: LESS
69340: IFFALSE 69352
// min_x := 0 else
69342: LD_ADDR_VAR 0 8
69346: PUSH
69347: LD_INT 0
69349: ST_TO_ADDR
69350: GO 69368
// min_x := x - r ;
69352: LD_ADDR_VAR 0 8
69356: PUSH
69357: LD_VAR 0 1
69361: PUSH
69362: LD_VAR 0 3
69366: MINUS
69367: ST_TO_ADDR
// if y - r < 0 then
69368: LD_VAR 0 2
69372: PUSH
69373: LD_VAR 0 3
69377: MINUS
69378: PUSH
69379: LD_INT 0
69381: LESS
69382: IFFALSE 69394
// min_y := 0 else
69384: LD_ADDR_VAR 0 7
69388: PUSH
69389: LD_INT 0
69391: ST_TO_ADDR
69392: GO 69410
// min_y := y - r ;
69394: LD_ADDR_VAR 0 7
69398: PUSH
69399: LD_VAR 0 2
69403: PUSH
69404: LD_VAR 0 3
69408: MINUS
69409: ST_TO_ADDR
// max_x := x + r ;
69410: LD_ADDR_VAR 0 9
69414: PUSH
69415: LD_VAR 0 1
69419: PUSH
69420: LD_VAR 0 3
69424: PLUS
69425: ST_TO_ADDR
// max_y := y + r ;
69426: LD_ADDR_VAR 0 10
69430: PUSH
69431: LD_VAR 0 2
69435: PUSH
69436: LD_VAR 0 3
69440: PLUS
69441: ST_TO_ADDR
// for _x = min_x to max_x do
69442: LD_ADDR_VAR 0 5
69446: PUSH
69447: DOUBLE
69448: LD_VAR 0 8
69452: DEC
69453: ST_TO_ADDR
69454: LD_VAR 0 9
69458: PUSH
69459: FOR_TO
69460: IFFALSE 69561
// for _y = min_y to max_y do
69462: LD_ADDR_VAR 0 6
69466: PUSH
69467: DOUBLE
69468: LD_VAR 0 7
69472: DEC
69473: ST_TO_ADDR
69474: LD_VAR 0 10
69478: PUSH
69479: FOR_TO
69480: IFFALSE 69557
// begin if not ValidHex ( _x , _y ) then
69482: LD_VAR 0 5
69486: PPUSH
69487: LD_VAR 0 6
69491: PPUSH
69492: CALL_OW 488
69496: NOT
69497: IFFALSE 69501
// continue ;
69499: GO 69479
// if GetResourceTypeXY ( _x , _y ) then
69501: LD_VAR 0 5
69505: PPUSH
69506: LD_VAR 0 6
69510: PPUSH
69511: CALL_OW 283
69515: IFFALSE 69555
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69517: LD_ADDR_VAR 0 4
69521: PUSH
69522: LD_VAR 0 4
69526: PPUSH
69527: LD_VAR 0 4
69531: PUSH
69532: LD_INT 1
69534: PLUS
69535: PPUSH
69536: LD_VAR 0 5
69540: PUSH
69541: LD_VAR 0 6
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PPUSH
69550: CALL_OW 1
69554: ST_TO_ADDR
// end ;
69555: GO 69479
69557: POP
69558: POP
69559: GO 69459
69561: POP
69562: POP
// end ;
69563: LD_VAR 0 4
69567: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69568: LD_INT 0
69570: PPUSH
69571: PPUSH
69572: PPUSH
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
// if not units then
69578: LD_VAR 0 1
69582: NOT
69583: IFFALSE 69587
// exit ;
69585: GO 70012
// result := UnitFilter ( units , [ f_ok ] ) ;
69587: LD_ADDR_VAR 0 3
69591: PUSH
69592: LD_VAR 0 1
69596: PPUSH
69597: LD_INT 50
69599: PUSH
69600: EMPTY
69601: LIST
69602: PPUSH
69603: CALL_OW 72
69607: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69608: LD_ADDR_VAR 0 8
69612: PUSH
69613: LD_VAR 0 1
69617: PUSH
69618: LD_INT 1
69620: ARRAY
69621: PPUSH
69622: CALL_OW 255
69626: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
69627: LD_ADDR_VAR 0 10
69631: PUSH
69632: LD_INT 29
69634: PUSH
69635: LD_EXP 30
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: ST_TO_ADDR
// if not result then
69644: LD_VAR 0 3
69648: NOT
69649: IFFALSE 69653
// exit ;
69651: GO 70012
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69653: LD_ADDR_VAR 0 5
69657: PUSH
69658: LD_INT 81
69660: PUSH
69661: LD_VAR 0 8
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PPUSH
69670: CALL_OW 69
69674: ST_TO_ADDR
// for i in result do
69675: LD_ADDR_VAR 0 4
69679: PUSH
69680: LD_VAR 0 3
69684: PUSH
69685: FOR_IN
69686: IFFALSE 70010
// begin tag := GetTag ( i ) + 1 ;
69688: LD_ADDR_VAR 0 9
69692: PUSH
69693: LD_VAR 0 4
69697: PPUSH
69698: CALL_OW 110
69702: PUSH
69703: LD_INT 1
69705: PLUS
69706: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69707: LD_ADDR_VAR 0 7
69711: PUSH
69712: LD_VAR 0 4
69716: PPUSH
69717: CALL_OW 250
69721: PPUSH
69722: LD_VAR 0 4
69726: PPUSH
69727: CALL_OW 251
69731: PPUSH
69732: LD_INT 6
69734: PPUSH
69735: CALL 69310 0 3
69739: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69740: LD_VAR 0 7
69744: PUSH
69745: LD_VAR 0 4
69749: PPUSH
69750: CALL_OW 264
69754: PUSH
69755: LD_VAR 0 10
69759: IN
69760: NOT
69761: AND
69762: IFFALSE 69801
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69764: LD_VAR 0 4
69768: PPUSH
69769: LD_VAR 0 7
69773: PUSH
69774: LD_INT 1
69776: ARRAY
69777: PUSH
69778: LD_INT 1
69780: ARRAY
69781: PPUSH
69782: LD_VAR 0 7
69786: PUSH
69787: LD_INT 1
69789: ARRAY
69790: PUSH
69791: LD_INT 2
69793: ARRAY
69794: PPUSH
69795: CALL_OW 116
69799: GO 70008
// if path > tag then
69801: LD_VAR 0 2
69805: PUSH
69806: LD_VAR 0 9
69810: GREATER
69811: IFFALSE 69978
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
69813: LD_ADDR_VAR 0 6
69817: PUSH
69818: LD_VAR 0 5
69822: PPUSH
69823: LD_INT 91
69825: PUSH
69826: LD_VAR 0 4
69830: PUSH
69831: LD_INT 12
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: PPUSH
69839: CALL_OW 72
69843: ST_TO_ADDR
// if nearEnemy then
69844: LD_VAR 0 6
69848: IFFALSE 69876
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69850: LD_VAR 0 4
69854: PPUSH
69855: LD_VAR 0 6
69859: PPUSH
69860: LD_VAR 0 4
69864: PPUSH
69865: CALL_OW 74
69869: PPUSH
69870: CALL_OW 115
69874: GO 69976
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69876: LD_VAR 0 4
69880: PPUSH
69881: LD_VAR 0 2
69885: PUSH
69886: LD_VAR 0 9
69890: ARRAY
69891: PUSH
69892: LD_INT 1
69894: ARRAY
69895: PPUSH
69896: LD_VAR 0 2
69900: PUSH
69901: LD_VAR 0 9
69905: ARRAY
69906: PUSH
69907: LD_INT 2
69909: ARRAY
69910: PPUSH
69911: CALL_OW 297
69915: PUSH
69916: LD_INT 6
69918: GREATER
69919: IFFALSE 69962
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69921: LD_VAR 0 4
69925: PPUSH
69926: LD_VAR 0 2
69930: PUSH
69931: LD_VAR 0 9
69935: ARRAY
69936: PUSH
69937: LD_INT 1
69939: ARRAY
69940: PPUSH
69941: LD_VAR 0 2
69945: PUSH
69946: LD_VAR 0 9
69950: ARRAY
69951: PUSH
69952: LD_INT 2
69954: ARRAY
69955: PPUSH
69956: CALL_OW 114
69960: GO 69976
// SetTag ( i , tag ) ;
69962: LD_VAR 0 4
69966: PPUSH
69967: LD_VAR 0 9
69971: PPUSH
69972: CALL_OW 109
// end else
69976: GO 70008
// if enemy then
69978: LD_VAR 0 5
69982: IFFALSE 70008
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69984: LD_VAR 0 4
69988: PPUSH
69989: LD_VAR 0 5
69993: PPUSH
69994: LD_VAR 0 4
69998: PPUSH
69999: CALL_OW 74
70003: PPUSH
70004: CALL_OW 115
// end ;
70008: GO 69685
70010: POP
70011: POP
// end ;
70012: LD_VAR 0 3
70016: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70017: LD_INT 0
70019: PPUSH
70020: PPUSH
70021: PPUSH
// if not unit or IsInUnit ( unit ) then
70022: LD_VAR 0 1
70026: NOT
70027: PUSH
70028: LD_VAR 0 1
70032: PPUSH
70033: CALL_OW 310
70037: OR
70038: IFFALSE 70042
// exit ;
70040: GO 70133
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70042: LD_ADDR_VAR 0 4
70046: PUSH
70047: LD_VAR 0 1
70051: PPUSH
70052: CALL_OW 250
70056: PPUSH
70057: LD_VAR 0 2
70061: PPUSH
70062: LD_INT 1
70064: PPUSH
70065: CALL_OW 272
70069: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70070: LD_ADDR_VAR 0 5
70074: PUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: CALL_OW 251
70084: PPUSH
70085: LD_VAR 0 2
70089: PPUSH
70090: LD_INT 1
70092: PPUSH
70093: CALL_OW 273
70097: ST_TO_ADDR
// if ValidHex ( x , y ) then
70098: LD_VAR 0 4
70102: PPUSH
70103: LD_VAR 0 5
70107: PPUSH
70108: CALL_OW 488
70112: IFFALSE 70133
// ComTurnXY ( unit , x , y ) ;
70114: LD_VAR 0 1
70118: PPUSH
70119: LD_VAR 0 4
70123: PPUSH
70124: LD_VAR 0 5
70128: PPUSH
70129: CALL_OW 118
// end ;
70133: LD_VAR 0 3
70137: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70138: LD_INT 0
70140: PPUSH
70141: PPUSH
// result := false ;
70142: LD_ADDR_VAR 0 3
70146: PUSH
70147: LD_INT 0
70149: ST_TO_ADDR
// if not units then
70150: LD_VAR 0 2
70154: NOT
70155: IFFALSE 70159
// exit ;
70157: GO 70204
// for i in units do
70159: LD_ADDR_VAR 0 4
70163: PUSH
70164: LD_VAR 0 2
70168: PUSH
70169: FOR_IN
70170: IFFALSE 70202
// if See ( side , i ) then
70172: LD_VAR 0 1
70176: PPUSH
70177: LD_VAR 0 4
70181: PPUSH
70182: CALL_OW 292
70186: IFFALSE 70200
// begin result := true ;
70188: LD_ADDR_VAR 0 3
70192: PUSH
70193: LD_INT 1
70195: ST_TO_ADDR
// exit ;
70196: POP
70197: POP
70198: GO 70204
// end ;
70200: GO 70169
70202: POP
70203: POP
// end ;
70204: LD_VAR 0 3
70208: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70209: LD_INT 0
70211: PPUSH
70212: PPUSH
70213: PPUSH
70214: PPUSH
// if not unit or not points then
70215: LD_VAR 0 1
70219: NOT
70220: PUSH
70221: LD_VAR 0 2
70225: NOT
70226: OR
70227: IFFALSE 70231
// exit ;
70229: GO 70321
// dist := 99999 ;
70231: LD_ADDR_VAR 0 5
70235: PUSH
70236: LD_INT 99999
70238: ST_TO_ADDR
// for i in points do
70239: LD_ADDR_VAR 0 4
70243: PUSH
70244: LD_VAR 0 2
70248: PUSH
70249: FOR_IN
70250: IFFALSE 70319
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70252: LD_ADDR_VAR 0 6
70256: PUSH
70257: LD_VAR 0 1
70261: PPUSH
70262: LD_VAR 0 4
70266: PUSH
70267: LD_INT 1
70269: ARRAY
70270: PPUSH
70271: LD_VAR 0 4
70275: PUSH
70276: LD_INT 2
70278: ARRAY
70279: PPUSH
70280: CALL_OW 297
70284: ST_TO_ADDR
// if tmpDist < dist then
70285: LD_VAR 0 6
70289: PUSH
70290: LD_VAR 0 5
70294: LESS
70295: IFFALSE 70317
// begin result := i ;
70297: LD_ADDR_VAR 0 3
70301: PUSH
70302: LD_VAR 0 4
70306: ST_TO_ADDR
// dist := tmpDist ;
70307: LD_ADDR_VAR 0 5
70311: PUSH
70312: LD_VAR 0 6
70316: ST_TO_ADDR
// end ; end ;
70317: GO 70249
70319: POP
70320: POP
// end ; end_of_file
70321: LD_VAR 0 3
70325: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70326: LD_VAR 0 1
70330: PUSH
70331: LD_INT 200
70333: DOUBLE
70334: GREATEREQUAL
70335: IFFALSE 70343
70337: LD_INT 299
70339: DOUBLE
70340: LESSEQUAL
70341: IFTRUE 70345
70343: GO 70377
70345: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70346: LD_VAR 0 1
70350: PPUSH
70351: LD_VAR 0 2
70355: PPUSH
70356: LD_VAR 0 3
70360: PPUSH
70361: LD_VAR 0 4
70365: PPUSH
70366: LD_VAR 0 5
70370: PPUSH
70371: CALL 25973 0 5
70375: GO 70454
70377: LD_INT 300
70379: DOUBLE
70380: GREATEREQUAL
70381: IFFALSE 70389
70383: LD_INT 399
70385: DOUBLE
70386: LESSEQUAL
70387: IFTRUE 70391
70389: GO 70453
70391: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70392: LD_VAR 0 1
70396: PPUSH
70397: LD_VAR 0 2
70401: PPUSH
70402: LD_VAR 0 3
70406: PPUSH
70407: LD_VAR 0 4
70411: PPUSH
70412: LD_VAR 0 5
70416: PPUSH
70417: LD_VAR 0 6
70421: PPUSH
70422: LD_VAR 0 7
70426: PPUSH
70427: LD_VAR 0 8
70431: PPUSH
70432: LD_VAR 0 9
70436: PPUSH
70437: LD_VAR 0 10
70441: PPUSH
70442: LD_VAR 0 11
70446: PPUSH
70447: CALL 23615 0 11
70451: GO 70454
70453: POP
// end ;
70454: PPOPN 11
70456: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70457: LD_VAR 0 1
70461: PPUSH
70462: LD_VAR 0 2
70466: PPUSH
70467: LD_VAR 0 3
70471: PPUSH
70472: LD_VAR 0 4
70476: PPUSH
70477: LD_VAR 0 5
70481: PPUSH
70482: CALL 25709 0 5
// end ; end_of_file
70486: PPOPN 5
70488: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70489: LD_VAR 0 1
70493: PPUSH
70494: LD_VAR 0 2
70498: PPUSH
70499: LD_VAR 0 3
70503: PPUSH
70504: LD_VAR 0 4
70508: PPUSH
70509: LD_VAR 0 5
70513: PPUSH
70514: LD_VAR 0 6
70518: PPUSH
70519: CALL 11308 0 6
// end ;
70523: PPOPN 6
70525: END
