// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 66 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10689 0 4
// PrepareAmerican ;
  31: CALL 4044 0 0
// PrepareRussian ;
  35: CALL 314 0 0
// Action ;
  39: CALL 8417 0 0
// end ;
  43: END
// every 0 0$01 do
  44: GO 46
  46: DISABLE
// begin enable ;
  47: ENABLE
// display_strings := [ #tick , tick ] ;
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_STRING #tick
  55: PUSH
  56: LD_OWVAR 1
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: ST_TO_ADDR
// end ;
  65: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  69: LD_ADDR_OWVAR 67
  73: PUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 426
  81: ST_TO_ADDR
// medal1 := true ;
  82: LD_ADDR_EXP 3
  86: PUSH
  87: LD_INT 1
  89: ST_TO_ADDR
// medal2 := true ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// medal3 := true ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 10
 113: PUSH
 114: LD_INT 11
 116: PUSH
 117: LD_INT 12
 119: PUSH
 120: LD_INT 13
 122: PUSH
 123: LD_INT 9
 125: PUSH
 126: EMPTY
 127: LIST
 128: LIST
 129: LIST
 130: LIST
 131: LIST
 132: ST_TO_ADDR
// conv_squad := [ ] ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: EMPTY
 139: ST_TO_ADDR
// escort := [ ] ;
 140: LD_ADDR_EXP 2
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// riv := [ ] ;
 147: LD_ADDR_EXP 9
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// ar_force := [ ] ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: EMPTY
 160: ST_TO_ADDR
// ar_attacks := false ;
 161: LD_ADDR_EXP 10
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// us_force := [ ] ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: EMPTY
 175: ST_TO_ADDR
// convoy_start := false ;
 176: LD_ADDR_EXP 7
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// conv_counter := 0 ;
 184: LD_ADDR_EXP 13
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// dest_counter := 0 ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 200: LD_ADDR_EXP 14
 204: PUSH
 205: LD_INT 2450
 207: ST_TO_ADDR
// safeCounter := 0 ;
 208: LD_ADDR_EXP 15
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// end ;
 216: LD_VAR 0 1
 220: RET
// every 2 2$00 do
 221: GO 223
 223: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 224: LD_OWVAR 1
 228: PUSH
 229: LD_INT 98700
 231: PUSH
 232: LD_INT 92400
 234: PUSH
 235: LD_INT 86100
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: LD_OWVAR 67
 247: ARRAY
 248: LESSEQUAL
 249: IFFALSE 313
// begin Wait ( crates_counter ) ;
 251: LD_EXP 14
 255: PPUSH
 256: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 260: LD_ADDR_EXP 14
 264: PUSH
 265: LD_EXP 14
 269: PUSH
 270: LD_INT 315
 272: PLUS
 273: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 274: LD_INT 22
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: CALL_OW 287
 284: PUSH
 285: LD_INT 30
 287: LESS
 288: IFFALSE 311
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 5
 295: PPUSH
 296: CALL_OW 12
 300: PPUSH
 301: LD_INT 22
 303: PPUSH
 304: LD_INT 1
 306: PPUSH
 307: CALL_OW 55
// end ;
 311: GO 224
// end ; end_of_file
 313: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
 322: PPUSH
// uc_side := 6 ;
 323: LD_ADDR_OWVAR 20
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// uc_nation := 3 ;
 331: LD_ADDR_OWVAR 21
 335: PUSH
 336: LD_INT 3
 338: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 339: LD_INT 3
 341: PPUSH
 342: LD_INT 6
 344: PPUSH
 345: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 349: LD_ADDR_EXP 17
 353: PUSH
 354: LD_STRING Gaydar
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// uc_side := 7 ;
 362: LD_ADDR_OWVAR 20
 366: PUSH
 367: LD_INT 7
 369: ST_TO_ADDR
// hc_gallery := sandal ;
 370: LD_ADDR_OWVAR 33
 374: PUSH
 375: LD_STRING sandal
 377: ST_TO_ADDR
// hc_face_number := 9 ;
 378: LD_ADDR_OWVAR 34
 382: PUSH
 383: LD_INT 9
 385: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 386: LD_ADDR_OWVAR 31
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 7
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: ST_TO_ADDR
// hc_sex := sex_male ;
 409: LD_ADDR_OWVAR 27
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 417: LD_ADDR_OWVAR 29
 421: PUSH
 422: LD_INT 10
 424: PUSH
 425: LD_INT 11
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// hc_class := 4 ;
 432: LD_ADDR_OWVAR 28
 436: PUSH
 437: LD_INT 4
 439: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 440: LD_ADDR_OWVAR 26
 444: PUSH
 445: LD_STRING Fiodor Saseda
 447: ST_TO_ADDR
// Saseda := CreateHuman ;
 448: LD_ADDR_EXP 18
 452: PUSH
 453: CALL_OW 44
 457: ST_TO_ADDR
// uc_side := 3 ;
 458: LD_ADDR_OWVAR 20
 462: PUSH
 463: LD_INT 3
 465: ST_TO_ADDR
// hc_importance := 100 ;
 466: LD_ADDR_OWVAR 32
 470: PUSH
 471: LD_INT 100
 473: ST_TO_ADDR
// hc_class := 1 ;
 474: LD_ADDR_OWVAR 28
 478: PUSH
 479: LD_INT 1
 481: ST_TO_ADDR
// hc_sex := sex_male ;
 482: LD_ADDR_OWVAR 27
 486: PUSH
 487: LD_INT 1
 489: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 490: LD_ADDR_OWVAR 31
 494: PUSH
 495: LD_INT 6
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 2
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 513: LD_ADDR_OWVAR 26
 517: PUSH
 518: LD_STRING W. I. Stolypin
 520: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 521: LD_ADDR_OWVAR 29
 525: PUSH
 526: LD_INT 10
 528: PUSH
 529: LD_INT 11
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: ST_TO_ADDR
// hc_gallery := ru ;
 536: LD_ADDR_OWVAR 33
 540: PUSH
 541: LD_STRING ru
 543: ST_TO_ADDR
// hc_face_number := 15 ;
 544: LD_ADDR_OWVAR 34
 548: PUSH
 549: LD_INT 15
 551: ST_TO_ADDR
// Stolypin := CreateHuman ;
 552: LD_ADDR_EXP 16
 556: PUSH
 557: CALL_OW 44
 561: ST_TO_ADDR
// hc_importance := 0 ;
 562: LD_ADDR_OWVAR 32
 566: PUSH
 567: LD_INT 0
 569: ST_TO_ADDR
// hc_gallery :=  ;
 570: LD_ADDR_OWVAR 33
 574: PUSH
 575: LD_STRING 
 577: ST_TO_ADDR
// hc_name :=  ;
 578: LD_ADDR_OWVAR 26
 582: PUSH
 583: LD_STRING 
 585: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 6
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 5
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// c := 1 ;
 611: LD_ADDR_VAR 0 5
 615: PUSH
 616: LD_INT 1
 618: ST_TO_ADDR
// for i = 1 to 21 do
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: DOUBLE
 625: LD_INT 1
 627: DEC
 628: ST_TO_ADDR
 629: LD_INT 21
 631: PUSH
 632: FOR_TO
 633: IFFALSE 734
// begin if i = 10 then
 635: LD_VAR 0 4
 639: PUSH
 640: LD_INT 10
 642: EQUAL
 643: IFFALSE 653
// c := 2 ;
 645: LD_ADDR_VAR 0 5
 649: PUSH
 650: LD_INT 2
 652: ST_TO_ADDR
// if i = 14 then
 653: LD_VAR 0 4
 657: PUSH
 658: LD_INT 14
 660: EQUAL
 661: IFFALSE 671
// c := 3 ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 3
 670: ST_TO_ADDR
// if i = 18 then
 671: LD_VAR 0 4
 675: PUSH
 676: LD_INT 18
 678: EQUAL
 679: IFFALSE 689
// c := 4 ;
 681: LD_ADDR_VAR 0 5
 685: PUSH
 686: LD_INT 4
 688: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_VAR 0 5
 696: PPUSH
 697: LD_VAR 0 6
 701: PPUSH
 702: CALL_OW 380
// un := CreateHuman ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: CALL_OW 44
 715: ST_TO_ADDR
// force := force ^ un ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_VAR 0 2
 730: ADD
 731: ST_TO_ADDR
// end ;
 732: GO 632
 734: POP
 735: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 736: LD_ADDR_VAR 0 7
 740: PUSH
 741: LD_STRING text
 743: PPUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: LD_INT 6
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: LD_OWVAR 67
 762: ARRAY
 763: PPUSH
 764: LD_INT 7
 766: PUSH
 767: LD_INT 6
 769: PUSH
 770: LD_INT 6
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: PPUSH
 784: LD_INT -5
 786: PUSH
 787: LD_EXP 16
 791: PUSH
 792: LD_INT -3
 794: PUSH
 795: LD_INT -2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_VAR 0 3
 808: ADD
 809: PPUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 3
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 4
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 42
 846: ST_TO_ADDR
// team := team ^ Stolypin ;
 847: LD_ADDR_VAR 0 7
 851: PUSH
 852: LD_VAR 0 7
 856: PUSH
 857: LD_EXP 16
 861: ADD
 862: ST_TO_ADDR
// for i = 1 to team do
 863: LD_ADDR_VAR 0 4
 867: PUSH
 868: DOUBLE
 869: LD_INT 1
 871: DEC
 872: ST_TO_ADDR
 873: LD_VAR 0 7
 877: PUSH
 878: FOR_TO
 879: IFFALSE 904
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 881: LD_VAR 0 7
 885: PUSH
 886: LD_VAR 0 4
 890: ARRAY
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
 902: GO 878
 904: POP
 905: POP
// CenterNowOnUnits ( Stolypin ) ;
 906: LD_EXP 16
 910: PPUSH
 911: CALL_OW 87
// end ;
 915: LD_VAR 0 1
 919: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 920: LD_INT 0
 922: PPUSH
 923: PPUSH
 924: PPUSH
 925: PPUSH
// Randomize ;
 926: CALL_OW 10
// uc_side := 6 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 6
 937: ST_TO_ADDR
// uc_nation := 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_name :=  ;
 946: LD_ADDR_OWVAR 26
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_gallery :=  ;
 954: LD_ADDR_OWVAR 33
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 962: LD_ADDR_VAR 0 5
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: LD_INT 5
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_OWVAR 67
 985: ARRAY
 986: ST_TO_ADDR
// conv_ready := false ;
 987: LD_ADDR_EXP 19
 991: PUSH
 992: LD_INT 0
 994: ST_TO_ADDR
// case type of 1 :
 995: LD_VAR 0 1
 999: PUSH
1000: LD_INT 1
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1278
1008: POP
// begin if Rand ( 0 , 1 ) = 1 then
1009: LD_INT 0
1011: PPUSH
1012: LD_INT 1
1014: PPUSH
1015: CALL_OW 12
1019: PUSH
1020: LD_INT 1
1022: EQUAL
1023: IFFALSE 1029
// AddEscort ( ) ;
1025: CALL 2911 0 0
// Wait ( 0 0$03 ) ;
1029: LD_INT 105
1031: PPUSH
1032: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1036: LD_ADDR_OWVAR 37
1040: PUSH
1041: LD_INT 21
1043: ST_TO_ADDR
// vc_engine := engine_combustion ;
1044: LD_ADDR_OWVAR 39
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// vc_control := control_manual ;
1052: LD_ADDR_OWVAR 38
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1060: LD_ADDR_OWVAR 40
1064: PUSH
1065: LD_INT 51
1067: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1068: LD_ADDR_OWVAR 41
1072: PUSH
1073: LD_INT 50
1075: PPUSH
1076: LD_INT 99
1078: PPUSH
1079: CALL_OW 12
1083: ST_TO_ADDR
// if uc_side <> 6 then
1084: LD_OWVAR 20
1088: PUSH
1089: LD_INT 6
1091: NONEQUAL
1092: IFFALSE 1102
// uc_side := 6 ;
1094: LD_ADDR_OWVAR 20
1098: PUSH
1099: LD_INT 6
1101: ST_TO_ADDR
// veh := CreateVehicle ;
1102: LD_ADDR_VAR 0 4
1106: PUSH
1107: CALL_OW 45
1111: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1112: LD_VAR 0 4
1116: PPUSH
1117: LD_INT 3
1119: PPUSH
1120: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1124: LD_VAR 0 4
1128: PPUSH
1129: LD_INT 8
1131: PPUSH
1132: LD_INT 0
1134: PPUSH
1135: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1139: LD_INT 0
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 12
1152: PPUSH
1153: LD_VAR 0 5
1157: PPUSH
1158: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_VAR 0 4
1171: PPUSH
1172: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1176: LD_VAR 0 4
1180: PPUSH
1181: LD_INT 500
1183: PPUSH
1184: LD_INT 1000
1186: PPUSH
1187: CALL_OW 12
1191: PPUSH
1192: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 2
1206: PPUSH
1207: CALL_OW 12
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 10
1217: PPUSH
1218: CALL_OW 12
1222: PUSH
1223: LD_INT 10
1225: MUL
1226: PPUSH
1227: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1231: LD_ADDR_EXP 1
1235: PUSH
1236: LD_EXP 1
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_VAR 0 4
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 2
1260: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1261: LD_INT 35
1263: PPUSH
1264: CALL_OW 67
// conv_ready := true ;
1268: LD_ADDR_EXP 19
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// end ; 2 :
1276: GO 2906
1278: LD_INT 2
1280: DOUBLE
1281: EQUAL
1282: IFTRUE 1286
1284: GO 1586
1286: POP
// begin AddEscort ( ) ;
1287: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// for i = 1 to 3 do
1298: LD_ADDR_VAR 0 3
1302: PUSH
1303: DOUBLE
1304: LD_INT 1
1306: DEC
1307: ST_TO_ADDR
1308: LD_INT 3
1310: PUSH
1311: FOR_TO
1312: IFFALSE 1563
// begin vc_chassis := ru_medium_wheeled ;
1314: LD_ADDR_OWVAR 37
1318: PUSH
1319: LD_INT 21
1321: ST_TO_ADDR
// vc_engine := engine_combustion ;
1322: LD_ADDR_OWVAR 39
1326: PUSH
1327: LD_INT 1
1329: ST_TO_ADDR
// vc_control := control_manual ;
1330: LD_ADDR_OWVAR 38
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1338: LD_ADDR_OWVAR 40
1342: PUSH
1343: LD_INT 51
1345: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1346: LD_ADDR_OWVAR 41
1350: PUSH
1351: LD_INT 50
1353: PPUSH
1354: LD_INT 99
1356: PPUSH
1357: CALL_OW 12
1361: ST_TO_ADDR
// if uc_side <> 6 then
1362: LD_OWVAR 20
1366: PUSH
1367: LD_INT 6
1369: NONEQUAL
1370: IFFALSE 1380
// uc_side := 6 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 6
1379: ST_TO_ADDR
// veh := CreateVehicle ;
1380: LD_ADDR_VAR 0 4
1384: PUSH
1385: CALL_OW 45
1389: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1390: LD_VAR 0 4
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1402: LD_VAR 0 4
1406: PPUSH
1407: LD_INT 8
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: CALL_OW 12
1430: PPUSH
1431: LD_VAR 0 5
1435: PPUSH
1436: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1440: CALL_OW 44
1444: PPUSH
1445: LD_VAR 0 4
1449: PPUSH
1450: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1454: LD_VAR 0 4
1458: PPUSH
1459: LD_INT 500
1461: PPUSH
1462: LD_INT 1000
1464: PPUSH
1465: CALL_OW 12
1469: PPUSH
1470: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1474: LD_VAR 0 4
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: CALL_OW 12
1489: PPUSH
1490: LD_INT 2
1492: PPUSH
1493: LD_INT 10
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: LD_INT 10
1503: MUL
1504: PPUSH
1505: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1509: LD_ADDR_EXP 1
1513: PUSH
1514: LD_EXP 1
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_VAR 0 4
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PPUSH
1534: CALL_OW 2
1538: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1539: LD_VAR 0 4
1543: PPUSH
1544: LD_INT 120
1546: PPUSH
1547: LD_INT 10
1549: PPUSH
1550: CALL_OW 111
// Wait ( 0 0$03 ) ;
1554: LD_INT 105
1556: PPUSH
1557: CALL_OW 67
// end ;
1561: GO 1311
1563: POP
1564: POP
// AddEscort ( ) ;
1565: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// conv_ready := true ;
1576: LD_ADDR_EXP 19
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// end ; 3 :
1584: GO 2906
1586: LD_INT 3
1588: DOUBLE
1589: EQUAL
1590: IFTRUE 1594
1592: GO 2021
1594: POP
// begin AddEscort ( ) ;
1595: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
1599: LD_INT 70
1601: PPUSH
1602: CALL_OW 67
// for i = 1 to 3 do
1606: LD_ADDR_VAR 0 3
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 3
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1871
// begin vc_chassis := ru_medium_wheeled ;
1622: LD_ADDR_OWVAR 37
1626: PUSH
1627: LD_INT 21
1629: ST_TO_ADDR
// vc_engine := engine_combustion ;
1630: LD_ADDR_OWVAR 39
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_control := control_manual ;
1638: LD_ADDR_OWVAR 38
1642: PUSH
1643: LD_INT 1
1645: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1646: LD_ADDR_OWVAR 40
1650: PUSH
1651: LD_INT 51
1653: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1654: LD_ADDR_OWVAR 41
1658: PUSH
1659: LD_INT 50
1661: PPUSH
1662: LD_INT 99
1664: PPUSH
1665: CALL_OW 12
1669: ST_TO_ADDR
// if uc_side <> 6 then
1670: LD_OWVAR 20
1674: PUSH
1675: LD_INT 6
1677: NONEQUAL
1678: IFFALSE 1688
// uc_side := 6 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 6
1687: ST_TO_ADDR
// veh := CreateVehicle ;
1688: LD_ADDR_VAR 0 4
1692: PUSH
1693: CALL_OW 45
1697: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1698: LD_VAR 0 4
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1710: LD_VAR 0 4
1714: PPUSH
1715: LD_INT 8
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1725: LD_INT 0
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: CALL_OW 12
1738: PPUSH
1739: LD_VAR 0 5
1743: PPUSH
1744: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1748: CALL_OW 44
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1762: LD_VAR 0 4
1766: PPUSH
1767: LD_INT 500
1769: PPUSH
1770: LD_INT 1000
1772: PPUSH
1773: CALL_OW 12
1777: PPUSH
1778: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1782: LD_VAR 0 4
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 12
1797: PPUSH
1798: LD_INT 2
1800: PPUSH
1801: LD_INT 10
1803: PPUSH
1804: CALL_OW 12
1808: PUSH
1809: LD_INT 10
1811: MUL
1812: PPUSH
1813: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1817: LD_ADDR_EXP 1
1821: PUSH
1822: LD_EXP 1
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_VAR 0 4
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PPUSH
1842: CALL_OW 2
1846: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1847: LD_VAR 0 4
1851: PPUSH
1852: LD_INT 120
1854: PPUSH
1855: LD_INT 10
1857: PPUSH
1858: CALL_OW 111
// Wait ( 0 0$03 ) ;
1862: LD_INT 105
1864: PPUSH
1865: CALL_OW 67
// end ;
1869: GO 1619
1871: POP
1872: POP
// for i = 1 to rand ( 2 , 4 ) do
1873: LD_ADDR_VAR 0 3
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: CALL_OW 12
1893: PUSH
1894: FOR_TO
1895: IFFALSE 2002
// begin PrepareHuman ( false , 1 , skill ) ;
1897: LD_INT 0
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_VAR 0 5
1907: PPUSH
1908: CALL_OW 380
// if uc_side <> 6 then
1912: LD_OWVAR 20
1916: PUSH
1917: LD_INT 6
1919: NONEQUAL
1920: IFFALSE 1930
// uc_side := 6 ;
1922: LD_ADDR_OWVAR 20
1926: PUSH
1927: LD_INT 6
1929: ST_TO_ADDR
// veh := CreateHuman ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: CALL_OW 44
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_INT 8
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1955: LD_ADDR_EXP 2
1959: PUSH
1960: LD_EXP 2
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: LD_VAR 0 4
1972: PPUSH
1973: CALL_OW 2
1977: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 120
1985: PPUSH
1986: LD_INT 10
1988: PPUSH
1989: CALL_OW 111
// Wait ( 0 0$02 ) ;
1993: LD_INT 70
1995: PPUSH
1996: CALL_OW 67
// end ;
2000: GO 1894
2002: POP
2003: POP
// Wait ( 0 0$02 ) ;
2004: LD_INT 70
2006: PPUSH
2007: CALL_OW 67
// conv_ready := true ;
2011: LD_ADDR_EXP 19
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// end ; 4 :
2019: GO 2906
2021: LD_INT 4
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2335
2029: POP
// begin if Rand ( 0 , 1 ) = 1 then
2030: LD_INT 0
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 12
2040: PUSH
2041: LD_INT 1
2043: EQUAL
2044: IFFALSE 2050
// AddEscort ( ) ;
2046: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2050: LD_INT 70
2052: PPUSH
2053: CALL_OW 67
// for i = 1 to 5 do
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: DOUBLE
2063: LD_INT 1
2065: DEC
2066: ST_TO_ADDR
2067: LD_INT 5
2069: PUSH
2070: FOR_TO
2071: IFFALSE 2193
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2073: LD_INT 0
2075: PPUSH
2076: LD_INT 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 12
2086: PPUSH
2087: LD_VAR 0 5
2091: PPUSH
2092: CALL_OW 380
// if uc_side <> 6 then
2096: LD_OWVAR 20
2100: PUSH
2101: LD_INT 6
2103: NONEQUAL
2104: IFFALSE 2114
// uc_side := 6 ;
2106: LD_ADDR_OWVAR 20
2110: PUSH
2111: LD_INT 6
2113: ST_TO_ADDR
// veh := CreateHuman ;
2114: LD_ADDR_VAR 0 4
2118: PUSH
2119: CALL_OW 44
2123: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2124: LD_VAR 0 4
2128: PPUSH
2129: LD_INT 8
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2139: LD_ADDR_EXP 1
2143: PUSH
2144: LD_EXP 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_VAR 0 4
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 2
2168: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 120
2176: PPUSH
2177: LD_INT 10
2179: PPUSH
2180: CALL_OW 111
// Wait ( 0 0$02 ) ;
2184: LD_INT 70
2186: PPUSH
2187: CALL_OW 67
// end ;
2191: GO 2070
2193: POP
2194: POP
// for i = 1 to 2 do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 2
2207: PUSH
2208: FOR_TO
2209: IFFALSE 2316
// begin PrepareHuman ( false , 1 , skill ) ;
2211: LD_INT 0
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_VAR 0 5
2221: PPUSH
2222: CALL_OW 380
// if uc_side <> 6 then
2226: LD_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: NONEQUAL
2234: IFFALSE 2244
// uc_side := 6 ;
2236: LD_ADDR_OWVAR 20
2240: PUSH
2241: LD_INT 6
2243: ST_TO_ADDR
// veh := CreateHuman ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2254: LD_VAR 0 4
2258: PPUSH
2259: LD_INT 8
2261: PPUSH
2262: LD_INT 0
2264: PPUSH
2265: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2269: LD_ADDR_EXP 2
2273: PUSH
2274: LD_EXP 2
2278: PPUSH
2279: LD_INT 1
2281: PPUSH
2282: LD_VAR 0 4
2286: PPUSH
2287: CALL_OW 2
2291: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_INT 120
2299: PPUSH
2300: LD_INT 10
2302: PPUSH
2303: CALL_OW 111
// Wait ( 0 0$02 ) ;
2307: LD_INT 70
2309: PPUSH
2310: CALL_OW 67
// end ;
2314: GO 2208
2316: POP
2317: POP
// Wait ( 0 0$02 ) ;
2318: LD_INT 70
2320: PPUSH
2321: CALL_OW 67
// conv_ready := true ;
2325: LD_ADDR_EXP 19
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// end ; 5 :
2333: GO 2906
2335: LD_INT 5
2337: DOUBLE
2338: EQUAL
2339: IFTRUE 2343
2341: GO 2905
2343: POP
// begin AddEscort ( ) ;
2344: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2348: LD_INT 70
2350: PPUSH
2351: CALL_OW 67
// AddEscort ( ) ;
2355: CALL 2911 0 0
// Wait ( 0 0$02 ) ;
2359: LD_INT 70
2361: PPUSH
2362: CALL_OW 67
// for i = 1 to 3 do
2366: LD_ADDR_VAR 0 3
2370: PUSH
2371: DOUBLE
2372: LD_INT 1
2374: DEC
2375: ST_TO_ADDR
2376: LD_INT 3
2378: PUSH
2379: FOR_TO
2380: IFFALSE 2631
// begin vc_chassis := ru_medium_wheeled ;
2382: LD_ADDR_OWVAR 37
2386: PUSH
2387: LD_INT 21
2389: ST_TO_ADDR
// vc_engine := engine_combustion ;
2390: LD_ADDR_OWVAR 39
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// vc_control := control_manual ;
2398: LD_ADDR_OWVAR 38
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2406: LD_ADDR_OWVAR 40
2410: PUSH
2411: LD_INT 51
2413: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2414: LD_ADDR_OWVAR 41
2418: PUSH
2419: LD_INT 50
2421: PPUSH
2422: LD_INT 99
2424: PPUSH
2425: CALL_OW 12
2429: ST_TO_ADDR
// if uc_side <> 6 then
2430: LD_OWVAR 20
2434: PUSH
2435: LD_INT 6
2437: NONEQUAL
2438: IFFALSE 2448
// uc_side := 6 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 6
2447: ST_TO_ADDR
// veh := CreateVehicle ;
2448: LD_ADDR_VAR 0 4
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2458: LD_VAR 0 4
2462: PPUSH
2463: LD_INT 3
2465: PPUSH
2466: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2470: LD_VAR 0 4
2474: PPUSH
2475: LD_INT 8
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2485: LD_INT 0
2487: PPUSH
2488: LD_INT 1
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL_OW 12
2498: PPUSH
2499: LD_VAR 0 5
2503: PPUSH
2504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2508: CALL_OW 44
2512: PPUSH
2513: LD_VAR 0 4
2517: PPUSH
2518: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2522: LD_VAR 0 4
2526: PPUSH
2527: LD_INT 500
2529: PPUSH
2530: LD_INT 1000
2532: PPUSH
2533: CALL_OW 12
2537: PPUSH
2538: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2542: LD_VAR 0 4
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL_OW 12
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_INT 10
2563: PPUSH
2564: CALL_OW 12
2568: PUSH
2569: LD_INT 10
2571: MUL
2572: PPUSH
2573: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2577: LD_ADDR_EXP 1
2581: PUSH
2582: LD_EXP 1
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: LD_VAR 0 4
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PPUSH
2602: CALL_OW 2
2606: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2607: LD_VAR 0 4
2611: PPUSH
2612: LD_INT 120
2614: PPUSH
2615: LD_INT 10
2617: PPUSH
2618: CALL_OW 111
// Wait ( 0 0$02 ) ;
2622: LD_INT 70
2624: PPUSH
2625: CALL_OW 67
// end ;
2629: GO 2379
2631: POP
2632: POP
// if Rand ( 0 , 1 ) = 1 then
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 1
2638: PPUSH
2639: CALL_OW 12
2643: PUSH
2644: LD_INT 1
2646: EQUAL
2647: IFFALSE 2683
// begin vc_chassis := ru_medium_tracked ;
2649: LD_ADDR_OWVAR 37
2653: PUSH
2654: LD_INT 22
2656: ST_TO_ADDR
// vc_engine := engine_combustion ;
2657: LD_ADDR_OWVAR 39
2661: PUSH
2662: LD_INT 1
2664: ST_TO_ADDR
// vc_control := control_manual ;
2665: LD_ADDR_OWVAR 38
2669: PUSH
2670: LD_INT 1
2672: ST_TO_ADDR
// vc_weapon := ru_crane ;
2673: LD_ADDR_OWVAR 40
2677: PUSH
2678: LD_INT 52
2680: ST_TO_ADDR
// end else
2681: GO 2715
// begin vc_chassis := ru_heavy_wheeled ;
2683: LD_ADDR_OWVAR 37
2687: PUSH
2688: LD_INT 23
2690: ST_TO_ADDR
// vc_engine := engine_combustion ;
2691: LD_ADDR_OWVAR 39
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// vc_control := control_manual ;
2699: LD_ADDR_OWVAR 38
2703: PUSH
2704: LD_INT 1
2706: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2707: LD_ADDR_OWVAR 40
2711: PUSH
2712: LD_INT 53
2714: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2715: LD_ADDR_OWVAR 41
2719: PUSH
2720: LD_INT 50
2722: PPUSH
2723: LD_INT 99
2725: PPUSH
2726: CALL_OW 12
2730: ST_TO_ADDR
// if uc_side <> 6 then
2731: LD_OWVAR 20
2735: PUSH
2736: LD_INT 6
2738: NONEQUAL
2739: IFFALSE 2749
// uc_side := 6 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
// veh := CreateVehicle ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 45
2758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2771: LD_VAR 0 4
2775: PPUSH
2776: LD_INT 8
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 2
2794: PPUSH
2795: CALL_OW 12
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2809: CALL_OW 44
2813: PPUSH
2814: LD_VAR 0 4
2818: PPUSH
2819: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2823: LD_VAR 0 4
2827: PPUSH
2828: LD_INT 500
2830: PPUSH
2831: LD_INT 1000
2833: PPUSH
2834: CALL_OW 12
2838: PPUSH
2839: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2843: LD_ADDR_EXP 1
2847: PUSH
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: LD_VAR 0 4
2860: PUSH
2861: LD_INT 1
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: CALL_OW 2
2872: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2873: LD_VAR 0 4
2877: PPUSH
2878: LD_INT 120
2880: PPUSH
2881: LD_INT 10
2883: PPUSH
2884: CALL_OW 111
// Wait ( 0 0$02 ) ;
2888: LD_INT 70
2890: PPUSH
2891: CALL_OW 67
// conv_ready := true ;
2895: LD_ADDR_EXP 19
2899: PUSH
2900: LD_INT 1
2902: ST_TO_ADDR
// end ; end ;
2903: GO 2906
2905: POP
// end ;
2906: LD_VAR 0 2
2910: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: LD_INT 5
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 4
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := 6 ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_INT 6
2948: ST_TO_ADDR
// uc_nation := 3 ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_INT 3
2956: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2957: LD_ADDR_OWVAR 37
2961: PUSH
2962: LD_INT 21
2964: ST_TO_ADDR
// vc_engine := engine_combustion ;
2965: LD_ADDR_OWVAR 39
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// vc_control := control_manual ;
2973: LD_ADDR_OWVAR 38
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2981: LD_ADDR_OWVAR 40
2985: PUSH
2986: LD_INT 44
2988: PUSH
2989: LD_INT 42
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 2
3001: PPUSH
3002: CALL_OW 12
3006: ARRAY
3007: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
3008: LD_ADDR_OWVAR 41
3012: PUSH
3013: LD_INT 50
3015: PPUSH
3016: LD_INT 99
3018: PPUSH
3019: CALL_OW 12
3023: ST_TO_ADDR
// veh := CreateVehicle ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: CALL_OW 45
3033: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3046: LD_VAR 0 2
3050: PPUSH
3051: LD_INT 8
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3061: LD_INT 0
3063: PPUSH
3064: LD_INT 3
3066: PPUSH
3067: LD_VAR 0 3
3071: PPUSH
3072: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3076: CALL_OW 44
3080: PPUSH
3081: LD_VAR 0 2
3085: PPUSH
3086: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_INT 500
3097: PPUSH
3098: LD_INT 1000
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3110: LD_ADDR_EXP 2
3114: PUSH
3115: LD_EXP 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: CALL_OW 2
3132: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 120
3140: PPUSH
3141: LD_INT 10
3143: PPUSH
3144: CALL_OW 111
// end ;
3148: LD_VAR 0 1
3152: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3153: LD_EXP 19
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 6
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: AND
3173: IFFALSE 3948
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// if conv_squad then
3183: LD_EXP 1
3187: IFFALSE 3458
// for i = conv_squad downto 1 do
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: DOUBLE
3195: LD_EXP 1
3199: INC
3200: ST_TO_ADDR
3201: LD_INT 1
3203: PUSH
3204: FOR_DOWNTO
3205: IFFALSE 3456
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3207: LD_EXP 1
3211: PUSH
3212: LD_VAR 0 1
3216: ARRAY
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: CALL_OW 308
3229: IFFALSE 3306
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: LD_INT 9
3238: PPUSH
3239: LD_INT 22
3241: PUSH
3242: LD_INT 6
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 70
3253: PUSH
3254: FOR_IN
3255: IFFALSE 3282
// begin safeCounter := safeCounter + 1 ;
3257: LD_ADDR_EXP 15
3261: PUSH
3262: LD_EXP 15
3266: PUSH
3267: LD_INT 1
3269: PLUS
3270: ST_TO_ADDR
// RemoveUnit ( j ) ;
3271: LD_VAR 0 2
3275: PPUSH
3276: CALL_OW 64
// end ;
3280: GO 3254
3282: POP
3283: POP
// conv_squad := Delete ( conv_squad , i ) ;
3284: LD_ADDR_EXP 1
3288: PUSH
3289: LD_EXP 1
3293: PPUSH
3294: LD_VAR 0 1
3298: PPUSH
3299: CALL_OW 3
3303: ST_TO_ADDR
// break ;
3304: GO 3456
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 1
3319: ARRAY
3320: PPUSH
3321: LD_EXP 6
3325: PUSH
3326: LD_EXP 1
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: ARRAY
3341: PPUSH
3342: CALL_OW 308
3346: IFFALSE 3392
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3348: LD_ADDR_EXP 1
3352: PUSH
3353: LD_EXP 1
3357: PPUSH
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: LD_EXP 1
3370: PUSH
3371: LD_VAR 0 1
3375: ARRAY
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PUSH
3381: LD_INT 1
3383: PLUS
3384: PPUSH
3385: CALL 10308 0 4
3389: ST_TO_ADDR
3390: GO 3454
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3392: LD_EXP 1
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PUSH
3403: LD_INT 1
3405: ARRAY
3406: PPUSH
3407: CALL_OW 314
3411: NOT
3412: IFFALSE 3454
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: LD_EXP 6
3433: PUSH
3434: LD_EXP 1
3438: PUSH
3439: LD_VAR 0 1
3443: ARRAY
3444: PUSH
3445: LD_INT 2
3447: ARRAY
3448: ARRAY
3449: PPUSH
3450: CALL_OW 113
// end ;
3454: GO 3204
3456: POP
3457: POP
// if escort then
3458: LD_EXP 2
3462: IFFALSE 3801
// for i = escort downto 1 do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_EXP 2
3474: INC
3475: ST_TO_ADDR
3476: LD_INT 1
3478: PUSH
3479: FOR_DOWNTO
3480: IFFALSE 3799
// begin if IsInArea ( escort [ i ] , conv_end ) then
3482: LD_EXP 2
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 9
3495: PPUSH
3496: CALL_OW 308
3500: IFFALSE 3577
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PPUSH
3520: CALL_OW 70
3524: PUSH
3525: FOR_IN
3526: IFFALSE 3553
// begin safeCounter := safeCounter + 1 ;
3528: LD_ADDR_EXP 15
3532: PUSH
3533: LD_EXP 15
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: ST_TO_ADDR
// RemoveUnit ( j ) ;
3542: LD_VAR 0 2
3546: PPUSH
3547: CALL_OW 64
// end ;
3551: GO 3525
3553: POP
3554: POP
// escort := Delete ( escort , i ) ;
3555: LD_ADDR_EXP 2
3559: PUSH
3560: LD_EXP 2
3564: PPUSH
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 3
3574: ST_TO_ADDR
// break ;
3575: GO 3799
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3577: LD_EXP 2
3581: PUSH
3582: LD_VAR 0 1
3586: ARRAY
3587: PPUSH
3588: CALL 10565 0 1
3592: PUSH
3593: LD_EXP 2
3597: PUSH
3598: LD_VAR 0 1
3602: ARRAY
3603: PPUSH
3604: LD_EXP 2
3608: PUSH
3609: LD_VAR 0 1
3613: ARRAY
3614: PPUSH
3615: CALL 10565 0 1
3619: PPUSH
3620: CALL_OW 296
3624: PUSH
3625: LD_INT 13
3627: LESS
3628: AND
3629: IFFALSE 3664
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3631: LD_EXP 2
3635: PUSH
3636: LD_VAR 0 1
3640: ARRAY
3641: PPUSH
3642: LD_EXP 2
3646: PUSH
3647: LD_VAR 0 1
3651: ARRAY
3652: PPUSH
3653: CALL 10565 0 1
3657: PPUSH
3658: CALL_OW 115
3662: GO 3797
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3664: LD_EXP 1
3668: PUSH
3669: LD_EXP 2
3673: PUSH
3674: LD_VAR 0 1
3678: ARRAY
3679: PPUSH
3680: LD_INT 64
3682: PPUSH
3683: LD_INT 117
3685: PPUSH
3686: CALL_OW 297
3690: PUSH
3691: LD_INT 35
3693: GREATER
3694: AND
3695: PUSH
3696: LD_EXP 2
3700: PUSH
3701: LD_VAR 0 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 314
3711: NOT
3712: AND
3713: IFFALSE 3779
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3715: LD_EXP 2
3719: PUSH
3720: LD_VAR 0 1
3724: ARRAY
3725: PPUSH
3726: LD_EXP 1
3730: PUSH
3731: LD_INT 1
3733: ARRAY
3734: PUSH
3735: LD_INT 1
3737: ARRAY
3738: PPUSH
3739: CALL_OW 296
3743: PUSH
3744: LD_INT 6
3746: GREATER
3747: IFFALSE 3777
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3749: LD_EXP 2
3753: PUSH
3754: LD_VAR 0 1
3758: ARRAY
3759: PPUSH
3760: LD_EXP 1
3764: PUSH
3765: LD_INT 1
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: PPUSH
3773: CALL_OW 112
3777: GO 3797
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3779: LD_EXP 2
3783: PUSH
3784: LD_VAR 0 1
3788: ARRAY
3789: PPUSH
3790: LD_INT 9
3792: PPUSH
3793: CALL_OW 113
// end ;
3797: GO 3479
3799: POP
3800: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3801: LD_INT 22
3803: PUSH
3804: LD_INT 6
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 1
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PPUSH
3825: CALL_OW 69
3829: IFFALSE 3948
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3831: LD_ADDR_VAR 0 2
3835: PUSH
3836: LD_INT 22
3838: PUSH
3839: LD_INT 6
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 1
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PPUSH
3860: CALL_OW 69
3864: PUSH
3865: FOR_IN
3866: IFFALSE 3946
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3868: LD_VAR 0 2
3872: PPUSH
3873: CALL_OW 314
3877: NOT
3878: PUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: LD_INT 9
3886: PPUSH
3887: CALL_OW 308
3891: NOT
3892: AND
3893: IFFALSE 3907
// ComMoveToArea ( j , conv_end ) ;
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 9
3914: PPUSH
3915: CALL_OW 308
3919: IFFALSE 3944
// begin safeCounter := safeCounter + 1 ;
3921: LD_ADDR_EXP 15
3925: PUSH
3926: LD_EXP 15
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ST_TO_ADDR
// RemoveUnit ( j ) ;
3935: LD_VAR 0 2
3939: PPUSH
3940: CALL_OW 64
// end ; end ;
3944: GO 3865
3946: POP
3947: POP
// end ;
3948: PPOPN 2
3950: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3951: LD_EXP 2
3955: PUSH
3956: LD_EXP 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PPUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 3
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 72
3979: IFFALSE 4041
3981: GO 3983
3983: DISABLE
3984: LD_INT 0
3986: PPUSH
// begin enable ;
3987: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3988: LD_ADDR_VAR 0 1
3992: PUSH
3993: LD_EXP 2
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PPUSH
4007: LD_INT 22
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PPUSH
4017: CALL_OW 72
4021: PUSH
4022: FOR_IN
4023: IFFALSE 4039
// SetSide ( i , 6 ) ;
4025: LD_VAR 0 1
4029: PPUSH
4030: LD_INT 6
4032: PPUSH
4033: CALL_OW 235
4037: GO 4022
4039: POP
4040: POP
// end ; end_of_file
4041: PPOPN 1
4043: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// uc_side := 1 ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// uc_nation := 1 ;
4059: LD_ADDR_OWVAR 21
4063: PUSH
4064: LD_INT 1
4066: ST_TO_ADDR
// us_alert := false ;
4067: LD_ADDR_EXP 21
4071: PUSH
4072: LD_INT 0
4074: ST_TO_ADDR
// us_retreat := false ;
4075: LD_ADDR_EXP 22
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// us_patrol := false ;
4083: LD_ADDR_EXP 23
4087: PUSH
4088: LD_INT 0
4090: ST_TO_ADDR
// us_count := 0 ;
4091: LD_ADDR_EXP 24
4095: PUSH
4096: LD_INT 0
4098: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_INT 5
4106: PUSH
4107: LD_INT 6
4109: PUSH
4110: LD_INT 7
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: ST_TO_ADDR
// hc_class := 1 ;
4124: LD_ADDR_OWVAR 28
4128: PUSH
4129: LD_INT 1
4131: ST_TO_ADDR
// hc_sex := sex_male ;
4132: LD_ADDR_OWVAR 27
4136: PUSH
4137: LD_INT 1
4139: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4140: LD_ADDR_OWVAR 31
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_name := Jack Collins ;
4163: LD_ADDR_OWVAR 26
4167: PUSH
4168: LD_STRING Jack Collins
4170: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4171: LD_ADDR_OWVAR 29
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 11
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_gallery :=  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// Collins := CreateHuman ;
4194: LD_ADDR_EXP 20
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4204: LD_EXP 20
4208: PPUSH
4209: LD_INT 50
4211: PPUSH
4212: CALL_OW 52
// hc_name :=  ;
4216: LD_ADDR_OWVAR 26
4220: PUSH
4221: LD_STRING 
4223: ST_TO_ADDR
// if Difficulty > 1 then
4224: LD_OWVAR 67
4228: PUSH
4229: LD_INT 1
4231: GREATER
4232: IFFALSE 4286
// begin bc_type := b_bunker ;
4234: LD_ADDR_OWVAR 42
4238: PUSH
4239: LD_INT 32
4241: ST_TO_ADDR
// bc_level := 5 ;
4242: LD_ADDR_OWVAR 43
4246: PUSH
4247: LD_INT 5
4249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4250: LD_INT 40
4252: PPUSH
4253: LD_INT 33
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: CALL_OW 47
// if Difficulty > 2 then
4263: LD_OWVAR 67
4267: PUSH
4268: LD_INT 2
4270: GREATER
4271: IFFALSE 4286
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4273: LD_INT 41
4275: PPUSH
4276: LD_INT 42
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: LD_VAR 0 4
4296: PPUSH
4297: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4301: CALL_OW 44
4305: PPUSH
4306: LD_INT 50
4308: PPUSH
4309: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4313: LD_INT 0
4315: PPUSH
4316: LD_INT 3
4318: PPUSH
4319: LD_VAR 0 4
4323: PPUSH
4324: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4340: CALL_OW 44
4344: PPUSH
4345: LD_INT 56
4347: PPUSH
4348: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4352: LD_INT 0
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_VAR 0 4
4362: PPUSH
4363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4367: CALL_OW 44
4371: PPUSH
4372: LD_INT 63
4374: PPUSH
4375: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: LD_VAR 0 4
4389: PPUSH
4390: CALL_OW 380
// un := CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4416: LD_VAR 0 3
4420: PPUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4458: LD_ADDR_VAR 0 5
4462: PUSH
4463: LD_INT 22
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 30
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: ST_TO_ADDR
// for i in towers do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: LD_VAR 0 5
4501: PUSH
4502: FOR_IN
4503: IFFALSE 4571
// begin PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4520: CALL_OW 44
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 3
4544: PUSH
4545: LD_INT 5
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 1
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: CALL_OW 12
4563: ARRAY
4564: PPUSH
4565: CALL_OW 431
// end ;
4569: GO 4502
4571: POP
4572: POP
// PrepareHuman ( false , 1 , skill ) ;
4573: LD_INT 0
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL_OW 380
// us_patrol := CreateHuman ;
4588: LD_ADDR_EXP 23
4592: PUSH
4593: CALL_OW 44
4597: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4598: LD_EXP 23
4602: PPUSH
4603: LD_INT 12
4605: PPUSH
4606: LD_INT 5
4608: PPUSH
4609: LD_INT 0
4611: PPUSH
4612: CALL_OW 48
// end ;
4616: LD_VAR 0 1
4620: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4621: LD_EXP 24
4625: PUSH
4626: LD_INT 3
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: LD_INT 5
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_OWVAR 67
4644: ARRAY
4645: GREATEREQUAL
4646: IFFALSE 4671
4648: GO 4650
4650: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4651: LD_EXP 20
4655: PPUSH
4656: LD_STRING DPM_C2
4658: PPUSH
4659: CALL_OW 88
// us_retreat := true ;
4663: LD_ADDR_EXP 22
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 10 10$00 trigger not us_alert do var R ;
4672: LD_EXP 21
4676: NOT
4677: IFFALSE 4751
4679: GO 4681
4681: DISABLE
4682: LD_INT 0
4684: PPUSH
// begin uc_side := 1 ;
4685: LD_ADDR_OWVAR 20
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// uc_nation := 1 ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_INT 1
4700: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_INT 0
4709: PPUSH
4710: CALL_OW 380
// R := CreateHuman ;
4714: LD_ADDR_VAR 0 1
4718: PUSH
4719: CALL_OW 44
4723: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4724: LD_VAR 0 1
4728: PPUSH
4729: LD_STRING DPM_R1
4731: PPUSH
4732: CALL_OW 94
// Wait ( 0 0$03 ) ;
4736: LD_INT 105
4738: PPUSH
4739: CALL_OW 67
// us_retreat := true ;
4743: LD_ADDR_EXP 22
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// end ;
4751: PPOPN 1
4753: END
// every 0 0$01 trigger us_alert do var i ;
4754: LD_EXP 21
4758: IFFALSE 5018
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4766: LD_EXP 20
4770: PPUSH
4771: LD_STRING DPM_C1
4773: PPUSH
4774: CALL_OW 88
// if UnitsInside ( us_fac ) then
4778: LD_INT 56
4780: PPUSH
4781: CALL_OW 313
4785: IFFALSE 4840
// for i in UnitsInside ( us_fac ) do
4787: LD_ADDR_VAR 0 1
4791: PUSH
4792: LD_INT 56
4794: PPUSH
4795: CALL_OW 313
4799: PUSH
4800: FOR_IN
4801: IFFALSE 4838
// begin ComExitBuilding ( i ) ;
4803: LD_VAR 0 1
4807: PPUSH
4808: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 69
4819: PPUSH
4820: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 183
// end ;
4836: GO 4800
4838: POP
4839: POP
// ComExitBuilding ( Collins ) ;
4840: LD_EXP 20
4844: PPUSH
4845: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4849: LD_EXP 20
4853: PPUSH
4854: LD_INT 69
4856: PPUSH
4857: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 2
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PUSH
4890: LD_INT 1
4892: ARRAY
4893: PPUSH
4894: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4898: LD_INT 22
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 25
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 69
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_INT 67
4933: PPUSH
4934: LD_INT 52
4936: PPUSH
4937: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4941: LD_INT 22
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 25
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PPUSH
4965: CALL_OW 69
4969: PUSH
4970: LD_INT 1
4972: ARRAY
4973: PPUSH
4974: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4978: LD_INT 22
4980: PUSH
4981: LD_INT 1
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 25
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PPUSH
5002: CALL_OW 69
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_INT 69
5013: PPUSH
5014: CALL_OW 180
// end ;
5018: PPOPN 1
5020: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5021: LD_EXP 21
5025: NOT
5026: PUSH
5027: LD_INT 56
5029: PPUSH
5030: CALL_OW 255
5034: PUSH
5035: LD_INT 1
5037: EQUAL
5038: AND
5039: IFFALSE 5082
5041: GO 5043
5043: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5044: LD_INT 56
5046: PPUSH
5047: LD_INT 2
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: LD_INT 4
5058: PPUSH
5059: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5063: LD_INT 56
5065: PPUSH
5066: LD_INT 3
5068: PPUSH
5069: LD_INT 2
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 5
5077: PPUSH
5078: CALL_OW 185
// end ;
5082: END
// every 0 0$01 trigger us_patrol do
5083: LD_EXP 23
5087: IFFALSE 5135
5089: GO 5091
5091: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5092: LD_EXP 23
5096: PPUSH
5097: LD_INT 12
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 56
5105: PUSH
5106: LD_INT 4
5108: PUSH
5109: LD_INT 94
5111: PUSH
5112: LD_INT 34
5114: PUSH
5115: LD_INT 92
5117: PUSH
5118: LD_INT 108
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL 5136 0 2
5135: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5136: LD_INT 0
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
// s = 1 ;
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// turn := true ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: LD_INT 1
5157: ST_TO_ADDR
// while ( un and not us_alert ) do
5158: LD_VAR 0 1
5162: PUSH
5163: LD_EXP 21
5167: NOT
5168: AND
5169: IFFALSE 5348
// begin wait ( 35 ) ;
5171: LD_INT 35
5173: PPUSH
5174: CALL_OW 67
// if not HasTask ( un ) then
5178: LD_VAR 0 1
5182: PPUSH
5183: CALL_OW 314
5187: NOT
5188: IFFALSE 5307
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 2
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 2
5210: PUSH
5211: LD_VAR 0 4
5215: PUSH
5216: LD_INT 1
5218: PLUS
5219: ARRAY
5220: PPUSH
5221: CALL_OW 111
// if s + 2 > points then
5225: LD_VAR 0 4
5229: PUSH
5230: LD_INT 2
5232: PLUS
5233: PUSH
5234: LD_VAR 0 2
5238: GREATER
5239: IFFALSE 5249
// turn := false ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: LD_INT 0
5248: ST_TO_ADDR
// if s - 2 < 1 then
5249: LD_VAR 0 4
5253: PUSH
5254: LD_INT 2
5256: MINUS
5257: PUSH
5258: LD_INT 1
5260: LESS
5261: IFFALSE 5271
// turn := true ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// if turn then
5271: LD_VAR 0 6
5275: IFFALSE 5293
// s := s + 2 else
5277: LD_ADDR_VAR 0 4
5281: PUSH
5282: LD_VAR 0 4
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: ST_TO_ADDR
5291: GO 5307
// s := s - 2 ;
5293: LD_ADDR_VAR 0 4
5297: PUSH
5298: LD_VAR 0 4
5302: PUSH
5303: LD_INT 2
5305: MINUS
5306: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 256
5316: PUSH
5317: LD_INT 1000
5319: LESS
5320: PUSH
5321: LD_INT 3
5323: PPUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 292
5333: OR
5334: IFFALSE 5346
// begin us_alert := true ;
5336: LD_ADDR_EXP 21
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// break ;
5344: GO 5348
// end ; end ;
5346: GO 5158
// ComEnterUnit ( un , us_arm ) ;
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_INT 69
5355: PPUSH
5356: CALL_OW 120
// end ;
5360: LD_VAR 0 3
5364: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5365: LD_EXP 22
5369: IFFALSE 5544
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
// begin point := false ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5386: LD_INT 5
5388: PPUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 3
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 70
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5419
// point := us_ret1 else
5409: LD_ADDR_VAR 0 2
5413: PUSH
5414: LD_INT 3
5416: ST_TO_ADDR
5417: GO 5460
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5419: LD_INT 5
5421: PPUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PPUSH
5432: CALL_OW 70
5436: PUSH
5437: LD_INT 0
5439: EQUAL
5440: IFFALSE 5452
// point := us_ret2 else
5442: LD_ADDR_VAR 0 2
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
5450: GO 5460
// point := us_ret3 ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: LD_INT 4
5459: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5460: LD_ADDR_VAR 0 1
5464: PUSH
5465: LD_INT 22
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 21
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PPUSH
5489: CALL_OW 69
5493: PUSH
5494: FOR_IN
5495: IFFALSE 5542
// begin if IsInUnit ( i ) then
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 310
5506: IFFALSE 5526
// begin ComExitBuilding ( i ) ;
5508: LD_VAR 0 1
5512: PPUSH
5513: CALL_OW 122
// ComExitVehicle ( i ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5526: LD_VAR 0 1
5530: PPUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 173
// end ;
5540: GO 5494
5542: POP
5543: POP
// end ;
5544: PPOPN 2
5546: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5547: LD_EXP 22
5551: PUSH
5552: LD_INT 3
5554: PPUSH
5555: LD_INT 22
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: AND
5570: IFFALSE 5616
5572: GO 5574
5574: DISABLE
// begin enable ;
5575: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5576: LD_INT 3
5578: PPUSH
5579: LD_INT 22
5581: PUSH
5582: LD_INT 1
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL_OW 70
5593: PUSH
5594: LD_INT 1
5596: ARRAY
5597: PPUSH
5598: CALL_OW 64
// if medal1 then
5602: LD_EXP 3
5606: IFFALSE 5616
// medal1 := false ;
5608: LD_ADDR_EXP 3
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// end ;
5616: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5617: LD_EXP 22
5621: PUSH
5622: LD_INT 2
5624: PPUSH
5625: LD_INT 22
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 70
5639: AND
5640: IFFALSE 5686
5642: GO 5644
5644: DISABLE
// begin enable ;
5645: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5646: LD_INT 2
5648: PPUSH
5649: LD_INT 22
5651: PUSH
5652: LD_INT 1
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: PPUSH
5659: CALL_OW 70
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: CALL_OW 64
// if medal1 then
5672: LD_EXP 3
5676: IFFALSE 5686
// medal1 := false ;
5678: LD_ADDR_EXP 3
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// end ;
5686: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6068
// begin vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5870: LD_ADDR_OWVAR 37
5874: PUSH
5875: LD_INT 2
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 3
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: ST_TO_ADDR
// vc_engine := engine_combustion ;
5901: LD_ADDR_OWVAR 39
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
// vc_control := control_manual ;
5909: LD_ADDR_OWVAR 38
5913: PUSH
5914: LD_INT 1
5916: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5917: LD_ADDR_OWVAR 40
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 3
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 1
5938: PPUSH
5939: LD_INT 3
5941: PPUSH
5942: CALL_OW 12
5946: ARRAY
5947: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5948: LD_ADDR_OWVAR 41
5952: PUSH
5953: LD_INT 88
5955: PPUSH
5956: LD_INT 99
5958: PPUSH
5959: CALL_OW 12
5963: ST_TO_ADDR
// un := CreateVehicle ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: CALL_OW 45
5973: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: LD_INT 64
5981: PPUSH
5982: LD_INT 117
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 3
5997: PPUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_VAR 0 4
6016: PPUSH
6017: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6021: LD_ADDR_EXP 12
6025: PUSH
6026: LD_EXP 12
6030: PPUSH
6031: LD_INT 1
6033: PPUSH
6034: LD_VAR 0 4
6038: PPUSH
6039: CALL_OW 2
6043: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6044: LD_VAR 0 4
6048: PPUSH
6049: LD_INT 60
6051: PPUSH
6052: LD_INT 109
6054: PPUSH
6055: CALL_OW 111
// Wait ( 0 0$02 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// end ;
6066: GO 5867
6068: POP
6069: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6070: LD_INT 62
6072: PPUSH
6073: LD_INT 113
6075: PPUSH
6076: LD_INT 3
6078: PPUSH
6079: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 69
6097: IFFALSE 6298
// begin Wait ( 0 0$01 ) ;
6099: LD_INT 35
6101: PPUSH
6102: CALL_OW 67
// for i = 1 to us_force do
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: DOUBLE
6112: LD_INT 1
6114: DEC
6115: ST_TO_ADDR
6116: LD_EXP 12
6120: PUSH
6121: FOR_TO
6122: IFFALSE 6157
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6124: LD_EXP 12
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PPUSH
6135: LD_EXP 12
6139: PUSH
6140: LD_VAR 0 2
6144: ARRAY
6145: PPUSH
6146: CALL 10565 0 1
6150: PPUSH
6151: CALL_OW 115
6155: GO 6121
6157: POP
6158: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6159: LD_INT 22
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 3
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 55
6184: PUSH
6185: EMPTY
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 69
6201: IFFALSE 6296
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_INT 22
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 55
6233: PUSH
6234: EMPTY
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PUSH
6251: FOR_IN
6252: IFFALSE 6294
// if not IsInArea ( j , conv_end ) then
6254: LD_VAR 0 3
6258: PPUSH
6259: LD_INT 9
6261: PPUSH
6262: CALL_OW 308
6266: NOT
6267: IFFALSE 6283
// ComMoveToArea ( j , conv_end ) else
6269: LD_VAR 0 3
6273: PPUSH
6274: LD_INT 9
6276: PPUSH
6277: CALL_OW 113
6281: GO 6292
// RemoveUnit ( j ) ;
6283: LD_VAR 0 3
6287: PPUSH
6288: CALL_OW 64
6292: GO 6251
6294: POP
6295: POP
// end ;
6296: GO 6083
// end ; end_of_file
6298: LD_VAR 0 1
6302: RET
// export function PrepareArabian ; begin
6303: LD_INT 0
6305: PPUSH
// RobertFarmer ;
6306: CALL 6327 0 0
// PrepareHovercrafts ;
6310: CALL 7234 0 0
// ar_attacks := true ;
6314: LD_ADDR_EXP 10
6318: PUSH
6319: LD_INT 1
6321: ST_TO_ADDR
// end ;
6322: LD_VAR 0 1
6326: RET
// export Farmer ; export function RobertFarmer ; begin
6327: LD_INT 0
6329: PPUSH
// uc_side := 2 ;
6330: LD_ADDR_OWVAR 20
6334: PUSH
6335: LD_INT 2
6337: ST_TO_ADDR
// uc_nation := 2 ;
6338: LD_ADDR_OWVAR 21
6342: PUSH
6343: LD_INT 2
6345: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6346: LD_ADDR_EXP 25
6350: PUSH
6351: LD_STRING Farmer
6353: PPUSH
6354: CALL_OW 25
6358: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6359: LD_EXP 25
6363: PPUSH
6364: LD_STRING DPM_F1
6366: PPUSH
6367: CALL_OW 94
// end ;
6371: LD_VAR 0 1
6375: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6376: LD_INT 0
6378: PPUSH
6379: PPUSH
6380: PPUSH
6381: PPUSH
6382: PPUSH
// uc_side := 2 ;
6383: LD_ADDR_OWVAR 20
6387: PUSH
6388: LD_INT 2
6390: ST_TO_ADDR
// uc_nation := 2 ;
6391: LD_ADDR_OWVAR 21
6395: PUSH
6396: LD_INT 2
6398: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6399: LD_ADDR_VAR 0 6
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: LD_INT 6
6409: PUSH
6410: LD_INT 7
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_OWVAR 67
6422: ARRAY
6423: ST_TO_ADDR
// Randomize ;
6424: CALL_OW 10
// case type of 1 :
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 1
6435: DOUBLE
6436: EQUAL
6437: IFTRUE 6441
6439: GO 6563
6441: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6442: LD_ADDR_VAR 0 3
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_INT 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PUSH
6472: FOR_TO
6473: IFFALSE 6559
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6475: LD_INT 0
6477: PPUSH
6478: LD_INT 1
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: LD_INT 8
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 12
6502: ARRAY
6503: PPUSH
6504: LD_VAR 0 6
6508: PPUSH
6509: CALL_OW 380
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_INT 18
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 20
6545: PPUSH
6546: CALL_OW 113
// Wait ( 0 0$01 ) ;
6550: LD_INT 35
6552: PPUSH
6553: CALL_OW 67
// end ;
6557: GO 6472
6559: POP
6560: POP
// end ; 2 :
6561: GO 7229
6563: LD_INT 2
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6865
6571: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6572: LD_ADDR_VAR 0 3
6576: PUSH
6577: DOUBLE
6578: LD_INT 1
6580: DEC
6581: ST_TO_ADDR
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: LD_INT 6
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_OWVAR 67
6600: ARRAY
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6666
// begin PrepareHuman ( false , class_soldier , skill ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 6
6615: PPUSH
6616: CALL_OW 380
// un := CreateHuman ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6630: LD_VAR 0 4
6634: PPUSH
6635: LD_INT 17
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6645: LD_VAR 0 4
6649: PPUSH
6650: LD_INT 19
6652: PPUSH
6653: CALL_OW 113
// Wait ( 0 0$01 ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
// end ;
6664: GO 6602
6666: POP
6667: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_OWVAR 67
6696: ARRAY
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6861
// begin vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6701: LD_ADDR_OWVAR 37
6705: PUSH
6706: LD_INT 13
6708: PUSH
6709: LD_INT 14
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ARRAY
6727: ST_TO_ADDR
// vc_engine := engine_combustion ;
6728: LD_ADDR_OWVAR 39
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// vc_control := control_manual ;
6736: LD_ADDR_OWVAR 38
6740: PUSH
6741: LD_INT 1
6743: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6744: LD_ADDR_OWVAR 40
6748: PUSH
6749: LD_INT 24
6751: PUSH
6752: LD_INT 23
6754: PUSH
6755: LD_INT 27
6757: PUSH
6758: LD_INT 28
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 5
6776: PPUSH
6777: CALL_OW 12
6781: ARRAY
6782: ST_TO_ADDR
// veh := CreateVehicle ;
6783: LD_ADDR_VAR 0 5
6787: PUSH
6788: CALL_OW 45
6792: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_INT 17
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6808: LD_INT 0
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_VAR 0 6
6818: PPUSH
6819: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6823: CALL_OW 44
6827: PPUSH
6828: LD_VAR 0 5
6832: PPUSH
6833: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6837: LD_VAR 0 5
6841: PPUSH
6842: LD_INT 89
6844: PPUSH
6845: LD_INT 40
6847: PPUSH
6848: CALL_OW 111
// Wait ( 0 0$02 ) ;
6852: LD_INT 70
6854: PPUSH
6855: CALL_OW 67
// end ;
6859: GO 6698
6861: POP
6862: POP
// end ; 3 :
6863: GO 7229
6865: LD_INT 3
6867: DOUBLE
6868: EQUAL
6869: IFTRUE 6873
6871: GO 7228
6873: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_INT 3
6886: PUSH
6887: LD_INT 4
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PUSH
6904: LD_OWVAR 1
6908: PUSH
6909: LD_INT 31500
6911: DIV
6912: PLUS
6913: PUSH
6914: FOR_TO
6915: IFFALSE 7023
// begin PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 1
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 2
6935: PPUSH
6936: CALL_OW 12
6940: ARRAY
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL_OW 380
// un := CreateHuman ;
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: CALL_OW 44
6960: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6961: LD_VAR 0 4
6965: PPUSH
6966: LD_INT 17
6968: PPUSH
6969: LD_INT 0
6971: PPUSH
6972: CALL_OW 49
// ar_force := Insert ( ar_force , 1 , un ) ;
6976: LD_ADDR_EXP 11
6980: PUSH
6981: LD_EXP 11
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_VAR 0 4
6993: PPUSH
6994: CALL_OW 2
6998: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
6999: LD_VAR 0 4
7003: PPUSH
7004: LD_INT 17
7006: PPUSH
7007: LD_INT 9
7009: PPUSH
7010: CALL_OW 111
// Wait ( 0 0$01 ) ;
7014: LD_INT 35
7016: PPUSH
7017: CALL_OW 67
// end ;
7021: GO 6914
7023: POP
7024: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 4
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: LD_INT 6
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7224
// begin vc_chassis := ar_half_tracked ;
7058: LD_ADDR_OWVAR 37
7062: PUSH
7063: LD_INT 14
7065: ST_TO_ADDR
// vc_engine := engine_combustion ;
7066: LD_ADDR_OWVAR 39
7070: PUSH
7071: LD_INT 1
7073: ST_TO_ADDR
// vc_control := control_manual ;
7074: LD_ADDR_OWVAR 38
7078: PUSH
7079: LD_INT 1
7081: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_heavy_mortar ] [ Rand ( 1 , 5 ) ] ;
7082: LD_ADDR_OWVAR 40
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 27
7092: PUSH
7093: LD_INT 28
7095: PUSH
7096: LD_INT 26
7098: PUSH
7099: LD_EXP 31
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 5
7116: PPUSH
7117: CALL_OW 12
7121: ARRAY
7122: ST_TO_ADDR
// veh := CreateVehicle ;
7123: LD_ADDR_VAR 0 5
7127: PUSH
7128: CALL_OW 45
7132: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7133: LD_VAR 0 5
7137: PPUSH
7138: LD_INT 16
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7148: LD_INT 0
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: LD_VAR 0 6
7158: PPUSH
7159: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7163: CALL_OW 44
7167: PPUSH
7168: LD_VAR 0 5
7172: PPUSH
7173: CALL_OW 52
// ar_force := Insert ( ar_force , 1 , veh ) ;
7177: LD_ADDR_EXP 11
7181: PUSH
7182: LD_EXP 11
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: CALL_OW 2
7199: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7200: LD_VAR 0 5
7204: PPUSH
7205: LD_INT 125
7207: PPUSH
7208: LD_INT 31
7210: PPUSH
7211: CALL_OW 111
// Wait ( 0 0$02 ) ;
7215: LD_INT 70
7217: PPUSH
7218: CALL_OW 67
// end ;
7222: GO 7055
7224: POP
7225: POP
// end ; end ;
7226: GO 7229
7228: POP
// end ;
7229: LD_VAR 0 2
7233: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
// areas := [ river1 , river2 ] ;
7241: LD_ADDR_VAR 0 4
7245: PUSH
7246: LD_INT 14
7248: PUSH
7249: LD_INT 15
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: LD_INT 6
7266: PUSH
7267: LD_INT 7
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_OWVAR 67
7279: ARRAY
7280: ST_TO_ADDR
// uc_side := 2 ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_INT 2
7288: ST_TO_ADDR
// uc_nation := 2 ;
7289: LD_ADDR_OWVAR 21
7293: PUSH
7294: LD_INT 2
7296: ST_TO_ADDR
// hc_name :=  ;
7297: LD_ADDR_OWVAR 26
7301: PUSH
7302: LD_STRING 
7304: ST_TO_ADDR
// hc_gallery :=  ;
7305: LD_ADDR_OWVAR 33
7309: PUSH
7310: LD_STRING 
7312: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: DOUBLE
7319: LD_INT 1
7321: DEC
7322: ST_TO_ADDR
7323: LD_INT 1
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_OWVAR 67
7341: ARRAY
7342: PUSH
7343: FOR_TO
7344: IFFALSE 7480
// begin vc_chassis := ar_hovercraft ;
7346: LD_ADDR_OWVAR 37
7350: PUSH
7351: LD_INT 11
7353: ST_TO_ADDR
// vc_engine := engine_solar ;
7354: LD_ADDR_OWVAR 39
7358: PUSH
7359: LD_INT 2
7361: ST_TO_ADDR
// vc_control := control_manual ;
7362: LD_ADDR_OWVAR 38
7366: PUSH
7367: LD_INT 1
7369: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7370: LD_ADDR_OWVAR 40
7374: PUSH
7375: LD_INT 24
7377: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7378: LD_ADDR_OWVAR 41
7382: PUSH
7383: LD_INT 100
7385: ST_TO_ADDR
// un := CreateVehicle ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: CALL_OW 45
7395: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 121
7403: PPUSH
7404: LD_INT 69
7406: PPUSH
7407: LD_INT 4
7409: PPUSH
7410: LD_INT 0
7412: PPUSH
7413: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 3
7422: PPUSH
7423: LD_VAR 0 5
7427: PPUSH
7428: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7432: CALL_OW 44
7436: PPUSH
7437: LD_VAR 0 3
7441: PPUSH
7442: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7446: LD_ADDR_EXP 9
7450: PUSH
7451: LD_EXP 9
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: LD_VAR 0 3
7463: PUSH
7464: LD_VAR 0 2
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 2
7477: ST_TO_ADDR
// end ;
7478: GO 7343
7480: POP
7481: POP
// end ;
7482: LD_VAR 0 1
7486: RET
// every 0 0$01 trigger riv do var i , c ;
7487: LD_EXP 9
7491: IFFALSE 7926
7493: GO 7495
7495: DISABLE
7496: LD_INT 0
7498: PPUSH
7499: PPUSH
// begin enable ;
7500: ENABLE
// for i = riv downto 1 do
7501: LD_ADDR_VAR 0 1
7505: PUSH
7506: DOUBLE
7507: LD_EXP 9
7511: INC
7512: ST_TO_ADDR
7513: LD_INT 1
7515: PUSH
7516: FOR_DOWNTO
7517: IFFALSE 7924
// begin if not riv [ i ] [ 1 ] then
7519: LD_EXP 9
7523: PUSH
7524: LD_VAR 0 1
7528: ARRAY
7529: PUSH
7530: LD_INT 1
7532: ARRAY
7533: NOT
7534: IFFALSE 7556
// begin riv := Delete ( riv , 1 ) ;
7536: LD_ADDR_EXP 9
7540: PUSH
7541: LD_EXP 9
7545: PPUSH
7546: LD_INT 1
7548: PPUSH
7549: CALL_OW 3
7553: ST_TO_ADDR
// break ;
7554: GO 7924
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7556: LD_EXP 9
7560: PUSH
7561: LD_VAR 0 1
7565: ARRAY
7566: PUSH
7567: LD_INT 1
7569: ARRAY
7570: PPUSH
7571: CALL_OW 314
7575: NOT
7576: IFFALSE 7644
// begin if riv [ i ] [ 2 ] = 1 then
7578: LD_EXP 9
7582: PUSH
7583: LD_VAR 0 1
7587: ARRAY
7588: PUSH
7589: LD_INT 2
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// c := 2 else
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: LD_INT 2
7605: ST_TO_ADDR
7606: GO 7616
// c := 1 ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7616: LD_ADDR_EXP 9
7620: PUSH
7621: LD_EXP 9
7625: PPUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: LD_INT 2
7633: PPUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: CALL 10308 0 4
7643: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7644: LD_EXP 9
7648: PUSH
7649: LD_VAR 0 1
7653: ARRAY
7654: PUSH
7655: LD_INT 1
7657: ARRAY
7658: PPUSH
7659: LD_INT 14
7661: PUSH
7662: LD_INT 15
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_EXP 9
7673: PUSH
7674: LD_VAR 0 1
7678: ARRAY
7679: PUSH
7680: LD_INT 2
7682: ARRAY
7683: ARRAY
7684: PPUSH
7685: CALL_OW 308
7689: NOT
7690: IFFALSE 7922
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7692: LD_EXP 9
7696: PUSH
7697: LD_VAR 0 1
7701: ARRAY
7702: PUSH
7703: LD_INT 1
7705: ARRAY
7706: PPUSH
7707: CALL_OW 261
7711: PUSH
7712: LD_INT 50
7714: LESS
7715: IFFALSE 7739
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7717: LD_EXP 9
7721: PUSH
7722: LD_VAR 0 1
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: PPUSH
7732: LD_INT 67
7734: PPUSH
7735: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7739: LD_EXP 9
7743: PUSH
7744: LD_VAR 0 1
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: PPUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_VAR 0 1
7778: ARRAY
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: CALL_OW 74
7788: PPUSH
7789: CALL_OW 296
7793: PUSH
7794: LD_INT 9
7796: LESS
7797: IFFALSE 7855
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7799: LD_EXP 9
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_INT 22
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: PPUSH
7829: LD_EXP 9
7833: PUSH
7834: LD_VAR 0 1
7838: ARRAY
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: CALL_OW 74
7848: PPUSH
7849: CALL_OW 115
7853: GO 7922
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7855: LD_EXP 9
7859: PUSH
7860: LD_VAR 0 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PPUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 15
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_EXP 9
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: PUSH
7891: LD_INT 2
7893: ARRAY
7894: ARRAY
7895: PPUSH
7896: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
7900: LD_EXP 9
7904: PUSH
7905: LD_VAR 0 1
7909: ARRAY
7910: PUSH
7911: LD_INT 1
7913: ARRAY
7914: PPUSH
7915: LD_INT 350
7917: PPUSH
7918: CALL_OW 202
// end ; end ; end ;
7922: GO 7516
7924: POP
7925: POP
// end ;
7926: PPOPN 2
7928: END
// every 10 10$00 trigger convoy_start do var i , un ;
7929: LD_EXP 7
7933: IFFALSE 8054
7935: GO 7937
7937: DISABLE
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
// begin enable ;
7942: ENABLE
// for i = 1 to 2 do
7943: LD_ADDR_VAR 0 1
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_INT 2
7955: PUSH
7956: FOR_TO
7957: IFFALSE 8052
// begin uc_side := 2 ;
7959: LD_ADDR_OWVAR 20
7963: PUSH
7964: LD_INT 2
7966: ST_TO_ADDR
// uc_nation := 2 ;
7967: LD_ADDR_OWVAR 21
7971: PUSH
7972: LD_INT 2
7974: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
7975: LD_INT 0
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: CALL_OW 380
// un := CreateHuman ;
7988: LD_ADDR_VAR 0 2
7992: PUSH
7993: CALL_OW 44
7997: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_INT 10
8005: PPUSH
8006: LD_INT 2
8008: PPUSH
8009: LD_INT 0
8011: PPUSH
8012: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8016: LD_VAR 0 2
8020: PPUSH
8021: LD_INT 24
8023: PPUSH
8024: LD_INT 36
8026: PPUSH
8027: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8031: LD_VAR 0 2
8035: PPUSH
8036: LD_INT 9
8038: PPUSH
8039: CALL_OW 173
// Wait ( 0 0$02 ) ;
8043: LD_INT 70
8045: PPUSH
8046: CALL_OW 67
// end ;
8050: GO 7956
8052: POP
8053: POP
// end ;
8054: PPOPN 2
8056: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8057: LD_INT 22
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: IFFALSE 8383
8073: GO 8075
8075: DISABLE
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// begin enable ;
8080: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8081: LD_ADDR_VAR 0 2
8085: PUSH
8086: LD_INT 22
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PUSH
8101: LD_EXP 11
8105: DIFF
8106: ST_TO_ADDR
// if rest then
8107: LD_VAR 0 2
8111: IFFALSE 8183
// for i in rest do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8181
// if GetClass ( i ) = 3 then
8126: LD_VAR 0 1
8130: PPUSH
8131: CALL_OW 257
8135: PUSH
8136: LD_INT 3
8138: EQUAL
8139: IFFALSE 8179
// begin if not IsInArea ( i , ar2 ) then
8141: LD_VAR 0 1
8145: PPUSH
8146: LD_INT 17
8148: PPUSH
8149: CALL_OW 308
8153: NOT
8154: IFFALSE 8170
// ComMoveToArea ( i , ar2 ) else
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 17
8163: PPUSH
8164: CALL_OW 113
8168: GO 8179
// RemoveUnit ( i ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: CALL_OW 64
// end ;
8179: GO 8123
8181: POP
8182: POP
// if ar_force then
8183: LD_EXP 11
8187: IFFALSE 8383
// begin if ar_force > 15 then
8189: LD_EXP 11
8193: PUSH
8194: LD_INT 15
8196: GREATER
8197: IFFALSE 8214
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8199: LD_EXP 11
8203: PPUSH
8204: LD_INT 58
8206: PPUSH
8207: LD_INT 51
8209: PPUSH
8210: CALL_OW 114
// for i in ar_force do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_EXP 11
8223: PUSH
8224: FOR_IN
8225: IFFALSE 8381
// begin if GetClass ( i ) = class_soldier then
8227: LD_VAR 0 1
8231: PPUSH
8232: CALL_OW 257
8236: PUSH
8237: LD_INT 1
8239: EQUAL
8240: IFFALSE 8332
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL 10565 0 1
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: IN
8267: IFFALSE 8313
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 1
8278: PPUSH
8279: CALL 10565 0 1
8283: PPUSH
8284: CALL_OW 250
8288: PPUSH
8289: LD_VAR 0 1
8293: PPUSH
8294: CALL 10565 0 1
8298: PPUSH
8299: CALL_OW 251
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 132
8311: GO 8332
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8313: LD_VAR 0 1
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL 10565 0 1
8327: PPUSH
8328: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 257
8341: PUSH
8342: LD_INT 1
8344: EQUAL
8345: NOT
8346: PUSH
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 314
8356: NOT
8357: AND
8358: IFFALSE 8379
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL 10565 0 1
8374: PPUSH
8375: CALL_OW 115
// end ;
8379: GO 8224
8381: POP
8382: POP
// end ; end ;
8383: PPOPN 2
8385: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8386: LD_INT 9
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 2
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PPUSH
8399: CALL_OW 70
8403: IFFALSE 8416
8405: GO 8407
8407: DISABLE
// medal2 := false ; end_of_file
8408: LD_ADDR_EXP 4
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
8416: END
// export function Action ; begin
8417: LD_INT 0
8419: PPUSH
// case Query ( info ) of 1 :
8420: LD_STRING info
8422: PPUSH
8423: CALL_OW 97
8427: PUSH
8428: LD_INT 1
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8439
8436: POP
// ; end ;
8437: GO 8440
8439: POP
// ChangeMissionObjectives ( PM_1 ) ;
8440: LD_STRING PM_1
8442: PPUSH
8443: CALL_OW 337
// SaveForQuickRestart ;
8447: CALL_OW 22
// end ;
8451: LD_VAR 0 1
8455: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8456: LD_INT 50
8458: PPUSH
8459: CALL_OW 255
8463: PUSH
8464: LD_INT 3
8466: EQUAL
8467: IFFALSE 8748
8469: GO 8471
8471: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8472: LD_EXP 16
8476: PPUSH
8477: LD_STRING DPM_S1
8479: PPUSH
8480: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8484: LD_EXP 17
8488: PPUSH
8489: LD_STRING DPM_P1
8491: PPUSH
8492: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8496: LD_EXP 16
8500: PPUSH
8501: LD_STRING DPM_S2
8503: PPUSH
8504: CALL_OW 88
// SaveForQuickRestart ;
8508: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8512: LD_STRING PM_2
8514: PPUSH
8515: CALL_OW 337
// Wait ( 2 2$30 ) ;
8519: LD_INT 5250
8521: PPUSH
8522: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8526: LD_INT 117
8528: PPUSH
8529: LD_INT 4
8531: PPUSH
8532: CALL_OW 84
// Convoy ( 1 ) ;
8536: LD_INT 1
8538: PPUSH
8539: CALL 920 0 1
// Wait ( 0 0$30 ) ;
8543: LD_INT 1050
8545: PPUSH
8546: CALL_OW 67
// Convoy ( 2 ) ;
8550: LD_INT 2
8552: PPUSH
8553: CALL 920 0 1
// Wait ( 1 1$30 ) ;
8557: LD_INT 3150
8559: PPUSH
8560: CALL_OW 67
// Convoy ( 3 ) ;
8564: LD_INT 3
8566: PPUSH
8567: CALL 920 0 1
// Wait ( 4 4$00 ) ;
8571: LD_INT 8400
8573: PPUSH
8574: CALL_OW 67
// convoy_start := true ;
8578: LD_ADDR_EXP 7
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareArabian ;
8586: CALL 6303 0 0
// PrepareAttack ( 1 ) ;
8590: LD_INT 1
8592: PPUSH
8593: CALL 6376 0 1
// while ( convoy_start ) do
8597: LD_EXP 7
8601: IFFALSE 8748
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8603: LD_INT 4200
8605: PPUSH
8606: LD_INT 7350
8608: PPUSH
8609: CALL_OW 12
8613: PPUSH
8614: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8618: LD_INT 22
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: PUSH
8633: LD_INT 20
8635: LESS
8636: IFFALSE 8653
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8638: LD_INT 1
8640: PPUSH
8641: LD_INT 2
8643: PPUSH
8644: CALL_OW 12
8648: PPUSH
8649: CALL 6376 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8653: LD_INT 1
8655: PPUSH
8656: LD_INT 5
8658: PPUSH
8659: CALL_OW 12
8663: PPUSH
8664: CALL 920 0 1
// conv_counter := conv_counter + 1 ;
8668: LD_ADDR_EXP 13
8672: PUSH
8673: LD_EXP 13
8677: PUSH
8678: LD_INT 1
8680: PLUS
8681: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8682: LD_EXP 13
8686: PUSH
8687: LD_INT 4
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: LD_INT 3
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: LD_OWVAR 67
8705: ARRAY
8706: MOD
8707: PUSH
8708: LD_INT 0
8710: EQUAL
8711: IFFALSE 8746
// begin Wait ( 1 1$20 ) ;
8713: LD_INT 2800
8715: PPUSH
8716: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8720: LD_EXP 25
8724: PPUSH
8725: LD_STRING DPM_F2
8727: PPUSH
8728: CALL_OW 94
// PrepareAttack ( 3 ) ;
8732: LD_INT 3
8734: PPUSH
8735: CALL 6376 0 1
// Wait ( 3 3$00 ) ;
8739: LD_INT 6300
8741: PPUSH
8742: CALL_OW 67
// end ; end ;
8746: GO 8597
// end ;
8748: END
// every 0 0$1 trigger safeCounter > 30 do
8749: LD_EXP 15
8753: PUSH
8754: LD_INT 30
8756: GREATER
8757: IFFALSE 8769
8759: GO 8761
8761: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8762: LD_STRING ACH_SAFE
8764: PPUSH
8765: CALL_OW 543
8769: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8770: LD_EXP 13
8774: PUSH
8775: LD_INT 3
8777: MOD
8778: PUSH
8779: LD_INT 0
8781: EQUAL
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: LD_INT 0
8800: EQUAL
8801: AND
8802: IFFALSE 8819
8804: GO 8806
8806: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8807: LD_EXP 25
8811: PPUSH
8812: LD_STRING DPM_F3
8814: PPUSH
8815: CALL_OW 94
8819: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8820: LD_EXP 13
8824: PUSH
8825: LD_INT 5
8827: MOD
8828: PUSH
8829: LD_INT 0
8831: EQUAL
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PPUSH
8843: CALL_OW 69
8847: PUSH
8848: LD_INT 0
8850: EQUAL
8851: AND
8852: IFFALSE 8869
8854: GO 8856
8856: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8857: LD_EXP 25
8861: PPUSH
8862: LD_STRING DPM_F4
8864: PPUSH
8865: CALL_OW 94
8869: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8870: LD_EXP 7
8874: PUSH
8875: LD_EXP 13
8879: PUSH
8880: LD_INT 8
8882: PUSH
8883: LD_INT 9
8885: PUSH
8886: LD_INT 10
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: LD_OWVAR 67
8898: ARRAY
8899: GREATEREQUAL
8900: AND
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_INT 6
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PPUSH
8912: CALL_OW 69
8916: PUSH
8917: LD_INT 0
8919: EQUAL
8920: AND
8921: IFFALSE 9020
8923: GO 8925
8925: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
8926: LD_EXP 17
8930: PPUSH
8931: LD_STRING DPM_PEnd
8933: PPUSH
8934: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
8938: LD_STRING med1
8940: PPUSH
8941: LD_EXP 3
8945: PPUSH
8946: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
8950: LD_STRING med2
8952: PPUSH
8953: LD_EXP 4
8957: PPUSH
8958: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
8962: LD_EXP 8
8966: PUSH
8967: LD_INT 15
8969: PUSH
8970: LD_INT 10
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: LD_OWVAR 67
8985: ARRAY
8986: GREATEREQUAL
8987: IFFALSE 8997
// medal3 := false ;
8989: LD_ADDR_EXP 5
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
8997: LD_STRING med3
8999: PPUSH
9000: LD_EXP 5
9004: PPUSH
9005: CALL_OW 101
// GiveMedals ( MAIN ) ;
9009: LD_STRING MAIN
9011: PPUSH
9012: CALL_OW 102
// YouWin ;
9016: CALL_OW 103
// end ;
9020: END
// every 4 4$10 trigger convoy_start do var i ;
9021: LD_EXP 7
9025: IFFALSE 9391
9027: GO 9029
9029: DISABLE
9030: LD_INT 0
9032: PPUSH
// begin DialogueOn ;
9033: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9037: LD_EXP 17
9041: PPUSH
9042: LD_STRING DPM_PHelp
9044: PPUSH
9045: CALL_OW 94
// DialogueOff ;
9049: CALL_OW 7
// Wait ( 0 0$30 ) ;
9053: LD_INT 1050
9055: PPUSH
9056: CALL_OW 67
// Randomize ;
9060: CALL_OW 10
// uc_side := 3 ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_INT 3
9071: ST_TO_ADDR
// uc_nation := 3 ;
9072: LD_ADDR_OWVAR 21
9076: PUSH
9077: LD_INT 3
9079: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9080: LD_ADDR_VAR 0 1
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_INT 5
9092: PUSH
9093: LD_INT 4
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_OWVAR 67
9108: ARRAY
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9151
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9113: LD_INT 0
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 3
9121: PPUSH
9122: CALL_OW 12
9126: PPUSH
9127: LD_INT 5
9129: PPUSH
9130: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9134: CALL_OW 44
9138: PPUSH
9139: LD_INT 1
9141: PPUSH
9142: LD_INT 0
9144: PPUSH
9145: CALL_OW 49
// end ;
9149: GO 9110
9151: POP
9152: POP
// vc_chassis := ru_heavy_wheeled ;
9153: LD_ADDR_OWVAR 37
9157: PUSH
9158: LD_INT 23
9160: ST_TO_ADDR
// vc_engine := engine_combustion ;
9161: LD_ADDR_OWVAR 39
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// vc_control := control_manual ;
9169: LD_ADDR_OWVAR 38
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// vc_weapon := 89 ;
9177: LD_ADDR_OWVAR 40
9181: PUSH
9182: LD_INT 89
9184: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9185: LD_ADDR_OWVAR 41
9189: PUSH
9190: LD_INT 88
9192: ST_TO_ADDR
// i := CreateVehicle ;
9193: LD_ADDR_VAR 0 1
9197: PUSH
9198: CALL_OW 45
9202: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_INT 5
9210: PPUSH
9211: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: LD_INT 63
9222: PPUSH
9223: LD_INT 115
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: LD_INT 200
9243: PPUSH
9244: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9248: LD_INT 0
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: LD_INT 5
9256: PPUSH
9257: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9261: CALL_OW 44
9265: PPUSH
9266: LD_VAR 0 1
9270: PPUSH
9271: CALL_OW 52
// DialogueOn ;
9275: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9279: LD_INT 169
9281: PPUSH
9282: LD_INT 115
9284: PPUSH
9285: CALL_OW 86
// DWait ( 0 0$01 ) ;
9289: LD_INT 35
9291: PPUSH
9292: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9296: LD_INT 63
9298: PPUSH
9299: LD_INT 115
9301: PPUSH
9302: CALL_OW 86
// DWait ( 0 0$01 ) ;
9306: LD_INT 35
9308: PPUSH
9309: CALL_OW 68
// DialogueOff ;
9313: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_INT 57
9324: PPUSH
9325: LD_INT 53
9327: PPUSH
9328: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9332: LD_INT 6300
9334: PPUSH
9335: LD_INT 14700
9337: PPUSH
9338: CALL_OW 12
9342: PPUSH
9343: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9347: LD_EXP 18
9351: PPUSH
9352: LD_INT 86
9354: PPUSH
9355: LD_INT 112
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9372: LD_EXP 18
9376: PPUSH
9377: LD_STRING DPM_Sa1
9379: PPUSH
9380: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9384: LD_STRING PM_3
9386: PPUSH
9387: CALL_OW 337
// end ;
9391: PPOPN 1
9393: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9394: LD_INT 3
9396: PPUSH
9397: LD_EXP 18
9401: PPUSH
9402: CALL_OW 292
9406: IFFALSE 9455
9408: GO 9410
9410: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9411: LD_EXP 18
9415: PPUSH
9416: LD_STRING DPM_Sa2
9418: PPUSH
9419: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9423: LD_STRING PM_4
9425: PPUSH
9426: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9430: LD_INT 40
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_INT 3
9450: PPUSH
9451: CALL_OW 235
// end ;
9455: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9456: LD_EXP 3
9460: NOT
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 6
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 69
9476: PUSH
9477: LD_INT 0
9479: EQUAL
9480: AND
9481: IFFALSE 9543
9483: GO 9485
9485: DISABLE
// begin DialogueOn ;
9486: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9490: LD_EXP 16
9494: PPUSH
9495: LD_STRING DPM_S3
9497: PPUSH
9498: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9502: LD_INT 62
9504: PPUSH
9505: LD_INT 113
9507: PPUSH
9508: LD_INT 3
9510: PPUSH
9511: LD_INT 10
9513: PPUSH
9514: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9518: LD_INT 62
9520: PPUSH
9521: LD_INT 113
9523: PPUSH
9524: CALL_OW 84
// dwait ( 0 0$1 ) ;
9528: LD_INT 35
9530: PPUSH
9531: CALL_OW 68
// DialogueOff ;
9535: CALL_OW 7
// CounterAttack ;
9539: CALL 5789 0 0
// end ; end_of_file
9543: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9544: LD_VAR 0 1
9548: PPUSH
9549: CALL_OW 255
9553: PUSH
9554: LD_INT 1
9556: EQUAL
9557: IFFALSE 9593
// if not us_retreat then
9559: LD_EXP 22
9563: NOT
9564: IFFALSE 9593
// if GetClass ( h ) = 1 then
9566: LD_VAR 0 2
9570: PPUSH
9571: CALL_OW 257
9575: PUSH
9576: LD_INT 1
9578: EQUAL
9579: IFFALSE 9593
// ComEnterUnit ( h , us_arm ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 69
9588: PPUSH
9589: CALL_OW 120
// end ;
9593: PPOPN 2
9595: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL 22265 0 1
// if GetSide ( un ) = 1 then
9605: LD_VAR 0 1
9609: PPUSH
9610: CALL_OW 255
9614: PUSH
9615: LD_INT 1
9617: EQUAL
9618: IFFALSE 9634
// us_count := us_count + 1 ;
9620: LD_ADDR_EXP 24
9624: PUSH
9625: LD_EXP 24
9629: PUSH
9630: LD_INT 1
9632: PLUS
9633: ST_TO_ADDR
// if un in us_force then
9634: LD_VAR 0 1
9638: PUSH
9639: LD_EXP 12
9643: IN
9644: IFFALSE 9662
// us_force := us_force diff un ;
9646: LD_ADDR_EXP 12
9650: PUSH
9651: LD_EXP 12
9655: PUSH
9656: LD_VAR 0 1
9660: DIFF
9661: ST_TO_ADDR
// if un in ar_force then
9662: LD_VAR 0 1
9666: PUSH
9667: LD_EXP 11
9671: IN
9672: IFFALSE 9690
// ar_force := ar_force diff un ;
9674: LD_ADDR_EXP 11
9678: PUSH
9679: LD_EXP 11
9683: PUSH
9684: LD_VAR 0 1
9688: DIFF
9689: ST_TO_ADDR
// if un = Stolypin then
9690: LD_VAR 0 1
9694: PUSH
9695: LD_EXP 16
9699: EQUAL
9700: IFFALSE 9709
// YouLost ( dead ) ;
9702: LD_STRING dead
9704: PPUSH
9705: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 30
9726: PUSH
9727: LD_INT 0
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: IN
9743: IFFALSE 9752
// YouLost ( depot ) ;
9745: LD_STRING depot
9747: PPUSH
9748: CALL_OW 104
// if GetSide ( un ) = 6 then
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 255
9761: PUSH
9762: LD_INT 6
9764: EQUAL
9765: IFFALSE 9781
// dest_counter := dest_counter + 1 ;
9767: LD_ADDR_EXP 8
9771: PUSH
9772: LD_EXP 8
9776: PUSH
9777: LD_INT 1
9779: PLUS
9780: ST_TO_ADDR
// end ;
9781: PPOPN 1
9783: END
// on VehicleConstructed ( un , fac ) do begin if GetSide ( un ) = 1 then
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: PUSH
9794: LD_INT 1
9796: EQUAL
9797: IFFALSE 9814
// ComMoveXY ( un , 57 , 52 ) ;
9799: LD_VAR 0 1
9803: PPUSH
9804: LD_INT 57
9806: PPUSH
9807: LD_INT 52
9809: PPUSH
9810: CALL_OW 111
// end ;
9814: PPOPN 2
9816: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9817: LD_EXP 21
9821: NOT
9822: IFFALSE 9872
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_INT 3
9831: EQUAL
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 1
9840: EQUAL
9841: AND
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 1
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 2
9856: PUSH
9857: LD_INT 3
9859: EQUAL
9860: AND
9861: OR
9862: IFFALSE 9872
// us_alert := true ;
9864: LD_ADDR_EXP 21
9868: PUSH
9869: LD_INT 1
9871: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 6
9879: EQUAL
9880: PUSH
9881: LD_VAR 0 2
9885: PUSH
9886: LD_INT 3
9888: EQUAL
9889: AND
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 3
9898: EQUAL
9899: PUSH
9900: LD_VAR 0 2
9904: PUSH
9905: LD_INT 6
9907: EQUAL
9908: AND
9909: OR
9910: IFFALSE 9919
// YouLost ( alat ) ;
9912: LD_STRING alat
9914: PPUSH
9915: CALL_OW 104
// end ;
9919: PPOPN 2
9921: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 255
9931: PUSH
9932: LD_INT 2
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 58
9943: PUSH
9944: EMPTY
9945: LIST
9946: PUSH
9947: LD_INT 21
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: IN
9966: AND
9967: IFFALSE 10088
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
9969: LD_OWVAR 3
9973: PUSH
9974: LD_VAR 0 1
9978: DIFF
9979: PPUSH
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 74
9989: PPUSH
9990: CALL_OW 255
9994: PUSH
9995: LD_INT 2
9997: NONEQUAL
9998: IFFALSE 10088
// begin Wait ( 0 0$1.3 ) ;
10000: LD_INT 46
10002: PPUSH
10003: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 250
10016: PPUSH
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 251
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 250
10043: PPUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 251
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 250
10070: PPUSH
10071: LD_VAR 0 1
10075: PPUSH
10076: CALL_OW 251
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 453
// end ; end ;
10088: PPOPN 1
10090: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 21
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: IN
10125: PUSH
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL 10610 0 1
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 2
10143: EQUAL
10144: NOT
10145: AND
10146: IFFALSE 10271
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10148: LD_INT 105
10150: PPUSH
10151: LD_INT 210
10153: PPUSH
10154: CALL_OW 12
10158: PPUSH
10159: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 250
10172: PPUSH
10173: LD_VAR 0 2
10177: PPUSH
10178: CALL_OW 251
10182: PPUSH
10183: LD_INT 3
10185: PPUSH
10186: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10190: LD_VAR 0 2
10194: PPUSH
10195: CALL_OW 250
10199: PPUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 251
10209: PPUSH
10210: LD_INT 3
10212: PPUSH
10213: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10217: LD_VAR 0 2
10221: PPUSH
10222: CALL_OW 250
10226: PPUSH
10227: LD_VAR 0 2
10231: PPUSH
10232: CALL_OW 251
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10244: LD_VAR 0 2
10248: PPUSH
10249: CALL_OW 250
10253: PPUSH
10254: LD_VAR 0 2
10258: PPUSH
10259: CALL_OW 251
10263: PPUSH
10264: LD_INT 3
10266: PPUSH
10267: CALL_OW 453
// end ; end ;
10271: PPOPN 4
10273: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_VAR 0 2
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: CALL 22363 0 3
// end ;
10293: PPOPN 3
10295: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL 22371 0 1
// end ; end_of_file
10305: PPOPN 1
10307: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10308: LD_INT 0
10310: PPUSH
10311: PPUSH
10312: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 2
10327: ARRAY
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_VAR 0 4
10338: PPUSH
10339: CALL_OW 1
10343: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10344: LD_ADDR_VAR 0 1
10348: PUSH
10349: LD_VAR 0 1
10353: PPUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 7
10363: PPUSH
10364: CALL_OW 1
10368: ST_TO_ADDR
// result := tab ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: LD_VAR 0 1
10378: ST_TO_ADDR
// end ;
10379: LD_VAR 0 5
10383: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
10388: PPUSH
// if not GetControl ( veh ) = control_manual then
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL_OW 263
10398: PUSH
10399: LD_INT 1
10401: EQUAL
10402: NOT
10403: IFFALSE 10415
// result := false else
10405: LD_ADDR_VAR 0 2
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
10413: GO 10560
// if veh in FilterAllUnits ( [ f_empty ] ) then
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 58
10422: PUSH
10423: EMPTY
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: IN
10431: IFFALSE 10443
// result := false else
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
10441: GO 10560
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10443: LD_ADDR_VAR 0 4
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 255
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 55
10467: PUSH
10468: EMPTY
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: ST_TO_ADDR
// if not filter then
10480: LD_VAR 0 4
10484: NOT
10485: IFFALSE 10497
// result := false else
10487: LD_ADDR_VAR 0 2
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
10495: GO 10560
// for i = 1 to filter do
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10558
// if IsDriver ( filter [ i ] ) = veh then
10515: LD_VAR 0 4
10519: PUSH
10520: LD_VAR 0 3
10524: ARRAY
10525: PPUSH
10526: CALL 57532 0 1
10530: PUSH
10531: LD_VAR 0 1
10535: EQUAL
10536: IFFALSE 10556
// begin result := filter [ i ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_VAR 0 4
10547: PUSH
10548: LD_VAR 0 3
10552: ARRAY
10553: ST_TO_ADDR
// break ;
10554: GO 10558
// end ;
10556: GO 10512
10558: POP
10559: POP
// end ; end ;
10560: LD_VAR 0 2
10564: RET
// export function FindTarget ( unit ) ; begin
10565: LD_INT 0
10567: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 81
10575: PUSH
10576: LD_VAR 0 1
10580: PPUSH
10581: CALL_OW 255
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 74
10604: ST_TO_ADDR
// end ;
10605: LD_VAR 0 2
10609: RET
// export function NearestUnit ( unit ) ; begin
10610: LD_INT 0
10612: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10613: LD_ADDR_VAR 0 2
10617: PUSH
10618: LD_OWVAR 3
10622: PUSH
10623: LD_VAR 0 1
10627: DIFF
10628: PPUSH
10629: LD_VAR 0 1
10633: PPUSH
10634: CALL_OW 74
10638: ST_TO_ADDR
// end ; end_of_file
10639: LD_VAR 0 2
10643: RET
// every 12 12$00 do
10644: GO 10646
10646: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10647: LD_INT 1
10649: PPUSH
10650: LD_INT 570
10652: PPUSH
10653: LD_INT 350
10655: PPUSH
10656: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10660: LD_INT 10500
10662: PPUSH
10663: LD_INT 21000
10665: PPUSH
10666: CALL_OW 12
10670: PPUSH
10671: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 570
10680: PPUSH
10681: LD_INT 350
10683: PPUSH
10684: CALL_OW 550
// end ;
10688: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
10695: PPUSH
// uc_nation = nation_nature ;
10696: LD_ADDR_OWVAR 21
10700: PUSH
10701: LD_INT 0
10703: ST_TO_ADDR
// uc_side = 0 ;
10704: LD_ADDR_OWVAR 20
10708: PUSH
10709: LD_INT 0
10711: ST_TO_ADDR
// l = 0 ;
10712: LD_ADDR_VAR 0 6
10716: PUSH
10717: LD_INT 0
10719: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10720: LD_ADDR_OWVAR 24
10724: PUSH
10725: LD_INT 0
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10736: LD_ADDR_OWVAR 35
10740: PUSH
10741: LD_INT 5
10743: NEG
10744: PPUSH
10745: LD_INT 5
10747: PPUSH
10748: CALL_OW 12
10752: ST_TO_ADDR
// hc_gallery =  ;
10753: LD_ADDR_OWVAR 33
10757: PUSH
10758: LD_STRING 
10760: ST_TO_ADDR
// hc_class = class_apeman ;
10761: LD_ADDR_OWVAR 28
10765: PUSH
10766: LD_INT 12
10768: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10769: LD_ADDR_OWVAR 29
10773: PUSH
10774: LD_INT 11
10776: PPUSH
10777: LD_INT 13
10779: PPUSH
10780: CALL_OW 12
10784: PUSH
10785: LD_INT 10
10787: PPUSH
10788: LD_INT 11
10790: PPUSH
10791: CALL_OW 12
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
// hc_sex = sex_male ;
10800: LD_ADDR_OWVAR 27
10804: PUSH
10805: LD_INT 1
10807: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10808: LD_ADDR_OWVAR 31
10812: PUSH
10813: LD_INT 0
10815: PPUSH
10816: LD_INT 2
10818: PPUSH
10819: CALL_OW 12
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 0
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: ST_TO_ADDR
// apeman = CreateHuman ;
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: CALL_OW 44
10848: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_VAR 0 4
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 49
// l = l + 1 ;
10866: LD_ADDR_VAR 0 6
10870: PUSH
10871: LD_VAR 0 6
10875: PUSH
10876: LD_INT 1
10878: PLUS
10879: ST_TO_ADDR
// end until l = num1 ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_VAR 0 1
10889: EQUAL
10890: IFFALSE 10720
// l = 0 ;
10892: LD_ADDR_VAR 0 6
10896: PUSH
10897: LD_INT 0
10899: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 0
10907: PPUSH
10908: LD_INT 25
10910: PPUSH
10911: CALL_OW 12
10915: ST_TO_ADDR
// hc_class = class_tiger ;
10916: LD_ADDR_OWVAR 28
10920: PUSH
10921: LD_INT 14
10923: ST_TO_ADDR
// hc_sex = sex_male ;
10924: LD_ADDR_OWVAR 27
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// hc_gallery = sandnature ;
10932: LD_ADDR_OWVAR 33
10936: PUSH
10937: LD_STRING sandnature
10939: ST_TO_ADDR
// hc_face_number = 3 ;
10940: LD_ADDR_OWVAR 34
10944: PUSH
10945: LD_INT 3
10947: ST_TO_ADDR
// tiger = CreateHuman ;
10948: LD_ADDR_VAR 0 8
10952: PUSH
10953: CALL_OW 44
10957: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
10958: LD_VAR 0 8
10962: PPUSH
10963: LD_VAR 0 4
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// l = l + 1 ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 6
10984: PUSH
10985: LD_INT 1
10987: PLUS
10988: ST_TO_ADDR
// end until l = num2 ;
10989: LD_VAR 0 6
10993: PUSH
10994: LD_VAR 0 2
10998: EQUAL
10999: IFFALSE 10900
// l = 0 ;
11001: LD_ADDR_VAR 0 6
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11009: LD_ADDR_OWVAR 28
11013: PUSH
11014: LD_INT 18
11016: ST_TO_ADDR
// hc_gallery = sandnature ;
11017: LD_ADDR_OWVAR 33
11021: PUSH
11022: LD_STRING sandnature
11024: ST_TO_ADDR
// hc_face_number = 1 ;
11025: LD_ADDR_OWVAR 34
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// bird = CreateHuman ;
11033: LD_ADDR_VAR 0 9
11037: PUSH
11038: CALL_OW 44
11042: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11043: LD_VAR 0 9
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 51
// l = l + 1 ;
11055: LD_ADDR_VAR 0 6
11059: PUSH
11060: LD_VAR 0 6
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: ST_TO_ADDR
// end until l = num3 ;
11069: LD_VAR 0 6
11073: PUSH
11074: LD_VAR 0 3
11078: EQUAL
11079: IFFALSE 11009
// end ; end_of_file
11081: LD_VAR 0 5
11085: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11086: LD_INT 0
11088: PPUSH
// ru_radar := 98 ;
11089: LD_ADDR_EXP 26
11093: PUSH
11094: LD_INT 98
11096: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11097: LD_ADDR_EXP 27
11101: PUSH
11102: LD_INT 89
11104: ST_TO_ADDR
// us_hack := 99 ;
11105: LD_ADDR_EXP 28
11109: PUSH
11110: LD_INT 99
11112: ST_TO_ADDR
// us_artillery := 97 ;
11113: LD_ADDR_EXP 29
11117: PUSH
11118: LD_INT 97
11120: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11121: LD_ADDR_EXP 30
11125: PUSH
11126: LD_INT 91
11128: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11129: LD_ADDR_EXP 31
11133: PUSH
11134: LD_INT 92
11136: ST_TO_ADDR
// tech_Artillery := 80 ;
11137: LD_ADDR_EXP 32
11141: PUSH
11142: LD_INT 80
11144: ST_TO_ADDR
// tech_RadMat := 81 ;
11145: LD_ADDR_EXP 33
11149: PUSH
11150: LD_INT 81
11152: ST_TO_ADDR
// tech_BasicTools := 82 ;
11153: LD_ADDR_EXP 34
11157: PUSH
11158: LD_INT 82
11160: ST_TO_ADDR
// tech_Cargo := 83 ;
11161: LD_ADDR_EXP 35
11165: PUSH
11166: LD_INT 83
11168: ST_TO_ADDR
// tech_Track := 84 ;
11169: LD_ADDR_EXP 36
11173: PUSH
11174: LD_INT 84
11176: ST_TO_ADDR
// tech_Crane := 85 ;
11177: LD_ADDR_EXP 37
11181: PUSH
11182: LD_INT 85
11184: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11185: LD_ADDR_EXP 38
11189: PUSH
11190: LD_INT 86
11192: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11193: LD_ADDR_EXP 39
11197: PUSH
11198: LD_INT 87
11200: ST_TO_ADDR
// end ;
11201: LD_VAR 0 1
11205: RET
// every 1 do
11206: GO 11208
11208: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
11209: CALL 11086 0 0
11213: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
11214: GO 11216
11216: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
11217: LD_STRING initStreamRollete();
11219: PPUSH
11220: CALL_OW 559
// InitStreamMode ;
11224: CALL 11233 0 0
// DefineStreamItems ( ) ;
11228: CALL 11673 0 0
// end ;
11232: END
// function InitStreamMode ; begin
11233: LD_INT 0
11235: PPUSH
// streamModeActive := false ;
11236: LD_ADDR_EXP 40
11240: PUSH
11241: LD_INT 0
11243: ST_TO_ADDR
// normalCounter := 36 ;
11244: LD_ADDR_EXP 41
11248: PUSH
11249: LD_INT 36
11251: ST_TO_ADDR
// hardcoreCounter := 16 ;
11252: LD_ADDR_EXP 42
11256: PUSH
11257: LD_INT 16
11259: ST_TO_ADDR
// sRocket := false ;
11260: LD_ADDR_EXP 45
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// sSpeed := false ;
11268: LD_ADDR_EXP 44
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// sEngine := false ;
11276: LD_ADDR_EXP 46
11280: PUSH
11281: LD_INT 0
11283: ST_TO_ADDR
// sSpec := false ;
11284: LD_ADDR_EXP 43
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// sLevel := false ;
11292: LD_ADDR_EXP 47
11296: PUSH
11297: LD_INT 0
11299: ST_TO_ADDR
// sArmoury := false ;
11300: LD_ADDR_EXP 48
11304: PUSH
11305: LD_INT 0
11307: ST_TO_ADDR
// sRadar := false ;
11308: LD_ADDR_EXP 49
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// sBunker := false ;
11316: LD_ADDR_EXP 50
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// sHack := false ;
11324: LD_ADDR_EXP 51
11328: PUSH
11329: LD_INT 0
11331: ST_TO_ADDR
// sFire := false ;
11332: LD_ADDR_EXP 52
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// sRefresh := false ;
11340: LD_ADDR_EXP 53
11344: PUSH
11345: LD_INT 0
11347: ST_TO_ADDR
// sExp := false ;
11348: LD_ADDR_EXP 54
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// sDepot := false ;
11356: LD_ADDR_EXP 55
11360: PUSH
11361: LD_INT 0
11363: ST_TO_ADDR
// sFlag := false ;
11364: LD_ADDR_EXP 56
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// sKamikadze := false ;
11372: LD_ADDR_EXP 64
11376: PUSH
11377: LD_INT 0
11379: ST_TO_ADDR
// sTroll := false ;
11380: LD_ADDR_EXP 65
11384: PUSH
11385: LD_INT 0
11387: ST_TO_ADDR
// sSlow := false ;
11388: LD_ADDR_EXP 66
11392: PUSH
11393: LD_INT 0
11395: ST_TO_ADDR
// sLack := false ;
11396: LD_ADDR_EXP 67
11400: PUSH
11401: LD_INT 0
11403: ST_TO_ADDR
// sTank := false ;
11404: LD_ADDR_EXP 69
11408: PUSH
11409: LD_INT 0
11411: ST_TO_ADDR
// sRemote := false ;
11412: LD_ADDR_EXP 70
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// sPowell := false ;
11420: LD_ADDR_EXP 71
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// sTeleport := false ;
11428: LD_ADDR_EXP 74
11432: PUSH
11433: LD_INT 0
11435: ST_TO_ADDR
// sOilTower := false ;
11436: LD_ADDR_EXP 76
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// sShovel := false ;
11444: LD_ADDR_EXP 77
11448: PUSH
11449: LD_INT 0
11451: ST_TO_ADDR
// sSheik := false ;
11452: LD_ADDR_EXP 78
11456: PUSH
11457: LD_INT 0
11459: ST_TO_ADDR
// sEarthquake := false ;
11460: LD_ADDR_EXP 80
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// sAI := false ;
11468: LD_ADDR_EXP 81
11472: PUSH
11473: LD_INT 0
11475: ST_TO_ADDR
// sCargo := false ;
11476: LD_ADDR_EXP 84
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// sDLaser := false ;
11484: LD_ADDR_EXP 85
11488: PUSH
11489: LD_INT 0
11491: ST_TO_ADDR
// sExchange := false ;
11492: LD_ADDR_EXP 86
11496: PUSH
11497: LD_INT 0
11499: ST_TO_ADDR
// sFac := false ;
11500: LD_ADDR_EXP 87
11504: PUSH
11505: LD_INT 0
11507: ST_TO_ADDR
// sPower := false ;
11508: LD_ADDR_EXP 88
11512: PUSH
11513: LD_INT 0
11515: ST_TO_ADDR
// sRandom := false ;
11516: LD_ADDR_EXP 89
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// sShield := false ;
11524: LD_ADDR_EXP 90
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// sTime := false ;
11532: LD_ADDR_EXP 91
11536: PUSH
11537: LD_INT 0
11539: ST_TO_ADDR
// sTools := false ;
11540: LD_ADDR_EXP 92
11544: PUSH
11545: LD_INT 0
11547: ST_TO_ADDR
// sSold := false ;
11548: LD_ADDR_EXP 57
11552: PUSH
11553: LD_INT 0
11555: ST_TO_ADDR
// sDiff := false ;
11556: LD_ADDR_EXP 58
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// sFog := false ;
11564: LD_ADDR_EXP 61
11568: PUSH
11569: LD_INT 0
11571: ST_TO_ADDR
// sReset := false ;
11572: LD_ADDR_EXP 62
11576: PUSH
11577: LD_INT 0
11579: ST_TO_ADDR
// sSun := false ;
11580: LD_ADDR_EXP 63
11584: PUSH
11585: LD_INT 0
11587: ST_TO_ADDR
// sTiger := false ;
11588: LD_ADDR_EXP 59
11592: PUSH
11593: LD_INT 0
11595: ST_TO_ADDR
// sBomb := false ;
11596: LD_ADDR_EXP 60
11600: PUSH
11601: LD_INT 0
11603: ST_TO_ADDR
// sWound := false ;
11604: LD_ADDR_EXP 68
11608: PUSH
11609: LD_INT 0
11611: ST_TO_ADDR
// sBetray := false ;
11612: LD_ADDR_EXP 72
11616: PUSH
11617: LD_INT 0
11619: ST_TO_ADDR
// sContamin := false ;
11620: LD_ADDR_EXP 73
11624: PUSH
11625: LD_INT 0
11627: ST_TO_ADDR
// sOil := false ;
11628: LD_ADDR_EXP 75
11632: PUSH
11633: LD_INT 0
11635: ST_TO_ADDR
// sStu := false ;
11636: LD_ADDR_EXP 79
11640: PUSH
11641: LD_INT 0
11643: ST_TO_ADDR
// sBazooka := false ;
11644: LD_ADDR_EXP 82
11648: PUSH
11649: LD_INT 0
11651: ST_TO_ADDR
// sMortar := false ;
11652: LD_ADDR_EXP 83
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// sRanger := false ;
11660: LD_ADDR_EXP 93
11664: PUSH
11665: LD_INT 0
11667: ST_TO_ADDR
// end ;
11668: LD_VAR 0 1
11672: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
11673: LD_INT 0
11675: PPUSH
11676: PPUSH
11677: PPUSH
11678: PPUSH
11679: PPUSH
// result := [ ] ;
11680: LD_ADDR_VAR 0 1
11684: PUSH
11685: EMPTY
11686: ST_TO_ADDR
// if campaign_id = 1 then
11687: LD_OWVAR 69
11691: PUSH
11692: LD_INT 1
11694: EQUAL
11695: IFFALSE 14633
// begin case mission_number of 1 :
11697: LD_OWVAR 70
11701: PUSH
11702: LD_INT 1
11704: DOUBLE
11705: EQUAL
11706: IFTRUE 11710
11708: GO 11774
11710: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: LD_INT 2
11718: PUSH
11719: LD_INT 4
11721: PUSH
11722: LD_INT 11
11724: PUSH
11725: LD_INT 12
11727: PUSH
11728: LD_INT 15
11730: PUSH
11731: LD_INT 16
11733: PUSH
11734: LD_INT 22
11736: PUSH
11737: LD_INT 23
11739: PUSH
11740: LD_INT 26
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 101
11756: PUSH
11757: LD_INT 102
11759: PUSH
11760: LD_INT 106
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: ST_TO_ADDR
11772: GO 14631
11774: LD_INT 2
11776: DOUBLE
11777: EQUAL
11778: IFTRUE 11782
11780: GO 11854
11782: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
11783: LD_ADDR_VAR 0 1
11787: PUSH
11788: LD_INT 2
11790: PUSH
11791: LD_INT 4
11793: PUSH
11794: LD_INT 11
11796: PUSH
11797: LD_INT 12
11799: PUSH
11800: LD_INT 15
11802: PUSH
11803: LD_INT 16
11805: PUSH
11806: LD_INT 22
11808: PUSH
11809: LD_INT 23
11811: PUSH
11812: LD_INT 26
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 101
11828: PUSH
11829: LD_INT 102
11831: PUSH
11832: LD_INT 105
11834: PUSH
11835: LD_INT 106
11837: PUSH
11838: LD_INT 108
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: ST_TO_ADDR
11852: GO 14631
11854: LD_INT 3
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11938
11862: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
11863: LD_ADDR_VAR 0 1
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 11
11879: PUSH
11880: LD_INT 12
11882: PUSH
11883: LD_INT 15
11885: PUSH
11886: LD_INT 16
11888: PUSH
11889: LD_INT 22
11891: PUSH
11892: LD_INT 26
11894: PUSH
11895: LD_INT 36
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 101
11912: PUSH
11913: LD_INT 102
11915: PUSH
11916: LD_INT 105
11918: PUSH
11919: LD_INT 106
11921: PUSH
11922: LD_INT 108
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: ST_TO_ADDR
11936: GO 14631
11938: LD_INT 4
11940: DOUBLE
11941: EQUAL
11942: IFTRUE 11946
11944: GO 12030
11946: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: LD_INT 2
11954: PUSH
11955: LD_INT 4
11957: PUSH
11958: LD_INT 5
11960: PUSH
11961: LD_INT 8
11963: PUSH
11964: LD_INT 11
11966: PUSH
11967: LD_INT 12
11969: PUSH
11970: LD_INT 15
11972: PUSH
11973: LD_INT 16
11975: PUSH
11976: LD_INT 22
11978: PUSH
11979: LD_INT 23
11981: PUSH
11982: LD_INT 26
11984: PUSH
11985: LD_INT 36
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 101
12004: PUSH
12005: LD_INT 102
12007: PUSH
12008: LD_INT 105
12010: PUSH
12011: LD_INT 106
12013: PUSH
12014: LD_INT 108
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: ST_TO_ADDR
12028: GO 14631
12030: LD_INT 5
12032: DOUBLE
12033: EQUAL
12034: IFTRUE 12038
12036: GO 12138
12038: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
12039: LD_ADDR_VAR 0 1
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: LD_INT 4
12049: PUSH
12050: LD_INT 5
12052: PUSH
12053: LD_INT 6
12055: PUSH
12056: LD_INT 8
12058: PUSH
12059: LD_INT 11
12061: PUSH
12062: LD_INT 12
12064: PUSH
12065: LD_INT 15
12067: PUSH
12068: LD_INT 16
12070: PUSH
12071: LD_INT 22
12073: PUSH
12074: LD_INT 23
12076: PUSH
12077: LD_INT 25
12079: PUSH
12080: LD_INT 26
12082: PUSH
12083: LD_INT 36
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 101
12104: PUSH
12105: LD_INT 102
12107: PUSH
12108: LD_INT 105
12110: PUSH
12111: LD_INT 106
12113: PUSH
12114: LD_INT 108
12116: PUSH
12117: LD_INT 109
12119: PUSH
12120: LD_INT 112
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: ST_TO_ADDR
12136: GO 14631
12138: LD_INT 6
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 12266
12146: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
12147: LD_ADDR_VAR 0 1
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 4
12157: PUSH
12158: LD_INT 5
12160: PUSH
12161: LD_INT 6
12163: PUSH
12164: LD_INT 8
12166: PUSH
12167: LD_INT 11
12169: PUSH
12170: LD_INT 12
12172: PUSH
12173: LD_INT 15
12175: PUSH
12176: LD_INT 16
12178: PUSH
12179: LD_INT 20
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_INT 23
12190: PUSH
12191: LD_INT 25
12193: PUSH
12194: LD_INT 26
12196: PUSH
12197: LD_INT 30
12199: PUSH
12200: LD_INT 31
12202: PUSH
12203: LD_INT 32
12205: PUSH
12206: LD_INT 36
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 101
12232: PUSH
12233: LD_INT 102
12235: PUSH
12236: LD_INT 105
12238: PUSH
12239: LD_INT 106
12241: PUSH
12242: LD_INT 108
12244: PUSH
12245: LD_INT 109
12247: PUSH
12248: LD_INT 112
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: ST_TO_ADDR
12264: GO 14631
12266: LD_INT 7
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12374
12274: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
12275: LD_ADDR_VAR 0 1
12279: PUSH
12280: LD_INT 2
12282: PUSH
12283: LD_INT 4
12285: PUSH
12286: LD_INT 5
12288: PUSH
12289: LD_INT 7
12291: PUSH
12292: LD_INT 11
12294: PUSH
12295: LD_INT 12
12297: PUSH
12298: LD_INT 15
12300: PUSH
12301: LD_INT 16
12303: PUSH
12304: LD_INT 20
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 22
12312: PUSH
12313: LD_INT 23
12315: PUSH
12316: LD_INT 25
12318: PUSH
12319: LD_INT 26
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 101
12340: PUSH
12341: LD_INT 102
12343: PUSH
12344: LD_INT 103
12346: PUSH
12347: LD_INT 105
12349: PUSH
12350: LD_INT 106
12352: PUSH
12353: LD_INT 108
12355: PUSH
12356: LD_INT 112
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: ST_TO_ADDR
12372: GO 14631
12374: LD_INT 8
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12510
12382: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: LD_INT 4
12393: PUSH
12394: LD_INT 5
12396: PUSH
12397: LD_INT 6
12399: PUSH
12400: LD_INT 7
12402: PUSH
12403: LD_INT 8
12405: PUSH
12406: LD_INT 11
12408: PUSH
12409: LD_INT 12
12411: PUSH
12412: LD_INT 15
12414: PUSH
12415: LD_INT 16
12417: PUSH
12418: LD_INT 20
12420: PUSH
12421: LD_INT 21
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_INT 23
12429: PUSH
12430: LD_INT 25
12432: PUSH
12433: LD_INT 26
12435: PUSH
12436: LD_INT 30
12438: PUSH
12439: LD_INT 31
12441: PUSH
12442: LD_INT 32
12444: PUSH
12445: LD_INT 36
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 101
12472: PUSH
12473: LD_INT 102
12475: PUSH
12476: LD_INT 103
12478: PUSH
12479: LD_INT 105
12481: PUSH
12482: LD_INT 106
12484: PUSH
12485: LD_INT 108
12487: PUSH
12488: LD_INT 109
12490: PUSH
12491: LD_INT 112
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: ST_TO_ADDR
12508: GO 14631
12510: LD_INT 9
12512: DOUBLE
12513: EQUAL
12514: IFTRUE 12518
12516: GO 12654
12518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
12519: LD_ADDR_VAR 0 1
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 4
12529: PUSH
12530: LD_INT 5
12532: PUSH
12533: LD_INT 6
12535: PUSH
12536: LD_INT 7
12538: PUSH
12539: LD_INT 8
12541: PUSH
12542: LD_INT 11
12544: PUSH
12545: LD_INT 12
12547: PUSH
12548: LD_INT 15
12550: PUSH
12551: LD_INT 16
12553: PUSH
12554: LD_INT 20
12556: PUSH
12557: LD_INT 21
12559: PUSH
12560: LD_INT 22
12562: PUSH
12563: LD_INT 23
12565: PUSH
12566: LD_INT 25
12568: PUSH
12569: LD_INT 26
12571: PUSH
12572: LD_INT 28
12574: PUSH
12575: LD_INT 30
12577: PUSH
12578: LD_INT 31
12580: PUSH
12581: LD_INT 32
12583: PUSH
12584: LD_INT 36
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 101
12612: PUSH
12613: LD_INT 102
12615: PUSH
12616: LD_INT 103
12618: PUSH
12619: LD_INT 105
12621: PUSH
12622: LD_INT 106
12624: PUSH
12625: LD_INT 108
12627: PUSH
12628: LD_INT 109
12630: PUSH
12631: LD_INT 112
12633: PUSH
12634: LD_INT 114
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: ST_TO_ADDR
12652: GO 14631
12654: LD_INT 10
12656: DOUBLE
12657: EQUAL
12658: IFTRUE 12662
12660: GO 12846
12662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: LD_INT 2
12670: PUSH
12671: LD_INT 4
12673: PUSH
12674: LD_INT 5
12676: PUSH
12677: LD_INT 6
12679: PUSH
12680: LD_INT 7
12682: PUSH
12683: LD_INT 8
12685: PUSH
12686: LD_INT 9
12688: PUSH
12689: LD_INT 10
12691: PUSH
12692: LD_INT 11
12694: PUSH
12695: LD_INT 12
12697: PUSH
12698: LD_INT 13
12700: PUSH
12701: LD_INT 14
12703: PUSH
12704: LD_INT 15
12706: PUSH
12707: LD_INT 16
12709: PUSH
12710: LD_INT 17
12712: PUSH
12713: LD_INT 18
12715: PUSH
12716: LD_INT 19
12718: PUSH
12719: LD_INT 20
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 22
12727: PUSH
12728: LD_INT 23
12730: PUSH
12731: LD_INT 24
12733: PUSH
12734: LD_INT 25
12736: PUSH
12737: LD_INT 26
12739: PUSH
12740: LD_INT 28
12742: PUSH
12743: LD_INT 30
12745: PUSH
12746: LD_INT 31
12748: PUSH
12749: LD_INT 32
12751: PUSH
12752: LD_INT 36
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 101
12788: PUSH
12789: LD_INT 102
12791: PUSH
12792: LD_INT 103
12794: PUSH
12795: LD_INT 104
12797: PUSH
12798: LD_INT 105
12800: PUSH
12801: LD_INT 106
12803: PUSH
12804: LD_INT 107
12806: PUSH
12807: LD_INT 108
12809: PUSH
12810: LD_INT 109
12812: PUSH
12813: LD_INT 110
12815: PUSH
12816: LD_INT 111
12818: PUSH
12819: LD_INT 112
12821: PUSH
12822: LD_INT 114
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: ST_TO_ADDR
12844: GO 14631
12846: LD_INT 11
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 13046
12854: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: LD_INT 4
12868: PUSH
12869: LD_INT 5
12871: PUSH
12872: LD_INT 6
12874: PUSH
12875: LD_INT 7
12877: PUSH
12878: LD_INT 8
12880: PUSH
12881: LD_INT 9
12883: PUSH
12884: LD_INT 10
12886: PUSH
12887: LD_INT 11
12889: PUSH
12890: LD_INT 12
12892: PUSH
12893: LD_INT 13
12895: PUSH
12896: LD_INT 14
12898: PUSH
12899: LD_INT 15
12901: PUSH
12902: LD_INT 16
12904: PUSH
12905: LD_INT 17
12907: PUSH
12908: LD_INT 18
12910: PUSH
12911: LD_INT 19
12913: PUSH
12914: LD_INT 20
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: LD_INT 25
12931: PUSH
12932: LD_INT 26
12934: PUSH
12935: LD_INT 28
12937: PUSH
12938: LD_INT 30
12940: PUSH
12941: LD_INT 31
12943: PUSH
12944: LD_INT 32
12946: PUSH
12947: LD_INT 34
12949: PUSH
12950: LD_INT 36
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 101
12988: PUSH
12989: LD_INT 102
12991: PUSH
12992: LD_INT 103
12994: PUSH
12995: LD_INT 104
12997: PUSH
12998: LD_INT 105
13000: PUSH
13001: LD_INT 106
13003: PUSH
13004: LD_INT 107
13006: PUSH
13007: LD_INT 108
13009: PUSH
13010: LD_INT 109
13012: PUSH
13013: LD_INT 110
13015: PUSH
13016: LD_INT 111
13018: PUSH
13019: LD_INT 112
13021: PUSH
13022: LD_INT 114
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: ST_TO_ADDR
13044: GO 14631
13046: LD_INT 12
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13262
13054: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
13055: LD_ADDR_VAR 0 1
13059: PUSH
13060: LD_INT 1
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: LD_INT 3
13068: PUSH
13069: LD_INT 4
13071: PUSH
13072: LD_INT 5
13074: PUSH
13075: LD_INT 6
13077: PUSH
13078: LD_INT 7
13080: PUSH
13081: LD_INT 8
13083: PUSH
13084: LD_INT 9
13086: PUSH
13087: LD_INT 10
13089: PUSH
13090: LD_INT 11
13092: PUSH
13093: LD_INT 12
13095: PUSH
13096: LD_INT 13
13098: PUSH
13099: LD_INT 14
13101: PUSH
13102: LD_INT 15
13104: PUSH
13105: LD_INT 16
13107: PUSH
13108: LD_INT 17
13110: PUSH
13111: LD_INT 18
13113: PUSH
13114: LD_INT 19
13116: PUSH
13117: LD_INT 20
13119: PUSH
13120: LD_INT 21
13122: PUSH
13123: LD_INT 22
13125: PUSH
13126: LD_INT 23
13128: PUSH
13129: LD_INT 24
13131: PUSH
13132: LD_INT 25
13134: PUSH
13135: LD_INT 26
13137: PUSH
13138: LD_INT 27
13140: PUSH
13141: LD_INT 28
13143: PUSH
13144: LD_INT 30
13146: PUSH
13147: LD_INT 31
13149: PUSH
13150: LD_INT 32
13152: PUSH
13153: LD_INT 33
13155: PUSH
13156: LD_INT 34
13158: PUSH
13159: LD_INT 36
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 101
13200: PUSH
13201: LD_INT 102
13203: PUSH
13204: LD_INT 103
13206: PUSH
13207: LD_INT 104
13209: PUSH
13210: LD_INT 105
13212: PUSH
13213: LD_INT 106
13215: PUSH
13216: LD_INT 107
13218: PUSH
13219: LD_INT 108
13221: PUSH
13222: LD_INT 109
13224: PUSH
13225: LD_INT 110
13227: PUSH
13228: LD_INT 111
13230: PUSH
13231: LD_INT 112
13233: PUSH
13234: LD_INT 113
13236: PUSH
13237: LD_INT 114
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: ST_TO_ADDR
13260: GO 14631
13262: LD_INT 13
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13466
13270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_INT 1
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 3
13284: PUSH
13285: LD_INT 4
13287: PUSH
13288: LD_INT 5
13290: PUSH
13291: LD_INT 8
13293: PUSH
13294: LD_INT 9
13296: PUSH
13297: LD_INT 10
13299: PUSH
13300: LD_INT 11
13302: PUSH
13303: LD_INT 12
13305: PUSH
13306: LD_INT 14
13308: PUSH
13309: LD_INT 15
13311: PUSH
13312: LD_INT 16
13314: PUSH
13315: LD_INT 17
13317: PUSH
13318: LD_INT 18
13320: PUSH
13321: LD_INT 19
13323: PUSH
13324: LD_INT 20
13326: PUSH
13327: LD_INT 21
13329: PUSH
13330: LD_INT 22
13332: PUSH
13333: LD_INT 23
13335: PUSH
13336: LD_INT 24
13338: PUSH
13339: LD_INT 25
13341: PUSH
13342: LD_INT 26
13344: PUSH
13345: LD_INT 27
13347: PUSH
13348: LD_INT 28
13350: PUSH
13351: LD_INT 30
13353: PUSH
13354: LD_INT 31
13356: PUSH
13357: LD_INT 32
13359: PUSH
13360: LD_INT 33
13362: PUSH
13363: LD_INT 34
13365: PUSH
13366: LD_INT 36
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 101
13404: PUSH
13405: LD_INT 102
13407: PUSH
13408: LD_INT 103
13410: PUSH
13411: LD_INT 104
13413: PUSH
13414: LD_INT 105
13416: PUSH
13417: LD_INT 106
13419: PUSH
13420: LD_INT 107
13422: PUSH
13423: LD_INT 108
13425: PUSH
13426: LD_INT 109
13428: PUSH
13429: LD_INT 110
13431: PUSH
13432: LD_INT 111
13434: PUSH
13435: LD_INT 112
13437: PUSH
13438: LD_INT 113
13440: PUSH
13441: LD_INT 114
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: ST_TO_ADDR
13464: GO 14631
13466: LD_INT 14
13468: DOUBLE
13469: EQUAL
13470: IFTRUE 13474
13472: GO 13686
13474: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
13475: LD_ADDR_VAR 0 1
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: LD_INT 2
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: LD_INT 4
13491: PUSH
13492: LD_INT 5
13494: PUSH
13495: LD_INT 6
13497: PUSH
13498: LD_INT 7
13500: PUSH
13501: LD_INT 8
13503: PUSH
13504: LD_INT 9
13506: PUSH
13507: LD_INT 10
13509: PUSH
13510: LD_INT 11
13512: PUSH
13513: LD_INT 12
13515: PUSH
13516: LD_INT 13
13518: PUSH
13519: LD_INT 14
13521: PUSH
13522: LD_INT 15
13524: PUSH
13525: LD_INT 16
13527: PUSH
13528: LD_INT 17
13530: PUSH
13531: LD_INT 18
13533: PUSH
13534: LD_INT 19
13536: PUSH
13537: LD_INT 20
13539: PUSH
13540: LD_INT 21
13542: PUSH
13543: LD_INT 22
13545: PUSH
13546: LD_INT 23
13548: PUSH
13549: LD_INT 24
13551: PUSH
13552: LD_INT 25
13554: PUSH
13555: LD_INT 26
13557: PUSH
13558: LD_INT 27
13560: PUSH
13561: LD_INT 28
13563: PUSH
13564: LD_INT 29
13566: PUSH
13567: LD_INT 30
13569: PUSH
13570: LD_INT 31
13572: PUSH
13573: LD_INT 32
13575: PUSH
13576: LD_INT 33
13578: PUSH
13579: LD_INT 34
13581: PUSH
13582: LD_INT 36
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 101
13624: PUSH
13625: LD_INT 102
13627: PUSH
13628: LD_INT 103
13630: PUSH
13631: LD_INT 104
13633: PUSH
13634: LD_INT 105
13636: PUSH
13637: LD_INT 106
13639: PUSH
13640: LD_INT 107
13642: PUSH
13643: LD_INT 108
13645: PUSH
13646: LD_INT 109
13648: PUSH
13649: LD_INT 110
13651: PUSH
13652: LD_INT 111
13654: PUSH
13655: LD_INT 112
13657: PUSH
13658: LD_INT 113
13660: PUSH
13661: LD_INT 114
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: ST_TO_ADDR
13684: GO 14631
13686: LD_INT 15
13688: DOUBLE
13689: EQUAL
13690: IFTRUE 13694
13692: GO 13906
13694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
13695: LD_ADDR_VAR 0 1
13699: PUSH
13700: LD_INT 1
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: LD_INT 3
13708: PUSH
13709: LD_INT 4
13711: PUSH
13712: LD_INT 5
13714: PUSH
13715: LD_INT 6
13717: PUSH
13718: LD_INT 7
13720: PUSH
13721: LD_INT 8
13723: PUSH
13724: LD_INT 9
13726: PUSH
13727: LD_INT 10
13729: PUSH
13730: LD_INT 11
13732: PUSH
13733: LD_INT 12
13735: PUSH
13736: LD_INT 13
13738: PUSH
13739: LD_INT 14
13741: PUSH
13742: LD_INT 15
13744: PUSH
13745: LD_INT 16
13747: PUSH
13748: LD_INT 17
13750: PUSH
13751: LD_INT 18
13753: PUSH
13754: LD_INT 19
13756: PUSH
13757: LD_INT 20
13759: PUSH
13760: LD_INT 21
13762: PUSH
13763: LD_INT 22
13765: PUSH
13766: LD_INT 23
13768: PUSH
13769: LD_INT 24
13771: PUSH
13772: LD_INT 25
13774: PUSH
13775: LD_INT 26
13777: PUSH
13778: LD_INT 27
13780: PUSH
13781: LD_INT 28
13783: PUSH
13784: LD_INT 29
13786: PUSH
13787: LD_INT 30
13789: PUSH
13790: LD_INT 31
13792: PUSH
13793: LD_INT 32
13795: PUSH
13796: LD_INT 33
13798: PUSH
13799: LD_INT 34
13801: PUSH
13802: LD_INT 36
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 101
13844: PUSH
13845: LD_INT 102
13847: PUSH
13848: LD_INT 103
13850: PUSH
13851: LD_INT 104
13853: PUSH
13854: LD_INT 105
13856: PUSH
13857: LD_INT 106
13859: PUSH
13860: LD_INT 107
13862: PUSH
13863: LD_INT 108
13865: PUSH
13866: LD_INT 109
13868: PUSH
13869: LD_INT 110
13871: PUSH
13872: LD_INT 111
13874: PUSH
13875: LD_INT 112
13877: PUSH
13878: LD_INT 113
13880: PUSH
13881: LD_INT 114
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: ST_TO_ADDR
13904: GO 14631
13906: LD_INT 16
13908: DOUBLE
13909: EQUAL
13910: IFTRUE 13914
13912: GO 14038
13914: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
13915: LD_ADDR_VAR 0 1
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: LD_INT 4
13925: PUSH
13926: LD_INT 5
13928: PUSH
13929: LD_INT 7
13931: PUSH
13932: LD_INT 11
13934: PUSH
13935: LD_INT 12
13937: PUSH
13938: LD_INT 15
13940: PUSH
13941: LD_INT 16
13943: PUSH
13944: LD_INT 20
13946: PUSH
13947: LD_INT 21
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_INT 23
13955: PUSH
13956: LD_INT 25
13958: PUSH
13959: LD_INT 26
13961: PUSH
13962: LD_INT 30
13964: PUSH
13965: LD_INT 31
13967: PUSH
13968: LD_INT 32
13970: PUSH
13971: LD_INT 33
13973: PUSH
13974: LD_INT 34
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 101
14000: PUSH
14001: LD_INT 102
14003: PUSH
14004: LD_INT 103
14006: PUSH
14007: LD_INT 106
14009: PUSH
14010: LD_INT 108
14012: PUSH
14013: LD_INT 112
14015: PUSH
14016: LD_INT 113
14018: PUSH
14019: LD_INT 114
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: ST_TO_ADDR
14036: GO 14631
14038: LD_INT 17
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14258
14046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
14047: LD_ADDR_VAR 0 1
14051: PUSH
14052: LD_INT 1
14054: PUSH
14055: LD_INT 2
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: LD_INT 4
14063: PUSH
14064: LD_INT 5
14066: PUSH
14067: LD_INT 6
14069: PUSH
14070: LD_INT 7
14072: PUSH
14073: LD_INT 8
14075: PUSH
14076: LD_INT 9
14078: PUSH
14079: LD_INT 10
14081: PUSH
14082: LD_INT 11
14084: PUSH
14085: LD_INT 12
14087: PUSH
14088: LD_INT 13
14090: PUSH
14091: LD_INT 14
14093: PUSH
14094: LD_INT 15
14096: PUSH
14097: LD_INT 16
14099: PUSH
14100: LD_INT 17
14102: PUSH
14103: LD_INT 18
14105: PUSH
14106: LD_INT 19
14108: PUSH
14109: LD_INT 20
14111: PUSH
14112: LD_INT 21
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_INT 23
14120: PUSH
14121: LD_INT 24
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 26
14129: PUSH
14130: LD_INT 27
14132: PUSH
14133: LD_INT 28
14135: PUSH
14136: LD_INT 29
14138: PUSH
14139: LD_INT 30
14141: PUSH
14142: LD_INT 31
14144: PUSH
14145: LD_INT 32
14147: PUSH
14148: LD_INT 33
14150: PUSH
14151: LD_INT 34
14153: PUSH
14154: LD_INT 36
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: LD_INT 101
14196: PUSH
14197: LD_INT 102
14199: PUSH
14200: LD_INT 103
14202: PUSH
14203: LD_INT 104
14205: PUSH
14206: LD_INT 105
14208: PUSH
14209: LD_INT 106
14211: PUSH
14212: LD_INT 107
14214: PUSH
14215: LD_INT 108
14217: PUSH
14218: LD_INT 109
14220: PUSH
14221: LD_INT 110
14223: PUSH
14224: LD_INT 111
14226: PUSH
14227: LD_INT 112
14229: PUSH
14230: LD_INT 113
14232: PUSH
14233: LD_INT 114
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 14631
14258: LD_INT 18
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14402
14266: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
14267: LD_ADDR_VAR 0 1
14271: PUSH
14272: LD_INT 2
14274: PUSH
14275: LD_INT 4
14277: PUSH
14278: LD_INT 5
14280: PUSH
14281: LD_INT 7
14283: PUSH
14284: LD_INT 11
14286: PUSH
14287: LD_INT 12
14289: PUSH
14290: LD_INT 15
14292: PUSH
14293: LD_INT 16
14295: PUSH
14296: LD_INT 20
14298: PUSH
14299: LD_INT 21
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_INT 23
14307: PUSH
14308: LD_INT 25
14310: PUSH
14311: LD_INT 26
14313: PUSH
14314: LD_INT 30
14316: PUSH
14317: LD_INT 31
14319: PUSH
14320: LD_INT 32
14322: PUSH
14323: LD_INT 33
14325: PUSH
14326: LD_INT 34
14328: PUSH
14329: LD_INT 35
14331: PUSH
14332: LD_INT 36
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 101
14360: PUSH
14361: LD_INT 102
14363: PUSH
14364: LD_INT 103
14366: PUSH
14367: LD_INT 106
14369: PUSH
14370: LD_INT 108
14372: PUSH
14373: LD_INT 112
14375: PUSH
14376: LD_INT 113
14378: PUSH
14379: LD_INT 114
14381: PUSH
14382: LD_INT 115
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: ST_TO_ADDR
14400: GO 14631
14402: LD_INT 19
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14630
14410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
14411: LD_ADDR_VAR 0 1
14415: PUSH
14416: LD_INT 1
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 3
14424: PUSH
14425: LD_INT 4
14427: PUSH
14428: LD_INT 5
14430: PUSH
14431: LD_INT 6
14433: PUSH
14434: LD_INT 7
14436: PUSH
14437: LD_INT 8
14439: PUSH
14440: LD_INT 9
14442: PUSH
14443: LD_INT 10
14445: PUSH
14446: LD_INT 11
14448: PUSH
14449: LD_INT 12
14451: PUSH
14452: LD_INT 13
14454: PUSH
14455: LD_INT 14
14457: PUSH
14458: LD_INT 15
14460: PUSH
14461: LD_INT 16
14463: PUSH
14464: LD_INT 17
14466: PUSH
14467: LD_INT 18
14469: PUSH
14470: LD_INT 19
14472: PUSH
14473: LD_INT 20
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_INT 23
14484: PUSH
14485: LD_INT 24
14487: PUSH
14488: LD_INT 25
14490: PUSH
14491: LD_INT 26
14493: PUSH
14494: LD_INT 27
14496: PUSH
14497: LD_INT 28
14499: PUSH
14500: LD_INT 29
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: LD_INT 31
14508: PUSH
14509: LD_INT 32
14511: PUSH
14512: LD_INT 33
14514: PUSH
14515: LD_INT 34
14517: PUSH
14518: LD_INT 35
14520: PUSH
14521: LD_INT 36
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 101
14564: PUSH
14565: LD_INT 102
14567: PUSH
14568: LD_INT 103
14570: PUSH
14571: LD_INT 104
14573: PUSH
14574: LD_INT 105
14576: PUSH
14577: LD_INT 106
14579: PUSH
14580: LD_INT 107
14582: PUSH
14583: LD_INT 108
14585: PUSH
14586: LD_INT 109
14588: PUSH
14589: LD_INT 110
14591: PUSH
14592: LD_INT 111
14594: PUSH
14595: LD_INT 112
14597: PUSH
14598: LD_INT 113
14600: PUSH
14601: LD_INT 114
14603: PUSH
14604: LD_INT 115
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: ST_TO_ADDR
14628: GO 14631
14630: POP
// end else
14631: GO 14850
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
14633: LD_ADDR_VAR 0 1
14637: PUSH
14638: LD_INT 1
14640: PUSH
14641: LD_INT 2
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: LD_INT 4
14649: PUSH
14650: LD_INT 5
14652: PUSH
14653: LD_INT 6
14655: PUSH
14656: LD_INT 7
14658: PUSH
14659: LD_INT 8
14661: PUSH
14662: LD_INT 9
14664: PUSH
14665: LD_INT 10
14667: PUSH
14668: LD_INT 11
14670: PUSH
14671: LD_INT 12
14673: PUSH
14674: LD_INT 13
14676: PUSH
14677: LD_INT 14
14679: PUSH
14680: LD_INT 15
14682: PUSH
14683: LD_INT 16
14685: PUSH
14686: LD_INT 17
14688: PUSH
14689: LD_INT 18
14691: PUSH
14692: LD_INT 19
14694: PUSH
14695: LD_INT 20
14697: PUSH
14698: LD_INT 21
14700: PUSH
14701: LD_INT 22
14703: PUSH
14704: LD_INT 23
14706: PUSH
14707: LD_INT 24
14709: PUSH
14710: LD_INT 25
14712: PUSH
14713: LD_INT 26
14715: PUSH
14716: LD_INT 27
14718: PUSH
14719: LD_INT 28
14721: PUSH
14722: LD_INT 29
14724: PUSH
14725: LD_INT 30
14727: PUSH
14728: LD_INT 31
14730: PUSH
14731: LD_INT 32
14733: PUSH
14734: LD_INT 33
14736: PUSH
14737: LD_INT 34
14739: PUSH
14740: LD_INT 35
14742: PUSH
14743: LD_INT 36
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 101
14786: PUSH
14787: LD_INT 102
14789: PUSH
14790: LD_INT 103
14792: PUSH
14793: LD_INT 104
14795: PUSH
14796: LD_INT 105
14798: PUSH
14799: LD_INT 106
14801: PUSH
14802: LD_INT 107
14804: PUSH
14805: LD_INT 108
14807: PUSH
14808: LD_INT 109
14810: PUSH
14811: LD_INT 110
14813: PUSH
14814: LD_INT 111
14816: PUSH
14817: LD_INT 112
14819: PUSH
14820: LD_INT 113
14822: PUSH
14823: LD_INT 114
14825: PUSH
14826: LD_INT 115
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: ST_TO_ADDR
// if result then
14850: LD_VAR 0 1
14854: IFFALSE 15143
// begin normal :=  ;
14856: LD_ADDR_VAR 0 3
14860: PUSH
14861: LD_STRING 
14863: ST_TO_ADDR
// hardcore :=  ;
14864: LD_ADDR_VAR 0 4
14868: PUSH
14869: LD_STRING 
14871: ST_TO_ADDR
// for i = 1 to normalCounter do
14872: LD_ADDR_VAR 0 5
14876: PUSH
14877: DOUBLE
14878: LD_INT 1
14880: DEC
14881: ST_TO_ADDR
14882: LD_EXP 41
14886: PUSH
14887: FOR_TO
14888: IFFALSE 14989
// begin tmp := 0 ;
14890: LD_ADDR_VAR 0 2
14894: PUSH
14895: LD_STRING 0
14897: ST_TO_ADDR
// if result [ 1 ] then
14898: LD_VAR 0 1
14902: PUSH
14903: LD_INT 1
14905: ARRAY
14906: IFFALSE 14971
// if result [ 1 ] [ 1 ] = i then
14908: LD_VAR 0 1
14912: PUSH
14913: LD_INT 1
14915: ARRAY
14916: PUSH
14917: LD_INT 1
14919: ARRAY
14920: PUSH
14921: LD_VAR 0 5
14925: EQUAL
14926: IFFALSE 14971
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_INT 1
14940: PPUSH
14941: LD_VAR 0 1
14945: PUSH
14946: LD_INT 1
14948: ARRAY
14949: PPUSH
14950: LD_INT 1
14952: PPUSH
14953: CALL_OW 3
14957: PPUSH
14958: CALL_OW 1
14962: ST_TO_ADDR
// tmp := 1 ;
14963: LD_ADDR_VAR 0 2
14967: PUSH
14968: LD_STRING 1
14970: ST_TO_ADDR
// end ; normal := normal & tmp ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_VAR 0 3
14980: PUSH
14981: LD_VAR 0 2
14985: STR
14986: ST_TO_ADDR
// end ;
14987: GO 14887
14989: POP
14990: POP
// for i = 1 to hardcoreCounter do
14991: LD_ADDR_VAR 0 5
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_EXP 42
15005: PUSH
15006: FOR_TO
15007: IFFALSE 15112
// begin tmp := 0 ;
15009: LD_ADDR_VAR 0 2
15013: PUSH
15014: LD_STRING 0
15016: ST_TO_ADDR
// if result [ 2 ] then
15017: LD_VAR 0 1
15021: PUSH
15022: LD_INT 2
15024: ARRAY
15025: IFFALSE 15094
// if result [ 2 ] [ 1 ] = 100 + i then
15027: LD_VAR 0 1
15031: PUSH
15032: LD_INT 2
15034: ARRAY
15035: PUSH
15036: LD_INT 1
15038: ARRAY
15039: PUSH
15040: LD_INT 100
15042: PUSH
15043: LD_VAR 0 5
15047: PLUS
15048: EQUAL
15049: IFFALSE 15094
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15051: LD_ADDR_VAR 0 1
15055: PUSH
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 2
15063: PPUSH
15064: LD_VAR 0 1
15068: PUSH
15069: LD_INT 2
15071: ARRAY
15072: PPUSH
15073: LD_INT 1
15075: PPUSH
15076: CALL_OW 3
15080: PPUSH
15081: CALL_OW 1
15085: ST_TO_ADDR
// tmp := 1 ;
15086: LD_ADDR_VAR 0 2
15090: PUSH
15091: LD_STRING 1
15093: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15094: LD_ADDR_VAR 0 4
15098: PUSH
15099: LD_VAR 0 4
15103: PUSH
15104: LD_VAR 0 2
15108: STR
15109: ST_TO_ADDR
// end ;
15110: GO 15006
15112: POP
15113: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
15114: LD_STRING getStreamItemsFromMission("
15116: PUSH
15117: LD_VAR 0 3
15121: STR
15122: PUSH
15123: LD_STRING ","
15125: STR
15126: PUSH
15127: LD_VAR 0 4
15131: STR
15132: PUSH
15133: LD_STRING ")
15135: STR
15136: PPUSH
15137: CALL_OW 559
// end else
15141: GO 15150
// ToLua ( getStreamItemsFromMission("","") ) ;
15143: LD_STRING getStreamItemsFromMission("","")
15145: PPUSH
15146: CALL_OW 559
// end ;
15150: LD_VAR 0 1
15154: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15155: LD_VAR 0 2
15159: PUSH
15160: LD_INT 100
15162: EQUAL
15163: IFFALSE 16112
// begin if not StreamModeActive then
15165: LD_EXP 40
15169: NOT
15170: IFFALSE 15180
// StreamModeActive := true ;
15172: LD_ADDR_EXP 40
15176: PUSH
15177: LD_INT 1
15179: ST_TO_ADDR
// if p3 = 0 then
15180: LD_VAR 0 3
15184: PUSH
15185: LD_INT 0
15187: EQUAL
15188: IFFALSE 15194
// InitStreamMode ;
15190: CALL 11233 0 0
// if p3 = 1 then
15194: LD_VAR 0 3
15198: PUSH
15199: LD_INT 1
15201: EQUAL
15202: IFFALSE 15212
// sRocket := true ;
15204: LD_ADDR_EXP 45
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// if p3 = 2 then
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 2
15219: EQUAL
15220: IFFALSE 15230
// sSpeed := true ;
15222: LD_ADDR_EXP 44
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// if p3 = 3 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 3
15237: EQUAL
15238: IFFALSE 15248
// sEngine := true ;
15240: LD_ADDR_EXP 46
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 4 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 4
15255: EQUAL
15256: IFFALSE 15266
// sSpec := true ;
15258: LD_ADDR_EXP 43
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if p3 = 5 then
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 5
15273: EQUAL
15274: IFFALSE 15284
// sLevel := true ;
15276: LD_ADDR_EXP 47
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if p3 = 6 then
15284: LD_VAR 0 3
15288: PUSH
15289: LD_INT 6
15291: EQUAL
15292: IFFALSE 15302
// sArmoury := true ;
15294: LD_ADDR_EXP 48
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// if p3 = 7 then
15302: LD_VAR 0 3
15306: PUSH
15307: LD_INT 7
15309: EQUAL
15310: IFFALSE 15320
// sRadar := true ;
15312: LD_ADDR_EXP 49
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if p3 = 8 then
15320: LD_VAR 0 3
15324: PUSH
15325: LD_INT 8
15327: EQUAL
15328: IFFALSE 15338
// sBunker := true ;
15330: LD_ADDR_EXP 50
15334: PUSH
15335: LD_INT 1
15337: ST_TO_ADDR
// if p3 = 9 then
15338: LD_VAR 0 3
15342: PUSH
15343: LD_INT 9
15345: EQUAL
15346: IFFALSE 15356
// sHack := true ;
15348: LD_ADDR_EXP 51
15352: PUSH
15353: LD_INT 1
15355: ST_TO_ADDR
// if p3 = 10 then
15356: LD_VAR 0 3
15360: PUSH
15361: LD_INT 10
15363: EQUAL
15364: IFFALSE 15374
// sFire := true ;
15366: LD_ADDR_EXP 52
15370: PUSH
15371: LD_INT 1
15373: ST_TO_ADDR
// if p3 = 11 then
15374: LD_VAR 0 3
15378: PUSH
15379: LD_INT 11
15381: EQUAL
15382: IFFALSE 15392
// sRefresh := true ;
15384: LD_ADDR_EXP 53
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// if p3 = 12 then
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 12
15399: EQUAL
15400: IFFALSE 15410
// sExp := true ;
15402: LD_ADDR_EXP 54
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// if p3 = 13 then
15410: LD_VAR 0 3
15414: PUSH
15415: LD_INT 13
15417: EQUAL
15418: IFFALSE 15428
// sDepot := true ;
15420: LD_ADDR_EXP 55
15424: PUSH
15425: LD_INT 1
15427: ST_TO_ADDR
// if p3 = 14 then
15428: LD_VAR 0 3
15432: PUSH
15433: LD_INT 14
15435: EQUAL
15436: IFFALSE 15446
// sFlag := true ;
15438: LD_ADDR_EXP 56
15442: PUSH
15443: LD_INT 1
15445: ST_TO_ADDR
// if p3 = 15 then
15446: LD_VAR 0 3
15450: PUSH
15451: LD_INT 15
15453: EQUAL
15454: IFFALSE 15464
// sKamikadze := true ;
15456: LD_ADDR_EXP 64
15460: PUSH
15461: LD_INT 1
15463: ST_TO_ADDR
// if p3 = 16 then
15464: LD_VAR 0 3
15468: PUSH
15469: LD_INT 16
15471: EQUAL
15472: IFFALSE 15482
// sTroll := true ;
15474: LD_ADDR_EXP 65
15478: PUSH
15479: LD_INT 1
15481: ST_TO_ADDR
// if p3 = 17 then
15482: LD_VAR 0 3
15486: PUSH
15487: LD_INT 17
15489: EQUAL
15490: IFFALSE 15500
// sSlow := true ;
15492: LD_ADDR_EXP 66
15496: PUSH
15497: LD_INT 1
15499: ST_TO_ADDR
// if p3 = 18 then
15500: LD_VAR 0 3
15504: PUSH
15505: LD_INT 18
15507: EQUAL
15508: IFFALSE 15518
// sLack := true ;
15510: LD_ADDR_EXP 67
15514: PUSH
15515: LD_INT 1
15517: ST_TO_ADDR
// if p3 = 19 then
15518: LD_VAR 0 3
15522: PUSH
15523: LD_INT 19
15525: EQUAL
15526: IFFALSE 15536
// sTank := true ;
15528: LD_ADDR_EXP 69
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// if p3 = 20 then
15536: LD_VAR 0 3
15540: PUSH
15541: LD_INT 20
15543: EQUAL
15544: IFFALSE 15554
// sRemote := true ;
15546: LD_ADDR_EXP 70
15550: PUSH
15551: LD_INT 1
15553: ST_TO_ADDR
// if p3 = 21 then
15554: LD_VAR 0 3
15558: PUSH
15559: LD_INT 21
15561: EQUAL
15562: IFFALSE 15572
// sPowell := true ;
15564: LD_ADDR_EXP 71
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// if p3 = 22 then
15572: LD_VAR 0 3
15576: PUSH
15577: LD_INT 22
15579: EQUAL
15580: IFFALSE 15590
// sTeleport := true ;
15582: LD_ADDR_EXP 74
15586: PUSH
15587: LD_INT 1
15589: ST_TO_ADDR
// if p3 = 23 then
15590: LD_VAR 0 3
15594: PUSH
15595: LD_INT 23
15597: EQUAL
15598: IFFALSE 15608
// sOilTower := true ;
15600: LD_ADDR_EXP 76
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// if p3 = 24 then
15608: LD_VAR 0 3
15612: PUSH
15613: LD_INT 24
15615: EQUAL
15616: IFFALSE 15626
// sShovel := true ;
15618: LD_ADDR_EXP 77
15622: PUSH
15623: LD_INT 1
15625: ST_TO_ADDR
// if p3 = 25 then
15626: LD_VAR 0 3
15630: PUSH
15631: LD_INT 25
15633: EQUAL
15634: IFFALSE 15644
// sSheik := true ;
15636: LD_ADDR_EXP 78
15640: PUSH
15641: LD_INT 1
15643: ST_TO_ADDR
// if p3 = 26 then
15644: LD_VAR 0 3
15648: PUSH
15649: LD_INT 26
15651: EQUAL
15652: IFFALSE 15662
// sEarthquake := true ;
15654: LD_ADDR_EXP 80
15658: PUSH
15659: LD_INT 1
15661: ST_TO_ADDR
// if p3 = 27 then
15662: LD_VAR 0 3
15666: PUSH
15667: LD_INT 27
15669: EQUAL
15670: IFFALSE 15680
// sAI := true ;
15672: LD_ADDR_EXP 81
15676: PUSH
15677: LD_INT 1
15679: ST_TO_ADDR
// if p3 = 28 then
15680: LD_VAR 0 3
15684: PUSH
15685: LD_INT 28
15687: EQUAL
15688: IFFALSE 15698
// sCargo := true ;
15690: LD_ADDR_EXP 84
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// if p3 = 29 then
15698: LD_VAR 0 3
15702: PUSH
15703: LD_INT 29
15705: EQUAL
15706: IFFALSE 15716
// sDLaser := true ;
15708: LD_ADDR_EXP 85
15712: PUSH
15713: LD_INT 1
15715: ST_TO_ADDR
// if p3 = 30 then
15716: LD_VAR 0 3
15720: PUSH
15721: LD_INT 30
15723: EQUAL
15724: IFFALSE 15734
// sExchange := true ;
15726: LD_ADDR_EXP 86
15730: PUSH
15731: LD_INT 1
15733: ST_TO_ADDR
// if p3 = 31 then
15734: LD_VAR 0 3
15738: PUSH
15739: LD_INT 31
15741: EQUAL
15742: IFFALSE 15752
// sFac := true ;
15744: LD_ADDR_EXP 87
15748: PUSH
15749: LD_INT 1
15751: ST_TO_ADDR
// if p3 = 32 then
15752: LD_VAR 0 3
15756: PUSH
15757: LD_INT 32
15759: EQUAL
15760: IFFALSE 15770
// sPower := true ;
15762: LD_ADDR_EXP 88
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// if p3 = 33 then
15770: LD_VAR 0 3
15774: PUSH
15775: LD_INT 33
15777: EQUAL
15778: IFFALSE 15788
// sRandom := true ;
15780: LD_ADDR_EXP 89
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// if p3 = 34 then
15788: LD_VAR 0 3
15792: PUSH
15793: LD_INT 34
15795: EQUAL
15796: IFFALSE 15806
// sShield := true ;
15798: LD_ADDR_EXP 90
15802: PUSH
15803: LD_INT 1
15805: ST_TO_ADDR
// if p3 = 35 then
15806: LD_VAR 0 3
15810: PUSH
15811: LD_INT 35
15813: EQUAL
15814: IFFALSE 15824
// sTime := true ;
15816: LD_ADDR_EXP 91
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// if p3 = 36 then
15824: LD_VAR 0 3
15828: PUSH
15829: LD_INT 36
15831: EQUAL
15832: IFFALSE 15842
// sTools := true ;
15834: LD_ADDR_EXP 92
15838: PUSH
15839: LD_INT 1
15841: ST_TO_ADDR
// if p3 = 101 then
15842: LD_VAR 0 3
15846: PUSH
15847: LD_INT 101
15849: EQUAL
15850: IFFALSE 15860
// sSold := true ;
15852: LD_ADDR_EXP 57
15856: PUSH
15857: LD_INT 1
15859: ST_TO_ADDR
// if p3 = 102 then
15860: LD_VAR 0 3
15864: PUSH
15865: LD_INT 102
15867: EQUAL
15868: IFFALSE 15878
// sDiff := true ;
15870: LD_ADDR_EXP 58
15874: PUSH
15875: LD_INT 1
15877: ST_TO_ADDR
// if p3 = 103 then
15878: LD_VAR 0 3
15882: PUSH
15883: LD_INT 103
15885: EQUAL
15886: IFFALSE 15896
// sFog := true ;
15888: LD_ADDR_EXP 61
15892: PUSH
15893: LD_INT 1
15895: ST_TO_ADDR
// if p3 = 104 then
15896: LD_VAR 0 3
15900: PUSH
15901: LD_INT 104
15903: EQUAL
15904: IFFALSE 15914
// sReset := true ;
15906: LD_ADDR_EXP 62
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// if p3 = 105 then
15914: LD_VAR 0 3
15918: PUSH
15919: LD_INT 105
15921: EQUAL
15922: IFFALSE 15932
// sSun := true ;
15924: LD_ADDR_EXP 63
15928: PUSH
15929: LD_INT 1
15931: ST_TO_ADDR
// if p3 = 106 then
15932: LD_VAR 0 3
15936: PUSH
15937: LD_INT 106
15939: EQUAL
15940: IFFALSE 15950
// sTiger := true ;
15942: LD_ADDR_EXP 59
15946: PUSH
15947: LD_INT 1
15949: ST_TO_ADDR
// if p3 = 107 then
15950: LD_VAR 0 3
15954: PUSH
15955: LD_INT 107
15957: EQUAL
15958: IFFALSE 15968
// sBomb := true ;
15960: LD_ADDR_EXP 60
15964: PUSH
15965: LD_INT 1
15967: ST_TO_ADDR
// if p3 = 108 then
15968: LD_VAR 0 3
15972: PUSH
15973: LD_INT 108
15975: EQUAL
15976: IFFALSE 15986
// sWound := true ;
15978: LD_ADDR_EXP 68
15982: PUSH
15983: LD_INT 1
15985: ST_TO_ADDR
// if p3 = 109 then
15986: LD_VAR 0 3
15990: PUSH
15991: LD_INT 109
15993: EQUAL
15994: IFFALSE 16004
// sBetray := true ;
15996: LD_ADDR_EXP 72
16000: PUSH
16001: LD_INT 1
16003: ST_TO_ADDR
// if p3 = 110 then
16004: LD_VAR 0 3
16008: PUSH
16009: LD_INT 110
16011: EQUAL
16012: IFFALSE 16022
// sContamin := true ;
16014: LD_ADDR_EXP 73
16018: PUSH
16019: LD_INT 1
16021: ST_TO_ADDR
// if p3 = 111 then
16022: LD_VAR 0 3
16026: PUSH
16027: LD_INT 111
16029: EQUAL
16030: IFFALSE 16040
// sOil := true ;
16032: LD_ADDR_EXP 75
16036: PUSH
16037: LD_INT 1
16039: ST_TO_ADDR
// if p3 = 112 then
16040: LD_VAR 0 3
16044: PUSH
16045: LD_INT 112
16047: EQUAL
16048: IFFALSE 16058
// sStu := true ;
16050: LD_ADDR_EXP 79
16054: PUSH
16055: LD_INT 1
16057: ST_TO_ADDR
// if p3 = 113 then
16058: LD_VAR 0 3
16062: PUSH
16063: LD_INT 113
16065: EQUAL
16066: IFFALSE 16076
// sBazooka := true ;
16068: LD_ADDR_EXP 82
16072: PUSH
16073: LD_INT 1
16075: ST_TO_ADDR
// if p3 = 114 then
16076: LD_VAR 0 3
16080: PUSH
16081: LD_INT 114
16083: EQUAL
16084: IFFALSE 16094
// sMortar := true ;
16086: LD_ADDR_EXP 83
16090: PUSH
16091: LD_INT 1
16093: ST_TO_ADDR
// if p3 = 115 then
16094: LD_VAR 0 3
16098: PUSH
16099: LD_INT 115
16101: EQUAL
16102: IFFALSE 16112
// sRanger := true ;
16104: LD_ADDR_EXP 93
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// end ; end ;
16112: PPOPN 6
16114: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16115: LD_EXP 40
16119: PUSH
16120: LD_EXP 45
16124: AND
16125: IFFALSE 16249
16127: GO 16129
16129: DISABLE
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
// begin enable ;
16134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16135: LD_ADDR_VAR 0 2
16139: PUSH
16140: LD_INT 22
16142: PUSH
16143: LD_OWVAR 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 7
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 34
16167: PUSH
16168: LD_INT 45
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 34
16177: PUSH
16178: LD_INT 28
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 34
16187: PUSH
16188: LD_INT 47
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 69
16210: ST_TO_ADDR
// if not tmp then
16211: LD_VAR 0 2
16215: NOT
16216: IFFALSE 16220
// exit ;
16218: GO 16249
// for i in tmp do
16220: LD_ADDR_VAR 0 1
16224: PUSH
16225: LD_VAR 0 2
16229: PUSH
16230: FOR_IN
16231: IFFALSE 16247
// begin SetLives ( i , 0 ) ;
16233: LD_VAR 0 1
16237: PPUSH
16238: LD_INT 0
16240: PPUSH
16241: CALL_OW 234
// end ;
16245: GO 16230
16247: POP
16248: POP
// end ;
16249: PPOPN 2
16251: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16252: LD_EXP 40
16256: PUSH
16257: LD_EXP 46
16261: AND
16262: IFFALSE 16346
16264: GO 16266
16266: DISABLE
16267: LD_INT 0
16269: PPUSH
16270: PPUSH
// begin enable ;
16271: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16272: LD_ADDR_VAR 0 2
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_OWVAR 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 32
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PPUSH
16303: CALL_OW 69
16307: ST_TO_ADDR
// if not tmp then
16308: LD_VAR 0 2
16312: NOT
16313: IFFALSE 16317
// exit ;
16315: GO 16346
// for i in tmp do
16317: LD_ADDR_VAR 0 1
16321: PUSH
16322: LD_VAR 0 2
16326: PUSH
16327: FOR_IN
16328: IFFALSE 16344
// begin SetLives ( i , 0 ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: LD_INT 0
16337: PPUSH
16338: CALL_OW 234
// end ;
16342: GO 16327
16344: POP
16345: POP
// end ;
16346: PPOPN 2
16348: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16349: LD_EXP 40
16353: PUSH
16354: LD_EXP 43
16358: AND
16359: IFFALSE 16452
16361: GO 16363
16363: DISABLE
16364: LD_INT 0
16366: PPUSH
// begin enable ;
16367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16368: LD_ADDR_VAR 0 1
16372: PUSH
16373: LD_INT 22
16375: PUSH
16376: LD_OWVAR 2
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 2
16387: PUSH
16388: LD_INT 25
16390: PUSH
16391: LD_INT 5
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 25
16400: PUSH
16401: LD_INT 9
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 25
16410: PUSH
16411: LD_INT 8
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PPUSH
16428: CALL_OW 69
16432: PUSH
16433: FOR_IN
16434: IFFALSE 16450
// begin SetClass ( i , 1 ) ;
16436: LD_VAR 0 1
16440: PPUSH
16441: LD_INT 1
16443: PPUSH
16444: CALL_OW 336
// end ;
16448: GO 16433
16450: POP
16451: POP
// end ;
16452: PPOPN 1
16454: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16455: LD_EXP 40
16459: PUSH
16460: LD_EXP 44
16464: AND
16465: PUSH
16466: LD_OWVAR 65
16470: PUSH
16471: LD_INT 7
16473: LESS
16474: AND
16475: IFFALSE 16489
16477: GO 16479
16479: DISABLE
// begin enable ;
16480: ENABLE
// game_speed := 7 ;
16481: LD_ADDR_OWVAR 65
16485: PUSH
16486: LD_INT 7
16488: ST_TO_ADDR
// end ;
16489: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16490: LD_EXP 40
16494: PUSH
16495: LD_EXP 47
16499: AND
16500: IFFALSE 16702
16502: GO 16504
16504: DISABLE
16505: LD_INT 0
16507: PPUSH
16508: PPUSH
16509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16510: LD_ADDR_VAR 0 3
16514: PUSH
16515: LD_INT 81
16517: PUSH
16518: LD_OWVAR 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 69
16545: ST_TO_ADDR
// if not tmp then
16546: LD_VAR 0 3
16550: NOT
16551: IFFALSE 16555
// exit ;
16553: GO 16702
// if tmp > 5 then
16555: LD_VAR 0 3
16559: PUSH
16560: LD_INT 5
16562: GREATER
16563: IFFALSE 16575
// k := 5 else
16565: LD_ADDR_VAR 0 2
16569: PUSH
16570: LD_INT 5
16572: ST_TO_ADDR
16573: GO 16585
// k := tmp ;
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_VAR 0 3
16584: ST_TO_ADDR
// for i := 1 to k do
16585: LD_ADDR_VAR 0 1
16589: PUSH
16590: DOUBLE
16591: LD_INT 1
16593: DEC
16594: ST_TO_ADDR
16595: LD_VAR 0 2
16599: PUSH
16600: FOR_TO
16601: IFFALSE 16700
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16603: LD_VAR 0 3
16607: PUSH
16608: LD_VAR 0 1
16612: ARRAY
16613: PPUSH
16614: LD_VAR 0 1
16618: PUSH
16619: LD_INT 4
16621: MOD
16622: PUSH
16623: LD_INT 1
16625: PLUS
16626: PPUSH
16627: CALL_OW 259
16631: PUSH
16632: LD_INT 10
16634: LESS
16635: IFFALSE 16698
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16637: LD_VAR 0 3
16641: PUSH
16642: LD_VAR 0 1
16646: ARRAY
16647: PPUSH
16648: LD_VAR 0 1
16652: PUSH
16653: LD_INT 4
16655: MOD
16656: PUSH
16657: LD_INT 1
16659: PLUS
16660: PPUSH
16661: LD_VAR 0 3
16665: PUSH
16666: LD_VAR 0 1
16670: ARRAY
16671: PPUSH
16672: LD_VAR 0 1
16676: PUSH
16677: LD_INT 4
16679: MOD
16680: PUSH
16681: LD_INT 1
16683: PLUS
16684: PPUSH
16685: CALL_OW 259
16689: PUSH
16690: LD_INT 1
16692: PLUS
16693: PPUSH
16694: CALL_OW 237
16698: GO 16600
16700: POP
16701: POP
// end ;
16702: PPOPN 3
16704: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16705: LD_EXP 40
16709: PUSH
16710: LD_EXP 48
16714: AND
16715: IFFALSE 16735
16717: GO 16719
16719: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16720: LD_INT 4
16722: PPUSH
16723: LD_OWVAR 2
16727: PPUSH
16728: LD_INT 0
16730: PPUSH
16731: CALL_OW 324
16735: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16736: LD_EXP 40
16740: PUSH
16741: LD_EXP 77
16745: AND
16746: IFFALSE 16766
16748: GO 16750
16750: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16751: LD_INT 19
16753: PPUSH
16754: LD_OWVAR 2
16758: PPUSH
16759: LD_INT 0
16761: PPUSH
16762: CALL_OW 324
16766: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16767: LD_EXP 40
16771: PUSH
16772: LD_EXP 49
16776: AND
16777: IFFALSE 16879
16779: GO 16781
16781: DISABLE
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
// begin enable ;
16786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_INT 22
16794: PUSH
16795: LD_OWVAR 2
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 34
16809: PUSH
16810: LD_INT 11
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 34
16819: PUSH
16820: LD_INT 30
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PPUSH
16836: CALL_OW 69
16840: ST_TO_ADDR
// if not tmp then
16841: LD_VAR 0 2
16845: NOT
16846: IFFALSE 16850
// exit ;
16848: GO 16879
// for i in tmp do
16850: LD_ADDR_VAR 0 1
16854: PUSH
16855: LD_VAR 0 2
16859: PUSH
16860: FOR_IN
16861: IFFALSE 16877
// begin SetLives ( i , 0 ) ;
16863: LD_VAR 0 1
16867: PPUSH
16868: LD_INT 0
16870: PPUSH
16871: CALL_OW 234
// end ;
16875: GO 16860
16877: POP
16878: POP
// end ;
16879: PPOPN 2
16881: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16882: LD_EXP 40
16886: PUSH
16887: LD_EXP 50
16891: AND
16892: IFFALSE 16912
16894: GO 16896
16896: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16897: LD_INT 32
16899: PPUSH
16900: LD_OWVAR 2
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 324
16912: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16913: LD_EXP 40
16917: PUSH
16918: LD_EXP 51
16922: AND
16923: IFFALSE 17104
16925: GO 16927
16927: DISABLE
16928: LD_INT 0
16930: PPUSH
16931: PPUSH
16932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16933: LD_ADDR_VAR 0 2
16937: PUSH
16938: LD_INT 22
16940: PUSH
16941: LD_OWVAR 2
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 33
16952: PUSH
16953: LD_INT 3
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PPUSH
16964: CALL_OW 69
16968: ST_TO_ADDR
// if not tmp then
16969: LD_VAR 0 2
16973: NOT
16974: IFFALSE 16978
// exit ;
16976: GO 17104
// side := 0 ;
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_INT 0
16985: ST_TO_ADDR
// for i := 1 to 8 do
16986: LD_ADDR_VAR 0 1
16990: PUSH
16991: DOUBLE
16992: LD_INT 1
16994: DEC
16995: ST_TO_ADDR
16996: LD_INT 8
16998: PUSH
16999: FOR_TO
17000: IFFALSE 17048
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17002: LD_OWVAR 2
17006: PUSH
17007: LD_VAR 0 1
17011: NONEQUAL
17012: PUSH
17013: LD_OWVAR 2
17017: PPUSH
17018: LD_VAR 0 1
17022: PPUSH
17023: CALL_OW 81
17027: PUSH
17028: LD_INT 2
17030: EQUAL
17031: AND
17032: IFFALSE 17046
// begin side := i ;
17034: LD_ADDR_VAR 0 3
17038: PUSH
17039: LD_VAR 0 1
17043: ST_TO_ADDR
// break ;
17044: GO 17048
// end ;
17046: GO 16999
17048: POP
17049: POP
// if not side then
17050: LD_VAR 0 3
17054: NOT
17055: IFFALSE 17059
// exit ;
17057: GO 17104
// for i := 1 to tmp do
17059: LD_ADDR_VAR 0 1
17063: PUSH
17064: DOUBLE
17065: LD_INT 1
17067: DEC
17068: ST_TO_ADDR
17069: LD_VAR 0 2
17073: PUSH
17074: FOR_TO
17075: IFFALSE 17102
// if Prob ( 60 ) then
17077: LD_INT 60
17079: PPUSH
17080: CALL_OW 13
17084: IFFALSE 17100
// SetSide ( i , side ) ;
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_VAR 0 3
17095: PPUSH
17096: CALL_OW 235
17100: GO 17074
17102: POP
17103: POP
// end ;
17104: PPOPN 3
17106: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17107: LD_EXP 40
17111: PUSH
17112: LD_EXP 53
17116: AND
17117: IFFALSE 17236
17119: GO 17121
17121: DISABLE
17122: LD_INT 0
17124: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17125: LD_ADDR_VAR 0 1
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_OWVAR 2
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 21
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 3
17154: PUSH
17155: LD_INT 23
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: PPUSH
17174: CALL_OW 69
17178: PUSH
17179: FOR_IN
17180: IFFALSE 17234
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17182: LD_VAR 0 1
17186: PPUSH
17187: CALL_OW 257
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: LD_INT 3
17200: PUSH
17201: LD_INT 4
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: IN
17210: IFFALSE 17232
// SetClass ( un , rand ( 1 , 4 ) ) ;
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 4
17222: PPUSH
17223: CALL_OW 12
17227: PPUSH
17228: CALL_OW 336
17232: GO 17179
17234: POP
17235: POP
// end ;
17236: PPOPN 1
17238: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17239: LD_EXP 40
17243: PUSH
17244: LD_EXP 52
17248: AND
17249: IFFALSE 17328
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17257: LD_ADDR_VAR 0 1
17261: PUSH
17262: LD_INT 22
17264: PUSH
17265: LD_OWVAR 2
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 69
17292: ST_TO_ADDR
// if not tmp then
17293: LD_VAR 0 1
17297: NOT
17298: IFFALSE 17302
// exit ;
17300: GO 17328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17302: LD_VAR 0 1
17306: PUSH
17307: LD_INT 1
17309: PPUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 12
17319: ARRAY
17320: PPUSH
17321: LD_INT 100
17323: PPUSH
17324: CALL_OW 234
// end ;
17328: PPOPN 1
17330: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17331: LD_EXP 40
17335: PUSH
17336: LD_EXP 54
17340: AND
17341: IFFALSE 17439
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17349: LD_ADDR_VAR 0 1
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_OWVAR 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 21
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL_OW 69
17384: ST_TO_ADDR
// if not tmp then
17385: LD_VAR 0 1
17389: NOT
17390: IFFALSE 17394
// exit ;
17392: GO 17439
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17394: LD_VAR 0 1
17398: PUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_INT 4
17418: PPUSH
17419: CALL_OW 12
17423: PPUSH
17424: LD_INT 3000
17426: PPUSH
17427: LD_INT 9000
17429: PPUSH
17430: CALL_OW 12
17434: PPUSH
17435: CALL_OW 492
// end ;
17439: PPOPN 1
17441: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17442: LD_EXP 40
17446: PUSH
17447: LD_EXP 55
17451: AND
17452: IFFALSE 17472
17454: GO 17456
17456: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17457: LD_INT 1
17459: PPUSH
17460: LD_OWVAR 2
17464: PPUSH
17465: LD_INT 0
17467: PPUSH
17468: CALL_OW 324
17472: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17473: LD_EXP 40
17477: PUSH
17478: LD_EXP 56
17482: AND
17483: IFFALSE 17566
17485: GO 17487
17487: DISABLE
17488: LD_INT 0
17490: PPUSH
17491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17492: LD_ADDR_VAR 0 2
17496: PUSH
17497: LD_INT 22
17499: PUSH
17500: LD_OWVAR 2
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 21
17511: PUSH
17512: LD_INT 3
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 69
17527: ST_TO_ADDR
// if not tmp then
17528: LD_VAR 0 2
17532: NOT
17533: IFFALSE 17537
// exit ;
17535: GO 17566
// for i in tmp do
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: FOR_IN
17548: IFFALSE 17564
// SetBLevel ( i , 10 ) ;
17550: LD_VAR 0 1
17554: PPUSH
17555: LD_INT 10
17557: PPUSH
17558: CALL_OW 241
17562: GO 17547
17564: POP
17565: POP
// end ;
17566: PPOPN 2
17568: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17569: LD_EXP 40
17573: PUSH
17574: LD_EXP 57
17578: AND
17579: IFFALSE 17690
17581: GO 17583
17583: DISABLE
17584: LD_INT 0
17586: PPUSH
17587: PPUSH
17588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17589: LD_ADDR_VAR 0 3
17593: PUSH
17594: LD_INT 22
17596: PUSH
17597: LD_OWVAR 2
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 25
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PPUSH
17620: CALL_OW 69
17624: ST_TO_ADDR
// if not tmp then
17625: LD_VAR 0 3
17629: NOT
17630: IFFALSE 17634
// exit ;
17632: GO 17690
// un := tmp [ rand ( 1 , tmp ) ] ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_VAR 0 3
17643: PUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_VAR 0 3
17651: PPUSH
17652: CALL_OW 12
17656: ARRAY
17657: ST_TO_ADDR
// if Crawls ( un ) then
17658: LD_VAR 0 2
17662: PPUSH
17663: CALL_OW 318
17667: IFFALSE 17678
// ComWalk ( un ) ;
17669: LD_VAR 0 2
17673: PPUSH
17674: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: LD_INT 5
17685: PPUSH
17686: CALL_OW 336
// end ;
17690: PPOPN 3
17692: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17693: LD_EXP 40
17697: PUSH
17698: LD_EXP 58
17702: AND
17703: PUSH
17704: LD_OWVAR 67
17708: PUSH
17709: LD_INT 3
17711: LESS
17712: AND
17713: IFFALSE 17732
17715: GO 17717
17717: DISABLE
// Difficulty := Difficulty + 1 ;
17718: LD_ADDR_OWVAR 67
17722: PUSH
17723: LD_OWVAR 67
17727: PUSH
17728: LD_INT 1
17730: PLUS
17731: ST_TO_ADDR
17732: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17733: LD_EXP 40
17737: PUSH
17738: LD_EXP 59
17742: AND
17743: IFFALSE 17846
17745: GO 17747
17747: DISABLE
17748: LD_INT 0
17750: PPUSH
// begin for i := 1 to 5 do
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: DOUBLE
17757: LD_INT 1
17759: DEC
17760: ST_TO_ADDR
17761: LD_INT 5
17763: PUSH
17764: FOR_TO
17765: IFFALSE 17844
// begin uc_nation := nation_nature ;
17767: LD_ADDR_OWVAR 21
17771: PUSH
17772: LD_INT 0
17774: ST_TO_ADDR
// uc_side := 0 ;
17775: LD_ADDR_OWVAR 20
17779: PUSH
17780: LD_INT 0
17782: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17783: LD_ADDR_OWVAR 29
17787: PUSH
17788: LD_INT 12
17790: PUSH
17791: LD_INT 12
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: ST_TO_ADDR
// hc_agressivity := 20 ;
17798: LD_ADDR_OWVAR 35
17802: PUSH
17803: LD_INT 20
17805: ST_TO_ADDR
// hc_class := class_tiger ;
17806: LD_ADDR_OWVAR 28
17810: PUSH
17811: LD_INT 14
17813: ST_TO_ADDR
// hc_gallery :=  ;
17814: LD_ADDR_OWVAR 33
17818: PUSH
17819: LD_STRING 
17821: ST_TO_ADDR
// hc_name :=  ;
17822: LD_ADDR_OWVAR 26
17826: PUSH
17827: LD_STRING 
17829: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17830: CALL_OW 44
17834: PPUSH
17835: LD_INT 0
17837: PPUSH
17838: CALL_OW 51
// end ;
17842: GO 17764
17844: POP
17845: POP
// end ;
17846: PPOPN 1
17848: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17849: LD_EXP 40
17853: PUSH
17854: LD_EXP 60
17858: AND
17859: IFFALSE 17868
17861: GO 17863
17863: DISABLE
// StreamSibBomb ;
17864: CALL 17869 0 0
17868: END
// export function StreamSibBomb ; var i , x , y ; begin
17869: LD_INT 0
17871: PPUSH
17872: PPUSH
17873: PPUSH
17874: PPUSH
// result := false ;
17875: LD_ADDR_VAR 0 1
17879: PUSH
17880: LD_INT 0
17882: ST_TO_ADDR
// for i := 1 to 16 do
17883: LD_ADDR_VAR 0 2
17887: PUSH
17888: DOUBLE
17889: LD_INT 1
17891: DEC
17892: ST_TO_ADDR
17893: LD_INT 16
17895: PUSH
17896: FOR_TO
17897: IFFALSE 18096
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17899: LD_ADDR_VAR 0 3
17903: PUSH
17904: LD_INT 10
17906: PUSH
17907: LD_INT 20
17909: PUSH
17910: LD_INT 30
17912: PUSH
17913: LD_INT 40
17915: PUSH
17916: LD_INT 50
17918: PUSH
17919: LD_INT 60
17921: PUSH
17922: LD_INT 70
17924: PUSH
17925: LD_INT 80
17927: PUSH
17928: LD_INT 90
17930: PUSH
17931: LD_INT 100
17933: PUSH
17934: LD_INT 110
17936: PUSH
17937: LD_INT 120
17939: PUSH
17940: LD_INT 130
17942: PUSH
17943: LD_INT 140
17945: PUSH
17946: LD_INT 150
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_INT 15
17971: PPUSH
17972: CALL_OW 12
17976: ARRAY
17977: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17978: LD_ADDR_VAR 0 4
17982: PUSH
17983: LD_INT 10
17985: PUSH
17986: LD_INT 20
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_INT 40
17994: PUSH
17995: LD_INT 50
17997: PUSH
17998: LD_INT 60
18000: PUSH
18001: LD_INT 70
18003: PUSH
18004: LD_INT 80
18006: PUSH
18007: LD_INT 90
18009: PUSH
18010: LD_INT 100
18012: PUSH
18013: LD_INT 110
18015: PUSH
18016: LD_INT 120
18018: PUSH
18019: LD_INT 130
18021: PUSH
18022: LD_INT 140
18024: PUSH
18025: LD_INT 150
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: PPUSH
18048: LD_INT 15
18050: PPUSH
18051: CALL_OW 12
18055: ARRAY
18056: ST_TO_ADDR
// if ValidHex ( x , y ) then
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_VAR 0 4
18066: PPUSH
18067: CALL_OW 488
18071: IFFALSE 18094
// begin result := [ x , y ] ;
18073: LD_ADDR_VAR 0 1
18077: PUSH
18078: LD_VAR 0 3
18082: PUSH
18083: LD_VAR 0 4
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: ST_TO_ADDR
// break ;
18092: GO 18096
// end ; end ;
18094: GO 17896
18096: POP
18097: POP
// if result then
18098: LD_VAR 0 1
18102: IFFALSE 18162
// begin ToLua ( playSibBomb() ) ;
18104: LD_STRING playSibBomb()
18106: PPUSH
18107: CALL_OW 559
// wait ( 0 0$14 ) ;
18111: LD_INT 490
18113: PPUSH
18114: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18118: LD_VAR 0 1
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PPUSH
18127: LD_VAR 0 1
18131: PUSH
18132: LD_INT 2
18134: ARRAY
18135: PPUSH
18136: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18140: LD_VAR 0 1
18144: PUSH
18145: LD_INT 1
18147: ARRAY
18148: PPUSH
18149: LD_VAR 0 1
18153: PUSH
18154: LD_INT 2
18156: ARRAY
18157: PPUSH
18158: CALL_OW 429
// end ; end ;
18162: LD_VAR 0 1
18166: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18167: LD_EXP 40
18171: PUSH
18172: LD_EXP 62
18176: AND
18177: IFFALSE 18189
18179: GO 18181
18181: DISABLE
// YouLost (  ) ;
18182: LD_STRING 
18184: PPUSH
18185: CALL_OW 104
18189: END
// every 0 0$1 trigger StreamModeActive and sFog do
18190: LD_EXP 40
18194: PUSH
18195: LD_EXP 61
18199: AND
18200: IFFALSE 18214
18202: GO 18204
18204: DISABLE
// FogOff ( your_side ) ;
18205: LD_OWVAR 2
18209: PPUSH
18210: CALL_OW 344
18214: END
// every 0 0$1 trigger StreamModeActive and sSun do
18215: LD_EXP 40
18219: PUSH
18220: LD_EXP 63
18224: AND
18225: IFFALSE 18253
18227: GO 18229
18229: DISABLE
// begin solar_recharge_percent := 0 ;
18230: LD_ADDR_OWVAR 79
18234: PUSH
18235: LD_INT 0
18237: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18238: LD_INT 10500
18240: PPUSH
18241: CALL_OW 67
// solar_recharge_percent := 100 ;
18245: LD_ADDR_OWVAR 79
18249: PUSH
18250: LD_INT 100
18252: ST_TO_ADDR
// end ;
18253: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18254: LD_EXP 40
18258: PUSH
18259: LD_EXP 64
18263: AND
18264: IFFALSE 18503
18266: GO 18268
18268: DISABLE
18269: LD_INT 0
18271: PPUSH
18272: PPUSH
18273: PPUSH
// begin tmp := [ ] ;
18274: LD_ADDR_VAR 0 3
18278: PUSH
18279: EMPTY
18280: ST_TO_ADDR
// for i := 1 to 6 do
18281: LD_ADDR_VAR 0 1
18285: PUSH
18286: DOUBLE
18287: LD_INT 1
18289: DEC
18290: ST_TO_ADDR
18291: LD_INT 6
18293: PUSH
18294: FOR_TO
18295: IFFALSE 18400
// begin uc_nation := nation_nature ;
18297: LD_ADDR_OWVAR 21
18301: PUSH
18302: LD_INT 0
18304: ST_TO_ADDR
// uc_side := 0 ;
18305: LD_ADDR_OWVAR 20
18309: PUSH
18310: LD_INT 0
18312: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18313: LD_ADDR_OWVAR 29
18317: PUSH
18318: LD_INT 12
18320: PUSH
18321: LD_INT 12
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: ST_TO_ADDR
// hc_agressivity := 20 ;
18328: LD_ADDR_OWVAR 35
18332: PUSH
18333: LD_INT 20
18335: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18336: LD_ADDR_OWVAR 28
18340: PUSH
18341: LD_INT 17
18343: ST_TO_ADDR
// hc_gallery :=  ;
18344: LD_ADDR_OWVAR 33
18348: PUSH
18349: LD_STRING 
18351: ST_TO_ADDR
// hc_name :=  ;
18352: LD_ADDR_OWVAR 26
18356: PUSH
18357: LD_STRING 
18359: ST_TO_ADDR
// un := CreateHuman ;
18360: LD_ADDR_VAR 0 2
18364: PUSH
18365: CALL_OW 44
18369: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18370: LD_VAR 0 2
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 51
// tmp := tmp ^ un ;
18382: LD_ADDR_VAR 0 3
18386: PUSH
18387: LD_VAR 0 3
18391: PUSH
18392: LD_VAR 0 2
18396: ADD
18397: ST_TO_ADDR
// end ;
18398: GO 18294
18400: POP
18401: POP
// repeat wait ( 0 0$1 ) ;
18402: LD_INT 35
18404: PPUSH
18405: CALL_OW 67
// for un in tmp do
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_VAR 0 3
18418: PUSH
18419: FOR_IN
18420: IFFALSE 18494
// begin if IsDead ( un ) then
18422: LD_VAR 0 2
18426: PPUSH
18427: CALL_OW 301
18431: IFFALSE 18451
// begin tmp := tmp diff un ;
18433: LD_ADDR_VAR 0 3
18437: PUSH
18438: LD_VAR 0 3
18442: PUSH
18443: LD_VAR 0 2
18447: DIFF
18448: ST_TO_ADDR
// continue ;
18449: GO 18419
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18451: LD_VAR 0 2
18455: PPUSH
18456: LD_INT 3
18458: PUSH
18459: LD_INT 22
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: PPUSH
18478: LD_VAR 0 2
18482: PPUSH
18483: CALL_OW 74
18487: PPUSH
18488: CALL_OW 115
// end ;
18492: GO 18419
18494: POP
18495: POP
// until not tmp ;
18496: LD_VAR 0 3
18500: NOT
18501: IFFALSE 18402
// end ;
18503: PPOPN 3
18505: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18506: LD_EXP 40
18510: PUSH
18511: LD_EXP 65
18515: AND
18516: IFFALSE 18570
18518: GO 18520
18520: DISABLE
// begin ToLua ( displayTroll(); ) ;
18521: LD_STRING displayTroll();
18523: PPUSH
18524: CALL_OW 559
// wait ( 3 3$00 ) ;
18528: LD_INT 6300
18530: PPUSH
18531: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18535: LD_STRING hideTroll();
18537: PPUSH
18538: CALL_OW 559
// wait ( 1 1$00 ) ;
18542: LD_INT 2100
18544: PPUSH
18545: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18549: LD_STRING displayTroll();
18551: PPUSH
18552: CALL_OW 559
// wait ( 1 1$00 ) ;
18556: LD_INT 2100
18558: PPUSH
18559: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18563: LD_STRING hideTroll();
18565: PPUSH
18566: CALL_OW 559
// end ;
18570: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18571: LD_EXP 40
18575: PUSH
18576: LD_EXP 66
18580: AND
18581: IFFALSE 18644
18583: GO 18585
18585: DISABLE
18586: LD_INT 0
18588: PPUSH
// begin p := 0 ;
18589: LD_ADDR_VAR 0 1
18593: PUSH
18594: LD_INT 0
18596: ST_TO_ADDR
// repeat game_speed := 1 ;
18597: LD_ADDR_OWVAR 65
18601: PUSH
18602: LD_INT 1
18604: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18605: LD_INT 35
18607: PPUSH
18608: CALL_OW 67
// p := p + 1 ;
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: LD_VAR 0 1
18621: PUSH
18622: LD_INT 1
18624: PLUS
18625: ST_TO_ADDR
// until p >= 60 ;
18626: LD_VAR 0 1
18630: PUSH
18631: LD_INT 60
18633: GREATEREQUAL
18634: IFFALSE 18597
// game_speed := 4 ;
18636: LD_ADDR_OWVAR 65
18640: PUSH
18641: LD_INT 4
18643: ST_TO_ADDR
// end ;
18644: PPOPN 1
18646: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18647: LD_EXP 40
18651: PUSH
18652: LD_EXP 67
18656: AND
18657: IFFALSE 18803
18659: GO 18661
18661: DISABLE
18662: LD_INT 0
18664: PPUSH
18665: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18666: LD_ADDR_VAR 0 1
18670: PUSH
18671: LD_INT 22
18673: PUSH
18674: LD_OWVAR 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: LD_INT 30
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 30
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: ST_TO_ADDR
// if not depot then
18720: LD_VAR 0 1
18724: NOT
18725: IFFALSE 18729
// exit ;
18727: GO 18803
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18729: LD_ADDR_VAR 0 2
18733: PUSH
18734: LD_VAR 0 1
18738: PUSH
18739: LD_INT 1
18741: PPUSH
18742: LD_VAR 0 1
18746: PPUSH
18747: CALL_OW 12
18751: ARRAY
18752: PPUSH
18753: CALL_OW 274
18757: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18758: LD_VAR 0 2
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: LD_INT 0
18768: PPUSH
18769: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18773: LD_VAR 0 2
18777: PPUSH
18778: LD_INT 2
18780: PPUSH
18781: LD_INT 0
18783: PPUSH
18784: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18788: LD_VAR 0 2
18792: PPUSH
18793: LD_INT 3
18795: PPUSH
18796: LD_INT 0
18798: PPUSH
18799: CALL_OW 277
// end ;
18803: PPOPN 2
18805: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18806: LD_EXP 40
18810: PUSH
18811: LD_EXP 68
18815: AND
18816: IFFALSE 18913
18818: GO 18820
18820: DISABLE
18821: LD_INT 0
18823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18824: LD_ADDR_VAR 0 1
18828: PUSH
18829: LD_INT 22
18831: PUSH
18832: LD_OWVAR 2
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 21
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 3
18853: PUSH
18854: LD_INT 23
18856: PUSH
18857: LD_INT 0
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 69
18877: ST_TO_ADDR
// if not tmp then
18878: LD_VAR 0 1
18882: NOT
18883: IFFALSE 18887
// exit ;
18885: GO 18913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18887: LD_VAR 0 1
18891: PUSH
18892: LD_INT 1
18894: PPUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 12
18904: ARRAY
18905: PPUSH
18906: LD_INT 200
18908: PPUSH
18909: CALL_OW 234
// end ;
18913: PPOPN 1
18915: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18916: LD_EXP 40
18920: PUSH
18921: LD_EXP 69
18925: AND
18926: IFFALSE 19005
18928: GO 18930
18930: DISABLE
18931: LD_INT 0
18933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18934: LD_ADDR_VAR 0 1
18938: PUSH
18939: LD_INT 22
18941: PUSH
18942: LD_OWVAR 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 21
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: ST_TO_ADDR
// if not tmp then
18970: LD_VAR 0 1
18974: NOT
18975: IFFALSE 18979
// exit ;
18977: GO 19005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18979: LD_VAR 0 1
18983: PUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 12
18996: ARRAY
18997: PPUSH
18998: LD_INT 60
19000: PPUSH
19001: CALL_OW 234
// end ;
19005: PPOPN 1
19007: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19008: LD_EXP 40
19012: PUSH
19013: LD_EXP 70
19017: AND
19018: IFFALSE 19117
19020: GO 19022
19022: DISABLE
19023: LD_INT 0
19025: PPUSH
19026: PPUSH
// begin enable ;
19027: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19028: LD_ADDR_VAR 0 1
19032: PUSH
19033: LD_INT 22
19035: PUSH
19036: LD_OWVAR 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 61
19047: PUSH
19048: EMPTY
19049: LIST
19050: PUSH
19051: LD_INT 33
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: ST_TO_ADDR
// if not tmp then
19071: LD_VAR 0 1
19075: NOT
19076: IFFALSE 19080
// exit ;
19078: GO 19117
// for i in tmp do
19080: LD_ADDR_VAR 0 2
19084: PUSH
19085: LD_VAR 0 1
19089: PUSH
19090: FOR_IN
19091: IFFALSE 19115
// if IsControledBy ( i ) then
19093: LD_VAR 0 2
19097: PPUSH
19098: CALL_OW 312
19102: IFFALSE 19113
// ComUnlink ( i ) ;
19104: LD_VAR 0 2
19108: PPUSH
19109: CALL_OW 136
19113: GO 19090
19115: POP
19116: POP
// end ;
19117: PPOPN 2
19119: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19120: LD_EXP 40
19124: PUSH
19125: LD_EXP 71
19129: AND
19130: IFFALSE 19270
19132: GO 19134
19134: DISABLE
19135: LD_INT 0
19137: PPUSH
19138: PPUSH
// begin ToLua ( displayPowell(); ) ;
19139: LD_STRING displayPowell();
19141: PPUSH
19142: CALL_OW 559
// uc_side := 0 ;
19146: LD_ADDR_OWVAR 20
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// uc_nation := 2 ;
19154: LD_ADDR_OWVAR 21
19158: PUSH
19159: LD_INT 2
19161: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19162: LD_ADDR_OWVAR 37
19166: PUSH
19167: LD_INT 14
19169: ST_TO_ADDR
// vc_engine := engine_siberite ;
19170: LD_ADDR_OWVAR 39
19174: PUSH
19175: LD_INT 3
19177: ST_TO_ADDR
// vc_control := control_apeman ;
19178: LD_ADDR_OWVAR 38
19182: PUSH
19183: LD_INT 5
19185: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19186: LD_ADDR_OWVAR 40
19190: PUSH
19191: LD_INT 29
19193: ST_TO_ADDR
// un := CreateVehicle ;
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: CALL_OW 45
19203: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_INT 1
19211: PPUSH
19212: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19216: LD_INT 35
19218: PPUSH
19219: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19223: LD_VAR 0 2
19227: PPUSH
19228: LD_INT 22
19230: PUSH
19231: LD_OWVAR 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: PPUSH
19245: LD_VAR 0 2
19249: PPUSH
19250: CALL_OW 74
19254: PPUSH
19255: CALL_OW 115
// until IsDead ( un ) ;
19259: LD_VAR 0 2
19263: PPUSH
19264: CALL_OW 301
19268: IFFALSE 19216
// end ;
19270: PPOPN 2
19272: END
// every 0 0$1 trigger StreamModeActive and sStu do
19273: LD_EXP 40
19277: PUSH
19278: LD_EXP 79
19282: AND
19283: IFFALSE 19299
19285: GO 19287
19287: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19288: LD_STRING displayStucuk();
19290: PPUSH
19291: CALL_OW 559
// ResetFog ;
19295: CALL_OW 335
// end ;
19299: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19300: LD_EXP 40
19304: PUSH
19305: LD_EXP 72
19309: AND
19310: IFFALSE 19451
19312: GO 19314
19314: DISABLE
19315: LD_INT 0
19317: PPUSH
19318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19319: LD_ADDR_VAR 0 2
19323: PUSH
19324: LD_INT 22
19326: PUSH
19327: LD_OWVAR 2
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 21
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PPUSH
19350: CALL_OW 69
19354: ST_TO_ADDR
// if not tmp then
19355: LD_VAR 0 2
19359: NOT
19360: IFFALSE 19364
// exit ;
19362: GO 19451
// un := tmp [ rand ( 1 , tmp ) ] ;
19364: LD_ADDR_VAR 0 1
19368: PUSH
19369: LD_VAR 0 2
19373: PUSH
19374: LD_INT 1
19376: PPUSH
19377: LD_VAR 0 2
19381: PPUSH
19382: CALL_OW 12
19386: ARRAY
19387: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_INT 0
19395: PPUSH
19396: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19400: LD_VAR 0 1
19404: PPUSH
19405: LD_OWVAR 3
19409: PUSH
19410: LD_VAR 0 1
19414: DIFF
19415: PPUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 74
19425: PPUSH
19426: CALL_OW 115
// wait ( 0 0$20 ) ;
19430: LD_INT 700
19432: PPUSH
19433: CALL_OW 67
// SetSide ( un , your_side ) ;
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_OWVAR 2
19446: PPUSH
19447: CALL_OW 235
// end ;
19451: PPOPN 2
19453: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19454: LD_EXP 40
19458: PUSH
19459: LD_EXP 73
19463: AND
19464: IFFALSE 19570
19466: GO 19468
19468: DISABLE
19469: LD_INT 0
19471: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19472: LD_ADDR_VAR 0 1
19476: PUSH
19477: LD_INT 22
19479: PUSH
19480: LD_OWVAR 2
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: LD_INT 30
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PPUSH
19521: CALL_OW 69
19525: ST_TO_ADDR
// if not depot then
19526: LD_VAR 0 1
19530: NOT
19531: IFFALSE 19535
// exit ;
19533: GO 19570
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19535: LD_VAR 0 1
19539: PUSH
19540: LD_INT 1
19542: ARRAY
19543: PPUSH
19544: CALL_OW 250
19548: PPUSH
19549: LD_VAR 0 1
19553: PUSH
19554: LD_INT 1
19556: ARRAY
19557: PPUSH
19558: CALL_OW 251
19562: PPUSH
19563: LD_INT 70
19565: PPUSH
19566: CALL_OW 495
// end ;
19570: PPOPN 1
19572: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19573: LD_EXP 40
19577: PUSH
19578: LD_EXP 74
19582: AND
19583: IFFALSE 19794
19585: GO 19587
19587: DISABLE
19588: LD_INT 0
19590: PPUSH
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19595: LD_ADDR_VAR 0 5
19599: PUSH
19600: LD_INT 22
19602: PUSH
19603: LD_OWVAR 2
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 21
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PPUSH
19626: CALL_OW 69
19630: ST_TO_ADDR
// if not tmp then
19631: LD_VAR 0 5
19635: NOT
19636: IFFALSE 19640
// exit ;
19638: GO 19794
// for i in tmp do
19640: LD_ADDR_VAR 0 1
19644: PUSH
19645: LD_VAR 0 5
19649: PUSH
19650: FOR_IN
19651: IFFALSE 19792
// begin d := rand ( 0 , 5 ) ;
19653: LD_ADDR_VAR 0 4
19657: PUSH
19658: LD_INT 0
19660: PPUSH
19661: LD_INT 5
19663: PPUSH
19664: CALL_OW 12
19668: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19669: LD_ADDR_VAR 0 2
19673: PUSH
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 250
19683: PPUSH
19684: LD_VAR 0 4
19688: PPUSH
19689: LD_INT 3
19691: PPUSH
19692: LD_INT 12
19694: PPUSH
19695: CALL_OW 12
19699: PPUSH
19700: CALL_OW 272
19704: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19705: LD_ADDR_VAR 0 3
19709: PUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: CALL_OW 251
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_INT 3
19727: PPUSH
19728: LD_INT 12
19730: PPUSH
19731: CALL_OW 12
19735: PPUSH
19736: CALL_OW 273
19740: ST_TO_ADDR
// if ValidHex ( x , y ) then
19741: LD_VAR 0 2
19745: PPUSH
19746: LD_VAR 0 3
19750: PPUSH
19751: CALL_OW 488
19755: IFFALSE 19790
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19757: LD_VAR 0 1
19761: PPUSH
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 3
19774: PPUSH
19775: LD_INT 6
19777: PPUSH
19778: CALL_OW 12
19782: PPUSH
19783: LD_INT 1
19785: PPUSH
19786: CALL_OW 483
// end ;
19790: GO 19650
19792: POP
19793: POP
// end ;
19794: PPOPN 5
19796: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19797: LD_EXP 40
19801: PUSH
19802: LD_EXP 75
19806: AND
19807: IFFALSE 19901
19809: GO 19811
19811: DISABLE
19812: LD_INT 0
19814: PPUSH
19815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19816: LD_ADDR_VAR 0 2
19820: PUSH
19821: LD_INT 22
19823: PUSH
19824: LD_OWVAR 2
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 32
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 21
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: ST_TO_ADDR
// if not tmp then
19863: LD_VAR 0 2
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 19901
// for i in tmp do
19872: LD_ADDR_VAR 0 1
19876: PUSH
19877: LD_VAR 0 2
19881: PUSH
19882: FOR_IN
19883: IFFALSE 19899
// SetFuel ( i , 0 ) ;
19885: LD_VAR 0 1
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: CALL_OW 240
19897: GO 19882
19899: POP
19900: POP
// end ;
19901: PPOPN 2
19903: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19904: LD_EXP 40
19908: PUSH
19909: LD_EXP 76
19913: AND
19914: IFFALSE 19980
19916: GO 19918
19918: DISABLE
19919: LD_INT 0
19921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19922: LD_ADDR_VAR 0 1
19926: PUSH
19927: LD_INT 22
19929: PUSH
19930: LD_OWVAR 2
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 30
19941: PUSH
19942: LD_INT 29
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PPUSH
19953: CALL_OW 69
19957: ST_TO_ADDR
// if not tmp then
19958: LD_VAR 0 1
19962: NOT
19963: IFFALSE 19967
// exit ;
19965: GO 19980
// DestroyUnit ( tmp [ 1 ] ) ;
19967: LD_VAR 0 1
19971: PUSH
19972: LD_INT 1
19974: ARRAY
19975: PPUSH
19976: CALL_OW 65
// end ;
19980: PPOPN 1
19982: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19983: LD_EXP 40
19987: PUSH
19988: LD_EXP 78
19992: AND
19993: IFFALSE 20122
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
// begin uc_side := 0 ;
20001: LD_ADDR_OWVAR 20
20005: PUSH
20006: LD_INT 0
20008: ST_TO_ADDR
// uc_nation := nation_arabian ;
20009: LD_ADDR_OWVAR 21
20013: PUSH
20014: LD_INT 2
20016: ST_TO_ADDR
// hc_gallery :=  ;
20017: LD_ADDR_OWVAR 33
20021: PUSH
20022: LD_STRING 
20024: ST_TO_ADDR
// hc_name :=  ;
20025: LD_ADDR_OWVAR 26
20029: PUSH
20030: LD_STRING 
20032: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20033: LD_INT 1
20035: PPUSH
20036: LD_INT 11
20038: PPUSH
20039: LD_INT 10
20041: PPUSH
20042: CALL_OW 380
// un := CreateHuman ;
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: CALL_OW 44
20055: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20056: LD_VAR 0 1
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20068: LD_INT 35
20070: PPUSH
20071: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20075: LD_VAR 0 1
20079: PPUSH
20080: LD_INT 22
20082: PUSH
20083: LD_OWVAR 2
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PPUSH
20092: CALL_OW 69
20096: PPUSH
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 74
20106: PPUSH
20107: CALL_OW 115
// until IsDead ( un ) ;
20111: LD_VAR 0 1
20115: PPUSH
20116: CALL_OW 301
20120: IFFALSE 20068
// end ;
20122: PPOPN 1
20124: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20125: LD_EXP 40
20129: PUSH
20130: LD_EXP 80
20134: AND
20135: IFFALSE 20147
20137: GO 20139
20139: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20140: LD_STRING earthquake(getX(game), 0, 32)
20142: PPUSH
20143: CALL_OW 559
20147: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20148: LD_EXP 40
20152: PUSH
20153: LD_EXP 81
20157: AND
20158: IFFALSE 20249
20160: GO 20162
20162: DISABLE
20163: LD_INT 0
20165: PPUSH
// begin enable ;
20166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20167: LD_ADDR_VAR 0 1
20171: PUSH
20172: LD_INT 22
20174: PUSH
20175: LD_OWVAR 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 21
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 33
20196: PUSH
20197: LD_INT 3
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: PPUSH
20209: CALL_OW 69
20213: ST_TO_ADDR
// if not tmp then
20214: LD_VAR 0 1
20218: NOT
20219: IFFALSE 20223
// exit ;
20221: GO 20249
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20223: LD_VAR 0 1
20227: PUSH
20228: LD_INT 1
20230: PPUSH
20231: LD_VAR 0 1
20235: PPUSH
20236: CALL_OW 12
20240: ARRAY
20241: PPUSH
20242: LD_INT 1
20244: PPUSH
20245: CALL_OW 234
// end ;
20249: PPOPN 1
20251: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20252: LD_EXP 40
20256: PUSH
20257: LD_EXP 82
20261: AND
20262: IFFALSE 20403
20264: GO 20266
20266: DISABLE
20267: LD_INT 0
20269: PPUSH
20270: PPUSH
20271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20272: LD_ADDR_VAR 0 3
20276: PUSH
20277: LD_INT 22
20279: PUSH
20280: LD_OWVAR 2
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 25
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// if not tmp then
20308: LD_VAR 0 3
20312: NOT
20313: IFFALSE 20317
// exit ;
20315: GO 20403
// un := tmp [ rand ( 1 , tmp ) ] ;
20317: LD_ADDR_VAR 0 2
20321: PUSH
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 1
20329: PPUSH
20330: LD_VAR 0 3
20334: PPUSH
20335: CALL_OW 12
20339: ARRAY
20340: ST_TO_ADDR
// if Crawls ( un ) then
20341: LD_VAR 0 2
20345: PPUSH
20346: CALL_OW 318
20350: IFFALSE 20361
// ComWalk ( un ) ;
20352: LD_VAR 0 2
20356: PPUSH
20357: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_INT 9
20368: PPUSH
20369: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20373: LD_INT 28
20375: PPUSH
20376: LD_OWVAR 2
20380: PPUSH
20381: LD_INT 2
20383: PPUSH
20384: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20388: LD_INT 29
20390: PPUSH
20391: LD_OWVAR 2
20395: PPUSH
20396: LD_INT 2
20398: PPUSH
20399: CALL_OW 322
// end ;
20403: PPOPN 3
20405: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20406: LD_EXP 40
20410: PUSH
20411: LD_EXP 83
20415: AND
20416: IFFALSE 20527
20418: GO 20420
20420: DISABLE
20421: LD_INT 0
20423: PPUSH
20424: PPUSH
20425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_INT 22
20433: PUSH
20434: LD_OWVAR 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PPUSH
20457: CALL_OW 69
20461: ST_TO_ADDR
// if not tmp then
20462: LD_VAR 0 3
20466: NOT
20467: IFFALSE 20471
// exit ;
20469: GO 20527
// un := tmp [ rand ( 1 , tmp ) ] ;
20471: LD_ADDR_VAR 0 2
20475: PUSH
20476: LD_VAR 0 3
20480: PUSH
20481: LD_INT 1
20483: PPUSH
20484: LD_VAR 0 3
20488: PPUSH
20489: CALL_OW 12
20493: ARRAY
20494: ST_TO_ADDR
// if Crawls ( un ) then
20495: LD_VAR 0 2
20499: PPUSH
20500: CALL_OW 318
20504: IFFALSE 20515
// ComWalk ( un ) ;
20506: LD_VAR 0 2
20510: PPUSH
20511: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20515: LD_VAR 0 2
20519: PPUSH
20520: LD_INT 8
20522: PPUSH
20523: CALL_OW 336
// end ;
20527: PPOPN 3
20529: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20530: LD_EXP 40
20534: PUSH
20535: LD_EXP 84
20539: AND
20540: IFFALSE 20684
20542: GO 20544
20544: DISABLE
20545: LD_INT 0
20547: PPUSH
20548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: LD_INT 22
20556: PUSH
20557: LD_OWVAR 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 21
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: LD_INT 34
20581: PUSH
20582: LD_INT 12
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 34
20591: PUSH
20592: LD_INT 51
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 34
20601: PUSH
20602: LD_INT 32
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: LIST
20619: PPUSH
20620: CALL_OW 69
20624: ST_TO_ADDR
// if not tmp then
20625: LD_VAR 0 2
20629: NOT
20630: IFFALSE 20634
// exit ;
20632: GO 20684
// for i in tmp do
20634: LD_ADDR_VAR 0 1
20638: PUSH
20639: LD_VAR 0 2
20643: PUSH
20644: FOR_IN
20645: IFFALSE 20682
// if GetCargo ( i , mat_artifact ) = 0 then
20647: LD_VAR 0 1
20651: PPUSH
20652: LD_INT 4
20654: PPUSH
20655: CALL_OW 289
20659: PUSH
20660: LD_INT 0
20662: EQUAL
20663: IFFALSE 20680
// SetCargo ( i , mat_siberit , 100 ) ;
20665: LD_VAR 0 1
20669: PPUSH
20670: LD_INT 3
20672: PPUSH
20673: LD_INT 100
20675: PPUSH
20676: CALL_OW 290
20680: GO 20644
20682: POP
20683: POP
// end ;
20684: PPOPN 2
20686: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20687: LD_EXP 40
20691: PUSH
20692: LD_EXP 85
20696: AND
20697: IFFALSE 20880
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20706: LD_ADDR_VAR 0 2
20710: PUSH
20711: LD_INT 22
20713: PUSH
20714: LD_OWVAR 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PPUSH
20723: CALL_OW 69
20727: ST_TO_ADDR
// if not tmp then
20728: LD_VAR 0 2
20732: NOT
20733: IFFALSE 20737
// exit ;
20735: GO 20880
// for i := 1 to 2 do
20737: LD_ADDR_VAR 0 1
20741: PUSH
20742: DOUBLE
20743: LD_INT 1
20745: DEC
20746: ST_TO_ADDR
20747: LD_INT 2
20749: PUSH
20750: FOR_TO
20751: IFFALSE 20878
// begin uc_side := your_side ;
20753: LD_ADDR_OWVAR 20
20757: PUSH
20758: LD_OWVAR 2
20762: ST_TO_ADDR
// uc_nation := nation_american ;
20763: LD_ADDR_OWVAR 21
20767: PUSH
20768: LD_INT 1
20770: ST_TO_ADDR
// vc_chassis := us_morphling ;
20771: LD_ADDR_OWVAR 37
20775: PUSH
20776: LD_INT 5
20778: ST_TO_ADDR
// vc_engine := engine_siberite ;
20779: LD_ADDR_OWVAR 39
20783: PUSH
20784: LD_INT 3
20786: ST_TO_ADDR
// vc_control := control_computer ;
20787: LD_ADDR_OWVAR 38
20791: PUSH
20792: LD_INT 3
20794: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20795: LD_ADDR_OWVAR 40
20799: PUSH
20800: LD_INT 10
20802: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20803: LD_VAR 0 2
20807: PUSH
20808: LD_INT 1
20810: ARRAY
20811: PPUSH
20812: CALL_OW 310
20816: NOT
20817: IFFALSE 20864
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20819: CALL_OW 45
20823: PPUSH
20824: LD_VAR 0 2
20828: PUSH
20829: LD_INT 1
20831: ARRAY
20832: PPUSH
20833: CALL_OW 250
20837: PPUSH
20838: LD_VAR 0 2
20842: PUSH
20843: LD_INT 1
20845: ARRAY
20846: PPUSH
20847: CALL_OW 251
20851: PPUSH
20852: LD_INT 12
20854: PPUSH
20855: LD_INT 1
20857: PPUSH
20858: CALL_OW 50
20862: GO 20876
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20864: CALL_OW 45
20868: PPUSH
20869: LD_INT 1
20871: PPUSH
20872: CALL_OW 51
// end ;
20876: GO 20750
20878: POP
20879: POP
// end ;
20880: PPOPN 2
20882: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20883: LD_EXP 40
20887: PUSH
20888: LD_EXP 86
20892: AND
20893: IFFALSE 21115
20895: GO 20897
20897: DISABLE
20898: LD_INT 0
20900: PPUSH
20901: PPUSH
20902: PPUSH
20903: PPUSH
20904: PPUSH
20905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20906: LD_ADDR_VAR 0 6
20910: PUSH
20911: LD_INT 22
20913: PUSH
20914: LD_OWVAR 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 21
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 3
20935: PUSH
20936: LD_INT 23
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: ST_TO_ADDR
// if not tmp then
20960: LD_VAR 0 6
20964: NOT
20965: IFFALSE 20969
// exit ;
20967: GO 21115
// s1 := rand ( 1 , 4 ) ;
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: LD_INT 1
20976: PPUSH
20977: LD_INT 4
20979: PPUSH
20980: CALL_OW 12
20984: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20985: LD_ADDR_VAR 0 4
20989: PUSH
20990: LD_VAR 0 6
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PPUSH
20999: LD_VAR 0 2
21003: PPUSH
21004: CALL_OW 259
21008: ST_TO_ADDR
// if s1 = 1 then
21009: LD_VAR 0 2
21013: PUSH
21014: LD_INT 1
21016: EQUAL
21017: IFFALSE 21037
// s2 := rand ( 2 , 4 ) else
21019: LD_ADDR_VAR 0 3
21023: PUSH
21024: LD_INT 2
21026: PPUSH
21027: LD_INT 4
21029: PPUSH
21030: CALL_OW 12
21034: ST_TO_ADDR
21035: GO 21045
// s2 := 1 ;
21037: LD_ADDR_VAR 0 3
21041: PUSH
21042: LD_INT 1
21044: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21045: LD_ADDR_VAR 0 5
21049: PUSH
21050: LD_VAR 0 6
21054: PUSH
21055: LD_INT 1
21057: ARRAY
21058: PPUSH
21059: LD_VAR 0 3
21063: PPUSH
21064: CALL_OW 259
21068: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21069: LD_VAR 0 6
21073: PUSH
21074: LD_INT 1
21076: ARRAY
21077: PPUSH
21078: LD_VAR 0 2
21082: PPUSH
21083: LD_VAR 0 5
21087: PPUSH
21088: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21092: LD_VAR 0 6
21096: PUSH
21097: LD_INT 1
21099: ARRAY
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: LD_VAR 0 4
21110: PPUSH
21111: CALL_OW 237
// end ;
21115: PPOPN 6
21117: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21118: LD_EXP 40
21122: PUSH
21123: LD_EXP 87
21127: AND
21128: IFFALSE 21207
21130: GO 21132
21132: DISABLE
21133: LD_INT 0
21135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_INT 22
21143: PUSH
21144: LD_OWVAR 2
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 30
21155: PUSH
21156: LD_INT 3
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PPUSH
21167: CALL_OW 69
21171: ST_TO_ADDR
// if not tmp then
21172: LD_VAR 0 1
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21181: LD_VAR 0 1
21185: PUSH
21186: LD_INT 1
21188: PPUSH
21189: LD_VAR 0 1
21193: PPUSH
21194: CALL_OW 12
21198: ARRAY
21199: PPUSH
21200: LD_INT 1
21202: PPUSH
21203: CALL_OW 234
// end ;
21207: PPOPN 1
21209: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21210: LD_EXP 40
21214: PUSH
21215: LD_EXP 88
21219: AND
21220: IFFALSE 21332
21222: GO 21224
21224: DISABLE
21225: LD_INT 0
21227: PPUSH
21228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21229: LD_ADDR_VAR 0 2
21233: PUSH
21234: LD_INT 22
21236: PUSH
21237: LD_OWVAR 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: LD_INT 30
21251: PUSH
21252: LD_INT 27
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 30
21261: PUSH
21262: LD_INT 26
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 30
21271: PUSH
21272: LD_INT 28
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PPUSH
21289: CALL_OW 69
21293: ST_TO_ADDR
// if not tmp then
21294: LD_VAR 0 2
21298: NOT
21299: IFFALSE 21303
// exit ;
21301: GO 21332
// for i in tmp do
21303: LD_ADDR_VAR 0 1
21307: PUSH
21308: LD_VAR 0 2
21312: PUSH
21313: FOR_IN
21314: IFFALSE 21330
// SetLives ( i , 1 ) ;
21316: LD_VAR 0 1
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: CALL_OW 234
21328: GO 21313
21330: POP
21331: POP
// end ;
21332: PPOPN 2
21334: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21335: LD_EXP 40
21339: PUSH
21340: LD_EXP 89
21344: AND
21345: IFFALSE 21619
21347: GO 21349
21349: DISABLE
21350: LD_INT 0
21352: PPUSH
21353: PPUSH
21354: PPUSH
// begin i := rand ( 1 , 7 ) ;
21355: LD_ADDR_VAR 0 1
21359: PUSH
21360: LD_INT 1
21362: PPUSH
21363: LD_INT 7
21365: PPUSH
21366: CALL_OW 12
21370: ST_TO_ADDR
// case i of 1 :
21371: LD_VAR 0 1
21375: PUSH
21376: LD_INT 1
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21384
21382: GO 21394
21384: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21385: LD_STRING earthquake(getX(game), 0, 32)
21387: PPUSH
21388: CALL_OW 559
21392: GO 21619
21394: LD_INT 2
21396: DOUBLE
21397: EQUAL
21398: IFTRUE 21402
21400: GO 21416
21402: POP
// begin ToLua ( displayStucuk(); ) ;
21403: LD_STRING displayStucuk();
21405: PPUSH
21406: CALL_OW 559
// ResetFog ;
21410: CALL_OW 335
// end ; 3 :
21414: GO 21619
21416: LD_INT 3
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21528
21424: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21425: LD_ADDR_VAR 0 2
21429: PUSH
21430: LD_INT 22
21432: PUSH
21433: LD_OWVAR 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 25
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: ST_TO_ADDR
// if not tmp then
21461: LD_VAR 0 2
21465: NOT
21466: IFFALSE 21470
// exit ;
21468: GO 21619
// un := tmp [ rand ( 1 , tmp ) ] ;
21470: LD_ADDR_VAR 0 3
21474: PUSH
21475: LD_VAR 0 2
21479: PUSH
21480: LD_INT 1
21482: PPUSH
21483: LD_VAR 0 2
21487: PPUSH
21488: CALL_OW 12
21492: ARRAY
21493: ST_TO_ADDR
// if Crawls ( un ) then
21494: LD_VAR 0 3
21498: PPUSH
21499: CALL_OW 318
21503: IFFALSE 21514
// ComWalk ( un ) ;
21505: LD_VAR 0 3
21509: PPUSH
21510: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21514: LD_VAR 0 3
21518: PPUSH
21519: LD_INT 8
21521: PPUSH
21522: CALL_OW 336
// end ; 4 :
21526: GO 21619
21528: LD_INT 4
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21597
21536: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 22
21544: PUSH
21545: LD_OWVAR 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 30
21556: PUSH
21557: LD_INT 29
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PPUSH
21568: CALL_OW 69
21572: ST_TO_ADDR
// if not tmp then
21573: LD_VAR 0 2
21577: NOT
21578: IFFALSE 21582
// exit ;
21580: GO 21619
// DestroyUnit ( tmp [ 1 ] ) ;
21582: LD_VAR 0 2
21586: PUSH
21587: LD_INT 1
21589: ARRAY
21590: PPUSH
21591: CALL_OW 65
// end ; 5 .. 7 :
21595: GO 21619
21597: LD_INT 5
21599: DOUBLE
21600: GREATEREQUAL
21601: IFFALSE 21609
21603: LD_INT 7
21605: DOUBLE
21606: LESSEQUAL
21607: IFTRUE 21611
21609: GO 21618
21611: POP
// StreamSibBomb ; end ;
21612: CALL 17869 0 0
21616: GO 21619
21618: POP
// end ;
21619: PPOPN 3
21621: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21622: LD_EXP 40
21626: PUSH
21627: LD_EXP 90
21631: AND
21632: IFFALSE 21788
21634: GO 21636
21636: DISABLE
21637: LD_INT 0
21639: PPUSH
21640: PPUSH
21641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21642: LD_ADDR_VAR 0 2
21646: PUSH
21647: LD_INT 81
21649: PUSH
21650: LD_OWVAR 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 21
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 69
21695: ST_TO_ADDR
// if not tmp then
21696: LD_VAR 0 2
21700: NOT
21701: IFFALSE 21705
// exit ;
21703: GO 21788
// p := 0 ;
21705: LD_ADDR_VAR 0 3
21709: PUSH
21710: LD_INT 0
21712: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21713: LD_INT 35
21715: PPUSH
21716: CALL_OW 67
// p := p + 1 ;
21720: LD_ADDR_VAR 0 3
21724: PUSH
21725: LD_VAR 0 3
21729: PUSH
21730: LD_INT 1
21732: PLUS
21733: ST_TO_ADDR
// for i in tmp do
21734: LD_ADDR_VAR 0 1
21738: PUSH
21739: LD_VAR 0 2
21743: PUSH
21744: FOR_IN
21745: IFFALSE 21776
// if GetLives ( i ) < 1000 then
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 256
21756: PUSH
21757: LD_INT 1000
21759: LESS
21760: IFFALSE 21774
// SetLives ( i , 1000 ) ;
21762: LD_VAR 0 1
21766: PPUSH
21767: LD_INT 1000
21769: PPUSH
21770: CALL_OW 234
21774: GO 21744
21776: POP
21777: POP
// until p > 20 ;
21778: LD_VAR 0 3
21782: PUSH
21783: LD_INT 20
21785: GREATER
21786: IFFALSE 21713
// end ;
21788: PPOPN 3
21790: END
// every 0 0$1 trigger StreamModeActive and sTime do
21791: LD_EXP 40
21795: PUSH
21796: LD_EXP 91
21800: AND
21801: IFFALSE 21836
21803: GO 21805
21805: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21806: LD_INT 28
21808: PPUSH
21809: LD_OWVAR 2
21813: PPUSH
21814: LD_INT 2
21816: PPUSH
21817: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21821: LD_INT 30
21823: PPUSH
21824: LD_OWVAR 2
21828: PPUSH
21829: LD_INT 2
21831: PPUSH
21832: CALL_OW 322
// end ;
21836: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21837: LD_EXP 40
21841: PUSH
21842: LD_EXP 92
21846: AND
21847: IFFALSE 21968
21849: GO 21851
21851: DISABLE
21852: LD_INT 0
21854: PPUSH
21855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21856: LD_ADDR_VAR 0 2
21860: PUSH
21861: LD_INT 22
21863: PUSH
21864: LD_OWVAR 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 21
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 23
21888: PUSH
21889: LD_INT 0
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 69
21909: ST_TO_ADDR
// if not tmp then
21910: LD_VAR 0 2
21914: NOT
21915: IFFALSE 21919
// exit ;
21917: GO 21968
// for i in tmp do
21919: LD_ADDR_VAR 0 1
21923: PUSH
21924: LD_VAR 0 2
21928: PUSH
21929: FOR_IN
21930: IFFALSE 21966
// begin if Crawls ( i ) then
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 318
21941: IFFALSE 21952
// ComWalk ( i ) ;
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL_OW 138
// SetClass ( i , 2 ) ;
21952: LD_VAR 0 1
21956: PPUSH
21957: LD_INT 2
21959: PPUSH
21960: CALL_OW 336
// end ;
21964: GO 21929
21966: POP
21967: POP
// end ;
21968: PPOPN 2
21970: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21971: LD_EXP 40
21975: PUSH
21976: LD_EXP 93
21980: AND
21981: IFFALSE 22262
21983: GO 21985
21985: DISABLE
21986: LD_INT 0
21988: PPUSH
21989: PPUSH
21990: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21991: LD_OWVAR 2
21995: PPUSH
21996: LD_INT 9
21998: PPUSH
21999: LD_INT 1
22001: PPUSH
22002: LD_INT 1
22004: PPUSH
22005: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22009: LD_INT 9
22011: PPUSH
22012: LD_OWVAR 2
22016: PPUSH
22017: CALL_OW 343
// uc_side := 9 ;
22021: LD_ADDR_OWVAR 20
22025: PUSH
22026: LD_INT 9
22028: ST_TO_ADDR
// uc_nation := 2 ;
22029: LD_ADDR_OWVAR 21
22033: PUSH
22034: LD_INT 2
22036: ST_TO_ADDR
// hc_name := Dark Warrior ;
22037: LD_ADDR_OWVAR 26
22041: PUSH
22042: LD_STRING Dark Warrior
22044: ST_TO_ADDR
// hc_gallery :=  ;
22045: LD_ADDR_OWVAR 33
22049: PUSH
22050: LD_STRING 
22052: ST_TO_ADDR
// hc_noskilllimit := true ;
22053: LD_ADDR_OWVAR 76
22057: PUSH
22058: LD_INT 1
22060: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22061: LD_ADDR_OWVAR 31
22065: PUSH
22066: LD_INT 30
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 30
22074: PUSH
22075: LD_INT 30
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: ST_TO_ADDR
// un := CreateHuman ;
22084: LD_ADDR_VAR 0 3
22088: PUSH
22089: CALL_OW 44
22093: ST_TO_ADDR
// hc_noskilllimit := false ;
22094: LD_ADDR_OWVAR 76
22098: PUSH
22099: LD_INT 0
22101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22102: LD_VAR 0 3
22106: PPUSH
22107: LD_INT 1
22109: PPUSH
22110: CALL_OW 51
// p := 0 ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_INT 0
22121: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22122: LD_INT 35
22124: PPUSH
22125: CALL_OW 67
// p := p + 1 ;
22129: LD_ADDR_VAR 0 2
22133: PUSH
22134: LD_VAR 0 2
22138: PUSH
22139: LD_INT 1
22141: PLUS
22142: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22143: LD_VAR 0 3
22147: PPUSH
22148: CALL_OW 256
22152: PUSH
22153: LD_INT 1000
22155: LESS
22156: IFFALSE 22170
// SetLives ( un , 1000 ) ;
22158: LD_VAR 0 3
22162: PPUSH
22163: LD_INT 1000
22165: PPUSH
22166: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22170: LD_VAR 0 3
22174: PPUSH
22175: LD_INT 81
22177: PUSH
22178: LD_OWVAR 2
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 91
22189: PUSH
22190: LD_VAR 0 3
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PPUSH
22207: CALL_OW 69
22211: PPUSH
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 74
22221: PPUSH
22222: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
22226: LD_VAR 0 2
22230: PUSH
22231: LD_INT 60
22233: GREATER
22234: PUSH
22235: LD_VAR 0 3
22239: PPUSH
22240: CALL_OW 301
22244: OR
22245: IFFALSE 22122
// if un then
22247: LD_VAR 0 3
22251: IFFALSE 22262
// RemoveUnit ( un ) ;
22253: LD_VAR 0 3
22257: PPUSH
22258: CALL_OW 64
// end ; end_of_file
22262: PPOPN 3
22264: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22265: LD_INT 0
22267: PPUSH
22268: PPUSH
22269: PPUSH
22270: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 264
22280: PUSH
22281: LD_EXP 30
22285: EQUAL
22286: IFFALSE 22358
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22288: LD_INT 68
22290: PPUSH
22291: LD_VAR 0 1
22295: PPUSH
22296: CALL_OW 255
22300: PPUSH
22301: CALL_OW 321
22305: PUSH
22306: LD_INT 2
22308: EQUAL
22309: IFFALSE 22321
// eff := 70 else
22311: LD_ADDR_VAR 0 4
22315: PUSH
22316: LD_INT 70
22318: ST_TO_ADDR
22319: GO 22329
// eff := 30 ;
22321: LD_ADDR_VAR 0 4
22325: PUSH
22326: LD_INT 30
22328: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 250
22338: PPUSH
22339: LD_VAR 0 1
22343: PPUSH
22344: CALL_OW 251
22348: PPUSH
22349: LD_VAR 0 4
22353: PPUSH
22354: CALL_OW 495
// end ; end ;
22358: LD_VAR 0 2
22362: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22363: LD_INT 0
22365: PPUSH
// end ;
22366: LD_VAR 0 4
22370: RET
// export function SOS_Command ( cmd ) ; begin
22371: LD_INT 0
22373: PPUSH
// end ;
22374: LD_VAR 0 2
22378: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22379: LD_VAR 0 1
22383: PUSH
22384: LD_INT 254
22386: EQUAL
22387: PUSH
22388: LD_VAR 0 2
22392: PPUSH
22393: CALL_OW 264
22397: PUSH
22398: LD_EXP 28
22402: EQUAL
22403: AND
22404: PUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: CALL_OW 263
22414: PUSH
22415: LD_INT 3
22417: EQUAL
22418: AND
22419: IFFALSE 22430
// DestroyUnit ( selectedUnit ) ;
22421: LD_VAR 0 3
22425: PPUSH
22426: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22430: LD_VAR 0 1
22434: PUSH
22435: LD_INT 255
22437: EQUAL
22438: PUSH
22439: LD_VAR 0 2
22443: PPUSH
22444: CALL_OW 264
22448: PUSH
22449: LD_INT 14
22451: PUSH
22452: LD_INT 53
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: IN
22459: AND
22460: PUSH
22461: LD_VAR 0 4
22465: PPUSH
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 488
22475: AND
22476: IFFALSE 22500
// CutTreeXYR ( unit , x , y , 12 ) ;
22478: LD_VAR 0 2
22482: PPUSH
22483: LD_VAR 0 4
22487: PPUSH
22488: LD_VAR 0 5
22492: PPUSH
22493: LD_INT 12
22495: PPUSH
22496: CALL 22503 0 4
// end ;
22500: PPOPN 5
22502: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22503: LD_INT 0
22505: PPUSH
22506: PPUSH
22507: PPUSH
22508: PPUSH
22509: PPUSH
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22514: LD_VAR 0 1
22518: NOT
22519: PUSH
22520: LD_VAR 0 2
22524: PPUSH
22525: LD_VAR 0 3
22529: PPUSH
22530: CALL_OW 488
22534: NOT
22535: OR
22536: PUSH
22537: LD_VAR 0 4
22541: NOT
22542: OR
22543: IFFALSE 22547
// exit ;
22545: GO 22887
// list := [ ] ;
22547: LD_ADDR_VAR 0 13
22551: PUSH
22552: EMPTY
22553: ST_TO_ADDR
// if x - r < 0 then
22554: LD_VAR 0 2
22558: PUSH
22559: LD_VAR 0 4
22563: MINUS
22564: PUSH
22565: LD_INT 0
22567: LESS
22568: IFFALSE 22580
// min_x := 0 else
22570: LD_ADDR_VAR 0 7
22574: PUSH
22575: LD_INT 0
22577: ST_TO_ADDR
22578: GO 22596
// min_x := x - r ;
22580: LD_ADDR_VAR 0 7
22584: PUSH
22585: LD_VAR 0 2
22589: PUSH
22590: LD_VAR 0 4
22594: MINUS
22595: ST_TO_ADDR
// if y - r < 0 then
22596: LD_VAR 0 3
22600: PUSH
22601: LD_VAR 0 4
22605: MINUS
22606: PUSH
22607: LD_INT 0
22609: LESS
22610: IFFALSE 22622
// min_y := 0 else
22612: LD_ADDR_VAR 0 8
22616: PUSH
22617: LD_INT 0
22619: ST_TO_ADDR
22620: GO 22638
// min_y := y - r ;
22622: LD_ADDR_VAR 0 8
22626: PUSH
22627: LD_VAR 0 3
22631: PUSH
22632: LD_VAR 0 4
22636: MINUS
22637: ST_TO_ADDR
// max_x := x + r ;
22638: LD_ADDR_VAR 0 9
22642: PUSH
22643: LD_VAR 0 2
22647: PUSH
22648: LD_VAR 0 4
22652: PLUS
22653: ST_TO_ADDR
// max_y := y + r ;
22654: LD_ADDR_VAR 0 10
22658: PUSH
22659: LD_VAR 0 3
22663: PUSH
22664: LD_VAR 0 4
22668: PLUS
22669: ST_TO_ADDR
// for _x = min_x to max_x do
22670: LD_ADDR_VAR 0 11
22674: PUSH
22675: DOUBLE
22676: LD_VAR 0 7
22680: DEC
22681: ST_TO_ADDR
22682: LD_VAR 0 9
22686: PUSH
22687: FOR_TO
22688: IFFALSE 22805
// for _y = min_y to max_y do
22690: LD_ADDR_VAR 0 12
22694: PUSH
22695: DOUBLE
22696: LD_VAR 0 8
22700: DEC
22701: ST_TO_ADDR
22702: LD_VAR 0 10
22706: PUSH
22707: FOR_TO
22708: IFFALSE 22801
// begin if not ValidHex ( _x , _y ) then
22710: LD_VAR 0 11
22714: PPUSH
22715: LD_VAR 0 12
22719: PPUSH
22720: CALL_OW 488
22724: NOT
22725: IFFALSE 22729
// continue ;
22727: GO 22707
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22729: LD_VAR 0 11
22733: PPUSH
22734: LD_VAR 0 12
22738: PPUSH
22739: CALL_OW 351
22743: PUSH
22744: LD_VAR 0 11
22748: PPUSH
22749: LD_VAR 0 12
22753: PPUSH
22754: CALL_OW 554
22758: AND
22759: IFFALSE 22799
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22761: LD_ADDR_VAR 0 13
22765: PUSH
22766: LD_VAR 0 13
22770: PPUSH
22771: LD_VAR 0 13
22775: PUSH
22776: LD_INT 1
22778: PLUS
22779: PPUSH
22780: LD_VAR 0 11
22784: PUSH
22785: LD_VAR 0 12
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PPUSH
22794: CALL_OW 2
22798: ST_TO_ADDR
// end ;
22799: GO 22707
22801: POP
22802: POP
22803: GO 22687
22805: POP
22806: POP
// if not list then
22807: LD_VAR 0 13
22811: NOT
22812: IFFALSE 22816
// exit ;
22814: GO 22887
// for i in list do
22816: LD_ADDR_VAR 0 6
22820: PUSH
22821: LD_VAR 0 13
22825: PUSH
22826: FOR_IN
22827: IFFALSE 22885
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22829: LD_VAR 0 1
22833: PPUSH
22834: LD_STRING M
22836: PUSH
22837: LD_VAR 0 6
22841: PUSH
22842: LD_INT 1
22844: ARRAY
22845: PUSH
22846: LD_VAR 0 6
22850: PUSH
22851: LD_INT 2
22853: ARRAY
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 0
22860: PUSH
22861: LD_INT 0
22863: PUSH
22864: LD_INT 0
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: PPUSH
22879: CALL_OW 447
22883: GO 22826
22885: POP
22886: POP
// end ;
22887: LD_VAR 0 5
22891: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22892: LD_EXP 94
22896: NOT
22897: IFFALSE 22947
22899: GO 22901
22901: DISABLE
// begin initHack := true ;
22902: LD_ADDR_EXP 94
22906: PUSH
22907: LD_INT 1
22909: ST_TO_ADDR
// hackTanks := [ ] ;
22910: LD_ADDR_EXP 95
22914: PUSH
22915: EMPTY
22916: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22917: LD_ADDR_EXP 96
22921: PUSH
22922: EMPTY
22923: ST_TO_ADDR
// hackLimit := 3 ;
22924: LD_ADDR_EXP 97
22928: PUSH
22929: LD_INT 3
22931: ST_TO_ADDR
// hackDist := 12 ;
22932: LD_ADDR_EXP 98
22936: PUSH
22937: LD_INT 12
22939: ST_TO_ADDR
// hackCounter := [ ] ;
22940: LD_ADDR_EXP 99
22944: PUSH
22945: EMPTY
22946: ST_TO_ADDR
// end ;
22947: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22948: LD_EXP 94
22952: PUSH
22953: LD_INT 34
22955: PUSH
22956: LD_EXP 28
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PPUSH
22965: CALL_OW 69
22969: AND
22970: IFFALSE 23225
22972: GO 22974
22974: DISABLE
22975: LD_INT 0
22977: PPUSH
22978: PPUSH
// begin enable ;
22979: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22980: LD_ADDR_VAR 0 1
22984: PUSH
22985: LD_INT 34
22987: PUSH
22988: LD_EXP 28
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PPUSH
22997: CALL_OW 69
23001: PUSH
23002: FOR_IN
23003: IFFALSE 23223
// begin if not i in hackTanks then
23005: LD_VAR 0 1
23009: PUSH
23010: LD_EXP 95
23014: IN
23015: NOT
23016: IFFALSE 23099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23018: LD_ADDR_EXP 95
23022: PUSH
23023: LD_EXP 95
23027: PPUSH
23028: LD_EXP 95
23032: PUSH
23033: LD_INT 1
23035: PLUS
23036: PPUSH
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL_OW 1
23046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23047: LD_ADDR_EXP 96
23051: PUSH
23052: LD_EXP 96
23056: PPUSH
23057: LD_EXP 96
23061: PUSH
23062: LD_INT 1
23064: PLUS
23065: PPUSH
23066: EMPTY
23067: PPUSH
23068: CALL_OW 1
23072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23073: LD_ADDR_EXP 99
23077: PUSH
23078: LD_EXP 99
23082: PPUSH
23083: LD_EXP 99
23087: PUSH
23088: LD_INT 1
23090: PLUS
23091: PPUSH
23092: EMPTY
23093: PPUSH
23094: CALL_OW 1
23098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 302
23108: NOT
23109: IFFALSE 23122
// begin HackUnlinkAll ( i ) ;
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL 23228 0 1
// continue ;
23120: GO 23002
// end ; HackCheckCapturedStatus ( i ) ;
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL 23671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23131: LD_ADDR_VAR 0 2
23135: PUSH
23136: LD_INT 81
23138: PUSH
23139: LD_VAR 0 1
23143: PPUSH
23144: CALL_OW 255
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 33
23155: PUSH
23156: LD_INT 3
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 91
23165: PUSH
23166: LD_VAR 0 1
23170: PUSH
23171: LD_EXP 98
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 50
23183: PUSH
23184: EMPTY
23185: LIST
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: PPUSH
23193: CALL_OW 69
23197: ST_TO_ADDR
// if not tmp then
23198: LD_VAR 0 2
23202: NOT
23203: IFFALSE 23207
// continue ;
23205: GO 23002
// HackLink ( i , tmp ) ;
23207: LD_VAR 0 1
23211: PPUSH
23212: LD_VAR 0 2
23216: PPUSH
23217: CALL 23364 0 2
// end ;
23221: GO 23002
23223: POP
23224: POP
// end ;
23225: PPOPN 2
23227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23228: LD_INT 0
23230: PPUSH
23231: PPUSH
23232: PPUSH
// if not hack in hackTanks then
23233: LD_VAR 0 1
23237: PUSH
23238: LD_EXP 95
23242: IN
23243: NOT
23244: IFFALSE 23248
// exit ;
23246: GO 23359
// index := GetElementIndex ( hackTanks , hack ) ;
23248: LD_ADDR_VAR 0 4
23252: PUSH
23253: LD_EXP 95
23257: PPUSH
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL 28668 0 2
23267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23268: LD_EXP 96
23272: PUSH
23273: LD_VAR 0 4
23277: ARRAY
23278: IFFALSE 23359
// begin for i in hackTanksCaptured [ index ] do
23280: LD_ADDR_VAR 0 3
23284: PUSH
23285: LD_EXP 96
23289: PUSH
23290: LD_VAR 0 4
23294: ARRAY
23295: PUSH
23296: FOR_IN
23297: IFFALSE 23323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23299: LD_VAR 0 3
23303: PUSH
23304: LD_INT 1
23306: ARRAY
23307: PPUSH
23308: LD_VAR 0 3
23312: PUSH
23313: LD_INT 2
23315: ARRAY
23316: PPUSH
23317: CALL_OW 235
23321: GO 23296
23323: POP
23324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23325: LD_ADDR_EXP 96
23329: PUSH
23330: LD_EXP 96
23334: PPUSH
23335: LD_VAR 0 4
23339: PPUSH
23340: EMPTY
23341: PPUSH
23342: CALL_OW 1
23346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23347: LD_VAR 0 1
23351: PPUSH
23352: LD_INT 0
23354: PPUSH
23355: CALL_OW 505
// end ; end ;
23359: LD_VAR 0 2
23363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23364: LD_INT 0
23366: PPUSH
23367: PPUSH
23368: PPUSH
// if not hack in hackTanks or not vehicles then
23369: LD_VAR 0 1
23373: PUSH
23374: LD_EXP 95
23378: IN
23379: NOT
23380: PUSH
23381: LD_VAR 0 2
23385: NOT
23386: OR
23387: IFFALSE 23391
// exit ;
23389: GO 23666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_VAR 0 2
23405: PPUSH
23406: LD_INT 1
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL 29318 0 4
23416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23417: LD_ADDR_VAR 0 5
23421: PUSH
23422: LD_EXP 95
23426: PPUSH
23427: LD_VAR 0 1
23431: PPUSH
23432: CALL 28668 0 2
23436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23437: LD_EXP 96
23441: PUSH
23442: LD_VAR 0 5
23446: ARRAY
23447: PUSH
23448: LD_EXP 97
23452: LESS
23453: IFFALSE 23642
// begin for i := 1 to vehicles do
23455: LD_ADDR_VAR 0 4
23459: PUSH
23460: DOUBLE
23461: LD_INT 1
23463: DEC
23464: ST_TO_ADDR
23465: LD_VAR 0 2
23469: PUSH
23470: FOR_TO
23471: IFFALSE 23640
// begin if hackTanksCaptured [ index ] = hackLimit then
23473: LD_EXP 96
23477: PUSH
23478: LD_VAR 0 5
23482: ARRAY
23483: PUSH
23484: LD_EXP 97
23488: EQUAL
23489: IFFALSE 23493
// break ;
23491: GO 23640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23493: LD_ADDR_EXP 99
23497: PUSH
23498: LD_EXP 99
23502: PPUSH
23503: LD_VAR 0 5
23507: PPUSH
23508: LD_EXP 99
23512: PUSH
23513: LD_VAR 0 5
23517: ARRAY
23518: PUSH
23519: LD_INT 1
23521: PLUS
23522: PPUSH
23523: CALL_OW 1
23527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23528: LD_ADDR_EXP 96
23532: PUSH
23533: LD_EXP 96
23537: PPUSH
23538: LD_VAR 0 5
23542: PUSH
23543: LD_EXP 96
23547: PUSH
23548: LD_VAR 0 5
23552: ARRAY
23553: PUSH
23554: LD_INT 1
23556: PLUS
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: LD_VAR 0 2
23566: PUSH
23567: LD_VAR 0 4
23571: ARRAY
23572: PUSH
23573: LD_VAR 0 2
23577: PUSH
23578: LD_VAR 0 4
23582: ARRAY
23583: PPUSH
23584: CALL_OW 255
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PPUSH
23593: CALL 28883 0 3
23597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23598: LD_VAR 0 2
23602: PUSH
23603: LD_VAR 0 4
23607: ARRAY
23608: PPUSH
23609: LD_VAR 0 1
23613: PPUSH
23614: CALL_OW 255
23618: PPUSH
23619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23623: LD_VAR 0 2
23627: PUSH
23628: LD_VAR 0 4
23632: ARRAY
23633: PPUSH
23634: CALL_OW 141
// end ;
23638: GO 23470
23640: POP
23641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23642: LD_VAR 0 1
23646: PPUSH
23647: LD_EXP 96
23651: PUSH
23652: LD_VAR 0 5
23656: ARRAY
23657: PUSH
23658: LD_INT 0
23660: PLUS
23661: PPUSH
23662: CALL_OW 505
// end ;
23666: LD_VAR 0 3
23670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23671: LD_INT 0
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
// if not hack in hackTanks then
23677: LD_VAR 0 1
23681: PUSH
23682: LD_EXP 95
23686: IN
23687: NOT
23688: IFFALSE 23692
// exit ;
23690: GO 23932
// index := GetElementIndex ( hackTanks , hack ) ;
23692: LD_ADDR_VAR 0 4
23696: PUSH
23697: LD_EXP 95
23701: PPUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL 28668 0 2
23711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23712: LD_ADDR_VAR 0 3
23716: PUSH
23717: DOUBLE
23718: LD_EXP 96
23722: PUSH
23723: LD_VAR 0 4
23727: ARRAY
23728: INC
23729: ST_TO_ADDR
23730: LD_INT 1
23732: PUSH
23733: FOR_DOWNTO
23734: IFFALSE 23906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23736: LD_ADDR_VAR 0 5
23740: PUSH
23741: LD_EXP 96
23745: PUSH
23746: LD_VAR 0 4
23750: ARRAY
23751: PUSH
23752: LD_VAR 0 3
23756: ARRAY
23757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23758: LD_VAR 0 5
23762: PUSH
23763: LD_INT 1
23765: ARRAY
23766: PPUSH
23767: CALL_OW 302
23771: NOT
23772: PUSH
23773: LD_VAR 0 5
23777: PUSH
23778: LD_INT 1
23780: ARRAY
23781: PPUSH
23782: CALL_OW 255
23786: PUSH
23787: LD_VAR 0 1
23791: PPUSH
23792: CALL_OW 255
23796: NONEQUAL
23797: OR
23798: IFFALSE 23904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23800: LD_VAR 0 5
23804: PUSH
23805: LD_INT 1
23807: ARRAY
23808: PPUSH
23809: CALL_OW 305
23813: PUSH
23814: LD_VAR 0 5
23818: PUSH
23819: LD_INT 1
23821: ARRAY
23822: PPUSH
23823: CALL_OW 255
23827: PUSH
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 255
23837: EQUAL
23838: AND
23839: IFFALSE 23863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23841: LD_VAR 0 5
23845: PUSH
23846: LD_INT 1
23848: ARRAY
23849: PPUSH
23850: LD_VAR 0 5
23854: PUSH
23855: LD_INT 2
23857: ARRAY
23858: PPUSH
23859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23863: LD_ADDR_EXP 96
23867: PUSH
23868: LD_EXP 96
23872: PPUSH
23873: LD_VAR 0 4
23877: PPUSH
23878: LD_EXP 96
23882: PUSH
23883: LD_VAR 0 4
23887: ARRAY
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: CALL_OW 3
23898: PPUSH
23899: CALL_OW 1
23903: ST_TO_ADDR
// end ; end ;
23904: GO 23733
23906: POP
23907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_EXP 96
23917: PUSH
23918: LD_VAR 0 4
23922: ARRAY
23923: PUSH
23924: LD_INT 0
23926: PLUS
23927: PPUSH
23928: CALL_OW 505
// end ; end_of_file
23932: LD_VAR 0 2
23936: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23937: LD_INT 0
23939: PPUSH
23940: PPUSH
// if exist_mode then
23941: LD_VAR 0 2
23945: IFFALSE 23970
// unit := CreateCharacter ( prefix & ident ) else
23947: LD_ADDR_VAR 0 5
23951: PUSH
23952: LD_VAR 0 3
23956: PUSH
23957: LD_VAR 0 1
23961: STR
23962: PPUSH
23963: CALL_OW 34
23967: ST_TO_ADDR
23968: GO 23985
// unit := NewCharacter ( ident ) ;
23970: LD_ADDR_VAR 0 5
23974: PUSH
23975: LD_VAR 0 1
23979: PPUSH
23980: CALL_OW 25
23984: ST_TO_ADDR
// result := unit ;
23985: LD_ADDR_VAR 0 4
23989: PUSH
23990: LD_VAR 0 5
23994: ST_TO_ADDR
// end ;
23995: LD_VAR 0 4
23999: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24000: LD_INT 0
24002: PPUSH
24003: PPUSH
// if not side or not nation then
24004: LD_VAR 0 1
24008: NOT
24009: PUSH
24010: LD_VAR 0 2
24014: NOT
24015: OR
24016: IFFALSE 24020
// exit ;
24018: GO 24784
// case nation of nation_american :
24020: LD_VAR 0 2
24024: PUSH
24025: LD_INT 1
24027: DOUBLE
24028: EQUAL
24029: IFTRUE 24033
24031: GO 24247
24033: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24034: LD_ADDR_VAR 0 4
24038: PUSH
24039: LD_INT 35
24041: PUSH
24042: LD_INT 45
24044: PUSH
24045: LD_INT 46
24047: PUSH
24048: LD_INT 47
24050: PUSH
24051: LD_INT 82
24053: PUSH
24054: LD_INT 83
24056: PUSH
24057: LD_INT 84
24059: PUSH
24060: LD_INT 85
24062: PUSH
24063: LD_INT 86
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 6
24074: PUSH
24075: LD_INT 15
24077: PUSH
24078: LD_INT 16
24080: PUSH
24081: LD_INT 7
24083: PUSH
24084: LD_INT 12
24086: PUSH
24087: LD_INT 13
24089: PUSH
24090: LD_INT 10
24092: PUSH
24093: LD_INT 14
24095: PUSH
24096: LD_INT 20
24098: PUSH
24099: LD_INT 21
24101: PUSH
24102: LD_INT 22
24104: PUSH
24105: LD_INT 25
24107: PUSH
24108: LD_INT 32
24110: PUSH
24111: LD_INT 27
24113: PUSH
24114: LD_INT 36
24116: PUSH
24117: LD_INT 69
24119: PUSH
24120: LD_INT 39
24122: PUSH
24123: LD_INT 34
24125: PUSH
24126: LD_INT 40
24128: PUSH
24129: LD_INT 48
24131: PUSH
24132: LD_INT 49
24134: PUSH
24135: LD_INT 50
24137: PUSH
24138: LD_INT 51
24140: PUSH
24141: LD_INT 52
24143: PUSH
24144: LD_INT 53
24146: PUSH
24147: LD_INT 54
24149: PUSH
24150: LD_INT 55
24152: PUSH
24153: LD_INT 56
24155: PUSH
24156: LD_INT 57
24158: PUSH
24159: LD_INT 58
24161: PUSH
24162: LD_INT 59
24164: PUSH
24165: LD_INT 60
24167: PUSH
24168: LD_INT 61
24170: PUSH
24171: LD_INT 62
24173: PUSH
24174: LD_INT 80
24176: PUSH
24177: LD_INT 82
24179: PUSH
24180: LD_INT 83
24182: PUSH
24183: LD_INT 84
24185: PUSH
24186: LD_INT 85
24188: PUSH
24189: LD_INT 86
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: ST_TO_ADDR
24245: GO 24708
24247: LD_INT 2
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24477
24255: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24256: LD_ADDR_VAR 0 4
24260: PUSH
24261: LD_INT 35
24263: PUSH
24264: LD_INT 45
24266: PUSH
24267: LD_INT 46
24269: PUSH
24270: LD_INT 47
24272: PUSH
24273: LD_INT 82
24275: PUSH
24276: LD_INT 83
24278: PUSH
24279: LD_INT 84
24281: PUSH
24282: LD_INT 85
24284: PUSH
24285: LD_INT 87
24287: PUSH
24288: LD_INT 70
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 11
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 4
24302: PUSH
24303: LD_INT 5
24305: PUSH
24306: LD_INT 6
24308: PUSH
24309: LD_INT 15
24311: PUSH
24312: LD_INT 18
24314: PUSH
24315: LD_INT 7
24317: PUSH
24318: LD_INT 17
24320: PUSH
24321: LD_INT 8
24323: PUSH
24324: LD_INT 20
24326: PUSH
24327: LD_INT 21
24329: PUSH
24330: LD_INT 22
24332: PUSH
24333: LD_INT 72
24335: PUSH
24336: LD_INT 26
24338: PUSH
24339: LD_INT 69
24341: PUSH
24342: LD_INT 39
24344: PUSH
24345: LD_INT 40
24347: PUSH
24348: LD_INT 41
24350: PUSH
24351: LD_INT 42
24353: PUSH
24354: LD_INT 43
24356: PUSH
24357: LD_INT 48
24359: PUSH
24360: LD_INT 49
24362: PUSH
24363: LD_INT 50
24365: PUSH
24366: LD_INT 51
24368: PUSH
24369: LD_INT 52
24371: PUSH
24372: LD_INT 53
24374: PUSH
24375: LD_INT 54
24377: PUSH
24378: LD_INT 55
24380: PUSH
24381: LD_INT 56
24383: PUSH
24384: LD_INT 60
24386: PUSH
24387: LD_INT 61
24389: PUSH
24390: LD_INT 62
24392: PUSH
24393: LD_INT 66
24395: PUSH
24396: LD_INT 67
24398: PUSH
24399: LD_INT 68
24401: PUSH
24402: LD_INT 81
24404: PUSH
24405: LD_INT 82
24407: PUSH
24408: LD_INT 83
24410: PUSH
24411: LD_INT 84
24413: PUSH
24414: LD_INT 85
24416: PUSH
24417: LD_INT 87
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: ST_TO_ADDR
24475: GO 24708
24477: LD_INT 3
24479: DOUBLE
24480: EQUAL
24481: IFTRUE 24485
24483: GO 24707
24485: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24486: LD_ADDR_VAR 0 4
24490: PUSH
24491: LD_INT 46
24493: PUSH
24494: LD_INT 47
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 82
24505: PUSH
24506: LD_INT 83
24508: PUSH
24509: LD_INT 84
24511: PUSH
24512: LD_INT 85
24514: PUSH
24515: LD_INT 86
24517: PUSH
24518: LD_INT 11
24520: PUSH
24521: LD_INT 9
24523: PUSH
24524: LD_INT 20
24526: PUSH
24527: LD_INT 19
24529: PUSH
24530: LD_INT 21
24532: PUSH
24533: LD_INT 24
24535: PUSH
24536: LD_INT 22
24538: PUSH
24539: LD_INT 25
24541: PUSH
24542: LD_INT 28
24544: PUSH
24545: LD_INT 29
24547: PUSH
24548: LD_INT 30
24550: PUSH
24551: LD_INT 31
24553: PUSH
24554: LD_INT 37
24556: PUSH
24557: LD_INT 38
24559: PUSH
24560: LD_INT 32
24562: PUSH
24563: LD_INT 27
24565: PUSH
24566: LD_INT 33
24568: PUSH
24569: LD_INT 69
24571: PUSH
24572: LD_INT 39
24574: PUSH
24575: LD_INT 34
24577: PUSH
24578: LD_INT 40
24580: PUSH
24581: LD_INT 71
24583: PUSH
24584: LD_INT 23
24586: PUSH
24587: LD_INT 44
24589: PUSH
24590: LD_INT 48
24592: PUSH
24593: LD_INT 49
24595: PUSH
24596: LD_INT 50
24598: PUSH
24599: LD_INT 51
24601: PUSH
24602: LD_INT 52
24604: PUSH
24605: LD_INT 53
24607: PUSH
24608: LD_INT 54
24610: PUSH
24611: LD_INT 55
24613: PUSH
24614: LD_INT 56
24616: PUSH
24617: LD_INT 57
24619: PUSH
24620: LD_INT 58
24622: PUSH
24623: LD_INT 59
24625: PUSH
24626: LD_INT 63
24628: PUSH
24629: LD_INT 64
24631: PUSH
24632: LD_INT 65
24634: PUSH
24635: LD_INT 82
24637: PUSH
24638: LD_INT 83
24640: PUSH
24641: LD_INT 84
24643: PUSH
24644: LD_INT 85
24646: PUSH
24647: LD_INT 86
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: ST_TO_ADDR
24705: GO 24708
24707: POP
// if state > - 1 and state < 3 then
24708: LD_VAR 0 3
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: GREATER
24717: PUSH
24718: LD_VAR 0 3
24722: PUSH
24723: LD_INT 3
24725: LESS
24726: AND
24727: IFFALSE 24784
// for i in result do
24729: LD_ADDR_VAR 0 5
24733: PUSH
24734: LD_VAR 0 4
24738: PUSH
24739: FOR_IN
24740: IFFALSE 24782
// if GetTech ( i , side ) <> state then
24742: LD_VAR 0 5
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 321
24756: PUSH
24757: LD_VAR 0 3
24761: NONEQUAL
24762: IFFALSE 24780
// result := result diff i ;
24764: LD_ADDR_VAR 0 4
24768: PUSH
24769: LD_VAR 0 4
24773: PUSH
24774: LD_VAR 0 5
24778: DIFF
24779: ST_TO_ADDR
24780: GO 24739
24782: POP
24783: POP
// end ;
24784: LD_VAR 0 4
24788: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
// result := true ;
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 1
24801: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24802: LD_ADDR_VAR 0 5
24806: PUSH
24807: LD_VAR 0 2
24811: PPUSH
24812: CALL_OW 480
24816: ST_TO_ADDR
// if not tmp then
24817: LD_VAR 0 5
24821: NOT
24822: IFFALSE 24826
// exit ;
24824: GO 24875
// for i in tmp do
24826: LD_ADDR_VAR 0 4
24830: PUSH
24831: LD_VAR 0 5
24835: PUSH
24836: FOR_IN
24837: IFFALSE 24873
// if GetTech ( i , side ) <> state_researched then
24839: LD_VAR 0 4
24843: PPUSH
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 321
24853: PUSH
24854: LD_INT 2
24856: NONEQUAL
24857: IFFALSE 24871
// begin result := false ;
24859: LD_ADDR_VAR 0 3
24863: PUSH
24864: LD_INT 0
24866: ST_TO_ADDR
// exit ;
24867: POP
24868: POP
24869: GO 24875
// end ;
24871: GO 24836
24873: POP
24874: POP
// end ;
24875: LD_VAR 0 3
24879: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24880: LD_INT 0
24882: PPUSH
24883: PPUSH
24884: PPUSH
24885: PPUSH
24886: PPUSH
24887: PPUSH
24888: PPUSH
24889: PPUSH
24890: PPUSH
24891: PPUSH
24892: PPUSH
24893: PPUSH
24894: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24895: LD_VAR 0 1
24899: NOT
24900: PUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 257
24910: PUSH
24911: LD_INT 9
24913: NONEQUAL
24914: OR
24915: IFFALSE 24919
// exit ;
24917: GO 25492
// side := GetSide ( unit ) ;
24919: LD_ADDR_VAR 0 9
24923: PUSH
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 255
24933: ST_TO_ADDR
// tech_space := tech_spacanom ;
24934: LD_ADDR_VAR 0 12
24938: PUSH
24939: LD_INT 29
24941: ST_TO_ADDR
// tech_time := tech_taurad ;
24942: LD_ADDR_VAR 0 13
24946: PUSH
24947: LD_INT 28
24949: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24950: LD_ADDR_VAR 0 11
24954: PUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 310
24964: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24965: LD_VAR 0 11
24969: PPUSH
24970: CALL_OW 247
24974: PUSH
24975: LD_INT 2
24977: EQUAL
24978: IFFALSE 24982
// exit ;
24980: GO 25492
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24982: LD_ADDR_VAR 0 8
24986: PUSH
24987: LD_INT 81
24989: PUSH
24990: LD_VAR 0 9
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: LD_INT 21
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 69
25024: ST_TO_ADDR
// if not tmp then
25025: LD_VAR 0 8
25029: NOT
25030: IFFALSE 25034
// exit ;
25032: GO 25492
// if in_unit then
25034: LD_VAR 0 11
25038: IFFALSE 25062
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25040: LD_ADDR_VAR 0 10
25044: PUSH
25045: LD_VAR 0 8
25049: PPUSH
25050: LD_VAR 0 11
25054: PPUSH
25055: CALL_OW 74
25059: ST_TO_ADDR
25060: GO 25082
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25062: LD_ADDR_VAR 0 10
25066: PUSH
25067: LD_VAR 0 8
25071: PPUSH
25072: LD_VAR 0 1
25076: PPUSH
25077: CALL_OW 74
25081: ST_TO_ADDR
// if not enemy then
25082: LD_VAR 0 10
25086: NOT
25087: IFFALSE 25091
// exit ;
25089: GO 25492
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25091: LD_VAR 0 11
25095: PUSH
25096: LD_VAR 0 11
25100: PPUSH
25101: LD_VAR 0 10
25105: PPUSH
25106: CALL_OW 296
25110: PUSH
25111: LD_INT 13
25113: GREATER
25114: AND
25115: PUSH
25116: LD_VAR 0 1
25120: PPUSH
25121: LD_VAR 0 10
25125: PPUSH
25126: CALL_OW 296
25130: PUSH
25131: LD_INT 12
25133: GREATER
25134: OR
25135: IFFALSE 25139
// exit ;
25137: GO 25492
// missile := [ 1 ] ;
25139: LD_ADDR_VAR 0 14
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25150: LD_VAR 0 9
25154: PPUSH
25155: LD_VAR 0 12
25159: PPUSH
25160: CALL_OW 325
25164: IFFALSE 25193
// missile := Insert ( missile , missile + 1 , 2 ) ;
25166: LD_ADDR_VAR 0 14
25170: PUSH
25171: LD_VAR 0 14
25175: PPUSH
25176: LD_VAR 0 14
25180: PUSH
25181: LD_INT 1
25183: PLUS
25184: PPUSH
25185: LD_INT 2
25187: PPUSH
25188: CALL_OW 2
25192: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25193: LD_VAR 0 9
25197: PPUSH
25198: LD_VAR 0 13
25202: PPUSH
25203: CALL_OW 325
25207: PUSH
25208: LD_VAR 0 10
25212: PPUSH
25213: CALL_OW 255
25217: PPUSH
25218: LD_VAR 0 13
25222: PPUSH
25223: CALL_OW 325
25227: NOT
25228: AND
25229: IFFALSE 25258
// missile := Insert ( missile , missile + 1 , 3 ) ;
25231: LD_ADDR_VAR 0 14
25235: PUSH
25236: LD_VAR 0 14
25240: PPUSH
25241: LD_VAR 0 14
25245: PUSH
25246: LD_INT 1
25248: PLUS
25249: PPUSH
25250: LD_INT 3
25252: PPUSH
25253: CALL_OW 2
25257: ST_TO_ADDR
// if missile < 2 then
25258: LD_VAR 0 14
25262: PUSH
25263: LD_INT 2
25265: LESS
25266: IFFALSE 25270
// exit ;
25268: GO 25492
// x := GetX ( enemy ) ;
25270: LD_ADDR_VAR 0 4
25274: PUSH
25275: LD_VAR 0 10
25279: PPUSH
25280: CALL_OW 250
25284: ST_TO_ADDR
// y := GetY ( enemy ) ;
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: LD_VAR 0 10
25294: PPUSH
25295: CALL_OW 251
25299: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25300: LD_ADDR_VAR 0 6
25304: PUSH
25305: LD_VAR 0 4
25309: PUSH
25310: LD_INT 1
25312: NEG
25313: PPUSH
25314: LD_INT 1
25316: PPUSH
25317: CALL_OW 12
25321: PLUS
25322: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25323: LD_ADDR_VAR 0 7
25327: PUSH
25328: LD_VAR 0 5
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PPUSH
25337: LD_INT 1
25339: PPUSH
25340: CALL_OW 12
25344: PLUS
25345: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25346: LD_VAR 0 6
25350: PPUSH
25351: LD_VAR 0 7
25355: PPUSH
25356: CALL_OW 488
25360: NOT
25361: IFFALSE 25383
// begin _x := x ;
25363: LD_ADDR_VAR 0 6
25367: PUSH
25368: LD_VAR 0 4
25372: ST_TO_ADDR
// _y := y ;
25373: LD_ADDR_VAR 0 7
25377: PUSH
25378: LD_VAR 0 5
25382: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_INT 1
25390: PPUSH
25391: LD_VAR 0 14
25395: PPUSH
25396: CALL_OW 12
25400: ST_TO_ADDR
// case i of 1 :
25401: LD_VAR 0 3
25405: PUSH
25406: LD_INT 1
25408: DOUBLE
25409: EQUAL
25410: IFTRUE 25414
25412: GO 25431
25414: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25415: LD_VAR 0 1
25419: PPUSH
25420: LD_VAR 0 10
25424: PPUSH
25425: CALL_OW 115
25429: GO 25492
25431: LD_INT 2
25433: DOUBLE
25434: EQUAL
25435: IFTRUE 25439
25437: GO 25461
25439: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_VAR 0 6
25449: PPUSH
25450: LD_VAR 0 7
25454: PPUSH
25455: CALL_OW 153
25459: GO 25492
25461: LD_INT 3
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25491
25469: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_VAR 0 6
25479: PPUSH
25480: LD_VAR 0 7
25484: PPUSH
25485: CALL_OW 154
25489: GO 25492
25491: POP
// end ;
25492: LD_VAR 0 2
25496: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25497: LD_INT 0
25499: PPUSH
25500: PPUSH
25501: PPUSH
25502: PPUSH
25503: PPUSH
25504: PPUSH
// if not unit or not building then
25505: LD_VAR 0 1
25509: NOT
25510: PUSH
25511: LD_VAR 0 2
25515: NOT
25516: OR
25517: IFFALSE 25521
// exit ;
25519: GO 25679
// x := GetX ( building ) ;
25521: LD_ADDR_VAR 0 5
25525: PUSH
25526: LD_VAR 0 2
25530: PPUSH
25531: CALL_OW 250
25535: ST_TO_ADDR
// y := GetY ( building ) ;
25536: LD_ADDR_VAR 0 6
25540: PUSH
25541: LD_VAR 0 2
25545: PPUSH
25546: CALL_OW 251
25550: ST_TO_ADDR
// for i = 0 to 5 do
25551: LD_ADDR_VAR 0 4
25555: PUSH
25556: DOUBLE
25557: LD_INT 0
25559: DEC
25560: ST_TO_ADDR
25561: LD_INT 5
25563: PUSH
25564: FOR_TO
25565: IFFALSE 25677
// begin _x := ShiftX ( x , i , 3 ) ;
25567: LD_ADDR_VAR 0 7
25571: PUSH
25572: LD_VAR 0 5
25576: PPUSH
25577: LD_VAR 0 4
25581: PPUSH
25582: LD_INT 3
25584: PPUSH
25585: CALL_OW 272
25589: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25590: LD_ADDR_VAR 0 8
25594: PUSH
25595: LD_VAR 0 6
25599: PPUSH
25600: LD_VAR 0 4
25604: PPUSH
25605: LD_INT 3
25607: PPUSH
25608: CALL_OW 273
25612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25613: LD_VAR 0 7
25617: PPUSH
25618: LD_VAR 0 8
25622: PPUSH
25623: CALL_OW 488
25627: NOT
25628: IFFALSE 25632
// continue ;
25630: GO 25564
// if HexInfo ( _x , _y ) = 0 then
25632: LD_VAR 0 7
25636: PPUSH
25637: LD_VAR 0 8
25641: PPUSH
25642: CALL_OW 428
25646: PUSH
25647: LD_INT 0
25649: EQUAL
25650: IFFALSE 25675
// begin ComMoveXY ( unit , _x , _y ) ;
25652: LD_VAR 0 1
25656: PPUSH
25657: LD_VAR 0 7
25661: PPUSH
25662: LD_VAR 0 8
25666: PPUSH
25667: CALL_OW 111
// exit ;
25671: POP
25672: POP
25673: GO 25679
// end ; end ;
25675: GO 25564
25677: POP
25678: POP
// end ;
25679: LD_VAR 0 3
25683: RET
// export function ScanBase ( side , base_area ) ; begin
25684: LD_INT 0
25686: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25687: LD_ADDR_VAR 0 3
25691: PUSH
25692: LD_VAR 0 2
25696: PPUSH
25697: LD_INT 81
25699: PUSH
25700: LD_VAR 0 1
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 70
25713: ST_TO_ADDR
// end ;
25714: LD_VAR 0 3
25718: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25719: LD_INT 0
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
// result := false ;
25725: LD_ADDR_VAR 0 2
25729: PUSH
25730: LD_INT 0
25732: ST_TO_ADDR
// side := GetSide ( unit ) ;
25733: LD_ADDR_VAR 0 3
25737: PUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: CALL_OW 255
25747: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25748: LD_ADDR_VAR 0 4
25752: PUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: CALL_OW 248
25762: ST_TO_ADDR
// case nat of 1 :
25763: LD_VAR 0 4
25767: PUSH
25768: LD_INT 1
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25787
25776: POP
// tech := tech_lassight ; 2 :
25777: LD_ADDR_VAR 0 5
25781: PUSH
25782: LD_INT 12
25784: ST_TO_ADDR
25785: GO 25826
25787: LD_INT 2
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25806
25795: POP
// tech := tech_mortar ; 3 :
25796: LD_ADDR_VAR 0 5
25800: PUSH
25801: LD_INT 41
25803: ST_TO_ADDR
25804: GO 25826
25806: LD_INT 3
25808: DOUBLE
25809: EQUAL
25810: IFTRUE 25814
25812: GO 25825
25814: POP
// tech := tech_bazooka ; end ;
25815: LD_ADDR_VAR 0 5
25819: PUSH
25820: LD_INT 44
25822: ST_TO_ADDR
25823: GO 25826
25825: POP
// if Researched ( side , tech ) then
25826: LD_VAR 0 3
25830: PPUSH
25831: LD_VAR 0 5
25835: PPUSH
25836: CALL_OW 325
25840: IFFALSE 25867
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25842: LD_ADDR_VAR 0 2
25846: PUSH
25847: LD_INT 5
25849: PUSH
25850: LD_INT 8
25852: PUSH
25853: LD_INT 9
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: PUSH
25861: LD_VAR 0 4
25865: ARRAY
25866: ST_TO_ADDR
// end ;
25867: LD_VAR 0 2
25871: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25872: LD_INT 0
25874: PPUSH
25875: PPUSH
25876: PPUSH
// if not mines then
25877: LD_VAR 0 2
25881: NOT
25882: IFFALSE 25886
// exit ;
25884: GO 26030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25886: LD_ADDR_VAR 0 5
25890: PUSH
25891: LD_INT 81
25893: PUSH
25894: LD_VAR 0 1
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 3
25905: PUSH
25906: LD_INT 21
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PPUSH
25924: CALL_OW 69
25928: ST_TO_ADDR
// for i in mines do
25929: LD_ADDR_VAR 0 4
25933: PUSH
25934: LD_VAR 0 2
25938: PUSH
25939: FOR_IN
25940: IFFALSE 26028
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25942: LD_VAR 0 4
25946: PUSH
25947: LD_INT 1
25949: ARRAY
25950: PPUSH
25951: LD_VAR 0 4
25955: PUSH
25956: LD_INT 2
25958: ARRAY
25959: PPUSH
25960: CALL_OW 458
25964: NOT
25965: IFFALSE 25969
// continue ;
25967: GO 25939
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25969: LD_VAR 0 4
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: LD_VAR 0 4
25982: PUSH
25983: LD_INT 2
25985: ARRAY
25986: PPUSH
25987: CALL_OW 428
25991: PUSH
25992: LD_VAR 0 5
25996: IN
25997: IFFALSE 26026
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25999: LD_VAR 0 4
26003: PUSH
26004: LD_INT 1
26006: ARRAY
26007: PPUSH
26008: LD_VAR 0 4
26012: PUSH
26013: LD_INT 2
26015: ARRAY
26016: PPUSH
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 456
// end ;
26026: GO 25939
26028: POP
26029: POP
// end ;
26030: LD_VAR 0 3
26034: RET
// export function Count ( array ) ; var i ; begin
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
// result := 0 ;
26039: LD_ADDR_VAR 0 2
26043: PUSH
26044: LD_INT 0
26046: ST_TO_ADDR
// for i in array do
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_VAR 0 1
26056: PUSH
26057: FOR_IN
26058: IFFALSE 26082
// if i then
26060: LD_VAR 0 3
26064: IFFALSE 26080
// result := result + 1 ;
26066: LD_ADDR_VAR 0 2
26070: PUSH
26071: LD_VAR 0 2
26075: PUSH
26076: LD_INT 1
26078: PLUS
26079: ST_TO_ADDR
26080: GO 26057
26082: POP
26083: POP
// end ;
26084: LD_VAR 0 2
26088: RET
// export function IsEmpty ( building ) ; begin
26089: LD_INT 0
26091: PPUSH
// if not building then
26092: LD_VAR 0 1
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26144
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_VAR 0 1
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_VAR 0 1
26118: PPUSH
26119: CALL_OW 255
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 58
26130: PUSH
26131: EMPTY
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: IN
26143: ST_TO_ADDR
// end ;
26144: LD_VAR 0 2
26148: RET
// export function IsNotFull ( building ) ; begin
26149: LD_INT 0
26151: PPUSH
// if not building then
26152: LD_VAR 0 1
26156: NOT
26157: IFFALSE 26161
// exit ;
26159: GO 26180
// result := UnitsInside ( building ) < 6 ;
26161: LD_ADDR_VAR 0 2
26165: PUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: CALL_OW 313
26175: PUSH
26176: LD_INT 6
26178: LESS
26179: ST_TO_ADDR
// end ;
26180: LD_VAR 0 2
26184: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26185: LD_INT 0
26187: PPUSH
26188: PPUSH
26189: PPUSH
26190: PPUSH
// tmp := [ ] ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: EMPTY
26197: ST_TO_ADDR
// list := [ ] ;
26198: LD_ADDR_VAR 0 5
26202: PUSH
26203: EMPTY
26204: ST_TO_ADDR
// for i = 16 to 25 do
26205: LD_ADDR_VAR 0 4
26209: PUSH
26210: DOUBLE
26211: LD_INT 16
26213: DEC
26214: ST_TO_ADDR
26215: LD_INT 25
26217: PUSH
26218: FOR_TO
26219: IFFALSE 26292
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26221: LD_ADDR_VAR 0 3
26225: PUSH
26226: LD_VAR 0 3
26230: PUSH
26231: LD_INT 22
26233: PUSH
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 255
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 91
26250: PUSH
26251: LD_VAR 0 1
26255: PUSH
26256: LD_INT 6
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 30
26266: PUSH
26267: LD_VAR 0 4
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: PPUSH
26284: CALL_OW 69
26288: ADD
26289: ST_TO_ADDR
26290: GO 26218
26292: POP
26293: POP
// for i = 1 to tmp do
26294: LD_ADDR_VAR 0 4
26298: PUSH
26299: DOUBLE
26300: LD_INT 1
26302: DEC
26303: ST_TO_ADDR
26304: LD_VAR 0 3
26308: PUSH
26309: FOR_TO
26310: IFFALSE 26398
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26312: LD_ADDR_VAR 0 5
26316: PUSH
26317: LD_VAR 0 5
26321: PUSH
26322: LD_VAR 0 3
26326: PUSH
26327: LD_VAR 0 4
26331: ARRAY
26332: PPUSH
26333: CALL_OW 266
26337: PUSH
26338: LD_VAR 0 3
26342: PUSH
26343: LD_VAR 0 4
26347: ARRAY
26348: PPUSH
26349: CALL_OW 250
26353: PUSH
26354: LD_VAR 0 3
26358: PUSH
26359: LD_VAR 0 4
26363: ARRAY
26364: PPUSH
26365: CALL_OW 251
26369: PUSH
26370: LD_VAR 0 3
26374: PUSH
26375: LD_VAR 0 4
26379: ARRAY
26380: PPUSH
26381: CALL_OW 254
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: ADD
26395: ST_TO_ADDR
26396: GO 26309
26398: POP
26399: POP
// result := list ;
26400: LD_ADDR_VAR 0 2
26404: PUSH
26405: LD_VAR 0 5
26409: ST_TO_ADDR
// end ;
26410: LD_VAR 0 2
26414: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26415: LD_INT 0
26417: PPUSH
26418: PPUSH
26419: PPUSH
26420: PPUSH
26421: PPUSH
26422: PPUSH
26423: PPUSH
// if not factory then
26424: LD_VAR 0 1
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 27026
// if control = control_apeman then
26433: LD_VAR 0 4
26437: PUSH
26438: LD_INT 5
26440: EQUAL
26441: IFFALSE 26550
// begin tmp := UnitsInside ( factory ) ;
26443: LD_ADDR_VAR 0 8
26447: PUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 313
26457: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26458: LD_VAR 0 8
26462: PPUSH
26463: LD_INT 25
26465: PUSH
26466: LD_INT 12
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 72
26477: NOT
26478: IFFALSE 26488
// control := control_manual ;
26480: LD_ADDR_VAR 0 4
26484: PUSH
26485: LD_INT 1
26487: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26488: LD_ADDR_VAR 0 8
26492: PUSH
26493: LD_VAR 0 1
26497: PPUSH
26498: CALL 26185 0 1
26502: ST_TO_ADDR
// if tmp then
26503: LD_VAR 0 8
26507: IFFALSE 26550
// begin for i in tmp do
26509: LD_ADDR_VAR 0 7
26513: PUSH
26514: LD_VAR 0 8
26518: PUSH
26519: FOR_IN
26520: IFFALSE 26548
// if i [ 1 ] = b_ext_radio then
26522: LD_VAR 0 7
26526: PUSH
26527: LD_INT 1
26529: ARRAY
26530: PUSH
26531: LD_INT 22
26533: EQUAL
26534: IFFALSE 26546
// begin control := control_remote ;
26536: LD_ADDR_VAR 0 4
26540: PUSH
26541: LD_INT 2
26543: ST_TO_ADDR
// break ;
26544: GO 26548
// end ;
26546: GO 26519
26548: POP
26549: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26550: LD_VAR 0 1
26554: PPUSH
26555: LD_VAR 0 2
26559: PPUSH
26560: LD_VAR 0 3
26564: PPUSH
26565: LD_VAR 0 4
26569: PPUSH
26570: LD_VAR 0 5
26574: PPUSH
26575: CALL_OW 448
26579: IFFALSE 26614
// begin result := [ chassis , engine , control , weapon ] ;
26581: LD_ADDR_VAR 0 6
26585: PUSH
26586: LD_VAR 0 2
26590: PUSH
26591: LD_VAR 0 3
26595: PUSH
26596: LD_VAR 0 4
26600: PUSH
26601: LD_VAR 0 5
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// exit ;
26612: GO 27026
// end ; _chassis := AvailableChassisList ( factory ) ;
26614: LD_ADDR_VAR 0 9
26618: PUSH
26619: LD_VAR 0 1
26623: PPUSH
26624: CALL_OW 475
26628: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26629: LD_ADDR_VAR 0 11
26633: PUSH
26634: LD_VAR 0 1
26638: PPUSH
26639: CALL_OW 476
26643: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26644: LD_ADDR_VAR 0 12
26648: PUSH
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 477
26658: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26659: LD_ADDR_VAR 0 10
26663: PUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 478
26673: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26674: LD_VAR 0 9
26678: NOT
26679: PUSH
26680: LD_VAR 0 11
26684: NOT
26685: OR
26686: PUSH
26687: LD_VAR 0 12
26691: NOT
26692: OR
26693: PUSH
26694: LD_VAR 0 10
26698: NOT
26699: OR
26700: IFFALSE 26735
// begin result := [ chassis , engine , control , weapon ] ;
26702: LD_ADDR_VAR 0 6
26706: PUSH
26707: LD_VAR 0 2
26711: PUSH
26712: LD_VAR 0 3
26716: PUSH
26717: LD_VAR 0 4
26721: PUSH
26722: LD_VAR 0 5
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
// exit ;
26733: GO 27026
// end ; if not chassis in _chassis then
26735: LD_VAR 0 2
26739: PUSH
26740: LD_VAR 0 9
26744: IN
26745: NOT
26746: IFFALSE 26772
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26748: LD_ADDR_VAR 0 2
26752: PUSH
26753: LD_VAR 0 9
26757: PUSH
26758: LD_INT 1
26760: PPUSH
26761: LD_VAR 0 9
26765: PPUSH
26766: CALL_OW 12
26770: ARRAY
26771: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26772: LD_VAR 0 2
26776: PPUSH
26777: LD_VAR 0 3
26781: PPUSH
26782: CALL 27031 0 2
26786: NOT
26787: IFFALSE 26846
// repeat engine := _engine [ 1 ] ;
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_VAR 0 11
26798: PUSH
26799: LD_INT 1
26801: ARRAY
26802: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26803: LD_ADDR_VAR 0 11
26807: PUSH
26808: LD_VAR 0 11
26812: PPUSH
26813: LD_INT 1
26815: PPUSH
26816: CALL_OW 3
26820: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26821: LD_VAR 0 2
26825: PPUSH
26826: LD_VAR 0 3
26830: PPUSH
26831: CALL 27031 0 2
26835: PUSH
26836: LD_VAR 0 11
26840: PUSH
26841: EMPTY
26842: EQUAL
26843: OR
26844: IFFALSE 26789
// if not control in _control then
26846: LD_VAR 0 4
26850: PUSH
26851: LD_VAR 0 12
26855: IN
26856: NOT
26857: IFFALSE 26883
// control := _control [ rand ( 1 , _control ) ] ;
26859: LD_ADDR_VAR 0 4
26863: PUSH
26864: LD_VAR 0 12
26868: PUSH
26869: LD_INT 1
26871: PPUSH
26872: LD_VAR 0 12
26876: PPUSH
26877: CALL_OW 12
26881: ARRAY
26882: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26883: LD_VAR 0 2
26887: PPUSH
26888: LD_VAR 0 5
26892: PPUSH
26893: CALL 27251 0 2
26897: NOT
26898: IFFALSE 26957
// repeat weapon := _weapon [ 1 ] ;
26900: LD_ADDR_VAR 0 5
26904: PUSH
26905: LD_VAR 0 10
26909: PUSH
26910: LD_INT 1
26912: ARRAY
26913: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26914: LD_ADDR_VAR 0 10
26918: PUSH
26919: LD_VAR 0 10
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: CALL_OW 3
26931: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26932: LD_VAR 0 2
26936: PPUSH
26937: LD_VAR 0 5
26941: PPUSH
26942: CALL 27251 0 2
26946: PUSH
26947: LD_VAR 0 10
26951: PUSH
26952: EMPTY
26953: EQUAL
26954: OR
26955: IFFALSE 26900
// result := [ ] ;
26957: LD_ADDR_VAR 0 6
26961: PUSH
26962: EMPTY
26963: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26964: LD_VAR 0 1
26968: PPUSH
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_VAR 0 3
26978: PPUSH
26979: LD_VAR 0 4
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: CALL_OW 448
26993: IFFALSE 27026
// result := [ chassis , engine , control , weapon ] ;
26995: LD_ADDR_VAR 0 6
26999: PUSH
27000: LD_VAR 0 2
27004: PUSH
27005: LD_VAR 0 3
27009: PUSH
27010: LD_VAR 0 4
27014: PUSH
27015: LD_VAR 0 5
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: ST_TO_ADDR
// end ;
27026: LD_VAR 0 6
27030: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27031: LD_INT 0
27033: PPUSH
// if not chassis or not engine then
27034: LD_VAR 0 1
27038: NOT
27039: PUSH
27040: LD_VAR 0 2
27044: NOT
27045: OR
27046: IFFALSE 27050
// exit ;
27048: GO 27246
// case engine of engine_solar :
27050: LD_VAR 0 2
27054: PUSH
27055: LD_INT 2
27057: DOUBLE
27058: EQUAL
27059: IFTRUE 27063
27061: GO 27101
27063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27064: LD_ADDR_VAR 0 3
27068: PUSH
27069: LD_INT 11
27071: PUSH
27072: LD_INT 12
27074: PUSH
27075: LD_INT 13
27077: PUSH
27078: LD_INT 14
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 3
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: ST_TO_ADDR
27099: GO 27230
27101: LD_INT 1
27103: DOUBLE
27104: EQUAL
27105: IFTRUE 27109
27107: GO 27171
27109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27110: LD_ADDR_VAR 0 3
27114: PUSH
27115: LD_INT 11
27117: PUSH
27118: LD_INT 12
27120: PUSH
27121: LD_INT 13
27123: PUSH
27124: LD_INT 14
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: LD_INT 4
27138: PUSH
27139: LD_INT 5
27141: PUSH
27142: LD_INT 21
27144: PUSH
27145: LD_INT 23
27147: PUSH
27148: LD_INT 22
27150: PUSH
27151: LD_INT 24
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: ST_TO_ADDR
27169: GO 27230
27171: LD_INT 3
27173: DOUBLE
27174: EQUAL
27175: IFTRUE 27179
27177: GO 27229
27179: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27180: LD_ADDR_VAR 0 3
27184: PUSH
27185: LD_INT 13
27187: PUSH
27188: LD_INT 14
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: LD_INT 3
27196: PUSH
27197: LD_INT 4
27199: PUSH
27200: LD_INT 5
27202: PUSH
27203: LD_INT 21
27205: PUSH
27206: LD_INT 22
27208: PUSH
27209: LD_INT 23
27211: PUSH
27212: LD_INT 24
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
27227: GO 27230
27229: POP
// result := ( chassis in result ) ;
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_VAR 0 1
27239: PUSH
27240: LD_VAR 0 3
27244: IN
27245: ST_TO_ADDR
// end ;
27246: LD_VAR 0 3
27250: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27251: LD_INT 0
27253: PPUSH
// if not chassis or not weapon then
27254: LD_VAR 0 1
27258: NOT
27259: PUSH
27260: LD_VAR 0 2
27264: NOT
27265: OR
27266: IFFALSE 27270
// exit ;
27268: GO 28296
// case weapon of us_machine_gun :
27270: LD_VAR 0 2
27274: PUSH
27275: LD_INT 2
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27313
27283: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27284: LD_ADDR_VAR 0 3
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: LD_INT 3
27297: PUSH
27298: LD_INT 4
27300: PUSH
27301: LD_INT 5
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
27311: GO 28280
27313: LD_INT 3
27315: DOUBLE
27316: EQUAL
27317: IFTRUE 27321
27319: GO 27351
27321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27322: LD_ADDR_VAR 0 3
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: LD_INT 3
27335: PUSH
27336: LD_INT 4
27338: PUSH
27339: LD_INT 5
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: ST_TO_ADDR
27349: GO 28280
27351: LD_INT 11
27353: DOUBLE
27354: EQUAL
27355: IFTRUE 27359
27357: GO 27389
27359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27360: LD_ADDR_VAR 0 3
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: LD_INT 4
27376: PUSH
27377: LD_INT 5
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: ST_TO_ADDR
27387: GO 28280
27389: LD_INT 4
27391: DOUBLE
27392: EQUAL
27393: IFTRUE 27397
27395: GO 27423
27397: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27398: LD_ADDR_VAR 0 3
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 3
27408: PUSH
27409: LD_INT 4
27411: PUSH
27412: LD_INT 5
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: ST_TO_ADDR
27421: GO 28280
27423: LD_INT 5
27425: DOUBLE
27426: EQUAL
27427: IFTRUE 27431
27429: GO 27457
27431: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27432: LD_ADDR_VAR 0 3
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 3
27442: PUSH
27443: LD_INT 4
27445: PUSH
27446: LD_INT 5
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: ST_TO_ADDR
27455: GO 28280
27457: LD_INT 9
27459: DOUBLE
27460: EQUAL
27461: IFTRUE 27465
27463: GO 27491
27465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27466: LD_ADDR_VAR 0 3
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: LD_INT 4
27479: PUSH
27480: LD_INT 5
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: ST_TO_ADDR
27489: GO 28280
27491: LD_INT 7
27493: DOUBLE
27494: EQUAL
27495: IFTRUE 27499
27497: GO 27525
27499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27500: LD_ADDR_VAR 0 3
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: LD_INT 4
27513: PUSH
27514: LD_INT 5
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: ST_TO_ADDR
27523: GO 28280
27525: LD_INT 12
27527: DOUBLE
27528: EQUAL
27529: IFTRUE 27533
27531: GO 27559
27533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27534: LD_ADDR_VAR 0 3
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: LD_INT 3
27544: PUSH
27545: LD_INT 4
27547: PUSH
27548: LD_INT 5
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
27557: GO 28280
27559: LD_INT 13
27561: DOUBLE
27562: EQUAL
27563: IFTRUE 27567
27565: GO 27593
27567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27568: LD_ADDR_VAR 0 3
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: LD_INT 3
27578: PUSH
27579: LD_INT 4
27581: PUSH
27582: LD_INT 5
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
27591: GO 28280
27593: LD_INT 14
27595: DOUBLE
27596: EQUAL
27597: IFTRUE 27601
27599: GO 27619
27601: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27602: LD_ADDR_VAR 0 3
27606: PUSH
27607: LD_INT 4
27609: PUSH
27610: LD_INT 5
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: ST_TO_ADDR
27617: GO 28280
27619: LD_INT 6
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27627
27625: GO 27645
27627: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27628: LD_ADDR_VAR 0 3
27632: PUSH
27633: LD_INT 4
27635: PUSH
27636: LD_INT 5
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: ST_TO_ADDR
27643: GO 28280
27645: LD_INT 10
27647: DOUBLE
27648: EQUAL
27649: IFTRUE 27653
27651: GO 27671
27653: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: LD_INT 5
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: ST_TO_ADDR
27669: GO 28280
27671: LD_INT 22
27673: DOUBLE
27674: EQUAL
27675: IFTRUE 27679
27677: GO 27705
27679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27680: LD_ADDR_VAR 0 3
27684: PUSH
27685: LD_INT 11
27687: PUSH
27688: LD_INT 12
27690: PUSH
27691: LD_INT 13
27693: PUSH
27694: LD_INT 14
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
27703: GO 28280
27705: LD_INT 23
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27739
27713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27714: LD_ADDR_VAR 0 3
27718: PUSH
27719: LD_INT 11
27721: PUSH
27722: LD_INT 12
27724: PUSH
27725: LD_INT 13
27727: PUSH
27728: LD_INT 14
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: ST_TO_ADDR
27737: GO 28280
27739: LD_INT 24
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27773
27747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_INT 11
27755: PUSH
27756: LD_INT 12
27758: PUSH
27759: LD_INT 13
27761: PUSH
27762: LD_INT 14
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
27771: GO 28280
27773: LD_INT 30
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27807
27781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27782: LD_ADDR_VAR 0 3
27786: PUSH
27787: LD_INT 11
27789: PUSH
27790: LD_INT 12
27792: PUSH
27793: LD_INT 13
27795: PUSH
27796: LD_INT 14
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
27805: GO 28280
27807: LD_INT 25
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27815
27813: GO 27833
27815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27816: LD_ADDR_VAR 0 3
27820: PUSH
27821: LD_INT 13
27823: PUSH
27824: LD_INT 14
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: ST_TO_ADDR
27831: GO 28280
27833: LD_INT 27
27835: DOUBLE
27836: EQUAL
27837: IFTRUE 27841
27839: GO 27859
27841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27842: LD_ADDR_VAR 0 3
27846: PUSH
27847: LD_INT 13
27849: PUSH
27850: LD_INT 14
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: ST_TO_ADDR
27857: GO 28280
27859: LD_INT 28
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27885
27867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_INT 13
27875: PUSH
27876: LD_INT 14
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: ST_TO_ADDR
27883: GO 28280
27885: LD_INT 29
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27911
27893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_INT 13
27901: PUSH
27902: LD_INT 14
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: ST_TO_ADDR
27909: GO 28280
27911: LD_INT 31
27913: DOUBLE
27914: EQUAL
27915: IFTRUE 27919
27917: GO 27937
27919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: LD_INT 13
27927: PUSH
27928: LD_INT 14
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: ST_TO_ADDR
27935: GO 28280
27937: LD_INT 26
27939: DOUBLE
27940: EQUAL
27941: IFTRUE 27945
27943: GO 27963
27945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27946: LD_ADDR_VAR 0 3
27950: PUSH
27951: LD_INT 13
27953: PUSH
27954: LD_INT 14
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: ST_TO_ADDR
27961: GO 28280
27963: LD_INT 42
27965: DOUBLE
27966: EQUAL
27967: IFTRUE 27971
27969: GO 27997
27971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27972: LD_ADDR_VAR 0 3
27976: PUSH
27977: LD_INT 21
27979: PUSH
27980: LD_INT 22
27982: PUSH
27983: LD_INT 23
27985: PUSH
27986: LD_INT 24
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: ST_TO_ADDR
27995: GO 28280
27997: LD_INT 43
27999: DOUBLE
28000: EQUAL
28001: IFTRUE 28005
28003: GO 28031
28005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_INT 21
28013: PUSH
28014: LD_INT 22
28016: PUSH
28017: LD_INT 23
28019: PUSH
28020: LD_INT 24
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
28029: GO 28280
28031: LD_INT 44
28033: DOUBLE
28034: EQUAL
28035: IFTRUE 28039
28037: GO 28065
28039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28040: LD_ADDR_VAR 0 3
28044: PUSH
28045: LD_INT 21
28047: PUSH
28048: LD_INT 22
28050: PUSH
28051: LD_INT 23
28053: PUSH
28054: LD_INT 24
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: ST_TO_ADDR
28063: GO 28280
28065: LD_INT 45
28067: DOUBLE
28068: EQUAL
28069: IFTRUE 28073
28071: GO 28099
28073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28074: LD_ADDR_VAR 0 3
28078: PUSH
28079: LD_INT 21
28081: PUSH
28082: LD_INT 22
28084: PUSH
28085: LD_INT 23
28087: PUSH
28088: LD_INT 24
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: ST_TO_ADDR
28097: GO 28280
28099: LD_INT 49
28101: DOUBLE
28102: EQUAL
28103: IFTRUE 28107
28105: GO 28133
28107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28108: LD_ADDR_VAR 0 3
28112: PUSH
28113: LD_INT 21
28115: PUSH
28116: LD_INT 22
28118: PUSH
28119: LD_INT 23
28121: PUSH
28122: LD_INT 24
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: ST_TO_ADDR
28131: GO 28280
28133: LD_INT 51
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28167
28141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_INT 21
28149: PUSH
28150: LD_INT 22
28152: PUSH
28153: LD_INT 23
28155: PUSH
28156: LD_INT 24
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
28165: GO 28280
28167: LD_INT 52
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28201
28175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 21
28183: PUSH
28184: LD_INT 22
28186: PUSH
28187: LD_INT 23
28189: PUSH
28190: LD_INT 24
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
28199: GO 28280
28201: LD_INT 53
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28227
28209: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28210: LD_ADDR_VAR 0 3
28214: PUSH
28215: LD_INT 23
28217: PUSH
28218: LD_INT 24
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: ST_TO_ADDR
28225: GO 28280
28227: LD_INT 46
28229: DOUBLE
28230: EQUAL
28231: IFTRUE 28235
28233: GO 28253
28235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28236: LD_ADDR_VAR 0 3
28240: PUSH
28241: LD_INT 23
28243: PUSH
28244: LD_INT 24
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: ST_TO_ADDR
28251: GO 28280
28253: LD_INT 47
28255: DOUBLE
28256: EQUAL
28257: IFTRUE 28261
28259: GO 28279
28261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28262: LD_ADDR_VAR 0 3
28266: PUSH
28267: LD_INT 23
28269: PUSH
28270: LD_INT 24
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: ST_TO_ADDR
28277: GO 28280
28279: POP
// result := ( chassis in result ) ;
28280: LD_ADDR_VAR 0 3
28284: PUSH
28285: LD_VAR 0 1
28289: PUSH
28290: LD_VAR 0 3
28294: IN
28295: ST_TO_ADDR
// end ;
28296: LD_VAR 0 3
28300: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28301: LD_INT 0
28303: PPUSH
28304: PPUSH
28305: PPUSH
28306: PPUSH
28307: PPUSH
28308: PPUSH
28309: PPUSH
// result := array ;
28310: LD_ADDR_VAR 0 5
28314: PUSH
28315: LD_VAR 0 1
28319: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28320: LD_VAR 0 1
28324: NOT
28325: PUSH
28326: LD_VAR 0 2
28330: NOT
28331: OR
28332: PUSH
28333: LD_VAR 0 3
28337: NOT
28338: OR
28339: PUSH
28340: LD_VAR 0 2
28344: PUSH
28345: LD_VAR 0 1
28349: GREATER
28350: OR
28351: PUSH
28352: LD_VAR 0 3
28356: PUSH
28357: LD_VAR 0 1
28361: GREATER
28362: OR
28363: IFFALSE 28367
// exit ;
28365: GO 28663
// if direction then
28367: LD_VAR 0 4
28371: IFFALSE 28435
// begin d := 1 ;
28373: LD_ADDR_VAR 0 9
28377: PUSH
28378: LD_INT 1
28380: ST_TO_ADDR
// if i_from > i_to then
28381: LD_VAR 0 2
28385: PUSH
28386: LD_VAR 0 3
28390: GREATER
28391: IFFALSE 28417
// length := ( array - i_from ) + i_to else
28393: LD_ADDR_VAR 0 11
28397: PUSH
28398: LD_VAR 0 1
28402: PUSH
28403: LD_VAR 0 2
28407: MINUS
28408: PUSH
28409: LD_VAR 0 3
28413: PLUS
28414: ST_TO_ADDR
28415: GO 28433
// length := i_to - i_from ;
28417: LD_ADDR_VAR 0 11
28421: PUSH
28422: LD_VAR 0 3
28426: PUSH
28427: LD_VAR 0 2
28431: MINUS
28432: ST_TO_ADDR
// end else
28433: GO 28496
// begin d := - 1 ;
28435: LD_ADDR_VAR 0 9
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: ST_TO_ADDR
// if i_from > i_to then
28444: LD_VAR 0 2
28448: PUSH
28449: LD_VAR 0 3
28453: GREATER
28454: IFFALSE 28474
// length := i_from - i_to else
28456: LD_ADDR_VAR 0 11
28460: PUSH
28461: LD_VAR 0 2
28465: PUSH
28466: LD_VAR 0 3
28470: MINUS
28471: ST_TO_ADDR
28472: GO 28496
// length := ( array - i_to ) + i_from ;
28474: LD_ADDR_VAR 0 11
28478: PUSH
28479: LD_VAR 0 1
28483: PUSH
28484: LD_VAR 0 3
28488: MINUS
28489: PUSH
28490: LD_VAR 0 2
28494: PLUS
28495: ST_TO_ADDR
// end ; if not length then
28496: LD_VAR 0 11
28500: NOT
28501: IFFALSE 28505
// exit ;
28503: GO 28663
// tmp := array ;
28505: LD_ADDR_VAR 0 10
28509: PUSH
28510: LD_VAR 0 1
28514: ST_TO_ADDR
// for i = 1 to length do
28515: LD_ADDR_VAR 0 6
28519: PUSH
28520: DOUBLE
28521: LD_INT 1
28523: DEC
28524: ST_TO_ADDR
28525: LD_VAR 0 11
28529: PUSH
28530: FOR_TO
28531: IFFALSE 28651
// begin for j = 1 to array do
28533: LD_ADDR_VAR 0 7
28537: PUSH
28538: DOUBLE
28539: LD_INT 1
28541: DEC
28542: ST_TO_ADDR
28543: LD_VAR 0 1
28547: PUSH
28548: FOR_TO
28549: IFFALSE 28637
// begin k := j + d ;
28551: LD_ADDR_VAR 0 8
28555: PUSH
28556: LD_VAR 0 7
28560: PUSH
28561: LD_VAR 0 9
28565: PLUS
28566: ST_TO_ADDR
// if k > array then
28567: LD_VAR 0 8
28571: PUSH
28572: LD_VAR 0 1
28576: GREATER
28577: IFFALSE 28587
// k := 1 ;
28579: LD_ADDR_VAR 0 8
28583: PUSH
28584: LD_INT 1
28586: ST_TO_ADDR
// if not k then
28587: LD_VAR 0 8
28591: NOT
28592: IFFALSE 28604
// k := array ;
28594: LD_ADDR_VAR 0 8
28598: PUSH
28599: LD_VAR 0 1
28603: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28604: LD_ADDR_VAR 0 10
28608: PUSH
28609: LD_VAR 0 10
28613: PPUSH
28614: LD_VAR 0 8
28618: PPUSH
28619: LD_VAR 0 1
28623: PUSH
28624: LD_VAR 0 7
28628: ARRAY
28629: PPUSH
28630: CALL_OW 1
28634: ST_TO_ADDR
// end ;
28635: GO 28548
28637: POP
28638: POP
// array := tmp ;
28639: LD_ADDR_VAR 0 1
28643: PUSH
28644: LD_VAR 0 10
28648: ST_TO_ADDR
// end ;
28649: GO 28530
28651: POP
28652: POP
// result := array ;
28653: LD_ADDR_VAR 0 5
28657: PUSH
28658: LD_VAR 0 1
28662: ST_TO_ADDR
// end ;
28663: LD_VAR 0 5
28667: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28668: LD_INT 0
28670: PPUSH
28671: PPUSH
// result := 0 ;
28672: LD_ADDR_VAR 0 3
28676: PUSH
28677: LD_INT 0
28679: ST_TO_ADDR
// if not array or not value in array then
28680: LD_VAR 0 1
28684: NOT
28685: PUSH
28686: LD_VAR 0 2
28690: PUSH
28691: LD_VAR 0 1
28695: IN
28696: NOT
28697: OR
28698: IFFALSE 28702
// exit ;
28700: GO 28756
// for i = 1 to array do
28702: LD_ADDR_VAR 0 4
28706: PUSH
28707: DOUBLE
28708: LD_INT 1
28710: DEC
28711: ST_TO_ADDR
28712: LD_VAR 0 1
28716: PUSH
28717: FOR_TO
28718: IFFALSE 28754
// if value = array [ i ] then
28720: LD_VAR 0 2
28724: PUSH
28725: LD_VAR 0 1
28729: PUSH
28730: LD_VAR 0 4
28734: ARRAY
28735: EQUAL
28736: IFFALSE 28752
// begin result := i ;
28738: LD_ADDR_VAR 0 3
28742: PUSH
28743: LD_VAR 0 4
28747: ST_TO_ADDR
// exit ;
28748: POP
28749: POP
28750: GO 28756
// end ;
28752: GO 28717
28754: POP
28755: POP
// end ;
28756: LD_VAR 0 3
28760: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28761: LD_INT 0
28763: PPUSH
// vc_chassis := chassis ;
28764: LD_ADDR_OWVAR 37
28768: PUSH
28769: LD_VAR 0 1
28773: ST_TO_ADDR
// vc_engine := engine ;
28774: LD_ADDR_OWVAR 39
28778: PUSH
28779: LD_VAR 0 2
28783: ST_TO_ADDR
// vc_control := control ;
28784: LD_ADDR_OWVAR 38
28788: PUSH
28789: LD_VAR 0 3
28793: ST_TO_ADDR
// vc_weapon := weapon ;
28794: LD_ADDR_OWVAR 40
28798: PUSH
28799: LD_VAR 0 4
28803: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28804: LD_ADDR_OWVAR 41
28808: PUSH
28809: LD_VAR 0 5
28813: ST_TO_ADDR
// end ;
28814: LD_VAR 0 6
28818: RET
// export function WantPlant ( unit ) ; var task ; begin
28819: LD_INT 0
28821: PPUSH
28822: PPUSH
// result := false ;
28823: LD_ADDR_VAR 0 2
28827: PUSH
28828: LD_INT 0
28830: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28831: LD_ADDR_VAR 0 3
28835: PUSH
28836: LD_VAR 0 1
28840: PPUSH
28841: CALL_OW 437
28845: ST_TO_ADDR
// if task then
28846: LD_VAR 0 3
28850: IFFALSE 28878
// if task [ 1 ] [ 1 ] = p then
28852: LD_VAR 0 3
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PUSH
28861: LD_INT 1
28863: ARRAY
28864: PUSH
28865: LD_STRING p
28867: EQUAL
28868: IFFALSE 28878
// result := true ;
28870: LD_ADDR_VAR 0 2
28874: PUSH
28875: LD_INT 1
28877: ST_TO_ADDR
// end ;
28878: LD_VAR 0 2
28882: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28883: LD_INT 0
28885: PPUSH
28886: PPUSH
28887: PPUSH
28888: PPUSH
// if pos < 1 then
28889: LD_VAR 0 2
28893: PUSH
28894: LD_INT 1
28896: LESS
28897: IFFALSE 28901
// exit ;
28899: GO 29204
// if pos = 1 then
28901: LD_VAR 0 2
28905: PUSH
28906: LD_INT 1
28908: EQUAL
28909: IFFALSE 28942
// result := Replace ( arr , pos [ 1 ] , value ) else
28911: LD_ADDR_VAR 0 4
28915: PUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: LD_VAR 0 2
28925: PUSH
28926: LD_INT 1
28928: ARRAY
28929: PPUSH
28930: LD_VAR 0 3
28934: PPUSH
28935: CALL_OW 1
28939: ST_TO_ADDR
28940: GO 29204
// begin tmp := arr ;
28942: LD_ADDR_VAR 0 6
28946: PUSH
28947: LD_VAR 0 1
28951: ST_TO_ADDR
// s_arr := [ tmp ] ;
28952: LD_ADDR_VAR 0 7
28956: PUSH
28957: LD_VAR 0 6
28961: PUSH
28962: EMPTY
28963: LIST
28964: ST_TO_ADDR
// for i = 1 to pos - 1 do
28965: LD_ADDR_VAR 0 5
28969: PUSH
28970: DOUBLE
28971: LD_INT 1
28973: DEC
28974: ST_TO_ADDR
28975: LD_VAR 0 2
28979: PUSH
28980: LD_INT 1
28982: MINUS
28983: PUSH
28984: FOR_TO
28985: IFFALSE 29030
// begin tmp := tmp [ pos [ i ] ] ;
28987: LD_ADDR_VAR 0 6
28991: PUSH
28992: LD_VAR 0 6
28996: PUSH
28997: LD_VAR 0 2
29001: PUSH
29002: LD_VAR 0 5
29006: ARRAY
29007: ARRAY
29008: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29009: LD_ADDR_VAR 0 7
29013: PUSH
29014: LD_VAR 0 7
29018: PUSH
29019: LD_VAR 0 6
29023: PUSH
29024: EMPTY
29025: LIST
29026: ADD
29027: ST_TO_ADDR
// end ;
29028: GO 28984
29030: POP
29031: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29032: LD_ADDR_VAR 0 6
29036: PUSH
29037: LD_VAR 0 6
29041: PPUSH
29042: LD_VAR 0 2
29046: PUSH
29047: LD_VAR 0 2
29051: ARRAY
29052: PPUSH
29053: LD_VAR 0 3
29057: PPUSH
29058: CALL_OW 1
29062: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29063: LD_ADDR_VAR 0 7
29067: PUSH
29068: LD_VAR 0 7
29072: PPUSH
29073: LD_VAR 0 7
29077: PPUSH
29078: LD_VAR 0 6
29082: PPUSH
29083: CALL_OW 1
29087: ST_TO_ADDR
// for i = s_arr downto 2 do
29088: LD_ADDR_VAR 0 5
29092: PUSH
29093: DOUBLE
29094: LD_VAR 0 7
29098: INC
29099: ST_TO_ADDR
29100: LD_INT 2
29102: PUSH
29103: FOR_DOWNTO
29104: IFFALSE 29188
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29106: LD_ADDR_VAR 0 6
29110: PUSH
29111: LD_VAR 0 7
29115: PUSH
29116: LD_VAR 0 5
29120: PUSH
29121: LD_INT 1
29123: MINUS
29124: ARRAY
29125: PPUSH
29126: LD_VAR 0 2
29130: PUSH
29131: LD_VAR 0 5
29135: PUSH
29136: LD_INT 1
29138: MINUS
29139: ARRAY
29140: PPUSH
29141: LD_VAR 0 7
29145: PUSH
29146: LD_VAR 0 5
29150: ARRAY
29151: PPUSH
29152: CALL_OW 1
29156: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29157: LD_ADDR_VAR 0 7
29161: PUSH
29162: LD_VAR 0 7
29166: PPUSH
29167: LD_VAR 0 5
29171: PUSH
29172: LD_INT 1
29174: MINUS
29175: PPUSH
29176: LD_VAR 0 6
29180: PPUSH
29181: CALL_OW 1
29185: ST_TO_ADDR
// end ;
29186: GO 29103
29188: POP
29189: POP
// result := s_arr [ 1 ] ;
29190: LD_ADDR_VAR 0 4
29194: PUSH
29195: LD_VAR 0 7
29199: PUSH
29200: LD_INT 1
29202: ARRAY
29203: ST_TO_ADDR
// end ; end ;
29204: LD_VAR 0 4
29208: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29209: LD_INT 0
29211: PPUSH
29212: PPUSH
// if not list then
29213: LD_VAR 0 1
29217: NOT
29218: IFFALSE 29222
// exit ;
29220: GO 29313
// i := list [ pos1 ] ;
29222: LD_ADDR_VAR 0 5
29226: PUSH
29227: LD_VAR 0 1
29231: PUSH
29232: LD_VAR 0 2
29236: ARRAY
29237: ST_TO_ADDR
// if not i then
29238: LD_VAR 0 5
29242: NOT
29243: IFFALSE 29247
// exit ;
29245: GO 29313
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29247: LD_ADDR_VAR 0 1
29251: PUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: LD_VAR 0 2
29261: PPUSH
29262: LD_VAR 0 1
29266: PUSH
29267: LD_VAR 0 3
29271: ARRAY
29272: PPUSH
29273: CALL_OW 1
29277: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29278: LD_ADDR_VAR 0 1
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: LD_VAR 0 3
29292: PPUSH
29293: LD_VAR 0 5
29297: PPUSH
29298: CALL_OW 1
29302: ST_TO_ADDR
// result := list ;
29303: LD_ADDR_VAR 0 4
29307: PUSH
29308: LD_VAR 0 1
29312: ST_TO_ADDR
// end ;
29313: LD_VAR 0 4
29317: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29318: LD_INT 0
29320: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29321: LD_ADDR_VAR 0 5
29325: PUSH
29326: LD_VAR 0 1
29330: PPUSH
29331: CALL_OW 250
29335: PPUSH
29336: LD_VAR 0 1
29340: PPUSH
29341: CALL_OW 251
29345: PPUSH
29346: LD_VAR 0 2
29350: PPUSH
29351: LD_VAR 0 3
29355: PPUSH
29356: LD_VAR 0 4
29360: PPUSH
29361: CALL 29371 0 5
29365: ST_TO_ADDR
// end ;
29366: LD_VAR 0 5
29370: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
// if not list then
29377: LD_VAR 0 3
29381: NOT
29382: IFFALSE 29386
// exit ;
29384: GO 29774
// result := [ ] ;
29386: LD_ADDR_VAR 0 6
29390: PUSH
29391: EMPTY
29392: ST_TO_ADDR
// for i in list do
29393: LD_ADDR_VAR 0 7
29397: PUSH
29398: LD_VAR 0 3
29402: PUSH
29403: FOR_IN
29404: IFFALSE 29606
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29406: LD_ADDR_VAR 0 9
29410: PUSH
29411: LD_VAR 0 7
29415: PPUSH
29416: LD_VAR 0 1
29420: PPUSH
29421: LD_VAR 0 2
29425: PPUSH
29426: CALL_OW 297
29430: ST_TO_ADDR
// if not result then
29431: LD_VAR 0 6
29435: NOT
29436: IFFALSE 29462
// result := [ [ i , tmp ] ] else
29438: LD_ADDR_VAR 0 6
29442: PUSH
29443: LD_VAR 0 7
29447: PUSH
29448: LD_VAR 0 9
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: ST_TO_ADDR
29460: GO 29604
// begin if result [ result ] [ 2 ] < tmp then
29462: LD_VAR 0 6
29466: PUSH
29467: LD_VAR 0 6
29471: ARRAY
29472: PUSH
29473: LD_INT 2
29475: ARRAY
29476: PUSH
29477: LD_VAR 0 9
29481: LESS
29482: IFFALSE 29524
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29484: LD_ADDR_VAR 0 6
29488: PUSH
29489: LD_VAR 0 6
29493: PPUSH
29494: LD_VAR 0 6
29498: PUSH
29499: LD_INT 1
29501: PLUS
29502: PPUSH
29503: LD_VAR 0 7
29507: PUSH
29508: LD_VAR 0 9
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PPUSH
29517: CALL_OW 2
29521: ST_TO_ADDR
29522: GO 29604
// for j = 1 to result do
29524: LD_ADDR_VAR 0 8
29528: PUSH
29529: DOUBLE
29530: LD_INT 1
29532: DEC
29533: ST_TO_ADDR
29534: LD_VAR 0 6
29538: PUSH
29539: FOR_TO
29540: IFFALSE 29602
// begin if tmp < result [ j ] [ 2 ] then
29542: LD_VAR 0 9
29546: PUSH
29547: LD_VAR 0 6
29551: PUSH
29552: LD_VAR 0 8
29556: ARRAY
29557: PUSH
29558: LD_INT 2
29560: ARRAY
29561: LESS
29562: IFFALSE 29600
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29564: LD_ADDR_VAR 0 6
29568: PUSH
29569: LD_VAR 0 6
29573: PPUSH
29574: LD_VAR 0 8
29578: PPUSH
29579: LD_VAR 0 7
29583: PUSH
29584: LD_VAR 0 9
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PPUSH
29593: CALL_OW 2
29597: ST_TO_ADDR
// break ;
29598: GO 29602
// end ; end ;
29600: GO 29539
29602: POP
29603: POP
// end ; end ;
29604: GO 29403
29606: POP
29607: POP
// if result and not asc then
29608: LD_VAR 0 6
29612: PUSH
29613: LD_VAR 0 4
29617: NOT
29618: AND
29619: IFFALSE 29694
// begin tmp := result ;
29621: LD_ADDR_VAR 0 9
29625: PUSH
29626: LD_VAR 0 6
29630: ST_TO_ADDR
// for i = tmp downto 1 do
29631: LD_ADDR_VAR 0 7
29635: PUSH
29636: DOUBLE
29637: LD_VAR 0 9
29641: INC
29642: ST_TO_ADDR
29643: LD_INT 1
29645: PUSH
29646: FOR_DOWNTO
29647: IFFALSE 29692
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29649: LD_ADDR_VAR 0 6
29653: PUSH
29654: LD_VAR 0 6
29658: PPUSH
29659: LD_VAR 0 9
29663: PUSH
29664: LD_VAR 0 7
29668: MINUS
29669: PUSH
29670: LD_INT 1
29672: PLUS
29673: PPUSH
29674: LD_VAR 0 9
29678: PUSH
29679: LD_VAR 0 7
29683: ARRAY
29684: PPUSH
29685: CALL_OW 1
29689: ST_TO_ADDR
29690: GO 29646
29692: POP
29693: POP
// end ; tmp := [ ] ;
29694: LD_ADDR_VAR 0 9
29698: PUSH
29699: EMPTY
29700: ST_TO_ADDR
// if mode then
29701: LD_VAR 0 5
29705: IFFALSE 29774
// begin for i = 1 to result do
29707: LD_ADDR_VAR 0 7
29711: PUSH
29712: DOUBLE
29713: LD_INT 1
29715: DEC
29716: ST_TO_ADDR
29717: LD_VAR 0 6
29721: PUSH
29722: FOR_TO
29723: IFFALSE 29762
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29725: LD_ADDR_VAR 0 9
29729: PUSH
29730: LD_VAR 0 9
29734: PPUSH
29735: LD_VAR 0 7
29739: PPUSH
29740: LD_VAR 0 6
29744: PUSH
29745: LD_VAR 0 7
29749: ARRAY
29750: PUSH
29751: LD_INT 1
29753: ARRAY
29754: PPUSH
29755: CALL_OW 1
29759: ST_TO_ADDR
29760: GO 29722
29762: POP
29763: POP
// result := tmp ;
29764: LD_ADDR_VAR 0 6
29768: PUSH
29769: LD_VAR 0 9
29773: ST_TO_ADDR
// end ; end ;
29774: LD_VAR 0 6
29778: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29779: LD_INT 0
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29787: LD_ADDR_VAR 0 5
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: ST_TO_ADDR
// if not x or not y then
29809: LD_VAR 0 2
29813: NOT
29814: PUSH
29815: LD_VAR 0 3
29819: NOT
29820: OR
29821: IFFALSE 29825
// exit ;
29823: GO 31471
// if not range then
29825: LD_VAR 0 4
29829: NOT
29830: IFFALSE 29840
// range := 10 ;
29832: LD_ADDR_VAR 0 4
29836: PUSH
29837: LD_INT 10
29839: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29840: LD_ADDR_VAR 0 8
29844: PUSH
29845: LD_INT 81
29847: PUSH
29848: LD_VAR 0 1
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 92
29859: PUSH
29860: LD_VAR 0 2
29864: PUSH
29865: LD_VAR 0 3
29869: PUSH
29870: LD_VAR 0 4
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 3
29883: PUSH
29884: LD_INT 21
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: PPUSH
29903: CALL_OW 69
29907: ST_TO_ADDR
// if not tmp then
29908: LD_VAR 0 8
29912: NOT
29913: IFFALSE 29917
// exit ;
29915: GO 31471
// for i in tmp do
29917: LD_ADDR_VAR 0 6
29921: PUSH
29922: LD_VAR 0 8
29926: PUSH
29927: FOR_IN
29928: IFFALSE 31446
// begin points := [ 0 , 0 , 0 ] ;
29930: LD_ADDR_VAR 0 9
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// bpoints := 1 ;
29949: LD_ADDR_VAR 0 10
29953: PUSH
29954: LD_INT 1
29956: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29957: LD_VAR 0 6
29961: PPUSH
29962: CALL_OW 247
29966: PUSH
29967: LD_INT 1
29969: DOUBLE
29970: EQUAL
29971: IFTRUE 29975
29973: GO 30553
29975: POP
// begin if GetClass ( i ) = 1 then
29976: LD_VAR 0 6
29980: PPUSH
29981: CALL_OW 257
29985: PUSH
29986: LD_INT 1
29988: EQUAL
29989: IFFALSE 30010
// points := [ 10 , 5 , 3 ] ;
29991: LD_ADDR_VAR 0 9
29995: PUSH
29996: LD_INT 10
29998: PUSH
29999: LD_INT 5
30001: PUSH
30002: LD_INT 3
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: LIST
30009: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30010: LD_VAR 0 6
30014: PPUSH
30015: CALL_OW 257
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: IN
30034: IFFALSE 30055
// points := [ 3 , 2 , 1 ] ;
30036: LD_ADDR_VAR 0 9
30040: PUSH
30041: LD_INT 3
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30055: LD_VAR 0 6
30059: PPUSH
30060: CALL_OW 257
30064: PUSH
30065: LD_INT 5
30067: EQUAL
30068: IFFALSE 30089
// points := [ 130 , 5 , 2 ] ;
30070: LD_ADDR_VAR 0 9
30074: PUSH
30075: LD_INT 130
30077: PUSH
30078: LD_INT 5
30080: PUSH
30081: LD_INT 2
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30089: LD_VAR 0 6
30093: PPUSH
30094: CALL_OW 257
30098: PUSH
30099: LD_INT 8
30101: EQUAL
30102: IFFALSE 30123
// points := [ 35 , 35 , 30 ] ;
30104: LD_ADDR_VAR 0 9
30108: PUSH
30109: LD_INT 35
30111: PUSH
30112: LD_INT 35
30114: PUSH
30115: LD_INT 30
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30123: LD_VAR 0 6
30127: PPUSH
30128: CALL_OW 257
30132: PUSH
30133: LD_INT 9
30135: EQUAL
30136: IFFALSE 30157
// points := [ 20 , 55 , 40 ] ;
30138: LD_ADDR_VAR 0 9
30142: PUSH
30143: LD_INT 20
30145: PUSH
30146: LD_INT 55
30148: PUSH
30149: LD_INT 40
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30157: LD_VAR 0 6
30161: PPUSH
30162: CALL_OW 257
30166: PUSH
30167: LD_INT 12
30169: PUSH
30170: LD_INT 16
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: IN
30177: IFFALSE 30198
// points := [ 5 , 3 , 2 ] ;
30179: LD_ADDR_VAR 0 9
30183: PUSH
30184: LD_INT 5
30186: PUSH
30187: LD_INT 3
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30198: LD_VAR 0 6
30202: PPUSH
30203: CALL_OW 257
30207: PUSH
30208: LD_INT 17
30210: EQUAL
30211: IFFALSE 30232
// points := [ 100 , 50 , 75 ] ;
30213: LD_ADDR_VAR 0 9
30217: PUSH
30218: LD_INT 100
30220: PUSH
30221: LD_INT 50
30223: PUSH
30224: LD_INT 75
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30232: LD_VAR 0 6
30236: PPUSH
30237: CALL_OW 257
30241: PUSH
30242: LD_INT 15
30244: EQUAL
30245: IFFALSE 30266
// points := [ 10 , 5 , 3 ] ;
30247: LD_ADDR_VAR 0 9
30251: PUSH
30252: LD_INT 10
30254: PUSH
30255: LD_INT 5
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30266: LD_VAR 0 6
30270: PPUSH
30271: CALL_OW 257
30275: PUSH
30276: LD_INT 14
30278: EQUAL
30279: IFFALSE 30300
// points := [ 10 , 0 , 0 ] ;
30281: LD_ADDR_VAR 0 9
30285: PUSH
30286: LD_INT 10
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30300: LD_VAR 0 6
30304: PPUSH
30305: CALL_OW 257
30309: PUSH
30310: LD_INT 11
30312: EQUAL
30313: IFFALSE 30334
// points := [ 30 , 10 , 5 ] ;
30315: LD_ADDR_VAR 0 9
30319: PUSH
30320: LD_INT 30
30322: PUSH
30323: LD_INT 10
30325: PUSH
30326: LD_INT 5
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30334: LD_VAR 0 1
30338: PPUSH
30339: LD_INT 5
30341: PPUSH
30342: CALL_OW 321
30346: PUSH
30347: LD_INT 2
30349: EQUAL
30350: IFFALSE 30367
// bpoints := bpoints * 1.8 ;
30352: LD_ADDR_VAR 0 10
30356: PUSH
30357: LD_VAR 0 10
30361: PUSH
30362: LD_REAL  1.80000000000000E+0000
30365: MUL
30366: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30367: LD_VAR 0 6
30371: PPUSH
30372: CALL_OW 257
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: LD_INT 4
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: IN
30395: PUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_INT 51
30403: PPUSH
30404: CALL_OW 321
30408: PUSH
30409: LD_INT 2
30411: EQUAL
30412: AND
30413: IFFALSE 30430
// bpoints := bpoints * 1.2 ;
30415: LD_ADDR_VAR 0 10
30419: PUSH
30420: LD_VAR 0 10
30424: PUSH
30425: LD_REAL  1.20000000000000E+0000
30428: MUL
30429: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30430: LD_VAR 0 6
30434: PPUSH
30435: CALL_OW 257
30439: PUSH
30440: LD_INT 5
30442: PUSH
30443: LD_INT 7
30445: PUSH
30446: LD_INT 9
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: IN
30454: PUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: LD_INT 52
30462: PPUSH
30463: CALL_OW 321
30467: PUSH
30468: LD_INT 2
30470: EQUAL
30471: AND
30472: IFFALSE 30489
// bpoints := bpoints * 1.5 ;
30474: LD_ADDR_VAR 0 10
30478: PUSH
30479: LD_VAR 0 10
30483: PUSH
30484: LD_REAL  1.50000000000000E+0000
30487: MUL
30488: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30489: LD_VAR 0 1
30493: PPUSH
30494: LD_INT 66
30496: PPUSH
30497: CALL_OW 321
30501: PUSH
30502: LD_INT 2
30504: EQUAL
30505: IFFALSE 30522
// bpoints := bpoints * 1.1 ;
30507: LD_ADDR_VAR 0 10
30511: PUSH
30512: LD_VAR 0 10
30516: PUSH
30517: LD_REAL  1.10000000000000E+0000
30520: MUL
30521: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30522: LD_ADDR_VAR 0 10
30526: PUSH
30527: LD_VAR 0 10
30531: PUSH
30532: LD_VAR 0 6
30536: PPUSH
30537: LD_INT 1
30539: PPUSH
30540: CALL_OW 259
30544: PUSH
30545: LD_REAL  1.15000000000000E+0000
30548: MUL
30549: MUL
30550: ST_TO_ADDR
// end ; unit_vehicle :
30551: GO 31375
30553: LD_INT 2
30555: DOUBLE
30556: EQUAL
30557: IFTRUE 30561
30559: GO 31363
30561: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30562: LD_VAR 0 6
30566: PPUSH
30567: CALL_OW 264
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 42
30577: PUSH
30578: LD_INT 24
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: IN
30586: IFFALSE 30607
// points := [ 25 , 5 , 3 ] ;
30588: LD_ADDR_VAR 0 9
30592: PUSH
30593: LD_INT 25
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30607: LD_VAR 0 6
30611: PPUSH
30612: CALL_OW 264
30616: PUSH
30617: LD_INT 4
30619: PUSH
30620: LD_INT 43
30622: PUSH
30623: LD_INT 25
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: IN
30631: IFFALSE 30652
// points := [ 40 , 15 , 5 ] ;
30633: LD_ADDR_VAR 0 9
30637: PUSH
30638: LD_INT 40
30640: PUSH
30641: LD_INT 15
30643: PUSH
30644: LD_INT 5
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30652: LD_VAR 0 6
30656: PPUSH
30657: CALL_OW 264
30661: PUSH
30662: LD_INT 3
30664: PUSH
30665: LD_INT 23
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: IN
30672: IFFALSE 30693
// points := [ 7 , 25 , 8 ] ;
30674: LD_ADDR_VAR 0 9
30678: PUSH
30679: LD_INT 7
30681: PUSH
30682: LD_INT 25
30684: PUSH
30685: LD_INT 8
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30693: LD_VAR 0 6
30697: PPUSH
30698: CALL_OW 264
30702: PUSH
30703: LD_INT 5
30705: PUSH
30706: LD_INT 27
30708: PUSH
30709: LD_INT 44
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: IN
30717: IFFALSE 30738
// points := [ 14 , 50 , 16 ] ;
30719: LD_ADDR_VAR 0 9
30723: PUSH
30724: LD_INT 14
30726: PUSH
30727: LD_INT 50
30729: PUSH
30730: LD_INT 16
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: LIST
30737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30738: LD_VAR 0 6
30742: PPUSH
30743: CALL_OW 264
30747: PUSH
30748: LD_INT 6
30750: PUSH
30751: LD_INT 46
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: IN
30758: IFFALSE 30779
// points := [ 32 , 120 , 70 ] ;
30760: LD_ADDR_VAR 0 9
30764: PUSH
30765: LD_INT 32
30767: PUSH
30768: LD_INT 120
30770: PUSH
30771: LD_INT 70
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30779: LD_VAR 0 6
30783: PPUSH
30784: CALL_OW 264
30788: PUSH
30789: LD_INT 7
30791: PUSH
30792: LD_INT 28
30794: PUSH
30795: LD_INT 45
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: IN
30803: IFFALSE 30824
// points := [ 35 , 20 , 45 ] ;
30805: LD_ADDR_VAR 0 9
30809: PUSH
30810: LD_INT 35
30812: PUSH
30813: LD_INT 20
30815: PUSH
30816: LD_INT 45
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30824: LD_VAR 0 6
30828: PPUSH
30829: CALL_OW 264
30833: PUSH
30834: LD_INT 47
30836: PUSH
30837: EMPTY
30838: LIST
30839: IN
30840: IFFALSE 30861
// points := [ 67 , 45 , 75 ] ;
30842: LD_ADDR_VAR 0 9
30846: PUSH
30847: LD_INT 67
30849: PUSH
30850: LD_INT 45
30852: PUSH
30853: LD_INT 75
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30861: LD_VAR 0 6
30865: PPUSH
30866: CALL_OW 264
30870: PUSH
30871: LD_INT 26
30873: PUSH
30874: EMPTY
30875: LIST
30876: IN
30877: IFFALSE 30898
// points := [ 120 , 30 , 80 ] ;
30879: LD_ADDR_VAR 0 9
30883: PUSH
30884: LD_INT 120
30886: PUSH
30887: LD_INT 30
30889: PUSH
30890: LD_INT 80
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30898: LD_VAR 0 6
30902: PPUSH
30903: CALL_OW 264
30907: PUSH
30908: LD_INT 22
30910: PUSH
30911: EMPTY
30912: LIST
30913: IN
30914: IFFALSE 30935
// points := [ 40 , 1 , 1 ] ;
30916: LD_ADDR_VAR 0 9
30920: PUSH
30921: LD_INT 40
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30935: LD_VAR 0 6
30939: PPUSH
30940: CALL_OW 264
30944: PUSH
30945: LD_INT 29
30947: PUSH
30948: EMPTY
30949: LIST
30950: IN
30951: IFFALSE 30972
// points := [ 70 , 200 , 400 ] ;
30953: LD_ADDR_VAR 0 9
30957: PUSH
30958: LD_INT 70
30960: PUSH
30961: LD_INT 200
30963: PUSH
30964: LD_INT 400
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30972: LD_VAR 0 6
30976: PPUSH
30977: CALL_OW 264
30981: PUSH
30982: LD_INT 14
30984: PUSH
30985: LD_INT 53
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: IN
30992: IFFALSE 31013
// points := [ 40 , 10 , 20 ] ;
30994: LD_ADDR_VAR 0 9
30998: PUSH
30999: LD_INT 40
31001: PUSH
31002: LD_INT 10
31004: PUSH
31005: LD_INT 20
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31013: LD_VAR 0 6
31017: PPUSH
31018: CALL_OW 264
31022: PUSH
31023: LD_INT 9
31025: PUSH
31026: EMPTY
31027: LIST
31028: IN
31029: IFFALSE 31050
// points := [ 5 , 70 , 20 ] ;
31031: LD_ADDR_VAR 0 9
31035: PUSH
31036: LD_INT 5
31038: PUSH
31039: LD_INT 70
31041: PUSH
31042: LD_INT 20
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31050: LD_VAR 0 6
31054: PPUSH
31055: CALL_OW 264
31059: PUSH
31060: LD_INT 10
31062: PUSH
31063: EMPTY
31064: LIST
31065: IN
31066: IFFALSE 31087
// points := [ 35 , 110 , 70 ] ;
31068: LD_ADDR_VAR 0 9
31072: PUSH
31073: LD_INT 35
31075: PUSH
31076: LD_INT 110
31078: PUSH
31079: LD_INT 70
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31087: LD_VAR 0 6
31091: PPUSH
31092: CALL_OW 265
31096: PUSH
31097: LD_INT 25
31099: EQUAL
31100: IFFALSE 31121
// points := [ 80 , 65 , 100 ] ;
31102: LD_ADDR_VAR 0 9
31106: PUSH
31107: LD_INT 80
31109: PUSH
31110: LD_INT 65
31112: PUSH
31113: LD_INT 100
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31121: LD_VAR 0 6
31125: PPUSH
31126: CALL_OW 263
31130: PUSH
31131: LD_INT 1
31133: EQUAL
31134: IFFALSE 31169
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31136: LD_ADDR_VAR 0 10
31140: PUSH
31141: LD_VAR 0 10
31145: PUSH
31146: LD_VAR 0 6
31150: PPUSH
31151: CALL_OW 311
31155: PPUSH
31156: LD_INT 3
31158: PPUSH
31159: CALL_OW 259
31163: PUSH
31164: LD_INT 4
31166: MUL
31167: MUL
31168: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31169: LD_VAR 0 6
31173: PPUSH
31174: CALL_OW 263
31178: PUSH
31179: LD_INT 2
31181: EQUAL
31182: IFFALSE 31233
// begin j := IsControledBy ( i ) ;
31184: LD_ADDR_VAR 0 7
31188: PUSH
31189: LD_VAR 0 6
31193: PPUSH
31194: CALL_OW 312
31198: ST_TO_ADDR
// if j then
31199: LD_VAR 0 7
31203: IFFALSE 31233
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31205: LD_ADDR_VAR 0 10
31209: PUSH
31210: LD_VAR 0 10
31214: PUSH
31215: LD_VAR 0 7
31219: PPUSH
31220: LD_INT 3
31222: PPUSH
31223: CALL_OW 259
31227: PUSH
31228: LD_INT 3
31230: MUL
31231: MUL
31232: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31233: LD_VAR 0 6
31237: PPUSH
31238: CALL_OW 264
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: LD_INT 6
31248: PUSH
31249: LD_INT 46
31251: PUSH
31252: LD_INT 44
31254: PUSH
31255: LD_INT 47
31257: PUSH
31258: LD_INT 45
31260: PUSH
31261: LD_INT 28
31263: PUSH
31264: LD_INT 7
31266: PUSH
31267: LD_INT 27
31269: PUSH
31270: LD_INT 29
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: IN
31285: PUSH
31286: LD_VAR 0 1
31290: PPUSH
31291: LD_INT 52
31293: PPUSH
31294: CALL_OW 321
31298: PUSH
31299: LD_INT 2
31301: EQUAL
31302: AND
31303: IFFALSE 31320
// bpoints := bpoints * 1.2 ;
31305: LD_ADDR_VAR 0 10
31309: PUSH
31310: LD_VAR 0 10
31314: PUSH
31315: LD_REAL  1.20000000000000E+0000
31318: MUL
31319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31320: LD_VAR 0 6
31324: PPUSH
31325: CALL_OW 264
31329: PUSH
31330: LD_INT 6
31332: PUSH
31333: LD_INT 46
31335: PUSH
31336: LD_INT 47
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: IN
31344: IFFALSE 31361
// bpoints := bpoints * 1.2 ;
31346: LD_ADDR_VAR 0 10
31350: PUSH
31351: LD_VAR 0 10
31355: PUSH
31356: LD_REAL  1.20000000000000E+0000
31359: MUL
31360: ST_TO_ADDR
// end ; unit_building :
31361: GO 31375
31363: LD_INT 3
31365: DOUBLE
31366: EQUAL
31367: IFTRUE 31371
31369: GO 31374
31371: POP
// ; end ;
31372: GO 31375
31374: POP
// for j = 1 to 3 do
31375: LD_ADDR_VAR 0 7
31379: PUSH
31380: DOUBLE
31381: LD_INT 1
31383: DEC
31384: ST_TO_ADDR
31385: LD_INT 3
31387: PUSH
31388: FOR_TO
31389: IFFALSE 31442
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31391: LD_ADDR_VAR 0 5
31395: PUSH
31396: LD_VAR 0 5
31400: PPUSH
31401: LD_VAR 0 7
31405: PPUSH
31406: LD_VAR 0 5
31410: PUSH
31411: LD_VAR 0 7
31415: ARRAY
31416: PUSH
31417: LD_VAR 0 9
31421: PUSH
31422: LD_VAR 0 7
31426: ARRAY
31427: PUSH
31428: LD_VAR 0 10
31432: MUL
31433: PLUS
31434: PPUSH
31435: CALL_OW 1
31439: ST_TO_ADDR
31440: GO 31388
31442: POP
31443: POP
// end ;
31444: GO 29927
31446: POP
31447: POP
// result := Replace ( result , 4 , tmp ) ;
31448: LD_ADDR_VAR 0 5
31452: PUSH
31453: LD_VAR 0 5
31457: PPUSH
31458: LD_INT 4
31460: PPUSH
31461: LD_VAR 0 8
31465: PPUSH
31466: CALL_OW 1
31470: ST_TO_ADDR
// end ;
31471: LD_VAR 0 5
31475: RET
// export function DangerAtRange ( unit , range ) ; begin
31476: LD_INT 0
31478: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 255
31493: PPUSH
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 250
31503: PPUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 251
31513: PPUSH
31514: LD_VAR 0 2
31518: PPUSH
31519: CALL 29779 0 4
31523: ST_TO_ADDR
// end ;
31524: LD_VAR 0 3
31528: RET
// export function DangerInArea ( side , area ) ; begin
31529: LD_INT 0
31531: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_VAR 0 2
31541: PPUSH
31542: LD_INT 81
31544: PUSH
31545: LD_VAR 0 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PPUSH
31554: CALL_OW 70
31558: ST_TO_ADDR
// end ;
31559: LD_VAR 0 3
31563: RET
// export function IsExtension ( b ) ; begin
31564: LD_INT 0
31566: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31567: LD_ADDR_VAR 0 2
31571: PUSH
31572: LD_VAR 0 1
31576: PUSH
31577: LD_INT 23
31579: PUSH
31580: LD_INT 20
31582: PUSH
31583: LD_INT 22
31585: PUSH
31586: LD_INT 17
31588: PUSH
31589: LD_INT 24
31591: PUSH
31592: LD_INT 21
31594: PUSH
31595: LD_INT 19
31597: PUSH
31598: LD_INT 16
31600: PUSH
31601: LD_INT 25
31603: PUSH
31604: LD_INT 18
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: IN
31619: ST_TO_ADDR
// end ;
31620: LD_VAR 0 2
31624: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
31625: LD_INT 0
31627: PPUSH
31628: PPUSH
31629: PPUSH
// result := [ ] ;
31630: LD_ADDR_VAR 0 3
31634: PUSH
31635: EMPTY
31636: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31637: LD_ADDR_VAR 0 4
31641: PUSH
31642: LD_VAR 0 2
31646: PPUSH
31647: LD_INT 21
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL_OW 70
31661: ST_TO_ADDR
// if not tmp then
31662: LD_VAR 0 4
31666: NOT
31667: IFFALSE 31671
// exit ;
31669: GO 31729
// for i in tmp do
31671: LD_ADDR_VAR 0 5
31675: PUSH
31676: LD_VAR 0 4
31680: PUSH
31681: FOR_IN
31682: IFFALSE 31717
// if GetBase ( i ) <> base then
31684: LD_VAR 0 5
31688: PPUSH
31689: CALL_OW 274
31693: PUSH
31694: LD_VAR 0 1
31698: NONEQUAL
31699: IFFALSE 31715
// ComLinkToBase ( base , i ) ;
31701: LD_VAR 0 1
31705: PPUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: CALL_OW 169
31715: GO 31681
31717: POP
31718: POP
// result := tmp ;
31719: LD_ADDR_VAR 0 3
31723: PUSH
31724: LD_VAR 0 4
31728: ST_TO_ADDR
// end ;
31729: LD_VAR 0 3
31733: RET
// export function ComComplete ( unit , b ) ; var i ; begin
31734: LD_INT 0
31736: PPUSH
31737: PPUSH
// if BuildingStatus ( b ) = bs_build then
31738: LD_VAR 0 2
31742: PPUSH
31743: CALL_OW 461
31747: PUSH
31748: LD_INT 1
31750: EQUAL
31751: IFFALSE 31811
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31753: LD_VAR 0 1
31757: PPUSH
31758: LD_STRING h
31760: PUSH
31761: LD_VAR 0 2
31765: PPUSH
31766: CALL_OW 250
31770: PUSH
31771: LD_VAR 0 2
31775: PPUSH
31776: CALL_OW 251
31780: PUSH
31781: LD_VAR 0 2
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: PUSH
31804: EMPTY
31805: LIST
31806: PPUSH
31807: CALL_OW 446
// end ;
31811: LD_VAR 0 3
31815: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31816: LD_INT 0
31818: PPUSH
31819: PPUSH
31820: PPUSH
31821: PPUSH
31822: PPUSH
31823: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31824: LD_VAR 0 1
31828: NOT
31829: PUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: CALL_OW 263
31839: PUSH
31840: LD_INT 2
31842: EQUAL
31843: NOT
31844: OR
31845: IFFALSE 31849
// exit ;
31847: GO 32165
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31849: LD_ADDR_VAR 0 6
31853: PUSH
31854: LD_INT 22
31856: PUSH
31857: LD_VAR 0 1
31861: PPUSH
31862: CALL_OW 255
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: LD_INT 30
31876: PUSH
31877: LD_INT 36
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 34
31886: PUSH
31887: LD_INT 31
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PPUSH
31903: CALL_OW 69
31907: ST_TO_ADDR
// if not tmp then
31908: LD_VAR 0 6
31912: NOT
31913: IFFALSE 31917
// exit ;
31915: GO 32165
// result := [ ] ;
31917: LD_ADDR_VAR 0 2
31921: PUSH
31922: EMPTY
31923: ST_TO_ADDR
// for i in tmp do
31924: LD_ADDR_VAR 0 3
31928: PUSH
31929: LD_VAR 0 6
31933: PUSH
31934: FOR_IN
31935: IFFALSE 32006
// begin t := UnitsInside ( i ) ;
31937: LD_ADDR_VAR 0 4
31941: PUSH
31942: LD_VAR 0 3
31946: PPUSH
31947: CALL_OW 313
31951: ST_TO_ADDR
// if t then
31952: LD_VAR 0 4
31956: IFFALSE 32004
// for j in t do
31958: LD_ADDR_VAR 0 7
31962: PUSH
31963: LD_VAR 0 4
31967: PUSH
31968: FOR_IN
31969: IFFALSE 32002
// result := Insert ( result , result + 1 , j ) ;
31971: LD_ADDR_VAR 0 2
31975: PUSH
31976: LD_VAR 0 2
31980: PPUSH
31981: LD_VAR 0 2
31985: PUSH
31986: LD_INT 1
31988: PLUS
31989: PPUSH
31990: LD_VAR 0 7
31994: PPUSH
31995: CALL_OW 2
31999: ST_TO_ADDR
32000: GO 31968
32002: POP
32003: POP
// end ;
32004: GO 31934
32006: POP
32007: POP
// if not result then
32008: LD_VAR 0 2
32012: NOT
32013: IFFALSE 32017
// exit ;
32015: GO 32165
// mech := result [ 1 ] ;
32017: LD_ADDR_VAR 0 5
32021: PUSH
32022: LD_VAR 0 2
32026: PUSH
32027: LD_INT 1
32029: ARRAY
32030: ST_TO_ADDR
// if result > 1 then
32031: LD_VAR 0 2
32035: PUSH
32036: LD_INT 1
32038: GREATER
32039: IFFALSE 32151
// for i = 2 to result do
32041: LD_ADDR_VAR 0 3
32045: PUSH
32046: DOUBLE
32047: LD_INT 2
32049: DEC
32050: ST_TO_ADDR
32051: LD_VAR 0 2
32055: PUSH
32056: FOR_TO
32057: IFFALSE 32149
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32059: LD_ADDR_VAR 0 4
32063: PUSH
32064: LD_VAR 0 2
32068: PUSH
32069: LD_VAR 0 3
32073: ARRAY
32074: PPUSH
32075: LD_INT 3
32077: PPUSH
32078: CALL_OW 259
32082: PUSH
32083: LD_VAR 0 2
32087: PUSH
32088: LD_VAR 0 3
32092: ARRAY
32093: PPUSH
32094: CALL_OW 432
32098: MINUS
32099: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32100: LD_VAR 0 4
32104: PUSH
32105: LD_VAR 0 5
32109: PPUSH
32110: LD_INT 3
32112: PPUSH
32113: CALL_OW 259
32117: PUSH
32118: LD_VAR 0 5
32122: PPUSH
32123: CALL_OW 432
32127: MINUS
32128: GREATEREQUAL
32129: IFFALSE 32147
// mech := result [ i ] ;
32131: LD_ADDR_VAR 0 5
32135: PUSH
32136: LD_VAR 0 2
32140: PUSH
32141: LD_VAR 0 3
32145: ARRAY
32146: ST_TO_ADDR
// end ;
32147: GO 32056
32149: POP
32150: POP
// ComLinkTo ( vehicle , mech ) ;
32151: LD_VAR 0 1
32155: PPUSH
32156: LD_VAR 0 5
32160: PPUSH
32161: CALL_OW 135
// end ;
32165: LD_VAR 0 2
32169: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32170: LD_INT 0
32172: PPUSH
32173: PPUSH
32174: PPUSH
32175: PPUSH
32176: PPUSH
32177: PPUSH
32178: PPUSH
32179: PPUSH
32180: PPUSH
32181: PPUSH
32182: PPUSH
32183: PPUSH
32184: PPUSH
// result := [ ] ;
32185: LD_ADDR_VAR 0 7
32189: PUSH
32190: EMPTY
32191: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32192: LD_VAR 0 1
32196: PPUSH
32197: CALL_OW 266
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: IN
32212: NOT
32213: IFFALSE 32217
// exit ;
32215: GO 33848
// if name then
32217: LD_VAR 0 3
32221: IFFALSE 32237
// SetBName ( base_dep , name ) ;
32223: LD_VAR 0 1
32227: PPUSH
32228: LD_VAR 0 3
32232: PPUSH
32233: CALL_OW 500
// base := GetBase ( base_dep ) ;
32237: LD_ADDR_VAR 0 15
32241: PUSH
32242: LD_VAR 0 1
32246: PPUSH
32247: CALL_OW 274
32251: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32252: LD_ADDR_VAR 0 16
32256: PUSH
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 255
32266: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32267: LD_ADDR_VAR 0 17
32271: PUSH
32272: LD_VAR 0 1
32276: PPUSH
32277: CALL_OW 248
32281: ST_TO_ADDR
// if sources then
32282: LD_VAR 0 5
32286: IFFALSE 32333
// for i = 1 to 3 do
32288: LD_ADDR_VAR 0 8
32292: PUSH
32293: DOUBLE
32294: LD_INT 1
32296: DEC
32297: ST_TO_ADDR
32298: LD_INT 3
32300: PUSH
32301: FOR_TO
32302: IFFALSE 32331
// AddResourceType ( base , i , sources [ i ] ) ;
32304: LD_VAR 0 15
32308: PPUSH
32309: LD_VAR 0 8
32313: PPUSH
32314: LD_VAR 0 5
32318: PUSH
32319: LD_VAR 0 8
32323: ARRAY
32324: PPUSH
32325: CALL_OW 276
32329: GO 32301
32331: POP
32332: POP
// buildings := GetBaseBuildings ( base , area ) ;
32333: LD_ADDR_VAR 0 18
32337: PUSH
32338: LD_VAR 0 15
32342: PPUSH
32343: LD_VAR 0 2
32347: PPUSH
32348: CALL 31625 0 2
32352: ST_TO_ADDR
// InitHc ;
32353: CALL_OW 19
// InitUc ;
32357: CALL_OW 18
// uc_side := side ;
32361: LD_ADDR_OWVAR 20
32365: PUSH
32366: LD_VAR 0 16
32370: ST_TO_ADDR
// uc_nation := nation ;
32371: LD_ADDR_OWVAR 21
32375: PUSH
32376: LD_VAR 0 17
32380: ST_TO_ADDR
// if buildings then
32381: LD_VAR 0 18
32385: IFFALSE 33707
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32387: LD_ADDR_VAR 0 19
32391: PUSH
32392: LD_VAR 0 18
32396: PPUSH
32397: LD_INT 2
32399: PUSH
32400: LD_INT 30
32402: PUSH
32403: LD_INT 29
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 30
32412: PUSH
32413: LD_INT 30
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: PPUSH
32425: CALL_OW 72
32429: ST_TO_ADDR
// if tmp then
32430: LD_VAR 0 19
32434: IFFALSE 32482
// for i in tmp do
32436: LD_ADDR_VAR 0 8
32440: PUSH
32441: LD_VAR 0 19
32445: PUSH
32446: FOR_IN
32447: IFFALSE 32480
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32449: LD_VAR 0 8
32453: PPUSH
32454: CALL_OW 250
32458: PPUSH
32459: LD_VAR 0 8
32463: PPUSH
32464: CALL_OW 251
32468: PPUSH
32469: LD_VAR 0 16
32473: PPUSH
32474: CALL_OW 441
32478: GO 32446
32480: POP
32481: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32482: LD_VAR 0 18
32486: PPUSH
32487: LD_INT 2
32489: PUSH
32490: LD_INT 30
32492: PUSH
32493: LD_INT 32
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 30
32502: PUSH
32503: LD_INT 33
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 72
32519: IFFALSE 32607
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32521: LD_ADDR_VAR 0 8
32525: PUSH
32526: LD_VAR 0 18
32530: PPUSH
32531: LD_INT 2
32533: PUSH
32534: LD_INT 30
32536: PUSH
32537: LD_INT 32
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 30
32546: PUSH
32547: LD_INT 33
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: PPUSH
32559: CALL_OW 72
32563: PUSH
32564: FOR_IN
32565: IFFALSE 32605
// begin if not GetBWeapon ( i ) then
32567: LD_VAR 0 8
32571: PPUSH
32572: CALL_OW 269
32576: NOT
32577: IFFALSE 32603
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32579: LD_VAR 0 8
32583: PPUSH
32584: LD_VAR 0 8
32588: PPUSH
32589: LD_VAR 0 2
32593: PPUSH
32594: CALL 33853 0 2
32598: PPUSH
32599: CALL_OW 431
// end ;
32603: GO 32564
32605: POP
32606: POP
// end ; for i = 1 to personel do
32607: LD_ADDR_VAR 0 8
32611: PUSH
32612: DOUBLE
32613: LD_INT 1
32615: DEC
32616: ST_TO_ADDR
32617: LD_VAR 0 6
32621: PUSH
32622: FOR_TO
32623: IFFALSE 33687
// begin if i > 4 then
32625: LD_VAR 0 8
32629: PUSH
32630: LD_INT 4
32632: GREATER
32633: IFFALSE 32637
// break ;
32635: GO 33687
// case i of 1 :
32637: LD_VAR 0 8
32641: PUSH
32642: LD_INT 1
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32730
32650: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32651: LD_ADDR_VAR 0 12
32655: PUSH
32656: LD_VAR 0 18
32660: PPUSH
32661: LD_INT 22
32663: PUSH
32664: LD_VAR 0 16
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 58
32675: PUSH
32676: EMPTY
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 30
32684: PUSH
32685: LD_INT 32
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 30
32694: PUSH
32695: LD_INT 4
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 30
32704: PUSH
32705: LD_INT 5
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: PPUSH
32723: CALL_OW 72
32727: ST_TO_ADDR
32728: GO 32952
32730: LD_INT 2
32732: DOUBLE
32733: EQUAL
32734: IFTRUE 32738
32736: GO 32800
32738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32739: LD_ADDR_VAR 0 12
32743: PUSH
32744: LD_VAR 0 18
32748: PPUSH
32749: LD_INT 22
32751: PUSH
32752: LD_VAR 0 16
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 30
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 30
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PPUSH
32793: CALL_OW 72
32797: ST_TO_ADDR
32798: GO 32952
32800: LD_INT 3
32802: DOUBLE
32803: EQUAL
32804: IFTRUE 32808
32806: GO 32870
32808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32809: LD_ADDR_VAR 0 12
32813: PUSH
32814: LD_VAR 0 18
32818: PPUSH
32819: LD_INT 22
32821: PUSH
32822: LD_VAR 0 16
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 30
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 30
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PPUSH
32863: CALL_OW 72
32867: ST_TO_ADDR
32868: GO 32952
32870: LD_INT 4
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32951
32878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32879: LD_ADDR_VAR 0 12
32883: PUSH
32884: LD_VAR 0 18
32888: PPUSH
32889: LD_INT 22
32891: PUSH
32892: LD_VAR 0 16
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: LD_INT 30
32906: PUSH
32907: LD_INT 6
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 30
32916: PUSH
32917: LD_INT 7
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 30
32926: PUSH
32927: LD_INT 8
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PPUSH
32944: CALL_OW 72
32948: ST_TO_ADDR
32949: GO 32952
32951: POP
// if i = 1 then
32952: LD_VAR 0 8
32956: PUSH
32957: LD_INT 1
32959: EQUAL
32960: IFFALSE 33071
// begin tmp := [ ] ;
32962: LD_ADDR_VAR 0 19
32966: PUSH
32967: EMPTY
32968: ST_TO_ADDR
// for j in f do
32969: LD_ADDR_VAR 0 9
32973: PUSH
32974: LD_VAR 0 12
32978: PUSH
32979: FOR_IN
32980: IFFALSE 33053
// if GetBType ( j ) = b_bunker then
32982: LD_VAR 0 9
32986: PPUSH
32987: CALL_OW 266
32991: PUSH
32992: LD_INT 32
32994: EQUAL
32995: IFFALSE 33022
// tmp := Insert ( tmp , 1 , j ) else
32997: LD_ADDR_VAR 0 19
33001: PUSH
33002: LD_VAR 0 19
33006: PPUSH
33007: LD_INT 1
33009: PPUSH
33010: LD_VAR 0 9
33014: PPUSH
33015: CALL_OW 2
33019: ST_TO_ADDR
33020: GO 33051
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33022: LD_ADDR_VAR 0 19
33026: PUSH
33027: LD_VAR 0 19
33031: PPUSH
33032: LD_VAR 0 19
33036: PUSH
33037: LD_INT 1
33039: PLUS
33040: PPUSH
33041: LD_VAR 0 9
33045: PPUSH
33046: CALL_OW 2
33050: ST_TO_ADDR
33051: GO 32979
33053: POP
33054: POP
// if tmp then
33055: LD_VAR 0 19
33059: IFFALSE 33071
// f := tmp ;
33061: LD_ADDR_VAR 0 12
33065: PUSH
33066: LD_VAR 0 19
33070: ST_TO_ADDR
// end ; x := personel [ i ] ;
33071: LD_ADDR_VAR 0 13
33075: PUSH
33076: LD_VAR 0 6
33080: PUSH
33081: LD_VAR 0 8
33085: ARRAY
33086: ST_TO_ADDR
// if x = - 1 then
33087: LD_VAR 0 13
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: EQUAL
33096: IFFALSE 33305
// begin for j in f do
33098: LD_ADDR_VAR 0 9
33102: PUSH
33103: LD_VAR 0 12
33107: PUSH
33108: FOR_IN
33109: IFFALSE 33301
// repeat InitHc ;
33111: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33115: LD_VAR 0 9
33119: PPUSH
33120: CALL_OW 266
33124: PUSH
33125: LD_INT 5
33127: EQUAL
33128: IFFALSE 33198
// begin if UnitsInside ( j ) < 3 then
33130: LD_VAR 0 9
33134: PPUSH
33135: CALL_OW 313
33139: PUSH
33140: LD_INT 3
33142: LESS
33143: IFFALSE 33179
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33145: LD_INT 0
33147: PPUSH
33148: LD_INT 5
33150: PUSH
33151: LD_INT 8
33153: PUSH
33154: LD_INT 9
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: PUSH
33162: LD_VAR 0 17
33166: ARRAY
33167: PPUSH
33168: LD_VAR 0 4
33172: PPUSH
33173: CALL_OW 380
33177: GO 33196
// PrepareHuman ( false , i , skill ) ;
33179: LD_INT 0
33181: PPUSH
33182: LD_VAR 0 8
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: CALL_OW 380
// end else
33196: GO 33215
// PrepareHuman ( false , i , skill ) ;
33198: LD_INT 0
33200: PPUSH
33201: LD_VAR 0 8
33205: PPUSH
33206: LD_VAR 0 4
33210: PPUSH
33211: CALL_OW 380
// un := CreateHuman ;
33215: LD_ADDR_VAR 0 14
33219: PUSH
33220: CALL_OW 44
33224: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33225: LD_ADDR_VAR 0 7
33229: PUSH
33230: LD_VAR 0 7
33234: PPUSH
33235: LD_INT 1
33237: PPUSH
33238: LD_VAR 0 14
33242: PPUSH
33243: CALL_OW 2
33247: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33248: LD_VAR 0 14
33252: PPUSH
33253: LD_VAR 0 9
33257: PPUSH
33258: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33262: LD_VAR 0 9
33266: PPUSH
33267: CALL_OW 313
33271: PUSH
33272: LD_INT 6
33274: EQUAL
33275: PUSH
33276: LD_VAR 0 9
33280: PPUSH
33281: CALL_OW 266
33285: PUSH
33286: LD_INT 32
33288: PUSH
33289: LD_INT 31
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: IN
33296: OR
33297: IFFALSE 33111
33299: GO 33108
33301: POP
33302: POP
// end else
33303: GO 33685
// for j = 1 to x do
33305: LD_ADDR_VAR 0 9
33309: PUSH
33310: DOUBLE
33311: LD_INT 1
33313: DEC
33314: ST_TO_ADDR
33315: LD_VAR 0 13
33319: PUSH
33320: FOR_TO
33321: IFFALSE 33683
// begin InitHc ;
33323: CALL_OW 19
// if not f then
33327: LD_VAR 0 12
33331: NOT
33332: IFFALSE 33421
// begin PrepareHuman ( false , i , skill ) ;
33334: LD_INT 0
33336: PPUSH
33337: LD_VAR 0 8
33341: PPUSH
33342: LD_VAR 0 4
33346: PPUSH
33347: CALL_OW 380
// un := CreateHuman ;
33351: LD_ADDR_VAR 0 14
33355: PUSH
33356: CALL_OW 44
33360: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33361: LD_ADDR_VAR 0 7
33365: PUSH
33366: LD_VAR 0 7
33370: PPUSH
33371: LD_INT 1
33373: PPUSH
33374: LD_VAR 0 14
33378: PPUSH
33379: CALL_OW 2
33383: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33384: LD_VAR 0 14
33388: PPUSH
33389: LD_VAR 0 1
33393: PPUSH
33394: CALL_OW 250
33398: PPUSH
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL_OW 251
33408: PPUSH
33409: LD_INT 10
33411: PPUSH
33412: LD_INT 0
33414: PPUSH
33415: CALL_OW 50
// continue ;
33419: GO 33320
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33421: LD_VAR 0 12
33425: PUSH
33426: LD_INT 1
33428: ARRAY
33429: PPUSH
33430: CALL_OW 313
33434: PUSH
33435: LD_VAR 0 12
33439: PUSH
33440: LD_INT 1
33442: ARRAY
33443: PPUSH
33444: CALL_OW 266
33448: PUSH
33449: LD_INT 32
33451: PUSH
33452: LD_INT 31
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: IN
33459: AND
33460: PUSH
33461: LD_VAR 0 12
33465: PUSH
33466: LD_INT 1
33468: ARRAY
33469: PPUSH
33470: CALL_OW 313
33474: PUSH
33475: LD_INT 6
33477: EQUAL
33478: OR
33479: IFFALSE 33499
// f := Delete ( f , 1 ) ;
33481: LD_ADDR_VAR 0 12
33485: PUSH
33486: LD_VAR 0 12
33490: PPUSH
33491: LD_INT 1
33493: PPUSH
33494: CALL_OW 3
33498: ST_TO_ADDR
// if not f then
33499: LD_VAR 0 12
33503: NOT
33504: IFFALSE 33522
// begin x := x + 2 ;
33506: LD_ADDR_VAR 0 13
33510: PUSH
33511: LD_VAR 0 13
33515: PUSH
33516: LD_INT 2
33518: PLUS
33519: ST_TO_ADDR
// continue ;
33520: GO 33320
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33522: LD_VAR 0 12
33526: PUSH
33527: LD_INT 1
33529: ARRAY
33530: PPUSH
33531: CALL_OW 266
33535: PUSH
33536: LD_INT 5
33538: EQUAL
33539: IFFALSE 33613
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33541: LD_VAR 0 12
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: PPUSH
33550: CALL_OW 313
33554: PUSH
33555: LD_INT 3
33557: LESS
33558: IFFALSE 33594
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33560: LD_INT 0
33562: PPUSH
33563: LD_INT 5
33565: PUSH
33566: LD_INT 8
33568: PUSH
33569: LD_INT 9
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: LIST
33576: PUSH
33577: LD_VAR 0 17
33581: ARRAY
33582: PPUSH
33583: LD_VAR 0 4
33587: PPUSH
33588: CALL_OW 380
33592: GO 33611
// PrepareHuman ( false , i , skill ) ;
33594: LD_INT 0
33596: PPUSH
33597: LD_VAR 0 8
33601: PPUSH
33602: LD_VAR 0 4
33606: PPUSH
33607: CALL_OW 380
// end else
33611: GO 33630
// PrepareHuman ( false , i , skill ) ;
33613: LD_INT 0
33615: PPUSH
33616: LD_VAR 0 8
33620: PPUSH
33621: LD_VAR 0 4
33625: PPUSH
33626: CALL_OW 380
// un := CreateHuman ;
33630: LD_ADDR_VAR 0 14
33634: PUSH
33635: CALL_OW 44
33639: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33640: LD_ADDR_VAR 0 7
33644: PUSH
33645: LD_VAR 0 7
33649: PPUSH
33650: LD_INT 1
33652: PPUSH
33653: LD_VAR 0 14
33657: PPUSH
33658: CALL_OW 2
33662: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33663: LD_VAR 0 14
33667: PPUSH
33668: LD_VAR 0 12
33672: PUSH
33673: LD_INT 1
33675: ARRAY
33676: PPUSH
33677: CALL_OW 52
// end ;
33681: GO 33320
33683: POP
33684: POP
// end ;
33685: GO 32622
33687: POP
33688: POP
// result := result ^ buildings ;
33689: LD_ADDR_VAR 0 7
33693: PUSH
33694: LD_VAR 0 7
33698: PUSH
33699: LD_VAR 0 18
33703: ADD
33704: ST_TO_ADDR
// end else
33705: GO 33848
// begin for i = 1 to personel do
33707: LD_ADDR_VAR 0 8
33711: PUSH
33712: DOUBLE
33713: LD_INT 1
33715: DEC
33716: ST_TO_ADDR
33717: LD_VAR 0 6
33721: PUSH
33722: FOR_TO
33723: IFFALSE 33846
// begin if i > 4 then
33725: LD_VAR 0 8
33729: PUSH
33730: LD_INT 4
33732: GREATER
33733: IFFALSE 33737
// break ;
33735: GO 33846
// x := personel [ i ] ;
33737: LD_ADDR_VAR 0 13
33741: PUSH
33742: LD_VAR 0 6
33746: PUSH
33747: LD_VAR 0 8
33751: ARRAY
33752: ST_TO_ADDR
// if x = - 1 then
33753: LD_VAR 0 13
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: EQUAL
33762: IFFALSE 33766
// continue ;
33764: GO 33722
// PrepareHuman ( false , i , skill ) ;
33766: LD_INT 0
33768: PPUSH
33769: LD_VAR 0 8
33773: PPUSH
33774: LD_VAR 0 4
33778: PPUSH
33779: CALL_OW 380
// un := CreateHuman ;
33783: LD_ADDR_VAR 0 14
33787: PUSH
33788: CALL_OW 44
33792: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33793: LD_VAR 0 14
33797: PPUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: CALL_OW 250
33807: PPUSH
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 251
33817: PPUSH
33818: LD_INT 10
33820: PPUSH
33821: LD_INT 0
33823: PPUSH
33824: CALL_OW 50
// result := result ^ un ;
33828: LD_ADDR_VAR 0 7
33832: PUSH
33833: LD_VAR 0 7
33837: PUSH
33838: LD_VAR 0 14
33842: ADD
33843: ST_TO_ADDR
// end ;
33844: GO 33722
33846: POP
33847: POP
// end ; end ;
33848: LD_VAR 0 7
33852: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33853: LD_INT 0
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
// result := false ;
33871: LD_ADDR_VAR 0 3
33875: PUSH
33876: LD_INT 0
33878: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33879: LD_VAR 0 1
33883: NOT
33884: PUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL_OW 266
33894: PUSH
33895: LD_INT 32
33897: PUSH
33898: LD_INT 33
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: IN
33905: NOT
33906: OR
33907: IFFALSE 33911
// exit ;
33909: GO 35047
// nat := GetNation ( tower ) ;
33911: LD_ADDR_VAR 0 12
33915: PUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: CALL_OW 248
33925: ST_TO_ADDR
// side := GetSide ( tower ) ;
33926: LD_ADDR_VAR 0 16
33930: PUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 255
33940: ST_TO_ADDR
// x := GetX ( tower ) ;
33941: LD_ADDR_VAR 0 10
33945: PUSH
33946: LD_VAR 0 1
33950: PPUSH
33951: CALL_OW 250
33955: ST_TO_ADDR
// y := GetY ( tower ) ;
33956: LD_ADDR_VAR 0 11
33960: PUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 251
33970: ST_TO_ADDR
// if not x or not y then
33971: LD_VAR 0 10
33975: NOT
33976: PUSH
33977: LD_VAR 0 11
33981: NOT
33982: OR
33983: IFFALSE 33987
// exit ;
33985: GO 35047
// weapon := 0 ;
33987: LD_ADDR_VAR 0 18
33991: PUSH
33992: LD_INT 0
33994: ST_TO_ADDR
// fac_list := [ ] ;
33995: LD_ADDR_VAR 0 17
33999: PUSH
34000: EMPTY
34001: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
34002: LD_ADDR_VAR 0 6
34006: PUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 274
34016: PPUSH
34017: LD_VAR 0 2
34021: PPUSH
34022: CALL 31625 0 2
34026: PPUSH
34027: LD_INT 30
34029: PUSH
34030: LD_INT 3
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PPUSH
34037: CALL_OW 72
34041: ST_TO_ADDR
// if not factories then
34042: LD_VAR 0 6
34046: NOT
34047: IFFALSE 34051
// exit ;
34049: GO 35047
// for i in factories do
34051: LD_ADDR_VAR 0 8
34055: PUSH
34056: LD_VAR 0 6
34060: PUSH
34061: FOR_IN
34062: IFFALSE 34087
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34064: LD_ADDR_VAR 0 17
34068: PUSH
34069: LD_VAR 0 17
34073: PUSH
34074: LD_VAR 0 8
34078: PPUSH
34079: CALL_OW 478
34083: UNION
34084: ST_TO_ADDR
34085: GO 34061
34087: POP
34088: POP
// if not fac_list then
34089: LD_VAR 0 17
34093: NOT
34094: IFFALSE 34098
// exit ;
34096: GO 35047
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34098: LD_ADDR_VAR 0 5
34102: PUSH
34103: LD_INT 4
34105: PUSH
34106: LD_INT 5
34108: PUSH
34109: LD_INT 9
34111: PUSH
34112: LD_INT 10
34114: PUSH
34115: LD_INT 6
34117: PUSH
34118: LD_INT 7
34120: PUSH
34121: LD_INT 11
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 27
34135: PUSH
34136: LD_INT 28
34138: PUSH
34139: LD_INT 26
34141: PUSH
34142: LD_INT 30
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 43
34153: PUSH
34154: LD_INT 44
34156: PUSH
34157: LD_INT 46
34159: PUSH
34160: LD_INT 45
34162: PUSH
34163: LD_INT 47
34165: PUSH
34166: LD_INT 49
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: PUSH
34182: LD_VAR 0 12
34186: ARRAY
34187: ST_TO_ADDR
// for i in list do
34188: LD_ADDR_VAR 0 8
34192: PUSH
34193: LD_VAR 0 5
34197: PUSH
34198: FOR_IN
34199: IFFALSE 34232
// if not i in fac_list then
34201: LD_VAR 0 8
34205: PUSH
34206: LD_VAR 0 17
34210: IN
34211: NOT
34212: IFFALSE 34230
// list := list diff i ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_VAR 0 5
34223: PUSH
34224: LD_VAR 0 8
34228: DIFF
34229: ST_TO_ADDR
34230: GO 34198
34232: POP
34233: POP
// if not list then
34234: LD_VAR 0 5
34238: NOT
34239: IFFALSE 34243
// exit ;
34241: GO 35047
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34243: LD_VAR 0 12
34247: PUSH
34248: LD_INT 3
34250: EQUAL
34251: PUSH
34252: LD_INT 49
34254: PUSH
34255: LD_VAR 0 5
34259: IN
34260: AND
34261: PUSH
34262: LD_INT 31
34264: PPUSH
34265: LD_VAR 0 16
34269: PPUSH
34270: CALL_OW 321
34274: PUSH
34275: LD_INT 2
34277: EQUAL
34278: AND
34279: IFFALSE 34339
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34281: LD_INT 22
34283: PUSH
34284: LD_VAR 0 16
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 35
34295: PUSH
34296: LD_INT 49
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 91
34305: PUSH
34306: LD_VAR 0 1
34310: PUSH
34311: LD_INT 10
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: LIST
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: PPUSH
34324: CALL_OW 69
34328: NOT
34329: IFFALSE 34339
// weapon := ru_time_lapser ;
34331: LD_ADDR_VAR 0 18
34335: PUSH
34336: LD_INT 49
34338: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34339: LD_VAR 0 12
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: IN
34354: PUSH
34355: LD_INT 11
34357: PUSH
34358: LD_VAR 0 5
34362: IN
34363: PUSH
34364: LD_INT 30
34366: PUSH
34367: LD_VAR 0 5
34371: IN
34372: OR
34373: AND
34374: PUSH
34375: LD_INT 6
34377: PPUSH
34378: LD_VAR 0 16
34382: PPUSH
34383: CALL_OW 321
34387: PUSH
34388: LD_INT 2
34390: EQUAL
34391: AND
34392: IFFALSE 34557
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34394: LD_INT 22
34396: PUSH
34397: LD_VAR 0 16
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: LD_INT 35
34411: PUSH
34412: LD_INT 11
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 35
34421: PUSH
34422: LD_INT 30
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 91
34436: PUSH
34437: LD_VAR 0 1
34441: PUSH
34442: LD_INT 18
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 69
34459: NOT
34460: PUSH
34461: LD_INT 22
34463: PUSH
34464: LD_VAR 0 16
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: LD_INT 30
34478: PUSH
34479: LD_INT 32
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 30
34488: PUSH
34489: LD_INT 33
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 91
34503: PUSH
34504: LD_VAR 0 1
34508: PUSH
34509: LD_INT 12
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: PPUSH
34525: CALL_OW 69
34529: PUSH
34530: LD_INT 2
34532: GREATER
34533: AND
34534: IFFALSE 34557
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34536: LD_ADDR_VAR 0 18
34540: PUSH
34541: LD_INT 11
34543: PUSH
34544: LD_INT 30
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_VAR 0 12
34555: ARRAY
34556: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34557: LD_VAR 0 18
34561: NOT
34562: PUSH
34563: LD_INT 40
34565: PPUSH
34566: LD_VAR 0 16
34570: PPUSH
34571: CALL_OW 321
34575: PUSH
34576: LD_INT 2
34578: EQUAL
34579: AND
34580: PUSH
34581: LD_INT 7
34583: PUSH
34584: LD_VAR 0 5
34588: IN
34589: PUSH
34590: LD_INT 28
34592: PUSH
34593: LD_VAR 0 5
34597: IN
34598: OR
34599: PUSH
34600: LD_INT 45
34602: PUSH
34603: LD_VAR 0 5
34607: IN
34608: OR
34609: AND
34610: IFFALSE 34864
// begin hex := GetHexInfo ( x , y ) ;
34612: LD_ADDR_VAR 0 4
34616: PUSH
34617: LD_VAR 0 10
34621: PPUSH
34622: LD_VAR 0 11
34626: PPUSH
34627: CALL_OW 546
34631: ST_TO_ADDR
// if hex [ 1 ] then
34632: LD_VAR 0 4
34636: PUSH
34637: LD_INT 1
34639: ARRAY
34640: IFFALSE 34644
// exit ;
34642: GO 35047
// height := hex [ 2 ] ;
34644: LD_ADDR_VAR 0 15
34648: PUSH
34649: LD_VAR 0 4
34653: PUSH
34654: LD_INT 2
34656: ARRAY
34657: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34658: LD_ADDR_VAR 0 14
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: LD_INT 5
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
// for i in tmp do
34681: LD_ADDR_VAR 0 8
34685: PUSH
34686: LD_VAR 0 14
34690: PUSH
34691: FOR_IN
34692: IFFALSE 34862
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: LD_VAR 0 10
34703: PPUSH
34704: LD_VAR 0 8
34708: PPUSH
34709: LD_INT 5
34711: PPUSH
34712: CALL_OW 272
34716: PUSH
34717: LD_VAR 0 11
34721: PPUSH
34722: LD_VAR 0 8
34726: PPUSH
34727: LD_INT 5
34729: PPUSH
34730: CALL_OW 273
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34739: LD_VAR 0 9
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: PPUSH
34748: LD_VAR 0 9
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: PPUSH
34757: CALL_OW 488
34761: IFFALSE 34860
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34763: LD_ADDR_VAR 0 4
34767: PUSH
34768: LD_VAR 0 9
34772: PUSH
34773: LD_INT 1
34775: ARRAY
34776: PPUSH
34777: LD_VAR 0 9
34781: PUSH
34782: LD_INT 2
34784: ARRAY
34785: PPUSH
34786: CALL_OW 546
34790: ST_TO_ADDR
// if hex [ 1 ] then
34791: LD_VAR 0 4
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: IFFALSE 34803
// continue ;
34801: GO 34691
// h := hex [ 2 ] ;
34803: LD_ADDR_VAR 0 13
34807: PUSH
34808: LD_VAR 0 4
34812: PUSH
34813: LD_INT 2
34815: ARRAY
34816: ST_TO_ADDR
// if h + 7 < height then
34817: LD_VAR 0 13
34821: PUSH
34822: LD_INT 7
34824: PLUS
34825: PUSH
34826: LD_VAR 0 15
34830: LESS
34831: IFFALSE 34860
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34833: LD_ADDR_VAR 0 18
34837: PUSH
34838: LD_INT 7
34840: PUSH
34841: LD_INT 28
34843: PUSH
34844: LD_INT 45
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: PUSH
34852: LD_VAR 0 12
34856: ARRAY
34857: ST_TO_ADDR
// break ;
34858: GO 34862
// end ; end ; end ;
34860: GO 34691
34862: POP
34863: POP
// end ; if not weapon then
34864: LD_VAR 0 18
34868: NOT
34869: IFFALSE 34929
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34871: LD_ADDR_VAR 0 5
34875: PUSH
34876: LD_VAR 0 5
34880: PUSH
34881: LD_INT 11
34883: PUSH
34884: LD_INT 30
34886: PUSH
34887: LD_INT 49
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: DIFF
34895: ST_TO_ADDR
// if not list then
34896: LD_VAR 0 5
34900: NOT
34901: IFFALSE 34905
// exit ;
34903: GO 35047
// weapon := list [ rand ( 1 , list ) ] ;
34905: LD_ADDR_VAR 0 18
34909: PUSH
34910: LD_VAR 0 5
34914: PUSH
34915: LD_INT 1
34917: PPUSH
34918: LD_VAR 0 5
34922: PPUSH
34923: CALL_OW 12
34927: ARRAY
34928: ST_TO_ADDR
// end ; if weapon then
34929: LD_VAR 0 18
34933: IFFALSE 35047
// begin tmp := CostOfWeapon ( weapon ) ;
34935: LD_ADDR_VAR 0 14
34939: PUSH
34940: LD_VAR 0 18
34944: PPUSH
34945: CALL_OW 451
34949: ST_TO_ADDR
// j := GetBase ( tower ) ;
34950: LD_ADDR_VAR 0 9
34954: PUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 274
34964: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34965: LD_VAR 0 9
34969: PPUSH
34970: LD_INT 1
34972: PPUSH
34973: CALL_OW 275
34977: PUSH
34978: LD_VAR 0 14
34982: PUSH
34983: LD_INT 1
34985: ARRAY
34986: GREATEREQUAL
34987: PUSH
34988: LD_VAR 0 9
34992: PPUSH
34993: LD_INT 2
34995: PPUSH
34996: CALL_OW 275
35000: PUSH
35001: LD_VAR 0 14
35005: PUSH
35006: LD_INT 2
35008: ARRAY
35009: GREATEREQUAL
35010: AND
35011: PUSH
35012: LD_VAR 0 9
35016: PPUSH
35017: LD_INT 3
35019: PPUSH
35020: CALL_OW 275
35024: PUSH
35025: LD_VAR 0 14
35029: PUSH
35030: LD_INT 3
35032: ARRAY
35033: GREATEREQUAL
35034: AND
35035: IFFALSE 35047
// result := weapon ;
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_VAR 0 18
35046: ST_TO_ADDR
// end ; end ;
35047: LD_VAR 0 3
35051: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35052: LD_INT 0
35054: PPUSH
35055: PPUSH
// result := true ;
35056: LD_ADDR_VAR 0 3
35060: PUSH
35061: LD_INT 1
35063: ST_TO_ADDR
// if array1 = array2 then
35064: LD_VAR 0 1
35068: PUSH
35069: LD_VAR 0 2
35073: EQUAL
35074: IFFALSE 35134
// begin for i = 1 to array1 do
35076: LD_ADDR_VAR 0 4
35080: PUSH
35081: DOUBLE
35082: LD_INT 1
35084: DEC
35085: ST_TO_ADDR
35086: LD_VAR 0 1
35090: PUSH
35091: FOR_TO
35092: IFFALSE 35130
// if array1 [ i ] <> array2 [ i ] then
35094: LD_VAR 0 1
35098: PUSH
35099: LD_VAR 0 4
35103: ARRAY
35104: PUSH
35105: LD_VAR 0 2
35109: PUSH
35110: LD_VAR 0 4
35114: ARRAY
35115: NONEQUAL
35116: IFFALSE 35128
// begin result := false ;
35118: LD_ADDR_VAR 0 3
35122: PUSH
35123: LD_INT 0
35125: ST_TO_ADDR
// break ;
35126: GO 35130
// end ;
35128: GO 35091
35130: POP
35131: POP
// end else
35132: GO 35142
// result := false ;
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_INT 0
35141: ST_TO_ADDR
// end ;
35142: LD_VAR 0 3
35146: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35147: LD_INT 0
35149: PPUSH
35150: PPUSH
35151: PPUSH
// pom := GetBase ( fac ) ;
35152: LD_ADDR_VAR 0 5
35156: PUSH
35157: LD_VAR 0 1
35161: PPUSH
35162: CALL_OW 274
35166: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35167: LD_ADDR_VAR 0 4
35171: PUSH
35172: LD_VAR 0 2
35176: PUSH
35177: LD_INT 1
35179: ARRAY
35180: PPUSH
35181: LD_VAR 0 2
35185: PUSH
35186: LD_INT 2
35188: ARRAY
35189: PPUSH
35190: LD_VAR 0 2
35194: PUSH
35195: LD_INT 3
35197: ARRAY
35198: PPUSH
35199: LD_VAR 0 2
35203: PUSH
35204: LD_INT 4
35206: ARRAY
35207: PPUSH
35208: CALL_OW 449
35212: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35213: LD_ADDR_VAR 0 3
35217: PUSH
35218: LD_VAR 0 5
35222: PPUSH
35223: LD_INT 1
35225: PPUSH
35226: CALL_OW 275
35230: PUSH
35231: LD_VAR 0 4
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: GREATEREQUAL
35240: PUSH
35241: LD_VAR 0 5
35245: PPUSH
35246: LD_INT 2
35248: PPUSH
35249: CALL_OW 275
35253: PUSH
35254: LD_VAR 0 4
35258: PUSH
35259: LD_INT 2
35261: ARRAY
35262: GREATEREQUAL
35263: AND
35264: PUSH
35265: LD_VAR 0 5
35269: PPUSH
35270: LD_INT 3
35272: PPUSH
35273: CALL_OW 275
35277: PUSH
35278: LD_VAR 0 4
35282: PUSH
35283: LD_INT 3
35285: ARRAY
35286: GREATEREQUAL
35287: AND
35288: ST_TO_ADDR
// end ;
35289: LD_VAR 0 3
35293: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35294: LD_INT 0
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
// pom := GetBase ( building ) ;
35300: LD_ADDR_VAR 0 3
35304: PUSH
35305: LD_VAR 0 1
35309: PPUSH
35310: CALL_OW 274
35314: ST_TO_ADDR
// if not pom then
35315: LD_VAR 0 3
35319: NOT
35320: IFFALSE 35324
// exit ;
35322: GO 35494
// btype := GetBType ( building ) ;
35324: LD_ADDR_VAR 0 5
35328: PUSH
35329: LD_VAR 0 1
35333: PPUSH
35334: CALL_OW 266
35338: ST_TO_ADDR
// if btype = b_armoury then
35339: LD_VAR 0 5
35343: PUSH
35344: LD_INT 4
35346: EQUAL
35347: IFFALSE 35357
// btype := b_barracks ;
35349: LD_ADDR_VAR 0 5
35353: PUSH
35354: LD_INT 5
35356: ST_TO_ADDR
// if btype = b_depot then
35357: LD_VAR 0 5
35361: PUSH
35362: LD_INT 0
35364: EQUAL
35365: IFFALSE 35375
// btype := b_warehouse ;
35367: LD_ADDR_VAR 0 5
35371: PUSH
35372: LD_INT 1
35374: ST_TO_ADDR
// if btype = b_workshop then
35375: LD_VAR 0 5
35379: PUSH
35380: LD_INT 2
35382: EQUAL
35383: IFFALSE 35393
// btype := b_factory ;
35385: LD_ADDR_VAR 0 5
35389: PUSH
35390: LD_INT 3
35392: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35393: LD_ADDR_VAR 0 4
35397: PUSH
35398: LD_VAR 0 5
35402: PPUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 248
35412: PPUSH
35413: CALL_OW 450
35417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35418: LD_ADDR_VAR 0 2
35422: PUSH
35423: LD_VAR 0 3
35427: PPUSH
35428: LD_INT 1
35430: PPUSH
35431: CALL_OW 275
35435: PUSH
35436: LD_VAR 0 4
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: GREATEREQUAL
35445: PUSH
35446: LD_VAR 0 3
35450: PPUSH
35451: LD_INT 2
35453: PPUSH
35454: CALL_OW 275
35458: PUSH
35459: LD_VAR 0 4
35463: PUSH
35464: LD_INT 2
35466: ARRAY
35467: GREATEREQUAL
35468: AND
35469: PUSH
35470: LD_VAR 0 3
35474: PPUSH
35475: LD_INT 3
35477: PPUSH
35478: CALL_OW 275
35482: PUSH
35483: LD_VAR 0 4
35487: PUSH
35488: LD_INT 3
35490: ARRAY
35491: GREATEREQUAL
35492: AND
35493: ST_TO_ADDR
// end ;
35494: LD_VAR 0 2
35498: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35499: LD_INT 0
35501: PPUSH
35502: PPUSH
35503: PPUSH
// pom := GetBase ( building ) ;
35504: LD_ADDR_VAR 0 4
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 274
35518: ST_TO_ADDR
// if not pom then
35519: LD_VAR 0 4
35523: NOT
35524: IFFALSE 35528
// exit ;
35526: GO 35629
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35528: LD_ADDR_VAR 0 5
35532: PUSH
35533: LD_VAR 0 2
35537: PPUSH
35538: LD_VAR 0 1
35542: PPUSH
35543: CALL_OW 248
35547: PPUSH
35548: CALL_OW 450
35552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_VAR 0 4
35562: PPUSH
35563: LD_INT 1
35565: PPUSH
35566: CALL_OW 275
35570: PUSH
35571: LD_VAR 0 5
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: GREATEREQUAL
35580: PUSH
35581: LD_VAR 0 4
35585: PPUSH
35586: LD_INT 2
35588: PPUSH
35589: CALL_OW 275
35593: PUSH
35594: LD_VAR 0 5
35598: PUSH
35599: LD_INT 2
35601: ARRAY
35602: GREATEREQUAL
35603: AND
35604: PUSH
35605: LD_VAR 0 4
35609: PPUSH
35610: LD_INT 3
35612: PPUSH
35613: CALL_OW 275
35617: PUSH
35618: LD_VAR 0 5
35622: PUSH
35623: LD_INT 3
35625: ARRAY
35626: GREATEREQUAL
35627: AND
35628: ST_TO_ADDR
// end ;
35629: LD_VAR 0 3
35633: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
35634: LD_INT 0
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
// result := false ;
35646: LD_ADDR_VAR 0 6
35650: PUSH
35651: LD_INT 0
35653: ST_TO_ADDR
// if not base or not btype or not x or not y then
35654: LD_VAR 0 1
35658: NOT
35659: PUSH
35660: LD_VAR 0 2
35664: NOT
35665: OR
35666: PUSH
35667: LD_VAR 0 3
35671: NOT
35672: OR
35673: PUSH
35674: LD_VAR 0 4
35678: NOT
35679: OR
35680: IFFALSE 35684
// exit ;
35682: GO 36293
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
35684: LD_ADDR_VAR 0 12
35688: PUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: LD_VAR 0 3
35698: PPUSH
35699: LD_VAR 0 4
35703: PPUSH
35704: LD_VAR 0 5
35708: PPUSH
35709: LD_VAR 0 1
35713: PUSH
35714: LD_INT 1
35716: ARRAY
35717: PPUSH
35718: CALL_OW 248
35722: PPUSH
35723: LD_INT 0
35725: PPUSH
35726: CALL 37130 0 6
35730: ST_TO_ADDR
// if not hexes then
35731: LD_VAR 0 12
35735: NOT
35736: IFFALSE 35740
// exit ;
35738: GO 36293
// for i = 1 to hexes do
35740: LD_ADDR_VAR 0 7
35744: PUSH
35745: DOUBLE
35746: LD_INT 1
35748: DEC
35749: ST_TO_ADDR
35750: LD_VAR 0 12
35754: PUSH
35755: FOR_TO
35756: IFFALSE 36291
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35758: LD_ADDR_VAR 0 11
35762: PUSH
35763: LD_VAR 0 12
35767: PUSH
35768: LD_VAR 0 7
35772: ARRAY
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: PPUSH
35778: LD_VAR 0 12
35782: PUSH
35783: LD_VAR 0 7
35787: ARRAY
35788: PUSH
35789: LD_INT 2
35791: ARRAY
35792: PPUSH
35793: CALL_OW 428
35797: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35798: LD_VAR 0 12
35802: PUSH
35803: LD_VAR 0 7
35807: ARRAY
35808: PUSH
35809: LD_INT 1
35811: ARRAY
35812: PPUSH
35813: LD_VAR 0 12
35817: PUSH
35818: LD_VAR 0 7
35822: ARRAY
35823: PUSH
35824: LD_INT 2
35826: ARRAY
35827: PPUSH
35828: CALL_OW 351
35832: PUSH
35833: LD_VAR 0 12
35837: PUSH
35838: LD_VAR 0 7
35842: ARRAY
35843: PUSH
35844: LD_INT 1
35846: ARRAY
35847: PPUSH
35848: LD_VAR 0 12
35852: PUSH
35853: LD_VAR 0 7
35857: ARRAY
35858: PUSH
35859: LD_INT 2
35861: ARRAY
35862: PPUSH
35863: CALL_OW 488
35867: NOT
35868: OR
35869: PUSH
35870: LD_VAR 0 11
35874: PPUSH
35875: CALL_OW 247
35879: PUSH
35880: LD_INT 3
35882: EQUAL
35883: OR
35884: IFFALSE 35890
// exit ;
35886: POP
35887: POP
35888: GO 36293
// if not tmp or not tmp in base then
35890: LD_VAR 0 11
35894: NOT
35895: PUSH
35896: LD_VAR 0 11
35900: PUSH
35901: LD_VAR 0 1
35905: IN
35906: NOT
35907: OR
35908: IFFALSE 35912
// continue ;
35910: GO 35755
// result := true ;
35912: LD_ADDR_VAR 0 6
35916: PUSH
35917: LD_INT 1
35919: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35920: LD_ADDR_VAR 0 15
35924: PUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: LD_INT 22
35932: PUSH
35933: LD_VAR 0 11
35937: PPUSH
35938: CALL_OW 255
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 30
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 30
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PPUSH
35979: CALL_OW 72
35983: ST_TO_ADDR
// if dep then
35984: LD_VAR 0 15
35988: IFFALSE 36124
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35990: LD_ADDR_VAR 0 14
35994: PUSH
35995: LD_VAR 0 15
35999: PUSH
36000: LD_INT 1
36002: ARRAY
36003: PPUSH
36004: CALL_OW 250
36008: PPUSH
36009: LD_VAR 0 15
36013: PUSH
36014: LD_INT 1
36016: ARRAY
36017: PPUSH
36018: CALL_OW 254
36022: PPUSH
36023: LD_INT 5
36025: PPUSH
36026: CALL_OW 272
36030: PUSH
36031: LD_VAR 0 15
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PPUSH
36040: CALL_OW 251
36044: PPUSH
36045: LD_VAR 0 15
36049: PUSH
36050: LD_INT 1
36052: ARRAY
36053: PPUSH
36054: CALL_OW 254
36058: PPUSH
36059: LD_INT 5
36061: PPUSH
36062: CALL_OW 273
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36071: LD_VAR 0 14
36075: PUSH
36076: LD_INT 1
36078: ARRAY
36079: PPUSH
36080: LD_VAR 0 14
36084: PUSH
36085: LD_INT 2
36087: ARRAY
36088: PPUSH
36089: CALL_OW 488
36093: IFFALSE 36124
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36095: LD_VAR 0 11
36099: PPUSH
36100: LD_VAR 0 14
36104: PUSH
36105: LD_INT 1
36107: ARRAY
36108: PPUSH
36109: LD_VAR 0 14
36113: PUSH
36114: LD_INT 2
36116: ARRAY
36117: PPUSH
36118: CALL_OW 111
// continue ;
36122: GO 35755
// end ; end ; r := GetDir ( tmp ) ;
36124: LD_ADDR_VAR 0 13
36128: PUSH
36129: LD_VAR 0 11
36133: PPUSH
36134: CALL_OW 254
36138: ST_TO_ADDR
// if r = 5 then
36139: LD_VAR 0 13
36143: PUSH
36144: LD_INT 5
36146: EQUAL
36147: IFFALSE 36157
// r := 0 ;
36149: LD_ADDR_VAR 0 13
36153: PUSH
36154: LD_INT 0
36156: ST_TO_ADDR
// for j = r to 5 do
36157: LD_ADDR_VAR 0 8
36161: PUSH
36162: DOUBLE
36163: LD_VAR 0 13
36167: DEC
36168: ST_TO_ADDR
36169: LD_INT 5
36171: PUSH
36172: FOR_TO
36173: IFFALSE 36287
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36175: LD_ADDR_VAR 0 9
36179: PUSH
36180: LD_VAR 0 11
36184: PPUSH
36185: CALL_OW 250
36189: PPUSH
36190: LD_VAR 0 8
36194: PPUSH
36195: LD_INT 2
36197: PPUSH
36198: CALL_OW 272
36202: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36203: LD_ADDR_VAR 0 10
36207: PUSH
36208: LD_VAR 0 11
36212: PPUSH
36213: CALL_OW 251
36217: PPUSH
36218: LD_VAR 0 8
36222: PPUSH
36223: LD_INT 2
36225: PPUSH
36226: CALL_OW 273
36230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36231: LD_VAR 0 9
36235: PPUSH
36236: LD_VAR 0 10
36240: PPUSH
36241: CALL_OW 488
36245: PUSH
36246: LD_VAR 0 9
36250: PPUSH
36251: LD_VAR 0 10
36255: PPUSH
36256: CALL_OW 428
36260: NOT
36261: AND
36262: IFFALSE 36285
// begin ComMoveXY ( tmp , _x , _y ) ;
36264: LD_VAR 0 11
36268: PPUSH
36269: LD_VAR 0 9
36273: PPUSH
36274: LD_VAR 0 10
36278: PPUSH
36279: CALL_OW 111
// break ;
36283: GO 36287
// end ; end ;
36285: GO 36172
36287: POP
36288: POP
// end ;
36289: GO 35755
36291: POP
36292: POP
// end ;
36293: LD_VAR 0 6
36297: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36298: LD_INT 0
36300: PPUSH
36301: PPUSH
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
// result := false ;
36310: LD_ADDR_VAR 0 6
36314: PUSH
36315: LD_INT 0
36317: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36318: LD_VAR 0 1
36322: NOT
36323: PUSH
36324: LD_VAR 0 1
36328: PPUSH
36329: CALL_OW 266
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: IN
36344: NOT
36345: OR
36346: PUSH
36347: LD_VAR 0 2
36351: NOT
36352: OR
36353: PUSH
36354: LD_VAR 0 5
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: LD_INT 4
36373: PUSH
36374: LD_INT 5
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: IN
36385: NOT
36386: OR
36387: PUSH
36388: LD_VAR 0 3
36392: PPUSH
36393: LD_VAR 0 4
36397: PPUSH
36398: CALL_OW 488
36402: NOT
36403: OR
36404: IFFALSE 36408
// exit ;
36406: GO 37125
// pom := GetBase ( depot ) ;
36408: LD_ADDR_VAR 0 10
36412: PUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: CALL_OW 274
36422: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36423: LD_ADDR_VAR 0 11
36427: PUSH
36428: LD_VAR 0 2
36432: PPUSH
36433: LD_VAR 0 1
36437: PPUSH
36438: CALL_OW 248
36442: PPUSH
36443: CALL_OW 450
36447: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36448: LD_VAR 0 10
36452: PPUSH
36453: LD_INT 1
36455: PPUSH
36456: CALL_OW 275
36460: PUSH
36461: LD_VAR 0 11
36465: PUSH
36466: LD_INT 1
36468: ARRAY
36469: GREATEREQUAL
36470: PUSH
36471: LD_VAR 0 10
36475: PPUSH
36476: LD_INT 2
36478: PPUSH
36479: CALL_OW 275
36483: PUSH
36484: LD_VAR 0 11
36488: PUSH
36489: LD_INT 2
36491: ARRAY
36492: GREATEREQUAL
36493: AND
36494: PUSH
36495: LD_VAR 0 10
36499: PPUSH
36500: LD_INT 3
36502: PPUSH
36503: CALL_OW 275
36507: PUSH
36508: LD_VAR 0 11
36512: PUSH
36513: LD_INT 3
36515: ARRAY
36516: GREATEREQUAL
36517: AND
36518: NOT
36519: IFFALSE 36523
// exit ;
36521: GO 37125
// if GetBType ( depot ) = b_depot then
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 266
36532: PUSH
36533: LD_INT 0
36535: EQUAL
36536: IFFALSE 36548
// dist := 28 else
36538: LD_ADDR_VAR 0 14
36542: PUSH
36543: LD_INT 28
36545: ST_TO_ADDR
36546: GO 36556
// dist := 36 ;
36548: LD_ADDR_VAR 0 14
36552: PUSH
36553: LD_INT 36
36555: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36556: LD_VAR 0 1
36560: PPUSH
36561: LD_VAR 0 3
36565: PPUSH
36566: LD_VAR 0 4
36570: PPUSH
36571: CALL_OW 297
36575: PUSH
36576: LD_VAR 0 14
36580: GREATER
36581: IFFALSE 36585
// exit ;
36583: GO 37125
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36585: LD_ADDR_VAR 0 12
36589: PUSH
36590: LD_VAR 0 2
36594: PPUSH
36595: LD_VAR 0 3
36599: PPUSH
36600: LD_VAR 0 4
36604: PPUSH
36605: LD_VAR 0 5
36609: PPUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 248
36619: PPUSH
36620: LD_INT 0
36622: PPUSH
36623: CALL 37130 0 6
36627: ST_TO_ADDR
// if not hexes then
36628: LD_VAR 0 12
36632: NOT
36633: IFFALSE 36637
// exit ;
36635: GO 37125
// hex := GetHexInfo ( x , y ) ;
36637: LD_ADDR_VAR 0 15
36641: PUSH
36642: LD_VAR 0 3
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: CALL_OW 546
36656: ST_TO_ADDR
// if hex [ 1 ] then
36657: LD_VAR 0 15
36661: PUSH
36662: LD_INT 1
36664: ARRAY
36665: IFFALSE 36669
// exit ;
36667: GO 37125
// height := hex [ 2 ] ;
36669: LD_ADDR_VAR 0 13
36673: PUSH
36674: LD_VAR 0 15
36678: PUSH
36679: LD_INT 2
36681: ARRAY
36682: ST_TO_ADDR
// for i = 1 to hexes do
36683: LD_ADDR_VAR 0 7
36687: PUSH
36688: DOUBLE
36689: LD_INT 1
36691: DEC
36692: ST_TO_ADDR
36693: LD_VAR 0 12
36697: PUSH
36698: FOR_TO
36699: IFFALSE 37029
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36701: LD_VAR 0 12
36705: PUSH
36706: LD_VAR 0 7
36710: ARRAY
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: LD_VAR 0 12
36720: PUSH
36721: LD_VAR 0 7
36725: ARRAY
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: PPUSH
36731: CALL_OW 488
36735: NOT
36736: PUSH
36737: LD_VAR 0 12
36741: PUSH
36742: LD_VAR 0 7
36746: ARRAY
36747: PUSH
36748: LD_INT 1
36750: ARRAY
36751: PPUSH
36752: LD_VAR 0 12
36756: PUSH
36757: LD_VAR 0 7
36761: ARRAY
36762: PUSH
36763: LD_INT 2
36765: ARRAY
36766: PPUSH
36767: CALL_OW 428
36771: PUSH
36772: LD_INT 0
36774: GREATER
36775: OR
36776: PUSH
36777: LD_VAR 0 12
36781: PUSH
36782: LD_VAR 0 7
36786: ARRAY
36787: PUSH
36788: LD_INT 1
36790: ARRAY
36791: PPUSH
36792: LD_VAR 0 12
36796: PUSH
36797: LD_VAR 0 7
36801: ARRAY
36802: PUSH
36803: LD_INT 2
36805: ARRAY
36806: PPUSH
36807: CALL_OW 351
36811: OR
36812: IFFALSE 36818
// exit ;
36814: POP
36815: POP
36816: GO 37125
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36818: LD_ADDR_VAR 0 8
36822: PUSH
36823: LD_VAR 0 12
36827: PUSH
36828: LD_VAR 0 7
36832: ARRAY
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: LD_VAR 0 12
36842: PUSH
36843: LD_VAR 0 7
36847: ARRAY
36848: PUSH
36849: LD_INT 2
36851: ARRAY
36852: PPUSH
36853: CALL_OW 546
36857: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36858: LD_VAR 0 8
36862: PUSH
36863: LD_INT 1
36865: ARRAY
36866: PUSH
36867: LD_VAR 0 8
36871: PUSH
36872: LD_INT 2
36874: ARRAY
36875: PUSH
36876: LD_VAR 0 13
36880: PUSH
36881: LD_INT 2
36883: PLUS
36884: GREATER
36885: OR
36886: PUSH
36887: LD_VAR 0 8
36891: PUSH
36892: LD_INT 2
36894: ARRAY
36895: PUSH
36896: LD_VAR 0 13
36900: PUSH
36901: LD_INT 2
36903: MINUS
36904: LESS
36905: OR
36906: PUSH
36907: LD_VAR 0 8
36911: PUSH
36912: LD_INT 3
36914: ARRAY
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 8
36921: PUSH
36922: LD_INT 9
36924: PUSH
36925: LD_INT 10
36927: PUSH
36928: LD_INT 11
36930: PUSH
36931: LD_INT 12
36933: PUSH
36934: LD_INT 13
36936: PUSH
36937: LD_INT 16
36939: PUSH
36940: LD_INT 17
36942: PUSH
36943: LD_INT 18
36945: PUSH
36946: LD_INT 19
36948: PUSH
36949: LD_INT 20
36951: PUSH
36952: LD_INT 21
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: IN
36970: NOT
36971: OR
36972: PUSH
36973: LD_VAR 0 8
36977: PUSH
36978: LD_INT 5
36980: ARRAY
36981: NOT
36982: OR
36983: PUSH
36984: LD_VAR 0 8
36988: PUSH
36989: LD_INT 6
36991: ARRAY
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: LD_INT 2
36998: PUSH
36999: LD_INT 7
37001: PUSH
37002: LD_INT 9
37004: PUSH
37005: LD_INT 10
37007: PUSH
37008: LD_INT 11
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: IN
37019: NOT
37020: OR
37021: IFFALSE 37027
// exit ;
37023: POP
37024: POP
37025: GO 37125
// end ;
37027: GO 36698
37029: POP
37030: POP
// side := GetSide ( depot ) ;
37031: LD_ADDR_VAR 0 9
37035: PUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 255
37045: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37046: LD_VAR 0 9
37050: PPUSH
37051: LD_VAR 0 3
37055: PPUSH
37056: LD_VAR 0 4
37060: PPUSH
37061: LD_INT 20
37063: PPUSH
37064: CALL 29779 0 4
37068: PUSH
37069: LD_INT 4
37071: ARRAY
37072: IFFALSE 37076
// exit ;
37074: GO 37125
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37076: LD_VAR 0 2
37080: PUSH
37081: LD_INT 29
37083: PUSH
37084: LD_INT 30
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: IN
37091: PUSH
37092: LD_VAR 0 3
37096: PPUSH
37097: LD_VAR 0 4
37101: PPUSH
37102: LD_VAR 0 9
37106: PPUSH
37107: CALL_OW 440
37111: NOT
37112: AND
37113: IFFALSE 37117
// exit ;
37115: GO 37125
// result := true ;
37117: LD_ADDR_VAR 0 6
37121: PUSH
37122: LD_INT 1
37124: ST_TO_ADDR
// end ;
37125: LD_VAR 0 6
37129: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
37130: LD_INT 0
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
// result = [ ] ;
37190: LD_ADDR_VAR 0 7
37194: PUSH
37195: EMPTY
37196: ST_TO_ADDR
// temp_list = [ ] ;
37197: LD_ADDR_VAR 0 9
37201: PUSH
37202: EMPTY
37203: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37204: LD_VAR 0 4
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 3
37220: PUSH
37221: LD_INT 4
37223: PUSH
37224: LD_INT 5
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: IN
37235: NOT
37236: PUSH
37237: LD_VAR 0 1
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 1
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: IN
37252: PUSH
37253: LD_VAR 0 5
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: IN
37272: NOT
37273: AND
37274: OR
37275: IFFALSE 37279
// exit ;
37277: GO 55670
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37279: LD_VAR 0 1
37283: PUSH
37284: LD_INT 6
37286: PUSH
37287: LD_INT 7
37289: PUSH
37290: LD_INT 8
37292: PUSH
37293: LD_INT 13
37295: PUSH
37296: LD_INT 12
37298: PUSH
37299: LD_INT 15
37301: PUSH
37302: LD_INT 11
37304: PUSH
37305: LD_INT 14
37307: PUSH
37308: LD_INT 10
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: IN
37322: IFFALSE 37332
// btype = b_lab ;
37324: LD_ADDR_VAR 0 1
37328: PUSH
37329: LD_INT 6
37331: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37332: LD_VAR 0 6
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: IN
37351: NOT
37352: PUSH
37353: LD_VAR 0 1
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: LD_INT 6
37372: PUSH
37373: LD_INT 36
37375: PUSH
37376: LD_INT 4
37378: PUSH
37379: LD_INT 5
37381: PUSH
37382: LD_INT 31
37384: PUSH
37385: LD_INT 32
37387: PUSH
37388: LD_INT 33
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: IN
37404: NOT
37405: PUSH
37406: LD_VAR 0 6
37410: PUSH
37411: LD_INT 1
37413: EQUAL
37414: AND
37415: OR
37416: PUSH
37417: LD_VAR 0 1
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 3
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: IN
37432: NOT
37433: PUSH
37434: LD_VAR 0 6
37438: PUSH
37439: LD_INT 2
37441: EQUAL
37442: AND
37443: OR
37444: IFFALSE 37454
// mode = 0 ;
37446: LD_ADDR_VAR 0 6
37450: PUSH
37451: LD_INT 0
37453: ST_TO_ADDR
// case mode of 0 :
37454: LD_VAR 0 6
37458: PUSH
37459: LD_INT 0
37461: DOUBLE
37462: EQUAL
37463: IFTRUE 37467
37465: GO 48920
37467: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37468: LD_ADDR_VAR 0 11
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 2
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 3
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37661: LD_ADDR_VAR 0 12
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: NEG
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 3
37829: NEG
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37857: LD_ADDR_VAR 0 13
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 2
37992: NEG
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: LD_INT 3
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 3
38016: NEG
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 3
38028: NEG
38029: PUSH
38030: LD_INT 3
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38056: LD_ADDR_VAR 0 14
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: LD_INT 3
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 3
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38252: LD_ADDR_VAR 0 15
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 0
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38445: LD_ADDR_VAR 0 16
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 2
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: LD_INT 3
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38638: LD_ADDR_VAR 0 17
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 2
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: LD_INT 2
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38868: LD_ADDR_VAR 0 18
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 2
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39098: LD_ADDR_VAR 0 19
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39328: LD_ADDR_VAR 0 20
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39558: LD_ADDR_VAR 0 21
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39788: LD_ADDR_VAR 0 22
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40018: LD_ADDR_VAR 0 23
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: NEG
40230: PUSH
40231: LD_INT 3
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 3
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40298: LD_ADDR_VAR 0 24
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 3
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40574: LD_ADDR_VAR 0 25
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 2
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40848: LD_ADDR_VAR 0 26
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 3
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41124: LD_ADDR_VAR 0 27
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 3
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 3
41369: NEG
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41404: LD_ADDR_VAR 0 28
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 0
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 1
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 2
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: NEG
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: LD_INT 3
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 3
41651: NEG
41652: PUSH
41653: LD_INT 2
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41686: LD_ADDR_VAR 0 29
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: LD_INT 3
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 3
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 3
41930: NEG
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41965: LD_ADDR_VAR 0 30
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42243: LD_ADDR_VAR 0 31
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: LD_INT 3
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42521: LD_ADDR_VAR 0 32
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 2
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 3
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 3
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 3
42764: NEG
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42799: LD_ADDR_VAR 0 33
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: LD_INT 3
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 3
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43078: LD_ADDR_VAR 0 34
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: LD_INT 3
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 2
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43358: LD_ADDR_VAR 0 35
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43470: LD_ADDR_VAR 0 36
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43582: LD_ADDR_VAR 0 37
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43694: LD_ADDR_VAR 0 38
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43806: LD_ADDR_VAR 0 39
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43918: LD_ADDR_VAR 0 40
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44030: LD_ADDR_VAR 0 41
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 3
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 3
44304: NEG
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 3
44327: NEG
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: LD_INT 3
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44380: LD_ADDR_VAR 0 42
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 3
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 3
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 3
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 3
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 3
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 3
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: LD_INT 3
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44730: LD_ADDR_VAR 0 43
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 3
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 3
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 2
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 3
45026: NEG
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 3
45037: NEG
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45078: LD_ADDR_VAR 0 44
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: LD_INT 3
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 3
45352: NEG
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 3
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 3
45375: NEG
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 3
45387: NEG
45388: PUSH
45389: LD_INT 3
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45428: LD_ADDR_VAR 0 45
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 3
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 3
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: LD_INT 3
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: LD_INT 3
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 3
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 3
45725: NEG
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 3
45737: NEG
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45778: LD_ADDR_VAR 0 46
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 3
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46126: LD_ADDR_VAR 0 47
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46277: LD_ADDR_VAR 0 48
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46424: LD_ADDR_VAR 0 49
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46568: LD_ADDR_VAR 0 50
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46712: LD_ADDR_VAR 0 51
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46859: LD_ADDR_VAR 0 52
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47010: LD_ADDR_VAR 0 53
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47240: LD_ADDR_VAR 0 54
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47470: LD_ADDR_VAR 0 55
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47700: LD_ADDR_VAR 0 56
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47930: LD_ADDR_VAR 0 57
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48160: LD_ADDR_VAR 0 58
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48390: LD_ADDR_VAR 0 59
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48478: LD_ADDR_VAR 0 60
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48566: LD_ADDR_VAR 0 61
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48654: LD_ADDR_VAR 0 62
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48742: LD_ADDR_VAR 0 63
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48830: LD_ADDR_VAR 0 64
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: ST_TO_ADDR
// end ; 1 :
48918: GO 54815
48920: LD_INT 1
48922: DOUBLE
48923: EQUAL
48924: IFTRUE 48928
48926: GO 51551
48928: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48929: LD_ADDR_VAR 0 11
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48973: LD_ADDR_VAR 0 12
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49014: LD_ADDR_VAR 0 13
49018: PUSH
49019: LD_INT 3
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49054: LD_ADDR_VAR 0 14
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49095: LD_ADDR_VAR 0 15
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49139: LD_ADDR_VAR 0 16
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49185: LD_ADDR_VAR 0 17
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49229: LD_ADDR_VAR 0 18
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 3
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49270: LD_ADDR_VAR 0 19
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49310: LD_ADDR_VAR 0 20
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49351: LD_ADDR_VAR 0 21
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49395: LD_ADDR_VAR 0 22
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: LD_INT 3
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49441: LD_ADDR_VAR 0 23
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 3
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49485: LD_ADDR_VAR 0 24
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 4
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49526: LD_ADDR_VAR 0 25
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 4
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49566: LD_ADDR_VAR 0 26
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 4
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 3
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49607: LD_ADDR_VAR 0 27
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49651: LD_ADDR_VAR 0 28
49655: PUSH
49656: LD_INT 3
49658: NEG
49659: PUSH
49660: LD_INT 3
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: LD_INT 4
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 4
49682: NEG
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: LIST
49696: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49697: LD_ADDR_VAR 0 29
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 3
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 4
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 5
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 6
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 6
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 5
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49852: LD_ADDR_VAR 0 30
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 4
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 4
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 5
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 5
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 5
49952: PUSH
49953: LD_INT 1
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 6
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 6
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49995: LD_ADDR_VAR 0 31
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: LD_INT 3
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 4
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: PUSH
50043: LD_INT 4
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 4
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 5
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 5
50072: PUSH
50073: LD_INT 5
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: LD_INT 5
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 6
50092: PUSH
50093: LD_INT 5
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 6
50102: PUSH
50103: LD_INT 6
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 5
50112: PUSH
50113: LD_INT 6
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50134: LD_ADDR_VAR 0 32
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 3
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 4
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 4
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 5
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 5
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 6
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 6
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 5
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50277: LD_ADDR_VAR 0 33
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 3
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 4
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 4
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 5
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 5
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 5
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 6
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 6
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50432: LD_ADDR_VAR 0 34
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: LD_INT 3
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 4
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 4
50487: NEG
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 4
50499: NEG
50500: PUSH
50501: LD_INT 4
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 4
50511: NEG
50512: PUSH
50513: LD_INT 5
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 5
50523: NEG
50524: PUSH
50525: LD_INT 4
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 5
50535: NEG
50536: PUSH
50537: LD_INT 5
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 5
50547: NEG
50548: PUSH
50549: LD_INT 6
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 6
50559: NEG
50560: PUSH
50561: LD_INT 5
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 6
50571: NEG
50572: PUSH
50573: LD_INT 6
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50595: LD_ADDR_VAR 0 41
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 2
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50639: LD_ADDR_VAR 0 42
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50680: LD_ADDR_VAR 0 43
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: LD_INT 2
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50720: LD_ADDR_VAR 0 44
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50761: LD_ADDR_VAR 0 45
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: LIST
50804: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50805: LD_ADDR_VAR 0 46
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: NEG
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50851: LD_ADDR_VAR 0 47
50855: PUSH
50856: LD_INT 2
50858: NEG
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50884: LD_ADDR_VAR 0 48
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50915: LD_ADDR_VAR 0 49
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50944: LD_ADDR_VAR 0 50
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50973: LD_ADDR_VAR 0 51
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51004: LD_ADDR_VAR 0 52
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51037: LD_ADDR_VAR 0 53
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 2
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51081: LD_ADDR_VAR 0 54
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51122: LD_ADDR_VAR 0 55
51126: PUSH
51127: LD_INT 3
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51162: LD_ADDR_VAR 0 56
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 3
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51203: LD_ADDR_VAR 0 57
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51247: LD_ADDR_VAR 0 58
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51293: LD_ADDR_VAR 0 59
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51337: LD_ADDR_VAR 0 60
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51378: LD_ADDR_VAR 0 61
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: LIST
51417: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51418: LD_ADDR_VAR 0 62
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51459: LD_ADDR_VAR 0 63
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51503: LD_ADDR_VAR 0 64
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// end ; 2 :
51549: GO 54815
51551: LD_INT 2
51553: DOUBLE
51554: EQUAL
51555: IFTRUE 51559
51557: GO 54814
51559: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51560: LD_ADDR_VAR 0 29
51564: PUSH
51565: LD_INT 4
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 4
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 5
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 5
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 5
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 4
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: PUSH
51691: LD_INT 4
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: LD_INT 4
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 4
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 4
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 4
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 5
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 4
51899: NEG
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 4
51910: NEG
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 4
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: LD_INT 4
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: LD_INT 5
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: LD_INT 4
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 5
52017: NEG
52018: PUSH
52019: LD_INT 5
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: LD_INT 5
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 5
52041: NEG
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52098: LD_ADDR_VAR 0 30
52102: PUSH
52103: LD_INT 4
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 4
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 5
52125: PUSH
52126: LD_INT 4
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 5
52135: PUSH
52136: LD_INT 5
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 4
52145: PUSH
52146: LD_INT 5
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 5
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 5
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 4
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 3
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 4
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 4
52288: NEG
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 4
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 4
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 5
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 5
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 5
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 3
52390: NEG
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: LD_INT 4
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: NEG
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 4
52450: NEG
52451: PUSH
52452: LD_INT 3
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 4
52462: NEG
52463: PUSH
52464: LD_INT 4
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 2
52474: NEG
52475: PUSH
52476: LD_INT 4
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 4
52486: NEG
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 4
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 5
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 4
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 3
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 4
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 5
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 5
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52645: LD_ADDR_VAR 0 31
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 4
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 4
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 5
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 5
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: LD_INT 5
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: NEG
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 3
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 4
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 4
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 4
52824: NEG
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 4
52847: NEG
52848: PUSH
52849: LD_INT 4
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 4
52859: NEG
52860: PUSH
52861: LD_INT 5
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 3
52883: NEG
52884: PUSH
52885: LD_INT 3
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 4
52895: NEG
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 5
52907: NEG
52908: PUSH
52909: LD_INT 4
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 5
52919: NEG
52920: PUSH
52921: LD_INT 5
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: LD_INT 5
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 5
52943: NEG
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 4
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: LD_INT 3
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 4
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 4
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 4
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 5
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 5
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 4
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 5
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53195: LD_ADDR_VAR 0 32
53199: PUSH
53200: LD_INT 4
53202: NEG
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 4
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 3
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 3
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 4
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 5
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 5
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 5
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 3
53304: NEG
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: LD_INT 4
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 3
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: LD_INT 3
53368: NEG
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 4
53376: NEG
53377: PUSH
53378: LD_INT 4
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: LD_INT 4
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 4
53400: NEG
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 4
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 5
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 4
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 4
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: LD_INT 5
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 5
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 4
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 4
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 4
53607: PUSH
53608: LD_INT 4
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: LD_INT 3
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 5
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 5
53637: PUSH
53638: LD_INT 5
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 4
53647: PUSH
53648: LD_INT 5
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 4
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 5
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 5
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53742: LD_ADDR_VAR 0 33
53746: PUSH
53747: LD_INT 4
53749: NEG
53750: PUSH
53751: LD_INT 4
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 4
53761: NEG
53762: PUSH
53763: LD_INT 5
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 4
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: LD_INT 3
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 4
53797: NEG
53798: PUSH
53799: LD_INT 3
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 5
53809: NEG
53810: PUSH
53811: LD_INT 4
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 5
53821: NEG
53822: PUSH
53823: LD_INT 5
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: LD_INT 5
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 5
53845: NEG
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 4
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 4
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 4
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 5
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 5
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 3
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 4
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 4
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 4
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 4
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 4
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 5
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 5
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 4
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: LD_INT 5
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 3
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54280: LD_ADDR_VAR 0 34
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 4
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 5
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 4
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 3
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 4
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 5
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: LD_INT 5
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 4
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 4
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 4
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 4
54482: PUSH
54483: LD_INT 4
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 4
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 5
54502: PUSH
54503: LD_INT 4
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 5
54512: PUSH
54513: LD_INT 5
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 4
54522: PUSH
54523: LD_INT 5
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: LD_INT 4
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 5
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: LD_INT 5
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 3
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 4
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 4
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 4
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 3
54688: NEG
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 4
54710: NEG
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 5
54721: NEG
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 5
54744: NEG
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: ST_TO_ADDR
// end ; end ;
54812: GO 54815
54814: POP
// case btype of b_depot , b_warehouse :
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 0
54822: DOUBLE
54823: EQUAL
54824: IFTRUE 54834
54826: LD_INT 1
54828: DOUBLE
54829: EQUAL
54830: IFTRUE 54834
54832: GO 55035
54834: POP
// case nation of nation_american :
54835: LD_VAR 0 5
54839: PUSH
54840: LD_INT 1
54842: DOUBLE
54843: EQUAL
54844: IFTRUE 54848
54846: GO 54904
54848: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
54849: LD_ADDR_VAR 0 9
54853: PUSH
54854: LD_VAR 0 11
54858: PUSH
54859: LD_VAR 0 12
54863: PUSH
54864: LD_VAR 0 13
54868: PUSH
54869: LD_VAR 0 14
54873: PUSH
54874: LD_VAR 0 15
54878: PUSH
54879: LD_VAR 0 16
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: PUSH
54892: LD_VAR 0 4
54896: PUSH
54897: LD_INT 1
54899: PLUS
54900: ARRAY
54901: ST_TO_ADDR
54902: GO 55033
54904: LD_INT 2
54906: DOUBLE
54907: EQUAL
54908: IFTRUE 54912
54910: GO 54968
54912: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
54913: LD_ADDR_VAR 0 9
54917: PUSH
54918: LD_VAR 0 17
54922: PUSH
54923: LD_VAR 0 18
54927: PUSH
54928: LD_VAR 0 19
54932: PUSH
54933: LD_VAR 0 20
54937: PUSH
54938: LD_VAR 0 21
54942: PUSH
54943: LD_VAR 0 22
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: PUSH
54956: LD_VAR 0 4
54960: PUSH
54961: LD_INT 1
54963: PLUS
54964: ARRAY
54965: ST_TO_ADDR
54966: GO 55033
54968: LD_INT 3
54970: DOUBLE
54971: EQUAL
54972: IFTRUE 54976
54974: GO 55032
54976: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54977: LD_ADDR_VAR 0 9
54981: PUSH
54982: LD_VAR 0 23
54986: PUSH
54987: LD_VAR 0 24
54991: PUSH
54992: LD_VAR 0 25
54996: PUSH
54997: LD_VAR 0 26
55001: PUSH
55002: LD_VAR 0 27
55006: PUSH
55007: LD_VAR 0 28
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: PUSH
55020: LD_VAR 0 4
55024: PUSH
55025: LD_INT 1
55027: PLUS
55028: ARRAY
55029: ST_TO_ADDR
55030: GO 55033
55032: POP
55033: GO 55588
55035: LD_INT 2
55037: DOUBLE
55038: EQUAL
55039: IFTRUE 55049
55041: LD_INT 3
55043: DOUBLE
55044: EQUAL
55045: IFTRUE 55049
55047: GO 55105
55049: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55050: LD_ADDR_VAR 0 9
55054: PUSH
55055: LD_VAR 0 29
55059: PUSH
55060: LD_VAR 0 30
55064: PUSH
55065: LD_VAR 0 31
55069: PUSH
55070: LD_VAR 0 32
55074: PUSH
55075: LD_VAR 0 33
55079: PUSH
55080: LD_VAR 0 34
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: PUSH
55093: LD_VAR 0 4
55097: PUSH
55098: LD_INT 1
55100: PLUS
55101: ARRAY
55102: ST_TO_ADDR
55103: GO 55588
55105: LD_INT 16
55107: DOUBLE
55108: EQUAL
55109: IFTRUE 55167
55111: LD_INT 17
55113: DOUBLE
55114: EQUAL
55115: IFTRUE 55167
55117: LD_INT 18
55119: DOUBLE
55120: EQUAL
55121: IFTRUE 55167
55123: LD_INT 19
55125: DOUBLE
55126: EQUAL
55127: IFTRUE 55167
55129: LD_INT 22
55131: DOUBLE
55132: EQUAL
55133: IFTRUE 55167
55135: LD_INT 20
55137: DOUBLE
55138: EQUAL
55139: IFTRUE 55167
55141: LD_INT 21
55143: DOUBLE
55144: EQUAL
55145: IFTRUE 55167
55147: LD_INT 23
55149: DOUBLE
55150: EQUAL
55151: IFTRUE 55167
55153: LD_INT 24
55155: DOUBLE
55156: EQUAL
55157: IFTRUE 55167
55159: LD_INT 25
55161: DOUBLE
55162: EQUAL
55163: IFTRUE 55167
55165: GO 55223
55167: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55168: LD_ADDR_VAR 0 9
55172: PUSH
55173: LD_VAR 0 35
55177: PUSH
55178: LD_VAR 0 36
55182: PUSH
55183: LD_VAR 0 37
55187: PUSH
55188: LD_VAR 0 38
55192: PUSH
55193: LD_VAR 0 39
55197: PUSH
55198: LD_VAR 0 40
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: PUSH
55211: LD_VAR 0 4
55215: PUSH
55216: LD_INT 1
55218: PLUS
55219: ARRAY
55220: ST_TO_ADDR
55221: GO 55588
55223: LD_INT 6
55225: DOUBLE
55226: EQUAL
55227: IFTRUE 55279
55229: LD_INT 7
55231: DOUBLE
55232: EQUAL
55233: IFTRUE 55279
55235: LD_INT 8
55237: DOUBLE
55238: EQUAL
55239: IFTRUE 55279
55241: LD_INT 13
55243: DOUBLE
55244: EQUAL
55245: IFTRUE 55279
55247: LD_INT 12
55249: DOUBLE
55250: EQUAL
55251: IFTRUE 55279
55253: LD_INT 15
55255: DOUBLE
55256: EQUAL
55257: IFTRUE 55279
55259: LD_INT 11
55261: DOUBLE
55262: EQUAL
55263: IFTRUE 55279
55265: LD_INT 14
55267: DOUBLE
55268: EQUAL
55269: IFTRUE 55279
55271: LD_INT 10
55273: DOUBLE
55274: EQUAL
55275: IFTRUE 55279
55277: GO 55335
55279: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
55280: LD_ADDR_VAR 0 9
55284: PUSH
55285: LD_VAR 0 41
55289: PUSH
55290: LD_VAR 0 42
55294: PUSH
55295: LD_VAR 0 43
55299: PUSH
55300: LD_VAR 0 44
55304: PUSH
55305: LD_VAR 0 45
55309: PUSH
55310: LD_VAR 0 46
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: PUSH
55323: LD_VAR 0 4
55327: PUSH
55328: LD_INT 1
55330: PLUS
55331: ARRAY
55332: ST_TO_ADDR
55333: GO 55588
55335: LD_INT 36
55337: DOUBLE
55338: EQUAL
55339: IFTRUE 55343
55341: GO 55399
55343: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55344: LD_ADDR_VAR 0 9
55348: PUSH
55349: LD_VAR 0 47
55353: PUSH
55354: LD_VAR 0 48
55358: PUSH
55359: LD_VAR 0 49
55363: PUSH
55364: LD_VAR 0 50
55368: PUSH
55369: LD_VAR 0 51
55373: PUSH
55374: LD_VAR 0 52
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: PUSH
55387: LD_VAR 0 4
55391: PUSH
55392: LD_INT 1
55394: PLUS
55395: ARRAY
55396: ST_TO_ADDR
55397: GO 55588
55399: LD_INT 4
55401: DOUBLE
55402: EQUAL
55403: IFTRUE 55425
55405: LD_INT 5
55407: DOUBLE
55408: EQUAL
55409: IFTRUE 55425
55411: LD_INT 34
55413: DOUBLE
55414: EQUAL
55415: IFTRUE 55425
55417: LD_INT 37
55419: DOUBLE
55420: EQUAL
55421: IFTRUE 55425
55423: GO 55481
55425: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55426: LD_ADDR_VAR 0 9
55430: PUSH
55431: LD_VAR 0 53
55435: PUSH
55436: LD_VAR 0 54
55440: PUSH
55441: LD_VAR 0 55
55445: PUSH
55446: LD_VAR 0 56
55450: PUSH
55451: LD_VAR 0 57
55455: PUSH
55456: LD_VAR 0 58
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: PUSH
55469: LD_VAR 0 4
55473: PUSH
55474: LD_INT 1
55476: PLUS
55477: ARRAY
55478: ST_TO_ADDR
55479: GO 55588
55481: LD_INT 31
55483: DOUBLE
55484: EQUAL
55485: IFTRUE 55531
55487: LD_INT 32
55489: DOUBLE
55490: EQUAL
55491: IFTRUE 55531
55493: LD_INT 33
55495: DOUBLE
55496: EQUAL
55497: IFTRUE 55531
55499: LD_INT 27
55501: DOUBLE
55502: EQUAL
55503: IFTRUE 55531
55505: LD_INT 26
55507: DOUBLE
55508: EQUAL
55509: IFTRUE 55531
55511: LD_INT 28
55513: DOUBLE
55514: EQUAL
55515: IFTRUE 55531
55517: LD_INT 29
55519: DOUBLE
55520: EQUAL
55521: IFTRUE 55531
55523: LD_INT 30
55525: DOUBLE
55526: EQUAL
55527: IFTRUE 55531
55529: GO 55587
55531: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
55532: LD_ADDR_VAR 0 9
55536: PUSH
55537: LD_VAR 0 59
55541: PUSH
55542: LD_VAR 0 60
55546: PUSH
55547: LD_VAR 0 61
55551: PUSH
55552: LD_VAR 0 62
55556: PUSH
55557: LD_VAR 0 63
55561: PUSH
55562: LD_VAR 0 64
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: PUSH
55575: LD_VAR 0 4
55579: PUSH
55580: LD_INT 1
55582: PLUS
55583: ARRAY
55584: ST_TO_ADDR
55585: GO 55588
55587: POP
// temp_list2 = [ ] ;
55588: LD_ADDR_VAR 0 10
55592: PUSH
55593: EMPTY
55594: ST_TO_ADDR
// for i in temp_list do
55595: LD_ADDR_VAR 0 8
55599: PUSH
55600: LD_VAR 0 9
55604: PUSH
55605: FOR_IN
55606: IFFALSE 55658
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55608: LD_ADDR_VAR 0 10
55612: PUSH
55613: LD_VAR 0 10
55617: PUSH
55618: LD_VAR 0 8
55622: PUSH
55623: LD_INT 1
55625: ARRAY
55626: PUSH
55627: LD_VAR 0 2
55631: PLUS
55632: PUSH
55633: LD_VAR 0 8
55637: PUSH
55638: LD_INT 2
55640: ARRAY
55641: PUSH
55642: LD_VAR 0 3
55646: PLUS
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: EMPTY
55653: LIST
55654: ADD
55655: ST_TO_ADDR
55656: GO 55605
55658: POP
55659: POP
// result = temp_list2 ;
55660: LD_ADDR_VAR 0 7
55664: PUSH
55665: LD_VAR 0 10
55669: ST_TO_ADDR
// end ;
55670: LD_VAR 0 7
55674: RET
// export function EnemyInRange ( unit , dist ) ; begin
55675: LD_INT 0
55677: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55678: LD_ADDR_VAR 0 3
55682: PUSH
55683: LD_VAR 0 1
55687: PPUSH
55688: CALL_OW 255
55692: PPUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 250
55702: PPUSH
55703: LD_VAR 0 1
55707: PPUSH
55708: CALL_OW 251
55712: PPUSH
55713: LD_VAR 0 2
55717: PPUSH
55718: CALL 29779 0 4
55722: PUSH
55723: LD_INT 4
55725: ARRAY
55726: ST_TO_ADDR
// end ;
55727: LD_VAR 0 3
55731: RET
// export function PlayerSeeMe ( unit ) ; begin
55732: LD_INT 0
55734: PPUSH
// result := See ( your_side , unit ) ;
55735: LD_ADDR_VAR 0 2
55739: PUSH
55740: LD_OWVAR 2
55744: PPUSH
55745: LD_VAR 0 1
55749: PPUSH
55750: CALL_OW 292
55754: ST_TO_ADDR
// end ;
55755: LD_VAR 0 2
55759: RET
// export function ReverseDir ( unit ) ; begin
55760: LD_INT 0
55762: PPUSH
// if not unit then
55763: LD_VAR 0 1
55767: NOT
55768: IFFALSE 55772
// exit ;
55770: GO 55795
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55772: LD_ADDR_VAR 0 2
55776: PUSH
55777: LD_VAR 0 1
55781: PPUSH
55782: CALL_OW 254
55786: PUSH
55787: LD_INT 3
55789: PLUS
55790: PUSH
55791: LD_INT 6
55793: MOD
55794: ST_TO_ADDR
// end ;
55795: LD_VAR 0 2
55799: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55800: LD_INT 0
55802: PPUSH
55803: PPUSH
55804: PPUSH
55805: PPUSH
55806: PPUSH
// if not hexes then
55807: LD_VAR 0 2
55811: NOT
55812: IFFALSE 55816
// exit ;
55814: GO 55964
// dist := 9999 ;
55816: LD_ADDR_VAR 0 5
55820: PUSH
55821: LD_INT 9999
55823: ST_TO_ADDR
// for i = 1 to hexes do
55824: LD_ADDR_VAR 0 4
55828: PUSH
55829: DOUBLE
55830: LD_INT 1
55832: DEC
55833: ST_TO_ADDR
55834: LD_VAR 0 2
55838: PUSH
55839: FOR_TO
55840: IFFALSE 55952
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55842: LD_VAR 0 1
55846: PPUSH
55847: LD_VAR 0 2
55851: PUSH
55852: LD_VAR 0 4
55856: ARRAY
55857: PUSH
55858: LD_INT 1
55860: ARRAY
55861: PPUSH
55862: LD_VAR 0 2
55866: PUSH
55867: LD_VAR 0 4
55871: ARRAY
55872: PUSH
55873: LD_INT 2
55875: ARRAY
55876: PPUSH
55877: CALL_OW 297
55881: PUSH
55882: LD_VAR 0 5
55886: LESS
55887: IFFALSE 55950
// begin hex := hexes [ i ] ;
55889: LD_ADDR_VAR 0 7
55893: PUSH
55894: LD_VAR 0 2
55898: PUSH
55899: LD_VAR 0 4
55903: ARRAY
55904: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55905: LD_ADDR_VAR 0 5
55909: PUSH
55910: LD_VAR 0 1
55914: PPUSH
55915: LD_VAR 0 2
55919: PUSH
55920: LD_VAR 0 4
55924: ARRAY
55925: PUSH
55926: LD_INT 1
55928: ARRAY
55929: PPUSH
55930: LD_VAR 0 2
55934: PUSH
55935: LD_VAR 0 4
55939: ARRAY
55940: PUSH
55941: LD_INT 2
55943: ARRAY
55944: PPUSH
55945: CALL_OW 297
55949: ST_TO_ADDR
// end ; end ;
55950: GO 55839
55952: POP
55953: POP
// result := hex ;
55954: LD_ADDR_VAR 0 3
55958: PUSH
55959: LD_VAR 0 7
55963: ST_TO_ADDR
// end ;
55964: LD_VAR 0 3
55968: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55969: LD_INT 0
55971: PPUSH
55972: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55973: LD_VAR 0 1
55977: NOT
55978: PUSH
55979: LD_VAR 0 1
55983: PUSH
55984: LD_INT 21
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 23
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PPUSH
56008: CALL_OW 69
56012: IN
56013: NOT
56014: OR
56015: IFFALSE 56019
// exit ;
56017: GO 56066
// for i = 1 to 3 do
56019: LD_ADDR_VAR 0 3
56023: PUSH
56024: DOUBLE
56025: LD_INT 1
56027: DEC
56028: ST_TO_ADDR
56029: LD_INT 3
56031: PUSH
56032: FOR_TO
56033: IFFALSE 56064
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56035: LD_VAR 0 1
56039: PPUSH
56040: CALL_OW 250
56044: PPUSH
56045: LD_VAR 0 1
56049: PPUSH
56050: CALL_OW 251
56054: PPUSH
56055: LD_INT 1
56057: PPUSH
56058: CALL_OW 453
56062: GO 56032
56064: POP
56065: POP
// end ;
56066: LD_VAR 0 2
56070: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56071: LD_INT 0
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56079: LD_VAR 0 1
56083: NOT
56084: PUSH
56085: LD_VAR 0 2
56089: NOT
56090: OR
56091: PUSH
56092: LD_VAR 0 1
56096: PPUSH
56097: CALL_OW 314
56101: OR
56102: IFFALSE 56106
// exit ;
56104: GO 56547
// x := GetX ( enemy_unit ) ;
56106: LD_ADDR_VAR 0 7
56110: PUSH
56111: LD_VAR 0 2
56115: PPUSH
56116: CALL_OW 250
56120: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56121: LD_ADDR_VAR 0 8
56125: PUSH
56126: LD_VAR 0 2
56130: PPUSH
56131: CALL_OW 251
56135: ST_TO_ADDR
// if not x or not y then
56136: LD_VAR 0 7
56140: NOT
56141: PUSH
56142: LD_VAR 0 8
56146: NOT
56147: OR
56148: IFFALSE 56152
// exit ;
56150: GO 56547
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56152: LD_ADDR_VAR 0 6
56156: PUSH
56157: LD_VAR 0 7
56161: PPUSH
56162: LD_INT 0
56164: PPUSH
56165: LD_INT 4
56167: PPUSH
56168: CALL_OW 272
56172: PUSH
56173: LD_VAR 0 8
56177: PPUSH
56178: LD_INT 0
56180: PPUSH
56181: LD_INT 4
56183: PPUSH
56184: CALL_OW 273
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_VAR 0 7
56197: PPUSH
56198: LD_INT 1
56200: PPUSH
56201: LD_INT 4
56203: PPUSH
56204: CALL_OW 272
56208: PUSH
56209: LD_VAR 0 8
56213: PPUSH
56214: LD_INT 1
56216: PPUSH
56217: LD_INT 4
56219: PPUSH
56220: CALL_OW 273
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_VAR 0 7
56233: PPUSH
56234: LD_INT 2
56236: PPUSH
56237: LD_INT 4
56239: PPUSH
56240: CALL_OW 272
56244: PUSH
56245: LD_VAR 0 8
56249: PPUSH
56250: LD_INT 2
56252: PPUSH
56253: LD_INT 4
56255: PPUSH
56256: CALL_OW 273
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_VAR 0 7
56269: PPUSH
56270: LD_INT 3
56272: PPUSH
56273: LD_INT 4
56275: PPUSH
56276: CALL_OW 272
56280: PUSH
56281: LD_VAR 0 8
56285: PPUSH
56286: LD_INT 3
56288: PPUSH
56289: LD_INT 4
56291: PPUSH
56292: CALL_OW 273
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_VAR 0 7
56305: PPUSH
56306: LD_INT 4
56308: PPUSH
56309: LD_INT 4
56311: PPUSH
56312: CALL_OW 272
56316: PUSH
56317: LD_VAR 0 8
56321: PPUSH
56322: LD_INT 4
56324: PPUSH
56325: LD_INT 4
56327: PPUSH
56328: CALL_OW 273
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_VAR 0 7
56341: PPUSH
56342: LD_INT 5
56344: PPUSH
56345: LD_INT 4
56347: PPUSH
56348: CALL_OW 272
56352: PUSH
56353: LD_VAR 0 8
56357: PPUSH
56358: LD_INT 5
56360: PPUSH
56361: LD_INT 4
56363: PPUSH
56364: CALL_OW 273
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// for i = tmp downto 1 do
56381: LD_ADDR_VAR 0 4
56385: PUSH
56386: DOUBLE
56387: LD_VAR 0 6
56391: INC
56392: ST_TO_ADDR
56393: LD_INT 1
56395: PUSH
56396: FOR_DOWNTO
56397: IFFALSE 56498
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56399: LD_VAR 0 6
56403: PUSH
56404: LD_VAR 0 4
56408: ARRAY
56409: PUSH
56410: LD_INT 1
56412: ARRAY
56413: PPUSH
56414: LD_VAR 0 6
56418: PUSH
56419: LD_VAR 0 4
56423: ARRAY
56424: PUSH
56425: LD_INT 2
56427: ARRAY
56428: PPUSH
56429: CALL_OW 488
56433: NOT
56434: PUSH
56435: LD_VAR 0 6
56439: PUSH
56440: LD_VAR 0 4
56444: ARRAY
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PPUSH
56450: LD_VAR 0 6
56454: PUSH
56455: LD_VAR 0 4
56459: ARRAY
56460: PUSH
56461: LD_INT 2
56463: ARRAY
56464: PPUSH
56465: CALL_OW 428
56469: PUSH
56470: LD_INT 0
56472: NONEQUAL
56473: OR
56474: IFFALSE 56496
// tmp := Delete ( tmp , i ) ;
56476: LD_ADDR_VAR 0 6
56480: PUSH
56481: LD_VAR 0 6
56485: PPUSH
56486: LD_VAR 0 4
56490: PPUSH
56491: CALL_OW 3
56495: ST_TO_ADDR
56496: GO 56396
56498: POP
56499: POP
// j := GetClosestHex ( unit , tmp ) ;
56500: LD_ADDR_VAR 0 5
56504: PUSH
56505: LD_VAR 0 1
56509: PPUSH
56510: LD_VAR 0 6
56514: PPUSH
56515: CALL 55800 0 2
56519: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56520: LD_VAR 0 1
56524: PPUSH
56525: LD_VAR 0 5
56529: PUSH
56530: LD_INT 1
56532: ARRAY
56533: PPUSH
56534: LD_VAR 0 5
56538: PUSH
56539: LD_INT 2
56541: ARRAY
56542: PPUSH
56543: CALL_OW 111
// end ;
56547: LD_VAR 0 3
56551: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56552: LD_INT 0
56554: PPUSH
56555: PPUSH
56556: PPUSH
// uc_side = 0 ;
56557: LD_ADDR_OWVAR 20
56561: PUSH
56562: LD_INT 0
56564: ST_TO_ADDR
// uc_nation = 0 ;
56565: LD_ADDR_OWVAR 21
56569: PUSH
56570: LD_INT 0
56572: ST_TO_ADDR
// InitHc ;
56573: CALL_OW 19
// InitVc ;
56577: CALL_OW 20
// if mastodonts then
56581: LD_VAR 0 6
56585: IFFALSE 56652
// for i = 1 to mastodonts do
56587: LD_ADDR_VAR 0 11
56591: PUSH
56592: DOUBLE
56593: LD_INT 1
56595: DEC
56596: ST_TO_ADDR
56597: LD_VAR 0 6
56601: PUSH
56602: FOR_TO
56603: IFFALSE 56650
// begin vc_chassis := 31 ;
56605: LD_ADDR_OWVAR 37
56609: PUSH
56610: LD_INT 31
56612: ST_TO_ADDR
// vc_control := control_rider ;
56613: LD_ADDR_OWVAR 38
56617: PUSH
56618: LD_INT 4
56620: ST_TO_ADDR
// animal := CreateVehicle ;
56621: LD_ADDR_VAR 0 12
56625: PUSH
56626: CALL_OW 45
56630: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56631: LD_VAR 0 12
56635: PPUSH
56636: LD_VAR 0 8
56640: PPUSH
56641: LD_INT 0
56643: PPUSH
56644: CALL 58721 0 3
// end ;
56648: GO 56602
56650: POP
56651: POP
// if horses then
56652: LD_VAR 0 5
56656: IFFALSE 56723
// for i = 1 to horses do
56658: LD_ADDR_VAR 0 11
56662: PUSH
56663: DOUBLE
56664: LD_INT 1
56666: DEC
56667: ST_TO_ADDR
56668: LD_VAR 0 5
56672: PUSH
56673: FOR_TO
56674: IFFALSE 56721
// begin hc_class := 21 ;
56676: LD_ADDR_OWVAR 28
56680: PUSH
56681: LD_INT 21
56683: ST_TO_ADDR
// hc_gallery :=  ;
56684: LD_ADDR_OWVAR 33
56688: PUSH
56689: LD_STRING 
56691: ST_TO_ADDR
// animal := CreateHuman ;
56692: LD_ADDR_VAR 0 12
56696: PUSH
56697: CALL_OW 44
56701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56702: LD_VAR 0 12
56706: PPUSH
56707: LD_VAR 0 8
56711: PPUSH
56712: LD_INT 0
56714: PPUSH
56715: CALL 58721 0 3
// end ;
56719: GO 56673
56721: POP
56722: POP
// if birds then
56723: LD_VAR 0 1
56727: IFFALSE 56794
// for i = 1 to birds do
56729: LD_ADDR_VAR 0 11
56733: PUSH
56734: DOUBLE
56735: LD_INT 1
56737: DEC
56738: ST_TO_ADDR
56739: LD_VAR 0 1
56743: PUSH
56744: FOR_TO
56745: IFFALSE 56792
// begin hc_class = 18 ;
56747: LD_ADDR_OWVAR 28
56751: PUSH
56752: LD_INT 18
56754: ST_TO_ADDR
// hc_gallery =  ;
56755: LD_ADDR_OWVAR 33
56759: PUSH
56760: LD_STRING 
56762: ST_TO_ADDR
// animal := CreateHuman ;
56763: LD_ADDR_VAR 0 12
56767: PUSH
56768: CALL_OW 44
56772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56773: LD_VAR 0 12
56777: PPUSH
56778: LD_VAR 0 8
56782: PPUSH
56783: LD_INT 0
56785: PPUSH
56786: CALL 58721 0 3
// end ;
56790: GO 56744
56792: POP
56793: POP
// if tigers then
56794: LD_VAR 0 2
56798: IFFALSE 56882
// for i = 1 to tigers do
56800: LD_ADDR_VAR 0 11
56804: PUSH
56805: DOUBLE
56806: LD_INT 1
56808: DEC
56809: ST_TO_ADDR
56810: LD_VAR 0 2
56814: PUSH
56815: FOR_TO
56816: IFFALSE 56880
// begin hc_class = class_tiger ;
56818: LD_ADDR_OWVAR 28
56822: PUSH
56823: LD_INT 14
56825: ST_TO_ADDR
// hc_gallery =  ;
56826: LD_ADDR_OWVAR 33
56830: PUSH
56831: LD_STRING 
56833: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56834: LD_ADDR_OWVAR 35
56838: PUSH
56839: LD_INT 7
56841: NEG
56842: PPUSH
56843: LD_INT 7
56845: PPUSH
56846: CALL_OW 12
56850: ST_TO_ADDR
// animal := CreateHuman ;
56851: LD_ADDR_VAR 0 12
56855: PUSH
56856: CALL_OW 44
56860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56861: LD_VAR 0 12
56865: PPUSH
56866: LD_VAR 0 8
56870: PPUSH
56871: LD_INT 0
56873: PPUSH
56874: CALL 58721 0 3
// end ;
56878: GO 56815
56880: POP
56881: POP
// if apemans then
56882: LD_VAR 0 3
56886: IFFALSE 57009
// for i = 1 to apemans do
56888: LD_ADDR_VAR 0 11
56892: PUSH
56893: DOUBLE
56894: LD_INT 1
56896: DEC
56897: ST_TO_ADDR
56898: LD_VAR 0 3
56902: PUSH
56903: FOR_TO
56904: IFFALSE 57007
// begin hc_class = class_apeman ;
56906: LD_ADDR_OWVAR 28
56910: PUSH
56911: LD_INT 12
56913: ST_TO_ADDR
// hc_gallery =  ;
56914: LD_ADDR_OWVAR 33
56918: PUSH
56919: LD_STRING 
56921: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
56922: LD_ADDR_OWVAR 35
56926: PUSH
56927: LD_INT 5
56929: NEG
56930: PPUSH
56931: LD_INT 5
56933: PPUSH
56934: CALL_OW 12
56938: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56939: LD_ADDR_OWVAR 31
56943: PUSH
56944: LD_INT 1
56946: PPUSH
56947: LD_INT 3
56949: PPUSH
56950: CALL_OW 12
56954: PUSH
56955: LD_INT 1
56957: PPUSH
56958: LD_INT 3
56960: PPUSH
56961: CALL_OW 12
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: ST_TO_ADDR
// animal := CreateHuman ;
56978: LD_ADDR_VAR 0 12
56982: PUSH
56983: CALL_OW 44
56987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56988: LD_VAR 0 12
56992: PPUSH
56993: LD_VAR 0 8
56997: PPUSH
56998: LD_INT 0
57000: PPUSH
57001: CALL 58721 0 3
// end ;
57005: GO 56903
57007: POP
57008: POP
// if enchidnas then
57009: LD_VAR 0 4
57013: IFFALSE 57080
// for i = 1 to enchidnas do
57015: LD_ADDR_VAR 0 11
57019: PUSH
57020: DOUBLE
57021: LD_INT 1
57023: DEC
57024: ST_TO_ADDR
57025: LD_VAR 0 4
57029: PUSH
57030: FOR_TO
57031: IFFALSE 57078
// begin hc_class = 13 ;
57033: LD_ADDR_OWVAR 28
57037: PUSH
57038: LD_INT 13
57040: ST_TO_ADDR
// hc_gallery =  ;
57041: LD_ADDR_OWVAR 33
57045: PUSH
57046: LD_STRING 
57048: ST_TO_ADDR
// animal := CreateHuman ;
57049: LD_ADDR_VAR 0 12
57053: PUSH
57054: CALL_OW 44
57058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57059: LD_VAR 0 12
57063: PPUSH
57064: LD_VAR 0 8
57068: PPUSH
57069: LD_INT 0
57071: PPUSH
57072: CALL 58721 0 3
// end ;
57076: GO 57030
57078: POP
57079: POP
// if fishes then
57080: LD_VAR 0 7
57084: IFFALSE 57151
// for i = 1 to fishes do
57086: LD_ADDR_VAR 0 11
57090: PUSH
57091: DOUBLE
57092: LD_INT 1
57094: DEC
57095: ST_TO_ADDR
57096: LD_VAR 0 7
57100: PUSH
57101: FOR_TO
57102: IFFALSE 57149
// begin hc_class = 20 ;
57104: LD_ADDR_OWVAR 28
57108: PUSH
57109: LD_INT 20
57111: ST_TO_ADDR
// hc_gallery =  ;
57112: LD_ADDR_OWVAR 33
57116: PUSH
57117: LD_STRING 
57119: ST_TO_ADDR
// animal := CreateHuman ;
57120: LD_ADDR_VAR 0 12
57124: PUSH
57125: CALL_OW 44
57129: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57130: LD_VAR 0 12
57134: PPUSH
57135: LD_VAR 0 9
57139: PPUSH
57140: LD_INT 0
57142: PPUSH
57143: CALL 58721 0 3
// end ;
57147: GO 57101
57149: POP
57150: POP
// end ;
57151: LD_VAR 0 10
57155: RET
// export function WantHeal ( sci , unit ) ; begin
57156: LD_INT 0
57158: PPUSH
// if GetTaskList ( sci ) > 0 then
57159: LD_VAR 0 1
57163: PPUSH
57164: CALL_OW 437
57168: PUSH
57169: LD_INT 0
57171: GREATER
57172: IFFALSE 57242
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57174: LD_VAR 0 1
57178: PPUSH
57179: CALL_OW 437
57183: PUSH
57184: LD_INT 1
57186: ARRAY
57187: PUSH
57188: LD_INT 1
57190: ARRAY
57191: PUSH
57192: LD_STRING l
57194: EQUAL
57195: PUSH
57196: LD_VAR 0 1
57200: PPUSH
57201: CALL_OW 437
57205: PUSH
57206: LD_INT 1
57208: ARRAY
57209: PUSH
57210: LD_INT 4
57212: ARRAY
57213: PUSH
57214: LD_VAR 0 2
57218: EQUAL
57219: AND
57220: IFFALSE 57232
// result := true else
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: LD_INT 1
57229: ST_TO_ADDR
57230: GO 57240
// result := false ;
57232: LD_ADDR_VAR 0 3
57236: PUSH
57237: LD_INT 0
57239: ST_TO_ADDR
// end else
57240: GO 57250
// result := false ;
57242: LD_ADDR_VAR 0 3
57246: PUSH
57247: LD_INT 0
57249: ST_TO_ADDR
// end ;
57250: LD_VAR 0 3
57254: RET
// export function HealTarget ( sci ) ; begin
57255: LD_INT 0
57257: PPUSH
// if not sci then
57258: LD_VAR 0 1
57262: NOT
57263: IFFALSE 57267
// exit ;
57265: GO 57332
// result := 0 ;
57267: LD_ADDR_VAR 0 2
57271: PUSH
57272: LD_INT 0
57274: ST_TO_ADDR
// if GetTaskList ( sci ) then
57275: LD_VAR 0 1
57279: PPUSH
57280: CALL_OW 437
57284: IFFALSE 57332
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57286: LD_VAR 0 1
57290: PPUSH
57291: CALL_OW 437
57295: PUSH
57296: LD_INT 1
57298: ARRAY
57299: PUSH
57300: LD_INT 1
57302: ARRAY
57303: PUSH
57304: LD_STRING l
57306: EQUAL
57307: IFFALSE 57332
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57309: LD_ADDR_VAR 0 2
57313: PUSH
57314: LD_VAR 0 1
57318: PPUSH
57319: CALL_OW 437
57323: PUSH
57324: LD_INT 1
57326: ARRAY
57327: PUSH
57328: LD_INT 4
57330: ARRAY
57331: ST_TO_ADDR
// end ;
57332: LD_VAR 0 2
57336: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57337: LD_INT 0
57339: PPUSH
57340: PPUSH
57341: PPUSH
57342: PPUSH
// if not base_units then
57343: LD_VAR 0 1
57347: NOT
57348: IFFALSE 57352
// exit ;
57350: GO 57439
// result := false ;
57352: LD_ADDR_VAR 0 2
57356: PUSH
57357: LD_INT 0
57359: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57360: LD_ADDR_VAR 0 5
57364: PUSH
57365: LD_VAR 0 1
57369: PPUSH
57370: LD_INT 21
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PPUSH
57380: CALL_OW 72
57384: ST_TO_ADDR
// if not tmp then
57385: LD_VAR 0 5
57389: NOT
57390: IFFALSE 57394
// exit ;
57392: GO 57439
// for i in tmp do
57394: LD_ADDR_VAR 0 3
57398: PUSH
57399: LD_VAR 0 5
57403: PUSH
57404: FOR_IN
57405: IFFALSE 57437
// begin result := EnemyInRange ( i , 22 ) ;
57407: LD_ADDR_VAR 0 2
57411: PUSH
57412: LD_VAR 0 3
57416: PPUSH
57417: LD_INT 22
57419: PPUSH
57420: CALL 55675 0 2
57424: ST_TO_ADDR
// if result then
57425: LD_VAR 0 2
57429: IFFALSE 57435
// exit ;
57431: POP
57432: POP
57433: GO 57439
// end ;
57435: GO 57404
57437: POP
57438: POP
// end ;
57439: LD_VAR 0 2
57443: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57444: LD_INT 0
57446: PPUSH
57447: PPUSH
// if not units then
57448: LD_VAR 0 1
57452: NOT
57453: IFFALSE 57457
// exit ;
57455: GO 57527
// result := [ ] ;
57457: LD_ADDR_VAR 0 3
57461: PUSH
57462: EMPTY
57463: ST_TO_ADDR
// for i in units do
57464: LD_ADDR_VAR 0 4
57468: PUSH
57469: LD_VAR 0 1
57473: PUSH
57474: FOR_IN
57475: IFFALSE 57525
// if GetTag ( i ) = tag then
57477: LD_VAR 0 4
57481: PPUSH
57482: CALL_OW 110
57486: PUSH
57487: LD_VAR 0 2
57491: EQUAL
57492: IFFALSE 57523
// result := Insert ( result , result + 1 , i ) ;
57494: LD_ADDR_VAR 0 3
57498: PUSH
57499: LD_VAR 0 3
57503: PPUSH
57504: LD_VAR 0 3
57508: PUSH
57509: LD_INT 1
57511: PLUS
57512: PPUSH
57513: LD_VAR 0 4
57517: PPUSH
57518: CALL_OW 2
57522: ST_TO_ADDR
57523: GO 57474
57525: POP
57526: POP
// end ;
57527: LD_VAR 0 3
57531: RET
// export function IsDriver ( un ) ; begin
57532: LD_INT 0
57534: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57535: LD_ADDR_VAR 0 2
57539: PUSH
57540: LD_VAR 0 1
57544: PUSH
57545: LD_INT 55
57547: PUSH
57548: EMPTY
57549: LIST
57550: PPUSH
57551: CALL_OW 69
57555: IN
57556: ST_TO_ADDR
// end ;
57557: LD_VAR 0 2
57561: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57562: LD_INT 0
57564: PPUSH
57565: PPUSH
// list := [ ] ;
57566: LD_ADDR_VAR 0 5
57570: PUSH
57571: EMPTY
57572: ST_TO_ADDR
// case d of 0 :
57573: LD_VAR 0 3
57577: PUSH
57578: LD_INT 0
57580: DOUBLE
57581: EQUAL
57582: IFTRUE 57586
57584: GO 57719
57586: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57587: LD_ADDR_VAR 0 5
57591: PUSH
57592: LD_VAR 0 1
57596: PUSH
57597: LD_INT 4
57599: MINUS
57600: PUSH
57601: LD_VAR 0 2
57605: PUSH
57606: LD_INT 4
57608: MINUS
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: LIST
57617: PUSH
57618: LD_VAR 0 1
57622: PUSH
57623: LD_INT 3
57625: MINUS
57626: PUSH
57627: LD_VAR 0 2
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: PUSH
57640: LD_VAR 0 1
57644: PUSH
57645: LD_INT 4
57647: PLUS
57648: PUSH
57649: LD_VAR 0 2
57653: PUSH
57654: LD_INT 4
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: PUSH
57662: LD_VAR 0 1
57666: PUSH
57667: LD_INT 3
57669: PLUS
57670: PUSH
57671: LD_VAR 0 2
57675: PUSH
57676: LD_INT 3
57678: PLUS
57679: PUSH
57680: LD_INT 5
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: PUSH
57688: LD_VAR 0 1
57692: PUSH
57693: LD_VAR 0 2
57697: PUSH
57698: LD_INT 4
57700: PLUS
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// end ; 1 :
57717: GO 58417
57719: LD_INT 1
57721: DOUBLE
57722: EQUAL
57723: IFTRUE 57727
57725: GO 57860
57727: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57728: LD_ADDR_VAR 0 5
57732: PUSH
57733: LD_VAR 0 1
57737: PUSH
57738: LD_VAR 0 2
57742: PUSH
57743: LD_INT 4
57745: MINUS
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: PUSH
57755: LD_VAR 0 1
57759: PUSH
57760: LD_INT 3
57762: MINUS
57763: PUSH
57764: LD_VAR 0 2
57768: PUSH
57769: LD_INT 3
57771: MINUS
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: LIST
57780: PUSH
57781: LD_VAR 0 1
57785: PUSH
57786: LD_INT 4
57788: MINUS
57789: PUSH
57790: LD_VAR 0 2
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: PUSH
57803: LD_VAR 0 1
57807: PUSH
57808: LD_VAR 0 2
57812: PUSH
57813: LD_INT 3
57815: PLUS
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: PUSH
57825: LD_VAR 0 1
57829: PUSH
57830: LD_INT 4
57832: PLUS
57833: PUSH
57834: LD_VAR 0 2
57838: PUSH
57839: LD_INT 4
57841: PLUS
57842: PUSH
57843: LD_INT 5
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// end ; 2 :
57858: GO 58417
57860: LD_INT 2
57862: DOUBLE
57863: EQUAL
57864: IFTRUE 57868
57866: GO 57997
57868: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57869: LD_ADDR_VAR 0 5
57873: PUSH
57874: LD_VAR 0 1
57878: PUSH
57879: LD_VAR 0 2
57883: PUSH
57884: LD_INT 3
57886: MINUS
57887: PUSH
57888: LD_INT 3
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: LIST
57895: PUSH
57896: LD_VAR 0 1
57900: PUSH
57901: LD_INT 4
57903: PLUS
57904: PUSH
57905: LD_VAR 0 2
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: LIST
57917: PUSH
57918: LD_VAR 0 1
57922: PUSH
57923: LD_VAR 0 2
57927: PUSH
57928: LD_INT 4
57930: PLUS
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: PUSH
57940: LD_VAR 0 1
57944: PUSH
57945: LD_INT 3
57947: MINUS
57948: PUSH
57949: LD_VAR 0 2
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: LIST
57961: PUSH
57962: LD_VAR 0 1
57966: PUSH
57967: LD_INT 4
57969: MINUS
57970: PUSH
57971: LD_VAR 0 2
57975: PUSH
57976: LD_INT 4
57978: MINUS
57979: PUSH
57980: LD_INT 2
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// end ; 3 :
57995: GO 58417
57997: LD_INT 3
57999: DOUBLE
58000: EQUAL
58001: IFTRUE 58005
58003: GO 58138
58005: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58006: LD_ADDR_VAR 0 5
58010: PUSH
58011: LD_VAR 0 1
58015: PUSH
58016: LD_INT 3
58018: PLUS
58019: PUSH
58020: LD_VAR 0 2
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: PUSH
58033: LD_VAR 0 1
58037: PUSH
58038: LD_INT 4
58040: PLUS
58041: PUSH
58042: LD_VAR 0 2
58046: PUSH
58047: LD_INT 4
58049: PLUS
58050: PUSH
58051: LD_INT 5
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: LIST
58058: PUSH
58059: LD_VAR 0 1
58063: PUSH
58064: LD_INT 4
58066: MINUS
58067: PUSH
58068: LD_VAR 0 2
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: PUSH
58081: LD_VAR 0 1
58085: PUSH
58086: LD_VAR 0 2
58090: PUSH
58091: LD_INT 4
58093: MINUS
58094: PUSH
58095: LD_INT 3
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: PUSH
58103: LD_VAR 0 1
58107: PUSH
58108: LD_INT 3
58110: MINUS
58111: PUSH
58112: LD_VAR 0 2
58116: PUSH
58117: LD_INT 3
58119: MINUS
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: ST_TO_ADDR
// end ; 4 :
58136: GO 58417
58138: LD_INT 4
58140: DOUBLE
58141: EQUAL
58142: IFTRUE 58146
58144: GO 58279
58146: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58147: LD_ADDR_VAR 0 5
58151: PUSH
58152: LD_VAR 0 1
58156: PUSH
58157: LD_VAR 0 2
58161: PUSH
58162: LD_INT 4
58164: PLUS
58165: PUSH
58166: LD_INT 0
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: LIST
58173: PUSH
58174: LD_VAR 0 1
58178: PUSH
58179: LD_INT 3
58181: PLUS
58182: PUSH
58183: LD_VAR 0 2
58187: PUSH
58188: LD_INT 3
58190: PLUS
58191: PUSH
58192: LD_INT 5
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: PUSH
58200: LD_VAR 0 1
58204: PUSH
58205: LD_INT 4
58207: PLUS
58208: PUSH
58209: LD_VAR 0 2
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: PUSH
58222: LD_VAR 0 1
58226: PUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_INT 3
58234: MINUS
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: PUSH
58244: LD_VAR 0 1
58248: PUSH
58249: LD_INT 4
58251: MINUS
58252: PUSH
58253: LD_VAR 0 2
58257: PUSH
58258: LD_INT 4
58260: MINUS
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: ST_TO_ADDR
// end ; 5 :
58277: GO 58417
58279: LD_INT 5
58281: DOUBLE
58282: EQUAL
58283: IFTRUE 58287
58285: GO 58416
58287: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58288: LD_ADDR_VAR 0 5
58292: PUSH
58293: LD_VAR 0 1
58297: PUSH
58298: LD_INT 4
58300: MINUS
58301: PUSH
58302: LD_VAR 0 2
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: PUSH
58315: LD_VAR 0 1
58319: PUSH
58320: LD_VAR 0 2
58324: PUSH
58325: LD_INT 4
58327: MINUS
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: PUSH
58337: LD_VAR 0 1
58341: PUSH
58342: LD_INT 4
58344: PLUS
58345: PUSH
58346: LD_VAR 0 2
58350: PUSH
58351: LD_INT 4
58353: PLUS
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: LIST
58362: PUSH
58363: LD_VAR 0 1
58367: PUSH
58368: LD_INT 3
58370: PLUS
58371: PUSH
58372: LD_VAR 0 2
58376: PUSH
58377: LD_INT 4
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: LIST
58384: PUSH
58385: LD_VAR 0 1
58389: PUSH
58390: LD_VAR 0 2
58394: PUSH
58395: LD_INT 3
58397: PLUS
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: ST_TO_ADDR
// end ; end ;
58414: GO 58417
58416: POP
// result := list ;
58417: LD_ADDR_VAR 0 4
58421: PUSH
58422: LD_VAR 0 5
58426: ST_TO_ADDR
// end ;
58427: LD_VAR 0 4
58431: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58432: LD_INT 0
58434: PPUSH
58435: PPUSH
58436: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58437: LD_VAR 0 1
58441: NOT
58442: PUSH
58443: LD_VAR 0 2
58447: PUSH
58448: LD_INT 1
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 3
58456: PUSH
58457: LD_INT 4
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: IN
58466: NOT
58467: OR
58468: IFFALSE 58472
// exit ;
58470: GO 58564
// tmp := [ ] ;
58472: LD_ADDR_VAR 0 5
58476: PUSH
58477: EMPTY
58478: ST_TO_ADDR
// for i in units do
58479: LD_ADDR_VAR 0 4
58483: PUSH
58484: LD_VAR 0 1
58488: PUSH
58489: FOR_IN
58490: IFFALSE 58533
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58492: LD_ADDR_VAR 0 5
58496: PUSH
58497: LD_VAR 0 5
58501: PPUSH
58502: LD_VAR 0 5
58506: PUSH
58507: LD_INT 1
58509: PLUS
58510: PPUSH
58511: LD_VAR 0 4
58515: PPUSH
58516: LD_VAR 0 2
58520: PPUSH
58521: CALL_OW 259
58525: PPUSH
58526: CALL_OW 2
58530: ST_TO_ADDR
58531: GO 58489
58533: POP
58534: POP
// if not tmp then
58535: LD_VAR 0 5
58539: NOT
58540: IFFALSE 58544
// exit ;
58542: GO 58564
// result := SortListByListDesc ( units , tmp ) ;
58544: LD_ADDR_VAR 0 3
58548: PUSH
58549: LD_VAR 0 1
58553: PPUSH
58554: LD_VAR 0 5
58558: PPUSH
58559: CALL_OW 77
58563: ST_TO_ADDR
// end ;
58564: LD_VAR 0 3
58568: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58569: LD_INT 0
58571: PPUSH
58572: PPUSH
58573: PPUSH
// x := GetX ( building ) ;
58574: LD_ADDR_VAR 0 4
58578: PUSH
58579: LD_VAR 0 2
58583: PPUSH
58584: CALL_OW 250
58588: ST_TO_ADDR
// y := GetY ( building ) ;
58589: LD_ADDR_VAR 0 5
58593: PUSH
58594: LD_VAR 0 2
58598: PPUSH
58599: CALL_OW 251
58603: ST_TO_ADDR
// if GetTaskList ( unit ) then
58604: LD_VAR 0 1
58608: PPUSH
58609: CALL_OW 437
58613: IFFALSE 58708
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58615: LD_STRING e
58617: PUSH
58618: LD_VAR 0 1
58622: PPUSH
58623: CALL_OW 437
58627: PUSH
58628: LD_INT 1
58630: ARRAY
58631: PUSH
58632: LD_INT 1
58634: ARRAY
58635: EQUAL
58636: PUSH
58637: LD_VAR 0 4
58641: PUSH
58642: LD_VAR 0 1
58646: PPUSH
58647: CALL_OW 437
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: PUSH
58656: LD_INT 2
58658: ARRAY
58659: EQUAL
58660: AND
58661: PUSH
58662: LD_VAR 0 5
58666: PUSH
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 437
58676: PUSH
58677: LD_INT 1
58679: ARRAY
58680: PUSH
58681: LD_INT 3
58683: ARRAY
58684: EQUAL
58685: AND
58686: IFFALSE 58698
// result := true else
58688: LD_ADDR_VAR 0 3
58692: PUSH
58693: LD_INT 1
58695: ST_TO_ADDR
58696: GO 58706
// result := false ;
58698: LD_ADDR_VAR 0 3
58702: PUSH
58703: LD_INT 0
58705: ST_TO_ADDR
// end else
58706: GO 58716
// result := false ;
58708: LD_ADDR_VAR 0 3
58712: PUSH
58713: LD_INT 0
58715: ST_TO_ADDR
// end ;
58716: LD_VAR 0 3
58720: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58721: LD_INT 0
58723: PPUSH
58724: PPUSH
58725: PPUSH
58726: PPUSH
// if not unit or not area then
58727: LD_VAR 0 1
58731: NOT
58732: PUSH
58733: LD_VAR 0 2
58737: NOT
58738: OR
58739: IFFALSE 58743
// exit ;
58741: GO 58907
// tmp := AreaToList ( area , i ) ;
58743: LD_ADDR_VAR 0 6
58747: PUSH
58748: LD_VAR 0 2
58752: PPUSH
58753: LD_VAR 0 5
58757: PPUSH
58758: CALL_OW 517
58762: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58763: LD_ADDR_VAR 0 5
58767: PUSH
58768: DOUBLE
58769: LD_INT 1
58771: DEC
58772: ST_TO_ADDR
58773: LD_VAR 0 6
58777: PUSH
58778: LD_INT 1
58780: ARRAY
58781: PUSH
58782: FOR_TO
58783: IFFALSE 58905
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58785: LD_ADDR_VAR 0 7
58789: PUSH
58790: LD_VAR 0 6
58794: PUSH
58795: LD_INT 1
58797: ARRAY
58798: PUSH
58799: LD_VAR 0 5
58803: ARRAY
58804: PUSH
58805: LD_VAR 0 6
58809: PUSH
58810: LD_INT 2
58812: ARRAY
58813: PUSH
58814: LD_VAR 0 5
58818: ARRAY
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58824: LD_VAR 0 7
58828: PUSH
58829: LD_INT 1
58831: ARRAY
58832: PPUSH
58833: LD_VAR 0 7
58837: PUSH
58838: LD_INT 2
58840: ARRAY
58841: PPUSH
58842: CALL_OW 428
58846: PUSH
58847: LD_INT 0
58849: EQUAL
58850: IFFALSE 58903
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58852: LD_VAR 0 1
58856: PPUSH
58857: LD_VAR 0 7
58861: PUSH
58862: LD_INT 1
58864: ARRAY
58865: PPUSH
58866: LD_VAR 0 7
58870: PUSH
58871: LD_INT 2
58873: ARRAY
58874: PPUSH
58875: LD_VAR 0 3
58879: PPUSH
58880: CALL_OW 48
// result := IsPlaced ( unit ) ;
58884: LD_ADDR_VAR 0 4
58888: PUSH
58889: LD_VAR 0 1
58893: PPUSH
58894: CALL_OW 305
58898: ST_TO_ADDR
// exit ;
58899: POP
58900: POP
58901: GO 58907
// end ; end ;
58903: GO 58782
58905: POP
58906: POP
// end ;
58907: LD_VAR 0 4
58911: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58912: LD_INT 0
58914: PPUSH
58915: PPUSH
58916: PPUSH
// if not side or side > 8 then
58917: LD_VAR 0 1
58921: NOT
58922: PUSH
58923: LD_VAR 0 1
58927: PUSH
58928: LD_INT 8
58930: GREATER
58931: OR
58932: IFFALSE 58936
// exit ;
58934: GO 59123
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58936: LD_ADDR_VAR 0 4
58940: PUSH
58941: LD_INT 22
58943: PUSH
58944: LD_VAR 0 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 21
58955: PUSH
58956: LD_INT 3
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PPUSH
58967: CALL_OW 69
58971: ST_TO_ADDR
// if not tmp then
58972: LD_VAR 0 4
58976: NOT
58977: IFFALSE 58981
// exit ;
58979: GO 59123
// enable_addtolog := true ;
58981: LD_ADDR_OWVAR 81
58985: PUSH
58986: LD_INT 1
58988: ST_TO_ADDR
// AddToLog ( [ ) ;
58989: LD_STRING [
58991: PPUSH
58992: CALL_OW 561
// for i in tmp do
58996: LD_ADDR_VAR 0 3
59000: PUSH
59001: LD_VAR 0 4
59005: PUSH
59006: FOR_IN
59007: IFFALSE 59114
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59009: LD_STRING [
59011: PUSH
59012: LD_VAR 0 3
59016: PPUSH
59017: CALL_OW 266
59021: STR
59022: PUSH
59023: LD_STRING , 
59025: STR
59026: PUSH
59027: LD_VAR 0 3
59031: PPUSH
59032: CALL_OW 250
59036: STR
59037: PUSH
59038: LD_STRING , 
59040: STR
59041: PUSH
59042: LD_VAR 0 3
59046: PPUSH
59047: CALL_OW 251
59051: STR
59052: PUSH
59053: LD_STRING , 
59055: STR
59056: PUSH
59057: LD_VAR 0 3
59061: PPUSH
59062: CALL_OW 254
59066: STR
59067: PUSH
59068: LD_STRING , 
59070: STR
59071: PUSH
59072: LD_VAR 0 3
59076: PPUSH
59077: LD_INT 1
59079: PPUSH
59080: CALL_OW 268
59084: STR
59085: PUSH
59086: LD_STRING , 
59088: STR
59089: PUSH
59090: LD_VAR 0 3
59094: PPUSH
59095: LD_INT 2
59097: PPUSH
59098: CALL_OW 268
59102: STR
59103: PUSH
59104: LD_STRING ],
59106: STR
59107: PPUSH
59108: CALL_OW 561
// end ;
59112: GO 59006
59114: POP
59115: POP
// AddToLog ( ]; ) ;
59116: LD_STRING ];
59118: PPUSH
59119: CALL_OW 561
// end ;
59123: LD_VAR 0 2
59127: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59128: LD_INT 0
59130: PPUSH
59131: PPUSH
59132: PPUSH
59133: PPUSH
59134: PPUSH
// if not area or not rate or not max then
59135: LD_VAR 0 1
59139: NOT
59140: PUSH
59141: LD_VAR 0 2
59145: NOT
59146: OR
59147: PUSH
59148: LD_VAR 0 4
59152: NOT
59153: OR
59154: IFFALSE 59158
// exit ;
59156: GO 59350
// while 1 do
59158: LD_INT 1
59160: IFFALSE 59350
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59162: LD_ADDR_VAR 0 9
59166: PUSH
59167: LD_VAR 0 1
59171: PPUSH
59172: LD_INT 1
59174: PPUSH
59175: CALL_OW 287
59179: PUSH
59180: LD_INT 10
59182: MUL
59183: ST_TO_ADDR
// r := rate / 10 ;
59184: LD_ADDR_VAR 0 7
59188: PUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 10
59196: DIVREAL
59197: ST_TO_ADDR
// time := 1 1$00 ;
59198: LD_ADDR_VAR 0 8
59202: PUSH
59203: LD_INT 2100
59205: ST_TO_ADDR
// if amount < min then
59206: LD_VAR 0 9
59210: PUSH
59211: LD_VAR 0 3
59215: LESS
59216: IFFALSE 59234
// r := r * 2 else
59218: LD_ADDR_VAR 0 7
59222: PUSH
59223: LD_VAR 0 7
59227: PUSH
59228: LD_INT 2
59230: MUL
59231: ST_TO_ADDR
59232: GO 59260
// if amount > max then
59234: LD_VAR 0 9
59238: PUSH
59239: LD_VAR 0 4
59243: GREATER
59244: IFFALSE 59260
// r := r / 2 ;
59246: LD_ADDR_VAR 0 7
59250: PUSH
59251: LD_VAR 0 7
59255: PUSH
59256: LD_INT 2
59258: DIVREAL
59259: ST_TO_ADDR
// time := time / r ;
59260: LD_ADDR_VAR 0 8
59264: PUSH
59265: LD_VAR 0 8
59269: PUSH
59270: LD_VAR 0 7
59274: DIVREAL
59275: ST_TO_ADDR
// if time < 0 then
59276: LD_VAR 0 8
59280: PUSH
59281: LD_INT 0
59283: LESS
59284: IFFALSE 59301
// time := time * - 1 ;
59286: LD_ADDR_VAR 0 8
59290: PUSH
59291: LD_VAR 0 8
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: MUL
59300: ST_TO_ADDR
// wait ( time ) ;
59301: LD_VAR 0 8
59305: PPUSH
59306: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59310: LD_INT 35
59312: PPUSH
59313: LD_INT 875
59315: PPUSH
59316: CALL_OW 12
59320: PPUSH
59321: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59325: LD_INT 1
59327: PPUSH
59328: LD_INT 5
59330: PPUSH
59331: CALL_OW 12
59335: PPUSH
59336: LD_VAR 0 1
59340: PPUSH
59341: LD_INT 1
59343: PPUSH
59344: CALL_OW 55
// end ;
59348: GO 59158
// end ;
59350: LD_VAR 0 5
59354: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59355: LD_INT 0
59357: PPUSH
59358: PPUSH
59359: PPUSH
59360: PPUSH
59361: PPUSH
59362: PPUSH
59363: PPUSH
59364: PPUSH
// if not turrets or not factories then
59365: LD_VAR 0 1
59369: NOT
59370: PUSH
59371: LD_VAR 0 2
59375: NOT
59376: OR
59377: IFFALSE 59381
// exit ;
59379: GO 59688
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59381: LD_ADDR_VAR 0 10
59385: PUSH
59386: LD_INT 5
59388: PUSH
59389: LD_INT 6
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: LD_INT 5
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 24
59423: PUSH
59424: LD_INT 25
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 23
59433: PUSH
59434: LD_INT 27
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 42
59447: PUSH
59448: LD_INT 43
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 44
59457: PUSH
59458: LD_INT 46
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 45
59467: PUSH
59468: LD_INT 47
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: LIST
59484: ST_TO_ADDR
// result := [ ] ;
59485: LD_ADDR_VAR 0 3
59489: PUSH
59490: EMPTY
59491: ST_TO_ADDR
// for i in turrets do
59492: LD_ADDR_VAR 0 4
59496: PUSH
59497: LD_VAR 0 1
59501: PUSH
59502: FOR_IN
59503: IFFALSE 59686
// begin nat := GetNation ( i ) ;
59505: LD_ADDR_VAR 0 7
59509: PUSH
59510: LD_VAR 0 4
59514: PPUSH
59515: CALL_OW 248
59519: ST_TO_ADDR
// weapon := 0 ;
59520: LD_ADDR_VAR 0 8
59524: PUSH
59525: LD_INT 0
59527: ST_TO_ADDR
// if not nat then
59528: LD_VAR 0 7
59532: NOT
59533: IFFALSE 59537
// continue ;
59535: GO 59502
// for j in list [ nat ] do
59537: LD_ADDR_VAR 0 5
59541: PUSH
59542: LD_VAR 0 10
59546: PUSH
59547: LD_VAR 0 7
59551: ARRAY
59552: PUSH
59553: FOR_IN
59554: IFFALSE 59595
// if GetBWeapon ( i ) = j [ 1 ] then
59556: LD_VAR 0 4
59560: PPUSH
59561: CALL_OW 269
59565: PUSH
59566: LD_VAR 0 5
59570: PUSH
59571: LD_INT 1
59573: ARRAY
59574: EQUAL
59575: IFFALSE 59593
// begin weapon := j [ 2 ] ;
59577: LD_ADDR_VAR 0 8
59581: PUSH
59582: LD_VAR 0 5
59586: PUSH
59587: LD_INT 2
59589: ARRAY
59590: ST_TO_ADDR
// break ;
59591: GO 59595
// end ;
59593: GO 59553
59595: POP
59596: POP
// if not weapon then
59597: LD_VAR 0 8
59601: NOT
59602: IFFALSE 59606
// continue ;
59604: GO 59502
// for k in factories do
59606: LD_ADDR_VAR 0 6
59610: PUSH
59611: LD_VAR 0 2
59615: PUSH
59616: FOR_IN
59617: IFFALSE 59682
// begin weapons := AvailableWeaponList ( k ) ;
59619: LD_ADDR_VAR 0 9
59623: PUSH
59624: LD_VAR 0 6
59628: PPUSH
59629: CALL_OW 478
59633: ST_TO_ADDR
// if not weapons then
59634: LD_VAR 0 9
59638: NOT
59639: IFFALSE 59643
// continue ;
59641: GO 59616
// if weapon in weapons then
59643: LD_VAR 0 8
59647: PUSH
59648: LD_VAR 0 9
59652: IN
59653: IFFALSE 59680
// begin result := [ i , weapon ] ;
59655: LD_ADDR_VAR 0 3
59659: PUSH
59660: LD_VAR 0 4
59664: PUSH
59665: LD_VAR 0 8
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: ST_TO_ADDR
// exit ;
59674: POP
59675: POP
59676: POP
59677: POP
59678: GO 59688
// end ; end ;
59680: GO 59616
59682: POP
59683: POP
// end ;
59684: GO 59502
59686: POP
59687: POP
// end ;
59688: LD_VAR 0 3
59692: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59693: LD_INT 0
59695: PPUSH
// if not side or side > 8 then
59696: LD_VAR 0 3
59700: NOT
59701: PUSH
59702: LD_VAR 0 3
59706: PUSH
59707: LD_INT 8
59709: GREATER
59710: OR
59711: IFFALSE 59715
// exit ;
59713: GO 59774
// if not range then
59715: LD_VAR 0 4
59719: NOT
59720: IFFALSE 59731
// range := - 12 ;
59722: LD_ADDR_VAR 0 4
59726: PUSH
59727: LD_INT 12
59729: NEG
59730: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59731: LD_VAR 0 1
59735: PPUSH
59736: LD_VAR 0 2
59740: PPUSH
59741: LD_VAR 0 3
59745: PPUSH
59746: LD_VAR 0 4
59750: PPUSH
59751: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59755: LD_VAR 0 1
59759: PPUSH
59760: LD_VAR 0 2
59764: PPUSH
59765: LD_VAR 0 3
59769: PPUSH
59770: CALL_OW 331
// end ;
59774: LD_VAR 0 5
59778: RET
// export function Video ( mode ) ; begin
59779: LD_INT 0
59781: PPUSH
// ingame_video = mode ;
59782: LD_ADDR_OWVAR 52
59786: PUSH
59787: LD_VAR 0 1
59791: ST_TO_ADDR
// interface_hidden = mode ;
59792: LD_ADDR_OWVAR 54
59796: PUSH
59797: LD_VAR 0 1
59801: ST_TO_ADDR
// end ;
59802: LD_VAR 0 2
59806: RET
// export function Join ( array , element ) ; begin
59807: LD_INT 0
59809: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59810: LD_ADDR_VAR 0 3
59814: PUSH
59815: LD_VAR 0 1
59819: PPUSH
59820: LD_VAR 0 1
59824: PUSH
59825: LD_INT 1
59827: PLUS
59828: PPUSH
59829: LD_VAR 0 2
59833: PPUSH
59834: CALL_OW 1
59838: ST_TO_ADDR
// end ;
59839: LD_VAR 0 3
59843: RET
// export function JoinUnion ( array , element ) ; begin
59844: LD_INT 0
59846: PPUSH
// result := array union element ;
59847: LD_ADDR_VAR 0 3
59851: PUSH
59852: LD_VAR 0 1
59856: PUSH
59857: LD_VAR 0 2
59861: UNION
59862: ST_TO_ADDR
// end ;
59863: LD_VAR 0 3
59867: RET
// export function GetBehemoths ( side ) ; begin
59868: LD_INT 0
59870: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59871: LD_ADDR_VAR 0 2
59875: PUSH
59876: LD_INT 22
59878: PUSH
59879: LD_VAR 0 1
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 31
59890: PUSH
59891: LD_INT 25
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PPUSH
59902: CALL_OW 69
59906: ST_TO_ADDR
// end ;
59907: LD_VAR 0 2
59911: RET
// export function Shuffle ( array ) ; var i , index ; begin
59912: LD_INT 0
59914: PPUSH
59915: PPUSH
59916: PPUSH
// result := [ ] ;
59917: LD_ADDR_VAR 0 2
59921: PUSH
59922: EMPTY
59923: ST_TO_ADDR
// if not array then
59924: LD_VAR 0 1
59928: NOT
59929: IFFALSE 59933
// exit ;
59931: GO 60032
// Randomize ;
59933: CALL_OW 10
// for i = array downto 1 do
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: DOUBLE
59943: LD_VAR 0 1
59947: INC
59948: ST_TO_ADDR
59949: LD_INT 1
59951: PUSH
59952: FOR_DOWNTO
59953: IFFALSE 60030
// begin index := rand ( 1 , array ) ;
59955: LD_ADDR_VAR 0 4
59959: PUSH
59960: LD_INT 1
59962: PPUSH
59963: LD_VAR 0 1
59967: PPUSH
59968: CALL_OW 12
59972: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59973: LD_ADDR_VAR 0 2
59977: PUSH
59978: LD_VAR 0 2
59982: PPUSH
59983: LD_VAR 0 2
59987: PUSH
59988: LD_INT 1
59990: PLUS
59991: PPUSH
59992: LD_VAR 0 1
59996: PUSH
59997: LD_VAR 0 4
60001: ARRAY
60002: PPUSH
60003: CALL_OW 2
60007: ST_TO_ADDR
// array := Delete ( array , index ) ;
60008: LD_ADDR_VAR 0 1
60012: PUSH
60013: LD_VAR 0 1
60017: PPUSH
60018: LD_VAR 0 4
60022: PPUSH
60023: CALL_OW 3
60027: ST_TO_ADDR
// end ;
60028: GO 59952
60030: POP
60031: POP
// end ;
60032: LD_VAR 0 2
60036: RET
// export function GetBaseMaterials ( base ) ; begin
60037: LD_INT 0
60039: PPUSH
// result := [ 0 , 0 , 0 ] ;
60040: LD_ADDR_VAR 0 2
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: ST_TO_ADDR
// if not base then
60059: LD_VAR 0 1
60063: NOT
60064: IFFALSE 60068
// exit ;
60066: GO 60117
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60068: LD_ADDR_VAR 0 2
60072: PUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: LD_INT 1
60080: PPUSH
60081: CALL_OW 275
60085: PUSH
60086: LD_VAR 0 1
60090: PPUSH
60091: LD_INT 2
60093: PPUSH
60094: CALL_OW 275
60098: PUSH
60099: LD_VAR 0 1
60103: PPUSH
60104: LD_INT 3
60106: PPUSH
60107: CALL_OW 275
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: ST_TO_ADDR
// end ;
60117: LD_VAR 0 2
60121: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60122: LD_INT 0
60124: PPUSH
60125: PPUSH
// result := array ;
60126: LD_ADDR_VAR 0 3
60130: PUSH
60131: LD_VAR 0 1
60135: ST_TO_ADDR
// if size > 0 then
60136: LD_VAR 0 2
60140: PUSH
60141: LD_INT 0
60143: GREATER
60144: IFFALSE 60190
// for i := array downto size do
60146: LD_ADDR_VAR 0 4
60150: PUSH
60151: DOUBLE
60152: LD_VAR 0 1
60156: INC
60157: ST_TO_ADDR
60158: LD_VAR 0 2
60162: PUSH
60163: FOR_DOWNTO
60164: IFFALSE 60188
// result := Delete ( result , result ) ;
60166: LD_ADDR_VAR 0 3
60170: PUSH
60171: LD_VAR 0 3
60175: PPUSH
60176: LD_VAR 0 3
60180: PPUSH
60181: CALL_OW 3
60185: ST_TO_ADDR
60186: GO 60163
60188: POP
60189: POP
// end ;
60190: LD_VAR 0 3
60194: RET
// export function ComExit ( unit ) ; var tmp ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
// if not IsInUnit ( unit ) then
60199: LD_VAR 0 1
60203: PPUSH
60204: CALL_OW 310
60208: NOT
60209: IFFALSE 60213
// exit ;
60211: GO 60273
// tmp := IsInUnit ( unit ) ;
60213: LD_ADDR_VAR 0 3
60217: PUSH
60218: LD_VAR 0 1
60222: PPUSH
60223: CALL_OW 310
60227: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60228: LD_VAR 0 3
60232: PPUSH
60233: CALL_OW 247
60237: PUSH
60238: LD_INT 2
60240: EQUAL
60241: IFFALSE 60254
// ComExitVehicle ( unit ) else
60243: LD_VAR 0 1
60247: PPUSH
60248: CALL_OW 121
60252: GO 60263
// ComExitBuilding ( unit ) ;
60254: LD_VAR 0 1
60258: PPUSH
60259: CALL_OW 122
// result := tmp ;
60263: LD_ADDR_VAR 0 2
60267: PUSH
60268: LD_VAR 0 3
60272: ST_TO_ADDR
// end ;
60273: LD_VAR 0 2
60277: RET
// export function ResetHc ; begin
60278: LD_INT 0
60280: PPUSH
// InitHc ;
60281: CALL_OW 19
// hc_importance := 0 ;
60285: LD_ADDR_OWVAR 32
60289: PUSH
60290: LD_INT 0
60292: ST_TO_ADDR
// end ;
60293: LD_VAR 0 1
60297: RET
