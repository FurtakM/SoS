// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 44 0 0
// PrepareAnimals ( 6 , 3 , 4 , apearea ) ;
  15: LD_INT 6
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 4
  23: PPUSH
  24: LD_INT 21
  26: PPUSH
  27: CALL 10853 0 4
// PrepareAmerican ;
  31: CALL 4032 0 0
// PrepareRussian ;
  35: CALL 292 0 0
// Action ;
  39: CALL 8541 0 0
// end ;
  43: END
// export conv_squad , escort , medal1 , medal2 , medal3 , path , convoy_start , dest_counter ; export riv , ar_attacks , ar_force , us_force , conv_counter , crates_counter , safeCounter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  47: LD_ADDR_OWVAR 67
  51: PUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL_OW 426
  59: ST_TO_ADDR
// medal1 := true ;
  60: LD_ADDR_EXP 3
  64: PUSH
  65: LD_INT 1
  67: ST_TO_ADDR
// medal2 := true ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// medal3 := true ;
  76: LD_ADDR_EXP 5
  80: PUSH
  81: LD_INT 1
  83: ST_TO_ADDR
// path := [ pp1 , pp2 , pp3 , pp4 , conv_end ] ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 10
  91: PUSH
  92: LD_INT 11
  94: PUSH
  95: LD_INT 12
  97: PUSH
  98: LD_INT 13
 100: PUSH
 101: LD_INT 9
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// conv_squad := [ ] ;
 111: LD_ADDR_EXP 1
 115: PUSH
 116: EMPTY
 117: ST_TO_ADDR
// escort := [ ] ;
 118: LD_ADDR_EXP 2
 122: PUSH
 123: EMPTY
 124: ST_TO_ADDR
// riv := [ ] ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: EMPTY
 131: ST_TO_ADDR
// ar_force := [ ] ;
 132: LD_ADDR_EXP 11
 136: PUSH
 137: EMPTY
 138: ST_TO_ADDR
// ar_attacks := false ;
 139: LD_ADDR_EXP 10
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// us_force := [ ] ;
 147: LD_ADDR_EXP 12
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// convoy_start := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// conv_counter := 0 ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// dest_counter := 0 ;
 170: LD_ADDR_EXP 8
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// crates_counter := 1 1$10 ;
 178: LD_ADDR_EXP 14
 182: PUSH
 183: LD_INT 2450
 185: ST_TO_ADDR
// safeCounter := 0 ;
 186: LD_ADDR_EXP 15
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// end ;
 194: LD_VAR 0 1
 198: RET
// every 2 2$00 do
 199: GO 201
 201: DISABLE
// begin while ( tick <= [ 47 47$00 , 44 44$00 , 41 41$00 ] [ Difficulty ] ) do
 202: LD_OWVAR 1
 206: PUSH
 207: LD_INT 98700
 209: PUSH
 210: LD_INT 92400
 212: PUSH
 213: LD_INT 86100
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: LIST
 220: PUSH
 221: LD_OWVAR 67
 225: ARRAY
 226: LESSEQUAL
 227: IFFALSE 291
// begin Wait ( crates_counter ) ;
 229: LD_EXP 14
 233: PPUSH
 234: CALL_OW 67
// crates_counter := crates_counter + 0 0$09 ;
 238: LD_ADDR_EXP 14
 242: PUSH
 243: LD_EXP 14
 247: PUSH
 248: LD_INT 315
 250: PLUS
 251: ST_TO_ADDR
// if GetResourceArea ( crates_spawn , mat_cans ) < 30 then
 252: LD_INT 22
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: CALL_OW 287
 262: PUSH
 263: LD_INT 30
 265: LESS
 266: IFFALSE 289
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_spawn , true ) ;
 268: LD_INT 1
 270: PPUSH
 271: LD_INT 5
 273: PPUSH
 274: CALL_OW 12
 278: PPUSH
 279: LD_INT 22
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 55
// end ;
 289: GO 202
// end ; end_of_file
 291: END
// export Stolypin , Popov , Saseda ; export function PrepareRussian ; var un , force , i , c , skill , team ; begin
 292: LD_INT 0
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
// uc_side := 6 ;
 301: LD_ADDR_OWVAR 20
 305: PUSH
 306: LD_INT 6
 308: ST_TO_ADDR
// uc_nation := 3 ;
 309: LD_ADDR_OWVAR 21
 313: PUSH
 314: LD_INT 3
 316: ST_TO_ADDR
// ChangeSideFog ( 3 , 6 ) ;
 317: LD_INT 3
 319: PPUSH
 320: LD_INT 6
 322: PPUSH
 323: CALL_OW 343
// Popov := NewCharacter ( Gaydar ) ;
 327: LD_ADDR_EXP 17
 331: PUSH
 332: LD_STRING Gaydar
 334: PPUSH
 335: CALL_OW 25
 339: ST_TO_ADDR
// uc_side := 7 ;
 340: LD_ADDR_OWVAR 20
 344: PUSH
 345: LD_INT 7
 347: ST_TO_ADDR
// hc_gallery := sandal ;
 348: LD_ADDR_OWVAR 33
 352: PUSH
 353: LD_STRING sandal
 355: ST_TO_ADDR
// hc_face_number := 9 ;
 356: LD_ADDR_OWVAR 34
 360: PUSH
 361: LD_INT 9
 363: ST_TO_ADDR
// hc_skills := [ 3 , 5 , 2 , 7 ] ;
 364: LD_ADDR_OWVAR 31
 368: PUSH
 369: LD_INT 3
 371: PUSH
 372: LD_INT 5
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 7
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: ST_TO_ADDR
// hc_sex := sex_male ;
 387: LD_ADDR_OWVAR 27
 391: PUSH
 392: LD_INT 1
 394: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 395: LD_ADDR_OWVAR 29
 399: PUSH
 400: LD_INT 10
 402: PUSH
 403: LD_INT 11
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// hc_class := 4 ;
 410: LD_ADDR_OWVAR 28
 414: PUSH
 415: LD_INT 4
 417: ST_TO_ADDR
// hc_name := Fiodor Saseda ;
 418: LD_ADDR_OWVAR 26
 422: PUSH
 423: LD_STRING Fiodor Saseda
 425: ST_TO_ADDR
// Saseda := CreateHuman ;
 426: LD_ADDR_EXP 18
 430: PUSH
 431: CALL_OW 44
 435: ST_TO_ADDR
// uc_side := 3 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 3
 443: ST_TO_ADDR
// hc_importance := 100 ;
 444: LD_ADDR_OWVAR 32
 448: PUSH
 449: LD_INT 100
 451: ST_TO_ADDR
// hc_class := 1 ;
 452: LD_ADDR_OWVAR 28
 456: PUSH
 457: LD_INT 1
 459: ST_TO_ADDR
// hc_sex := sex_male ;
 460: LD_ADDR_OWVAR 27
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
 468: LD_ADDR_OWVAR 31
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 2
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// hc_name := W. I. Stolypin ;
 491: LD_ADDR_OWVAR 26
 495: PUSH
 496: LD_STRING W. I. Stolypin
 498: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 499: LD_ADDR_OWVAR 29
 503: PUSH
 504: LD_INT 10
 506: PUSH
 507: LD_INT 11
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// hc_gallery := ru ;
 514: LD_ADDR_OWVAR 33
 518: PUSH
 519: LD_STRING ru
 521: ST_TO_ADDR
// hc_face_number := 15 ;
 522: LD_ADDR_OWVAR 34
 526: PUSH
 527: LD_INT 15
 529: ST_TO_ADDR
// Stolypin := CreateHuman ;
 530: LD_ADDR_EXP 16
 534: PUSH
 535: CALL_OW 44
 539: ST_TO_ADDR
// hc_importance := 0 ;
 540: LD_ADDR_OWVAR 32
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// hc_gallery :=  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_name :=  ;
 556: LD_ADDR_OWVAR 26
 560: PUSH
 561: LD_STRING 
 563: ST_TO_ADDR
// skill := [ 6 , 5 , 5 ] [ Difficulty ] ;
 564: LD_ADDR_VAR 0 6
 568: PUSH
 569: LD_INT 6
 571: PUSH
 572: LD_INT 5
 574: PUSH
 575: LD_INT 5
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// c := 1 ;
 589: LD_ADDR_VAR 0 5
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// for i = 1 to 21 do
 597: LD_ADDR_VAR 0 4
 601: PUSH
 602: DOUBLE
 603: LD_INT 1
 605: DEC
 606: ST_TO_ADDR
 607: LD_INT 21
 609: PUSH
 610: FOR_TO
 611: IFFALSE 712
// begin if i = 10 then
 613: LD_VAR 0 4
 617: PUSH
 618: LD_INT 10
 620: EQUAL
 621: IFFALSE 631
// c := 2 ;
 623: LD_ADDR_VAR 0 5
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// if i = 14 then
 631: LD_VAR 0 4
 635: PUSH
 636: LD_INT 14
 638: EQUAL
 639: IFFALSE 649
// c := 3 ;
 641: LD_ADDR_VAR 0 5
 645: PUSH
 646: LD_INT 3
 648: ST_TO_ADDR
// if i = 18 then
 649: LD_VAR 0 4
 653: PUSH
 654: LD_INT 18
 656: EQUAL
 657: IFFALSE 667
// c := 4 ;
 659: LD_ADDR_VAR 0 5
 663: PUSH
 664: LD_INT 4
 666: ST_TO_ADDR
// PrepareHuman ( false , c , skill ) ;
 667: LD_INT 0
 669: PPUSH
 670: LD_VAR 0 5
 674: PPUSH
 675: LD_VAR 0 6
 679: PPUSH
 680: CALL_OW 380
// un := CreateHuman ;
 684: LD_ADDR_VAR 0 2
 688: PUSH
 689: CALL_OW 44
 693: ST_TO_ADDR
// force := force ^ un ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_VAR 0 3
 703: PUSH
 704: LD_VAR 0 2
 708: ADD
 709: ST_TO_ADDR
// end ;
 710: GO 610
 712: POP
 713: POP
// team := CharacterSelection ( text , [ 7 , 6 , 6 ] [ Difficulty ] , [ 7 , 6 , 6 ] [ Difficulty ] , [ sel_change_class , Stolypin , sel_changeable , sel_not_hired ] ^ force , [ [ class_soldier , 3 ] , class_mechanic , [ class_engineer , 1 ] , class_scientistic ] ) ;
 714: LD_ADDR_VAR 0 7
 718: PUSH
 719: LD_STRING text
 721: PPUSH
 722: LD_INT 7
 724: PUSH
 725: LD_INT 6
 727: PUSH
 728: LD_INT 6
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_OWVAR 67
 740: ARRAY
 741: PPUSH
 742: LD_INT 7
 744: PUSH
 745: LD_INT 6
 747: PUSH
 748: LD_INT 6
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_OWVAR 67
 760: ARRAY
 761: PPUSH
 762: LD_INT -5
 764: PUSH
 765: LD_EXP 16
 769: PUSH
 770: LD_INT -3
 772: PUSH
 773: LD_INT -2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_VAR 0 3
 786: ADD
 787: PPUSH
 788: LD_INT 1
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 3
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PPUSH
 820: CALL_OW 42
 824: ST_TO_ADDR
// team := team ^ Stolypin ;
 825: LD_ADDR_VAR 0 7
 829: PUSH
 830: LD_VAR 0 7
 834: PUSH
 835: LD_EXP 16
 839: ADD
 840: ST_TO_ADDR
// for i = 1 to team do
 841: LD_ADDR_VAR 0 4
 845: PUSH
 846: DOUBLE
 847: LD_INT 1
 849: DEC
 850: ST_TO_ADDR
 851: LD_VAR 0 7
 855: PUSH
 856: FOR_TO
 857: IFFALSE 882
// PlaceUnitArea ( team [ i ] , rus_start , false ) ;
 859: LD_VAR 0 7
 863: PUSH
 864: LD_VAR 0 4
 868: ARRAY
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
 880: GO 856
 882: POP
 883: POP
// CenterNowOnUnits ( Stolypin ) ;
 884: LD_EXP 16
 888: PPUSH
 889: CALL_OW 87
// end ;
 893: LD_VAR 0 1
 897: RET
// export conv_ready ; export function Convoy ( type ) ; var i , veh , skill ; begin
 898: LD_INT 0
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
// Randomize ;
 904: CALL_OW 10
// uc_side := 6 ;
 908: LD_ADDR_OWVAR 20
 912: PUSH
 913: LD_INT 6
 915: ST_TO_ADDR
// uc_nation := 3 ;
 916: LD_ADDR_OWVAR 21
 920: PUSH
 921: LD_INT 3
 923: ST_TO_ADDR
// hc_name :=  ;
 924: LD_ADDR_OWVAR 26
 928: PUSH
 929: LD_STRING 
 931: ST_TO_ADDR
// hc_gallery :=  ;
 932: LD_ADDR_OWVAR 33
 936: PUSH
 937: LD_STRING 
 939: ST_TO_ADDR
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
 940: LD_ADDR_VAR 0 5
 944: PUSH
 945: LD_INT 5
 947: PUSH
 948: LD_INT 5
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_OWVAR 67
 963: ARRAY
 964: ST_TO_ADDR
// conv_ready := false ;
 965: LD_ADDR_EXP 19
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// case type of 1 :
 973: LD_VAR 0 1
 977: PUSH
 978: LD_INT 1
 980: DOUBLE
 981: EQUAL
 982: IFTRUE 986
 984: GO 1256
 986: POP
// begin if Rand ( 0 , 1 ) = 1 then
 987: LD_INT 0
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 12
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1007
// AddEscort ( ) ;
1003: CALL 2889 0 0
// wait ( 0 0$03 ) ;
1007: LD_INT 105
1009: PPUSH
1010: CALL_OW 67
// vc_chassis := ru_medium_wheeled ;
1014: LD_ADDR_OWVAR 37
1018: PUSH
1019: LD_INT 21
1021: ST_TO_ADDR
// vc_engine := engine_combustion ;
1022: LD_ADDR_OWVAR 39
1026: PUSH
1027: LD_INT 1
1029: ST_TO_ADDR
// vc_control := control_manual ;
1030: LD_ADDR_OWVAR 38
1034: PUSH
1035: LD_INT 1
1037: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1038: LD_ADDR_OWVAR 40
1042: PUSH
1043: LD_INT 51
1045: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1046: LD_ADDR_OWVAR 41
1050: PUSH
1051: LD_INT 50
1053: PPUSH
1054: LD_INT 99
1056: PPUSH
1057: CALL_OW 12
1061: ST_TO_ADDR
// if uc_side <> 6 then
1062: LD_OWVAR 20
1066: PUSH
1067: LD_INT 6
1069: NONEQUAL
1070: IFFALSE 1080
// uc_side := 6 ;
1072: LD_ADDR_OWVAR 20
1076: PUSH
1077: LD_INT 6
1079: ST_TO_ADDR
// veh := CreateVehicle ;
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: CALL_OW 45
1089: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1090: LD_VAR 0 4
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1102: LD_VAR 0 4
1106: PPUSH
1107: LD_INT 8
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1117: LD_INT 0
1119: PPUSH
1120: LD_INT 1
1122: PPUSH
1123: LD_INT 2
1125: PPUSH
1126: CALL_OW 12
1130: PPUSH
1131: LD_VAR 0 5
1135: PPUSH
1136: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1140: CALL_OW 44
1144: PPUSH
1145: LD_VAR 0 4
1149: PPUSH
1150: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1154: LD_VAR 0 4
1158: PPUSH
1159: LD_INT 500
1161: PPUSH
1162: LD_INT 1000
1164: PPUSH
1165: CALL_OW 12
1169: PPUSH
1170: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 2
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: LD_INT 2
1192: PPUSH
1193: LD_INT 10
1195: PPUSH
1196: CALL_OW 12
1200: PUSH
1201: LD_INT 10
1203: MUL
1204: PPUSH
1205: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1209: LD_ADDR_EXP 1
1213: PUSH
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 1
1221: PPUSH
1222: LD_VAR 0 4
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 2
1238: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
1239: LD_INT 35
1241: PPUSH
1242: CALL_OW 67
// conv_ready := true ;
1246: LD_ADDR_EXP 19
1250: PUSH
1251: LD_INT 1
1253: ST_TO_ADDR
// end ; 2 :
1254: GO 2884
1256: LD_INT 2
1258: DOUBLE
1259: EQUAL
1260: IFTRUE 1264
1262: GO 1564
1264: POP
// begin AddEscort ( ) ;
1265: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1269: LD_INT 70
1271: PPUSH
1272: CALL_OW 67
// for i = 1 to 3 do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 1
1284: DEC
1285: ST_TO_ADDR
1286: LD_INT 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1541
// begin vc_chassis := ru_medium_wheeled ;
1292: LD_ADDR_OWVAR 37
1296: PUSH
1297: LD_INT 21
1299: ST_TO_ADDR
// vc_engine := engine_combustion ;
1300: LD_ADDR_OWVAR 39
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// vc_control := control_manual ;
1308: LD_ADDR_OWVAR 38
1312: PUSH
1313: LD_INT 1
1315: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1316: LD_ADDR_OWVAR 40
1320: PUSH
1321: LD_INT 51
1323: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1324: LD_ADDR_OWVAR 41
1328: PUSH
1329: LD_INT 50
1331: PPUSH
1332: LD_INT 99
1334: PPUSH
1335: CALL_OW 12
1339: ST_TO_ADDR
// if uc_side <> 6 then
1340: LD_OWVAR 20
1344: PUSH
1345: LD_INT 6
1347: NONEQUAL
1348: IFFALSE 1358
// uc_side := 6 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 6
1357: ST_TO_ADDR
// veh := CreateVehicle ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: CALL_OW 45
1367: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1368: LD_VAR 0 4
1372: PPUSH
1373: LD_INT 3
1375: PPUSH
1376: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1380: LD_VAR 0 4
1384: PPUSH
1385: LD_INT 8
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1395: LD_INT 0
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_INT 2
1403: PPUSH
1404: CALL_OW 12
1408: PPUSH
1409: LD_VAR 0 5
1413: PPUSH
1414: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1418: CALL_OW 44
1422: PPUSH
1423: LD_VAR 0 4
1427: PPUSH
1428: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1432: LD_VAR 0 4
1436: PPUSH
1437: LD_INT 500
1439: PPUSH
1440: LD_INT 1000
1442: PPUSH
1443: CALL_OW 12
1447: PPUSH
1448: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1452: LD_VAR 0 4
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: CALL_OW 12
1467: PPUSH
1468: LD_INT 2
1470: PPUSH
1471: LD_INT 10
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 10
1481: MUL
1482: PPUSH
1483: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1487: LD_ADDR_EXP 1
1491: PUSH
1492: LD_EXP 1
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 2
1516: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1517: LD_VAR 0 4
1521: PPUSH
1522: LD_INT 120
1524: PPUSH
1525: LD_INT 10
1527: PPUSH
1528: CALL_OW 111
// wait ( 0 0$03 ) ;
1532: LD_INT 105
1534: PPUSH
1535: CALL_OW 67
// end ;
1539: GO 1289
1541: POP
1542: POP
// AddEscort ( ) ;
1543: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1547: LD_INT 70
1549: PPUSH
1550: CALL_OW 67
// conv_ready := true ;
1554: LD_ADDR_EXP 19
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// end ; 3 :
1562: GO 2884
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1999
1572: POP
// begin AddEscort ( ) ;
1573: CALL 2889 0 0
// wait ( 0 0$02 ) ;
1577: LD_INT 70
1579: PPUSH
1580: CALL_OW 67
// for i = 1 to 3 do
1584: LD_ADDR_VAR 0 3
1588: PUSH
1589: DOUBLE
1590: LD_INT 1
1592: DEC
1593: ST_TO_ADDR
1594: LD_INT 3
1596: PUSH
1597: FOR_TO
1598: IFFALSE 1849
// begin vc_chassis := ru_medium_wheeled ;
1600: LD_ADDR_OWVAR 37
1604: PUSH
1605: LD_INT 21
1607: ST_TO_ADDR
// vc_engine := engine_combustion ;
1608: LD_ADDR_OWVAR 39
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// vc_control := control_manual ;
1616: LD_ADDR_OWVAR 38
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_INT 51
1631: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
1632: LD_ADDR_OWVAR 41
1636: PUSH
1637: LD_INT 50
1639: PPUSH
1640: LD_INT 99
1642: PPUSH
1643: CALL_OW 12
1647: ST_TO_ADDR
// if uc_side <> 6 then
1648: LD_OWVAR 20
1652: PUSH
1653: LD_INT 6
1655: NONEQUAL
1656: IFFALSE 1666
// uc_side := 6 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 6
1665: ST_TO_ADDR
// veh := CreateVehicle ;
1666: LD_ADDR_VAR 0 4
1670: PUSH
1671: CALL_OW 45
1675: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1676: LD_VAR 0 4
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
1688: LD_VAR 0 4
1692: PPUSH
1693: LD_INT 8
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_INT 2
1711: PPUSH
1712: CALL_OW 12
1716: PPUSH
1717: LD_VAR 0 5
1721: PPUSH
1722: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
1726: CALL_OW 44
1730: PPUSH
1731: LD_VAR 0 4
1735: PPUSH
1736: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
1740: LD_VAR 0 4
1744: PPUSH
1745: LD_INT 500
1747: PPUSH
1748: LD_INT 1000
1750: PPUSH
1751: CALL_OW 12
1755: PPUSH
1756: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
1760: LD_VAR 0 4
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: LD_INT 2
1778: PPUSH
1779: LD_INT 10
1781: PPUSH
1782: CALL_OW 12
1786: PUSH
1787: LD_INT 10
1789: MUL
1790: PPUSH
1791: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
1795: LD_ADDR_EXP 1
1799: PUSH
1800: LD_EXP 1
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_VAR 0 4
1812: PUSH
1813: LD_INT 1
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PPUSH
1820: CALL_OW 2
1824: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1825: LD_VAR 0 4
1829: PPUSH
1830: LD_INT 120
1832: PPUSH
1833: LD_INT 10
1835: PPUSH
1836: CALL_OW 111
// wait ( 0 0$03 ) ;
1840: LD_INT 105
1842: PPUSH
1843: CALL_OW 67
// end ;
1847: GO 1597
1849: POP
1850: POP
// for i = 1 to rand ( 2 , 4 ) do
1851: LD_ADDR_VAR 0 3
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL_OW 12
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1980
// begin PrepareHuman ( false , 1 , skill ) ;
1875: LD_INT 0
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_VAR 0 5
1885: PPUSH
1886: CALL_OW 380
// if uc_side <> 6 then
1890: LD_OWVAR 20
1894: PUSH
1895: LD_INT 6
1897: NONEQUAL
1898: IFFALSE 1908
// uc_side := 6 ;
1900: LD_ADDR_OWVAR 20
1904: PUSH
1905: LD_INT 6
1907: ST_TO_ADDR
// veh := CreateHuman ;
1908: LD_ADDR_VAR 0 4
1912: PUSH
1913: CALL_OW 44
1917: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
1918: LD_VAR 0 4
1922: PPUSH
1923: LD_INT 8
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
1933: LD_ADDR_EXP 2
1937: PUSH
1938: LD_EXP 2
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_VAR 0 4
1950: PPUSH
1951: CALL_OW 2
1955: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
1956: LD_VAR 0 4
1960: PPUSH
1961: LD_INT 120
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: CALL_OW 111
// Wait ( 0 0$02 ) ;
1971: LD_INT 70
1973: PPUSH
1974: CALL_OW 67
// end ;
1978: GO 1872
1980: POP
1981: POP
// Wait ( 0 0$02 ) ;
1982: LD_INT 70
1984: PPUSH
1985: CALL_OW 67
// conv_ready := true ;
1989: LD_ADDR_EXP 19
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// end ; 4 :
1997: GO 2884
1999: LD_INT 4
2001: DOUBLE
2002: EQUAL
2003: IFTRUE 2007
2005: GO 2313
2007: POP
// begin if Rand ( 0 , 1 ) = 1 then
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 12
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2028
// AddEscort ( ) ;
2024: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2028: LD_INT 70
2030: PPUSH
2031: CALL_OW 67
// for i = 1 to 5 do
2035: LD_ADDR_VAR 0 3
2039: PUSH
2040: DOUBLE
2041: LD_INT 1
2043: DEC
2044: ST_TO_ADDR
2045: LD_INT 5
2047: PUSH
2048: FOR_TO
2049: IFFALSE 2171
// begin PrepareHuman ( false , Rand ( 2 , 4 ) , skill ) ;
2051: LD_INT 0
2053: PPUSH
2054: LD_INT 2
2056: PPUSH
2057: LD_INT 4
2059: PPUSH
2060: CALL_OW 12
2064: PPUSH
2065: LD_VAR 0 5
2069: PPUSH
2070: CALL_OW 380
// if uc_side <> 6 then
2074: LD_OWVAR 20
2078: PUSH
2079: LD_INT 6
2081: NONEQUAL
2082: IFFALSE 2092
// uc_side := 6 ;
2084: LD_ADDR_OWVAR 20
2088: PUSH
2089: LD_INT 6
2091: ST_TO_ADDR
// veh := CreateHuman ;
2092: LD_ADDR_VAR 0 4
2096: PUSH
2097: CALL_OW 44
2101: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2102: LD_VAR 0 4
2106: PPUSH
2107: LD_INT 8
2109: PPUSH
2110: LD_INT 0
2112: PPUSH
2113: CALL_OW 49
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2117: LD_ADDR_EXP 1
2121: PUSH
2122: LD_EXP 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_VAR 0 4
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 2
2146: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2147: LD_VAR 0 4
2151: PPUSH
2152: LD_INT 120
2154: PPUSH
2155: LD_INT 10
2157: PPUSH
2158: CALL_OW 111
// Wait ( 0 0$02 ) ;
2162: LD_INT 70
2164: PPUSH
2165: CALL_OW 67
// end ;
2169: GO 2048
2171: POP
2172: POP
// for i = 1 to 2 do
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: DOUBLE
2179: LD_INT 1
2181: DEC
2182: ST_TO_ADDR
2183: LD_INT 2
2185: PUSH
2186: FOR_TO
2187: IFFALSE 2294
// begin PrepareHuman ( false , 1 , skill ) ;
2189: LD_INT 0
2191: PPUSH
2192: LD_INT 1
2194: PPUSH
2195: LD_VAR 0 5
2199: PPUSH
2200: CALL_OW 380
// if uc_side <> 6 then
2204: LD_OWVAR 20
2208: PUSH
2209: LD_INT 6
2211: NONEQUAL
2212: IFFALSE 2222
// uc_side := 6 ;
2214: LD_ADDR_OWVAR 20
2218: PUSH
2219: LD_INT 6
2221: ST_TO_ADDR
// veh := CreateHuman ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( veh , conv_start , false ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 8
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// escort := Insert ( escort , 1 , veh ) ;
2247: LD_ADDR_EXP 2
2251: PUSH
2252: LD_EXP 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 2
2269: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2270: LD_VAR 0 4
2274: PPUSH
2275: LD_INT 120
2277: PPUSH
2278: LD_INT 10
2280: PPUSH
2281: CALL_OW 111
// Wait ( 0 0$02 ) ;
2285: LD_INT 70
2287: PPUSH
2288: CALL_OW 67
// end ;
2292: GO 2186
2294: POP
2295: POP
// Wait ( 0 0$02 ) ;
2296: LD_INT 70
2298: PPUSH
2299: CALL_OW 67
// conv_ready := true ;
2303: LD_ADDR_EXP 19
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ; 5 :
2311: GO 2884
2313: LD_INT 5
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2883
2321: POP
// begin AddEscort ( ) ;
2322: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2326: LD_INT 70
2328: PPUSH
2329: CALL_OW 67
// AddEscort ( ) ;
2333: CALL 2889 0 0
// wait ( 0 0$02 ) ;
2337: LD_INT 70
2339: PPUSH
2340: CALL_OW 67
// for i = 1 to 3 do
2344: LD_ADDR_VAR 0 3
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 3
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2609
// begin vc_chassis := ru_medium_wheeled ;
2360: LD_ADDR_OWVAR 37
2364: PUSH
2365: LD_INT 21
2367: ST_TO_ADDR
// vc_engine := engine_combustion ;
2368: LD_ADDR_OWVAR 39
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// vc_control := control_manual ;
2376: LD_ADDR_OWVAR 38
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2384: LD_ADDR_OWVAR 40
2388: PUSH
2389: LD_INT 51
2391: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2392: LD_ADDR_OWVAR 41
2396: PUSH
2397: LD_INT 50
2399: PPUSH
2400: LD_INT 99
2402: PPUSH
2403: CALL_OW 12
2407: ST_TO_ADDR
// if uc_side <> 6 then
2408: LD_OWVAR 20
2412: PUSH
2413: LD_INT 6
2415: NONEQUAL
2416: IFFALSE 2426
// uc_side := 6 ;
2418: LD_ADDR_OWVAR 20
2422: PUSH
2423: LD_INT 6
2425: ST_TO_ADDR
// veh := CreateVehicle ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: CALL_OW 45
2435: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_INT 3
2443: PPUSH
2444: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2448: LD_VAR 0 4
2452: PPUSH
2453: LD_INT 8
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2463: LD_INT 0
2465: PPUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 2
2471: PPUSH
2472: CALL_OW 12
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2486: CALL_OW 44
2490: PPUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2500: LD_VAR 0 4
2504: PPUSH
2505: LD_INT 500
2507: PPUSH
2508: LD_INT 1000
2510: PPUSH
2511: CALL_OW 12
2515: PPUSH
2516: CALL_OW 234
// SetCargo ( veh , Rand ( 1 , 2 ) , Rand ( 2 , 10 ) * 10 ) ;
2520: LD_VAR 0 4
2524: PPUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 2
2530: PPUSH
2531: CALL_OW 12
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: LD_INT 10
2541: PPUSH
2542: CALL_OW 12
2546: PUSH
2547: LD_INT 10
2549: MUL
2550: PPUSH
2551: CALL_OW 290
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2555: LD_ADDR_EXP 1
2559: PUSH
2560: LD_EXP 1
2564: PPUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_VAR 0 4
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PPUSH
2580: CALL_OW 2
2584: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2585: LD_VAR 0 4
2589: PPUSH
2590: LD_INT 120
2592: PPUSH
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 111
// Wait ( 0 0$02 ) ;
2600: LD_INT 70
2602: PPUSH
2603: CALL_OW 67
// end ;
2607: GO 2357
2609: POP
2610: POP
// if Rand ( 0 , 1 ) = 1 then
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PUSH
2622: LD_INT 1
2624: EQUAL
2625: IFFALSE 2661
// begin vc_chassis := ru_medium_tracked ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 22
2634: ST_TO_ADDR
// vc_engine := engine_combustion ;
2635: LD_ADDR_OWVAR 39
2639: PUSH
2640: LD_INT 1
2642: ST_TO_ADDR
// vc_control := control_manual ;
2643: LD_ADDR_OWVAR 38
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// vc_weapon := ru_crane ;
2651: LD_ADDR_OWVAR 40
2655: PUSH
2656: LD_INT 52
2658: ST_TO_ADDR
// end else
2659: GO 2693
// begin vc_chassis := ru_heavy_wheeled ;
2661: LD_ADDR_OWVAR 37
2665: PUSH
2666: LD_INT 23
2668: ST_TO_ADDR
// vc_engine := engine_combustion ;
2669: LD_ADDR_OWVAR 39
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// vc_control := control_manual ;
2677: LD_ADDR_OWVAR 38
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// vc_weapon := ru_bulldozer ;
2685: LD_ADDR_OWVAR 40
2689: PUSH
2690: LD_INT 53
2692: ST_TO_ADDR
// end ; vc_fuel_battery := Rand ( 50 , 99 ) ;
2693: LD_ADDR_OWVAR 41
2697: PUSH
2698: LD_INT 50
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 12
2708: ST_TO_ADDR
// if uc_side <> 6 then
2709: LD_OWVAR 20
2713: PUSH
2714: LD_INT 6
2716: NONEQUAL
2717: IFFALSE 2727
// uc_side := 6 ;
2719: LD_ADDR_OWVAR 20
2723: PUSH
2724: LD_INT 6
2726: ST_TO_ADDR
// veh := CreateVehicle ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2737: LD_VAR 0 4
2741: PPUSH
2742: LD_INT 3
2744: PPUSH
2745: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_INT 8
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL_OW 49
// PrepareHuman ( false , Rand ( 1 , 2 ) , skill ) ;
2764: LD_INT 0
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 2
2772: PPUSH
2773: CALL_OW 12
2777: PPUSH
2778: LD_VAR 0 5
2782: PPUSH
2783: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2787: CALL_OW 44
2791: PPUSH
2792: LD_VAR 0 4
2796: PPUSH
2797: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
2801: LD_VAR 0 4
2805: PPUSH
2806: LD_INT 500
2808: PPUSH
2809: LD_INT 1000
2811: PPUSH
2812: CALL_OW 12
2816: PPUSH
2817: CALL_OW 234
// conv_squad := Insert ( conv_squad , 1 , [ veh , 1 ] ) ;
2821: LD_ADDR_EXP 1
2825: PUSH
2826: LD_EXP 1
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_VAR 0 4
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PPUSH
2846: CALL_OW 2
2850: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_INT 120
2858: PPUSH
2859: LD_INT 10
2861: PPUSH
2862: CALL_OW 111
// Wait ( 0 0$02 ) ;
2866: LD_INT 70
2868: PPUSH
2869: CALL_OW 67
// conv_ready := true ;
2873: LD_ADDR_EXP 19
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// end ; end ;
2881: GO 2884
2883: POP
// end ;
2884: LD_VAR 0 2
2888: RET
// export function AddEscort ( ) ; var veh , skill ; begin
2889: LD_INT 0
2891: PPUSH
2892: PPUSH
2893: PPUSH
// skill := [ 5 , 5 , 4 ] [ Difficulty ] ;
2894: LD_ADDR_VAR 0 3
2898: PUSH
2899: LD_INT 5
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: ST_TO_ADDR
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// vc_chassis := ru_medium_wheeled ;
2935: LD_ADDR_OWVAR 37
2939: PUSH
2940: LD_INT 21
2942: ST_TO_ADDR
// vc_engine := engine_combustion ;
2943: LD_ADDR_OWVAR 39
2947: PUSH
2948: LD_INT 1
2950: ST_TO_ADDR
// vc_control := control_manual ;
2951: LD_ADDR_OWVAR 38
2955: PUSH
2956: LD_INT 1
2958: ST_TO_ADDR
// vc_weapon := [ ru_gun , ru_heavy_machine_gun ] [ Rand ( 1 , 2 ) ] ;
2959: LD_ADDR_OWVAR 40
2963: PUSH
2964: LD_INT 44
2966: PUSH
2967: LD_INT 42
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 12
2984: ARRAY
2985: ST_TO_ADDR
// vc_fuel_battery := Rand ( 50 , 99 ) ;
2986: LD_ADDR_OWVAR 41
2990: PUSH
2991: LD_INT 50
2993: PPUSH
2994: LD_INT 99
2996: PPUSH
2997: CALL_OW 12
3001: ST_TO_ADDR
// veh := CreateVehicle ;
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: CALL_OW 45
3011: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: CALL_OW 233
// PlaceUnitArea ( veh , conv_start , false ) ;
3024: LD_VAR 0 2
3028: PPUSH
3029: LD_INT 8
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3054: CALL_OW 44
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: CALL_OW 52
// SetLives ( veh , Rand ( 500 , 1000 ) ) ;
3068: LD_VAR 0 2
3072: PPUSH
3073: LD_INT 500
3075: PPUSH
3076: LD_INT 1000
3078: PPUSH
3079: CALL_OW 12
3083: PPUSH
3084: CALL_OW 234
// escort := Insert ( escort , 1 , veh ) ;
3088: LD_ADDR_EXP 2
3092: PUSH
3093: LD_EXP 2
3097: PPUSH
3098: LD_INT 1
3100: PPUSH
3101: LD_VAR 0 2
3105: PPUSH
3106: CALL_OW 2
3110: ST_TO_ADDR
// ComMoveXY ( veh , 120 , 10 ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 120
3118: PPUSH
3119: LD_INT 10
3121: PPUSH
3122: CALL_OW 111
// end ;
3126: LD_VAR 0 1
3130: RET
// every 4 trigger conv_ready and FilterAllUnits ( [ f_side , 6 ] ) do var i , j ;
3131: LD_EXP 19
3135: IFFALSE 3153
3137: PUSH
3138: LD_INT 22
3140: PUSH
3141: LD_INT 6
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PPUSH
3148: CALL_OW 69
3152: AND
3153: IFFALSE 3936
3155: GO 3157
3157: DISABLE
3158: LD_INT 0
3160: PPUSH
3161: PPUSH
// begin enable ;
3162: ENABLE
// if conv_squad then
3163: LD_EXP 1
3167: IFFALSE 3438
// for i = conv_squad downto 1 do
3169: LD_ADDR_VAR 0 1
3173: PUSH
3174: DOUBLE
3175: LD_EXP 1
3179: INC
3180: ST_TO_ADDR
3181: LD_INT 1
3183: PUSH
3184: FOR_DOWNTO
3185: IFFALSE 3436
// begin if IsInArea ( conv_squad [ i ] [ 1 ] , conv_end ) then
3187: LD_EXP 1
3191: PUSH
3192: LD_VAR 0 1
3196: ARRAY
3197: PUSH
3198: LD_INT 1
3200: ARRAY
3201: PPUSH
3202: LD_INT 9
3204: PPUSH
3205: CALL_OW 308
3209: IFFALSE 3286
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3211: LD_ADDR_VAR 0 2
3215: PUSH
3216: LD_INT 9
3218: PPUSH
3219: LD_INT 22
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 70
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3262
// begin safeCounter := safeCounter + 1 ;
3237: LD_ADDR_EXP 15
3241: PUSH
3242: LD_EXP 15
3246: PUSH
3247: LD_INT 1
3249: PLUS
3250: ST_TO_ADDR
// RemoveUnit ( j ) ;
3251: LD_VAR 0 2
3255: PPUSH
3256: CALL_OW 64
// end ;
3260: GO 3234
3262: POP
3263: POP
// conv_squad := Delete ( conv_squad , i ) ;
3264: LD_ADDR_EXP 1
3268: PUSH
3269: LD_EXP 1
3273: PPUSH
3274: LD_VAR 0 1
3278: PPUSH
3279: CALL_OW 3
3283: ST_TO_ADDR
// break ;
3284: GO 3436
// end ; if IsInArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) then
3286: LD_EXP 1
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_EXP 6
3305: PUSH
3306: LD_EXP 1
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PUSH
3317: LD_INT 2
3319: ARRAY
3320: ARRAY
3321: PPUSH
3322: CALL_OW 308
3326: IFFALSE 3372
// conv_squad := Replace2 ( conv_squad , i , 2 , conv_squad [ i ] [ 2 ] + 1 ) else
3328: LD_ADDR_EXP 1
3332: PUSH
3333: LD_EXP 1
3337: PPUSH
3338: LD_VAR 0 1
3342: PPUSH
3343: LD_INT 2
3345: PPUSH
3346: LD_EXP 1
3350: PUSH
3351: LD_VAR 0 1
3355: ARRAY
3356: PUSH
3357: LD_INT 2
3359: ARRAY
3360: PUSH
3361: LD_INT 1
3363: PLUS
3364: PPUSH
3365: CALL 10472 0 4
3369: ST_TO_ADDR
3370: GO 3434
// if not HasTask ( conv_squad [ i ] [ 1 ] ) then
3372: LD_EXP 1
3376: PUSH
3377: LD_VAR 0 1
3381: ARRAY
3382: PUSH
3383: LD_INT 1
3385: ARRAY
3386: PPUSH
3387: CALL_OW 314
3391: NOT
3392: IFFALSE 3434
// ComMoveToArea ( conv_squad [ i ] [ 1 ] , path [ conv_squad [ i ] [ 2 ] ] ) ;
3394: LD_EXP 1
3398: PUSH
3399: LD_VAR 0 1
3403: ARRAY
3404: PUSH
3405: LD_INT 1
3407: ARRAY
3408: PPUSH
3409: LD_EXP 6
3413: PUSH
3414: LD_EXP 1
3418: PUSH
3419: LD_VAR 0 1
3423: ARRAY
3424: PUSH
3425: LD_INT 2
3427: ARRAY
3428: ARRAY
3429: PPUSH
3430: CALL_OW 113
// end ;
3434: GO 3184
3436: POP
3437: POP
// if escort then
3438: LD_EXP 2
3442: IFFALSE 3787
// for i = escort downto 1 do
3444: LD_ADDR_VAR 0 1
3448: PUSH
3449: DOUBLE
3450: LD_EXP 2
3454: INC
3455: ST_TO_ADDR
3456: LD_INT 1
3458: PUSH
3459: FOR_DOWNTO
3460: IFFALSE 3785
// begin if IsInArea ( escort [ i ] , conv_end ) then
3462: LD_EXP 2
3466: PUSH
3467: LD_VAR 0 1
3471: ARRAY
3472: PPUSH
3473: LD_INT 9
3475: PPUSH
3476: CALL_OW 308
3480: IFFALSE 3557
// begin for j in FilterUnitsInArea ( conv_end , [ f_side , 6 ] ) do
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 9
3489: PPUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 6
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 70
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3533
// begin safeCounter := safeCounter + 1 ;
3508: LD_ADDR_EXP 15
3512: PUSH
3513: LD_EXP 15
3517: PUSH
3518: LD_INT 1
3520: PLUS
3521: ST_TO_ADDR
// RemoveUnit ( j ) ;
3522: LD_VAR 0 2
3526: PPUSH
3527: CALL_OW 64
// end ;
3531: GO 3505
3533: POP
3534: POP
// escort := Delete ( escort , i ) ;
3535: LD_ADDR_EXP 2
3539: PUSH
3540: LD_EXP 2
3544: PPUSH
3545: LD_VAR 0 1
3549: PPUSH
3550: CALL_OW 3
3554: ST_TO_ADDR
// break ;
3555: GO 3785
// end ; if FindTarget ( escort [ i ] ) and GetDistUnits ( escort [ i ] , FindTarget ( escort [ i ] ) ) < 13 then
3557: LD_EXP 2
3561: PUSH
3562: LD_VAR 0 1
3566: ARRAY
3567: PPUSH
3568: CALL 10729 0 1
3572: IFFALSE 3611
3574: PUSH
3575: LD_EXP 2
3579: PUSH
3580: LD_VAR 0 1
3584: ARRAY
3585: PPUSH
3586: LD_EXP 2
3590: PUSH
3591: LD_VAR 0 1
3595: ARRAY
3596: PPUSH
3597: CALL 10729 0 1
3601: PPUSH
3602: CALL_OW 296
3606: PUSH
3607: LD_INT 13
3609: LESS
3610: AND
3611: IFFALSE 3646
// ComAttackUnit ( escort [ i ] , FindTarget ( escort [ i ] ) ) else
3613: LD_EXP 2
3617: PUSH
3618: LD_VAR 0 1
3622: ARRAY
3623: PPUSH
3624: LD_EXP 2
3628: PUSH
3629: LD_VAR 0 1
3633: ARRAY
3634: PPUSH
3635: CALL 10729 0 1
3639: PPUSH
3640: CALL_OW 115
3644: GO 3783
// if conv_squad and GetDistUnitXY ( escort [ i ] , 64 , 117 ) > 35 and not HasTask ( escort [ i ] ) then
3646: LD_EXP 1
3650: IFFALSE 3679
3652: PUSH
3653: LD_EXP 2
3657: PUSH
3658: LD_VAR 0 1
3662: ARRAY
3663: PPUSH
3664: LD_INT 64
3666: PPUSH
3667: LD_INT 117
3669: PPUSH
3670: CALL_OW 297
3674: PUSH
3675: LD_INT 35
3677: GREATER
3678: AND
3679: IFFALSE 3699
3681: PUSH
3682: LD_EXP 2
3686: PUSH
3687: LD_VAR 0 1
3691: ARRAY
3692: PPUSH
3693: CALL_OW 314
3697: NOT
3698: AND
3699: IFFALSE 3765
// begin if GetDistUnits ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) > 6 then
3701: LD_EXP 2
3705: PUSH
3706: LD_VAR 0 1
3710: ARRAY
3711: PPUSH
3712: LD_EXP 1
3716: PUSH
3717: LD_INT 1
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: PPUSH
3725: CALL_OW 296
3729: PUSH
3730: LD_INT 6
3732: GREATER
3733: IFFALSE 3763
// ComMoveUnit ( escort [ i ] , conv_squad [ 1 ] [ 1 ] ) end else
3735: LD_EXP 2
3739: PUSH
3740: LD_VAR 0 1
3744: ARRAY
3745: PPUSH
3746: LD_EXP 1
3750: PUSH
3751: LD_INT 1
3753: ARRAY
3754: PUSH
3755: LD_INT 1
3757: ARRAY
3758: PPUSH
3759: CALL_OW 112
3763: GO 3783
// ComMoveToArea ( escort [ i ] , conv_end ) ;
3765: LD_EXP 2
3769: PUSH
3770: LD_VAR 0 1
3774: ARRAY
3775: PPUSH
3776: LD_INT 9
3778: PPUSH
3779: CALL_OW 113
// end ;
3783: GO 3459
3785: POP
3786: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
3787: LD_INT 22
3789: PUSH
3790: LD_INT 6
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 21
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PPUSH
3811: CALL_OW 69
3815: IFFALSE 3936
// for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
3817: LD_ADDR_VAR 0 2
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 6
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: LD_INT 21
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PPUSH
3846: CALL_OW 69
3850: PUSH
3851: FOR_IN
3852: IFFALSE 3934
// begin if not HasTask ( j ) and not IsInArea ( j , conv_end ) then
3854: LD_VAR 0 2
3858: PPUSH
3859: CALL_OW 314
3863: NOT
3864: IFFALSE 3881
3866: PUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 9
3874: PPUSH
3875: CALL_OW 308
3879: NOT
3880: AND
3881: IFFALSE 3895
// ComMoveToArea ( j , conv_end ) ;
3883: LD_VAR 0 2
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 113
// if IsInArea ( j , conv_end ) then
3895: LD_VAR 0 2
3899: PPUSH
3900: LD_INT 9
3902: PPUSH
3903: CALL_OW 308
3907: IFFALSE 3932
// begin safeCounter := safeCounter + 1 ;
3909: LD_ADDR_EXP 15
3913: PUSH
3914: LD_EXP 15
3918: PUSH
3919: LD_INT 1
3921: PLUS
3922: ST_TO_ADDR
// RemoveUnit ( j ) ;
3923: LD_VAR 0 2
3927: PPUSH
3928: CALL_OW 64
// end ; end ;
3932: GO 3851
3934: POP
3935: POP
// end ;
3936: PPOPN 2
3938: END
// every 0 0$01 trigger UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do var i ;
3939: LD_EXP 2
3943: PUSH
3944: LD_EXP 1
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 3
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 72
3967: IFFALSE 4029
3969: GO 3971
3971: DISABLE
3972: LD_INT 0
3974: PPUSH
// begin enable ;
3975: ENABLE
// for i in UnitFilter ( [ escort , conv_squad ] , [ f_side , 3 ] ) do
3976: LD_ADDR_VAR 0 1
3980: PUSH
3981: LD_EXP 2
3985: PUSH
3986: LD_EXP 1
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: PPUSH
3995: LD_INT 22
3997: PUSH
3998: LD_INT 3
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PPUSH
4005: CALL_OW 72
4009: PUSH
4010: FOR_IN
4011: IFFALSE 4027
// SetSide ( i , 6 ) ;
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 6
4020: PPUSH
4021: CALL_OW 235
4025: GO 4010
4027: POP
4028: POP
// end ; end_of_file
4029: PPOPN 1
4031: END
// export Collins ; export us_alert , us_retreat , us_patrol , us_count ; export function PrepareAmerican ; var i , un , skill , towers ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
4036: PPUSH
4037: PPUSH
4038: PPUSH
// uc_side := 1 ;
4039: LD_ADDR_OWVAR 20
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// uc_nation := 1 ;
4047: LD_ADDR_OWVAR 21
4051: PUSH
4052: LD_INT 1
4054: ST_TO_ADDR
// us_alert := false ;
4055: LD_ADDR_EXP 21
4059: PUSH
4060: LD_INT 0
4062: ST_TO_ADDR
// us_retreat := false ;
4063: LD_ADDR_EXP 22
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// us_patrol := false ;
4071: LD_ADDR_EXP 23
4075: PUSH
4076: LD_INT 0
4078: ST_TO_ADDR
// us_count := 0 ;
4079: LD_ADDR_EXP 24
4083: PUSH
4084: LD_INT 0
4086: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: LD_INT 5
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: LD_INT 7
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: PUSH
4106: LD_OWVAR 67
4110: ARRAY
4111: ST_TO_ADDR
// hc_class := 1 ;
4112: LD_ADDR_OWVAR 28
4116: PUSH
4117: LD_INT 1
4119: ST_TO_ADDR
// hc_sex := sex_male ;
4120: LD_ADDR_OWVAR 27
4124: PUSH
4125: LD_INT 1
4127: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 2 ] ;
4128: LD_ADDR_OWVAR 31
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: LD_INT 3
4138: PUSH
4139: LD_INT 4
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: ST_TO_ADDR
// hc_name := Jack Collins ;
4151: LD_ADDR_OWVAR 26
4155: PUSH
4156: LD_STRING Jack Collins
4158: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4159: LD_ADDR_OWVAR 29
4163: PUSH
4164: LD_INT 11
4166: PUSH
4167: LD_INT 11
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: ST_TO_ADDR
// hc_gallery :=  ;
4174: LD_ADDR_OWVAR 33
4178: PUSH
4179: LD_STRING 
4181: ST_TO_ADDR
// Collins := CreateHuman ;
4182: LD_ADDR_EXP 20
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// PlaceHumanInUnit ( Collins , us_depot ) ;
4192: LD_EXP 20
4196: PPUSH
4197: LD_INT 50
4199: PPUSH
4200: CALL_OW 52
// hc_name :=  ;
4204: LD_ADDR_OWVAR 26
4208: PUSH
4209: LD_STRING 
4211: ST_TO_ADDR
// if Difficulty > 1 then
4212: LD_OWVAR 67
4216: PUSH
4217: LD_INT 1
4219: GREATER
4220: IFFALSE 4274
// begin bc_type := b_bunker ;
4222: LD_ADDR_OWVAR 42
4226: PUSH
4227: LD_INT 32
4229: ST_TO_ADDR
// bc_level := 5 ;
4230: LD_ADDR_OWVAR 43
4234: PUSH
4235: LD_INT 5
4237: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 40 , 33 , 2 ) ;
4238: LD_INT 40
4240: PPUSH
4241: LD_INT 33
4243: PPUSH
4244: LD_INT 2
4246: PPUSH
4247: CALL_OW 47
// if Difficulty > 2 then
4251: LD_OWVAR 67
4255: PUSH
4256: LD_INT 2
4258: GREATER
4259: IFFALSE 4274
// CreateAndPlaceBuildingXYD ( 41 , 42 , 0 ) ;
4261: LD_INT 41
4263: PPUSH
4264: LD_INT 42
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 47
// end ; PrepareHuman ( false , 2 , skill ) ;
4274: LD_INT 0
4276: PPUSH
4277: LD_INT 2
4279: PPUSH
4280: LD_VAR 0 4
4284: PPUSH
4285: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4289: CALL_OW 44
4293: PPUSH
4294: LD_INT 50
4296: PPUSH
4297: CALL_OW 52
// PrepareHuman ( false , 3 , skill ) ;
4301: LD_INT 0
4303: PPUSH
4304: LD_INT 3
4306: PPUSH
4307: LD_VAR 0 4
4311: PPUSH
4312: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4316: CALL_OW 44
4320: PPUSH
4321: LD_INT 56
4323: PPUSH
4324: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4328: CALL_OW 44
4332: PPUSH
4333: LD_INT 56
4335: PPUSH
4336: CALL_OW 52
// PrepareHuman ( false , 4 , skill ) ;
4340: LD_INT 0
4342: PPUSH
4343: LD_INT 4
4345: PPUSH
4346: LD_VAR 0 4
4350: PPUSH
4351: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4355: CALL_OW 44
4359: PPUSH
4360: LD_INT 63
4362: PPUSH
4363: CALL_OW 52
// PrepareHuman ( false , 1 , skill ) ;
4367: LD_INT 0
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_VAR 0 4
4377: PPUSH
4378: CALL_OW 380
// un := CreateHuman ;
4382: LD_ADDR_VAR 0 3
4386: PUSH
4387: CALL_OW 44
4391: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4392: LD_VAR 0 3
4396: PPUSH
4397: LD_INT 4
4399: PPUSH
4400: CALL_OW 233
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) [ 1 ] ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 1
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 30
4421: PUSH
4422: LD_INT 31
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 69
4437: PUSH
4438: LD_INT 1
4440: ARRAY
4441: PPUSH
4442: CALL_OW 52
// towers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_INT 22
4453: PUSH
4454: LD_INT 1
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 30
4463: PUSH
4464: LD_INT 32
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PPUSH
4475: CALL_OW 69
4479: ST_TO_ADDR
// for i in towers do
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_VAR 0 5
4489: PUSH
4490: FOR_IN
4491: IFFALSE 4559
// begin PrepareHuman ( false , 1 , skill ) ;
4493: LD_INT 0
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: LD_VAR 0 4
4503: PPUSH
4504: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4508: CALL_OW 44
4512: PPUSH
4513: LD_VAR 0 2
4517: PPUSH
4518: CALL_OW 52
// PlaceWeaponTurret ( i , [ us_gatling_gun , us_light_gun , us_double_gun ] [ Rand ( 1 , 3 ) ] ) ;
4522: LD_VAR 0 2
4526: PPUSH
4527: LD_INT 4
4529: PUSH
4530: LD_INT 3
4532: PUSH
4533: LD_INT 5
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 1
4543: PPUSH
4544: LD_INT 3
4546: PPUSH
4547: CALL_OW 12
4551: ARRAY
4552: PPUSH
4553: CALL_OW 431
// end ;
4557: GO 4490
4559: POP
4560: POP
// PrepareHuman ( false , 1 , skill ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: CALL_OW 380
// us_patrol := CreateHuman ;
4576: LD_ADDR_EXP 23
4580: PUSH
4581: CALL_OW 44
4585: ST_TO_ADDR
// PlaceUnitXY ( us_patrol , 12 , 5 , false ) ;
4586: LD_EXP 23
4590: PPUSH
4591: LD_INT 12
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: LD_INT 0
4599: PPUSH
4600: CALL_OW 48
// end ;
4604: LD_VAR 0 1
4608: RET
// every 0 0$01 trigger us_count >= [ 3 , 4 , 5 ] [ Difficulty ] do
4609: LD_EXP 24
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 5
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: LD_OWVAR 67
4632: ARRAY
4633: GREATEREQUAL
4634: IFFALSE 4659
4636: GO 4638
4638: DISABLE
// begin Say ( Collins , DPM_C2 ) ;
4639: LD_EXP 20
4643: PPUSH
4644: LD_STRING DPM_C2
4646: PPUSH
4647: CALL_OW 88
// us_retreat := true ;
4651: LD_ADDR_EXP 22
4655: PUSH
4656: LD_INT 1
4658: ST_TO_ADDR
// end ;
4659: END
// every 10 10$00 trigger not us_alert do var R ;
4660: LD_EXP 21
4664: NOT
4665: IFFALSE 4739
4667: GO 4669
4669: DISABLE
4670: LD_INT 0
4672: PPUSH
// begin uc_side := 1 ;
4673: LD_ADDR_OWVAR 20
4677: PUSH
4678: LD_INT 1
4680: ST_TO_ADDR
// uc_nation := 1 ;
4681: LD_ADDR_OWVAR 21
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// PrepareHuman ( false , 1 , 0 ) ;
4689: LD_INT 0
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_INT 0
4697: PPUSH
4698: CALL_OW 380
// R := CreateHuman ;
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: CALL_OW 44
4711: ST_TO_ADDR
// SayRadio ( R , DPM_R1 ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_STRING DPM_R1
4719: PPUSH
4720: CALL_OW 94
// Wait ( 0 0$03 ) ;
4724: LD_INT 105
4726: PPUSH
4727: CALL_OW 67
// us_retreat := true ;
4731: LD_ADDR_EXP 22
4735: PUSH
4736: LD_INT 1
4738: ST_TO_ADDR
// end ;
4739: PPOPN 1
4741: END
// every 0 0$01 trigger us_alert do var i ;
4742: LD_EXP 21
4746: IFFALSE 5006
4748: GO 4750
4750: DISABLE
4751: LD_INT 0
4753: PPUSH
// begin Say ( Collins , DPM_C1 ) ;
4754: LD_EXP 20
4758: PPUSH
4759: LD_STRING DPM_C1
4761: PPUSH
4762: CALL_OW 88
// if UnitsInside ( us_fac ) then
4766: LD_INT 56
4768: PPUSH
4769: CALL_OW 313
4773: IFFALSE 4828
// for i in UnitsInside ( us_fac ) do
4775: LD_ADDR_VAR 0 1
4779: PUSH
4780: LD_INT 56
4782: PPUSH
4783: CALL_OW 313
4787: PUSH
4788: FOR_IN
4789: IFFALSE 4826
// begin ComExitBuilding ( i ) ;
4791: LD_VAR 0 1
4795: PPUSH
4796: CALL_OW 122
// AddComEnterUnit ( i , us_arm ) ;
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 69
4807: PPUSH
4808: CALL_OW 180
// AddComChangeProfession ( i , 1 ) ;
4812: LD_VAR 0 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 183
// end ;
4824: GO 4788
4826: POP
4827: POP
// ComExitBuilding ( Collins ) ;
4828: LD_EXP 20
4832: PPUSH
4833: CALL_OW 122
// AddComEnterUnit ( Collins , us_arm ) ;
4837: LD_EXP 20
4841: PPUSH
4842: LD_INT 69
4844: PPUSH
4845: CALL_OW 180
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] ) ;
4849: LD_INT 22
4851: PUSH
4852: LD_INT 1
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 25
4861: PUSH
4862: LD_INT 2
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PPUSH
4882: CALL_OW 122
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) [ 1 ] , 67 , 52 ) ;
4886: LD_INT 22
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 25
4898: PUSH
4899: LD_INT 2
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL_OW 69
4914: PUSH
4915: LD_INT 1
4917: ARRAY
4918: PPUSH
4919: LD_INT 67
4921: PPUSH
4922: LD_INT 52
4924: PPUSH
4925: CALL_OW 171
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ) ;
4929: LD_INT 22
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 25
4941: PUSH
4942: LD_INT 4
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: PPUSH
4962: CALL_OW 122
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] , us_arm ) ;
4966: LD_INT 22
4968: PUSH
4969: LD_INT 1
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 25
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PPUSH
4990: CALL_OW 69
4994: PUSH
4995: LD_INT 1
4997: ARRAY
4998: PPUSH
4999: LD_INT 69
5001: PPUSH
5002: CALL_OW 180
// end ;
5006: PPOPN 1
5008: END
// every 3 3$00 trigger not us_alert and GetSide ( us_fac ) = 1 do
5009: LD_EXP 21
5013: NOT
5014: IFFALSE 5029
5016: PUSH
5017: LD_INT 56
5019: PPUSH
5020: CALL_OW 255
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: AND
5029: IFFALSE 5072
5031: GO 5033
5033: DISABLE
// begin AddComConstruct ( us_fac , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ) ;
5034: LD_INT 56
5036: PPUSH
5037: LD_INT 2
5039: PPUSH
5040: LD_INT 1
5042: PPUSH
5043: LD_INT 1
5045: PPUSH
5046: LD_INT 4
5048: PPUSH
5049: CALL_OW 185
// AddComConstruct ( us_fac , us_medium_tracked , engine_solar , control_manual , us_double_gun ) ;
5053: LD_INT 56
5055: PPUSH
5056: LD_INT 3
5058: PPUSH
5059: LD_INT 2
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: LD_INT 5
5067: PPUSH
5068: CALL_OW 185
// end ;
5072: END
// every 0 0$01 trigger us_patrol do
5073: LD_EXP 23
5077: IFFALSE 5125
5079: GO 5081
5081: DISABLE
// SetPatrol ( us_patrol , [ 12 , 5 , 56 , 4 , 94 , 34 , 92 , 108 ] ) ;
5082: LD_EXP 23
5086: PPUSH
5087: LD_INT 12
5089: PUSH
5090: LD_INT 5
5092: PUSH
5093: LD_INT 56
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: LD_INT 94
5101: PUSH
5102: LD_INT 34
5104: PUSH
5105: LD_INT 92
5107: PUSH
5108: LD_INT 108
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: PPUSH
5121: CALL 5126 0 2
5125: END
// export function SetPatrol ( un , points ) ; var s , i , turn ; begin
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
5130: PPUSH
5131: PPUSH
// s = 1 ;
5132: LD_ADDR_VAR 0 4
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// turn := true ;
5140: LD_ADDR_VAR 0 6
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// while ( un and not us_alert ) do
5148: LD_VAR 0 1
5152: IFFALSE 5161
5154: PUSH
5155: LD_EXP 21
5159: NOT
5160: AND
5161: IFFALSE 5342
// begin wait ( 35 ) ;
5163: LD_INT 35
5165: PPUSH
5166: CALL_OW 67
// if not HasTask ( un ) then
5170: LD_VAR 0 1
5174: PPUSH
5175: CALL_OW 314
5179: NOT
5180: IFFALSE 5299
// begin ComMoveXY ( un , points [ s ] , points [ s + 1 ] ) ;
5182: LD_VAR 0 1
5186: PPUSH
5187: LD_VAR 0 2
5191: PUSH
5192: LD_VAR 0 4
5196: ARRAY
5197: PPUSH
5198: LD_VAR 0 2
5202: PUSH
5203: LD_VAR 0 4
5207: PUSH
5208: LD_INT 1
5210: PLUS
5211: ARRAY
5212: PPUSH
5213: CALL_OW 111
// if s + 2 > points then
5217: LD_VAR 0 4
5221: PUSH
5222: LD_INT 2
5224: PLUS
5225: PUSH
5226: LD_VAR 0 2
5230: GREATER
5231: IFFALSE 5241
// turn := false ;
5233: LD_ADDR_VAR 0 6
5237: PUSH
5238: LD_INT 0
5240: ST_TO_ADDR
// if s - 2 < 1 then
5241: LD_VAR 0 4
5245: PUSH
5246: LD_INT 2
5248: MINUS
5249: PUSH
5250: LD_INT 1
5252: LESS
5253: IFFALSE 5263
// turn := true ;
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// if turn then
5263: LD_VAR 0 6
5267: IFFALSE 5285
// s := s + 2 else
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: LD_VAR 0 4
5278: PUSH
5279: LD_INT 2
5281: PLUS
5282: ST_TO_ADDR
5283: GO 5299
// s := s - 2 ;
5285: LD_ADDR_VAR 0 4
5289: PUSH
5290: LD_VAR 0 4
5294: PUSH
5295: LD_INT 2
5297: MINUS
5298: ST_TO_ADDR
// end ; if GetLives ( un ) < 1000 or See ( 3 , un ) then
5299: LD_VAR 0 1
5303: PPUSH
5304: CALL_OW 256
5308: PUSH
5309: LD_INT 1000
5311: LESS
5312: IFTRUE 5328
5314: PUSH
5315: LD_INT 3
5317: PPUSH
5318: LD_VAR 0 1
5322: PPUSH
5323: CALL_OW 292
5327: OR
5328: IFFALSE 5340
// begin us_alert := true ;
5330: LD_ADDR_EXP 21
5334: PUSH
5335: LD_INT 1
5337: ST_TO_ADDR
// break ;
5338: GO 5342
// end ; end ;
5340: GO 5148
// ComEnterUnit ( un , us_arm ) ;
5342: LD_VAR 0 1
5346: PPUSH
5347: LD_INT 69
5349: PPUSH
5350: CALL_OW 120
// end ;
5354: LD_VAR 0 3
5358: RET
// every 0 0$01 trigger us_retreat do var i , point ;
5359: LD_EXP 22
5363: IFFALSE 5538
5365: GO 5367
5367: DISABLE
5368: LD_INT 0
5370: PPUSH
5371: PPUSH
// begin point := false ;
5372: LD_ADDR_VAR 0 2
5376: PUSH
5377: LD_INT 0
5379: ST_TO_ADDR
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5380: LD_INT 5
5382: PPUSH
5383: LD_INT 22
5385: PUSH
5386: LD_INT 3
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PPUSH
5393: CALL_OW 70
5397: PUSH
5398: LD_INT 0
5400: EQUAL
5401: IFFALSE 5413
// point := us_ret1 else
5403: LD_ADDR_VAR 0 2
5407: PUSH
5408: LD_INT 3
5410: ST_TO_ADDR
5411: GO 5454
// if FilterUnitsInArea ( zone1 , [ f_side , 3 ] ) = 0 then
5413: LD_INT 5
5415: PPUSH
5416: LD_INT 22
5418: PUSH
5419: LD_INT 3
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: PPUSH
5426: CALL_OW 70
5430: PUSH
5431: LD_INT 0
5433: EQUAL
5434: IFFALSE 5446
// point := us_ret2 else
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_INT 2
5443: ST_TO_ADDR
5444: GO 5454
// point := us_ret3 ;
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: LD_INT 4
5453: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5454: LD_ADDR_VAR 0 1
5458: PUSH
5459: LD_INT 22
5461: PUSH
5462: LD_INT 1
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 21
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 69
5487: PUSH
5488: FOR_IN
5489: IFFALSE 5536
// begin if IsInUnit ( i ) then
5491: LD_VAR 0 1
5495: PPUSH
5496: CALL_OW 310
5500: IFFALSE 5520
// begin ComExitBuilding ( i ) ;
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 122
// ComExitVehicle ( i ) ;
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 121
// end ; AddComMoveToArea ( i , point ) ;
5520: LD_VAR 0 1
5524: PPUSH
5525: LD_VAR 0 2
5529: PPUSH
5530: CALL_OW 173
// end ;
5534: GO 5488
5536: POP
5537: POP
// end ;
5538: PPOPN 2
5540: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) do
5541: LD_EXP 22
5545: IFFALSE 5566
5547: PUSH
5548: LD_INT 3
5550: PPUSH
5551: LD_INT 22
5553: PUSH
5554: LD_INT 1
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 70
5565: AND
5566: IFFALSE 5612
5568: GO 5570
5570: DISABLE
// begin enable ;
5571: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret1 , [ f_side , 1 ] ) [ 1 ] ) ;
5572: LD_INT 3
5574: PPUSH
5575: LD_INT 22
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PPUSH
5585: CALL_OW 70
5589: PUSH
5590: LD_INT 1
5592: ARRAY
5593: PPUSH
5594: CALL_OW 64
// if medal1 then
5598: LD_EXP 3
5602: IFFALSE 5612
// medal1 := false ;
5604: LD_ADDR_EXP 3
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// end ;
5612: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) do
5613: LD_EXP 22
5617: IFFALSE 5638
5619: PUSH
5620: LD_INT 2
5622: PPUSH
5623: LD_INT 22
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PPUSH
5633: CALL_OW 70
5637: AND
5638: IFFALSE 5684
5640: GO 5642
5642: DISABLE
// begin enable ;
5643: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret2 , [ f_side , 1 ] ) [ 1 ] ) ;
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: PUSH
5662: LD_INT 1
5664: ARRAY
5665: PPUSH
5666: CALL_OW 64
// if medal1 then
5670: LD_EXP 3
5674: IFFALSE 5684
// medal1 := false ;
5676: LD_ADDR_EXP 3
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// end ;
5684: END
// every 10 trigger us_retreat and FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) do
5685: LD_EXP 22
5689: IFFALSE 5710
5691: PUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: AND
5710: IFFALSE 5756
5712: GO 5714
5714: DISABLE
// begin enable ;
5715: ENABLE
// RemoveUnit ( FilterUnitsInArea ( us_ret3 , [ f_side , 1 ] ) [ 1 ] ) ;
5716: LD_INT 4
5718: PPUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 70
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PPUSH
5738: CALL_OW 64
// if medal1 then
5742: LD_EXP 3
5746: IFFALSE 5756
// medal1 := false ;
5748: LD_ADDR_EXP 3
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// end ;
5756: END
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 1 ] ) = 0 do
5757: LD_INT 22
5759: PUSH
5760: LD_INT 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PUSH
5772: LD_INT 0
5774: EQUAL
5775: IFFALSE 5788
5777: GO 5779
5779: DISABLE
// us_retreat := false ;
5780: LD_ADDR_EXP 22
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
5788: END
// export function CounterAttack ; var i , j , un , skill ; begin
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
// uc_side := 1 ;
5796: LD_ADDR_OWVAR 20
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// uc_nation := 1 ;
5804: LD_ADDR_OWVAR 21
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// skill := [ 4 , 5 , 5 ] [ Difficulty ] ;
5812: LD_ADDR_VAR 0 5
5816: PUSH
5817: LD_INT 4
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: LD_INT 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_OWVAR 67
5835: ARRAY
5836: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 4
5849: PUSH
5850: LD_INT 5
5852: PUSH
5853: LD_INT 6
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 67
5865: ARRAY
5866: PUSH
5867: FOR_TO
5868: IFFALSE 6084
// begin uc_side := 1 ;
5870: LD_ADDR_OWVAR 20
5874: PUSH
5875: LD_INT 1
5877: ST_TO_ADDR
// uc_nation := 1 ;
5878: LD_ADDR_OWVAR 21
5882: PUSH
5883: LD_INT 1
5885: ST_TO_ADDR
// vc_chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ Rand ( 1 , 3 ) ] ;
5886: LD_ADDR_OWVAR 37
5890: PUSH
5891: LD_INT 2
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 1
5907: PPUSH
5908: LD_INT 3
5910: PPUSH
5911: CALL_OW 12
5915: ARRAY
5916: ST_TO_ADDR
// vc_engine := engine_combustion ;
5917: LD_ADDR_OWVAR 39
5921: PUSH
5922: LD_INT 1
5924: ST_TO_ADDR
// vc_control := control_manual ;
5925: LD_ADDR_OWVAR 38
5929: PUSH
5930: LD_INT 1
5932: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5933: LD_ADDR_OWVAR 40
5937: PUSH
5938: LD_INT 4
5940: PUSH
5941: LD_INT 5
5943: PUSH
5944: LD_INT 3
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL_OW 12
5962: ARRAY
5963: ST_TO_ADDR
// vc_fuel_battery := Rand ( 88 , 99 ) ;
5964: LD_ADDR_OWVAR 41
5968: PUSH
5969: LD_INT 88
5971: PPUSH
5972: LD_INT 99
5974: PPUSH
5975: CALL_OW 12
5979: ST_TO_ADDR
// un := CreateVehicle ;
5980: LD_ADDR_VAR 0 4
5984: PUSH
5985: CALL_OW 45
5989: ST_TO_ADDR
// PlaceUnitXY ( un , 64 , 117 , false ) ;
5990: LD_VAR 0 4
5994: PPUSH
5995: LD_INT 64
5997: PPUSH
5998: LD_INT 117
6000: PPUSH
6001: LD_INT 0
6003: PPUSH
6004: CALL_OW 48
// PrepareHuman ( false , 3 , skill ) ;
6008: LD_INT 0
6010: PPUSH
6011: LD_INT 3
6013: PPUSH
6014: LD_VAR 0 5
6018: PPUSH
6019: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6023: CALL_OW 44
6027: PPUSH
6028: LD_VAR 0 4
6032: PPUSH
6033: CALL_OW 52
// us_force := Insert ( us_force , 1 , un ) ;
6037: LD_ADDR_EXP 12
6041: PUSH
6042: LD_EXP 12
6046: PPUSH
6047: LD_INT 1
6049: PPUSH
6050: LD_VAR 0 4
6054: PPUSH
6055: CALL_OW 2
6059: ST_TO_ADDR
// ComMoveXY ( un , 60 , 109 ) ;
6060: LD_VAR 0 4
6064: PPUSH
6065: LD_INT 60
6067: PPUSH
6068: LD_INT 109
6070: PPUSH
6071: CALL_OW 111
// Wait ( 0 0$02 ) ;
6075: LD_INT 70
6077: PPUSH
6078: CALL_OW 67
// end ;
6082: GO 5867
6084: POP
6085: POP
// RemoveSeeing ( 62 , 113 , 3 ) ;
6086: LD_INT 62
6088: PPUSH
6089: LD_INT 113
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 331
// while ( FilterAllUnits ( [ f_side , 1 ] ) ) do
6099: LD_INT 22
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 69
6113: IFFALSE 6314
// begin Wait ( 0 0$01 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i = 1 to us_force do
6122: LD_ADDR_VAR 0 2
6126: PUSH
6127: DOUBLE
6128: LD_INT 1
6130: DEC
6131: ST_TO_ADDR
6132: LD_EXP 12
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6173
// ComAttackUnit ( us_force [ i ] , FindTarget ( us_force [ i ] ) ) ;
6140: LD_EXP 12
6144: PUSH
6145: LD_VAR 0 2
6149: ARRAY
6150: PPUSH
6151: LD_EXP 12
6155: PUSH
6156: LD_VAR 0 2
6160: ARRAY
6161: PPUSH
6162: CALL 10729 0 1
6166: PPUSH
6167: CALL_OW 115
6171: GO 6137
6173: POP
6174: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) then
6175: LD_INT 22
6177: PUSH
6178: LD_INT 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 25
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 55
6200: PUSH
6201: EMPTY
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: IFFALSE 6312
// for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) do
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 3
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 55
6249: PUSH
6250: EMPTY
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: PUSH
6267: FOR_IN
6268: IFFALSE 6310
// if not IsInArea ( j , conv_end ) then
6270: LD_VAR 0 3
6274: PPUSH
6275: LD_INT 9
6277: PPUSH
6278: CALL_OW 308
6282: NOT
6283: IFFALSE 6299
// ComMoveToArea ( j , conv_end ) else
6285: LD_VAR 0 3
6289: PPUSH
6290: LD_INT 9
6292: PPUSH
6293: CALL_OW 113
6297: GO 6308
// RemoveUnit ( j ) ;
6299: LD_VAR 0 3
6303: PPUSH
6304: CALL_OW 64
6308: GO 6267
6310: POP
6311: POP
// end ;
6312: GO 6099
// end ; end_of_file
6314: LD_VAR 0 1
6318: RET
// export function PrepareArabian ; begin
6319: LD_INT 0
6321: PPUSH
// RobertFarmer ;
6322: CALL 6343 0 0
// PrepareHovercrafts ;
6326: CALL 7340 0 0
// ar_attacks := true ;
6330: LD_ADDR_EXP 10
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// end ;
6338: LD_VAR 0 1
6342: RET
// export Farmer ; export function RobertFarmer ; begin
6343: LD_INT 0
6345: PPUSH
// uc_side := 2 ;
6346: LD_ADDR_OWVAR 20
6350: PUSH
6351: LD_INT 2
6353: ST_TO_ADDR
// uc_nation := 2 ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 2
6361: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
6362: LD_ADDR_EXP 25
6366: PUSH
6367: LD_STRING Farmer
6369: PPUSH
6370: CALL_OW 25
6374: ST_TO_ADDR
// SayRadio ( Farmer , DPM_F1 ) ;
6375: LD_EXP 25
6379: PPUSH
6380: LD_STRING DPM_F1
6382: PPUSH
6383: CALL_OW 94
// end ;
6387: LD_VAR 0 1
6391: RET
// export function PrepareAttack ( type ) ; var i , un , veh , skill ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
// uc_side := 2 ;
6399: LD_ADDR_OWVAR 20
6403: PUSH
6404: LD_INT 2
6406: ST_TO_ADDR
// uc_nation := 2 ;
6407: LD_ADDR_OWVAR 21
6411: PUSH
6412: LD_INT 2
6414: ST_TO_ADDR
// skill := [ 4 , 6 , 7 ] [ Difficulty ] ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: LD_INT 4
6422: PUSH
6423: LD_INT 6
6425: PUSH
6426: LD_INT 7
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: PUSH
6434: LD_OWVAR 67
6438: ARRAY
6439: ST_TO_ADDR
// Randomize ;
6440: CALL_OW 10
// case type of 1 :
6444: LD_VAR 0 1
6448: PUSH
6449: LD_INT 1
6451: DOUBLE
6452: EQUAL
6453: IFTRUE 6457
6455: GO 6595
6457: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: DOUBLE
6464: LD_INT 1
6466: DEC
6467: ST_TO_ADDR
6468: LD_INT 3
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: LD_OWVAR 67
6486: ARRAY
6487: PUSH
6488: FOR_TO
6489: IFFALSE 6591
// begin uc_side := 2 ;
6491: LD_ADDR_OWVAR 20
6495: PUSH
6496: LD_INT 2
6498: ST_TO_ADDR
// uc_nation := 2 ;
6499: LD_ADDR_OWVAR 21
6503: PUSH
6504: LD_INT 2
6506: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_soldier , class_mortar ] [ Rand ( 1 , 3 ) ] , skill ) ;
6507: LD_INT 0
6509: PPUSH
6510: LD_INT 1
6512: PUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 8
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 1
6526: PPUSH
6527: LD_INT 3
6529: PPUSH
6530: CALL_OW 12
6534: ARRAY
6535: PPUSH
6536: LD_VAR 0 6
6540: PPUSH
6541: CALL_OW 380
// un := CreateHuman ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: CALL_OW 44
6554: ST_TO_ADDR
// PlaceUnitArea ( un , ar3 , false ) ;
6555: LD_VAR 0 4
6559: PPUSH
6560: LD_INT 18
6562: PPUSH
6563: LD_INT 0
6565: PPUSH
6566: CALL_OW 49
// ComMoveToArea ( un , spot3 ) ;
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_INT 20
6577: PPUSH
6578: CALL_OW 113
// Wait ( 0 0$01 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// end ;
6589: GO 6488
6591: POP
6592: POP
// end ; 2 :
6593: GO 7335
6595: LD_INT 2
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6929
6603: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6604: LD_ADDR_VAR 0 3
6608: PUSH
6609: DOUBLE
6610: LD_INT 1
6612: DEC
6613: ST_TO_ADDR
6614: LD_INT 4
6616: PUSH
6617: LD_INT 5
6619: PUSH
6620: LD_INT 6
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: PUSH
6628: LD_OWVAR 67
6632: ARRAY
6633: PUSH
6634: FOR_TO
6635: IFFALSE 6714
// begin uc_side := 2 ;
6637: LD_ADDR_OWVAR 20
6641: PUSH
6642: LD_INT 2
6644: ST_TO_ADDR
// uc_nation := 2 ;
6645: LD_ADDR_OWVAR 21
6649: PUSH
6650: LD_INT 2
6652: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , skill ) ;
6653: LD_INT 0
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_VAR 0 6
6663: PPUSH
6664: CALL_OW 380
// un := CreateHuman ;
6668: LD_ADDR_VAR 0 4
6672: PUSH
6673: CALL_OW 44
6677: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
6678: LD_VAR 0 4
6682: PPUSH
6683: LD_INT 17
6685: PPUSH
6686: LD_INT 0
6688: PPUSH
6689: CALL_OW 49
// ComMoveToArea ( un , spot2 ) ;
6693: LD_VAR 0 4
6697: PPUSH
6698: LD_INT 19
6700: PPUSH
6701: CALL_OW 113
// Wait ( 0 0$01 ) ;
6705: LD_INT 35
6707: PPUSH
6708: CALL_OW 67
// end ;
6712: GO 6634
6714: POP
6715: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
6716: LD_ADDR_VAR 0 3
6720: PUSH
6721: DOUBLE
6722: LD_INT 1
6724: DEC
6725: ST_TO_ADDR
6726: LD_INT 2
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: PUSH
6740: LD_OWVAR 67
6744: ARRAY
6745: PUSH
6746: FOR_TO
6747: IFFALSE 6925
// begin uc_side := 2 ;
6749: LD_ADDR_OWVAR 20
6753: PUSH
6754: LD_INT 2
6756: ST_TO_ADDR
// uc_nation := 2 ;
6757: LD_ADDR_OWVAR 21
6761: PUSH
6762: LD_INT 2
6764: ST_TO_ADDR
// vc_chassis := [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] ;
6765: LD_ADDR_OWVAR 37
6769: PUSH
6770: LD_INT 13
6772: PUSH
6773: LD_INT 14
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 1
6782: PPUSH
6783: LD_INT 2
6785: PPUSH
6786: CALL_OW 12
6790: ARRAY
6791: ST_TO_ADDR
// vc_engine := engine_combustion ;
6792: LD_ADDR_OWVAR 39
6796: PUSH
6797: LD_INT 1
6799: ST_TO_ADDR
// vc_control := control_manual ;
6800: LD_ADDR_OWVAR 38
6804: PUSH
6805: LD_INT 1
6807: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_light_gun , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ Rand ( 1 , 5 ) ] ;
6808: LD_ADDR_OWVAR 40
6812: PUSH
6813: LD_INT 24
6815: PUSH
6816: LD_INT 23
6818: PUSH
6819: LD_INT 27
6821: PUSH
6822: LD_INT 28
6824: PUSH
6825: LD_INT 25
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_INT 5
6840: PPUSH
6841: CALL_OW 12
6845: ARRAY
6846: ST_TO_ADDR
// veh := CreateVehicle ;
6847: LD_ADDR_VAR 0 5
6851: PUSH
6852: CALL_OW 45
6856: ST_TO_ADDR
// PlaceUnitArea ( veh , ar2 , false ) ;
6857: LD_VAR 0 5
6861: PPUSH
6862: LD_INT 17
6864: PPUSH
6865: LD_INT 0
6867: PPUSH
6868: CALL_OW 49
// PrepareHuman ( false , 1 , skill ) ;
6872: LD_INT 0
6874: PPUSH
6875: LD_INT 1
6877: PPUSH
6878: LD_VAR 0 6
6882: PPUSH
6883: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6887: CALL_OW 44
6891: PPUSH
6892: LD_VAR 0 5
6896: PPUSH
6897: CALL_OW 52
// ComMoveXY ( veh , 89 , 40 ) ;
6901: LD_VAR 0 5
6905: PPUSH
6906: LD_INT 89
6908: PPUSH
6909: LD_INT 40
6911: PPUSH
6912: CALL_OW 111
// Wait ( 0 0$02 ) ;
6916: LD_INT 70
6918: PPUSH
6919: CALL_OW 67
// end ;
6923: GO 6746
6925: POP
6926: POP
// end ; 3 :
6927: GO 7335
6929: LD_INT 3
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 7334
6937: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] + ( tick div 15 15$00 ) do
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: DOUBLE
6944: LD_INT 1
6946: DEC
6947: ST_TO_ADDR
6948: LD_INT 3
6950: PUSH
6951: LD_INT 4
6953: PUSH
6954: LD_INT 5
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_OWVAR 67
6966: ARRAY
6967: PUSH
6968: LD_OWVAR 1
6972: PUSH
6973: LD_INT 31500
6975: DIV
6976: PLUS
6977: PUSH
6978: FOR_TO
6979: IFFALSE 7109
// begin uc_side := 2 ;
6981: LD_ADDR_OWVAR 20
6985: PUSH
6986: LD_INT 2
6988: ST_TO_ADDR
// uc_nation := 2 ;
6989: LD_ADDR_OWVAR 21
6993: PUSH
6994: LD_INT 2
6996: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_mortar ] [ Rand ( 1 , 2 ) ] , skill ) ;
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 1
7002: PUSH
7003: LD_INT 8
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 1
7012: PPUSH
7013: LD_INT 2
7015: PPUSH
7016: CALL_OW 12
7020: ARRAY
7021: PPUSH
7022: LD_VAR 0 6
7026: PPUSH
7027: CALL_OW 380
// un := CreateHuman ;
7031: LD_ADDR_VAR 0 4
7035: PUSH
7036: CALL_OW 44
7040: ST_TO_ADDR
// PlaceUnitArea ( un , ar2 , false ) ;
7041: LD_VAR 0 4
7045: PPUSH
7046: LD_INT 17
7048: PPUSH
7049: LD_INT 0
7051: PPUSH
7052: CALL_OW 49
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7056: LD_ADDR_EXP 11
7060: PUSH
7061: LD_EXP 11
7065: PPUSH
7066: LD_EXP 11
7070: PUSH
7071: LD_INT 1
7073: PLUS
7074: PPUSH
7075: LD_VAR 0 5
7079: PPUSH
7080: CALL_OW 1
7084: ST_TO_ADDR
// ComMoveXY ( un , 17 , 9 ) ;
7085: LD_VAR 0 4
7089: PPUSH
7090: LD_INT 17
7092: PPUSH
7093: LD_INT 9
7095: PPUSH
7096: CALL_OW 111
// Wait ( 0 0$01 ) ;
7100: LD_INT 35
7102: PPUSH
7103: CALL_OW 67
// end ;
7107: GO 6978
7109: POP
7110: POP
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: DOUBLE
7117: LD_INT 1
7119: DEC
7120: ST_TO_ADDR
7121: LD_INT 4
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 6
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: PUSH
7135: LD_OWVAR 67
7139: ARRAY
7140: PUSH
7141: FOR_TO
7142: IFFALSE 7330
// begin uc_side := 2 ;
7144: LD_ADDR_OWVAR 20
7148: PUSH
7149: LD_INT 2
7151: ST_TO_ADDR
// uc_nation := 2 ;
7152: LD_ADDR_OWVAR 21
7156: PUSH
7157: LD_INT 2
7159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
7160: LD_ADDR_OWVAR 37
7164: PUSH
7165: LD_INT 14
7167: ST_TO_ADDR
// vc_engine := engine_combustion ;
7168: LD_ADDR_OWVAR 39
7172: PUSH
7173: LD_INT 1
7175: ST_TO_ADDR
// vc_control := control_manual ;
7176: LD_ADDR_OWVAR 38
7180: PUSH
7181: LD_INT 1
7183: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_mortar ] [ Rand ( 1 , 5 ) ] ;
7184: LD_ADDR_OWVAR 40
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 27
7194: PUSH
7195: LD_INT 28
7197: PUSH
7198: LD_INT 26
7200: PUSH
7201: LD_INT 92
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 1
7213: PPUSH
7214: LD_INT 5
7216: PPUSH
7217: CALL_OW 12
7221: ARRAY
7222: ST_TO_ADDR
// veh := CreateVehicle ;
7223: LD_ADDR_VAR 0 5
7227: PUSH
7228: CALL_OW 45
7232: ST_TO_ADDR
// PlaceUnitArea ( veh , ar1 , false ) ;
7233: LD_VAR 0 5
7237: PPUSH
7238: LD_INT 16
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
7248: LD_INT 0
7250: PPUSH
7251: LD_INT 3
7253: PPUSH
7254: LD_VAR 0 6
7258: PPUSH
7259: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
7263: CALL_OW 44
7267: PPUSH
7268: LD_VAR 0 5
7272: PPUSH
7273: CALL_OW 52
// ar_force := Replace ( ar_force , ar_force + 1 , veh ) ;
7277: LD_ADDR_EXP 11
7281: PUSH
7282: LD_EXP 11
7286: PPUSH
7287: LD_EXP 11
7291: PUSH
7292: LD_INT 1
7294: PLUS
7295: PPUSH
7296: LD_VAR 0 5
7300: PPUSH
7301: CALL_OW 1
7305: ST_TO_ADDR
// ComMoveXY ( veh , 125 , 31 ) ;
7306: LD_VAR 0 5
7310: PPUSH
7311: LD_INT 125
7313: PPUSH
7314: LD_INT 31
7316: PPUSH
7317: CALL_OW 111
// Wait ( 0 0$02 ) ;
7321: LD_INT 70
7323: PPUSH
7324: CALL_OW 67
// end ;
7328: GO 7141
7330: POP
7331: POP
// end ; end ;
7332: GO 7335
7334: POP
// end ;
7335: LD_VAR 0 2
7339: RET
// export function PrepareHovercrafts ; var i , un , areas , skill ; begin
7340: LD_INT 0
7342: PPUSH
7343: PPUSH
7344: PPUSH
7345: PPUSH
7346: PPUSH
// areas := [ river1 , river2 ] ;
7347: LD_ADDR_VAR 0 4
7351: PUSH
7352: LD_INT 14
7354: PUSH
7355: LD_INT 15
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: ST_TO_ADDR
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
7362: LD_ADDR_VAR 0 5
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: LD_INT 6
7372: PUSH
7373: LD_INT 7
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: LD_OWVAR 67
7385: ARRAY
7386: ST_TO_ADDR
// uc_side := 2 ;
7387: LD_ADDR_OWVAR 20
7391: PUSH
7392: LD_INT 2
7394: ST_TO_ADDR
// uc_nation := 2 ;
7395: LD_ADDR_OWVAR 21
7399: PUSH
7400: LD_INT 2
7402: ST_TO_ADDR
// hc_name :=  ;
7403: LD_ADDR_OWVAR 26
7407: PUSH
7408: LD_STRING 
7410: ST_TO_ADDR
// hc_gallery :=  ;
7411: LD_ADDR_OWVAR 33
7415: PUSH
7416: LD_STRING 
7418: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
7419: LD_ADDR_VAR 0 2
7423: PUSH
7424: DOUBLE
7425: LD_INT 1
7427: DEC
7428: ST_TO_ADDR
7429: LD_INT 1
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 2
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: PUSH
7443: LD_OWVAR 67
7447: ARRAY
7448: PUSH
7449: FOR_TO
7450: IFFALSE 7602
// begin uc_side := 2 ;
7452: LD_ADDR_OWVAR 20
7456: PUSH
7457: LD_INT 2
7459: ST_TO_ADDR
// uc_nation := 2 ;
7460: LD_ADDR_OWVAR 21
7464: PUSH
7465: LD_INT 2
7467: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
7468: LD_ADDR_OWVAR 37
7472: PUSH
7473: LD_INT 11
7475: ST_TO_ADDR
// vc_engine := engine_solar ;
7476: LD_ADDR_OWVAR 39
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// vc_control := control_manual ;
7484: LD_ADDR_OWVAR 38
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
7492: LD_ADDR_OWVAR 40
7496: PUSH
7497: LD_INT 24
7499: ST_TO_ADDR
// vc_fuel_battery := 100 ;
7500: LD_ADDR_OWVAR 41
7504: PUSH
7505: LD_INT 100
7507: ST_TO_ADDR
// un := CreateVehicle ;
7508: LD_ADDR_VAR 0 3
7512: PUSH
7513: CALL_OW 45
7517: ST_TO_ADDR
// PlaceUnitXYR ( un , 121 , 69 , 4 , false ) ;
7518: LD_VAR 0 3
7522: PPUSH
7523: LD_INT 121
7525: PPUSH
7526: LD_INT 69
7528: PPUSH
7529: LD_INT 4
7531: PPUSH
7532: LD_INT 0
7534: PPUSH
7535: CALL_OW 50
// PrepareHuman ( false , 3 , skill ) ;
7539: LD_INT 0
7541: PPUSH
7542: LD_INT 3
7544: PPUSH
7545: LD_VAR 0 5
7549: PPUSH
7550: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
7554: CALL_OW 44
7558: PPUSH
7559: LD_VAR 0 3
7563: PPUSH
7564: CALL_OW 52
// riv := Insert ( riv , 1 , [ un , i ] ) ;
7568: LD_ADDR_EXP 9
7572: PUSH
7573: LD_EXP 9
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: LD_VAR 0 3
7585: PUSH
7586: LD_VAR 0 2
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 2
7599: ST_TO_ADDR
// end ;
7600: GO 7449
7602: POP
7603: POP
// end ;
7604: LD_VAR 0 1
7608: RET
// every 0 0$01 trigger riv do var i , c ;
7609: LD_EXP 9
7613: IFFALSE 8048
7615: GO 7617
7617: DISABLE
7618: LD_INT 0
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// for i = riv downto 1 do
7623: LD_ADDR_VAR 0 1
7627: PUSH
7628: DOUBLE
7629: LD_EXP 9
7633: INC
7634: ST_TO_ADDR
7635: LD_INT 1
7637: PUSH
7638: FOR_DOWNTO
7639: IFFALSE 8046
// begin if not riv [ i ] [ 1 ] then
7641: LD_EXP 9
7645: PUSH
7646: LD_VAR 0 1
7650: ARRAY
7651: PUSH
7652: LD_INT 1
7654: ARRAY
7655: NOT
7656: IFFALSE 7678
// begin riv := Delete ( riv , 1 ) ;
7658: LD_ADDR_EXP 9
7662: PUSH
7663: LD_EXP 9
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 3
7675: ST_TO_ADDR
// break ;
7676: GO 8046
// end ; if not HasTask ( riv [ i ] [ 1 ] ) then
7678: LD_EXP 9
7682: PUSH
7683: LD_VAR 0 1
7687: ARRAY
7688: PUSH
7689: LD_INT 1
7691: ARRAY
7692: PPUSH
7693: CALL_OW 314
7697: NOT
7698: IFFALSE 7766
// begin if riv [ i ] [ 2 ] = 1 then
7700: LD_EXP 9
7704: PUSH
7705: LD_VAR 0 1
7709: ARRAY
7710: PUSH
7711: LD_INT 2
7713: ARRAY
7714: PUSH
7715: LD_INT 1
7717: EQUAL
7718: IFFALSE 7730
// c := 2 else
7720: LD_ADDR_VAR 0 2
7724: PUSH
7725: LD_INT 2
7727: ST_TO_ADDR
7728: GO 7738
// c := 1 ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// riv := Replace2 ( riv , i , 2 , c ) ;
7738: LD_ADDR_EXP 9
7742: PUSH
7743: LD_EXP 9
7747: PPUSH
7748: LD_VAR 0 1
7752: PPUSH
7753: LD_INT 2
7755: PPUSH
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL 10472 0 4
7765: ST_TO_ADDR
// end ; if not IsInArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) then
7766: LD_EXP 9
7770: PUSH
7771: LD_VAR 0 1
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_INT 14
7783: PUSH
7784: LD_INT 15
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_EXP 9
7795: PUSH
7796: LD_VAR 0 1
7800: ARRAY
7801: PUSH
7802: LD_INT 2
7804: ARRAY
7805: ARRAY
7806: PPUSH
7807: CALL_OW 308
7811: NOT
7812: IFFALSE 8044
// begin if GetFuel ( riv [ i ] [ 1 ] ) < 50 then
7814: LD_EXP 9
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PUSH
7825: LD_INT 1
7827: ARRAY
7828: PPUSH
7829: CALL_OW 261
7833: PUSH
7834: LD_INT 50
7836: LESS
7837: IFFALSE 7861
// SetFuel ( riv [ i ] [ 1 ] , 67 ) ;
7839: LD_EXP 9
7843: PUSH
7844: LD_VAR 0 1
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PPUSH
7854: LD_INT 67
7856: PPUSH
7857: CALL_OW 240
// if GetDistUnits ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) < 9 then
7861: LD_EXP 9
7865: PUSH
7866: LD_VAR 0 1
7870: ARRAY
7871: PUSH
7872: LD_INT 1
7874: ARRAY
7875: PPUSH
7876: LD_INT 22
7878: PUSH
7879: LD_INT 3
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PPUSH
7891: LD_EXP 9
7895: PUSH
7896: LD_VAR 0 1
7900: ARRAY
7901: PUSH
7902: LD_INT 1
7904: ARRAY
7905: PPUSH
7906: CALL_OW 74
7910: PPUSH
7911: CALL_OW 296
7915: PUSH
7916: LD_INT 9
7918: LESS
7919: IFFALSE 7977
// ComAttackUnit ( riv [ i ] [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , riv [ i ] [ 1 ] ) ) else
7921: LD_EXP 9
7925: PUSH
7926: LD_VAR 0 1
7930: ARRAY
7931: PUSH
7932: LD_INT 1
7934: ARRAY
7935: PPUSH
7936: LD_INT 22
7938: PUSH
7939: LD_INT 3
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: PPUSH
7951: LD_EXP 9
7955: PUSH
7956: LD_VAR 0 1
7960: ARRAY
7961: PUSH
7962: LD_INT 1
7964: ARRAY
7965: PPUSH
7966: CALL_OW 74
7970: PPUSH
7971: CALL_OW 115
7975: GO 8044
// begin ComMoveToArea ( riv [ i ] [ 1 ] , [ river1 , river2 ] [ riv [ i ] [ 2 ] ] ) ;
7977: LD_EXP 9
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PPUSH
7992: LD_INT 14
7994: PUSH
7995: LD_INT 15
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_EXP 9
8006: PUSH
8007: LD_VAR 0 1
8011: ARRAY
8012: PUSH
8013: LD_INT 2
8015: ARRAY
8016: ARRAY
8017: PPUSH
8018: CALL_OW 113
// AddComWait ( riv [ i ] [ 1 ] , 0 0$10 ) ;
8022: LD_EXP 9
8026: PUSH
8027: LD_VAR 0 1
8031: ARRAY
8032: PUSH
8033: LD_INT 1
8035: ARRAY
8036: PPUSH
8037: LD_INT 350
8039: PPUSH
8040: CALL_OW 202
// end ; end ; end ;
8044: GO 7638
8046: POP
8047: POP
// end ;
8048: PPOPN 2
8050: END
// every 10 10$00 trigger convoy_start do var i , un ;
8051: LD_EXP 7
8055: IFFALSE 8176
8057: GO 8059
8059: DISABLE
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// begin enable ;
8064: ENABLE
// for i = 1 to 2 do
8065: LD_ADDR_VAR 0 1
8069: PUSH
8070: DOUBLE
8071: LD_INT 1
8073: DEC
8074: ST_TO_ADDR
8075: LD_INT 2
8077: PUSH
8078: FOR_TO
8079: IFFALSE 8174
// begin uc_side := 2 ;
8081: LD_ADDR_OWVAR 20
8085: PUSH
8086: LD_INT 2
8088: ST_TO_ADDR
// uc_nation := 2 ;
8089: LD_ADDR_OWVAR 21
8093: PUSH
8094: LD_INT 2
8096: ST_TO_ADDR
// PrepareHuman ( false , 1 , 4 ) ;
8097: LD_INT 0
8099: PPUSH
8100: LD_INT 1
8102: PPUSH
8103: LD_INT 4
8105: PPUSH
8106: CALL_OW 380
// un := CreateHuman ;
8110: LD_ADDR_VAR 0 2
8114: PUSH
8115: CALL_OW 44
8119: ST_TO_ADDR
// PlaceUnitXY ( un , 10 , 2 , false ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_INT 10
8127: PPUSH
8128: LD_INT 2
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: CALL_OW 48
// ComMoveXY ( un , 24 , 36 ) ;
8138: LD_VAR 0 2
8142: PPUSH
8143: LD_INT 24
8145: PPUSH
8146: LD_INT 36
8148: PPUSH
8149: CALL_OW 111
// AddComMoveToArea ( un , conv_end ) ;
8153: LD_VAR 0 2
8157: PPUSH
8158: LD_INT 9
8160: PPUSH
8161: CALL_OW 173
// Wait ( 0 0$02 ) ;
8165: LD_INT 70
8167: PPUSH
8168: CALL_OW 67
// end ;
8172: GO 8078
8174: POP
8175: POP
// end ;
8176: PPOPN 2
8178: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) do var i , rest ;
8179: LD_INT 22
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 69
8193: IFFALSE 8507
8195: GO 8197
8197: DISABLE
8198: LD_INT 0
8200: PPUSH
8201: PPUSH
// begin enable ;
8202: ENABLE
// rest := FilterAllUnits ( [ f_side , 2 ] ) diff ar_force ;
8203: LD_ADDR_VAR 0 2
8207: PUSH
8208: LD_INT 22
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PPUSH
8218: CALL_OW 69
8222: PUSH
8223: LD_EXP 11
8227: DIFF
8228: ST_TO_ADDR
// if rest then
8229: LD_VAR 0 2
8233: IFFALSE 8305
// for i in rest do
8235: LD_ADDR_VAR 0 1
8239: PUSH
8240: LD_VAR 0 2
8244: PUSH
8245: FOR_IN
8246: IFFALSE 8303
// if GetClass ( i ) = 3 then
8248: LD_VAR 0 1
8252: PPUSH
8253: CALL_OW 257
8257: PUSH
8258: LD_INT 3
8260: EQUAL
8261: IFFALSE 8301
// begin if not IsInArea ( i , ar2 ) then
8263: LD_VAR 0 1
8267: PPUSH
8268: LD_INT 17
8270: PPUSH
8271: CALL_OW 308
8275: NOT
8276: IFFALSE 8292
// ComMoveToArea ( i , ar2 ) else
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_INT 17
8285: PPUSH
8286: CALL_OW 113
8290: GO 8301
// RemoveUnit ( i ) ;
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 64
// end ;
8301: GO 8245
8303: POP
8304: POP
// if ar_force then
8305: LD_EXP 11
8309: IFFALSE 8507
// begin if ar_force > 15 then
8311: LD_EXP 11
8315: PUSH
8316: LD_INT 15
8318: GREATER
8319: IFFALSE 8336
// ComAgressiveMove ( ar_force , 58 , 51 ) ;
8321: LD_EXP 11
8325: PPUSH
8326: LD_INT 58
8328: PPUSH
8329: LD_INT 51
8331: PPUSH
8332: CALL_OW 114
// for i in ar_force do
8336: LD_ADDR_VAR 0 1
8340: PUSH
8341: LD_EXP 11
8345: PUSH
8346: FOR_IN
8347: IFFALSE 8505
// begin if GetClass ( i ) = class_soldier then
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL_OW 257
8358: PUSH
8359: LD_INT 1
8361: EQUAL
8362: IFFALSE 8454
// if FindTarget ( i ) in FilterAllUnits ( [ f_type , unit_building ] ) then
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL 10729 0 1
8373: PUSH
8374: LD_INT 21
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL_OW 69
8388: IN
8389: IFFALSE 8435
// ComPlaceDelayedCharge ( i , GetX ( FindTarget ( i ) ) , GetY ( FindTarget ( i ) ) , 0 ) else
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL 10729 0 1
8405: PPUSH
8406: CALL_OW 250
8410: PPUSH
8411: LD_VAR 0 1
8415: PPUSH
8416: CALL 10729 0 1
8420: PPUSH
8421: CALL_OW 251
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 132
8433: GO 8454
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_VAR 0 1
8444: PPUSH
8445: CALL 10729 0 1
8449: PPUSH
8450: CALL_OW 115
// if not GetClass ( i ) = 1 and not HasTask ( i ) then
8454: LD_VAR 0 1
8458: PPUSH
8459: CALL_OW 257
8463: PUSH
8464: LD_INT 1
8466: EQUAL
8467: NOT
8468: IFFALSE 8482
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: CALL_OW 314
8480: NOT
8481: AND
8482: IFFALSE 8503
// ComAttackUnit ( i , FindTarget ( i ) ) ;
8484: LD_VAR 0 1
8488: PPUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL 10729 0 1
8498: PPUSH
8499: CALL_OW 115
// end ;
8503: GO 8346
8505: POP
8506: POP
// end ; end ;
8507: PPOPN 2
8509: END
// every 0 0$01 trigger FilterUnitsInArea ( conv_end , [ f_side , 2 ] ) do
8510: LD_INT 9
8512: PPUSH
8513: LD_INT 22
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: IFFALSE 8540
8529: GO 8531
8531: DISABLE
// medal2 := false ; end_of_file
8532: LD_ADDR_EXP 4
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
8540: END
// export function Action ; begin
8541: LD_INT 0
8543: PPUSH
// case Query ( info ) of 1 :
8544: LD_STRING info
8546: PPUSH
8547: CALL_OW 97
8551: PUSH
8552: LD_INT 1
8554: DOUBLE
8555: EQUAL
8556: IFTRUE 8560
8558: GO 8563
8560: POP
// ; end ;
8561: GO 8564
8563: POP
// ChangeMissionObjectives ( PM_1 ) ;
8564: LD_STRING PM_1
8566: PPUSH
8567: CALL_OW 337
// SaveForQuickRestart ;
8571: CALL_OW 22
// end ;
8575: LD_VAR 0 1
8579: RET
// every 0 0$01 trigger GetSide ( us_depot ) = 3 do
8580: LD_INT 50
8582: PPUSH
8583: CALL_OW 255
8587: PUSH
8588: LD_INT 3
8590: EQUAL
8591: IFFALSE 8872
8593: GO 8595
8595: DISABLE
// begin Say ( Stolypin , DPM_S1 ) ;
8596: LD_EXP 16
8600: PPUSH
8601: LD_STRING DPM_S1
8603: PPUSH
8604: CALL_OW 88
// SayRadio ( Popov , DPM_P1 ) ;
8608: LD_EXP 17
8612: PPUSH
8613: LD_STRING DPM_P1
8615: PPUSH
8616: CALL_OW 94
// Say ( Stolypin , DPM_S2 ) ;
8620: LD_EXP 16
8624: PPUSH
8625: LD_STRING DPM_S2
8627: PPUSH
8628: CALL_OW 88
// SaveForQuickRestart ;
8632: CALL_OW 22
// ChangeMissionObjectives ( PM_2 ) ;
8636: LD_STRING PM_2
8638: PPUSH
8639: CALL_OW 337
// Wait ( 2 2$30 ) ;
8643: LD_INT 5250
8645: PPUSH
8646: CALL_OW 67
// CenterOnXY ( 117 , 4 ) ;
8650: LD_INT 117
8652: PPUSH
8653: LD_INT 4
8655: PPUSH
8656: CALL_OW 84
// Convoy ( 1 ) ;
8660: LD_INT 1
8662: PPUSH
8663: CALL 898 0 1
// Wait ( 0 0$30 ) ;
8667: LD_INT 1050
8669: PPUSH
8670: CALL_OW 67
// Convoy ( 2 ) ;
8674: LD_INT 2
8676: PPUSH
8677: CALL 898 0 1
// Wait ( 1 1$30 ) ;
8681: LD_INT 3150
8683: PPUSH
8684: CALL_OW 67
// Convoy ( 3 ) ;
8688: LD_INT 3
8690: PPUSH
8691: CALL 898 0 1
// Wait ( 4 4$00 ) ;
8695: LD_INT 8400
8697: PPUSH
8698: CALL_OW 67
// convoy_start := true ;
8702: LD_ADDR_EXP 7
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// PrepareArabian ;
8710: CALL 6319 0 0
// PrepareAttack ( 1 ) ;
8714: LD_INT 1
8716: PPUSH
8717: CALL 6392 0 1
// while ( convoy_start ) do
8721: LD_EXP 7
8725: IFFALSE 8872
// begin Wait ( Rand ( 2 2$00 , 3 3$30 ) ) ;
8727: LD_INT 4200
8729: PPUSH
8730: LD_INT 7350
8732: PPUSH
8733: CALL_OW 12
8737: PPUSH
8738: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) < 20 then
8742: LD_INT 22
8744: PUSH
8745: LD_INT 2
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: PUSH
8757: LD_INT 20
8759: LESS
8760: IFFALSE 8777
// PrepareAttack ( Rand ( 1 , 2 ) ) ;
8762: LD_INT 1
8764: PPUSH
8765: LD_INT 2
8767: PPUSH
8768: CALL_OW 12
8772: PPUSH
8773: CALL 6392 0 1
// Convoy ( Rand ( 1 , 5 ) ) ;
8777: LD_INT 1
8779: PPUSH
8780: LD_INT 5
8782: PPUSH
8783: CALL_OW 12
8787: PPUSH
8788: CALL 898 0 1
// conv_counter := conv_counter + 1 ;
8792: LD_ADDR_EXP 13
8796: PUSH
8797: LD_EXP 13
8801: PUSH
8802: LD_INT 1
8804: PLUS
8805: ST_TO_ADDR
// if conv_counter mod [ 4 , 3 , 3 ] [ Difficulty ] = 0 then
8806: LD_EXP 13
8810: PUSH
8811: LD_INT 4
8813: PUSH
8814: LD_INT 3
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: PUSH
8825: LD_OWVAR 67
8829: ARRAY
8830: MOD
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: IFFALSE 8870
// begin Wait ( 1 1$20 ) ;
8837: LD_INT 2800
8839: PPUSH
8840: CALL_OW 67
// SayRadio ( Farmer , DPM_F2 ) ;
8844: LD_EXP 25
8848: PPUSH
8849: LD_STRING DPM_F2
8851: PPUSH
8852: CALL_OW 94
// PrepareAttack ( 3 ) ;
8856: LD_INT 3
8858: PPUSH
8859: CALL 6392 0 1
// Wait ( 3 3$00 ) ;
8863: LD_INT 6300
8865: PPUSH
8866: CALL_OW 67
// end ; end ;
8870: GO 8721
// end ;
8872: END
// every 0 0$1 trigger safeCounter > 30 do
8873: LD_EXP 15
8877: PUSH
8878: LD_INT 30
8880: GREATER
8881: IFFALSE 8893
8883: GO 8885
8885: DISABLE
// SetAchievement ( ACH_SAFE ) ;
8886: LD_STRING ACH_SAFE
8888: PPUSH
8889: CALL_OW 543
8893: END
// every 1 1$30 trigger conv_counter mod 3 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8894: LD_EXP 13
8898: PUSH
8899: LD_INT 3
8901: MOD
8902: PUSH
8903: LD_INT 0
8905: EQUAL
8906: IFFALSE 8928
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_INT 2
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: PUSH
8924: LD_INT 0
8926: EQUAL
8927: AND
8928: IFFALSE 8945
8930: GO 8932
8932: DISABLE
// SayRadio ( Farmer , DPM_F3 ) ;
8933: LD_EXP 25
8937: PPUSH
8938: LD_STRING DPM_F3
8940: PPUSH
8941: CALL_OW 94
8945: END
// every 1 1$30 trigger conv_counter mod 5 = 0 and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
8946: LD_EXP 13
8950: PUSH
8951: LD_INT 5
8953: MOD
8954: PUSH
8955: LD_INT 0
8957: EQUAL
8958: IFFALSE 8980
8960: PUSH
8961: LD_INT 22
8963: PUSH
8964: LD_INT 2
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PPUSH
8971: CALL_OW 69
8975: PUSH
8976: LD_INT 0
8978: EQUAL
8979: AND
8980: IFFALSE 8997
8982: GO 8984
8984: DISABLE
// SayRadio ( Farmer , DPM_F4 ) ;
8985: LD_EXP 25
8989: PPUSH
8990: LD_STRING DPM_F4
8992: PPUSH
8993: CALL_OW 94
8997: END
// every 0 0$10 trigger convoy_start and conv_counter >= [ 8 , 9 , 10 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
8998: LD_EXP 7
9002: IFFALSE 9031
9004: PUSH
9005: LD_EXP 13
9009: PUSH
9010: LD_INT 8
9012: PUSH
9013: LD_INT 9
9015: PUSH
9016: LD_INT 10
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_OWVAR 67
9028: ARRAY
9029: GREATEREQUAL
9030: AND
9031: IFFALSE 9053
9033: PUSH
9034: LD_INT 22
9036: PUSH
9037: LD_INT 6
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: PUSH
9049: LD_INT 0
9051: EQUAL
9052: AND
9053: IFFALSE 9152
9055: GO 9057
9057: DISABLE
// begin SayRadio ( Popov , DPM_PEnd ) ;
9058: LD_EXP 17
9062: PPUSH
9063: LD_STRING DPM_PEnd
9065: PPUSH
9066: CALL_OW 94
// AddMedal ( med1 , medal1 ) ;
9070: LD_STRING med1
9072: PPUSH
9073: LD_EXP 3
9077: PPUSH
9078: CALL_OW 101
// AddMedal ( med2 , medal2 ) ;
9082: LD_STRING med2
9084: PPUSH
9085: LD_EXP 4
9089: PPUSH
9090: CALL_OW 101
// if dest_counter >= [ 15 , 10 , 7 ] [ Difficulty ] then
9094: LD_EXP 8
9098: PUSH
9099: LD_INT 15
9101: PUSH
9102: LD_INT 10
9104: PUSH
9105: LD_INT 7
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: LD_OWVAR 67
9117: ARRAY
9118: GREATEREQUAL
9119: IFFALSE 9129
// medal3 := false ;
9121: LD_ADDR_EXP 5
9125: PUSH
9126: LD_INT 0
9128: ST_TO_ADDR
// AddMedal ( med3 , medal3 ) ;
9129: LD_STRING med3
9131: PPUSH
9132: LD_EXP 5
9136: PPUSH
9137: CALL_OW 101
// GiveMedals ( MAIN ) ;
9141: LD_STRING MAIN
9143: PPUSH
9144: CALL_OW 102
// YouWin ;
9148: CALL_OW 103
// end ;
9152: END
// every 4 4$10 trigger convoy_start do var i ;
9153: LD_EXP 7
9157: IFFALSE 9523
9159: GO 9161
9161: DISABLE
9162: LD_INT 0
9164: PPUSH
// begin DialogueOn ;
9165: CALL_OW 6
// SayRadio ( Popov , DPM_PHelp ) ;
9169: LD_EXP 17
9173: PPUSH
9174: LD_STRING DPM_PHelp
9176: PPUSH
9177: CALL_OW 94
// DialogueOff ;
9181: CALL_OW 7
// Wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// Randomize ;
9192: CALL_OW 10
// uc_side := 3 ;
9196: LD_ADDR_OWVAR 20
9200: PUSH
9201: LD_INT 3
9203: ST_TO_ADDR
// uc_nation := 3 ;
9204: LD_ADDR_OWVAR 21
9208: PUSH
9209: LD_INT 3
9211: ST_TO_ADDR
// for i = 1 to [ 5 , 4 , 3 ] [ Difficulty ] do
9212: LD_ADDR_VAR 0 1
9216: PUSH
9217: DOUBLE
9218: LD_INT 1
9220: DEC
9221: ST_TO_ADDR
9222: LD_INT 5
9224: PUSH
9225: LD_INT 4
9227: PUSH
9228: LD_INT 3
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: LD_OWVAR 67
9240: ARRAY
9241: PUSH
9242: FOR_TO
9243: IFFALSE 9283
// begin PrepareHuman ( false , Rand ( 1 , 3 ) , 5 ) ;
9245: LD_INT 0
9247: PPUSH
9248: LD_INT 1
9250: PPUSH
9251: LD_INT 3
9253: PPUSH
9254: CALL_OW 12
9258: PPUSH
9259: LD_INT 5
9261: PPUSH
9262: CALL_OW 380
// PlaceUnitArea ( CreateHuman , rus_start , false ) ;
9266: CALL_OW 44
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: LD_INT 0
9276: PPUSH
9277: CALL_OW 49
// end ;
9281: GO 9242
9283: POP
9284: POP
// vc_chassis := ru_heavy_wheeled ;
9285: LD_ADDR_OWVAR 37
9289: PUSH
9290: LD_INT 23
9292: ST_TO_ADDR
// vc_engine := engine_combustion ;
9293: LD_ADDR_OWVAR 39
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// vc_control := control_manual ;
9301: LD_ADDR_OWVAR 38
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// vc_weapon := 89 ;
9309: LD_ADDR_OWVAR 40
9313: PUSH
9314: LD_INT 89
9316: ST_TO_ADDR
// vc_fuel_battery := 88 ;
9317: LD_ADDR_OWVAR 41
9321: PUSH
9322: LD_INT 88
9324: ST_TO_ADDR
// i := CreateVehicle ;
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: CALL_OW 45
9334: ST_TO_ADDR
// SetDir ( i , 5 ) ;
9335: LD_VAR 0 1
9339: PPUSH
9340: LD_INT 5
9342: PPUSH
9343: CALL_OW 233
// PlaceUnitXY ( i , 63 , 115 , false ) ;
9347: LD_VAR 0 1
9351: PPUSH
9352: LD_INT 63
9354: PPUSH
9355: LD_INT 115
9357: PPUSH
9358: LD_INT 0
9360: PPUSH
9361: CALL_OW 48
// SetCargo ( i , mat_cans , 200 ) ;
9365: LD_VAR 0 1
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: LD_INT 200
9375: PPUSH
9376: CALL_OW 290
// PrepareHuman ( false , 3 , 5 ) ;
9380: LD_INT 0
9382: PPUSH
9383: LD_INT 3
9385: PPUSH
9386: LD_INT 5
9388: PPUSH
9389: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
9393: CALL_OW 44
9397: PPUSH
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 52
// DialogueOn ;
9407: CALL_OW 6
// CenterNowOnXY ( 169 , 115 ) ;
9411: LD_INT 169
9413: PPUSH
9414: LD_INT 115
9416: PPUSH
9417: CALL_OW 86
// DWait ( 0 0$01 ) ;
9421: LD_INT 35
9423: PPUSH
9424: CALL_OW 68
// CenterNowOnXY ( 63 , 115 ) ;
9428: LD_INT 63
9430: PPUSH
9431: LD_INT 115
9433: PPUSH
9434: CALL_OW 86
// DWait ( 0 0$01 ) ;
9438: LD_INT 35
9440: PPUSH
9441: CALL_OW 68
// DialogueOff ;
9445: CALL_OW 7
// ComMoveXY ( i , 57 , 53 ) ;
9449: LD_VAR 0 1
9453: PPUSH
9454: LD_INT 57
9456: PPUSH
9457: LD_INT 53
9459: PPUSH
9460: CALL_OW 111
// Wait ( Rand ( 3 3$00 , 7 7$00 ) ) ;
9464: LD_INT 6300
9466: PPUSH
9467: LD_INT 14700
9469: PPUSH
9470: CALL_OW 12
9474: PPUSH
9475: CALL_OW 67
// PlaceUnitXY ( Saseda , 86 , 112 , false ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_INT 86
9486: PPUSH
9487: LD_INT 112
9489: PPUSH
9490: LD_INT 0
9492: PPUSH
9493: CALL_OW 48
// Wait ( 0 0$0.3 ) ;
9497: LD_INT 10
9499: PPUSH
9500: CALL_OW 67
// SayRadio ( Saseda , DPM_Sa1 ) ;
9504: LD_EXP 18
9508: PPUSH
9509: LD_STRING DPM_Sa1
9511: PPUSH
9512: CALL_OW 94
// ChangeMissionObjectives ( PM_3 ) ;
9516: LD_STRING PM_3
9518: PPUSH
9519: CALL_OW 337
// end ;
9523: PPOPN 1
9525: END
// every 0 0$01 trigger See ( 3 , Saseda ) do
9526: LD_INT 3
9528: PPUSH
9529: LD_EXP 18
9533: PPUSH
9534: CALL_OW 292
9538: IFFALSE 9587
9540: GO 9542
9542: DISABLE
// begin Say ( Saseda , DPM_Sa2 ) ;
9543: LD_EXP 18
9547: PPUSH
9548: LD_STRING DPM_Sa2
9550: PPUSH
9551: CALL_OW 88
// ChangeMissionObjectives ( PM_4 ) ;
9555: LD_STRING PM_4
9557: PPUSH
9558: CALL_OW 337
// SetTech ( tech_rocket , 3 , state_enabled ) ;
9562: LD_INT 40
9564: PPUSH
9565: LD_INT 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 322
// SetSide ( Saseda , 3 ) ;
9575: LD_EXP 18
9579: PPUSH
9580: LD_INT 3
9582: PPUSH
9583: CALL_OW 235
// end ;
9587: END
// every 16 16$00 trigger not medal1 and FilterAllUnits ( [ f_side , 6 ] ) = 0 do
9588: LD_EXP 3
9592: NOT
9593: IFFALSE 9615
9595: PUSH
9596: LD_INT 22
9598: PUSH
9599: LD_INT 6
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: PUSH
9611: LD_INT 0
9613: EQUAL
9614: AND
9615: IFFALSE 9677
9617: GO 9619
9619: DISABLE
// begin DialogueOn ;
9620: CALL_OW 6
// Say ( Stolypin , DPM_S3 ) ;
9624: LD_EXP 16
9628: PPUSH
9629: LD_STRING DPM_S3
9631: PPUSH
9632: CALL_OW 88
// PlaceSeeing ( 62 , 113 , 3 , 10 ) ;
9636: LD_INT 62
9638: PPUSH
9639: LD_INT 113
9641: PPUSH
9642: LD_INT 3
9644: PPUSH
9645: LD_INT 10
9647: PPUSH
9648: CALL_OW 330
// CenterOnXY ( 62 , 113 ) ;
9652: LD_INT 62
9654: PPUSH
9655: LD_INT 113
9657: PPUSH
9658: CALL_OW 84
// dwait ( 0 0$1 ) ;
9662: LD_INT 35
9664: PPUSH
9665: CALL_OW 68
// DialogueOff ;
9669: CALL_OW 7
// CounterAttack ;
9673: CALL 5789 0 0
// end ; end_of_file
9677: END
// on LeaveBuilding ( b , h ) do begin if GetSide ( b ) = 1 then
9678: LD_VAR 0 1
9682: PPUSH
9683: CALL_OW 255
9687: PUSH
9688: LD_INT 1
9690: EQUAL
9691: IFFALSE 9727
// if not us_retreat then
9693: LD_EXP 22
9697: NOT
9698: IFFALSE 9727
// if GetClass ( h ) = 1 then
9700: LD_VAR 0 2
9704: PPUSH
9705: CALL_OW 257
9709: PUSH
9710: LD_INT 1
9712: EQUAL
9713: IFFALSE 9727
// ComEnterUnit ( h , us_arm ) ;
9715: LD_VAR 0 2
9719: PPUSH
9720: LD_INT 69
9722: PPUSH
9723: CALL_OW 120
// end ;
9727: PPOPN 2
9729: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9730: LD_VAR 0 1
9734: PPUSH
9735: CALL 27336 0 1
// if GetSide ( un ) = 1 then
9739: LD_VAR 0 1
9743: PPUSH
9744: CALL_OW 255
9748: PUSH
9749: LD_INT 1
9751: EQUAL
9752: IFFALSE 9768
// us_count := us_count + 1 ;
9754: LD_ADDR_EXP 24
9758: PUSH
9759: LD_EXP 24
9763: PUSH
9764: LD_INT 1
9766: PLUS
9767: ST_TO_ADDR
// if un in us_force then
9768: LD_VAR 0 1
9772: PUSH
9773: LD_EXP 12
9777: IN
9778: IFFALSE 9796
// us_force := us_force diff un ;
9780: LD_ADDR_EXP 12
9784: PUSH
9785: LD_EXP 12
9789: PUSH
9790: LD_VAR 0 1
9794: DIFF
9795: ST_TO_ADDR
// if un in ar_force then
9796: LD_VAR 0 1
9800: PUSH
9801: LD_EXP 11
9805: IN
9806: IFFALSE 9824
// ar_force := ar_force diff un ;
9808: LD_ADDR_EXP 11
9812: PUSH
9813: LD_EXP 11
9817: PUSH
9818: LD_VAR 0 1
9822: DIFF
9823: ST_TO_ADDR
// if un = Stolypin then
9824: LD_VAR 0 1
9828: PUSH
9829: LD_EXP 16
9833: EQUAL
9834: IFFALSE 9843
// YouLost ( dead ) ;
9836: LD_STRING dead
9838: PPUSH
9839: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_INT 22
9850: PUSH
9851: LD_INT 1
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 30
9860: PUSH
9861: LD_INT 0
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 69
9876: IN
9877: IFFALSE 9886
// YouLost ( depot ) ;
9879: LD_STRING depot
9881: PPUSH
9882: CALL_OW 104
// if GetSide ( un ) = 6 then
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 255
9895: PUSH
9896: LD_INT 6
9898: EQUAL
9899: IFFALSE 9915
// dest_counter := dest_counter + 1 ;
9901: LD_ADDR_EXP 8
9905: PUSH
9906: LD_EXP 8
9910: PUSH
9911: LD_INT 1
9913: PLUS
9914: ST_TO_ADDR
// end ;
9915: PPOPN 1
9917: END
// on VehicleConstructed ( un , fac ) do begin SOS_VehicleConstructed ( un , fac ) ;
9918: LD_VAR 0 1
9922: PPUSH
9923: LD_VAR 0 2
9927: PPUSH
9928: CALL 27394 0 2
// if GetSide ( un ) = 1 then
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 255
9941: PUSH
9942: LD_INT 1
9944: EQUAL
9945: IFFALSE 9962
// ComMoveXY ( un , 57 , 52 ) ;
9947: LD_VAR 0 1
9951: PPUSH
9952: LD_INT 57
9954: PPUSH
9955: LD_INT 52
9957: PPUSH
9958: CALL_OW 111
// end ;
9962: PPOPN 2
9964: END
// on Contact ( s1 , s2 ) do begin if not us_alert then
9965: LD_EXP 21
9969: NOT
9970: IFFALSE 10026
// if ( s1 = 3 and s2 = 1 ) or ( s1 = 1 and s2 = 3 ) then
9972: LD_VAR 0 1
9976: PUSH
9977: LD_INT 3
9979: EQUAL
9980: IFFALSE 9992
9982: PUSH
9983: LD_VAR 0 2
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: AND
9992: IFTRUE 10016
9994: PUSH
9995: LD_VAR 0 1
9999: PUSH
10000: LD_INT 1
10002: EQUAL
10003: IFFALSE 10015
10005: PUSH
10006: LD_VAR 0 2
10010: PUSH
10011: LD_INT 3
10013: EQUAL
10014: AND
10015: OR
10016: IFFALSE 10026
// us_alert := true ;
10018: LD_ADDR_EXP 21
10022: PUSH
10023: LD_INT 1
10025: ST_TO_ADDR
// if ( s1 = 6 and s2 = 3 ) or ( s1 = 3 and s2 = 6 ) then
10026: LD_VAR 0 1
10030: PUSH
10031: LD_INT 6
10033: EQUAL
10034: IFFALSE 10046
10036: PUSH
10037: LD_VAR 0 2
10041: PUSH
10042: LD_INT 3
10044: EQUAL
10045: AND
10046: IFTRUE 10070
10048: PUSH
10049: LD_VAR 0 1
10053: PUSH
10054: LD_INT 3
10056: EQUAL
10057: IFFALSE 10069
10059: PUSH
10060: LD_VAR 0 2
10064: PUSH
10065: LD_INT 6
10067: EQUAL
10068: AND
10069: OR
10070: IFFALSE 10079
// YouLost ( alat ) ;
10072: LD_STRING alat
10074: PPUSH
10075: CALL_OW 104
// end ;
10079: PPOPN 2
10081: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 2 and un in FilterAllUnits ( [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 255
10091: PUSH
10092: LD_INT 2
10094: EQUAL
10095: IFFALSE 10129
10097: PUSH
10098: LD_VAR 0 1
10102: PUSH
10103: LD_INT 58
10105: PUSH
10106: EMPTY
10107: LIST
10108: PUSH
10109: LD_INT 21
10111: PUSH
10112: LD_INT 2
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PPUSH
10123: CALL_OW 69
10127: IN
10128: AND
10129: IFFALSE 10250
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> 2 then
10131: LD_OWVAR 3
10135: PUSH
10136: LD_VAR 0 1
10140: DIFF
10141: PPUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 74
10151: PPUSH
10152: CALL_OW 255
10156: PUSH
10157: LD_INT 2
10159: NONEQUAL
10160: IFFALSE 10250
// begin Wait ( 0 0$1.3 ) ;
10162: LD_INT 46
10164: PPUSH
10165: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 250
10178: PPUSH
10179: LD_VAR 0 1
10183: PPUSH
10184: CALL_OW 251
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10196: LD_VAR 0 1
10200: PPUSH
10201: CALL_OW 250
10205: PPUSH
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 251
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
10223: LD_VAR 0 1
10227: PPUSH
10228: CALL_OW 250
10232: PPUSH
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL_OW 251
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: CALL_OW 453
// end ; end ;
10250: PPOPN 1
10252: END
// on EvacuateVehicle ( driver , un , c1 , c2 ) do begin if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) and not GetSide ( NearestUnit ( un ) ) = 2 then
10253: LD_VAR 0 2
10257: PUSH
10258: LD_INT 22
10260: PUSH
10261: LD_INT 2
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: IN
10287: IFFALSE 10310
10289: PUSH
10290: LD_VAR 0 2
10294: PPUSH
10295: CALL 10774 0 1
10299: PPUSH
10300: CALL_OW 255
10304: PUSH
10305: LD_INT 2
10307: EQUAL
10308: NOT
10309: AND
10310: IFFALSE 10435
// begin Wait ( Rand ( 0 0$03 , 0 0$06 ) ) ;
10312: LD_INT 105
10314: PPUSH
10315: LD_INT 210
10317: PPUSH
10318: CALL_OW 12
10322: PPUSH
10323: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10327: LD_VAR 0 2
10331: PPUSH
10332: CALL_OW 250
10336: PPUSH
10337: LD_VAR 0 2
10341: PPUSH
10342: CALL_OW 251
10346: PPUSH
10347: LD_INT 3
10349: PPUSH
10350: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10354: LD_VAR 0 2
10358: PPUSH
10359: CALL_OW 250
10363: PPUSH
10364: LD_VAR 0 2
10368: PPUSH
10369: CALL_OW 251
10373: PPUSH
10374: LD_INT 3
10376: PPUSH
10377: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10381: LD_VAR 0 2
10385: PPUSH
10386: CALL_OW 250
10390: PPUSH
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL_OW 251
10400: PPUSH
10401: LD_INT 3
10403: PPUSH
10404: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 3 ) ;
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 250
10417: PPUSH
10418: LD_VAR 0 2
10422: PPUSH
10423: CALL_OW 251
10427: PPUSH
10428: LD_INT 3
10430: PPUSH
10431: CALL_OW 453
// end ; end ;
10435: PPOPN 4
10437: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10438: LD_VAR 0 1
10442: PPUSH
10443: LD_VAR 0 2
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: CALL 27370 0 3
// end ;
10457: PPOPN 3
10459: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: CALL 27378 0 1
// end ; end_of_file
10469: PPOPN 1
10471: END
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
10472: LD_INT 0
10474: PPUSH
10475: PPUSH
10476: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
10477: LD_ADDR_VAR 0 7
10481: PUSH
10482: LD_VAR 0 1
10486: PUSH
10487: LD_VAR 0 2
10491: ARRAY
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_VAR 0 4
10502: PPUSH
10503: CALL_OW 1
10507: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
10508: LD_ADDR_VAR 0 1
10512: PUSH
10513: LD_VAR 0 1
10517: PPUSH
10518: LD_VAR 0 2
10522: PPUSH
10523: LD_VAR 0 7
10527: PPUSH
10528: CALL_OW 1
10532: ST_TO_ADDR
// result := tab ;
10533: LD_ADDR_VAR 0 5
10537: PUSH
10538: LD_VAR 0 1
10542: ST_TO_ADDR
// end ;
10543: LD_VAR 0 5
10547: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
10548: LD_INT 0
10550: PPUSH
10551: PPUSH
10552: PPUSH
// if not GetControl ( veh ) = control_manual then
10553: LD_VAR 0 1
10557: PPUSH
10558: CALL_OW 263
10562: PUSH
10563: LD_INT 1
10565: EQUAL
10566: NOT
10567: IFFALSE 10579
// result := false else
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_INT 0
10576: ST_TO_ADDR
10577: GO 10724
// if veh in FilterAllUnits ( [ f_empty ] ) then
10579: LD_VAR 0 1
10583: PUSH
10584: LD_INT 58
10586: PUSH
10587: EMPTY
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: IN
10595: IFFALSE 10607
// result := false else
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_INT 0
10604: ST_TO_ADDR
10605: GO 10724
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
10607: LD_ADDR_VAR 0 4
10611: PUSH
10612: LD_INT 22
10614: PUSH
10615: LD_VAR 0 1
10619: PPUSH
10620: CALL_OW 255
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 55
10631: PUSH
10632: EMPTY
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PPUSH
10639: CALL_OW 69
10643: ST_TO_ADDR
// if not filter then
10644: LD_VAR 0 4
10648: NOT
10649: IFFALSE 10661
// result := false else
10651: LD_ADDR_VAR 0 2
10655: PUSH
10656: LD_INT 0
10658: ST_TO_ADDR
10659: GO 10724
// for i = 1 to filter do
10661: LD_ADDR_VAR 0 3
10665: PUSH
10666: DOUBLE
10667: LD_INT 1
10669: DEC
10670: ST_TO_ADDR
10671: LD_VAR 0 4
10675: PUSH
10676: FOR_TO
10677: IFFALSE 10722
// if IsDriver ( filter [ i ] ) = veh then
10679: LD_VAR 0 4
10683: PUSH
10684: LD_VAR 0 3
10688: ARRAY
10689: PPUSH
10690: CALL 69590 0 1
10694: PUSH
10695: LD_VAR 0 1
10699: EQUAL
10700: IFFALSE 10720
// begin result := filter [ i ] ;
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_VAR 0 4
10711: PUSH
10712: LD_VAR 0 3
10716: ARRAY
10717: ST_TO_ADDR
// break ;
10718: GO 10722
// end ;
10720: GO 10676
10722: POP
10723: POP
// end ; end ;
10724: LD_VAR 0 2
10728: RET
// export function FindTarget ( unit ) ; begin
10729: LD_INT 0
10731: PPUSH
// result := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 81
10739: PUSH
10740: LD_VAR 0 1
10744: PPUSH
10745: CALL_OW 255
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: PPUSH
10759: LD_VAR 0 1
10763: PPUSH
10764: CALL_OW 74
10768: ST_TO_ADDR
// end ;
10769: LD_VAR 0 2
10773: RET
// export function NearestUnit ( unit ) ; begin
10774: LD_INT 0
10776: PPUSH
// result := NearestUnitToUnit ( all_units diff unit , unit ) ;
10777: LD_ADDR_VAR 0 2
10781: PUSH
10782: LD_OWVAR 3
10786: PUSH
10787: LD_VAR 0 1
10791: DIFF
10792: PPUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 74
10802: ST_TO_ADDR
// end ; end_of_file
10803: LD_VAR 0 2
10807: RET
// every 12 12$00 do
10808: GO 10810
10810: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
10811: LD_INT 1
10813: PPUSH
10814: LD_INT 570
10816: PPUSH
10817: LD_INT 350
10819: PPUSH
10820: CALL_OW 550
// Wait ( Rand ( 5 5$00 , 10 10$00 ) ) ;
10824: LD_INT 10500
10826: PPUSH
10827: LD_INT 21000
10829: PPUSH
10830: CALL_OW 12
10834: PPUSH
10835: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
10839: LD_INT 0
10841: PPUSH
10842: LD_INT 570
10844: PPUSH
10845: LD_INT 350
10847: PPUSH
10848: CALL_OW 550
// end ;
10852: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
10853: LD_INT 0
10855: PPUSH
10856: PPUSH
10857: PPUSH
10858: PPUSH
10859: PPUSH
// uc_nation = nation_nature ;
10860: LD_ADDR_OWVAR 21
10864: PUSH
10865: LD_INT 0
10867: ST_TO_ADDR
// uc_side = 0 ;
10868: LD_ADDR_OWVAR 20
10872: PUSH
10873: LD_INT 0
10875: ST_TO_ADDR
// l = 0 ;
10876: LD_ADDR_VAR 0 6
10880: PUSH
10881: LD_INT 0
10883: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
10884: LD_ADDR_OWVAR 24
10888: PUSH
10889: LD_INT 0
10891: PPUSH
10892: LD_INT 5
10894: PPUSH
10895: CALL_OW 12
10899: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
10900: LD_ADDR_OWVAR 35
10904: PUSH
10905: LD_INT 5
10907: NEG
10908: PPUSH
10909: LD_INT 5
10911: PPUSH
10912: CALL_OW 12
10916: ST_TO_ADDR
// hc_gallery =  ;
10917: LD_ADDR_OWVAR 33
10921: PUSH
10922: LD_STRING 
10924: ST_TO_ADDR
// hc_class = class_apeman ;
10925: LD_ADDR_OWVAR 28
10929: PUSH
10930: LD_INT 12
10932: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
10933: LD_ADDR_OWVAR 29
10937: PUSH
10938: LD_INT 11
10940: PPUSH
10941: LD_INT 13
10943: PPUSH
10944: CALL_OW 12
10948: PUSH
10949: LD_INT 10
10951: PPUSH
10952: LD_INT 11
10954: PPUSH
10955: CALL_OW 12
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
// hc_sex = sex_male ;
10964: LD_ADDR_OWVAR 27
10968: PUSH
10969: LD_INT 1
10971: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
10972: LD_ADDR_OWVAR 31
10976: PUSH
10977: LD_INT 0
10979: PPUSH
10980: LD_INT 2
10982: PPUSH
10983: CALL_OW 12
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: LD_INT 0
10993: PUSH
10994: LD_INT 0
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: ST_TO_ADDR
// apeman = CreateHuman ;
11003: LD_ADDR_VAR 0 7
11007: PUSH
11008: CALL_OW 44
11012: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
11013: LD_VAR 0 7
11017: PPUSH
11018: LD_VAR 0 4
11022: PPUSH
11023: LD_INT 0
11025: PPUSH
11026: CALL_OW 49
// l = l + 1 ;
11030: LD_ADDR_VAR 0 6
11034: PUSH
11035: LD_VAR 0 6
11039: PUSH
11040: LD_INT 1
11042: PLUS
11043: ST_TO_ADDR
// end until l = num1 ;
11044: LD_VAR 0 6
11048: PUSH
11049: LD_VAR 0 1
11053: EQUAL
11054: IFFALSE 10884
// l = 0 ;
11056: LD_ADDR_VAR 0 6
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
11064: LD_ADDR_OWVAR 35
11068: PUSH
11069: LD_INT 0
11071: PPUSH
11072: LD_INT 25
11074: PPUSH
11075: CALL_OW 12
11079: ST_TO_ADDR
// hc_class = class_tiger ;
11080: LD_ADDR_OWVAR 28
11084: PUSH
11085: LD_INT 14
11087: ST_TO_ADDR
// hc_sex = sex_male ;
11088: LD_ADDR_OWVAR 27
11092: PUSH
11093: LD_INT 1
11095: ST_TO_ADDR
// hc_gallery = sandnature ;
11096: LD_ADDR_OWVAR 33
11100: PUSH
11101: LD_STRING sandnature
11103: ST_TO_ADDR
// hc_face_number = 3 ;
11104: LD_ADDR_OWVAR 34
11108: PUSH
11109: LD_INT 3
11111: ST_TO_ADDR
// tiger = CreateHuman ;
11112: LD_ADDR_VAR 0 8
11116: PUSH
11117: CALL_OW 44
11121: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
11122: LD_VAR 0 8
11126: PPUSH
11127: LD_VAR 0 4
11131: PPUSH
11132: LD_INT 0
11134: PPUSH
11135: CALL_OW 49
// l = l + 1 ;
11139: LD_ADDR_VAR 0 6
11143: PUSH
11144: LD_VAR 0 6
11148: PUSH
11149: LD_INT 1
11151: PLUS
11152: ST_TO_ADDR
// end until l = num2 ;
11153: LD_VAR 0 6
11157: PUSH
11158: LD_VAR 0 2
11162: EQUAL
11163: IFFALSE 11064
// l = 0 ;
11165: LD_ADDR_VAR 0 6
11169: PUSH
11170: LD_INT 0
11172: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
11173: LD_ADDR_OWVAR 28
11177: PUSH
11178: LD_INT 18
11180: ST_TO_ADDR
// hc_gallery = sandnature ;
11181: LD_ADDR_OWVAR 33
11185: PUSH
11186: LD_STRING sandnature
11188: ST_TO_ADDR
// hc_face_number = 1 ;
11189: LD_ADDR_OWVAR 34
11193: PUSH
11194: LD_INT 1
11196: ST_TO_ADDR
// bird = CreateHuman ;
11197: LD_ADDR_VAR 0 9
11201: PUSH
11202: CALL_OW 44
11206: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
11207: LD_VAR 0 9
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: CALL_OW 51
// l = l + 1 ;
11219: LD_ADDR_VAR 0 6
11223: PUSH
11224: LD_VAR 0 6
11228: PUSH
11229: LD_INT 1
11231: PLUS
11232: ST_TO_ADDR
// end until l = num3 ;
11233: LD_VAR 0 6
11237: PUSH
11238: LD_VAR 0 3
11242: EQUAL
11243: IFFALSE 11173
// end ; end_of_file end_of_file
11245: LD_VAR 0 5
11249: RET
// export globalGameSaveCounter ; every 0 0$1 do
11250: GO 11252
11252: DISABLE
// begin enable ;
11253: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
11254: LD_STRING updateTimer(
11256: PUSH
11257: LD_OWVAR 1
11261: STR
11262: PUSH
11263: LD_STRING );
11265: STR
11266: PPUSH
11267: CALL_OW 559
// end ;
11271: END
// every 0 0$1 do
11272: GO 11274
11274: DISABLE
// begin globalGameSaveCounter := 0 ;
11275: LD_ADDR_EXP 26
11279: PUSH
11280: LD_INT 0
11282: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
11283: LD_STRING setGameSaveCounter(0)
11285: PPUSH
11286: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
11290: LD_STRING initStreamRollete();
11292: PPUSH
11293: CALL_OW 559
// InitStreamMode ;
11297: CALL 12649 0 0
// DefineStreamItems ( false ) ;
11301: LD_INT 0
11303: PPUSH
11304: CALL 13113 0 1
// end ;
11308: END
// export function SOS_MapStart ( ) ; begin
11309: LD_INT 0
11311: PPUSH
// if streamModeActive then
11312: LD_EXP 27
11316: IFFALSE 11325
// DefineStreamItems ( true ) ;
11318: LD_INT 1
11320: PPUSH
11321: CALL 13113 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
11325: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
11327: PPUSH
11328: CALL_OW 559
// UpdateLuaVariables ( ) ;
11332: CALL 11349 0 0
// UpdateFactoryWaypoints ( ) ;
11336: CALL 26235 0 0
// UpdateWarehouseGatheringPoints ( ) ;
11340: CALL 26487 0 0
// end ;
11344: LD_VAR 0 1
11348: RET
// function UpdateLuaVariables ( ) ; begin
11349: LD_INT 0
11351: PPUSH
// if globalGameSaveCounter then
11352: LD_EXP 26
11356: IFFALSE 11390
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
11358: LD_ADDR_EXP 26
11362: PUSH
11363: LD_EXP 26
11367: PPUSH
11368: CALL 73383 0 1
11372: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11373: LD_STRING setGameSaveCounter(
11375: PUSH
11376: LD_EXP 26
11380: STR
11381: PUSH
11382: LD_STRING )
11384: STR
11385: PPUSH
11386: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
11390: LD_STRING setGameDifficulty(
11392: PUSH
11393: LD_OWVAR 67
11397: STR
11398: PUSH
11399: LD_STRING )
11401: STR
11402: PPUSH
11403: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
11407: LD_STRING displayDifficulty(
11409: PUSH
11410: LD_OWVAR 67
11414: STR
11415: PUSH
11416: LD_STRING )
11418: STR
11419: PPUSH
11420: CALL_OW 559
// end ;
11424: LD_VAR 0 1
11428: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
11429: LD_INT 0
11431: PPUSH
// if p2 = stream_mode then
11432: LD_VAR 0 2
11436: PUSH
11437: LD_INT 100
11439: EQUAL
11440: IFFALSE 12443
// begin if not StreamModeActive then
11442: LD_EXP 27
11446: NOT
11447: IFFALSE 11457
// StreamModeActive := true ;
11449: LD_ADDR_EXP 27
11453: PUSH
11454: LD_INT 1
11456: ST_TO_ADDR
// if p3 = 0 then
11457: LD_VAR 0 3
11461: PUSH
11462: LD_INT 0
11464: EQUAL
11465: IFFALSE 11471
// InitStreamMode ;
11467: CALL 12649 0 0
// if p3 = 1 then
11471: LD_VAR 0 3
11475: PUSH
11476: LD_INT 1
11478: EQUAL
11479: IFFALSE 11489
// sRocket := true ;
11481: LD_ADDR_EXP 32
11485: PUSH
11486: LD_INT 1
11488: ST_TO_ADDR
// if p3 = 2 then
11489: LD_VAR 0 3
11493: PUSH
11494: LD_INT 2
11496: EQUAL
11497: IFFALSE 11507
// sSpeed := true ;
11499: LD_ADDR_EXP 31
11503: PUSH
11504: LD_INT 1
11506: ST_TO_ADDR
// if p3 = 3 then
11507: LD_VAR 0 3
11511: PUSH
11512: LD_INT 3
11514: EQUAL
11515: IFFALSE 11525
// sEngine := true ;
11517: LD_ADDR_EXP 33
11521: PUSH
11522: LD_INT 1
11524: ST_TO_ADDR
// if p3 = 4 then
11525: LD_VAR 0 3
11529: PUSH
11530: LD_INT 4
11532: EQUAL
11533: IFFALSE 11543
// sSpec := true ;
11535: LD_ADDR_EXP 30
11539: PUSH
11540: LD_INT 1
11542: ST_TO_ADDR
// if p3 = 5 then
11543: LD_VAR 0 3
11547: PUSH
11548: LD_INT 5
11550: EQUAL
11551: IFFALSE 11561
// sLevel := true ;
11553: LD_ADDR_EXP 34
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// if p3 = 6 then
11561: LD_VAR 0 3
11565: PUSH
11566: LD_INT 6
11568: EQUAL
11569: IFFALSE 11579
// sArmoury := true ;
11571: LD_ADDR_EXP 35
11575: PUSH
11576: LD_INT 1
11578: ST_TO_ADDR
// if p3 = 7 then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_INT 7
11586: EQUAL
11587: IFFALSE 11597
// sRadar := true ;
11589: LD_ADDR_EXP 36
11593: PUSH
11594: LD_INT 1
11596: ST_TO_ADDR
// if p3 = 8 then
11597: LD_VAR 0 3
11601: PUSH
11602: LD_INT 8
11604: EQUAL
11605: IFFALSE 11615
// sBunker := true ;
11607: LD_ADDR_EXP 37
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
// if p3 = 9 then
11615: LD_VAR 0 3
11619: PUSH
11620: LD_INT 9
11622: EQUAL
11623: IFFALSE 11633
// sHack := true ;
11625: LD_ADDR_EXP 38
11629: PUSH
11630: LD_INT 1
11632: ST_TO_ADDR
// if p3 = 10 then
11633: LD_VAR 0 3
11637: PUSH
11638: LD_INT 10
11640: EQUAL
11641: IFFALSE 11651
// sFire := true ;
11643: LD_ADDR_EXP 39
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// if p3 = 11 then
11651: LD_VAR 0 3
11655: PUSH
11656: LD_INT 11
11658: EQUAL
11659: IFFALSE 11669
// sRefresh := true ;
11661: LD_ADDR_EXP 40
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// if p3 = 12 then
11669: LD_VAR 0 3
11673: PUSH
11674: LD_INT 12
11676: EQUAL
11677: IFFALSE 11687
// sExp := true ;
11679: LD_ADDR_EXP 41
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// if p3 = 13 then
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 13
11694: EQUAL
11695: IFFALSE 11705
// sDepot := true ;
11697: LD_ADDR_EXP 42
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
// if p3 = 14 then
11705: LD_VAR 0 3
11709: PUSH
11710: LD_INT 14
11712: EQUAL
11713: IFFALSE 11723
// sFlag := true ;
11715: LD_ADDR_EXP 43
11719: PUSH
11720: LD_INT 1
11722: ST_TO_ADDR
// if p3 = 15 then
11723: LD_VAR 0 3
11727: PUSH
11728: LD_INT 15
11730: EQUAL
11731: IFFALSE 11741
// sKamikadze := true ;
11733: LD_ADDR_EXP 51
11737: PUSH
11738: LD_INT 1
11740: ST_TO_ADDR
// if p3 = 16 then
11741: LD_VAR 0 3
11745: PUSH
11746: LD_INT 16
11748: EQUAL
11749: IFFALSE 11759
// sTroll := true ;
11751: LD_ADDR_EXP 52
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// if p3 = 17 then
11759: LD_VAR 0 3
11763: PUSH
11764: LD_INT 17
11766: EQUAL
11767: IFFALSE 11777
// sSlow := true ;
11769: LD_ADDR_EXP 53
11773: PUSH
11774: LD_INT 1
11776: ST_TO_ADDR
// if p3 = 18 then
11777: LD_VAR 0 3
11781: PUSH
11782: LD_INT 18
11784: EQUAL
11785: IFFALSE 11795
// sLack := true ;
11787: LD_ADDR_EXP 54
11791: PUSH
11792: LD_INT 1
11794: ST_TO_ADDR
// if p3 = 19 then
11795: LD_VAR 0 3
11799: PUSH
11800: LD_INT 19
11802: EQUAL
11803: IFFALSE 11813
// sTank := true ;
11805: LD_ADDR_EXP 56
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// if p3 = 20 then
11813: LD_VAR 0 3
11817: PUSH
11818: LD_INT 20
11820: EQUAL
11821: IFFALSE 11831
// sRemote := true ;
11823: LD_ADDR_EXP 57
11827: PUSH
11828: LD_INT 1
11830: ST_TO_ADDR
// if p3 = 21 then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_INT 21
11838: EQUAL
11839: IFFALSE 11849
// sPowell := true ;
11841: LD_ADDR_EXP 58
11845: PUSH
11846: LD_INT 1
11848: ST_TO_ADDR
// if p3 = 22 then
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 22
11856: EQUAL
11857: IFFALSE 11867
// sTeleport := true ;
11859: LD_ADDR_EXP 61
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// if p3 = 23 then
11867: LD_VAR 0 3
11871: PUSH
11872: LD_INT 23
11874: EQUAL
11875: IFFALSE 11885
// sOilTower := true ;
11877: LD_ADDR_EXP 63
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// if p3 = 24 then
11885: LD_VAR 0 3
11889: PUSH
11890: LD_INT 24
11892: EQUAL
11893: IFFALSE 11903
// sShovel := true ;
11895: LD_ADDR_EXP 64
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// if p3 = 25 then
11903: LD_VAR 0 3
11907: PUSH
11908: LD_INT 25
11910: EQUAL
11911: IFFALSE 11921
// sSheik := true ;
11913: LD_ADDR_EXP 65
11917: PUSH
11918: LD_INT 1
11920: ST_TO_ADDR
// if p3 = 26 then
11921: LD_VAR 0 3
11925: PUSH
11926: LD_INT 26
11928: EQUAL
11929: IFFALSE 11939
// sEarthquake := true ;
11931: LD_ADDR_EXP 67
11935: PUSH
11936: LD_INT 1
11938: ST_TO_ADDR
// if p3 = 27 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 27
11946: EQUAL
11947: IFFALSE 11957
// sAI := true ;
11949: LD_ADDR_EXP 68
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 28 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 28
11964: EQUAL
11965: IFFALSE 11975
// sCargo := true ;
11967: LD_ADDR_EXP 71
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 29 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 29
11982: EQUAL
11983: IFFALSE 11993
// sDLaser := true ;
11985: LD_ADDR_EXP 72
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 30 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 30
12000: EQUAL
12001: IFFALSE 12011
// sExchange := true ;
12003: LD_ADDR_EXP 73
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 31 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 31
12018: EQUAL
12019: IFFALSE 12029
// sFac := true ;
12021: LD_ADDR_EXP 74
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 32 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 32
12036: EQUAL
12037: IFFALSE 12047
// sPower := true ;
12039: LD_ADDR_EXP 75
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 33 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 33
12054: EQUAL
12055: IFFALSE 12065
// sRandom := true ;
12057: LD_ADDR_EXP 76
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 34 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 34
12072: EQUAL
12073: IFFALSE 12083
// sShield := true ;
12075: LD_ADDR_EXP 77
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 35 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 35
12090: EQUAL
12091: IFFALSE 12101
// sTime := true ;
12093: LD_ADDR_EXP 78
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 36 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 36
12108: EQUAL
12109: IFFALSE 12119
// sTools := true ;
12111: LD_ADDR_EXP 79
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 101 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 101
12126: EQUAL
12127: IFFALSE 12137
// sSold := true ;
12129: LD_ADDR_EXP 44
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 102 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 102
12144: EQUAL
12145: IFFALSE 12155
// sDiff := true ;
12147: LD_ADDR_EXP 45
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 103 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 103
12162: EQUAL
12163: IFFALSE 12173
// sFog := true ;
12165: LD_ADDR_EXP 48
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 104 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 104
12180: EQUAL
12181: IFFALSE 12191
// sReset := true ;
12183: LD_ADDR_EXP 49
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 105 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 105
12198: EQUAL
12199: IFFALSE 12209
// sSun := true ;
12201: LD_ADDR_EXP 50
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 106 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 106
12216: EQUAL
12217: IFFALSE 12227
// sTiger := true ;
12219: LD_ADDR_EXP 46
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 107 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 107
12234: EQUAL
12235: IFFALSE 12245
// sBomb := true ;
12237: LD_ADDR_EXP 47
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 108 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 108
12252: EQUAL
12253: IFFALSE 12263
// sWound := true ;
12255: LD_ADDR_EXP 55
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 109 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 109
12270: EQUAL
12271: IFFALSE 12281
// sBetray := true ;
12273: LD_ADDR_EXP 59
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 110 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 110
12288: EQUAL
12289: IFFALSE 12299
// sContamin := true ;
12291: LD_ADDR_EXP 60
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 111 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 111
12306: EQUAL
12307: IFFALSE 12317
// sOil := true ;
12309: LD_ADDR_EXP 62
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 112 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 112
12324: EQUAL
12325: IFFALSE 12335
// sStu := true ;
12327: LD_ADDR_EXP 66
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 113 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 113
12342: EQUAL
12343: IFFALSE 12353
// sBazooka := true ;
12345: LD_ADDR_EXP 69
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 114 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 114
12360: EQUAL
12361: IFFALSE 12371
// sMortar := true ;
12363: LD_ADDR_EXP 70
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 115 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 115
12378: EQUAL
12379: IFFALSE 12389
// sRanger := true ;
12381: LD_ADDR_EXP 80
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 116 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 116
12396: EQUAL
12397: IFFALSE 12407
// sComputer := true ;
12399: LD_ADDR_EXP 81
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 117 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 117
12414: EQUAL
12415: IFFALSE 12425
// s30 := true ;
12417: LD_ADDR_EXP 82
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 118 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 118
12432: EQUAL
12433: IFFALSE 12443
// s60 := true ;
12435: LD_ADDR_EXP 83
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// end ; if p2 = hack_mode then
12443: LD_VAR 0 2
12447: PUSH
12448: LD_INT 101
12450: EQUAL
12451: IFFALSE 12579
// begin case p3 of 1 :
12453: LD_VAR 0 3
12457: PUSH
12458: LD_INT 1
12460: DOUBLE
12461: EQUAL
12462: IFTRUE 12466
12464: GO 12473
12466: POP
// hHackUnlimitedResources ; 2 :
12467: CALL 24842 0 0
12471: GO 12579
12473: LD_INT 2
12475: DOUBLE
12476: EQUAL
12477: IFTRUE 12481
12479: GO 12488
12481: POP
// hHackSetLevel10 ; 3 :
12482: CALL 24975 0 0
12486: GO 12579
12488: LD_INT 3
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12503
12496: POP
// hHackSetLevel10YourUnits ; 4 :
12497: CALL 25060 0 0
12501: GO 12579
12503: LD_INT 4
12505: DOUBLE
12506: EQUAL
12507: IFTRUE 12511
12509: GO 12518
12511: POP
// hHackInvincible ; 5 :
12512: CALL 25508 0 0
12516: GO 12579
12518: LD_INT 5
12520: DOUBLE
12521: EQUAL
12522: IFTRUE 12526
12524: GO 12533
12526: POP
// hHackInvisible ; 6 :
12527: CALL 25619 0 0
12531: GO 12579
12533: LD_INT 6
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12548
12541: POP
// hHackChangeYourSide ; 7 :
12542: CALL 25676 0 0
12546: GO 12579
12548: LD_INT 7
12550: DOUBLE
12551: EQUAL
12552: IFTRUE 12556
12554: GO 12563
12556: POP
// hHackChangeUnitSide ; 8 :
12557: CALL 25718 0 0
12561: GO 12579
12563: LD_INT 8
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12578
12571: POP
// hHackFog ; end ;
12572: CALL 25819 0 0
12576: GO 12579
12578: POP
// end ; if p2 = game_save_mode then
12579: LD_VAR 0 2
12583: PUSH
12584: LD_INT 102
12586: EQUAL
12587: IFFALSE 12644
// begin if p3 = 1 then
12589: LD_VAR 0 3
12593: PUSH
12594: LD_INT 1
12596: EQUAL
12597: IFFALSE 12609
// globalGameSaveCounter := p4 ;
12599: LD_ADDR_EXP 26
12603: PUSH
12604: LD_VAR 0 4
12608: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
12609: LD_VAR 0 3
12613: PUSH
12614: LD_INT 2
12616: EQUAL
12617: IFFALSE 12625
12619: PUSH
12620: LD_EXP 26
12624: AND
12625: IFFALSE 12644
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12627: LD_STRING setGameSaveCounter(
12629: PUSH
12630: LD_EXP 26
12634: STR
12635: PUSH
12636: LD_STRING )
12638: STR
12639: PPUSH
12640: CALL_OW 559
// end ; end ;
12644: LD_VAR 0 7
12648: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
12649: LD_INT 0
12651: PPUSH
// streamModeActive := false ;
12652: LD_ADDR_EXP 27
12656: PUSH
12657: LD_INT 0
12659: ST_TO_ADDR
// normalCounter := 36 ;
12660: LD_ADDR_EXP 28
12664: PUSH
12665: LD_INT 36
12667: ST_TO_ADDR
// hardcoreCounter := 18 ;
12668: LD_ADDR_EXP 29
12672: PUSH
12673: LD_INT 18
12675: ST_TO_ADDR
// sRocket := false ;
12676: LD_ADDR_EXP 32
12680: PUSH
12681: LD_INT 0
12683: ST_TO_ADDR
// sSpeed := false ;
12684: LD_ADDR_EXP 31
12688: PUSH
12689: LD_INT 0
12691: ST_TO_ADDR
// sEngine := false ;
12692: LD_ADDR_EXP 33
12696: PUSH
12697: LD_INT 0
12699: ST_TO_ADDR
// sSpec := false ;
12700: LD_ADDR_EXP 30
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// sLevel := false ;
12708: LD_ADDR_EXP 34
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// sArmoury := false ;
12716: LD_ADDR_EXP 35
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// sRadar := false ;
12724: LD_ADDR_EXP 36
12728: PUSH
12729: LD_INT 0
12731: ST_TO_ADDR
// sBunker := false ;
12732: LD_ADDR_EXP 37
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// sHack := false ;
12740: LD_ADDR_EXP 38
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// sFire := false ;
12748: LD_ADDR_EXP 39
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// sRefresh := false ;
12756: LD_ADDR_EXP 40
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// sExp := false ;
12764: LD_ADDR_EXP 41
12768: PUSH
12769: LD_INT 0
12771: ST_TO_ADDR
// sDepot := false ;
12772: LD_ADDR_EXP 42
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// sFlag := false ;
12780: LD_ADDR_EXP 43
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// sKamikadze := false ;
12788: LD_ADDR_EXP 51
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// sTroll := false ;
12796: LD_ADDR_EXP 52
12800: PUSH
12801: LD_INT 0
12803: ST_TO_ADDR
// sSlow := false ;
12804: LD_ADDR_EXP 53
12808: PUSH
12809: LD_INT 0
12811: ST_TO_ADDR
// sLack := false ;
12812: LD_ADDR_EXP 54
12816: PUSH
12817: LD_INT 0
12819: ST_TO_ADDR
// sTank := false ;
12820: LD_ADDR_EXP 56
12824: PUSH
12825: LD_INT 0
12827: ST_TO_ADDR
// sRemote := false ;
12828: LD_ADDR_EXP 57
12832: PUSH
12833: LD_INT 0
12835: ST_TO_ADDR
// sPowell := false ;
12836: LD_ADDR_EXP 58
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// sTeleport := false ;
12844: LD_ADDR_EXP 61
12848: PUSH
12849: LD_INT 0
12851: ST_TO_ADDR
// sOilTower := false ;
12852: LD_ADDR_EXP 63
12856: PUSH
12857: LD_INT 0
12859: ST_TO_ADDR
// sShovel := false ;
12860: LD_ADDR_EXP 64
12864: PUSH
12865: LD_INT 0
12867: ST_TO_ADDR
// sSheik := false ;
12868: LD_ADDR_EXP 65
12872: PUSH
12873: LD_INT 0
12875: ST_TO_ADDR
// sEarthquake := false ;
12876: LD_ADDR_EXP 67
12880: PUSH
12881: LD_INT 0
12883: ST_TO_ADDR
// sAI := false ;
12884: LD_ADDR_EXP 68
12888: PUSH
12889: LD_INT 0
12891: ST_TO_ADDR
// sCargo := false ;
12892: LD_ADDR_EXP 71
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// sDLaser := false ;
12900: LD_ADDR_EXP 72
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// sExchange := false ;
12908: LD_ADDR_EXP 73
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// sFac := false ;
12916: LD_ADDR_EXP 74
12920: PUSH
12921: LD_INT 0
12923: ST_TO_ADDR
// sPower := false ;
12924: LD_ADDR_EXP 75
12928: PUSH
12929: LD_INT 0
12931: ST_TO_ADDR
// sRandom := false ;
12932: LD_ADDR_EXP 76
12936: PUSH
12937: LD_INT 0
12939: ST_TO_ADDR
// sShield := false ;
12940: LD_ADDR_EXP 77
12944: PUSH
12945: LD_INT 0
12947: ST_TO_ADDR
// sTime := false ;
12948: LD_ADDR_EXP 78
12952: PUSH
12953: LD_INT 0
12955: ST_TO_ADDR
// sTools := false ;
12956: LD_ADDR_EXP 79
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// sSold := false ;
12964: LD_ADDR_EXP 44
12968: PUSH
12969: LD_INT 0
12971: ST_TO_ADDR
// sDiff := false ;
12972: LD_ADDR_EXP 45
12976: PUSH
12977: LD_INT 0
12979: ST_TO_ADDR
// sFog := false ;
12980: LD_ADDR_EXP 48
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// sReset := false ;
12988: LD_ADDR_EXP 49
12992: PUSH
12993: LD_INT 0
12995: ST_TO_ADDR
// sSun := false ;
12996: LD_ADDR_EXP 50
13000: PUSH
13001: LD_INT 0
13003: ST_TO_ADDR
// sTiger := false ;
13004: LD_ADDR_EXP 46
13008: PUSH
13009: LD_INT 0
13011: ST_TO_ADDR
// sBomb := false ;
13012: LD_ADDR_EXP 47
13016: PUSH
13017: LD_INT 0
13019: ST_TO_ADDR
// sWound := false ;
13020: LD_ADDR_EXP 55
13024: PUSH
13025: LD_INT 0
13027: ST_TO_ADDR
// sBetray := false ;
13028: LD_ADDR_EXP 59
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// sContamin := false ;
13036: LD_ADDR_EXP 60
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// sOil := false ;
13044: LD_ADDR_EXP 62
13048: PUSH
13049: LD_INT 0
13051: ST_TO_ADDR
// sStu := false ;
13052: LD_ADDR_EXP 66
13056: PUSH
13057: LD_INT 0
13059: ST_TO_ADDR
// sBazooka := false ;
13060: LD_ADDR_EXP 69
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// sMortar := false ;
13068: LD_ADDR_EXP 70
13072: PUSH
13073: LD_INT 0
13075: ST_TO_ADDR
// sRanger := false ;
13076: LD_ADDR_EXP 80
13080: PUSH
13081: LD_INT 0
13083: ST_TO_ADDR
// sComputer := false ;
13084: LD_ADDR_EXP 81
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// s30 := false ;
13092: LD_ADDR_EXP 82
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// s60 := false ;
13100: LD_ADDR_EXP 83
13104: PUSH
13105: LD_INT 0
13107: ST_TO_ADDR
// end ;
13108: LD_VAR 0 1
13112: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13113: LD_INT 0
13115: PPUSH
13116: PPUSH
13117: PPUSH
13118: PPUSH
13119: PPUSH
13120: PPUSH
13121: PPUSH
// result := [ ] ;
13122: LD_ADDR_VAR 0 2
13126: PUSH
13127: EMPTY
13128: ST_TO_ADDR
// if campaign_id = 1 then
13129: LD_OWVAR 69
13133: PUSH
13134: LD_INT 1
13136: EQUAL
13137: IFFALSE 16303
// begin case mission_number of 1 :
13139: LD_OWVAR 70
13143: PUSH
13144: LD_INT 1
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13228
13152: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13153: LD_ADDR_VAR 0 2
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: LD_INT 4
13163: PUSH
13164: LD_INT 11
13166: PUSH
13167: LD_INT 12
13169: PUSH
13170: LD_INT 15
13172: PUSH
13173: LD_INT 16
13175: PUSH
13176: LD_INT 22
13178: PUSH
13179: LD_INT 23
13181: PUSH
13182: LD_INT 26
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 101
13198: PUSH
13199: LD_INT 102
13201: PUSH
13202: LD_INT 106
13204: PUSH
13205: LD_INT 116
13207: PUSH
13208: LD_INT 117
13210: PUSH
13211: LD_INT 118
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: ST_TO_ADDR
13226: GO 16301
13228: LD_INT 2
13230: DOUBLE
13231: EQUAL
13232: IFTRUE 13236
13234: GO 13320
13236: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13237: LD_ADDR_VAR 0 2
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 4
13247: PUSH
13248: LD_INT 11
13250: PUSH
13251: LD_INT 12
13253: PUSH
13254: LD_INT 15
13256: PUSH
13257: LD_INT 16
13259: PUSH
13260: LD_INT 22
13262: PUSH
13263: LD_INT 23
13265: PUSH
13266: LD_INT 26
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 101
13282: PUSH
13283: LD_INT 102
13285: PUSH
13286: LD_INT 105
13288: PUSH
13289: LD_INT 106
13291: PUSH
13292: LD_INT 108
13294: PUSH
13295: LD_INT 116
13297: PUSH
13298: LD_INT 117
13300: PUSH
13301: LD_INT 118
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: ST_TO_ADDR
13318: GO 16301
13320: LD_INT 3
13322: DOUBLE
13323: EQUAL
13324: IFTRUE 13328
13326: GO 13416
13328: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13329: LD_ADDR_VAR 0 2
13333: PUSH
13334: LD_INT 2
13336: PUSH
13337: LD_INT 4
13339: PUSH
13340: LD_INT 5
13342: PUSH
13343: LD_INT 11
13345: PUSH
13346: LD_INT 12
13348: PUSH
13349: LD_INT 15
13351: PUSH
13352: LD_INT 16
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 26
13360: PUSH
13361: LD_INT 36
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 101
13378: PUSH
13379: LD_INT 102
13381: PUSH
13382: LD_INT 105
13384: PUSH
13385: LD_INT 106
13387: PUSH
13388: LD_INT 108
13390: PUSH
13391: LD_INT 116
13393: PUSH
13394: LD_INT 117
13396: PUSH
13397: LD_INT 118
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: ST_TO_ADDR
13414: GO 16301
13416: LD_INT 4
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13520
13424: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
13425: LD_ADDR_VAR 0 2
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: LD_INT 4
13435: PUSH
13436: LD_INT 5
13438: PUSH
13439: LD_INT 8
13441: PUSH
13442: LD_INT 11
13444: PUSH
13445: LD_INT 12
13447: PUSH
13448: LD_INT 15
13450: PUSH
13451: LD_INT 16
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_INT 23
13459: PUSH
13460: LD_INT 26
13462: PUSH
13463: LD_INT 36
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 101
13482: PUSH
13483: LD_INT 102
13485: PUSH
13486: LD_INT 105
13488: PUSH
13489: LD_INT 106
13491: PUSH
13492: LD_INT 108
13494: PUSH
13495: LD_INT 116
13497: PUSH
13498: LD_INT 117
13500: PUSH
13501: LD_INT 118
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: ST_TO_ADDR
13518: GO 16301
13520: LD_INT 5
13522: DOUBLE
13523: EQUAL
13524: IFTRUE 13528
13526: GO 13640
13528: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 4
13539: PUSH
13540: LD_INT 5
13542: PUSH
13543: LD_INT 6
13545: PUSH
13546: LD_INT 8
13548: PUSH
13549: LD_INT 11
13551: PUSH
13552: LD_INT 12
13554: PUSH
13555: LD_INT 15
13557: PUSH
13558: LD_INT 16
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 23
13566: PUSH
13567: LD_INT 25
13569: PUSH
13570: LD_INT 26
13572: PUSH
13573: LD_INT 36
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 101
13594: PUSH
13595: LD_INT 102
13597: PUSH
13598: LD_INT 105
13600: PUSH
13601: LD_INT 106
13603: PUSH
13604: LD_INT 108
13606: PUSH
13607: LD_INT 109
13609: PUSH
13610: LD_INT 112
13612: PUSH
13613: LD_INT 116
13615: PUSH
13616: LD_INT 117
13618: PUSH
13619: LD_INT 118
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: ST_TO_ADDR
13638: GO 16301
13640: LD_INT 6
13642: DOUBLE
13643: EQUAL
13644: IFTRUE 13648
13646: GO 13780
13648: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
13649: LD_ADDR_VAR 0 2
13653: PUSH
13654: LD_INT 2
13656: PUSH
13657: LD_INT 4
13659: PUSH
13660: LD_INT 5
13662: PUSH
13663: LD_INT 6
13665: PUSH
13666: LD_INT 8
13668: PUSH
13669: LD_INT 11
13671: PUSH
13672: LD_INT 12
13674: PUSH
13675: LD_INT 15
13677: PUSH
13678: LD_INT 16
13680: PUSH
13681: LD_INT 20
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 22
13689: PUSH
13690: LD_INT 23
13692: PUSH
13693: LD_INT 25
13695: PUSH
13696: LD_INT 26
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_INT 31
13704: PUSH
13705: LD_INT 32
13707: PUSH
13708: LD_INT 36
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 101
13734: PUSH
13735: LD_INT 102
13737: PUSH
13738: LD_INT 105
13740: PUSH
13741: LD_INT 106
13743: PUSH
13744: LD_INT 108
13746: PUSH
13747: LD_INT 109
13749: PUSH
13750: LD_INT 112
13752: PUSH
13753: LD_INT 116
13755: PUSH
13756: LD_INT 117
13758: PUSH
13759: LD_INT 118
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: ST_TO_ADDR
13778: GO 16301
13780: LD_INT 7
13782: DOUBLE
13783: EQUAL
13784: IFTRUE 13788
13786: GO 13900
13788: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
13789: LD_ADDR_VAR 0 2
13793: PUSH
13794: LD_INT 2
13796: PUSH
13797: LD_INT 4
13799: PUSH
13800: LD_INT 5
13802: PUSH
13803: LD_INT 7
13805: PUSH
13806: LD_INT 11
13808: PUSH
13809: LD_INT 12
13811: PUSH
13812: LD_INT 15
13814: PUSH
13815: LD_INT 16
13817: PUSH
13818: LD_INT 20
13820: PUSH
13821: LD_INT 21
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 23
13829: PUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 26
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 101
13854: PUSH
13855: LD_INT 102
13857: PUSH
13858: LD_INT 103
13860: PUSH
13861: LD_INT 105
13863: PUSH
13864: LD_INT 106
13866: PUSH
13867: LD_INT 108
13869: PUSH
13870: LD_INT 112
13872: PUSH
13873: LD_INT 116
13875: PUSH
13876: LD_INT 117
13878: PUSH
13879: LD_INT 118
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: ST_TO_ADDR
13898: GO 16301
13900: LD_INT 8
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 14048
13908: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13909: LD_ADDR_VAR 0 2
13913: PUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 4
13919: PUSH
13920: LD_INT 5
13922: PUSH
13923: LD_INT 6
13925: PUSH
13926: LD_INT 7
13928: PUSH
13929: LD_INT 8
13931: PUSH
13932: LD_INT 11
13934: PUSH
13935: LD_INT 12
13937: PUSH
13938: LD_INT 15
13940: PUSH
13941: LD_INT 16
13943: PUSH
13944: LD_INT 20
13946: PUSH
13947: LD_INT 21
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_INT 23
13955: PUSH
13956: LD_INT 25
13958: PUSH
13959: LD_INT 26
13961: PUSH
13962: LD_INT 30
13964: PUSH
13965: LD_INT 31
13967: PUSH
13968: LD_INT 32
13970: PUSH
13971: LD_INT 36
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 101
13998: PUSH
13999: LD_INT 102
14001: PUSH
14002: LD_INT 103
14004: PUSH
14005: LD_INT 105
14007: PUSH
14008: LD_INT 106
14010: PUSH
14011: LD_INT 108
14013: PUSH
14014: LD_INT 109
14016: PUSH
14017: LD_INT 112
14019: PUSH
14020: LD_INT 116
14022: PUSH
14023: LD_INT 117
14025: PUSH
14026: LD_INT 118
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: ST_TO_ADDR
14046: GO 16301
14048: LD_INT 9
14050: DOUBLE
14051: EQUAL
14052: IFTRUE 14056
14054: GO 14204
14056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 4
14067: PUSH
14068: LD_INT 5
14070: PUSH
14071: LD_INT 6
14073: PUSH
14074: LD_INT 7
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: LD_INT 11
14082: PUSH
14083: LD_INT 12
14085: PUSH
14086: LD_INT 15
14088: PUSH
14089: LD_INT 16
14091: PUSH
14092: LD_INT 20
14094: PUSH
14095: LD_INT 21
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_INT 23
14103: PUSH
14104: LD_INT 25
14106: PUSH
14107: LD_INT 26
14109: PUSH
14110: LD_INT 28
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: LD_INT 31
14118: PUSH
14119: LD_INT 32
14121: PUSH
14122: LD_INT 36
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 101
14150: PUSH
14151: LD_INT 102
14153: PUSH
14154: LD_INT 103
14156: PUSH
14157: LD_INT 105
14159: PUSH
14160: LD_INT 106
14162: PUSH
14163: LD_INT 108
14165: PUSH
14166: LD_INT 109
14168: PUSH
14169: LD_INT 112
14171: PUSH
14172: LD_INT 114
14174: PUSH
14175: LD_INT 116
14177: PUSH
14178: LD_INT 117
14180: PUSH
14181: LD_INT 118
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: ST_TO_ADDR
14202: GO 16301
14204: LD_INT 10
14206: DOUBLE
14207: EQUAL
14208: IFTRUE 14212
14210: GO 14408
14212: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: LD_INT 4
14223: PUSH
14224: LD_INT 5
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: LD_INT 7
14232: PUSH
14233: LD_INT 8
14235: PUSH
14236: LD_INT 9
14238: PUSH
14239: LD_INT 10
14241: PUSH
14242: LD_INT 11
14244: PUSH
14245: LD_INT 12
14247: PUSH
14248: LD_INT 13
14250: PUSH
14251: LD_INT 14
14253: PUSH
14254: LD_INT 15
14256: PUSH
14257: LD_INT 16
14259: PUSH
14260: LD_INT 17
14262: PUSH
14263: LD_INT 18
14265: PUSH
14266: LD_INT 19
14268: PUSH
14269: LD_INT 20
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 22
14277: PUSH
14278: LD_INT 23
14280: PUSH
14281: LD_INT 24
14283: PUSH
14284: LD_INT 25
14286: PUSH
14287: LD_INT 26
14289: PUSH
14290: LD_INT 28
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: LD_INT 31
14298: PUSH
14299: LD_INT 32
14301: PUSH
14302: LD_INT 36
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 101
14338: PUSH
14339: LD_INT 102
14341: PUSH
14342: LD_INT 103
14344: PUSH
14345: LD_INT 104
14347: PUSH
14348: LD_INT 105
14350: PUSH
14351: LD_INT 106
14353: PUSH
14354: LD_INT 107
14356: PUSH
14357: LD_INT 108
14359: PUSH
14360: LD_INT 109
14362: PUSH
14363: LD_INT 110
14365: PUSH
14366: LD_INT 111
14368: PUSH
14369: LD_INT 112
14371: PUSH
14372: LD_INT 114
14374: PUSH
14375: LD_INT 116
14377: PUSH
14378: LD_INT 117
14380: PUSH
14381: LD_INT 118
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: ST_TO_ADDR
14406: GO 16301
14408: LD_INT 11
14410: DOUBLE
14411: EQUAL
14412: IFTRUE 14416
14414: GO 14620
14416: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
14417: LD_ADDR_VAR 0 2
14421: PUSH
14422: LD_INT 2
14424: PUSH
14425: LD_INT 3
14427: PUSH
14428: LD_INT 4
14430: PUSH
14431: LD_INT 5
14433: PUSH
14434: LD_INT 6
14436: PUSH
14437: LD_INT 7
14439: PUSH
14440: LD_INT 8
14442: PUSH
14443: LD_INT 9
14445: PUSH
14446: LD_INT 10
14448: PUSH
14449: LD_INT 11
14451: PUSH
14452: LD_INT 12
14454: PUSH
14455: LD_INT 13
14457: PUSH
14458: LD_INT 14
14460: PUSH
14461: LD_INT 15
14463: PUSH
14464: LD_INT 16
14466: PUSH
14467: LD_INT 17
14469: PUSH
14470: LD_INT 18
14472: PUSH
14473: LD_INT 19
14475: PUSH
14476: LD_INT 20
14478: PUSH
14479: LD_INT 21
14481: PUSH
14482: LD_INT 22
14484: PUSH
14485: LD_INT 23
14487: PUSH
14488: LD_INT 24
14490: PUSH
14491: LD_INT 25
14493: PUSH
14494: LD_INT 26
14496: PUSH
14497: LD_INT 28
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 31
14505: PUSH
14506: LD_INT 32
14508: PUSH
14509: LD_INT 34
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 101
14550: PUSH
14551: LD_INT 102
14553: PUSH
14554: LD_INT 103
14556: PUSH
14557: LD_INT 104
14559: PUSH
14560: LD_INT 105
14562: PUSH
14563: LD_INT 106
14565: PUSH
14566: LD_INT 107
14568: PUSH
14569: LD_INT 108
14571: PUSH
14572: LD_INT 109
14574: PUSH
14575: LD_INT 110
14577: PUSH
14578: LD_INT 111
14580: PUSH
14581: LD_INT 112
14583: PUSH
14584: LD_INT 114
14586: PUSH
14587: LD_INT 116
14589: PUSH
14590: LD_INT 117
14592: PUSH
14593: LD_INT 118
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: ST_TO_ADDR
14618: GO 16301
14620: LD_INT 12
14622: DOUBLE
14623: EQUAL
14624: IFTRUE 14628
14626: GO 14848
14628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
14629: LD_ADDR_VAR 0 2
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: LD_INT 2
14639: PUSH
14640: LD_INT 3
14642: PUSH
14643: LD_INT 4
14645: PUSH
14646: LD_INT 5
14648: PUSH
14649: LD_INT 6
14651: PUSH
14652: LD_INT 7
14654: PUSH
14655: LD_INT 8
14657: PUSH
14658: LD_INT 9
14660: PUSH
14661: LD_INT 10
14663: PUSH
14664: LD_INT 11
14666: PUSH
14667: LD_INT 12
14669: PUSH
14670: LD_INT 13
14672: PUSH
14673: LD_INT 14
14675: PUSH
14676: LD_INT 15
14678: PUSH
14679: LD_INT 16
14681: PUSH
14682: LD_INT 17
14684: PUSH
14685: LD_INT 18
14687: PUSH
14688: LD_INT 19
14690: PUSH
14691: LD_INT 20
14693: PUSH
14694: LD_INT 21
14696: PUSH
14697: LD_INT 22
14699: PUSH
14700: LD_INT 23
14702: PUSH
14703: LD_INT 24
14705: PUSH
14706: LD_INT 25
14708: PUSH
14709: LD_INT 26
14711: PUSH
14712: LD_INT 27
14714: PUSH
14715: LD_INT 28
14717: PUSH
14718: LD_INT 30
14720: PUSH
14721: LD_INT 31
14723: PUSH
14724: LD_INT 32
14726: PUSH
14727: LD_INT 33
14729: PUSH
14730: LD_INT 34
14732: PUSH
14733: LD_INT 36
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 101
14774: PUSH
14775: LD_INT 102
14777: PUSH
14778: LD_INT 103
14780: PUSH
14781: LD_INT 104
14783: PUSH
14784: LD_INT 105
14786: PUSH
14787: LD_INT 106
14789: PUSH
14790: LD_INT 107
14792: PUSH
14793: LD_INT 108
14795: PUSH
14796: LD_INT 109
14798: PUSH
14799: LD_INT 110
14801: PUSH
14802: LD_INT 111
14804: PUSH
14805: LD_INT 112
14807: PUSH
14808: LD_INT 113
14810: PUSH
14811: LD_INT 114
14813: PUSH
14814: LD_INT 116
14816: PUSH
14817: LD_INT 117
14819: PUSH
14820: LD_INT 118
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: ST_TO_ADDR
14846: GO 16301
14848: LD_INT 13
14850: DOUBLE
14851: EQUAL
14852: IFTRUE 14856
14854: GO 15064
14856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14857: LD_ADDR_VAR 0 2
14861: PUSH
14862: LD_INT 1
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: LD_INT 4
14873: PUSH
14874: LD_INT 5
14876: PUSH
14877: LD_INT 8
14879: PUSH
14880: LD_INT 9
14882: PUSH
14883: LD_INT 10
14885: PUSH
14886: LD_INT 11
14888: PUSH
14889: LD_INT 12
14891: PUSH
14892: LD_INT 14
14894: PUSH
14895: LD_INT 15
14897: PUSH
14898: LD_INT 16
14900: PUSH
14901: LD_INT 17
14903: PUSH
14904: LD_INT 18
14906: PUSH
14907: LD_INT 19
14909: PUSH
14910: LD_INT 20
14912: PUSH
14913: LD_INT 21
14915: PUSH
14916: LD_INT 22
14918: PUSH
14919: LD_INT 23
14921: PUSH
14922: LD_INT 24
14924: PUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 26
14930: PUSH
14931: LD_INT 27
14933: PUSH
14934: LD_INT 28
14936: PUSH
14937: LD_INT 30
14939: PUSH
14940: LD_INT 31
14942: PUSH
14943: LD_INT 32
14945: PUSH
14946: LD_INT 33
14948: PUSH
14949: LD_INT 34
14951: PUSH
14952: LD_INT 36
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 101
14990: PUSH
14991: LD_INT 102
14993: PUSH
14994: LD_INT 103
14996: PUSH
14997: LD_INT 104
14999: PUSH
15000: LD_INT 105
15002: PUSH
15003: LD_INT 106
15005: PUSH
15006: LD_INT 107
15008: PUSH
15009: LD_INT 108
15011: PUSH
15012: LD_INT 109
15014: PUSH
15015: LD_INT 110
15017: PUSH
15018: LD_INT 111
15020: PUSH
15021: LD_INT 112
15023: PUSH
15024: LD_INT 113
15026: PUSH
15027: LD_INT 114
15029: PUSH
15030: LD_INT 116
15032: PUSH
15033: LD_INT 117
15035: PUSH
15036: LD_INT 118
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: ST_TO_ADDR
15062: GO 16301
15064: LD_INT 14
15066: DOUBLE
15067: EQUAL
15068: IFTRUE 15072
15070: GO 15296
15072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: LD_INT 3
15086: PUSH
15087: LD_INT 4
15089: PUSH
15090: LD_INT 5
15092: PUSH
15093: LD_INT 6
15095: PUSH
15096: LD_INT 7
15098: PUSH
15099: LD_INT 8
15101: PUSH
15102: LD_INT 9
15104: PUSH
15105: LD_INT 10
15107: PUSH
15108: LD_INT 11
15110: PUSH
15111: LD_INT 12
15113: PUSH
15114: LD_INT 13
15116: PUSH
15117: LD_INT 14
15119: PUSH
15120: LD_INT 15
15122: PUSH
15123: LD_INT 16
15125: PUSH
15126: LD_INT 17
15128: PUSH
15129: LD_INT 18
15131: PUSH
15132: LD_INT 19
15134: PUSH
15135: LD_INT 20
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_INT 23
15146: PUSH
15147: LD_INT 24
15149: PUSH
15150: LD_INT 25
15152: PUSH
15153: LD_INT 26
15155: PUSH
15156: LD_INT 27
15158: PUSH
15159: LD_INT 28
15161: PUSH
15162: LD_INT 29
15164: PUSH
15165: LD_INT 30
15167: PUSH
15168: LD_INT 31
15170: PUSH
15171: LD_INT 32
15173: PUSH
15174: LD_INT 33
15176: PUSH
15177: LD_INT 34
15179: PUSH
15180: LD_INT 36
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 101
15222: PUSH
15223: LD_INT 102
15225: PUSH
15226: LD_INT 103
15228: PUSH
15229: LD_INT 104
15231: PUSH
15232: LD_INT 105
15234: PUSH
15235: LD_INT 106
15237: PUSH
15238: LD_INT 107
15240: PUSH
15241: LD_INT 108
15243: PUSH
15244: LD_INT 109
15246: PUSH
15247: LD_INT 110
15249: PUSH
15250: LD_INT 111
15252: PUSH
15253: LD_INT 112
15255: PUSH
15256: LD_INT 113
15258: PUSH
15259: LD_INT 114
15261: PUSH
15262: LD_INT 116
15264: PUSH
15265: LD_INT 117
15267: PUSH
15268: LD_INT 118
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: ST_TO_ADDR
15294: GO 16301
15296: LD_INT 15
15298: DOUBLE
15299: EQUAL
15300: IFTRUE 15304
15302: GO 15528
15304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: LD_INT 2
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: LD_INT 4
15321: PUSH
15322: LD_INT 5
15324: PUSH
15325: LD_INT 6
15327: PUSH
15328: LD_INT 7
15330: PUSH
15331: LD_INT 8
15333: PUSH
15334: LD_INT 9
15336: PUSH
15337: LD_INT 10
15339: PUSH
15340: LD_INT 11
15342: PUSH
15343: LD_INT 12
15345: PUSH
15346: LD_INT 13
15348: PUSH
15349: LD_INT 14
15351: PUSH
15352: LD_INT 15
15354: PUSH
15355: LD_INT 16
15357: PUSH
15358: LD_INT 17
15360: PUSH
15361: LD_INT 18
15363: PUSH
15364: LD_INT 19
15366: PUSH
15367: LD_INT 20
15369: PUSH
15370: LD_INT 21
15372: PUSH
15373: LD_INT 22
15375: PUSH
15376: LD_INT 23
15378: PUSH
15379: LD_INT 24
15381: PUSH
15382: LD_INT 25
15384: PUSH
15385: LD_INT 26
15387: PUSH
15388: LD_INT 27
15390: PUSH
15391: LD_INT 28
15393: PUSH
15394: LD_INT 29
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: LD_INT 31
15402: PUSH
15403: LD_INT 32
15405: PUSH
15406: LD_INT 33
15408: PUSH
15409: LD_INT 34
15411: PUSH
15412: LD_INT 36
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 101
15454: PUSH
15455: LD_INT 102
15457: PUSH
15458: LD_INT 103
15460: PUSH
15461: LD_INT 104
15463: PUSH
15464: LD_INT 105
15466: PUSH
15467: LD_INT 106
15469: PUSH
15470: LD_INT 107
15472: PUSH
15473: LD_INT 108
15475: PUSH
15476: LD_INT 109
15478: PUSH
15479: LD_INT 110
15481: PUSH
15482: LD_INT 111
15484: PUSH
15485: LD_INT 112
15487: PUSH
15488: LD_INT 113
15490: PUSH
15491: LD_INT 114
15493: PUSH
15494: LD_INT 116
15496: PUSH
15497: LD_INT 117
15499: PUSH
15500: LD_INT 118
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: ST_TO_ADDR
15526: GO 16301
15528: LD_INT 16
15530: DOUBLE
15531: EQUAL
15532: IFTRUE 15536
15534: GO 15672
15536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_INT 2
15544: PUSH
15545: LD_INT 4
15547: PUSH
15548: LD_INT 5
15550: PUSH
15551: LD_INT 7
15553: PUSH
15554: LD_INT 11
15556: PUSH
15557: LD_INT 12
15559: PUSH
15560: LD_INT 15
15562: PUSH
15563: LD_INT 16
15565: PUSH
15566: LD_INT 20
15568: PUSH
15569: LD_INT 21
15571: PUSH
15572: LD_INT 22
15574: PUSH
15575: LD_INT 23
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 26
15583: PUSH
15584: LD_INT 30
15586: PUSH
15587: LD_INT 31
15589: PUSH
15590: LD_INT 32
15592: PUSH
15593: LD_INT 33
15595: PUSH
15596: LD_INT 34
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 101
15622: PUSH
15623: LD_INT 102
15625: PUSH
15626: LD_INT 103
15628: PUSH
15629: LD_INT 106
15631: PUSH
15632: LD_INT 108
15634: PUSH
15635: LD_INT 112
15637: PUSH
15638: LD_INT 113
15640: PUSH
15641: LD_INT 114
15643: PUSH
15644: LD_INT 116
15646: PUSH
15647: LD_INT 117
15649: PUSH
15650: LD_INT 118
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: ST_TO_ADDR
15670: GO 16301
15672: LD_INT 17
15674: DOUBLE
15675: EQUAL
15676: IFTRUE 15680
15678: GO 15904
15680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
15681: LD_ADDR_VAR 0 2
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: LD_INT 2
15691: PUSH
15692: LD_INT 3
15694: PUSH
15695: LD_INT 4
15697: PUSH
15698: LD_INT 5
15700: PUSH
15701: LD_INT 6
15703: PUSH
15704: LD_INT 7
15706: PUSH
15707: LD_INT 8
15709: PUSH
15710: LD_INT 9
15712: PUSH
15713: LD_INT 10
15715: PUSH
15716: LD_INT 11
15718: PUSH
15719: LD_INT 12
15721: PUSH
15722: LD_INT 13
15724: PUSH
15725: LD_INT 14
15727: PUSH
15728: LD_INT 15
15730: PUSH
15731: LD_INT 16
15733: PUSH
15734: LD_INT 17
15736: PUSH
15737: LD_INT 18
15739: PUSH
15740: LD_INT 19
15742: PUSH
15743: LD_INT 20
15745: PUSH
15746: LD_INT 21
15748: PUSH
15749: LD_INT 22
15751: PUSH
15752: LD_INT 23
15754: PUSH
15755: LD_INT 24
15757: PUSH
15758: LD_INT 25
15760: PUSH
15761: LD_INT 26
15763: PUSH
15764: LD_INT 27
15766: PUSH
15767: LD_INT 28
15769: PUSH
15770: LD_INT 29
15772: PUSH
15773: LD_INT 30
15775: PUSH
15776: LD_INT 31
15778: PUSH
15779: LD_INT 32
15781: PUSH
15782: LD_INT 33
15784: PUSH
15785: LD_INT 34
15787: PUSH
15788: LD_INT 36
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 101
15830: PUSH
15831: LD_INT 102
15833: PUSH
15834: LD_INT 103
15836: PUSH
15837: LD_INT 104
15839: PUSH
15840: LD_INT 105
15842: PUSH
15843: LD_INT 106
15845: PUSH
15846: LD_INT 107
15848: PUSH
15849: LD_INT 108
15851: PUSH
15852: LD_INT 109
15854: PUSH
15855: LD_INT 110
15857: PUSH
15858: LD_INT 111
15860: PUSH
15861: LD_INT 112
15863: PUSH
15864: LD_INT 113
15866: PUSH
15867: LD_INT 114
15869: PUSH
15870: LD_INT 116
15872: PUSH
15873: LD_INT 117
15875: PUSH
15876: LD_INT 118
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: ST_TO_ADDR
15902: GO 16301
15904: LD_INT 18
15906: DOUBLE
15907: EQUAL
15908: IFTRUE 15912
15910: GO 16060
15912: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15913: LD_ADDR_VAR 0 2
15917: PUSH
15918: LD_INT 2
15920: PUSH
15921: LD_INT 4
15923: PUSH
15924: LD_INT 5
15926: PUSH
15927: LD_INT 7
15929: PUSH
15930: LD_INT 11
15932: PUSH
15933: LD_INT 12
15935: PUSH
15936: LD_INT 15
15938: PUSH
15939: LD_INT 16
15941: PUSH
15942: LD_INT 20
15944: PUSH
15945: LD_INT 21
15947: PUSH
15948: LD_INT 22
15950: PUSH
15951: LD_INT 23
15953: PUSH
15954: LD_INT 25
15956: PUSH
15957: LD_INT 26
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: LD_INT 31
15965: PUSH
15966: LD_INT 32
15968: PUSH
15969: LD_INT 33
15971: PUSH
15972: LD_INT 34
15974: PUSH
15975: LD_INT 35
15977: PUSH
15978: LD_INT 36
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 101
16006: PUSH
16007: LD_INT 102
16009: PUSH
16010: LD_INT 103
16012: PUSH
16013: LD_INT 106
16015: PUSH
16016: LD_INT 108
16018: PUSH
16019: LD_INT 112
16021: PUSH
16022: LD_INT 113
16024: PUSH
16025: LD_INT 114
16027: PUSH
16028: LD_INT 115
16030: PUSH
16031: LD_INT 116
16033: PUSH
16034: LD_INT 117
16036: PUSH
16037: LD_INT 118
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: ST_TO_ADDR
16058: GO 16301
16060: LD_INT 19
16062: DOUBLE
16063: EQUAL
16064: IFTRUE 16068
16066: GO 16300
16068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16069: LD_ADDR_VAR 0 2
16073: PUSH
16074: LD_INT 1
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: LD_INT 3
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: LD_INT 5
16088: PUSH
16089: LD_INT 6
16091: PUSH
16092: LD_INT 7
16094: PUSH
16095: LD_INT 8
16097: PUSH
16098: LD_INT 9
16100: PUSH
16101: LD_INT 10
16103: PUSH
16104: LD_INT 11
16106: PUSH
16107: LD_INT 12
16109: PUSH
16110: LD_INT 13
16112: PUSH
16113: LD_INT 14
16115: PUSH
16116: LD_INT 15
16118: PUSH
16119: LD_INT 16
16121: PUSH
16122: LD_INT 17
16124: PUSH
16125: LD_INT 18
16127: PUSH
16128: LD_INT 19
16130: PUSH
16131: LD_INT 20
16133: PUSH
16134: LD_INT 21
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_INT 23
16142: PUSH
16143: LD_INT 24
16145: PUSH
16146: LD_INT 25
16148: PUSH
16149: LD_INT 26
16151: PUSH
16152: LD_INT 27
16154: PUSH
16155: LD_INT 28
16157: PUSH
16158: LD_INT 29
16160: PUSH
16161: LD_INT 30
16163: PUSH
16164: LD_INT 31
16166: PUSH
16167: LD_INT 32
16169: PUSH
16170: LD_INT 33
16172: PUSH
16173: LD_INT 34
16175: PUSH
16176: LD_INT 35
16178: PUSH
16179: LD_INT 36
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 101
16222: PUSH
16223: LD_INT 102
16225: PUSH
16226: LD_INT 103
16228: PUSH
16229: LD_INT 104
16231: PUSH
16232: LD_INT 105
16234: PUSH
16235: LD_INT 106
16237: PUSH
16238: LD_INT 107
16240: PUSH
16241: LD_INT 108
16243: PUSH
16244: LD_INT 109
16246: PUSH
16247: LD_INT 110
16249: PUSH
16250: LD_INT 111
16252: PUSH
16253: LD_INT 112
16255: PUSH
16256: LD_INT 113
16258: PUSH
16259: LD_INT 114
16261: PUSH
16262: LD_INT 115
16264: PUSH
16265: LD_INT 116
16267: PUSH
16268: LD_INT 117
16270: PUSH
16271: LD_INT 118
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: ST_TO_ADDR
16298: GO 16301
16300: POP
// end else
16301: GO 16532
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16303: LD_ADDR_VAR 0 2
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: LD_INT 3
16316: PUSH
16317: LD_INT 4
16319: PUSH
16320: LD_INT 5
16322: PUSH
16323: LD_INT 6
16325: PUSH
16326: LD_INT 7
16328: PUSH
16329: LD_INT 8
16331: PUSH
16332: LD_INT 9
16334: PUSH
16335: LD_INT 10
16337: PUSH
16338: LD_INT 11
16340: PUSH
16341: LD_INT 12
16343: PUSH
16344: LD_INT 13
16346: PUSH
16347: LD_INT 14
16349: PUSH
16350: LD_INT 15
16352: PUSH
16353: LD_INT 16
16355: PUSH
16356: LD_INT 17
16358: PUSH
16359: LD_INT 18
16361: PUSH
16362: LD_INT 19
16364: PUSH
16365: LD_INT 20
16367: PUSH
16368: LD_INT 21
16370: PUSH
16371: LD_INT 22
16373: PUSH
16374: LD_INT 23
16376: PUSH
16377: LD_INT 24
16379: PUSH
16380: LD_INT 25
16382: PUSH
16383: LD_INT 26
16385: PUSH
16386: LD_INT 27
16388: PUSH
16389: LD_INT 28
16391: PUSH
16392: LD_INT 29
16394: PUSH
16395: LD_INT 30
16397: PUSH
16398: LD_INT 31
16400: PUSH
16401: LD_INT 32
16403: PUSH
16404: LD_INT 33
16406: PUSH
16407: LD_INT 34
16409: PUSH
16410: LD_INT 35
16412: PUSH
16413: LD_INT 36
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 101
16456: PUSH
16457: LD_INT 102
16459: PUSH
16460: LD_INT 103
16462: PUSH
16463: LD_INT 104
16465: PUSH
16466: LD_INT 105
16468: PUSH
16469: LD_INT 106
16471: PUSH
16472: LD_INT 107
16474: PUSH
16475: LD_INT 108
16477: PUSH
16478: LD_INT 109
16480: PUSH
16481: LD_INT 110
16483: PUSH
16484: LD_INT 111
16486: PUSH
16487: LD_INT 112
16489: PUSH
16490: LD_INT 113
16492: PUSH
16493: LD_INT 114
16495: PUSH
16496: LD_INT 115
16498: PUSH
16499: LD_INT 116
16501: PUSH
16502: LD_INT 117
16504: PUSH
16505: LD_INT 118
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: ST_TO_ADDR
// if result then
16532: LD_VAR 0 2
16536: IFFALSE 17322
// begin normal :=  ;
16538: LD_ADDR_VAR 0 5
16542: PUSH
16543: LD_STRING 
16545: ST_TO_ADDR
// hardcore :=  ;
16546: LD_ADDR_VAR 0 6
16550: PUSH
16551: LD_STRING 
16553: ST_TO_ADDR
// active :=  ;
16554: LD_ADDR_VAR 0 7
16558: PUSH
16559: LD_STRING 
16561: ST_TO_ADDR
// for i = 1 to normalCounter do
16562: LD_ADDR_VAR 0 8
16566: PUSH
16567: DOUBLE
16568: LD_INT 1
16570: DEC
16571: ST_TO_ADDR
16572: LD_EXP 28
16576: PUSH
16577: FOR_TO
16578: IFFALSE 16679
// begin tmp := 0 ;
16580: LD_ADDR_VAR 0 3
16584: PUSH
16585: LD_STRING 0
16587: ST_TO_ADDR
// if result [ 1 ] then
16588: LD_VAR 0 2
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: IFFALSE 16661
// if result [ 1 ] [ 1 ] = i then
16598: LD_VAR 0 2
16602: PUSH
16603: LD_INT 1
16605: ARRAY
16606: PUSH
16607: LD_INT 1
16609: ARRAY
16610: PUSH
16611: LD_VAR 0 8
16615: EQUAL
16616: IFFALSE 16661
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16618: LD_ADDR_VAR 0 2
16622: PUSH
16623: LD_VAR 0 2
16627: PPUSH
16628: LD_INT 1
16630: PPUSH
16631: LD_VAR 0 2
16635: PUSH
16636: LD_INT 1
16638: ARRAY
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 3
16647: PPUSH
16648: CALL_OW 1
16652: ST_TO_ADDR
// tmp := 1 ;
16653: LD_ADDR_VAR 0 3
16657: PUSH
16658: LD_STRING 1
16660: ST_TO_ADDR
// end ; normal := normal & tmp ;
16661: LD_ADDR_VAR 0 5
16665: PUSH
16666: LD_VAR 0 5
16670: PUSH
16671: LD_VAR 0 3
16675: STR
16676: ST_TO_ADDR
// end ;
16677: GO 16577
16679: POP
16680: POP
// for i = 1 to hardcoreCounter do
16681: LD_ADDR_VAR 0 8
16685: PUSH
16686: DOUBLE
16687: LD_INT 1
16689: DEC
16690: ST_TO_ADDR
16691: LD_EXP 29
16695: PUSH
16696: FOR_TO
16697: IFFALSE 16802
// begin tmp := 0 ;
16699: LD_ADDR_VAR 0 3
16703: PUSH
16704: LD_STRING 0
16706: ST_TO_ADDR
// if result [ 2 ] then
16707: LD_VAR 0 2
16711: PUSH
16712: LD_INT 2
16714: ARRAY
16715: IFFALSE 16784
// if result [ 2 ] [ 1 ] = 100 + i then
16717: LD_VAR 0 2
16721: PUSH
16722: LD_INT 2
16724: ARRAY
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: PUSH
16730: LD_INT 100
16732: PUSH
16733: LD_VAR 0 8
16737: PLUS
16738: EQUAL
16739: IFFALSE 16784
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: LD_VAR 0 2
16750: PPUSH
16751: LD_INT 2
16753: PPUSH
16754: LD_VAR 0 2
16758: PUSH
16759: LD_INT 2
16761: ARRAY
16762: PPUSH
16763: LD_INT 1
16765: PPUSH
16766: CALL_OW 3
16770: PPUSH
16771: CALL_OW 1
16775: ST_TO_ADDR
// tmp := 1 ;
16776: LD_ADDR_VAR 0 3
16780: PUSH
16781: LD_STRING 1
16783: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
16784: LD_ADDR_VAR 0 6
16788: PUSH
16789: LD_VAR 0 6
16793: PUSH
16794: LD_VAR 0 3
16798: STR
16799: ST_TO_ADDR
// end ;
16800: GO 16696
16802: POP
16803: POP
// if isGameLoad then
16804: LD_VAR 0 1
16808: IFFALSE 17283
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_EXP 32
16819: PUSH
16820: LD_EXP 31
16824: PUSH
16825: LD_EXP 33
16829: PUSH
16830: LD_EXP 30
16834: PUSH
16835: LD_EXP 34
16839: PUSH
16840: LD_EXP 35
16844: PUSH
16845: LD_EXP 36
16849: PUSH
16850: LD_EXP 37
16854: PUSH
16855: LD_EXP 38
16859: PUSH
16860: LD_EXP 39
16864: PUSH
16865: LD_EXP 40
16869: PUSH
16870: LD_EXP 41
16874: PUSH
16875: LD_EXP 42
16879: PUSH
16880: LD_EXP 43
16884: PUSH
16885: LD_EXP 51
16889: PUSH
16890: LD_EXP 52
16894: PUSH
16895: LD_EXP 53
16899: PUSH
16900: LD_EXP 54
16904: PUSH
16905: LD_EXP 56
16909: PUSH
16910: LD_EXP 57
16914: PUSH
16915: LD_EXP 58
16919: PUSH
16920: LD_EXP 61
16924: PUSH
16925: LD_EXP 63
16929: PUSH
16930: LD_EXP 64
16934: PUSH
16935: LD_EXP 65
16939: PUSH
16940: LD_EXP 67
16944: PUSH
16945: LD_EXP 68
16949: PUSH
16950: LD_EXP 71
16954: PUSH
16955: LD_EXP 72
16959: PUSH
16960: LD_EXP 73
16964: PUSH
16965: LD_EXP 74
16969: PUSH
16970: LD_EXP 75
16974: PUSH
16975: LD_EXP 76
16979: PUSH
16980: LD_EXP 77
16984: PUSH
16985: LD_EXP 78
16989: PUSH
16990: LD_EXP 79
16994: PUSH
16995: LD_EXP 44
16999: PUSH
17000: LD_EXP 45
17004: PUSH
17005: LD_EXP 48
17009: PUSH
17010: LD_EXP 49
17014: PUSH
17015: LD_EXP 50
17019: PUSH
17020: LD_EXP 46
17024: PUSH
17025: LD_EXP 47
17029: PUSH
17030: LD_EXP 55
17034: PUSH
17035: LD_EXP 59
17039: PUSH
17040: LD_EXP 60
17044: PUSH
17045: LD_EXP 62
17049: PUSH
17050: LD_EXP 66
17054: PUSH
17055: LD_EXP 69
17059: PUSH
17060: LD_EXP 70
17064: PUSH
17065: LD_EXP 80
17069: PUSH
17070: LD_EXP 81
17074: PUSH
17075: LD_EXP 82
17079: PUSH
17080: LD_EXP 83
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: ST_TO_ADDR
// tmp :=  ;
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_STRING 
17148: ST_TO_ADDR
// for i = 1 to normalCounter do
17149: LD_ADDR_VAR 0 8
17153: PUSH
17154: DOUBLE
17155: LD_INT 1
17157: DEC
17158: ST_TO_ADDR
17159: LD_EXP 28
17163: PUSH
17164: FOR_TO
17165: IFFALSE 17201
// begin if flags [ i ] then
17167: LD_VAR 0 4
17171: PUSH
17172: LD_VAR 0 8
17176: ARRAY
17177: IFFALSE 17199
// tmp := tmp & i & ; ;
17179: LD_ADDR_VAR 0 3
17183: PUSH
17184: LD_VAR 0 3
17188: PUSH
17189: LD_VAR 0 8
17193: STR
17194: PUSH
17195: LD_STRING ;
17197: STR
17198: ST_TO_ADDR
// end ;
17199: GO 17164
17201: POP
17202: POP
// for i = 1 to hardcoreCounter do
17203: LD_ADDR_VAR 0 8
17207: PUSH
17208: DOUBLE
17209: LD_INT 1
17211: DEC
17212: ST_TO_ADDR
17213: LD_EXP 29
17217: PUSH
17218: FOR_TO
17219: IFFALSE 17265
// begin if flags [ normalCounter + i ] then
17221: LD_VAR 0 4
17225: PUSH
17226: LD_EXP 28
17230: PUSH
17231: LD_VAR 0 8
17235: PLUS
17236: ARRAY
17237: IFFALSE 17263
// tmp := tmp & ( 100 + i ) & ; ;
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: LD_INT 100
17251: PUSH
17252: LD_VAR 0 8
17256: PLUS
17257: STR
17258: PUSH
17259: LD_STRING ;
17261: STR
17262: ST_TO_ADDR
// end ;
17263: GO 17218
17265: POP
17266: POP
// if tmp then
17267: LD_VAR 0 3
17271: IFFALSE 17283
// active := tmp ;
17273: LD_ADDR_VAR 0 7
17277: PUSH
17278: LD_VAR 0 3
17282: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17283: LD_STRING getStreamItemsFromMission("
17285: PUSH
17286: LD_VAR 0 5
17290: STR
17291: PUSH
17292: LD_STRING ","
17294: STR
17295: PUSH
17296: LD_VAR 0 6
17300: STR
17301: PUSH
17302: LD_STRING ","
17304: STR
17305: PUSH
17306: LD_VAR 0 7
17310: STR
17311: PUSH
17312: LD_STRING ")
17314: STR
17315: PPUSH
17316: CALL_OW 559
// end else
17320: GO 17329
// ToLua ( getStreamItemsFromMission("","","") ) ;
17322: LD_STRING getStreamItemsFromMission("","","")
17324: PPUSH
17325: CALL_OW 559
// end ;
17329: LD_VAR 0 2
17333: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17334: LD_EXP 27
17338: IFFALSE 17346
17340: PUSH
17341: LD_EXP 32
17345: AND
17346: IFFALSE 17470
17348: GO 17350
17350: DISABLE
17351: LD_INT 0
17353: PPUSH
17354: PPUSH
// begin enable ;
17355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17356: LD_ADDR_VAR 0 2
17360: PUSH
17361: LD_INT 22
17363: PUSH
17364: LD_OWVAR 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: LD_INT 34
17378: PUSH
17379: LD_INT 7
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 34
17388: PUSH
17389: LD_INT 45
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 34
17398: PUSH
17399: LD_INT 28
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 34
17408: PUSH
17409: LD_INT 47
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 69
17431: ST_TO_ADDR
// if not tmp then
17432: LD_VAR 0 2
17436: NOT
17437: IFFALSE 17441
// exit ;
17439: GO 17470
// for i in tmp do
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_VAR 0 2
17450: PUSH
17451: FOR_IN
17452: IFFALSE 17468
// begin SetLives ( i , 0 ) ;
17454: LD_VAR 0 1
17458: PPUSH
17459: LD_INT 0
17461: PPUSH
17462: CALL_OW 234
// end ;
17466: GO 17451
17468: POP
17469: POP
// end ;
17470: PPOPN 2
17472: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17473: LD_EXP 27
17477: IFFALSE 17485
17479: PUSH
17480: LD_EXP 33
17484: AND
17485: IFFALSE 17569
17487: GO 17489
17489: DISABLE
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
// begin enable ;
17494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17495: LD_ADDR_VAR 0 2
17499: PUSH
17500: LD_INT 22
17502: PUSH
17503: LD_OWVAR 2
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 32
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PPUSH
17526: CALL_OW 69
17530: ST_TO_ADDR
// if not tmp then
17531: LD_VAR 0 2
17535: NOT
17536: IFFALSE 17540
// exit ;
17538: GO 17569
// for i in tmp do
17540: LD_ADDR_VAR 0 1
17544: PUSH
17545: LD_VAR 0 2
17549: PUSH
17550: FOR_IN
17551: IFFALSE 17567
// begin SetLives ( i , 0 ) ;
17553: LD_VAR 0 1
17557: PPUSH
17558: LD_INT 0
17560: PPUSH
17561: CALL_OW 234
// end ;
17565: GO 17550
17567: POP
17568: POP
// end ;
17569: PPOPN 2
17571: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17572: LD_EXP 27
17576: IFFALSE 17584
17578: PUSH
17579: LD_EXP 30
17583: AND
17584: IFFALSE 17677
17586: GO 17588
17588: DISABLE
17589: LD_INT 0
17591: PPUSH
// begin enable ;
17592: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 2
17612: PUSH
17613: LD_INT 25
17615: PUSH
17616: LD_INT 5
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 25
17625: PUSH
17626: LD_INT 9
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 25
17635: PUSH
17636: LD_INT 8
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PPUSH
17653: CALL_OW 69
17657: PUSH
17658: FOR_IN
17659: IFFALSE 17675
// begin SetClass ( i , 1 ) ;
17661: LD_VAR 0 1
17665: PPUSH
17666: LD_INT 1
17668: PPUSH
17669: CALL_OW 336
// end ;
17673: GO 17658
17675: POP
17676: POP
// end ;
17677: PPOPN 1
17679: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17680: LD_EXP 27
17684: IFFALSE 17692
17686: PUSH
17687: LD_EXP 31
17691: AND
17692: IFFALSE 17704
17694: PUSH
17695: LD_OWVAR 65
17699: PUSH
17700: LD_INT 7
17702: LESS
17703: AND
17704: IFFALSE 17718
17706: GO 17708
17708: DISABLE
// begin enable ;
17709: ENABLE
// game_speed := 7 ;
17710: LD_ADDR_OWVAR 65
17714: PUSH
17715: LD_INT 7
17717: ST_TO_ADDR
// end ;
17718: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17719: LD_EXP 27
17723: IFFALSE 17731
17725: PUSH
17726: LD_EXP 34
17730: AND
17731: IFFALSE 17933
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_INT 81
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 21
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 3
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17933
// if tmp > 5 then
17786: LD_VAR 0 3
17790: PUSH
17791: LD_INT 5
17793: GREATER
17794: IFFALSE 17806
// k := 5 else
17796: LD_ADDR_VAR 0 2
17800: PUSH
17801: LD_INT 5
17803: ST_TO_ADDR
17804: GO 17816
// k := tmp ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_VAR 0 3
17815: ST_TO_ADDR
// for i := 1 to k do
17816: LD_ADDR_VAR 0 1
17820: PUSH
17821: DOUBLE
17822: LD_INT 1
17824: DEC
17825: ST_TO_ADDR
17826: LD_VAR 0 2
17830: PUSH
17831: FOR_TO
17832: IFFALSE 17931
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17834: LD_VAR 0 3
17838: PUSH
17839: LD_VAR 0 1
17843: ARRAY
17844: PPUSH
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 4
17852: MOD
17853: PUSH
17854: LD_INT 1
17856: PLUS
17857: PPUSH
17858: CALL_OW 259
17862: PUSH
17863: LD_INT 10
17865: LESS
17866: IFFALSE 17929
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17868: LD_VAR 0 3
17872: PUSH
17873: LD_VAR 0 1
17877: ARRAY
17878: PPUSH
17879: LD_VAR 0 1
17883: PUSH
17884: LD_INT 4
17886: MOD
17887: PUSH
17888: LD_INT 1
17890: PLUS
17891: PPUSH
17892: LD_VAR 0 3
17896: PUSH
17897: LD_VAR 0 1
17901: ARRAY
17902: PPUSH
17903: LD_VAR 0 1
17907: PUSH
17908: LD_INT 4
17910: MOD
17911: PUSH
17912: LD_INT 1
17914: PLUS
17915: PPUSH
17916: CALL_OW 259
17920: PUSH
17921: LD_INT 1
17923: PLUS
17924: PPUSH
17925: CALL_OW 237
17929: GO 17831
17931: POP
17932: POP
// end ;
17933: PPOPN 3
17935: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17936: LD_EXP 27
17940: IFFALSE 17948
17942: PUSH
17943: LD_EXP 35
17947: AND
17948: IFFALSE 17968
17950: GO 17952
17952: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17953: LD_INT 4
17955: PPUSH
17956: LD_OWVAR 2
17960: PPUSH
17961: LD_INT 0
17963: PPUSH
17964: CALL_OW 324
17968: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17969: LD_EXP 27
17973: IFFALSE 17981
17975: PUSH
17976: LD_EXP 64
17980: AND
17981: IFFALSE 18001
17983: GO 17985
17985: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17986: LD_INT 19
17988: PPUSH
17989: LD_OWVAR 2
17993: PPUSH
17994: LD_INT 0
17996: PPUSH
17997: CALL_OW 324
18001: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18002: LD_EXP 27
18006: IFFALSE 18014
18008: PUSH
18009: LD_EXP 36
18013: AND
18014: IFFALSE 18116
18016: GO 18018
18018: DISABLE
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
// begin enable ;
18023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: LD_INT 22
18031: PUSH
18032: LD_OWVAR 2
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 2
18043: PUSH
18044: LD_INT 34
18046: PUSH
18047: LD_INT 11
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 34
18056: PUSH
18057: LD_INT 30
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PPUSH
18073: CALL_OW 69
18077: ST_TO_ADDR
// if not tmp then
18078: LD_VAR 0 2
18082: NOT
18083: IFFALSE 18087
// exit ;
18085: GO 18116
// for i in tmp do
18087: LD_ADDR_VAR 0 1
18091: PUSH
18092: LD_VAR 0 2
18096: PUSH
18097: FOR_IN
18098: IFFALSE 18114
// begin SetLives ( i , 0 ) ;
18100: LD_VAR 0 1
18104: PPUSH
18105: LD_INT 0
18107: PPUSH
18108: CALL_OW 234
// end ;
18112: GO 18097
18114: POP
18115: POP
// end ;
18116: PPOPN 2
18118: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18119: LD_EXP 27
18123: IFFALSE 18131
18125: PUSH
18126: LD_EXP 37
18130: AND
18131: IFFALSE 18151
18133: GO 18135
18135: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18136: LD_INT 32
18138: PPUSH
18139: LD_OWVAR 2
18143: PPUSH
18144: LD_INT 0
18146: PPUSH
18147: CALL_OW 324
18151: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18152: LD_EXP 27
18156: IFFALSE 18164
18158: PUSH
18159: LD_EXP 38
18163: AND
18164: IFFALSE 18347
18166: GO 18168
18168: DISABLE
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
18173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18174: LD_ADDR_VAR 0 2
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_OWVAR 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 33
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: ST_TO_ADDR
// if not tmp then
18210: LD_VAR 0 2
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18347
// side := 0 ;
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_INT 0
18226: ST_TO_ADDR
// for i := 1 to 8 do
18227: LD_ADDR_VAR 0 1
18231: PUSH
18232: DOUBLE
18233: LD_INT 1
18235: DEC
18236: ST_TO_ADDR
18237: LD_INT 8
18239: PUSH
18240: FOR_TO
18241: IFFALSE 18291
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18243: LD_OWVAR 2
18247: PUSH
18248: LD_VAR 0 1
18252: NONEQUAL
18253: IFFALSE 18275
18255: PUSH
18256: LD_OWVAR 2
18260: PPUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 81
18270: PUSH
18271: LD_INT 2
18273: EQUAL
18274: AND
18275: IFFALSE 18289
// begin side := i ;
18277: LD_ADDR_VAR 0 3
18281: PUSH
18282: LD_VAR 0 1
18286: ST_TO_ADDR
// break ;
18287: GO 18291
// end ;
18289: GO 18240
18291: POP
18292: POP
// if not side then
18293: LD_VAR 0 3
18297: NOT
18298: IFFALSE 18302
// exit ;
18300: GO 18347
// for i := 1 to tmp do
18302: LD_ADDR_VAR 0 1
18306: PUSH
18307: DOUBLE
18308: LD_INT 1
18310: DEC
18311: ST_TO_ADDR
18312: LD_VAR 0 2
18316: PUSH
18317: FOR_TO
18318: IFFALSE 18345
// if Prob ( 60 ) then
18320: LD_INT 60
18322: PPUSH
18323: CALL_OW 13
18327: IFFALSE 18343
// SetSide ( i , side ) ;
18329: LD_VAR 0 1
18333: PPUSH
18334: LD_VAR 0 3
18338: PPUSH
18339: CALL_OW 235
18343: GO 18317
18345: POP
18346: POP
// end ;
18347: PPOPN 3
18349: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18350: LD_EXP 27
18354: IFFALSE 18362
18356: PUSH
18357: LD_EXP 40
18361: AND
18362: IFFALSE 18481
18364: GO 18366
18366: DISABLE
18367: LD_INT 0
18369: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18370: LD_ADDR_VAR 0 1
18374: PUSH
18375: LD_INT 22
18377: PUSH
18378: LD_OWVAR 2
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 21
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 3
18399: PUSH
18400: LD_INT 23
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 69
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18479
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18427: LD_VAR 0 1
18431: PPUSH
18432: CALL_OW 257
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: LD_INT 3
18445: PUSH
18446: LD_INT 4
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: IN
18455: IFFALSE 18477
// SetClass ( un , rand ( 1 , 4 ) ) ;
18457: LD_VAR 0 1
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: LD_INT 4
18467: PPUSH
18468: CALL_OW 12
18472: PPUSH
18473: CALL_OW 336
18477: GO 18424
18479: POP
18480: POP
// end ;
18481: PPOPN 1
18483: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18484: LD_EXP 27
18488: IFFALSE 18496
18490: PUSH
18491: LD_EXP 39
18495: AND
18496: IFFALSE 18575
18498: GO 18500
18500: DISABLE
18501: LD_INT 0
18503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18504: LD_ADDR_VAR 0 1
18508: PUSH
18509: LD_INT 22
18511: PUSH
18512: LD_OWVAR 2
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 21
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PPUSH
18535: CALL_OW 69
18539: ST_TO_ADDR
// if not tmp then
18540: LD_VAR 0 1
18544: NOT
18545: IFFALSE 18549
// exit ;
18547: GO 18575
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18549: LD_VAR 0 1
18553: PUSH
18554: LD_INT 1
18556: PPUSH
18557: LD_VAR 0 1
18561: PPUSH
18562: CALL_OW 12
18566: ARRAY
18567: PPUSH
18568: LD_INT 100
18570: PPUSH
18571: CALL_OW 234
// end ;
18575: PPOPN 1
18577: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18578: LD_EXP 27
18582: IFFALSE 18590
18584: PUSH
18585: LD_EXP 41
18589: AND
18590: IFFALSE 18688
18592: GO 18594
18594: DISABLE
18595: LD_INT 0
18597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18598: LD_ADDR_VAR 0 1
18602: PUSH
18603: LD_INT 22
18605: PUSH
18606: LD_OWVAR 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 21
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PPUSH
18629: CALL_OW 69
18633: ST_TO_ADDR
// if not tmp then
18634: LD_VAR 0 1
18638: NOT
18639: IFFALSE 18643
// exit ;
18641: GO 18688
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18643: LD_VAR 0 1
18647: PUSH
18648: LD_INT 1
18650: PPUSH
18651: LD_VAR 0 1
18655: PPUSH
18656: CALL_OW 12
18660: ARRAY
18661: PPUSH
18662: LD_INT 1
18664: PPUSH
18665: LD_INT 4
18667: PPUSH
18668: CALL_OW 12
18672: PPUSH
18673: LD_INT 3000
18675: PPUSH
18676: LD_INT 9000
18678: PPUSH
18679: CALL_OW 12
18683: PPUSH
18684: CALL_OW 492
// end ;
18688: PPOPN 1
18690: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18691: LD_EXP 27
18695: IFFALSE 18703
18697: PUSH
18698: LD_EXP 42
18702: AND
18703: IFFALSE 18723
18705: GO 18707
18707: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18708: LD_INT 1
18710: PPUSH
18711: LD_OWVAR 2
18715: PPUSH
18716: LD_INT 0
18718: PPUSH
18719: CALL_OW 324
18723: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18724: LD_EXP 27
18728: IFFALSE 18736
18730: PUSH
18731: LD_EXP 43
18735: AND
18736: IFFALSE 18819
18738: GO 18740
18740: DISABLE
18741: LD_INT 0
18743: PPUSH
18744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18745: LD_ADDR_VAR 0 2
18749: PUSH
18750: LD_INT 22
18752: PUSH
18753: LD_OWVAR 2
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 21
18764: PUSH
18765: LD_INT 3
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: ST_TO_ADDR
// if not tmp then
18781: LD_VAR 0 2
18785: NOT
18786: IFFALSE 18790
// exit ;
18788: GO 18819
// for i in tmp do
18790: LD_ADDR_VAR 0 1
18794: PUSH
18795: LD_VAR 0 2
18799: PUSH
18800: FOR_IN
18801: IFFALSE 18817
// SetBLevel ( i , 10 ) ;
18803: LD_VAR 0 1
18807: PPUSH
18808: LD_INT 10
18810: PPUSH
18811: CALL_OW 241
18815: GO 18800
18817: POP
18818: POP
// end ;
18819: PPOPN 2
18821: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18822: LD_EXP 27
18826: IFFALSE 18834
18828: PUSH
18829: LD_EXP 44
18833: AND
18834: IFFALSE 18945
18836: GO 18838
18838: DISABLE
18839: LD_INT 0
18841: PPUSH
18842: PPUSH
18843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18844: LD_ADDR_VAR 0 3
18848: PUSH
18849: LD_INT 22
18851: PUSH
18852: LD_OWVAR 2
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 25
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 69
18879: ST_TO_ADDR
// if not tmp then
18880: LD_VAR 0 3
18884: NOT
18885: IFFALSE 18889
// exit ;
18887: GO 18945
// un := tmp [ rand ( 1 , tmp ) ] ;
18889: LD_ADDR_VAR 0 2
18893: PUSH
18894: LD_VAR 0 3
18898: PUSH
18899: LD_INT 1
18901: PPUSH
18902: LD_VAR 0 3
18906: PPUSH
18907: CALL_OW 12
18911: ARRAY
18912: ST_TO_ADDR
// if Crawls ( un ) then
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL_OW 318
18922: IFFALSE 18933
// ComWalk ( un ) ;
18924: LD_VAR 0 2
18928: PPUSH
18929: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18933: LD_VAR 0 2
18937: PPUSH
18938: LD_INT 5
18940: PPUSH
18941: CALL_OW 336
// end ;
18945: PPOPN 3
18947: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18948: LD_EXP 27
18952: IFFALSE 18960
18954: PUSH
18955: LD_EXP 45
18959: AND
18960: IFFALSE 18972
18962: PUSH
18963: LD_OWVAR 67
18967: PUSH
18968: LD_INT 4
18970: LESS
18971: AND
18972: IFFALSE 18991
18974: GO 18976
18976: DISABLE
// begin Difficulty := Difficulty + 1 ;
18977: LD_ADDR_OWVAR 67
18981: PUSH
18982: LD_OWVAR 67
18986: PUSH
18987: LD_INT 1
18989: PLUS
18990: ST_TO_ADDR
// end ;
18991: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18992: LD_EXP 27
18996: IFFALSE 19004
18998: PUSH
18999: LD_EXP 46
19003: AND
19004: IFFALSE 19107
19006: GO 19008
19008: DISABLE
19009: LD_INT 0
19011: PPUSH
// begin for i := 1 to 5 do
19012: LD_ADDR_VAR 0 1
19016: PUSH
19017: DOUBLE
19018: LD_INT 1
19020: DEC
19021: ST_TO_ADDR
19022: LD_INT 5
19024: PUSH
19025: FOR_TO
19026: IFFALSE 19105
// begin uc_nation := nation_nature ;
19028: LD_ADDR_OWVAR 21
19032: PUSH
19033: LD_INT 0
19035: ST_TO_ADDR
// uc_side := 0 ;
19036: LD_ADDR_OWVAR 20
19040: PUSH
19041: LD_INT 0
19043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19044: LD_ADDR_OWVAR 29
19048: PUSH
19049: LD_INT 12
19051: PUSH
19052: LD_INT 12
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: ST_TO_ADDR
// hc_agressivity := 20 ;
19059: LD_ADDR_OWVAR 35
19063: PUSH
19064: LD_INT 20
19066: ST_TO_ADDR
// hc_class := class_tiger ;
19067: LD_ADDR_OWVAR 28
19071: PUSH
19072: LD_INT 14
19074: ST_TO_ADDR
// hc_gallery :=  ;
19075: LD_ADDR_OWVAR 33
19079: PUSH
19080: LD_STRING 
19082: ST_TO_ADDR
// hc_name :=  ;
19083: LD_ADDR_OWVAR 26
19087: PUSH
19088: LD_STRING 
19090: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19091: CALL_OW 44
19095: PPUSH
19096: LD_INT 0
19098: PPUSH
19099: CALL_OW 51
// end ;
19103: GO 19025
19105: POP
19106: POP
// end ;
19107: PPOPN 1
19109: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19110: LD_EXP 27
19114: IFFALSE 19122
19116: PUSH
19117: LD_EXP 47
19121: AND
19122: IFFALSE 19131
19124: GO 19126
19126: DISABLE
// StreamSibBomb ;
19127: CALL 19132 0 0
19131: END
// export function StreamSibBomb ; var i , x , y ; begin
19132: LD_INT 0
19134: PPUSH
19135: PPUSH
19136: PPUSH
19137: PPUSH
// result := false ;
19138: LD_ADDR_VAR 0 1
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// for i := 1 to 16 do
19146: LD_ADDR_VAR 0 2
19150: PUSH
19151: DOUBLE
19152: LD_INT 1
19154: DEC
19155: ST_TO_ADDR
19156: LD_INT 16
19158: PUSH
19159: FOR_TO
19160: IFFALSE 19359
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: LD_INT 10
19169: PUSH
19170: LD_INT 20
19172: PUSH
19173: LD_INT 30
19175: PUSH
19176: LD_INT 40
19178: PUSH
19179: LD_INT 50
19181: PUSH
19182: LD_INT 60
19184: PUSH
19185: LD_INT 70
19187: PUSH
19188: LD_INT 80
19190: PUSH
19191: LD_INT 90
19193: PUSH
19194: LD_INT 100
19196: PUSH
19197: LD_INT 110
19199: PUSH
19200: LD_INT 120
19202: PUSH
19203: LD_INT 130
19205: PUSH
19206: LD_INT 140
19208: PUSH
19209: LD_INT 150
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: PPUSH
19232: LD_INT 15
19234: PPUSH
19235: CALL_OW 12
19239: ARRAY
19240: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19241: LD_ADDR_VAR 0 4
19245: PUSH
19246: LD_INT 10
19248: PUSH
19249: LD_INT 20
19251: PUSH
19252: LD_INT 30
19254: PUSH
19255: LD_INT 40
19257: PUSH
19258: LD_INT 50
19260: PUSH
19261: LD_INT 60
19263: PUSH
19264: LD_INT 70
19266: PUSH
19267: LD_INT 80
19269: PUSH
19270: LD_INT 90
19272: PUSH
19273: LD_INT 100
19275: PUSH
19276: LD_INT 110
19278: PUSH
19279: LD_INT 120
19281: PUSH
19282: LD_INT 130
19284: PUSH
19285: LD_INT 140
19287: PUSH
19288: LD_INT 150
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_INT 15
19313: PPUSH
19314: CALL_OW 12
19318: ARRAY
19319: ST_TO_ADDR
// if ValidHex ( x , y ) then
19320: LD_VAR 0 3
19324: PPUSH
19325: LD_VAR 0 4
19329: PPUSH
19330: CALL_OW 488
19334: IFFALSE 19357
// begin result := [ x , y ] ;
19336: LD_ADDR_VAR 0 1
19340: PUSH
19341: LD_VAR 0 3
19345: PUSH
19346: LD_VAR 0 4
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: ST_TO_ADDR
// break ;
19355: GO 19359
// end ; end ;
19357: GO 19159
19359: POP
19360: POP
// if result then
19361: LD_VAR 0 1
19365: IFFALSE 19425
// begin ToLua ( playSibBomb() ) ;
19367: LD_STRING playSibBomb()
19369: PPUSH
19370: CALL_OW 559
// wait ( 0 0$14 ) ;
19374: LD_INT 490
19376: PPUSH
19377: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19381: LD_VAR 0 1
19385: PUSH
19386: LD_INT 1
19388: ARRAY
19389: PPUSH
19390: LD_VAR 0 1
19394: PUSH
19395: LD_INT 2
19397: ARRAY
19398: PPUSH
19399: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19403: LD_VAR 0 1
19407: PUSH
19408: LD_INT 1
19410: ARRAY
19411: PPUSH
19412: LD_VAR 0 1
19416: PUSH
19417: LD_INT 2
19419: ARRAY
19420: PPUSH
19421: CALL_OW 429
// end ; end ;
19425: LD_VAR 0 1
19429: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19430: LD_EXP 27
19434: IFFALSE 19442
19436: PUSH
19437: LD_EXP 49
19441: AND
19442: IFFALSE 19454
19444: GO 19446
19446: DISABLE
// YouLost (  ) ;
19447: LD_STRING 
19449: PPUSH
19450: CALL_OW 104
19454: END
// every 0 0$1 trigger StreamModeActive and sFog do
19455: LD_EXP 27
19459: IFFALSE 19467
19461: PUSH
19462: LD_EXP 48
19466: AND
19467: IFFALSE 19481
19469: GO 19471
19471: DISABLE
// FogOff ( your_side ) ;
19472: LD_OWVAR 2
19476: PPUSH
19477: CALL_OW 344
19481: END
// every 0 0$1 trigger StreamModeActive and sSun do
19482: LD_EXP 27
19486: IFFALSE 19494
19488: PUSH
19489: LD_EXP 50
19493: AND
19494: IFFALSE 19522
19496: GO 19498
19498: DISABLE
// begin solar_recharge_percent := 0 ;
19499: LD_ADDR_OWVAR 79
19503: PUSH
19504: LD_INT 0
19506: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19507: LD_INT 10500
19509: PPUSH
19510: CALL_OW 67
// solar_recharge_percent := 100 ;
19514: LD_ADDR_OWVAR 79
19518: PUSH
19519: LD_INT 100
19521: ST_TO_ADDR
// end ;
19522: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19523: LD_EXP 27
19527: IFFALSE 19535
19529: PUSH
19530: LD_EXP 51
19534: AND
19535: IFFALSE 19774
19537: GO 19539
19539: DISABLE
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
19544: PPUSH
// begin tmp := [ ] ;
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: EMPTY
19551: ST_TO_ADDR
// for i := 1 to 6 do
19552: LD_ADDR_VAR 0 1
19556: PUSH
19557: DOUBLE
19558: LD_INT 1
19560: DEC
19561: ST_TO_ADDR
19562: LD_INT 6
19564: PUSH
19565: FOR_TO
19566: IFFALSE 19671
// begin uc_nation := nation_nature ;
19568: LD_ADDR_OWVAR 21
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
// uc_side := 0 ;
19576: LD_ADDR_OWVAR 20
19580: PUSH
19581: LD_INT 0
19583: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19584: LD_ADDR_OWVAR 29
19588: PUSH
19589: LD_INT 12
19591: PUSH
19592: LD_INT 12
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: ST_TO_ADDR
// hc_agressivity := 20 ;
19599: LD_ADDR_OWVAR 35
19603: PUSH
19604: LD_INT 20
19606: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19607: LD_ADDR_OWVAR 28
19611: PUSH
19612: LD_INT 17
19614: ST_TO_ADDR
// hc_gallery :=  ;
19615: LD_ADDR_OWVAR 33
19619: PUSH
19620: LD_STRING 
19622: ST_TO_ADDR
// hc_name :=  ;
19623: LD_ADDR_OWVAR 26
19627: PUSH
19628: LD_STRING 
19630: ST_TO_ADDR
// un := CreateHuman ;
19631: LD_ADDR_VAR 0 2
19635: PUSH
19636: CALL_OW 44
19640: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19641: LD_VAR 0 2
19645: PPUSH
19646: LD_INT 1
19648: PPUSH
19649: CALL_OW 51
// tmp := tmp ^ un ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_VAR 0 3
19662: PUSH
19663: LD_VAR 0 2
19667: ADD
19668: ST_TO_ADDR
// end ;
19669: GO 19565
19671: POP
19672: POP
// repeat wait ( 0 0$1 ) ;
19673: LD_INT 35
19675: PPUSH
19676: CALL_OW 67
// for un in tmp do
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_VAR 0 3
19689: PUSH
19690: FOR_IN
19691: IFFALSE 19765
// begin if IsDead ( un ) then
19693: LD_VAR 0 2
19697: PPUSH
19698: CALL_OW 301
19702: IFFALSE 19722
// begin tmp := tmp diff un ;
19704: LD_ADDR_VAR 0 3
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_VAR 0 2
19718: DIFF
19719: ST_TO_ADDR
// continue ;
19720: GO 19690
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19722: LD_VAR 0 2
19726: PPUSH
19727: LD_INT 3
19729: PUSH
19730: LD_INT 22
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PPUSH
19744: CALL_OW 69
19748: PPUSH
19749: LD_VAR 0 2
19753: PPUSH
19754: CALL_OW 74
19758: PPUSH
19759: CALL_OW 115
// end ;
19763: GO 19690
19765: POP
19766: POP
// until not tmp ;
19767: LD_VAR 0 3
19771: NOT
19772: IFFALSE 19673
// end ;
19774: PPOPN 3
19776: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19777: LD_EXP 27
19781: IFFALSE 19789
19783: PUSH
19784: LD_EXP 52
19788: AND
19789: IFFALSE 19843
19791: GO 19793
19793: DISABLE
// begin ToLua ( displayTroll(); ) ;
19794: LD_STRING displayTroll();
19796: PPUSH
19797: CALL_OW 559
// wait ( 3 3$00 ) ;
19801: LD_INT 6300
19803: PPUSH
19804: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19808: LD_STRING hideTroll();
19810: PPUSH
19811: CALL_OW 559
// wait ( 1 1$00 ) ;
19815: LD_INT 2100
19817: PPUSH
19818: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19822: LD_STRING displayTroll();
19824: PPUSH
19825: CALL_OW 559
// wait ( 1 1$00 ) ;
19829: LD_INT 2100
19831: PPUSH
19832: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19836: LD_STRING hideTroll();
19838: PPUSH
19839: CALL_OW 559
// end ;
19843: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19844: LD_EXP 27
19848: IFFALSE 19856
19850: PUSH
19851: LD_EXP 53
19855: AND
19856: IFFALSE 19919
19858: GO 19860
19860: DISABLE
19861: LD_INT 0
19863: PPUSH
// begin p := 0 ;
19864: LD_ADDR_VAR 0 1
19868: PUSH
19869: LD_INT 0
19871: ST_TO_ADDR
// repeat game_speed := 1 ;
19872: LD_ADDR_OWVAR 65
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19880: LD_INT 35
19882: PPUSH
19883: CALL_OW 67
// p := p + 1 ;
19887: LD_ADDR_VAR 0 1
19891: PUSH
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 1
19899: PLUS
19900: ST_TO_ADDR
// until p >= 60 ;
19901: LD_VAR 0 1
19905: PUSH
19906: LD_INT 60
19908: GREATEREQUAL
19909: IFFALSE 19872
// game_speed := 4 ;
19911: LD_ADDR_OWVAR 65
19915: PUSH
19916: LD_INT 4
19918: ST_TO_ADDR
// end ;
19919: PPOPN 1
19921: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19922: LD_EXP 27
19926: IFFALSE 19934
19928: PUSH
19929: LD_EXP 54
19933: AND
19934: IFFALSE 20080
19936: GO 19938
19938: DISABLE
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19943: LD_ADDR_VAR 0 1
19947: PUSH
19948: LD_INT 22
19950: PUSH
19951: LD_OWVAR 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 2
19962: PUSH
19963: LD_INT 30
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 30
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 69
19996: ST_TO_ADDR
// if not depot then
19997: LD_VAR 0 1
20001: NOT
20002: IFFALSE 20006
// exit ;
20004: GO 20080
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20006: LD_ADDR_VAR 0 2
20010: PUSH
20011: LD_VAR 0 1
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: PPUSH
20030: CALL_OW 274
20034: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20035: LD_VAR 0 2
20039: PPUSH
20040: LD_INT 1
20042: PPUSH
20043: LD_INT 0
20045: PPUSH
20046: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20050: LD_VAR 0 2
20054: PPUSH
20055: LD_INT 2
20057: PPUSH
20058: LD_INT 0
20060: PPUSH
20061: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20065: LD_VAR 0 2
20069: PPUSH
20070: LD_INT 3
20072: PPUSH
20073: LD_INT 0
20075: PPUSH
20076: CALL_OW 277
// end ;
20080: PPOPN 2
20082: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20083: LD_EXP 27
20087: IFFALSE 20095
20089: PUSH
20090: LD_EXP 55
20094: AND
20095: IFFALSE 20192
20097: GO 20099
20099: DISABLE
20100: LD_INT 0
20102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20103: LD_ADDR_VAR 0 1
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_OWVAR 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 21
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 3
20132: PUSH
20133: LD_INT 23
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: PPUSH
20152: CALL_OW 69
20156: ST_TO_ADDR
// if not tmp then
20157: LD_VAR 0 1
20161: NOT
20162: IFFALSE 20166
// exit ;
20164: GO 20192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20166: LD_VAR 0 1
20170: PUSH
20171: LD_INT 1
20173: PPUSH
20174: LD_VAR 0 1
20178: PPUSH
20179: CALL_OW 12
20183: ARRAY
20184: PPUSH
20185: LD_INT 200
20187: PPUSH
20188: CALL_OW 234
// end ;
20192: PPOPN 1
20194: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20195: LD_EXP 27
20199: IFFALSE 20207
20201: PUSH
20202: LD_EXP 56
20206: AND
20207: IFFALSE 20286
20209: GO 20211
20211: DISABLE
20212: LD_INT 0
20214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20215: LD_ADDR_VAR 0 1
20219: PUSH
20220: LD_INT 22
20222: PUSH
20223: LD_OWVAR 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 21
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PPUSH
20246: CALL_OW 69
20250: ST_TO_ADDR
// if not tmp then
20251: LD_VAR 0 1
20255: NOT
20256: IFFALSE 20260
// exit ;
20258: GO 20286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20260: LD_VAR 0 1
20264: PUSH
20265: LD_INT 1
20267: PPUSH
20268: LD_VAR 0 1
20272: PPUSH
20273: CALL_OW 12
20277: ARRAY
20278: PPUSH
20279: LD_INT 60
20281: PPUSH
20282: CALL_OW 234
// end ;
20286: PPOPN 1
20288: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20289: LD_EXP 27
20293: IFFALSE 20301
20295: PUSH
20296: LD_EXP 57
20300: AND
20301: IFFALSE 20400
20303: GO 20305
20305: DISABLE
20306: LD_INT 0
20308: PPUSH
20309: PPUSH
// begin enable ;
20310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20311: LD_ADDR_VAR 0 1
20315: PUSH
20316: LD_INT 22
20318: PUSH
20319: LD_OWVAR 2
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 61
20330: PUSH
20331: EMPTY
20332: LIST
20333: PUSH
20334: LD_INT 33
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: PPUSH
20349: CALL_OW 69
20353: ST_TO_ADDR
// if not tmp then
20354: LD_VAR 0 1
20358: NOT
20359: IFFALSE 20363
// exit ;
20361: GO 20400
// for i in tmp do
20363: LD_ADDR_VAR 0 2
20367: PUSH
20368: LD_VAR 0 1
20372: PUSH
20373: FOR_IN
20374: IFFALSE 20398
// if IsControledBy ( i ) then
20376: LD_VAR 0 2
20380: PPUSH
20381: CALL_OW 312
20385: IFFALSE 20396
// ComUnlink ( i ) ;
20387: LD_VAR 0 2
20391: PPUSH
20392: CALL_OW 136
20396: GO 20373
20398: POP
20399: POP
// end ;
20400: PPOPN 2
20402: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20403: LD_EXP 27
20407: IFFALSE 20415
20409: PUSH
20410: LD_EXP 58
20414: AND
20415: IFFALSE 20555
20417: GO 20419
20419: DISABLE
20420: LD_INT 0
20422: PPUSH
20423: PPUSH
// begin ToLua ( displayPowell(); ) ;
20424: LD_STRING displayPowell();
20426: PPUSH
20427: CALL_OW 559
// uc_side := 0 ;
20431: LD_ADDR_OWVAR 20
20435: PUSH
20436: LD_INT 0
20438: ST_TO_ADDR
// uc_nation := 2 ;
20439: LD_ADDR_OWVAR 21
20443: PUSH
20444: LD_INT 2
20446: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20447: LD_ADDR_OWVAR 37
20451: PUSH
20452: LD_INT 14
20454: ST_TO_ADDR
// vc_engine := engine_siberite ;
20455: LD_ADDR_OWVAR 39
20459: PUSH
20460: LD_INT 3
20462: ST_TO_ADDR
// vc_control := control_apeman ;
20463: LD_ADDR_OWVAR 38
20467: PUSH
20468: LD_INT 5
20470: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20471: LD_ADDR_OWVAR 40
20475: PUSH
20476: LD_INT 29
20478: ST_TO_ADDR
// un := CreateVehicle ;
20479: LD_ADDR_VAR 0 2
20483: PUSH
20484: CALL_OW 45
20488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20489: LD_VAR 0 2
20493: PPUSH
20494: LD_INT 1
20496: PPUSH
20497: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20501: LD_INT 35
20503: PPUSH
20504: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20508: LD_VAR 0 2
20512: PPUSH
20513: LD_INT 22
20515: PUSH
20516: LD_OWVAR 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PPUSH
20525: CALL_OW 69
20529: PPUSH
20530: LD_VAR 0 2
20534: PPUSH
20535: CALL_OW 74
20539: PPUSH
20540: CALL_OW 115
// until IsDead ( un ) ;
20544: LD_VAR 0 2
20548: PPUSH
20549: CALL_OW 301
20553: IFFALSE 20501
// end ;
20555: PPOPN 2
20557: END
// every 0 0$1 trigger StreamModeActive and sStu do
20558: LD_EXP 27
20562: IFFALSE 20570
20564: PUSH
20565: LD_EXP 66
20569: AND
20570: IFFALSE 20586
20572: GO 20574
20574: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20575: LD_STRING displayStucuk();
20577: PPUSH
20578: CALL_OW 559
// ResetFog ;
20582: CALL_OW 335
// end ;
20586: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20587: LD_EXP 27
20591: IFFALSE 20599
20593: PUSH
20594: LD_EXP 59
20598: AND
20599: IFFALSE 20740
20601: GO 20603
20603: DISABLE
20604: LD_INT 0
20606: PPUSH
20607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20608: LD_ADDR_VAR 0 2
20612: PUSH
20613: LD_INT 22
20615: PUSH
20616: LD_OWVAR 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PPUSH
20639: CALL_OW 69
20643: ST_TO_ADDR
// if not tmp then
20644: LD_VAR 0 2
20648: NOT
20649: IFFALSE 20653
// exit ;
20651: GO 20740
// un := tmp [ rand ( 1 , tmp ) ] ;
20653: LD_ADDR_VAR 0 1
20657: PUSH
20658: LD_VAR 0 2
20662: PUSH
20663: LD_INT 1
20665: PPUSH
20666: LD_VAR 0 2
20670: PPUSH
20671: CALL_OW 12
20675: ARRAY
20676: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20677: LD_VAR 0 1
20681: PPUSH
20682: LD_INT 0
20684: PPUSH
20685: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20689: LD_VAR 0 1
20693: PPUSH
20694: LD_OWVAR 3
20698: PUSH
20699: LD_VAR 0 1
20703: DIFF
20704: PPUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 74
20714: PPUSH
20715: CALL_OW 115
// wait ( 0 0$20 ) ;
20719: LD_INT 700
20721: PPUSH
20722: CALL_OW 67
// SetSide ( un , your_side ) ;
20726: LD_VAR 0 1
20730: PPUSH
20731: LD_OWVAR 2
20735: PPUSH
20736: CALL_OW 235
// end ;
20740: PPOPN 2
20742: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20743: LD_EXP 27
20747: IFFALSE 20755
20749: PUSH
20750: LD_EXP 60
20754: AND
20755: IFFALSE 20861
20757: GO 20759
20759: DISABLE
20760: LD_INT 0
20762: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20763: LD_ADDR_VAR 0 1
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_OWVAR 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: LD_INT 30
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 30
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PPUSH
20812: CALL_OW 69
20816: ST_TO_ADDR
// if not depot then
20817: LD_VAR 0 1
20821: NOT
20822: IFFALSE 20826
// exit ;
20824: GO 20861
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20826: LD_VAR 0 1
20830: PUSH
20831: LD_INT 1
20833: ARRAY
20834: PPUSH
20835: CALL_OW 250
20839: PPUSH
20840: LD_VAR 0 1
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: PPUSH
20849: CALL_OW 251
20853: PPUSH
20854: LD_INT 70
20856: PPUSH
20857: CALL_OW 495
// end ;
20861: PPOPN 1
20863: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20864: LD_EXP 27
20868: IFFALSE 20876
20870: PUSH
20871: LD_EXP 61
20875: AND
20876: IFFALSE 21087
20878: GO 20880
20880: DISABLE
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
20885: PPUSH
20886: PPUSH
20887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20888: LD_ADDR_VAR 0 5
20892: PUSH
20893: LD_INT 22
20895: PUSH
20896: LD_OWVAR 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 21
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: ST_TO_ADDR
// if not tmp then
20924: LD_VAR 0 5
20928: NOT
20929: IFFALSE 20933
// exit ;
20931: GO 21087
// for i in tmp do
20933: LD_ADDR_VAR 0 1
20937: PUSH
20938: LD_VAR 0 5
20942: PUSH
20943: FOR_IN
20944: IFFALSE 21085
// begin d := rand ( 0 , 5 ) ;
20946: LD_ADDR_VAR 0 4
20950: PUSH
20951: LD_INT 0
20953: PPUSH
20954: LD_INT 5
20956: PPUSH
20957: CALL_OW 12
20961: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20962: LD_ADDR_VAR 0 2
20966: PUSH
20967: LD_VAR 0 1
20971: PPUSH
20972: CALL_OW 250
20976: PPUSH
20977: LD_VAR 0 4
20981: PPUSH
20982: LD_INT 3
20984: PPUSH
20985: LD_INT 12
20987: PPUSH
20988: CALL_OW 12
20992: PPUSH
20993: CALL_OW 272
20997: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20998: LD_ADDR_VAR 0 3
21002: PUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 251
21012: PPUSH
21013: LD_VAR 0 4
21017: PPUSH
21018: LD_INT 3
21020: PPUSH
21021: LD_INT 12
21023: PPUSH
21024: CALL_OW 12
21028: PPUSH
21029: CALL_OW 273
21033: ST_TO_ADDR
// if ValidHex ( x , y ) then
21034: LD_VAR 0 2
21038: PPUSH
21039: LD_VAR 0 3
21043: PPUSH
21044: CALL_OW 488
21048: IFFALSE 21083
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21050: LD_VAR 0 1
21054: PPUSH
21055: LD_VAR 0 2
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: LD_INT 3
21067: PPUSH
21068: LD_INT 6
21070: PPUSH
21071: CALL_OW 12
21075: PPUSH
21076: LD_INT 1
21078: PPUSH
21079: CALL_OW 483
// end ;
21083: GO 20943
21085: POP
21086: POP
// end ;
21087: PPOPN 5
21089: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21090: LD_EXP 27
21094: IFFALSE 21102
21096: PUSH
21097: LD_EXP 62
21101: AND
21102: IFFALSE 21196
21104: GO 21106
21106: DISABLE
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21111: LD_ADDR_VAR 0 2
21115: PUSH
21116: LD_INT 22
21118: PUSH
21119: LD_OWVAR 2
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 32
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 21
21140: PUSH
21141: LD_INT 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: PPUSH
21153: CALL_OW 69
21157: ST_TO_ADDR
// if not tmp then
21158: LD_VAR 0 2
21162: NOT
21163: IFFALSE 21167
// exit ;
21165: GO 21196
// for i in tmp do
21167: LD_ADDR_VAR 0 1
21171: PUSH
21172: LD_VAR 0 2
21176: PUSH
21177: FOR_IN
21178: IFFALSE 21194
// SetFuel ( i , 0 ) ;
21180: LD_VAR 0 1
21184: PPUSH
21185: LD_INT 0
21187: PPUSH
21188: CALL_OW 240
21192: GO 21177
21194: POP
21195: POP
// end ;
21196: PPOPN 2
21198: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21199: LD_EXP 27
21203: IFFALSE 21211
21205: PUSH
21206: LD_EXP 63
21210: AND
21211: IFFALSE 21277
21213: GO 21215
21215: DISABLE
21216: LD_INT 0
21218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21219: LD_ADDR_VAR 0 1
21223: PUSH
21224: LD_INT 22
21226: PUSH
21227: LD_OWVAR 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 30
21238: PUSH
21239: LD_INT 29
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PPUSH
21250: CALL_OW 69
21254: ST_TO_ADDR
// if not tmp then
21255: LD_VAR 0 1
21259: NOT
21260: IFFALSE 21264
// exit ;
21262: GO 21277
// DestroyUnit ( tmp [ 1 ] ) ;
21264: LD_VAR 0 1
21268: PUSH
21269: LD_INT 1
21271: ARRAY
21272: PPUSH
21273: CALL_OW 65
// end ;
21277: PPOPN 1
21279: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21280: LD_EXP 27
21284: IFFALSE 21292
21286: PUSH
21287: LD_EXP 65
21291: AND
21292: IFFALSE 21421
21294: GO 21296
21296: DISABLE
21297: LD_INT 0
21299: PPUSH
// begin uc_side := 0 ;
21300: LD_ADDR_OWVAR 20
21304: PUSH
21305: LD_INT 0
21307: ST_TO_ADDR
// uc_nation := nation_arabian ;
21308: LD_ADDR_OWVAR 21
21312: PUSH
21313: LD_INT 2
21315: ST_TO_ADDR
// hc_gallery :=  ;
21316: LD_ADDR_OWVAR 33
21320: PUSH
21321: LD_STRING 
21323: ST_TO_ADDR
// hc_name :=  ;
21324: LD_ADDR_OWVAR 26
21328: PUSH
21329: LD_STRING 
21331: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21332: LD_INT 1
21334: PPUSH
21335: LD_INT 11
21337: PPUSH
21338: LD_INT 10
21340: PPUSH
21341: CALL_OW 380
// un := CreateHuman ;
21345: LD_ADDR_VAR 0 1
21349: PUSH
21350: CALL_OW 44
21354: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21367: LD_INT 35
21369: PPUSH
21370: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_INT 22
21381: PUSH
21382: LD_OWVAR 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PPUSH
21391: CALL_OW 69
21395: PPUSH
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 74
21405: PPUSH
21406: CALL_OW 115
// until IsDead ( un ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 301
21419: IFFALSE 21367
// end ;
21421: PPOPN 1
21423: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21424: LD_EXP 27
21428: IFFALSE 21436
21430: PUSH
21431: LD_EXP 67
21435: AND
21436: IFFALSE 21448
21438: GO 21440
21440: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21441: LD_STRING earthquake(getX(game), 0, 32)
21443: PPUSH
21444: CALL_OW 559
21448: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21449: LD_EXP 27
21453: IFFALSE 21461
21455: PUSH
21456: LD_EXP 68
21460: AND
21461: IFFALSE 21552
21463: GO 21465
21465: DISABLE
21466: LD_INT 0
21468: PPUSH
// begin enable ;
21469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21470: LD_ADDR_VAR 0 1
21474: PUSH
21475: LD_INT 22
21477: PUSH
21478: LD_OWVAR 2
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 21
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 33
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: ST_TO_ADDR
// if not tmp then
21517: LD_VAR 0 1
21521: NOT
21522: IFFALSE 21526
// exit ;
21524: GO 21552
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21526: LD_VAR 0 1
21530: PUSH
21531: LD_INT 1
21533: PPUSH
21534: LD_VAR 0 1
21538: PPUSH
21539: CALL_OW 12
21543: ARRAY
21544: PPUSH
21545: LD_INT 1
21547: PPUSH
21548: CALL_OW 234
// end ;
21552: PPOPN 1
21554: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21555: LD_EXP 27
21559: IFFALSE 21567
21561: PUSH
21562: LD_EXP 69
21566: AND
21567: IFFALSE 21708
21569: GO 21571
21571: DISABLE
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
21576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21577: LD_ADDR_VAR 0 3
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_OWVAR 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 25
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 69
21612: ST_TO_ADDR
// if not tmp then
21613: LD_VAR 0 3
21617: NOT
21618: IFFALSE 21622
// exit ;
21620: GO 21708
// un := tmp [ rand ( 1 , tmp ) ] ;
21622: LD_ADDR_VAR 0 2
21626: PUSH
21627: LD_VAR 0 3
21631: PUSH
21632: LD_INT 1
21634: PPUSH
21635: LD_VAR 0 3
21639: PPUSH
21640: CALL_OW 12
21644: ARRAY
21645: ST_TO_ADDR
// if Crawls ( un ) then
21646: LD_VAR 0 2
21650: PPUSH
21651: CALL_OW 318
21655: IFFALSE 21666
// ComWalk ( un ) ;
21657: LD_VAR 0 2
21661: PPUSH
21662: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21666: LD_VAR 0 2
21670: PPUSH
21671: LD_INT 9
21673: PPUSH
21674: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21678: LD_INT 28
21680: PPUSH
21681: LD_OWVAR 2
21685: PPUSH
21686: LD_INT 2
21688: PPUSH
21689: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21693: LD_INT 29
21695: PPUSH
21696: LD_OWVAR 2
21700: PPUSH
21701: LD_INT 2
21703: PPUSH
21704: CALL_OW 322
// end ;
21708: PPOPN 3
21710: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21711: LD_EXP 27
21715: IFFALSE 21723
21717: PUSH
21718: LD_EXP 70
21722: AND
21723: IFFALSE 21834
21725: GO 21727
21727: DISABLE
21728: LD_INT 0
21730: PPUSH
21731: PPUSH
21732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 25
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PPUSH
21764: CALL_OW 69
21768: ST_TO_ADDR
// if not tmp then
21769: LD_VAR 0 3
21773: NOT
21774: IFFALSE 21778
// exit ;
21776: GO 21834
// un := tmp [ rand ( 1 , tmp ) ] ;
21778: LD_ADDR_VAR 0 2
21782: PUSH
21783: LD_VAR 0 3
21787: PUSH
21788: LD_INT 1
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: CALL_OW 12
21800: ARRAY
21801: ST_TO_ADDR
// if Crawls ( un ) then
21802: LD_VAR 0 2
21806: PPUSH
21807: CALL_OW 318
21811: IFFALSE 21822
// ComWalk ( un ) ;
21813: LD_VAR 0 2
21817: PPUSH
21818: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21822: LD_VAR 0 2
21826: PPUSH
21827: LD_INT 8
21829: PPUSH
21830: CALL_OW 336
// end ;
21834: PPOPN 3
21836: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21837: LD_EXP 27
21841: IFFALSE 21849
21843: PUSH
21844: LD_EXP 71
21848: AND
21849: IFFALSE 21993
21851: GO 21853
21853: DISABLE
21854: LD_INT 0
21856: PPUSH
21857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 22
21865: PUSH
21866: LD_OWVAR 2
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 21
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: PUSH
21888: LD_INT 34
21890: PUSH
21891: LD_INT 12
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 34
21900: PUSH
21901: LD_INT 51
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 34
21910: PUSH
21911: LD_INT 32
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: ST_TO_ADDR
// if not tmp then
21934: LD_VAR 0 2
21938: NOT
21939: IFFALSE 21943
// exit ;
21941: GO 21993
// for i in tmp do
21943: LD_ADDR_VAR 0 1
21947: PUSH
21948: LD_VAR 0 2
21952: PUSH
21953: FOR_IN
21954: IFFALSE 21991
// if GetCargo ( i , mat_artifact ) = 0 then
21956: LD_VAR 0 1
21960: PPUSH
21961: LD_INT 4
21963: PPUSH
21964: CALL_OW 289
21968: PUSH
21969: LD_INT 0
21971: EQUAL
21972: IFFALSE 21989
// SetCargo ( i , mat_siberit , 100 ) ;
21974: LD_VAR 0 1
21978: PPUSH
21979: LD_INT 3
21981: PPUSH
21982: LD_INT 100
21984: PPUSH
21985: CALL_OW 290
21989: GO 21953
21991: POP
21992: POP
// end ;
21993: PPOPN 2
21995: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21996: LD_EXP 27
22000: IFFALSE 22008
22002: PUSH
22003: LD_EXP 72
22007: AND
22008: IFFALSE 22191
22010: GO 22012
22012: DISABLE
22013: LD_INT 0
22015: PPUSH
22016: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22017: LD_ADDR_VAR 0 2
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_OWVAR 2
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: ST_TO_ADDR
// if not tmp then
22039: LD_VAR 0 2
22043: NOT
22044: IFFALSE 22048
// exit ;
22046: GO 22191
// for i := 1 to 2 do
22048: LD_ADDR_VAR 0 1
22052: PUSH
22053: DOUBLE
22054: LD_INT 1
22056: DEC
22057: ST_TO_ADDR
22058: LD_INT 2
22060: PUSH
22061: FOR_TO
22062: IFFALSE 22189
// begin uc_side := your_side ;
22064: LD_ADDR_OWVAR 20
22068: PUSH
22069: LD_OWVAR 2
22073: ST_TO_ADDR
// uc_nation := nation_american ;
22074: LD_ADDR_OWVAR 21
22078: PUSH
22079: LD_INT 1
22081: ST_TO_ADDR
// vc_chassis := us_morphling ;
22082: LD_ADDR_OWVAR 37
22086: PUSH
22087: LD_INT 5
22089: ST_TO_ADDR
// vc_engine := engine_siberite ;
22090: LD_ADDR_OWVAR 39
22094: PUSH
22095: LD_INT 3
22097: ST_TO_ADDR
// vc_control := control_computer ;
22098: LD_ADDR_OWVAR 38
22102: PUSH
22103: LD_INT 3
22105: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22106: LD_ADDR_OWVAR 40
22110: PUSH
22111: LD_INT 10
22113: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22114: LD_VAR 0 2
22118: PUSH
22119: LD_INT 1
22121: ARRAY
22122: PPUSH
22123: CALL_OW 310
22127: NOT
22128: IFFALSE 22175
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22130: CALL_OW 45
22134: PPUSH
22135: LD_VAR 0 2
22139: PUSH
22140: LD_INT 1
22142: ARRAY
22143: PPUSH
22144: CALL_OW 250
22148: PPUSH
22149: LD_VAR 0 2
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: CALL_OW 251
22162: PPUSH
22163: LD_INT 12
22165: PPUSH
22166: LD_INT 1
22168: PPUSH
22169: CALL_OW 50
22173: GO 22187
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22175: CALL_OW 45
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: CALL_OW 51
// end ;
22187: GO 22061
22189: POP
22190: POP
// end ;
22191: PPOPN 2
22193: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22194: LD_EXP 27
22198: IFFALSE 22206
22200: PUSH
22201: LD_EXP 73
22205: AND
22206: IFFALSE 22428
22208: GO 22210
22210: DISABLE
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
22216: PPUSH
22217: PPUSH
22218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22219: LD_ADDR_VAR 0 6
22223: PUSH
22224: LD_INT 22
22226: PUSH
22227: LD_OWVAR 2
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 21
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 3
22248: PUSH
22249: LD_INT 23
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 69
22272: ST_TO_ADDR
// if not tmp then
22273: LD_VAR 0 6
22277: NOT
22278: IFFALSE 22282
// exit ;
22280: GO 22428
// s1 := rand ( 1 , 4 ) ;
22282: LD_ADDR_VAR 0 2
22286: PUSH
22287: LD_INT 1
22289: PPUSH
22290: LD_INT 4
22292: PPUSH
22293: CALL_OW 12
22297: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22298: LD_ADDR_VAR 0 4
22302: PUSH
22303: LD_VAR 0 6
22307: PUSH
22308: LD_INT 1
22310: ARRAY
22311: PPUSH
22312: LD_VAR 0 2
22316: PPUSH
22317: CALL_OW 259
22321: ST_TO_ADDR
// if s1 = 1 then
22322: LD_VAR 0 2
22326: PUSH
22327: LD_INT 1
22329: EQUAL
22330: IFFALSE 22350
// s2 := rand ( 2 , 4 ) else
22332: LD_ADDR_VAR 0 3
22336: PUSH
22337: LD_INT 2
22339: PPUSH
22340: LD_INT 4
22342: PPUSH
22343: CALL_OW 12
22347: ST_TO_ADDR
22348: GO 22358
// s2 := 1 ;
22350: LD_ADDR_VAR 0 3
22354: PUSH
22355: LD_INT 1
22357: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22358: LD_ADDR_VAR 0 5
22362: PUSH
22363: LD_VAR 0 6
22367: PUSH
22368: LD_INT 1
22370: ARRAY
22371: PPUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: CALL_OW 259
22381: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22382: LD_VAR 0 6
22386: PUSH
22387: LD_INT 1
22389: ARRAY
22390: PPUSH
22391: LD_VAR 0 2
22395: PPUSH
22396: LD_VAR 0 5
22400: PPUSH
22401: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22405: LD_VAR 0 6
22409: PUSH
22410: LD_INT 1
22412: ARRAY
22413: PPUSH
22414: LD_VAR 0 3
22418: PPUSH
22419: LD_VAR 0 4
22423: PPUSH
22424: CALL_OW 237
// end ;
22428: PPOPN 6
22430: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22431: LD_EXP 27
22435: IFFALSE 22443
22437: PUSH
22438: LD_EXP 74
22442: AND
22443: IFFALSE 22522
22445: GO 22447
22447: DISABLE
22448: LD_INT 0
22450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22451: LD_ADDR_VAR 0 1
22455: PUSH
22456: LD_INT 22
22458: PUSH
22459: LD_OWVAR 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 30
22470: PUSH
22471: LD_INT 3
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PPUSH
22482: CALL_OW 69
22486: ST_TO_ADDR
// if not tmp then
22487: LD_VAR 0 1
22491: NOT
22492: IFFALSE 22496
// exit ;
22494: GO 22522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22496: LD_VAR 0 1
22500: PUSH
22501: LD_INT 1
22503: PPUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 12
22513: ARRAY
22514: PPUSH
22515: LD_INT 1
22517: PPUSH
22518: CALL_OW 234
// end ;
22522: PPOPN 1
22524: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22525: LD_EXP 27
22529: IFFALSE 22537
22531: PUSH
22532: LD_EXP 75
22536: AND
22537: IFFALSE 22649
22539: GO 22541
22541: DISABLE
22542: LD_INT 0
22544: PPUSH
22545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22546: LD_ADDR_VAR 0 2
22550: PUSH
22551: LD_INT 22
22553: PUSH
22554: LD_OWVAR 2
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 2
22565: PUSH
22566: LD_INT 30
22568: PUSH
22569: LD_INT 27
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 30
22578: PUSH
22579: LD_INT 26
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 30
22588: PUSH
22589: LD_INT 28
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PPUSH
22606: CALL_OW 69
22610: ST_TO_ADDR
// if not tmp then
22611: LD_VAR 0 2
22615: NOT
22616: IFFALSE 22620
// exit ;
22618: GO 22649
// for i in tmp do
22620: LD_ADDR_VAR 0 1
22624: PUSH
22625: LD_VAR 0 2
22629: PUSH
22630: FOR_IN
22631: IFFALSE 22647
// SetLives ( i , 1 ) ;
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 234
22645: GO 22630
22647: POP
22648: POP
// end ;
22649: PPOPN 2
22651: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22652: LD_EXP 27
22656: IFFALSE 22664
22658: PUSH
22659: LD_EXP 76
22663: AND
22664: IFFALSE 22951
22666: GO 22668
22668: DISABLE
22669: LD_INT 0
22671: PPUSH
22672: PPUSH
22673: PPUSH
// begin i := rand ( 1 , 7 ) ;
22674: LD_ADDR_VAR 0 1
22678: PUSH
22679: LD_INT 1
22681: PPUSH
22682: LD_INT 7
22684: PPUSH
22685: CALL_OW 12
22689: ST_TO_ADDR
// case i of 1 :
22690: LD_VAR 0 1
22694: PUSH
22695: LD_INT 1
22697: DOUBLE
22698: EQUAL
22699: IFTRUE 22703
22701: GO 22713
22703: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22704: LD_STRING earthquake(getX(game), 0, 32)
22706: PPUSH
22707: CALL_OW 559
22711: GO 22951
22713: LD_INT 2
22715: DOUBLE
22716: EQUAL
22717: IFTRUE 22721
22719: GO 22735
22721: POP
// begin ToLua ( displayStucuk(); ) ;
22722: LD_STRING displayStucuk();
22724: PPUSH
22725: CALL_OW 559
// ResetFog ;
22729: CALL_OW 335
// end ; 3 :
22733: GO 22951
22735: LD_INT 3
22737: DOUBLE
22738: EQUAL
22739: IFTRUE 22743
22741: GO 22847
22743: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22744: LD_ADDR_VAR 0 2
22748: PUSH
22749: LD_INT 22
22751: PUSH
22752: LD_OWVAR 2
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 25
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PPUSH
22775: CALL_OW 69
22779: ST_TO_ADDR
// if not tmp then
22780: LD_VAR 0 2
22784: NOT
22785: IFFALSE 22789
// exit ;
22787: GO 22951
// un := tmp [ rand ( 1 , tmp ) ] ;
22789: LD_ADDR_VAR 0 3
22793: PUSH
22794: LD_VAR 0 2
22798: PUSH
22799: LD_INT 1
22801: PPUSH
22802: LD_VAR 0 2
22806: PPUSH
22807: CALL_OW 12
22811: ARRAY
22812: ST_TO_ADDR
// if Crawls ( un ) then
22813: LD_VAR 0 3
22817: PPUSH
22818: CALL_OW 318
22822: IFFALSE 22833
// ComWalk ( un ) ;
22824: LD_VAR 0 3
22828: PPUSH
22829: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22833: LD_VAR 0 3
22837: PPUSH
22838: LD_INT 8
22840: PPUSH
22841: CALL_OW 336
// end ; 4 :
22845: GO 22951
22847: LD_INT 4
22849: DOUBLE
22850: EQUAL
22851: IFTRUE 22855
22853: GO 22929
22855: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_INT 22
22863: PUSH
22864: LD_OWVAR 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 30
22875: PUSH
22876: LD_INT 29
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PPUSH
22887: CALL_OW 69
22891: ST_TO_ADDR
// if not tmp then
22892: LD_VAR 0 2
22896: NOT
22897: IFFALSE 22901
// exit ;
22899: GO 22951
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22901: LD_VAR 0 2
22905: PUSH
22906: LD_INT 1
22908: ARRAY
22909: PPUSH
22910: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22914: LD_VAR 0 2
22918: PUSH
22919: LD_INT 1
22921: ARRAY
22922: PPUSH
22923: CALL_OW 65
// end ; 5 .. 7 :
22927: GO 22951
22929: LD_INT 5
22931: DOUBLE
22932: GREATEREQUAL
22933: IFFALSE 22941
22935: LD_INT 7
22937: DOUBLE
22938: LESSEQUAL
22939: IFTRUE 22943
22941: GO 22950
22943: POP
// StreamSibBomb ; end ;
22944: CALL 19132 0 0
22948: GO 22951
22950: POP
// end ;
22951: PPOPN 3
22953: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22954: LD_EXP 27
22958: IFFALSE 22966
22960: PUSH
22961: LD_EXP 77
22965: AND
22966: IFFALSE 23122
22968: GO 22970
22970: DISABLE
22971: LD_INT 0
22973: PPUSH
22974: PPUSH
22975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22976: LD_ADDR_VAR 0 2
22980: PUSH
22981: LD_INT 81
22983: PUSH
22984: LD_OWVAR 2
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: LD_INT 21
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 21
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: ST_TO_ADDR
// if not tmp then
23030: LD_VAR 0 2
23034: NOT
23035: IFFALSE 23039
// exit ;
23037: GO 23122
// p := 0 ;
23039: LD_ADDR_VAR 0 3
23043: PUSH
23044: LD_INT 0
23046: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23047: LD_INT 35
23049: PPUSH
23050: CALL_OW 67
// p := p + 1 ;
23054: LD_ADDR_VAR 0 3
23058: PUSH
23059: LD_VAR 0 3
23063: PUSH
23064: LD_INT 1
23066: PLUS
23067: ST_TO_ADDR
// for i in tmp do
23068: LD_ADDR_VAR 0 1
23072: PUSH
23073: LD_VAR 0 2
23077: PUSH
23078: FOR_IN
23079: IFFALSE 23110
// if GetLives ( i ) < 1000 then
23081: LD_VAR 0 1
23085: PPUSH
23086: CALL_OW 256
23090: PUSH
23091: LD_INT 1000
23093: LESS
23094: IFFALSE 23108
// SetLives ( i , 1000 ) ;
23096: LD_VAR 0 1
23100: PPUSH
23101: LD_INT 1000
23103: PPUSH
23104: CALL_OW 234
23108: GO 23078
23110: POP
23111: POP
// until p > 20 ;
23112: LD_VAR 0 3
23116: PUSH
23117: LD_INT 20
23119: GREATER
23120: IFFALSE 23047
// end ;
23122: PPOPN 3
23124: END
// every 0 0$1 trigger StreamModeActive and sTime do
23125: LD_EXP 27
23129: IFFALSE 23137
23131: PUSH
23132: LD_EXP 78
23136: AND
23137: IFFALSE 23172
23139: GO 23141
23141: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23142: LD_INT 28
23144: PPUSH
23145: LD_OWVAR 2
23149: PPUSH
23150: LD_INT 2
23152: PPUSH
23153: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23157: LD_INT 30
23159: PPUSH
23160: LD_OWVAR 2
23164: PPUSH
23165: LD_INT 2
23167: PPUSH
23168: CALL_OW 322
// end ;
23172: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23173: LD_EXP 27
23177: IFFALSE 23185
23179: PUSH
23180: LD_EXP 79
23184: AND
23185: IFFALSE 23306
23187: GO 23189
23189: DISABLE
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23194: LD_ADDR_VAR 0 2
23198: PUSH
23199: LD_INT 22
23201: PUSH
23202: LD_OWVAR 2
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 21
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 23
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: PPUSH
23243: CALL_OW 69
23247: ST_TO_ADDR
// if not tmp then
23248: LD_VAR 0 2
23252: NOT
23253: IFFALSE 23257
// exit ;
23255: GO 23306
// for i in tmp do
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: LD_VAR 0 2
23266: PUSH
23267: FOR_IN
23268: IFFALSE 23304
// begin if Crawls ( i ) then
23270: LD_VAR 0 1
23274: PPUSH
23275: CALL_OW 318
23279: IFFALSE 23290
// ComWalk ( i ) ;
23281: LD_VAR 0 1
23285: PPUSH
23286: CALL_OW 138
// SetClass ( i , 2 ) ;
23290: LD_VAR 0 1
23294: PPUSH
23295: LD_INT 2
23297: PPUSH
23298: CALL_OW 336
// end ;
23302: GO 23267
23304: POP
23305: POP
// end ;
23306: PPOPN 2
23308: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23309: LD_EXP 27
23313: IFFALSE 23321
23315: PUSH
23316: LD_EXP 80
23320: AND
23321: IFFALSE 23611
23323: GO 23325
23325: DISABLE
23326: LD_INT 0
23328: PPUSH
23329: PPUSH
23330: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23331: LD_OWVAR 2
23335: PPUSH
23336: LD_INT 9
23338: PPUSH
23339: LD_INT 1
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23349: LD_INT 9
23351: PPUSH
23352: LD_OWVAR 2
23356: PPUSH
23357: CALL_OW 343
// uc_side := 9 ;
23361: LD_ADDR_OWVAR 20
23365: PUSH
23366: LD_INT 9
23368: ST_TO_ADDR
// uc_nation := 2 ;
23369: LD_ADDR_OWVAR 21
23373: PUSH
23374: LD_INT 2
23376: ST_TO_ADDR
// hc_name := Dark Warrior ;
23377: LD_ADDR_OWVAR 26
23381: PUSH
23382: LD_STRING Dark Warrior
23384: ST_TO_ADDR
// hc_gallery :=  ;
23385: LD_ADDR_OWVAR 33
23389: PUSH
23390: LD_STRING 
23392: ST_TO_ADDR
// hc_noskilllimit := true ;
23393: LD_ADDR_OWVAR 76
23397: PUSH
23398: LD_INT 1
23400: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23401: LD_ADDR_OWVAR 31
23405: PUSH
23406: LD_INT 30
23408: PUSH
23409: LD_INT 30
23411: PUSH
23412: LD_INT 30
23414: PUSH
23415: LD_INT 30
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: ST_TO_ADDR
// un := CreateHuman ;
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: CALL_OW 44
23433: ST_TO_ADDR
// hc_noskilllimit := false ;
23434: LD_ADDR_OWVAR 76
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23442: LD_VAR 0 3
23446: PPUSH
23447: LD_INT 1
23449: PPUSH
23450: CALL_OW 51
// ToLua ( playRanger() ) ;
23454: LD_STRING playRanger()
23456: PPUSH
23457: CALL_OW 559
// p := 0 ;
23461: LD_ADDR_VAR 0 2
23465: PUSH
23466: LD_INT 0
23468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23469: LD_INT 35
23471: PPUSH
23472: CALL_OW 67
// p := p + 1 ;
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: LD_VAR 0 2
23485: PUSH
23486: LD_INT 1
23488: PLUS
23489: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23490: LD_VAR 0 3
23494: PPUSH
23495: CALL_OW 256
23499: PUSH
23500: LD_INT 1000
23502: LESS
23503: IFFALSE 23517
// SetLives ( un , 1000 ) ;
23505: LD_VAR 0 3
23509: PPUSH
23510: LD_INT 1000
23512: PPUSH
23513: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23517: LD_VAR 0 3
23521: PPUSH
23522: LD_INT 81
23524: PUSH
23525: LD_OWVAR 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 91
23536: PUSH
23537: LD_VAR 0 3
23541: PUSH
23542: LD_INT 30
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 69
23558: PPUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: CALL_OW 74
23568: PPUSH
23569: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23573: LD_VAR 0 2
23577: PUSH
23578: LD_INT 80
23580: GREATER
23581: IFTRUE 23594
23583: PUSH
23584: LD_VAR 0 3
23588: PPUSH
23589: CALL_OW 301
23593: OR
23594: IFFALSE 23469
// if un then
23596: LD_VAR 0 3
23600: IFFALSE 23611
// RemoveUnit ( un ) ;
23602: LD_VAR 0 3
23606: PPUSH
23607: CALL_OW 64
// end ;
23611: PPOPN 3
23613: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23614: LD_EXP 81
23618: IFFALSE 23734
23620: GO 23622
23622: DISABLE
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23628: LD_ADDR_VAR 0 2
23632: PUSH
23633: LD_INT 81
23635: PUSH
23636: LD_OWVAR 2
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 21
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PPUSH
23659: CALL_OW 69
23663: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23664: LD_STRING playComputer()
23666: PPUSH
23667: CALL_OW 559
// if not tmp then
23671: LD_VAR 0 2
23675: NOT
23676: IFFALSE 23680
// exit ;
23678: GO 23734
// for i in tmp do
23680: LD_ADDR_VAR 0 1
23684: PUSH
23685: LD_VAR 0 2
23689: PUSH
23690: FOR_IN
23691: IFFALSE 23732
// for j := 1 to 4 do
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: DOUBLE
23699: LD_INT 1
23701: DEC
23702: ST_TO_ADDR
23703: LD_INT 4
23705: PUSH
23706: FOR_TO
23707: IFFALSE 23728
// SetSkill ( i , j , 10 ) ;
23709: LD_VAR 0 1
23713: PPUSH
23714: LD_VAR 0 3
23718: PPUSH
23719: LD_INT 10
23721: PPUSH
23722: CALL_OW 237
23726: GO 23706
23728: POP
23729: POP
23730: GO 23690
23732: POP
23733: POP
// end ;
23734: PPOPN 3
23736: END
// every 0 0$1 trigger s30 do var i , tmp ;
23737: LD_EXP 82
23741: IFFALSE 23810
23743: GO 23745
23745: DISABLE
23746: LD_INT 0
23748: PPUSH
23749: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23750: LD_ADDR_VAR 0 2
23754: PUSH
23755: LD_INT 22
23757: PUSH
23758: LD_OWVAR 2
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PPUSH
23767: CALL_OW 69
23771: ST_TO_ADDR
// if not tmp then
23772: LD_VAR 0 2
23776: NOT
23777: IFFALSE 23781
// exit ;
23779: GO 23810
// for i in tmp do
23781: LD_ADDR_VAR 0 1
23785: PUSH
23786: LD_VAR 0 2
23790: PUSH
23791: FOR_IN
23792: IFFALSE 23808
// SetLives ( i , 300 ) ;
23794: LD_VAR 0 1
23798: PPUSH
23799: LD_INT 300
23801: PPUSH
23802: CALL_OW 234
23806: GO 23791
23808: POP
23809: POP
// end ;
23810: PPOPN 2
23812: END
// every 0 0$1 trigger s60 do var i , tmp ;
23813: LD_EXP 83
23817: IFFALSE 23886
23819: GO 23821
23821: DISABLE
23822: LD_INT 0
23824: PPUSH
23825: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23826: LD_ADDR_VAR 0 2
23830: PUSH
23831: LD_INT 22
23833: PUSH
23834: LD_OWVAR 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PPUSH
23843: CALL_OW 69
23847: ST_TO_ADDR
// if not tmp then
23848: LD_VAR 0 2
23852: NOT
23853: IFFALSE 23857
// exit ;
23855: GO 23886
// for i in tmp do
23857: LD_ADDR_VAR 0 1
23861: PUSH
23862: LD_VAR 0 2
23866: PUSH
23867: FOR_IN
23868: IFFALSE 23884
// SetLives ( i , 600 ) ;
23870: LD_VAR 0 1
23874: PPUSH
23875: LD_INT 600
23877: PPUSH
23878: CALL_OW 234
23882: GO 23867
23884: POP
23885: POP
// end ;
23886: PPOPN 2
23888: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23889: LD_INT 0
23891: PPUSH
// case cmd of 301 :
23892: LD_VAR 0 1
23896: PUSH
23897: LD_INT 301
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23937
23905: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23906: LD_VAR 0 6
23910: PPUSH
23911: LD_VAR 0 7
23915: PPUSH
23916: LD_VAR 0 8
23920: PPUSH
23921: LD_VAR 0 4
23925: PPUSH
23926: LD_VAR 0 5
23930: PPUSH
23931: CALL 25150 0 5
23935: GO 24058
23937: LD_INT 302
23939: DOUBLE
23940: EQUAL
23941: IFTRUE 23945
23943: GO 23982
23945: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23946: LD_VAR 0 6
23950: PPUSH
23951: LD_VAR 0 7
23955: PPUSH
23956: LD_VAR 0 8
23960: PPUSH
23961: LD_VAR 0 9
23965: PPUSH
23966: LD_VAR 0 4
23970: PPUSH
23971: LD_VAR 0 5
23975: PPUSH
23976: CALL 25241 0 6
23980: GO 24058
23982: LD_INT 303
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23990
23988: GO 24027
23990: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23991: LD_VAR 0 6
23995: PPUSH
23996: LD_VAR 0 7
24000: PPUSH
24001: LD_VAR 0 8
24005: PPUSH
24006: LD_VAR 0 9
24010: PPUSH
24011: LD_VAR 0 4
24015: PPUSH
24016: LD_VAR 0 5
24020: PPUSH
24021: CALL 24063 0 6
24025: GO 24058
24027: LD_INT 304
24029: DOUBLE
24030: EQUAL
24031: IFTRUE 24035
24033: GO 24057
24035: POP
// hHackTeleport ( unit , x , y ) ; end ;
24036: LD_VAR 0 2
24040: PPUSH
24041: LD_VAR 0 4
24045: PPUSH
24046: LD_VAR 0 5
24050: PPUSH
24051: CALL 25834 0 3
24055: GO 24058
24057: POP
// end ;
24058: LD_VAR 0 12
24062: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24063: LD_INT 0
24065: PPUSH
24066: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24067: LD_VAR 0 1
24071: PUSH
24072: LD_INT 1
24074: LESS
24075: IFTRUE 24087
24077: PUSH
24078: LD_VAR 0 1
24082: PUSH
24083: LD_INT 3
24085: GREATER
24086: OR
24087: IFTRUE 24105
24089: PUSH
24090: LD_VAR 0 5
24094: PPUSH
24095: LD_VAR 0 6
24099: PPUSH
24100: CALL_OW 428
24104: OR
24105: IFFALSE 24109
// exit ;
24107: GO 24837
// uc_side := your_side ;
24109: LD_ADDR_OWVAR 20
24113: PUSH
24114: LD_OWVAR 2
24118: ST_TO_ADDR
// uc_nation := nation ;
24119: LD_ADDR_OWVAR 21
24123: PUSH
24124: LD_VAR 0 1
24128: ST_TO_ADDR
// bc_level = 1 ;
24129: LD_ADDR_OWVAR 43
24133: PUSH
24134: LD_INT 1
24136: ST_TO_ADDR
// case btype of 1 :
24137: LD_VAR 0 2
24141: PUSH
24142: LD_INT 1
24144: DOUBLE
24145: EQUAL
24146: IFTRUE 24150
24148: GO 24161
24150: POP
// bc_type := b_depot ; 2 :
24151: LD_ADDR_OWVAR 42
24155: PUSH
24156: LD_INT 0
24158: ST_TO_ADDR
24159: GO 24781
24161: LD_INT 2
24163: DOUBLE
24164: EQUAL
24165: IFTRUE 24169
24167: GO 24180
24169: POP
// bc_type := b_warehouse ; 3 :
24170: LD_ADDR_OWVAR 42
24174: PUSH
24175: LD_INT 1
24177: ST_TO_ADDR
24178: GO 24781
24180: LD_INT 3
24182: DOUBLE
24183: EQUAL
24184: IFTRUE 24188
24186: GO 24199
24188: POP
// bc_type := b_lab ; 4 .. 9 :
24189: LD_ADDR_OWVAR 42
24193: PUSH
24194: LD_INT 6
24196: ST_TO_ADDR
24197: GO 24781
24199: LD_INT 4
24201: DOUBLE
24202: GREATEREQUAL
24203: IFFALSE 24211
24205: LD_INT 9
24207: DOUBLE
24208: LESSEQUAL
24209: IFTRUE 24213
24211: GO 24273
24213: POP
// begin bc_type := b_lab_half ;
24214: LD_ADDR_OWVAR 42
24218: PUSH
24219: LD_INT 7
24221: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24222: LD_ADDR_OWVAR 44
24226: PUSH
24227: LD_INT 10
24229: PUSH
24230: LD_INT 11
24232: PUSH
24233: LD_INT 12
24235: PUSH
24236: LD_INT 15
24238: PUSH
24239: LD_INT 14
24241: PUSH
24242: LD_INT 13
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: PUSH
24253: LD_VAR 0 2
24257: PUSH
24258: LD_INT 3
24260: MINUS
24261: ARRAY
24262: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
24263: LD_ADDR_OWVAR 45
24267: PUSH
24268: LD_INT 9
24270: ST_TO_ADDR
// end ; 10 .. 13 :
24271: GO 24781
24273: LD_INT 10
24275: DOUBLE
24276: GREATEREQUAL
24277: IFFALSE 24285
24279: LD_INT 13
24281: DOUBLE
24282: LESSEQUAL
24283: IFTRUE 24287
24285: GO 24364
24287: POP
// begin bc_type := b_lab_full ;
24288: LD_ADDR_OWVAR 42
24292: PUSH
24293: LD_INT 8
24295: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24296: LD_ADDR_OWVAR 44
24300: PUSH
24301: LD_INT 10
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 14
24309: PUSH
24310: LD_INT 13
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: LD_VAR 0 2
24323: PUSH
24324: LD_INT 9
24326: MINUS
24327: ARRAY
24328: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24329: LD_ADDR_OWVAR 45
24333: PUSH
24334: LD_INT 11
24336: PUSH
24337: LD_INT 15
24339: PUSH
24340: LD_INT 12
24342: PUSH
24343: LD_INT 15
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: PUSH
24352: LD_VAR 0 2
24356: PUSH
24357: LD_INT 9
24359: MINUS
24360: ARRAY
24361: ST_TO_ADDR
// end ; 14 :
24362: GO 24781
24364: LD_INT 14
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24383
24372: POP
// bc_type := b_workshop ; 15 :
24373: LD_ADDR_OWVAR 42
24377: PUSH
24378: LD_INT 2
24380: ST_TO_ADDR
24381: GO 24781
24383: LD_INT 15
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 24402
24391: POP
// bc_type := b_factory ; 16 :
24392: LD_ADDR_OWVAR 42
24396: PUSH
24397: LD_INT 3
24399: ST_TO_ADDR
24400: GO 24781
24402: LD_INT 16
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24421
24410: POP
// bc_type := b_ext_gun ; 17 :
24411: LD_ADDR_OWVAR 42
24415: PUSH
24416: LD_INT 17
24418: ST_TO_ADDR
24419: GO 24781
24421: LD_INT 17
24423: DOUBLE
24424: EQUAL
24425: IFTRUE 24429
24427: GO 24457
24429: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24430: LD_ADDR_OWVAR 42
24434: PUSH
24435: LD_INT 19
24437: PUSH
24438: LD_INT 23
24440: PUSH
24441: LD_INT 19
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: LIST
24448: PUSH
24449: LD_VAR 0 1
24453: ARRAY
24454: ST_TO_ADDR
24455: GO 24781
24457: LD_INT 18
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 24476
24465: POP
// bc_type := b_ext_radar ; 19 :
24466: LD_ADDR_OWVAR 42
24470: PUSH
24471: LD_INT 20
24473: ST_TO_ADDR
24474: GO 24781
24476: LD_INT 19
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24495
24484: POP
// bc_type := b_ext_radio ; 20 :
24485: LD_ADDR_OWVAR 42
24489: PUSH
24490: LD_INT 22
24492: ST_TO_ADDR
24493: GO 24781
24495: LD_INT 20
24497: DOUBLE
24498: EQUAL
24499: IFTRUE 24503
24501: GO 24514
24503: POP
// bc_type := b_ext_siberium ; 21 :
24504: LD_ADDR_OWVAR 42
24508: PUSH
24509: LD_INT 21
24511: ST_TO_ADDR
24512: GO 24781
24514: LD_INT 21
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24533
24522: POP
// bc_type := b_ext_computer ; 22 :
24523: LD_ADDR_OWVAR 42
24527: PUSH
24528: LD_INT 24
24530: ST_TO_ADDR
24531: GO 24781
24533: LD_INT 22
24535: DOUBLE
24536: EQUAL
24537: IFTRUE 24541
24539: GO 24552
24541: POP
// bc_type := b_ext_track ; 23 :
24542: LD_ADDR_OWVAR 42
24546: PUSH
24547: LD_INT 16
24549: ST_TO_ADDR
24550: GO 24781
24552: LD_INT 23
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24571
24560: POP
// bc_type := b_ext_laser ; 24 :
24561: LD_ADDR_OWVAR 42
24565: PUSH
24566: LD_INT 25
24568: ST_TO_ADDR
24569: GO 24781
24571: LD_INT 24
24573: DOUBLE
24574: EQUAL
24575: IFTRUE 24579
24577: GO 24590
24579: POP
// bc_type := b_control_tower ; 25 :
24580: LD_ADDR_OWVAR 42
24584: PUSH
24585: LD_INT 36
24587: ST_TO_ADDR
24588: GO 24781
24590: LD_INT 25
24592: DOUBLE
24593: EQUAL
24594: IFTRUE 24598
24596: GO 24609
24598: POP
// bc_type := b_breastwork ; 26 :
24599: LD_ADDR_OWVAR 42
24603: PUSH
24604: LD_INT 31
24606: ST_TO_ADDR
24607: GO 24781
24609: LD_INT 26
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24628
24617: POP
// bc_type := b_bunker ; 27 :
24618: LD_ADDR_OWVAR 42
24622: PUSH
24623: LD_INT 32
24625: ST_TO_ADDR
24626: GO 24781
24628: LD_INT 27
24630: DOUBLE
24631: EQUAL
24632: IFTRUE 24636
24634: GO 24647
24636: POP
// bc_type := b_turret ; 28 :
24637: LD_ADDR_OWVAR 42
24641: PUSH
24642: LD_INT 33
24644: ST_TO_ADDR
24645: GO 24781
24647: LD_INT 28
24649: DOUBLE
24650: EQUAL
24651: IFTRUE 24655
24653: GO 24666
24655: POP
// bc_type := b_armoury ; 29 :
24656: LD_ADDR_OWVAR 42
24660: PUSH
24661: LD_INT 4
24663: ST_TO_ADDR
24664: GO 24781
24666: LD_INT 29
24668: DOUBLE
24669: EQUAL
24670: IFTRUE 24674
24672: GO 24685
24674: POP
// bc_type := b_barracks ; 30 :
24675: LD_ADDR_OWVAR 42
24679: PUSH
24680: LD_INT 5
24682: ST_TO_ADDR
24683: GO 24781
24685: LD_INT 30
24687: DOUBLE
24688: EQUAL
24689: IFTRUE 24693
24691: GO 24704
24693: POP
// bc_type := b_solar_power ; 31 :
24694: LD_ADDR_OWVAR 42
24698: PUSH
24699: LD_INT 27
24701: ST_TO_ADDR
24702: GO 24781
24704: LD_INT 31
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24723
24712: POP
// bc_type := b_oil_power ; 32 :
24713: LD_ADDR_OWVAR 42
24717: PUSH
24718: LD_INT 26
24720: ST_TO_ADDR
24721: GO 24781
24723: LD_INT 32
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24742
24731: POP
// bc_type := b_siberite_power ; 33 :
24732: LD_ADDR_OWVAR 42
24736: PUSH
24737: LD_INT 28
24739: ST_TO_ADDR
24740: GO 24781
24742: LD_INT 33
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24761
24750: POP
// bc_type := b_oil_mine ; 34 :
24751: LD_ADDR_OWVAR 42
24755: PUSH
24756: LD_INT 29
24758: ST_TO_ADDR
24759: GO 24781
24761: LD_INT 34
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24780
24769: POP
// bc_type := b_siberite_mine ; end ;
24770: LD_ADDR_OWVAR 42
24774: PUSH
24775: LD_INT 30
24777: ST_TO_ADDR
24778: GO 24781
24780: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24781: LD_ADDR_VAR 0 8
24785: PUSH
24786: LD_VAR 0 5
24790: PPUSH
24791: LD_VAR 0 6
24795: PPUSH
24796: LD_VAR 0 3
24800: PPUSH
24801: CALL_OW 47
24805: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24806: LD_OWVAR 42
24810: PUSH
24811: LD_INT 32
24813: PUSH
24814: LD_INT 33
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: IN
24821: IFFALSE 24837
// PlaceWeaponTurret ( b , weapon ) ;
24823: LD_VAR 0 8
24827: PPUSH
24828: LD_VAR 0 4
24832: PPUSH
24833: CALL_OW 431
// end ;
24837: LD_VAR 0 7
24841: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24842: LD_INT 0
24844: PPUSH
24845: PPUSH
24846: PPUSH
24847: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24848: LD_ADDR_VAR 0 4
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_OWVAR 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 30
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 30
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PPUSH
24897: CALL_OW 69
24901: ST_TO_ADDR
// if not tmp then
24902: LD_VAR 0 4
24906: NOT
24907: IFFALSE 24911
// exit ;
24909: GO 24970
// for i in tmp do
24911: LD_ADDR_VAR 0 2
24915: PUSH
24916: LD_VAR 0 4
24920: PUSH
24921: FOR_IN
24922: IFFALSE 24968
// for j = 1 to 3 do
24924: LD_ADDR_VAR 0 3
24928: PUSH
24929: DOUBLE
24930: LD_INT 1
24932: DEC
24933: ST_TO_ADDR
24934: LD_INT 3
24936: PUSH
24937: FOR_TO
24938: IFFALSE 24964
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24940: LD_VAR 0 2
24944: PPUSH
24945: CALL_OW 274
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: LD_INT 99999
24957: PPUSH
24958: CALL_OW 277
24962: GO 24937
24964: POP
24965: POP
24966: GO 24921
24968: POP
24969: POP
// end ;
24970: LD_VAR 0 1
24974: RET
// export function hHackSetLevel10 ; var i , j ; begin
24975: LD_INT 0
24977: PPUSH
24978: PPUSH
24979: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24980: LD_ADDR_VAR 0 2
24984: PUSH
24985: LD_INT 21
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PPUSH
24995: CALL_OW 69
24999: PUSH
25000: FOR_IN
25001: IFFALSE 25053
// if IsSelected ( i ) then
25003: LD_VAR 0 2
25007: PPUSH
25008: CALL_OW 306
25012: IFFALSE 25051
// begin for j := 1 to 4 do
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: DOUBLE
25020: LD_INT 1
25022: DEC
25023: ST_TO_ADDR
25024: LD_INT 4
25026: PUSH
25027: FOR_TO
25028: IFFALSE 25049
// SetSkill ( i , j , 10 ) ;
25030: LD_VAR 0 2
25034: PPUSH
25035: LD_VAR 0 3
25039: PPUSH
25040: LD_INT 10
25042: PPUSH
25043: CALL_OW 237
25047: GO 25027
25049: POP
25050: POP
// end ;
25051: GO 25000
25053: POP
25054: POP
// end ;
25055: LD_VAR 0 1
25059: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_INT 22
25072: PUSH
25073: LD_OWVAR 2
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 21
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PPUSH
25096: CALL_OW 69
25100: PUSH
25101: FOR_IN
25102: IFFALSE 25143
// begin for j := 1 to 4 do
25104: LD_ADDR_VAR 0 3
25108: PUSH
25109: DOUBLE
25110: LD_INT 1
25112: DEC
25113: ST_TO_ADDR
25114: LD_INT 4
25116: PUSH
25117: FOR_TO
25118: IFFALSE 25139
// SetSkill ( i , j , 10 ) ;
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: LD_INT 10
25132: PPUSH
25133: CALL_OW 237
25137: GO 25117
25139: POP
25140: POP
// end ;
25141: GO 25101
25143: POP
25144: POP
// end ;
25145: LD_VAR 0 1
25149: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25150: LD_INT 0
25152: PPUSH
// uc_side := your_side ;
25153: LD_ADDR_OWVAR 20
25157: PUSH
25158: LD_OWVAR 2
25162: ST_TO_ADDR
// uc_nation := nation ;
25163: LD_ADDR_OWVAR 21
25167: PUSH
25168: LD_VAR 0 1
25172: ST_TO_ADDR
// InitHc ;
25173: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25177: LD_INT 0
25179: PPUSH
25180: LD_VAR 0 2
25184: PPUSH
25185: LD_VAR 0 3
25189: PPUSH
25190: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25194: LD_VAR 0 4
25198: PPUSH
25199: LD_VAR 0 5
25203: PPUSH
25204: CALL_OW 428
25208: PUSH
25209: LD_INT 0
25211: EQUAL
25212: IFFALSE 25236
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25214: CALL_OW 44
25218: PPUSH
25219: LD_VAR 0 4
25223: PPUSH
25224: LD_VAR 0 5
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL_OW 48
// end ;
25236: LD_VAR 0 6
25240: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
// uc_side := your_side ;
25245: LD_ADDR_OWVAR 20
25249: PUSH
25250: LD_OWVAR 2
25254: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25255: LD_VAR 0 1
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 3
25268: PUSH
25269: LD_INT 4
25271: PUSH
25272: LD_INT 5
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: IN
25282: IFFALSE 25294
// uc_nation := nation_american else
25284: LD_ADDR_OWVAR 21
25288: PUSH
25289: LD_INT 1
25291: ST_TO_ADDR
25292: GO 25337
// if chassis in [ 11 , 12 , 13 , 14 ] then
25294: LD_VAR 0 1
25298: PUSH
25299: LD_INT 11
25301: PUSH
25302: LD_INT 12
25304: PUSH
25305: LD_INT 13
25307: PUSH
25308: LD_INT 14
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: IN
25317: IFFALSE 25329
// uc_nation := nation_arabian else
25319: LD_ADDR_OWVAR 21
25323: PUSH
25324: LD_INT 2
25326: ST_TO_ADDR
25327: GO 25337
// uc_nation := nation_russian ;
25329: LD_ADDR_OWVAR 21
25333: PUSH
25334: LD_INT 3
25336: ST_TO_ADDR
// vc_chassis := chassis ;
25337: LD_ADDR_OWVAR 37
25341: PUSH
25342: LD_VAR 0 1
25346: ST_TO_ADDR
// vc_engine := engine ;
25347: LD_ADDR_OWVAR 39
25351: PUSH
25352: LD_VAR 0 2
25356: ST_TO_ADDR
// vc_control := control ;
25357: LD_ADDR_OWVAR 38
25361: PUSH
25362: LD_VAR 0 3
25366: ST_TO_ADDR
// vc_weapon := weapon ;
25367: LD_ADDR_OWVAR 40
25371: PUSH
25372: LD_VAR 0 4
25376: ST_TO_ADDR
// un := CreateVehicle ;
25377: LD_ADDR_VAR 0 8
25381: PUSH
25382: CALL_OW 45
25386: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25387: LD_VAR 0 8
25391: PPUSH
25392: LD_INT 0
25394: PPUSH
25395: LD_INT 5
25397: PPUSH
25398: CALL_OW 12
25402: PPUSH
25403: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25407: LD_VAR 0 8
25411: PPUSH
25412: LD_VAR 0 5
25416: PPUSH
25417: LD_VAR 0 6
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: CALL_OW 48
// end ;
25429: LD_VAR 0 7
25433: RET
// export hInvincible ; every 1 do
25434: GO 25436
25436: DISABLE
// hInvincible := [ ] ;
25437: LD_ADDR_EXP 84
25441: PUSH
25442: EMPTY
25443: ST_TO_ADDR
25444: END
// every 10 do var i ;
25445: GO 25447
25447: DISABLE
25448: LD_INT 0
25450: PPUSH
// begin enable ;
25451: ENABLE
// if not hInvincible then
25452: LD_EXP 84
25456: NOT
25457: IFFALSE 25461
// exit ;
25459: GO 25505
// for i in hInvincible do
25461: LD_ADDR_VAR 0 1
25465: PUSH
25466: LD_EXP 84
25470: PUSH
25471: FOR_IN
25472: IFFALSE 25503
// if GetLives ( i ) < 1000 then
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 256
25483: PUSH
25484: LD_INT 1000
25486: LESS
25487: IFFALSE 25501
// SetLives ( i , 1000 ) ;
25489: LD_VAR 0 1
25493: PPUSH
25494: LD_INT 1000
25496: PPUSH
25497: CALL_OW 234
25501: GO 25471
25503: POP
25504: POP
// end ;
25505: PPOPN 1
25507: END
// export function hHackInvincible ; var i ; begin
25508: LD_INT 0
25510: PPUSH
25511: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25512: LD_ADDR_VAR 0 2
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 21
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 21
25532: PUSH
25533: LD_INT 2
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: PPUSH
25545: CALL_OW 69
25549: PUSH
25550: FOR_IN
25551: IFFALSE 25612
// if IsSelected ( i ) then
25553: LD_VAR 0 2
25557: PPUSH
25558: CALL_OW 306
25562: IFFALSE 25610
// begin if i in hInvincible then
25564: LD_VAR 0 2
25568: PUSH
25569: LD_EXP 84
25573: IN
25574: IFFALSE 25594
// hInvincible := hInvincible diff i else
25576: LD_ADDR_EXP 84
25580: PUSH
25581: LD_EXP 84
25585: PUSH
25586: LD_VAR 0 2
25590: DIFF
25591: ST_TO_ADDR
25592: GO 25610
// hInvincible := hInvincible union i ;
25594: LD_ADDR_EXP 84
25598: PUSH
25599: LD_EXP 84
25603: PUSH
25604: LD_VAR 0 2
25608: UNION
25609: ST_TO_ADDR
// end ;
25610: GO 25550
25612: POP
25613: POP
// end ;
25614: LD_VAR 0 1
25618: RET
// export function hHackInvisible ; var i , j ; begin
25619: LD_INT 0
25621: PPUSH
25622: PPUSH
25623: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: LD_INT 21
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PPUSH
25639: CALL_OW 69
25643: PUSH
25644: FOR_IN
25645: IFFALSE 25669
// if IsSelected ( i ) then
25647: LD_VAR 0 2
25651: PPUSH
25652: CALL_OW 306
25656: IFFALSE 25667
// ComForceInvisible ( i ) ;
25658: LD_VAR 0 2
25662: PPUSH
25663: CALL_OW 496
25667: GO 25644
25669: POP
25670: POP
// end ;
25671: LD_VAR 0 1
25675: RET
// export function hHackChangeYourSide ; begin
25676: LD_INT 0
25678: PPUSH
// if your_side = 8 then
25679: LD_OWVAR 2
25683: PUSH
25684: LD_INT 8
25686: EQUAL
25687: IFFALSE 25699
// your_side := 0 else
25689: LD_ADDR_OWVAR 2
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
25697: GO 25713
// your_side := your_side + 1 ;
25699: LD_ADDR_OWVAR 2
25703: PUSH
25704: LD_OWVAR 2
25708: PUSH
25709: LD_INT 1
25711: PLUS
25712: ST_TO_ADDR
// end ;
25713: LD_VAR 0 1
25717: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25718: LD_INT 0
25720: PPUSH
25721: PPUSH
25722: PPUSH
// for i in all_units do
25723: LD_ADDR_VAR 0 2
25727: PUSH
25728: LD_OWVAR 3
25732: PUSH
25733: FOR_IN
25734: IFFALSE 25812
// if IsSelected ( i ) then
25736: LD_VAR 0 2
25740: PPUSH
25741: CALL_OW 306
25745: IFFALSE 25810
// begin j := GetSide ( i ) ;
25747: LD_ADDR_VAR 0 3
25751: PUSH
25752: LD_VAR 0 2
25756: PPUSH
25757: CALL_OW 255
25761: ST_TO_ADDR
// if j = 8 then
25762: LD_VAR 0 3
25766: PUSH
25767: LD_INT 8
25769: EQUAL
25770: IFFALSE 25782
// j := 0 else
25772: LD_ADDR_VAR 0 3
25776: PUSH
25777: LD_INT 0
25779: ST_TO_ADDR
25780: GO 25796
// j := j + 1 ;
25782: LD_ADDR_VAR 0 3
25786: PUSH
25787: LD_VAR 0 3
25791: PUSH
25792: LD_INT 1
25794: PLUS
25795: ST_TO_ADDR
// SetSide ( i , j ) ;
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: CALL_OW 235
// end ;
25810: GO 25733
25812: POP
25813: POP
// end ;
25814: LD_VAR 0 1
25818: RET
// export function hHackFog ; begin
25819: LD_INT 0
25821: PPUSH
// FogOff ( true ) ;
25822: LD_INT 1
25824: PPUSH
25825: CALL_OW 344
// end ;
25829: LD_VAR 0 1
25833: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25834: LD_INT 0
25836: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25837: LD_VAR 0 1
25841: PPUSH
25842: LD_VAR 0 2
25846: PPUSH
25847: LD_VAR 0 3
25851: PPUSH
25852: LD_INT 1
25854: PPUSH
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 483
// CenterOnXY ( x , y ) ;
25862: LD_VAR 0 2
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: CALL_OW 84
// end ;
25876: LD_VAR 0 4
25880: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
25881: LD_INT 0
25883: PPUSH
25884: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
25885: LD_VAR 0 1
25889: NOT
25890: IFTRUE 25909
25892: PUSH
25893: LD_VAR 0 2
25897: PPUSH
25898: LD_VAR 0 3
25902: PPUSH
25903: CALL_OW 488
25907: NOT
25908: OR
25909: IFTRUE 25944
25911: PUSH
25912: LD_VAR 0 1
25916: PPUSH
25917: CALL_OW 266
25921: PUSH
25922: LD_INT 3
25924: NONEQUAL
25925: IFFALSE 25943
25927: PUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL_OW 247
25937: PUSH
25938: LD_INT 1
25940: EQUAL
25941: NOT
25942: AND
25943: OR
25944: IFFALSE 25948
// exit ;
25946: GO 26230
// if GetType ( factory ) = unit_human then
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 247
25957: PUSH
25958: LD_INT 1
25960: EQUAL
25961: IFFALSE 25978
// factory := IsInUnit ( factory ) ;
25963: LD_ADDR_VAR 0 1
25967: PUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 310
25977: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 266
25987: PUSH
25988: LD_INT 3
25990: NONEQUAL
25991: IFFALSE 25995
// exit ;
25993: GO 26230
// for i := 1 to Count ( factoryWaypoints ) do
25995: LD_ADDR_VAR 0 5
25999: PUSH
26000: DOUBLE
26001: LD_INT 1
26003: DEC
26004: ST_TO_ADDR
26005: LD_EXP 85
26009: PPUSH
26010: CALL 36034 0 1
26014: PUSH
26015: FOR_TO
26016: IFFALSE 26178
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26018: LD_VAR 0 2
26022: PPUSH
26023: LD_VAR 0 3
26027: PPUSH
26028: CALL_OW 428
26032: PUSH
26033: LD_EXP 85
26037: PUSH
26038: LD_VAR 0 5
26042: ARRAY
26043: PUSH
26044: LD_INT 2
26046: ARRAY
26047: EQUAL
26048: IFFALSE 26080
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26050: LD_ADDR_EXP 85
26054: PUSH
26055: LD_EXP 85
26059: PPUSH
26060: LD_VAR 0 5
26064: PPUSH
26065: CALL_OW 3
26069: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26070: CALL 26235 0 0
// exit ;
26074: POP
26075: POP
26076: GO 26230
// end else
26078: GO 26176
// if factory = factoryWaypoints [ i ] [ 2 ] then
26080: LD_VAR 0 1
26084: PUSH
26085: LD_EXP 85
26089: PUSH
26090: LD_VAR 0 5
26094: ARRAY
26095: PUSH
26096: LD_INT 2
26098: ARRAY
26099: EQUAL
26100: IFFALSE 26176
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26102: LD_ADDR_EXP 85
26106: PUSH
26107: LD_EXP 85
26111: PPUSH
26112: LD_VAR 0 5
26116: PPUSH
26117: CALL_OW 3
26121: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26122: LD_ADDR_EXP 85
26126: PUSH
26127: LD_EXP 85
26131: PPUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: CALL_OW 255
26141: PUSH
26142: LD_VAR 0 1
26146: PUSH
26147: LD_VAR 0 2
26151: PUSH
26152: LD_VAR 0 3
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL 72010 0 2
26167: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26168: CALL 26235 0 0
// exit ;
26172: POP
26173: POP
26174: GO 26230
// end ; end ;
26176: GO 26015
26178: POP
26179: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
26180: LD_ADDR_EXP 85
26184: PUSH
26185: LD_EXP 85
26189: PPUSH
26190: LD_VAR 0 1
26194: PPUSH
26195: CALL_OW 255
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_VAR 0 2
26209: PUSH
26210: LD_VAR 0 3
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: PPUSH
26221: CALL 72010 0 2
26225: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26226: CALL 26235 0 0
// end ;
26230: LD_VAR 0 4
26234: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26235: LD_INT 0
26237: PPUSH
26238: PPUSH
26239: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26240: LD_STRING resetFactoryWaypoint();
26242: PPUSH
26243: CALL_OW 559
// if factoryWaypoints then
26247: LD_EXP 85
26251: IFFALSE 26372
// begin list := factoryWaypoints ;
26253: LD_ADDR_VAR 0 3
26257: PUSH
26258: LD_EXP 85
26262: ST_TO_ADDR
// for i := 1 to list do
26263: LD_ADDR_VAR 0 2
26267: PUSH
26268: DOUBLE
26269: LD_INT 1
26271: DEC
26272: ST_TO_ADDR
26273: LD_VAR 0 3
26277: PUSH
26278: FOR_TO
26279: IFFALSE 26370
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26281: LD_STRING setFactoryWaypointXY(
26283: PUSH
26284: LD_VAR 0 3
26288: PUSH
26289: LD_VAR 0 2
26293: ARRAY
26294: PUSH
26295: LD_INT 1
26297: ARRAY
26298: STR
26299: PUSH
26300: LD_STRING ,
26302: STR
26303: PUSH
26304: LD_VAR 0 3
26308: PUSH
26309: LD_VAR 0 2
26313: ARRAY
26314: PUSH
26315: LD_INT 2
26317: ARRAY
26318: STR
26319: PUSH
26320: LD_STRING ,
26322: STR
26323: PUSH
26324: LD_VAR 0 3
26328: PUSH
26329: LD_VAR 0 2
26333: ARRAY
26334: PUSH
26335: LD_INT 3
26337: ARRAY
26338: STR
26339: PUSH
26340: LD_STRING ,
26342: STR
26343: PUSH
26344: LD_VAR 0 3
26348: PUSH
26349: LD_VAR 0 2
26353: ARRAY
26354: PUSH
26355: LD_INT 4
26357: ARRAY
26358: STR
26359: PUSH
26360: LD_STRING )
26362: STR
26363: PPUSH
26364: CALL_OW 559
26368: GO 26278
26370: POP
26371: POP
// end ; end ;
26372: LD_VAR 0 1
26376: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26377: LD_INT 0
26379: PPUSH
// if HexInfo ( x , y ) = warehouse then
26380: LD_VAR 0 2
26384: PPUSH
26385: LD_VAR 0 3
26389: PPUSH
26390: CALL_OW 428
26394: PUSH
26395: LD_VAR 0 1
26399: EQUAL
26400: IFFALSE 26427
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26402: LD_ADDR_EXP 87
26406: PUSH
26407: LD_EXP 87
26411: PPUSH
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_INT 0
26419: PPUSH
26420: CALL_OW 1
26424: ST_TO_ADDR
26425: GO 26478
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26427: LD_ADDR_EXP 87
26431: PUSH
26432: LD_EXP 87
26436: PPUSH
26437: LD_VAR 0 1
26441: PPUSH
26442: LD_VAR 0 1
26446: PPUSH
26447: CALL_OW 255
26451: PUSH
26452: LD_VAR 0 1
26456: PUSH
26457: LD_VAR 0 2
26461: PUSH
26462: LD_VAR 0 3
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 1
26477: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
26478: CALL 26487 0 0
// end ;
26482: LD_VAR 0 4
26486: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
26487: LD_INT 0
26489: PPUSH
26490: PPUSH
26491: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
26492: LD_STRING resetWarehouseGatheringPoints();
26494: PPUSH
26495: CALL_OW 559
// if warehouseGatheringPoints then
26499: LD_EXP 87
26503: IFFALSE 26629
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
26505: LD_ADDR_VAR 0 3
26509: PUSH
26510: LD_EXP 87
26514: PPUSH
26515: CALL 75944 0 1
26519: ST_TO_ADDR
// for i := 1 to list do
26520: LD_ADDR_VAR 0 2
26524: PUSH
26525: DOUBLE
26526: LD_INT 1
26528: DEC
26529: ST_TO_ADDR
26530: LD_VAR 0 3
26534: PUSH
26535: FOR_TO
26536: IFFALSE 26627
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26538: LD_STRING setWarehouseGatheringPointXY(
26540: PUSH
26541: LD_VAR 0 3
26545: PUSH
26546: LD_VAR 0 2
26550: ARRAY
26551: PUSH
26552: LD_INT 1
26554: ARRAY
26555: STR
26556: PUSH
26557: LD_STRING ,
26559: STR
26560: PUSH
26561: LD_VAR 0 3
26565: PUSH
26566: LD_VAR 0 2
26570: ARRAY
26571: PUSH
26572: LD_INT 2
26574: ARRAY
26575: STR
26576: PUSH
26577: LD_STRING ,
26579: STR
26580: PUSH
26581: LD_VAR 0 3
26585: PUSH
26586: LD_VAR 0 2
26590: ARRAY
26591: PUSH
26592: LD_INT 3
26594: ARRAY
26595: STR
26596: PUSH
26597: LD_STRING ,
26599: STR
26600: PUSH
26601: LD_VAR 0 3
26605: PUSH
26606: LD_VAR 0 2
26610: ARRAY
26611: PUSH
26612: LD_INT 4
26614: ARRAY
26615: STR
26616: PUSH
26617: LD_STRING )
26619: STR
26620: PPUSH
26621: CALL_OW 559
26625: GO 26535
26627: POP
26628: POP
// end ; end ;
26629: LD_VAR 0 1
26633: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
26634: LD_EXP 87
26638: IFFALSE 27333
26640: GO 26642
26642: DISABLE
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
26647: PPUSH
26648: PPUSH
26649: PPUSH
26650: PPUSH
26651: PPUSH
26652: PPUSH
26653: PPUSH
// begin enable ;
26654: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
26655: LD_ADDR_VAR 0 3
26659: PUSH
26660: LD_EXP 87
26664: PPUSH
26665: CALL 75944 0 1
26669: ST_TO_ADDR
// if not list then
26670: LD_VAR 0 3
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 27333
// for i := 1 to list do
26679: LD_ADDR_VAR 0 1
26683: PUSH
26684: DOUBLE
26685: LD_INT 1
26687: DEC
26688: ST_TO_ADDR
26689: LD_VAR 0 3
26693: PUSH
26694: FOR_TO
26695: IFFALSE 27331
// begin depot := list [ i ] [ 2 ] ;
26697: LD_ADDR_VAR 0 8
26701: PUSH
26702: LD_VAR 0 3
26706: PUSH
26707: LD_VAR 0 1
26711: ARRAY
26712: PUSH
26713: LD_INT 2
26715: ARRAY
26716: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
26717: LD_ADDR_VAR 0 5
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_VAR 0 1
26731: ARRAY
26732: PUSH
26733: LD_INT 1
26735: ARRAY
26736: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
26737: LD_VAR 0 8
26741: PPUSH
26742: CALL_OW 301
26746: IFTRUE 26765
26748: PUSH
26749: LD_VAR 0 5
26753: PUSH
26754: LD_VAR 0 8
26758: PPUSH
26759: CALL_OW 255
26763: NONEQUAL
26764: OR
26765: IFFALSE 26794
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
26767: LD_ADDR_EXP 87
26771: PUSH
26772: LD_EXP 87
26776: PPUSH
26777: LD_VAR 0 8
26781: PPUSH
26782: LD_INT 0
26784: PPUSH
26785: CALL_OW 1
26789: ST_TO_ADDR
// exit ;
26790: POP
26791: POP
26792: GO 27333
// end ; x := list [ i ] [ 3 ] ;
26794: LD_ADDR_VAR 0 6
26798: PUSH
26799: LD_VAR 0 3
26803: PUSH
26804: LD_VAR 0 1
26808: ARRAY
26809: PUSH
26810: LD_INT 3
26812: ARRAY
26813: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
26814: LD_ADDR_VAR 0 7
26818: PUSH
26819: LD_VAR 0 3
26823: PUSH
26824: LD_VAR 0 1
26828: ARRAY
26829: PUSH
26830: LD_INT 4
26832: ARRAY
26833: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
26834: LD_ADDR_VAR 0 9
26838: PUSH
26839: LD_VAR 0 6
26843: PPUSH
26844: LD_VAR 0 7
26848: PPUSH
26849: LD_INT 16
26851: PPUSH
26852: CALL 74518 0 3
26856: ST_TO_ADDR
// if not cratesNearbyPoint then
26857: LD_VAR 0 9
26861: NOT
26862: IFFALSE 26868
// exit ;
26864: POP
26865: POP
26866: GO 27333
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
26868: LD_ADDR_VAR 0 4
26872: PUSH
26873: LD_INT 22
26875: PUSH
26876: LD_VAR 0 5
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 3
26887: PUSH
26888: LD_INT 60
26890: PUSH
26891: EMPTY
26892: LIST
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 91
26900: PUSH
26901: LD_VAR 0 8
26905: PUSH
26906: LD_INT 6
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 2
26916: PUSH
26917: LD_INT 25
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 25
26929: PUSH
26930: LD_INT 16
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: PPUSH
26948: CALL_OW 69
26952: PUSH
26953: LD_VAR 0 8
26957: PPUSH
26958: CALL_OW 313
26962: PPUSH
26963: LD_INT 3
26965: PUSH
26966: LD_INT 60
26968: PUSH
26969: EMPTY
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: LD_INT 25
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 25
26991: PUSH
26992: LD_INT 16
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PPUSH
27008: CALL_OW 72
27012: UNION
27013: ST_TO_ADDR
// if tmp then
27014: LD_VAR 0 4
27018: IFFALSE 27098
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27020: LD_ADDR_VAR 0 4
27024: PUSH
27025: LD_VAR 0 4
27029: PPUSH
27030: LD_INT 3
27032: PPUSH
27033: CALL 72325 0 2
27037: ST_TO_ADDR
// for j in tmp do
27038: LD_ADDR_VAR 0 2
27042: PUSH
27043: LD_VAR 0 4
27047: PUSH
27048: FOR_IN
27049: IFFALSE 27092
// begin if IsInUnit ( j ) then
27051: LD_VAR 0 2
27055: PPUSH
27056: CALL_OW 310
27060: IFFALSE 27071
// ComExit ( j ) ;
27062: LD_VAR 0 2
27066: PPUSH
27067: CALL 72408 0 1
// AddComCollect ( j , x , y ) ;
27071: LD_VAR 0 2
27075: PPUSH
27076: LD_VAR 0 6
27080: PPUSH
27081: LD_VAR 0 7
27085: PPUSH
27086: CALL_OW 177
// end ;
27090: GO 27048
27092: POP
27093: POP
// exit ;
27094: POP
27095: POP
27096: GO 27333
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27098: LD_ADDR_VAR 0 4
27102: PUSH
27103: LD_INT 22
27105: PUSH
27106: LD_VAR 0 5
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 91
27117: PUSH
27118: LD_VAR 0 8
27122: PUSH
27123: LD_INT 8
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: LD_INT 34
27136: PUSH
27137: LD_INT 12
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 34
27146: PUSH
27147: LD_INT 51
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 34
27156: PUSH
27157: LD_INT 32
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 34
27166: PUSH
27167: LD_INT 89
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: LIST
27185: PPUSH
27186: CALL_OW 69
27190: ST_TO_ADDR
// if tmp then
27191: LD_VAR 0 4
27195: IFFALSE 27329
// begin for j in tmp do
27197: LD_ADDR_VAR 0 2
27201: PUSH
27202: LD_VAR 0 4
27206: PUSH
27207: FOR_IN
27208: IFFALSE 27327
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27210: LD_VAR 0 2
27214: PPUSH
27215: CALL_OW 262
27219: PUSH
27220: LD_INT 3
27222: EQUAL
27223: IFTRUE 27240
27225: PUSH
27226: LD_VAR 0 2
27230: PPUSH
27231: CALL_OW 261
27235: PUSH
27236: LD_INT 20
27238: GREATER
27239: OR
27240: IFFALSE 27254
27242: PUSH
27243: LD_VAR 0 2
27247: PPUSH
27248: CALL_OW 314
27252: NOT
27253: AND
27254: IFFALSE 27284
27256: PUSH
27257: LD_VAR 0 2
27261: PPUSH
27262: CALL_OW 263
27266: PUSH
27267: LD_INT 1
27269: NONEQUAL
27270: IFTRUE 27283
27272: PUSH
27273: LD_VAR 0 2
27277: PPUSH
27278: CALL_OW 311
27282: OR
27283: AND
27284: IFFALSE 27325
// begin ComCollect ( j , x , y ) ;
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_VAR 0 6
27295: PPUSH
27296: LD_VAR 0 7
27300: PPUSH
27301: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27305: LD_VAR 0 2
27309: PPUSH
27310: LD_VAR 0 8
27314: PPUSH
27315: CALL_OW 172
// exit ;
27319: POP
27320: POP
27321: POP
27322: POP
27323: GO 27333
// end ;
27325: GO 27207
27327: POP
27328: POP
// end ; end ;
27329: GO 26694
27331: POP
27332: POP
// end ; end_of_file
27333: PPOPN 9
27335: END
// export function SOS_UnitDestroyed ( un ) ; begin
27336: LD_INT 0
27338: PPUSH
// ComRadiation ( un ) ;
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL 28506 0 1
// end ;
27348: LD_VAR 0 2
27352: RET
// export function SOS_UnitKamikazed ( un ) ; begin
27353: LD_INT 0
27355: PPUSH
// ComRadiation ( un ) ;
27356: LD_VAR 0 1
27360: PPUSH
27361: CALL 28506 0 1
// end ;
27365: LD_VAR 0 2
27369: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27370: LD_INT 0
27372: PPUSH
// end ;
27373: LD_VAR 0 4
27377: RET
// export function SOS_Command ( cmd ) ; begin
27378: LD_INT 0
27380: PPUSH
// end ;
27381: LD_VAR 0 2
27385: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27386: LD_INT 0
27388: PPUSH
// end ;
27389: LD_VAR 0 6
27393: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
27394: LD_INT 0
27396: PPUSH
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
// if not vehicle or not factory then
27401: LD_VAR 0 1
27405: NOT
27406: IFTRUE 27415
27408: PUSH
27409: LD_VAR 0 2
27413: NOT
27414: OR
27415: IFFALSE 27419
// exit ;
27417: GO 28081
// weapon := GetWeapon ( vehicle ) ;
27419: LD_ADDR_VAR 0 7
27423: PUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 264
27433: ST_TO_ADDR
// if weapon = ar_miner then
27434: LD_VAR 0 7
27438: PUSH
27439: LD_INT 81
27441: EQUAL
27442: IFFALSE 27499
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
27444: LD_ADDR_EXP 96
27448: PUSH
27449: LD_EXP 96
27453: PPUSH
27454: LD_EXP 96
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: PPUSH
27463: LD_VAR 0 1
27467: PPUSH
27468: CALL_OW 1
27472: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27473: LD_ADDR_EXP 97
27477: PUSH
27478: LD_EXP 97
27482: PPUSH
27483: LD_EXP 97
27487: PUSH
27488: LD_INT 1
27490: PLUS
27491: PPUSH
27492: EMPTY
27493: PPUSH
27494: CALL_OW 1
27498: ST_TO_ADDR
// end ; if not factoryWaypoints then
27499: LD_EXP 85
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 28081
// for i := 1 to Count ( factoryWaypoints ) do
27508: LD_ADDR_VAR 0 4
27512: PUSH
27513: DOUBLE
27514: LD_INT 1
27516: DEC
27517: ST_TO_ADDR
27518: LD_EXP 85
27522: PPUSH
27523: CALL 36034 0 1
27527: PUSH
27528: FOR_TO
27529: IFFALSE 28079
// if factoryWaypoints [ i ] [ 2 ] = factory then
27531: LD_EXP 85
27535: PUSH
27536: LD_VAR 0 4
27540: ARRAY
27541: PUSH
27542: LD_INT 2
27544: ARRAY
27545: PUSH
27546: LD_VAR 0 2
27550: EQUAL
27551: IFFALSE 28077
// begin if GetControl ( vehicle ) = control_manual then
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 263
27562: PUSH
27563: LD_INT 1
27565: EQUAL
27566: IFFALSE 27930
// begin driver := IsDrivenBy ( vehicle ) ;
27568: LD_ADDR_VAR 0 5
27572: PUSH
27573: LD_VAR 0 1
27577: PPUSH
27578: CALL_OW 311
27582: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
27583: LD_VAR 0 5
27587: PUSH
27588: LD_EXP 86
27592: IN
27593: IFTRUE 27607
27595: PUSH
27596: LD_VAR 0 1
27600: PUSH
27601: LD_EXP 86
27605: IN
27606: OR
27607: IFFALSE 27613
// exit ;
27609: POP
27610: POP
27611: GO 28081
// if not HasTask ( driver ) then
27613: LD_VAR 0 5
27617: PPUSH
27618: CALL_OW 314
27622: NOT
27623: IFFALSE 27928
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
27625: LD_ADDR_EXP 86
27629: PUSH
27630: LD_EXP 86
27634: PPUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL 72010 0 2
27644: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
27645: LD_ADDR_EXP 86
27649: PUSH
27650: LD_EXP 86
27654: PPUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL 72010 0 2
27664: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27665: LD_ADDR_VAR 0 6
27669: PUSH
27670: LD_EXP 85
27674: PUSH
27675: LD_VAR 0 4
27679: ARRAY
27680: PUSH
27681: LD_INT 3
27683: ARRAY
27684: PPUSH
27685: LD_EXP 85
27689: PUSH
27690: LD_VAR 0 4
27694: ARRAY
27695: PUSH
27696: LD_INT 4
27698: ARRAY
27699: PPUSH
27700: CALL_OW 428
27704: ST_TO_ADDR
// if hex then
27705: LD_VAR 0 6
27709: IFFALSE 27727
// ComMoveUnit ( driver , hex ) else
27711: LD_VAR 0 5
27715: PPUSH
27716: LD_VAR 0 6
27720: PPUSH
27721: CALL_OW 112
27725: GO 27811
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
27727: LD_VAR 0 1
27731: PPUSH
27732: LD_EXP 85
27736: PUSH
27737: LD_VAR 0 4
27741: ARRAY
27742: PUSH
27743: LD_INT 3
27745: ARRAY
27746: PPUSH
27747: LD_EXP 85
27751: PUSH
27752: LD_VAR 0 4
27756: ARRAY
27757: PUSH
27758: LD_INT 4
27760: ARRAY
27761: PPUSH
27762: CALL_OW 297
27766: PUSH
27767: LD_INT 0
27769: GREATER
27770: IFFALSE 27811
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27772: LD_VAR 0 5
27776: PPUSH
27777: LD_EXP 85
27781: PUSH
27782: LD_VAR 0 4
27786: ARRAY
27787: PUSH
27788: LD_INT 3
27790: ARRAY
27791: PPUSH
27792: LD_EXP 85
27796: PUSH
27797: LD_VAR 0 4
27801: ARRAY
27802: PUSH
27803: LD_INT 4
27805: ARRAY
27806: PPUSH
27807: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27811: LD_VAR 0 5
27815: PPUSH
27816: CALL_OW 181
// if Multiplayer then
27820: LD_OWVAR 4
27824: IFFALSE 27873
// begin repeat wait ( 10 ) ;
27826: LD_INT 10
27828: PPUSH
27829: CALL_OW 67
// until not IsInUnit ( driver ) ;
27833: LD_VAR 0 5
27837: PPUSH
27838: CALL_OW 310
27842: NOT
27843: IFFALSE 27826
// if not HasTask ( driver ) then
27845: LD_VAR 0 5
27849: PPUSH
27850: CALL_OW 314
27854: NOT
27855: IFFALSE 27871
// ComEnterUnit ( driver , factory ) ;
27857: LD_VAR 0 5
27861: PPUSH
27862: LD_VAR 0 2
27866: PPUSH
27867: CALL_OW 120
// end else
27871: GO 27887
// AddComEnterUnit ( driver , factory ) ;
27873: LD_VAR 0 5
27877: PPUSH
27878: LD_VAR 0 2
27882: PPUSH
27883: CALL_OW 180
// wait ( 0 0$1 ) ;
27887: LD_INT 35
27889: PPUSH
27890: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
27894: LD_ADDR_EXP 86
27898: PUSH
27899: LD_EXP 86
27903: PUSH
27904: LD_VAR 0 5
27908: DIFF
27909: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
27910: LD_ADDR_EXP 86
27914: PUSH
27915: LD_EXP 86
27919: PUSH
27920: LD_VAR 0 1
27924: DIFF
27925: ST_TO_ADDR
// break ;
27926: GO 28079
// end ; end else
27928: GO 28077
// if GetControl ( vehicle ) = control_remote then
27930: LD_VAR 0 1
27934: PPUSH
27935: CALL_OW 263
27939: PUSH
27940: LD_INT 2
27942: EQUAL
27943: IFFALSE 28029
// begin wait ( 0 0$2 ) ;
27945: LD_INT 70
27947: PPUSH
27948: CALL_OW 67
// repeat wait ( 10 ) ;
27952: LD_INT 10
27954: PPUSH
27955: CALL_OW 67
// Connect ( vehicle ) ;
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL 42312 0 1
// until IsControledBy ( vehicle ) ;
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 312
27977: IFFALSE 27952
// wait ( 10 ) ;
27979: LD_INT 10
27981: PPUSH
27982: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
27986: LD_VAR 0 1
27990: PPUSH
27991: LD_EXP 85
27995: PUSH
27996: LD_VAR 0 4
28000: ARRAY
28001: PUSH
28002: LD_INT 3
28004: ARRAY
28005: PPUSH
28006: LD_EXP 85
28010: PUSH
28011: LD_VAR 0 4
28015: ARRAY
28016: PUSH
28017: LD_INT 4
28019: ARRAY
28020: PPUSH
28021: CALL_OW 111
// break ;
28025: GO 28079
// end else
28027: GO 28077
// begin wait ( 0 0$3 ) ;
28029: LD_INT 105
28031: PPUSH
28032: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28036: LD_VAR 0 1
28040: PPUSH
28041: LD_EXP 85
28045: PUSH
28046: LD_VAR 0 4
28050: ARRAY
28051: PUSH
28052: LD_INT 3
28054: ARRAY
28055: PPUSH
28056: LD_EXP 85
28060: PUSH
28061: LD_VAR 0 4
28065: ARRAY
28066: PUSH
28067: LD_INT 4
28069: ARRAY
28070: PPUSH
28071: CALL_OW 111
// break ;
28075: GO 28079
// end ; end ;
28077: GO 27528
28079: POP
28080: POP
// end ;
28081: LD_VAR 0 3
28085: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28086: LD_INT 0
28088: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28089: LD_VAR 0 1
28093: PUSH
28094: LD_INT 250
28096: EQUAL
28097: IFFALSE 28114
28099: PUSH
28100: LD_VAR 0 2
28104: PPUSH
28105: CALL_OW 264
28109: PUSH
28110: LD_INT 81
28112: EQUAL
28113: AND
28114: IFFALSE 28135
// MinerPlaceMine ( unit , x , y ) ;
28116: LD_VAR 0 2
28120: PPUSH
28121: LD_VAR 0 4
28125: PPUSH
28126: LD_VAR 0 5
28130: PPUSH
28131: CALL 31481 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28135: LD_VAR 0 1
28139: PUSH
28140: LD_INT 251
28142: EQUAL
28143: IFFALSE 28160
28145: PUSH
28146: LD_VAR 0 2
28150: PPUSH
28151: CALL_OW 264
28155: PUSH
28156: LD_INT 81
28158: EQUAL
28159: AND
28160: IFFALSE 28181
// MinerDetonateMine ( unit , x , y ) ;
28162: LD_VAR 0 2
28166: PPUSH
28167: LD_VAR 0 4
28171: PPUSH
28172: LD_VAR 0 5
28176: PPUSH
28177: CALL 31888 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28181: LD_VAR 0 1
28185: PUSH
28186: LD_INT 252
28188: EQUAL
28189: IFFALSE 28206
28191: PUSH
28192: LD_VAR 0 2
28196: PPUSH
28197: CALL_OW 264
28201: PUSH
28202: LD_INT 81
28204: EQUAL
28205: AND
28206: IFFALSE 28227
// MinerCreateMinefield ( unit , x , y ) ;
28208: LD_VAR 0 2
28212: PPUSH
28213: LD_VAR 0 4
28217: PPUSH
28218: LD_VAR 0 5
28222: PPUSH
28223: CALL 32120 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28227: LD_VAR 0 1
28231: PUSH
28232: LD_INT 253
28234: EQUAL
28235: IFFALSE 28252
28237: PUSH
28238: LD_VAR 0 2
28242: PPUSH
28243: CALL_OW 257
28247: PUSH
28248: LD_INT 5
28250: EQUAL
28251: AND
28252: IFFALSE 28273
// ComBinocular ( unit , x , y ) ;
28254: LD_VAR 0 2
28258: PPUSH
28259: LD_VAR 0 4
28263: PPUSH
28264: LD_VAR 0 5
28268: PPUSH
28269: CALL 32495 0 3
// if selectedUnit then
28273: LD_VAR 0 3
28277: IFFALSE 28337
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28279: LD_VAR 0 1
28283: PUSH
28284: LD_INT 254
28286: EQUAL
28287: IFFALSE 28304
28289: PUSH
28290: LD_VAR 0 2
28294: PPUSH
28295: CALL_OW 264
28299: PUSH
28300: LD_INT 99
28302: EQUAL
28303: AND
28304: IFFALSE 28321
28306: PUSH
28307: LD_VAR 0 3
28311: PPUSH
28312: CALL_OW 263
28316: PUSH
28317: LD_INT 3
28319: EQUAL
28320: AND
28321: IFFALSE 28337
// HackDestroyVehicle ( unit , selectedUnit ) ;
28323: LD_VAR 0 2
28327: PPUSH
28328: LD_VAR 0 3
28332: PPUSH
28333: CALL 30671 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28337: LD_VAR 0 1
28341: PUSH
28342: LD_INT 255
28344: EQUAL
28345: IFFALSE 28369
28347: PUSH
28348: LD_VAR 0 2
28352: PPUSH
28353: CALL_OW 264
28357: PUSH
28358: LD_INT 14
28360: PUSH
28361: LD_INT 53
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: IN
28368: AND
28369: IFFALSE 28387
28371: PUSH
28372: LD_VAR 0 4
28376: PPUSH
28377: LD_VAR 0 5
28381: PPUSH
28382: CALL_OW 488
28386: AND
28387: IFFALSE 28411
// CutTreeXYR ( unit , x , y , 12 ) ;
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_VAR 0 4
28398: PPUSH
28399: LD_VAR 0 5
28403: PPUSH
28404: LD_INT 12
28406: PPUSH
28407: CALL 28602 0 4
// if cmd = 256 then
28411: LD_VAR 0 1
28415: PUSH
28416: LD_INT 256
28418: EQUAL
28419: IFFALSE 28440
// SetFactoryWaypoint ( unit , x , y ) ;
28421: LD_VAR 0 2
28425: PPUSH
28426: LD_VAR 0 4
28430: PPUSH
28431: LD_VAR 0 5
28435: PPUSH
28436: CALL 25881 0 3
// if cmd = 257 then
28440: LD_VAR 0 1
28444: PUSH
28445: LD_INT 257
28447: EQUAL
28448: IFFALSE 28469
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28450: LD_VAR 0 2
28454: PPUSH
28455: LD_VAR 0 4
28459: PPUSH
28460: LD_VAR 0 5
28464: PPUSH
28465: CALL 26377 0 3
// if cmd = 258 then
28469: LD_VAR 0 1
28473: PUSH
28474: LD_INT 258
28476: EQUAL
28477: IFFALSE 28501
// BurnTreeXYR ( unit , x , y , 8 ) ;
28479: LD_VAR 0 2
28483: PPUSH
28484: LD_VAR 0 4
28488: PPUSH
28489: LD_VAR 0 5
28493: PPUSH
28494: LD_INT 8
28496: PPUSH
28497: CALL 29024 0 4
// end ;
28501: LD_VAR 0 6
28505: RET
// export function ComRadiation ( un ) ; var eff ; begin
28506: LD_INT 0
28508: PPUSH
28509: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
28510: LD_VAR 0 1
28514: PPUSH
28515: CALL_OW 264
28519: PUSH
28520: LD_INT 91
28522: NONEQUAL
28523: IFFALSE 28527
// exit ;
28525: GO 28597
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28527: LD_INT 68
28529: PPUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL_OW 255
28539: PPUSH
28540: CALL_OW 321
28544: PUSH
28545: LD_INT 2
28547: EQUAL
28548: IFFALSE 28560
// eff := 50 else
28550: LD_ADDR_VAR 0 3
28554: PUSH
28555: LD_INT 50
28557: ST_TO_ADDR
28558: GO 28568
// eff := 25 ;
28560: LD_ADDR_VAR 0 3
28564: PUSH
28565: LD_INT 25
28567: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28568: LD_VAR 0 1
28572: PPUSH
28573: CALL_OW 250
28577: PPUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL_OW 251
28587: PPUSH
28588: LD_VAR 0 3
28592: PPUSH
28593: CALL_OW 495
// end ;
28597: LD_VAR 0 2
28601: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
28612: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28613: LD_VAR 0 1
28617: PPUSH
28618: CALL_OW 302
28622: NOT
28623: IFTRUE 28642
28625: PUSH
28626: LD_VAR 0 2
28630: PPUSH
28631: LD_VAR 0 3
28635: PPUSH
28636: CALL_OW 488
28640: NOT
28641: OR
28642: IFTRUE 28651
28644: PUSH
28645: LD_VAR 0 4
28649: NOT
28650: OR
28651: IFFALSE 28655
// exit ;
28653: GO 29019
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 437
28664: PPUSH
28665: CALL 36034 0 1
28669: PUSH
28670: LD_INT 10
28672: GREATER
28673: IFFALSE 28677
// exit ;
28675: GO 29019
// list := [ ] ;
28677: LD_ADDR_VAR 0 13
28681: PUSH
28682: EMPTY
28683: ST_TO_ADDR
// if x - r < 0 then
28684: LD_VAR 0 2
28688: PUSH
28689: LD_VAR 0 4
28693: MINUS
28694: PUSH
28695: LD_INT 0
28697: LESS
28698: IFFALSE 28710
// min_x := 0 else
28700: LD_ADDR_VAR 0 7
28704: PUSH
28705: LD_INT 0
28707: ST_TO_ADDR
28708: GO 28726
// min_x := x - r ;
28710: LD_ADDR_VAR 0 7
28714: PUSH
28715: LD_VAR 0 2
28719: PUSH
28720: LD_VAR 0 4
28724: MINUS
28725: ST_TO_ADDR
// if y - r < 0 then
28726: LD_VAR 0 3
28730: PUSH
28731: LD_VAR 0 4
28735: MINUS
28736: PUSH
28737: LD_INT 0
28739: LESS
28740: IFFALSE 28752
// min_y := 0 else
28742: LD_ADDR_VAR 0 8
28746: PUSH
28747: LD_INT 0
28749: ST_TO_ADDR
28750: GO 28768
// min_y := y - r ;
28752: LD_ADDR_VAR 0 8
28756: PUSH
28757: LD_VAR 0 3
28761: PUSH
28762: LD_VAR 0 4
28766: MINUS
28767: ST_TO_ADDR
// max_x := x + r ;
28768: LD_ADDR_VAR 0 9
28772: PUSH
28773: LD_VAR 0 2
28777: PUSH
28778: LD_VAR 0 4
28782: PLUS
28783: ST_TO_ADDR
// max_y := y + r ;
28784: LD_ADDR_VAR 0 10
28788: PUSH
28789: LD_VAR 0 3
28793: PUSH
28794: LD_VAR 0 4
28798: PLUS
28799: ST_TO_ADDR
// for _x = min_x to max_x do
28800: LD_ADDR_VAR 0 11
28804: PUSH
28805: DOUBLE
28806: LD_VAR 0 7
28810: DEC
28811: ST_TO_ADDR
28812: LD_VAR 0 9
28816: PUSH
28817: FOR_TO
28818: IFFALSE 28937
// for _y = min_y to max_y do
28820: LD_ADDR_VAR 0 12
28824: PUSH
28825: DOUBLE
28826: LD_VAR 0 8
28830: DEC
28831: ST_TO_ADDR
28832: LD_VAR 0 10
28836: PUSH
28837: FOR_TO
28838: IFFALSE 28933
// begin if not ValidHex ( _x , _y ) then
28840: LD_VAR 0 11
28844: PPUSH
28845: LD_VAR 0 12
28849: PPUSH
28850: CALL_OW 488
28854: NOT
28855: IFFALSE 28859
// continue ;
28857: GO 28837
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28859: LD_VAR 0 11
28863: PPUSH
28864: LD_VAR 0 12
28868: PPUSH
28869: CALL_OW 351
28873: IFFALSE 28891
28875: PUSH
28876: LD_VAR 0 11
28880: PPUSH
28881: LD_VAR 0 12
28885: PPUSH
28886: CALL_OW 554
28890: AND
28891: IFFALSE 28931
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28893: LD_ADDR_VAR 0 13
28897: PUSH
28898: LD_VAR 0 13
28902: PPUSH
28903: LD_VAR 0 13
28907: PUSH
28908: LD_INT 1
28910: PLUS
28911: PPUSH
28912: LD_VAR 0 11
28916: PUSH
28917: LD_VAR 0 12
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PPUSH
28926: CALL_OW 2
28930: ST_TO_ADDR
// end ;
28931: GO 28837
28933: POP
28934: POP
28935: GO 28817
28937: POP
28938: POP
// if not list then
28939: LD_VAR 0 13
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 29019
// for i in list do
28948: LD_ADDR_VAR 0 6
28952: PUSH
28953: LD_VAR 0 13
28957: PUSH
28958: FOR_IN
28959: IFFALSE 29017
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28961: LD_VAR 0 1
28965: PPUSH
28966: LD_STRING M
28968: PUSH
28969: LD_VAR 0 6
28973: PUSH
28974: LD_INT 1
28976: ARRAY
28977: PUSH
28978: LD_VAR 0 6
28982: PUSH
28983: LD_INT 2
28985: ARRAY
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: PPUSH
29011: CALL_OW 447
29015: GO 28958
29017: POP
29018: POP
// end ;
29019: LD_VAR 0 5
29023: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29024: LD_INT 0
29026: PPUSH
29027: PPUSH
29028: PPUSH
29029: PPUSH
29030: PPUSH
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 302
29045: NOT
29046: IFTRUE 29065
29048: PUSH
29049: LD_VAR 0 2
29053: PPUSH
29054: LD_VAR 0 3
29058: PPUSH
29059: CALL_OW 488
29063: NOT
29064: OR
29065: IFTRUE 29074
29067: PUSH
29068: LD_VAR 0 4
29072: NOT
29073: OR
29074: IFFALSE 29078
// exit ;
29076: GO 29617
// if Count ( GetTaskList ( flame ) ) > 10 then
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 437
29087: PPUSH
29088: CALL 36034 0 1
29092: PUSH
29093: LD_INT 10
29095: GREATER
29096: IFFALSE 29100
// exit ;
29098: GO 29617
// list := [ ] ;
29100: LD_ADDR_VAR 0 13
29104: PUSH
29105: EMPTY
29106: ST_TO_ADDR
// if x - r < 0 then
29107: LD_VAR 0 2
29111: PUSH
29112: LD_VAR 0 4
29116: MINUS
29117: PUSH
29118: LD_INT 0
29120: LESS
29121: IFFALSE 29133
// min_x := 0 else
29123: LD_ADDR_VAR 0 7
29127: PUSH
29128: LD_INT 0
29130: ST_TO_ADDR
29131: GO 29149
// min_x := x - r ;
29133: LD_ADDR_VAR 0 7
29137: PUSH
29138: LD_VAR 0 2
29142: PUSH
29143: LD_VAR 0 4
29147: MINUS
29148: ST_TO_ADDR
// if y - r < 0 then
29149: LD_VAR 0 3
29153: PUSH
29154: LD_VAR 0 4
29158: MINUS
29159: PUSH
29160: LD_INT 0
29162: LESS
29163: IFFALSE 29175
// min_y := 0 else
29165: LD_ADDR_VAR 0 8
29169: PUSH
29170: LD_INT 0
29172: ST_TO_ADDR
29173: GO 29191
// min_y := y - r ;
29175: LD_ADDR_VAR 0 8
29179: PUSH
29180: LD_VAR 0 3
29184: PUSH
29185: LD_VAR 0 4
29189: MINUS
29190: ST_TO_ADDR
// max_x := x + r ;
29191: LD_ADDR_VAR 0 9
29195: PUSH
29196: LD_VAR 0 2
29200: PUSH
29201: LD_VAR 0 4
29205: PLUS
29206: ST_TO_ADDR
// max_y := y + r ;
29207: LD_ADDR_VAR 0 10
29211: PUSH
29212: LD_VAR 0 3
29216: PUSH
29217: LD_VAR 0 4
29221: PLUS
29222: ST_TO_ADDR
// for _x = min_x to max_x do
29223: LD_ADDR_VAR 0 11
29227: PUSH
29228: DOUBLE
29229: LD_VAR 0 7
29233: DEC
29234: ST_TO_ADDR
29235: LD_VAR 0 9
29239: PUSH
29240: FOR_TO
29241: IFFALSE 29360
// for _y = min_y to max_y do
29243: LD_ADDR_VAR 0 12
29247: PUSH
29248: DOUBLE
29249: LD_VAR 0 8
29253: DEC
29254: ST_TO_ADDR
29255: LD_VAR 0 10
29259: PUSH
29260: FOR_TO
29261: IFFALSE 29356
// begin if not ValidHex ( _x , _y ) then
29263: LD_VAR 0 11
29267: PPUSH
29268: LD_VAR 0 12
29272: PPUSH
29273: CALL_OW 488
29277: NOT
29278: IFFALSE 29282
// continue ;
29280: GO 29260
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29282: LD_VAR 0 11
29286: PPUSH
29287: LD_VAR 0 12
29291: PPUSH
29292: CALL_OW 351
29296: IFFALSE 29314
29298: PUSH
29299: LD_VAR 0 11
29303: PPUSH
29304: LD_VAR 0 12
29308: PPUSH
29309: CALL_OW 554
29313: AND
29314: IFFALSE 29354
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29316: LD_ADDR_VAR 0 13
29320: PUSH
29321: LD_VAR 0 13
29325: PPUSH
29326: LD_VAR 0 13
29330: PUSH
29331: LD_INT 1
29333: PLUS
29334: PPUSH
29335: LD_VAR 0 11
29339: PUSH
29340: LD_VAR 0 12
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PPUSH
29349: CALL_OW 2
29353: ST_TO_ADDR
// end ;
29354: GO 29260
29356: POP
29357: POP
29358: GO 29240
29360: POP
29361: POP
// if not list then
29362: LD_VAR 0 13
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29617
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29371: LD_ADDR_VAR 0 13
29375: PUSH
29376: LD_VAR 0 1
29380: PPUSH
29381: LD_VAR 0 13
29385: PPUSH
29386: LD_INT 1
29388: PPUSH
29389: LD_INT 1
29391: PPUSH
29392: CALL 39440 0 4
29396: ST_TO_ADDR
// ComStop ( flame ) ;
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 141
// for i in list do
29406: LD_ADDR_VAR 0 6
29410: PUSH
29411: LD_VAR 0 13
29415: PUSH
29416: FOR_IN
29417: IFFALSE 29448
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29419: LD_VAR 0 1
29423: PPUSH
29424: LD_VAR 0 6
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 6
29437: PUSH
29438: LD_INT 2
29440: ARRAY
29441: PPUSH
29442: CALL_OW 176
29446: GO 29416
29448: POP
29449: POP
// repeat wait ( 0 0$1 ) ;
29450: LD_INT 35
29452: PPUSH
29453: CALL_OW 67
// task := GetTaskList ( flame ) ;
29457: LD_ADDR_VAR 0 14
29461: PUSH
29462: LD_VAR 0 1
29466: PPUSH
29467: CALL_OW 437
29471: ST_TO_ADDR
// if not task then
29472: LD_VAR 0 14
29476: NOT
29477: IFFALSE 29481
// exit ;
29479: GO 29617
// if task [ 1 ] [ 1 ] <> | then
29481: LD_VAR 0 14
29485: PUSH
29486: LD_INT 1
29488: ARRAY
29489: PUSH
29490: LD_INT 1
29492: ARRAY
29493: PUSH
29494: LD_STRING |
29496: NONEQUAL
29497: IFFALSE 29501
// exit ;
29499: GO 29617
// _x := task [ 1 ] [ 2 ] ;
29501: LD_ADDR_VAR 0 11
29505: PUSH
29506: LD_VAR 0 14
29510: PUSH
29511: LD_INT 1
29513: ARRAY
29514: PUSH
29515: LD_INT 2
29517: ARRAY
29518: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29519: LD_ADDR_VAR 0 12
29523: PUSH
29524: LD_VAR 0 14
29528: PUSH
29529: LD_INT 1
29531: ARRAY
29532: PUSH
29533: LD_INT 3
29535: ARRAY
29536: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29537: LD_VAR 0 11
29541: PPUSH
29542: LD_VAR 0 12
29546: PPUSH
29547: CALL_OW 351
29551: NOT
29552: IFTRUE 29571
29554: PUSH
29555: LD_VAR 0 11
29559: PPUSH
29560: LD_VAR 0 12
29564: PPUSH
29565: CALL_OW 554
29569: NOT
29570: OR
29571: IFFALSE 29605
// begin task := Delete ( task , 1 ) ;
29573: LD_ADDR_VAR 0 14
29577: PUSH
29578: LD_VAR 0 14
29582: PPUSH
29583: LD_INT 1
29585: PPUSH
29586: CALL_OW 3
29590: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29591: LD_VAR 0 1
29595: PPUSH
29596: LD_VAR 0 14
29600: PPUSH
29601: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: CALL_OW 314
29614: NOT
29615: IFFALSE 29450
// end ;
29617: LD_VAR 0 5
29621: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29622: LD_EXP 89
29626: NOT
29627: IFFALSE 29677
29629: GO 29631
29631: DISABLE
// begin initHack := true ;
29632: LD_ADDR_EXP 89
29636: PUSH
29637: LD_INT 1
29639: ST_TO_ADDR
// hackTanks := [ ] ;
29640: LD_ADDR_EXP 90
29644: PUSH
29645: EMPTY
29646: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29647: LD_ADDR_EXP 91
29651: PUSH
29652: EMPTY
29653: ST_TO_ADDR
// hackLimit := 3 ;
29654: LD_ADDR_EXP 92
29658: PUSH
29659: LD_INT 3
29661: ST_TO_ADDR
// hackDist := 12 ;
29662: LD_ADDR_EXP 93
29666: PUSH
29667: LD_INT 12
29669: ST_TO_ADDR
// hackCounter := [ ] ;
29670: LD_ADDR_EXP 94
29674: PUSH
29675: EMPTY
29676: ST_TO_ADDR
// end ;
29677: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29678: LD_EXP 89
29682: IFFALSE 29700
29684: PUSH
29685: LD_INT 34
29687: PUSH
29688: LD_INT 99
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PPUSH
29695: CALL_OW 69
29699: AND
29700: IFFALSE 29953
29702: GO 29704
29704: DISABLE
29705: LD_INT 0
29707: PPUSH
29708: PPUSH
// begin enable ;
29709: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29710: LD_ADDR_VAR 0 1
29714: PUSH
29715: LD_INT 34
29717: PUSH
29718: LD_INT 99
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: PUSH
29730: FOR_IN
29731: IFFALSE 29951
// begin if not i in hackTanks then
29733: LD_VAR 0 1
29737: PUSH
29738: LD_EXP 90
29742: IN
29743: NOT
29744: IFFALSE 29827
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29746: LD_ADDR_EXP 90
29750: PUSH
29751: LD_EXP 90
29755: PPUSH
29756: LD_EXP 90
29760: PUSH
29761: LD_INT 1
29763: PLUS
29764: PPUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 1
29774: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29775: LD_ADDR_EXP 91
29779: PUSH
29780: LD_EXP 91
29784: PPUSH
29785: LD_EXP 91
29789: PUSH
29790: LD_INT 1
29792: PLUS
29793: PPUSH
29794: EMPTY
29795: PPUSH
29796: CALL_OW 1
29800: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29801: LD_ADDR_EXP 94
29805: PUSH
29806: LD_EXP 94
29810: PPUSH
29811: LD_EXP 94
29815: PUSH
29816: LD_INT 1
29818: PLUS
29819: PPUSH
29820: EMPTY
29821: PPUSH
29822: CALL_OW 1
29826: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 302
29836: NOT
29837: IFFALSE 29850
// begin HackUnlinkAll ( i ) ;
29839: LD_VAR 0 1
29843: PPUSH
29844: CALL 29956 0 1
// continue ;
29848: GO 29730
// end ; HackCheckCapturedStatus ( i ) ;
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL 30401 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29859: LD_ADDR_VAR 0 2
29863: PUSH
29864: LD_INT 81
29866: PUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 255
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 33
29883: PUSH
29884: LD_INT 3
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 91
29893: PUSH
29894: LD_VAR 0 1
29898: PUSH
29899: LD_EXP 93
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 50
29911: PUSH
29912: EMPTY
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: PPUSH
29921: CALL_OW 69
29925: ST_TO_ADDR
// if not tmp then
29926: LD_VAR 0 2
29930: NOT
29931: IFFALSE 29935
// continue ;
29933: GO 29730
// HackLink ( i , tmp ) ;
29935: LD_VAR 0 1
29939: PPUSH
29940: LD_VAR 0 2
29944: PPUSH
29945: CALL 30092 0 2
// end ;
29949: GO 29730
29951: POP
29952: POP
// end ;
29953: PPOPN 2
29955: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29956: LD_INT 0
29958: PPUSH
29959: PPUSH
29960: PPUSH
// if not hack in hackTanks then
29961: LD_VAR 0 1
29965: PUSH
29966: LD_EXP 90
29970: IN
29971: NOT
29972: IFFALSE 29976
// exit ;
29974: GO 30087
// index := GetElementIndex ( hackTanks , hack ) ;
29976: LD_ADDR_VAR 0 4
29980: PUSH
29981: LD_EXP 90
29985: PPUSH
29986: LD_VAR 0 1
29990: PPUSH
29991: CALL 38735 0 2
29995: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29996: LD_EXP 91
30000: PUSH
30001: LD_VAR 0 4
30005: ARRAY
30006: IFFALSE 30087
// begin for i in hackTanksCaptured [ index ] do
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_EXP 91
30017: PUSH
30018: LD_VAR 0 4
30022: ARRAY
30023: PUSH
30024: FOR_IN
30025: IFFALSE 30051
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30027: LD_VAR 0 3
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: LD_VAR 0 3
30040: PUSH
30041: LD_INT 2
30043: ARRAY
30044: PPUSH
30045: CALL_OW 235
30049: GO 30024
30051: POP
30052: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30053: LD_ADDR_EXP 91
30057: PUSH
30058: LD_EXP 91
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: EMPTY
30069: PPUSH
30070: CALL_OW 1
30074: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30075: LD_VAR 0 1
30079: PPUSH
30080: LD_INT 0
30082: PPUSH
30083: CALL_OW 505
// end ; end ;
30087: LD_VAR 0 2
30091: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30092: LD_INT 0
30094: PPUSH
30095: PPUSH
30096: PPUSH
// if not hack in hackTanks or not vehicles then
30097: LD_VAR 0 1
30101: PUSH
30102: LD_EXP 90
30106: IN
30107: NOT
30108: IFTRUE 30117
30110: PUSH
30111: LD_VAR 0 2
30115: NOT
30116: OR
30117: IFFALSE 30121
// exit ;
30119: GO 30396
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30121: LD_ADDR_VAR 0 2
30125: PUSH
30126: LD_VAR 0 1
30130: PPUSH
30131: LD_VAR 0 2
30135: PPUSH
30136: LD_INT 1
30138: PPUSH
30139: LD_INT 1
30141: PPUSH
30142: CALL 39387 0 4
30146: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30147: LD_ADDR_VAR 0 5
30151: PUSH
30152: LD_EXP 90
30156: PPUSH
30157: LD_VAR 0 1
30161: PPUSH
30162: CALL 38735 0 2
30166: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30167: LD_EXP 91
30171: PUSH
30172: LD_VAR 0 5
30176: ARRAY
30177: PUSH
30178: LD_EXP 92
30182: LESS
30183: IFFALSE 30372
// begin for i := 1 to vehicles do
30185: LD_ADDR_VAR 0 4
30189: PUSH
30190: DOUBLE
30191: LD_INT 1
30193: DEC
30194: ST_TO_ADDR
30195: LD_VAR 0 2
30199: PUSH
30200: FOR_TO
30201: IFFALSE 30370
// begin if hackTanksCaptured [ index ] = hackLimit then
30203: LD_EXP 91
30207: PUSH
30208: LD_VAR 0 5
30212: ARRAY
30213: PUSH
30214: LD_EXP 92
30218: EQUAL
30219: IFFALSE 30223
// break ;
30221: GO 30370
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30223: LD_ADDR_EXP 94
30227: PUSH
30228: LD_EXP 94
30232: PPUSH
30233: LD_VAR 0 5
30237: PPUSH
30238: LD_EXP 94
30242: PUSH
30243: LD_VAR 0 5
30247: ARRAY
30248: PUSH
30249: LD_INT 1
30251: PLUS
30252: PPUSH
30253: CALL_OW 1
30257: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30258: LD_ADDR_EXP 91
30262: PUSH
30263: LD_EXP 91
30267: PPUSH
30268: LD_VAR 0 5
30272: PUSH
30273: LD_EXP 91
30277: PUSH
30278: LD_VAR 0 5
30282: ARRAY
30283: PUSH
30284: LD_INT 1
30286: PLUS
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: LD_VAR 0 2
30296: PUSH
30297: LD_VAR 0 4
30301: ARRAY
30302: PUSH
30303: LD_VAR 0 2
30307: PUSH
30308: LD_VAR 0 4
30312: ARRAY
30313: PPUSH
30314: CALL_OW 255
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL 38952 0 3
30327: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30328: LD_VAR 0 2
30332: PUSH
30333: LD_VAR 0 4
30337: ARRAY
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 255
30348: PPUSH
30349: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30353: LD_VAR 0 2
30357: PUSH
30358: LD_VAR 0 4
30362: ARRAY
30363: PPUSH
30364: CALL_OW 141
// end ;
30368: GO 30200
30370: POP
30371: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30372: LD_VAR 0 1
30376: PPUSH
30377: LD_EXP 91
30381: PUSH
30382: LD_VAR 0 5
30386: ARRAY
30387: PUSH
30388: LD_INT 0
30390: PLUS
30391: PPUSH
30392: CALL_OW 505
// end ;
30396: LD_VAR 0 3
30400: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30401: LD_INT 0
30403: PPUSH
30404: PPUSH
30405: PPUSH
30406: PPUSH
// if not hack in hackTanks then
30407: LD_VAR 0 1
30411: PUSH
30412: LD_EXP 90
30416: IN
30417: NOT
30418: IFFALSE 30422
// exit ;
30420: GO 30666
// index := GetElementIndex ( hackTanks , hack ) ;
30422: LD_ADDR_VAR 0 4
30426: PUSH
30427: LD_EXP 90
30431: PPUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL 38735 0 2
30441: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30442: LD_ADDR_VAR 0 3
30446: PUSH
30447: DOUBLE
30448: LD_EXP 91
30452: PUSH
30453: LD_VAR 0 4
30457: ARRAY
30458: INC
30459: ST_TO_ADDR
30460: LD_INT 1
30462: PUSH
30463: FOR_DOWNTO
30464: IFFALSE 30640
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30466: LD_ADDR_VAR 0 5
30470: PUSH
30471: LD_EXP 91
30475: PUSH
30476: LD_VAR 0 4
30480: ARRAY
30481: PUSH
30482: LD_VAR 0 3
30486: ARRAY
30487: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30488: LD_VAR 0 5
30492: PUSH
30493: LD_INT 1
30495: ARRAY
30496: PPUSH
30497: CALL_OW 302
30501: NOT
30502: IFTRUE 30530
30504: PUSH
30505: LD_VAR 0 5
30509: PUSH
30510: LD_INT 1
30512: ARRAY
30513: PPUSH
30514: CALL_OW 255
30518: PUSH
30519: LD_VAR 0 1
30523: PPUSH
30524: CALL_OW 255
30528: NONEQUAL
30529: OR
30530: IFFALSE 30638
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30532: LD_VAR 0 5
30536: PUSH
30537: LD_INT 1
30539: ARRAY
30540: PPUSH
30541: CALL_OW 305
30545: IFFALSE 30573
30547: PUSH
30548: LD_VAR 0 5
30552: PUSH
30553: LD_INT 1
30555: ARRAY
30556: PPUSH
30557: CALL_OW 255
30561: PUSH
30562: LD_VAR 0 1
30566: PPUSH
30567: CALL_OW 255
30571: EQUAL
30572: AND
30573: IFFALSE 30597
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30575: LD_VAR 0 5
30579: PUSH
30580: LD_INT 1
30582: ARRAY
30583: PPUSH
30584: LD_VAR 0 5
30588: PUSH
30589: LD_INT 2
30591: ARRAY
30592: PPUSH
30593: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30597: LD_ADDR_EXP 91
30601: PUSH
30602: LD_EXP 91
30606: PPUSH
30607: LD_VAR 0 4
30611: PPUSH
30612: LD_EXP 91
30616: PUSH
30617: LD_VAR 0 4
30621: ARRAY
30622: PPUSH
30623: LD_VAR 0 3
30627: PPUSH
30628: CALL_OW 3
30632: PPUSH
30633: CALL_OW 1
30637: ST_TO_ADDR
// end ; end ;
30638: GO 30463
30640: POP
30641: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30642: LD_VAR 0 1
30646: PPUSH
30647: LD_EXP 91
30651: PUSH
30652: LD_VAR 0 4
30656: ARRAY
30657: PUSH
30658: LD_INT 0
30660: PLUS
30661: PPUSH
30662: CALL_OW 505
// end ;
30666: LD_VAR 0 2
30670: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30671: LD_INT 0
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
// if not hack in hackTanks then
30677: LD_VAR 0 1
30681: PUSH
30682: LD_EXP 90
30686: IN
30687: NOT
30688: IFFALSE 30692
// exit ;
30690: GO 30777
// index := GetElementIndex ( hackTanks , hack ) ;
30692: LD_ADDR_VAR 0 5
30696: PUSH
30697: LD_EXP 90
30701: PPUSH
30702: LD_VAR 0 1
30706: PPUSH
30707: CALL 38735 0 2
30711: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30712: LD_ADDR_VAR 0 4
30716: PUSH
30717: DOUBLE
30718: LD_INT 1
30720: DEC
30721: ST_TO_ADDR
30722: LD_EXP 91
30726: PUSH
30727: LD_VAR 0 5
30731: ARRAY
30732: PUSH
30733: FOR_TO
30734: IFFALSE 30775
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30736: LD_EXP 91
30740: PUSH
30741: LD_VAR 0 5
30745: ARRAY
30746: PUSH
30747: LD_VAR 0 4
30751: ARRAY
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PUSH
30757: LD_VAR 0 2
30761: EQUAL
30762: IFFALSE 30773
// KillUnit ( vehicle ) ;
30764: LD_VAR 0 2
30768: PPUSH
30769: CALL_OW 66
30773: GO 30733
30775: POP
30776: POP
// end ;
30777: LD_VAR 0 3
30781: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
30782: LD_EXP 95
30786: NOT
30787: IFFALSE 30920
30789: GO 30791
30791: DISABLE
30792: LD_INT 0
30794: PPUSH
// begin initMiner := true ;
30795: LD_ADDR_EXP 95
30799: PUSH
30800: LD_INT 1
30802: ST_TO_ADDR
// minersList := [ ] ;
30803: LD_ADDR_EXP 96
30807: PUSH
30808: EMPTY
30809: ST_TO_ADDR
// minerMinesList := [ ] ;
30810: LD_ADDR_EXP 97
30814: PUSH
30815: EMPTY
30816: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
30817: LD_ADDR_EXP 98
30821: PUSH
30822: LD_INT 10
30824: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30825: LD_ADDR_VAR 0 1
30829: PUSH
30830: LD_INT 34
30832: PUSH
30833: LD_INT 81
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PPUSH
30840: CALL_OW 69
30844: PUSH
30845: FOR_IN
30846: IFFALSE 30918
// begin if not i in minersList then
30848: LD_VAR 0 1
30852: PUSH
30853: LD_EXP 96
30857: IN
30858: NOT
30859: IFFALSE 30916
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30861: LD_ADDR_EXP 96
30865: PUSH
30866: LD_EXP 96
30870: PPUSH
30871: LD_EXP 96
30875: PUSH
30876: LD_INT 1
30878: PLUS
30879: PPUSH
30880: LD_VAR 0 1
30884: PPUSH
30885: CALL_OW 1
30889: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30890: LD_ADDR_EXP 97
30894: PUSH
30895: LD_EXP 97
30899: PPUSH
30900: LD_EXP 97
30904: PUSH
30905: LD_INT 1
30907: PLUS
30908: PPUSH
30909: EMPTY
30910: PPUSH
30911: CALL_OW 1
30915: ST_TO_ADDR
// end end ;
30916: GO 30845
30918: POP
30919: POP
// end ;
30920: PPOPN 1
30922: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
30923: LD_EXP 95
30927: IFFALSE 30958
30929: PUSH
30930: LD_EXP 97
30934: PPUSH
30935: CALL 36034 0 1
30939: IFTRUE 30957
30941: PUSH
30942: LD_INT 34
30944: PUSH
30945: LD_INT 81
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PPUSH
30952: CALL_OW 69
30956: OR
30957: AND
30958: IFFALSE 31478
30960: GO 30962
30962: DISABLE
30963: LD_INT 0
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
// begin enable ;
30969: ENABLE
// for i := minerMinesList downto 1 do
30970: LD_ADDR_VAR 0 1
30974: PUSH
30975: DOUBLE
30976: LD_EXP 97
30980: INC
30981: ST_TO_ADDR
30982: LD_INT 1
30984: PUSH
30985: FOR_DOWNTO
30986: IFFALSE 31476
// begin side := GetSide ( minersList [ i ] ) ;
30988: LD_ADDR_VAR 0 3
30992: PUSH
30993: LD_EXP 96
30997: PUSH
30998: LD_VAR 0 1
31002: ARRAY
31003: PPUSH
31004: CALL_OW 255
31008: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
31009: LD_EXP 96
31013: PUSH
31014: LD_VAR 0 1
31018: ARRAY
31019: PPUSH
31020: CALL_OW 300
31024: IFFALSE 31045
31026: PUSH
31027: LD_VAR 0 3
31031: PUSH
31032: LD_OWVAR 2
31036: PUSH
31037: LD_INT 9
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: IN
31044: AND
31045: IFFALSE 31078
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
31047: LD_EXP 96
31051: PUSH
31052: LD_VAR 0 1
31056: ARRAY
31057: PPUSH
31058: LD_EXP 97
31062: PUSH
31063: LD_VAR 0 1
31067: ARRAY
31068: PPUSH
31069: CALL 36034 0 1
31073: PPUSH
31074: CALL_OW 505
// if not minerMinesList [ i ] then
31078: LD_EXP 97
31082: PUSH
31083: LD_VAR 0 1
31087: ARRAY
31088: NOT
31089: IFFALSE 31093
// continue ;
31091: GO 30985
// for j := minerMinesList [ i ] downto 1 do
31093: LD_ADDR_VAR 0 2
31097: PUSH
31098: DOUBLE
31099: LD_EXP 97
31103: PUSH
31104: LD_VAR 0 1
31108: ARRAY
31109: INC
31110: ST_TO_ADDR
31111: LD_INT 1
31113: PUSH
31114: FOR_DOWNTO
31115: IFFALSE 31472
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
31117: LD_EXP 96
31121: PUSH
31122: LD_VAR 0 1
31126: ARRAY
31127: PPUSH
31128: CALL_OW 301
31132: IFTRUE 31152
31134: PUSH
31135: LD_EXP 96
31139: PUSH
31140: LD_VAR 0 1
31144: ARRAY
31145: PPUSH
31146: CALL_OW 305
31150: NOT
31151: OR
31152: IFFALSE 31243
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31154: LD_EXP 97
31158: PUSH
31159: LD_VAR 0 1
31163: ARRAY
31164: PUSH
31165: LD_VAR 0 2
31169: ARRAY
31170: PUSH
31171: LD_INT 1
31173: ARRAY
31174: PPUSH
31175: LD_EXP 97
31179: PUSH
31180: LD_VAR 0 1
31184: ARRAY
31185: PUSH
31186: LD_VAR 0 2
31190: ARRAY
31191: PUSH
31192: LD_INT 2
31194: ARRAY
31195: PPUSH
31196: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31200: LD_ADDR_EXP 97
31204: PUSH
31205: LD_EXP 97
31209: PPUSH
31210: LD_VAR 0 1
31214: PPUSH
31215: LD_EXP 97
31219: PUSH
31220: LD_VAR 0 1
31224: ARRAY
31225: PPUSH
31226: LD_VAR 0 2
31230: PPUSH
31231: CALL_OW 3
31235: PPUSH
31236: CALL_OW 1
31240: ST_TO_ADDR
// continue ;
31241: GO 31114
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31243: LD_ADDR_VAR 0 4
31247: PUSH
31248: LD_EXP 97
31252: PUSH
31253: LD_VAR 0 1
31257: ARRAY
31258: PUSH
31259: LD_VAR 0 2
31263: ARRAY
31264: PUSH
31265: LD_INT 1
31267: ARRAY
31268: PPUSH
31269: LD_EXP 97
31273: PUSH
31274: LD_VAR 0 1
31278: ARRAY
31279: PUSH
31280: LD_VAR 0 2
31284: ARRAY
31285: PUSH
31286: LD_INT 2
31288: ARRAY
31289: PPUSH
31290: CALL_OW 428
31294: ST_TO_ADDR
// if not tmp then
31295: LD_VAR 0 4
31299: NOT
31300: IFFALSE 31304
// continue ;
31302: GO 31114
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31304: LD_VAR 0 4
31308: PUSH
31309: LD_INT 81
31311: PUSH
31312: LD_VAR 0 3
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PPUSH
31321: CALL_OW 69
31325: IN
31326: IFFALSE 31376
31328: PUSH
31329: LD_EXP 97
31333: PUSH
31334: LD_VAR 0 1
31338: ARRAY
31339: PUSH
31340: LD_VAR 0 2
31344: ARRAY
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: LD_EXP 97
31354: PUSH
31355: LD_VAR 0 1
31359: ARRAY
31360: PUSH
31361: LD_VAR 0 2
31365: ARRAY
31366: PUSH
31367: LD_INT 2
31369: ARRAY
31370: PPUSH
31371: CALL_OW 458
31375: AND
31376: IFFALSE 31470
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31378: LD_EXP 97
31382: PUSH
31383: LD_VAR 0 1
31387: ARRAY
31388: PUSH
31389: LD_VAR 0 2
31393: ARRAY
31394: PUSH
31395: LD_INT 1
31397: ARRAY
31398: PPUSH
31399: LD_EXP 97
31403: PUSH
31404: LD_VAR 0 1
31408: ARRAY
31409: PUSH
31410: LD_VAR 0 2
31414: ARRAY
31415: PUSH
31416: LD_INT 2
31418: ARRAY
31419: PPUSH
31420: LD_VAR 0 3
31424: PPUSH
31425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31429: LD_ADDR_EXP 97
31433: PUSH
31434: LD_EXP 97
31438: PPUSH
31439: LD_VAR 0 1
31443: PPUSH
31444: LD_EXP 97
31448: PUSH
31449: LD_VAR 0 1
31453: ARRAY
31454: PPUSH
31455: LD_VAR 0 2
31459: PPUSH
31460: CALL_OW 3
31464: PPUSH
31465: CALL_OW 1
31469: ST_TO_ADDR
// end ; end ;
31470: GO 31114
31472: POP
31473: POP
// end ;
31474: GO 30985
31476: POP
31477: POP
// end ;
31478: PPOPN 4
31480: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
31481: LD_INT 0
31483: PPUSH
31484: PPUSH
31485: PPUSH
31486: PPUSH
// result := false ;
31487: LD_ADDR_VAR 0 4
31491: PUSH
31492: LD_INT 0
31494: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 264
31504: PUSH
31505: LD_INT 81
31507: EQUAL
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31883
// side := GetSide ( unit ) ;
31513: LD_ADDR_VAR 0 6
31517: PUSH
31518: LD_VAR 0 1
31522: PPUSH
31523: CALL_OW 255
31527: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
31528: LD_ADDR_VAR 0 5
31532: PUSH
31533: LD_EXP 96
31537: PPUSH
31538: LD_VAR 0 1
31542: PPUSH
31543: CALL 38735 0 2
31547: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31548: LD_EXP 97
31552: PUSH
31553: LD_VAR 0 5
31557: ARRAY
31558: PUSH
31559: LD_EXP 98
31563: GREATEREQUAL
31564: IFFALSE 31568
// exit ;
31566: GO 31883
// ComMoveXY ( unit , x , y ) ;
31568: LD_VAR 0 1
31572: PPUSH
31573: LD_VAR 0 2
31577: PPUSH
31578: LD_VAR 0 3
31582: PPUSH
31583: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31587: LD_INT 35
31589: PPUSH
31590: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31594: LD_VAR 0 1
31598: PPUSH
31599: LD_VAR 0 2
31603: PPUSH
31604: LD_VAR 0 3
31608: PPUSH
31609: CALL 70791 0 3
31613: NOT
31614: IFFALSE 31627
31616: PUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: CALL_OW 314
31626: AND
31627: IFFALSE 31631
// exit ;
31629: GO 31883
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31631: LD_VAR 0 2
31635: PPUSH
31636: LD_VAR 0 3
31640: PPUSH
31641: CALL_OW 428
31645: PUSH
31646: LD_VAR 0 1
31650: EQUAL
31651: IFFALSE 31665
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 314
31663: NOT
31664: AND
31665: IFFALSE 31587
// if MineAtPos ( x , y ) then
31667: LD_VAR 0 2
31671: PPUSH
31672: LD_VAR 0 3
31676: PPUSH
31677: CALL_OW 458
31681: IFFALSE 31685
// exit ;
31683: GO 31883
// if your_side = side then
31685: LD_OWVAR 2
31689: PUSH
31690: LD_VAR 0 6
31694: EQUAL
31695: IFFALSE 31714
// PlaySoundXY ( x , y , PlantMine ) ;
31697: LD_VAR 0 2
31701: PPUSH
31702: LD_VAR 0 3
31706: PPUSH
31707: LD_STRING PlantMine
31709: PPUSH
31710: CALL_OW 366
// repeat wait ( 1 ) ;
31714: LD_INT 1
31716: PPUSH
31717: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
31721: LD_VAR 0 2
31725: PPUSH
31726: LD_VAR 0 3
31730: PPUSH
31731: LD_VAR 0 6
31735: PPUSH
31736: LD_INT 0
31738: PPUSH
31739: CALL_OW 454
31743: IFFALSE 31714
// if MineAtPos ( x , y ) then
31745: LD_VAR 0 2
31749: PPUSH
31750: LD_VAR 0 3
31754: PPUSH
31755: CALL_OW 458
31759: IFFALSE 31875
// begin for i in minerMinesList [ index ] do
31761: LD_ADDR_VAR 0 7
31765: PUSH
31766: LD_EXP 97
31770: PUSH
31771: LD_VAR 0 5
31775: ARRAY
31776: PUSH
31777: FOR_IN
31778: IFFALSE 31820
// if i [ 1 ] = x and i [ 2 ] = y then
31780: LD_VAR 0 7
31784: PUSH
31785: LD_INT 1
31787: ARRAY
31788: PUSH
31789: LD_VAR 0 2
31793: EQUAL
31794: IFFALSE 31812
31796: PUSH
31797: LD_VAR 0 7
31801: PUSH
31802: LD_INT 2
31804: ARRAY
31805: PUSH
31806: LD_VAR 0 3
31810: EQUAL
31811: AND
31812: IFFALSE 31818
// exit ;
31814: POP
31815: POP
31816: GO 31883
31818: GO 31777
31820: POP
31821: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31822: LD_ADDR_EXP 97
31826: PUSH
31827: LD_EXP 97
31831: PPUSH
31832: LD_VAR 0 5
31836: PUSH
31837: LD_EXP 97
31841: PUSH
31842: LD_VAR 0 5
31846: ARRAY
31847: PUSH
31848: LD_INT 1
31850: PLUS
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PPUSH
31856: LD_VAR 0 2
31860: PUSH
31861: LD_VAR 0 3
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PPUSH
31870: CALL 38952 0 3
31874: ST_TO_ADDR
// end ; result := true ;
31875: LD_ADDR_VAR 0 4
31879: PUSH
31880: LD_INT 1
31882: ST_TO_ADDR
// end ;
31883: LD_VAR 0 4
31887: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31888: LD_INT 0
31890: PPUSH
31891: PPUSH
31892: PPUSH
// if not unit in minersList then
31893: LD_VAR 0 1
31897: PUSH
31898: LD_EXP 96
31902: IN
31903: NOT
31904: IFFALSE 31908
// exit ;
31906: GO 32115
// index := GetElementIndex ( minersList , unit ) ;
31908: LD_ADDR_VAR 0 6
31912: PUSH
31913: LD_EXP 96
31917: PPUSH
31918: LD_VAR 0 1
31922: PPUSH
31923: CALL 38735 0 2
31927: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31928: LD_ADDR_VAR 0 5
31932: PUSH
31933: DOUBLE
31934: LD_EXP 97
31938: PUSH
31939: LD_VAR 0 6
31943: ARRAY
31944: INC
31945: ST_TO_ADDR
31946: LD_INT 1
31948: PUSH
31949: FOR_DOWNTO
31950: IFFALSE 32113
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31952: LD_EXP 97
31956: PUSH
31957: LD_VAR 0 6
31961: ARRAY
31962: PUSH
31963: LD_VAR 0 5
31967: ARRAY
31968: PUSH
31969: LD_INT 1
31971: ARRAY
31972: PPUSH
31973: LD_EXP 97
31977: PUSH
31978: LD_VAR 0 6
31982: ARRAY
31983: PUSH
31984: LD_VAR 0 5
31988: ARRAY
31989: PUSH
31990: LD_INT 2
31992: ARRAY
31993: PPUSH
31994: LD_VAR 0 2
31998: PPUSH
31999: LD_VAR 0 3
32003: PPUSH
32004: CALL_OW 298
32008: PUSH
32009: LD_INT 6
32011: LESS
32012: IFFALSE 32111
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32014: LD_EXP 97
32018: PUSH
32019: LD_VAR 0 6
32023: ARRAY
32024: PUSH
32025: LD_VAR 0 5
32029: ARRAY
32030: PUSH
32031: LD_INT 1
32033: ARRAY
32034: PPUSH
32035: LD_EXP 97
32039: PUSH
32040: LD_VAR 0 6
32044: ARRAY
32045: PUSH
32046: LD_VAR 0 5
32050: ARRAY
32051: PUSH
32052: LD_INT 2
32054: ARRAY
32055: PPUSH
32056: LD_VAR 0 1
32060: PPUSH
32061: CALL_OW 255
32065: PPUSH
32066: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32070: LD_ADDR_EXP 97
32074: PUSH
32075: LD_EXP 97
32079: PPUSH
32080: LD_VAR 0 6
32084: PPUSH
32085: LD_EXP 97
32089: PUSH
32090: LD_VAR 0 6
32094: ARRAY
32095: PPUSH
32096: LD_VAR 0 5
32100: PPUSH
32101: CALL_OW 3
32105: PPUSH
32106: CALL_OW 1
32110: ST_TO_ADDR
// end ; end ;
32111: GO 31949
32113: POP
32114: POP
// end ;
32115: LD_VAR 0 4
32119: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32120: LD_INT 0
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 264
32140: PUSH
32141: LD_INT 81
32143: EQUAL
32144: NOT
32145: IFTRUE 32160
32147: PUSH
32148: LD_VAR 0 1
32152: PUSH
32153: LD_EXP 96
32157: IN
32158: NOT
32159: OR
32160: IFFALSE 32164
// exit ;
32162: GO 32490
// index := GetElementIndex ( minersList , unit ) ;
32164: LD_ADDR_VAR 0 6
32168: PUSH
32169: LD_EXP 96
32173: PPUSH
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL 38735 0 2
32183: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32184: LD_ADDR_VAR 0 8
32188: PUSH
32189: LD_EXP 98
32193: PUSH
32194: LD_EXP 97
32198: PUSH
32199: LD_VAR 0 6
32203: ARRAY
32204: MINUS
32205: ST_TO_ADDR
// if not minesFreeAmount then
32206: LD_VAR 0 8
32210: NOT
32211: IFFALSE 32215
// exit ;
32213: GO 32490
// tmp := [ ] ;
32215: LD_ADDR_VAR 0 7
32219: PUSH
32220: EMPTY
32221: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32222: LD_ADDR_VAR 0 5
32226: PUSH
32227: DOUBLE
32228: LD_INT 1
32230: DEC
32231: ST_TO_ADDR
32232: LD_VAR 0 8
32236: PUSH
32237: FOR_TO
32238: IFFALSE 32437
// begin _d := rand ( 0 , 5 ) ;
32240: LD_ADDR_VAR 0 11
32244: PUSH
32245: LD_INT 0
32247: PPUSH
32248: LD_INT 5
32250: PPUSH
32251: CALL_OW 12
32255: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32256: LD_ADDR_VAR 0 12
32260: PUSH
32261: LD_INT 2
32263: PPUSH
32264: LD_INT 6
32266: PPUSH
32267: CALL_OW 12
32271: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32272: LD_ADDR_VAR 0 9
32276: PUSH
32277: LD_VAR 0 2
32281: PPUSH
32282: LD_VAR 0 11
32286: PPUSH
32287: LD_VAR 0 12
32291: PPUSH
32292: CALL_OW 272
32296: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32297: LD_ADDR_VAR 0 10
32301: PUSH
32302: LD_VAR 0 3
32306: PPUSH
32307: LD_VAR 0 11
32311: PPUSH
32312: LD_VAR 0 12
32316: PPUSH
32317: CALL_OW 273
32321: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32322: LD_VAR 0 9
32326: PPUSH
32327: LD_VAR 0 10
32331: PPUSH
32332: CALL_OW 488
32336: IFFALSE 32360
32338: PUSH
32339: LD_VAR 0 9
32343: PUSH
32344: LD_VAR 0 10
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_VAR 0 7
32357: IN
32358: NOT
32359: AND
32360: IFFALSE 32379
32362: PUSH
32363: LD_VAR 0 9
32367: PPUSH
32368: LD_VAR 0 10
32372: PPUSH
32373: CALL_OW 458
32377: NOT
32378: AND
32379: IFFALSE 32421
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32381: LD_ADDR_VAR 0 7
32385: PUSH
32386: LD_VAR 0 7
32390: PPUSH
32391: LD_VAR 0 7
32395: PUSH
32396: LD_INT 1
32398: PLUS
32399: PPUSH
32400: LD_VAR 0 9
32404: PUSH
32405: LD_VAR 0 10
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PPUSH
32414: CALL_OW 1
32418: ST_TO_ADDR
32419: GO 32435
// i := i - 1 ;
32421: LD_ADDR_VAR 0 5
32425: PUSH
32426: LD_VAR 0 5
32430: PUSH
32431: LD_INT 1
32433: MINUS
32434: ST_TO_ADDR
// end ;
32435: GO 32237
32437: POP
32438: POP
// for i in tmp do
32439: LD_ADDR_VAR 0 5
32443: PUSH
32444: LD_VAR 0 7
32448: PUSH
32449: FOR_IN
32450: IFFALSE 32488
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32452: LD_VAR 0 1
32456: PPUSH
32457: LD_VAR 0 5
32461: PUSH
32462: LD_INT 1
32464: ARRAY
32465: PPUSH
32466: LD_VAR 0 5
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: PPUSH
32475: CALL 31481 0 3
32479: NOT
32480: IFFALSE 32486
// exit ;
32482: POP
32483: POP
32484: GO 32490
32486: GO 32449
32488: POP
32489: POP
// end ;
32490: LD_VAR 0 4
32494: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
32495: LD_INT 0
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
// if GetClass ( unit ) <> class_sniper then
32506: LD_VAR 0 1
32510: PPUSH
32511: CALL_OW 257
32515: PUSH
32516: LD_INT 5
32518: NONEQUAL
32519: IFFALSE 32523
// exit ;
32521: GO 32993
// dist := 8 ;
32523: LD_ADDR_VAR 0 5
32527: PUSH
32528: LD_INT 8
32530: ST_TO_ADDR
// viewRange := 12 ;
32531: LD_ADDR_VAR 0 8
32535: PUSH
32536: LD_INT 12
32538: ST_TO_ADDR
// side := GetSide ( unit ) ;
32539: LD_ADDR_VAR 0 6
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 255
32553: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32554: LD_INT 61
32556: PPUSH
32557: LD_VAR 0 6
32561: PPUSH
32562: CALL_OW 321
32566: PUSH
32567: LD_INT 2
32569: EQUAL
32570: IFFALSE 32580
// viewRange := 16 ;
32572: LD_ADDR_VAR 0 8
32576: PUSH
32577: LD_INT 16
32579: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32580: LD_VAR 0 1
32584: PPUSH
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_VAR 0 3
32594: PPUSH
32595: CALL_OW 297
32599: PUSH
32600: LD_VAR 0 5
32604: GREATER
32605: IFFALSE 32684
// begin ComMoveXY ( unit , x , y ) ;
32607: LD_VAR 0 1
32611: PPUSH
32612: LD_VAR 0 2
32616: PPUSH
32617: LD_VAR 0 3
32621: PPUSH
32622: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32626: LD_INT 35
32628: PPUSH
32629: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32633: LD_VAR 0 1
32637: PPUSH
32638: LD_VAR 0 2
32642: PPUSH
32643: LD_VAR 0 3
32647: PPUSH
32648: CALL 70791 0 3
32652: NOT
32653: IFFALSE 32657
// exit ;
32655: GO 32993
// until GetDistUnitXY ( unit , x , y ) < dist ;
32657: LD_VAR 0 1
32661: PPUSH
32662: LD_VAR 0 2
32666: PPUSH
32667: LD_VAR 0 3
32671: PPUSH
32672: CALL_OW 297
32676: PUSH
32677: LD_VAR 0 5
32681: LESS
32682: IFFALSE 32626
// end ; ComTurnXY ( unit , x , y ) ;
32684: LD_VAR 0 1
32688: PPUSH
32689: LD_VAR 0 2
32693: PPUSH
32694: LD_VAR 0 3
32698: PPUSH
32699: CALL_OW 118
// repeat if Multiplayer then
32703: LD_OWVAR 4
32707: IFFALSE 32718
// wait ( 35 ) else
32709: LD_INT 35
32711: PPUSH
32712: CALL_OW 67
32716: GO 32725
// wait ( 5 ) ;
32718: LD_INT 5
32720: PPUSH
32721: CALL_OW 67
// _d := GetDir ( unit ) ;
32725: LD_ADDR_VAR 0 11
32729: PUSH
32730: LD_VAR 0 1
32734: PPUSH
32735: CALL_OW 254
32739: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
32740: LD_ADDR_VAR 0 7
32744: PUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 250
32754: PPUSH
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 251
32764: PPUSH
32765: LD_VAR 0 2
32769: PPUSH
32770: LD_VAR 0 3
32774: PPUSH
32775: CALL 73427 0 4
32779: ST_TO_ADDR
// until dir = _d ;
32780: LD_VAR 0 7
32784: PUSH
32785: LD_VAR 0 11
32789: EQUAL
32790: IFFALSE 32703
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
32792: LD_ADDR_VAR 0 9
32796: PUSH
32797: LD_VAR 0 1
32801: PPUSH
32802: CALL_OW 250
32806: PPUSH
32807: LD_VAR 0 7
32811: PPUSH
32812: LD_VAR 0 5
32816: PPUSH
32817: CALL_OW 272
32821: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
32822: LD_ADDR_VAR 0 10
32826: PUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: CALL_OW 251
32836: PPUSH
32837: LD_VAR 0 7
32841: PPUSH
32842: LD_VAR 0 5
32846: PPUSH
32847: CALL_OW 273
32851: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32852: LD_VAR 0 9
32856: PPUSH
32857: LD_VAR 0 10
32861: PPUSH
32862: CALL_OW 488
32866: NOT
32867: IFFALSE 32871
// exit ;
32869: GO 32993
// ComAnimCustom ( unit , 1 ) ;
32871: LD_VAR 0 1
32875: PPUSH
32876: LD_INT 1
32878: PPUSH
32879: CALL_OW 592
// p := 0 ;
32883: LD_ADDR_VAR 0 12
32887: PUSH
32888: LD_INT 0
32890: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32891: LD_VAR 0 9
32895: PPUSH
32896: LD_VAR 0 10
32900: PPUSH
32901: LD_VAR 0 6
32905: PPUSH
32906: LD_VAR 0 8
32910: PPUSH
32911: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
32915: LD_INT 35
32917: PPUSH
32918: CALL_OW 67
// p := Inc ( p ) ;
32922: LD_ADDR_VAR 0 12
32926: PUSH
32927: LD_VAR 0 12
32931: PPUSH
32932: CALL 73383 0 1
32936: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
32937: LD_VAR 0 12
32941: PUSH
32942: LD_INT 3
32944: EQUAL
32945: IFTRUE 32959
32947: PUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: CALL_OW 302
32957: NOT
32958: OR
32959: IFTRUE 32972
32961: PUSH
32962: LD_VAR 0 1
32966: PPUSH
32967: CALL_OW 301
32971: OR
32972: IFFALSE 32915
// RemoveSeeing ( _x , _y , side ) ;
32974: LD_VAR 0 9
32978: PPUSH
32979: LD_VAR 0 10
32983: PPUSH
32984: LD_VAR 0 6
32988: PPUSH
32989: CALL_OW 331
// end ;
32993: LD_VAR 0 4
32997: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
32998: LD_INT 0
33000: PPUSH
33001: PPUSH
33002: PPUSH
33003: PPUSH
33004: PPUSH
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
// if not unit then
33011: LD_VAR 0 1
33015: NOT
33016: IFFALSE 33020
// exit ;
33018: GO 33291
// side := GetSide ( unit ) ;
33020: LD_ADDR_VAR 0 3
33024: PUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 255
33034: ST_TO_ADDR
// x := GetX ( unit ) ;
33035: LD_ADDR_VAR 0 5
33039: PUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: CALL_OW 250
33049: ST_TO_ADDR
// y := GetY ( unit ) ;
33050: LD_ADDR_VAR 0 6
33054: PUSH
33055: LD_VAR 0 1
33059: PPUSH
33060: CALL_OW 251
33064: ST_TO_ADDR
// r := 8 ;
33065: LD_ADDR_VAR 0 4
33069: PUSH
33070: LD_INT 8
33072: ST_TO_ADDR
// if x - r < 0 then
33073: LD_VAR 0 5
33077: PUSH
33078: LD_VAR 0 4
33082: MINUS
33083: PUSH
33084: LD_INT 0
33086: LESS
33087: IFFALSE 33099
// min_x := 0 else
33089: LD_ADDR_VAR 0 7
33093: PUSH
33094: LD_INT 0
33096: ST_TO_ADDR
33097: GO 33115
// min_x := x - r ;
33099: LD_ADDR_VAR 0 7
33103: PUSH
33104: LD_VAR 0 5
33108: PUSH
33109: LD_VAR 0 4
33113: MINUS
33114: ST_TO_ADDR
// if y - r < 0 then
33115: LD_VAR 0 6
33119: PUSH
33120: LD_VAR 0 4
33124: MINUS
33125: PUSH
33126: LD_INT 0
33128: LESS
33129: IFFALSE 33141
// min_y := 0 else
33131: LD_ADDR_VAR 0 8
33135: PUSH
33136: LD_INT 0
33138: ST_TO_ADDR
33139: GO 33157
// min_y := y - r ;
33141: LD_ADDR_VAR 0 8
33145: PUSH
33146: LD_VAR 0 6
33150: PUSH
33151: LD_VAR 0 4
33155: MINUS
33156: ST_TO_ADDR
// max_x := x + r ;
33157: LD_ADDR_VAR 0 9
33161: PUSH
33162: LD_VAR 0 5
33166: PUSH
33167: LD_VAR 0 4
33171: PLUS
33172: ST_TO_ADDR
// max_y := y + r ;
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: LD_VAR 0 6
33182: PUSH
33183: LD_VAR 0 4
33187: PLUS
33188: ST_TO_ADDR
// for _x = min_x to max_x do
33189: LD_ADDR_VAR 0 11
33193: PUSH
33194: DOUBLE
33195: LD_VAR 0 7
33199: DEC
33200: ST_TO_ADDR
33201: LD_VAR 0 9
33205: PUSH
33206: FOR_TO
33207: IFFALSE 33289
// for _y = min_y to max_y do
33209: LD_ADDR_VAR 0 12
33213: PUSH
33214: DOUBLE
33215: LD_VAR 0 8
33219: DEC
33220: ST_TO_ADDR
33221: LD_VAR 0 10
33225: PUSH
33226: FOR_TO
33227: IFFALSE 33285
// begin if not ValidHex ( _x , _y ) then
33229: LD_VAR 0 11
33233: PPUSH
33234: LD_VAR 0 12
33238: PPUSH
33239: CALL_OW 488
33243: NOT
33244: IFFALSE 33248
// continue ;
33246: GO 33226
// if MineAtPos ( _x , _y ) then
33248: LD_VAR 0 11
33252: PPUSH
33253: LD_VAR 0 12
33257: PPUSH
33258: CALL_OW 458
33262: IFFALSE 33283
// ViewMineAtPos ( _x , _y , side ) ;
33264: LD_VAR 0 11
33268: PPUSH
33269: LD_VAR 0 12
33273: PPUSH
33274: LD_VAR 0 3
33278: PPUSH
33279: CALL_OW 457
// end ;
33283: GO 33226
33285: POP
33286: POP
33287: GO 33206
33289: POP
33290: POP
// end ;
33291: LD_VAR 0 2
33295: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
33296: LD_INT 0
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
33303: PPUSH
33304: PPUSH
// if not units then
33305: LD_VAR 0 1
33309: NOT
33310: IFFALSE 33314
// exit ;
33312: GO 33778
// scaners := [ ] ;
33314: LD_ADDR_VAR 0 6
33318: PUSH
33319: EMPTY
33320: ST_TO_ADDR
// for i in units do
33321: LD_ADDR_VAR 0 3
33325: PUSH
33326: LD_VAR 0 1
33330: PUSH
33331: FOR_IN
33332: IFFALSE 33489
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
33334: LD_VAR 0 3
33338: PPUSH
33339: CALL_OW 264
33343: PUSH
33344: LD_INT 11
33346: NONEQUAL
33347: IFTRUE 33361
33349: PUSH
33350: LD_VAR 0 3
33354: PPUSH
33355: CALL_OW 302
33359: NOT
33360: OR
33361: IFTRUE 33378
33363: PUSH
33364: LD_VAR 0 3
33368: PPUSH
33369: CALL_OW 110
33373: PUSH
33374: LD_INT 502
33376: EQUAL
33377: OR
33378: IFFALSE 33382
// continue ;
33380: GO 33331
// ComStop ( i ) ;
33382: LD_VAR 0 3
33386: PPUSH
33387: CALL_OW 141
// x := GetX ( i ) ;
33391: LD_ADDR_VAR 0 4
33395: PUSH
33396: LD_VAR 0 3
33400: PPUSH
33401: CALL_OW 250
33405: ST_TO_ADDR
// y := GetY ( i ) ;
33406: LD_ADDR_VAR 0 5
33410: PUSH
33411: LD_VAR 0 3
33415: PPUSH
33416: CALL_OW 251
33420: ST_TO_ADDR
// if GetSide ( i ) = your_side then
33421: LD_VAR 0 3
33425: PPUSH
33426: CALL_OW 255
33430: PUSH
33431: LD_OWVAR 2
33435: EQUAL
33436: IFFALSE 33455
// PlaySoundXY ( x , y , mineDetector ) ;
33438: LD_VAR 0 4
33442: PPUSH
33443: LD_VAR 0 5
33447: PPUSH
33448: LD_STRING mineDetector
33450: PPUSH
33451: CALL_OW 366
// scaners := Join ( scaners , i ) ;
33455: LD_ADDR_VAR 0 6
33459: PUSH
33460: LD_VAR 0 6
33464: PPUSH
33465: LD_VAR 0 3
33469: PPUSH
33470: CALL 72010 0 2
33474: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
33475: LD_VAR 0 3
33479: PPUSH
33480: LD_INT 502
33482: PPUSH
33483: CALL_OW 109
// end ;
33487: GO 33331
33489: POP
33490: POP
// if not scaners then
33491: LD_VAR 0 6
33495: NOT
33496: IFFALSE 33500
// exit ;
33498: GO 33778
// wait ( 3 ) ;
33500: LD_INT 3
33502: PPUSH
33503: CALL_OW 67
// timer := 6 ;
33507: LD_ADDR_VAR 0 7
33511: PUSH
33512: LD_INT 6
33514: ST_TO_ADDR
// repeat for i in scaners do
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: LD_VAR 0 6
33524: PUSH
33525: FOR_IN
33526: IFFALSE 33676
// begin side := GetSide ( i ) ;
33528: LD_ADDR_VAR 0 8
33532: PUSH
33533: LD_VAR 0 3
33537: PPUSH
33538: CALL_OW 255
33542: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
33543: LD_VAR 0 3
33547: PPUSH
33548: CALL_OW 302
33552: NOT
33553: IFTRUE 33566
33555: PUSH
33556: LD_VAR 0 3
33560: PPUSH
33561: CALL_OW 314
33565: OR
33566: IFTRUE 33597
33568: PUSH
33569: LD_VAR 0 3
33573: PPUSH
33574: CALL_OW 263
33578: PUSH
33579: LD_INT 1
33581: EQUAL
33582: IFFALSE 33596
33584: PUSH
33585: LD_VAR 0 3
33589: PPUSH
33590: CALL_OW 311
33594: NOT
33595: AND
33596: OR
33597: IFFALSE 33641
// begin SetUnitDisplayNumber ( i , 0 ) ;
33599: LD_VAR 0 3
33603: PPUSH
33604: LD_INT 0
33606: PPUSH
33607: CALL_OW 505
// SetTag ( i , 0 ) ;
33611: LD_VAR 0 3
33615: PPUSH
33616: LD_INT 0
33618: PPUSH
33619: CALL_OW 109
// scaners := scaners diff i ;
33623: LD_ADDR_VAR 0 6
33627: PUSH
33628: LD_VAR 0 6
33632: PUSH
33633: LD_VAR 0 3
33637: DIFF
33638: ST_TO_ADDR
// continue ;
33639: GO 33525
// end ; if side in [ your_side , 9 ] then
33641: LD_VAR 0 8
33645: PUSH
33646: LD_OWVAR 2
33650: PUSH
33651: LD_INT 9
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: IN
33658: IFFALSE 33674
// SetUnitDisplayNumber ( i , timer ) ;
33660: LD_VAR 0 3
33664: PPUSH
33665: LD_VAR 0 7
33669: PPUSH
33670: CALL_OW 505
// end ;
33674: GO 33525
33676: POP
33677: POP
// if not scaners then
33678: LD_VAR 0 6
33682: NOT
33683: IFFALSE 33687
// exit ;
33685: GO 33778
// timer := Dec ( timer ) ;
33687: LD_ADDR_VAR 0 7
33691: PUSH
33692: LD_VAR 0 7
33696: PPUSH
33697: CALL 73405 0 1
33701: ST_TO_ADDR
// wait ( 0 0$1 ) ;
33702: LD_INT 35
33704: PPUSH
33705: CALL_OW 67
// until timer = 0 ;
33709: LD_VAR 0 7
33713: PUSH
33714: LD_INT 0
33716: EQUAL
33717: IFFALSE 33515
// if not scaners then
33719: LD_VAR 0 6
33723: NOT
33724: IFFALSE 33728
// exit ;
33726: GO 33778
// for i in scaners do
33728: LD_ADDR_VAR 0 3
33732: PUSH
33733: LD_VAR 0 6
33737: PUSH
33738: FOR_IN
33739: IFFALSE 33776
// begin SetUnitDisplayNumber ( i , 0 ) ;
33741: LD_VAR 0 3
33745: PPUSH
33746: LD_INT 0
33748: PPUSH
33749: CALL_OW 505
// SetTag ( i , 0 ) ;
33753: LD_VAR 0 3
33757: PPUSH
33758: LD_INT 0
33760: PPUSH
33761: CALL_OW 109
// RevealDetectorMine ( i ) ;
33765: LD_VAR 0 3
33769: PPUSH
33770: CALL 32998 0 1
// end ;
33774: GO 33738
33776: POP
33777: POP
// end ;
33778: LD_VAR 0 2
33782: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
33783: LD_INT 0
33785: PPUSH
// if p1 = mine_detector_mode then
33786: LD_VAR 0 2
33790: PUSH
33791: LD_INT 103
33793: EQUAL
33794: IFFALSE 33805
// DetectMine ( units ) ;
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL 33296 0 1
// end ; end_of_file
33805: LD_VAR 0 7
33809: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33810: LD_INT 0
33812: PPUSH
33813: PPUSH
// if exist_mode then
33814: LD_VAR 0 2
33818: IFFALSE 33864
// begin unit := CreateCharacter ( prefix & ident ) ;
33820: LD_ADDR_VAR 0 5
33824: PUSH
33825: LD_VAR 0 3
33829: PUSH
33830: LD_VAR 0 1
33834: STR
33835: PPUSH
33836: CALL_OW 34
33840: ST_TO_ADDR
// if unit then
33841: LD_VAR 0 5
33845: IFFALSE 33862
// DeleteCharacters ( prefix & ident ) ;
33847: LD_VAR 0 3
33851: PUSH
33852: LD_VAR 0 1
33856: STR
33857: PPUSH
33858: CALL_OW 40
// end else
33862: GO 33879
// unit := NewCharacter ( ident ) ;
33864: LD_ADDR_VAR 0 5
33868: PUSH
33869: LD_VAR 0 1
33873: PPUSH
33874: CALL_OW 25
33878: ST_TO_ADDR
// result := unit ;
33879: LD_ADDR_VAR 0 4
33883: PUSH
33884: LD_VAR 0 5
33888: ST_TO_ADDR
// end ;
33889: LD_VAR 0 4
33893: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
// if exist_mode then
33898: LD_VAR 0 2
33902: IFFALSE 33927
// unit := CreateCharacter ( prefix & ident ) else
33904: LD_ADDR_VAR 0 5
33908: PUSH
33909: LD_VAR 0 3
33913: PUSH
33914: LD_VAR 0 1
33918: STR
33919: PPUSH
33920: CALL_OW 34
33924: ST_TO_ADDR
33925: GO 33942
// unit := NewCharacter ( ident ) ;
33927: LD_ADDR_VAR 0 5
33931: PUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 25
33941: ST_TO_ADDR
// result := unit ;
33942: LD_ADDR_VAR 0 4
33946: PUSH
33947: LD_VAR 0 5
33951: ST_TO_ADDR
// end ;
33952: LD_VAR 0 4
33956: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33957: LD_INT 0
33959: PPUSH
33960: PPUSH
// if not side or not nation then
33961: LD_VAR 0 1
33965: NOT
33966: IFTRUE 33975
33968: PUSH
33969: LD_VAR 0 2
33973: NOT
33974: OR
33975: IFFALSE 33979
// exit ;
33977: GO 34773
// case nation of nation_american :
33979: LD_VAR 0 2
33983: PUSH
33984: LD_INT 1
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33992
33990: GO 34214
33992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33993: LD_ADDR_VAR 0 4
33997: PUSH
33998: LD_INT 35
34000: PUSH
34001: LD_INT 45
34003: PUSH
34004: LD_INT 46
34006: PUSH
34007: LD_INT 47
34009: PUSH
34010: LD_INT 82
34012: PUSH
34013: LD_INT 83
34015: PUSH
34016: LD_INT 84
34018: PUSH
34019: LD_INT 85
34021: PUSH
34022: LD_INT 86
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 6
34033: PUSH
34034: LD_INT 15
34036: PUSH
34037: LD_INT 16
34039: PUSH
34040: LD_INT 7
34042: PUSH
34043: LD_INT 12
34045: PUSH
34046: LD_INT 13
34048: PUSH
34049: LD_INT 10
34051: PUSH
34052: LD_INT 14
34054: PUSH
34055: LD_INT 20
34057: PUSH
34058: LD_INT 21
34060: PUSH
34061: LD_INT 22
34063: PUSH
34064: LD_INT 25
34066: PUSH
34067: LD_INT 32
34069: PUSH
34070: LD_INT 27
34072: PUSH
34073: LD_INT 36
34075: PUSH
34076: LD_INT 69
34078: PUSH
34079: LD_INT 39
34081: PUSH
34082: LD_INT 34
34084: PUSH
34085: LD_INT 40
34087: PUSH
34088: LD_INT 48
34090: PUSH
34091: LD_INT 49
34093: PUSH
34094: LD_INT 50
34096: PUSH
34097: LD_INT 51
34099: PUSH
34100: LD_INT 52
34102: PUSH
34103: LD_INT 53
34105: PUSH
34106: LD_INT 54
34108: PUSH
34109: LD_INT 55
34111: PUSH
34112: LD_INT 56
34114: PUSH
34115: LD_INT 57
34117: PUSH
34118: LD_INT 58
34120: PUSH
34121: LD_INT 59
34123: PUSH
34124: LD_INT 60
34126: PUSH
34127: LD_INT 61
34129: PUSH
34130: LD_INT 62
34132: PUSH
34133: LD_INT 80
34135: PUSH
34136: LD_INT 82
34138: PUSH
34139: LD_INT 83
34141: PUSH
34142: LD_INT 84
34144: PUSH
34145: LD_INT 85
34147: PUSH
34148: LD_INT 86
34150: PUSH
34151: LD_INT 90
34153: PUSH
34154: LD_INT 93
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: ST_TO_ADDR
34212: GO 34695
34214: LD_INT 2
34216: DOUBLE
34217: EQUAL
34218: IFTRUE 34222
34220: GO 34456
34222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
34223: LD_ADDR_VAR 0 4
34227: PUSH
34228: LD_INT 35
34230: PUSH
34231: LD_INT 45
34233: PUSH
34234: LD_INT 46
34236: PUSH
34237: LD_INT 47
34239: PUSH
34240: LD_INT 82
34242: PUSH
34243: LD_INT 83
34245: PUSH
34246: LD_INT 84
34248: PUSH
34249: LD_INT 85
34251: PUSH
34252: LD_INT 87
34254: PUSH
34255: LD_INT 70
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: LD_INT 11
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: LD_INT 5
34272: PUSH
34273: LD_INT 6
34275: PUSH
34276: LD_INT 15
34278: PUSH
34279: LD_INT 18
34281: PUSH
34282: LD_INT 7
34284: PUSH
34285: LD_INT 17
34287: PUSH
34288: LD_INT 8
34290: PUSH
34291: LD_INT 20
34293: PUSH
34294: LD_INT 21
34296: PUSH
34297: LD_INT 22
34299: PUSH
34300: LD_INT 72
34302: PUSH
34303: LD_INT 26
34305: PUSH
34306: LD_INT 69
34308: PUSH
34309: LD_INT 39
34311: PUSH
34312: LD_INT 40
34314: PUSH
34315: LD_INT 41
34317: PUSH
34318: LD_INT 42
34320: PUSH
34321: LD_INT 43
34323: PUSH
34324: LD_INT 48
34326: PUSH
34327: LD_INT 49
34329: PUSH
34330: LD_INT 50
34332: PUSH
34333: LD_INT 51
34335: PUSH
34336: LD_INT 52
34338: PUSH
34339: LD_INT 53
34341: PUSH
34342: LD_INT 54
34344: PUSH
34345: LD_INT 55
34347: PUSH
34348: LD_INT 56
34350: PUSH
34351: LD_INT 60
34353: PUSH
34354: LD_INT 61
34356: PUSH
34357: LD_INT 62
34359: PUSH
34360: LD_INT 66
34362: PUSH
34363: LD_INT 67
34365: PUSH
34366: LD_INT 68
34368: PUSH
34369: LD_INT 81
34371: PUSH
34372: LD_INT 82
34374: PUSH
34375: LD_INT 83
34377: PUSH
34378: LD_INT 84
34380: PUSH
34381: LD_INT 85
34383: PUSH
34384: LD_INT 87
34386: PUSH
34387: LD_INT 88
34389: PUSH
34390: LD_INT 92
34392: PUSH
34393: LD_INT 94
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
34454: GO 34695
34456: LD_INT 3
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34464
34462: GO 34694
34464: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
34465: LD_ADDR_VAR 0 4
34469: PUSH
34470: LD_INT 46
34472: PUSH
34473: LD_INT 47
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 82
34484: PUSH
34485: LD_INT 83
34487: PUSH
34488: LD_INT 84
34490: PUSH
34491: LD_INT 85
34493: PUSH
34494: LD_INT 86
34496: PUSH
34497: LD_INT 11
34499: PUSH
34500: LD_INT 9
34502: PUSH
34503: LD_INT 20
34505: PUSH
34506: LD_INT 19
34508: PUSH
34509: LD_INT 21
34511: PUSH
34512: LD_INT 24
34514: PUSH
34515: LD_INT 22
34517: PUSH
34518: LD_INT 25
34520: PUSH
34521: LD_INT 28
34523: PUSH
34524: LD_INT 29
34526: PUSH
34527: LD_INT 30
34529: PUSH
34530: LD_INT 31
34532: PUSH
34533: LD_INT 37
34535: PUSH
34536: LD_INT 38
34538: PUSH
34539: LD_INT 32
34541: PUSH
34542: LD_INT 27
34544: PUSH
34545: LD_INT 33
34547: PUSH
34548: LD_INT 69
34550: PUSH
34551: LD_INT 39
34553: PUSH
34554: LD_INT 34
34556: PUSH
34557: LD_INT 40
34559: PUSH
34560: LD_INT 71
34562: PUSH
34563: LD_INT 23
34565: PUSH
34566: LD_INT 44
34568: PUSH
34569: LD_INT 48
34571: PUSH
34572: LD_INT 49
34574: PUSH
34575: LD_INT 50
34577: PUSH
34578: LD_INT 51
34580: PUSH
34581: LD_INT 52
34583: PUSH
34584: LD_INT 53
34586: PUSH
34587: LD_INT 54
34589: PUSH
34590: LD_INT 55
34592: PUSH
34593: LD_INT 56
34595: PUSH
34596: LD_INT 57
34598: PUSH
34599: LD_INT 58
34601: PUSH
34602: LD_INT 59
34604: PUSH
34605: LD_INT 63
34607: PUSH
34608: LD_INT 64
34610: PUSH
34611: LD_INT 65
34613: PUSH
34614: LD_INT 82
34616: PUSH
34617: LD_INT 83
34619: PUSH
34620: LD_INT 84
34622: PUSH
34623: LD_INT 85
34625: PUSH
34626: LD_INT 86
34628: PUSH
34629: LD_INT 89
34631: PUSH
34632: LD_INT 91
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: ST_TO_ADDR
34692: GO 34695
34694: POP
// if state > - 1 and state < 3 then
34695: LD_VAR 0 3
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: GREATER
34704: IFFALSE 34716
34706: PUSH
34707: LD_VAR 0 3
34711: PUSH
34712: LD_INT 3
34714: LESS
34715: AND
34716: IFFALSE 34773
// for i in result do
34718: LD_ADDR_VAR 0 5
34722: PUSH
34723: LD_VAR 0 4
34727: PUSH
34728: FOR_IN
34729: IFFALSE 34771
// if GetTech ( i , side ) <> state then
34731: LD_VAR 0 5
34735: PPUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 321
34745: PUSH
34746: LD_VAR 0 3
34750: NONEQUAL
34751: IFFALSE 34769
// result := result diff i ;
34753: LD_ADDR_VAR 0 4
34757: PUSH
34758: LD_VAR 0 4
34762: PUSH
34763: LD_VAR 0 5
34767: DIFF
34768: ST_TO_ADDR
34769: GO 34728
34771: POP
34772: POP
// end ;
34773: LD_VAR 0 4
34777: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34778: LD_INT 0
34780: PPUSH
34781: PPUSH
34782: PPUSH
// result := true ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 1
34790: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34791: LD_ADDR_VAR 0 5
34795: PUSH
34796: LD_VAR 0 2
34800: PPUSH
34801: CALL_OW 480
34805: ST_TO_ADDR
// if not tmp then
34806: LD_VAR 0 5
34810: NOT
34811: IFFALSE 34815
// exit ;
34813: GO 34864
// for i in tmp do
34815: LD_ADDR_VAR 0 4
34819: PUSH
34820: LD_VAR 0 5
34824: PUSH
34825: FOR_IN
34826: IFFALSE 34862
// if GetTech ( i , side ) <> state_researched then
34828: LD_VAR 0 4
34832: PPUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 321
34842: PUSH
34843: LD_INT 2
34845: NONEQUAL
34846: IFFALSE 34860
// begin result := false ;
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: LD_INT 0
34855: ST_TO_ADDR
// exit ;
34856: POP
34857: POP
34858: GO 34864
// end ;
34860: GO 34825
34862: POP
34863: POP
// end ;
34864: LD_VAR 0 3
34868: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34869: LD_INT 0
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34884: LD_VAR 0 1
34888: NOT
34889: IFTRUE 34906
34891: PUSH
34892: LD_VAR 0 1
34896: PPUSH
34897: CALL_OW 257
34901: PUSH
34902: LD_INT 9
34904: NONEQUAL
34905: OR
34906: IFFALSE 34910
// exit ;
34908: GO 35489
// side := GetSide ( unit ) ;
34910: LD_ADDR_VAR 0 9
34914: PUSH
34915: LD_VAR 0 1
34919: PPUSH
34920: CALL_OW 255
34924: ST_TO_ADDR
// tech_space := tech_spacanom ;
34925: LD_ADDR_VAR 0 12
34929: PUSH
34930: LD_INT 29
34932: ST_TO_ADDR
// tech_time := tech_taurad ;
34933: LD_ADDR_VAR 0 13
34937: PUSH
34938: LD_INT 28
34940: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34941: LD_ADDR_VAR 0 11
34945: PUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 310
34955: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34956: LD_VAR 0 11
34960: PPUSH
34961: CALL_OW 247
34965: PUSH
34966: LD_INT 2
34968: EQUAL
34969: IFFALSE 34973
// exit ;
34971: GO 35489
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34973: LD_ADDR_VAR 0 8
34977: PUSH
34978: LD_INT 81
34980: PUSH
34981: LD_VAR 0 9
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: LD_INT 21
34995: PUSH
34996: LD_INT 3
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PPUSH
35011: CALL_OW 69
35015: ST_TO_ADDR
// if not tmp then
35016: LD_VAR 0 8
35020: NOT
35021: IFFALSE 35025
// exit ;
35023: GO 35489
// if in_unit then
35025: LD_VAR 0 11
35029: IFFALSE 35053
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35031: LD_ADDR_VAR 0 10
35035: PUSH
35036: LD_VAR 0 8
35040: PPUSH
35041: LD_VAR 0 11
35045: PPUSH
35046: CALL_OW 74
35050: ST_TO_ADDR
35051: GO 35073
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35053: LD_ADDR_VAR 0 10
35057: PUSH
35058: LD_VAR 0 8
35062: PPUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: CALL_OW 74
35072: ST_TO_ADDR
// if not enemy then
35073: LD_VAR 0 10
35077: NOT
35078: IFFALSE 35082
// exit ;
35080: GO 35489
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35082: LD_VAR 0 11
35086: IFFALSE 35108
35088: PUSH
35089: LD_VAR 0 11
35093: PPUSH
35094: LD_VAR 0 10
35098: PPUSH
35099: CALL_OW 296
35103: PUSH
35104: LD_INT 13
35106: GREATER
35107: AND
35108: IFTRUE 35130
35110: PUSH
35111: LD_VAR 0 1
35115: PPUSH
35116: LD_VAR 0 10
35120: PPUSH
35121: CALL_OW 296
35125: PUSH
35126: LD_INT 12
35128: GREATER
35129: OR
35130: IFFALSE 35134
// exit ;
35132: GO 35489
// missile := [ 1 ] ;
35134: LD_ADDR_VAR 0 14
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35145: LD_VAR 0 9
35149: PPUSH
35150: LD_VAR 0 12
35154: PPUSH
35155: CALL_OW 325
35159: IFFALSE 35188
// missile := Replace ( missile , missile + 1 , 2 ) ;
35161: LD_ADDR_VAR 0 14
35165: PUSH
35166: LD_VAR 0 14
35170: PPUSH
35171: LD_VAR 0 14
35175: PUSH
35176: LD_INT 1
35178: PLUS
35179: PPUSH
35180: LD_INT 2
35182: PPUSH
35183: CALL_OW 1
35187: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35188: LD_VAR 0 9
35192: PPUSH
35193: LD_VAR 0 13
35197: PPUSH
35198: CALL_OW 325
35202: IFFALSE 35226
35204: PUSH
35205: LD_VAR 0 10
35209: PPUSH
35210: CALL_OW 255
35214: PPUSH
35215: LD_VAR 0 13
35219: PPUSH
35220: CALL_OW 325
35224: NOT
35225: AND
35226: IFFALSE 35255
// missile := Replace ( missile , missile + 1 , 3 ) ;
35228: LD_ADDR_VAR 0 14
35232: PUSH
35233: LD_VAR 0 14
35237: PPUSH
35238: LD_VAR 0 14
35242: PUSH
35243: LD_INT 1
35245: PLUS
35246: PPUSH
35247: LD_INT 3
35249: PPUSH
35250: CALL_OW 1
35254: ST_TO_ADDR
// if missile < 2 then
35255: LD_VAR 0 14
35259: PUSH
35260: LD_INT 2
35262: LESS
35263: IFFALSE 35267
// exit ;
35265: GO 35489
// x := GetX ( enemy ) ;
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: LD_VAR 0 10
35276: PPUSH
35277: CALL_OW 250
35281: ST_TO_ADDR
// y := GetY ( enemy ) ;
35282: LD_ADDR_VAR 0 5
35286: PUSH
35287: LD_VAR 0 10
35291: PPUSH
35292: CALL_OW 251
35296: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35297: LD_ADDR_VAR 0 6
35301: PUSH
35302: LD_VAR 0 4
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PPUSH
35311: LD_INT 1
35313: PPUSH
35314: CALL_OW 12
35318: PLUS
35319: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35320: LD_ADDR_VAR 0 7
35324: PUSH
35325: LD_VAR 0 5
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PPUSH
35334: LD_INT 1
35336: PPUSH
35337: CALL_OW 12
35341: PLUS
35342: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35343: LD_VAR 0 6
35347: PPUSH
35348: LD_VAR 0 7
35352: PPUSH
35353: CALL_OW 488
35357: NOT
35358: IFFALSE 35380
// begin _x := x ;
35360: LD_ADDR_VAR 0 6
35364: PUSH
35365: LD_VAR 0 4
35369: ST_TO_ADDR
// _y := y ;
35370: LD_ADDR_VAR 0 7
35374: PUSH
35375: LD_VAR 0 5
35379: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35380: LD_ADDR_VAR 0 3
35384: PUSH
35385: LD_INT 1
35387: PPUSH
35388: LD_VAR 0 14
35392: PPUSH
35393: CALL_OW 12
35397: ST_TO_ADDR
// case i of 1 :
35398: LD_VAR 0 3
35402: PUSH
35403: LD_INT 1
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35428
35411: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35412: LD_VAR 0 1
35416: PPUSH
35417: LD_VAR 0 10
35421: PPUSH
35422: CALL_OW 115
35426: GO 35489
35428: LD_INT 2
35430: DOUBLE
35431: EQUAL
35432: IFTRUE 35436
35434: GO 35458
35436: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35437: LD_VAR 0 1
35441: PPUSH
35442: LD_VAR 0 6
35446: PPUSH
35447: LD_VAR 0 7
35451: PPUSH
35452: CALL_OW 153
35456: GO 35489
35458: LD_INT 3
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35488
35466: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35467: LD_VAR 0 1
35471: PPUSH
35472: LD_VAR 0 6
35476: PPUSH
35477: LD_VAR 0 7
35481: PPUSH
35482: CALL_OW 154
35486: GO 35489
35488: POP
// end ;
35489: LD_VAR 0 2
35493: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35494: LD_INT 0
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
35500: PPUSH
35501: PPUSH
// if not unit or not building then
35502: LD_VAR 0 1
35506: NOT
35507: IFTRUE 35516
35509: PUSH
35510: LD_VAR 0 2
35514: NOT
35515: OR
35516: IFFALSE 35520
// exit ;
35518: GO 35678
// x := GetX ( building ) ;
35520: LD_ADDR_VAR 0 5
35524: PUSH
35525: LD_VAR 0 2
35529: PPUSH
35530: CALL_OW 250
35534: ST_TO_ADDR
// y := GetY ( building ) ;
35535: LD_ADDR_VAR 0 6
35539: PUSH
35540: LD_VAR 0 2
35544: PPUSH
35545: CALL_OW 251
35549: ST_TO_ADDR
// for i := 0 to 5 do
35550: LD_ADDR_VAR 0 4
35554: PUSH
35555: DOUBLE
35556: LD_INT 0
35558: DEC
35559: ST_TO_ADDR
35560: LD_INT 5
35562: PUSH
35563: FOR_TO
35564: IFFALSE 35676
// begin _x := ShiftX ( x , i , 3 ) ;
35566: LD_ADDR_VAR 0 7
35570: PUSH
35571: LD_VAR 0 5
35575: PPUSH
35576: LD_VAR 0 4
35580: PPUSH
35581: LD_INT 3
35583: PPUSH
35584: CALL_OW 272
35588: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35589: LD_ADDR_VAR 0 8
35593: PUSH
35594: LD_VAR 0 6
35598: PPUSH
35599: LD_VAR 0 4
35603: PPUSH
35604: LD_INT 3
35606: PPUSH
35607: CALL_OW 273
35611: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35612: LD_VAR 0 7
35616: PPUSH
35617: LD_VAR 0 8
35621: PPUSH
35622: CALL_OW 488
35626: NOT
35627: IFFALSE 35631
// continue ;
35629: GO 35563
// if HexInfo ( _x , _y ) = 0 then
35631: LD_VAR 0 7
35635: PPUSH
35636: LD_VAR 0 8
35640: PPUSH
35641: CALL_OW 428
35645: PUSH
35646: LD_INT 0
35648: EQUAL
35649: IFFALSE 35674
// begin ComMoveXY ( unit , _x , _y ) ;
35651: LD_VAR 0 1
35655: PPUSH
35656: LD_VAR 0 7
35660: PPUSH
35661: LD_VAR 0 8
35665: PPUSH
35666: CALL_OW 111
// exit ;
35670: POP
35671: POP
35672: GO 35678
// end ; end ;
35674: GO 35563
35676: POP
35677: POP
// end ;
35678: LD_VAR 0 3
35682: RET
// export function ScanBase ( side , base_area ) ; begin
35683: LD_INT 0
35685: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35686: LD_ADDR_VAR 0 3
35690: PUSH
35691: LD_VAR 0 2
35695: PPUSH
35696: LD_INT 81
35698: PUSH
35699: LD_VAR 0 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PPUSH
35708: CALL_OW 70
35712: ST_TO_ADDR
// end ;
35713: LD_VAR 0 3
35717: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35718: LD_INT 0
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
// result := false ;
35724: LD_ADDR_VAR 0 2
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// side := GetSide ( unit ) ;
35732: LD_ADDR_VAR 0 3
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 255
35746: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35747: LD_ADDR_VAR 0 4
35751: PUSH
35752: LD_VAR 0 1
35756: PPUSH
35757: CALL_OW 248
35761: ST_TO_ADDR
// case nat of 1 :
35762: LD_VAR 0 4
35766: PUSH
35767: LD_INT 1
35769: DOUBLE
35770: EQUAL
35771: IFTRUE 35775
35773: GO 35786
35775: POP
// tech := tech_lassight ; 2 :
35776: LD_ADDR_VAR 0 5
35780: PUSH
35781: LD_INT 12
35783: ST_TO_ADDR
35784: GO 35825
35786: LD_INT 2
35788: DOUBLE
35789: EQUAL
35790: IFTRUE 35794
35792: GO 35805
35794: POP
// tech := tech_mortar ; 3 :
35795: LD_ADDR_VAR 0 5
35799: PUSH
35800: LD_INT 41
35802: ST_TO_ADDR
35803: GO 35825
35805: LD_INT 3
35807: DOUBLE
35808: EQUAL
35809: IFTRUE 35813
35811: GO 35824
35813: POP
// tech := tech_bazooka ; end ;
35814: LD_ADDR_VAR 0 5
35818: PUSH
35819: LD_INT 44
35821: ST_TO_ADDR
35822: GO 35825
35824: POP
// if Researched ( side , tech ) then
35825: LD_VAR 0 3
35829: PPUSH
35830: LD_VAR 0 5
35834: PPUSH
35835: CALL_OW 325
35839: IFFALSE 35866
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35841: LD_ADDR_VAR 0 2
35845: PUSH
35846: LD_INT 5
35848: PUSH
35849: LD_INT 8
35851: PUSH
35852: LD_INT 9
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: PUSH
35860: LD_VAR 0 4
35864: ARRAY
35865: ST_TO_ADDR
// end ;
35866: LD_VAR 0 2
35870: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35871: LD_INT 0
35873: PPUSH
35874: PPUSH
35875: PPUSH
// if not mines then
35876: LD_VAR 0 2
35880: NOT
35881: IFFALSE 35885
// exit ;
35883: GO 36029
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35885: LD_ADDR_VAR 0 5
35889: PUSH
35890: LD_INT 81
35892: PUSH
35893: LD_VAR 0 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 3
35904: PUSH
35905: LD_INT 21
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PPUSH
35923: CALL_OW 69
35927: ST_TO_ADDR
// for i in mines do
35928: LD_ADDR_VAR 0 4
35932: PUSH
35933: LD_VAR 0 2
35937: PUSH
35938: FOR_IN
35939: IFFALSE 36027
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35941: LD_VAR 0 4
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: PPUSH
35950: LD_VAR 0 4
35954: PUSH
35955: LD_INT 2
35957: ARRAY
35958: PPUSH
35959: CALL_OW 458
35963: NOT
35964: IFFALSE 35968
// continue ;
35966: GO 35938
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35968: LD_VAR 0 4
35972: PUSH
35973: LD_INT 1
35975: ARRAY
35976: PPUSH
35977: LD_VAR 0 4
35981: PUSH
35982: LD_INT 2
35984: ARRAY
35985: PPUSH
35986: CALL_OW 428
35990: PUSH
35991: LD_VAR 0 5
35995: IN
35996: IFFALSE 36025
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35998: LD_VAR 0 4
36002: PUSH
36003: LD_INT 1
36005: ARRAY
36006: PPUSH
36007: LD_VAR 0 4
36011: PUSH
36012: LD_INT 2
36014: ARRAY
36015: PPUSH
36016: LD_VAR 0 1
36020: PPUSH
36021: CALL_OW 456
// end ;
36025: GO 35938
36027: POP
36028: POP
// end ;
36029: LD_VAR 0 3
36033: RET
// export function Count ( array ) ; begin
36034: LD_INT 0
36036: PPUSH
// result := array + 0 ;
36037: LD_ADDR_VAR 0 2
36041: PUSH
36042: LD_VAR 0 1
36046: PUSH
36047: LD_INT 0
36049: PLUS
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 2
36055: RET
// export function IsEmpty ( building ) ; begin
36056: LD_INT 0
36058: PPUSH
// if not building then
36059: LD_VAR 0 1
36063: NOT
36064: IFFALSE 36068
// exit ;
36066: GO 36111
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_VAR 0 1
36077: PUSH
36078: LD_INT 22
36080: PUSH
36081: LD_VAR 0 1
36085: PPUSH
36086: CALL_OW 255
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 58
36097: PUSH
36098: EMPTY
36099: LIST
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PPUSH
36105: CALL_OW 69
36109: IN
36110: ST_TO_ADDR
// end ;
36111: LD_VAR 0 2
36115: RET
// export function IsNotFull ( building ) ; var places ; begin
36116: LD_INT 0
36118: PPUSH
36119: PPUSH
// if not building then
36120: LD_VAR 0 1
36124: NOT
36125: IFFALSE 36129
// exit ;
36127: GO 36157
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36129: LD_ADDR_VAR 0 2
36133: PUSH
36134: LD_VAR 0 1
36138: PPUSH
36139: LD_INT 3
36141: PUSH
36142: LD_INT 62
36144: PUSH
36145: EMPTY
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PPUSH
36152: CALL_OW 72
36156: ST_TO_ADDR
// end ;
36157: LD_VAR 0 2
36161: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36162: LD_INT 0
36164: PPUSH
36165: PPUSH
36166: PPUSH
36167: PPUSH
// tmp := [ ] ;
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: EMPTY
36174: ST_TO_ADDR
// list := [ ] ;
36175: LD_ADDR_VAR 0 5
36179: PUSH
36180: EMPTY
36181: ST_TO_ADDR
// for i = 16 to 25 do
36182: LD_ADDR_VAR 0 4
36186: PUSH
36187: DOUBLE
36188: LD_INT 16
36190: DEC
36191: ST_TO_ADDR
36192: LD_INT 25
36194: PUSH
36195: FOR_TO
36196: IFFALSE 36269
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: LD_VAR 0 3
36207: PUSH
36208: LD_INT 22
36210: PUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 255
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 91
36227: PUSH
36228: LD_VAR 0 1
36232: PUSH
36233: LD_INT 6
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 30
36243: PUSH
36244: LD_VAR 0 4
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: PUSH
36258: EMPTY
36259: LIST
36260: PPUSH
36261: CALL_OW 69
36265: ADD
36266: ST_TO_ADDR
36267: GO 36195
36269: POP
36270: POP
// for i = 1 to tmp do
36271: LD_ADDR_VAR 0 4
36275: PUSH
36276: DOUBLE
36277: LD_INT 1
36279: DEC
36280: ST_TO_ADDR
36281: LD_VAR 0 3
36285: PUSH
36286: FOR_TO
36287: IFFALSE 36375
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36289: LD_ADDR_VAR 0 5
36293: PUSH
36294: LD_VAR 0 5
36298: PUSH
36299: LD_VAR 0 3
36303: PUSH
36304: LD_VAR 0 4
36308: ARRAY
36309: PPUSH
36310: CALL_OW 266
36314: PUSH
36315: LD_VAR 0 3
36319: PUSH
36320: LD_VAR 0 4
36324: ARRAY
36325: PPUSH
36326: CALL_OW 250
36330: PUSH
36331: LD_VAR 0 3
36335: PUSH
36336: LD_VAR 0 4
36340: ARRAY
36341: PPUSH
36342: CALL_OW 251
36346: PUSH
36347: LD_VAR 0 3
36351: PUSH
36352: LD_VAR 0 4
36356: ARRAY
36357: PPUSH
36358: CALL_OW 254
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: ADD
36372: ST_TO_ADDR
36373: GO 36286
36375: POP
36376: POP
// result := list ;
36377: LD_ADDR_VAR 0 2
36381: PUSH
36382: LD_VAR 0 5
36386: ST_TO_ADDR
// end ;
36387: LD_VAR 0 2
36391: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36392: LD_INT 0
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
// if not factory then
36401: LD_VAR 0 1
36405: NOT
36406: IFFALSE 36410
// exit ;
36408: GO 37013
// if control = control_apeman then
36410: LD_VAR 0 4
36414: PUSH
36415: LD_INT 5
36417: EQUAL
36418: IFFALSE 36527
// begin tmp := UnitsInside ( factory ) ;
36420: LD_ADDR_VAR 0 8
36424: PUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 313
36434: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36435: LD_VAR 0 8
36439: PPUSH
36440: LD_INT 25
36442: PUSH
36443: LD_INT 12
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PPUSH
36450: CALL_OW 72
36454: NOT
36455: IFFALSE 36465
// control := control_manual ;
36457: LD_ADDR_VAR 0 4
36461: PUSH
36462: LD_INT 1
36464: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36465: LD_ADDR_VAR 0 8
36469: PUSH
36470: LD_VAR 0 1
36474: PPUSH
36475: CALL 36162 0 1
36479: ST_TO_ADDR
// if tmp then
36480: LD_VAR 0 8
36484: IFFALSE 36527
// begin for i in tmp do
36486: LD_ADDR_VAR 0 7
36490: PUSH
36491: LD_VAR 0 8
36495: PUSH
36496: FOR_IN
36497: IFFALSE 36525
// if i [ 1 ] = b_ext_radio then
36499: LD_VAR 0 7
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: PUSH
36508: LD_INT 22
36510: EQUAL
36511: IFFALSE 36523
// begin control := control_remote ;
36513: LD_ADDR_VAR 0 4
36517: PUSH
36518: LD_INT 2
36520: ST_TO_ADDR
// break ;
36521: GO 36525
// end ;
36523: GO 36496
36525: POP
36526: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36527: LD_VAR 0 1
36531: PPUSH
36532: LD_VAR 0 2
36536: PPUSH
36537: LD_VAR 0 3
36541: PPUSH
36542: LD_VAR 0 4
36546: PPUSH
36547: LD_VAR 0 5
36551: PPUSH
36552: CALL_OW 448
36556: IFFALSE 36591
// begin result := [ chassis , engine , control , weapon ] ;
36558: LD_ADDR_VAR 0 6
36562: PUSH
36563: LD_VAR 0 2
36567: PUSH
36568: LD_VAR 0 3
36572: PUSH
36573: LD_VAR 0 4
36577: PUSH
36578: LD_VAR 0 5
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// exit ;
36589: GO 37013
// end ; _chassis := AvailableChassisList ( factory ) ;
36591: LD_ADDR_VAR 0 9
36595: PUSH
36596: LD_VAR 0 1
36600: PPUSH
36601: CALL_OW 475
36605: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36606: LD_ADDR_VAR 0 11
36610: PUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 476
36620: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36621: LD_ADDR_VAR 0 12
36625: PUSH
36626: LD_VAR 0 1
36630: PPUSH
36631: CALL_OW 477
36635: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36636: LD_ADDR_VAR 0 10
36640: PUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 478
36650: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36651: LD_VAR 0 9
36655: NOT
36656: IFTRUE 36665
36658: PUSH
36659: LD_VAR 0 11
36663: NOT
36664: OR
36665: IFTRUE 36674
36667: PUSH
36668: LD_VAR 0 12
36672: NOT
36673: OR
36674: IFTRUE 36683
36676: PUSH
36677: LD_VAR 0 10
36681: NOT
36682: OR
36683: IFFALSE 36718
// begin result := [ chassis , engine , control , weapon ] ;
36685: LD_ADDR_VAR 0 6
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_VAR 0 3
36699: PUSH
36700: LD_VAR 0 4
36704: PUSH
36705: LD_VAR 0 5
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// exit ;
36716: GO 37013
// end ; if not chassis in _chassis then
36718: LD_VAR 0 2
36722: PUSH
36723: LD_VAR 0 9
36727: IN
36728: NOT
36729: IFFALSE 36755
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36731: LD_ADDR_VAR 0 2
36735: PUSH
36736: LD_VAR 0 9
36740: PUSH
36741: LD_INT 1
36743: PPUSH
36744: LD_VAR 0 9
36748: PPUSH
36749: CALL_OW 12
36753: ARRAY
36754: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36755: LD_VAR 0 2
36759: PPUSH
36760: LD_VAR 0 3
36764: PPUSH
36765: CALL 37018 0 2
36769: NOT
36770: IFFALSE 36831
// repeat engine := _engine [ 1 ] ;
36772: LD_ADDR_VAR 0 3
36776: PUSH
36777: LD_VAR 0 11
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36786: LD_ADDR_VAR 0 11
36790: PUSH
36791: LD_VAR 0 11
36795: PPUSH
36796: LD_INT 1
36798: PPUSH
36799: CALL_OW 3
36803: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36804: LD_VAR 0 2
36808: PPUSH
36809: LD_VAR 0 3
36813: PPUSH
36814: CALL 37018 0 2
36818: IFTRUE 36829
36820: PUSH
36821: LD_VAR 0 11
36825: PUSH
36826: EMPTY
36827: EQUAL
36828: OR
36829: IFFALSE 36772
// if not control in _control then
36831: LD_VAR 0 4
36835: PUSH
36836: LD_VAR 0 12
36840: IN
36841: NOT
36842: IFFALSE 36868
// control := _control [ rand ( 1 , _control ) ] ;
36844: LD_ADDR_VAR 0 4
36848: PUSH
36849: LD_VAR 0 12
36853: PUSH
36854: LD_INT 1
36856: PPUSH
36857: LD_VAR 0 12
36861: PPUSH
36862: CALL_OW 12
36866: ARRAY
36867: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36868: LD_VAR 0 2
36872: PPUSH
36873: LD_VAR 0 5
36877: PPUSH
36878: CALL 37240 0 2
36882: NOT
36883: IFFALSE 36944
// repeat weapon := _weapon [ 1 ] ;
36885: LD_ADDR_VAR 0 5
36889: PUSH
36890: LD_VAR 0 10
36894: PUSH
36895: LD_INT 1
36897: ARRAY
36898: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36899: LD_ADDR_VAR 0 10
36903: PUSH
36904: LD_VAR 0 10
36908: PPUSH
36909: LD_INT 1
36911: PPUSH
36912: CALL_OW 3
36916: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36917: LD_VAR 0 2
36921: PPUSH
36922: LD_VAR 0 5
36926: PPUSH
36927: CALL 37240 0 2
36931: IFTRUE 36942
36933: PUSH
36934: LD_VAR 0 10
36938: PUSH
36939: EMPTY
36940: EQUAL
36941: OR
36942: IFFALSE 36885
// result := [ ] ;
36944: LD_ADDR_VAR 0 6
36948: PUSH
36949: EMPTY
36950: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36951: LD_VAR 0 1
36955: PPUSH
36956: LD_VAR 0 2
36960: PPUSH
36961: LD_VAR 0 3
36965: PPUSH
36966: LD_VAR 0 4
36970: PPUSH
36971: LD_VAR 0 5
36975: PPUSH
36976: CALL_OW 448
36980: IFFALSE 37013
// result := [ chassis , engine , control , weapon ] ;
36982: LD_ADDR_VAR 0 6
36986: PUSH
36987: LD_VAR 0 2
36991: PUSH
36992: LD_VAR 0 3
36996: PUSH
36997: LD_VAR 0 4
37001: PUSH
37002: LD_VAR 0 5
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: ST_TO_ADDR
// end ;
37013: LD_VAR 0 6
37017: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37018: LD_INT 0
37020: PPUSH
// if not chassis or not engine then
37021: LD_VAR 0 1
37025: NOT
37026: IFTRUE 37035
37028: PUSH
37029: LD_VAR 0 2
37033: NOT
37034: OR
37035: IFFALSE 37039
// exit ;
37037: GO 37235
// case engine of engine_solar :
37039: LD_VAR 0 2
37043: PUSH
37044: LD_INT 2
37046: DOUBLE
37047: EQUAL
37048: IFTRUE 37052
37050: GO 37090
37052: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37053: LD_ADDR_VAR 0 3
37057: PUSH
37058: LD_INT 11
37060: PUSH
37061: LD_INT 12
37063: PUSH
37064: LD_INT 13
37066: PUSH
37067: LD_INT 14
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
37088: GO 37219
37090: LD_INT 1
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37160
37098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_INT 11
37106: PUSH
37107: LD_INT 12
37109: PUSH
37110: LD_INT 13
37112: PUSH
37113: LD_INT 14
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 3
37124: PUSH
37125: LD_INT 4
37127: PUSH
37128: LD_INT 5
37130: PUSH
37131: LD_INT 21
37133: PUSH
37134: LD_INT 23
37136: PUSH
37137: LD_INT 22
37139: PUSH
37140: LD_INT 24
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
37158: GO 37219
37160: LD_INT 3
37162: DOUBLE
37163: EQUAL
37164: IFTRUE 37168
37166: GO 37218
37168: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37169: LD_ADDR_VAR 0 3
37173: PUSH
37174: LD_INT 13
37176: PUSH
37177: LD_INT 14
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 3
37185: PUSH
37186: LD_INT 4
37188: PUSH
37189: LD_INT 5
37191: PUSH
37192: LD_INT 21
37194: PUSH
37195: LD_INT 22
37197: PUSH
37198: LD_INT 23
37200: PUSH
37201: LD_INT 24
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
37216: GO 37219
37218: POP
// result := ( chassis in result ) ;
37219: LD_ADDR_VAR 0 3
37223: PUSH
37224: LD_VAR 0 1
37228: PUSH
37229: LD_VAR 0 3
37233: IN
37234: ST_TO_ADDR
// end ;
37235: LD_VAR 0 3
37239: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37240: LD_INT 0
37242: PPUSH
// if not chassis or not weapon then
37243: LD_VAR 0 1
37247: NOT
37248: IFTRUE 37257
37250: PUSH
37251: LD_VAR 0 2
37255: NOT
37256: OR
37257: IFFALSE 37261
// exit ;
37259: GO 38355
// case weapon of us_machine_gun :
37261: LD_VAR 0 2
37265: PUSH
37266: LD_INT 2
37268: DOUBLE
37269: EQUAL
37270: IFTRUE 37274
37272: GO 37304
37274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37275: LD_ADDR_VAR 0 3
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: LD_INT 5
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
37302: GO 38339
37304: LD_INT 3
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37342
37312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37313: LD_ADDR_VAR 0 3
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 4
37329: PUSH
37330: LD_INT 5
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
37340: GO 38339
37342: LD_INT 11
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37380
37350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_INT 1
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: LD_INT 3
37364: PUSH
37365: LD_INT 4
37367: PUSH
37368: LD_INT 5
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
37378: GO 38339
37380: LD_INT 4
37382: DOUBLE
37383: EQUAL
37384: IFTRUE 37388
37386: GO 37414
37388: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37389: LD_ADDR_VAR 0 3
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: LD_INT 4
37402: PUSH
37403: LD_INT 5
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: ST_TO_ADDR
37412: GO 38339
37414: LD_INT 5
37416: DOUBLE
37417: EQUAL
37418: IFTRUE 37422
37420: GO 37448
37422: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: LD_INT 5
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: ST_TO_ADDR
37446: GO 38339
37448: LD_INT 9
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37482
37456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37457: LD_ADDR_VAR 0 3
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: LD_INT 4
37470: PUSH
37471: LD_INT 5
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
37480: GO 38339
37482: LD_INT 7
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 37516
37490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37491: LD_ADDR_VAR 0 3
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: LD_INT 4
37504: PUSH
37505: LD_INT 5
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: ST_TO_ADDR
37514: GO 38339
37516: LD_INT 12
37518: DOUBLE
37519: EQUAL
37520: IFTRUE 37524
37522: GO 37550
37524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37525: LD_ADDR_VAR 0 3
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 3
37535: PUSH
37536: LD_INT 4
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
37548: GO 38339
37550: LD_INT 13
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37584
37558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: LD_INT 4
37572: PUSH
37573: LD_INT 5
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: ST_TO_ADDR
37582: GO 38339
37584: LD_INT 14
37586: DOUBLE
37587: EQUAL
37588: IFTRUE 37592
37590: GO 37610
37592: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37593: LD_ADDR_VAR 0 3
37597: PUSH
37598: LD_INT 4
37600: PUSH
37601: LD_INT 5
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: ST_TO_ADDR
37608: GO 38339
37610: LD_INT 6
37612: DOUBLE
37613: EQUAL
37614: IFTRUE 37618
37616: GO 37636
37618: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37619: LD_ADDR_VAR 0 3
37623: PUSH
37624: LD_INT 4
37626: PUSH
37627: LD_INT 5
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: ST_TO_ADDR
37634: GO 38339
37636: LD_INT 10
37638: DOUBLE
37639: EQUAL
37640: IFTRUE 37644
37642: GO 37662
37644: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37645: LD_ADDR_VAR 0 3
37649: PUSH
37650: LD_INT 4
37652: PUSH
37653: LD_INT 5
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: ST_TO_ADDR
37660: GO 38339
37662: LD_INT 22
37664: DOUBLE
37665: EQUAL
37666: IFTRUE 37670
37668: GO 37696
37670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37671: LD_ADDR_VAR 0 3
37675: PUSH
37676: LD_INT 11
37678: PUSH
37679: LD_INT 12
37681: PUSH
37682: LD_INT 13
37684: PUSH
37685: LD_INT 14
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: ST_TO_ADDR
37694: GO 38339
37696: LD_INT 23
37698: DOUBLE
37699: EQUAL
37700: IFTRUE 37704
37702: GO 37730
37704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37705: LD_ADDR_VAR 0 3
37709: PUSH
37710: LD_INT 11
37712: PUSH
37713: LD_INT 12
37715: PUSH
37716: LD_INT 13
37718: PUSH
37719: LD_INT 14
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
37728: GO 38339
37730: LD_INT 24
37732: DOUBLE
37733: EQUAL
37734: IFTRUE 37738
37736: GO 37764
37738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37739: LD_ADDR_VAR 0 3
37743: PUSH
37744: LD_INT 11
37746: PUSH
37747: LD_INT 12
37749: PUSH
37750: LD_INT 13
37752: PUSH
37753: LD_INT 14
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
37762: GO 38339
37764: LD_INT 30
37766: DOUBLE
37767: EQUAL
37768: IFTRUE 37772
37770: GO 37798
37772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37773: LD_ADDR_VAR 0 3
37777: PUSH
37778: LD_INT 11
37780: PUSH
37781: LD_INT 12
37783: PUSH
37784: LD_INT 13
37786: PUSH
37787: LD_INT 14
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: ST_TO_ADDR
37796: GO 38339
37798: LD_INT 25
37800: DOUBLE
37801: EQUAL
37802: IFTRUE 37806
37804: GO 37824
37806: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37807: LD_ADDR_VAR 0 3
37811: PUSH
37812: LD_INT 13
37814: PUSH
37815: LD_INT 14
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: ST_TO_ADDR
37822: GO 38339
37824: LD_INT 27
37826: DOUBLE
37827: EQUAL
37828: IFTRUE 37832
37830: GO 37850
37832: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37833: LD_ADDR_VAR 0 3
37837: PUSH
37838: LD_INT 13
37840: PUSH
37841: LD_INT 14
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: ST_TO_ADDR
37848: GO 38339
37850: LD_INT 92
37852: DOUBLE
37853: EQUAL
37854: IFTRUE 37858
37856: GO 37884
37858: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37859: LD_ADDR_VAR 0 3
37863: PUSH
37864: LD_INT 11
37866: PUSH
37867: LD_INT 12
37869: PUSH
37870: LD_INT 13
37872: PUSH
37873: LD_INT 14
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: ST_TO_ADDR
37882: GO 38339
37884: LD_INT 28
37886: DOUBLE
37887: EQUAL
37888: IFTRUE 37892
37890: GO 37910
37892: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37893: LD_ADDR_VAR 0 3
37897: PUSH
37898: LD_INT 13
37900: PUSH
37901: LD_INT 14
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: ST_TO_ADDR
37908: GO 38339
37910: LD_INT 29
37912: DOUBLE
37913: EQUAL
37914: IFTRUE 37918
37916: GO 37936
37918: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_INT 13
37926: PUSH
37927: LD_INT 14
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: ST_TO_ADDR
37934: GO 38339
37936: LD_INT 31
37938: DOUBLE
37939: EQUAL
37940: IFTRUE 37944
37942: GO 37962
37944: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37945: LD_ADDR_VAR 0 3
37949: PUSH
37950: LD_INT 13
37952: PUSH
37953: LD_INT 14
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: ST_TO_ADDR
37960: GO 38339
37962: LD_INT 26
37964: DOUBLE
37965: EQUAL
37966: IFTRUE 37970
37968: GO 37988
37970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37971: LD_ADDR_VAR 0 3
37975: PUSH
37976: LD_INT 13
37978: PUSH
37979: LD_INT 14
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: ST_TO_ADDR
37986: GO 38339
37988: LD_INT 42
37990: DOUBLE
37991: EQUAL
37992: IFTRUE 37996
37994: GO 38022
37996: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37997: LD_ADDR_VAR 0 3
38001: PUSH
38002: LD_INT 21
38004: PUSH
38005: LD_INT 22
38007: PUSH
38008: LD_INT 23
38010: PUSH
38011: LD_INT 24
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: ST_TO_ADDR
38020: GO 38339
38022: LD_INT 43
38024: DOUBLE
38025: EQUAL
38026: IFTRUE 38030
38028: GO 38056
38030: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38031: LD_ADDR_VAR 0 3
38035: PUSH
38036: LD_INT 21
38038: PUSH
38039: LD_INT 22
38041: PUSH
38042: LD_INT 23
38044: PUSH
38045: LD_INT 24
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: ST_TO_ADDR
38054: GO 38339
38056: LD_INT 44
38058: DOUBLE
38059: EQUAL
38060: IFTRUE 38064
38062: GO 38090
38064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38065: LD_ADDR_VAR 0 3
38069: PUSH
38070: LD_INT 21
38072: PUSH
38073: LD_INT 22
38075: PUSH
38076: LD_INT 23
38078: PUSH
38079: LD_INT 24
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: ST_TO_ADDR
38088: GO 38339
38090: LD_INT 45
38092: DOUBLE
38093: EQUAL
38094: IFTRUE 38098
38096: GO 38124
38098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38099: LD_ADDR_VAR 0 3
38103: PUSH
38104: LD_INT 21
38106: PUSH
38107: LD_INT 22
38109: PUSH
38110: LD_INT 23
38112: PUSH
38113: LD_INT 24
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: ST_TO_ADDR
38122: GO 38339
38124: LD_INT 49
38126: DOUBLE
38127: EQUAL
38128: IFTRUE 38132
38130: GO 38158
38132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38133: LD_ADDR_VAR 0 3
38137: PUSH
38138: LD_INT 21
38140: PUSH
38141: LD_INT 22
38143: PUSH
38144: LD_INT 23
38146: PUSH
38147: LD_INT 24
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
38156: GO 38339
38158: LD_INT 51
38160: DOUBLE
38161: EQUAL
38162: IFTRUE 38166
38164: GO 38192
38166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38167: LD_ADDR_VAR 0 3
38171: PUSH
38172: LD_INT 21
38174: PUSH
38175: LD_INT 22
38177: PUSH
38178: LD_INT 23
38180: PUSH
38181: LD_INT 24
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
38190: GO 38339
38192: LD_INT 52
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38226
38200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38201: LD_ADDR_VAR 0 3
38205: PUSH
38206: LD_INT 21
38208: PUSH
38209: LD_INT 22
38211: PUSH
38212: LD_INT 23
38214: PUSH
38215: LD_INT 24
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: ST_TO_ADDR
38224: GO 38339
38226: LD_INT 53
38228: DOUBLE
38229: EQUAL
38230: IFTRUE 38234
38232: GO 38252
38234: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38235: LD_ADDR_VAR 0 3
38239: PUSH
38240: LD_INT 23
38242: PUSH
38243: LD_INT 24
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: ST_TO_ADDR
38250: GO 38339
38252: LD_INT 46
38254: DOUBLE
38255: EQUAL
38256: IFTRUE 38260
38258: GO 38278
38260: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38261: LD_ADDR_VAR 0 3
38265: PUSH
38266: LD_INT 23
38268: PUSH
38269: LD_INT 24
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: ST_TO_ADDR
38276: GO 38339
38278: LD_INT 47
38280: DOUBLE
38281: EQUAL
38282: IFTRUE 38286
38284: GO 38304
38286: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
38287: LD_ADDR_VAR 0 3
38291: PUSH
38292: LD_INT 23
38294: PUSH
38295: LD_INT 24
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: ST_TO_ADDR
38302: GO 38339
38304: LD_INT 98
38306: DOUBLE
38307: EQUAL
38308: IFTRUE 38312
38310: GO 38338
38312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_INT 21
38320: PUSH
38321: LD_INT 22
38323: PUSH
38324: LD_INT 23
38326: PUSH
38327: LD_INT 24
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: ST_TO_ADDR
38336: GO 38339
38338: POP
// result := ( chassis in result ) ;
38339: LD_ADDR_VAR 0 3
38343: PUSH
38344: LD_VAR 0 1
38348: PUSH
38349: LD_VAR 0 3
38353: IN
38354: ST_TO_ADDR
// end ;
38355: LD_VAR 0 3
38359: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38360: LD_INT 0
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
// result := array ;
38369: LD_ADDR_VAR 0 5
38373: PUSH
38374: LD_VAR 0 1
38378: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38379: LD_VAR 0 1
38383: NOT
38384: IFTRUE 38393
38386: PUSH
38387: LD_VAR 0 2
38391: NOT
38392: OR
38393: IFTRUE 38402
38395: PUSH
38396: LD_VAR 0 3
38400: NOT
38401: OR
38402: IFTRUE 38416
38404: PUSH
38405: LD_VAR 0 2
38409: PUSH
38410: LD_VAR 0 1
38414: GREATER
38415: OR
38416: IFTRUE 38430
38418: PUSH
38419: LD_VAR 0 3
38423: PUSH
38424: LD_VAR 0 1
38428: GREATER
38429: OR
38430: IFFALSE 38434
// exit ;
38432: GO 38730
// if direction then
38434: LD_VAR 0 4
38438: IFFALSE 38502
// begin d := 1 ;
38440: LD_ADDR_VAR 0 9
38444: PUSH
38445: LD_INT 1
38447: ST_TO_ADDR
// if i_from > i_to then
38448: LD_VAR 0 2
38452: PUSH
38453: LD_VAR 0 3
38457: GREATER
38458: IFFALSE 38484
// length := ( array - i_from ) + i_to else
38460: LD_ADDR_VAR 0 11
38464: PUSH
38465: LD_VAR 0 1
38469: PUSH
38470: LD_VAR 0 2
38474: MINUS
38475: PUSH
38476: LD_VAR 0 3
38480: PLUS
38481: ST_TO_ADDR
38482: GO 38500
// length := i_to - i_from ;
38484: LD_ADDR_VAR 0 11
38488: PUSH
38489: LD_VAR 0 3
38493: PUSH
38494: LD_VAR 0 2
38498: MINUS
38499: ST_TO_ADDR
// end else
38500: GO 38563
// begin d := - 1 ;
38502: LD_ADDR_VAR 0 9
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: ST_TO_ADDR
// if i_from > i_to then
38511: LD_VAR 0 2
38515: PUSH
38516: LD_VAR 0 3
38520: GREATER
38521: IFFALSE 38541
// length := i_from - i_to else
38523: LD_ADDR_VAR 0 11
38527: PUSH
38528: LD_VAR 0 2
38532: PUSH
38533: LD_VAR 0 3
38537: MINUS
38538: ST_TO_ADDR
38539: GO 38563
// length := ( array - i_to ) + i_from ;
38541: LD_ADDR_VAR 0 11
38545: PUSH
38546: LD_VAR 0 1
38550: PUSH
38551: LD_VAR 0 3
38555: MINUS
38556: PUSH
38557: LD_VAR 0 2
38561: PLUS
38562: ST_TO_ADDR
// end ; if not length then
38563: LD_VAR 0 11
38567: NOT
38568: IFFALSE 38572
// exit ;
38570: GO 38730
// tmp := array ;
38572: LD_ADDR_VAR 0 10
38576: PUSH
38577: LD_VAR 0 1
38581: ST_TO_ADDR
// for i = 1 to length do
38582: LD_ADDR_VAR 0 6
38586: PUSH
38587: DOUBLE
38588: LD_INT 1
38590: DEC
38591: ST_TO_ADDR
38592: LD_VAR 0 11
38596: PUSH
38597: FOR_TO
38598: IFFALSE 38718
// begin for j = 1 to array do
38600: LD_ADDR_VAR 0 7
38604: PUSH
38605: DOUBLE
38606: LD_INT 1
38608: DEC
38609: ST_TO_ADDR
38610: LD_VAR 0 1
38614: PUSH
38615: FOR_TO
38616: IFFALSE 38704
// begin k := j + d ;
38618: LD_ADDR_VAR 0 8
38622: PUSH
38623: LD_VAR 0 7
38627: PUSH
38628: LD_VAR 0 9
38632: PLUS
38633: ST_TO_ADDR
// if k > array then
38634: LD_VAR 0 8
38638: PUSH
38639: LD_VAR 0 1
38643: GREATER
38644: IFFALSE 38654
// k := 1 ;
38646: LD_ADDR_VAR 0 8
38650: PUSH
38651: LD_INT 1
38653: ST_TO_ADDR
// if not k then
38654: LD_VAR 0 8
38658: NOT
38659: IFFALSE 38671
// k := array ;
38661: LD_ADDR_VAR 0 8
38665: PUSH
38666: LD_VAR 0 1
38670: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38671: LD_ADDR_VAR 0 10
38675: PUSH
38676: LD_VAR 0 10
38680: PPUSH
38681: LD_VAR 0 8
38685: PPUSH
38686: LD_VAR 0 1
38690: PUSH
38691: LD_VAR 0 7
38695: ARRAY
38696: PPUSH
38697: CALL_OW 1
38701: ST_TO_ADDR
// end ;
38702: GO 38615
38704: POP
38705: POP
// array := tmp ;
38706: LD_ADDR_VAR 0 1
38710: PUSH
38711: LD_VAR 0 10
38715: ST_TO_ADDR
// end ;
38716: GO 38597
38718: POP
38719: POP
// result := array ;
38720: LD_ADDR_VAR 0 5
38724: PUSH
38725: LD_VAR 0 1
38729: ST_TO_ADDR
// end ;
38730: LD_VAR 0 5
38734: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38735: LD_INT 0
38737: PPUSH
38738: PPUSH
// result := 0 ;
38739: LD_ADDR_VAR 0 3
38743: PUSH
38744: LD_INT 0
38746: ST_TO_ADDR
// if not array or not value in array then
38747: LD_VAR 0 1
38751: NOT
38752: IFTRUE 38767
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_VAR 0 1
38764: IN
38765: NOT
38766: OR
38767: IFFALSE 38771
// exit ;
38769: GO 38825
// for i = 1 to array do
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: DOUBLE
38777: LD_INT 1
38779: DEC
38780: ST_TO_ADDR
38781: LD_VAR 0 1
38785: PUSH
38786: FOR_TO
38787: IFFALSE 38823
// if value = array [ i ] then
38789: LD_VAR 0 2
38793: PUSH
38794: LD_VAR 0 1
38798: PUSH
38799: LD_VAR 0 4
38803: ARRAY
38804: EQUAL
38805: IFFALSE 38821
// begin result := i ;
38807: LD_ADDR_VAR 0 3
38811: PUSH
38812: LD_VAR 0 4
38816: ST_TO_ADDR
// exit ;
38817: POP
38818: POP
38819: GO 38825
// end ;
38821: GO 38786
38823: POP
38824: POP
// end ;
38825: LD_VAR 0 3
38829: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38830: LD_INT 0
38832: PPUSH
// vc_chassis := chassis ;
38833: LD_ADDR_OWVAR 37
38837: PUSH
38838: LD_VAR 0 1
38842: ST_TO_ADDR
// vc_engine := engine ;
38843: LD_ADDR_OWVAR 39
38847: PUSH
38848: LD_VAR 0 2
38852: ST_TO_ADDR
// vc_control := control ;
38853: LD_ADDR_OWVAR 38
38857: PUSH
38858: LD_VAR 0 3
38862: ST_TO_ADDR
// vc_weapon := weapon ;
38863: LD_ADDR_OWVAR 40
38867: PUSH
38868: LD_VAR 0 4
38872: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38873: LD_ADDR_OWVAR 41
38877: PUSH
38878: LD_VAR 0 5
38882: ST_TO_ADDR
// end ;
38883: LD_VAR 0 6
38887: RET
// export function WantPlant ( unit ) ; var task ; begin
38888: LD_INT 0
38890: PPUSH
38891: PPUSH
// result := false ;
38892: LD_ADDR_VAR 0 2
38896: PUSH
38897: LD_INT 0
38899: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38900: LD_ADDR_VAR 0 3
38904: PUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 437
38914: ST_TO_ADDR
// if task then
38915: LD_VAR 0 3
38919: IFFALSE 38947
// if task [ 1 ] [ 1 ] = p then
38921: LD_VAR 0 3
38925: PUSH
38926: LD_INT 1
38928: ARRAY
38929: PUSH
38930: LD_INT 1
38932: ARRAY
38933: PUSH
38934: LD_STRING p
38936: EQUAL
38937: IFFALSE 38947
// result := true ;
38939: LD_ADDR_VAR 0 2
38943: PUSH
38944: LD_INT 1
38946: ST_TO_ADDR
// end ;
38947: LD_VAR 0 2
38951: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38952: LD_INT 0
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
// if pos < 1 then
38958: LD_VAR 0 2
38962: PUSH
38963: LD_INT 1
38965: LESS
38966: IFFALSE 38970
// exit ;
38968: GO 39273
// if pos = 1 then
38970: LD_VAR 0 2
38974: PUSH
38975: LD_INT 1
38977: EQUAL
38978: IFFALSE 39011
// result := Replace ( arr , pos [ 1 ] , value ) else
38980: LD_ADDR_VAR 0 4
38984: PUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: LD_VAR 0 2
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: PPUSH
38999: LD_VAR 0 3
39003: PPUSH
39004: CALL_OW 1
39008: ST_TO_ADDR
39009: GO 39273
// begin tmp := arr ;
39011: LD_ADDR_VAR 0 6
39015: PUSH
39016: LD_VAR 0 1
39020: ST_TO_ADDR
// s_arr := [ tmp ] ;
39021: LD_ADDR_VAR 0 7
39025: PUSH
39026: LD_VAR 0 6
39030: PUSH
39031: EMPTY
39032: LIST
39033: ST_TO_ADDR
// for i = 1 to pos - 1 do
39034: LD_ADDR_VAR 0 5
39038: PUSH
39039: DOUBLE
39040: LD_INT 1
39042: DEC
39043: ST_TO_ADDR
39044: LD_VAR 0 2
39048: PUSH
39049: LD_INT 1
39051: MINUS
39052: PUSH
39053: FOR_TO
39054: IFFALSE 39099
// begin tmp := tmp [ pos [ i ] ] ;
39056: LD_ADDR_VAR 0 6
39060: PUSH
39061: LD_VAR 0 6
39065: PUSH
39066: LD_VAR 0 2
39070: PUSH
39071: LD_VAR 0 5
39075: ARRAY
39076: ARRAY
39077: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39078: LD_ADDR_VAR 0 7
39082: PUSH
39083: LD_VAR 0 7
39087: PUSH
39088: LD_VAR 0 6
39092: PUSH
39093: EMPTY
39094: LIST
39095: ADD
39096: ST_TO_ADDR
// end ;
39097: GO 39053
39099: POP
39100: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39101: LD_ADDR_VAR 0 6
39105: PUSH
39106: LD_VAR 0 6
39110: PPUSH
39111: LD_VAR 0 2
39115: PUSH
39116: LD_VAR 0 2
39120: ARRAY
39121: PPUSH
39122: LD_VAR 0 3
39126: PPUSH
39127: CALL_OW 1
39131: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39132: LD_ADDR_VAR 0 7
39136: PUSH
39137: LD_VAR 0 7
39141: PPUSH
39142: LD_VAR 0 7
39146: PPUSH
39147: LD_VAR 0 6
39151: PPUSH
39152: CALL_OW 1
39156: ST_TO_ADDR
// for i = s_arr downto 2 do
39157: LD_ADDR_VAR 0 5
39161: PUSH
39162: DOUBLE
39163: LD_VAR 0 7
39167: INC
39168: ST_TO_ADDR
39169: LD_INT 2
39171: PUSH
39172: FOR_DOWNTO
39173: IFFALSE 39257
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39175: LD_ADDR_VAR 0 6
39179: PUSH
39180: LD_VAR 0 7
39184: PUSH
39185: LD_VAR 0 5
39189: PUSH
39190: LD_INT 1
39192: MINUS
39193: ARRAY
39194: PPUSH
39195: LD_VAR 0 2
39199: PUSH
39200: LD_VAR 0 5
39204: PUSH
39205: LD_INT 1
39207: MINUS
39208: ARRAY
39209: PPUSH
39210: LD_VAR 0 7
39214: PUSH
39215: LD_VAR 0 5
39219: ARRAY
39220: PPUSH
39221: CALL_OW 1
39225: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39226: LD_ADDR_VAR 0 7
39230: PUSH
39231: LD_VAR 0 7
39235: PPUSH
39236: LD_VAR 0 5
39240: PUSH
39241: LD_INT 1
39243: MINUS
39244: PPUSH
39245: LD_VAR 0 6
39249: PPUSH
39250: CALL_OW 1
39254: ST_TO_ADDR
// end ;
39255: GO 39172
39257: POP
39258: POP
// result := s_arr [ 1 ] ;
39259: LD_ADDR_VAR 0 4
39263: PUSH
39264: LD_VAR 0 7
39268: PUSH
39269: LD_INT 1
39271: ARRAY
39272: ST_TO_ADDR
// end ; end ;
39273: LD_VAR 0 4
39277: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39278: LD_INT 0
39280: PPUSH
39281: PPUSH
// if not list then
39282: LD_VAR 0 1
39286: NOT
39287: IFFALSE 39291
// exit ;
39289: GO 39382
// i := list [ pos1 ] ;
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: LD_VAR 0 1
39300: PUSH
39301: LD_VAR 0 2
39305: ARRAY
39306: ST_TO_ADDR
// if not i then
39307: LD_VAR 0 5
39311: NOT
39312: IFFALSE 39316
// exit ;
39314: GO 39382
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39316: LD_ADDR_VAR 0 1
39320: PUSH
39321: LD_VAR 0 1
39325: PPUSH
39326: LD_VAR 0 2
39330: PPUSH
39331: LD_VAR 0 1
39335: PUSH
39336: LD_VAR 0 3
39340: ARRAY
39341: PPUSH
39342: CALL_OW 1
39346: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39347: LD_ADDR_VAR 0 1
39351: PUSH
39352: LD_VAR 0 1
39356: PPUSH
39357: LD_VAR 0 3
39361: PPUSH
39362: LD_VAR 0 5
39366: PPUSH
39367: CALL_OW 1
39371: ST_TO_ADDR
// result := list ;
39372: LD_ADDR_VAR 0 4
39376: PUSH
39377: LD_VAR 0 1
39381: ST_TO_ADDR
// end ;
39382: LD_VAR 0 4
39386: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39387: LD_INT 0
39389: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39390: LD_ADDR_VAR 0 5
39394: PUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 250
39404: PPUSH
39405: LD_VAR 0 1
39409: PPUSH
39410: CALL_OW 251
39414: PPUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: LD_VAR 0 3
39424: PPUSH
39425: LD_VAR 0 4
39429: PPUSH
39430: CALL 39812 0 5
39434: ST_TO_ADDR
// end ;
39435: LD_VAR 0 5
39439: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39440: LD_INT 0
39442: PPUSH
39443: PPUSH
39444: PPUSH
39445: PPUSH
// if not list or not unit then
39446: LD_VAR 0 2
39450: NOT
39451: IFTRUE 39460
39453: PUSH
39454: LD_VAR 0 1
39458: NOT
39459: OR
39460: IFFALSE 39464
// exit ;
39462: GO 39807
// result := [ ] ;
39464: LD_ADDR_VAR 0 5
39468: PUSH
39469: EMPTY
39470: ST_TO_ADDR
// for i in list do
39471: LD_ADDR_VAR 0 6
39475: PUSH
39476: LD_VAR 0 2
39480: PUSH
39481: FOR_IN
39482: IFFALSE 39700
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39484: LD_ADDR_VAR 0 8
39488: PUSH
39489: LD_VAR 0 1
39493: PPUSH
39494: LD_VAR 0 6
39498: PUSH
39499: LD_INT 1
39501: ARRAY
39502: PPUSH
39503: LD_VAR 0 6
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: PPUSH
39512: CALL_OW 297
39516: ST_TO_ADDR
// if not Count ( result ) then
39517: LD_VAR 0 5
39521: PPUSH
39522: CALL 36034 0 1
39526: NOT
39527: IFFALSE 39560
// begin result := Join ( result , [ i , tmp ] ) ;
39529: LD_ADDR_VAR 0 5
39533: PUSH
39534: LD_VAR 0 5
39538: PPUSH
39539: LD_VAR 0 6
39543: PUSH
39544: LD_VAR 0 8
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PPUSH
39553: CALL 72010 0 2
39557: ST_TO_ADDR
// continue ;
39558: GO 39481
// end ; if result [ result ] [ 2 ] <= tmp then
39560: LD_VAR 0 5
39564: PUSH
39565: LD_VAR 0 5
39569: ARRAY
39570: PUSH
39571: LD_INT 2
39573: ARRAY
39574: PUSH
39575: LD_VAR 0 8
39579: LESSEQUAL
39580: IFFALSE 39613
// result := Join ( result , [ i , tmp ] ) else
39582: LD_ADDR_VAR 0 5
39586: PUSH
39587: LD_VAR 0 5
39591: PPUSH
39592: LD_VAR 0 6
39596: PUSH
39597: LD_VAR 0 8
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL 72010 0 2
39610: ST_TO_ADDR
39611: GO 39698
// begin for j := 1 to Count ( result ) do
39613: LD_ADDR_VAR 0 7
39617: PUSH
39618: DOUBLE
39619: LD_INT 1
39621: DEC
39622: ST_TO_ADDR
39623: LD_VAR 0 5
39627: PPUSH
39628: CALL 36034 0 1
39632: PUSH
39633: FOR_TO
39634: IFFALSE 39696
// begin if tmp < result [ j ] [ 2 ] then
39636: LD_VAR 0 8
39640: PUSH
39641: LD_VAR 0 5
39645: PUSH
39646: LD_VAR 0 7
39650: ARRAY
39651: PUSH
39652: LD_INT 2
39654: ARRAY
39655: LESS
39656: IFFALSE 39694
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39658: LD_ADDR_VAR 0 5
39662: PUSH
39663: LD_VAR 0 5
39667: PPUSH
39668: LD_VAR 0 7
39672: PPUSH
39673: LD_VAR 0 6
39677: PUSH
39678: LD_VAR 0 8
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PPUSH
39687: CALL_OW 2
39691: ST_TO_ADDR
// break ;
39692: GO 39696
// end ; end ;
39694: GO 39633
39696: POP
39697: POP
// end ; end ;
39698: GO 39481
39700: POP
39701: POP
// if result and not asc then
39702: LD_VAR 0 5
39706: IFFALSE 39715
39708: PUSH
39709: LD_VAR 0 3
39713: NOT
39714: AND
39715: IFFALSE 39732
// result := ReverseArray ( result ) ;
39717: LD_ADDR_VAR 0 5
39721: PUSH
39722: LD_VAR 0 5
39726: PPUSH
39727: CALL 67090 0 1
39731: ST_TO_ADDR
// tmp := [ ] ;
39732: LD_ADDR_VAR 0 8
39736: PUSH
39737: EMPTY
39738: ST_TO_ADDR
// if mode then
39739: LD_VAR 0 4
39743: IFFALSE 39807
// begin for i := 1 to result do
39745: LD_ADDR_VAR 0 6
39749: PUSH
39750: DOUBLE
39751: LD_INT 1
39753: DEC
39754: ST_TO_ADDR
39755: LD_VAR 0 5
39759: PUSH
39760: FOR_TO
39761: IFFALSE 39795
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39763: LD_ADDR_VAR 0 8
39767: PUSH
39768: LD_VAR 0 8
39772: PPUSH
39773: LD_VAR 0 5
39777: PUSH
39778: LD_VAR 0 6
39782: ARRAY
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: PPUSH
39788: CALL 72010 0 2
39792: ST_TO_ADDR
39793: GO 39760
39795: POP
39796: POP
// result := tmp ;
39797: LD_ADDR_VAR 0 5
39801: PUSH
39802: LD_VAR 0 8
39806: ST_TO_ADDR
// end ; end ;
39807: LD_VAR 0 5
39811: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39812: LD_INT 0
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
// if not list then
39818: LD_VAR 0 3
39822: NOT
39823: IFFALSE 39827
// exit ;
39825: GO 40217
// result := [ ] ;
39827: LD_ADDR_VAR 0 6
39831: PUSH
39832: EMPTY
39833: ST_TO_ADDR
// for i in list do
39834: LD_ADDR_VAR 0 7
39838: PUSH
39839: LD_VAR 0 3
39843: PUSH
39844: FOR_IN
39845: IFFALSE 40047
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39847: LD_ADDR_VAR 0 9
39851: PUSH
39852: LD_VAR 0 7
39856: PPUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: LD_VAR 0 2
39866: PPUSH
39867: CALL_OW 297
39871: ST_TO_ADDR
// if not result then
39872: LD_VAR 0 6
39876: NOT
39877: IFFALSE 39903
// result := [ [ i , tmp ] ] else
39879: LD_ADDR_VAR 0 6
39883: PUSH
39884: LD_VAR 0 7
39888: PUSH
39889: LD_VAR 0 9
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: ST_TO_ADDR
39901: GO 40045
// begin if result [ result ] [ 2 ] <= tmp then
39903: LD_VAR 0 6
39907: PUSH
39908: LD_VAR 0 6
39912: ARRAY
39913: PUSH
39914: LD_INT 2
39916: ARRAY
39917: PUSH
39918: LD_VAR 0 9
39922: LESSEQUAL
39923: IFFALSE 39965
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39925: LD_ADDR_VAR 0 6
39929: PUSH
39930: LD_VAR 0 6
39934: PPUSH
39935: LD_VAR 0 6
39939: PUSH
39940: LD_INT 1
39942: PLUS
39943: PPUSH
39944: LD_VAR 0 7
39948: PUSH
39949: LD_VAR 0 9
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PPUSH
39958: CALL_OW 2
39962: ST_TO_ADDR
39963: GO 40045
// for j := 1 to result do
39965: LD_ADDR_VAR 0 8
39969: PUSH
39970: DOUBLE
39971: LD_INT 1
39973: DEC
39974: ST_TO_ADDR
39975: LD_VAR 0 6
39979: PUSH
39980: FOR_TO
39981: IFFALSE 40043
// begin if tmp < result [ j ] [ 2 ] then
39983: LD_VAR 0 9
39987: PUSH
39988: LD_VAR 0 6
39992: PUSH
39993: LD_VAR 0 8
39997: ARRAY
39998: PUSH
39999: LD_INT 2
40001: ARRAY
40002: LESS
40003: IFFALSE 40041
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40005: LD_ADDR_VAR 0 6
40009: PUSH
40010: LD_VAR 0 6
40014: PPUSH
40015: LD_VAR 0 8
40019: PPUSH
40020: LD_VAR 0 7
40024: PUSH
40025: LD_VAR 0 9
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PPUSH
40034: CALL_OW 2
40038: ST_TO_ADDR
// break ;
40039: GO 40043
// end ; end ;
40041: GO 39980
40043: POP
40044: POP
// end ; end ;
40045: GO 39844
40047: POP
40048: POP
// if result and not asc then
40049: LD_VAR 0 6
40053: IFFALSE 40062
40055: PUSH
40056: LD_VAR 0 4
40060: NOT
40061: AND
40062: IFFALSE 40137
// begin tmp := result ;
40064: LD_ADDR_VAR 0 9
40068: PUSH
40069: LD_VAR 0 6
40073: ST_TO_ADDR
// for i = tmp downto 1 do
40074: LD_ADDR_VAR 0 7
40078: PUSH
40079: DOUBLE
40080: LD_VAR 0 9
40084: INC
40085: ST_TO_ADDR
40086: LD_INT 1
40088: PUSH
40089: FOR_DOWNTO
40090: IFFALSE 40135
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40092: LD_ADDR_VAR 0 6
40096: PUSH
40097: LD_VAR 0 6
40101: PPUSH
40102: LD_VAR 0 9
40106: PUSH
40107: LD_VAR 0 7
40111: MINUS
40112: PUSH
40113: LD_INT 1
40115: PLUS
40116: PPUSH
40117: LD_VAR 0 9
40121: PUSH
40122: LD_VAR 0 7
40126: ARRAY
40127: PPUSH
40128: CALL_OW 1
40132: ST_TO_ADDR
40133: GO 40089
40135: POP
40136: POP
// end ; tmp := [ ] ;
40137: LD_ADDR_VAR 0 9
40141: PUSH
40142: EMPTY
40143: ST_TO_ADDR
// if mode then
40144: LD_VAR 0 5
40148: IFFALSE 40217
// begin for i = 1 to result do
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: DOUBLE
40156: LD_INT 1
40158: DEC
40159: ST_TO_ADDR
40160: LD_VAR 0 6
40164: PUSH
40165: FOR_TO
40166: IFFALSE 40205
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40168: LD_ADDR_VAR 0 9
40172: PUSH
40173: LD_VAR 0 9
40177: PPUSH
40178: LD_VAR 0 7
40182: PPUSH
40183: LD_VAR 0 6
40187: PUSH
40188: LD_VAR 0 7
40192: ARRAY
40193: PUSH
40194: LD_INT 1
40196: ARRAY
40197: PPUSH
40198: CALL_OW 1
40202: ST_TO_ADDR
40203: GO 40165
40205: POP
40206: POP
// result := tmp ;
40207: LD_ADDR_VAR 0 6
40211: PUSH
40212: LD_VAR 0 9
40216: ST_TO_ADDR
// end ; end ;
40217: LD_VAR 0 6
40221: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40222: LD_INT 0
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
40229: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40230: LD_ADDR_VAR 0 5
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: ST_TO_ADDR
// if not x or not y then
40252: LD_VAR 0 2
40256: NOT
40257: IFTRUE 40266
40259: PUSH
40260: LD_VAR 0 3
40264: NOT
40265: OR
40266: IFFALSE 40270
// exit ;
40268: GO 41926
// if not range then
40270: LD_VAR 0 4
40274: NOT
40275: IFFALSE 40285
// range := 10 ;
40277: LD_ADDR_VAR 0 4
40281: PUSH
40282: LD_INT 10
40284: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40285: LD_ADDR_VAR 0 8
40289: PUSH
40290: LD_INT 81
40292: PUSH
40293: LD_VAR 0 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 92
40304: PUSH
40305: LD_VAR 0 2
40309: PUSH
40310: LD_VAR 0 3
40314: PUSH
40315: LD_VAR 0 4
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: LD_INT 21
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: PPUSH
40348: CALL_OW 69
40352: ST_TO_ADDR
// if not tmp then
40353: LD_VAR 0 8
40357: NOT
40358: IFFALSE 40362
// exit ;
40360: GO 41926
// for i in tmp do
40362: LD_ADDR_VAR 0 6
40366: PUSH
40367: LD_VAR 0 8
40371: PUSH
40372: FOR_IN
40373: IFFALSE 41901
// begin points := [ 0 , 0 , 0 ] ;
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: ST_TO_ADDR
// bpoints := 1 ;
40394: LD_ADDR_VAR 0 10
40398: PUSH
40399: LD_INT 1
40401: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40402: LD_VAR 0 6
40406: PPUSH
40407: CALL_OW 247
40411: PUSH
40412: LD_INT 1
40414: DOUBLE
40415: EQUAL
40416: IFTRUE 40420
40418: GO 41002
40420: POP
// begin if GetClass ( i ) = 1 then
40421: LD_VAR 0 6
40425: PPUSH
40426: CALL_OW 257
40430: PUSH
40431: LD_INT 1
40433: EQUAL
40434: IFFALSE 40455
// points := [ 10 , 5 , 3 ] ;
40436: LD_ADDR_VAR 0 9
40440: PUSH
40441: LD_INT 10
40443: PUSH
40444: LD_INT 5
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40455: LD_VAR 0 6
40459: PPUSH
40460: CALL_OW 257
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 4
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: IN
40479: IFFALSE 40500
// points := [ 3 , 2 , 1 ] ;
40481: LD_ADDR_VAR 0 9
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: LIST
40499: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40500: LD_VAR 0 6
40504: PPUSH
40505: CALL_OW 257
40509: PUSH
40510: LD_INT 5
40512: EQUAL
40513: IFFALSE 40534
// points := [ 130 , 5 , 2 ] ;
40515: LD_ADDR_VAR 0 9
40519: PUSH
40520: LD_INT 130
40522: PUSH
40523: LD_INT 5
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40534: LD_VAR 0 6
40538: PPUSH
40539: CALL_OW 257
40543: PUSH
40544: LD_INT 8
40546: EQUAL
40547: IFFALSE 40568
// points := [ 35 , 35 , 30 ] ;
40549: LD_ADDR_VAR 0 9
40553: PUSH
40554: LD_INT 35
40556: PUSH
40557: LD_INT 35
40559: PUSH
40560: LD_INT 30
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40568: LD_VAR 0 6
40572: PPUSH
40573: CALL_OW 257
40577: PUSH
40578: LD_INT 9
40580: EQUAL
40581: IFFALSE 40602
// points := [ 20 , 55 , 40 ] ;
40583: LD_ADDR_VAR 0 9
40587: PUSH
40588: LD_INT 20
40590: PUSH
40591: LD_INT 55
40593: PUSH
40594: LD_INT 40
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40602: LD_VAR 0 6
40606: PPUSH
40607: CALL_OW 257
40611: PUSH
40612: LD_INT 12
40614: PUSH
40615: LD_INT 16
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: IN
40622: IFFALSE 40643
// points := [ 5 , 3 , 2 ] ;
40624: LD_ADDR_VAR 0 9
40628: PUSH
40629: LD_INT 5
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40643: LD_VAR 0 6
40647: PPUSH
40648: CALL_OW 257
40652: PUSH
40653: LD_INT 17
40655: EQUAL
40656: IFFALSE 40677
// points := [ 100 , 50 , 75 ] ;
40658: LD_ADDR_VAR 0 9
40662: PUSH
40663: LD_INT 100
40665: PUSH
40666: LD_INT 50
40668: PUSH
40669: LD_INT 75
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40677: LD_VAR 0 6
40681: PPUSH
40682: CALL_OW 257
40686: PUSH
40687: LD_INT 15
40689: EQUAL
40690: IFFALSE 40711
// points := [ 10 , 5 , 3 ] ;
40692: LD_ADDR_VAR 0 9
40696: PUSH
40697: LD_INT 10
40699: PUSH
40700: LD_INT 5
40702: PUSH
40703: LD_INT 3
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40711: LD_VAR 0 6
40715: PPUSH
40716: CALL_OW 257
40720: PUSH
40721: LD_INT 14
40723: EQUAL
40724: IFFALSE 40745
// points := [ 10 , 0 , 0 ] ;
40726: LD_ADDR_VAR 0 9
40730: PUSH
40731: LD_INT 10
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40745: LD_VAR 0 6
40749: PPUSH
40750: CALL_OW 257
40754: PUSH
40755: LD_INT 11
40757: EQUAL
40758: IFFALSE 40779
// points := [ 30 , 10 , 5 ] ;
40760: LD_ADDR_VAR 0 9
40764: PUSH
40765: LD_INT 30
40767: PUSH
40768: LD_INT 10
40770: PUSH
40771: LD_INT 5
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40779: LD_VAR 0 1
40783: PPUSH
40784: LD_INT 5
40786: PPUSH
40787: CALL_OW 321
40791: PUSH
40792: LD_INT 2
40794: EQUAL
40795: IFFALSE 40812
// bpoints := bpoints * 1.8 ;
40797: LD_ADDR_VAR 0 10
40801: PUSH
40802: LD_VAR 0 10
40806: PUSH
40807: LD_REAL  1.80000000000000E+0000
40810: MUL
40811: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40812: LD_VAR 0 6
40816: PPUSH
40817: CALL_OW 257
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 3
40830: PUSH
40831: LD_INT 4
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: IN
40840: IFFALSE 40860
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: LD_INT 51
40850: PPUSH
40851: CALL_OW 321
40855: PUSH
40856: LD_INT 2
40858: EQUAL
40859: AND
40860: IFFALSE 40877
// bpoints := bpoints * 1.2 ;
40862: LD_ADDR_VAR 0 10
40866: PUSH
40867: LD_VAR 0 10
40871: PUSH
40872: LD_REAL  1.20000000000000E+0000
40875: MUL
40876: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40877: LD_VAR 0 6
40881: PPUSH
40882: CALL_OW 257
40886: PUSH
40887: LD_INT 5
40889: PUSH
40890: LD_INT 7
40892: PUSH
40893: LD_INT 9
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: LIST
40900: IN
40901: IFFALSE 40921
40903: PUSH
40904: LD_VAR 0 1
40908: PPUSH
40909: LD_INT 52
40911: PPUSH
40912: CALL_OW 321
40916: PUSH
40917: LD_INT 2
40919: EQUAL
40920: AND
40921: IFFALSE 40938
// bpoints := bpoints * 1.5 ;
40923: LD_ADDR_VAR 0 10
40927: PUSH
40928: LD_VAR 0 10
40932: PUSH
40933: LD_REAL  1.50000000000000E+0000
40936: MUL
40937: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40938: LD_VAR 0 1
40942: PPUSH
40943: LD_INT 66
40945: PPUSH
40946: CALL_OW 321
40950: PUSH
40951: LD_INT 2
40953: EQUAL
40954: IFFALSE 40971
// bpoints := bpoints * 1.1 ;
40956: LD_ADDR_VAR 0 10
40960: PUSH
40961: LD_VAR 0 10
40965: PUSH
40966: LD_REAL  1.10000000000000E+0000
40969: MUL
40970: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40971: LD_ADDR_VAR 0 10
40975: PUSH
40976: LD_VAR 0 10
40980: PUSH
40981: LD_VAR 0 6
40985: PPUSH
40986: LD_INT 1
40988: PPUSH
40989: CALL_OW 259
40993: PUSH
40994: LD_REAL  1.15000000000000E+0000
40997: MUL
40998: MUL
40999: ST_TO_ADDR
// end ; unit_vehicle :
41000: GO 41830
41002: LD_INT 2
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41818
41010: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41011: LD_VAR 0 6
41015: PPUSH
41016: CALL_OW 264
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: LD_INT 42
41026: PUSH
41027: LD_INT 24
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: LIST
41034: IN
41035: IFFALSE 41056
// points := [ 25 , 5 , 3 ] ;
41037: LD_ADDR_VAR 0 9
41041: PUSH
41042: LD_INT 25
41044: PUSH
41045: LD_INT 5
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41056: LD_VAR 0 6
41060: PPUSH
41061: CALL_OW 264
41065: PUSH
41066: LD_INT 4
41068: PUSH
41069: LD_INT 43
41071: PUSH
41072: LD_INT 25
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: LIST
41079: IN
41080: IFFALSE 41101
// points := [ 40 , 15 , 5 ] ;
41082: LD_ADDR_VAR 0 9
41086: PUSH
41087: LD_INT 40
41089: PUSH
41090: LD_INT 15
41092: PUSH
41093: LD_INT 5
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41101: LD_VAR 0 6
41105: PPUSH
41106: CALL_OW 264
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 23
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: IN
41121: IFFALSE 41142
// points := [ 7 , 25 , 8 ] ;
41123: LD_ADDR_VAR 0 9
41127: PUSH
41128: LD_INT 7
41130: PUSH
41131: LD_INT 25
41133: PUSH
41134: LD_INT 8
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: LIST
41141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41142: LD_VAR 0 6
41146: PPUSH
41147: CALL_OW 264
41151: PUSH
41152: LD_INT 5
41154: PUSH
41155: LD_INT 27
41157: PUSH
41158: LD_INT 44
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: LIST
41165: IN
41166: IFFALSE 41187
// points := [ 14 , 50 , 16 ] ;
41168: LD_ADDR_VAR 0 9
41172: PUSH
41173: LD_INT 14
41175: PUSH
41176: LD_INT 50
41178: PUSH
41179: LD_INT 16
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41187: LD_VAR 0 6
41191: PPUSH
41192: CALL_OW 264
41196: PUSH
41197: LD_INT 6
41199: PUSH
41200: LD_INT 46
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: IN
41207: IFFALSE 41228
// points := [ 32 , 120 , 70 ] ;
41209: LD_ADDR_VAR 0 9
41213: PUSH
41214: LD_INT 32
41216: PUSH
41217: LD_INT 120
41219: PUSH
41220: LD_INT 70
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41228: LD_VAR 0 6
41232: PPUSH
41233: CALL_OW 264
41237: PUSH
41238: LD_INT 7
41240: PUSH
41241: LD_INT 28
41243: PUSH
41244: LD_INT 45
41246: PUSH
41247: LD_INT 92
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: IN
41256: IFFALSE 41277
// points := [ 35 , 20 , 45 ] ;
41258: LD_ADDR_VAR 0 9
41262: PUSH
41263: LD_INT 35
41265: PUSH
41266: LD_INT 20
41268: PUSH
41269: LD_INT 45
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: LIST
41276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41277: LD_VAR 0 6
41281: PPUSH
41282: CALL_OW 264
41286: PUSH
41287: LD_INT 47
41289: PUSH
41290: EMPTY
41291: LIST
41292: IN
41293: IFFALSE 41314
// points := [ 67 , 45 , 75 ] ;
41295: LD_ADDR_VAR 0 9
41299: PUSH
41300: LD_INT 67
41302: PUSH
41303: LD_INT 45
41305: PUSH
41306: LD_INT 75
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41314: LD_VAR 0 6
41318: PPUSH
41319: CALL_OW 264
41323: PUSH
41324: LD_INT 26
41326: PUSH
41327: EMPTY
41328: LIST
41329: IN
41330: IFFALSE 41351
// points := [ 120 , 30 , 80 ] ;
41332: LD_ADDR_VAR 0 9
41336: PUSH
41337: LD_INT 120
41339: PUSH
41340: LD_INT 30
41342: PUSH
41343: LD_INT 80
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41351: LD_VAR 0 6
41355: PPUSH
41356: CALL_OW 264
41360: PUSH
41361: LD_INT 22
41363: PUSH
41364: EMPTY
41365: LIST
41366: IN
41367: IFFALSE 41388
// points := [ 40 , 1 , 1 ] ;
41369: LD_ADDR_VAR 0 9
41373: PUSH
41374: LD_INT 40
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41388: LD_VAR 0 6
41392: PPUSH
41393: CALL_OW 264
41397: PUSH
41398: LD_INT 29
41400: PUSH
41401: EMPTY
41402: LIST
41403: IN
41404: IFFALSE 41425
// points := [ 70 , 200 , 400 ] ;
41406: LD_ADDR_VAR 0 9
41410: PUSH
41411: LD_INT 70
41413: PUSH
41414: LD_INT 200
41416: PUSH
41417: LD_INT 400
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41425: LD_VAR 0 6
41429: PPUSH
41430: CALL_OW 264
41434: PUSH
41435: LD_INT 14
41437: PUSH
41438: LD_INT 53
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: IN
41445: IFFALSE 41466
// points := [ 40 , 10 , 20 ] ;
41447: LD_ADDR_VAR 0 9
41451: PUSH
41452: LD_INT 40
41454: PUSH
41455: LD_INT 10
41457: PUSH
41458: LD_INT 20
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: LIST
41465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41466: LD_VAR 0 6
41470: PPUSH
41471: CALL_OW 264
41475: PUSH
41476: LD_INT 9
41478: PUSH
41479: EMPTY
41480: LIST
41481: IN
41482: IFFALSE 41503
// points := [ 5 , 70 , 20 ] ;
41484: LD_ADDR_VAR 0 9
41488: PUSH
41489: LD_INT 5
41491: PUSH
41492: LD_INT 70
41494: PUSH
41495: LD_INT 20
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41503: LD_VAR 0 6
41507: PPUSH
41508: CALL_OW 264
41512: PUSH
41513: LD_INT 10
41515: PUSH
41516: EMPTY
41517: LIST
41518: IN
41519: IFFALSE 41540
// points := [ 35 , 110 , 70 ] ;
41521: LD_ADDR_VAR 0 9
41525: PUSH
41526: LD_INT 35
41528: PUSH
41529: LD_INT 110
41531: PUSH
41532: LD_INT 70
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41540: LD_VAR 0 6
41544: PPUSH
41545: CALL_OW 265
41549: PUSH
41550: LD_INT 25
41552: EQUAL
41553: IFFALSE 41574
// points := [ 80 , 65 , 100 ] ;
41555: LD_ADDR_VAR 0 9
41559: PUSH
41560: LD_INT 80
41562: PUSH
41563: LD_INT 65
41565: PUSH
41566: LD_INT 100
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41574: LD_VAR 0 6
41578: PPUSH
41579: CALL_OW 263
41583: PUSH
41584: LD_INT 1
41586: EQUAL
41587: IFFALSE 41622
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41589: LD_ADDR_VAR 0 10
41593: PUSH
41594: LD_VAR 0 10
41598: PUSH
41599: LD_VAR 0 6
41603: PPUSH
41604: CALL_OW 311
41608: PPUSH
41609: LD_INT 3
41611: PPUSH
41612: CALL_OW 259
41616: PUSH
41617: LD_INT 4
41619: MUL
41620: MUL
41621: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41622: LD_VAR 0 6
41626: PPUSH
41627: CALL_OW 263
41631: PUSH
41632: LD_INT 2
41634: EQUAL
41635: IFFALSE 41686
// begin j := IsControledBy ( i ) ;
41637: LD_ADDR_VAR 0 7
41641: PUSH
41642: LD_VAR 0 6
41646: PPUSH
41647: CALL_OW 312
41651: ST_TO_ADDR
// if j then
41652: LD_VAR 0 7
41656: IFFALSE 41686
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41658: LD_ADDR_VAR 0 10
41662: PUSH
41663: LD_VAR 0 10
41667: PUSH
41668: LD_VAR 0 7
41672: PPUSH
41673: LD_INT 3
41675: PPUSH
41676: CALL_OW 259
41680: PUSH
41681: LD_INT 3
41683: MUL
41684: MUL
41685: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41686: LD_VAR 0 6
41690: PPUSH
41691: CALL_OW 264
41695: PUSH
41696: LD_INT 5
41698: PUSH
41699: LD_INT 6
41701: PUSH
41702: LD_INT 46
41704: PUSH
41705: LD_INT 44
41707: PUSH
41708: LD_INT 47
41710: PUSH
41711: LD_INT 45
41713: PUSH
41714: LD_INT 28
41716: PUSH
41717: LD_INT 7
41719: PUSH
41720: LD_INT 27
41722: PUSH
41723: LD_INT 29
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: IN
41738: IFFALSE 41758
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: LD_INT 52
41748: PPUSH
41749: CALL_OW 321
41753: PUSH
41754: LD_INT 2
41756: EQUAL
41757: AND
41758: IFFALSE 41775
// bpoints := bpoints * 1.2 ;
41760: LD_ADDR_VAR 0 10
41764: PUSH
41765: LD_VAR 0 10
41769: PUSH
41770: LD_REAL  1.20000000000000E+0000
41773: MUL
41774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41775: LD_VAR 0 6
41779: PPUSH
41780: CALL_OW 264
41784: PUSH
41785: LD_INT 6
41787: PUSH
41788: LD_INT 46
41790: PUSH
41791: LD_INT 47
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: IN
41799: IFFALSE 41816
// bpoints := bpoints * 1.2 ;
41801: LD_ADDR_VAR 0 10
41805: PUSH
41806: LD_VAR 0 10
41810: PUSH
41811: LD_REAL  1.20000000000000E+0000
41814: MUL
41815: ST_TO_ADDR
// end ; unit_building :
41816: GO 41830
41818: LD_INT 3
41820: DOUBLE
41821: EQUAL
41822: IFTRUE 41826
41824: GO 41829
41826: POP
// ; end ;
41827: GO 41830
41829: POP
// for j = 1 to 3 do
41830: LD_ADDR_VAR 0 7
41834: PUSH
41835: DOUBLE
41836: LD_INT 1
41838: DEC
41839: ST_TO_ADDR
41840: LD_INT 3
41842: PUSH
41843: FOR_TO
41844: IFFALSE 41897
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41846: LD_ADDR_VAR 0 5
41850: PUSH
41851: LD_VAR 0 5
41855: PPUSH
41856: LD_VAR 0 7
41860: PPUSH
41861: LD_VAR 0 5
41865: PUSH
41866: LD_VAR 0 7
41870: ARRAY
41871: PUSH
41872: LD_VAR 0 9
41876: PUSH
41877: LD_VAR 0 7
41881: ARRAY
41882: PUSH
41883: LD_VAR 0 10
41887: MUL
41888: PLUS
41889: PPUSH
41890: CALL_OW 1
41894: ST_TO_ADDR
41895: GO 41843
41897: POP
41898: POP
// end ;
41899: GO 40372
41901: POP
41902: POP
// result := Replace ( result , 4 , tmp ) ;
41903: LD_ADDR_VAR 0 5
41907: PUSH
41908: LD_VAR 0 5
41912: PPUSH
41913: LD_INT 4
41915: PPUSH
41916: LD_VAR 0 8
41920: PPUSH
41921: CALL_OW 1
41925: ST_TO_ADDR
// end ;
41926: LD_VAR 0 5
41930: RET
// export function DangerAtRange ( unit , range ) ; begin
41931: LD_INT 0
41933: PPUSH
// if not unit then
41934: LD_VAR 0 1
41938: NOT
41939: IFFALSE 41943
// exit ;
41941: GO 41988
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 255
41957: PPUSH
41958: LD_VAR 0 1
41962: PPUSH
41963: CALL_OW 250
41967: PPUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 251
41977: PPUSH
41978: LD_VAR 0 2
41982: PPUSH
41983: CALL 40222 0 4
41987: ST_TO_ADDR
// end ;
41988: LD_VAR 0 3
41992: RET
// export function DangerInArea ( side , area ) ; begin
41993: LD_INT 0
41995: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41996: LD_ADDR_VAR 0 3
42000: PUSH
42001: LD_VAR 0 2
42005: PPUSH
42006: LD_INT 81
42008: PUSH
42009: LD_VAR 0 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PPUSH
42018: CALL_OW 70
42022: ST_TO_ADDR
// end ;
42023: LD_VAR 0 3
42027: RET
// export function IsExtension ( b ) ; begin
42028: LD_INT 0
42030: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42031: LD_ADDR_VAR 0 2
42035: PUSH
42036: LD_VAR 0 1
42040: PUSH
42041: LD_INT 23
42043: PUSH
42044: LD_INT 20
42046: PUSH
42047: LD_INT 22
42049: PUSH
42050: LD_INT 17
42052: PUSH
42053: LD_INT 24
42055: PUSH
42056: LD_INT 21
42058: PUSH
42059: LD_INT 19
42061: PUSH
42062: LD_INT 16
42064: PUSH
42065: LD_INT 25
42067: PUSH
42068: LD_INT 18
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: IN
42083: ST_TO_ADDR
// end ;
42084: LD_VAR 0 2
42088: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42089: LD_INT 0
42091: PPUSH
42092: PPUSH
42093: PPUSH
// result := [ ] ;
42094: LD_ADDR_VAR 0 4
42098: PUSH
42099: EMPTY
42100: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42101: LD_ADDR_VAR 0 5
42105: PUSH
42106: LD_VAR 0 2
42110: PPUSH
42111: LD_INT 21
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PPUSH
42121: CALL_OW 70
42125: ST_TO_ADDR
// if not tmp then
42126: LD_VAR 0 5
42130: NOT
42131: IFFALSE 42135
// exit ;
42133: GO 42199
// if checkLink then
42135: LD_VAR 0 3
42139: IFFALSE 42189
// begin for i in tmp do
42141: LD_ADDR_VAR 0 6
42145: PUSH
42146: LD_VAR 0 5
42150: PUSH
42151: FOR_IN
42152: IFFALSE 42187
// if GetBase ( i ) <> base then
42154: LD_VAR 0 6
42158: PPUSH
42159: CALL_OW 274
42163: PUSH
42164: LD_VAR 0 1
42168: NONEQUAL
42169: IFFALSE 42185
// ComLinkToBase ( base , i ) ;
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_VAR 0 6
42180: PPUSH
42181: CALL_OW 169
42185: GO 42151
42187: POP
42188: POP
// end ; result := tmp ;
42189: LD_ADDR_VAR 0 4
42193: PUSH
42194: LD_VAR 0 5
42198: ST_TO_ADDR
// end ;
42199: LD_VAR 0 4
42203: RET
// export function ComComplete ( units , b ) ; var i ; begin
42204: LD_INT 0
42206: PPUSH
42207: PPUSH
// if not units then
42208: LD_VAR 0 1
42212: NOT
42213: IFFALSE 42217
// exit ;
42215: GO 42307
// for i in units do
42217: LD_ADDR_VAR 0 4
42221: PUSH
42222: LD_VAR 0 1
42226: PUSH
42227: FOR_IN
42228: IFFALSE 42305
// if BuildingStatus ( b ) = bs_build then
42230: LD_VAR 0 2
42234: PPUSH
42235: CALL_OW 461
42239: PUSH
42240: LD_INT 1
42242: EQUAL
42243: IFFALSE 42303
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42245: LD_VAR 0 4
42249: PPUSH
42250: LD_STRING h
42252: PUSH
42253: LD_VAR 0 2
42257: PPUSH
42258: CALL_OW 250
42262: PUSH
42263: LD_VAR 0 2
42267: PPUSH
42268: CALL_OW 251
42272: PUSH
42273: LD_VAR 0 2
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: PUSH
42296: EMPTY
42297: LIST
42298: PPUSH
42299: CALL_OW 446
42303: GO 42227
42305: POP
42306: POP
// end ;
42307: LD_VAR 0 3
42311: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42312: LD_INT 0
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42320: LD_VAR 0 1
42324: NOT
42325: IFTRUE 42342
42327: PUSH
42328: LD_VAR 0 1
42332: PPUSH
42333: CALL_OW 263
42337: PUSH
42338: LD_INT 2
42340: NONEQUAL
42341: OR
42342: IFFALSE 42346
// exit ;
42344: GO 42662
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42346: LD_ADDR_VAR 0 6
42350: PUSH
42351: LD_INT 22
42353: PUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: CALL_OW 255
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 30
42373: PUSH
42374: LD_INT 36
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 34
42383: PUSH
42384: LD_INT 31
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PPUSH
42400: CALL_OW 69
42404: ST_TO_ADDR
// if not tmp then
42405: LD_VAR 0 6
42409: NOT
42410: IFFALSE 42414
// exit ;
42412: GO 42662
// result := [ ] ;
42414: LD_ADDR_VAR 0 2
42418: PUSH
42419: EMPTY
42420: ST_TO_ADDR
// for i in tmp do
42421: LD_ADDR_VAR 0 3
42425: PUSH
42426: LD_VAR 0 6
42430: PUSH
42431: FOR_IN
42432: IFFALSE 42503
// begin t := UnitsInside ( i ) ;
42434: LD_ADDR_VAR 0 4
42438: PUSH
42439: LD_VAR 0 3
42443: PPUSH
42444: CALL_OW 313
42448: ST_TO_ADDR
// if t then
42449: LD_VAR 0 4
42453: IFFALSE 42501
// for j in t do
42455: LD_ADDR_VAR 0 7
42459: PUSH
42460: LD_VAR 0 4
42464: PUSH
42465: FOR_IN
42466: IFFALSE 42499
// result := Replace ( result , result + 1 , j ) ;
42468: LD_ADDR_VAR 0 2
42472: PUSH
42473: LD_VAR 0 2
42477: PPUSH
42478: LD_VAR 0 2
42482: PUSH
42483: LD_INT 1
42485: PLUS
42486: PPUSH
42487: LD_VAR 0 7
42491: PPUSH
42492: CALL_OW 1
42496: ST_TO_ADDR
42497: GO 42465
42499: POP
42500: POP
// end ;
42501: GO 42431
42503: POP
42504: POP
// if not result then
42505: LD_VAR 0 2
42509: NOT
42510: IFFALSE 42514
// exit ;
42512: GO 42662
// mech := result [ 1 ] ;
42514: LD_ADDR_VAR 0 5
42518: PUSH
42519: LD_VAR 0 2
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: ST_TO_ADDR
// if result > 1 then
42528: LD_VAR 0 2
42532: PUSH
42533: LD_INT 1
42535: GREATER
42536: IFFALSE 42648
// begin for i = 2 to result do
42538: LD_ADDR_VAR 0 3
42542: PUSH
42543: DOUBLE
42544: LD_INT 2
42546: DEC
42547: ST_TO_ADDR
42548: LD_VAR 0 2
42552: PUSH
42553: FOR_TO
42554: IFFALSE 42646
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42556: LD_ADDR_VAR 0 4
42560: PUSH
42561: LD_VAR 0 2
42565: PUSH
42566: LD_VAR 0 3
42570: ARRAY
42571: PPUSH
42572: LD_INT 3
42574: PPUSH
42575: CALL_OW 259
42579: PUSH
42580: LD_VAR 0 2
42584: PUSH
42585: LD_VAR 0 3
42589: ARRAY
42590: PPUSH
42591: CALL_OW 432
42595: MINUS
42596: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42597: LD_VAR 0 4
42601: PUSH
42602: LD_VAR 0 5
42606: PPUSH
42607: LD_INT 3
42609: PPUSH
42610: CALL_OW 259
42614: PUSH
42615: LD_VAR 0 5
42619: PPUSH
42620: CALL_OW 432
42624: MINUS
42625: GREATEREQUAL
42626: IFFALSE 42644
// mech := result [ i ] ;
42628: LD_ADDR_VAR 0 5
42632: PUSH
42633: LD_VAR 0 2
42637: PUSH
42638: LD_VAR 0 3
42642: ARRAY
42643: ST_TO_ADDR
// end ;
42644: GO 42553
42646: POP
42647: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42648: LD_VAR 0 1
42652: PPUSH
42653: LD_VAR 0 5
42657: PPUSH
42658: CALL_OW 135
// end ;
42662: LD_VAR 0 2
42666: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42667: LD_INT 0
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
// result := [ ] ;
42682: LD_ADDR_VAR 0 7
42686: PUSH
42687: EMPTY
42688: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 266
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: IN
42709: NOT
42710: IFFALSE 42714
// exit ;
42712: GO 44354
// if name then
42714: LD_VAR 0 3
42718: IFFALSE 42734
// SetBName ( base_dep , name ) ;
42720: LD_VAR 0 1
42724: PPUSH
42725: LD_VAR 0 3
42729: PPUSH
42730: CALL_OW 500
// base := GetBase ( base_dep ) ;
42734: LD_ADDR_VAR 0 15
42738: PUSH
42739: LD_VAR 0 1
42743: PPUSH
42744: CALL_OW 274
42748: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42749: LD_ADDR_VAR 0 16
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 255
42763: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42764: LD_ADDR_VAR 0 17
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: CALL_OW 248
42778: ST_TO_ADDR
// if sources then
42779: LD_VAR 0 5
42783: IFFALSE 42830
// for i = 1 to 3 do
42785: LD_ADDR_VAR 0 8
42789: PUSH
42790: DOUBLE
42791: LD_INT 1
42793: DEC
42794: ST_TO_ADDR
42795: LD_INT 3
42797: PUSH
42798: FOR_TO
42799: IFFALSE 42828
// AddResourceType ( base , i , sources [ i ] ) ;
42801: LD_VAR 0 15
42805: PPUSH
42806: LD_VAR 0 8
42810: PPUSH
42811: LD_VAR 0 5
42815: PUSH
42816: LD_VAR 0 8
42820: ARRAY
42821: PPUSH
42822: CALL_OW 276
42826: GO 42798
42828: POP
42829: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42830: LD_ADDR_VAR 0 18
42834: PUSH
42835: LD_VAR 0 15
42839: PPUSH
42840: LD_VAR 0 2
42844: PPUSH
42845: LD_INT 1
42847: PPUSH
42848: CALL 42089 0 3
42852: ST_TO_ADDR
// InitHc ;
42853: CALL_OW 19
// InitUc ;
42857: CALL_OW 18
// uc_side := side ;
42861: LD_ADDR_OWVAR 20
42865: PUSH
42866: LD_VAR 0 16
42870: ST_TO_ADDR
// uc_nation := nation ;
42871: LD_ADDR_OWVAR 21
42875: PUSH
42876: LD_VAR 0 17
42880: ST_TO_ADDR
// if buildings then
42881: LD_VAR 0 18
42885: IFFALSE 44213
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42887: LD_ADDR_VAR 0 19
42891: PUSH
42892: LD_VAR 0 18
42896: PPUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 30
42902: PUSH
42903: LD_INT 29
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 30
42912: PUSH
42913: LD_INT 30
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 72
42929: ST_TO_ADDR
// if tmp then
42930: LD_VAR 0 19
42934: IFFALSE 42982
// for i in tmp do
42936: LD_ADDR_VAR 0 8
42940: PUSH
42941: LD_VAR 0 19
42945: PUSH
42946: FOR_IN
42947: IFFALSE 42980
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42949: LD_VAR 0 8
42953: PPUSH
42954: CALL_OW 250
42958: PPUSH
42959: LD_VAR 0 8
42963: PPUSH
42964: CALL_OW 251
42968: PPUSH
42969: LD_VAR 0 16
42973: PPUSH
42974: CALL_OW 441
42978: GO 42946
42980: POP
42981: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42982: LD_VAR 0 18
42986: PPUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 30
42992: PUSH
42993: LD_INT 32
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 30
43002: PUSH
43003: LD_INT 33
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: PPUSH
43015: CALL_OW 72
43019: IFFALSE 43107
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43021: LD_ADDR_VAR 0 8
43025: PUSH
43026: LD_VAR 0 18
43030: PPUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 30
43036: PUSH
43037: LD_INT 32
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 30
43046: PUSH
43047: LD_INT 33
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: LIST
43058: PPUSH
43059: CALL_OW 72
43063: PUSH
43064: FOR_IN
43065: IFFALSE 43105
// begin if not GetBWeapon ( i ) then
43067: LD_VAR 0 8
43071: PPUSH
43072: CALL_OW 269
43076: NOT
43077: IFFALSE 43103
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43079: LD_VAR 0 8
43083: PPUSH
43084: LD_VAR 0 8
43088: PPUSH
43089: LD_VAR 0 2
43093: PPUSH
43094: CALL 44359 0 2
43098: PPUSH
43099: CALL_OW 431
// end ;
43103: GO 43064
43105: POP
43106: POP
// end ; for i = 1 to personel do
43107: LD_ADDR_VAR 0 8
43111: PUSH
43112: DOUBLE
43113: LD_INT 1
43115: DEC
43116: ST_TO_ADDR
43117: LD_VAR 0 6
43121: PUSH
43122: FOR_TO
43123: IFFALSE 44193
// begin if i > 4 then
43125: LD_VAR 0 8
43129: PUSH
43130: LD_INT 4
43132: GREATER
43133: IFFALSE 43137
// break ;
43135: GO 44193
// case i of 1 :
43137: LD_VAR 0 8
43141: PUSH
43142: LD_INT 1
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43150
43148: GO 43230
43150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43151: LD_ADDR_VAR 0 12
43155: PUSH
43156: LD_VAR 0 18
43160: PPUSH
43161: LD_INT 22
43163: PUSH
43164: LD_VAR 0 16
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 58
43175: PUSH
43176: EMPTY
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 30
43184: PUSH
43185: LD_INT 32
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 30
43194: PUSH
43195: LD_INT 4
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 30
43204: PUSH
43205: LD_INT 5
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: PPUSH
43223: CALL_OW 72
43227: ST_TO_ADDR
43228: GO 43452
43230: LD_INT 2
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43300
43238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43239: LD_ADDR_VAR 0 12
43243: PUSH
43244: LD_VAR 0 18
43248: PPUSH
43249: LD_INT 22
43251: PUSH
43252: LD_VAR 0 16
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 30
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 30
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PPUSH
43293: CALL_OW 72
43297: ST_TO_ADDR
43298: GO 43452
43300: LD_INT 3
43302: DOUBLE
43303: EQUAL
43304: IFTRUE 43308
43306: GO 43370
43308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43309: LD_ADDR_VAR 0 12
43313: PUSH
43314: LD_VAR 0 18
43318: PPUSH
43319: LD_INT 22
43321: PUSH
43322: LD_VAR 0 16
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 30
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 30
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PPUSH
43363: CALL_OW 72
43367: ST_TO_ADDR
43368: GO 43452
43370: LD_INT 4
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43451
43378: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43379: LD_ADDR_VAR 0 12
43383: PUSH
43384: LD_VAR 0 18
43388: PPUSH
43389: LD_INT 22
43391: PUSH
43392: LD_VAR 0 16
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: LD_INT 30
43406: PUSH
43407: LD_INT 6
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 30
43416: PUSH
43417: LD_INT 7
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 30
43426: PUSH
43427: LD_INT 8
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PPUSH
43444: CALL_OW 72
43448: ST_TO_ADDR
43449: GO 43452
43451: POP
// if i = 1 then
43452: LD_VAR 0 8
43456: PUSH
43457: LD_INT 1
43459: EQUAL
43460: IFFALSE 43571
// begin tmp := [ ] ;
43462: LD_ADDR_VAR 0 19
43466: PUSH
43467: EMPTY
43468: ST_TO_ADDR
// for j in f do
43469: LD_ADDR_VAR 0 9
43473: PUSH
43474: LD_VAR 0 12
43478: PUSH
43479: FOR_IN
43480: IFFALSE 43553
// if GetBType ( j ) = b_bunker then
43482: LD_VAR 0 9
43486: PPUSH
43487: CALL_OW 266
43491: PUSH
43492: LD_INT 32
43494: EQUAL
43495: IFFALSE 43522
// tmp := Insert ( tmp , 1 , j ) else
43497: LD_ADDR_VAR 0 19
43501: PUSH
43502: LD_VAR 0 19
43506: PPUSH
43507: LD_INT 1
43509: PPUSH
43510: LD_VAR 0 9
43514: PPUSH
43515: CALL_OW 2
43519: ST_TO_ADDR
43520: GO 43551
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43522: LD_ADDR_VAR 0 19
43526: PUSH
43527: LD_VAR 0 19
43531: PPUSH
43532: LD_VAR 0 19
43536: PUSH
43537: LD_INT 1
43539: PLUS
43540: PPUSH
43541: LD_VAR 0 9
43545: PPUSH
43546: CALL_OW 2
43550: ST_TO_ADDR
43551: GO 43479
43553: POP
43554: POP
// if tmp then
43555: LD_VAR 0 19
43559: IFFALSE 43571
// f := tmp ;
43561: LD_ADDR_VAR 0 12
43565: PUSH
43566: LD_VAR 0 19
43570: ST_TO_ADDR
// end ; x := personel [ i ] ;
43571: LD_ADDR_VAR 0 13
43575: PUSH
43576: LD_VAR 0 6
43580: PUSH
43581: LD_VAR 0 8
43585: ARRAY
43586: ST_TO_ADDR
// if x = - 1 then
43587: LD_VAR 0 13
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: EQUAL
43596: IFFALSE 43807
// begin for j in f do
43598: LD_ADDR_VAR 0 9
43602: PUSH
43603: LD_VAR 0 12
43607: PUSH
43608: FOR_IN
43609: IFFALSE 43803
// repeat InitHc ;
43611: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43615: LD_VAR 0 9
43619: PPUSH
43620: CALL_OW 266
43624: PUSH
43625: LD_INT 5
43627: EQUAL
43628: IFFALSE 43698
// begin if UnitsInside ( j ) < 3 then
43630: LD_VAR 0 9
43634: PPUSH
43635: CALL_OW 313
43639: PUSH
43640: LD_INT 3
43642: LESS
43643: IFFALSE 43679
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43645: LD_INT 0
43647: PPUSH
43648: LD_INT 5
43650: PUSH
43651: LD_INT 8
43653: PUSH
43654: LD_INT 9
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: PUSH
43662: LD_VAR 0 17
43666: ARRAY
43667: PPUSH
43668: LD_VAR 0 4
43672: PPUSH
43673: CALL_OW 380
43677: GO 43696
// PrepareHuman ( false , i , skill ) ;
43679: LD_INT 0
43681: PPUSH
43682: LD_VAR 0 8
43686: PPUSH
43687: LD_VAR 0 4
43691: PPUSH
43692: CALL_OW 380
// end else
43696: GO 43715
// PrepareHuman ( false , i , skill ) ;
43698: LD_INT 0
43700: PPUSH
43701: LD_VAR 0 8
43705: PPUSH
43706: LD_VAR 0 4
43710: PPUSH
43711: CALL_OW 380
// un := CreateHuman ;
43715: LD_ADDR_VAR 0 14
43719: PUSH
43720: CALL_OW 44
43724: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43725: LD_ADDR_VAR 0 7
43729: PUSH
43730: LD_VAR 0 7
43734: PPUSH
43735: LD_INT 1
43737: PPUSH
43738: LD_VAR 0 14
43742: PPUSH
43743: CALL_OW 2
43747: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43748: LD_VAR 0 14
43752: PPUSH
43753: LD_VAR 0 9
43757: PPUSH
43758: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43762: LD_VAR 0 9
43766: PPUSH
43767: CALL_OW 313
43771: PUSH
43772: LD_INT 6
43774: EQUAL
43775: IFTRUE 43799
43777: PUSH
43778: LD_VAR 0 9
43782: PPUSH
43783: CALL_OW 266
43787: PUSH
43788: LD_INT 32
43790: PUSH
43791: LD_INT 31
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: IN
43798: OR
43799: IFFALSE 43611
43801: GO 43608
43803: POP
43804: POP
// end else
43805: GO 44191
// for j = 1 to x do
43807: LD_ADDR_VAR 0 9
43811: PUSH
43812: DOUBLE
43813: LD_INT 1
43815: DEC
43816: ST_TO_ADDR
43817: LD_VAR 0 13
43821: PUSH
43822: FOR_TO
43823: IFFALSE 44189
// begin InitHc ;
43825: CALL_OW 19
// if not f then
43829: LD_VAR 0 12
43833: NOT
43834: IFFALSE 43923
// begin PrepareHuman ( false , i , skill ) ;
43836: LD_INT 0
43838: PPUSH
43839: LD_VAR 0 8
43843: PPUSH
43844: LD_VAR 0 4
43848: PPUSH
43849: CALL_OW 380
// un := CreateHuman ;
43853: LD_ADDR_VAR 0 14
43857: PUSH
43858: CALL_OW 44
43862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43863: LD_ADDR_VAR 0 7
43867: PUSH
43868: LD_VAR 0 7
43872: PPUSH
43873: LD_INT 1
43875: PPUSH
43876: LD_VAR 0 14
43880: PPUSH
43881: CALL_OW 2
43885: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43886: LD_VAR 0 14
43890: PPUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 250
43900: PPUSH
43901: LD_VAR 0 1
43905: PPUSH
43906: CALL_OW 251
43910: PPUSH
43911: LD_INT 10
43913: PPUSH
43914: LD_INT 0
43916: PPUSH
43917: CALL_OW 50
// continue ;
43921: GO 43822
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43923: LD_VAR 0 12
43927: PUSH
43928: LD_INT 1
43930: ARRAY
43931: PPUSH
43932: CALL_OW 313
43936: IFFALSE 43964
43938: PUSH
43939: LD_VAR 0 12
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: PPUSH
43948: CALL_OW 266
43952: PUSH
43953: LD_INT 32
43955: PUSH
43956: LD_INT 31
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: IN
43963: AND
43964: IFTRUE 43985
43966: PUSH
43967: LD_VAR 0 12
43971: PUSH
43972: LD_INT 1
43974: ARRAY
43975: PPUSH
43976: CALL_OW 313
43980: PUSH
43981: LD_INT 6
43983: EQUAL
43984: OR
43985: IFFALSE 44005
// f := Delete ( f , 1 ) ;
43987: LD_ADDR_VAR 0 12
43991: PUSH
43992: LD_VAR 0 12
43996: PPUSH
43997: LD_INT 1
43999: PPUSH
44000: CALL_OW 3
44004: ST_TO_ADDR
// if not f then
44005: LD_VAR 0 12
44009: NOT
44010: IFFALSE 44028
// begin x := x + 2 ;
44012: LD_ADDR_VAR 0 13
44016: PUSH
44017: LD_VAR 0 13
44021: PUSH
44022: LD_INT 2
44024: PLUS
44025: ST_TO_ADDR
// continue ;
44026: GO 43822
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44028: LD_VAR 0 12
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PPUSH
44037: CALL_OW 266
44041: PUSH
44042: LD_INT 5
44044: EQUAL
44045: IFFALSE 44119
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44047: LD_VAR 0 12
44051: PUSH
44052: LD_INT 1
44054: ARRAY
44055: PPUSH
44056: CALL_OW 313
44060: PUSH
44061: LD_INT 3
44063: LESS
44064: IFFALSE 44100
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44066: LD_INT 0
44068: PPUSH
44069: LD_INT 5
44071: PUSH
44072: LD_INT 8
44074: PUSH
44075: LD_INT 9
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: PUSH
44083: LD_VAR 0 17
44087: ARRAY
44088: PPUSH
44089: LD_VAR 0 4
44093: PPUSH
44094: CALL_OW 380
44098: GO 44117
// PrepareHuman ( false , i , skill ) ;
44100: LD_INT 0
44102: PPUSH
44103: LD_VAR 0 8
44107: PPUSH
44108: LD_VAR 0 4
44112: PPUSH
44113: CALL_OW 380
// end else
44117: GO 44136
// PrepareHuman ( false , i , skill ) ;
44119: LD_INT 0
44121: PPUSH
44122: LD_VAR 0 8
44126: PPUSH
44127: LD_VAR 0 4
44131: PPUSH
44132: CALL_OW 380
// un := CreateHuman ;
44136: LD_ADDR_VAR 0 14
44140: PUSH
44141: CALL_OW 44
44145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44146: LD_ADDR_VAR 0 7
44150: PUSH
44151: LD_VAR 0 7
44155: PPUSH
44156: LD_INT 1
44158: PPUSH
44159: LD_VAR 0 14
44163: PPUSH
44164: CALL_OW 2
44168: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44169: LD_VAR 0 14
44173: PPUSH
44174: LD_VAR 0 12
44178: PUSH
44179: LD_INT 1
44181: ARRAY
44182: PPUSH
44183: CALL_OW 52
// end ;
44187: GO 43822
44189: POP
44190: POP
// end ;
44191: GO 43122
44193: POP
44194: POP
// result := result ^ buildings ;
44195: LD_ADDR_VAR 0 7
44199: PUSH
44200: LD_VAR 0 7
44204: PUSH
44205: LD_VAR 0 18
44209: ADD
44210: ST_TO_ADDR
// end else
44211: GO 44354
// begin for i = 1 to personel do
44213: LD_ADDR_VAR 0 8
44217: PUSH
44218: DOUBLE
44219: LD_INT 1
44221: DEC
44222: ST_TO_ADDR
44223: LD_VAR 0 6
44227: PUSH
44228: FOR_TO
44229: IFFALSE 44352
// begin if i > 4 then
44231: LD_VAR 0 8
44235: PUSH
44236: LD_INT 4
44238: GREATER
44239: IFFALSE 44243
// break ;
44241: GO 44352
// x := personel [ i ] ;
44243: LD_ADDR_VAR 0 13
44247: PUSH
44248: LD_VAR 0 6
44252: PUSH
44253: LD_VAR 0 8
44257: ARRAY
44258: ST_TO_ADDR
// if x = - 1 then
44259: LD_VAR 0 13
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: EQUAL
44268: IFFALSE 44272
// continue ;
44270: GO 44228
// PrepareHuman ( false , i , skill ) ;
44272: LD_INT 0
44274: PPUSH
44275: LD_VAR 0 8
44279: PPUSH
44280: LD_VAR 0 4
44284: PPUSH
44285: CALL_OW 380
// un := CreateHuman ;
44289: LD_ADDR_VAR 0 14
44293: PUSH
44294: CALL_OW 44
44298: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44299: LD_VAR 0 14
44303: PPUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 250
44313: PPUSH
44314: LD_VAR 0 1
44318: PPUSH
44319: CALL_OW 251
44323: PPUSH
44324: LD_INT 10
44326: PPUSH
44327: LD_INT 0
44329: PPUSH
44330: CALL_OW 50
// result := result ^ un ;
44334: LD_ADDR_VAR 0 7
44338: PUSH
44339: LD_VAR 0 7
44343: PUSH
44344: LD_VAR 0 14
44348: ADD
44349: ST_TO_ADDR
// end ;
44350: GO 44228
44352: POP
44353: POP
// end ; end ;
44354: LD_VAR 0 7
44358: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44359: LD_INT 0
44361: PPUSH
44362: PPUSH
44363: PPUSH
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
44369: PPUSH
44370: PPUSH
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
// result := false ;
44377: LD_ADDR_VAR 0 3
44381: PUSH
44382: LD_INT 0
44384: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44385: LD_VAR 0 1
44389: NOT
44390: IFTRUE 44415
44392: PUSH
44393: LD_VAR 0 1
44397: PPUSH
44398: CALL_OW 266
44402: PUSH
44403: LD_INT 32
44405: PUSH
44406: LD_INT 33
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: IN
44413: NOT
44414: OR
44415: IFFALSE 44419
// exit ;
44417: GO 45554
// nat := GetNation ( tower ) ;
44419: LD_ADDR_VAR 0 12
44423: PUSH
44424: LD_VAR 0 1
44428: PPUSH
44429: CALL_OW 248
44433: ST_TO_ADDR
// side := GetSide ( tower ) ;
44434: LD_ADDR_VAR 0 16
44438: PUSH
44439: LD_VAR 0 1
44443: PPUSH
44444: CALL_OW 255
44448: ST_TO_ADDR
// x := GetX ( tower ) ;
44449: LD_ADDR_VAR 0 10
44453: PUSH
44454: LD_VAR 0 1
44458: PPUSH
44459: CALL_OW 250
44463: ST_TO_ADDR
// y := GetY ( tower ) ;
44464: LD_ADDR_VAR 0 11
44468: PUSH
44469: LD_VAR 0 1
44473: PPUSH
44474: CALL_OW 251
44478: ST_TO_ADDR
// if not x or not y then
44479: LD_VAR 0 10
44483: NOT
44484: IFTRUE 44493
44486: PUSH
44487: LD_VAR 0 11
44491: NOT
44492: OR
44493: IFFALSE 44497
// exit ;
44495: GO 45554
// weapon := 0 ;
44497: LD_ADDR_VAR 0 18
44501: PUSH
44502: LD_INT 0
44504: ST_TO_ADDR
// fac_list := [ ] ;
44505: LD_ADDR_VAR 0 17
44509: PUSH
44510: EMPTY
44511: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44512: LD_ADDR_VAR 0 6
44516: PUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 274
44526: PPUSH
44527: LD_VAR 0 2
44531: PPUSH
44532: LD_INT 0
44534: PPUSH
44535: CALL 42089 0 3
44539: PPUSH
44540: LD_INT 30
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PPUSH
44550: CALL_OW 72
44554: ST_TO_ADDR
// if not factories then
44555: LD_VAR 0 6
44559: NOT
44560: IFFALSE 44564
// exit ;
44562: GO 45554
// for i in factories do
44564: LD_ADDR_VAR 0 8
44568: PUSH
44569: LD_VAR 0 6
44573: PUSH
44574: FOR_IN
44575: IFFALSE 44600
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44577: LD_ADDR_VAR 0 17
44581: PUSH
44582: LD_VAR 0 17
44586: PUSH
44587: LD_VAR 0 8
44591: PPUSH
44592: CALL_OW 478
44596: UNION
44597: ST_TO_ADDR
44598: GO 44574
44600: POP
44601: POP
// if not fac_list then
44602: LD_VAR 0 17
44606: NOT
44607: IFFALSE 44611
// exit ;
44609: GO 45554
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44611: LD_ADDR_VAR 0 5
44615: PUSH
44616: LD_INT 4
44618: PUSH
44619: LD_INT 5
44621: PUSH
44622: LD_INT 9
44624: PUSH
44625: LD_INT 10
44627: PUSH
44628: LD_INT 6
44630: PUSH
44631: LD_INT 7
44633: PUSH
44634: LD_INT 11
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 27
44648: PUSH
44649: LD_INT 28
44651: PUSH
44652: LD_INT 26
44654: PUSH
44655: LD_INT 30
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 43
44666: PUSH
44667: LD_INT 44
44669: PUSH
44670: LD_INT 46
44672: PUSH
44673: LD_INT 45
44675: PUSH
44676: LD_INT 47
44678: PUSH
44679: LD_INT 49
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: PUSH
44695: LD_VAR 0 12
44699: ARRAY
44700: ST_TO_ADDR
// list := list isect fac_list ;
44701: LD_ADDR_VAR 0 5
44705: PUSH
44706: LD_VAR 0 5
44710: PUSH
44711: LD_VAR 0 17
44715: ISECT
44716: ST_TO_ADDR
// if not list then
44717: LD_VAR 0 5
44721: NOT
44722: IFFALSE 44726
// exit ;
44724: GO 45554
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44726: LD_VAR 0 12
44730: PUSH
44731: LD_INT 3
44733: EQUAL
44734: IFFALSE 44746
44736: PUSH
44737: LD_INT 49
44739: PUSH
44740: LD_VAR 0 5
44744: IN
44745: AND
44746: IFFALSE 44766
44748: PUSH
44749: LD_INT 31
44751: PPUSH
44752: LD_VAR 0 16
44756: PPUSH
44757: CALL_OW 321
44761: PUSH
44762: LD_INT 2
44764: EQUAL
44765: AND
44766: IFFALSE 44826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44768: LD_INT 22
44770: PUSH
44771: LD_VAR 0 16
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 35
44782: PUSH
44783: LD_INT 49
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 91
44792: PUSH
44793: LD_VAR 0 1
44797: PUSH
44798: LD_INT 10
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: PPUSH
44811: CALL_OW 69
44815: NOT
44816: IFFALSE 44826
// weapon := ru_time_lapser ;
44818: LD_ADDR_VAR 0 18
44822: PUSH
44823: LD_INT 49
44825: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44826: LD_VAR 0 12
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: IN
44841: IFFALSE 44865
44843: PUSH
44844: LD_INT 11
44846: PUSH
44847: LD_VAR 0 5
44851: IN
44852: IFTRUE 44864
44854: PUSH
44855: LD_INT 30
44857: PUSH
44858: LD_VAR 0 5
44862: IN
44863: OR
44864: AND
44865: IFFALSE 44885
44867: PUSH
44868: LD_INT 6
44870: PPUSH
44871: LD_VAR 0 16
44875: PPUSH
44876: CALL_OW 321
44880: PUSH
44881: LD_INT 2
44883: EQUAL
44884: AND
44885: IFFALSE 45052
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44887: LD_INT 22
44889: PUSH
44890: LD_VAR 0 16
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 35
44904: PUSH
44905: LD_INT 11
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 35
44914: PUSH
44915: LD_INT 30
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 91
44929: PUSH
44930: LD_VAR 0 1
44934: PUSH
44935: LD_INT 18
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: PPUSH
44948: CALL_OW 69
44952: NOT
44953: IFFALSE 45029
44955: PUSH
44956: LD_INT 22
44958: PUSH
44959: LD_VAR 0 16
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 30
44973: PUSH
44974: LD_INT 32
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 30
44983: PUSH
44984: LD_INT 33
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 91
44998: PUSH
44999: LD_VAR 0 1
45003: PUSH
45004: LD_INT 12
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: PUSH
45017: EMPTY
45018: LIST
45019: PPUSH
45020: CALL_OW 69
45024: PUSH
45025: LD_INT 2
45027: GREATER
45028: AND
45029: IFFALSE 45052
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45031: LD_ADDR_VAR 0 18
45035: PUSH
45036: LD_INT 11
45038: PUSH
45039: LD_INT 30
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_VAR 0 12
45050: ARRAY
45051: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45052: LD_VAR 0 18
45056: NOT
45057: IFFALSE 45077
45059: PUSH
45060: LD_INT 40
45062: PPUSH
45063: LD_VAR 0 16
45067: PPUSH
45068: CALL_OW 321
45072: PUSH
45073: LD_INT 2
45075: EQUAL
45076: AND
45077: IFFALSE 45113
45079: PUSH
45080: LD_INT 7
45082: PUSH
45083: LD_VAR 0 5
45087: IN
45088: IFTRUE 45100
45090: PUSH
45091: LD_INT 28
45093: PUSH
45094: LD_VAR 0 5
45098: IN
45099: OR
45100: IFTRUE 45112
45102: PUSH
45103: LD_INT 45
45105: PUSH
45106: LD_VAR 0 5
45110: IN
45111: OR
45112: AND
45113: IFFALSE 45367
// begin hex := GetHexInfo ( x , y ) ;
45115: LD_ADDR_VAR 0 4
45119: PUSH
45120: LD_VAR 0 10
45124: PPUSH
45125: LD_VAR 0 11
45129: PPUSH
45130: CALL_OW 546
45134: ST_TO_ADDR
// if hex [ 1 ] then
45135: LD_VAR 0 4
45139: PUSH
45140: LD_INT 1
45142: ARRAY
45143: IFFALSE 45147
// exit ;
45145: GO 45554
// height := hex [ 2 ] ;
45147: LD_ADDR_VAR 0 15
45151: PUSH
45152: LD_VAR 0 4
45156: PUSH
45157: LD_INT 2
45159: ARRAY
45160: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45161: LD_ADDR_VAR 0 14
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 5
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// for i in tmp do
45184: LD_ADDR_VAR 0 8
45188: PUSH
45189: LD_VAR 0 14
45193: PUSH
45194: FOR_IN
45195: IFFALSE 45365
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45197: LD_ADDR_VAR 0 9
45201: PUSH
45202: LD_VAR 0 10
45206: PPUSH
45207: LD_VAR 0 8
45211: PPUSH
45212: LD_INT 5
45214: PPUSH
45215: CALL_OW 272
45219: PUSH
45220: LD_VAR 0 11
45224: PPUSH
45225: LD_VAR 0 8
45229: PPUSH
45230: LD_INT 5
45232: PPUSH
45233: CALL_OW 273
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45242: LD_VAR 0 9
45246: PUSH
45247: LD_INT 1
45249: ARRAY
45250: PPUSH
45251: LD_VAR 0 9
45255: PUSH
45256: LD_INT 2
45258: ARRAY
45259: PPUSH
45260: CALL_OW 488
45264: IFFALSE 45363
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45266: LD_ADDR_VAR 0 4
45270: PUSH
45271: LD_VAR 0 9
45275: PUSH
45276: LD_INT 1
45278: ARRAY
45279: PPUSH
45280: LD_VAR 0 9
45284: PUSH
45285: LD_INT 2
45287: ARRAY
45288: PPUSH
45289: CALL_OW 546
45293: ST_TO_ADDR
// if hex [ 1 ] then
45294: LD_VAR 0 4
45298: PUSH
45299: LD_INT 1
45301: ARRAY
45302: IFFALSE 45306
// continue ;
45304: GO 45194
// h := hex [ 2 ] ;
45306: LD_ADDR_VAR 0 13
45310: PUSH
45311: LD_VAR 0 4
45315: PUSH
45316: LD_INT 2
45318: ARRAY
45319: ST_TO_ADDR
// if h + 7 < height then
45320: LD_VAR 0 13
45324: PUSH
45325: LD_INT 7
45327: PLUS
45328: PUSH
45329: LD_VAR 0 15
45333: LESS
45334: IFFALSE 45363
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45336: LD_ADDR_VAR 0 18
45340: PUSH
45341: LD_INT 7
45343: PUSH
45344: LD_INT 28
45346: PUSH
45347: LD_INT 45
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: PUSH
45355: LD_VAR 0 12
45359: ARRAY
45360: ST_TO_ADDR
// break ;
45361: GO 45365
// end ; end ; end ;
45363: GO 45194
45365: POP
45366: POP
// end ; if not weapon then
45367: LD_VAR 0 18
45371: NOT
45372: IFFALSE 45432
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45374: LD_ADDR_VAR 0 5
45378: PUSH
45379: LD_VAR 0 5
45383: PUSH
45384: LD_INT 11
45386: PUSH
45387: LD_INT 30
45389: PUSH
45390: LD_INT 49
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: DIFF
45398: ST_TO_ADDR
// if not list then
45399: LD_VAR 0 5
45403: NOT
45404: IFFALSE 45408
// exit ;
45406: GO 45554
// weapon := list [ rand ( 1 , list ) ] ;
45408: LD_ADDR_VAR 0 18
45412: PUSH
45413: LD_VAR 0 5
45417: PUSH
45418: LD_INT 1
45420: PPUSH
45421: LD_VAR 0 5
45425: PPUSH
45426: CALL_OW 12
45430: ARRAY
45431: ST_TO_ADDR
// end ; if weapon then
45432: LD_VAR 0 18
45436: IFFALSE 45554
// begin tmp := CostOfWeapon ( weapon ) ;
45438: LD_ADDR_VAR 0 14
45442: PUSH
45443: LD_VAR 0 18
45447: PPUSH
45448: CALL_OW 451
45452: ST_TO_ADDR
// j := GetBase ( tower ) ;
45453: LD_ADDR_VAR 0 9
45457: PUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: CALL_OW 274
45467: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45468: LD_VAR 0 9
45472: PPUSH
45473: LD_INT 1
45475: PPUSH
45476: CALL_OW 275
45480: PUSH
45481: LD_VAR 0 14
45485: PUSH
45486: LD_INT 1
45488: ARRAY
45489: GREATEREQUAL
45490: IFFALSE 45516
45492: PUSH
45493: LD_VAR 0 9
45497: PPUSH
45498: LD_INT 2
45500: PPUSH
45501: CALL_OW 275
45505: PUSH
45506: LD_VAR 0 14
45510: PUSH
45511: LD_INT 2
45513: ARRAY
45514: GREATEREQUAL
45515: AND
45516: IFFALSE 45542
45518: PUSH
45519: LD_VAR 0 9
45523: PPUSH
45524: LD_INT 3
45526: PPUSH
45527: CALL_OW 275
45531: PUSH
45532: LD_VAR 0 14
45536: PUSH
45537: LD_INT 3
45539: ARRAY
45540: GREATEREQUAL
45541: AND
45542: IFFALSE 45554
// result := weapon ;
45544: LD_ADDR_VAR 0 3
45548: PUSH
45549: LD_VAR 0 18
45553: ST_TO_ADDR
// end ; end ;
45554: LD_VAR 0 3
45558: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45559: LD_INT 0
45561: PPUSH
45562: PPUSH
// result := true ;
45563: LD_ADDR_VAR 0 3
45567: PUSH
45568: LD_INT 1
45570: ST_TO_ADDR
// if array1 = array2 then
45571: LD_VAR 0 1
45575: PUSH
45576: LD_VAR 0 2
45580: EQUAL
45581: IFFALSE 45641
// begin for i = 1 to array1 do
45583: LD_ADDR_VAR 0 4
45587: PUSH
45588: DOUBLE
45589: LD_INT 1
45591: DEC
45592: ST_TO_ADDR
45593: LD_VAR 0 1
45597: PUSH
45598: FOR_TO
45599: IFFALSE 45637
// if array1 [ i ] <> array2 [ i ] then
45601: LD_VAR 0 1
45605: PUSH
45606: LD_VAR 0 4
45610: ARRAY
45611: PUSH
45612: LD_VAR 0 2
45616: PUSH
45617: LD_VAR 0 4
45621: ARRAY
45622: NONEQUAL
45623: IFFALSE 45635
// begin result := false ;
45625: LD_ADDR_VAR 0 3
45629: PUSH
45630: LD_INT 0
45632: ST_TO_ADDR
// break ;
45633: GO 45637
// end ;
45635: GO 45598
45637: POP
45638: POP
// end else
45639: GO 45649
// result := false ;
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_INT 0
45648: ST_TO_ADDR
// end ;
45649: LD_VAR 0 3
45653: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45654: LD_INT 0
45656: PPUSH
45657: PPUSH
// if not array1 or not array2 then
45658: LD_VAR 0 1
45662: NOT
45663: IFTRUE 45672
45665: PUSH
45666: LD_VAR 0 2
45670: NOT
45671: OR
45672: IFFALSE 45676
// exit ;
45674: GO 45740
// result := true ;
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_INT 1
45683: ST_TO_ADDR
// for i = 1 to array1 do
45684: LD_ADDR_VAR 0 4
45688: PUSH
45689: DOUBLE
45690: LD_INT 1
45692: DEC
45693: ST_TO_ADDR
45694: LD_VAR 0 1
45698: PUSH
45699: FOR_TO
45700: IFFALSE 45738
// if array1 [ i ] <> array2 [ i ] then
45702: LD_VAR 0 1
45706: PUSH
45707: LD_VAR 0 4
45711: ARRAY
45712: PUSH
45713: LD_VAR 0 2
45717: PUSH
45718: LD_VAR 0 4
45722: ARRAY
45723: NONEQUAL
45724: IFFALSE 45736
// begin result := false ;
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// break ;
45734: GO 45738
// end ;
45736: GO 45699
45738: POP
45739: POP
// end ;
45740: LD_VAR 0 3
45744: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45745: LD_INT 0
45747: PPUSH
45748: PPUSH
45749: PPUSH
// pom := GetBase ( fac ) ;
45750: LD_ADDR_VAR 0 5
45754: PUSH
45755: LD_VAR 0 1
45759: PPUSH
45760: CALL_OW 274
45764: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45765: LD_ADDR_VAR 0 4
45769: PUSH
45770: LD_VAR 0 2
45774: PUSH
45775: LD_INT 1
45777: ARRAY
45778: PPUSH
45779: LD_VAR 0 2
45783: PUSH
45784: LD_INT 2
45786: ARRAY
45787: PPUSH
45788: LD_VAR 0 2
45792: PUSH
45793: LD_INT 3
45795: ARRAY
45796: PPUSH
45797: LD_VAR 0 2
45801: PUSH
45802: LD_INT 4
45804: ARRAY
45805: PPUSH
45806: CALL_OW 449
45810: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45811: LD_ADDR_VAR 0 3
45815: PUSH
45816: LD_VAR 0 5
45820: PPUSH
45821: LD_INT 1
45823: PPUSH
45824: CALL_OW 275
45828: PUSH
45829: LD_VAR 0 4
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: GREATEREQUAL
45838: IFFALSE 45864
45840: PUSH
45841: LD_VAR 0 5
45845: PPUSH
45846: LD_INT 2
45848: PPUSH
45849: CALL_OW 275
45853: PUSH
45854: LD_VAR 0 4
45858: PUSH
45859: LD_INT 2
45861: ARRAY
45862: GREATEREQUAL
45863: AND
45864: IFFALSE 45890
45866: PUSH
45867: LD_VAR 0 5
45871: PPUSH
45872: LD_INT 3
45874: PPUSH
45875: CALL_OW 275
45879: PUSH
45880: LD_VAR 0 4
45884: PUSH
45885: LD_INT 3
45887: ARRAY
45888: GREATEREQUAL
45889: AND
45890: ST_TO_ADDR
// end ;
45891: LD_VAR 0 3
45895: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45896: LD_INT 0
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
// pom := GetBase ( building ) ;
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: LD_VAR 0 1
45911: PPUSH
45912: CALL_OW 274
45916: ST_TO_ADDR
// if not pom then
45917: LD_VAR 0 3
45921: NOT
45922: IFFALSE 45926
// exit ;
45924: GO 46100
// btype := GetBType ( building ) ;
45926: LD_ADDR_VAR 0 5
45930: PUSH
45931: LD_VAR 0 1
45935: PPUSH
45936: CALL_OW 266
45940: ST_TO_ADDR
// if btype = b_armoury then
45941: LD_VAR 0 5
45945: PUSH
45946: LD_INT 4
45948: EQUAL
45949: IFFALSE 45959
// btype := b_barracks ;
45951: LD_ADDR_VAR 0 5
45955: PUSH
45956: LD_INT 5
45958: ST_TO_ADDR
// if btype = b_depot then
45959: LD_VAR 0 5
45963: PUSH
45964: LD_INT 0
45966: EQUAL
45967: IFFALSE 45977
// btype := b_warehouse ;
45969: LD_ADDR_VAR 0 5
45973: PUSH
45974: LD_INT 1
45976: ST_TO_ADDR
// if btype = b_workshop then
45977: LD_VAR 0 5
45981: PUSH
45982: LD_INT 2
45984: EQUAL
45985: IFFALSE 45995
// btype := b_factory ;
45987: LD_ADDR_VAR 0 5
45991: PUSH
45992: LD_INT 3
45994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45995: LD_ADDR_VAR 0 4
45999: PUSH
46000: LD_VAR 0 5
46004: PPUSH
46005: LD_VAR 0 1
46009: PPUSH
46010: CALL_OW 248
46014: PPUSH
46015: CALL_OW 450
46019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46020: LD_ADDR_VAR 0 2
46024: PUSH
46025: LD_VAR 0 3
46029: PPUSH
46030: LD_INT 1
46032: PPUSH
46033: CALL_OW 275
46037: PUSH
46038: LD_VAR 0 4
46042: PUSH
46043: LD_INT 1
46045: ARRAY
46046: GREATEREQUAL
46047: IFFALSE 46073
46049: PUSH
46050: LD_VAR 0 3
46054: PPUSH
46055: LD_INT 2
46057: PPUSH
46058: CALL_OW 275
46062: PUSH
46063: LD_VAR 0 4
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: GREATEREQUAL
46072: AND
46073: IFFALSE 46099
46075: PUSH
46076: LD_VAR 0 3
46080: PPUSH
46081: LD_INT 3
46083: PPUSH
46084: CALL_OW 275
46088: PUSH
46089: LD_VAR 0 4
46093: PUSH
46094: LD_INT 3
46096: ARRAY
46097: GREATEREQUAL
46098: AND
46099: ST_TO_ADDR
// end ;
46100: LD_VAR 0 2
46104: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46105: LD_INT 0
46107: PPUSH
46108: PPUSH
46109: PPUSH
// pom := GetBase ( building ) ;
46110: LD_ADDR_VAR 0 4
46114: PUSH
46115: LD_VAR 0 1
46119: PPUSH
46120: CALL_OW 274
46124: ST_TO_ADDR
// if not pom then
46125: LD_VAR 0 4
46129: NOT
46130: IFFALSE 46134
// exit ;
46132: GO 46239
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46134: LD_ADDR_VAR 0 5
46138: PUSH
46139: LD_VAR 0 2
46143: PPUSH
46144: LD_VAR 0 1
46148: PPUSH
46149: CALL_OW 248
46153: PPUSH
46154: CALL_OW 450
46158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46159: LD_ADDR_VAR 0 3
46163: PUSH
46164: LD_VAR 0 4
46168: PPUSH
46169: LD_INT 1
46171: PPUSH
46172: CALL_OW 275
46176: PUSH
46177: LD_VAR 0 5
46181: PUSH
46182: LD_INT 1
46184: ARRAY
46185: GREATEREQUAL
46186: IFFALSE 46212
46188: PUSH
46189: LD_VAR 0 4
46193: PPUSH
46194: LD_INT 2
46196: PPUSH
46197: CALL_OW 275
46201: PUSH
46202: LD_VAR 0 5
46206: PUSH
46207: LD_INT 2
46209: ARRAY
46210: GREATEREQUAL
46211: AND
46212: IFFALSE 46238
46214: PUSH
46215: LD_VAR 0 4
46219: PPUSH
46220: LD_INT 3
46222: PPUSH
46223: CALL_OW 275
46227: PUSH
46228: LD_VAR 0 5
46232: PUSH
46233: LD_INT 3
46235: ARRAY
46236: GREATEREQUAL
46237: AND
46238: ST_TO_ADDR
// end ;
46239: LD_VAR 0 3
46243: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46244: LD_INT 0
46246: PPUSH
46247: PPUSH
46248: PPUSH
46249: PPUSH
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
// result := false ;
46257: LD_ADDR_VAR 0 8
46261: PUSH
46262: LD_INT 0
46264: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46265: LD_VAR 0 5
46269: NOT
46270: IFTRUE 46279
46272: PUSH
46273: LD_VAR 0 1
46277: NOT
46278: OR
46279: IFTRUE 46288
46281: PUSH
46282: LD_VAR 0 2
46286: NOT
46287: OR
46288: IFTRUE 46297
46290: PUSH
46291: LD_VAR 0 3
46295: NOT
46296: OR
46297: IFFALSE 46301
// exit ;
46299: GO 47127
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46301: LD_ADDR_VAR 0 14
46305: PUSH
46306: LD_VAR 0 1
46310: PPUSH
46311: LD_VAR 0 2
46315: PPUSH
46316: LD_VAR 0 3
46320: PPUSH
46321: LD_VAR 0 4
46325: PPUSH
46326: LD_VAR 0 5
46330: PUSH
46331: LD_INT 1
46333: ARRAY
46334: PPUSH
46335: CALL_OW 248
46339: PPUSH
46340: LD_INT 0
46342: PPUSH
46343: CALL 48408 0 6
46347: ST_TO_ADDR
// if not hexes then
46348: LD_VAR 0 14
46352: NOT
46353: IFFALSE 46357
// exit ;
46355: GO 47127
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46357: LD_ADDR_VAR 0 17
46361: PUSH
46362: LD_VAR 0 5
46366: PPUSH
46367: LD_INT 22
46369: PUSH
46370: LD_VAR 0 13
46374: PPUSH
46375: CALL_OW 255
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 30
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 30
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PPUSH
46416: CALL_OW 72
46420: ST_TO_ADDR
// for i = 1 to hexes do
46421: LD_ADDR_VAR 0 9
46425: PUSH
46426: DOUBLE
46427: LD_INT 1
46429: DEC
46430: ST_TO_ADDR
46431: LD_VAR 0 14
46435: PUSH
46436: FOR_TO
46437: IFFALSE 47125
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46439: LD_ADDR_VAR 0 13
46443: PUSH
46444: LD_VAR 0 14
46448: PUSH
46449: LD_VAR 0 9
46453: ARRAY
46454: PUSH
46455: LD_INT 1
46457: ARRAY
46458: PPUSH
46459: LD_VAR 0 14
46463: PUSH
46464: LD_VAR 0 9
46468: ARRAY
46469: PUSH
46470: LD_INT 2
46472: ARRAY
46473: PPUSH
46474: CALL_OW 428
46478: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46479: LD_VAR 0 14
46483: PUSH
46484: LD_VAR 0 9
46488: ARRAY
46489: PUSH
46490: LD_INT 1
46492: ARRAY
46493: PPUSH
46494: LD_VAR 0 14
46498: PUSH
46499: LD_VAR 0 9
46503: ARRAY
46504: PUSH
46505: LD_INT 2
46507: ARRAY
46508: PPUSH
46509: CALL_OW 351
46513: IFTRUE 46552
46515: PUSH
46516: LD_VAR 0 14
46520: PUSH
46521: LD_VAR 0 9
46525: ARRAY
46526: PUSH
46527: LD_INT 1
46529: ARRAY
46530: PPUSH
46531: LD_VAR 0 14
46535: PUSH
46536: LD_VAR 0 9
46540: ARRAY
46541: PUSH
46542: LD_INT 2
46544: ARRAY
46545: PPUSH
46546: CALL_OW 488
46550: NOT
46551: OR
46552: IFTRUE 46569
46554: PUSH
46555: LD_VAR 0 13
46559: PPUSH
46560: CALL_OW 247
46564: PUSH
46565: LD_INT 3
46567: EQUAL
46568: OR
46569: IFFALSE 46575
// exit ;
46571: POP
46572: POP
46573: GO 47127
// if not tmp then
46575: LD_VAR 0 13
46579: NOT
46580: IFFALSE 46584
// continue ;
46582: GO 46436
// result := true ;
46584: LD_ADDR_VAR 0 8
46588: PUSH
46589: LD_INT 1
46591: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46592: LD_VAR 0 6
46596: IFFALSE 46613
46598: PUSH
46599: LD_VAR 0 13
46603: PPUSH
46604: CALL_OW 247
46608: PUSH
46609: LD_INT 2
46611: EQUAL
46612: AND
46613: IFFALSE 46630
46615: PUSH
46616: LD_VAR 0 13
46620: PPUSH
46621: CALL_OW 263
46625: PUSH
46626: LD_INT 1
46628: EQUAL
46629: AND
46630: IFFALSE 46794
// begin if IsDrivenBy ( tmp ) then
46632: LD_VAR 0 13
46636: PPUSH
46637: CALL_OW 311
46641: IFFALSE 46645
// continue ;
46643: GO 46436
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46645: LD_VAR 0 6
46649: PPUSH
46650: LD_INT 3
46652: PUSH
46653: LD_INT 60
46655: PUSH
46656: EMPTY
46657: LIST
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: LD_INT 55
46668: PUSH
46669: EMPTY
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PPUSH
46680: CALL_OW 72
46684: IFFALSE 46792
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46686: LD_ADDR_VAR 0 18
46690: PUSH
46691: LD_VAR 0 6
46695: PPUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 60
46701: PUSH
46702: EMPTY
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: LD_INT 55
46714: PUSH
46715: EMPTY
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PPUSH
46726: CALL_OW 72
46730: PUSH
46731: LD_INT 1
46733: ARRAY
46734: ST_TO_ADDR
// if IsInUnit ( driver ) then
46735: LD_VAR 0 18
46739: PPUSH
46740: CALL_OW 310
46744: IFFALSE 46755
// ComExit ( driver ) ;
46746: LD_VAR 0 18
46750: PPUSH
46751: CALL 72408 0 1
// AddComEnterUnit ( driver , tmp ) ;
46755: LD_VAR 0 18
46759: PPUSH
46760: LD_VAR 0 13
46764: PPUSH
46765: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46769: LD_VAR 0 18
46773: PPUSH
46774: LD_VAR 0 7
46778: PPUSH
46779: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46783: LD_VAR 0 18
46787: PPUSH
46788: CALL_OW 181
// end ; continue ;
46792: GO 46436
// end ; if not cleaners or not tmp in cleaners then
46794: LD_VAR 0 6
46798: NOT
46799: IFTRUE 46814
46801: PUSH
46802: LD_VAR 0 13
46806: PUSH
46807: LD_VAR 0 6
46811: IN
46812: NOT
46813: OR
46814: IFFALSE 47123
// begin if dep then
46816: LD_VAR 0 17
46820: IFFALSE 46956
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46822: LD_ADDR_VAR 0 16
46826: PUSH
46827: LD_VAR 0 17
46831: PUSH
46832: LD_INT 1
46834: ARRAY
46835: PPUSH
46836: CALL_OW 250
46840: PPUSH
46841: LD_VAR 0 17
46845: PUSH
46846: LD_INT 1
46848: ARRAY
46849: PPUSH
46850: CALL_OW 254
46854: PPUSH
46855: LD_INT 5
46857: PPUSH
46858: CALL_OW 272
46862: PUSH
46863: LD_VAR 0 17
46867: PUSH
46868: LD_INT 1
46870: ARRAY
46871: PPUSH
46872: CALL_OW 251
46876: PPUSH
46877: LD_VAR 0 17
46881: PUSH
46882: LD_INT 1
46884: ARRAY
46885: PPUSH
46886: CALL_OW 254
46890: PPUSH
46891: LD_INT 5
46893: PPUSH
46894: CALL_OW 273
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46903: LD_VAR 0 16
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: PPUSH
46912: LD_VAR 0 16
46916: PUSH
46917: LD_INT 2
46919: ARRAY
46920: PPUSH
46921: CALL_OW 488
46925: IFFALSE 46956
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46927: LD_VAR 0 13
46931: PPUSH
46932: LD_VAR 0 16
46936: PUSH
46937: LD_INT 1
46939: ARRAY
46940: PPUSH
46941: LD_VAR 0 16
46945: PUSH
46946: LD_INT 2
46948: ARRAY
46949: PPUSH
46950: CALL_OW 111
// continue ;
46954: GO 46436
// end ; end ; r := GetDir ( tmp ) ;
46956: LD_ADDR_VAR 0 15
46960: PUSH
46961: LD_VAR 0 13
46965: PPUSH
46966: CALL_OW 254
46970: ST_TO_ADDR
// if r = 5 then
46971: LD_VAR 0 15
46975: PUSH
46976: LD_INT 5
46978: EQUAL
46979: IFFALSE 46989
// r := 0 ;
46981: LD_ADDR_VAR 0 15
46985: PUSH
46986: LD_INT 0
46988: ST_TO_ADDR
// for j = r to 5 do
46989: LD_ADDR_VAR 0 10
46993: PUSH
46994: DOUBLE
46995: LD_VAR 0 15
46999: DEC
47000: ST_TO_ADDR
47001: LD_INT 5
47003: PUSH
47004: FOR_TO
47005: IFFALSE 47121
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47007: LD_ADDR_VAR 0 11
47011: PUSH
47012: LD_VAR 0 13
47016: PPUSH
47017: CALL_OW 250
47021: PPUSH
47022: LD_VAR 0 10
47026: PPUSH
47027: LD_INT 2
47029: PPUSH
47030: CALL_OW 272
47034: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47035: LD_ADDR_VAR 0 12
47039: PUSH
47040: LD_VAR 0 13
47044: PPUSH
47045: CALL_OW 251
47049: PPUSH
47050: LD_VAR 0 10
47054: PPUSH
47055: LD_INT 2
47057: PPUSH
47058: CALL_OW 273
47062: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47063: LD_VAR 0 11
47067: PPUSH
47068: LD_VAR 0 12
47072: PPUSH
47073: CALL_OW 488
47077: IFFALSE 47096
47079: PUSH
47080: LD_VAR 0 11
47084: PPUSH
47085: LD_VAR 0 12
47089: PPUSH
47090: CALL_OW 428
47094: NOT
47095: AND
47096: IFFALSE 47119
// begin ComMoveXY ( tmp , _x , _y ) ;
47098: LD_VAR 0 13
47102: PPUSH
47103: LD_VAR 0 11
47107: PPUSH
47108: LD_VAR 0 12
47112: PPUSH
47113: CALL_OW 111
// break ;
47117: GO 47121
// end ; end ;
47119: GO 47004
47121: POP
47122: POP
// end ; end ;
47123: GO 46436
47125: POP
47126: POP
// end ;
47127: LD_VAR 0 8
47131: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47132: LD_INT 0
47134: PPUSH
// result := true ;
47135: LD_ADDR_VAR 0 3
47139: PUSH
47140: LD_INT 1
47142: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 24
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47162
47154: LD_INT 33
47156: DOUBLE
47157: EQUAL
47158: IFTRUE 47162
47160: GO 47187
47162: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47163: LD_ADDR_VAR 0 3
47167: PUSH
47168: LD_INT 32
47170: PPUSH
47171: LD_VAR 0 1
47175: PPUSH
47176: CALL_OW 321
47180: PUSH
47181: LD_INT 2
47183: EQUAL
47184: ST_TO_ADDR
47185: GO 47503
47187: LD_INT 20
47189: DOUBLE
47190: EQUAL
47191: IFTRUE 47195
47193: GO 47220
47195: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47196: LD_ADDR_VAR 0 3
47200: PUSH
47201: LD_INT 6
47203: PPUSH
47204: LD_VAR 0 1
47208: PPUSH
47209: CALL_OW 321
47213: PUSH
47214: LD_INT 2
47216: EQUAL
47217: ST_TO_ADDR
47218: GO 47503
47220: LD_INT 22
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47234
47226: LD_INT 36
47228: DOUBLE
47229: EQUAL
47230: IFTRUE 47234
47232: GO 47259
47234: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47235: LD_ADDR_VAR 0 3
47239: PUSH
47240: LD_INT 15
47242: PPUSH
47243: LD_VAR 0 1
47247: PPUSH
47248: CALL_OW 321
47252: PUSH
47253: LD_INT 2
47255: EQUAL
47256: ST_TO_ADDR
47257: GO 47503
47259: LD_INT 30
47261: DOUBLE
47262: EQUAL
47263: IFTRUE 47267
47265: GO 47292
47267: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47268: LD_ADDR_VAR 0 3
47272: PUSH
47273: LD_INT 20
47275: PPUSH
47276: LD_VAR 0 1
47280: PPUSH
47281: CALL_OW 321
47285: PUSH
47286: LD_INT 2
47288: EQUAL
47289: ST_TO_ADDR
47290: GO 47503
47292: LD_INT 28
47294: DOUBLE
47295: EQUAL
47296: IFTRUE 47306
47298: LD_INT 21
47300: DOUBLE
47301: EQUAL
47302: IFTRUE 47306
47304: GO 47331
47306: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_INT 21
47314: PPUSH
47315: LD_VAR 0 1
47319: PPUSH
47320: CALL_OW 321
47324: PUSH
47325: LD_INT 2
47327: EQUAL
47328: ST_TO_ADDR
47329: GO 47503
47331: LD_INT 16
47333: DOUBLE
47334: EQUAL
47335: IFTRUE 47339
47337: GO 47364
47339: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47340: LD_ADDR_VAR 0 3
47344: PUSH
47345: LD_INT 84
47347: PPUSH
47348: LD_VAR 0 1
47352: PPUSH
47353: CALL_OW 321
47357: PUSH
47358: LD_INT 2
47360: EQUAL
47361: ST_TO_ADDR
47362: GO 47503
47364: LD_INT 19
47366: DOUBLE
47367: EQUAL
47368: IFTRUE 47378
47370: LD_INT 23
47372: DOUBLE
47373: EQUAL
47374: IFTRUE 47378
47376: GO 47403
47378: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47379: LD_ADDR_VAR 0 3
47383: PUSH
47384: LD_INT 83
47386: PPUSH
47387: LD_VAR 0 1
47391: PPUSH
47392: CALL_OW 321
47396: PUSH
47397: LD_INT 2
47399: EQUAL
47400: ST_TO_ADDR
47401: GO 47503
47403: LD_INT 17
47405: DOUBLE
47406: EQUAL
47407: IFTRUE 47411
47409: GO 47436
47411: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47412: LD_ADDR_VAR 0 3
47416: PUSH
47417: LD_INT 39
47419: PPUSH
47420: LD_VAR 0 1
47424: PPUSH
47425: CALL_OW 321
47429: PUSH
47430: LD_INT 2
47432: EQUAL
47433: ST_TO_ADDR
47434: GO 47503
47436: LD_INT 18
47438: DOUBLE
47439: EQUAL
47440: IFTRUE 47444
47442: GO 47469
47444: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47445: LD_ADDR_VAR 0 3
47449: PUSH
47450: LD_INT 40
47452: PPUSH
47453: LD_VAR 0 1
47457: PPUSH
47458: CALL_OW 321
47462: PUSH
47463: LD_INT 2
47465: EQUAL
47466: ST_TO_ADDR
47467: GO 47503
47469: LD_INT 27
47471: DOUBLE
47472: EQUAL
47473: IFTRUE 47477
47475: GO 47502
47477: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47478: LD_ADDR_VAR 0 3
47482: PUSH
47483: LD_INT 35
47485: PPUSH
47486: LD_VAR 0 1
47490: PPUSH
47491: CALL_OW 321
47495: PUSH
47496: LD_INT 2
47498: EQUAL
47499: ST_TO_ADDR
47500: GO 47503
47502: POP
// end ;
47503: LD_VAR 0 3
47507: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47508: LD_INT 0
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
47518: PPUSH
47519: PPUSH
47520: PPUSH
// result := false ;
47521: LD_ADDR_VAR 0 6
47525: PUSH
47526: LD_INT 0
47528: ST_TO_ADDR
// if btype = b_depot then
47529: LD_VAR 0 2
47533: PUSH
47534: LD_INT 0
47536: EQUAL
47537: IFFALSE 47549
// begin result := true ;
47539: LD_ADDR_VAR 0 6
47543: PUSH
47544: LD_INT 1
47546: ST_TO_ADDR
// exit ;
47547: GO 48403
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47549: LD_VAR 0 1
47553: NOT
47554: IFTRUE 47579
47556: PUSH
47557: LD_VAR 0 1
47561: PPUSH
47562: CALL_OW 266
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: IN
47577: NOT
47578: OR
47579: IFTRUE 47588
47581: PUSH
47582: LD_VAR 0 2
47586: NOT
47587: OR
47588: IFTRUE 47624
47590: PUSH
47591: LD_VAR 0 5
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: LD_INT 4
47610: PUSH
47611: LD_INT 5
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: IN
47622: NOT
47623: OR
47624: IFTRUE 47643
47626: PUSH
47627: LD_VAR 0 3
47631: PPUSH
47632: LD_VAR 0 4
47636: PPUSH
47637: CALL_OW 488
47641: NOT
47642: OR
47643: IFFALSE 47647
// exit ;
47645: GO 48403
// side := GetSide ( depot ) ;
47647: LD_ADDR_VAR 0 9
47651: PUSH
47652: LD_VAR 0 1
47656: PPUSH
47657: CALL_OW 255
47661: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47662: LD_VAR 0 9
47666: PPUSH
47667: LD_VAR 0 2
47671: PPUSH
47672: CALL 47132 0 2
47676: NOT
47677: IFFALSE 47681
// exit ;
47679: GO 48403
// pom := GetBase ( depot ) ;
47681: LD_ADDR_VAR 0 10
47685: PUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: CALL_OW 274
47695: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47696: LD_ADDR_VAR 0 11
47700: PUSH
47701: LD_VAR 0 2
47705: PPUSH
47706: LD_VAR 0 1
47710: PPUSH
47711: CALL_OW 248
47715: PPUSH
47716: CALL_OW 450
47720: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47721: LD_VAR 0 10
47725: PPUSH
47726: LD_INT 1
47728: PPUSH
47729: CALL_OW 275
47733: PUSH
47734: LD_VAR 0 11
47738: PUSH
47739: LD_INT 1
47741: ARRAY
47742: GREATEREQUAL
47743: IFFALSE 47769
47745: PUSH
47746: LD_VAR 0 10
47750: PPUSH
47751: LD_INT 2
47753: PPUSH
47754: CALL_OW 275
47758: PUSH
47759: LD_VAR 0 11
47763: PUSH
47764: LD_INT 2
47766: ARRAY
47767: GREATEREQUAL
47768: AND
47769: IFFALSE 47795
47771: PUSH
47772: LD_VAR 0 10
47776: PPUSH
47777: LD_INT 3
47779: PPUSH
47780: CALL_OW 275
47784: PUSH
47785: LD_VAR 0 11
47789: PUSH
47790: LD_INT 3
47792: ARRAY
47793: GREATEREQUAL
47794: AND
47795: NOT
47796: IFFALSE 47800
// exit ;
47798: GO 48403
// if GetBType ( depot ) = b_depot then
47800: LD_VAR 0 1
47804: PPUSH
47805: CALL_OW 266
47809: PUSH
47810: LD_INT 0
47812: EQUAL
47813: IFFALSE 47825
// dist := 28 else
47815: LD_ADDR_VAR 0 14
47819: PUSH
47820: LD_INT 28
47822: ST_TO_ADDR
47823: GO 47833
// dist := 36 ;
47825: LD_ADDR_VAR 0 14
47829: PUSH
47830: LD_INT 36
47832: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47833: LD_VAR 0 1
47837: PPUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: LD_VAR 0 4
47847: PPUSH
47848: CALL_OW 297
47852: PUSH
47853: LD_VAR 0 14
47857: GREATER
47858: IFFALSE 47862
// exit ;
47860: GO 48403
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47862: LD_ADDR_VAR 0 12
47866: PUSH
47867: LD_VAR 0 2
47871: PPUSH
47872: LD_VAR 0 3
47876: PPUSH
47877: LD_VAR 0 4
47881: PPUSH
47882: LD_VAR 0 5
47886: PPUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 248
47896: PPUSH
47897: LD_INT 0
47899: PPUSH
47900: CALL 48408 0 6
47904: ST_TO_ADDR
// if not hexes then
47905: LD_VAR 0 12
47909: NOT
47910: IFFALSE 47914
// exit ;
47912: GO 48403
// hex := GetHexInfo ( x , y ) ;
47914: LD_ADDR_VAR 0 15
47918: PUSH
47919: LD_VAR 0 3
47923: PPUSH
47924: LD_VAR 0 4
47928: PPUSH
47929: CALL_OW 546
47933: ST_TO_ADDR
// if hex [ 1 ] then
47934: LD_VAR 0 15
47938: PUSH
47939: LD_INT 1
47941: ARRAY
47942: IFFALSE 47946
// exit ;
47944: GO 48403
// height := hex [ 2 ] ;
47946: LD_ADDR_VAR 0 13
47950: PUSH
47951: LD_VAR 0 15
47955: PUSH
47956: LD_INT 2
47958: ARRAY
47959: ST_TO_ADDR
// for i = 1 to hexes do
47960: LD_ADDR_VAR 0 7
47964: PUSH
47965: DOUBLE
47966: LD_INT 1
47968: DEC
47969: ST_TO_ADDR
47970: LD_VAR 0 12
47974: PUSH
47975: FOR_TO
47976: IFFALSE 48320
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47978: LD_VAR 0 12
47982: PUSH
47983: LD_VAR 0 7
47987: ARRAY
47988: PUSH
47989: LD_INT 1
47991: ARRAY
47992: PPUSH
47993: LD_VAR 0 12
47997: PUSH
47998: LD_VAR 0 7
48002: ARRAY
48003: PUSH
48004: LD_INT 2
48006: ARRAY
48007: PPUSH
48008: CALL_OW 488
48012: NOT
48013: IFTRUE 48055
48015: PUSH
48016: LD_VAR 0 12
48020: PUSH
48021: LD_VAR 0 7
48025: ARRAY
48026: PUSH
48027: LD_INT 1
48029: ARRAY
48030: PPUSH
48031: LD_VAR 0 12
48035: PUSH
48036: LD_VAR 0 7
48040: ARRAY
48041: PUSH
48042: LD_INT 2
48044: ARRAY
48045: PPUSH
48046: CALL_OW 428
48050: PUSH
48051: LD_INT 0
48053: GREATER
48054: OR
48055: IFTRUE 48093
48057: PUSH
48058: LD_VAR 0 12
48062: PUSH
48063: LD_VAR 0 7
48067: ARRAY
48068: PUSH
48069: LD_INT 1
48071: ARRAY
48072: PPUSH
48073: LD_VAR 0 12
48077: PUSH
48078: LD_VAR 0 7
48082: ARRAY
48083: PUSH
48084: LD_INT 2
48086: ARRAY
48087: PPUSH
48088: CALL_OW 351
48092: OR
48093: IFFALSE 48099
// exit ;
48095: POP
48096: POP
48097: GO 48403
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48099: LD_ADDR_VAR 0 8
48103: PUSH
48104: LD_VAR 0 12
48108: PUSH
48109: LD_VAR 0 7
48113: ARRAY
48114: PUSH
48115: LD_INT 1
48117: ARRAY
48118: PPUSH
48119: LD_VAR 0 12
48123: PUSH
48124: LD_VAR 0 7
48128: ARRAY
48129: PUSH
48130: LD_INT 2
48132: ARRAY
48133: PPUSH
48134: CALL_OW 546
48138: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48139: LD_VAR 0 8
48143: PUSH
48144: LD_INT 1
48146: ARRAY
48147: IFTRUE 48169
48149: PUSH
48150: LD_VAR 0 8
48154: PUSH
48155: LD_INT 2
48157: ARRAY
48158: PUSH
48159: LD_VAR 0 13
48163: PUSH
48164: LD_INT 2
48166: PLUS
48167: GREATER
48168: OR
48169: IFTRUE 48191
48171: PUSH
48172: LD_VAR 0 8
48176: PUSH
48177: LD_INT 2
48179: ARRAY
48180: PUSH
48181: LD_VAR 0 13
48185: PUSH
48186: LD_INT 2
48188: MINUS
48189: LESS
48190: OR
48191: IFTRUE 48259
48193: PUSH
48194: LD_VAR 0 8
48198: PUSH
48199: LD_INT 3
48201: ARRAY
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 8
48208: PUSH
48209: LD_INT 9
48211: PUSH
48212: LD_INT 10
48214: PUSH
48215: LD_INT 11
48217: PUSH
48218: LD_INT 12
48220: PUSH
48221: LD_INT 13
48223: PUSH
48224: LD_INT 16
48226: PUSH
48227: LD_INT 17
48229: PUSH
48230: LD_INT 18
48232: PUSH
48233: LD_INT 19
48235: PUSH
48236: LD_INT 20
48238: PUSH
48239: LD_INT 21
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: IN
48257: NOT
48258: OR
48259: IFTRUE 48272
48261: PUSH
48262: LD_VAR 0 8
48266: PUSH
48267: LD_INT 5
48269: ARRAY
48270: NOT
48271: OR
48272: IFTRUE 48312
48274: PUSH
48275: LD_VAR 0 8
48279: PUSH
48280: LD_INT 6
48282: ARRAY
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 7
48292: PUSH
48293: LD_INT 9
48295: PUSH
48296: LD_INT 10
48298: PUSH
48299: LD_INT 11
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: IN
48310: NOT
48311: OR
48312: IFFALSE 48318
// exit ;
48314: POP
48315: POP
48316: GO 48403
// end ;
48318: GO 47975
48320: POP
48321: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48322: LD_VAR 0 9
48326: PPUSH
48327: LD_VAR 0 3
48331: PPUSH
48332: LD_VAR 0 4
48336: PPUSH
48337: LD_INT 20
48339: PPUSH
48340: CALL 40222 0 4
48344: PUSH
48345: LD_INT 4
48347: ARRAY
48348: IFFALSE 48352
// exit ;
48350: GO 48403
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48352: LD_VAR 0 2
48356: PUSH
48357: LD_INT 29
48359: PUSH
48360: LD_INT 30
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: IN
48367: IFFALSE 48391
48369: PUSH
48370: LD_VAR 0 3
48374: PPUSH
48375: LD_VAR 0 4
48379: PPUSH
48380: LD_VAR 0 9
48384: PPUSH
48385: CALL_OW 440
48389: NOT
48390: AND
48391: IFFALSE 48395
// exit ;
48393: GO 48403
// result := true ;
48395: LD_ADDR_VAR 0 6
48399: PUSH
48400: LD_INT 1
48402: ST_TO_ADDR
// end ;
48403: LD_VAR 0 6
48407: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48408: LD_INT 0
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
48424: PPUSH
48425: PPUSH
48426: PPUSH
48427: PPUSH
48428: PPUSH
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
48437: PPUSH
48438: PPUSH
48439: PPUSH
48440: PPUSH
48441: PPUSH
48442: PPUSH
48443: PPUSH
48444: PPUSH
48445: PPUSH
48446: PPUSH
48447: PPUSH
48448: PPUSH
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
48455: PPUSH
48456: PPUSH
48457: PPUSH
48458: PPUSH
48459: PPUSH
48460: PPUSH
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
48465: PPUSH
48466: PPUSH
48467: PPUSH
// result = [ ] ;
48468: LD_ADDR_VAR 0 7
48472: PUSH
48473: EMPTY
48474: ST_TO_ADDR
// temp_list = [ ] ;
48475: LD_ADDR_VAR 0 9
48479: PUSH
48480: EMPTY
48481: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48482: LD_VAR 0 4
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: LD_INT 4
48501: PUSH
48502: LD_INT 5
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: IN
48513: NOT
48514: IFTRUE 48557
48516: PUSH
48517: LD_VAR 0 1
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: IN
48532: IFFALSE 48556
48534: PUSH
48535: LD_VAR 0 5
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: IN
48554: NOT
48555: AND
48556: OR
48557: IFFALSE 48561
// exit ;
48559: GO 66960
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48561: LD_VAR 0 1
48565: PUSH
48566: LD_INT 6
48568: PUSH
48569: LD_INT 7
48571: PUSH
48572: LD_INT 8
48574: PUSH
48575: LD_INT 13
48577: PUSH
48578: LD_INT 12
48580: PUSH
48581: LD_INT 15
48583: PUSH
48584: LD_INT 11
48586: PUSH
48587: LD_INT 14
48589: PUSH
48590: LD_INT 10
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: IN
48604: IFFALSE 48614
// btype = b_lab ;
48606: LD_ADDR_VAR 0 1
48610: PUSH
48611: LD_INT 6
48613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48614: LD_VAR 0 6
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: IN
48633: NOT
48634: IFTRUE 48702
48636: PUSH
48637: LD_VAR 0 1
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 2
48650: PUSH
48651: LD_INT 3
48653: PUSH
48654: LD_INT 6
48656: PUSH
48657: LD_INT 36
48659: PUSH
48660: LD_INT 4
48662: PUSH
48663: LD_INT 5
48665: PUSH
48666: LD_INT 31
48668: PUSH
48669: LD_INT 32
48671: PUSH
48672: LD_INT 33
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: IN
48688: NOT
48689: IFFALSE 48701
48691: PUSH
48692: LD_VAR 0 6
48696: PUSH
48697: LD_INT 1
48699: EQUAL
48700: AND
48701: OR
48702: IFTRUE 48734
48704: PUSH
48705: LD_VAR 0 1
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: IN
48720: NOT
48721: IFFALSE 48733
48723: PUSH
48724: LD_VAR 0 6
48728: PUSH
48729: LD_INT 2
48731: EQUAL
48732: AND
48733: OR
48734: IFFALSE 48744
// mode = 0 ;
48736: LD_ADDR_VAR 0 6
48740: PUSH
48741: LD_INT 0
48743: ST_TO_ADDR
// case mode of 0 :
48744: LD_VAR 0 6
48748: PUSH
48749: LD_INT 0
48751: DOUBLE
48752: EQUAL
48753: IFTRUE 48757
48755: GO 60210
48757: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48758: LD_ADDR_VAR 0 11
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 3
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48951: LD_ADDR_VAR 0 12
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 2
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49147: LD_ADDR_VAR 0 13
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: LD_INT 2
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 3
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49346: LD_ADDR_VAR 0 14
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49542: LD_ADDR_VAR 0 15
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49735: LD_ADDR_VAR 0 16
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 1
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: LD_INT 3
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49928: LD_ADDR_VAR 0 17
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 2
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50158: LD_ADDR_VAR 0 18
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 2
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50388: LD_ADDR_VAR 0 19
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50618: LD_ADDR_VAR 0 20
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50848: LD_ADDR_VAR 0 21
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51078: LD_ADDR_VAR 0 22
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51308: LD_ADDR_VAR 0 23
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 2
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 3
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51588: LD_ADDR_VAR 0 24
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 1
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 2
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51864: LD_ADDR_VAR 0 25
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 3
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52138: LD_ADDR_VAR 0 26
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 2
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 1
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 2
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52414: LD_ADDR_VAR 0 27
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 0
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: LD_INT 1
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 1
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: LD_INT 2
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52694: LD_ADDR_VAR 0 28
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 3
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: NEG
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52976: LD_ADDR_VAR 0 29
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: NEG
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: NEG
53167: PUSH
53168: LD_INT 3
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: LD_INT 2
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53255: LD_ADDR_VAR 0 30
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 3
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: LD_INT 3
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53533: LD_ADDR_VAR 0 31
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 0
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 1
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 2
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53811: LD_ADDR_VAR 0 32
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 3
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 2
54043: NEG
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54089: LD_ADDR_VAR 0 33
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: LD_INT 3
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54368: LD_ADDR_VAR 0 34
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 3
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 3
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54648: LD_ADDR_VAR 0 35
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54760: LD_ADDR_VAR 0 36
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54872: LD_ADDR_VAR 0 37
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54984: LD_ADDR_VAR 0 38
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 1
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55096: LD_ADDR_VAR 0 39
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55208: LD_ADDR_VAR 0 40
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55320: LD_ADDR_VAR 0 41
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: NEG
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: NEG
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 3
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 3
55594: NEG
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 3
55605: NEG
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 3
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55670: LD_ADDR_VAR 0 42
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 1
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 2
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 1
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: NEG
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 3
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 3
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: PUSH
55937: LD_INT 3
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 3
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56020: LD_ADDR_VAR 0 43
56024: PUSH
56025: LD_INT 0
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 3
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56368: LD_ADDR_VAR 0 44
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 2
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 2
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 2
56546: NEG
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: LD_INT 0
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 3
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 3
56642: NEG
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: NEG
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56718: LD_ADDR_VAR 0 45
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: LD_INT 2
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: NEG
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 3
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: LD_INT 3
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: LD_INT 3
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 2
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57068: LD_ADDR_VAR 0 46
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57416: LD_ADDR_VAR 0 47
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 0
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57567: LD_ADDR_VAR 0 48
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57714: LD_ADDR_VAR 0 49
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 2
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 2
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57858: LD_ADDR_VAR 0 50
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: NEG
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: LD_INT 2
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 2
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58002: LD_ADDR_VAR 0 51
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 0
58093: PUSH
58094: LD_INT 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58149: LD_ADDR_VAR 0 52
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 0
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: LD_INT 0
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 1
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 2
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58300: LD_ADDR_VAR 0 53
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 2
58499: NEG
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58530: LD_ADDR_VAR 0 54
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: LD_INT 1
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: LD_INT 1
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 2
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58760: LD_ADDR_VAR 0 55
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 0
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 2
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 2
58947: NEG
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 2
58959: NEG
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58990: LD_ADDR_VAR 0 56
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 0
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 1
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59220: LD_ADDR_VAR 0 57
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 2
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59450: LD_ADDR_VAR 0 58
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: LD_INT 0
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 1
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 2
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: NEG
59650: PUSH
59651: LD_INT 2
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59680: LD_ADDR_VAR 0 59
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59768: LD_ADDR_VAR 0 60
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59856: LD_ADDR_VAR 0 61
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 1
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59944: LD_ADDR_VAR 0 62
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 0
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60032: LD_ADDR_VAR 0 63
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 1
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: LD_INT 1
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60120: LD_ADDR_VAR 0 64
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// end ; 1 :
60208: GO 66105
60210: LD_INT 1
60212: DOUBLE
60213: EQUAL
60214: IFTRUE 60218
60216: GO 62841
60218: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60219: LD_ADDR_VAR 0 11
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 3
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60263: LD_ADDR_VAR 0 12
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60304: LD_ADDR_VAR 0 13
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: LD_INT 2
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 3
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: LD_INT 3
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60344: LD_ADDR_VAR 0 14
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60385: LD_ADDR_VAR 0 15
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60429: LD_ADDR_VAR 0 16
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 3
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 3
60448: NEG
60449: PUSH
60450: LD_INT 2
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: NEG
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60475: LD_ADDR_VAR 0 17
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: LD_INT 3
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 3
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60519: LD_ADDR_VAR 0 18
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: LIST
60559: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60560: LD_ADDR_VAR 0 19
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: LD_INT 3
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60600: LD_ADDR_VAR 0 20
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: LD_INT 3
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60641: LD_ADDR_VAR 0 21
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: LD_INT 0
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60685: LD_ADDR_VAR 0 22
60689: PUSH
60690: LD_INT 2
60692: NEG
60693: PUSH
60694: LD_INT 3
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: NEG
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 3
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60731: LD_ADDR_VAR 0 23
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 3
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: LD_INT 4
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60775: LD_ADDR_VAR 0 24
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 1
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 4
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: LIST
60815: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60816: LD_ADDR_VAR 0 25
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 4
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: LD_INT 4
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60856: LD_ADDR_VAR 0 26
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: NEG
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60897: LD_ADDR_VAR 0 27
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 3
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: LD_INT 1
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60941: LD_ADDR_VAR 0 28
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: LD_INT 4
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: LIST
60986: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60987: LD_ADDR_VAR 0 29
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 1
61017: PUSH
61018: LD_INT 2
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 4
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 4
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 5
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 5
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 1
61085: PUSH
61086: LD_INT 4
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: LD_INT 6
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 6
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 5
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61142: LD_ADDR_VAR 0 30
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 4
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 4
61211: PUSH
61212: LD_INT 1
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 5
61222: PUSH
61223: LD_INT 0
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 5
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 6
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 6
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61285: LD_ADDR_VAR 0 31
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 3
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 4
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 4
61332: PUSH
61333: LD_INT 4
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: LD_INT 4
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 5
61352: PUSH
61353: LD_INT 4
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 5
61362: PUSH
61363: LD_INT 5
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: LD_INT 5
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 6
61382: PUSH
61383: LD_INT 5
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 6
61392: PUSH
61393: LD_INT 6
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: LD_INT 6
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61424: LD_ADDR_VAR 0 32
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 1
61462: PUSH
61463: LD_INT 4
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 5
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 5
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: LD_INT 4
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: LD_INT 6
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: LD_INT 6
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: LD_INT 5
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61567: LD_ADDR_VAR 0 33
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: LD_INT 1
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 3
61585: NEG
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: NEG
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 4
61630: NEG
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: LD_INT 1
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 5
61653: NEG
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 5
61664: NEG
61665: PUSH
61666: LD_INT 1
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 5
61676: NEG
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 6
61687: NEG
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 6
61698: NEG
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61722: LD_ADDR_VAR 0 34
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: LD_INT 3
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: NEG
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: LD_INT 3
61781: NEG
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: LD_INT 4
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 4
61801: NEG
61802: PUSH
61803: LD_INT 5
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 5
61813: NEG
61814: PUSH
61815: LD_INT 4
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 5
61825: NEG
61826: PUSH
61827: LD_INT 5
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 5
61837: NEG
61838: PUSH
61839: LD_INT 6
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 6
61849: NEG
61850: PUSH
61851: LD_INT 5
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 6
61861: NEG
61862: PUSH
61863: LD_INT 6
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61885: LD_ADDR_VAR 0 41
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 2
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 3
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: LD_INT 2
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: LIST
61928: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61929: LD_ADDR_VAR 0 42
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: LIST
61969: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61970: LD_ADDR_VAR 0 43
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 2
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62010: LD_ADDR_VAR 0 44
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 2
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62051: LD_ADDR_VAR 0 45
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62095: LD_ADDR_VAR 0 46
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62141: LD_ADDR_VAR 0 47
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62174: LD_ADDR_VAR 0 48
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: LD_INT 1
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62205: LD_ADDR_VAR 0 49
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62234: LD_ADDR_VAR 0 50
62238: PUSH
62239: LD_INT 2
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 3
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62263: LD_ADDR_VAR 0 51
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62294: LD_ADDR_VAR 0 52
62298: PUSH
62299: LD_INT 3
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62327: LD_ADDR_VAR 0 53
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 2
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62371: LD_ADDR_VAR 0 54
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 3
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62412: LD_ADDR_VAR 0 55
62416: PUSH
62417: LD_INT 3
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: LD_INT 3
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62452: LD_ADDR_VAR 0 56
62456: PUSH
62457: LD_INT 1
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62493: LD_ADDR_VAR 0 57
62497: PUSH
62498: LD_INT 2
62500: NEG
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62537: LD_ADDR_VAR 0 58
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 3
62556: NEG
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: NEG
62569: PUSH
62570: LD_INT 3
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62583: LD_ADDR_VAR 0 59
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: LD_INT 2
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 2
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62627: LD_ADDR_VAR 0 60
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62668: LD_ADDR_VAR 0 61
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62708: LD_ADDR_VAR 0 62
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62749: LD_ADDR_VAR 0 63
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 2
62767: NEG
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: NEG
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62793: LD_ADDR_VAR 0 64
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 2
62812: NEG
62813: PUSH
62814: LD_INT 1
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 2
62824: NEG
62825: PUSH
62826: LD_INT 2
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: LIST
62838: ST_TO_ADDR
// end ; 2 :
62839: GO 66105
62841: LD_INT 2
62843: DOUBLE
62844: EQUAL
62845: IFTRUE 62849
62847: GO 66104
62849: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62850: LD_ADDR_VAR 0 29
62854: PUSH
62855: LD_INT 4
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 4
62867: PUSH
62868: LD_INT 1
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 5
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 5
62888: PUSH
62889: LD_INT 1
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 4
62898: PUSH
62899: LD_INT 1
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 3
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 5
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 3
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 4
62970: PUSH
62971: LD_INT 3
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 4
62980: PUSH
62981: LD_INT 4
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 3
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: LD_INT 3
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: PUSH
63018: LD_INT 4
63020: PUSH
63021: LD_INT 2
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: LD_INT 4
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 4
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: PUSH
63071: LD_INT 5
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: LD_INT 5
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: LD_INT 5
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 2
63122: NEG
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 3
63133: NEG
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 3
63144: NEG
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 2
63156: NEG
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 2
63167: NEG
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 4
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 4
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 4
63212: NEG
63213: PUSH
63214: LD_INT 2
63216: NEG
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 4
63235: NEG
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 4
63247: NEG
63248: PUSH
63249: LD_INT 5
63251: NEG
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 3
63259: NEG
63260: PUSH
63261: LD_INT 4
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 4
63283: NEG
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 5
63295: NEG
63296: PUSH
63297: LD_INT 4
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 5
63307: NEG
63308: PUSH
63309: LD_INT 5
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: NEG
63320: PUSH
63321: LD_INT 5
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 5
63331: NEG
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63388: LD_ADDR_VAR 0 30
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: LD_INT 4
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 4
63405: PUSH
63406: LD_INT 3
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 5
63415: PUSH
63416: LD_INT 4
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 5
63425: PUSH
63426: LD_INT 5
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 4
63435: PUSH
63436: LD_INT 5
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 3
63445: PUSH
63446: LD_INT 4
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 3
63475: PUSH
63476: LD_INT 5
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 3
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: LD_INT 4
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: LD_INT 3
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: LD_INT 2
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: NEG
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 4
63578: NEG
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 4
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 3
63601: NEG
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 3
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 4
63623: NEG
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 5
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 5
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: NEG
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 3
63669: NEG
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: NEG
63681: PUSH
63682: LD_INT 3
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 3
63692: NEG
63693: PUSH
63694: LD_INT 4
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 3
63728: NEG
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 4
63740: NEG
63741: PUSH
63742: LD_INT 3
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 4
63752: NEG
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 4
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 4
63776: NEG
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 4
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 5
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: LD_INT 4
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 3
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: LD_INT 4
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: LD_INT 5
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 5
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63935: LD_ADDR_VAR 0 31
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 4
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 3
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: LD_INT 4
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: LD_INT 5
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 0
63982: PUSH
63983: LD_INT 5
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: PUSH
63990: LD_INT 1
63992: NEG
63993: PUSH
63994: LD_INT 4
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: LD_INT 3
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 2
64014: PUSH
64015: LD_INT 5
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: NEG
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 3
64046: NEG
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: LD_INT 0
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 3
64080: NEG
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 4
64091: NEG
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 4
64102: NEG
64103: PUSH
64104: LD_INT 1
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 4
64114: NEG
64115: PUSH
64116: LD_INT 2
64118: NEG
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: NEG
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 4
64137: NEG
64138: PUSH
64139: LD_INT 4
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 4
64149: NEG
64150: PUSH
64151: LD_INT 5
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 3
64161: NEG
64162: PUSH
64163: LD_INT 4
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 4
64185: NEG
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 5
64197: NEG
64198: PUSH
64199: LD_INT 4
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 5
64209: NEG
64210: PUSH
64211: LD_INT 5
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 3
64221: NEG
64222: PUSH
64223: LD_INT 5
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 5
64233: NEG
64234: PUSH
64235: LD_INT 3
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: LD_INT 3
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 4
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 1
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 3
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 4
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 2
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 2
64335: NEG
64336: PUSH
64337: LD_INT 4
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 4
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 5
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 5
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 4
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 3
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 3
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 3
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 5
64430: PUSH
64431: LD_INT 2
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64485: LD_ADDR_VAR 0 32
64489: PUSH
64490: LD_INT 4
64492: NEG
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 4
64503: NEG
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 3
64515: NEG
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 4
64537: NEG
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 5
64548: NEG
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 5
64559: NEG
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 5
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 2
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 3
64594: NEG
64595: PUSH
64596: LD_INT 3
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 3
64606: NEG
64607: PUSH
64608: LD_INT 4
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 3
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: LD_INT 2
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 4
64654: NEG
64655: PUSH
64656: LD_INT 3
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 4
64666: NEG
64667: PUSH
64668: LD_INT 4
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 2
64678: NEG
64679: PUSH
64680: LD_INT 4
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 4
64690: NEG
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 4
64705: NEG
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 5
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: LD_INT 4
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: LD_INT 4
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 5
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 2
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: LD_INT 5
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 4
64887: PUSH
64888: LD_INT 2
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 4
64897: PUSH
64898: LD_INT 4
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 5
64917: PUSH
64918: LD_INT 4
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 5
64927: PUSH
64928: LD_INT 5
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 4
64937: PUSH
64938: LD_INT 5
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 4
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 3
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 5
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 3
64977: PUSH
64978: LD_INT 5
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65032: LD_ADDR_VAR 0 33
65036: PUSH
65037: LD_INT 4
65039: NEG
65040: PUSH
65041: LD_INT 4
65043: NEG
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 4
65051: NEG
65052: PUSH
65053: LD_INT 5
65055: NEG
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: NEG
65064: PUSH
65065: LD_INT 4
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: LD_INT 3
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 4
65087: NEG
65088: PUSH
65089: LD_INT 3
65091: NEG
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 5
65099: NEG
65100: PUSH
65101: LD_INT 4
65103: NEG
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 5
65111: NEG
65112: PUSH
65113: LD_INT 5
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 3
65123: NEG
65124: PUSH
65125: LD_INT 5
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 5
65135: NEG
65136: PUSH
65137: LD_INT 3
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 3
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 4
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 3
65172: NEG
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: LD_INT 2
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: LD_INT 2
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 3
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: LD_INT 4
65218: NEG
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: LD_INT 2
65229: NEG
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 2
65237: NEG
65238: PUSH
65239: LD_INT 4
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 4
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 4
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 5
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 5
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 4
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 3
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 3
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 5
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: LD_INT 3
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 3
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 4
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: LD_INT 4
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 4
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: LD_INT 4
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: LD_INT 4
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 0
65442: PUSH
65443: LD_INT 3
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: PUSH
65463: LD_INT 5
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 5
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: LD_INT 4
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: LD_INT 5
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: LD_INT 3
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65570: LD_ADDR_VAR 0 34
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: LD_INT 4
65580: NEG
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 5
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: LD_INT 4
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: LD_INT 3
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: LD_INT 3
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: LD_INT 4
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 5
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: PUSH
65657: LD_INT 3
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 5
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 3
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 3
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 4
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 3
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 2
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 4
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 4
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 4
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 5
65792: PUSH
65793: LD_INT 4
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 5
65802: PUSH
65803: LD_INT 5
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 4
65812: PUSH
65813: LD_INT 5
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: PUSH
65823: LD_INT 4
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 3
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 5
65842: PUSH
65843: LD_INT 3
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: PUSH
65853: LD_INT 5
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 2
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: LD_INT 4
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: LD_INT 4
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: LD_INT 2
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 2
65934: PUSH
65935: LD_INT 4
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 4
65955: NEG
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 3
65989: NEG
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: NEG
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 5
66011: NEG
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 5
66022: NEG
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 5
66034: NEG
66035: PUSH
66036: LD_INT 2
66038: NEG
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 3
66046: NEG
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: ST_TO_ADDR
// end ; end ;
66102: GO 66105
66104: POP
// case btype of b_depot , b_warehouse :
66105: LD_VAR 0 1
66109: PUSH
66110: LD_INT 0
66112: DOUBLE
66113: EQUAL
66114: IFTRUE 66124
66116: LD_INT 1
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66124
66122: GO 66325
66124: POP
// case nation of nation_american :
66125: LD_VAR 0 5
66129: PUSH
66130: LD_INT 1
66132: DOUBLE
66133: EQUAL
66134: IFTRUE 66138
66136: GO 66194
66138: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66139: LD_ADDR_VAR 0 9
66143: PUSH
66144: LD_VAR 0 11
66148: PUSH
66149: LD_VAR 0 12
66153: PUSH
66154: LD_VAR 0 13
66158: PUSH
66159: LD_VAR 0 14
66163: PUSH
66164: LD_VAR 0 15
66168: PUSH
66169: LD_VAR 0 16
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: PUSH
66182: LD_VAR 0 4
66186: PUSH
66187: LD_INT 1
66189: PLUS
66190: ARRAY
66191: ST_TO_ADDR
66192: GO 66323
66194: LD_INT 2
66196: DOUBLE
66197: EQUAL
66198: IFTRUE 66202
66200: GO 66258
66202: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66203: LD_ADDR_VAR 0 9
66207: PUSH
66208: LD_VAR 0 17
66212: PUSH
66213: LD_VAR 0 18
66217: PUSH
66218: LD_VAR 0 19
66222: PUSH
66223: LD_VAR 0 20
66227: PUSH
66228: LD_VAR 0 21
66232: PUSH
66233: LD_VAR 0 22
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: PUSH
66246: LD_VAR 0 4
66250: PUSH
66251: LD_INT 1
66253: PLUS
66254: ARRAY
66255: ST_TO_ADDR
66256: GO 66323
66258: LD_INT 3
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66266
66264: GO 66322
66266: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66267: LD_ADDR_VAR 0 9
66271: PUSH
66272: LD_VAR 0 23
66276: PUSH
66277: LD_VAR 0 24
66281: PUSH
66282: LD_VAR 0 25
66286: PUSH
66287: LD_VAR 0 26
66291: PUSH
66292: LD_VAR 0 27
66296: PUSH
66297: LD_VAR 0 28
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: PUSH
66310: LD_VAR 0 4
66314: PUSH
66315: LD_INT 1
66317: PLUS
66318: ARRAY
66319: ST_TO_ADDR
66320: GO 66323
66322: POP
66323: GO 66878
66325: LD_INT 2
66327: DOUBLE
66328: EQUAL
66329: IFTRUE 66339
66331: LD_INT 3
66333: DOUBLE
66334: EQUAL
66335: IFTRUE 66339
66337: GO 66395
66339: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66340: LD_ADDR_VAR 0 9
66344: PUSH
66345: LD_VAR 0 29
66349: PUSH
66350: LD_VAR 0 30
66354: PUSH
66355: LD_VAR 0 31
66359: PUSH
66360: LD_VAR 0 32
66364: PUSH
66365: LD_VAR 0 33
66369: PUSH
66370: LD_VAR 0 34
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: PUSH
66383: LD_VAR 0 4
66387: PUSH
66388: LD_INT 1
66390: PLUS
66391: ARRAY
66392: ST_TO_ADDR
66393: GO 66878
66395: LD_INT 16
66397: DOUBLE
66398: EQUAL
66399: IFTRUE 66457
66401: LD_INT 17
66403: DOUBLE
66404: EQUAL
66405: IFTRUE 66457
66407: LD_INT 18
66409: DOUBLE
66410: EQUAL
66411: IFTRUE 66457
66413: LD_INT 19
66415: DOUBLE
66416: EQUAL
66417: IFTRUE 66457
66419: LD_INT 22
66421: DOUBLE
66422: EQUAL
66423: IFTRUE 66457
66425: LD_INT 20
66427: DOUBLE
66428: EQUAL
66429: IFTRUE 66457
66431: LD_INT 21
66433: DOUBLE
66434: EQUAL
66435: IFTRUE 66457
66437: LD_INT 23
66439: DOUBLE
66440: EQUAL
66441: IFTRUE 66457
66443: LD_INT 24
66445: DOUBLE
66446: EQUAL
66447: IFTRUE 66457
66449: LD_INT 25
66451: DOUBLE
66452: EQUAL
66453: IFTRUE 66457
66455: GO 66513
66457: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66458: LD_ADDR_VAR 0 9
66462: PUSH
66463: LD_VAR 0 35
66467: PUSH
66468: LD_VAR 0 36
66472: PUSH
66473: LD_VAR 0 37
66477: PUSH
66478: LD_VAR 0 38
66482: PUSH
66483: LD_VAR 0 39
66487: PUSH
66488: LD_VAR 0 40
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_VAR 0 4
66505: PUSH
66506: LD_INT 1
66508: PLUS
66509: ARRAY
66510: ST_TO_ADDR
66511: GO 66878
66513: LD_INT 6
66515: DOUBLE
66516: EQUAL
66517: IFTRUE 66569
66519: LD_INT 7
66521: DOUBLE
66522: EQUAL
66523: IFTRUE 66569
66525: LD_INT 8
66527: DOUBLE
66528: EQUAL
66529: IFTRUE 66569
66531: LD_INT 13
66533: DOUBLE
66534: EQUAL
66535: IFTRUE 66569
66537: LD_INT 12
66539: DOUBLE
66540: EQUAL
66541: IFTRUE 66569
66543: LD_INT 15
66545: DOUBLE
66546: EQUAL
66547: IFTRUE 66569
66549: LD_INT 11
66551: DOUBLE
66552: EQUAL
66553: IFTRUE 66569
66555: LD_INT 14
66557: DOUBLE
66558: EQUAL
66559: IFTRUE 66569
66561: LD_INT 10
66563: DOUBLE
66564: EQUAL
66565: IFTRUE 66569
66567: GO 66625
66569: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66570: LD_ADDR_VAR 0 9
66574: PUSH
66575: LD_VAR 0 41
66579: PUSH
66580: LD_VAR 0 42
66584: PUSH
66585: LD_VAR 0 43
66589: PUSH
66590: LD_VAR 0 44
66594: PUSH
66595: LD_VAR 0 45
66599: PUSH
66600: LD_VAR 0 46
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: PUSH
66613: LD_VAR 0 4
66617: PUSH
66618: LD_INT 1
66620: PLUS
66621: ARRAY
66622: ST_TO_ADDR
66623: GO 66878
66625: LD_INT 36
66627: DOUBLE
66628: EQUAL
66629: IFTRUE 66633
66631: GO 66689
66633: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66634: LD_ADDR_VAR 0 9
66638: PUSH
66639: LD_VAR 0 47
66643: PUSH
66644: LD_VAR 0 48
66648: PUSH
66649: LD_VAR 0 49
66653: PUSH
66654: LD_VAR 0 50
66658: PUSH
66659: LD_VAR 0 51
66663: PUSH
66664: LD_VAR 0 52
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: PUSH
66677: LD_VAR 0 4
66681: PUSH
66682: LD_INT 1
66684: PLUS
66685: ARRAY
66686: ST_TO_ADDR
66687: GO 66878
66689: LD_INT 4
66691: DOUBLE
66692: EQUAL
66693: IFTRUE 66715
66695: LD_INT 5
66697: DOUBLE
66698: EQUAL
66699: IFTRUE 66715
66701: LD_INT 34
66703: DOUBLE
66704: EQUAL
66705: IFTRUE 66715
66707: LD_INT 37
66709: DOUBLE
66710: EQUAL
66711: IFTRUE 66715
66713: GO 66771
66715: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66716: LD_ADDR_VAR 0 9
66720: PUSH
66721: LD_VAR 0 53
66725: PUSH
66726: LD_VAR 0 54
66730: PUSH
66731: LD_VAR 0 55
66735: PUSH
66736: LD_VAR 0 56
66740: PUSH
66741: LD_VAR 0 57
66745: PUSH
66746: LD_VAR 0 58
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: PUSH
66759: LD_VAR 0 4
66763: PUSH
66764: LD_INT 1
66766: PLUS
66767: ARRAY
66768: ST_TO_ADDR
66769: GO 66878
66771: LD_INT 31
66773: DOUBLE
66774: EQUAL
66775: IFTRUE 66821
66777: LD_INT 32
66779: DOUBLE
66780: EQUAL
66781: IFTRUE 66821
66783: LD_INT 33
66785: DOUBLE
66786: EQUAL
66787: IFTRUE 66821
66789: LD_INT 27
66791: DOUBLE
66792: EQUAL
66793: IFTRUE 66821
66795: LD_INT 26
66797: DOUBLE
66798: EQUAL
66799: IFTRUE 66821
66801: LD_INT 28
66803: DOUBLE
66804: EQUAL
66805: IFTRUE 66821
66807: LD_INT 29
66809: DOUBLE
66810: EQUAL
66811: IFTRUE 66821
66813: LD_INT 30
66815: DOUBLE
66816: EQUAL
66817: IFTRUE 66821
66819: GO 66877
66821: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66822: LD_ADDR_VAR 0 9
66826: PUSH
66827: LD_VAR 0 59
66831: PUSH
66832: LD_VAR 0 60
66836: PUSH
66837: LD_VAR 0 61
66841: PUSH
66842: LD_VAR 0 62
66846: PUSH
66847: LD_VAR 0 63
66851: PUSH
66852: LD_VAR 0 64
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: PUSH
66865: LD_VAR 0 4
66869: PUSH
66870: LD_INT 1
66872: PLUS
66873: ARRAY
66874: ST_TO_ADDR
66875: GO 66878
66877: POP
// temp_list2 = [ ] ;
66878: LD_ADDR_VAR 0 10
66882: PUSH
66883: EMPTY
66884: ST_TO_ADDR
// for i in temp_list do
66885: LD_ADDR_VAR 0 8
66889: PUSH
66890: LD_VAR 0 9
66894: PUSH
66895: FOR_IN
66896: IFFALSE 66948
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66898: LD_ADDR_VAR 0 10
66902: PUSH
66903: LD_VAR 0 10
66907: PUSH
66908: LD_VAR 0 8
66912: PUSH
66913: LD_INT 1
66915: ARRAY
66916: PUSH
66917: LD_VAR 0 2
66921: PLUS
66922: PUSH
66923: LD_VAR 0 8
66927: PUSH
66928: LD_INT 2
66930: ARRAY
66931: PUSH
66932: LD_VAR 0 3
66936: PLUS
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: EMPTY
66943: LIST
66944: ADD
66945: ST_TO_ADDR
66946: GO 66895
66948: POP
66949: POP
// result = temp_list2 ;
66950: LD_ADDR_VAR 0 7
66954: PUSH
66955: LD_VAR 0 10
66959: ST_TO_ADDR
// end ;
66960: LD_VAR 0 7
66964: RET
// export function EnemyInRange ( unit , dist ) ; begin
66965: LD_INT 0
66967: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66968: LD_ADDR_VAR 0 3
66972: PUSH
66973: LD_VAR 0 1
66977: PPUSH
66978: CALL_OW 255
66982: PPUSH
66983: LD_VAR 0 1
66987: PPUSH
66988: CALL_OW 250
66992: PPUSH
66993: LD_VAR 0 1
66997: PPUSH
66998: CALL_OW 251
67002: PPUSH
67003: LD_VAR 0 2
67007: PPUSH
67008: CALL 40222 0 4
67012: PUSH
67013: LD_INT 4
67015: ARRAY
67016: ST_TO_ADDR
// end ;
67017: LD_VAR 0 3
67021: RET
// export function PlayerSeeMe ( unit ) ; begin
67022: LD_INT 0
67024: PPUSH
// result := See ( your_side , unit ) ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_OWVAR 2
67034: PPUSH
67035: LD_VAR 0 1
67039: PPUSH
67040: CALL_OW 292
67044: ST_TO_ADDR
// end ;
67045: LD_VAR 0 2
67049: RET
// export function ReverseDir ( unit ) ; begin
67050: LD_INT 0
67052: PPUSH
// if not unit then
67053: LD_VAR 0 1
67057: NOT
67058: IFFALSE 67062
// exit ;
67060: GO 67085
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67062: LD_ADDR_VAR 0 2
67066: PUSH
67067: LD_VAR 0 1
67071: PPUSH
67072: CALL_OW 254
67076: PUSH
67077: LD_INT 3
67079: PLUS
67080: PUSH
67081: LD_INT 6
67083: MOD
67084: ST_TO_ADDR
// end ;
67085: LD_VAR 0 2
67089: RET
// export function ReverseArray ( array ) ; var i ; begin
67090: LD_INT 0
67092: PPUSH
67093: PPUSH
// if not array then
67094: LD_VAR 0 1
67098: NOT
67099: IFFALSE 67103
// exit ;
67101: GO 67158
// result := [ ] ;
67103: LD_ADDR_VAR 0 2
67107: PUSH
67108: EMPTY
67109: ST_TO_ADDR
// for i := array downto 1 do
67110: LD_ADDR_VAR 0 3
67114: PUSH
67115: DOUBLE
67116: LD_VAR 0 1
67120: INC
67121: ST_TO_ADDR
67122: LD_INT 1
67124: PUSH
67125: FOR_DOWNTO
67126: IFFALSE 67156
// result := Join ( result , array [ i ] ) ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_VAR 0 2
67137: PPUSH
67138: LD_VAR 0 1
67142: PUSH
67143: LD_VAR 0 3
67147: ARRAY
67148: PPUSH
67149: CALL 72010 0 2
67153: ST_TO_ADDR
67154: GO 67125
67156: POP
67157: POP
// end ;
67158: LD_VAR 0 2
67162: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67163: LD_INT 0
67165: PPUSH
67166: PPUSH
67167: PPUSH
67168: PPUSH
67169: PPUSH
67170: PPUSH
// if not unit or not hexes then
67171: LD_VAR 0 1
67175: NOT
67176: IFTRUE 67185
67178: PUSH
67179: LD_VAR 0 2
67183: NOT
67184: OR
67185: IFFALSE 67189
// exit ;
67187: GO 67312
// dist := 9999 ;
67189: LD_ADDR_VAR 0 5
67193: PUSH
67194: LD_INT 9999
67196: ST_TO_ADDR
// for i = 1 to hexes do
67197: LD_ADDR_VAR 0 4
67201: PUSH
67202: DOUBLE
67203: LD_INT 1
67205: DEC
67206: ST_TO_ADDR
67207: LD_VAR 0 2
67211: PUSH
67212: FOR_TO
67213: IFFALSE 67300
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67215: LD_ADDR_VAR 0 6
67219: PUSH
67220: LD_VAR 0 1
67224: PPUSH
67225: LD_VAR 0 2
67229: PUSH
67230: LD_VAR 0 4
67234: ARRAY
67235: PUSH
67236: LD_INT 1
67238: ARRAY
67239: PPUSH
67240: LD_VAR 0 2
67244: PUSH
67245: LD_VAR 0 4
67249: ARRAY
67250: PUSH
67251: LD_INT 2
67253: ARRAY
67254: PPUSH
67255: CALL_OW 297
67259: ST_TO_ADDR
// if tdist < dist then
67260: LD_VAR 0 6
67264: PUSH
67265: LD_VAR 0 5
67269: LESS
67270: IFFALSE 67298
// begin hex := hexes [ i ] ;
67272: LD_ADDR_VAR 0 8
67276: PUSH
67277: LD_VAR 0 2
67281: PUSH
67282: LD_VAR 0 4
67286: ARRAY
67287: ST_TO_ADDR
// dist := tdist ;
67288: LD_ADDR_VAR 0 5
67292: PUSH
67293: LD_VAR 0 6
67297: ST_TO_ADDR
// end ; end ;
67298: GO 67212
67300: POP
67301: POP
// result := hex ;
67302: LD_ADDR_VAR 0 3
67306: PUSH
67307: LD_VAR 0 8
67311: ST_TO_ADDR
// end ;
67312: LD_VAR 0 3
67316: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67317: LD_INT 0
67319: PPUSH
67320: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67321: LD_VAR 0 1
67325: NOT
67326: IFTRUE 67365
67328: PUSH
67329: LD_VAR 0 1
67333: PUSH
67334: LD_INT 21
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 23
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PPUSH
67358: CALL_OW 69
67362: IN
67363: NOT
67364: OR
67365: IFFALSE 67369
// exit ;
67367: GO 67416
// for i = 1 to 3 do
67369: LD_ADDR_VAR 0 3
67373: PUSH
67374: DOUBLE
67375: LD_INT 1
67377: DEC
67378: ST_TO_ADDR
67379: LD_INT 3
67381: PUSH
67382: FOR_TO
67383: IFFALSE 67414
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67385: LD_VAR 0 1
67389: PPUSH
67390: CALL_OW 250
67394: PPUSH
67395: LD_VAR 0 1
67399: PPUSH
67400: CALL_OW 251
67404: PPUSH
67405: LD_INT 1
67407: PPUSH
67408: CALL_OW 453
67412: GO 67382
67414: POP
67415: POP
// end ;
67416: LD_VAR 0 2
67420: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67421: LD_INT 0
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
67428: PPUSH
// if not unit or not enemy_unit then
67429: LD_VAR 0 1
67433: NOT
67434: IFTRUE 67443
67436: PUSH
67437: LD_VAR 0 2
67441: NOT
67442: OR
67443: IFFALSE 67447
// exit ;
67445: GO 67928
// if GetLives ( i ) < 250 then
67447: LD_VAR 0 4
67451: PPUSH
67452: CALL_OW 256
67456: PUSH
67457: LD_INT 250
67459: LESS
67460: IFFALSE 67473
// begin ComAutodestruct ( i ) ;
67462: LD_VAR 0 4
67466: PPUSH
67467: CALL 67317 0 1
// exit ;
67471: GO 67928
// end ; x := GetX ( enemy_unit ) ;
67473: LD_ADDR_VAR 0 7
67477: PUSH
67478: LD_VAR 0 2
67482: PPUSH
67483: CALL_OW 250
67487: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67488: LD_ADDR_VAR 0 8
67492: PUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 251
67502: ST_TO_ADDR
// if not x or not y then
67503: LD_VAR 0 7
67507: NOT
67508: IFTRUE 67517
67510: PUSH
67511: LD_VAR 0 8
67515: NOT
67516: OR
67517: IFFALSE 67521
// exit ;
67519: GO 67928
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67521: LD_ADDR_VAR 0 6
67525: PUSH
67526: LD_VAR 0 7
67530: PPUSH
67531: LD_INT 0
67533: PPUSH
67534: LD_INT 4
67536: PPUSH
67537: CALL_OW 272
67541: PUSH
67542: LD_VAR 0 8
67546: PPUSH
67547: LD_INT 0
67549: PPUSH
67550: LD_INT 4
67552: PPUSH
67553: CALL_OW 273
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_VAR 0 7
67566: PPUSH
67567: LD_INT 1
67569: PPUSH
67570: LD_INT 4
67572: PPUSH
67573: CALL_OW 272
67577: PUSH
67578: LD_VAR 0 8
67582: PPUSH
67583: LD_INT 1
67585: PPUSH
67586: LD_INT 4
67588: PPUSH
67589: CALL_OW 273
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_VAR 0 7
67602: PPUSH
67603: LD_INT 2
67605: PPUSH
67606: LD_INT 4
67608: PPUSH
67609: CALL_OW 272
67613: PUSH
67614: LD_VAR 0 8
67618: PPUSH
67619: LD_INT 2
67621: PPUSH
67622: LD_INT 4
67624: PPUSH
67625: CALL_OW 273
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_VAR 0 7
67638: PPUSH
67639: LD_INT 3
67641: PPUSH
67642: LD_INT 4
67644: PPUSH
67645: CALL_OW 272
67649: PUSH
67650: LD_VAR 0 8
67654: PPUSH
67655: LD_INT 3
67657: PPUSH
67658: LD_INT 4
67660: PPUSH
67661: CALL_OW 273
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_VAR 0 7
67674: PPUSH
67675: LD_INT 4
67677: PPUSH
67678: LD_INT 4
67680: PPUSH
67681: CALL_OW 272
67685: PUSH
67686: LD_VAR 0 8
67690: PPUSH
67691: LD_INT 4
67693: PPUSH
67694: LD_INT 4
67696: PPUSH
67697: CALL_OW 273
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_VAR 0 7
67710: PPUSH
67711: LD_INT 5
67713: PPUSH
67714: LD_INT 4
67716: PPUSH
67717: CALL_OW 272
67721: PUSH
67722: LD_VAR 0 8
67726: PPUSH
67727: LD_INT 5
67729: PPUSH
67730: LD_INT 4
67732: PPUSH
67733: CALL_OW 273
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// for i = tmp downto 1 do
67750: LD_ADDR_VAR 0 4
67754: PUSH
67755: DOUBLE
67756: LD_VAR 0 6
67760: INC
67761: ST_TO_ADDR
67762: LD_INT 1
67764: PUSH
67765: FOR_DOWNTO
67766: IFFALSE 67869
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67768: LD_VAR 0 6
67772: PUSH
67773: LD_VAR 0 4
67777: ARRAY
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: PPUSH
67783: LD_VAR 0 6
67787: PUSH
67788: LD_VAR 0 4
67792: ARRAY
67793: PUSH
67794: LD_INT 2
67796: ARRAY
67797: PPUSH
67798: CALL_OW 488
67802: NOT
67803: IFTRUE 67845
67805: PUSH
67806: LD_VAR 0 6
67810: PUSH
67811: LD_VAR 0 4
67815: ARRAY
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: PPUSH
67821: LD_VAR 0 6
67825: PUSH
67826: LD_VAR 0 4
67830: ARRAY
67831: PUSH
67832: LD_INT 2
67834: ARRAY
67835: PPUSH
67836: CALL_OW 428
67840: PUSH
67841: LD_INT 0
67843: NONEQUAL
67844: OR
67845: IFFALSE 67867
// tmp := Delete ( tmp , i ) ;
67847: LD_ADDR_VAR 0 6
67851: PUSH
67852: LD_VAR 0 6
67856: PPUSH
67857: LD_VAR 0 4
67861: PPUSH
67862: CALL_OW 3
67866: ST_TO_ADDR
67867: GO 67765
67869: POP
67870: POP
// j := GetClosestHex ( unit , tmp ) ;
67871: LD_ADDR_VAR 0 5
67875: PUSH
67876: LD_VAR 0 1
67880: PPUSH
67881: LD_VAR 0 6
67885: PPUSH
67886: CALL 67163 0 2
67890: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67891: LD_VAR 0 1
67895: PPUSH
67896: LD_VAR 0 5
67900: PUSH
67901: LD_INT 1
67903: ARRAY
67904: PPUSH
67905: LD_VAR 0 5
67909: PUSH
67910: LD_INT 2
67912: ARRAY
67913: PPUSH
67914: CALL_OW 111
// result := j ;
67918: LD_ADDR_VAR 0 3
67922: PUSH
67923: LD_VAR 0 5
67927: ST_TO_ADDR
// end ;
67928: LD_VAR 0 3
67932: RET
// export function PrepareApemanSoldier ( ) ; begin
67933: LD_INT 0
67935: PPUSH
// uc_nation := 0 ;
67936: LD_ADDR_OWVAR 21
67940: PUSH
67941: LD_INT 0
67943: ST_TO_ADDR
// hc_sex := sex_male ;
67944: LD_ADDR_OWVAR 27
67948: PUSH
67949: LD_INT 1
67951: ST_TO_ADDR
// hc_name :=  ;
67952: LD_ADDR_OWVAR 26
67956: PUSH
67957: LD_STRING 
67959: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67960: LD_ADDR_OWVAR 28
67964: PUSH
67965: LD_INT 15
67967: ST_TO_ADDR
// hc_gallery :=  ;
67968: LD_ADDR_OWVAR 33
67972: PUSH
67973: LD_STRING 
67975: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67976: LD_ADDR_OWVAR 31
67980: PUSH
67981: LD_INT 0
67983: PPUSH
67984: LD_INT 3
67986: PPUSH
67987: CALL_OW 12
67991: PUSH
67992: LD_INT 0
67994: PPUSH
67995: LD_INT 3
67997: PPUSH
67998: CALL_OW 12
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68015: LD_ADDR_OWVAR 29
68019: PUSH
68020: LD_INT 10
68022: PUSH
68023: LD_INT 12
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: ST_TO_ADDR
// end ;
68030: LD_VAR 0 1
68034: RET
// export function PrepareApemanEngineer ( ) ; begin
68035: LD_INT 0
68037: PPUSH
// uc_nation := 0 ;
68038: LD_ADDR_OWVAR 21
68042: PUSH
68043: LD_INT 0
68045: ST_TO_ADDR
// hc_sex := sex_male ;
68046: LD_ADDR_OWVAR 27
68050: PUSH
68051: LD_INT 1
68053: ST_TO_ADDR
// hc_name :=  ;
68054: LD_ADDR_OWVAR 26
68058: PUSH
68059: LD_STRING 
68061: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68062: LD_ADDR_OWVAR 28
68066: PUSH
68067: LD_INT 16
68069: ST_TO_ADDR
// hc_gallery :=  ;
68070: LD_ADDR_OWVAR 33
68074: PUSH
68075: LD_STRING 
68077: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68078: LD_ADDR_OWVAR 31
68082: PUSH
68083: LD_INT 0
68085: PPUSH
68086: LD_INT 3
68088: PPUSH
68089: CALL_OW 12
68093: PUSH
68094: LD_INT 0
68096: PPUSH
68097: LD_INT 3
68099: PPUSH
68100: CALL_OW 12
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68117: LD_ADDR_OWVAR 29
68121: PUSH
68122: LD_INT 10
68124: PUSH
68125: LD_INT 12
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: ST_TO_ADDR
// end ;
68132: LD_VAR 0 1
68136: RET
// export function PrepareApeman ( agressivity ) ; begin
68137: LD_INT 0
68139: PPUSH
// uc_side := 0 ;
68140: LD_ADDR_OWVAR 20
68144: PUSH
68145: LD_INT 0
68147: ST_TO_ADDR
// uc_nation := 0 ;
68148: LD_ADDR_OWVAR 21
68152: PUSH
68153: LD_INT 0
68155: ST_TO_ADDR
// hc_sex := sex_male ;
68156: LD_ADDR_OWVAR 27
68160: PUSH
68161: LD_INT 1
68163: ST_TO_ADDR
// hc_class := class_apeman ;
68164: LD_ADDR_OWVAR 28
68168: PUSH
68169: LD_INT 12
68171: ST_TO_ADDR
// hc_gallery :=  ;
68172: LD_ADDR_OWVAR 33
68176: PUSH
68177: LD_STRING 
68179: ST_TO_ADDR
// hc_name :=  ;
68180: LD_ADDR_OWVAR 26
68184: PUSH
68185: LD_STRING 
68187: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
68188: LD_ADDR_OWVAR 29
68192: PUSH
68193: LD_INT 10
68195: PUSH
68196: LD_INT 12
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: ST_TO_ADDR
// if agressivity = 0 then
68203: LD_VAR 0 1
68207: PUSH
68208: LD_INT 0
68210: EQUAL
68211: IFFALSE 68223
// hc_agressivity := 0 else
68213: LD_ADDR_OWVAR 35
68217: PUSH
68218: LD_INT 0
68220: ST_TO_ADDR
68221: GO 68244
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68223: LD_ADDR_OWVAR 35
68227: PUSH
68228: LD_VAR 0 1
68232: NEG
68233: PPUSH
68234: LD_VAR 0 1
68238: PPUSH
68239: CALL_OW 12
68243: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68244: LD_ADDR_OWVAR 31
68248: PUSH
68249: LD_INT 0
68251: PPUSH
68252: LD_INT 3
68254: PPUSH
68255: CALL_OW 12
68259: PUSH
68260: LD_INT 0
68262: PPUSH
68263: LD_INT 3
68265: PPUSH
68266: CALL_OW 12
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: ST_TO_ADDR
// end ;
68283: LD_VAR 0 2
68287: RET
// export function PrepareTiger ( agressivity ) ; begin
68288: LD_INT 0
68290: PPUSH
// uc_side := 0 ;
68291: LD_ADDR_OWVAR 20
68295: PUSH
68296: LD_INT 0
68298: ST_TO_ADDR
// uc_nation := 0 ;
68299: LD_ADDR_OWVAR 21
68303: PUSH
68304: LD_INT 0
68306: ST_TO_ADDR
// InitHc ;
68307: CALL_OW 19
// hc_class := class_tiger ;
68311: LD_ADDR_OWVAR 28
68315: PUSH
68316: LD_INT 14
68318: ST_TO_ADDR
// hc_gallery :=  ;
68319: LD_ADDR_OWVAR 33
68323: PUSH
68324: LD_STRING 
68326: ST_TO_ADDR
// hc_name :=  ;
68327: LD_ADDR_OWVAR 26
68331: PUSH
68332: LD_STRING 
68334: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68335: LD_ADDR_OWVAR 35
68339: PUSH
68340: LD_VAR 0 1
68344: NEG
68345: PPUSH
68346: LD_VAR 0 1
68350: PPUSH
68351: CALL_OW 12
68355: ST_TO_ADDR
// end ;
68356: LD_VAR 0 2
68360: RET
// export function PrepareEnchidna ( ) ; begin
68361: LD_INT 0
68363: PPUSH
// uc_side := 0 ;
68364: LD_ADDR_OWVAR 20
68368: PUSH
68369: LD_INT 0
68371: ST_TO_ADDR
// uc_nation := 0 ;
68372: LD_ADDR_OWVAR 21
68376: PUSH
68377: LD_INT 0
68379: ST_TO_ADDR
// InitHc ;
68380: CALL_OW 19
// hc_class := class_baggie ;
68384: LD_ADDR_OWVAR 28
68388: PUSH
68389: LD_INT 13
68391: ST_TO_ADDR
// hc_gallery :=  ;
68392: LD_ADDR_OWVAR 33
68396: PUSH
68397: LD_STRING 
68399: ST_TO_ADDR
// hc_name :=  ;
68400: LD_ADDR_OWVAR 26
68404: PUSH
68405: LD_STRING 
68407: ST_TO_ADDR
// end ;
68408: LD_VAR 0 1
68412: RET
// export function PrepareFrog ( ) ; begin
68413: LD_INT 0
68415: PPUSH
// uc_side := 0 ;
68416: LD_ADDR_OWVAR 20
68420: PUSH
68421: LD_INT 0
68423: ST_TO_ADDR
// uc_nation := 0 ;
68424: LD_ADDR_OWVAR 21
68428: PUSH
68429: LD_INT 0
68431: ST_TO_ADDR
// InitHc ;
68432: CALL_OW 19
// hc_class := class_frog ;
68436: LD_ADDR_OWVAR 28
68440: PUSH
68441: LD_INT 19
68443: ST_TO_ADDR
// hc_gallery :=  ;
68444: LD_ADDR_OWVAR 33
68448: PUSH
68449: LD_STRING 
68451: ST_TO_ADDR
// hc_name :=  ;
68452: LD_ADDR_OWVAR 26
68456: PUSH
68457: LD_STRING 
68459: ST_TO_ADDR
// end ;
68460: LD_VAR 0 1
68464: RET
// export function PrepareFish ( ) ; begin
68465: LD_INT 0
68467: PPUSH
// uc_side := 0 ;
68468: LD_ADDR_OWVAR 20
68472: PUSH
68473: LD_INT 0
68475: ST_TO_ADDR
// uc_nation := 0 ;
68476: LD_ADDR_OWVAR 21
68480: PUSH
68481: LD_INT 0
68483: ST_TO_ADDR
// InitHc ;
68484: CALL_OW 19
// hc_class := class_fish ;
68488: LD_ADDR_OWVAR 28
68492: PUSH
68493: LD_INT 20
68495: ST_TO_ADDR
// hc_gallery :=  ;
68496: LD_ADDR_OWVAR 33
68500: PUSH
68501: LD_STRING 
68503: ST_TO_ADDR
// hc_name :=  ;
68504: LD_ADDR_OWVAR 26
68508: PUSH
68509: LD_STRING 
68511: ST_TO_ADDR
// end ;
68512: LD_VAR 0 1
68516: RET
// export function PrepareBird ( ) ; begin
68517: LD_INT 0
68519: PPUSH
// uc_side := 0 ;
68520: LD_ADDR_OWVAR 20
68524: PUSH
68525: LD_INT 0
68527: ST_TO_ADDR
// uc_nation := 0 ;
68528: LD_ADDR_OWVAR 21
68532: PUSH
68533: LD_INT 0
68535: ST_TO_ADDR
// InitHc ;
68536: CALL_OW 19
// hc_class := class_phororhacos ;
68540: LD_ADDR_OWVAR 28
68544: PUSH
68545: LD_INT 18
68547: ST_TO_ADDR
// hc_gallery :=  ;
68548: LD_ADDR_OWVAR 33
68552: PUSH
68553: LD_STRING 
68555: ST_TO_ADDR
// hc_name :=  ;
68556: LD_ADDR_OWVAR 26
68560: PUSH
68561: LD_STRING 
68563: ST_TO_ADDR
// end ;
68564: LD_VAR 0 1
68568: RET
// export function PrepareHorse ( ) ; begin
68569: LD_INT 0
68571: PPUSH
// uc_side := 0 ;
68572: LD_ADDR_OWVAR 20
68576: PUSH
68577: LD_INT 0
68579: ST_TO_ADDR
// uc_nation := 0 ;
68580: LD_ADDR_OWVAR 21
68584: PUSH
68585: LD_INT 0
68587: ST_TO_ADDR
// InitHc ;
68588: CALL_OW 19
// hc_class := class_horse ;
68592: LD_ADDR_OWVAR 28
68596: PUSH
68597: LD_INT 21
68599: ST_TO_ADDR
// hc_gallery :=  ;
68600: LD_ADDR_OWVAR 33
68604: PUSH
68605: LD_STRING 
68607: ST_TO_ADDR
// hc_name :=  ;
68608: LD_ADDR_OWVAR 26
68612: PUSH
68613: LD_STRING 
68615: ST_TO_ADDR
// end ;
68616: LD_VAR 0 1
68620: RET
// export function PrepareMastodont ( ) ; begin
68621: LD_INT 0
68623: PPUSH
// uc_side := 0 ;
68624: LD_ADDR_OWVAR 20
68628: PUSH
68629: LD_INT 0
68631: ST_TO_ADDR
// uc_nation := 0 ;
68632: LD_ADDR_OWVAR 21
68636: PUSH
68637: LD_INT 0
68639: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68640: LD_ADDR_OWVAR 37
68644: PUSH
68645: LD_INT 31
68647: ST_TO_ADDR
// vc_control := control_rider ;
68648: LD_ADDR_OWVAR 38
68652: PUSH
68653: LD_INT 4
68655: ST_TO_ADDR
// end ;
68656: LD_VAR 0 1
68660: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68661: LD_INT 0
68663: PPUSH
68664: PPUSH
68665: PPUSH
// uc_side = 0 ;
68666: LD_ADDR_OWVAR 20
68670: PUSH
68671: LD_INT 0
68673: ST_TO_ADDR
// uc_nation = 0 ;
68674: LD_ADDR_OWVAR 21
68678: PUSH
68679: LD_INT 0
68681: ST_TO_ADDR
// InitHc_All ( ) ;
68682: CALL_OW 584
// InitVc ;
68686: CALL_OW 20
// if mastodonts then
68690: LD_VAR 0 6
68694: IFFALSE 68761
// for i = 1 to mastodonts do
68696: LD_ADDR_VAR 0 11
68700: PUSH
68701: DOUBLE
68702: LD_INT 1
68704: DEC
68705: ST_TO_ADDR
68706: LD_VAR 0 6
68710: PUSH
68711: FOR_TO
68712: IFFALSE 68759
// begin vc_chassis := 31 ;
68714: LD_ADDR_OWVAR 37
68718: PUSH
68719: LD_INT 31
68721: ST_TO_ADDR
// vc_control := control_rider ;
68722: LD_ADDR_OWVAR 38
68726: PUSH
68727: LD_INT 4
68729: ST_TO_ADDR
// animal := CreateVehicle ;
68730: LD_ADDR_VAR 0 12
68734: PUSH
68735: CALL_OW 45
68739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68740: LD_VAR 0 12
68744: PPUSH
68745: LD_VAR 0 8
68749: PPUSH
68750: LD_INT 0
68752: PPUSH
68753: CALL 70903 0 3
// end ;
68757: GO 68711
68759: POP
68760: POP
// if horses then
68761: LD_VAR 0 5
68765: IFFALSE 68832
// for i = 1 to horses do
68767: LD_ADDR_VAR 0 11
68771: PUSH
68772: DOUBLE
68773: LD_INT 1
68775: DEC
68776: ST_TO_ADDR
68777: LD_VAR 0 5
68781: PUSH
68782: FOR_TO
68783: IFFALSE 68830
// begin hc_class := 21 ;
68785: LD_ADDR_OWVAR 28
68789: PUSH
68790: LD_INT 21
68792: ST_TO_ADDR
// hc_gallery :=  ;
68793: LD_ADDR_OWVAR 33
68797: PUSH
68798: LD_STRING 
68800: ST_TO_ADDR
// animal := CreateHuman ;
68801: LD_ADDR_VAR 0 12
68805: PUSH
68806: CALL_OW 44
68810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68811: LD_VAR 0 12
68815: PPUSH
68816: LD_VAR 0 8
68820: PPUSH
68821: LD_INT 0
68823: PPUSH
68824: CALL 70903 0 3
// end ;
68828: GO 68782
68830: POP
68831: POP
// if birds then
68832: LD_VAR 0 1
68836: IFFALSE 68903
// for i = 1 to birds do
68838: LD_ADDR_VAR 0 11
68842: PUSH
68843: DOUBLE
68844: LD_INT 1
68846: DEC
68847: ST_TO_ADDR
68848: LD_VAR 0 1
68852: PUSH
68853: FOR_TO
68854: IFFALSE 68901
// begin hc_class := 18 ;
68856: LD_ADDR_OWVAR 28
68860: PUSH
68861: LD_INT 18
68863: ST_TO_ADDR
// hc_gallery =  ;
68864: LD_ADDR_OWVAR 33
68868: PUSH
68869: LD_STRING 
68871: ST_TO_ADDR
// animal := CreateHuman ;
68872: LD_ADDR_VAR 0 12
68876: PUSH
68877: CALL_OW 44
68881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68882: LD_VAR 0 12
68886: PPUSH
68887: LD_VAR 0 8
68891: PPUSH
68892: LD_INT 0
68894: PPUSH
68895: CALL 70903 0 3
// end ;
68899: GO 68853
68901: POP
68902: POP
// if tigers then
68903: LD_VAR 0 2
68907: IFFALSE 68991
// for i = 1 to tigers do
68909: LD_ADDR_VAR 0 11
68913: PUSH
68914: DOUBLE
68915: LD_INT 1
68917: DEC
68918: ST_TO_ADDR
68919: LD_VAR 0 2
68923: PUSH
68924: FOR_TO
68925: IFFALSE 68989
// begin hc_class = class_tiger ;
68927: LD_ADDR_OWVAR 28
68931: PUSH
68932: LD_INT 14
68934: ST_TO_ADDR
// hc_gallery =  ;
68935: LD_ADDR_OWVAR 33
68939: PUSH
68940: LD_STRING 
68942: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68943: LD_ADDR_OWVAR 35
68947: PUSH
68948: LD_INT 7
68950: NEG
68951: PPUSH
68952: LD_INT 7
68954: PPUSH
68955: CALL_OW 12
68959: ST_TO_ADDR
// animal := CreateHuman ;
68960: LD_ADDR_VAR 0 12
68964: PUSH
68965: CALL_OW 44
68969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68970: LD_VAR 0 12
68974: PPUSH
68975: LD_VAR 0 8
68979: PPUSH
68980: LD_INT 0
68982: PPUSH
68983: CALL 70903 0 3
// end ;
68987: GO 68924
68989: POP
68990: POP
// if apemans then
68991: LD_VAR 0 3
68995: IFFALSE 69118
// for i = 1 to apemans do
68997: LD_ADDR_VAR 0 11
69001: PUSH
69002: DOUBLE
69003: LD_INT 1
69005: DEC
69006: ST_TO_ADDR
69007: LD_VAR 0 3
69011: PUSH
69012: FOR_TO
69013: IFFALSE 69116
// begin hc_class = class_apeman ;
69015: LD_ADDR_OWVAR 28
69019: PUSH
69020: LD_INT 12
69022: ST_TO_ADDR
// hc_gallery =  ;
69023: LD_ADDR_OWVAR 33
69027: PUSH
69028: LD_STRING 
69030: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69031: LD_ADDR_OWVAR 35
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PPUSH
69040: LD_INT 2
69042: PPUSH
69043: CALL_OW 12
69047: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69048: LD_ADDR_OWVAR 31
69052: PUSH
69053: LD_INT 1
69055: PPUSH
69056: LD_INT 3
69058: PPUSH
69059: CALL_OW 12
69063: PUSH
69064: LD_INT 1
69066: PPUSH
69067: LD_INT 3
69069: PPUSH
69070: CALL_OW 12
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// animal := CreateHuman ;
69087: LD_ADDR_VAR 0 12
69091: PUSH
69092: CALL_OW 44
69096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69097: LD_VAR 0 12
69101: PPUSH
69102: LD_VAR 0 8
69106: PPUSH
69107: LD_INT 0
69109: PPUSH
69110: CALL 70903 0 3
// end ;
69114: GO 69012
69116: POP
69117: POP
// if enchidnas then
69118: LD_VAR 0 4
69122: IFFALSE 69189
// for i = 1 to enchidnas do
69124: LD_ADDR_VAR 0 11
69128: PUSH
69129: DOUBLE
69130: LD_INT 1
69132: DEC
69133: ST_TO_ADDR
69134: LD_VAR 0 4
69138: PUSH
69139: FOR_TO
69140: IFFALSE 69187
// begin hc_class = 13 ;
69142: LD_ADDR_OWVAR 28
69146: PUSH
69147: LD_INT 13
69149: ST_TO_ADDR
// hc_gallery =  ;
69150: LD_ADDR_OWVAR 33
69154: PUSH
69155: LD_STRING 
69157: ST_TO_ADDR
// animal := CreateHuman ;
69158: LD_ADDR_VAR 0 12
69162: PUSH
69163: CALL_OW 44
69167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69168: LD_VAR 0 12
69172: PPUSH
69173: LD_VAR 0 8
69177: PPUSH
69178: LD_INT 0
69180: PPUSH
69181: CALL 70903 0 3
// end ;
69185: GO 69139
69187: POP
69188: POP
// if fishes then
69189: LD_VAR 0 7
69193: IFFALSE 69260
// for i = 1 to fishes do
69195: LD_ADDR_VAR 0 11
69199: PUSH
69200: DOUBLE
69201: LD_INT 1
69203: DEC
69204: ST_TO_ADDR
69205: LD_VAR 0 7
69209: PUSH
69210: FOR_TO
69211: IFFALSE 69258
// begin hc_class = 20 ;
69213: LD_ADDR_OWVAR 28
69217: PUSH
69218: LD_INT 20
69220: ST_TO_ADDR
// hc_gallery =  ;
69221: LD_ADDR_OWVAR 33
69225: PUSH
69226: LD_STRING 
69228: ST_TO_ADDR
// animal := CreateHuman ;
69229: LD_ADDR_VAR 0 12
69233: PUSH
69234: CALL_OW 44
69238: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69239: LD_VAR 0 12
69243: PPUSH
69244: LD_VAR 0 9
69248: PPUSH
69249: LD_INT 0
69251: PPUSH
69252: CALL 70903 0 3
// end ;
69256: GO 69210
69258: POP
69259: POP
// end ;
69260: LD_VAR 0 10
69264: RET
// export function WantHeal ( sci , unit ) ; begin
69265: LD_INT 0
69267: PPUSH
// if GetTaskList ( sci ) > 0 then
69268: LD_VAR 0 1
69272: PPUSH
69273: CALL_OW 437
69277: PUSH
69278: LD_INT 0
69280: GREATER
69281: IFFALSE 69353
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69283: LD_VAR 0 1
69287: PPUSH
69288: CALL_OW 437
69292: PUSH
69293: LD_INT 1
69295: ARRAY
69296: PUSH
69297: LD_INT 1
69299: ARRAY
69300: PUSH
69301: LD_STRING l
69303: EQUAL
69304: IFFALSE 69331
69306: PUSH
69307: LD_VAR 0 1
69311: PPUSH
69312: CALL_OW 437
69316: PUSH
69317: LD_INT 1
69319: ARRAY
69320: PUSH
69321: LD_INT 4
69323: ARRAY
69324: PUSH
69325: LD_VAR 0 2
69329: EQUAL
69330: AND
69331: IFFALSE 69343
// result := true else
69333: LD_ADDR_VAR 0 3
69337: PUSH
69338: LD_INT 1
69340: ST_TO_ADDR
69341: GO 69351
// result := false ;
69343: LD_ADDR_VAR 0 3
69347: PUSH
69348: LD_INT 0
69350: ST_TO_ADDR
// end else
69351: GO 69361
// result := false ;
69353: LD_ADDR_VAR 0 3
69357: PUSH
69358: LD_INT 0
69360: ST_TO_ADDR
// end ;
69361: LD_VAR 0 3
69365: RET
// export function HealTarget ( sci ) ; begin
69366: LD_INT 0
69368: PPUSH
// if not sci then
69369: LD_VAR 0 1
69373: NOT
69374: IFFALSE 69378
// exit ;
69376: GO 69443
// result := 0 ;
69378: LD_ADDR_VAR 0 2
69382: PUSH
69383: LD_INT 0
69385: ST_TO_ADDR
// if GetTaskList ( sci ) then
69386: LD_VAR 0 1
69390: PPUSH
69391: CALL_OW 437
69395: IFFALSE 69443
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69397: LD_VAR 0 1
69401: PPUSH
69402: CALL_OW 437
69406: PUSH
69407: LD_INT 1
69409: ARRAY
69410: PUSH
69411: LD_INT 1
69413: ARRAY
69414: PUSH
69415: LD_STRING l
69417: EQUAL
69418: IFFALSE 69443
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69420: LD_ADDR_VAR 0 2
69424: PUSH
69425: LD_VAR 0 1
69429: PPUSH
69430: CALL_OW 437
69434: PUSH
69435: LD_INT 1
69437: ARRAY
69438: PUSH
69439: LD_INT 4
69441: ARRAY
69442: ST_TO_ADDR
// end ;
69443: LD_VAR 0 2
69447: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69448: LD_INT 0
69450: PPUSH
69451: PPUSH
69452: PPUSH
69453: PPUSH
// if not base_units then
69454: LD_VAR 0 1
69458: NOT
69459: IFFALSE 69463
// exit ;
69461: GO 69550
// result := false ;
69463: LD_ADDR_VAR 0 2
69467: PUSH
69468: LD_INT 0
69470: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69471: LD_ADDR_VAR 0 5
69475: PUSH
69476: LD_VAR 0 1
69480: PPUSH
69481: LD_INT 21
69483: PUSH
69484: LD_INT 3
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PPUSH
69491: CALL_OW 72
69495: ST_TO_ADDR
// if not tmp then
69496: LD_VAR 0 5
69500: NOT
69501: IFFALSE 69505
// exit ;
69503: GO 69550
// for i in tmp do
69505: LD_ADDR_VAR 0 3
69509: PUSH
69510: LD_VAR 0 5
69514: PUSH
69515: FOR_IN
69516: IFFALSE 69548
// begin result := EnemyInRange ( i , 22 ) ;
69518: LD_ADDR_VAR 0 2
69522: PUSH
69523: LD_VAR 0 3
69527: PPUSH
69528: LD_INT 22
69530: PPUSH
69531: CALL 66965 0 2
69535: ST_TO_ADDR
// if result then
69536: LD_VAR 0 2
69540: IFFALSE 69546
// exit ;
69542: POP
69543: POP
69544: GO 69550
// end ;
69546: GO 69515
69548: POP
69549: POP
// end ;
69550: LD_VAR 0 2
69554: RET
// export function FilterByTag ( units , tag ) ; begin
69555: LD_INT 0
69557: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69558: LD_ADDR_VAR 0 3
69562: PUSH
69563: LD_VAR 0 1
69567: PPUSH
69568: LD_INT 120
69570: PUSH
69571: LD_VAR 0 2
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PPUSH
69580: CALL_OW 72
69584: ST_TO_ADDR
// end ;
69585: LD_VAR 0 3
69589: RET
// export function IsDriver ( un ) ; begin
69590: LD_INT 0
69592: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69593: LD_ADDR_VAR 0 2
69597: PUSH
69598: LD_VAR 0 1
69602: PUSH
69603: LD_INT 55
69605: PUSH
69606: EMPTY
69607: LIST
69608: PPUSH
69609: CALL_OW 69
69613: IN
69614: ST_TO_ADDR
// end ;
69615: LD_VAR 0 2
69619: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69620: LD_INT 0
69622: PPUSH
69623: PPUSH
// list := [ ] ;
69624: LD_ADDR_VAR 0 5
69628: PUSH
69629: EMPTY
69630: ST_TO_ADDR
// case d of 0 :
69631: LD_VAR 0 3
69635: PUSH
69636: LD_INT 0
69638: DOUBLE
69639: EQUAL
69640: IFTRUE 69644
69642: GO 69777
69644: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69645: LD_ADDR_VAR 0 5
69649: PUSH
69650: LD_VAR 0 1
69654: PUSH
69655: LD_INT 4
69657: MINUS
69658: PUSH
69659: LD_VAR 0 2
69663: PUSH
69664: LD_INT 4
69666: MINUS
69667: PUSH
69668: LD_INT 2
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: PUSH
69676: LD_VAR 0 1
69680: PUSH
69681: LD_INT 3
69683: MINUS
69684: PUSH
69685: LD_VAR 0 2
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: LIST
69697: PUSH
69698: LD_VAR 0 1
69702: PUSH
69703: LD_INT 4
69705: PLUS
69706: PUSH
69707: LD_VAR 0 2
69711: PUSH
69712: LD_INT 4
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: LIST
69719: PUSH
69720: LD_VAR 0 1
69724: PUSH
69725: LD_INT 3
69727: PLUS
69728: PUSH
69729: LD_VAR 0 2
69733: PUSH
69734: LD_INT 3
69736: PLUS
69737: PUSH
69738: LD_INT 5
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: PUSH
69746: LD_VAR 0 1
69750: PUSH
69751: LD_VAR 0 2
69755: PUSH
69756: LD_INT 4
69758: PLUS
69759: PUSH
69760: LD_INT 0
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: ST_TO_ADDR
// end ; 1 :
69775: GO 70475
69777: LD_INT 1
69779: DOUBLE
69780: EQUAL
69781: IFTRUE 69785
69783: GO 69918
69785: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69786: LD_ADDR_VAR 0 5
69790: PUSH
69791: LD_VAR 0 1
69795: PUSH
69796: LD_VAR 0 2
69800: PUSH
69801: LD_INT 4
69803: MINUS
69804: PUSH
69805: LD_INT 3
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: LIST
69812: PUSH
69813: LD_VAR 0 1
69817: PUSH
69818: LD_INT 3
69820: MINUS
69821: PUSH
69822: LD_VAR 0 2
69826: PUSH
69827: LD_INT 3
69829: MINUS
69830: PUSH
69831: LD_INT 2
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: LIST
69838: PUSH
69839: LD_VAR 0 1
69843: PUSH
69844: LD_INT 4
69846: MINUS
69847: PUSH
69848: LD_VAR 0 2
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: LIST
69860: PUSH
69861: LD_VAR 0 1
69865: PUSH
69866: LD_VAR 0 2
69870: PUSH
69871: LD_INT 3
69873: PLUS
69874: PUSH
69875: LD_INT 0
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: LIST
69882: PUSH
69883: LD_VAR 0 1
69887: PUSH
69888: LD_INT 4
69890: PLUS
69891: PUSH
69892: LD_VAR 0 2
69896: PUSH
69897: LD_INT 4
69899: PLUS
69900: PUSH
69901: LD_INT 5
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: ST_TO_ADDR
// end ; 2 :
69916: GO 70475
69918: LD_INT 2
69920: DOUBLE
69921: EQUAL
69922: IFTRUE 69926
69924: GO 70055
69926: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69927: LD_ADDR_VAR 0 5
69931: PUSH
69932: LD_VAR 0 1
69936: PUSH
69937: LD_VAR 0 2
69941: PUSH
69942: LD_INT 3
69944: MINUS
69945: PUSH
69946: LD_INT 3
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: LIST
69953: PUSH
69954: LD_VAR 0 1
69958: PUSH
69959: LD_INT 4
69961: PLUS
69962: PUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: LD_VAR 0 1
69980: PUSH
69981: LD_VAR 0 2
69985: PUSH
69986: LD_INT 4
69988: PLUS
69989: PUSH
69990: LD_INT 0
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: LIST
69997: PUSH
69998: LD_VAR 0 1
70002: PUSH
70003: LD_INT 3
70005: MINUS
70006: PUSH
70007: LD_VAR 0 2
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: PUSH
70020: LD_VAR 0 1
70024: PUSH
70025: LD_INT 4
70027: MINUS
70028: PUSH
70029: LD_VAR 0 2
70033: PUSH
70034: LD_INT 4
70036: MINUS
70037: PUSH
70038: LD_INT 2
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: ST_TO_ADDR
// end ; 3 :
70053: GO 70475
70055: LD_INT 3
70057: DOUBLE
70058: EQUAL
70059: IFTRUE 70063
70061: GO 70196
70063: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70064: LD_ADDR_VAR 0 5
70068: PUSH
70069: LD_VAR 0 1
70073: PUSH
70074: LD_INT 3
70076: PLUS
70077: PUSH
70078: LD_VAR 0 2
70082: PUSH
70083: LD_INT 4
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: LIST
70090: PUSH
70091: LD_VAR 0 1
70095: PUSH
70096: LD_INT 4
70098: PLUS
70099: PUSH
70100: LD_VAR 0 2
70104: PUSH
70105: LD_INT 4
70107: PLUS
70108: PUSH
70109: LD_INT 5
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: LIST
70116: PUSH
70117: LD_VAR 0 1
70121: PUSH
70122: LD_INT 4
70124: MINUS
70125: PUSH
70126: LD_VAR 0 2
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: PUSH
70139: LD_VAR 0 1
70143: PUSH
70144: LD_VAR 0 2
70148: PUSH
70149: LD_INT 4
70151: MINUS
70152: PUSH
70153: LD_INT 3
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: PUSH
70161: LD_VAR 0 1
70165: PUSH
70166: LD_INT 3
70168: MINUS
70169: PUSH
70170: LD_VAR 0 2
70174: PUSH
70175: LD_INT 3
70177: MINUS
70178: PUSH
70179: LD_INT 2
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: LIST
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: ST_TO_ADDR
// end ; 4 :
70194: GO 70475
70196: LD_INT 4
70198: DOUBLE
70199: EQUAL
70200: IFTRUE 70204
70202: GO 70337
70204: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70205: LD_ADDR_VAR 0 5
70209: PUSH
70210: LD_VAR 0 1
70214: PUSH
70215: LD_VAR 0 2
70219: PUSH
70220: LD_INT 4
70222: PLUS
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: LIST
70231: PUSH
70232: LD_VAR 0 1
70236: PUSH
70237: LD_INT 3
70239: PLUS
70240: PUSH
70241: LD_VAR 0 2
70245: PUSH
70246: LD_INT 3
70248: PLUS
70249: PUSH
70250: LD_INT 5
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: LIST
70257: PUSH
70258: LD_VAR 0 1
70262: PUSH
70263: LD_INT 4
70265: PLUS
70266: PUSH
70267: LD_VAR 0 2
70271: PUSH
70272: LD_INT 4
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: LIST
70279: PUSH
70280: LD_VAR 0 1
70284: PUSH
70285: LD_VAR 0 2
70289: PUSH
70290: LD_INT 3
70292: MINUS
70293: PUSH
70294: LD_INT 3
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: LIST
70301: PUSH
70302: LD_VAR 0 1
70306: PUSH
70307: LD_INT 4
70309: MINUS
70310: PUSH
70311: LD_VAR 0 2
70315: PUSH
70316: LD_INT 4
70318: MINUS
70319: PUSH
70320: LD_INT 2
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: ST_TO_ADDR
// end ; 5 :
70335: GO 70475
70337: LD_INT 5
70339: DOUBLE
70340: EQUAL
70341: IFTRUE 70345
70343: GO 70474
70345: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70346: LD_ADDR_VAR 0 5
70350: PUSH
70351: LD_VAR 0 1
70355: PUSH
70356: LD_INT 4
70358: MINUS
70359: PUSH
70360: LD_VAR 0 2
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: LIST
70372: PUSH
70373: LD_VAR 0 1
70377: PUSH
70378: LD_VAR 0 2
70382: PUSH
70383: LD_INT 4
70385: MINUS
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: LIST
70394: PUSH
70395: LD_VAR 0 1
70399: PUSH
70400: LD_INT 4
70402: PLUS
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_INT 4
70411: PLUS
70412: PUSH
70413: LD_INT 5
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: LIST
70420: PUSH
70421: LD_VAR 0 1
70425: PUSH
70426: LD_INT 3
70428: PLUS
70429: PUSH
70430: LD_VAR 0 2
70434: PUSH
70435: LD_INT 4
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 1
70447: PUSH
70448: LD_VAR 0 2
70452: PUSH
70453: LD_INT 3
70455: PLUS
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: ST_TO_ADDR
// end ; end ;
70472: GO 70475
70474: POP
// result := list ;
70475: LD_ADDR_VAR 0 4
70479: PUSH
70480: LD_VAR 0 5
70484: ST_TO_ADDR
// end ;
70485: LD_VAR 0 4
70489: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70490: LD_INT 0
70492: PPUSH
70493: PPUSH
70494: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70495: LD_VAR 0 1
70499: NOT
70500: IFTRUE 70528
70502: PUSH
70503: LD_VAR 0 2
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: LD_INT 3
70516: PUSH
70517: LD_INT 4
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: IN
70526: NOT
70527: OR
70528: IFFALSE 70532
// exit ;
70530: GO 70615
// tmp := [ ] ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: EMPTY
70538: ST_TO_ADDR
// for i in units do
70539: LD_ADDR_VAR 0 4
70543: PUSH
70544: LD_VAR 0 1
70548: PUSH
70549: FOR_IN
70550: IFFALSE 70584
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70552: LD_ADDR_VAR 0 5
70556: PUSH
70557: LD_VAR 0 5
70561: PPUSH
70562: LD_VAR 0 4
70566: PPUSH
70567: LD_VAR 0 2
70571: PPUSH
70572: CALL_OW 259
70576: PPUSH
70577: CALL 72010 0 2
70581: ST_TO_ADDR
70582: GO 70549
70584: POP
70585: POP
// if not tmp then
70586: LD_VAR 0 5
70590: NOT
70591: IFFALSE 70595
// exit ;
70593: GO 70615
// result := SortListByListDesc ( units , tmp ) ;
70595: LD_ADDR_VAR 0 3
70599: PUSH
70600: LD_VAR 0 1
70604: PPUSH
70605: LD_VAR 0 5
70609: PPUSH
70610: CALL_OW 77
70614: ST_TO_ADDR
// end ;
70615: LD_VAR 0 3
70619: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70620: LD_INT 0
70622: PPUSH
70623: PPUSH
70624: PPUSH
// result := false ;
70625: LD_ADDR_VAR 0 3
70629: PUSH
70630: LD_INT 0
70632: ST_TO_ADDR
// if not building then
70633: LD_VAR 0 2
70637: NOT
70638: IFFALSE 70642
// exit ;
70640: GO 70786
// x := GetX ( building ) ;
70642: LD_ADDR_VAR 0 4
70646: PUSH
70647: LD_VAR 0 2
70651: PPUSH
70652: CALL_OW 250
70656: ST_TO_ADDR
// y := GetY ( building ) ;
70657: LD_ADDR_VAR 0 5
70661: PUSH
70662: LD_VAR 0 2
70666: PPUSH
70667: CALL_OW 251
70671: ST_TO_ADDR
// if not x or not y then
70672: LD_VAR 0 4
70676: NOT
70677: IFTRUE 70686
70679: PUSH
70680: LD_VAR 0 5
70684: NOT
70685: OR
70686: IFFALSE 70690
// exit ;
70688: GO 70786
// if GetTaskList ( unit ) then
70690: LD_VAR 0 1
70694: PPUSH
70695: CALL_OW 437
70699: IFFALSE 70786
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70701: LD_STRING e
70703: PUSH
70704: LD_VAR 0 1
70708: PPUSH
70709: CALL_OW 437
70713: PUSH
70714: LD_INT 1
70716: ARRAY
70717: PUSH
70718: LD_INT 1
70720: ARRAY
70721: EQUAL
70722: IFFALSE 70749
70724: PUSH
70725: LD_VAR 0 4
70729: PUSH
70730: LD_VAR 0 1
70734: PPUSH
70735: CALL_OW 437
70739: PUSH
70740: LD_INT 1
70742: ARRAY
70743: PUSH
70744: LD_INT 2
70746: ARRAY
70747: EQUAL
70748: AND
70749: IFFALSE 70776
70751: PUSH
70752: LD_VAR 0 5
70756: PUSH
70757: LD_VAR 0 1
70761: PPUSH
70762: CALL_OW 437
70766: PUSH
70767: LD_INT 1
70769: ARRAY
70770: PUSH
70771: LD_INT 3
70773: ARRAY
70774: EQUAL
70775: AND
70776: IFFALSE 70786
// result := true end ;
70778: LD_ADDR_VAR 0 3
70782: PUSH
70783: LD_INT 1
70785: ST_TO_ADDR
// end ;
70786: LD_VAR 0 3
70790: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70791: LD_INT 0
70793: PPUSH
// result := false ;
70794: LD_ADDR_VAR 0 4
70798: PUSH
70799: LD_INT 0
70801: ST_TO_ADDR
// if GetTaskList ( unit ) then
70802: LD_VAR 0 1
70806: PPUSH
70807: CALL_OW 437
70811: IFFALSE 70898
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70813: LD_STRING M
70815: PUSH
70816: LD_VAR 0 1
70820: PPUSH
70821: CALL_OW 437
70825: PUSH
70826: LD_INT 1
70828: ARRAY
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: EQUAL
70834: IFFALSE 70861
70836: PUSH
70837: LD_VAR 0 2
70841: PUSH
70842: LD_VAR 0 1
70846: PPUSH
70847: CALL_OW 437
70851: PUSH
70852: LD_INT 1
70854: ARRAY
70855: PUSH
70856: LD_INT 2
70858: ARRAY
70859: EQUAL
70860: AND
70861: IFFALSE 70888
70863: PUSH
70864: LD_VAR 0 3
70868: PUSH
70869: LD_VAR 0 1
70873: PPUSH
70874: CALL_OW 437
70878: PUSH
70879: LD_INT 1
70881: ARRAY
70882: PUSH
70883: LD_INT 3
70885: ARRAY
70886: EQUAL
70887: AND
70888: IFFALSE 70898
// result := true ;
70890: LD_ADDR_VAR 0 4
70894: PUSH
70895: LD_INT 1
70897: ST_TO_ADDR
// end ; end ;
70898: LD_VAR 0 4
70902: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70903: LD_INT 0
70905: PPUSH
70906: PPUSH
70907: PPUSH
70908: PPUSH
// if not unit or not area then
70909: LD_VAR 0 1
70913: NOT
70914: IFTRUE 70923
70916: PUSH
70917: LD_VAR 0 2
70921: NOT
70922: OR
70923: IFFALSE 70927
// exit ;
70925: GO 71103
// tmp := AreaToList ( area , i ) ;
70927: LD_ADDR_VAR 0 6
70931: PUSH
70932: LD_VAR 0 2
70936: PPUSH
70937: LD_VAR 0 5
70941: PPUSH
70942: CALL_OW 517
70946: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70947: LD_ADDR_VAR 0 5
70951: PUSH
70952: DOUBLE
70953: LD_INT 1
70955: DEC
70956: ST_TO_ADDR
70957: LD_VAR 0 6
70961: PUSH
70962: LD_INT 1
70964: ARRAY
70965: PUSH
70966: FOR_TO
70967: IFFALSE 71101
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70969: LD_ADDR_VAR 0 7
70973: PUSH
70974: LD_VAR 0 6
70978: PUSH
70979: LD_INT 1
70981: ARRAY
70982: PUSH
70983: LD_VAR 0 5
70987: ARRAY
70988: PUSH
70989: LD_VAR 0 6
70993: PUSH
70994: LD_INT 2
70996: ARRAY
70997: PUSH
70998: LD_VAR 0 5
71002: ARRAY
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
71008: LD_INT 92
71010: PUSH
71011: LD_VAR 0 7
71015: PUSH
71016: LD_INT 1
71018: ARRAY
71019: PUSH
71020: LD_VAR 0 7
71024: PUSH
71025: LD_INT 2
71027: ARRAY
71028: PUSH
71029: LD_INT 2
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: PPUSH
71038: CALL_OW 69
71042: PUSH
71043: LD_INT 0
71045: EQUAL
71046: IFFALSE 71099
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71048: LD_VAR 0 1
71052: PPUSH
71053: LD_VAR 0 7
71057: PUSH
71058: LD_INT 1
71060: ARRAY
71061: PPUSH
71062: LD_VAR 0 7
71066: PUSH
71067: LD_INT 2
71069: ARRAY
71070: PPUSH
71071: LD_VAR 0 3
71075: PPUSH
71076: CALL_OW 48
// result := IsPlaced ( unit ) ;
71080: LD_ADDR_VAR 0 4
71084: PUSH
71085: LD_VAR 0 1
71089: PPUSH
71090: CALL_OW 305
71094: ST_TO_ADDR
// exit ;
71095: POP
71096: POP
71097: GO 71103
// end ; end ;
71099: GO 70966
71101: POP
71102: POP
// end ;
71103: LD_VAR 0 4
71107: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71108: LD_INT 0
71110: PPUSH
71111: PPUSH
71112: PPUSH
// if not side or side > 8 then
71113: LD_VAR 0 1
71117: NOT
71118: IFTRUE 71130
71120: PUSH
71121: LD_VAR 0 1
71125: PUSH
71126: LD_INT 8
71128: GREATER
71129: OR
71130: IFFALSE 71134
// exit ;
71132: GO 71321
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71134: LD_ADDR_VAR 0 4
71138: PUSH
71139: LD_INT 22
71141: PUSH
71142: LD_VAR 0 1
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 21
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PPUSH
71165: CALL_OW 69
71169: ST_TO_ADDR
// if not tmp then
71170: LD_VAR 0 4
71174: NOT
71175: IFFALSE 71179
// exit ;
71177: GO 71321
// enable_addtolog := true ;
71179: LD_ADDR_OWVAR 81
71183: PUSH
71184: LD_INT 1
71186: ST_TO_ADDR
// AddToLog ( [ ) ;
71187: LD_STRING [
71189: PPUSH
71190: CALL_OW 561
// for i in tmp do
71194: LD_ADDR_VAR 0 3
71198: PUSH
71199: LD_VAR 0 4
71203: PUSH
71204: FOR_IN
71205: IFFALSE 71312
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71207: LD_STRING [
71209: PUSH
71210: LD_VAR 0 3
71214: PPUSH
71215: CALL_OW 266
71219: STR
71220: PUSH
71221: LD_STRING , 
71223: STR
71224: PUSH
71225: LD_VAR 0 3
71229: PPUSH
71230: CALL_OW 250
71234: STR
71235: PUSH
71236: LD_STRING , 
71238: STR
71239: PUSH
71240: LD_VAR 0 3
71244: PPUSH
71245: CALL_OW 251
71249: STR
71250: PUSH
71251: LD_STRING , 
71253: STR
71254: PUSH
71255: LD_VAR 0 3
71259: PPUSH
71260: CALL_OW 254
71264: STR
71265: PUSH
71266: LD_STRING , 
71268: STR
71269: PUSH
71270: LD_VAR 0 3
71274: PPUSH
71275: LD_INT 1
71277: PPUSH
71278: CALL_OW 268
71282: STR
71283: PUSH
71284: LD_STRING , 
71286: STR
71287: PUSH
71288: LD_VAR 0 3
71292: PPUSH
71293: LD_INT 2
71295: PPUSH
71296: CALL_OW 268
71300: STR
71301: PUSH
71302: LD_STRING ],
71304: STR
71305: PPUSH
71306: CALL_OW 561
// end ;
71310: GO 71204
71312: POP
71313: POP
// AddToLog ( ]; ) ;
71314: LD_STRING ];
71316: PPUSH
71317: CALL_OW 561
// end ;
71321: LD_VAR 0 2
71325: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71326: LD_INT 0
71328: PPUSH
71329: PPUSH
71330: PPUSH
71331: PPUSH
71332: PPUSH
// if not area or not rate or not max then
71333: LD_VAR 0 1
71337: NOT
71338: IFTRUE 71347
71340: PUSH
71341: LD_VAR 0 2
71345: NOT
71346: OR
71347: IFTRUE 71356
71349: PUSH
71350: LD_VAR 0 4
71354: NOT
71355: OR
71356: IFFALSE 71360
// exit ;
71358: GO 71549
// while 1 do
71360: LD_INT 1
71362: IFFALSE 71549
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71364: LD_ADDR_VAR 0 9
71368: PUSH
71369: LD_VAR 0 1
71373: PPUSH
71374: LD_INT 1
71376: PPUSH
71377: CALL_OW 287
71381: PUSH
71382: LD_INT 10
71384: MUL
71385: ST_TO_ADDR
// r := rate / 10 ;
71386: LD_ADDR_VAR 0 7
71390: PUSH
71391: LD_VAR 0 2
71395: PUSH
71396: LD_INT 10
71398: DIVREAL
71399: ST_TO_ADDR
// time := 1 1$00 ;
71400: LD_ADDR_VAR 0 8
71404: PUSH
71405: LD_INT 2100
71407: ST_TO_ADDR
// if amount < min then
71408: LD_VAR 0 9
71412: PUSH
71413: LD_VAR 0 3
71417: LESS
71418: IFFALSE 71436
// r := r * 2 else
71420: LD_ADDR_VAR 0 7
71424: PUSH
71425: LD_VAR 0 7
71429: PUSH
71430: LD_INT 2
71432: MUL
71433: ST_TO_ADDR
71434: GO 71462
// if amount > max then
71436: LD_VAR 0 9
71440: PUSH
71441: LD_VAR 0 4
71445: GREATER
71446: IFFALSE 71462
// r := r / 2 ;
71448: LD_ADDR_VAR 0 7
71452: PUSH
71453: LD_VAR 0 7
71457: PUSH
71458: LD_INT 2
71460: DIVREAL
71461: ST_TO_ADDR
// time := time / r ;
71462: LD_ADDR_VAR 0 8
71466: PUSH
71467: LD_VAR 0 8
71471: PUSH
71472: LD_VAR 0 7
71476: DIVREAL
71477: ST_TO_ADDR
// if time < 0 then
71478: LD_VAR 0 8
71482: PUSH
71483: LD_INT 0
71485: LESS
71486: IFFALSE 71503
// time := time * - 1 ;
71488: LD_ADDR_VAR 0 8
71492: PUSH
71493: LD_VAR 0 8
71497: PUSH
71498: LD_INT 1
71500: NEG
71501: MUL
71502: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71503: LD_VAR 0 8
71507: PUSH
71508: LD_INT 35
71510: PPUSH
71511: LD_INT 875
71513: PPUSH
71514: CALL_OW 12
71518: PLUS
71519: PPUSH
71520: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71524: LD_INT 1
71526: PPUSH
71527: LD_INT 5
71529: PPUSH
71530: CALL_OW 12
71534: PPUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: LD_INT 1
71542: PPUSH
71543: CALL_OW 55
// end ;
71547: GO 71360
// end ;
71549: LD_VAR 0 5
71553: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71554: LD_INT 0
71556: PPUSH
71557: PPUSH
71558: PPUSH
71559: PPUSH
71560: PPUSH
71561: PPUSH
71562: PPUSH
71563: PPUSH
// if not turrets or not factories then
71564: LD_VAR 0 1
71568: NOT
71569: IFTRUE 71578
71571: PUSH
71572: LD_VAR 0 2
71576: NOT
71577: OR
71578: IFFALSE 71582
// exit ;
71580: GO 71889
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71582: LD_ADDR_VAR 0 10
71586: PUSH
71587: LD_INT 5
71589: PUSH
71590: LD_INT 6
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: LD_INT 4
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 3
71609: PUSH
71610: LD_INT 5
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 24
71624: PUSH
71625: LD_INT 25
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 23
71634: PUSH
71635: LD_INT 27
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 42
71648: PUSH
71649: LD_INT 43
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 44
71658: PUSH
71659: LD_INT 46
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 45
71668: PUSH
71669: LD_INT 47
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: LIST
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: LIST
71685: ST_TO_ADDR
// result := [ ] ;
71686: LD_ADDR_VAR 0 3
71690: PUSH
71691: EMPTY
71692: ST_TO_ADDR
// for i in turrets do
71693: LD_ADDR_VAR 0 4
71697: PUSH
71698: LD_VAR 0 1
71702: PUSH
71703: FOR_IN
71704: IFFALSE 71887
// begin nat := GetNation ( i ) ;
71706: LD_ADDR_VAR 0 7
71710: PUSH
71711: LD_VAR 0 4
71715: PPUSH
71716: CALL_OW 248
71720: ST_TO_ADDR
// weapon := 0 ;
71721: LD_ADDR_VAR 0 8
71725: PUSH
71726: LD_INT 0
71728: ST_TO_ADDR
// if not nat then
71729: LD_VAR 0 7
71733: NOT
71734: IFFALSE 71738
// continue ;
71736: GO 71703
// for j in list [ nat ] do
71738: LD_ADDR_VAR 0 5
71742: PUSH
71743: LD_VAR 0 10
71747: PUSH
71748: LD_VAR 0 7
71752: ARRAY
71753: PUSH
71754: FOR_IN
71755: IFFALSE 71796
// if GetBWeapon ( i ) = j [ 1 ] then
71757: LD_VAR 0 4
71761: PPUSH
71762: CALL_OW 269
71766: PUSH
71767: LD_VAR 0 5
71771: PUSH
71772: LD_INT 1
71774: ARRAY
71775: EQUAL
71776: IFFALSE 71794
// begin weapon := j [ 2 ] ;
71778: LD_ADDR_VAR 0 8
71782: PUSH
71783: LD_VAR 0 5
71787: PUSH
71788: LD_INT 2
71790: ARRAY
71791: ST_TO_ADDR
// break ;
71792: GO 71796
// end ;
71794: GO 71754
71796: POP
71797: POP
// if not weapon then
71798: LD_VAR 0 8
71802: NOT
71803: IFFALSE 71807
// continue ;
71805: GO 71703
// for k in factories do
71807: LD_ADDR_VAR 0 6
71811: PUSH
71812: LD_VAR 0 2
71816: PUSH
71817: FOR_IN
71818: IFFALSE 71883
// begin weapons := AvailableWeaponList ( k ) ;
71820: LD_ADDR_VAR 0 9
71824: PUSH
71825: LD_VAR 0 6
71829: PPUSH
71830: CALL_OW 478
71834: ST_TO_ADDR
// if not weapons then
71835: LD_VAR 0 9
71839: NOT
71840: IFFALSE 71844
// continue ;
71842: GO 71817
// if weapon in weapons then
71844: LD_VAR 0 8
71848: PUSH
71849: LD_VAR 0 9
71853: IN
71854: IFFALSE 71881
// begin result := [ i , weapon ] ;
71856: LD_ADDR_VAR 0 3
71860: PUSH
71861: LD_VAR 0 4
71865: PUSH
71866: LD_VAR 0 8
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: ST_TO_ADDR
// exit ;
71875: POP
71876: POP
71877: POP
71878: POP
71879: GO 71889
// end ; end ;
71881: GO 71817
71883: POP
71884: POP
// end ;
71885: GO 71703
71887: POP
71888: POP
// end ;
71889: LD_VAR 0 3
71893: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71894: LD_INT 0
71896: PPUSH
// if not side or side > 8 then
71897: LD_VAR 0 3
71901: NOT
71902: IFTRUE 71914
71904: PUSH
71905: LD_VAR 0 3
71909: PUSH
71910: LD_INT 8
71912: GREATER
71913: OR
71914: IFFALSE 71918
// exit ;
71916: GO 71977
// if not range then
71918: LD_VAR 0 4
71922: NOT
71923: IFFALSE 71934
// range := - 12 ;
71925: LD_ADDR_VAR 0 4
71929: PUSH
71930: LD_INT 12
71932: NEG
71933: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71934: LD_VAR 0 1
71938: PPUSH
71939: LD_VAR 0 2
71943: PPUSH
71944: LD_VAR 0 3
71948: PPUSH
71949: LD_VAR 0 4
71953: PPUSH
71954: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71958: LD_VAR 0 1
71962: PPUSH
71963: LD_VAR 0 2
71967: PPUSH
71968: LD_VAR 0 3
71972: PPUSH
71973: CALL_OW 331
// end ;
71977: LD_VAR 0 5
71981: RET
// export function Video ( mode ) ; begin
71982: LD_INT 0
71984: PPUSH
// ingame_video = mode ;
71985: LD_ADDR_OWVAR 52
71989: PUSH
71990: LD_VAR 0 1
71994: ST_TO_ADDR
// interface_hidden = mode ;
71995: LD_ADDR_OWVAR 54
71999: PUSH
72000: LD_VAR 0 1
72004: ST_TO_ADDR
// end ;
72005: LD_VAR 0 2
72009: RET
// export function Join ( array , element ) ; begin
72010: LD_INT 0
72012: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72013: LD_ADDR_VAR 0 3
72017: PUSH
72018: LD_VAR 0 1
72022: PPUSH
72023: LD_VAR 0 1
72027: PUSH
72028: LD_INT 1
72030: PLUS
72031: PPUSH
72032: LD_VAR 0 2
72036: PPUSH
72037: CALL_OW 1
72041: ST_TO_ADDR
// end ;
72042: LD_VAR 0 3
72046: RET
// export function JoinUnion ( array , element ) ; begin
72047: LD_INT 0
72049: PPUSH
// result := array union element ;
72050: LD_ADDR_VAR 0 3
72054: PUSH
72055: LD_VAR 0 1
72059: PUSH
72060: LD_VAR 0 2
72064: UNION
72065: ST_TO_ADDR
// end ;
72066: LD_VAR 0 3
72070: RET
// export function GetBehemoths ( side ) ; begin
72071: LD_INT 0
72073: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72074: LD_ADDR_VAR 0 2
72078: PUSH
72079: LD_INT 22
72081: PUSH
72082: LD_VAR 0 1
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: LD_INT 31
72093: PUSH
72094: LD_INT 25
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PPUSH
72105: CALL_OW 69
72109: ST_TO_ADDR
// end ;
72110: LD_VAR 0 2
72114: RET
// export function Shuffle ( array ) ; var i , index ; begin
72115: LD_INT 0
72117: PPUSH
72118: PPUSH
72119: PPUSH
// result := [ ] ;
72120: LD_ADDR_VAR 0 2
72124: PUSH
72125: EMPTY
72126: ST_TO_ADDR
// if not array then
72127: LD_VAR 0 1
72131: NOT
72132: IFFALSE 72136
// exit ;
72134: GO 72235
// Randomize ;
72136: CALL_OW 10
// for i = array downto 1 do
72140: LD_ADDR_VAR 0 3
72144: PUSH
72145: DOUBLE
72146: LD_VAR 0 1
72150: INC
72151: ST_TO_ADDR
72152: LD_INT 1
72154: PUSH
72155: FOR_DOWNTO
72156: IFFALSE 72233
// begin index := rand ( 1 , array ) ;
72158: LD_ADDR_VAR 0 4
72162: PUSH
72163: LD_INT 1
72165: PPUSH
72166: LD_VAR 0 1
72170: PPUSH
72171: CALL_OW 12
72175: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72176: LD_ADDR_VAR 0 2
72180: PUSH
72181: LD_VAR 0 2
72185: PPUSH
72186: LD_VAR 0 2
72190: PUSH
72191: LD_INT 1
72193: PLUS
72194: PPUSH
72195: LD_VAR 0 1
72199: PUSH
72200: LD_VAR 0 4
72204: ARRAY
72205: PPUSH
72206: CALL_OW 2
72210: ST_TO_ADDR
// array := Delete ( array , index ) ;
72211: LD_ADDR_VAR 0 1
72215: PUSH
72216: LD_VAR 0 1
72220: PPUSH
72221: LD_VAR 0 4
72225: PPUSH
72226: CALL_OW 3
72230: ST_TO_ADDR
// end ;
72231: GO 72155
72233: POP
72234: POP
// end ;
72235: LD_VAR 0 2
72239: RET
// export function GetBaseMaterials ( base ) ; begin
72240: LD_INT 0
72242: PPUSH
// result := [ 0 , 0 , 0 ] ;
72243: LD_ADDR_VAR 0 2
72247: PUSH
72248: LD_INT 0
72250: PUSH
72251: LD_INT 0
72253: PUSH
72254: LD_INT 0
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: LIST
72261: ST_TO_ADDR
// if not base then
72262: LD_VAR 0 1
72266: NOT
72267: IFFALSE 72271
// exit ;
72269: GO 72320
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72271: LD_ADDR_VAR 0 2
72275: PUSH
72276: LD_VAR 0 1
72280: PPUSH
72281: LD_INT 1
72283: PPUSH
72284: CALL_OW 275
72288: PUSH
72289: LD_VAR 0 1
72293: PPUSH
72294: LD_INT 2
72296: PPUSH
72297: CALL_OW 275
72301: PUSH
72302: LD_VAR 0 1
72306: PPUSH
72307: LD_INT 3
72309: PPUSH
72310: CALL_OW 275
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: ST_TO_ADDR
// end ;
72320: LD_VAR 0 2
72324: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72325: LD_INT 0
72327: PPUSH
72328: PPUSH
// result := array ;
72329: LD_ADDR_VAR 0 3
72333: PUSH
72334: LD_VAR 0 1
72338: ST_TO_ADDR
// if size >= result then
72339: LD_VAR 0 2
72343: PUSH
72344: LD_VAR 0 3
72348: GREATEREQUAL
72349: IFFALSE 72353
// exit ;
72351: GO 72403
// if size then
72353: LD_VAR 0 2
72357: IFFALSE 72403
// for i := array downto size do
72359: LD_ADDR_VAR 0 4
72363: PUSH
72364: DOUBLE
72365: LD_VAR 0 1
72369: INC
72370: ST_TO_ADDR
72371: LD_VAR 0 2
72375: PUSH
72376: FOR_DOWNTO
72377: IFFALSE 72401
// result := Delete ( result , result ) ;
72379: LD_ADDR_VAR 0 3
72383: PUSH
72384: LD_VAR 0 3
72388: PPUSH
72389: LD_VAR 0 3
72393: PPUSH
72394: CALL_OW 3
72398: ST_TO_ADDR
72399: GO 72376
72401: POP
72402: POP
// end ;
72403: LD_VAR 0 3
72407: RET
// export function ComExit ( unit ) ; var tmp ; begin
72408: LD_INT 0
72410: PPUSH
72411: PPUSH
// if not IsInUnit ( unit ) then
72412: LD_VAR 0 1
72416: PPUSH
72417: CALL_OW 310
72421: NOT
72422: IFFALSE 72426
// exit ;
72424: GO 72486
// tmp := IsInUnit ( unit ) ;
72426: LD_ADDR_VAR 0 3
72430: PUSH
72431: LD_VAR 0 1
72435: PPUSH
72436: CALL_OW 310
72440: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72441: LD_VAR 0 3
72445: PPUSH
72446: CALL_OW 247
72450: PUSH
72451: LD_INT 2
72453: EQUAL
72454: IFFALSE 72467
// ComExitVehicle ( unit ) else
72456: LD_VAR 0 1
72460: PPUSH
72461: CALL_OW 121
72465: GO 72476
// ComExitBuilding ( unit ) ;
72467: LD_VAR 0 1
72471: PPUSH
72472: CALL_OW 122
// result := tmp ;
72476: LD_ADDR_VAR 0 2
72480: PUSH
72481: LD_VAR 0 3
72485: ST_TO_ADDR
// end ;
72486: LD_VAR 0 2
72490: RET
// export function ComExitAll ( units ) ; var i ; begin
72491: LD_INT 0
72493: PPUSH
72494: PPUSH
// if not units then
72495: LD_VAR 0 1
72499: NOT
72500: IFFALSE 72504
// exit ;
72502: GO 72530
// for i in units do
72504: LD_ADDR_VAR 0 3
72508: PUSH
72509: LD_VAR 0 1
72513: PUSH
72514: FOR_IN
72515: IFFALSE 72528
// ComExit ( i ) ;
72517: LD_VAR 0 3
72521: PPUSH
72522: CALL 72408 0 1
72526: GO 72514
72528: POP
72529: POP
// end ;
72530: LD_VAR 0 2
72534: RET
// export function ResetHc ; begin
72535: LD_INT 0
72537: PPUSH
// InitHc ;
72538: CALL_OW 19
// hc_importance := 0 ;
72542: LD_ADDR_OWVAR 32
72546: PUSH
72547: LD_INT 0
72549: ST_TO_ADDR
// end ;
72550: LD_VAR 0 1
72554: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72555: LD_INT 0
72557: PPUSH
72558: PPUSH
72559: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72560: LD_ADDR_VAR 0 6
72564: PUSH
72565: LD_VAR 0 1
72569: PUSH
72570: LD_VAR 0 3
72574: PLUS
72575: PUSH
72576: LD_INT 2
72578: DIV
72579: ST_TO_ADDR
// if _x < 0 then
72580: LD_VAR 0 6
72584: PUSH
72585: LD_INT 0
72587: LESS
72588: IFFALSE 72605
// _x := _x * - 1 ;
72590: LD_ADDR_VAR 0 6
72594: PUSH
72595: LD_VAR 0 6
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: MUL
72604: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72605: LD_ADDR_VAR 0 7
72609: PUSH
72610: LD_VAR 0 2
72614: PUSH
72615: LD_VAR 0 4
72619: PLUS
72620: PUSH
72621: LD_INT 2
72623: DIV
72624: ST_TO_ADDR
// if _y < 0 then
72625: LD_VAR 0 7
72629: PUSH
72630: LD_INT 0
72632: LESS
72633: IFFALSE 72650
// _y := _y * - 1 ;
72635: LD_ADDR_VAR 0 7
72639: PUSH
72640: LD_VAR 0 7
72644: PUSH
72645: LD_INT 1
72647: NEG
72648: MUL
72649: ST_TO_ADDR
// result := [ _x , _y ] ;
72650: LD_ADDR_VAR 0 5
72654: PUSH
72655: LD_VAR 0 6
72659: PUSH
72660: LD_VAR 0 7
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: ST_TO_ADDR
// end ;
72669: LD_VAR 0 5
72673: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72674: LD_INT 0
72676: PPUSH
72677: PPUSH
72678: PPUSH
72679: PPUSH
// task := GetTaskList ( unit ) ;
72680: LD_ADDR_VAR 0 7
72684: PUSH
72685: LD_VAR 0 1
72689: PPUSH
72690: CALL_OW 437
72694: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72695: LD_VAR 0 7
72699: NOT
72700: IFFALSE 72719
72702: PUSH
72703: LD_VAR 0 1
72707: PPUSH
72708: LD_VAR 0 2
72712: PPUSH
72713: CALL_OW 308
72717: NOT
72718: AND
72719: IFFALSE 72723
// exit ;
72721: GO 72841
// if IsInArea ( unit , area ) then
72723: LD_VAR 0 1
72727: PPUSH
72728: LD_VAR 0 2
72732: PPUSH
72733: CALL_OW 308
72737: IFFALSE 72755
// begin ComMoveToArea ( unit , goAway ) ;
72739: LD_VAR 0 1
72743: PPUSH
72744: LD_VAR 0 3
72748: PPUSH
72749: CALL_OW 113
// exit ;
72753: GO 72841
// end ; if task [ 1 ] [ 1 ] <> M then
72755: LD_VAR 0 7
72759: PUSH
72760: LD_INT 1
72762: ARRAY
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: PUSH
72768: LD_STRING M
72770: NONEQUAL
72771: IFFALSE 72775
// exit ;
72773: GO 72841
// x := task [ 1 ] [ 2 ] ;
72775: LD_ADDR_VAR 0 5
72779: PUSH
72780: LD_VAR 0 7
72784: PUSH
72785: LD_INT 1
72787: ARRAY
72788: PUSH
72789: LD_INT 2
72791: ARRAY
72792: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72793: LD_ADDR_VAR 0 6
72797: PUSH
72798: LD_VAR 0 7
72802: PUSH
72803: LD_INT 1
72805: ARRAY
72806: PUSH
72807: LD_INT 3
72809: ARRAY
72810: ST_TO_ADDR
// if InArea ( x , y , area ) then
72811: LD_VAR 0 5
72815: PPUSH
72816: LD_VAR 0 6
72820: PPUSH
72821: LD_VAR 0 2
72825: PPUSH
72826: CALL_OW 309
72830: IFFALSE 72841
// ComStop ( unit ) ;
72832: LD_VAR 0 1
72836: PPUSH
72837: CALL_OW 141
// end ;
72841: LD_VAR 0 4
72845: RET
// export function Abs ( value ) ; begin
72846: LD_INT 0
72848: PPUSH
// result := value ;
72849: LD_ADDR_VAR 0 2
72853: PUSH
72854: LD_VAR 0 1
72858: ST_TO_ADDR
// if value < 0 then
72859: LD_VAR 0 1
72863: PUSH
72864: LD_INT 0
72866: LESS
72867: IFFALSE 72884
// result := value * - 1 ;
72869: LD_ADDR_VAR 0 2
72873: PUSH
72874: LD_VAR 0 1
72878: PUSH
72879: LD_INT 1
72881: NEG
72882: MUL
72883: ST_TO_ADDR
// end ;
72884: LD_VAR 0 2
72888: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72889: LD_INT 0
72891: PPUSH
72892: PPUSH
72893: PPUSH
72894: PPUSH
72895: PPUSH
72896: PPUSH
72897: PPUSH
72898: PPUSH
// if not unit or not building then
72899: LD_VAR 0 1
72903: NOT
72904: IFTRUE 72913
72906: PUSH
72907: LD_VAR 0 2
72911: NOT
72912: OR
72913: IFFALSE 72917
// exit ;
72915: GO 73145
// x := GetX ( building ) ;
72917: LD_ADDR_VAR 0 4
72921: PUSH
72922: LD_VAR 0 2
72926: PPUSH
72927: CALL_OW 250
72931: ST_TO_ADDR
// y := GetY ( building ) ;
72932: LD_ADDR_VAR 0 6
72936: PUSH
72937: LD_VAR 0 2
72941: PPUSH
72942: CALL_OW 251
72946: ST_TO_ADDR
// d := GetDir ( building ) ;
72947: LD_ADDR_VAR 0 8
72951: PUSH
72952: LD_VAR 0 2
72956: PPUSH
72957: CALL_OW 254
72961: ST_TO_ADDR
// r := 4 ;
72962: LD_ADDR_VAR 0 9
72966: PUSH
72967: LD_INT 4
72969: ST_TO_ADDR
// for i := 1 to 5 do
72970: LD_ADDR_VAR 0 10
72974: PUSH
72975: DOUBLE
72976: LD_INT 1
72978: DEC
72979: ST_TO_ADDR
72980: LD_INT 5
72982: PUSH
72983: FOR_TO
72984: IFFALSE 73143
// begin _x := ShiftX ( x , d , r + i ) ;
72986: LD_ADDR_VAR 0 5
72990: PUSH
72991: LD_VAR 0 4
72995: PPUSH
72996: LD_VAR 0 8
73000: PPUSH
73001: LD_VAR 0 9
73005: PUSH
73006: LD_VAR 0 10
73010: PLUS
73011: PPUSH
73012: CALL_OW 272
73016: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73017: LD_ADDR_VAR 0 7
73021: PUSH
73022: LD_VAR 0 6
73026: PPUSH
73027: LD_VAR 0 8
73031: PPUSH
73032: LD_VAR 0 9
73036: PUSH
73037: LD_VAR 0 10
73041: PLUS
73042: PPUSH
73043: CALL_OW 273
73047: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73048: LD_VAR 0 5
73052: PPUSH
73053: LD_VAR 0 7
73057: PPUSH
73058: CALL_OW 488
73062: IFFALSE 73097
73064: PUSH
73065: LD_VAR 0 5
73069: PPUSH
73070: LD_VAR 0 7
73074: PPUSH
73075: CALL_OW 428
73079: PPUSH
73080: CALL_OW 247
73084: PUSH
73085: LD_INT 3
73087: PUSH
73088: LD_INT 2
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: IN
73095: NOT
73096: AND
73097: IFFALSE 73141
// begin ComMoveXY ( unit , _x , _y ) ;
73099: LD_VAR 0 1
73103: PPUSH
73104: LD_VAR 0 5
73108: PPUSH
73109: LD_VAR 0 7
73113: PPUSH
73114: CALL_OW 111
// result := [ _x , _y ] ;
73118: LD_ADDR_VAR 0 3
73122: PUSH
73123: LD_VAR 0 5
73127: PUSH
73128: LD_VAR 0 7
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: ST_TO_ADDR
// exit ;
73137: POP
73138: POP
73139: GO 73145
// end ; end ;
73141: GO 72983
73143: POP
73144: POP
// end ;
73145: LD_VAR 0 3
73149: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73150: LD_INT 0
73152: PPUSH
73153: PPUSH
73154: PPUSH
// result := 0 ;
73155: LD_ADDR_VAR 0 3
73159: PUSH
73160: LD_INT 0
73162: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73163: LD_VAR 0 1
73167: PUSH
73168: LD_INT 0
73170: LESS
73171: IFTRUE 73183
73173: PUSH
73174: LD_VAR 0 1
73178: PUSH
73179: LD_INT 8
73181: GREATER
73182: OR
73183: IFTRUE 73195
73185: PUSH
73186: LD_VAR 0 2
73190: PUSH
73191: LD_INT 0
73193: LESS
73194: OR
73195: IFTRUE 73207
73197: PUSH
73198: LD_VAR 0 2
73202: PUSH
73203: LD_INT 8
73205: GREATER
73206: OR
73207: IFFALSE 73211
// exit ;
73209: GO 73286
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73211: LD_ADDR_VAR 0 4
73215: PUSH
73216: LD_INT 22
73218: PUSH
73219: LD_VAR 0 2
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PPUSH
73228: CALL_OW 69
73232: PUSH
73233: FOR_IN
73234: IFFALSE 73284
// begin un := UnitShoot ( i ) ;
73236: LD_ADDR_VAR 0 5
73240: PUSH
73241: LD_VAR 0 4
73245: PPUSH
73246: CALL_OW 504
73250: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73251: LD_VAR 0 5
73255: PPUSH
73256: CALL_OW 255
73260: PUSH
73261: LD_VAR 0 1
73265: EQUAL
73266: IFFALSE 73282
// begin result := un ;
73268: LD_ADDR_VAR 0 3
73272: PUSH
73273: LD_VAR 0 5
73277: ST_TO_ADDR
// exit ;
73278: POP
73279: POP
73280: GO 73286
// end ; end ;
73282: GO 73233
73284: POP
73285: POP
// end ;
73286: LD_VAR 0 3
73290: RET
// export function GetCargoBay ( units ) ; begin
73291: LD_INT 0
73293: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73294: LD_ADDR_VAR 0 2
73298: PUSH
73299: LD_VAR 0 1
73303: PPUSH
73304: LD_INT 2
73306: PUSH
73307: LD_INT 34
73309: PUSH
73310: LD_INT 12
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 34
73319: PUSH
73320: LD_INT 51
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: PUSH
73327: LD_INT 34
73329: PUSH
73330: LD_INT 32
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 34
73339: PUSH
73340: LD_INT 89
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: PPUSH
73354: CALL_OW 72
73358: ST_TO_ADDR
// end ;
73359: LD_VAR 0 2
73363: RET
// export function Negate ( value ) ; begin
73364: LD_INT 0
73366: PPUSH
// result := not value ;
73367: LD_ADDR_VAR 0 2
73371: PUSH
73372: LD_VAR 0 1
73376: NOT
73377: ST_TO_ADDR
// end ;
73378: LD_VAR 0 2
73382: RET
// export function Inc ( value ) ; begin
73383: LD_INT 0
73385: PPUSH
// result := value + 1 ;
73386: LD_ADDR_VAR 0 2
73390: PUSH
73391: LD_VAR 0 1
73395: PUSH
73396: LD_INT 1
73398: PLUS
73399: ST_TO_ADDR
// end ;
73400: LD_VAR 0 2
73404: RET
// export function Dec ( value ) ; begin
73405: LD_INT 0
73407: PPUSH
// result := value - 1 ;
73408: LD_ADDR_VAR 0 2
73412: PUSH
73413: LD_VAR 0 1
73417: PUSH
73418: LD_INT 1
73420: MINUS
73421: ST_TO_ADDR
// end ;
73422: LD_VAR 0 2
73426: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73427: LD_INT 0
73429: PPUSH
73430: PPUSH
73431: PPUSH
73432: PPUSH
73433: PPUSH
73434: PPUSH
73435: PPUSH
73436: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73437: LD_VAR 0 1
73441: PPUSH
73442: LD_VAR 0 2
73446: PPUSH
73447: CALL_OW 488
73451: NOT
73452: IFTRUE 73471
73454: PUSH
73455: LD_VAR 0 3
73459: PPUSH
73460: LD_VAR 0 4
73464: PPUSH
73465: CALL_OW 488
73469: NOT
73470: OR
73471: IFFALSE 73484
// begin result := - 1 ;
73473: LD_ADDR_VAR 0 5
73477: PUSH
73478: LD_INT 1
73480: NEG
73481: ST_TO_ADDR
// exit ;
73482: GO 73719
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73484: LD_ADDR_VAR 0 12
73488: PUSH
73489: LD_VAR 0 1
73493: PPUSH
73494: LD_VAR 0 2
73498: PPUSH
73499: LD_VAR 0 3
73503: PPUSH
73504: LD_VAR 0 4
73508: PPUSH
73509: CALL 72555 0 4
73513: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73514: LD_ADDR_VAR 0 11
73518: PUSH
73519: LD_VAR 0 1
73523: PPUSH
73524: LD_VAR 0 2
73528: PPUSH
73529: LD_VAR 0 12
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PPUSH
73538: LD_VAR 0 12
73542: PUSH
73543: LD_INT 2
73545: ARRAY
73546: PPUSH
73547: CALL_OW 298
73551: ST_TO_ADDR
// distance := 9999 ;
73552: LD_ADDR_VAR 0 10
73556: PUSH
73557: LD_INT 9999
73559: ST_TO_ADDR
// for i := 0 to 5 do
73560: LD_ADDR_VAR 0 6
73564: PUSH
73565: DOUBLE
73566: LD_INT 0
73568: DEC
73569: ST_TO_ADDR
73570: LD_INT 5
73572: PUSH
73573: FOR_TO
73574: IFFALSE 73717
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73576: LD_ADDR_VAR 0 7
73580: PUSH
73581: LD_VAR 0 1
73585: PPUSH
73586: LD_VAR 0 6
73590: PPUSH
73591: LD_VAR 0 11
73595: PPUSH
73596: CALL_OW 272
73600: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73601: LD_ADDR_VAR 0 8
73605: PUSH
73606: LD_VAR 0 2
73610: PPUSH
73611: LD_VAR 0 6
73615: PPUSH
73616: LD_VAR 0 11
73620: PPUSH
73621: CALL_OW 273
73625: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73626: LD_VAR 0 7
73630: PPUSH
73631: LD_VAR 0 8
73635: PPUSH
73636: CALL_OW 488
73640: NOT
73641: IFFALSE 73645
// continue ;
73643: GO 73573
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73645: LD_ADDR_VAR 0 9
73649: PUSH
73650: LD_VAR 0 12
73654: PUSH
73655: LD_INT 1
73657: ARRAY
73658: PPUSH
73659: LD_VAR 0 12
73663: PUSH
73664: LD_INT 2
73666: ARRAY
73667: PPUSH
73668: LD_VAR 0 7
73672: PPUSH
73673: LD_VAR 0 8
73677: PPUSH
73678: CALL_OW 298
73682: ST_TO_ADDR
// if tmp < distance then
73683: LD_VAR 0 9
73687: PUSH
73688: LD_VAR 0 10
73692: LESS
73693: IFFALSE 73715
// begin result := i ;
73695: LD_ADDR_VAR 0 5
73699: PUSH
73700: LD_VAR 0 6
73704: ST_TO_ADDR
// distance := tmp ;
73705: LD_ADDR_VAR 0 10
73709: PUSH
73710: LD_VAR 0 9
73714: ST_TO_ADDR
// end ; end ;
73715: GO 73573
73717: POP
73718: POP
// end ;
73719: LD_VAR 0 5
73723: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73724: LD_INT 0
73726: PPUSH
73727: PPUSH
// if not driver or not IsInUnit ( driver ) then
73728: LD_VAR 0 1
73732: NOT
73733: IFTRUE 73747
73735: PUSH
73736: LD_VAR 0 1
73740: PPUSH
73741: CALL_OW 310
73745: NOT
73746: OR
73747: IFFALSE 73751
// exit ;
73749: GO 73841
// vehicle := IsInUnit ( driver ) ;
73751: LD_ADDR_VAR 0 3
73755: PUSH
73756: LD_VAR 0 1
73760: PPUSH
73761: CALL_OW 310
73765: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73766: LD_VAR 0 1
73770: PPUSH
73771: LD_STRING \
73773: PUSH
73774: LD_INT 0
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: LD_INT 0
73782: PUSH
73783: LD_INT 0
73785: PUSH
73786: LD_INT 0
73788: PUSH
73789: LD_INT 0
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: PUSH
73801: LD_STRING E
73803: PUSH
73804: LD_INT 0
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: LD_VAR 0 3
73814: PUSH
73815: LD_INT 0
73817: PUSH
73818: LD_INT 0
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PPUSH
73837: CALL_OW 446
// end ;
73841: LD_VAR 0 2
73845: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73846: LD_INT 0
73848: PPUSH
73849: PPUSH
// if not driver or not IsInUnit ( driver ) then
73850: LD_VAR 0 1
73854: NOT
73855: IFTRUE 73869
73857: PUSH
73858: LD_VAR 0 1
73862: PPUSH
73863: CALL_OW 310
73867: NOT
73868: OR
73869: IFFALSE 73873
// exit ;
73871: GO 73963
// vehicle := IsInUnit ( driver ) ;
73873: LD_ADDR_VAR 0 3
73877: PUSH
73878: LD_VAR 0 1
73882: PPUSH
73883: CALL_OW 310
73887: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73888: LD_VAR 0 1
73892: PPUSH
73893: LD_STRING \
73895: PUSH
73896: LD_INT 0
73898: PUSH
73899: LD_INT 0
73901: PUSH
73902: LD_INT 0
73904: PUSH
73905: LD_INT 0
73907: PUSH
73908: LD_INT 0
73910: PUSH
73911: LD_INT 0
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: PUSH
73923: LD_STRING E
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: LD_INT 0
73931: PUSH
73932: LD_VAR 0 3
73936: PUSH
73937: LD_INT 0
73939: PUSH
73940: LD_INT 0
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: LIST
73950: LIST
73951: LIST
73952: LIST
73953: LIST
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PPUSH
73959: CALL_OW 447
// end ;
73963: LD_VAR 0 2
73967: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73968: LD_INT 0
73970: PPUSH
73971: PPUSH
73972: PPUSH
// tmp := [ ] ;
73973: LD_ADDR_VAR 0 5
73977: PUSH
73978: EMPTY
73979: ST_TO_ADDR
// for i in units do
73980: LD_ADDR_VAR 0 4
73984: PUSH
73985: LD_VAR 0 1
73989: PUSH
73990: FOR_IN
73991: IFFALSE 74029
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73993: LD_ADDR_VAR 0 5
73997: PUSH
73998: LD_VAR 0 5
74002: PPUSH
74003: LD_VAR 0 5
74007: PUSH
74008: LD_INT 1
74010: PLUS
74011: PPUSH
74012: LD_VAR 0 4
74016: PPUSH
74017: CALL_OW 256
74021: PPUSH
74022: CALL_OW 2
74026: ST_TO_ADDR
74027: GO 73990
74029: POP
74030: POP
// if not tmp then
74031: LD_VAR 0 5
74035: NOT
74036: IFFALSE 74040
// exit ;
74038: GO 74088
// if asc then
74040: LD_VAR 0 2
74044: IFFALSE 74068
// result := SortListByListAsc ( units , tmp ) else
74046: LD_ADDR_VAR 0 3
74050: PUSH
74051: LD_VAR 0 1
74055: PPUSH
74056: LD_VAR 0 5
74060: PPUSH
74061: CALL_OW 76
74065: ST_TO_ADDR
74066: GO 74088
// result := SortListByListDesc ( units , tmp ) ;
74068: LD_ADDR_VAR 0 3
74072: PUSH
74073: LD_VAR 0 1
74077: PPUSH
74078: LD_VAR 0 5
74082: PPUSH
74083: CALL_OW 77
74087: ST_TO_ADDR
// end ;
74088: LD_VAR 0 3
74092: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74093: LD_INT 0
74095: PPUSH
74096: PPUSH
// task := GetTaskList ( mech ) ;
74097: LD_ADDR_VAR 0 4
74101: PUSH
74102: LD_VAR 0 1
74106: PPUSH
74107: CALL_OW 437
74111: ST_TO_ADDR
// if not task then
74112: LD_VAR 0 4
74116: NOT
74117: IFFALSE 74121
// exit ;
74119: GO 74165
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74121: LD_ADDR_VAR 0 3
74125: PUSH
74126: LD_VAR 0 4
74130: PUSH
74131: LD_INT 1
74133: ARRAY
74134: PUSH
74135: LD_INT 1
74137: ARRAY
74138: PUSH
74139: LD_STRING r
74141: EQUAL
74142: IFFALSE 74164
74144: PUSH
74145: LD_VAR 0 4
74149: PUSH
74150: LD_INT 1
74152: ARRAY
74153: PUSH
74154: LD_INT 4
74156: ARRAY
74157: PUSH
74158: LD_VAR 0 2
74162: EQUAL
74163: AND
74164: ST_TO_ADDR
// end ;
74165: LD_VAR 0 3
74169: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74170: LD_INT 0
74172: PPUSH
// SetDir ( unit , d ) ;
74173: LD_VAR 0 1
74177: PPUSH
74178: LD_VAR 0 4
74182: PPUSH
74183: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
74187: LD_ADDR_VAR 0 6
74191: PUSH
74192: LD_VAR 0 1
74196: PPUSH
74197: LD_VAR 0 2
74201: PPUSH
74202: LD_VAR 0 3
74206: PPUSH
74207: LD_VAR 0 5
74211: PPUSH
74212: CALL_OW 48
74216: ST_TO_ADDR
// end ;
74217: LD_VAR 0 6
74221: RET
// export function ToNaturalNumber ( number ) ; begin
74222: LD_INT 0
74224: PPUSH
// result := number div 1 ;
74225: LD_ADDR_VAR 0 2
74229: PUSH
74230: LD_VAR 0 1
74234: PUSH
74235: LD_INT 1
74237: DIV
74238: ST_TO_ADDR
// if number < 0 then
74239: LD_VAR 0 1
74243: PUSH
74244: LD_INT 0
74246: LESS
74247: IFFALSE 74257
// result := 0 ;
74249: LD_ADDR_VAR 0 2
74253: PUSH
74254: LD_INT 0
74256: ST_TO_ADDR
// end ;
74257: LD_VAR 0 2
74261: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
74262: LD_INT 0
74264: PPUSH
74265: PPUSH
74266: PPUSH
// if not buildings then
74267: LD_VAR 0 1
74271: NOT
74272: IFFALSE 74276
// exit ;
74274: GO 74391
// tmp := [ ] ;
74276: LD_ADDR_VAR 0 5
74280: PUSH
74281: EMPTY
74282: ST_TO_ADDR
// for b in buildings do
74283: LD_ADDR_VAR 0 4
74287: PUSH
74288: LD_VAR 0 1
74292: PUSH
74293: FOR_IN
74294: IFFALSE 74332
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
74296: LD_ADDR_VAR 0 5
74300: PUSH
74301: LD_VAR 0 5
74305: PPUSH
74306: LD_VAR 0 5
74310: PUSH
74311: LD_INT 1
74313: PLUS
74314: PPUSH
74315: LD_VAR 0 4
74319: PPUSH
74320: CALL_OW 266
74324: PPUSH
74325: CALL_OW 1
74329: ST_TO_ADDR
74330: GO 74293
74332: POP
74333: POP
// if not tmp then
74334: LD_VAR 0 5
74338: NOT
74339: IFFALSE 74343
// exit ;
74341: GO 74391
// if asc then
74343: LD_VAR 0 2
74347: IFFALSE 74371
// result := SortListByListAsc ( buildings , tmp ) else
74349: LD_ADDR_VAR 0 3
74353: PUSH
74354: LD_VAR 0 1
74358: PPUSH
74359: LD_VAR 0 5
74363: PPUSH
74364: CALL_OW 76
74368: ST_TO_ADDR
74369: GO 74391
// result := SortListByListDesc ( buildings , tmp ) ;
74371: LD_ADDR_VAR 0 3
74375: PUSH
74376: LD_VAR 0 1
74380: PPUSH
74381: LD_VAR 0 5
74385: PPUSH
74386: CALL_OW 77
74390: ST_TO_ADDR
// end ;
74391: LD_VAR 0 3
74395: RET
// export function SortByClass ( units , class ) ; var un ; begin
74396: LD_INT 0
74398: PPUSH
74399: PPUSH
// if not units or not class then
74400: LD_VAR 0 1
74404: NOT
74405: IFTRUE 74414
74407: PUSH
74408: LD_VAR 0 2
74412: NOT
74413: OR
74414: IFFALSE 74418
// exit ;
74416: GO 74513
// result := [ ] ;
74418: LD_ADDR_VAR 0 3
74422: PUSH
74423: EMPTY
74424: ST_TO_ADDR
// for un in units do
74425: LD_ADDR_VAR 0 4
74429: PUSH
74430: LD_VAR 0 1
74434: PUSH
74435: FOR_IN
74436: IFFALSE 74511
// if GetClass ( un ) = class then
74438: LD_VAR 0 4
74442: PPUSH
74443: CALL_OW 257
74447: PUSH
74448: LD_VAR 0 2
74452: EQUAL
74453: IFFALSE 74480
// result := Insert ( result , 1 , un ) else
74455: LD_ADDR_VAR 0 3
74459: PUSH
74460: LD_VAR 0 3
74464: PPUSH
74465: LD_INT 1
74467: PPUSH
74468: LD_VAR 0 4
74472: PPUSH
74473: CALL_OW 2
74477: ST_TO_ADDR
74478: GO 74509
// result := Replace ( result , result + 1 , un ) ;
74480: LD_ADDR_VAR 0 3
74484: PUSH
74485: LD_VAR 0 3
74489: PPUSH
74490: LD_VAR 0 3
74494: PUSH
74495: LD_INT 1
74497: PLUS
74498: PPUSH
74499: LD_VAR 0 4
74503: PPUSH
74504: CALL_OW 1
74508: ST_TO_ADDR
74509: GO 74435
74511: POP
74512: POP
// end ;
74513: LD_VAR 0 3
74517: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74518: LD_INT 0
74520: PPUSH
74521: PPUSH
74522: PPUSH
74523: PPUSH
74524: PPUSH
74525: PPUSH
74526: PPUSH
// result := [ ] ;
74527: LD_ADDR_VAR 0 4
74531: PUSH
74532: EMPTY
74533: ST_TO_ADDR
// if x - r < 0 then
74534: LD_VAR 0 1
74538: PUSH
74539: LD_VAR 0 3
74543: MINUS
74544: PUSH
74545: LD_INT 0
74547: LESS
74548: IFFALSE 74560
// min_x := 0 else
74550: LD_ADDR_VAR 0 8
74554: PUSH
74555: LD_INT 0
74557: ST_TO_ADDR
74558: GO 74576
// min_x := x - r ;
74560: LD_ADDR_VAR 0 8
74564: PUSH
74565: LD_VAR 0 1
74569: PUSH
74570: LD_VAR 0 3
74574: MINUS
74575: ST_TO_ADDR
// if y - r < 0 then
74576: LD_VAR 0 2
74580: PUSH
74581: LD_VAR 0 3
74585: MINUS
74586: PUSH
74587: LD_INT 0
74589: LESS
74590: IFFALSE 74602
// min_y := 0 else
74592: LD_ADDR_VAR 0 7
74596: PUSH
74597: LD_INT 0
74599: ST_TO_ADDR
74600: GO 74618
// min_y := y - r ;
74602: LD_ADDR_VAR 0 7
74606: PUSH
74607: LD_VAR 0 2
74611: PUSH
74612: LD_VAR 0 3
74616: MINUS
74617: ST_TO_ADDR
// max_x := x + r ;
74618: LD_ADDR_VAR 0 9
74622: PUSH
74623: LD_VAR 0 1
74627: PUSH
74628: LD_VAR 0 3
74632: PLUS
74633: ST_TO_ADDR
// max_y := y + r ;
74634: LD_ADDR_VAR 0 10
74638: PUSH
74639: LD_VAR 0 2
74643: PUSH
74644: LD_VAR 0 3
74648: PLUS
74649: ST_TO_ADDR
// for _x = min_x to max_x do
74650: LD_ADDR_VAR 0 5
74654: PUSH
74655: DOUBLE
74656: LD_VAR 0 8
74660: DEC
74661: ST_TO_ADDR
74662: LD_VAR 0 9
74666: PUSH
74667: FOR_TO
74668: IFFALSE 74769
// for _y = min_y to max_y do
74670: LD_ADDR_VAR 0 6
74674: PUSH
74675: DOUBLE
74676: LD_VAR 0 7
74680: DEC
74681: ST_TO_ADDR
74682: LD_VAR 0 10
74686: PUSH
74687: FOR_TO
74688: IFFALSE 74765
// begin if not ValidHex ( _x , _y ) then
74690: LD_VAR 0 5
74694: PPUSH
74695: LD_VAR 0 6
74699: PPUSH
74700: CALL_OW 488
74704: NOT
74705: IFFALSE 74709
// continue ;
74707: GO 74687
// if GetResourceTypeXY ( _x , _y ) then
74709: LD_VAR 0 5
74713: PPUSH
74714: LD_VAR 0 6
74718: PPUSH
74719: CALL_OW 283
74723: IFFALSE 74763
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74725: LD_ADDR_VAR 0 4
74729: PUSH
74730: LD_VAR 0 4
74734: PPUSH
74735: LD_VAR 0 4
74739: PUSH
74740: LD_INT 1
74742: PLUS
74743: PPUSH
74744: LD_VAR 0 5
74748: PUSH
74749: LD_VAR 0 6
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PPUSH
74758: CALL_OW 1
74762: ST_TO_ADDR
// end ;
74763: GO 74687
74765: POP
74766: POP
74767: GO 74667
74769: POP
74770: POP
// end ;
74771: LD_VAR 0 4
74775: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74776: LD_INT 0
74778: PPUSH
74779: PPUSH
74780: PPUSH
74781: PPUSH
74782: PPUSH
74783: PPUSH
74784: PPUSH
74785: PPUSH
// if not units then
74786: LD_VAR 0 1
74790: NOT
74791: IFFALSE 74795
// exit ;
74793: GO 75327
// result := UnitFilter ( units , [ f_ok ] ) ;
74795: LD_ADDR_VAR 0 3
74799: PUSH
74800: LD_VAR 0 1
74804: PPUSH
74805: LD_INT 50
74807: PUSH
74808: EMPTY
74809: LIST
74810: PPUSH
74811: CALL_OW 72
74815: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74816: LD_ADDR_VAR 0 8
74820: PUSH
74821: LD_VAR 0 1
74825: PUSH
74826: LD_INT 1
74828: ARRAY
74829: PPUSH
74830: CALL_OW 255
74834: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74835: LD_ADDR_VAR 0 10
74839: PUSH
74840: LD_INT 29
74842: PUSH
74843: LD_INT 91
74845: PUSH
74846: LD_INT 49
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: LIST
74853: ST_TO_ADDR
// if not result then
74854: LD_VAR 0 3
74858: NOT
74859: IFFALSE 74863
// exit ;
74861: GO 75327
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74863: LD_ADDR_VAR 0 5
74867: PUSH
74868: LD_INT 81
74870: PUSH
74871: LD_VAR 0 8
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PPUSH
74880: CALL_OW 69
74884: ST_TO_ADDR
// for i in result do
74885: LD_ADDR_VAR 0 4
74889: PUSH
74890: LD_VAR 0 3
74894: PUSH
74895: FOR_IN
74896: IFFALSE 75325
// begin tag := GetTag ( i ) + 1 ;
74898: LD_ADDR_VAR 0 9
74902: PUSH
74903: LD_VAR 0 4
74907: PPUSH
74908: CALL_OW 110
74912: PUSH
74913: LD_INT 1
74915: PLUS
74916: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74917: LD_ADDR_VAR 0 7
74921: PUSH
74922: LD_VAR 0 4
74926: PPUSH
74927: CALL_OW 250
74931: PPUSH
74932: LD_VAR 0 4
74936: PPUSH
74937: CALL_OW 251
74941: PPUSH
74942: LD_INT 4
74944: PPUSH
74945: CALL 74518 0 3
74949: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74950: LD_VAR 0 4
74954: PPUSH
74955: CALL_OW 247
74959: PUSH
74960: LD_INT 2
74962: EQUAL
74963: IFFALSE 74975
74965: PUSH
74966: LD_VAR 0 7
74970: PUSH
74971: LD_INT 2
74973: GREATER
74974: AND
74975: IFFALSE 74995
74977: PUSH
74978: LD_VAR 0 4
74982: PPUSH
74983: CALL_OW 264
74987: PUSH
74988: LD_VAR 0 10
74992: IN
74993: NOT
74994: AND
74995: IFFALSE 75034
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74997: LD_VAR 0 4
75001: PPUSH
75002: LD_VAR 0 7
75006: PUSH
75007: LD_INT 1
75009: ARRAY
75010: PUSH
75011: LD_INT 1
75013: ARRAY
75014: PPUSH
75015: LD_VAR 0 7
75019: PUSH
75020: LD_INT 1
75022: ARRAY
75023: PUSH
75024: LD_INT 2
75026: ARRAY
75027: PPUSH
75028: CALL_OW 116
75032: GO 75323
// if path > tag then
75034: LD_VAR 0 2
75038: PUSH
75039: LD_VAR 0 9
75043: GREATER
75044: IFFALSE 75252
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75046: LD_ADDR_VAR 0 6
75050: PUSH
75051: LD_VAR 0 5
75055: PPUSH
75056: LD_INT 91
75058: PUSH
75059: LD_VAR 0 4
75063: PUSH
75064: LD_INT 8
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: PPUSH
75072: CALL_OW 72
75076: ST_TO_ADDR
// if nearEnemy then
75077: LD_VAR 0 6
75081: IFFALSE 75150
// begin if GetWeapon ( i ) = ru_time_lapser then
75083: LD_VAR 0 4
75087: PPUSH
75088: CALL_OW 264
75092: PUSH
75093: LD_INT 49
75095: EQUAL
75096: IFFALSE 75124
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75098: LD_VAR 0 4
75102: PPUSH
75103: LD_VAR 0 6
75107: PPUSH
75108: LD_VAR 0 4
75112: PPUSH
75113: CALL_OW 74
75117: PPUSH
75118: CALL_OW 112
75122: GO 75148
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75124: LD_VAR 0 4
75128: PPUSH
75129: LD_VAR 0 6
75133: PPUSH
75134: LD_VAR 0 4
75138: PPUSH
75139: CALL_OW 74
75143: PPUSH
75144: CALL 76408 0 2
// end else
75148: GO 75250
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75150: LD_VAR 0 4
75154: PPUSH
75155: LD_VAR 0 2
75159: PUSH
75160: LD_VAR 0 9
75164: ARRAY
75165: PUSH
75166: LD_INT 1
75168: ARRAY
75169: PPUSH
75170: LD_VAR 0 2
75174: PUSH
75175: LD_VAR 0 9
75179: ARRAY
75180: PUSH
75181: LD_INT 2
75183: ARRAY
75184: PPUSH
75185: CALL_OW 297
75189: PUSH
75190: LD_INT 6
75192: GREATER
75193: IFFALSE 75236
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75195: LD_VAR 0 4
75199: PPUSH
75200: LD_VAR 0 2
75204: PUSH
75205: LD_VAR 0 9
75209: ARRAY
75210: PUSH
75211: LD_INT 1
75213: ARRAY
75214: PPUSH
75215: LD_VAR 0 2
75219: PUSH
75220: LD_VAR 0 9
75224: ARRAY
75225: PUSH
75226: LD_INT 2
75228: ARRAY
75229: PPUSH
75230: CALL_OW 114
75234: GO 75250
// SetTag ( i , tag ) ;
75236: LD_VAR 0 4
75240: PPUSH
75241: LD_VAR 0 9
75245: PPUSH
75246: CALL_OW 109
// end else
75250: GO 75323
// if enemy then
75252: LD_VAR 0 5
75256: IFFALSE 75323
// begin if GetWeapon ( i ) = ru_time_lapser then
75258: LD_VAR 0 4
75262: PPUSH
75263: CALL_OW 264
75267: PUSH
75268: LD_INT 49
75270: EQUAL
75271: IFFALSE 75299
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75273: LD_VAR 0 4
75277: PPUSH
75278: LD_VAR 0 5
75282: PPUSH
75283: LD_VAR 0 4
75287: PPUSH
75288: CALL_OW 74
75292: PPUSH
75293: CALL_OW 112
75297: GO 75323
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75299: LD_VAR 0 4
75303: PPUSH
75304: LD_VAR 0 5
75308: PPUSH
75309: LD_VAR 0 4
75313: PPUSH
75314: CALL_OW 74
75318: PPUSH
75319: CALL 76408 0 2
// end ; end ;
75323: GO 74895
75325: POP
75326: POP
// end ;
75327: LD_VAR 0 3
75331: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75332: LD_INT 0
75334: PPUSH
75335: PPUSH
75336: PPUSH
// if not unit or IsInUnit ( unit ) then
75337: LD_VAR 0 1
75341: NOT
75342: IFTRUE 75355
75344: PUSH
75345: LD_VAR 0 1
75349: PPUSH
75350: CALL_OW 310
75354: OR
75355: IFFALSE 75359
// exit ;
75357: GO 75450
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75359: LD_ADDR_VAR 0 4
75363: PUSH
75364: LD_VAR 0 1
75368: PPUSH
75369: CALL_OW 250
75373: PPUSH
75374: LD_VAR 0 2
75378: PPUSH
75379: LD_INT 1
75381: PPUSH
75382: CALL_OW 272
75386: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75387: LD_ADDR_VAR 0 5
75391: PUSH
75392: LD_VAR 0 1
75396: PPUSH
75397: CALL_OW 251
75401: PPUSH
75402: LD_VAR 0 2
75406: PPUSH
75407: LD_INT 1
75409: PPUSH
75410: CALL_OW 273
75414: ST_TO_ADDR
// if ValidHex ( x , y ) then
75415: LD_VAR 0 4
75419: PPUSH
75420: LD_VAR 0 5
75424: PPUSH
75425: CALL_OW 488
75429: IFFALSE 75450
// ComTurnXY ( unit , x , y ) ;
75431: LD_VAR 0 1
75435: PPUSH
75436: LD_VAR 0 4
75440: PPUSH
75441: LD_VAR 0 5
75445: PPUSH
75446: CALL_OW 118
// end ;
75450: LD_VAR 0 3
75454: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75455: LD_INT 0
75457: PPUSH
75458: PPUSH
// result := false ;
75459: LD_ADDR_VAR 0 3
75463: PUSH
75464: LD_INT 0
75466: ST_TO_ADDR
// if not units then
75467: LD_VAR 0 2
75471: NOT
75472: IFFALSE 75476
// exit ;
75474: GO 75521
// for i in units do
75476: LD_ADDR_VAR 0 4
75480: PUSH
75481: LD_VAR 0 2
75485: PUSH
75486: FOR_IN
75487: IFFALSE 75519
// if See ( side , i ) then
75489: LD_VAR 0 1
75493: PPUSH
75494: LD_VAR 0 4
75498: PPUSH
75499: CALL_OW 292
75503: IFFALSE 75517
// begin result := true ;
75505: LD_ADDR_VAR 0 3
75509: PUSH
75510: LD_INT 1
75512: ST_TO_ADDR
// exit ;
75513: POP
75514: POP
75515: GO 75521
// end ;
75517: GO 75486
75519: POP
75520: POP
// end ;
75521: LD_VAR 0 3
75525: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75526: LD_INT 0
75528: PPUSH
75529: PPUSH
75530: PPUSH
75531: PPUSH
// if not unit or not points then
75532: LD_VAR 0 1
75536: NOT
75537: IFTRUE 75546
75539: PUSH
75540: LD_VAR 0 2
75544: NOT
75545: OR
75546: IFFALSE 75550
// exit ;
75548: GO 75640
// dist := 99999 ;
75550: LD_ADDR_VAR 0 5
75554: PUSH
75555: LD_INT 99999
75557: ST_TO_ADDR
// for i in points do
75558: LD_ADDR_VAR 0 4
75562: PUSH
75563: LD_VAR 0 2
75567: PUSH
75568: FOR_IN
75569: IFFALSE 75638
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75571: LD_ADDR_VAR 0 6
75575: PUSH
75576: LD_VAR 0 1
75580: PPUSH
75581: LD_VAR 0 4
75585: PUSH
75586: LD_INT 1
75588: ARRAY
75589: PPUSH
75590: LD_VAR 0 4
75594: PUSH
75595: LD_INT 2
75597: ARRAY
75598: PPUSH
75599: CALL_OW 297
75603: ST_TO_ADDR
// if tmpDist < dist then
75604: LD_VAR 0 6
75608: PUSH
75609: LD_VAR 0 5
75613: LESS
75614: IFFALSE 75636
// begin result := i ;
75616: LD_ADDR_VAR 0 3
75620: PUSH
75621: LD_VAR 0 4
75625: ST_TO_ADDR
// dist := tmpDist ;
75626: LD_ADDR_VAR 0 5
75630: PUSH
75631: LD_VAR 0 6
75635: ST_TO_ADDR
// end ; end ;
75636: GO 75568
75638: POP
75639: POP
// end ;
75640: LD_VAR 0 3
75644: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75645: LD_INT 0
75647: PPUSH
// uc_side := side ;
75648: LD_ADDR_OWVAR 20
75652: PUSH
75653: LD_VAR 0 1
75657: ST_TO_ADDR
// uc_nation := 3 ;
75658: LD_ADDR_OWVAR 21
75662: PUSH
75663: LD_INT 3
75665: ST_TO_ADDR
// vc_chassis := 25 ;
75666: LD_ADDR_OWVAR 37
75670: PUSH
75671: LD_INT 25
75673: ST_TO_ADDR
// vc_engine := engine_siberite ;
75674: LD_ADDR_OWVAR 39
75678: PUSH
75679: LD_INT 3
75681: ST_TO_ADDR
// vc_control := control_computer ;
75682: LD_ADDR_OWVAR 38
75686: PUSH
75687: LD_INT 3
75689: ST_TO_ADDR
// vc_weapon := 59 ;
75690: LD_ADDR_OWVAR 40
75694: PUSH
75695: LD_INT 59
75697: ST_TO_ADDR
// result := CreateVehicle ;
75698: LD_ADDR_VAR 0 5
75702: PUSH
75703: CALL_OW 45
75707: ST_TO_ADDR
// SetDir ( result , d ) ;
75708: LD_VAR 0 5
75712: PPUSH
75713: LD_VAR 0 4
75717: PPUSH
75718: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75722: LD_VAR 0 5
75726: PPUSH
75727: LD_VAR 0 2
75731: PPUSH
75732: LD_VAR 0 3
75736: PPUSH
75737: LD_INT 0
75739: PPUSH
75740: CALL_OW 48
// end ;
75744: LD_VAR 0 5
75748: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75749: LD_INT 0
75751: PPUSH
75752: PPUSH
75753: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75754: LD_ADDR_VAR 0 2
75758: PUSH
75759: LD_INT 0
75761: PUSH
75762: LD_INT 0
75764: PUSH
75765: LD_INT 0
75767: PUSH
75768: LD_INT 0
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75777: LD_VAR 0 1
75781: NOT
75782: IFTRUE 75815
75784: PUSH
75785: LD_VAR 0 1
75789: PPUSH
75790: CALL_OW 264
75794: PUSH
75795: LD_INT 12
75797: PUSH
75798: LD_INT 51
75800: PUSH
75801: LD_INT 32
75803: PUSH
75804: LD_INT 89
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: LIST
75811: LIST
75812: IN
75813: NOT
75814: OR
75815: IFFALSE 75819
// exit ;
75817: GO 75917
// for i := 1 to 3 do
75819: LD_ADDR_VAR 0 3
75823: PUSH
75824: DOUBLE
75825: LD_INT 1
75827: DEC
75828: ST_TO_ADDR
75829: LD_INT 3
75831: PUSH
75832: FOR_TO
75833: IFFALSE 75915
// begin tmp := GetCargo ( cargo , i ) ;
75835: LD_ADDR_VAR 0 4
75839: PUSH
75840: LD_VAR 0 1
75844: PPUSH
75845: LD_VAR 0 3
75849: PPUSH
75850: CALL_OW 289
75854: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75855: LD_ADDR_VAR 0 2
75859: PUSH
75860: LD_VAR 0 2
75864: PPUSH
75865: LD_VAR 0 3
75869: PPUSH
75870: LD_VAR 0 4
75874: PPUSH
75875: CALL_OW 1
75879: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75880: LD_ADDR_VAR 0 2
75884: PUSH
75885: LD_VAR 0 2
75889: PPUSH
75890: LD_INT 4
75892: PPUSH
75893: LD_VAR 0 2
75897: PUSH
75898: LD_INT 4
75900: ARRAY
75901: PUSH
75902: LD_VAR 0 4
75906: PLUS
75907: PPUSH
75908: CALL_OW 1
75912: ST_TO_ADDR
// end ;
75913: GO 75832
75915: POP
75916: POP
// end ;
75917: LD_VAR 0 2
75921: RET
// export function Length ( array ) ; begin
75922: LD_INT 0
75924: PPUSH
// result := array + 0 ;
75925: LD_ADDR_VAR 0 2
75929: PUSH
75930: LD_VAR 0 1
75934: PUSH
75935: LD_INT 0
75937: PLUS
75938: ST_TO_ADDR
// end ;
75939: LD_VAR 0 2
75943: RET
// export function PrepareArray ( array ) ; begin
75944: LD_INT 0
75946: PPUSH
// result := array diff 0 ;
75947: LD_ADDR_VAR 0 2
75951: PUSH
75952: LD_VAR 0 1
75956: PUSH
75957: LD_INT 0
75959: DIFF
75960: ST_TO_ADDR
// if not result [ 1 ] then
75961: LD_VAR 0 2
75965: PUSH
75966: LD_INT 1
75968: ARRAY
75969: NOT
75970: IFFALSE 75990
// result := Delete ( result , 1 ) ;
75972: LD_ADDR_VAR 0 2
75976: PUSH
75977: LD_VAR 0 2
75981: PPUSH
75982: LD_INT 1
75984: PPUSH
75985: CALL_OW 3
75989: ST_TO_ADDR
// end ;
75990: LD_VAR 0 2
75994: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75995: LD_INT 0
75997: PPUSH
75998: PPUSH
75999: PPUSH
76000: PPUSH
// sibRocketRange := 25 ;
76001: LD_ADDR_VAR 0 6
76005: PUSH
76006: LD_INT 25
76008: ST_TO_ADDR
// result := false ;
76009: LD_ADDR_VAR 0 4
76013: PUSH
76014: LD_INT 0
76016: ST_TO_ADDR
// for i := 0 to 5 do
76017: LD_ADDR_VAR 0 5
76021: PUSH
76022: DOUBLE
76023: LD_INT 0
76025: DEC
76026: ST_TO_ADDR
76027: LD_INT 5
76029: PUSH
76030: FOR_TO
76031: IFFALSE 76098
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76033: LD_VAR 0 1
76037: PPUSH
76038: LD_VAR 0 5
76042: PPUSH
76043: LD_VAR 0 6
76047: PPUSH
76048: CALL_OW 272
76052: PPUSH
76053: LD_VAR 0 2
76057: PPUSH
76058: LD_VAR 0 5
76062: PPUSH
76063: LD_VAR 0 6
76067: PPUSH
76068: CALL_OW 273
76072: PPUSH
76073: LD_VAR 0 3
76077: PPUSH
76078: CALL_OW 309
76082: IFFALSE 76096
// begin result := true ;
76084: LD_ADDR_VAR 0 4
76088: PUSH
76089: LD_INT 1
76091: ST_TO_ADDR
// exit ;
76092: POP
76093: POP
76094: GO 76100
// end ;
76096: GO 76030
76098: POP
76099: POP
// end ;
76100: LD_VAR 0 4
76104: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
76105: LD_INT 0
76107: PPUSH
76108: PPUSH
76109: PPUSH
// if btype = b_depot then
76110: LD_VAR 0 2
76114: PUSH
76115: LD_INT 0
76117: EQUAL
76118: IFFALSE 76130
// begin result := true ;
76120: LD_ADDR_VAR 0 3
76124: PUSH
76125: LD_INT 1
76127: ST_TO_ADDR
// exit ;
76128: GO 76250
// end ; pom := GetBase ( depot ) ;
76130: LD_ADDR_VAR 0 4
76134: PUSH
76135: LD_VAR 0 1
76139: PPUSH
76140: CALL_OW 274
76144: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
76145: LD_ADDR_VAR 0 5
76149: PUSH
76150: LD_VAR 0 2
76154: PPUSH
76155: LD_VAR 0 1
76159: PPUSH
76160: CALL_OW 248
76164: PPUSH
76165: CALL_OW 450
76169: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
76170: LD_ADDR_VAR 0 3
76174: PUSH
76175: LD_VAR 0 4
76179: PPUSH
76180: LD_INT 1
76182: PPUSH
76183: CALL_OW 275
76187: PUSH
76188: LD_VAR 0 5
76192: PUSH
76193: LD_INT 1
76195: ARRAY
76196: GREATEREQUAL
76197: IFFALSE 76223
76199: PUSH
76200: LD_VAR 0 4
76204: PPUSH
76205: LD_INT 2
76207: PPUSH
76208: CALL_OW 275
76212: PUSH
76213: LD_VAR 0 5
76217: PUSH
76218: LD_INT 2
76220: ARRAY
76221: GREATEREQUAL
76222: AND
76223: IFFALSE 76249
76225: PUSH
76226: LD_VAR 0 4
76230: PPUSH
76231: LD_INT 3
76233: PPUSH
76234: CALL_OW 275
76238: PUSH
76239: LD_VAR 0 5
76243: PUSH
76244: LD_INT 3
76246: ARRAY
76247: GREATEREQUAL
76248: AND
76249: ST_TO_ADDR
// end ;
76250: LD_VAR 0 3
76254: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76255: LD_INT 0
76257: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76258: LD_VAR 0 1
76262: PPUSH
76263: LD_VAR 0 2
76267: PPUSH
76268: LD_INT 0
76270: PPUSH
76271: LD_INT 0
76273: PPUSH
76274: LD_INT 1
76276: PPUSH
76277: LD_INT 0
76279: PPUSH
76280: CALL_OW 587
// end ;
76284: LD_VAR 0 3
76288: RET
// export function CenterOnNow ( unit ) ; begin
76289: LD_INT 0
76291: PPUSH
// result := IsInUnit ( unit ) ;
76292: LD_ADDR_VAR 0 2
76296: PUSH
76297: LD_VAR 0 1
76301: PPUSH
76302: CALL_OW 310
76306: ST_TO_ADDR
// if not result then
76307: LD_VAR 0 2
76311: NOT
76312: IFFALSE 76324
// result := unit ;
76314: LD_ADDR_VAR 0 2
76318: PUSH
76319: LD_VAR 0 1
76323: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76324: LD_VAR 0 1
76328: PPUSH
76329: CALL_OW 87
// end ;
76333: LD_VAR 0 2
76337: RET
// export function ComMoveHex ( unit , hex ) ; begin
76338: LD_INT 0
76340: PPUSH
// if not hex then
76341: LD_VAR 0 2
76345: NOT
76346: IFFALSE 76350
// exit ;
76348: GO 76403
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76350: LD_VAR 0 2
76354: PUSH
76355: LD_INT 1
76357: ARRAY
76358: PPUSH
76359: LD_VAR 0 2
76363: PUSH
76364: LD_INT 2
76366: ARRAY
76367: PPUSH
76368: CALL_OW 428
76372: IFFALSE 76376
// exit ;
76374: GO 76403
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76376: LD_VAR 0 1
76380: PPUSH
76381: LD_VAR 0 2
76385: PUSH
76386: LD_INT 1
76388: ARRAY
76389: PPUSH
76390: LD_VAR 0 2
76394: PUSH
76395: LD_INT 2
76397: ARRAY
76398: PPUSH
76399: CALL_OW 111
// end ;
76403: LD_VAR 0 3
76407: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76408: LD_INT 0
76410: PPUSH
76411: PPUSH
76412: PPUSH
// if not unit or not enemy then
76413: LD_VAR 0 1
76417: NOT
76418: IFTRUE 76427
76420: PUSH
76421: LD_VAR 0 2
76425: NOT
76426: OR
76427: IFFALSE 76431
// exit ;
76429: GO 76557
// x := GetX ( enemy ) ;
76431: LD_ADDR_VAR 0 4
76435: PUSH
76436: LD_VAR 0 2
76440: PPUSH
76441: CALL_OW 250
76445: ST_TO_ADDR
// y := GetY ( enemy ) ;
76446: LD_ADDR_VAR 0 5
76450: PUSH
76451: LD_VAR 0 2
76455: PPUSH
76456: CALL_OW 251
76460: ST_TO_ADDR
// if ValidHex ( x , y ) then
76461: LD_VAR 0 4
76465: PPUSH
76466: LD_VAR 0 5
76470: PPUSH
76471: CALL_OW 488
76475: IFFALSE 76557
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76477: LD_VAR 0 2
76481: PPUSH
76482: CALL_OW 247
76486: PUSH
76487: LD_INT 3
76489: PUSH
76490: LD_INT 2
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: IN
76497: IFTRUE 76520
76499: PUSH
76500: LD_VAR 0 1
76504: PPUSH
76505: CALL_OW 255
76509: PPUSH
76510: LD_VAR 0 2
76514: PPUSH
76515: CALL_OW 292
76519: OR
76520: IFFALSE 76538
// ComAttackUnit ( unit , enemy ) else
76522: LD_VAR 0 1
76526: PPUSH
76527: LD_VAR 0 2
76531: PPUSH
76532: CALL_OW 115
76536: GO 76557
// ComAgressiveMove ( unit , x , y ) ;
76538: LD_VAR 0 1
76542: PPUSH
76543: LD_VAR 0 4
76547: PPUSH
76548: LD_VAR 0 5
76552: PPUSH
76553: CALL_OW 114
// end ;
76557: LD_VAR 0 3
76561: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76562: LD_INT 0
76564: PPUSH
76565: PPUSH
76566: PPUSH
// list := AreaToList ( area , 0 ) ;
76567: LD_ADDR_VAR 0 5
76571: PUSH
76572: LD_VAR 0 1
76576: PPUSH
76577: LD_INT 0
76579: PPUSH
76580: CALL_OW 517
76584: ST_TO_ADDR
// if not list then
76585: LD_VAR 0 5
76589: NOT
76590: IFFALSE 76594
// exit ;
76592: GO 76724
// if all then
76594: LD_VAR 0 2
76598: IFFALSE 76686
// begin for i := 1 to list [ 1 ] do
76600: LD_ADDR_VAR 0 4
76604: PUSH
76605: DOUBLE
76606: LD_INT 1
76608: DEC
76609: ST_TO_ADDR
76610: LD_VAR 0 5
76614: PUSH
76615: LD_INT 1
76617: ARRAY
76618: PUSH
76619: FOR_TO
76620: IFFALSE 76682
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76622: LD_ADDR_VAR 0 3
76626: PUSH
76627: LD_VAR 0 3
76631: PPUSH
76632: LD_VAR 0 3
76636: PUSH
76637: LD_INT 1
76639: PLUS
76640: PPUSH
76641: LD_VAR 0 5
76645: PUSH
76646: LD_INT 1
76648: ARRAY
76649: PUSH
76650: LD_VAR 0 4
76654: ARRAY
76655: PUSH
76656: LD_VAR 0 5
76660: PUSH
76661: LD_INT 2
76663: ARRAY
76664: PUSH
76665: LD_VAR 0 4
76669: ARRAY
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: PPUSH
76675: CALL_OW 1
76679: ST_TO_ADDR
76680: GO 76619
76682: POP
76683: POP
// exit ;
76684: GO 76724
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76686: LD_ADDR_VAR 0 3
76690: PUSH
76691: LD_VAR 0 5
76695: PUSH
76696: LD_INT 1
76698: ARRAY
76699: PUSH
76700: LD_INT 1
76702: ARRAY
76703: PUSH
76704: LD_VAR 0 5
76708: PUSH
76709: LD_INT 2
76711: ARRAY
76712: PUSH
76713: LD_INT 1
76715: ARRAY
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: PUSH
76721: EMPTY
76722: LIST
76723: ST_TO_ADDR
// end ;
76724: LD_VAR 0 3
76728: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76729: LD_INT 0
76731: PPUSH
76732: PPUSH
// list := AreaToList ( area , 0 ) ;
76733: LD_ADDR_VAR 0 4
76737: PUSH
76738: LD_VAR 0 1
76742: PPUSH
76743: LD_INT 0
76745: PPUSH
76746: CALL_OW 517
76750: ST_TO_ADDR
// if not list then
76751: LD_VAR 0 4
76755: NOT
76756: IFFALSE 76760
// exit ;
76758: GO 76801
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76760: LD_ADDR_VAR 0 3
76764: PUSH
76765: LD_VAR 0 4
76769: PUSH
76770: LD_INT 1
76772: ARRAY
76773: PUSH
76774: LD_INT 1
76776: ARRAY
76777: PUSH
76778: LD_VAR 0 4
76782: PUSH
76783: LD_INT 2
76785: ARRAY
76786: PUSH
76787: LD_INT 1
76789: ARRAY
76790: PUSH
76791: LD_VAR 0 2
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: LIST
76800: ST_TO_ADDR
// end ;
76801: LD_VAR 0 3
76805: RET
// export function First ( array ) ; begin
76806: LD_INT 0
76808: PPUSH
// if not array then
76809: LD_VAR 0 1
76813: NOT
76814: IFFALSE 76818
// exit ;
76816: GO 76832
// result := array [ 1 ] ;
76818: LD_ADDR_VAR 0 2
76822: PUSH
76823: LD_VAR 0 1
76827: PUSH
76828: LD_INT 1
76830: ARRAY
76831: ST_TO_ADDR
// end ;
76832: LD_VAR 0 2
76836: RET
// export function Last ( array ) ; begin
76837: LD_INT 0
76839: PPUSH
// if not array then
76840: LD_VAR 0 1
76844: NOT
76845: IFFALSE 76849
// exit ;
76847: GO 76865
// result := array [ array ] ;
76849: LD_ADDR_VAR 0 2
76853: PUSH
76854: LD_VAR 0 1
76858: PUSH
76859: LD_VAR 0 1
76863: ARRAY
76864: ST_TO_ADDR
// end ;
76865: LD_VAR 0 2
76869: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76870: LD_INT 0
76872: PPUSH
76873: PPUSH
// result := [ ] ;
76874: LD_ADDR_VAR 0 5
76878: PUSH
76879: EMPTY
76880: ST_TO_ADDR
// if not array then
76881: LD_VAR 0 1
76885: NOT
76886: IFFALSE 76890
// exit ;
76888: GO 77002
// for i := 1 to array do
76890: LD_ADDR_VAR 0 6
76894: PUSH
76895: DOUBLE
76896: LD_INT 1
76898: DEC
76899: ST_TO_ADDR
76900: LD_VAR 0 1
76904: PUSH
76905: FOR_TO
76906: IFFALSE 77000
// if array [ i ] [ index ] = value then
76908: LD_VAR 0 1
76912: PUSH
76913: LD_VAR 0 6
76917: ARRAY
76918: PUSH
76919: LD_VAR 0 2
76923: ARRAY
76924: PUSH
76925: LD_VAR 0 3
76929: EQUAL
76930: IFFALSE 76998
// begin if indexColumn then
76932: LD_VAR 0 4
76936: IFFALSE 76972
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76938: LD_ADDR_VAR 0 5
76942: PUSH
76943: LD_VAR 0 5
76947: PPUSH
76948: LD_VAR 0 1
76952: PUSH
76953: LD_VAR 0 6
76957: ARRAY
76958: PUSH
76959: LD_VAR 0 4
76963: ARRAY
76964: PPUSH
76965: CALL 72010 0 2
76969: ST_TO_ADDR
76970: GO 76998
// result := Join ( result , array [ i ] ) ;
76972: LD_ADDR_VAR 0 5
76976: PUSH
76977: LD_VAR 0 5
76981: PPUSH
76982: LD_VAR 0 1
76986: PUSH
76987: LD_VAR 0 6
76991: ARRAY
76992: PPUSH
76993: CALL 72010 0 2
76997: ST_TO_ADDR
// end ;
76998: GO 76905
77000: POP
77001: POP
// end ;
77002: LD_VAR 0 5
77006: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
77007: LD_INT 0
77009: PPUSH
// if not vehicles or not parkingPoint then
77010: LD_VAR 0 1
77014: NOT
77015: IFTRUE 77024
77017: PUSH
77018: LD_VAR 0 2
77022: NOT
77023: OR
77024: IFFALSE 77028
// exit ;
77026: GO 77126
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
77028: LD_ADDR_VAR 0 1
77032: PUSH
77033: LD_VAR 0 1
77037: PPUSH
77038: LD_INT 50
77040: PUSH
77041: EMPTY
77042: LIST
77043: PUSH
77044: LD_INT 3
77046: PUSH
77047: LD_INT 92
77049: PUSH
77050: LD_VAR 0 2
77054: PUSH
77055: LD_INT 1
77057: ARRAY
77058: PUSH
77059: LD_VAR 0 2
77063: PUSH
77064: LD_INT 2
77066: ARRAY
77067: PUSH
77068: LD_INT 8
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: LIST
77075: LIST
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PPUSH
77085: CALL_OW 72
77089: ST_TO_ADDR
// if not vehicles then
77090: LD_VAR 0 1
77094: NOT
77095: IFFALSE 77099
// exit ;
77097: GO 77126
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
77099: LD_VAR 0 1
77103: PPUSH
77104: LD_VAR 0 2
77108: PUSH
77109: LD_INT 1
77111: ARRAY
77112: PPUSH
77113: LD_VAR 0 2
77117: PUSH
77118: LD_INT 2
77120: ARRAY
77121: PPUSH
77122: CALL_OW 111
// end ;
77126: LD_VAR 0 3
77130: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
77131: LD_INT 0
77133: PPUSH
77134: PPUSH
77135: PPUSH
// if not side or not area then
77136: LD_VAR 0 1
77140: NOT
77141: IFTRUE 77150
77143: PUSH
77144: LD_VAR 0 2
77148: NOT
77149: OR
77150: IFFALSE 77154
// exit ;
77152: GO 77273
// tmp := AreaToList ( area , 0 ) ;
77154: LD_ADDR_VAR 0 5
77158: PUSH
77159: LD_VAR 0 2
77163: PPUSH
77164: LD_INT 0
77166: PPUSH
77167: CALL_OW 517
77171: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
77172: LD_ADDR_VAR 0 4
77176: PUSH
77177: DOUBLE
77178: LD_INT 1
77180: DEC
77181: ST_TO_ADDR
77182: LD_VAR 0 5
77186: PUSH
77187: LD_INT 1
77189: ARRAY
77190: PUSH
77191: FOR_TO
77192: IFFALSE 77271
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
77194: LD_VAR 0 5
77198: PUSH
77199: LD_INT 1
77201: ARRAY
77202: PUSH
77203: LD_VAR 0 4
77207: ARRAY
77208: PPUSH
77209: LD_VAR 0 5
77213: PUSH
77214: LD_INT 2
77216: ARRAY
77217: PUSH
77218: LD_VAR 0 4
77222: ARRAY
77223: PPUSH
77224: CALL_OW 351
77228: IFFALSE 77269
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
77230: LD_VAR 0 5
77234: PUSH
77235: LD_INT 1
77237: ARRAY
77238: PUSH
77239: LD_VAR 0 4
77243: ARRAY
77244: PPUSH
77245: LD_VAR 0 5
77249: PUSH
77250: LD_INT 2
77252: ARRAY
77253: PUSH
77254: LD_VAR 0 4
77258: ARRAY
77259: PPUSH
77260: LD_VAR 0 1
77264: PPUSH
77265: CALL_OW 244
// end ;
77269: GO 77191
77271: POP
77272: POP
// end ;
77273: LD_VAR 0 3
77277: RET
// export function UniqueArray ( array ) ; var i ; begin
77278: LD_INT 0
77280: PPUSH
77281: PPUSH
// result := [ ] ;
77282: LD_ADDR_VAR 0 2
77286: PUSH
77287: EMPTY
77288: ST_TO_ADDR
// if not array then
77289: LD_VAR 0 1
77293: NOT
77294: IFFALSE 77298
// exit ;
77296: GO 77359
// for i := 1 to array do
77298: LD_ADDR_VAR 0 3
77302: PUSH
77303: DOUBLE
77304: LD_INT 1
77306: DEC
77307: ST_TO_ADDR
77308: LD_VAR 0 1
77312: PUSH
77313: FOR_TO
77314: IFFALSE 77357
// if not array [ i ] in result then
77316: LD_VAR 0 1
77320: PUSH
77321: LD_VAR 0 3
77325: ARRAY
77326: PUSH
77327: LD_VAR 0 2
77331: IN
77332: NOT
77333: IFFALSE 77355
// result := Join ( result , i ) ;
77335: LD_ADDR_VAR 0 2
77339: PUSH
77340: LD_VAR 0 2
77344: PPUSH
77345: LD_VAR 0 3
77349: PPUSH
77350: CALL 72010 0 2
77354: ST_TO_ADDR
77355: GO 77313
77357: POP
77358: POP
// end ; end_of_file
77359: LD_VAR 0 2
77363: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77364: LD_VAR 0 1
77368: PUSH
77369: LD_INT 200
77371: DOUBLE
77372: GREATEREQUAL
77373: IFFALSE 77381
77375: LD_INT 299
77377: DOUBLE
77378: LESSEQUAL
77379: IFTRUE 77383
77381: GO 77415
77383: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77384: LD_VAR 0 1
77388: PPUSH
77389: LD_VAR 0 2
77393: PPUSH
77394: LD_VAR 0 3
77398: PPUSH
77399: LD_VAR 0 4
77403: PPUSH
77404: LD_VAR 0 5
77408: PPUSH
77409: CALL 28086 0 5
77413: GO 77492
77415: LD_INT 300
77417: DOUBLE
77418: GREATEREQUAL
77419: IFFALSE 77427
77421: LD_INT 399
77423: DOUBLE
77424: LESSEQUAL
77425: IFTRUE 77429
77427: GO 77491
77429: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77430: LD_VAR 0 1
77434: PPUSH
77435: LD_VAR 0 2
77439: PPUSH
77440: LD_VAR 0 3
77444: PPUSH
77445: LD_VAR 0 4
77449: PPUSH
77450: LD_VAR 0 5
77454: PPUSH
77455: LD_VAR 0 6
77459: PPUSH
77460: LD_VAR 0 7
77464: PPUSH
77465: LD_VAR 0 8
77469: PPUSH
77470: LD_VAR 0 9
77474: PPUSH
77475: LD_VAR 0 10
77479: PPUSH
77480: LD_VAR 0 11
77484: PPUSH
77485: CALL 23889 0 11
77489: GO 77492
77491: POP
// end ;
77492: PPOPN 11
77494: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77495: LD_VAR 0 1
77499: PPUSH
77500: LD_VAR 0 2
77504: PPUSH
77505: LD_VAR 0 3
77509: PPUSH
77510: LD_VAR 0 4
77514: PPUSH
77515: LD_VAR 0 5
77519: PPUSH
77520: CALL 27386 0 5
// end ; end_of_file
77524: PPOPN 5
77526: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77527: LD_VAR 0 1
77531: PPUSH
77532: LD_VAR 0 2
77536: PPUSH
77537: LD_VAR 0 3
77541: PPUSH
77542: LD_VAR 0 4
77546: PPUSH
77547: LD_VAR 0 5
77551: PPUSH
77552: LD_VAR 0 6
77556: PPUSH
77557: CALL 11429 0 6
// end ;
77561: PPOPN 6
77563: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77564: LD_INT 0
77566: PPUSH
// begin if not units then
77567: LD_VAR 0 1
77571: NOT
77572: IFFALSE 77576
// exit ;
77574: GO 77610
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77576: LD_VAR 0 1
77580: PPUSH
77581: LD_VAR 0 2
77585: PPUSH
77586: LD_VAR 0 3
77590: PPUSH
77591: LD_VAR 0 4
77595: PPUSH
77596: LD_VAR 0 5
77600: PPUSH
77601: LD_VAR 0 6
77605: PPUSH
77606: CALL 33783 0 6
// end ;
77610: PPOPN 7
77612: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77613: CALL 11309 0 0
// end ;
77617: PPOPN 1
77619: END
