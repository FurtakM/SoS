// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4273
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4169
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4038
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: IFFALSE 3958
3937: PUSH
3938: LD_INT 63
3940: PPUSH
3941: LD_INT 37
3943: PPUSH
3944: CALL_OW 428
3948: PPUSH
3949: CALL_OW 266
3953: PUSH
3954: LD_INT 30
3956: EQUAL
3957: AND
3958: IFFALSE 3964
// ComitSib ;
3960: CALL 2766 0 0
// if Difficulty > 2 then
3964: LD_OWVAR 67
3968: PUSH
3969: LD_INT 2
3971: GREATER
3972: IFFALSE 4000
// begin Wait ( 0 0$25 ) ;
3974: LD_INT 875
3976: PPUSH
3977: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3981: LD_ADDR_EXP 4
3985: PUSH
3986: LD_EXP 4
3990: PUSH
3991: LD_INT 4
3993: PPUSH
3994: CALL 1355 0 1
3998: ADD
3999: ST_TO_ADDR
// end ; if attackN > 7 then
4000: LD_EXP 6
4004: PUSH
4005: LD_INT 7
4007: GREATER
4008: IFFALSE 4036
// begin Wait ( 0 0$15 ) ;
4010: LD_INT 525
4012: PPUSH
4013: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4017: LD_ADDR_EXP 4
4021: PUSH
4022: LD_EXP 4
4026: PUSH
4027: LD_INT 2
4029: PPUSH
4030: CALL 1355 0 1
4034: ADD
4035: ST_TO_ADDR
// end ; end ; 3 :
4036: GO 4169
4038: LD_INT 3
4040: DOUBLE
4041: EQUAL
4042: IFTRUE 4046
4044: GO 4168
4046: POP
// begin pom := pom ^ Attack ( 1 ) ;
4047: LD_ADDR_EXP 4
4051: PUSH
4052: LD_EXP 4
4056: PUSH
4057: LD_INT 1
4059: PPUSH
4060: CALL 1355 0 1
4064: ADD
4065: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4066: LD_INT 70
4068: PPUSH
4069: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4073: LD_ADDR_EXP 4
4077: PUSH
4078: LD_EXP 4
4082: PUSH
4083: LD_INT 2
4085: PPUSH
4086: CALL 1355 0 1
4090: ADD
4091: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4092: LD_INT 2100
4094: PPUSH
4095: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4099: LD_ADDR_EXP 4
4103: PUSH
4104: LD_EXP 4
4108: PUSH
4109: LD_INT 3
4111: PPUSH
4112: CALL 1355 0 1
4116: ADD
4117: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_EXP 4
4127: PUSH
4128: LD_INT 5
4130: PPUSH
4131: CALL 1355 0 1
4135: ADD
4136: ST_TO_ADDR
// if attackN > 10 then
4137: LD_EXP 6
4141: PUSH
4142: LD_INT 10
4144: GREATER
4145: IFFALSE 4166
// pom := pom ^ Attack ( 2 ) ;
4147: LD_ADDR_EXP 4
4151: PUSH
4152: LD_EXP 4
4156: PUSH
4157: LD_INT 2
4159: PPUSH
4160: CALL 1355 0 1
4164: ADD
4165: ST_TO_ADDR
// end ; end ;
4166: GO 4169
4168: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4169: LD_OWVAR 67
4173: PUSH
4174: LD_INT 1
4176: GREATER
4177: IFFALSE 4193
4179: PUSH
4180: LD_EXP 6
4184: PUSH
4185: LD_INT 4
4187: MOD
4188: PUSH
4189: LD_INT 0
4191: EQUAL
4192: AND
4193: IFFALSE 4259
// begin Wait ( 1 1$45 ) ;
4195: LD_INT 3675
4197: PPUSH
4198: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4202: LD_ADDR_EXP 4
4206: PUSH
4207: LD_EXP 4
4211: PUSH
4212: LD_INT 3
4214: PPUSH
4215: CALL 1355 0 1
4219: ADD
4220: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4221: LD_ADDR_EXP 4
4225: PUSH
4226: LD_EXP 4
4230: PUSH
4231: LD_INT 4
4233: PPUSH
4234: CALL 1355 0 1
4238: ADD
4239: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4240: LD_ADDR_EXP 5
4244: PUSH
4245: LD_EXP 5
4249: PUSH
4250: LD_INT 6
4252: PPUSH
4253: CALL 1355 0 1
4257: ADD
4258: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4259: LD_ADDR_EXP 6
4263: PUSH
4264: LD_EXP 6
4268: PUSH
4269: LD_INT 1
4271: PLUS
4272: ST_TO_ADDR
// end ;
4273: PPOPN 2
4275: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4276: LD_EXP 6
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: LD_INT 12
4286: PUSH
4287: LD_INT 14
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_OWVAR 67
4299: ARRAY
4300: GREATEREQUAL
4301: IFFALSE 4323
4303: PUSH
4304: LD_INT 22
4306: PUSH
4307: LD_INT 2
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 69
4318: PUSH
4319: LD_INT 0
4321: EQUAL
4322: AND
4323: IFFALSE 4366
4325: GO 4327
4327: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DDocEnd
4335: PPUSH
4336: CALL_OW 586
// wait ( 0 0$03 ) ;
4340: LD_INT 105
4342: PPUSH
4343: CALL_OW 67
// Query ( QWin ) ;
4347: LD_STRING QWin
4349: PPUSH
4350: CALL_OW 97
// music_nat := 5 ;
4354: LD_ADDR_OWVAR 71
4358: PUSH
4359: LD_INT 5
4361: ST_TO_ADDR
// YouWin ;
4362: CALL_OW 103
// end ; end_of_file
4366: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4367: LD_VAR 0 1
4371: PPUSH
4372: CALL 20552 0 1
// if un = brave or un = com then
4376: LD_VAR 0 1
4380: PUSH
4381: LD_INT 1
4383: EQUAL
4384: IFTRUE 4398
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_EXP 1
4396: EQUAL
4397: OR
4398: IFFALSE 4419
// begin SayRadioNoFace ( doc , DDocWin ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DDocWin
4407: PPUSH
4408: CALL_OW 586
// YouLost (  ) ;
4412: LD_STRING 
4414: PPUSH
4415: CALL_OW 104
// end ; end ;
4419: PPOPN 1
4421: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4422: LD_VAR 0 1
4426: PPUSH
4427: LD_VAR 0 2
4431: PPUSH
4432: LD_VAR 0 3
4436: PPUSH
4437: CALL 20586 0 3
// end ;
4441: PPOPN 3
4443: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL 20594 0 1
// end ;
4453: PPOPN 1
4455: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4456: LD_VAR 0 1
4460: PPUSH
4461: LD_VAR 0 2
4465: PPUSH
4466: CALL 20610 0 2
// end ; end_of_file end_of_file
4470: PPOPN 2
4472: END
// export globalGameSaveCounter ; every 0 0$1 do
4473: GO 4475
4475: DISABLE
// begin enable ;
4476: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4477: LD_STRING updateTimer(
4479: PUSH
4480: LD_OWVAR 1
4484: STR
4485: PUSH
4486: LD_STRING );
4488: STR
4489: PPUSH
4490: CALL_OW 559
// end ;
4494: END
// every 0 0$1 do
4495: GO 4497
4497: DISABLE
// begin globalGameSaveCounter := 0 ;
4498: LD_ADDR_EXP 7
4502: PUSH
4503: LD_INT 0
4505: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4506: LD_STRING setGameSaveCounter(0)
4508: PPUSH
4509: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4513: LD_STRING initStreamRollete();
4515: PPUSH
4516: CALL_OW 559
// InitStreamMode ;
4520: CALL 5865 0 0
// DefineStreamItems ( false ) ;
4524: LD_INT 0
4526: PPUSH
4527: CALL 6329 0 1
// end ;
4531: END
// export function SOS_MapStart ( ) ; begin
4532: LD_INT 0
4534: PPUSH
// if streamModeActive then
4535: LD_EXP 8
4539: IFFALSE 4548
// DefineStreamItems ( true ) ;
4541: LD_INT 1
4543: PPUSH
4544: CALL 6329 0 1
// UpdateLuaVariables ( ) ;
4548: CALL 4565 0 0
// UpdateFactoryWaypoints ( ) ;
4552: CALL 19451 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4556: CALL 19703 0 0
// end ;
4560: LD_VAR 0 1
4564: RET
// function UpdateLuaVariables ( ) ; begin
4565: LD_INT 0
4567: PPUSH
// if globalGameSaveCounter then
4568: LD_EXP 7
4572: IFFALSE 4606
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4574: LD_ADDR_EXP 7
4578: PUSH
4579: LD_EXP 7
4583: PPUSH
4584: CALL 66284 0 1
4588: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4589: LD_STRING setGameSaveCounter(
4591: PUSH
4592: LD_EXP 7
4596: STR
4597: PUSH
4598: LD_STRING )
4600: STR
4601: PPUSH
4602: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4606: LD_STRING setGameDifficulty(
4608: PUSH
4609: LD_OWVAR 67
4613: STR
4614: PUSH
4615: LD_STRING )
4617: STR
4618: PPUSH
4619: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4623: LD_STRING displayDifficulty(
4625: PUSH
4626: LD_OWVAR 67
4630: STR
4631: PUSH
4632: LD_STRING )
4634: STR
4635: PPUSH
4636: CALL_OW 559
// end ;
4640: LD_VAR 0 1
4644: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4645: LD_INT 0
4647: PPUSH
// if p2 = stream_mode then
4648: LD_VAR 0 2
4652: PUSH
4653: LD_INT 100
4655: EQUAL
4656: IFFALSE 5659
// begin if not StreamModeActive then
4658: LD_EXP 8
4662: NOT
4663: IFFALSE 4673
// StreamModeActive := true ;
4665: LD_ADDR_EXP 8
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// if p3 = 0 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_INT 0
4680: EQUAL
4681: IFFALSE 4687
// InitStreamMode ;
4683: CALL 5865 0 0
// if p3 = 1 then
4687: LD_VAR 0 3
4691: PUSH
4692: LD_INT 1
4694: EQUAL
4695: IFFALSE 4705
// sRocket := true ;
4697: LD_ADDR_EXP 13
4701: PUSH
4702: LD_INT 1
4704: ST_TO_ADDR
// if p3 = 2 then
4705: LD_VAR 0 3
4709: PUSH
4710: LD_INT 2
4712: EQUAL
4713: IFFALSE 4723
// sSpeed := true ;
4715: LD_ADDR_EXP 12
4719: PUSH
4720: LD_INT 1
4722: ST_TO_ADDR
// if p3 = 3 then
4723: LD_VAR 0 3
4727: PUSH
4728: LD_INT 3
4730: EQUAL
4731: IFFALSE 4741
// sEngine := true ;
4733: LD_ADDR_EXP 14
4737: PUSH
4738: LD_INT 1
4740: ST_TO_ADDR
// if p3 = 4 then
4741: LD_VAR 0 3
4745: PUSH
4746: LD_INT 4
4748: EQUAL
4749: IFFALSE 4759
// sSpec := true ;
4751: LD_ADDR_EXP 11
4755: PUSH
4756: LD_INT 1
4758: ST_TO_ADDR
// if p3 = 5 then
4759: LD_VAR 0 3
4763: PUSH
4764: LD_INT 5
4766: EQUAL
4767: IFFALSE 4777
// sLevel := true ;
4769: LD_ADDR_EXP 15
4773: PUSH
4774: LD_INT 1
4776: ST_TO_ADDR
// if p3 = 6 then
4777: LD_VAR 0 3
4781: PUSH
4782: LD_INT 6
4784: EQUAL
4785: IFFALSE 4795
// sArmoury := true ;
4787: LD_ADDR_EXP 16
4791: PUSH
4792: LD_INT 1
4794: ST_TO_ADDR
// if p3 = 7 then
4795: LD_VAR 0 3
4799: PUSH
4800: LD_INT 7
4802: EQUAL
4803: IFFALSE 4813
// sRadar := true ;
4805: LD_ADDR_EXP 17
4809: PUSH
4810: LD_INT 1
4812: ST_TO_ADDR
// if p3 = 8 then
4813: LD_VAR 0 3
4817: PUSH
4818: LD_INT 8
4820: EQUAL
4821: IFFALSE 4831
// sBunker := true ;
4823: LD_ADDR_EXP 18
4827: PUSH
4828: LD_INT 1
4830: ST_TO_ADDR
// if p3 = 9 then
4831: LD_VAR 0 3
4835: PUSH
4836: LD_INT 9
4838: EQUAL
4839: IFFALSE 4849
// sHack := true ;
4841: LD_ADDR_EXP 19
4845: PUSH
4846: LD_INT 1
4848: ST_TO_ADDR
// if p3 = 10 then
4849: LD_VAR 0 3
4853: PUSH
4854: LD_INT 10
4856: EQUAL
4857: IFFALSE 4867
// sFire := true ;
4859: LD_ADDR_EXP 20
4863: PUSH
4864: LD_INT 1
4866: ST_TO_ADDR
// if p3 = 11 then
4867: LD_VAR 0 3
4871: PUSH
4872: LD_INT 11
4874: EQUAL
4875: IFFALSE 4885
// sRefresh := true ;
4877: LD_ADDR_EXP 21
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// if p3 = 12 then
4885: LD_VAR 0 3
4889: PUSH
4890: LD_INT 12
4892: EQUAL
4893: IFFALSE 4903
// sExp := true ;
4895: LD_ADDR_EXP 22
4899: PUSH
4900: LD_INT 1
4902: ST_TO_ADDR
// if p3 = 13 then
4903: LD_VAR 0 3
4907: PUSH
4908: LD_INT 13
4910: EQUAL
4911: IFFALSE 4921
// sDepot := true ;
4913: LD_ADDR_EXP 23
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// if p3 = 14 then
4921: LD_VAR 0 3
4925: PUSH
4926: LD_INT 14
4928: EQUAL
4929: IFFALSE 4939
// sFlag := true ;
4931: LD_ADDR_EXP 24
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// if p3 = 15 then
4939: LD_VAR 0 3
4943: PUSH
4944: LD_INT 15
4946: EQUAL
4947: IFFALSE 4957
// sKamikadze := true ;
4949: LD_ADDR_EXP 32
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// if p3 = 16 then
4957: LD_VAR 0 3
4961: PUSH
4962: LD_INT 16
4964: EQUAL
4965: IFFALSE 4975
// sTroll := true ;
4967: LD_ADDR_EXP 33
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// if p3 = 17 then
4975: LD_VAR 0 3
4979: PUSH
4980: LD_INT 17
4982: EQUAL
4983: IFFALSE 4993
// sSlow := true ;
4985: LD_ADDR_EXP 34
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// if p3 = 18 then
4993: LD_VAR 0 3
4997: PUSH
4998: LD_INT 18
5000: EQUAL
5001: IFFALSE 5011
// sLack := true ;
5003: LD_ADDR_EXP 35
5007: PUSH
5008: LD_INT 1
5010: ST_TO_ADDR
// if p3 = 19 then
5011: LD_VAR 0 3
5015: PUSH
5016: LD_INT 19
5018: EQUAL
5019: IFFALSE 5029
// sTank := true ;
5021: LD_ADDR_EXP 37
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// if p3 = 20 then
5029: LD_VAR 0 3
5033: PUSH
5034: LD_INT 20
5036: EQUAL
5037: IFFALSE 5047
// sRemote := true ;
5039: LD_ADDR_EXP 38
5043: PUSH
5044: LD_INT 1
5046: ST_TO_ADDR
// if p3 = 21 then
5047: LD_VAR 0 3
5051: PUSH
5052: LD_INT 21
5054: EQUAL
5055: IFFALSE 5065
// sPowell := true ;
5057: LD_ADDR_EXP 39
5061: PUSH
5062: LD_INT 1
5064: ST_TO_ADDR
// if p3 = 22 then
5065: LD_VAR 0 3
5069: PUSH
5070: LD_INT 22
5072: EQUAL
5073: IFFALSE 5083
// sTeleport := true ;
5075: LD_ADDR_EXP 42
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// if p3 = 23 then
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 23
5090: EQUAL
5091: IFFALSE 5101
// sOilTower := true ;
5093: LD_ADDR_EXP 44
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// if p3 = 24 then
5101: LD_VAR 0 3
5105: PUSH
5106: LD_INT 24
5108: EQUAL
5109: IFFALSE 5119
// sShovel := true ;
5111: LD_ADDR_EXP 45
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// if p3 = 25 then
5119: LD_VAR 0 3
5123: PUSH
5124: LD_INT 25
5126: EQUAL
5127: IFFALSE 5137
// sSheik := true ;
5129: LD_ADDR_EXP 46
5133: PUSH
5134: LD_INT 1
5136: ST_TO_ADDR
// if p3 = 26 then
5137: LD_VAR 0 3
5141: PUSH
5142: LD_INT 26
5144: EQUAL
5145: IFFALSE 5155
// sEarthquake := true ;
5147: LD_ADDR_EXP 48
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// if p3 = 27 then
5155: LD_VAR 0 3
5159: PUSH
5160: LD_INT 27
5162: EQUAL
5163: IFFALSE 5173
// sAI := true ;
5165: LD_ADDR_EXP 49
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// if p3 = 28 then
5173: LD_VAR 0 3
5177: PUSH
5178: LD_INT 28
5180: EQUAL
5181: IFFALSE 5191
// sCargo := true ;
5183: LD_ADDR_EXP 52
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// if p3 = 29 then
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 29
5198: EQUAL
5199: IFFALSE 5209
// sDLaser := true ;
5201: LD_ADDR_EXP 53
5205: PUSH
5206: LD_INT 1
5208: ST_TO_ADDR
// if p3 = 30 then
5209: LD_VAR 0 3
5213: PUSH
5214: LD_INT 30
5216: EQUAL
5217: IFFALSE 5227
// sExchange := true ;
5219: LD_ADDR_EXP 54
5223: PUSH
5224: LD_INT 1
5226: ST_TO_ADDR
// if p3 = 31 then
5227: LD_VAR 0 3
5231: PUSH
5232: LD_INT 31
5234: EQUAL
5235: IFFALSE 5245
// sFac := true ;
5237: LD_ADDR_EXP 55
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// if p3 = 32 then
5245: LD_VAR 0 3
5249: PUSH
5250: LD_INT 32
5252: EQUAL
5253: IFFALSE 5263
// sPower := true ;
5255: LD_ADDR_EXP 56
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// if p3 = 33 then
5263: LD_VAR 0 3
5267: PUSH
5268: LD_INT 33
5270: EQUAL
5271: IFFALSE 5281
// sRandom := true ;
5273: LD_ADDR_EXP 57
5277: PUSH
5278: LD_INT 1
5280: ST_TO_ADDR
// if p3 = 34 then
5281: LD_VAR 0 3
5285: PUSH
5286: LD_INT 34
5288: EQUAL
5289: IFFALSE 5299
// sShield := true ;
5291: LD_ADDR_EXP 58
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// if p3 = 35 then
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 35
5306: EQUAL
5307: IFFALSE 5317
// sTime := true ;
5309: LD_ADDR_EXP 59
5313: PUSH
5314: LD_INT 1
5316: ST_TO_ADDR
// if p3 = 36 then
5317: LD_VAR 0 3
5321: PUSH
5322: LD_INT 36
5324: EQUAL
5325: IFFALSE 5335
// sTools := true ;
5327: LD_ADDR_EXP 60
5331: PUSH
5332: LD_INT 1
5334: ST_TO_ADDR
// if p3 = 101 then
5335: LD_VAR 0 3
5339: PUSH
5340: LD_INT 101
5342: EQUAL
5343: IFFALSE 5353
// sSold := true ;
5345: LD_ADDR_EXP 25
5349: PUSH
5350: LD_INT 1
5352: ST_TO_ADDR
// if p3 = 102 then
5353: LD_VAR 0 3
5357: PUSH
5358: LD_INT 102
5360: EQUAL
5361: IFFALSE 5371
// sDiff := true ;
5363: LD_ADDR_EXP 26
5367: PUSH
5368: LD_INT 1
5370: ST_TO_ADDR
// if p3 = 103 then
5371: LD_VAR 0 3
5375: PUSH
5376: LD_INT 103
5378: EQUAL
5379: IFFALSE 5389
// sFog := true ;
5381: LD_ADDR_EXP 29
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// if p3 = 104 then
5389: LD_VAR 0 3
5393: PUSH
5394: LD_INT 104
5396: EQUAL
5397: IFFALSE 5407
// sReset := true ;
5399: LD_ADDR_EXP 30
5403: PUSH
5404: LD_INT 1
5406: ST_TO_ADDR
// if p3 = 105 then
5407: LD_VAR 0 3
5411: PUSH
5412: LD_INT 105
5414: EQUAL
5415: IFFALSE 5425
// sSun := true ;
5417: LD_ADDR_EXP 31
5421: PUSH
5422: LD_INT 1
5424: ST_TO_ADDR
// if p3 = 106 then
5425: LD_VAR 0 3
5429: PUSH
5430: LD_INT 106
5432: EQUAL
5433: IFFALSE 5443
// sTiger := true ;
5435: LD_ADDR_EXP 27
5439: PUSH
5440: LD_INT 1
5442: ST_TO_ADDR
// if p3 = 107 then
5443: LD_VAR 0 3
5447: PUSH
5448: LD_INT 107
5450: EQUAL
5451: IFFALSE 5461
// sBomb := true ;
5453: LD_ADDR_EXP 28
5457: PUSH
5458: LD_INT 1
5460: ST_TO_ADDR
// if p3 = 108 then
5461: LD_VAR 0 3
5465: PUSH
5466: LD_INT 108
5468: EQUAL
5469: IFFALSE 5479
// sWound := true ;
5471: LD_ADDR_EXP 36
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// if p3 = 109 then
5479: LD_VAR 0 3
5483: PUSH
5484: LD_INT 109
5486: EQUAL
5487: IFFALSE 5497
// sBetray := true ;
5489: LD_ADDR_EXP 40
5493: PUSH
5494: LD_INT 1
5496: ST_TO_ADDR
// if p3 = 110 then
5497: LD_VAR 0 3
5501: PUSH
5502: LD_INT 110
5504: EQUAL
5505: IFFALSE 5515
// sContamin := true ;
5507: LD_ADDR_EXP 41
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// if p3 = 111 then
5515: LD_VAR 0 3
5519: PUSH
5520: LD_INT 111
5522: EQUAL
5523: IFFALSE 5533
// sOil := true ;
5525: LD_ADDR_EXP 43
5529: PUSH
5530: LD_INT 1
5532: ST_TO_ADDR
// if p3 = 112 then
5533: LD_VAR 0 3
5537: PUSH
5538: LD_INT 112
5540: EQUAL
5541: IFFALSE 5551
// sStu := true ;
5543: LD_ADDR_EXP 47
5547: PUSH
5548: LD_INT 1
5550: ST_TO_ADDR
// if p3 = 113 then
5551: LD_VAR 0 3
5555: PUSH
5556: LD_INT 113
5558: EQUAL
5559: IFFALSE 5569
// sBazooka := true ;
5561: LD_ADDR_EXP 50
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// if p3 = 114 then
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 114
5576: EQUAL
5577: IFFALSE 5587
// sMortar := true ;
5579: LD_ADDR_EXP 51
5583: PUSH
5584: LD_INT 1
5586: ST_TO_ADDR
// if p3 = 115 then
5587: LD_VAR 0 3
5591: PUSH
5592: LD_INT 115
5594: EQUAL
5595: IFFALSE 5605
// sRanger := true ;
5597: LD_ADDR_EXP 61
5601: PUSH
5602: LD_INT 1
5604: ST_TO_ADDR
// if p3 = 116 then
5605: LD_VAR 0 3
5609: PUSH
5610: LD_INT 116
5612: EQUAL
5613: IFFALSE 5623
// sComputer := true ;
5615: LD_ADDR_EXP 62
5619: PUSH
5620: LD_INT 1
5622: ST_TO_ADDR
// if p3 = 117 then
5623: LD_VAR 0 3
5627: PUSH
5628: LD_INT 117
5630: EQUAL
5631: IFFALSE 5641
// s30 := true ;
5633: LD_ADDR_EXP 63
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// if p3 = 118 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 118
5648: EQUAL
5649: IFFALSE 5659
// s60 := true ;
5651: LD_ADDR_EXP 64
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// end ; if p2 = hack_mode then
5659: LD_VAR 0 2
5663: PUSH
5664: LD_INT 101
5666: EQUAL
5667: IFFALSE 5795
// begin case p3 of 1 :
5669: LD_VAR 0 3
5673: PUSH
5674: LD_INT 1
5676: DOUBLE
5677: EQUAL
5678: IFTRUE 5682
5680: GO 5689
5682: POP
// hHackUnlimitedResources ; 2 :
5683: CALL 18058 0 0
5687: GO 5795
5689: LD_INT 2
5691: DOUBLE
5692: EQUAL
5693: IFTRUE 5697
5695: GO 5704
5697: POP
// hHackSetLevel10 ; 3 :
5698: CALL 18191 0 0
5702: GO 5795
5704: LD_INT 3
5706: DOUBLE
5707: EQUAL
5708: IFTRUE 5712
5710: GO 5719
5712: POP
// hHackSetLevel10YourUnits ; 4 :
5713: CALL 18276 0 0
5717: GO 5795
5719: LD_INT 4
5721: DOUBLE
5722: EQUAL
5723: IFTRUE 5727
5725: GO 5734
5727: POP
// hHackInvincible ; 5 :
5728: CALL 18724 0 0
5732: GO 5795
5734: LD_INT 5
5736: DOUBLE
5737: EQUAL
5738: IFTRUE 5742
5740: GO 5749
5742: POP
// hHackInvisible ; 6 :
5743: CALL 18835 0 0
5747: GO 5795
5749: LD_INT 6
5751: DOUBLE
5752: EQUAL
5753: IFTRUE 5757
5755: GO 5764
5757: POP
// hHackChangeYourSide ; 7 :
5758: CALL 18892 0 0
5762: GO 5795
5764: LD_INT 7
5766: DOUBLE
5767: EQUAL
5768: IFTRUE 5772
5770: GO 5779
5772: POP
// hHackChangeUnitSide ; 8 :
5773: CALL 18934 0 0
5777: GO 5795
5779: LD_INT 8
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5794
5787: POP
// hHackFog ; end ;
5788: CALL 19035 0 0
5792: GO 5795
5794: POP
// end ; if p2 = game_save_mode then
5795: LD_VAR 0 2
5799: PUSH
5800: LD_INT 102
5802: EQUAL
5803: IFFALSE 5860
// begin if p3 = 1 then
5805: LD_VAR 0 3
5809: PUSH
5810: LD_INT 1
5812: EQUAL
5813: IFFALSE 5825
// globalGameSaveCounter := p4 ;
5815: LD_ADDR_EXP 7
5819: PUSH
5820: LD_VAR 0 4
5824: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5825: LD_VAR 0 3
5829: PUSH
5830: LD_INT 2
5832: EQUAL
5833: IFFALSE 5841
5835: PUSH
5836: LD_EXP 7
5840: AND
5841: IFFALSE 5860
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5843: LD_STRING setGameSaveCounter(
5845: PUSH
5846: LD_EXP 7
5850: STR
5851: PUSH
5852: LD_STRING )
5854: STR
5855: PPUSH
5856: CALL_OW 559
// end ; end ;
5860: LD_VAR 0 7
5864: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5865: LD_INT 0
5867: PPUSH
// streamModeActive := false ;
5868: LD_ADDR_EXP 8
5872: PUSH
5873: LD_INT 0
5875: ST_TO_ADDR
// normalCounter := 36 ;
5876: LD_ADDR_EXP 9
5880: PUSH
5881: LD_INT 36
5883: ST_TO_ADDR
// hardcoreCounter := 18 ;
5884: LD_ADDR_EXP 10
5888: PUSH
5889: LD_INT 18
5891: ST_TO_ADDR
// sRocket := false ;
5892: LD_ADDR_EXP 13
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// sSpeed := false ;
5900: LD_ADDR_EXP 12
5904: PUSH
5905: LD_INT 0
5907: ST_TO_ADDR
// sEngine := false ;
5908: LD_ADDR_EXP 14
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// sSpec := false ;
5916: LD_ADDR_EXP 11
5920: PUSH
5921: LD_INT 0
5923: ST_TO_ADDR
// sLevel := false ;
5924: LD_ADDR_EXP 15
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// sArmoury := false ;
5932: LD_ADDR_EXP 16
5936: PUSH
5937: LD_INT 0
5939: ST_TO_ADDR
// sRadar := false ;
5940: LD_ADDR_EXP 17
5944: PUSH
5945: LD_INT 0
5947: ST_TO_ADDR
// sBunker := false ;
5948: LD_ADDR_EXP 18
5952: PUSH
5953: LD_INT 0
5955: ST_TO_ADDR
// sHack := false ;
5956: LD_ADDR_EXP 19
5960: PUSH
5961: LD_INT 0
5963: ST_TO_ADDR
// sFire := false ;
5964: LD_ADDR_EXP 20
5968: PUSH
5969: LD_INT 0
5971: ST_TO_ADDR
// sRefresh := false ;
5972: LD_ADDR_EXP 21
5976: PUSH
5977: LD_INT 0
5979: ST_TO_ADDR
// sExp := false ;
5980: LD_ADDR_EXP 22
5984: PUSH
5985: LD_INT 0
5987: ST_TO_ADDR
// sDepot := false ;
5988: LD_ADDR_EXP 23
5992: PUSH
5993: LD_INT 0
5995: ST_TO_ADDR
// sFlag := false ;
5996: LD_ADDR_EXP 24
6000: PUSH
6001: LD_INT 0
6003: ST_TO_ADDR
// sKamikadze := false ;
6004: LD_ADDR_EXP 32
6008: PUSH
6009: LD_INT 0
6011: ST_TO_ADDR
// sTroll := false ;
6012: LD_ADDR_EXP 33
6016: PUSH
6017: LD_INT 0
6019: ST_TO_ADDR
// sSlow := false ;
6020: LD_ADDR_EXP 34
6024: PUSH
6025: LD_INT 0
6027: ST_TO_ADDR
// sLack := false ;
6028: LD_ADDR_EXP 35
6032: PUSH
6033: LD_INT 0
6035: ST_TO_ADDR
// sTank := false ;
6036: LD_ADDR_EXP 37
6040: PUSH
6041: LD_INT 0
6043: ST_TO_ADDR
// sRemote := false ;
6044: LD_ADDR_EXP 38
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// sPowell := false ;
6052: LD_ADDR_EXP 39
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// sTeleport := false ;
6060: LD_ADDR_EXP 42
6064: PUSH
6065: LD_INT 0
6067: ST_TO_ADDR
// sOilTower := false ;
6068: LD_ADDR_EXP 44
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// sShovel := false ;
6076: LD_ADDR_EXP 45
6080: PUSH
6081: LD_INT 0
6083: ST_TO_ADDR
// sSheik := false ;
6084: LD_ADDR_EXP 46
6088: PUSH
6089: LD_INT 0
6091: ST_TO_ADDR
// sEarthquake := false ;
6092: LD_ADDR_EXP 48
6096: PUSH
6097: LD_INT 0
6099: ST_TO_ADDR
// sAI := false ;
6100: LD_ADDR_EXP 49
6104: PUSH
6105: LD_INT 0
6107: ST_TO_ADDR
// sCargo := false ;
6108: LD_ADDR_EXP 52
6112: PUSH
6113: LD_INT 0
6115: ST_TO_ADDR
// sDLaser := false ;
6116: LD_ADDR_EXP 53
6120: PUSH
6121: LD_INT 0
6123: ST_TO_ADDR
// sExchange := false ;
6124: LD_ADDR_EXP 54
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// sFac := false ;
6132: LD_ADDR_EXP 55
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// sPower := false ;
6140: LD_ADDR_EXP 56
6144: PUSH
6145: LD_INT 0
6147: ST_TO_ADDR
// sRandom := false ;
6148: LD_ADDR_EXP 57
6152: PUSH
6153: LD_INT 0
6155: ST_TO_ADDR
// sShield := false ;
6156: LD_ADDR_EXP 58
6160: PUSH
6161: LD_INT 0
6163: ST_TO_ADDR
// sTime := false ;
6164: LD_ADDR_EXP 59
6168: PUSH
6169: LD_INT 0
6171: ST_TO_ADDR
// sTools := false ;
6172: LD_ADDR_EXP 60
6176: PUSH
6177: LD_INT 0
6179: ST_TO_ADDR
// sSold := false ;
6180: LD_ADDR_EXP 25
6184: PUSH
6185: LD_INT 0
6187: ST_TO_ADDR
// sDiff := false ;
6188: LD_ADDR_EXP 26
6192: PUSH
6193: LD_INT 0
6195: ST_TO_ADDR
// sFog := false ;
6196: LD_ADDR_EXP 29
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// sReset := false ;
6204: LD_ADDR_EXP 30
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// sSun := false ;
6212: LD_ADDR_EXP 31
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// sTiger := false ;
6220: LD_ADDR_EXP 27
6224: PUSH
6225: LD_INT 0
6227: ST_TO_ADDR
// sBomb := false ;
6228: LD_ADDR_EXP 28
6232: PUSH
6233: LD_INT 0
6235: ST_TO_ADDR
// sWound := false ;
6236: LD_ADDR_EXP 36
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// sBetray := false ;
6244: LD_ADDR_EXP 40
6248: PUSH
6249: LD_INT 0
6251: ST_TO_ADDR
// sContamin := false ;
6252: LD_ADDR_EXP 41
6256: PUSH
6257: LD_INT 0
6259: ST_TO_ADDR
// sOil := false ;
6260: LD_ADDR_EXP 43
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// sStu := false ;
6268: LD_ADDR_EXP 47
6272: PUSH
6273: LD_INT 0
6275: ST_TO_ADDR
// sBazooka := false ;
6276: LD_ADDR_EXP 50
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// sMortar := false ;
6284: LD_ADDR_EXP 51
6288: PUSH
6289: LD_INT 0
6291: ST_TO_ADDR
// sRanger := false ;
6292: LD_ADDR_EXP 61
6296: PUSH
6297: LD_INT 0
6299: ST_TO_ADDR
// sComputer := false ;
6300: LD_ADDR_EXP 62
6304: PUSH
6305: LD_INT 0
6307: ST_TO_ADDR
// s30 := false ;
6308: LD_ADDR_EXP 63
6312: PUSH
6313: LD_INT 0
6315: ST_TO_ADDR
// s60 := false ;
6316: LD_ADDR_EXP 64
6320: PUSH
6321: LD_INT 0
6323: ST_TO_ADDR
// end ;
6324: LD_VAR 0 1
6328: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
6333: PPUSH
6334: PPUSH
6335: PPUSH
6336: PPUSH
6337: PPUSH
// result := [ ] ;
6338: LD_ADDR_VAR 0 2
6342: PUSH
6343: EMPTY
6344: ST_TO_ADDR
// if campaign_id = 1 then
6345: LD_OWVAR 69
6349: PUSH
6350: LD_INT 1
6352: EQUAL
6353: IFFALSE 9519
// begin case mission_number of 1 :
6355: LD_OWVAR 70
6359: PUSH
6360: LD_INT 1
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6444
6368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 4
6379: PUSH
6380: LD_INT 11
6382: PUSH
6383: LD_INT 12
6385: PUSH
6386: LD_INT 15
6388: PUSH
6389: LD_INT 16
6391: PUSH
6392: LD_INT 22
6394: PUSH
6395: LD_INT 23
6397: PUSH
6398: LD_INT 26
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 101
6414: PUSH
6415: LD_INT 102
6417: PUSH
6418: LD_INT 106
6420: PUSH
6421: LD_INT 116
6423: PUSH
6424: LD_INT 117
6426: PUSH
6427: LD_INT 118
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: ST_TO_ADDR
6442: GO 9517
6444: LD_INT 2
6446: DOUBLE
6447: EQUAL
6448: IFTRUE 6452
6450: GO 6536
6452: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6453: LD_ADDR_VAR 0 2
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 4
6463: PUSH
6464: LD_INT 11
6466: PUSH
6467: LD_INT 12
6469: PUSH
6470: LD_INT 15
6472: PUSH
6473: LD_INT 16
6475: PUSH
6476: LD_INT 22
6478: PUSH
6479: LD_INT 23
6481: PUSH
6482: LD_INT 26
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 101
6498: PUSH
6499: LD_INT 102
6501: PUSH
6502: LD_INT 105
6504: PUSH
6505: LD_INT 106
6507: PUSH
6508: LD_INT 108
6510: PUSH
6511: LD_INT 116
6513: PUSH
6514: LD_INT 117
6516: PUSH
6517: LD_INT 118
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: ST_TO_ADDR
6534: GO 9517
6536: LD_INT 3
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6632
6544: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6545: LD_ADDR_VAR 0 2
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 11
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: LD_INT 15
6567: PUSH
6568: LD_INT 16
6570: PUSH
6571: LD_INT 22
6573: PUSH
6574: LD_INT 26
6576: PUSH
6577: LD_INT 36
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 101
6594: PUSH
6595: LD_INT 102
6597: PUSH
6598: LD_INT 105
6600: PUSH
6601: LD_INT 106
6603: PUSH
6604: LD_INT 108
6606: PUSH
6607: LD_INT 116
6609: PUSH
6610: LD_INT 117
6612: PUSH
6613: LD_INT 118
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 9517
6632: LD_INT 4
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6736
6640: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6641: LD_ADDR_VAR 0 2
6645: PUSH
6646: LD_INT 2
6648: PUSH
6649: LD_INT 4
6651: PUSH
6652: LD_INT 5
6654: PUSH
6655: LD_INT 8
6657: PUSH
6658: LD_INT 11
6660: PUSH
6661: LD_INT 12
6663: PUSH
6664: LD_INT 15
6666: PUSH
6667: LD_INT 16
6669: PUSH
6670: LD_INT 22
6672: PUSH
6673: LD_INT 23
6675: PUSH
6676: LD_INT 26
6678: PUSH
6679: LD_INT 36
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 101
6698: PUSH
6699: LD_INT 102
6701: PUSH
6702: LD_INT 105
6704: PUSH
6705: LD_INT 106
6707: PUSH
6708: LD_INT 108
6710: PUSH
6711: LD_INT 116
6713: PUSH
6714: LD_INT 117
6716: PUSH
6717: LD_INT 118
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: ST_TO_ADDR
6734: GO 9517
6736: LD_INT 5
6738: DOUBLE
6739: EQUAL
6740: IFTRUE 6744
6742: GO 6856
6744: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 2
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: LD_INT 5
6758: PUSH
6759: LD_INT 6
6761: PUSH
6762: LD_INT 8
6764: PUSH
6765: LD_INT 11
6767: PUSH
6768: LD_INT 12
6770: PUSH
6771: LD_INT 15
6773: PUSH
6774: LD_INT 16
6776: PUSH
6777: LD_INT 22
6779: PUSH
6780: LD_INT 23
6782: PUSH
6783: LD_INT 25
6785: PUSH
6786: LD_INT 26
6788: PUSH
6789: LD_INT 36
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: PUSH
6808: LD_INT 101
6810: PUSH
6811: LD_INT 102
6813: PUSH
6814: LD_INT 105
6816: PUSH
6817: LD_INT 106
6819: PUSH
6820: LD_INT 108
6822: PUSH
6823: LD_INT 109
6825: PUSH
6826: LD_INT 112
6828: PUSH
6829: LD_INT 116
6831: PUSH
6832: LD_INT 117
6834: PUSH
6835: LD_INT 118
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: ST_TO_ADDR
6854: GO 9517
6856: LD_INT 6
6858: DOUBLE
6859: EQUAL
6860: IFTRUE 6864
6862: GO 6996
6864: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6865: LD_ADDR_VAR 0 2
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: LD_INT 4
6875: PUSH
6876: LD_INT 5
6878: PUSH
6879: LD_INT 6
6881: PUSH
6882: LD_INT 8
6884: PUSH
6885: LD_INT 11
6887: PUSH
6888: LD_INT 12
6890: PUSH
6891: LD_INT 15
6893: PUSH
6894: LD_INT 16
6896: PUSH
6897: LD_INT 20
6899: PUSH
6900: LD_INT 21
6902: PUSH
6903: LD_INT 22
6905: PUSH
6906: LD_INT 23
6908: PUSH
6909: LD_INT 25
6911: PUSH
6912: LD_INT 26
6914: PUSH
6915: LD_INT 30
6917: PUSH
6918: LD_INT 31
6920: PUSH
6921: LD_INT 32
6923: PUSH
6924: LD_INT 36
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 101
6950: PUSH
6951: LD_INT 102
6953: PUSH
6954: LD_INT 105
6956: PUSH
6957: LD_INT 106
6959: PUSH
6960: LD_INT 108
6962: PUSH
6963: LD_INT 109
6965: PUSH
6966: LD_INT 112
6968: PUSH
6969: LD_INT 116
6971: PUSH
6972: LD_INT 117
6974: PUSH
6975: LD_INT 118
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: ST_TO_ADDR
6994: GO 9517
6996: LD_INT 7
6998: DOUBLE
6999: EQUAL
7000: IFTRUE 7004
7002: GO 7116
7004: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7005: LD_ADDR_VAR 0 2
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: LD_INT 4
7015: PUSH
7016: LD_INT 5
7018: PUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 11
7024: PUSH
7025: LD_INT 12
7027: PUSH
7028: LD_INT 15
7030: PUSH
7031: LD_INT 16
7033: PUSH
7034: LD_INT 20
7036: PUSH
7037: LD_INT 21
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_INT 23
7045: PUSH
7046: LD_INT 25
7048: PUSH
7049: LD_INT 26
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 101
7070: PUSH
7071: LD_INT 102
7073: PUSH
7074: LD_INT 103
7076: PUSH
7077: LD_INT 105
7079: PUSH
7080: LD_INT 106
7082: PUSH
7083: LD_INT 108
7085: PUSH
7086: LD_INT 112
7088: PUSH
7089: LD_INT 116
7091: PUSH
7092: LD_INT 117
7094: PUSH
7095: LD_INT 118
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: ST_TO_ADDR
7114: GO 9517
7116: LD_INT 8
7118: DOUBLE
7119: EQUAL
7120: IFTRUE 7124
7122: GO 7264
7124: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7125: LD_ADDR_VAR 0 2
7129: PUSH
7130: LD_INT 2
7132: PUSH
7133: LD_INT 4
7135: PUSH
7136: LD_INT 5
7138: PUSH
7139: LD_INT 6
7141: PUSH
7142: LD_INT 7
7144: PUSH
7145: LD_INT 8
7147: PUSH
7148: LD_INT 11
7150: PUSH
7151: LD_INT 12
7153: PUSH
7154: LD_INT 15
7156: PUSH
7157: LD_INT 16
7159: PUSH
7160: LD_INT 20
7162: PUSH
7163: LD_INT 21
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_INT 23
7171: PUSH
7172: LD_INT 25
7174: PUSH
7175: LD_INT 26
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: LD_INT 31
7183: PUSH
7184: LD_INT 32
7186: PUSH
7187: LD_INT 36
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 101
7214: PUSH
7215: LD_INT 102
7217: PUSH
7218: LD_INT 103
7220: PUSH
7221: LD_INT 105
7223: PUSH
7224: LD_INT 106
7226: PUSH
7227: LD_INT 108
7229: PUSH
7230: LD_INT 109
7232: PUSH
7233: LD_INT 112
7235: PUSH
7236: LD_INT 116
7238: PUSH
7239: LD_INT 117
7241: PUSH
7242: LD_INT 118
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: ST_TO_ADDR
7262: GO 9517
7264: LD_INT 9
7266: DOUBLE
7267: EQUAL
7268: IFTRUE 7272
7270: GO 7420
7272: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7273: LD_ADDR_VAR 0 2
7277: PUSH
7278: LD_INT 2
7280: PUSH
7281: LD_INT 4
7283: PUSH
7284: LD_INT 5
7286: PUSH
7287: LD_INT 6
7289: PUSH
7290: LD_INT 7
7292: PUSH
7293: LD_INT 8
7295: PUSH
7296: LD_INT 11
7298: PUSH
7299: LD_INT 12
7301: PUSH
7302: LD_INT 15
7304: PUSH
7305: LD_INT 16
7307: PUSH
7308: LD_INT 20
7310: PUSH
7311: LD_INT 21
7313: PUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 23
7319: PUSH
7320: LD_INT 25
7322: PUSH
7323: LD_INT 26
7325: PUSH
7326: LD_INT 28
7328: PUSH
7329: LD_INT 30
7331: PUSH
7332: LD_INT 31
7334: PUSH
7335: LD_INT 32
7337: PUSH
7338: LD_INT 36
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 101
7366: PUSH
7367: LD_INT 102
7369: PUSH
7370: LD_INT 103
7372: PUSH
7373: LD_INT 105
7375: PUSH
7376: LD_INT 106
7378: PUSH
7379: LD_INT 108
7381: PUSH
7382: LD_INT 109
7384: PUSH
7385: LD_INT 112
7387: PUSH
7388: LD_INT 114
7390: PUSH
7391: LD_INT 116
7393: PUSH
7394: LD_INT 117
7396: PUSH
7397: LD_INT 118
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: ST_TO_ADDR
7418: GO 9517
7420: LD_INT 10
7422: DOUBLE
7423: EQUAL
7424: IFTRUE 7428
7426: GO 7624
7428: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7429: LD_ADDR_VAR 0 2
7433: PUSH
7434: LD_INT 2
7436: PUSH
7437: LD_INT 4
7439: PUSH
7440: LD_INT 5
7442: PUSH
7443: LD_INT 6
7445: PUSH
7446: LD_INT 7
7448: PUSH
7449: LD_INT 8
7451: PUSH
7452: LD_INT 9
7454: PUSH
7455: LD_INT 10
7457: PUSH
7458: LD_INT 11
7460: PUSH
7461: LD_INT 12
7463: PUSH
7464: LD_INT 13
7466: PUSH
7467: LD_INT 14
7469: PUSH
7470: LD_INT 15
7472: PUSH
7473: LD_INT 16
7475: PUSH
7476: LD_INT 17
7478: PUSH
7479: LD_INT 18
7481: PUSH
7482: LD_INT 19
7484: PUSH
7485: LD_INT 20
7487: PUSH
7488: LD_INT 21
7490: PUSH
7491: LD_INT 22
7493: PUSH
7494: LD_INT 23
7496: PUSH
7497: LD_INT 24
7499: PUSH
7500: LD_INT 25
7502: PUSH
7503: LD_INT 26
7505: PUSH
7506: LD_INT 28
7508: PUSH
7509: LD_INT 30
7511: PUSH
7512: LD_INT 31
7514: PUSH
7515: LD_INT 32
7517: PUSH
7518: LD_INT 36
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 101
7554: PUSH
7555: LD_INT 102
7557: PUSH
7558: LD_INT 103
7560: PUSH
7561: LD_INT 104
7563: PUSH
7564: LD_INT 105
7566: PUSH
7567: LD_INT 106
7569: PUSH
7570: LD_INT 107
7572: PUSH
7573: LD_INT 108
7575: PUSH
7576: LD_INT 109
7578: PUSH
7579: LD_INT 110
7581: PUSH
7582: LD_INT 111
7584: PUSH
7585: LD_INT 112
7587: PUSH
7588: LD_INT 114
7590: PUSH
7591: LD_INT 116
7593: PUSH
7594: LD_INT 117
7596: PUSH
7597: LD_INT 118
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: ST_TO_ADDR
7622: GO 9517
7624: LD_INT 11
7626: DOUBLE
7627: EQUAL
7628: IFTRUE 7632
7630: GO 7836
7632: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7633: LD_ADDR_VAR 0 2
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: LD_INT 3
7643: PUSH
7644: LD_INT 4
7646: PUSH
7647: LD_INT 5
7649: PUSH
7650: LD_INT 6
7652: PUSH
7653: LD_INT 7
7655: PUSH
7656: LD_INT 8
7658: PUSH
7659: LD_INT 9
7661: PUSH
7662: LD_INT 10
7664: PUSH
7665: LD_INT 11
7667: PUSH
7668: LD_INT 12
7670: PUSH
7671: LD_INT 13
7673: PUSH
7674: LD_INT 14
7676: PUSH
7677: LD_INT 15
7679: PUSH
7680: LD_INT 16
7682: PUSH
7683: LD_INT 17
7685: PUSH
7686: LD_INT 18
7688: PUSH
7689: LD_INT 19
7691: PUSH
7692: LD_INT 20
7694: PUSH
7695: LD_INT 21
7697: PUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 23
7703: PUSH
7704: LD_INT 24
7706: PUSH
7707: LD_INT 25
7709: PUSH
7710: LD_INT 26
7712: PUSH
7713: LD_INT 28
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: LD_INT 31
7721: PUSH
7722: LD_INT 32
7724: PUSH
7725: LD_INT 34
7727: PUSH
7728: LD_INT 36
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 101
7766: PUSH
7767: LD_INT 102
7769: PUSH
7770: LD_INT 103
7772: PUSH
7773: LD_INT 104
7775: PUSH
7776: LD_INT 105
7778: PUSH
7779: LD_INT 106
7781: PUSH
7782: LD_INT 107
7784: PUSH
7785: LD_INT 108
7787: PUSH
7788: LD_INT 109
7790: PUSH
7791: LD_INT 110
7793: PUSH
7794: LD_INT 111
7796: PUSH
7797: LD_INT 112
7799: PUSH
7800: LD_INT 114
7802: PUSH
7803: LD_INT 116
7805: PUSH
7806: LD_INT 117
7808: PUSH
7809: LD_INT 118
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: ST_TO_ADDR
7834: GO 9517
7836: LD_INT 12
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 8064
7844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: LD_INT 1
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 4
7861: PUSH
7862: LD_INT 5
7864: PUSH
7865: LD_INT 6
7867: PUSH
7868: LD_INT 7
7870: PUSH
7871: LD_INT 8
7873: PUSH
7874: LD_INT 9
7876: PUSH
7877: LD_INT 10
7879: PUSH
7880: LD_INT 11
7882: PUSH
7883: LD_INT 12
7885: PUSH
7886: LD_INT 13
7888: PUSH
7889: LD_INT 14
7891: PUSH
7892: LD_INT 15
7894: PUSH
7895: LD_INT 16
7897: PUSH
7898: LD_INT 17
7900: PUSH
7901: LD_INT 18
7903: PUSH
7904: LD_INT 19
7906: PUSH
7907: LD_INT 20
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_INT 23
7918: PUSH
7919: LD_INT 24
7921: PUSH
7922: LD_INT 25
7924: PUSH
7925: LD_INT 26
7927: PUSH
7928: LD_INT 27
7930: PUSH
7931: LD_INT 28
7933: PUSH
7934: LD_INT 30
7936: PUSH
7937: LD_INT 31
7939: PUSH
7940: LD_INT 32
7942: PUSH
7943: LD_INT 33
7945: PUSH
7946: LD_INT 34
7948: PUSH
7949: LD_INT 36
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 101
7990: PUSH
7991: LD_INT 102
7993: PUSH
7994: LD_INT 103
7996: PUSH
7997: LD_INT 104
7999: PUSH
8000: LD_INT 105
8002: PUSH
8003: LD_INT 106
8005: PUSH
8006: LD_INT 107
8008: PUSH
8009: LD_INT 108
8011: PUSH
8012: LD_INT 109
8014: PUSH
8015: LD_INT 110
8017: PUSH
8018: LD_INT 111
8020: PUSH
8021: LD_INT 112
8023: PUSH
8024: LD_INT 113
8026: PUSH
8027: LD_INT 114
8029: PUSH
8030: LD_INT 116
8032: PUSH
8033: LD_INT 117
8035: PUSH
8036: LD_INT 118
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: ST_TO_ADDR
8062: GO 9517
8064: LD_INT 13
8066: DOUBLE
8067: EQUAL
8068: IFTRUE 8072
8070: GO 8280
8072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8073: LD_ADDR_VAR 0 2
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: LD_INT 2
8083: PUSH
8084: LD_INT 3
8086: PUSH
8087: LD_INT 4
8089: PUSH
8090: LD_INT 5
8092: PUSH
8093: LD_INT 8
8095: PUSH
8096: LD_INT 9
8098: PUSH
8099: LD_INT 10
8101: PUSH
8102: LD_INT 11
8104: PUSH
8105: LD_INT 12
8107: PUSH
8108: LD_INT 14
8110: PUSH
8111: LD_INT 15
8113: PUSH
8114: LD_INT 16
8116: PUSH
8117: LD_INT 17
8119: PUSH
8120: LD_INT 18
8122: PUSH
8123: LD_INT 19
8125: PUSH
8126: LD_INT 20
8128: PUSH
8129: LD_INT 21
8131: PUSH
8132: LD_INT 22
8134: PUSH
8135: LD_INT 23
8137: PUSH
8138: LD_INT 24
8140: PUSH
8141: LD_INT 25
8143: PUSH
8144: LD_INT 26
8146: PUSH
8147: LD_INT 27
8149: PUSH
8150: LD_INT 28
8152: PUSH
8153: LD_INT 30
8155: PUSH
8156: LD_INT 31
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 33
8164: PUSH
8165: LD_INT 34
8167: PUSH
8168: LD_INT 36
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: PUSH
8204: LD_INT 101
8206: PUSH
8207: LD_INT 102
8209: PUSH
8210: LD_INT 103
8212: PUSH
8213: LD_INT 104
8215: PUSH
8216: LD_INT 105
8218: PUSH
8219: LD_INT 106
8221: PUSH
8222: LD_INT 107
8224: PUSH
8225: LD_INT 108
8227: PUSH
8228: LD_INT 109
8230: PUSH
8231: LD_INT 110
8233: PUSH
8234: LD_INT 111
8236: PUSH
8237: LD_INT 112
8239: PUSH
8240: LD_INT 113
8242: PUSH
8243: LD_INT 114
8245: PUSH
8246: LD_INT 116
8248: PUSH
8249: LD_INT 117
8251: PUSH
8252: LD_INT 118
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: ST_TO_ADDR
8278: GO 9517
8280: LD_INT 14
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8288
8286: GO 8512
8288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8289: LD_ADDR_VAR 0 2
8293: PUSH
8294: LD_INT 1
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: LD_INT 3
8302: PUSH
8303: LD_INT 4
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: LD_INT 6
8311: PUSH
8312: LD_INT 7
8314: PUSH
8315: LD_INT 8
8317: PUSH
8318: LD_INT 9
8320: PUSH
8321: LD_INT 10
8323: PUSH
8324: LD_INT 11
8326: PUSH
8327: LD_INT 12
8329: PUSH
8330: LD_INT 13
8332: PUSH
8333: LD_INT 14
8335: PUSH
8336: LD_INT 15
8338: PUSH
8339: LD_INT 16
8341: PUSH
8342: LD_INT 17
8344: PUSH
8345: LD_INT 18
8347: PUSH
8348: LD_INT 19
8350: PUSH
8351: LD_INT 20
8353: PUSH
8354: LD_INT 21
8356: PUSH
8357: LD_INT 22
8359: PUSH
8360: LD_INT 23
8362: PUSH
8363: LD_INT 24
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 26
8371: PUSH
8372: LD_INT 27
8374: PUSH
8375: LD_INT 28
8377: PUSH
8378: LD_INT 29
8380: PUSH
8381: LD_INT 30
8383: PUSH
8384: LD_INT 31
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: LD_INT 33
8392: PUSH
8393: LD_INT 34
8395: PUSH
8396: LD_INT 36
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 101
8438: PUSH
8439: LD_INT 102
8441: PUSH
8442: LD_INT 103
8444: PUSH
8445: LD_INT 104
8447: PUSH
8448: LD_INT 105
8450: PUSH
8451: LD_INT 106
8453: PUSH
8454: LD_INT 107
8456: PUSH
8457: LD_INT 108
8459: PUSH
8460: LD_INT 109
8462: PUSH
8463: LD_INT 110
8465: PUSH
8466: LD_INT 111
8468: PUSH
8469: LD_INT 112
8471: PUSH
8472: LD_INT 113
8474: PUSH
8475: LD_INT 114
8477: PUSH
8478: LD_INT 116
8480: PUSH
8481: LD_INT 117
8483: PUSH
8484: LD_INT 118
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: ST_TO_ADDR
8510: GO 9517
8512: LD_INT 15
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8744
8520: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8521: LD_ADDR_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: LD_INT 5
8540: PUSH
8541: LD_INT 6
8543: PUSH
8544: LD_INT 7
8546: PUSH
8547: LD_INT 8
8549: PUSH
8550: LD_INT 9
8552: PUSH
8553: LD_INT 10
8555: PUSH
8556: LD_INT 11
8558: PUSH
8559: LD_INT 12
8561: PUSH
8562: LD_INT 13
8564: PUSH
8565: LD_INT 14
8567: PUSH
8568: LD_INT 15
8570: PUSH
8571: LD_INT 16
8573: PUSH
8574: LD_INT 17
8576: PUSH
8577: LD_INT 18
8579: PUSH
8580: LD_INT 19
8582: PUSH
8583: LD_INT 20
8585: PUSH
8586: LD_INT 21
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_INT 23
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 26
8603: PUSH
8604: LD_INT 27
8606: PUSH
8607: LD_INT 28
8609: PUSH
8610: LD_INT 29
8612: PUSH
8613: LD_INT 30
8615: PUSH
8616: LD_INT 31
8618: PUSH
8619: LD_INT 32
8621: PUSH
8622: LD_INT 33
8624: PUSH
8625: LD_INT 34
8627: PUSH
8628: LD_INT 36
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 101
8670: PUSH
8671: LD_INT 102
8673: PUSH
8674: LD_INT 103
8676: PUSH
8677: LD_INT 104
8679: PUSH
8680: LD_INT 105
8682: PUSH
8683: LD_INT 106
8685: PUSH
8686: LD_INT 107
8688: PUSH
8689: LD_INT 108
8691: PUSH
8692: LD_INT 109
8694: PUSH
8695: LD_INT 110
8697: PUSH
8698: LD_INT 111
8700: PUSH
8701: LD_INT 112
8703: PUSH
8704: LD_INT 113
8706: PUSH
8707: LD_INT 114
8709: PUSH
8710: LD_INT 116
8712: PUSH
8713: LD_INT 117
8715: PUSH
8716: LD_INT 118
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: ST_TO_ADDR
8742: GO 9517
8744: LD_INT 16
8746: DOUBLE
8747: EQUAL
8748: IFTRUE 8752
8750: GO 8888
8752: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8753: LD_ADDR_VAR 0 2
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 4
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 7
8769: PUSH
8770: LD_INT 11
8772: PUSH
8773: LD_INT 12
8775: PUSH
8776: LD_INT 15
8778: PUSH
8779: LD_INT 16
8781: PUSH
8782: LD_INT 20
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 23
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 31
8805: PUSH
8806: LD_INT 32
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 34
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 101
8838: PUSH
8839: LD_INT 102
8841: PUSH
8842: LD_INT 103
8844: PUSH
8845: LD_INT 106
8847: PUSH
8848: LD_INT 108
8850: PUSH
8851: LD_INT 112
8853: PUSH
8854: LD_INT 113
8856: PUSH
8857: LD_INT 114
8859: PUSH
8860: LD_INT 116
8862: PUSH
8863: LD_INT 117
8865: PUSH
8866: LD_INT 118
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: ST_TO_ADDR
8886: GO 9517
8888: LD_INT 17
8890: DOUBLE
8891: EQUAL
8892: IFTRUE 8896
8894: GO 9120
8896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8897: LD_ADDR_VAR 0 2
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: LD_INT 4
8913: PUSH
8914: LD_INT 5
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: LD_INT 7
8922: PUSH
8923: LD_INT 8
8925: PUSH
8926: LD_INT 9
8928: PUSH
8929: LD_INT 10
8931: PUSH
8932: LD_INT 11
8934: PUSH
8935: LD_INT 12
8937: PUSH
8938: LD_INT 13
8940: PUSH
8941: LD_INT 14
8943: PUSH
8944: LD_INT 15
8946: PUSH
8947: LD_INT 16
8949: PUSH
8950: LD_INT 17
8952: PUSH
8953: LD_INT 18
8955: PUSH
8956: LD_INT 19
8958: PUSH
8959: LD_INT 20
8961: PUSH
8962: LD_INT 21
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 26
8979: PUSH
8980: LD_INT 27
8982: PUSH
8983: LD_INT 28
8985: PUSH
8986: LD_INT 29
8988: PUSH
8989: LD_INT 30
8991: PUSH
8992: LD_INT 31
8994: PUSH
8995: LD_INT 32
8997: PUSH
8998: LD_INT 33
9000: PUSH
9001: LD_INT 34
9003: PUSH
9004: LD_INT 36
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 101
9046: PUSH
9047: LD_INT 102
9049: PUSH
9050: LD_INT 103
9052: PUSH
9053: LD_INT 104
9055: PUSH
9056: LD_INT 105
9058: PUSH
9059: LD_INT 106
9061: PUSH
9062: LD_INT 107
9064: PUSH
9065: LD_INT 108
9067: PUSH
9068: LD_INT 109
9070: PUSH
9071: LD_INT 110
9073: PUSH
9074: LD_INT 111
9076: PUSH
9077: LD_INT 112
9079: PUSH
9080: LD_INT 113
9082: PUSH
9083: LD_INT 114
9085: PUSH
9086: LD_INT 116
9088: PUSH
9089: LD_INT 117
9091: PUSH
9092: LD_INT 118
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: ST_TO_ADDR
9118: GO 9517
9120: LD_INT 18
9122: DOUBLE
9123: EQUAL
9124: IFTRUE 9128
9126: GO 9276
9128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9129: LD_ADDR_VAR 0 2
9133: PUSH
9134: LD_INT 2
9136: PUSH
9137: LD_INT 4
9139: PUSH
9140: LD_INT 5
9142: PUSH
9143: LD_INT 7
9145: PUSH
9146: LD_INT 11
9148: PUSH
9149: LD_INT 12
9151: PUSH
9152: LD_INT 15
9154: PUSH
9155: LD_INT 16
9157: PUSH
9158: LD_INT 20
9160: PUSH
9161: LD_INT 21
9163: PUSH
9164: LD_INT 22
9166: PUSH
9167: LD_INT 23
9169: PUSH
9170: LD_INT 25
9172: PUSH
9173: LD_INT 26
9175: PUSH
9176: LD_INT 30
9178: PUSH
9179: LD_INT 31
9181: PUSH
9182: LD_INT 32
9184: PUSH
9185: LD_INT 33
9187: PUSH
9188: LD_INT 34
9190: PUSH
9191: LD_INT 35
9193: PUSH
9194: LD_INT 36
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 102
9225: PUSH
9226: LD_INT 103
9228: PUSH
9229: LD_INT 106
9231: PUSH
9232: LD_INT 108
9234: PUSH
9235: LD_INT 112
9237: PUSH
9238: LD_INT 113
9240: PUSH
9241: LD_INT 114
9243: PUSH
9244: LD_INT 115
9246: PUSH
9247: LD_INT 116
9249: PUSH
9250: LD_INT 117
9252: PUSH
9253: LD_INT 118
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: ST_TO_ADDR
9274: GO 9517
9276: LD_INT 19
9278: DOUBLE
9279: EQUAL
9280: IFTRUE 9284
9282: GO 9516
9284: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9285: LD_ADDR_VAR 0 2
9289: PUSH
9290: LD_INT 1
9292: PUSH
9293: LD_INT 2
9295: PUSH
9296: LD_INT 3
9298: PUSH
9299: LD_INT 4
9301: PUSH
9302: LD_INT 5
9304: PUSH
9305: LD_INT 6
9307: PUSH
9308: LD_INT 7
9310: PUSH
9311: LD_INT 8
9313: PUSH
9314: LD_INT 9
9316: PUSH
9317: LD_INT 10
9319: PUSH
9320: LD_INT 11
9322: PUSH
9323: LD_INT 12
9325: PUSH
9326: LD_INT 13
9328: PUSH
9329: LD_INT 14
9331: PUSH
9332: LD_INT 15
9334: PUSH
9335: LD_INT 16
9337: PUSH
9338: LD_INT 17
9340: PUSH
9341: LD_INT 18
9343: PUSH
9344: LD_INT 19
9346: PUSH
9347: LD_INT 20
9349: PUSH
9350: LD_INT 21
9352: PUSH
9353: LD_INT 22
9355: PUSH
9356: LD_INT 23
9358: PUSH
9359: LD_INT 24
9361: PUSH
9362: LD_INT 25
9364: PUSH
9365: LD_INT 26
9367: PUSH
9368: LD_INT 27
9370: PUSH
9371: LD_INT 28
9373: PUSH
9374: LD_INT 29
9376: PUSH
9377: LD_INT 30
9379: PUSH
9380: LD_INT 31
9382: PUSH
9383: LD_INT 32
9385: PUSH
9386: LD_INT 33
9388: PUSH
9389: LD_INT 34
9391: PUSH
9392: LD_INT 35
9394: PUSH
9395: LD_INT 36
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 101
9438: PUSH
9439: LD_INT 102
9441: PUSH
9442: LD_INT 103
9444: PUSH
9445: LD_INT 104
9447: PUSH
9448: LD_INT 105
9450: PUSH
9451: LD_INT 106
9453: PUSH
9454: LD_INT 107
9456: PUSH
9457: LD_INT 108
9459: PUSH
9460: LD_INT 109
9462: PUSH
9463: LD_INT 110
9465: PUSH
9466: LD_INT 111
9468: PUSH
9469: LD_INT 112
9471: PUSH
9472: LD_INT 113
9474: PUSH
9475: LD_INT 114
9477: PUSH
9478: LD_INT 115
9480: PUSH
9481: LD_INT 116
9483: PUSH
9484: LD_INT 117
9486: PUSH
9487: LD_INT 118
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: ST_TO_ADDR
9514: GO 9517
9516: POP
// end else
9517: GO 9748
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9519: LD_ADDR_VAR 0 2
9523: PUSH
9524: LD_INT 1
9526: PUSH
9527: LD_INT 2
9529: PUSH
9530: LD_INT 3
9532: PUSH
9533: LD_INT 4
9535: PUSH
9536: LD_INT 5
9538: PUSH
9539: LD_INT 6
9541: PUSH
9542: LD_INT 7
9544: PUSH
9545: LD_INT 8
9547: PUSH
9548: LD_INT 9
9550: PUSH
9551: LD_INT 10
9553: PUSH
9554: LD_INT 11
9556: PUSH
9557: LD_INT 12
9559: PUSH
9560: LD_INT 13
9562: PUSH
9563: LD_INT 14
9565: PUSH
9566: LD_INT 15
9568: PUSH
9569: LD_INT 16
9571: PUSH
9572: LD_INT 17
9574: PUSH
9575: LD_INT 18
9577: PUSH
9578: LD_INT 19
9580: PUSH
9581: LD_INT 20
9583: PUSH
9584: LD_INT 21
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_INT 23
9592: PUSH
9593: LD_INT 24
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 26
9601: PUSH
9602: LD_INT 27
9604: PUSH
9605: LD_INT 28
9607: PUSH
9608: LD_INT 29
9610: PUSH
9611: LD_INT 30
9613: PUSH
9614: LD_INT 31
9616: PUSH
9617: LD_INT 32
9619: PUSH
9620: LD_INT 33
9622: PUSH
9623: LD_INT 34
9625: PUSH
9626: LD_INT 35
9628: PUSH
9629: LD_INT 36
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 101
9672: PUSH
9673: LD_INT 102
9675: PUSH
9676: LD_INT 103
9678: PUSH
9679: LD_INT 104
9681: PUSH
9682: LD_INT 105
9684: PUSH
9685: LD_INT 106
9687: PUSH
9688: LD_INT 107
9690: PUSH
9691: LD_INT 108
9693: PUSH
9694: LD_INT 109
9696: PUSH
9697: LD_INT 110
9699: PUSH
9700: LD_INT 111
9702: PUSH
9703: LD_INT 112
9705: PUSH
9706: LD_INT 113
9708: PUSH
9709: LD_INT 114
9711: PUSH
9712: LD_INT 115
9714: PUSH
9715: LD_INT 116
9717: PUSH
9718: LD_INT 117
9720: PUSH
9721: LD_INT 118
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: ST_TO_ADDR
// if result then
9748: LD_VAR 0 2
9752: IFFALSE 10538
// begin normal :=  ;
9754: LD_ADDR_VAR 0 5
9758: PUSH
9759: LD_STRING 
9761: ST_TO_ADDR
// hardcore :=  ;
9762: LD_ADDR_VAR 0 6
9766: PUSH
9767: LD_STRING 
9769: ST_TO_ADDR
// active :=  ;
9770: LD_ADDR_VAR 0 7
9774: PUSH
9775: LD_STRING 
9777: ST_TO_ADDR
// for i = 1 to normalCounter do
9778: LD_ADDR_VAR 0 8
9782: PUSH
9783: DOUBLE
9784: LD_INT 1
9786: DEC
9787: ST_TO_ADDR
9788: LD_EXP 9
9792: PUSH
9793: FOR_TO
9794: IFFALSE 9895
// begin tmp := 0 ;
9796: LD_ADDR_VAR 0 3
9800: PUSH
9801: LD_STRING 0
9803: ST_TO_ADDR
// if result [ 1 ] then
9804: LD_VAR 0 2
9808: PUSH
9809: LD_INT 1
9811: ARRAY
9812: IFFALSE 9877
// if result [ 1 ] [ 1 ] = i then
9814: LD_VAR 0 2
9818: PUSH
9819: LD_INT 1
9821: ARRAY
9822: PUSH
9823: LD_INT 1
9825: ARRAY
9826: PUSH
9827: LD_VAR 0 8
9831: EQUAL
9832: IFFALSE 9877
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9834: LD_ADDR_VAR 0 2
9838: PUSH
9839: LD_VAR 0 2
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 1
9854: ARRAY
9855: PPUSH
9856: LD_INT 1
9858: PPUSH
9859: CALL_OW 3
9863: PPUSH
9864: CALL_OW 1
9868: ST_TO_ADDR
// tmp := 1 ;
9869: LD_ADDR_VAR 0 3
9873: PUSH
9874: LD_STRING 1
9876: ST_TO_ADDR
// end ; normal := normal & tmp ;
9877: LD_ADDR_VAR 0 5
9881: PUSH
9882: LD_VAR 0 5
9886: PUSH
9887: LD_VAR 0 3
9891: STR
9892: ST_TO_ADDR
// end ;
9893: GO 9793
9895: POP
9896: POP
// for i = 1 to hardcoreCounter do
9897: LD_ADDR_VAR 0 8
9901: PUSH
9902: DOUBLE
9903: LD_INT 1
9905: DEC
9906: ST_TO_ADDR
9907: LD_EXP 10
9911: PUSH
9912: FOR_TO
9913: IFFALSE 10018
// begin tmp := 0 ;
9915: LD_ADDR_VAR 0 3
9919: PUSH
9920: LD_STRING 0
9922: ST_TO_ADDR
// if result [ 2 ] then
9923: LD_VAR 0 2
9927: PUSH
9928: LD_INT 2
9930: ARRAY
9931: IFFALSE 10000
// if result [ 2 ] [ 1 ] = 100 + i then
9933: LD_VAR 0 2
9937: PUSH
9938: LD_INT 2
9940: ARRAY
9941: PUSH
9942: LD_INT 1
9944: ARRAY
9945: PUSH
9946: LD_INT 100
9948: PUSH
9949: LD_VAR 0 8
9953: PLUS
9954: EQUAL
9955: IFFALSE 10000
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9957: LD_ADDR_VAR 0 2
9961: PUSH
9962: LD_VAR 0 2
9966: PPUSH
9967: LD_INT 2
9969: PPUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 2
9977: ARRAY
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL_OW 3
9986: PPUSH
9987: CALL_OW 1
9991: ST_TO_ADDR
// tmp := 1 ;
9992: LD_ADDR_VAR 0 3
9996: PUSH
9997: LD_STRING 1
9999: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10000: LD_ADDR_VAR 0 6
10004: PUSH
10005: LD_VAR 0 6
10009: PUSH
10010: LD_VAR 0 3
10014: STR
10015: ST_TO_ADDR
// end ;
10016: GO 9912
10018: POP
10019: POP
// if isGameLoad then
10020: LD_VAR 0 1
10024: IFFALSE 10499
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10026: LD_ADDR_VAR 0 4
10030: PUSH
10031: LD_EXP 13
10035: PUSH
10036: LD_EXP 12
10040: PUSH
10041: LD_EXP 14
10045: PUSH
10046: LD_EXP 11
10050: PUSH
10051: LD_EXP 15
10055: PUSH
10056: LD_EXP 16
10060: PUSH
10061: LD_EXP 17
10065: PUSH
10066: LD_EXP 18
10070: PUSH
10071: LD_EXP 19
10075: PUSH
10076: LD_EXP 20
10080: PUSH
10081: LD_EXP 21
10085: PUSH
10086: LD_EXP 22
10090: PUSH
10091: LD_EXP 23
10095: PUSH
10096: LD_EXP 24
10100: PUSH
10101: LD_EXP 32
10105: PUSH
10106: LD_EXP 33
10110: PUSH
10111: LD_EXP 34
10115: PUSH
10116: LD_EXP 35
10120: PUSH
10121: LD_EXP 37
10125: PUSH
10126: LD_EXP 38
10130: PUSH
10131: LD_EXP 39
10135: PUSH
10136: LD_EXP 42
10140: PUSH
10141: LD_EXP 44
10145: PUSH
10146: LD_EXP 45
10150: PUSH
10151: LD_EXP 46
10155: PUSH
10156: LD_EXP 48
10160: PUSH
10161: LD_EXP 49
10165: PUSH
10166: LD_EXP 52
10170: PUSH
10171: LD_EXP 53
10175: PUSH
10176: LD_EXP 54
10180: PUSH
10181: LD_EXP 55
10185: PUSH
10186: LD_EXP 56
10190: PUSH
10191: LD_EXP 57
10195: PUSH
10196: LD_EXP 58
10200: PUSH
10201: LD_EXP 59
10205: PUSH
10206: LD_EXP 60
10210: PUSH
10211: LD_EXP 25
10215: PUSH
10216: LD_EXP 26
10220: PUSH
10221: LD_EXP 29
10225: PUSH
10226: LD_EXP 30
10230: PUSH
10231: LD_EXP 31
10235: PUSH
10236: LD_EXP 27
10240: PUSH
10241: LD_EXP 28
10245: PUSH
10246: LD_EXP 36
10250: PUSH
10251: LD_EXP 40
10255: PUSH
10256: LD_EXP 41
10260: PUSH
10261: LD_EXP 43
10265: PUSH
10266: LD_EXP 47
10270: PUSH
10271: LD_EXP 50
10275: PUSH
10276: LD_EXP 51
10280: PUSH
10281: LD_EXP 61
10285: PUSH
10286: LD_EXP 62
10290: PUSH
10291: LD_EXP 63
10295: PUSH
10296: LD_EXP 64
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: ST_TO_ADDR
// tmp :=  ;
10357: LD_ADDR_VAR 0 3
10361: PUSH
10362: LD_STRING 
10364: ST_TO_ADDR
// for i = 1 to normalCounter do
10365: LD_ADDR_VAR 0 8
10369: PUSH
10370: DOUBLE
10371: LD_INT 1
10373: DEC
10374: ST_TO_ADDR
10375: LD_EXP 9
10379: PUSH
10380: FOR_TO
10381: IFFALSE 10417
// begin if flags [ i ] then
10383: LD_VAR 0 4
10387: PUSH
10388: LD_VAR 0 8
10392: ARRAY
10393: IFFALSE 10415
// tmp := tmp & i & ; ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_VAR 0 3
10404: PUSH
10405: LD_VAR 0 8
10409: STR
10410: PUSH
10411: LD_STRING ;
10413: STR
10414: ST_TO_ADDR
// end ;
10415: GO 10380
10417: POP
10418: POP
// for i = 1 to hardcoreCounter do
10419: LD_ADDR_VAR 0 8
10423: PUSH
10424: DOUBLE
10425: LD_INT 1
10427: DEC
10428: ST_TO_ADDR
10429: LD_EXP 10
10433: PUSH
10434: FOR_TO
10435: IFFALSE 10481
// begin if flags [ normalCounter + i ] then
10437: LD_VAR 0 4
10441: PUSH
10442: LD_EXP 9
10446: PUSH
10447: LD_VAR 0 8
10451: PLUS
10452: ARRAY
10453: IFFALSE 10479
// tmp := tmp & ( 100 + i ) & ; ;
10455: LD_ADDR_VAR 0 3
10459: PUSH
10460: LD_VAR 0 3
10464: PUSH
10465: LD_INT 100
10467: PUSH
10468: LD_VAR 0 8
10472: PLUS
10473: STR
10474: PUSH
10475: LD_STRING ;
10477: STR
10478: ST_TO_ADDR
// end ;
10479: GO 10434
10481: POP
10482: POP
// if tmp then
10483: LD_VAR 0 3
10487: IFFALSE 10499
// active := tmp ;
10489: LD_ADDR_VAR 0 7
10493: PUSH
10494: LD_VAR 0 3
10498: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10499: LD_STRING getStreamItemsFromMission("
10501: PUSH
10502: LD_VAR 0 5
10506: STR
10507: PUSH
10508: LD_STRING ","
10510: STR
10511: PUSH
10512: LD_VAR 0 6
10516: STR
10517: PUSH
10518: LD_STRING ","
10520: STR
10521: PUSH
10522: LD_VAR 0 7
10526: STR
10527: PUSH
10528: LD_STRING ")
10530: STR
10531: PPUSH
10532: CALL_OW 559
// end else
10536: GO 10545
// ToLua ( getStreamItemsFromMission("","","") ) ;
10538: LD_STRING getStreamItemsFromMission("","","")
10540: PPUSH
10541: CALL_OW 559
// end ;
10545: LD_VAR 0 2
10549: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10550: LD_EXP 8
10554: IFFALSE 10562
10556: PUSH
10557: LD_EXP 13
10561: AND
10562: IFFALSE 10686
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
// begin enable ;
10571: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10572: LD_ADDR_VAR 0 2
10576: PUSH
10577: LD_INT 22
10579: PUSH
10580: LD_OWVAR 2
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 2
10591: PUSH
10592: LD_INT 34
10594: PUSH
10595: LD_INT 7
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 34
10604: PUSH
10605: LD_INT 45
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 34
10614: PUSH
10615: LD_INT 28
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 34
10624: PUSH
10625: LD_INT 47
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: ST_TO_ADDR
// if not tmp then
10648: LD_VAR 0 2
10652: NOT
10653: IFFALSE 10657
// exit ;
10655: GO 10686
// for i in tmp do
10657: LD_ADDR_VAR 0 1
10661: PUSH
10662: LD_VAR 0 2
10666: PUSH
10667: FOR_IN
10668: IFFALSE 10684
// begin SetLives ( i , 0 ) ;
10670: LD_VAR 0 1
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 234
// end ;
10682: GO 10667
10684: POP
10685: POP
// end ;
10686: PPOPN 2
10688: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10689: LD_EXP 8
10693: IFFALSE 10701
10695: PUSH
10696: LD_EXP 14
10700: AND
10701: IFFALSE 10785
10703: GO 10705
10705: DISABLE
10706: LD_INT 0
10708: PPUSH
10709: PPUSH
// begin enable ;
10710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10711: LD_ADDR_VAR 0 2
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_OWVAR 2
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 32
10730: PUSH
10731: LD_INT 3
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PPUSH
10742: CALL_OW 69
10746: ST_TO_ADDR
// if not tmp then
10747: LD_VAR 0 2
10751: NOT
10752: IFFALSE 10756
// exit ;
10754: GO 10785
// for i in tmp do
10756: LD_ADDR_VAR 0 1
10760: PUSH
10761: LD_VAR 0 2
10765: PUSH
10766: FOR_IN
10767: IFFALSE 10783
// begin SetLives ( i , 0 ) ;
10769: LD_VAR 0 1
10773: PPUSH
10774: LD_INT 0
10776: PPUSH
10777: CALL_OW 234
// end ;
10781: GO 10766
10783: POP
10784: POP
// end ;
10785: PPOPN 2
10787: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10788: LD_EXP 8
10792: IFFALSE 10800
10794: PUSH
10795: LD_EXP 11
10799: AND
10800: IFFALSE 10893
10802: GO 10804
10804: DISABLE
10805: LD_INT 0
10807: PPUSH
// begin enable ;
10808: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10809: LD_ADDR_VAR 0 1
10813: PUSH
10814: LD_INT 22
10816: PUSH
10817: LD_OWVAR 2
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 25
10831: PUSH
10832: LD_INT 5
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 25
10841: PUSH
10842: LD_INT 9
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 25
10851: PUSH
10852: LD_INT 8
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PPUSH
10869: CALL_OW 69
10873: PUSH
10874: FOR_IN
10875: IFFALSE 10891
// begin SetClass ( i , 1 ) ;
10877: LD_VAR 0 1
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 336
// end ;
10889: GO 10874
10891: POP
10892: POP
// end ;
10893: PPOPN 1
10895: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10896: LD_EXP 8
10900: IFFALSE 10908
10902: PUSH
10903: LD_EXP 12
10907: AND
10908: IFFALSE 10920
10910: PUSH
10911: LD_OWVAR 65
10915: PUSH
10916: LD_INT 7
10918: LESS
10919: AND
10920: IFFALSE 10934
10922: GO 10924
10924: DISABLE
// begin enable ;
10925: ENABLE
// game_speed := 7 ;
10926: LD_ADDR_OWVAR 65
10930: PUSH
10931: LD_INT 7
10933: ST_TO_ADDR
// end ;
10934: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10935: LD_EXP 8
10939: IFFALSE 10947
10941: PUSH
10942: LD_EXP 15
10946: AND
10947: IFFALSE 11149
10949: GO 10951
10951: DISABLE
10952: LD_INT 0
10954: PPUSH
10955: PPUSH
10956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10957: LD_ADDR_VAR 0 3
10961: PUSH
10962: LD_INT 81
10964: PUSH
10965: LD_OWVAR 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 21
10976: PUSH
10977: LD_INT 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: ST_TO_ADDR
// if not tmp then
10993: LD_VAR 0 3
10997: NOT
10998: IFFALSE 11002
// exit ;
11000: GO 11149
// if tmp > 5 then
11002: LD_VAR 0 3
11006: PUSH
11007: LD_INT 5
11009: GREATER
11010: IFFALSE 11022
// k := 5 else
11012: LD_ADDR_VAR 0 2
11016: PUSH
11017: LD_INT 5
11019: ST_TO_ADDR
11020: GO 11032
// k := tmp ;
11022: LD_ADDR_VAR 0 2
11026: PUSH
11027: LD_VAR 0 3
11031: ST_TO_ADDR
// for i := 1 to k do
11032: LD_ADDR_VAR 0 1
11036: PUSH
11037: DOUBLE
11038: LD_INT 1
11040: DEC
11041: ST_TO_ADDR
11042: LD_VAR 0 2
11046: PUSH
11047: FOR_TO
11048: IFFALSE 11147
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11050: LD_VAR 0 3
11054: PUSH
11055: LD_VAR 0 1
11059: ARRAY
11060: PPUSH
11061: LD_VAR 0 1
11065: PUSH
11066: LD_INT 4
11068: MOD
11069: PUSH
11070: LD_INT 1
11072: PLUS
11073: PPUSH
11074: CALL_OW 259
11078: PUSH
11079: LD_INT 10
11081: LESS
11082: IFFALSE 11145
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11084: LD_VAR 0 3
11088: PUSH
11089: LD_VAR 0 1
11093: ARRAY
11094: PPUSH
11095: LD_VAR 0 1
11099: PUSH
11100: LD_INT 4
11102: MOD
11103: PUSH
11104: LD_INT 1
11106: PLUS
11107: PPUSH
11108: LD_VAR 0 3
11112: PUSH
11113: LD_VAR 0 1
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 4
11126: MOD
11127: PUSH
11128: LD_INT 1
11130: PLUS
11131: PPUSH
11132: CALL_OW 259
11136: PUSH
11137: LD_INT 1
11139: PLUS
11140: PPUSH
11141: CALL_OW 237
11145: GO 11047
11147: POP
11148: POP
// end ;
11149: PPOPN 3
11151: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11152: LD_EXP 8
11156: IFFALSE 11164
11158: PUSH
11159: LD_EXP 16
11163: AND
11164: IFFALSE 11184
11166: GO 11168
11168: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11169: LD_INT 4
11171: PPUSH
11172: LD_OWVAR 2
11176: PPUSH
11177: LD_INT 0
11179: PPUSH
11180: CALL_OW 324
11184: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11185: LD_EXP 8
11189: IFFALSE 11197
11191: PUSH
11192: LD_EXP 45
11196: AND
11197: IFFALSE 11217
11199: GO 11201
11201: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11202: LD_INT 19
11204: PPUSH
11205: LD_OWVAR 2
11209: PPUSH
11210: LD_INT 0
11212: PPUSH
11213: CALL_OW 324
11217: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11218: LD_EXP 8
11222: IFFALSE 11230
11224: PUSH
11225: LD_EXP 17
11229: AND
11230: IFFALSE 11332
11232: GO 11234
11234: DISABLE
11235: LD_INT 0
11237: PPUSH
11238: PPUSH
// begin enable ;
11239: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11240: LD_ADDR_VAR 0 2
11244: PUSH
11245: LD_INT 22
11247: PUSH
11248: LD_OWVAR 2
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: LD_INT 34
11262: PUSH
11263: LD_INT 11
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 34
11272: PUSH
11273: LD_INT 30
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PPUSH
11289: CALL_OW 69
11293: ST_TO_ADDR
// if not tmp then
11294: LD_VAR 0 2
11298: NOT
11299: IFFALSE 11303
// exit ;
11301: GO 11332
// for i in tmp do
11303: LD_ADDR_VAR 0 1
11307: PUSH
11308: LD_VAR 0 2
11312: PUSH
11313: FOR_IN
11314: IFFALSE 11330
// begin SetLives ( i , 0 ) ;
11316: LD_VAR 0 1
11320: PPUSH
11321: LD_INT 0
11323: PPUSH
11324: CALL_OW 234
// end ;
11328: GO 11313
11330: POP
11331: POP
// end ;
11332: PPOPN 2
11334: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11335: LD_EXP 8
11339: IFFALSE 11347
11341: PUSH
11342: LD_EXP 18
11346: AND
11347: IFFALSE 11367
11349: GO 11351
11351: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11352: LD_INT 32
11354: PPUSH
11355: LD_OWVAR 2
11359: PPUSH
11360: LD_INT 0
11362: PPUSH
11363: CALL_OW 324
11367: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11368: LD_EXP 8
11372: IFFALSE 11380
11374: PUSH
11375: LD_EXP 19
11379: AND
11380: IFFALSE 11563
11382: GO 11384
11384: DISABLE
11385: LD_INT 0
11387: PPUSH
11388: PPUSH
11389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11390: LD_ADDR_VAR 0 2
11394: PUSH
11395: LD_INT 22
11397: PUSH
11398: LD_OWVAR 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 33
11409: PUSH
11410: LD_INT 3
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 69
11425: ST_TO_ADDR
// if not tmp then
11426: LD_VAR 0 2
11430: NOT
11431: IFFALSE 11435
// exit ;
11433: GO 11563
// side := 0 ;
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_INT 0
11442: ST_TO_ADDR
// for i := 1 to 8 do
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: DOUBLE
11449: LD_INT 1
11451: DEC
11452: ST_TO_ADDR
11453: LD_INT 8
11455: PUSH
11456: FOR_TO
11457: IFFALSE 11507
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11459: LD_OWVAR 2
11463: PUSH
11464: LD_VAR 0 1
11468: NONEQUAL
11469: IFFALSE 11491
11471: PUSH
11472: LD_OWVAR 2
11476: PPUSH
11477: LD_VAR 0 1
11481: PPUSH
11482: CALL_OW 81
11486: PUSH
11487: LD_INT 2
11489: EQUAL
11490: AND
11491: IFFALSE 11505
// begin side := i ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 1
11502: ST_TO_ADDR
// break ;
11503: GO 11507
// end ;
11505: GO 11456
11507: POP
11508: POP
// if not side then
11509: LD_VAR 0 3
11513: NOT
11514: IFFALSE 11518
// exit ;
11516: GO 11563
// for i := 1 to tmp do
11518: LD_ADDR_VAR 0 1
11522: PUSH
11523: DOUBLE
11524: LD_INT 1
11526: DEC
11527: ST_TO_ADDR
11528: LD_VAR 0 2
11532: PUSH
11533: FOR_TO
11534: IFFALSE 11561
// if Prob ( 60 ) then
11536: LD_INT 60
11538: PPUSH
11539: CALL_OW 13
11543: IFFALSE 11559
// SetSide ( i , side ) ;
11545: LD_VAR 0 1
11549: PPUSH
11550: LD_VAR 0 3
11554: PPUSH
11555: CALL_OW 235
11559: GO 11533
11561: POP
11562: POP
// end ;
11563: PPOPN 3
11565: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11566: LD_EXP 8
11570: IFFALSE 11578
11572: PUSH
11573: LD_EXP 21
11577: AND
11578: IFFALSE 11697
11580: GO 11582
11582: DISABLE
11583: LD_INT 0
11585: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: LD_INT 22
11593: PUSH
11594: LD_OWVAR 2
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 3
11615: PUSH
11616: LD_INT 23
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 69
11639: PUSH
11640: FOR_IN
11641: IFFALSE 11695
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11643: LD_VAR 0 1
11647: PPUSH
11648: CALL_OW 257
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: LD_INT 2
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: LD_INT 4
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: IN
11671: IFFALSE 11693
// SetClass ( un , rand ( 1 , 4 ) ) ;
11673: LD_VAR 0 1
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 4
11683: PPUSH
11684: CALL_OW 12
11688: PPUSH
11689: CALL_OW 336
11693: GO 11640
11695: POP
11696: POP
// end ;
11697: PPOPN 1
11699: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11700: LD_EXP 8
11704: IFFALSE 11712
11706: PUSH
11707: LD_EXP 20
11711: AND
11712: IFFALSE 11791
11714: GO 11716
11716: DISABLE
11717: LD_INT 0
11719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11720: LD_ADDR_VAR 0 1
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_OWVAR 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 3
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: ST_TO_ADDR
// if not tmp then
11756: LD_VAR 0 1
11760: NOT
11761: IFFALSE 11765
// exit ;
11763: GO 11791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11765: LD_VAR 0 1
11769: PUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 12
11782: ARRAY
11783: PPUSH
11784: LD_INT 100
11786: PPUSH
11787: CALL_OW 234
// end ;
11791: PPOPN 1
11793: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11794: LD_EXP 8
11798: IFFALSE 11806
11800: PUSH
11801: LD_EXP 22
11805: AND
11806: IFFALSE 11904
11808: GO 11810
11810: DISABLE
11811: LD_INT 0
11813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11814: LD_ADDR_VAR 0 1
11818: PUSH
11819: LD_INT 22
11821: PUSH
11822: LD_OWVAR 2
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 21
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 69
11849: ST_TO_ADDR
// if not tmp then
11850: LD_VAR 0 1
11854: NOT
11855: IFFALSE 11859
// exit ;
11857: GO 11904
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11859: LD_VAR 0 1
11863: PUSH
11864: LD_INT 1
11866: PPUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 12
11876: ARRAY
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 4
11883: PPUSH
11884: CALL_OW 12
11888: PPUSH
11889: LD_INT 3000
11891: PPUSH
11892: LD_INT 9000
11894: PPUSH
11895: CALL_OW 12
11899: PPUSH
11900: CALL_OW 492
// end ;
11904: PPOPN 1
11906: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11907: LD_EXP 8
11911: IFFALSE 11919
11913: PUSH
11914: LD_EXP 23
11918: AND
11919: IFFALSE 11939
11921: GO 11923
11923: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11924: LD_INT 1
11926: PPUSH
11927: LD_OWVAR 2
11931: PPUSH
11932: LD_INT 0
11934: PPUSH
11935: CALL_OW 324
11939: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11940: LD_EXP 8
11944: IFFALSE 11952
11946: PUSH
11947: LD_EXP 24
11951: AND
11952: IFFALSE 12035
11954: GO 11956
11956: DISABLE
11957: LD_INT 0
11959: PPUSH
11960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11961: LD_ADDR_VAR 0 2
11965: PUSH
11966: LD_INT 22
11968: PUSH
11969: LD_OWVAR 2
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 21
11980: PUSH
11981: LD_INT 3
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PPUSH
11992: CALL_OW 69
11996: ST_TO_ADDR
// if not tmp then
11997: LD_VAR 0 2
12001: NOT
12002: IFFALSE 12006
// exit ;
12004: GO 12035
// for i in tmp do
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: LD_VAR 0 2
12015: PUSH
12016: FOR_IN
12017: IFFALSE 12033
// SetBLevel ( i , 10 ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_INT 10
12026: PPUSH
12027: CALL_OW 241
12031: GO 12016
12033: POP
12034: POP
// end ;
12035: PPOPN 2
12037: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12038: LD_EXP 8
12042: IFFALSE 12050
12044: PUSH
12045: LD_EXP 25
12049: AND
12050: IFFALSE 12161
12052: GO 12054
12054: DISABLE
12055: LD_INT 0
12057: PPUSH
12058: PPUSH
12059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: LD_INT 22
12067: PUSH
12068: LD_OWVAR 2
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 25
12079: PUSH
12080: LD_INT 1
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 69
12095: ST_TO_ADDR
// if not tmp then
12096: LD_VAR 0 3
12100: NOT
12101: IFFALSE 12105
// exit ;
12103: GO 12161
// un := tmp [ rand ( 1 , tmp ) ] ;
12105: LD_ADDR_VAR 0 2
12109: PUSH
12110: LD_VAR 0 3
12114: PUSH
12115: LD_INT 1
12117: PPUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: CALL_OW 12
12127: ARRAY
12128: ST_TO_ADDR
// if Crawls ( un ) then
12129: LD_VAR 0 2
12133: PPUSH
12134: CALL_OW 318
12138: IFFALSE 12149
// ComWalk ( un ) ;
12140: LD_VAR 0 2
12144: PPUSH
12145: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12149: LD_VAR 0 2
12153: PPUSH
12154: LD_INT 5
12156: PPUSH
12157: CALL_OW 336
// end ;
12161: PPOPN 3
12163: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12164: LD_EXP 8
12168: IFFALSE 12176
12170: PUSH
12171: LD_EXP 26
12175: AND
12176: IFFALSE 12188
12178: PUSH
12179: LD_OWVAR 67
12183: PUSH
12184: LD_INT 4
12186: LESS
12187: AND
12188: IFFALSE 12207
12190: GO 12192
12192: DISABLE
// begin Difficulty := Difficulty + 1 ;
12193: LD_ADDR_OWVAR 67
12197: PUSH
12198: LD_OWVAR 67
12202: PUSH
12203: LD_INT 1
12205: PLUS
12206: ST_TO_ADDR
// end ;
12207: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12208: LD_EXP 8
12212: IFFALSE 12220
12214: PUSH
12215: LD_EXP 27
12219: AND
12220: IFFALSE 12323
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
// begin for i := 1 to 5 do
12228: LD_ADDR_VAR 0 1
12232: PUSH
12233: DOUBLE
12234: LD_INT 1
12236: DEC
12237: ST_TO_ADDR
12238: LD_INT 5
12240: PUSH
12241: FOR_TO
12242: IFFALSE 12321
// begin uc_nation := nation_nature ;
12244: LD_ADDR_OWVAR 21
12248: PUSH
12249: LD_INT 0
12251: ST_TO_ADDR
// uc_side := 0 ;
12252: LD_ADDR_OWVAR 20
12256: PUSH
12257: LD_INT 0
12259: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12260: LD_ADDR_OWVAR 29
12264: PUSH
12265: LD_INT 12
12267: PUSH
12268: LD_INT 12
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: ST_TO_ADDR
// hc_agressivity := 20 ;
12275: LD_ADDR_OWVAR 35
12279: PUSH
12280: LD_INT 20
12282: ST_TO_ADDR
// hc_class := class_tiger ;
12283: LD_ADDR_OWVAR 28
12287: PUSH
12288: LD_INT 14
12290: ST_TO_ADDR
// hc_gallery :=  ;
12291: LD_ADDR_OWVAR 33
12295: PUSH
12296: LD_STRING 
12298: ST_TO_ADDR
// hc_name :=  ;
12299: LD_ADDR_OWVAR 26
12303: PUSH
12304: LD_STRING 
12306: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12307: CALL_OW 44
12311: PPUSH
12312: LD_INT 0
12314: PPUSH
12315: CALL_OW 51
// end ;
12319: GO 12241
12321: POP
12322: POP
// end ;
12323: PPOPN 1
12325: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12326: LD_EXP 8
12330: IFFALSE 12338
12332: PUSH
12333: LD_EXP 28
12337: AND
12338: IFFALSE 12347
12340: GO 12342
12342: DISABLE
// StreamSibBomb ;
12343: CALL 12348 0 0
12347: END
// export function StreamSibBomb ; var i , x , y ; begin
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
12352: PPUSH
12353: PPUSH
// result := false ;
12354: LD_ADDR_VAR 0 1
12358: PUSH
12359: LD_INT 0
12361: ST_TO_ADDR
// for i := 1 to 16 do
12362: LD_ADDR_VAR 0 2
12366: PUSH
12367: DOUBLE
12368: LD_INT 1
12370: DEC
12371: ST_TO_ADDR
12372: LD_INT 16
12374: PUSH
12375: FOR_TO
12376: IFFALSE 12575
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_INT 10
12385: PUSH
12386: LD_INT 20
12388: PUSH
12389: LD_INT 30
12391: PUSH
12392: LD_INT 40
12394: PUSH
12395: LD_INT 50
12397: PUSH
12398: LD_INT 60
12400: PUSH
12401: LD_INT 70
12403: PUSH
12404: LD_INT 80
12406: PUSH
12407: LD_INT 90
12409: PUSH
12410: LD_INT 100
12412: PUSH
12413: LD_INT 110
12415: PUSH
12416: LD_INT 120
12418: PUSH
12419: LD_INT 130
12421: PUSH
12422: LD_INT 140
12424: PUSH
12425: LD_INT 150
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 1
12447: PPUSH
12448: LD_INT 15
12450: PPUSH
12451: CALL_OW 12
12455: ARRAY
12456: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12457: LD_ADDR_VAR 0 4
12461: PUSH
12462: LD_INT 10
12464: PUSH
12465: LD_INT 20
12467: PUSH
12468: LD_INT 30
12470: PUSH
12471: LD_INT 40
12473: PUSH
12474: LD_INT 50
12476: PUSH
12477: LD_INT 60
12479: PUSH
12480: LD_INT 70
12482: PUSH
12483: LD_INT 80
12485: PUSH
12486: LD_INT 90
12488: PUSH
12489: LD_INT 100
12491: PUSH
12492: LD_INT 110
12494: PUSH
12495: LD_INT 120
12497: PUSH
12498: LD_INT 130
12500: PUSH
12501: LD_INT 140
12503: PUSH
12504: LD_INT 150
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 1
12526: PPUSH
12527: LD_INT 15
12529: PPUSH
12530: CALL_OW 12
12534: ARRAY
12535: ST_TO_ADDR
// if ValidHex ( x , y ) then
12536: LD_VAR 0 3
12540: PPUSH
12541: LD_VAR 0 4
12545: PPUSH
12546: CALL_OW 488
12550: IFFALSE 12573
// begin result := [ x , y ] ;
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: LD_VAR 0 3
12561: PUSH
12562: LD_VAR 0 4
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: ST_TO_ADDR
// break ;
12571: GO 12575
// end ; end ;
12573: GO 12375
12575: POP
12576: POP
// if result then
12577: LD_VAR 0 1
12581: IFFALSE 12641
// begin ToLua ( playSibBomb() ) ;
12583: LD_STRING playSibBomb()
12585: PPUSH
12586: CALL_OW 559
// wait ( 0 0$14 ) ;
12590: LD_INT 490
12592: PPUSH
12593: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: LD_VAR 0 1
12610: PUSH
12611: LD_INT 2
12613: ARRAY
12614: PPUSH
12615: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: PPUSH
12628: LD_VAR 0 1
12632: PUSH
12633: LD_INT 2
12635: ARRAY
12636: PPUSH
12637: CALL_OW 429
// end ; end ;
12641: LD_VAR 0 1
12645: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12646: LD_EXP 8
12650: IFFALSE 12658
12652: PUSH
12653: LD_EXP 30
12657: AND
12658: IFFALSE 12670
12660: GO 12662
12662: DISABLE
// YouLost (  ) ;
12663: LD_STRING 
12665: PPUSH
12666: CALL_OW 104
12670: END
// every 0 0$1 trigger StreamModeActive and sFog do
12671: LD_EXP 8
12675: IFFALSE 12683
12677: PUSH
12678: LD_EXP 29
12682: AND
12683: IFFALSE 12697
12685: GO 12687
12687: DISABLE
// FogOff ( your_side ) ;
12688: LD_OWVAR 2
12692: PPUSH
12693: CALL_OW 344
12697: END
// every 0 0$1 trigger StreamModeActive and sSun do
12698: LD_EXP 8
12702: IFFALSE 12710
12704: PUSH
12705: LD_EXP 31
12709: AND
12710: IFFALSE 12738
12712: GO 12714
12714: DISABLE
// begin solar_recharge_percent := 0 ;
12715: LD_ADDR_OWVAR 79
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12723: LD_INT 10500
12725: PPUSH
12726: CALL_OW 67
// solar_recharge_percent := 100 ;
12730: LD_ADDR_OWVAR 79
12734: PUSH
12735: LD_INT 100
12737: ST_TO_ADDR
// end ;
12738: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12739: LD_EXP 8
12743: IFFALSE 12751
12745: PUSH
12746: LD_EXP 32
12750: AND
12751: IFFALSE 12990
12753: GO 12755
12755: DISABLE
12756: LD_INT 0
12758: PPUSH
12759: PPUSH
12760: PPUSH
// begin tmp := [ ] ;
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: EMPTY
12767: ST_TO_ADDR
// for i := 1 to 6 do
12768: LD_ADDR_VAR 0 1
12772: PUSH
12773: DOUBLE
12774: LD_INT 1
12776: DEC
12777: ST_TO_ADDR
12778: LD_INT 6
12780: PUSH
12781: FOR_TO
12782: IFFALSE 12887
// begin uc_nation := nation_nature ;
12784: LD_ADDR_OWVAR 21
12788: PUSH
12789: LD_INT 0
12791: ST_TO_ADDR
// uc_side := 0 ;
12792: LD_ADDR_OWVAR 20
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12800: LD_ADDR_OWVAR 29
12804: PUSH
12805: LD_INT 12
12807: PUSH
12808: LD_INT 12
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: ST_TO_ADDR
// hc_agressivity := 20 ;
12815: LD_ADDR_OWVAR 35
12819: PUSH
12820: LD_INT 20
12822: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12823: LD_ADDR_OWVAR 28
12827: PUSH
12828: LD_INT 17
12830: ST_TO_ADDR
// hc_gallery :=  ;
12831: LD_ADDR_OWVAR 33
12835: PUSH
12836: LD_STRING 
12838: ST_TO_ADDR
// hc_name :=  ;
12839: LD_ADDR_OWVAR 26
12843: PUSH
12844: LD_STRING 
12846: ST_TO_ADDR
// un := CreateHuman ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: CALL_OW 44
12856: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12857: LD_VAR 0 2
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 51
// tmp := tmp ^ un ;
12869: LD_ADDR_VAR 0 3
12873: PUSH
12874: LD_VAR 0 3
12878: PUSH
12879: LD_VAR 0 2
12883: ADD
12884: ST_TO_ADDR
// end ;
12885: GO 12781
12887: POP
12888: POP
// repeat wait ( 0 0$1 ) ;
12889: LD_INT 35
12891: PPUSH
12892: CALL_OW 67
// for un in tmp do
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_VAR 0 3
12905: PUSH
12906: FOR_IN
12907: IFFALSE 12981
// begin if IsDead ( un ) then
12909: LD_VAR 0 2
12913: PPUSH
12914: CALL_OW 301
12918: IFFALSE 12938
// begin tmp := tmp diff un ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_VAR 0 3
12929: PUSH
12930: LD_VAR 0 2
12934: DIFF
12935: ST_TO_ADDR
// continue ;
12936: GO 12906
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12938: LD_VAR 0 2
12942: PPUSH
12943: LD_INT 3
12945: PUSH
12946: LD_INT 22
12948: PUSH
12949: LD_INT 0
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: PPUSH
12965: LD_VAR 0 2
12969: PPUSH
12970: CALL_OW 74
12974: PPUSH
12975: CALL_OW 115
// end ;
12979: GO 12906
12981: POP
12982: POP
// until not tmp ;
12983: LD_VAR 0 3
12987: NOT
12988: IFFALSE 12889
// end ;
12990: PPOPN 3
12992: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12993: LD_EXP 8
12997: IFFALSE 13005
12999: PUSH
13000: LD_EXP 33
13004: AND
13005: IFFALSE 13059
13007: GO 13009
13009: DISABLE
// begin ToLua ( displayTroll(); ) ;
13010: LD_STRING displayTroll();
13012: PPUSH
13013: CALL_OW 559
// wait ( 3 3$00 ) ;
13017: LD_INT 6300
13019: PPUSH
13020: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13024: LD_STRING hideTroll();
13026: PPUSH
13027: CALL_OW 559
// wait ( 1 1$00 ) ;
13031: LD_INT 2100
13033: PPUSH
13034: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13038: LD_STRING displayTroll();
13040: PPUSH
13041: CALL_OW 559
// wait ( 1 1$00 ) ;
13045: LD_INT 2100
13047: PPUSH
13048: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13052: LD_STRING hideTroll();
13054: PPUSH
13055: CALL_OW 559
// end ;
13059: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13060: LD_EXP 8
13064: IFFALSE 13072
13066: PUSH
13067: LD_EXP 34
13071: AND
13072: IFFALSE 13135
13074: GO 13076
13076: DISABLE
13077: LD_INT 0
13079: PPUSH
// begin p := 0 ;
13080: LD_ADDR_VAR 0 1
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// repeat game_speed := 1 ;
13088: LD_ADDR_OWVAR 65
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13096: LD_INT 35
13098: PPUSH
13099: CALL_OW 67
// p := p + 1 ;
13103: LD_ADDR_VAR 0 1
13107: PUSH
13108: LD_VAR 0 1
13112: PUSH
13113: LD_INT 1
13115: PLUS
13116: ST_TO_ADDR
// until p >= 60 ;
13117: LD_VAR 0 1
13121: PUSH
13122: LD_INT 60
13124: GREATEREQUAL
13125: IFFALSE 13088
// game_speed := 4 ;
13127: LD_ADDR_OWVAR 65
13131: PUSH
13132: LD_INT 4
13134: ST_TO_ADDR
// end ;
13135: PPOPN 1
13137: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13138: LD_EXP 8
13142: IFFALSE 13150
13144: PUSH
13145: LD_EXP 35
13149: AND
13150: IFFALSE 13296
13152: GO 13154
13154: DISABLE
13155: LD_INT 0
13157: PPUSH
13158: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13159: LD_ADDR_VAR 0 1
13163: PUSH
13164: LD_INT 22
13166: PUSH
13167: LD_OWVAR 2
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: LD_INT 30
13181: PUSH
13182: LD_INT 0
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 30
13191: PUSH
13192: LD_INT 1
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PPUSH
13208: CALL_OW 69
13212: ST_TO_ADDR
// if not depot then
13213: LD_VAR 0 1
13217: NOT
13218: IFFALSE 13222
// exit ;
13220: GO 13296
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13222: LD_ADDR_VAR 0 2
13226: PUSH
13227: LD_VAR 0 1
13231: PUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 12
13244: ARRAY
13245: PPUSH
13246: CALL_OW 274
13250: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13251: LD_VAR 0 2
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 0
13261: PPUSH
13262: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13266: LD_VAR 0 2
13270: PPUSH
13271: LD_INT 2
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13281: LD_VAR 0 2
13285: PPUSH
13286: LD_INT 3
13288: PPUSH
13289: LD_INT 0
13291: PPUSH
13292: CALL_OW 277
// end ;
13296: PPOPN 2
13298: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13299: LD_EXP 8
13303: IFFALSE 13311
13305: PUSH
13306: LD_EXP 36
13310: AND
13311: IFFALSE 13408
13313: GO 13315
13315: DISABLE
13316: LD_INT 0
13318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13319: LD_ADDR_VAR 0 1
13323: PUSH
13324: LD_INT 22
13326: PUSH
13327: LD_OWVAR 2
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 21
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 3
13348: PUSH
13349: LD_INT 23
13351: PUSH
13352: LD_INT 0
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: PPUSH
13368: CALL_OW 69
13372: ST_TO_ADDR
// if not tmp then
13373: LD_VAR 0 1
13377: NOT
13378: IFFALSE 13382
// exit ;
13380: GO 13408
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13382: LD_VAR 0 1
13386: PUSH
13387: LD_INT 1
13389: PPUSH
13390: LD_VAR 0 1
13394: PPUSH
13395: CALL_OW 12
13399: ARRAY
13400: PPUSH
13401: LD_INT 200
13403: PPUSH
13404: CALL_OW 234
// end ;
13408: PPOPN 1
13410: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13411: LD_EXP 8
13415: IFFALSE 13423
13417: PUSH
13418: LD_EXP 37
13422: AND
13423: IFFALSE 13502
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_OWVAR 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 21
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PPUSH
13462: CALL_OW 69
13466: ST_TO_ADDR
// if not tmp then
13467: LD_VAR 0 1
13471: NOT
13472: IFFALSE 13476
// exit ;
13474: GO 13502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: PPUSH
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 12
13493: ARRAY
13494: PPUSH
13495: LD_INT 60
13497: PPUSH
13498: CALL_OW 234
// end ;
13502: PPOPN 1
13504: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13505: LD_EXP 8
13509: IFFALSE 13517
13511: PUSH
13512: LD_EXP 38
13516: AND
13517: IFFALSE 13616
13519: GO 13521
13521: DISABLE
13522: LD_INT 0
13524: PPUSH
13525: PPUSH
// begin enable ;
13526: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13527: LD_ADDR_VAR 0 1
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_OWVAR 2
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 61
13546: PUSH
13547: EMPTY
13548: LIST
13549: PUSH
13550: LD_INT 33
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: ST_TO_ADDR
// if not tmp then
13570: LD_VAR 0 1
13574: NOT
13575: IFFALSE 13579
// exit ;
13577: GO 13616
// for i in tmp do
13579: LD_ADDR_VAR 0 2
13583: PUSH
13584: LD_VAR 0 1
13588: PUSH
13589: FOR_IN
13590: IFFALSE 13614
// if IsControledBy ( i ) then
13592: LD_VAR 0 2
13596: PPUSH
13597: CALL_OW 312
13601: IFFALSE 13612
// ComUnlink ( i ) ;
13603: LD_VAR 0 2
13607: PPUSH
13608: CALL_OW 136
13612: GO 13589
13614: POP
13615: POP
// end ;
13616: PPOPN 2
13618: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13619: LD_EXP 8
13623: IFFALSE 13631
13625: PUSH
13626: LD_EXP 39
13630: AND
13631: IFFALSE 13771
13633: GO 13635
13635: DISABLE
13636: LD_INT 0
13638: PPUSH
13639: PPUSH
// begin ToLua ( displayPowell(); ) ;
13640: LD_STRING displayPowell();
13642: PPUSH
13643: CALL_OW 559
// uc_side := 0 ;
13647: LD_ADDR_OWVAR 20
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// uc_nation := 2 ;
13655: LD_ADDR_OWVAR 21
13659: PUSH
13660: LD_INT 2
13662: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13663: LD_ADDR_OWVAR 37
13667: PUSH
13668: LD_INT 14
13670: ST_TO_ADDR
// vc_engine := engine_siberite ;
13671: LD_ADDR_OWVAR 39
13675: PUSH
13676: LD_INT 3
13678: ST_TO_ADDR
// vc_control := control_apeman ;
13679: LD_ADDR_OWVAR 38
13683: PUSH
13684: LD_INT 5
13686: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13687: LD_ADDR_OWVAR 40
13691: PUSH
13692: LD_INT 29
13694: ST_TO_ADDR
// un := CreateVehicle ;
13695: LD_ADDR_VAR 0 2
13699: PUSH
13700: CALL_OW 45
13704: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13705: LD_VAR 0 2
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13717: LD_INT 35
13719: PPUSH
13720: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13724: LD_VAR 0 2
13728: PPUSH
13729: LD_INT 22
13731: PUSH
13732: LD_OWVAR 2
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PPUSH
13746: LD_VAR 0 2
13750: PPUSH
13751: CALL_OW 74
13755: PPUSH
13756: CALL_OW 115
// until IsDead ( un ) ;
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 301
13769: IFFALSE 13717
// end ;
13771: PPOPN 2
13773: END
// every 0 0$1 trigger StreamModeActive and sStu do
13774: LD_EXP 8
13778: IFFALSE 13786
13780: PUSH
13781: LD_EXP 47
13785: AND
13786: IFFALSE 13802
13788: GO 13790
13790: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13791: LD_STRING displayStucuk();
13793: PPUSH
13794: CALL_OW 559
// ResetFog ;
13798: CALL_OW 335
// end ;
13802: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13803: LD_EXP 8
13807: IFFALSE 13815
13809: PUSH
13810: LD_EXP 40
13814: AND
13815: IFFALSE 13956
13817: GO 13819
13819: DISABLE
13820: LD_INT 0
13822: PPUSH
13823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 21
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PPUSH
13855: CALL_OW 69
13859: ST_TO_ADDR
// if not tmp then
13860: LD_VAR 0 2
13864: NOT
13865: IFFALSE 13869
// exit ;
13867: GO 13956
// un := tmp [ rand ( 1 , tmp ) ] ;
13869: LD_ADDR_VAR 0 1
13873: PUSH
13874: LD_VAR 0 2
13878: PUSH
13879: LD_INT 1
13881: PPUSH
13882: LD_VAR 0 2
13886: PPUSH
13887: CALL_OW 12
13891: ARRAY
13892: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 0
13900: PPUSH
13901: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13905: LD_VAR 0 1
13909: PPUSH
13910: LD_OWVAR 3
13914: PUSH
13915: LD_VAR 0 1
13919: DIFF
13920: PPUSH
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 74
13930: PPUSH
13931: CALL_OW 115
// wait ( 0 0$20 ) ;
13935: LD_INT 700
13937: PPUSH
13938: CALL_OW 67
// SetSide ( un , your_side ) ;
13942: LD_VAR 0 1
13946: PPUSH
13947: LD_OWVAR 2
13951: PPUSH
13952: CALL_OW 235
// end ;
13956: PPOPN 2
13958: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13959: LD_EXP 8
13963: IFFALSE 13971
13965: PUSH
13966: LD_EXP 41
13970: AND
13971: IFFALSE 14077
13973: GO 13975
13975: DISABLE
13976: LD_INT 0
13978: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13979: LD_ADDR_VAR 0 1
13983: PUSH
13984: LD_INT 22
13986: PUSH
13987: LD_OWVAR 2
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 2
13998: PUSH
13999: LD_INT 30
14001: PUSH
14002: LD_INT 0
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 30
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PPUSH
14028: CALL_OW 69
14032: ST_TO_ADDR
// if not depot then
14033: LD_VAR 0 1
14037: NOT
14038: IFFALSE 14042
// exit ;
14040: GO 14077
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14042: LD_VAR 0 1
14046: PUSH
14047: LD_INT 1
14049: ARRAY
14050: PPUSH
14051: CALL_OW 250
14055: PPUSH
14056: LD_VAR 0 1
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: PPUSH
14065: CALL_OW 251
14069: PPUSH
14070: LD_INT 70
14072: PPUSH
14073: CALL_OW 495
// end ;
14077: PPOPN 1
14079: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14080: LD_EXP 8
14084: IFFALSE 14092
14086: PUSH
14087: LD_EXP 42
14091: AND
14092: IFFALSE 14303
14094: GO 14096
14096: DISABLE
14097: LD_INT 0
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14104: LD_ADDR_VAR 0 5
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_OWVAR 2
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 21
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: ST_TO_ADDR
// if not tmp then
14140: LD_VAR 0 5
14144: NOT
14145: IFFALSE 14149
// exit ;
14147: GO 14303
// for i in tmp do
14149: LD_ADDR_VAR 0 1
14153: PUSH
14154: LD_VAR 0 5
14158: PUSH
14159: FOR_IN
14160: IFFALSE 14301
// begin d := rand ( 0 , 5 ) ;
14162: LD_ADDR_VAR 0 4
14166: PUSH
14167: LD_INT 0
14169: PPUSH
14170: LD_INT 5
14172: PPUSH
14173: CALL_OW 12
14177: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14178: LD_ADDR_VAR 0 2
14182: PUSH
14183: LD_VAR 0 1
14187: PPUSH
14188: CALL_OW 250
14192: PPUSH
14193: LD_VAR 0 4
14197: PPUSH
14198: LD_INT 3
14200: PPUSH
14201: LD_INT 12
14203: PPUSH
14204: CALL_OW 12
14208: PPUSH
14209: CALL_OW 272
14213: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14214: LD_ADDR_VAR 0 3
14218: PUSH
14219: LD_VAR 0 1
14223: PPUSH
14224: CALL_OW 251
14228: PPUSH
14229: LD_VAR 0 4
14233: PPUSH
14234: LD_INT 3
14236: PPUSH
14237: LD_INT 12
14239: PPUSH
14240: CALL_OW 12
14244: PPUSH
14245: CALL_OW 273
14249: ST_TO_ADDR
// if ValidHex ( x , y ) then
14250: LD_VAR 0 2
14254: PPUSH
14255: LD_VAR 0 3
14259: PPUSH
14260: CALL_OW 488
14264: IFFALSE 14299
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_VAR 0 2
14275: PPUSH
14276: LD_VAR 0 3
14280: PPUSH
14281: LD_INT 3
14283: PPUSH
14284: LD_INT 6
14286: PPUSH
14287: CALL_OW 12
14291: PPUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 483
// end ;
14299: GO 14159
14301: POP
14302: POP
// end ;
14303: PPOPN 5
14305: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14306: LD_EXP 8
14310: IFFALSE 14318
14312: PUSH
14313: LD_EXP 43
14317: AND
14318: IFFALSE 14412
14320: GO 14322
14322: DISABLE
14323: LD_INT 0
14325: PPUSH
14326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14327: LD_ADDR_VAR 0 2
14331: PUSH
14332: LD_INT 22
14334: PUSH
14335: LD_OWVAR 2
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 32
14346: PUSH
14347: LD_INT 1
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 2
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14412
// for i in tmp do
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_VAR 0 2
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14410
// SetFuel ( i , 0 ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 0
14403: PPUSH
14404: CALL_OW 240
14408: GO 14393
14410: POP
14411: POP
// end ;
14412: PPOPN 2
14414: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14415: LD_EXP 8
14419: IFFALSE 14427
14421: PUSH
14422: LD_EXP 44
14426: AND
14427: IFFALSE 14493
14429: GO 14431
14431: DISABLE
14432: LD_INT 0
14434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14435: LD_ADDR_VAR 0 1
14439: PUSH
14440: LD_INT 22
14442: PUSH
14443: LD_OWVAR 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 30
14454: PUSH
14455: LD_INT 29
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PPUSH
14466: CALL_OW 69
14470: ST_TO_ADDR
// if not tmp then
14471: LD_VAR 0 1
14475: NOT
14476: IFFALSE 14480
// exit ;
14478: GO 14493
// DestroyUnit ( tmp [ 1 ] ) ;
14480: LD_VAR 0 1
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PPUSH
14489: CALL_OW 65
// end ;
14493: PPOPN 1
14495: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14496: LD_EXP 8
14500: IFFALSE 14508
14502: PUSH
14503: LD_EXP 46
14507: AND
14508: IFFALSE 14637
14510: GO 14512
14512: DISABLE
14513: LD_INT 0
14515: PPUSH
// begin uc_side := 0 ;
14516: LD_ADDR_OWVAR 20
14520: PUSH
14521: LD_INT 0
14523: ST_TO_ADDR
// uc_nation := nation_arabian ;
14524: LD_ADDR_OWVAR 21
14528: PUSH
14529: LD_INT 2
14531: ST_TO_ADDR
// hc_gallery :=  ;
14532: LD_ADDR_OWVAR 33
14536: PUSH
14537: LD_STRING 
14539: ST_TO_ADDR
// hc_name :=  ;
14540: LD_ADDR_OWVAR 26
14544: PUSH
14545: LD_STRING 
14547: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14548: LD_INT 1
14550: PPUSH
14551: LD_INT 11
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: CALL_OW 380
// un := CreateHuman ;
14561: LD_ADDR_VAR 0 1
14565: PUSH
14566: CALL_OW 44
14570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14571: LD_VAR 0 1
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14590: LD_VAR 0 1
14594: PPUSH
14595: LD_INT 22
14597: PUSH
14598: LD_OWVAR 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PPUSH
14607: CALL_OW 69
14611: PPUSH
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 74
14621: PPUSH
14622: CALL_OW 115
// until IsDead ( un ) ;
14626: LD_VAR 0 1
14630: PPUSH
14631: CALL_OW 301
14635: IFFALSE 14583
// end ;
14637: PPOPN 1
14639: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14640: LD_EXP 8
14644: IFFALSE 14652
14646: PUSH
14647: LD_EXP 48
14651: AND
14652: IFFALSE 14664
14654: GO 14656
14656: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14657: LD_STRING earthquake(getX(game), 0, 32)
14659: PPUSH
14660: CALL_OW 559
14664: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14665: LD_EXP 8
14669: IFFALSE 14677
14671: PUSH
14672: LD_EXP 49
14676: AND
14677: IFFALSE 14768
14679: GO 14681
14681: DISABLE
14682: LD_INT 0
14684: PPUSH
// begin enable ;
14685: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_OWVAR 2
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 21
14705: PUSH
14706: LD_INT 2
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 33
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: ST_TO_ADDR
// if not tmp then
14733: LD_VAR 0 1
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 14768
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14742: LD_VAR 0 1
14746: PUSH
14747: LD_INT 1
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 12
14759: ARRAY
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 234
// end ;
14768: PPOPN 1
14770: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14771: LD_EXP 8
14775: IFFALSE 14783
14777: PUSH
14778: LD_EXP 50
14782: AND
14783: IFFALSE 14924
14785: GO 14787
14787: DISABLE
14788: LD_INT 0
14790: PPUSH
14791: PPUSH
14792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14793: LD_ADDR_VAR 0 3
14797: PUSH
14798: LD_INT 22
14800: PUSH
14801: LD_OWVAR 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 25
14812: PUSH
14813: LD_INT 1
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PPUSH
14824: CALL_OW 69
14828: ST_TO_ADDR
// if not tmp then
14829: LD_VAR 0 3
14833: NOT
14834: IFFALSE 14838
// exit ;
14836: GO 14924
// un := tmp [ rand ( 1 , tmp ) ] ;
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: CALL_OW 12
14860: ARRAY
14861: ST_TO_ADDR
// if Crawls ( un ) then
14862: LD_VAR 0 2
14866: PPUSH
14867: CALL_OW 318
14871: IFFALSE 14882
// ComWalk ( un ) ;
14873: LD_VAR 0 2
14877: PPUSH
14878: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14882: LD_VAR 0 2
14886: PPUSH
14887: LD_INT 9
14889: PPUSH
14890: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14894: LD_INT 28
14896: PPUSH
14897: LD_OWVAR 2
14901: PPUSH
14902: LD_INT 2
14904: PPUSH
14905: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14909: LD_INT 29
14911: PPUSH
14912: LD_OWVAR 2
14916: PPUSH
14917: LD_INT 2
14919: PPUSH
14920: CALL_OW 322
// end ;
14924: PPOPN 3
14926: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14927: LD_EXP 8
14931: IFFALSE 14939
14933: PUSH
14934: LD_EXP 51
14938: AND
14939: IFFALSE 15050
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
14948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 22
14956: PUSH
14957: LD_OWVAR 2
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 25
14968: PUSH
14969: LD_INT 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL_OW 69
14984: ST_TO_ADDR
// if not tmp then
14985: LD_VAR 0 3
14989: NOT
14990: IFFALSE 14994
// exit ;
14992: GO 15050
// un := tmp [ rand ( 1 , tmp ) ] ;
14994: LD_ADDR_VAR 0 2
14998: PUSH
14999: LD_VAR 0 3
15003: PUSH
15004: LD_INT 1
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: CALL_OW 12
15016: ARRAY
15017: ST_TO_ADDR
// if Crawls ( un ) then
15018: LD_VAR 0 2
15022: PPUSH
15023: CALL_OW 318
15027: IFFALSE 15038
// ComWalk ( un ) ;
15029: LD_VAR 0 2
15033: PPUSH
15034: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15038: LD_VAR 0 2
15042: PPUSH
15043: LD_INT 8
15045: PPUSH
15046: CALL_OW 336
// end ;
15050: PPOPN 3
15052: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15053: LD_EXP 8
15057: IFFALSE 15065
15059: PUSH
15060: LD_EXP 52
15064: AND
15065: IFFALSE 15209
15067: GO 15069
15069: DISABLE
15070: LD_INT 0
15072: PPUSH
15073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_INT 22
15081: PUSH
15082: LD_OWVAR 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 21
15093: PUSH
15094: LD_INT 2
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: LD_INT 34
15106: PUSH
15107: LD_INT 12
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 34
15116: PUSH
15117: LD_INT 51
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 34
15126: PUSH
15127: LD_INT 32
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 69
15149: ST_TO_ADDR
// if not tmp then
15150: LD_VAR 0 2
15154: NOT
15155: IFFALSE 15159
// exit ;
15157: GO 15209
// for i in tmp do
15159: LD_ADDR_VAR 0 1
15163: PUSH
15164: LD_VAR 0 2
15168: PUSH
15169: FOR_IN
15170: IFFALSE 15207
// if GetCargo ( i , mat_artifact ) = 0 then
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_INT 4
15179: PPUSH
15180: CALL_OW 289
15184: PUSH
15185: LD_INT 0
15187: EQUAL
15188: IFFALSE 15205
// SetCargo ( i , mat_siberit , 100 ) ;
15190: LD_VAR 0 1
15194: PPUSH
15195: LD_INT 3
15197: PPUSH
15198: LD_INT 100
15200: PPUSH
15201: CALL_OW 290
15205: GO 15169
15207: POP
15208: POP
// end ;
15209: PPOPN 2
15211: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15212: LD_EXP 8
15216: IFFALSE 15224
15218: PUSH
15219: LD_EXP 53
15223: AND
15224: IFFALSE 15407
15226: GO 15228
15228: DISABLE
15229: LD_INT 0
15231: PPUSH
15232: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15233: LD_ADDR_VAR 0 2
15237: PUSH
15238: LD_INT 22
15240: PUSH
15241: LD_OWVAR 2
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL_OW 69
15254: ST_TO_ADDR
// if not tmp then
15255: LD_VAR 0 2
15259: NOT
15260: IFFALSE 15264
// exit ;
15262: GO 15407
// for i := 1 to 2 do
15264: LD_ADDR_VAR 0 1
15268: PUSH
15269: DOUBLE
15270: LD_INT 1
15272: DEC
15273: ST_TO_ADDR
15274: LD_INT 2
15276: PUSH
15277: FOR_TO
15278: IFFALSE 15405
// begin uc_side := your_side ;
15280: LD_ADDR_OWVAR 20
15284: PUSH
15285: LD_OWVAR 2
15289: ST_TO_ADDR
// uc_nation := nation_american ;
15290: LD_ADDR_OWVAR 21
15294: PUSH
15295: LD_INT 1
15297: ST_TO_ADDR
// vc_chassis := us_morphling ;
15298: LD_ADDR_OWVAR 37
15302: PUSH
15303: LD_INT 5
15305: ST_TO_ADDR
// vc_engine := engine_siberite ;
15306: LD_ADDR_OWVAR 39
15310: PUSH
15311: LD_INT 3
15313: ST_TO_ADDR
// vc_control := control_computer ;
15314: LD_ADDR_OWVAR 38
15318: PUSH
15319: LD_INT 3
15321: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15322: LD_ADDR_OWVAR 40
15326: PUSH
15327: LD_INT 10
15329: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15330: LD_VAR 0 2
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: CALL_OW 310
15343: NOT
15344: IFFALSE 15391
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15346: CALL_OW 45
15350: PPUSH
15351: LD_VAR 0 2
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: CALL_OW 250
15364: PPUSH
15365: LD_VAR 0 2
15369: PUSH
15370: LD_INT 1
15372: ARRAY
15373: PPUSH
15374: CALL_OW 251
15378: PPUSH
15379: LD_INT 12
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 50
15389: GO 15403
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15391: CALL_OW 45
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: CALL_OW 51
// end ;
15403: GO 15277
15405: POP
15406: POP
// end ;
15407: PPOPN 2
15409: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15410: LD_EXP 8
15414: IFFALSE 15422
15416: PUSH
15417: LD_EXP 54
15421: AND
15422: IFFALSE 15644
15424: GO 15426
15426: DISABLE
15427: LD_INT 0
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15435: LD_ADDR_VAR 0 6
15439: PUSH
15440: LD_INT 22
15442: PUSH
15443: LD_OWVAR 2
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 3
15464: PUSH
15465: LD_INT 23
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 69
15488: ST_TO_ADDR
// if not tmp then
15489: LD_VAR 0 6
15493: NOT
15494: IFFALSE 15498
// exit ;
15496: GO 15644
// s1 := rand ( 1 , 4 ) ;
15498: LD_ADDR_VAR 0 2
15502: PUSH
15503: LD_INT 1
15505: PPUSH
15506: LD_INT 4
15508: PPUSH
15509: CALL_OW 12
15513: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15514: LD_ADDR_VAR 0 4
15518: PUSH
15519: LD_VAR 0 6
15523: PUSH
15524: LD_INT 1
15526: ARRAY
15527: PPUSH
15528: LD_VAR 0 2
15532: PPUSH
15533: CALL_OW 259
15537: ST_TO_ADDR
// if s1 = 1 then
15538: LD_VAR 0 2
15542: PUSH
15543: LD_INT 1
15545: EQUAL
15546: IFFALSE 15566
// s2 := rand ( 2 , 4 ) else
15548: LD_ADDR_VAR 0 3
15552: PUSH
15553: LD_INT 2
15555: PPUSH
15556: LD_INT 4
15558: PPUSH
15559: CALL_OW 12
15563: ST_TO_ADDR
15564: GO 15574
// s2 := 1 ;
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: LD_INT 1
15573: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15574: LD_ADDR_VAR 0 5
15578: PUSH
15579: LD_VAR 0 6
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: LD_VAR 0 3
15592: PPUSH
15593: CALL_OW 259
15597: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15598: LD_VAR 0 6
15602: PUSH
15603: LD_INT 1
15605: ARRAY
15606: PPUSH
15607: LD_VAR 0 2
15611: PPUSH
15612: LD_VAR 0 5
15616: PPUSH
15617: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15621: LD_VAR 0 6
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: LD_VAR 0 3
15634: PPUSH
15635: LD_VAR 0 4
15639: PPUSH
15640: CALL_OW 237
// end ;
15644: PPOPN 6
15646: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15647: LD_EXP 8
15651: IFFALSE 15659
15653: PUSH
15654: LD_EXP 55
15658: AND
15659: IFFALSE 15738
15661: GO 15663
15663: DISABLE
15664: LD_INT 0
15666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15667: LD_ADDR_VAR 0 1
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_INT 3
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: ST_TO_ADDR
// if not tmp then
15703: LD_VAR 0 1
15707: NOT
15708: IFFALSE 15712
// exit ;
15710: GO 15738
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15712: LD_VAR 0 1
15716: PUSH
15717: LD_INT 1
15719: PPUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 12
15729: ARRAY
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: CALL_OW 234
// end ;
15738: PPOPN 1
15740: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15741: LD_EXP 8
15745: IFFALSE 15753
15747: PUSH
15748: LD_EXP 56
15752: AND
15753: IFFALSE 15865
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_OWVAR 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 2
15781: PUSH
15782: LD_INT 30
15784: PUSH
15785: LD_INT 27
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 30
15794: PUSH
15795: LD_INT 26
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 30
15804: PUSH
15805: LD_INT 28
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: ST_TO_ADDR
// if not tmp then
15827: LD_VAR 0 2
15831: NOT
15832: IFFALSE 15836
// exit ;
15834: GO 15865
// for i in tmp do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 2
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15863
// SetLives ( i , 1 ) ;
15849: LD_VAR 0 1
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 234
15861: GO 15846
15863: POP
15864: POP
// end ;
15865: PPOPN 2
15867: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15868: LD_EXP 8
15872: IFFALSE 15880
15874: PUSH
15875: LD_EXP 57
15879: AND
15880: IFFALSE 16167
15882: GO 15884
15884: DISABLE
15885: LD_INT 0
15887: PPUSH
15888: PPUSH
15889: PPUSH
// begin i := rand ( 1 , 7 ) ;
15890: LD_ADDR_VAR 0 1
15894: PUSH
15895: LD_INT 1
15897: PPUSH
15898: LD_INT 7
15900: PPUSH
15901: CALL_OW 12
15905: ST_TO_ADDR
// case i of 1 :
15906: LD_VAR 0 1
15910: PUSH
15911: LD_INT 1
15913: DOUBLE
15914: EQUAL
15915: IFTRUE 15919
15917: GO 15929
15919: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15920: LD_STRING earthquake(getX(game), 0, 32)
15922: PPUSH
15923: CALL_OW 559
15927: GO 16167
15929: LD_INT 2
15931: DOUBLE
15932: EQUAL
15933: IFTRUE 15937
15935: GO 15951
15937: POP
// begin ToLua ( displayStucuk(); ) ;
15938: LD_STRING displayStucuk();
15940: PPUSH
15941: CALL_OW 559
// ResetFog ;
15945: CALL_OW 335
// end ; 3 :
15949: GO 16167
15951: LD_INT 3
15953: DOUBLE
15954: EQUAL
15955: IFTRUE 15959
15957: GO 16063
15959: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15960: LD_ADDR_VAR 0 2
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_OWVAR 2
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 25
15979: PUSH
15980: LD_INT 1
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PPUSH
15991: CALL_OW 69
15995: ST_TO_ADDR
// if not tmp then
15996: LD_VAR 0 2
16000: NOT
16001: IFFALSE 16005
// exit ;
16003: GO 16167
// un := tmp [ rand ( 1 , tmp ) ] ;
16005: LD_ADDR_VAR 0 3
16009: PUSH
16010: LD_VAR 0 2
16014: PUSH
16015: LD_INT 1
16017: PPUSH
16018: LD_VAR 0 2
16022: PPUSH
16023: CALL_OW 12
16027: ARRAY
16028: ST_TO_ADDR
// if Crawls ( un ) then
16029: LD_VAR 0 3
16033: PPUSH
16034: CALL_OW 318
16038: IFFALSE 16049
// ComWalk ( un ) ;
16040: LD_VAR 0 3
16044: PPUSH
16045: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16049: LD_VAR 0 3
16053: PPUSH
16054: LD_INT 8
16056: PPUSH
16057: CALL_OW 336
// end ; 4 :
16061: GO 16167
16063: LD_INT 4
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16071
16069: GO 16145
16071: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16072: LD_ADDR_VAR 0 2
16076: PUSH
16077: LD_INT 22
16079: PUSH
16080: LD_OWVAR 2
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 30
16091: PUSH
16092: LD_INT 29
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 69
16107: ST_TO_ADDR
// if not tmp then
16108: LD_VAR 0 2
16112: NOT
16113: IFFALSE 16117
// exit ;
16115: GO 16167
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16117: LD_VAR 0 2
16121: PUSH
16122: LD_INT 1
16124: ARRAY
16125: PPUSH
16126: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16130: LD_VAR 0 2
16134: PUSH
16135: LD_INT 1
16137: ARRAY
16138: PPUSH
16139: CALL_OW 65
// end ; 5 .. 7 :
16143: GO 16167
16145: LD_INT 5
16147: DOUBLE
16148: GREATEREQUAL
16149: IFFALSE 16157
16151: LD_INT 7
16153: DOUBLE
16154: LESSEQUAL
16155: IFTRUE 16159
16157: GO 16166
16159: POP
// StreamSibBomb ; end ;
16160: CALL 12348 0 0
16164: GO 16167
16166: POP
// end ;
16167: PPOPN 3
16169: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16170: LD_EXP 8
16174: IFFALSE 16182
16176: PUSH
16177: LD_EXP 58
16181: AND
16182: IFFALSE 16338
16184: GO 16186
16186: DISABLE
16187: LD_INT 0
16189: PPUSH
16190: PPUSH
16191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: LD_INT 81
16199: PUSH
16200: LD_OWVAR 2
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 2
16211: PUSH
16212: LD_INT 21
16214: PUSH
16215: LD_INT 1
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 21
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PPUSH
16241: CALL_OW 69
16245: ST_TO_ADDR
// if not tmp then
16246: LD_VAR 0 2
16250: NOT
16251: IFFALSE 16255
// exit ;
16253: GO 16338
// p := 0 ;
16255: LD_ADDR_VAR 0 3
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16263: LD_INT 35
16265: PPUSH
16266: CALL_OW 67
// p := p + 1 ;
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_VAR 0 3
16279: PUSH
16280: LD_INT 1
16282: PLUS
16283: ST_TO_ADDR
// for i in tmp do
16284: LD_ADDR_VAR 0 1
16288: PUSH
16289: LD_VAR 0 2
16293: PUSH
16294: FOR_IN
16295: IFFALSE 16326
// if GetLives ( i ) < 1000 then
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 256
16306: PUSH
16307: LD_INT 1000
16309: LESS
16310: IFFALSE 16324
// SetLives ( i , 1000 ) ;
16312: LD_VAR 0 1
16316: PPUSH
16317: LD_INT 1000
16319: PPUSH
16320: CALL_OW 234
16324: GO 16294
16326: POP
16327: POP
// until p > 20 ;
16328: LD_VAR 0 3
16332: PUSH
16333: LD_INT 20
16335: GREATER
16336: IFFALSE 16263
// end ;
16338: PPOPN 3
16340: END
// every 0 0$1 trigger StreamModeActive and sTime do
16341: LD_EXP 8
16345: IFFALSE 16353
16347: PUSH
16348: LD_EXP 59
16352: AND
16353: IFFALSE 16388
16355: GO 16357
16357: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16358: LD_INT 28
16360: PPUSH
16361: LD_OWVAR 2
16365: PPUSH
16366: LD_INT 2
16368: PPUSH
16369: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16373: LD_INT 30
16375: PPUSH
16376: LD_OWVAR 2
16380: PPUSH
16381: LD_INT 2
16383: PPUSH
16384: CALL_OW 322
// end ;
16388: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16389: LD_EXP 8
16393: IFFALSE 16401
16395: PUSH
16396: LD_EXP 60
16400: AND
16401: IFFALSE 16522
16403: GO 16405
16405: DISABLE
16406: LD_INT 0
16408: PPUSH
16409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16410: LD_ADDR_VAR 0 2
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_OWVAR 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 21
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 3
16439: PUSH
16440: LD_INT 23
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: ST_TO_ADDR
// if not tmp then
16464: LD_VAR 0 2
16468: NOT
16469: IFFALSE 16473
// exit ;
16471: GO 16522
// for i in tmp do
16473: LD_ADDR_VAR 0 1
16477: PUSH
16478: LD_VAR 0 2
16482: PUSH
16483: FOR_IN
16484: IFFALSE 16520
// begin if Crawls ( i ) then
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 318
16495: IFFALSE 16506
// ComWalk ( i ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 138
// SetClass ( i , 2 ) ;
16506: LD_VAR 0 1
16510: PPUSH
16511: LD_INT 2
16513: PPUSH
16514: CALL_OW 336
// end ;
16518: GO 16483
16520: POP
16521: POP
// end ;
16522: PPOPN 2
16524: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16525: LD_EXP 8
16529: IFFALSE 16537
16531: PUSH
16532: LD_EXP 61
16536: AND
16537: IFFALSE 16827
16539: GO 16541
16541: DISABLE
16542: LD_INT 0
16544: PPUSH
16545: PPUSH
16546: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16547: LD_OWVAR 2
16551: PPUSH
16552: LD_INT 9
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16565: LD_INT 9
16567: PPUSH
16568: LD_OWVAR 2
16572: PPUSH
16573: CALL_OW 343
// uc_side := 9 ;
16577: LD_ADDR_OWVAR 20
16581: PUSH
16582: LD_INT 9
16584: ST_TO_ADDR
// uc_nation := 2 ;
16585: LD_ADDR_OWVAR 21
16589: PUSH
16590: LD_INT 2
16592: ST_TO_ADDR
// hc_name := Dark Warrior ;
16593: LD_ADDR_OWVAR 26
16597: PUSH
16598: LD_STRING Dark Warrior
16600: ST_TO_ADDR
// hc_gallery :=  ;
16601: LD_ADDR_OWVAR 33
16605: PUSH
16606: LD_STRING 
16608: ST_TO_ADDR
// hc_noskilllimit := true ;
16609: LD_ADDR_OWVAR 76
16613: PUSH
16614: LD_INT 1
16616: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16617: LD_ADDR_OWVAR 31
16621: PUSH
16622: LD_INT 30
16624: PUSH
16625: LD_INT 30
16627: PUSH
16628: LD_INT 30
16630: PUSH
16631: LD_INT 30
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: ST_TO_ADDR
// un := CreateHuman ;
16640: LD_ADDR_VAR 0 3
16644: PUSH
16645: CALL_OW 44
16649: ST_TO_ADDR
// hc_noskilllimit := false ;
16650: LD_ADDR_OWVAR 76
16654: PUSH
16655: LD_INT 0
16657: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16658: LD_VAR 0 3
16662: PPUSH
16663: LD_INT 1
16665: PPUSH
16666: CALL_OW 51
// ToLua ( playRanger() ) ;
16670: LD_STRING playRanger()
16672: PPUSH
16673: CALL_OW 559
// p := 0 ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: LD_INT 0
16684: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16685: LD_INT 35
16687: PPUSH
16688: CALL_OW 67
// p := p + 1 ;
16692: LD_ADDR_VAR 0 2
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: LD_INT 1
16704: PLUS
16705: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16706: LD_VAR 0 3
16710: PPUSH
16711: CALL_OW 256
16715: PUSH
16716: LD_INT 1000
16718: LESS
16719: IFFALSE 16733
// SetLives ( un , 1000 ) ;
16721: LD_VAR 0 3
16725: PPUSH
16726: LD_INT 1000
16728: PPUSH
16729: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_INT 81
16740: PUSH
16741: LD_OWVAR 2
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 91
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_INT 30
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PPUSH
16770: CALL_OW 69
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: CALL_OW 74
16784: PPUSH
16785: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16789: LD_VAR 0 2
16793: PUSH
16794: LD_INT 80
16796: GREATER
16797: IFTRUE 16810
16799: PUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: CALL_OW 301
16809: OR
16810: IFFALSE 16685
// if un then
16812: LD_VAR 0 3
16816: IFFALSE 16827
// RemoveUnit ( un ) ;
16818: LD_VAR 0 3
16822: PPUSH
16823: CALL_OW 64
// end ;
16827: PPOPN 3
16829: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16830: LD_EXP 62
16834: IFFALSE 16950
16836: GO 16838
16838: DISABLE
16839: LD_INT 0
16841: PPUSH
16842: PPUSH
16843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16844: LD_ADDR_VAR 0 2
16848: PUSH
16849: LD_INT 81
16851: PUSH
16852: LD_OWVAR 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PPUSH
16875: CALL_OW 69
16879: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16880: LD_STRING playComputer()
16882: PPUSH
16883: CALL_OW 559
// if not tmp then
16887: LD_VAR 0 2
16891: NOT
16892: IFFALSE 16896
// exit ;
16894: GO 16950
// for i in tmp do
16896: LD_ADDR_VAR 0 1
16900: PUSH
16901: LD_VAR 0 2
16905: PUSH
16906: FOR_IN
16907: IFFALSE 16948
// for j := 1 to 4 do
16909: LD_ADDR_VAR 0 3
16913: PUSH
16914: DOUBLE
16915: LD_INT 1
16917: DEC
16918: ST_TO_ADDR
16919: LD_INT 4
16921: PUSH
16922: FOR_TO
16923: IFFALSE 16944
// SetSkill ( i , j , 10 ) ;
16925: LD_VAR 0 1
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 10
16937: PPUSH
16938: CALL_OW 237
16942: GO 16922
16944: POP
16945: POP
16946: GO 16906
16948: POP
16949: POP
// end ;
16950: PPOPN 3
16952: END
// every 0 0$1 trigger s30 do var i , tmp ;
16953: LD_EXP 63
16957: IFFALSE 17026
16959: GO 16961
16961: DISABLE
16962: LD_INT 0
16964: PPUSH
16965: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16966: LD_ADDR_VAR 0 2
16970: PUSH
16971: LD_INT 22
16973: PUSH
16974: LD_OWVAR 2
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PPUSH
16983: CALL_OW 69
16987: ST_TO_ADDR
// if not tmp then
16988: LD_VAR 0 2
16992: NOT
16993: IFFALSE 16997
// exit ;
16995: GO 17026
// for i in tmp do
16997: LD_ADDR_VAR 0 1
17001: PUSH
17002: LD_VAR 0 2
17006: PUSH
17007: FOR_IN
17008: IFFALSE 17024
// SetLives ( i , 300 ) ;
17010: LD_VAR 0 1
17014: PPUSH
17015: LD_INT 300
17017: PPUSH
17018: CALL_OW 234
17022: GO 17007
17024: POP
17025: POP
// end ;
17026: PPOPN 2
17028: END
// every 0 0$1 trigger s60 do var i , tmp ;
17029: LD_EXP 64
17033: IFFALSE 17102
17035: GO 17037
17037: DISABLE
17038: LD_INT 0
17040: PPUSH
17041: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17042: LD_ADDR_VAR 0 2
17046: PUSH
17047: LD_INT 22
17049: PUSH
17050: LD_OWVAR 2
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PPUSH
17059: CALL_OW 69
17063: ST_TO_ADDR
// if not tmp then
17064: LD_VAR 0 2
17068: NOT
17069: IFFALSE 17073
// exit ;
17071: GO 17102
// for i in tmp do
17073: LD_ADDR_VAR 0 1
17077: PUSH
17078: LD_VAR 0 2
17082: PUSH
17083: FOR_IN
17084: IFFALSE 17100
// SetLives ( i , 600 ) ;
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_INT 600
17093: PPUSH
17094: CALL_OW 234
17098: GO 17083
17100: POP
17101: POP
// end ;
17102: PPOPN 2
17104: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17105: LD_INT 0
17107: PPUSH
// case cmd of 301 :
17108: LD_VAR 0 1
17112: PUSH
17113: LD_INT 301
17115: DOUBLE
17116: EQUAL
17117: IFTRUE 17121
17119: GO 17153
17121: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17122: LD_VAR 0 6
17126: PPUSH
17127: LD_VAR 0 7
17131: PPUSH
17132: LD_VAR 0 8
17136: PPUSH
17137: LD_VAR 0 4
17141: PPUSH
17142: LD_VAR 0 5
17146: PPUSH
17147: CALL 18366 0 5
17151: GO 17274
17153: LD_INT 302
17155: DOUBLE
17156: EQUAL
17157: IFTRUE 17161
17159: GO 17198
17161: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17162: LD_VAR 0 6
17166: PPUSH
17167: LD_VAR 0 7
17171: PPUSH
17172: LD_VAR 0 8
17176: PPUSH
17177: LD_VAR 0 9
17181: PPUSH
17182: LD_VAR 0 4
17186: PPUSH
17187: LD_VAR 0 5
17191: PPUSH
17192: CALL 18457 0 6
17196: GO 17274
17198: LD_INT 303
17200: DOUBLE
17201: EQUAL
17202: IFTRUE 17206
17204: GO 17243
17206: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17207: LD_VAR 0 6
17211: PPUSH
17212: LD_VAR 0 7
17216: PPUSH
17217: LD_VAR 0 8
17221: PPUSH
17222: LD_VAR 0 9
17226: PPUSH
17227: LD_VAR 0 4
17231: PPUSH
17232: LD_VAR 0 5
17236: PPUSH
17237: CALL 17279 0 6
17241: GO 17274
17243: LD_INT 304
17245: DOUBLE
17246: EQUAL
17247: IFTRUE 17251
17249: GO 17273
17251: POP
// hHackTeleport ( unit , x , y ) ; end ;
17252: LD_VAR 0 2
17256: PPUSH
17257: LD_VAR 0 4
17261: PPUSH
17262: LD_VAR 0 5
17266: PPUSH
17267: CALL 19050 0 3
17271: GO 17274
17273: POP
// end ;
17274: LD_VAR 0 12
17278: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17279: LD_INT 0
17281: PPUSH
17282: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17283: LD_VAR 0 1
17287: PUSH
17288: LD_INT 1
17290: LESS
17291: IFTRUE 17303
17293: PUSH
17294: LD_VAR 0 1
17298: PUSH
17299: LD_INT 3
17301: GREATER
17302: OR
17303: IFTRUE 17321
17305: PUSH
17306: LD_VAR 0 5
17310: PPUSH
17311: LD_VAR 0 6
17315: PPUSH
17316: CALL_OW 428
17320: OR
17321: IFFALSE 17325
// exit ;
17323: GO 18053
// uc_side := your_side ;
17325: LD_ADDR_OWVAR 20
17329: PUSH
17330: LD_OWVAR 2
17334: ST_TO_ADDR
// uc_nation := nation ;
17335: LD_ADDR_OWVAR 21
17339: PUSH
17340: LD_VAR 0 1
17344: ST_TO_ADDR
// bc_level = 1 ;
17345: LD_ADDR_OWVAR 43
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// case btype of 1 :
17353: LD_VAR 0 2
17357: PUSH
17358: LD_INT 1
17360: DOUBLE
17361: EQUAL
17362: IFTRUE 17366
17364: GO 17377
17366: POP
// bc_type := b_depot ; 2 :
17367: LD_ADDR_OWVAR 42
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
17375: GO 17997
17377: LD_INT 2
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17396
17385: POP
// bc_type := b_warehouse ; 3 :
17386: LD_ADDR_OWVAR 42
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
17394: GO 17997
17396: LD_INT 3
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17415
17404: POP
// bc_type := b_lab ; 4 .. 9 :
17405: LD_ADDR_OWVAR 42
17409: PUSH
17410: LD_INT 6
17412: ST_TO_ADDR
17413: GO 17997
17415: LD_INT 4
17417: DOUBLE
17418: GREATEREQUAL
17419: IFFALSE 17427
17421: LD_INT 9
17423: DOUBLE
17424: LESSEQUAL
17425: IFTRUE 17429
17427: GO 17489
17429: POP
// begin bc_type := b_lab_half ;
17430: LD_ADDR_OWVAR 42
17434: PUSH
17435: LD_INT 7
17437: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17438: LD_ADDR_OWVAR 44
17442: PUSH
17443: LD_INT 10
17445: PUSH
17446: LD_INT 11
17448: PUSH
17449: LD_INT 12
17451: PUSH
17452: LD_INT 15
17454: PUSH
17455: LD_INT 14
17457: PUSH
17458: LD_INT 13
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PUSH
17469: LD_VAR 0 2
17473: PUSH
17474: LD_INT 3
17476: MINUS
17477: ARRAY
17478: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17479: LD_ADDR_OWVAR 45
17483: PUSH
17484: LD_INT 9
17486: ST_TO_ADDR
// end ; 10 .. 13 :
17487: GO 17997
17489: LD_INT 10
17491: DOUBLE
17492: GREATEREQUAL
17493: IFFALSE 17501
17495: LD_INT 13
17497: DOUBLE
17498: LESSEQUAL
17499: IFTRUE 17503
17501: GO 17580
17503: POP
// begin bc_type := b_lab_full ;
17504: LD_ADDR_OWVAR 42
17508: PUSH
17509: LD_INT 8
17511: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17512: LD_ADDR_OWVAR 44
17516: PUSH
17517: LD_INT 10
17519: PUSH
17520: LD_INT 12
17522: PUSH
17523: LD_INT 14
17525: PUSH
17526: LD_INT 13
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: PUSH
17535: LD_VAR 0 2
17539: PUSH
17540: LD_INT 9
17542: MINUS
17543: ARRAY
17544: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17545: LD_ADDR_OWVAR 45
17549: PUSH
17550: LD_INT 11
17552: PUSH
17553: LD_INT 15
17555: PUSH
17556: LD_INT 12
17558: PUSH
17559: LD_INT 15
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: PUSH
17568: LD_VAR 0 2
17572: PUSH
17573: LD_INT 9
17575: MINUS
17576: ARRAY
17577: ST_TO_ADDR
// end ; 14 :
17578: GO 17997
17580: LD_INT 14
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17588
17586: GO 17599
17588: POP
// bc_type := b_workshop ; 15 :
17589: LD_ADDR_OWVAR 42
17593: PUSH
17594: LD_INT 2
17596: ST_TO_ADDR
17597: GO 17997
17599: LD_INT 15
17601: DOUBLE
17602: EQUAL
17603: IFTRUE 17607
17605: GO 17618
17607: POP
// bc_type := b_factory ; 16 :
17608: LD_ADDR_OWVAR 42
17612: PUSH
17613: LD_INT 3
17615: ST_TO_ADDR
17616: GO 17997
17618: LD_INT 16
17620: DOUBLE
17621: EQUAL
17622: IFTRUE 17626
17624: GO 17637
17626: POP
// bc_type := b_ext_gun ; 17 :
17627: LD_ADDR_OWVAR 42
17631: PUSH
17632: LD_INT 17
17634: ST_TO_ADDR
17635: GO 17997
17637: LD_INT 17
17639: DOUBLE
17640: EQUAL
17641: IFTRUE 17645
17643: GO 17673
17645: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17646: LD_ADDR_OWVAR 42
17650: PUSH
17651: LD_INT 19
17653: PUSH
17654: LD_INT 23
17656: PUSH
17657: LD_INT 19
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: LIST
17664: PUSH
17665: LD_VAR 0 1
17669: ARRAY
17670: ST_TO_ADDR
17671: GO 17997
17673: LD_INT 18
17675: DOUBLE
17676: EQUAL
17677: IFTRUE 17681
17679: GO 17692
17681: POP
// bc_type := b_ext_radar ; 19 :
17682: LD_ADDR_OWVAR 42
17686: PUSH
17687: LD_INT 20
17689: ST_TO_ADDR
17690: GO 17997
17692: LD_INT 19
17694: DOUBLE
17695: EQUAL
17696: IFTRUE 17700
17698: GO 17711
17700: POP
// bc_type := b_ext_radio ; 20 :
17701: LD_ADDR_OWVAR 42
17705: PUSH
17706: LD_INT 22
17708: ST_TO_ADDR
17709: GO 17997
17711: LD_INT 20
17713: DOUBLE
17714: EQUAL
17715: IFTRUE 17719
17717: GO 17730
17719: POP
// bc_type := b_ext_siberium ; 21 :
17720: LD_ADDR_OWVAR 42
17724: PUSH
17725: LD_INT 21
17727: ST_TO_ADDR
17728: GO 17997
17730: LD_INT 21
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17749
17738: POP
// bc_type := b_ext_computer ; 22 :
17739: LD_ADDR_OWVAR 42
17743: PUSH
17744: LD_INT 24
17746: ST_TO_ADDR
17747: GO 17997
17749: LD_INT 22
17751: DOUBLE
17752: EQUAL
17753: IFTRUE 17757
17755: GO 17768
17757: POP
// bc_type := b_ext_track ; 23 :
17758: LD_ADDR_OWVAR 42
17762: PUSH
17763: LD_INT 16
17765: ST_TO_ADDR
17766: GO 17997
17768: LD_INT 23
17770: DOUBLE
17771: EQUAL
17772: IFTRUE 17776
17774: GO 17787
17776: POP
// bc_type := b_ext_laser ; 24 :
17777: LD_ADDR_OWVAR 42
17781: PUSH
17782: LD_INT 25
17784: ST_TO_ADDR
17785: GO 17997
17787: LD_INT 24
17789: DOUBLE
17790: EQUAL
17791: IFTRUE 17795
17793: GO 17806
17795: POP
// bc_type := b_control_tower ; 25 :
17796: LD_ADDR_OWVAR 42
17800: PUSH
17801: LD_INT 36
17803: ST_TO_ADDR
17804: GO 17997
17806: LD_INT 25
17808: DOUBLE
17809: EQUAL
17810: IFTRUE 17814
17812: GO 17825
17814: POP
// bc_type := b_breastwork ; 26 :
17815: LD_ADDR_OWVAR 42
17819: PUSH
17820: LD_INT 31
17822: ST_TO_ADDR
17823: GO 17997
17825: LD_INT 26
17827: DOUBLE
17828: EQUAL
17829: IFTRUE 17833
17831: GO 17844
17833: POP
// bc_type := b_bunker ; 27 :
17834: LD_ADDR_OWVAR 42
17838: PUSH
17839: LD_INT 32
17841: ST_TO_ADDR
17842: GO 17997
17844: LD_INT 27
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17863
17852: POP
// bc_type := b_turret ; 28 :
17853: LD_ADDR_OWVAR 42
17857: PUSH
17858: LD_INT 33
17860: ST_TO_ADDR
17861: GO 17997
17863: LD_INT 28
17865: DOUBLE
17866: EQUAL
17867: IFTRUE 17871
17869: GO 17882
17871: POP
// bc_type := b_armoury ; 29 :
17872: LD_ADDR_OWVAR 42
17876: PUSH
17877: LD_INT 4
17879: ST_TO_ADDR
17880: GO 17997
17882: LD_INT 29
17884: DOUBLE
17885: EQUAL
17886: IFTRUE 17890
17888: GO 17901
17890: POP
// bc_type := b_barracks ; 30 :
17891: LD_ADDR_OWVAR 42
17895: PUSH
17896: LD_INT 5
17898: ST_TO_ADDR
17899: GO 17997
17901: LD_INT 30
17903: DOUBLE
17904: EQUAL
17905: IFTRUE 17909
17907: GO 17920
17909: POP
// bc_type := b_solar_power ; 31 :
17910: LD_ADDR_OWVAR 42
17914: PUSH
17915: LD_INT 27
17917: ST_TO_ADDR
17918: GO 17997
17920: LD_INT 31
17922: DOUBLE
17923: EQUAL
17924: IFTRUE 17928
17926: GO 17939
17928: POP
// bc_type := b_oil_power ; 32 :
17929: LD_ADDR_OWVAR 42
17933: PUSH
17934: LD_INT 26
17936: ST_TO_ADDR
17937: GO 17997
17939: LD_INT 32
17941: DOUBLE
17942: EQUAL
17943: IFTRUE 17947
17945: GO 17958
17947: POP
// bc_type := b_siberite_power ; 33 :
17948: LD_ADDR_OWVAR 42
17952: PUSH
17953: LD_INT 28
17955: ST_TO_ADDR
17956: GO 17997
17958: LD_INT 33
17960: DOUBLE
17961: EQUAL
17962: IFTRUE 17966
17964: GO 17977
17966: POP
// bc_type := b_oil_mine ; 34 :
17967: LD_ADDR_OWVAR 42
17971: PUSH
17972: LD_INT 29
17974: ST_TO_ADDR
17975: GO 17997
17977: LD_INT 34
17979: DOUBLE
17980: EQUAL
17981: IFTRUE 17985
17983: GO 17996
17985: POP
// bc_type := b_siberite_mine ; end ;
17986: LD_ADDR_OWVAR 42
17990: PUSH
17991: LD_INT 30
17993: ST_TO_ADDR
17994: GO 17997
17996: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17997: LD_ADDR_VAR 0 8
18001: PUSH
18002: LD_VAR 0 5
18006: PPUSH
18007: LD_VAR 0 6
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: CALL_OW 47
18021: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18022: LD_OWVAR 42
18026: PUSH
18027: LD_INT 32
18029: PUSH
18030: LD_INT 33
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: IN
18037: IFFALSE 18053
// PlaceWeaponTurret ( b , weapon ) ;
18039: LD_VAR 0 8
18043: PPUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: CALL_OW 431
// end ;
18053: LD_VAR 0 7
18057: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18058: LD_INT 0
18060: PPUSH
18061: PPUSH
18062: PPUSH
18063: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18064: LD_ADDR_VAR 0 4
18068: PUSH
18069: LD_INT 22
18071: PUSH
18072: LD_OWVAR 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: PUSH
18084: LD_INT 30
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 30
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PPUSH
18113: CALL_OW 69
18117: ST_TO_ADDR
// if not tmp then
18118: LD_VAR 0 4
18122: NOT
18123: IFFALSE 18127
// exit ;
18125: GO 18186
// for i in tmp do
18127: LD_ADDR_VAR 0 2
18131: PUSH
18132: LD_VAR 0 4
18136: PUSH
18137: FOR_IN
18138: IFFALSE 18184
// for j = 1 to 3 do
18140: LD_ADDR_VAR 0 3
18144: PUSH
18145: DOUBLE
18146: LD_INT 1
18148: DEC
18149: ST_TO_ADDR
18150: LD_INT 3
18152: PUSH
18153: FOR_TO
18154: IFFALSE 18180
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18156: LD_VAR 0 2
18160: PPUSH
18161: CALL_OW 274
18165: PPUSH
18166: LD_VAR 0 3
18170: PPUSH
18171: LD_INT 99999
18173: PPUSH
18174: CALL_OW 277
18178: GO 18153
18180: POP
18181: POP
18182: GO 18137
18184: POP
18185: POP
// end ;
18186: LD_VAR 0 1
18190: RET
// export function hHackSetLevel10 ; var i , j ; begin
18191: LD_INT 0
18193: PPUSH
18194: PPUSH
18195: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18196: LD_ADDR_VAR 0 2
18200: PUSH
18201: LD_INT 21
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: PUSH
18216: FOR_IN
18217: IFFALSE 18269
// if IsSelected ( i ) then
18219: LD_VAR 0 2
18223: PPUSH
18224: CALL_OW 306
18228: IFFALSE 18267
// begin for j := 1 to 4 do
18230: LD_ADDR_VAR 0 3
18234: PUSH
18235: DOUBLE
18236: LD_INT 1
18238: DEC
18239: ST_TO_ADDR
18240: LD_INT 4
18242: PUSH
18243: FOR_TO
18244: IFFALSE 18265
// SetSkill ( i , j , 10 ) ;
18246: LD_VAR 0 2
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: LD_INT 10
18258: PPUSH
18259: CALL_OW 237
18263: GO 18243
18265: POP
18266: POP
// end ;
18267: GO 18216
18269: POP
18270: POP
// end ;
18271: LD_VAR 0 1
18275: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18276: LD_INT 0
18278: PPUSH
18279: PPUSH
18280: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_INT 22
18288: PUSH
18289: LD_OWVAR 2
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 21
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PPUSH
18312: CALL_OW 69
18316: PUSH
18317: FOR_IN
18318: IFFALSE 18359
// begin for j := 1 to 4 do
18320: LD_ADDR_VAR 0 3
18324: PUSH
18325: DOUBLE
18326: LD_INT 1
18328: DEC
18329: ST_TO_ADDR
18330: LD_INT 4
18332: PUSH
18333: FOR_TO
18334: IFFALSE 18355
// SetSkill ( i , j , 10 ) ;
18336: LD_VAR 0 2
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: LD_INT 10
18348: PPUSH
18349: CALL_OW 237
18353: GO 18333
18355: POP
18356: POP
// end ;
18357: GO 18317
18359: POP
18360: POP
// end ;
18361: LD_VAR 0 1
18365: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18366: LD_INT 0
18368: PPUSH
// uc_side := your_side ;
18369: LD_ADDR_OWVAR 20
18373: PUSH
18374: LD_OWVAR 2
18378: ST_TO_ADDR
// uc_nation := nation ;
18379: LD_ADDR_OWVAR 21
18383: PUSH
18384: LD_VAR 0 1
18388: ST_TO_ADDR
// InitHc ;
18389: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18393: LD_INT 0
18395: PPUSH
18396: LD_VAR 0 2
18400: PPUSH
18401: LD_VAR 0 3
18405: PPUSH
18406: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18410: LD_VAR 0 4
18414: PPUSH
18415: LD_VAR 0 5
18419: PPUSH
18420: CALL_OW 428
18424: PUSH
18425: LD_INT 0
18427: EQUAL
18428: IFFALSE 18452
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18430: CALL_OW 44
18434: PPUSH
18435: LD_VAR 0 4
18439: PPUSH
18440: LD_VAR 0 5
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 48
// end ;
18452: LD_VAR 0 6
18456: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18457: LD_INT 0
18459: PPUSH
18460: PPUSH
// uc_side := your_side ;
18461: LD_ADDR_OWVAR 20
18465: PUSH
18466: LD_OWVAR 2
18470: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18471: LD_VAR 0 1
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: LD_INT 3
18484: PUSH
18485: LD_INT 4
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: IN
18498: IFFALSE 18510
// uc_nation := nation_american else
18500: LD_ADDR_OWVAR 21
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
18508: GO 18553
// if chassis in [ 11 , 12 , 13 , 14 ] then
18510: LD_VAR 0 1
18514: PUSH
18515: LD_INT 11
18517: PUSH
18518: LD_INT 12
18520: PUSH
18521: LD_INT 13
18523: PUSH
18524: LD_INT 14
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: IN
18533: IFFALSE 18545
// uc_nation := nation_arabian else
18535: LD_ADDR_OWVAR 21
18539: PUSH
18540: LD_INT 2
18542: ST_TO_ADDR
18543: GO 18553
// uc_nation := nation_russian ;
18545: LD_ADDR_OWVAR 21
18549: PUSH
18550: LD_INT 3
18552: ST_TO_ADDR
// vc_chassis := chassis ;
18553: LD_ADDR_OWVAR 37
18557: PUSH
18558: LD_VAR 0 1
18562: ST_TO_ADDR
// vc_engine := engine ;
18563: LD_ADDR_OWVAR 39
18567: PUSH
18568: LD_VAR 0 2
18572: ST_TO_ADDR
// vc_control := control ;
18573: LD_ADDR_OWVAR 38
18577: PUSH
18578: LD_VAR 0 3
18582: ST_TO_ADDR
// vc_weapon := weapon ;
18583: LD_ADDR_OWVAR 40
18587: PUSH
18588: LD_VAR 0 4
18592: ST_TO_ADDR
// un := CreateVehicle ;
18593: LD_ADDR_VAR 0 8
18597: PUSH
18598: CALL_OW 45
18602: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18603: LD_VAR 0 8
18607: PPUSH
18608: LD_INT 0
18610: PPUSH
18611: LD_INT 5
18613: PPUSH
18614: CALL_OW 12
18618: PPUSH
18619: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18623: LD_VAR 0 8
18627: PPUSH
18628: LD_VAR 0 5
18632: PPUSH
18633: LD_VAR 0 6
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 48
// end ;
18645: LD_VAR 0 7
18649: RET
// export hInvincible ; every 1 do
18650: GO 18652
18652: DISABLE
// hInvincible := [ ] ;
18653: LD_ADDR_EXP 65
18657: PUSH
18658: EMPTY
18659: ST_TO_ADDR
18660: END
// every 10 do var i ;
18661: GO 18663
18663: DISABLE
18664: LD_INT 0
18666: PPUSH
// begin enable ;
18667: ENABLE
// if not hInvincible then
18668: LD_EXP 65
18672: NOT
18673: IFFALSE 18677
// exit ;
18675: GO 18721
// for i in hInvincible do
18677: LD_ADDR_VAR 0 1
18681: PUSH
18682: LD_EXP 65
18686: PUSH
18687: FOR_IN
18688: IFFALSE 18719
// if GetLives ( i ) < 1000 then
18690: LD_VAR 0 1
18694: PPUSH
18695: CALL_OW 256
18699: PUSH
18700: LD_INT 1000
18702: LESS
18703: IFFALSE 18717
// SetLives ( i , 1000 ) ;
18705: LD_VAR 0 1
18709: PPUSH
18710: LD_INT 1000
18712: PPUSH
18713: CALL_OW 234
18717: GO 18687
18719: POP
18720: POP
// end ;
18721: PPOPN 1
18723: END
// export function hHackInvincible ; var i ; begin
18724: LD_INT 0
18726: PPUSH
18727: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18728: LD_ADDR_VAR 0 2
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: LD_INT 21
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 21
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: PPUSH
18761: CALL_OW 69
18765: PUSH
18766: FOR_IN
18767: IFFALSE 18828
// if IsSelected ( i ) then
18769: LD_VAR 0 2
18773: PPUSH
18774: CALL_OW 306
18778: IFFALSE 18826
// begin if i in hInvincible then
18780: LD_VAR 0 2
18784: PUSH
18785: LD_EXP 65
18789: IN
18790: IFFALSE 18810
// hInvincible := hInvincible diff i else
18792: LD_ADDR_EXP 65
18796: PUSH
18797: LD_EXP 65
18801: PUSH
18802: LD_VAR 0 2
18806: DIFF
18807: ST_TO_ADDR
18808: GO 18826
// hInvincible := hInvincible union i ;
18810: LD_ADDR_EXP 65
18814: PUSH
18815: LD_EXP 65
18819: PUSH
18820: LD_VAR 0 2
18824: UNION
18825: ST_TO_ADDR
// end ;
18826: GO 18766
18828: POP
18829: POP
// end ;
18830: LD_VAR 0 1
18834: RET
// export function hHackInvisible ; var i , j ; begin
18835: LD_INT 0
18837: PPUSH
18838: PPUSH
18839: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18840: LD_ADDR_VAR 0 2
18844: PUSH
18845: LD_INT 21
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PPUSH
18855: CALL_OW 69
18859: PUSH
18860: FOR_IN
18861: IFFALSE 18885
// if IsSelected ( i ) then
18863: LD_VAR 0 2
18867: PPUSH
18868: CALL_OW 306
18872: IFFALSE 18883
// ComForceInvisible ( i ) ;
18874: LD_VAR 0 2
18878: PPUSH
18879: CALL_OW 496
18883: GO 18860
18885: POP
18886: POP
// end ;
18887: LD_VAR 0 1
18891: RET
// export function hHackChangeYourSide ; begin
18892: LD_INT 0
18894: PPUSH
// if your_side = 8 then
18895: LD_OWVAR 2
18899: PUSH
18900: LD_INT 8
18902: EQUAL
18903: IFFALSE 18915
// your_side := 0 else
18905: LD_ADDR_OWVAR 2
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
18913: GO 18929
// your_side := your_side + 1 ;
18915: LD_ADDR_OWVAR 2
18919: PUSH
18920: LD_OWVAR 2
18924: PUSH
18925: LD_INT 1
18927: PLUS
18928: ST_TO_ADDR
// end ;
18929: LD_VAR 0 1
18933: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18934: LD_INT 0
18936: PPUSH
18937: PPUSH
18938: PPUSH
// for i in all_units do
18939: LD_ADDR_VAR 0 2
18943: PUSH
18944: LD_OWVAR 3
18948: PUSH
18949: FOR_IN
18950: IFFALSE 19028
// if IsSelected ( i ) then
18952: LD_VAR 0 2
18956: PPUSH
18957: CALL_OW 306
18961: IFFALSE 19026
// begin j := GetSide ( i ) ;
18963: LD_ADDR_VAR 0 3
18967: PUSH
18968: LD_VAR 0 2
18972: PPUSH
18973: CALL_OW 255
18977: ST_TO_ADDR
// if j = 8 then
18978: LD_VAR 0 3
18982: PUSH
18983: LD_INT 8
18985: EQUAL
18986: IFFALSE 18998
// j := 0 else
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: LD_INT 0
18995: ST_TO_ADDR
18996: GO 19012
// j := j + 1 ;
18998: LD_ADDR_VAR 0 3
19002: PUSH
19003: LD_VAR 0 3
19007: PUSH
19008: LD_INT 1
19010: PLUS
19011: ST_TO_ADDR
// SetSide ( i , j ) ;
19012: LD_VAR 0 2
19016: PPUSH
19017: LD_VAR 0 3
19021: PPUSH
19022: CALL_OW 235
// end ;
19026: GO 18949
19028: POP
19029: POP
// end ;
19030: LD_VAR 0 1
19034: RET
// export function hHackFog ; begin
19035: LD_INT 0
19037: PPUSH
// FogOff ( true ) ;
19038: LD_INT 1
19040: PPUSH
19041: CALL_OW 344
// end ;
19045: LD_VAR 0 1
19049: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19050: LD_INT 0
19052: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19053: LD_VAR 0 1
19057: PPUSH
19058: LD_VAR 0 2
19062: PPUSH
19063: LD_VAR 0 3
19067: PPUSH
19068: LD_INT 1
19070: PPUSH
19071: LD_INT 1
19073: PPUSH
19074: CALL_OW 483
// CenterOnXY ( x , y ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: LD_VAR 0 3
19087: PPUSH
19088: CALL_OW 84
// end ;
19092: LD_VAR 0 4
19096: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19101: LD_VAR 0 1
19105: NOT
19106: IFTRUE 19125
19108: PUSH
19109: LD_VAR 0 2
19113: PPUSH
19114: LD_VAR 0 3
19118: PPUSH
19119: CALL_OW 488
19123: NOT
19124: OR
19125: IFTRUE 19160
19127: PUSH
19128: LD_VAR 0 1
19132: PPUSH
19133: CALL_OW 266
19137: PUSH
19138: LD_INT 3
19140: NONEQUAL
19141: IFFALSE 19159
19143: PUSH
19144: LD_VAR 0 1
19148: PPUSH
19149: CALL_OW 247
19153: PUSH
19154: LD_INT 1
19156: EQUAL
19157: NOT
19158: AND
19159: OR
19160: IFFALSE 19164
// exit ;
19162: GO 19446
// if GetType ( factory ) = unit_human then
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 247
19173: PUSH
19174: LD_INT 1
19176: EQUAL
19177: IFFALSE 19194
// factory := IsInUnit ( factory ) ;
19179: LD_ADDR_VAR 0 1
19183: PUSH
19184: LD_VAR 0 1
19188: PPUSH
19189: CALL_OW 310
19193: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 266
19203: PUSH
19204: LD_INT 3
19206: NONEQUAL
19207: IFFALSE 19211
// exit ;
19209: GO 19446
// for i := 1 to Count ( factoryWaypoints ) do
19211: LD_ADDR_VAR 0 5
19215: PUSH
19216: DOUBLE
19217: LD_INT 1
19219: DEC
19220: ST_TO_ADDR
19221: LD_EXP 66
19225: PPUSH
19226: CALL 28979 0 1
19230: PUSH
19231: FOR_TO
19232: IFFALSE 19394
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: CALL_OW 428
19248: PUSH
19249: LD_EXP 66
19253: PUSH
19254: LD_VAR 0 5
19258: ARRAY
19259: PUSH
19260: LD_INT 2
19262: ARRAY
19263: EQUAL
19264: IFFALSE 19296
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19266: LD_ADDR_EXP 66
19270: PUSH
19271: LD_EXP 66
19275: PPUSH
19276: LD_VAR 0 5
19280: PPUSH
19281: CALL_OW 3
19285: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19286: CALL 19451 0 0
// exit ;
19290: POP
19291: POP
19292: GO 19446
// end else
19294: GO 19392
// if factory = factoryWaypoints [ i ] [ 2 ] then
19296: LD_VAR 0 1
19300: PUSH
19301: LD_EXP 66
19305: PUSH
19306: LD_VAR 0 5
19310: ARRAY
19311: PUSH
19312: LD_INT 2
19314: ARRAY
19315: EQUAL
19316: IFFALSE 19392
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19318: LD_ADDR_EXP 66
19322: PUSH
19323: LD_EXP 66
19327: PPUSH
19328: LD_VAR 0 5
19332: PPUSH
19333: CALL_OW 3
19337: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19338: LD_ADDR_EXP 66
19342: PUSH
19343: LD_EXP 66
19347: PPUSH
19348: LD_VAR 0 1
19352: PPUSH
19353: CALL_OW 255
19357: PUSH
19358: LD_VAR 0 1
19362: PUSH
19363: LD_VAR 0 2
19367: PUSH
19368: LD_VAR 0 3
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL 64911 0 2
19383: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19384: CALL 19451 0 0
// exit ;
19388: POP
19389: POP
19390: GO 19446
// end ; end ;
19392: GO 19231
19394: POP
19395: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19396: LD_ADDR_EXP 66
19400: PUSH
19401: LD_EXP 66
19405: PPUSH
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 255
19415: PUSH
19416: LD_VAR 0 1
19420: PUSH
19421: LD_VAR 0 2
19425: PUSH
19426: LD_VAR 0 3
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL 64911 0 2
19441: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19442: CALL 19451 0 0
// end ;
19446: LD_VAR 0 4
19450: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19451: LD_INT 0
19453: PPUSH
19454: PPUSH
19455: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19456: LD_STRING resetFactoryWaypoint();
19458: PPUSH
19459: CALL_OW 559
// if factoryWaypoints then
19463: LD_EXP 66
19467: IFFALSE 19588
// begin list := factoryWaypoints ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: LD_EXP 66
19478: ST_TO_ADDR
// for i := 1 to list do
19479: LD_ADDR_VAR 0 2
19483: PUSH
19484: DOUBLE
19485: LD_INT 1
19487: DEC
19488: ST_TO_ADDR
19489: LD_VAR 0 3
19493: PUSH
19494: FOR_TO
19495: IFFALSE 19586
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19497: LD_STRING setFactoryWaypointXY(
19499: PUSH
19500: LD_VAR 0 3
19504: PUSH
19505: LD_VAR 0 2
19509: ARRAY
19510: PUSH
19511: LD_INT 1
19513: ARRAY
19514: STR
19515: PUSH
19516: LD_STRING ,
19518: STR
19519: PUSH
19520: LD_VAR 0 3
19524: PUSH
19525: LD_VAR 0 2
19529: ARRAY
19530: PUSH
19531: LD_INT 2
19533: ARRAY
19534: STR
19535: PUSH
19536: LD_STRING ,
19538: STR
19539: PUSH
19540: LD_VAR 0 3
19544: PUSH
19545: LD_VAR 0 2
19549: ARRAY
19550: PUSH
19551: LD_INT 3
19553: ARRAY
19554: STR
19555: PUSH
19556: LD_STRING ,
19558: STR
19559: PUSH
19560: LD_VAR 0 3
19564: PUSH
19565: LD_VAR 0 2
19569: ARRAY
19570: PUSH
19571: LD_INT 4
19573: ARRAY
19574: STR
19575: PUSH
19576: LD_STRING )
19578: STR
19579: PPUSH
19580: CALL_OW 559
19584: GO 19494
19586: POP
19587: POP
// end ; end ;
19588: LD_VAR 0 1
19592: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19593: LD_INT 0
19595: PPUSH
// if HexInfo ( x , y ) = warehouse then
19596: LD_VAR 0 2
19600: PPUSH
19601: LD_VAR 0 3
19605: PPUSH
19606: CALL_OW 428
19610: PUSH
19611: LD_VAR 0 1
19615: EQUAL
19616: IFFALSE 19643
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19618: LD_ADDR_EXP 68
19622: PUSH
19623: LD_EXP 68
19627: PPUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: LD_INT 0
19635: PPUSH
19636: CALL_OW 1
19640: ST_TO_ADDR
19641: GO 19694
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19643: LD_ADDR_EXP 68
19647: PUSH
19648: LD_EXP 68
19652: PPUSH
19653: LD_VAR 0 1
19657: PPUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 255
19667: PUSH
19668: LD_VAR 0 1
19672: PUSH
19673: LD_VAR 0 2
19677: PUSH
19678: LD_VAR 0 3
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: PPUSH
19689: CALL_OW 1
19693: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19694: CALL 19703 0 0
// end ;
19698: LD_VAR 0 4
19702: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19703: LD_INT 0
19705: PPUSH
19706: PPUSH
19707: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19708: LD_STRING resetWarehouseGatheringPoints();
19710: PPUSH
19711: CALL_OW 559
// if warehouseGatheringPoints then
19715: LD_EXP 68
19719: IFFALSE 19845
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_EXP 68
19730: PPUSH
19731: CALL 68845 0 1
19735: ST_TO_ADDR
// for i := 1 to list do
19736: LD_ADDR_VAR 0 2
19740: PUSH
19741: DOUBLE
19742: LD_INT 1
19744: DEC
19745: ST_TO_ADDR
19746: LD_VAR 0 3
19750: PUSH
19751: FOR_TO
19752: IFFALSE 19843
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19754: LD_STRING setWarehouseGatheringPointXY(
19756: PUSH
19757: LD_VAR 0 3
19761: PUSH
19762: LD_VAR 0 2
19766: ARRAY
19767: PUSH
19768: LD_INT 1
19770: ARRAY
19771: STR
19772: PUSH
19773: LD_STRING ,
19775: STR
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: LD_VAR 0 2
19786: ARRAY
19787: PUSH
19788: LD_INT 2
19790: ARRAY
19791: STR
19792: PUSH
19793: LD_STRING ,
19795: STR
19796: PUSH
19797: LD_VAR 0 3
19801: PUSH
19802: LD_VAR 0 2
19806: ARRAY
19807: PUSH
19808: LD_INT 3
19810: ARRAY
19811: STR
19812: PUSH
19813: LD_STRING ,
19815: STR
19816: PUSH
19817: LD_VAR 0 3
19821: PUSH
19822: LD_VAR 0 2
19826: ARRAY
19827: PUSH
19828: LD_INT 4
19830: ARRAY
19831: STR
19832: PUSH
19833: LD_STRING )
19835: STR
19836: PPUSH
19837: CALL_OW 559
19841: GO 19751
19843: POP
19844: POP
// end ; end ;
19845: LD_VAR 0 1
19849: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19850: LD_EXP 68
19854: IFFALSE 20549
19856: GO 19858
19858: DISABLE
19859: LD_INT 0
19861: PPUSH
19862: PPUSH
19863: PPUSH
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
19868: PPUSH
19869: PPUSH
// begin enable ;
19870: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: LD_EXP 68
19880: PPUSH
19881: CALL 68845 0 1
19885: ST_TO_ADDR
// if not list then
19886: LD_VAR 0 3
19890: NOT
19891: IFFALSE 19895
// exit ;
19893: GO 20549
// for i := 1 to list do
19895: LD_ADDR_VAR 0 1
19899: PUSH
19900: DOUBLE
19901: LD_INT 1
19903: DEC
19904: ST_TO_ADDR
19905: LD_VAR 0 3
19909: PUSH
19910: FOR_TO
19911: IFFALSE 20547
// begin depot := list [ i ] [ 2 ] ;
19913: LD_ADDR_VAR 0 8
19917: PUSH
19918: LD_VAR 0 3
19922: PUSH
19923: LD_VAR 0 1
19927: ARRAY
19928: PUSH
19929: LD_INT 2
19931: ARRAY
19932: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19933: LD_ADDR_VAR 0 5
19937: PUSH
19938: LD_VAR 0 3
19942: PUSH
19943: LD_VAR 0 1
19947: ARRAY
19948: PUSH
19949: LD_INT 1
19951: ARRAY
19952: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19953: LD_VAR 0 8
19957: PPUSH
19958: CALL_OW 301
19962: IFTRUE 19981
19964: PUSH
19965: LD_VAR 0 5
19969: PUSH
19970: LD_VAR 0 8
19974: PPUSH
19975: CALL_OW 255
19979: NONEQUAL
19980: OR
19981: IFFALSE 20010
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19983: LD_ADDR_EXP 68
19987: PUSH
19988: LD_EXP 68
19992: PPUSH
19993: LD_VAR 0 8
19997: PPUSH
19998: LD_INT 0
20000: PPUSH
20001: CALL_OW 1
20005: ST_TO_ADDR
// exit ;
20006: POP
20007: POP
20008: GO 20549
// end ; x := list [ i ] [ 3 ] ;
20010: LD_ADDR_VAR 0 6
20014: PUSH
20015: LD_VAR 0 3
20019: PUSH
20020: LD_VAR 0 1
20024: ARRAY
20025: PUSH
20026: LD_INT 3
20028: ARRAY
20029: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20030: LD_ADDR_VAR 0 7
20034: PUSH
20035: LD_VAR 0 3
20039: PUSH
20040: LD_VAR 0 1
20044: ARRAY
20045: PUSH
20046: LD_INT 4
20048: ARRAY
20049: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20050: LD_ADDR_VAR 0 9
20054: PUSH
20055: LD_VAR 0 6
20059: PPUSH
20060: LD_VAR 0 7
20064: PPUSH
20065: LD_INT 16
20067: PPUSH
20068: CALL 67419 0 3
20072: ST_TO_ADDR
// if not cratesNearbyPoint then
20073: LD_VAR 0 9
20077: NOT
20078: IFFALSE 20084
// exit ;
20080: POP
20081: POP
20082: GO 20549
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20084: LD_ADDR_VAR 0 4
20088: PUSH
20089: LD_INT 22
20091: PUSH
20092: LD_VAR 0 5
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 3
20103: PUSH
20104: LD_INT 60
20106: PUSH
20107: EMPTY
20108: LIST
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 91
20116: PUSH
20117: LD_VAR 0 8
20121: PUSH
20122: LD_INT 6
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 25
20145: PUSH
20146: LD_INT 16
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: PPUSH
20164: CALL_OW 69
20168: PUSH
20169: LD_VAR 0 8
20173: PPUSH
20174: CALL_OW 313
20178: PPUSH
20179: LD_INT 3
20181: PUSH
20182: LD_INT 60
20184: PUSH
20185: EMPTY
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: LD_INT 25
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 25
20207: PUSH
20208: LD_INT 16
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PPUSH
20224: CALL_OW 72
20228: UNION
20229: ST_TO_ADDR
// if tmp then
20230: LD_VAR 0 4
20234: IFFALSE 20314
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20236: LD_ADDR_VAR 0 4
20240: PUSH
20241: LD_VAR 0 4
20245: PPUSH
20246: LD_INT 3
20248: PPUSH
20249: CALL 65226 0 2
20253: ST_TO_ADDR
// for j in tmp do
20254: LD_ADDR_VAR 0 2
20258: PUSH
20259: LD_VAR 0 4
20263: PUSH
20264: FOR_IN
20265: IFFALSE 20308
// begin if IsInUnit ( j ) then
20267: LD_VAR 0 2
20271: PPUSH
20272: CALL_OW 310
20276: IFFALSE 20287
// ComExit ( j ) ;
20278: LD_VAR 0 2
20282: PPUSH
20283: CALL 65309 0 1
// AddComCollect ( j , x , y ) ;
20287: LD_VAR 0 2
20291: PPUSH
20292: LD_VAR 0 6
20296: PPUSH
20297: LD_VAR 0 7
20301: PPUSH
20302: CALL_OW 177
// end ;
20306: GO 20264
20308: POP
20309: POP
// exit ;
20310: POP
20311: POP
20312: GO 20549
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20314: LD_ADDR_VAR 0 4
20318: PUSH
20319: LD_INT 22
20321: PUSH
20322: LD_VAR 0 5
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 91
20333: PUSH
20334: LD_VAR 0 8
20338: PUSH
20339: LD_INT 8
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: PUSH
20350: LD_INT 34
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 34
20362: PUSH
20363: LD_INT 51
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 34
20372: PUSH
20373: LD_INT 32
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 34
20382: PUSH
20383: LD_INT 89
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PPUSH
20402: CALL_OW 69
20406: ST_TO_ADDR
// if tmp then
20407: LD_VAR 0 4
20411: IFFALSE 20545
// begin for j in tmp do
20413: LD_ADDR_VAR 0 2
20417: PUSH
20418: LD_VAR 0 4
20422: PUSH
20423: FOR_IN
20424: IFFALSE 20543
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20426: LD_VAR 0 2
20430: PPUSH
20431: CALL_OW 262
20435: PUSH
20436: LD_INT 3
20438: EQUAL
20439: IFTRUE 20456
20441: PUSH
20442: LD_VAR 0 2
20446: PPUSH
20447: CALL_OW 261
20451: PUSH
20452: LD_INT 20
20454: GREATER
20455: OR
20456: IFFALSE 20470
20458: PUSH
20459: LD_VAR 0 2
20463: PPUSH
20464: CALL_OW 314
20468: NOT
20469: AND
20470: IFFALSE 20500
20472: PUSH
20473: LD_VAR 0 2
20477: PPUSH
20478: CALL_OW 263
20482: PUSH
20483: LD_INT 1
20485: NONEQUAL
20486: IFTRUE 20499
20488: PUSH
20489: LD_VAR 0 2
20493: PPUSH
20494: CALL_OW 311
20498: OR
20499: AND
20500: IFFALSE 20541
// begin ComCollect ( j , x , y ) ;
20502: LD_VAR 0 2
20506: PPUSH
20507: LD_VAR 0 6
20511: PPUSH
20512: LD_VAR 0 7
20516: PPUSH
20517: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20521: LD_VAR 0 2
20525: PPUSH
20526: LD_VAR 0 8
20530: PPUSH
20531: CALL_OW 172
// exit ;
20535: POP
20536: POP
20537: POP
20538: POP
20539: GO 20549
// end ;
20541: GO 20423
20543: POP
20544: POP
// end ; end ;
20545: GO 19910
20547: POP
20548: POP
// end ; end_of_file
20549: PPOPN 9
20551: END
// export function SOS_UnitDestroyed ( un ) ; begin
20552: LD_INT 0
20554: PPUSH
// ComRadiation ( un ) ;
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL 21641 0 1
// end ;
20564: LD_VAR 0 2
20568: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20569: LD_INT 0
20571: PPUSH
// ComRadiation ( un ) ;
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL 21641 0 1
// end ;
20581: LD_VAR 0 2
20585: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20586: LD_INT 0
20588: PPUSH
// end ;
20589: LD_VAR 0 4
20593: RET
// export function SOS_Command ( cmd ) ; begin
20594: LD_INT 0
20596: PPUSH
// end ;
20597: LD_VAR 0 2
20601: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20602: LD_INT 0
20604: PPUSH
// end ;
20605: LD_VAR 0 6
20609: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
20610: LD_INT 0
20612: PPUSH
20613: PPUSH
20614: PPUSH
20615: PPUSH
// if not vehicle or not factory then
20616: LD_VAR 0 1
20620: NOT
20621: IFTRUE 20630
20623: PUSH
20624: LD_VAR 0 2
20628: NOT
20629: OR
20630: IFFALSE 20634
// exit ;
20632: GO 21216
// if not factoryWaypoints then
20634: LD_EXP 66
20638: NOT
20639: IFFALSE 20643
// exit ;
20641: GO 21216
// for i := 1 to Count ( factoryWaypoints ) do
20643: LD_ADDR_VAR 0 4
20647: PUSH
20648: DOUBLE
20649: LD_INT 1
20651: DEC
20652: ST_TO_ADDR
20653: LD_EXP 66
20657: PPUSH
20658: CALL 28979 0 1
20662: PUSH
20663: FOR_TO
20664: IFFALSE 21214
// if factoryWaypoints [ i ] [ 2 ] = factory then
20666: LD_EXP 66
20670: PUSH
20671: LD_VAR 0 4
20675: ARRAY
20676: PUSH
20677: LD_INT 2
20679: ARRAY
20680: PUSH
20681: LD_VAR 0 2
20685: EQUAL
20686: IFFALSE 21212
// begin if GetControl ( vehicle ) = control_manual then
20688: LD_VAR 0 1
20692: PPUSH
20693: CALL_OW 263
20697: PUSH
20698: LD_INT 1
20700: EQUAL
20701: IFFALSE 21065
// begin driver := IsDrivenBy ( vehicle ) ;
20703: LD_ADDR_VAR 0 5
20707: PUSH
20708: LD_VAR 0 1
20712: PPUSH
20713: CALL_OW 311
20717: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
20718: LD_VAR 0 5
20722: PUSH
20723: LD_EXP 67
20727: IN
20728: IFTRUE 20742
20730: PUSH
20731: LD_VAR 0 1
20735: PUSH
20736: LD_EXP 67
20740: IN
20741: OR
20742: IFFALSE 20748
// exit ;
20744: POP
20745: POP
20746: GO 21216
// if not HasTask ( driver ) then
20748: LD_VAR 0 5
20752: PPUSH
20753: CALL_OW 314
20757: NOT
20758: IFFALSE 21063
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
20760: LD_ADDR_EXP 67
20764: PUSH
20765: LD_EXP 67
20769: PPUSH
20770: LD_VAR 0 5
20774: PPUSH
20775: CALL 64911 0 2
20779: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
20780: LD_ADDR_EXP 67
20784: PUSH
20785: LD_EXP 67
20789: PPUSH
20790: LD_VAR 0 1
20794: PPUSH
20795: CALL 64911 0 2
20799: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20800: LD_ADDR_VAR 0 6
20804: PUSH
20805: LD_EXP 66
20809: PUSH
20810: LD_VAR 0 4
20814: ARRAY
20815: PUSH
20816: LD_INT 3
20818: ARRAY
20819: PPUSH
20820: LD_EXP 66
20824: PUSH
20825: LD_VAR 0 4
20829: ARRAY
20830: PUSH
20831: LD_INT 4
20833: ARRAY
20834: PPUSH
20835: CALL_OW 428
20839: ST_TO_ADDR
// if hex then
20840: LD_VAR 0 6
20844: IFFALSE 20862
// ComMoveUnit ( driver , hex ) else
20846: LD_VAR 0 5
20850: PPUSH
20851: LD_VAR 0 6
20855: PPUSH
20856: CALL_OW 112
20860: GO 20946
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
20862: LD_VAR 0 1
20866: PPUSH
20867: LD_EXP 66
20871: PUSH
20872: LD_VAR 0 4
20876: ARRAY
20877: PUSH
20878: LD_INT 3
20880: ARRAY
20881: PPUSH
20882: LD_EXP 66
20886: PUSH
20887: LD_VAR 0 4
20891: ARRAY
20892: PUSH
20893: LD_INT 4
20895: ARRAY
20896: PPUSH
20897: CALL_OW 297
20901: PUSH
20902: LD_INT 0
20904: GREATER
20905: IFFALSE 20946
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20907: LD_VAR 0 5
20911: PPUSH
20912: LD_EXP 66
20916: PUSH
20917: LD_VAR 0 4
20921: ARRAY
20922: PUSH
20923: LD_INT 3
20925: ARRAY
20926: PPUSH
20927: LD_EXP 66
20931: PUSH
20932: LD_VAR 0 4
20936: ARRAY
20937: PUSH
20938: LD_INT 4
20940: ARRAY
20941: PPUSH
20942: CALL_OW 111
// AddComExitVehicle ( driver ) ;
20946: LD_VAR 0 5
20950: PPUSH
20951: CALL_OW 181
// if Multiplayer then
20955: LD_OWVAR 4
20959: IFFALSE 21008
// begin repeat wait ( 10 ) ;
20961: LD_INT 10
20963: PPUSH
20964: CALL_OW 67
// until not IsInUnit ( driver ) ;
20968: LD_VAR 0 5
20972: PPUSH
20973: CALL_OW 310
20977: NOT
20978: IFFALSE 20961
// if not HasTask ( driver ) then
20980: LD_VAR 0 5
20984: PPUSH
20985: CALL_OW 314
20989: NOT
20990: IFFALSE 21006
// ComEnterUnit ( driver , factory ) ;
20992: LD_VAR 0 5
20996: PPUSH
20997: LD_VAR 0 2
21001: PPUSH
21002: CALL_OW 120
// end else
21006: GO 21022
// AddComEnterUnit ( driver , factory ) ;
21008: LD_VAR 0 5
21012: PPUSH
21013: LD_VAR 0 2
21017: PPUSH
21018: CALL_OW 180
// wait ( 0 0$1 ) ;
21022: LD_INT 35
21024: PPUSH
21025: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
21029: LD_ADDR_EXP 67
21033: PUSH
21034: LD_EXP 67
21038: PUSH
21039: LD_VAR 0 5
21043: DIFF
21044: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
21045: LD_ADDR_EXP 67
21049: PUSH
21050: LD_EXP 67
21054: PUSH
21055: LD_VAR 0 1
21059: DIFF
21060: ST_TO_ADDR
// break ;
21061: GO 21214
// end ; end else
21063: GO 21212
// if GetControl ( vehicle ) = control_remote then
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL_OW 263
21074: PUSH
21075: LD_INT 2
21077: EQUAL
21078: IFFALSE 21164
// begin wait ( 0 0$2 ) ;
21080: LD_INT 70
21082: PPUSH
21083: CALL_OW 67
// repeat wait ( 10 ) ;
21087: LD_INT 10
21089: PPUSH
21090: CALL_OW 67
// Connect ( vehicle ) ;
21094: LD_VAR 0 1
21098: PPUSH
21099: CALL 35223 0 1
// until IsControledBy ( vehicle ) ;
21103: LD_VAR 0 1
21107: PPUSH
21108: CALL_OW 312
21112: IFFALSE 21087
// wait ( 10 ) ;
21114: LD_INT 10
21116: PPUSH
21117: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21121: LD_VAR 0 1
21125: PPUSH
21126: LD_EXP 66
21130: PUSH
21131: LD_VAR 0 4
21135: ARRAY
21136: PUSH
21137: LD_INT 3
21139: ARRAY
21140: PPUSH
21141: LD_EXP 66
21145: PUSH
21146: LD_VAR 0 4
21150: ARRAY
21151: PUSH
21152: LD_INT 4
21154: ARRAY
21155: PPUSH
21156: CALL_OW 111
// break ;
21160: GO 21214
// end else
21162: GO 21212
// begin wait ( 0 0$3 ) ;
21164: LD_INT 105
21166: PPUSH
21167: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21171: LD_VAR 0 1
21175: PPUSH
21176: LD_EXP 66
21180: PUSH
21181: LD_VAR 0 4
21185: ARRAY
21186: PUSH
21187: LD_INT 3
21189: ARRAY
21190: PPUSH
21191: LD_EXP 66
21195: PUSH
21196: LD_VAR 0 4
21200: ARRAY
21201: PUSH
21202: LD_INT 4
21204: ARRAY
21205: PPUSH
21206: CALL_OW 111
// break ;
21210: GO 21214
// end ; end ;
21212: GO 20663
21214: POP
21215: POP
// end ;
21216: LD_VAR 0 3
21220: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21221: LD_INT 0
21223: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21224: LD_VAR 0 1
21228: PUSH
21229: LD_INT 250
21231: EQUAL
21232: IFFALSE 21249
21234: PUSH
21235: LD_VAR 0 2
21239: PPUSH
21240: CALL_OW 264
21244: PUSH
21245: LD_INT 81
21247: EQUAL
21248: AND
21249: IFFALSE 21270
// MinerPlaceMine ( unit , x , y ) ;
21251: LD_VAR 0 2
21255: PPUSH
21256: LD_VAR 0 4
21260: PPUSH
21261: LD_VAR 0 5
21265: PPUSH
21266: CALL 24402 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21270: LD_VAR 0 1
21274: PUSH
21275: LD_INT 251
21277: EQUAL
21278: IFFALSE 21295
21280: PUSH
21281: LD_VAR 0 2
21285: PPUSH
21286: CALL_OW 264
21290: PUSH
21291: LD_INT 81
21293: EQUAL
21294: AND
21295: IFFALSE 21316
// MinerDetonateMine ( unit , x , y ) ;
21297: LD_VAR 0 2
21301: PPUSH
21302: LD_VAR 0 4
21306: PPUSH
21307: LD_VAR 0 5
21311: PPUSH
21312: CALL 24681 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21316: LD_VAR 0 1
21320: PUSH
21321: LD_INT 252
21323: EQUAL
21324: IFFALSE 21341
21326: PUSH
21327: LD_VAR 0 2
21331: PPUSH
21332: CALL_OW 264
21336: PUSH
21337: LD_INT 81
21339: EQUAL
21340: AND
21341: IFFALSE 21362
// MinerCreateMinefield ( unit , x , y ) ;
21343: LD_VAR 0 2
21347: PPUSH
21348: LD_VAR 0 4
21352: PPUSH
21353: LD_VAR 0 5
21357: PPUSH
21358: CALL 25100 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21362: LD_VAR 0 1
21366: PUSH
21367: LD_INT 253
21369: EQUAL
21370: IFFALSE 21387
21372: PUSH
21373: LD_VAR 0 2
21377: PPUSH
21378: CALL_OW 257
21382: PUSH
21383: LD_INT 5
21385: EQUAL
21386: AND
21387: IFFALSE 21408
// ComBinocular ( unit , x , y ) ;
21389: LD_VAR 0 2
21393: PPUSH
21394: LD_VAR 0 4
21398: PPUSH
21399: LD_VAR 0 5
21403: PPUSH
21404: CALL 25475 0 3
// if selectedUnit then
21408: LD_VAR 0 3
21412: IFFALSE 21472
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21414: LD_VAR 0 1
21418: PUSH
21419: LD_INT 254
21421: EQUAL
21422: IFFALSE 21439
21424: PUSH
21425: LD_VAR 0 2
21429: PPUSH
21430: CALL_OW 264
21434: PUSH
21435: LD_INT 99
21437: EQUAL
21438: AND
21439: IFFALSE 21456
21441: PUSH
21442: LD_VAR 0 3
21446: PPUSH
21447: CALL_OW 263
21451: PUSH
21452: LD_INT 3
21454: EQUAL
21455: AND
21456: IFFALSE 21472
// HackDestroyVehicle ( unit , selectedUnit ) ;
21458: LD_VAR 0 2
21462: PPUSH
21463: LD_VAR 0 3
21467: PPUSH
21468: CALL 23762 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21472: LD_VAR 0 1
21476: PUSH
21477: LD_INT 255
21479: EQUAL
21480: IFFALSE 21504
21482: PUSH
21483: LD_VAR 0 2
21487: PPUSH
21488: CALL_OW 264
21492: PUSH
21493: LD_INT 14
21495: PUSH
21496: LD_INT 53
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: IN
21503: AND
21504: IFFALSE 21522
21506: PUSH
21507: LD_VAR 0 4
21511: PPUSH
21512: LD_VAR 0 5
21516: PPUSH
21517: CALL_OW 488
21521: AND
21522: IFFALSE 21546
// CutTreeXYR ( unit , x , y , 12 ) ;
21524: LD_VAR 0 2
21528: PPUSH
21529: LD_VAR 0 4
21533: PPUSH
21534: LD_VAR 0 5
21538: PPUSH
21539: LD_INT 12
21541: PPUSH
21542: CALL 21737 0 4
// if cmd = 256 then
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 256
21553: EQUAL
21554: IFFALSE 21575
// SetFactoryWaypoint ( unit , x , y ) ;
21556: LD_VAR 0 2
21560: PPUSH
21561: LD_VAR 0 4
21565: PPUSH
21566: LD_VAR 0 5
21570: PPUSH
21571: CALL 19097 0 3
// if cmd = 257 then
21575: LD_VAR 0 1
21579: PUSH
21580: LD_INT 257
21582: EQUAL
21583: IFFALSE 21604
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21585: LD_VAR 0 2
21589: PPUSH
21590: LD_VAR 0 4
21594: PPUSH
21595: LD_VAR 0 5
21599: PPUSH
21600: CALL 19593 0 3
// if cmd = 258 then
21604: LD_VAR 0 1
21608: PUSH
21609: LD_INT 258
21611: EQUAL
21612: IFFALSE 21636
// BurnTreeXYR ( unit , x , y , 8 ) ;
21614: LD_VAR 0 2
21618: PPUSH
21619: LD_VAR 0 4
21623: PPUSH
21624: LD_VAR 0 5
21628: PPUSH
21629: LD_INT 8
21631: PPUSH
21632: CALL 22137 0 4
// end ;
21636: LD_VAR 0 6
21640: RET
// export function ComRadiation ( un ) ; var eff ; begin
21641: LD_INT 0
21643: PPUSH
21644: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 264
21654: PUSH
21655: LD_INT 91
21657: NONEQUAL
21658: IFFALSE 21662
// exit ;
21660: GO 21732
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21662: LD_INT 68
21664: PPUSH
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 255
21674: PPUSH
21675: CALL_OW 321
21679: PUSH
21680: LD_INT 2
21682: EQUAL
21683: IFFALSE 21695
// eff := 50 else
21685: LD_ADDR_VAR 0 3
21689: PUSH
21690: LD_INT 50
21692: ST_TO_ADDR
21693: GO 21703
// eff := 25 ;
21695: LD_ADDR_VAR 0 3
21699: PUSH
21700: LD_INT 25
21702: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 250
21712: PPUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 251
21722: PPUSH
21723: LD_VAR 0 3
21727: PPUSH
21728: CALL_OW 495
// end ;
21732: LD_VAR 0 2
21736: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21737: LD_INT 0
21739: PPUSH
21740: PPUSH
21741: PPUSH
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
21746: PPUSH
21747: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21748: LD_VAR 0 1
21752: PPUSH
21753: CALL_OW 302
21757: NOT
21758: IFTRUE 21777
21760: PUSH
21761: LD_VAR 0 2
21765: PPUSH
21766: LD_VAR 0 3
21770: PPUSH
21771: CALL_OW 488
21775: NOT
21776: OR
21777: IFTRUE 21786
21779: PUSH
21780: LD_VAR 0 4
21784: NOT
21785: OR
21786: IFFALSE 21790
// exit ;
21788: GO 22132
// list := [ ] ;
21790: LD_ADDR_VAR 0 13
21794: PUSH
21795: EMPTY
21796: ST_TO_ADDR
// if x - r < 0 then
21797: LD_VAR 0 2
21801: PUSH
21802: LD_VAR 0 4
21806: MINUS
21807: PUSH
21808: LD_INT 0
21810: LESS
21811: IFFALSE 21823
// min_x := 0 else
21813: LD_ADDR_VAR 0 7
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
21821: GO 21839
// min_x := x - r ;
21823: LD_ADDR_VAR 0 7
21827: PUSH
21828: LD_VAR 0 2
21832: PUSH
21833: LD_VAR 0 4
21837: MINUS
21838: ST_TO_ADDR
// if y - r < 0 then
21839: LD_VAR 0 3
21843: PUSH
21844: LD_VAR 0 4
21848: MINUS
21849: PUSH
21850: LD_INT 0
21852: LESS
21853: IFFALSE 21865
// min_y := 0 else
21855: LD_ADDR_VAR 0 8
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
21863: GO 21881
// min_y := y - r ;
21865: LD_ADDR_VAR 0 8
21869: PUSH
21870: LD_VAR 0 3
21874: PUSH
21875: LD_VAR 0 4
21879: MINUS
21880: ST_TO_ADDR
// max_x := x + r ;
21881: LD_ADDR_VAR 0 9
21885: PUSH
21886: LD_VAR 0 2
21890: PUSH
21891: LD_VAR 0 4
21895: PLUS
21896: ST_TO_ADDR
// max_y := y + r ;
21897: LD_ADDR_VAR 0 10
21901: PUSH
21902: LD_VAR 0 3
21906: PUSH
21907: LD_VAR 0 4
21911: PLUS
21912: ST_TO_ADDR
// for _x = min_x to max_x do
21913: LD_ADDR_VAR 0 11
21917: PUSH
21918: DOUBLE
21919: LD_VAR 0 7
21923: DEC
21924: ST_TO_ADDR
21925: LD_VAR 0 9
21929: PUSH
21930: FOR_TO
21931: IFFALSE 22050
// for _y = min_y to max_y do
21933: LD_ADDR_VAR 0 12
21937: PUSH
21938: DOUBLE
21939: LD_VAR 0 8
21943: DEC
21944: ST_TO_ADDR
21945: LD_VAR 0 10
21949: PUSH
21950: FOR_TO
21951: IFFALSE 22046
// begin if not ValidHex ( _x , _y ) then
21953: LD_VAR 0 11
21957: PPUSH
21958: LD_VAR 0 12
21962: PPUSH
21963: CALL_OW 488
21967: NOT
21968: IFFALSE 21972
// continue ;
21970: GO 21950
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21972: LD_VAR 0 11
21976: PPUSH
21977: LD_VAR 0 12
21981: PPUSH
21982: CALL_OW 351
21986: IFFALSE 22004
21988: PUSH
21989: LD_VAR 0 11
21993: PPUSH
21994: LD_VAR 0 12
21998: PPUSH
21999: CALL_OW 554
22003: AND
22004: IFFALSE 22044
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22006: LD_ADDR_VAR 0 13
22010: PUSH
22011: LD_VAR 0 13
22015: PPUSH
22016: LD_VAR 0 13
22020: PUSH
22021: LD_INT 1
22023: PLUS
22024: PPUSH
22025: LD_VAR 0 11
22029: PUSH
22030: LD_VAR 0 12
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PPUSH
22039: CALL_OW 2
22043: ST_TO_ADDR
// end ;
22044: GO 21950
22046: POP
22047: POP
22048: GO 21930
22050: POP
22051: POP
// if not list then
22052: LD_VAR 0 13
22056: NOT
22057: IFFALSE 22061
// exit ;
22059: GO 22132
// for i in list do
22061: LD_ADDR_VAR 0 6
22065: PUSH
22066: LD_VAR 0 13
22070: PUSH
22071: FOR_IN
22072: IFFALSE 22130
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22074: LD_VAR 0 1
22078: PPUSH
22079: LD_STRING M
22081: PUSH
22082: LD_VAR 0 6
22086: PUSH
22087: LD_INT 1
22089: ARRAY
22090: PUSH
22091: LD_VAR 0 6
22095: PUSH
22096: LD_INT 2
22098: ARRAY
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: LD_INT 0
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: PPUSH
22124: CALL_OW 447
22128: GO 22071
22130: POP
22131: POP
// end ;
22132: LD_VAR 0 5
22136: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22137: LD_INT 0
22139: PPUSH
22140: PPUSH
22141: PPUSH
22142: PPUSH
22143: PPUSH
22144: PPUSH
22145: PPUSH
22146: PPUSH
22147: PPUSH
22148: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22149: LD_VAR 0 1
22153: PPUSH
22154: CALL_OW 302
22158: NOT
22159: IFTRUE 22178
22161: PUSH
22162: LD_VAR 0 2
22166: PPUSH
22167: LD_VAR 0 3
22171: PPUSH
22172: CALL_OW 488
22176: NOT
22177: OR
22178: IFTRUE 22187
22180: PUSH
22181: LD_VAR 0 4
22185: NOT
22186: OR
22187: IFFALSE 22191
// exit ;
22189: GO 22708
// list := [ ] ;
22191: LD_ADDR_VAR 0 13
22195: PUSH
22196: EMPTY
22197: ST_TO_ADDR
// if x - r < 0 then
22198: LD_VAR 0 2
22202: PUSH
22203: LD_VAR 0 4
22207: MINUS
22208: PUSH
22209: LD_INT 0
22211: LESS
22212: IFFALSE 22224
// min_x := 0 else
22214: LD_ADDR_VAR 0 7
22218: PUSH
22219: LD_INT 0
22221: ST_TO_ADDR
22222: GO 22240
// min_x := x - r ;
22224: LD_ADDR_VAR 0 7
22228: PUSH
22229: LD_VAR 0 2
22233: PUSH
22234: LD_VAR 0 4
22238: MINUS
22239: ST_TO_ADDR
// if y - r < 0 then
22240: LD_VAR 0 3
22244: PUSH
22245: LD_VAR 0 4
22249: MINUS
22250: PUSH
22251: LD_INT 0
22253: LESS
22254: IFFALSE 22266
// min_y := 0 else
22256: LD_ADDR_VAR 0 8
22260: PUSH
22261: LD_INT 0
22263: ST_TO_ADDR
22264: GO 22282
// min_y := y - r ;
22266: LD_ADDR_VAR 0 8
22270: PUSH
22271: LD_VAR 0 3
22275: PUSH
22276: LD_VAR 0 4
22280: MINUS
22281: ST_TO_ADDR
// max_x := x + r ;
22282: LD_ADDR_VAR 0 9
22286: PUSH
22287: LD_VAR 0 2
22291: PUSH
22292: LD_VAR 0 4
22296: PLUS
22297: ST_TO_ADDR
// max_y := y + r ;
22298: LD_ADDR_VAR 0 10
22302: PUSH
22303: LD_VAR 0 3
22307: PUSH
22308: LD_VAR 0 4
22312: PLUS
22313: ST_TO_ADDR
// for _x = min_x to max_x do
22314: LD_ADDR_VAR 0 11
22318: PUSH
22319: DOUBLE
22320: LD_VAR 0 7
22324: DEC
22325: ST_TO_ADDR
22326: LD_VAR 0 9
22330: PUSH
22331: FOR_TO
22332: IFFALSE 22451
// for _y = min_y to max_y do
22334: LD_ADDR_VAR 0 12
22338: PUSH
22339: DOUBLE
22340: LD_VAR 0 8
22344: DEC
22345: ST_TO_ADDR
22346: LD_VAR 0 10
22350: PUSH
22351: FOR_TO
22352: IFFALSE 22447
// begin if not ValidHex ( _x , _y ) then
22354: LD_VAR 0 11
22358: PPUSH
22359: LD_VAR 0 12
22363: PPUSH
22364: CALL_OW 488
22368: NOT
22369: IFFALSE 22373
// continue ;
22371: GO 22351
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22373: LD_VAR 0 11
22377: PPUSH
22378: LD_VAR 0 12
22382: PPUSH
22383: CALL_OW 351
22387: IFFALSE 22405
22389: PUSH
22390: LD_VAR 0 11
22394: PPUSH
22395: LD_VAR 0 12
22399: PPUSH
22400: CALL_OW 554
22404: AND
22405: IFFALSE 22445
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22407: LD_ADDR_VAR 0 13
22411: PUSH
22412: LD_VAR 0 13
22416: PPUSH
22417: LD_VAR 0 13
22421: PUSH
22422: LD_INT 1
22424: PLUS
22425: PPUSH
22426: LD_VAR 0 11
22430: PUSH
22431: LD_VAR 0 12
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 2
22444: ST_TO_ADDR
// end ;
22445: GO 22351
22447: POP
22448: POP
22449: GO 22331
22451: POP
22452: POP
// if not list then
22453: LD_VAR 0 13
22457: NOT
22458: IFFALSE 22462
// exit ;
22460: GO 22708
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22462: LD_ADDR_VAR 0 13
22466: PUSH
22467: LD_VAR 0 1
22471: PPUSH
22472: LD_VAR 0 13
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: LD_INT 1
22482: PPUSH
22483: CALL 32351 0 4
22487: ST_TO_ADDR
// ComStop ( flame ) ;
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 141
// for i in list do
22497: LD_ADDR_VAR 0 6
22501: PUSH
22502: LD_VAR 0 13
22506: PUSH
22507: FOR_IN
22508: IFFALSE 22539
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22510: LD_VAR 0 1
22514: PPUSH
22515: LD_VAR 0 6
22519: PUSH
22520: LD_INT 1
22522: ARRAY
22523: PPUSH
22524: LD_VAR 0 6
22528: PUSH
22529: LD_INT 2
22531: ARRAY
22532: PPUSH
22533: CALL_OW 176
22537: GO 22507
22539: POP
22540: POP
// repeat wait ( 0 0$1 ) ;
22541: LD_INT 35
22543: PPUSH
22544: CALL_OW 67
// task := GetTaskList ( flame ) ;
22548: LD_ADDR_VAR 0 14
22552: PUSH
22553: LD_VAR 0 1
22557: PPUSH
22558: CALL_OW 437
22562: ST_TO_ADDR
// if not task then
22563: LD_VAR 0 14
22567: NOT
22568: IFFALSE 22572
// exit ;
22570: GO 22708
// if task [ 1 ] [ 1 ] <> | then
22572: LD_VAR 0 14
22576: PUSH
22577: LD_INT 1
22579: ARRAY
22580: PUSH
22581: LD_INT 1
22583: ARRAY
22584: PUSH
22585: LD_STRING |
22587: NONEQUAL
22588: IFFALSE 22592
// exit ;
22590: GO 22708
// _x := task [ 1 ] [ 2 ] ;
22592: LD_ADDR_VAR 0 11
22596: PUSH
22597: LD_VAR 0 14
22601: PUSH
22602: LD_INT 1
22604: ARRAY
22605: PUSH
22606: LD_INT 2
22608: ARRAY
22609: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22610: LD_ADDR_VAR 0 12
22614: PUSH
22615: LD_VAR 0 14
22619: PUSH
22620: LD_INT 1
22622: ARRAY
22623: PUSH
22624: LD_INT 3
22626: ARRAY
22627: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22628: LD_VAR 0 11
22632: PPUSH
22633: LD_VAR 0 12
22637: PPUSH
22638: CALL_OW 351
22642: NOT
22643: IFTRUE 22662
22645: PUSH
22646: LD_VAR 0 11
22650: PPUSH
22651: LD_VAR 0 12
22655: PPUSH
22656: CALL_OW 554
22660: NOT
22661: OR
22662: IFFALSE 22696
// begin task := Delete ( task , 1 ) ;
22664: LD_ADDR_VAR 0 14
22668: PUSH
22669: LD_VAR 0 14
22673: PPUSH
22674: LD_INT 1
22676: PPUSH
22677: CALL_OW 3
22681: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22682: LD_VAR 0 1
22686: PPUSH
22687: LD_VAR 0 14
22691: PPUSH
22692: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 314
22705: NOT
22706: IFFALSE 22541
// end ;
22708: LD_VAR 0 5
22712: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22713: LD_EXP 70
22717: NOT
22718: IFFALSE 22768
22720: GO 22722
22722: DISABLE
// begin initHack := true ;
22723: LD_ADDR_EXP 70
22727: PUSH
22728: LD_INT 1
22730: ST_TO_ADDR
// hackTanks := [ ] ;
22731: LD_ADDR_EXP 71
22735: PUSH
22736: EMPTY
22737: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22738: LD_ADDR_EXP 72
22742: PUSH
22743: EMPTY
22744: ST_TO_ADDR
// hackLimit := 3 ;
22745: LD_ADDR_EXP 73
22749: PUSH
22750: LD_INT 3
22752: ST_TO_ADDR
// hackDist := 12 ;
22753: LD_ADDR_EXP 74
22757: PUSH
22758: LD_INT 12
22760: ST_TO_ADDR
// hackCounter := [ ] ;
22761: LD_ADDR_EXP 75
22765: PUSH
22766: EMPTY
22767: ST_TO_ADDR
// end ;
22768: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22769: LD_EXP 70
22773: IFFALSE 22791
22775: PUSH
22776: LD_INT 34
22778: PUSH
22779: LD_INT 99
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PPUSH
22786: CALL_OW 69
22790: AND
22791: IFFALSE 23044
22793: GO 22795
22795: DISABLE
22796: LD_INT 0
22798: PPUSH
22799: PPUSH
// begin enable ;
22800: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22801: LD_ADDR_VAR 0 1
22805: PUSH
22806: LD_INT 34
22808: PUSH
22809: LD_INT 99
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PPUSH
22816: CALL_OW 69
22820: PUSH
22821: FOR_IN
22822: IFFALSE 23042
// begin if not i in hackTanks then
22824: LD_VAR 0 1
22828: PUSH
22829: LD_EXP 71
22833: IN
22834: NOT
22835: IFFALSE 22918
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22837: LD_ADDR_EXP 71
22841: PUSH
22842: LD_EXP 71
22846: PPUSH
22847: LD_EXP 71
22851: PUSH
22852: LD_INT 1
22854: PLUS
22855: PPUSH
22856: LD_VAR 0 1
22860: PPUSH
22861: CALL_OW 1
22865: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22866: LD_ADDR_EXP 72
22870: PUSH
22871: LD_EXP 72
22875: PPUSH
22876: LD_EXP 72
22880: PUSH
22881: LD_INT 1
22883: PLUS
22884: PPUSH
22885: EMPTY
22886: PPUSH
22887: CALL_OW 1
22891: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22892: LD_ADDR_EXP 75
22896: PUSH
22897: LD_EXP 75
22901: PPUSH
22902: LD_EXP 75
22906: PUSH
22907: LD_INT 1
22909: PLUS
22910: PPUSH
22911: EMPTY
22912: PPUSH
22913: CALL_OW 1
22917: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22918: LD_VAR 0 1
22922: PPUSH
22923: CALL_OW 302
22927: NOT
22928: IFFALSE 22941
// begin HackUnlinkAll ( i ) ;
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL 23047 0 1
// continue ;
22939: GO 22821
// end ; HackCheckCapturedStatus ( i ) ;
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL 23492 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22950: LD_ADDR_VAR 0 2
22954: PUSH
22955: LD_INT 81
22957: PUSH
22958: LD_VAR 0 1
22962: PPUSH
22963: CALL_OW 255
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 33
22974: PUSH
22975: LD_INT 3
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 91
22984: PUSH
22985: LD_VAR 0 1
22989: PUSH
22990: LD_EXP 74
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 50
23002: PUSH
23003: EMPTY
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 69
23016: ST_TO_ADDR
// if not tmp then
23017: LD_VAR 0 2
23021: NOT
23022: IFFALSE 23026
// continue ;
23024: GO 22821
// HackLink ( i , tmp ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: LD_VAR 0 2
23035: PPUSH
23036: CALL 23183 0 2
// end ;
23040: GO 22821
23042: POP
23043: POP
// end ;
23044: PPOPN 2
23046: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
23051: PPUSH
// if not hack in hackTanks then
23052: LD_VAR 0 1
23056: PUSH
23057: LD_EXP 71
23061: IN
23062: NOT
23063: IFFALSE 23067
// exit ;
23065: GO 23178
// index := GetElementIndex ( hackTanks , hack ) ;
23067: LD_ADDR_VAR 0 4
23071: PUSH
23072: LD_EXP 71
23076: PPUSH
23077: LD_VAR 0 1
23081: PPUSH
23082: CALL 31646 0 2
23086: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23087: LD_EXP 72
23091: PUSH
23092: LD_VAR 0 4
23096: ARRAY
23097: IFFALSE 23178
// begin for i in hackTanksCaptured [ index ] do
23099: LD_ADDR_VAR 0 3
23103: PUSH
23104: LD_EXP 72
23108: PUSH
23109: LD_VAR 0 4
23113: ARRAY
23114: PUSH
23115: FOR_IN
23116: IFFALSE 23142
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23118: LD_VAR 0 3
23122: PUSH
23123: LD_INT 1
23125: ARRAY
23126: PPUSH
23127: LD_VAR 0 3
23131: PUSH
23132: LD_INT 2
23134: ARRAY
23135: PPUSH
23136: CALL_OW 235
23140: GO 23115
23142: POP
23143: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23144: LD_ADDR_EXP 72
23148: PUSH
23149: LD_EXP 72
23153: PPUSH
23154: LD_VAR 0 4
23158: PPUSH
23159: EMPTY
23160: PPUSH
23161: CALL_OW 1
23165: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_INT 0
23173: PPUSH
23174: CALL_OW 505
// end ; end ;
23178: LD_VAR 0 2
23182: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
23187: PPUSH
// if not hack in hackTanks or not vehicles then
23188: LD_VAR 0 1
23192: PUSH
23193: LD_EXP 71
23197: IN
23198: NOT
23199: IFTRUE 23208
23201: PUSH
23202: LD_VAR 0 2
23206: NOT
23207: OR
23208: IFFALSE 23212
// exit ;
23210: GO 23487
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23212: LD_ADDR_VAR 0 2
23216: PUSH
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_VAR 0 2
23226: PPUSH
23227: LD_INT 1
23229: PPUSH
23230: LD_INT 1
23232: PPUSH
23233: CALL 32298 0 4
23237: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23238: LD_ADDR_VAR 0 5
23242: PUSH
23243: LD_EXP 71
23247: PPUSH
23248: LD_VAR 0 1
23252: PPUSH
23253: CALL 31646 0 2
23257: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23258: LD_EXP 72
23262: PUSH
23263: LD_VAR 0 5
23267: ARRAY
23268: PUSH
23269: LD_EXP 73
23273: LESS
23274: IFFALSE 23463
// begin for i := 1 to vehicles do
23276: LD_ADDR_VAR 0 4
23280: PUSH
23281: DOUBLE
23282: LD_INT 1
23284: DEC
23285: ST_TO_ADDR
23286: LD_VAR 0 2
23290: PUSH
23291: FOR_TO
23292: IFFALSE 23461
// begin if hackTanksCaptured [ index ] = hackLimit then
23294: LD_EXP 72
23298: PUSH
23299: LD_VAR 0 5
23303: ARRAY
23304: PUSH
23305: LD_EXP 73
23309: EQUAL
23310: IFFALSE 23314
// break ;
23312: GO 23461
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23314: LD_ADDR_EXP 75
23318: PUSH
23319: LD_EXP 75
23323: PPUSH
23324: LD_VAR 0 5
23328: PPUSH
23329: LD_EXP 75
23333: PUSH
23334: LD_VAR 0 5
23338: ARRAY
23339: PUSH
23340: LD_INT 1
23342: PLUS
23343: PPUSH
23344: CALL_OW 1
23348: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23349: LD_ADDR_EXP 72
23353: PUSH
23354: LD_EXP 72
23358: PPUSH
23359: LD_VAR 0 5
23363: PUSH
23364: LD_EXP 72
23368: PUSH
23369: LD_VAR 0 5
23373: ARRAY
23374: PUSH
23375: LD_INT 1
23377: PLUS
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: LD_VAR 0 2
23387: PUSH
23388: LD_VAR 0 4
23392: ARRAY
23393: PUSH
23394: LD_VAR 0 2
23398: PUSH
23399: LD_VAR 0 4
23403: ARRAY
23404: PPUSH
23405: CALL_OW 255
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PPUSH
23414: CALL 31863 0 3
23418: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23419: LD_VAR 0 2
23423: PUSH
23424: LD_VAR 0 4
23428: ARRAY
23429: PPUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL_OW 255
23439: PPUSH
23440: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23444: LD_VAR 0 2
23448: PUSH
23449: LD_VAR 0 4
23453: ARRAY
23454: PPUSH
23455: CALL_OW 141
// end ;
23459: GO 23291
23461: POP
23462: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23463: LD_VAR 0 1
23467: PPUSH
23468: LD_EXP 72
23472: PUSH
23473: LD_VAR 0 5
23477: ARRAY
23478: PUSH
23479: LD_INT 0
23481: PLUS
23482: PPUSH
23483: CALL_OW 505
// end ;
23487: LD_VAR 0 3
23491: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23492: LD_INT 0
23494: PPUSH
23495: PPUSH
23496: PPUSH
23497: PPUSH
// if not hack in hackTanks then
23498: LD_VAR 0 1
23502: PUSH
23503: LD_EXP 71
23507: IN
23508: NOT
23509: IFFALSE 23513
// exit ;
23511: GO 23757
// index := GetElementIndex ( hackTanks , hack ) ;
23513: LD_ADDR_VAR 0 4
23517: PUSH
23518: LD_EXP 71
23522: PPUSH
23523: LD_VAR 0 1
23527: PPUSH
23528: CALL 31646 0 2
23532: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: DOUBLE
23539: LD_EXP 72
23543: PUSH
23544: LD_VAR 0 4
23548: ARRAY
23549: INC
23550: ST_TO_ADDR
23551: LD_INT 1
23553: PUSH
23554: FOR_DOWNTO
23555: IFFALSE 23731
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23557: LD_ADDR_VAR 0 5
23561: PUSH
23562: LD_EXP 72
23566: PUSH
23567: LD_VAR 0 4
23571: ARRAY
23572: PUSH
23573: LD_VAR 0 3
23577: ARRAY
23578: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23579: LD_VAR 0 5
23583: PUSH
23584: LD_INT 1
23586: ARRAY
23587: PPUSH
23588: CALL_OW 302
23592: NOT
23593: IFTRUE 23621
23595: PUSH
23596: LD_VAR 0 5
23600: PUSH
23601: LD_INT 1
23603: ARRAY
23604: PPUSH
23605: CALL_OW 255
23609: PUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL_OW 255
23619: NONEQUAL
23620: OR
23621: IFFALSE 23729
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23623: LD_VAR 0 5
23627: PUSH
23628: LD_INT 1
23630: ARRAY
23631: PPUSH
23632: CALL_OW 305
23636: IFFALSE 23664
23638: PUSH
23639: LD_VAR 0 5
23643: PUSH
23644: LD_INT 1
23646: ARRAY
23647: PPUSH
23648: CALL_OW 255
23652: PUSH
23653: LD_VAR 0 1
23657: PPUSH
23658: CALL_OW 255
23662: EQUAL
23663: AND
23664: IFFALSE 23688
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23666: LD_VAR 0 5
23670: PUSH
23671: LD_INT 1
23673: ARRAY
23674: PPUSH
23675: LD_VAR 0 5
23679: PUSH
23680: LD_INT 2
23682: ARRAY
23683: PPUSH
23684: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23688: LD_ADDR_EXP 72
23692: PUSH
23693: LD_EXP 72
23697: PPUSH
23698: LD_VAR 0 4
23702: PPUSH
23703: LD_EXP 72
23707: PUSH
23708: LD_VAR 0 4
23712: ARRAY
23713: PPUSH
23714: LD_VAR 0 3
23718: PPUSH
23719: CALL_OW 3
23723: PPUSH
23724: CALL_OW 1
23728: ST_TO_ADDR
// end ; end ;
23729: GO 23554
23731: POP
23732: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23733: LD_VAR 0 1
23737: PPUSH
23738: LD_EXP 72
23742: PUSH
23743: LD_VAR 0 4
23747: ARRAY
23748: PUSH
23749: LD_INT 0
23751: PLUS
23752: PPUSH
23753: CALL_OW 505
// end ;
23757: LD_VAR 0 2
23761: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23762: LD_INT 0
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
// if not hack in hackTanks then
23768: LD_VAR 0 1
23772: PUSH
23773: LD_EXP 71
23777: IN
23778: NOT
23779: IFFALSE 23783
// exit ;
23781: GO 23868
// index := GetElementIndex ( hackTanks , hack ) ;
23783: LD_ADDR_VAR 0 5
23787: PUSH
23788: LD_EXP 71
23792: PPUSH
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL 31646 0 2
23802: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23803: LD_ADDR_VAR 0 4
23807: PUSH
23808: DOUBLE
23809: LD_INT 1
23811: DEC
23812: ST_TO_ADDR
23813: LD_EXP 72
23817: PUSH
23818: LD_VAR 0 5
23822: ARRAY
23823: PUSH
23824: FOR_TO
23825: IFFALSE 23866
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23827: LD_EXP 72
23831: PUSH
23832: LD_VAR 0 5
23836: ARRAY
23837: PUSH
23838: LD_VAR 0 4
23842: ARRAY
23843: PUSH
23844: LD_INT 1
23846: ARRAY
23847: PUSH
23848: LD_VAR 0 2
23852: EQUAL
23853: IFFALSE 23864
// KillUnit ( vehicle ) ;
23855: LD_VAR 0 2
23859: PPUSH
23860: CALL_OW 66
23864: GO 23824
23866: POP
23867: POP
// end ;
23868: LD_VAR 0 3
23872: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23873: LD_EXP 76
23877: NOT
23878: IFFALSE 23913
23880: GO 23882
23882: DISABLE
// begin initMiner := true ;
23883: LD_ADDR_EXP 76
23887: PUSH
23888: LD_INT 1
23890: ST_TO_ADDR
// minersList := [ ] ;
23891: LD_ADDR_EXP 77
23895: PUSH
23896: EMPTY
23897: ST_TO_ADDR
// minerMinesList := [ ] ;
23898: LD_ADDR_EXP 78
23902: PUSH
23903: EMPTY
23904: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23905: LD_ADDR_EXP 79
23909: PUSH
23910: LD_INT 5
23912: ST_TO_ADDR
// end ;
23913: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23914: LD_EXP 76
23918: IFFALSE 23936
23920: PUSH
23921: LD_INT 34
23923: PUSH
23924: LD_INT 81
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PPUSH
23931: CALL_OW 69
23935: AND
23936: IFFALSE 24399
23938: GO 23940
23940: DISABLE
23941: LD_INT 0
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
// begin enable ;
23947: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23948: LD_ADDR_VAR 0 1
23952: PUSH
23953: LD_INT 34
23955: PUSH
23956: LD_INT 81
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PPUSH
23963: CALL_OW 69
23967: PUSH
23968: FOR_IN
23969: IFFALSE 24041
// begin if not i in minersList then
23971: LD_VAR 0 1
23975: PUSH
23976: LD_EXP 77
23980: IN
23981: NOT
23982: IFFALSE 24039
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23984: LD_ADDR_EXP 77
23988: PUSH
23989: LD_EXP 77
23993: PPUSH
23994: LD_EXP 77
23998: PUSH
23999: LD_INT 1
24001: PLUS
24002: PPUSH
24003: LD_VAR 0 1
24007: PPUSH
24008: CALL_OW 1
24012: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24013: LD_ADDR_EXP 78
24017: PUSH
24018: LD_EXP 78
24022: PPUSH
24023: LD_EXP 78
24027: PUSH
24028: LD_INT 1
24030: PLUS
24031: PPUSH
24032: EMPTY
24033: PPUSH
24034: CALL_OW 1
24038: ST_TO_ADDR
// end end ;
24039: GO 23968
24041: POP
24042: POP
// for i := minerMinesList downto 1 do
24043: LD_ADDR_VAR 0 1
24047: PUSH
24048: DOUBLE
24049: LD_EXP 78
24053: INC
24054: ST_TO_ADDR
24055: LD_INT 1
24057: PUSH
24058: FOR_DOWNTO
24059: IFFALSE 24397
// begin if IsLive ( minersList [ i ] ) then
24061: LD_EXP 77
24065: PUSH
24066: LD_VAR 0 1
24070: ARRAY
24071: PPUSH
24072: CALL_OW 300
24076: IFFALSE 24104
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24078: LD_EXP 77
24082: PUSH
24083: LD_VAR 0 1
24087: ARRAY
24088: PPUSH
24089: LD_EXP 78
24093: PUSH
24094: LD_VAR 0 1
24098: ARRAY
24099: PPUSH
24100: CALL_OW 505
// if not minerMinesList [ i ] then
24104: LD_EXP 78
24108: PUSH
24109: LD_VAR 0 1
24113: ARRAY
24114: NOT
24115: IFFALSE 24119
// continue ;
24117: GO 24058
// for j := minerMinesList [ i ] downto 1 do
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: DOUBLE
24125: LD_EXP 78
24129: PUSH
24130: LD_VAR 0 1
24134: ARRAY
24135: INC
24136: ST_TO_ADDR
24137: LD_INT 1
24139: PUSH
24140: FOR_DOWNTO
24141: IFFALSE 24393
// begin side := GetSide ( minersList [ i ] ) ;
24143: LD_ADDR_VAR 0 3
24147: PUSH
24148: LD_EXP 77
24152: PUSH
24153: LD_VAR 0 1
24157: ARRAY
24158: PPUSH
24159: CALL_OW 255
24163: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24164: LD_ADDR_VAR 0 4
24168: PUSH
24169: LD_EXP 78
24173: PUSH
24174: LD_VAR 0 1
24178: ARRAY
24179: PUSH
24180: LD_VAR 0 2
24184: ARRAY
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: LD_EXP 78
24194: PUSH
24195: LD_VAR 0 1
24199: ARRAY
24200: PUSH
24201: LD_VAR 0 2
24205: ARRAY
24206: PUSH
24207: LD_INT 2
24209: ARRAY
24210: PPUSH
24211: CALL_OW 428
24215: ST_TO_ADDR
// if not tmp then
24216: LD_VAR 0 4
24220: NOT
24221: IFFALSE 24225
// continue ;
24223: GO 24140
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24225: LD_VAR 0 4
24229: PUSH
24230: LD_INT 81
24232: PUSH
24233: LD_VAR 0 3
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PPUSH
24242: CALL_OW 69
24246: IN
24247: IFFALSE 24297
24249: PUSH
24250: LD_EXP 78
24254: PUSH
24255: LD_VAR 0 1
24259: ARRAY
24260: PUSH
24261: LD_VAR 0 2
24265: ARRAY
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: PPUSH
24271: LD_EXP 78
24275: PUSH
24276: LD_VAR 0 1
24280: ARRAY
24281: PUSH
24282: LD_VAR 0 2
24286: ARRAY
24287: PUSH
24288: LD_INT 2
24290: ARRAY
24291: PPUSH
24292: CALL_OW 458
24296: AND
24297: IFFALSE 24391
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24299: LD_EXP 78
24303: PUSH
24304: LD_VAR 0 1
24308: ARRAY
24309: PUSH
24310: LD_VAR 0 2
24314: ARRAY
24315: PUSH
24316: LD_INT 1
24318: ARRAY
24319: PPUSH
24320: LD_EXP 78
24324: PUSH
24325: LD_VAR 0 1
24329: ARRAY
24330: PUSH
24331: LD_VAR 0 2
24335: ARRAY
24336: PUSH
24337: LD_INT 2
24339: ARRAY
24340: PPUSH
24341: LD_VAR 0 3
24345: PPUSH
24346: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24350: LD_ADDR_EXP 78
24354: PUSH
24355: LD_EXP 78
24359: PPUSH
24360: LD_VAR 0 1
24364: PPUSH
24365: LD_EXP 78
24369: PUSH
24370: LD_VAR 0 1
24374: ARRAY
24375: PPUSH
24376: LD_VAR 0 2
24380: PPUSH
24381: CALL_OW 3
24385: PPUSH
24386: CALL_OW 1
24390: ST_TO_ADDR
// end ; end ;
24391: GO 24140
24393: POP
24394: POP
// end ;
24395: GO 24058
24397: POP
24398: POP
// end ;
24399: PPOPN 4
24401: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24402: LD_INT 0
24404: PPUSH
24405: PPUSH
// result := false ;
24406: LD_ADDR_VAR 0 4
24410: PUSH
24411: LD_INT 0
24413: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24414: LD_VAR 0 1
24418: PPUSH
24419: CALL_OW 264
24423: PUSH
24424: LD_INT 81
24426: EQUAL
24427: NOT
24428: IFFALSE 24432
// exit ;
24430: GO 24676
// index := GetElementIndex ( minersList , unit ) ;
24432: LD_ADDR_VAR 0 5
24436: PUSH
24437: LD_EXP 77
24441: PPUSH
24442: LD_VAR 0 1
24446: PPUSH
24447: CALL 31646 0 2
24451: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24452: LD_EXP 78
24456: PUSH
24457: LD_VAR 0 5
24461: ARRAY
24462: PUSH
24463: LD_EXP 79
24467: GREATEREQUAL
24468: IFFALSE 24472
// exit ;
24470: GO 24676
// ComMoveXY ( unit , x , y ) ;
24472: LD_VAR 0 1
24476: PPUSH
24477: LD_VAR 0 2
24481: PPUSH
24482: LD_VAR 0 3
24486: PPUSH
24487: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24491: LD_INT 35
24493: PPUSH
24494: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_VAR 0 3
24512: PPUSH
24513: CALL 63692 0 3
24517: NOT
24518: IFFALSE 24531
24520: PUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL_OW 314
24530: AND
24531: IFFALSE 24535
// exit ;
24533: GO 24676
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24535: LD_VAR 0 2
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: CALL_OW 428
24549: PUSH
24550: LD_VAR 0 1
24554: EQUAL
24555: IFFALSE 24569
24557: PUSH
24558: LD_VAR 0 1
24562: PPUSH
24563: CALL_OW 314
24567: NOT
24568: AND
24569: IFFALSE 24491
// PlaySoundXY ( x , y , PlantMine ) ;
24571: LD_VAR 0 2
24575: PPUSH
24576: LD_VAR 0 3
24580: PPUSH
24581: LD_STRING PlantMine
24583: PPUSH
24584: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24588: LD_VAR 0 2
24592: PPUSH
24593: LD_VAR 0 3
24597: PPUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 255
24607: PPUSH
24608: LD_INT 0
24610: PPUSH
24611: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24615: LD_ADDR_EXP 78
24619: PUSH
24620: LD_EXP 78
24624: PPUSH
24625: LD_VAR 0 5
24629: PUSH
24630: LD_EXP 78
24634: PUSH
24635: LD_VAR 0 5
24639: ARRAY
24640: PUSH
24641: LD_INT 1
24643: PLUS
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PPUSH
24649: LD_VAR 0 2
24653: PUSH
24654: LD_VAR 0 3
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PPUSH
24663: CALL 31863 0 3
24667: ST_TO_ADDR
// result := true ;
24668: LD_ADDR_VAR 0 4
24672: PUSH
24673: LD_INT 1
24675: ST_TO_ADDR
// end ;
24676: LD_VAR 0 4
24680: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24681: LD_INT 0
24683: PPUSH
24684: PPUSH
24685: PPUSH
// if not unit in minersList then
24686: LD_VAR 0 1
24690: PUSH
24691: LD_EXP 77
24695: IN
24696: NOT
24697: IFFALSE 24701
// exit ;
24699: GO 25095
// index := GetElementIndex ( minersList , unit ) ;
24701: LD_ADDR_VAR 0 6
24705: PUSH
24706: LD_EXP 77
24710: PPUSH
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL 31646 0 2
24720: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24721: LD_ADDR_VAR 0 5
24725: PUSH
24726: DOUBLE
24727: LD_EXP 78
24731: PUSH
24732: LD_VAR 0 6
24736: ARRAY
24737: INC
24738: ST_TO_ADDR
24739: LD_INT 1
24741: PUSH
24742: FOR_DOWNTO
24743: IFFALSE 24906
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24745: LD_EXP 78
24749: PUSH
24750: LD_VAR 0 6
24754: ARRAY
24755: PUSH
24756: LD_VAR 0 5
24760: ARRAY
24761: PUSH
24762: LD_INT 1
24764: ARRAY
24765: PUSH
24766: LD_VAR 0 2
24770: EQUAL
24771: IFFALSE 24801
24773: PUSH
24774: LD_EXP 78
24778: PUSH
24779: LD_VAR 0 6
24783: ARRAY
24784: PUSH
24785: LD_VAR 0 5
24789: ARRAY
24790: PUSH
24791: LD_INT 2
24793: ARRAY
24794: PUSH
24795: LD_VAR 0 3
24799: EQUAL
24800: AND
24801: IFFALSE 24904
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24803: LD_EXP 78
24807: PUSH
24808: LD_VAR 0 6
24812: ARRAY
24813: PUSH
24814: LD_VAR 0 5
24818: ARRAY
24819: PUSH
24820: LD_INT 1
24822: ARRAY
24823: PPUSH
24824: LD_EXP 78
24828: PUSH
24829: LD_VAR 0 6
24833: ARRAY
24834: PUSH
24835: LD_VAR 0 5
24839: ARRAY
24840: PUSH
24841: LD_INT 2
24843: ARRAY
24844: PPUSH
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 255
24854: PPUSH
24855: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24859: LD_ADDR_EXP 78
24863: PUSH
24864: LD_EXP 78
24868: PPUSH
24869: LD_VAR 0 6
24873: PPUSH
24874: LD_EXP 78
24878: PUSH
24879: LD_VAR 0 6
24883: ARRAY
24884: PPUSH
24885: LD_VAR 0 5
24889: PPUSH
24890: CALL_OW 3
24894: PPUSH
24895: CALL_OW 1
24899: ST_TO_ADDR
// exit ;
24900: POP
24901: POP
24902: GO 25095
// end ; end ;
24904: GO 24742
24906: POP
24907: POP
// for i := minerMinesList [ index ] downto 1 do
24908: LD_ADDR_VAR 0 5
24912: PUSH
24913: DOUBLE
24914: LD_EXP 78
24918: PUSH
24919: LD_VAR 0 6
24923: ARRAY
24924: INC
24925: ST_TO_ADDR
24926: LD_INT 1
24928: PUSH
24929: FOR_DOWNTO
24930: IFFALSE 25093
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24932: LD_EXP 78
24936: PUSH
24937: LD_VAR 0 6
24941: ARRAY
24942: PUSH
24943: LD_VAR 0 5
24947: ARRAY
24948: PUSH
24949: LD_INT 1
24951: ARRAY
24952: PPUSH
24953: LD_EXP 78
24957: PUSH
24958: LD_VAR 0 6
24962: ARRAY
24963: PUSH
24964: LD_VAR 0 5
24968: ARRAY
24969: PUSH
24970: LD_INT 2
24972: ARRAY
24973: PPUSH
24974: LD_VAR 0 2
24978: PPUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: CALL_OW 298
24988: PUSH
24989: LD_INT 6
24991: LESS
24992: IFFALSE 25091
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24994: LD_EXP 78
24998: PUSH
24999: LD_VAR 0 6
25003: ARRAY
25004: PUSH
25005: LD_VAR 0 5
25009: ARRAY
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: PPUSH
25015: LD_EXP 78
25019: PUSH
25020: LD_VAR 0 6
25024: ARRAY
25025: PUSH
25026: LD_VAR 0 5
25030: ARRAY
25031: PUSH
25032: LD_INT 2
25034: ARRAY
25035: PPUSH
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL_OW 255
25045: PPUSH
25046: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25050: LD_ADDR_EXP 78
25054: PUSH
25055: LD_EXP 78
25059: PPUSH
25060: LD_VAR 0 6
25064: PPUSH
25065: LD_EXP 78
25069: PUSH
25070: LD_VAR 0 6
25074: ARRAY
25075: PPUSH
25076: LD_VAR 0 5
25080: PPUSH
25081: CALL_OW 3
25085: PPUSH
25086: CALL_OW 1
25090: ST_TO_ADDR
// end ; end ;
25091: GO 24929
25093: POP
25094: POP
// end ;
25095: LD_VAR 0 4
25099: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25100: LD_INT 0
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
25106: PPUSH
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25111: LD_VAR 0 1
25115: PPUSH
25116: CALL_OW 264
25120: PUSH
25121: LD_INT 81
25123: EQUAL
25124: NOT
25125: IFTRUE 25140
25127: PUSH
25128: LD_VAR 0 1
25132: PUSH
25133: LD_EXP 77
25137: IN
25138: NOT
25139: OR
25140: IFFALSE 25144
// exit ;
25142: GO 25470
// index := GetElementIndex ( minersList , unit ) ;
25144: LD_ADDR_VAR 0 6
25148: PUSH
25149: LD_EXP 77
25153: PPUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: CALL 31646 0 2
25163: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25164: LD_ADDR_VAR 0 8
25168: PUSH
25169: LD_EXP 79
25173: PUSH
25174: LD_EXP 78
25178: PUSH
25179: LD_VAR 0 6
25183: ARRAY
25184: MINUS
25185: ST_TO_ADDR
// if not minesFreeAmount then
25186: LD_VAR 0 8
25190: NOT
25191: IFFALSE 25195
// exit ;
25193: GO 25470
// tmp := [ ] ;
25195: LD_ADDR_VAR 0 7
25199: PUSH
25200: EMPTY
25201: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25202: LD_ADDR_VAR 0 5
25206: PUSH
25207: DOUBLE
25208: LD_INT 1
25210: DEC
25211: ST_TO_ADDR
25212: LD_VAR 0 8
25216: PUSH
25217: FOR_TO
25218: IFFALSE 25417
// begin _d := rand ( 0 , 5 ) ;
25220: LD_ADDR_VAR 0 11
25224: PUSH
25225: LD_INT 0
25227: PPUSH
25228: LD_INT 5
25230: PPUSH
25231: CALL_OW 12
25235: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25236: LD_ADDR_VAR 0 12
25240: PUSH
25241: LD_INT 2
25243: PPUSH
25244: LD_INT 6
25246: PPUSH
25247: CALL_OW 12
25251: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25252: LD_ADDR_VAR 0 9
25256: PUSH
25257: LD_VAR 0 2
25261: PPUSH
25262: LD_VAR 0 11
25266: PPUSH
25267: LD_VAR 0 12
25271: PPUSH
25272: CALL_OW 272
25276: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25277: LD_ADDR_VAR 0 10
25281: PUSH
25282: LD_VAR 0 3
25286: PPUSH
25287: LD_VAR 0 11
25291: PPUSH
25292: LD_VAR 0 12
25296: PPUSH
25297: CALL_OW 273
25301: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25302: LD_VAR 0 9
25306: PPUSH
25307: LD_VAR 0 10
25311: PPUSH
25312: CALL_OW 488
25316: IFFALSE 25340
25318: PUSH
25319: LD_VAR 0 9
25323: PUSH
25324: LD_VAR 0 10
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_VAR 0 7
25337: IN
25338: NOT
25339: AND
25340: IFFALSE 25359
25342: PUSH
25343: LD_VAR 0 9
25347: PPUSH
25348: LD_VAR 0 10
25352: PPUSH
25353: CALL_OW 458
25357: NOT
25358: AND
25359: IFFALSE 25401
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25361: LD_ADDR_VAR 0 7
25365: PUSH
25366: LD_VAR 0 7
25370: PPUSH
25371: LD_VAR 0 7
25375: PUSH
25376: LD_INT 1
25378: PLUS
25379: PPUSH
25380: LD_VAR 0 9
25384: PUSH
25385: LD_VAR 0 10
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PPUSH
25394: CALL_OW 1
25398: ST_TO_ADDR
25399: GO 25415
// i := i - 1 ;
25401: LD_ADDR_VAR 0 5
25405: PUSH
25406: LD_VAR 0 5
25410: PUSH
25411: LD_INT 1
25413: MINUS
25414: ST_TO_ADDR
// end ;
25415: GO 25217
25417: POP
25418: POP
// for i in tmp do
25419: LD_ADDR_VAR 0 5
25423: PUSH
25424: LD_VAR 0 7
25428: PUSH
25429: FOR_IN
25430: IFFALSE 25468
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25432: LD_VAR 0 1
25436: PPUSH
25437: LD_VAR 0 5
25441: PUSH
25442: LD_INT 1
25444: ARRAY
25445: PPUSH
25446: LD_VAR 0 5
25450: PUSH
25451: LD_INT 2
25453: ARRAY
25454: PPUSH
25455: CALL 24402 0 3
25459: NOT
25460: IFFALSE 25466
// exit ;
25462: POP
25463: POP
25464: GO 25470
25466: GO 25429
25468: POP
25469: POP
// end ;
25470: LD_VAR 0 4
25474: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25475: LD_INT 0
25477: PPUSH
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
// if GetClass ( unit ) <> class_sniper then
25486: LD_VAR 0 1
25490: PPUSH
25491: CALL_OW 257
25495: PUSH
25496: LD_INT 5
25498: NONEQUAL
25499: IFFALSE 25503
// exit ;
25501: GO 25973
// dist := 8 ;
25503: LD_ADDR_VAR 0 5
25507: PUSH
25508: LD_INT 8
25510: ST_TO_ADDR
// viewRange := 12 ;
25511: LD_ADDR_VAR 0 8
25515: PUSH
25516: LD_INT 12
25518: ST_TO_ADDR
// side := GetSide ( unit ) ;
25519: LD_ADDR_VAR 0 6
25523: PUSH
25524: LD_VAR 0 1
25528: PPUSH
25529: CALL_OW 255
25533: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25534: LD_INT 61
25536: PPUSH
25537: LD_VAR 0 6
25541: PPUSH
25542: CALL_OW 321
25546: PUSH
25547: LD_INT 2
25549: EQUAL
25550: IFFALSE 25560
// viewRange := 16 ;
25552: LD_ADDR_VAR 0 8
25556: PUSH
25557: LD_INT 16
25559: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25560: LD_VAR 0 1
25564: PPUSH
25565: LD_VAR 0 2
25569: PPUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: CALL_OW 297
25579: PUSH
25580: LD_VAR 0 5
25584: GREATER
25585: IFFALSE 25664
// begin ComMoveXY ( unit , x , y ) ;
25587: LD_VAR 0 1
25591: PPUSH
25592: LD_VAR 0 2
25596: PPUSH
25597: LD_VAR 0 3
25601: PPUSH
25602: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25606: LD_INT 35
25608: PPUSH
25609: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25613: LD_VAR 0 1
25617: PPUSH
25618: LD_VAR 0 2
25622: PPUSH
25623: LD_VAR 0 3
25627: PPUSH
25628: CALL 63692 0 3
25632: NOT
25633: IFFALSE 25637
// exit ;
25635: GO 25973
// until GetDistUnitXY ( unit , x , y ) < dist ;
25637: LD_VAR 0 1
25641: PPUSH
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_VAR 0 3
25651: PPUSH
25652: CALL_OW 297
25656: PUSH
25657: LD_VAR 0 5
25661: LESS
25662: IFFALSE 25606
// end ; ComTurnXY ( unit , x , y ) ;
25664: LD_VAR 0 1
25668: PPUSH
25669: LD_VAR 0 2
25673: PPUSH
25674: LD_VAR 0 3
25678: PPUSH
25679: CALL_OW 118
// repeat if Multiplayer then
25683: LD_OWVAR 4
25687: IFFALSE 25698
// wait ( 35 ) else
25689: LD_INT 35
25691: PPUSH
25692: CALL_OW 67
25696: GO 25705
// wait ( 5 ) ;
25698: LD_INT 5
25700: PPUSH
25701: CALL_OW 67
// _d := GetDir ( unit ) ;
25705: LD_ADDR_VAR 0 11
25709: PUSH
25710: LD_VAR 0 1
25714: PPUSH
25715: CALL_OW 254
25719: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25720: LD_ADDR_VAR 0 7
25724: PUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 250
25734: PPUSH
25735: LD_VAR 0 1
25739: PPUSH
25740: CALL_OW 251
25744: PPUSH
25745: LD_VAR 0 2
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: CALL 66328 0 4
25759: ST_TO_ADDR
// until dir = _d ;
25760: LD_VAR 0 7
25764: PUSH
25765: LD_VAR 0 11
25769: EQUAL
25770: IFFALSE 25683
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
25772: LD_ADDR_VAR 0 9
25776: PUSH
25777: LD_VAR 0 1
25781: PPUSH
25782: CALL_OW 250
25786: PPUSH
25787: LD_VAR 0 7
25791: PPUSH
25792: LD_VAR 0 5
25796: PPUSH
25797: CALL_OW 272
25801: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
25802: LD_ADDR_VAR 0 10
25806: PUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: CALL_OW 251
25816: PPUSH
25817: LD_VAR 0 7
25821: PPUSH
25822: LD_VAR 0 5
25826: PPUSH
25827: CALL_OW 273
25831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25832: LD_VAR 0 9
25836: PPUSH
25837: LD_VAR 0 10
25841: PPUSH
25842: CALL_OW 488
25846: NOT
25847: IFFALSE 25851
// exit ;
25849: GO 25973
// ComAnimCustom ( unit , 1 ) ;
25851: LD_VAR 0 1
25855: PPUSH
25856: LD_INT 1
25858: PPUSH
25859: CALL_OW 592
// p := 0 ;
25863: LD_ADDR_VAR 0 12
25867: PUSH
25868: LD_INT 0
25870: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25871: LD_VAR 0 9
25875: PPUSH
25876: LD_VAR 0 10
25880: PPUSH
25881: LD_VAR 0 6
25885: PPUSH
25886: LD_VAR 0 8
25890: PPUSH
25891: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
25895: LD_INT 35
25897: PPUSH
25898: CALL_OW 67
// p := Inc ( p ) ;
25902: LD_ADDR_VAR 0 12
25906: PUSH
25907: LD_VAR 0 12
25911: PPUSH
25912: CALL 66284 0 1
25916: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
25917: LD_VAR 0 12
25921: PUSH
25922: LD_INT 3
25924: EQUAL
25925: IFTRUE 25939
25927: PUSH
25928: LD_VAR 0 1
25932: PPUSH
25933: CALL_OW 302
25937: NOT
25938: OR
25939: IFTRUE 25952
25941: PUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 301
25951: OR
25952: IFFALSE 25895
// RemoveSeeing ( _x , _y , side ) ;
25954: LD_VAR 0 9
25958: PPUSH
25959: LD_VAR 0 10
25963: PPUSH
25964: LD_VAR 0 6
25968: PPUSH
25969: CALL_OW 331
// end ;
25973: LD_VAR 0 4
25977: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
25978: LD_INT 0
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
// if not unit then
25991: LD_VAR 0 1
25995: NOT
25996: IFFALSE 26000
// exit ;
25998: GO 26271
// side := GetSide ( unit ) ;
26000: LD_ADDR_VAR 0 3
26004: PUSH
26005: LD_VAR 0 1
26009: PPUSH
26010: CALL_OW 255
26014: ST_TO_ADDR
// x := GetX ( unit ) ;
26015: LD_ADDR_VAR 0 5
26019: PUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: CALL_OW 250
26029: ST_TO_ADDR
// y := GetY ( unit ) ;
26030: LD_ADDR_VAR 0 6
26034: PUSH
26035: LD_VAR 0 1
26039: PPUSH
26040: CALL_OW 251
26044: ST_TO_ADDR
// r := 8 ;
26045: LD_ADDR_VAR 0 4
26049: PUSH
26050: LD_INT 8
26052: ST_TO_ADDR
// if x - r < 0 then
26053: LD_VAR 0 5
26057: PUSH
26058: LD_VAR 0 4
26062: MINUS
26063: PUSH
26064: LD_INT 0
26066: LESS
26067: IFFALSE 26079
// min_x := 0 else
26069: LD_ADDR_VAR 0 7
26073: PUSH
26074: LD_INT 0
26076: ST_TO_ADDR
26077: GO 26095
// min_x := x - r ;
26079: LD_ADDR_VAR 0 7
26083: PUSH
26084: LD_VAR 0 5
26088: PUSH
26089: LD_VAR 0 4
26093: MINUS
26094: ST_TO_ADDR
// if y - r < 0 then
26095: LD_VAR 0 6
26099: PUSH
26100: LD_VAR 0 4
26104: MINUS
26105: PUSH
26106: LD_INT 0
26108: LESS
26109: IFFALSE 26121
// min_y := 0 else
26111: LD_ADDR_VAR 0 8
26115: PUSH
26116: LD_INT 0
26118: ST_TO_ADDR
26119: GO 26137
// min_y := y - r ;
26121: LD_ADDR_VAR 0 8
26125: PUSH
26126: LD_VAR 0 6
26130: PUSH
26131: LD_VAR 0 4
26135: MINUS
26136: ST_TO_ADDR
// max_x := x + r ;
26137: LD_ADDR_VAR 0 9
26141: PUSH
26142: LD_VAR 0 5
26146: PUSH
26147: LD_VAR 0 4
26151: PLUS
26152: ST_TO_ADDR
// max_y := y + r ;
26153: LD_ADDR_VAR 0 10
26157: PUSH
26158: LD_VAR 0 6
26162: PUSH
26163: LD_VAR 0 4
26167: PLUS
26168: ST_TO_ADDR
// for _x = min_x to max_x do
26169: LD_ADDR_VAR 0 11
26173: PUSH
26174: DOUBLE
26175: LD_VAR 0 7
26179: DEC
26180: ST_TO_ADDR
26181: LD_VAR 0 9
26185: PUSH
26186: FOR_TO
26187: IFFALSE 26269
// for _y = min_y to max_y do
26189: LD_ADDR_VAR 0 12
26193: PUSH
26194: DOUBLE
26195: LD_VAR 0 8
26199: DEC
26200: ST_TO_ADDR
26201: LD_VAR 0 10
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26265
// begin if not ValidHex ( _x , _y ) then
26209: LD_VAR 0 11
26213: PPUSH
26214: LD_VAR 0 12
26218: PPUSH
26219: CALL_OW 488
26223: NOT
26224: IFFALSE 26228
// continue ;
26226: GO 26206
// if MineAtPos ( _x , _y ) then
26228: LD_VAR 0 11
26232: PPUSH
26233: LD_VAR 0 12
26237: PPUSH
26238: CALL_OW 458
26242: IFFALSE 26263
// ViewMineAtPos ( _x , _y , side ) ;
26244: LD_VAR 0 11
26248: PPUSH
26249: LD_VAR 0 12
26253: PPUSH
26254: LD_VAR 0 3
26258: PPUSH
26259: CALL_OW 457
// end ;
26263: GO 26206
26265: POP
26266: POP
26267: GO 26186
26269: POP
26270: POP
// end ;
26271: LD_VAR 0 2
26275: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
26276: LD_INT 0
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
26283: PPUSH
// if not units then
26284: LD_VAR 0 1
26288: NOT
26289: IFFALSE 26293
// exit ;
26291: GO 26723
// scaners := [ ] ;
26293: LD_ADDR_VAR 0 6
26297: PUSH
26298: EMPTY
26299: ST_TO_ADDR
// for i in units do
26300: LD_ADDR_VAR 0 3
26304: PUSH
26305: LD_VAR 0 1
26309: PUSH
26310: FOR_IN
26311: IFFALSE 26468
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26313: LD_VAR 0 3
26317: PPUSH
26318: CALL_OW 264
26322: PUSH
26323: LD_INT 11
26325: NONEQUAL
26326: IFTRUE 26340
26328: PUSH
26329: LD_VAR 0 3
26333: PPUSH
26334: CALL_OW 302
26338: NOT
26339: OR
26340: IFTRUE 26357
26342: PUSH
26343: LD_VAR 0 3
26347: PPUSH
26348: CALL_OW 110
26352: PUSH
26353: LD_INT 502
26355: EQUAL
26356: OR
26357: IFFALSE 26361
// continue ;
26359: GO 26310
// ComStop ( i ) ;
26361: LD_VAR 0 3
26365: PPUSH
26366: CALL_OW 141
// x := GetX ( i ) ;
26370: LD_ADDR_VAR 0 4
26374: PUSH
26375: LD_VAR 0 3
26379: PPUSH
26380: CALL_OW 250
26384: ST_TO_ADDR
// y := GetY ( i ) ;
26385: LD_ADDR_VAR 0 5
26389: PUSH
26390: LD_VAR 0 3
26394: PPUSH
26395: CALL_OW 251
26399: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26400: LD_VAR 0 3
26404: PPUSH
26405: CALL_OW 255
26409: PUSH
26410: LD_OWVAR 2
26414: EQUAL
26415: IFFALSE 26434
// PlaySoundXY ( x , y , mineDetector ) ;
26417: LD_VAR 0 4
26421: PPUSH
26422: LD_VAR 0 5
26426: PPUSH
26427: LD_STRING mineDetector
26429: PPUSH
26430: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26434: LD_ADDR_VAR 0 6
26438: PUSH
26439: LD_VAR 0 6
26443: PPUSH
26444: LD_VAR 0 3
26448: PPUSH
26449: CALL 64911 0 2
26453: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26454: LD_VAR 0 3
26458: PPUSH
26459: LD_INT 502
26461: PPUSH
26462: CALL_OW 109
// end ;
26466: GO 26310
26468: POP
26469: POP
// if not scaners then
26470: LD_VAR 0 6
26474: NOT
26475: IFFALSE 26479
// exit ;
26477: GO 26723
// wait ( 3 ) ;
26479: LD_INT 3
26481: PPUSH
26482: CALL_OW 67
// timer := 6 ;
26486: LD_ADDR_VAR 0 7
26490: PUSH
26491: LD_INT 6
26493: ST_TO_ADDR
// repeat for i in scaners do
26494: LD_ADDR_VAR 0 3
26498: PUSH
26499: LD_VAR 0 6
26503: PUSH
26504: FOR_IN
26505: IFFALSE 26621
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
26507: LD_VAR 0 3
26511: PPUSH
26512: CALL_OW 302
26516: NOT
26517: IFTRUE 26530
26519: PUSH
26520: LD_VAR 0 3
26524: PPUSH
26525: CALL_OW 314
26529: OR
26530: IFTRUE 26561
26532: PUSH
26533: LD_VAR 0 3
26537: PPUSH
26538: CALL_OW 263
26542: PUSH
26543: LD_INT 1
26545: EQUAL
26546: IFFALSE 26560
26548: PUSH
26549: LD_VAR 0 3
26553: PPUSH
26554: CALL_OW 311
26558: NOT
26559: AND
26560: OR
26561: IFFALSE 26605
// begin SetUnitDisplayNumber ( i , 0 ) ;
26563: LD_VAR 0 3
26567: PPUSH
26568: LD_INT 0
26570: PPUSH
26571: CALL_OW 505
// SetTag ( i , 0 ) ;
26575: LD_VAR 0 3
26579: PPUSH
26580: LD_INT 0
26582: PPUSH
26583: CALL_OW 109
// scaners := scaners diff i ;
26587: LD_ADDR_VAR 0 6
26591: PUSH
26592: LD_VAR 0 6
26596: PUSH
26597: LD_VAR 0 3
26601: DIFF
26602: ST_TO_ADDR
// continue ;
26603: GO 26504
// end ; SetUnitDisplayNumber ( i , timer ) ;
26605: LD_VAR 0 3
26609: PPUSH
26610: LD_VAR 0 7
26614: PPUSH
26615: CALL_OW 505
// end ;
26619: GO 26504
26621: POP
26622: POP
// if not scaners then
26623: LD_VAR 0 6
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26723
// timer := Dec ( timer ) ;
26632: LD_ADDR_VAR 0 7
26636: PUSH
26637: LD_VAR 0 7
26641: PPUSH
26642: CALL 66306 0 1
26646: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26647: LD_INT 35
26649: PPUSH
26650: CALL_OW 67
// until timer = 0 ;
26654: LD_VAR 0 7
26658: PUSH
26659: LD_INT 0
26661: EQUAL
26662: IFFALSE 26494
// if not scaners then
26664: LD_VAR 0 6
26668: NOT
26669: IFFALSE 26673
// exit ;
26671: GO 26723
// for i in scaners do
26673: LD_ADDR_VAR 0 3
26677: PUSH
26678: LD_VAR 0 6
26682: PUSH
26683: FOR_IN
26684: IFFALSE 26721
// begin SetUnitDisplayNumber ( i , 0 ) ;
26686: LD_VAR 0 3
26690: PPUSH
26691: LD_INT 0
26693: PPUSH
26694: CALL_OW 505
// SetTag ( i , 0 ) ;
26698: LD_VAR 0 3
26702: PPUSH
26703: LD_INT 0
26705: PPUSH
26706: CALL_OW 109
// RevealDetectorMine ( i ) ;
26710: LD_VAR 0 3
26714: PPUSH
26715: CALL 25978 0 1
// end ;
26719: GO 26683
26721: POP
26722: POP
// end ;
26723: LD_VAR 0 2
26727: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
26728: LD_INT 0
26730: PPUSH
// if p1 = mine_detector_mode then
26731: LD_VAR 0 2
26735: PUSH
26736: LD_INT 103
26738: EQUAL
26739: IFFALSE 26750
// DetectMine ( units ) ;
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL 26276 0 1
// end ; end_of_file
26750: LD_VAR 0 7
26754: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
// if exist_mode then
26759: LD_VAR 0 2
26763: IFFALSE 26809
// begin unit := CreateCharacter ( prefix & ident ) ;
26765: LD_ADDR_VAR 0 5
26769: PUSH
26770: LD_VAR 0 3
26774: PUSH
26775: LD_VAR 0 1
26779: STR
26780: PPUSH
26781: CALL_OW 34
26785: ST_TO_ADDR
// if unit then
26786: LD_VAR 0 5
26790: IFFALSE 26807
// DeleteCharacters ( prefix & ident ) ;
26792: LD_VAR 0 3
26796: PUSH
26797: LD_VAR 0 1
26801: STR
26802: PPUSH
26803: CALL_OW 40
// end else
26807: GO 26824
// unit := NewCharacter ( ident ) ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 25
26823: ST_TO_ADDR
// result := unit ;
26824: LD_ADDR_VAR 0 4
26828: PUSH
26829: LD_VAR 0 5
26833: ST_TO_ADDR
// end ;
26834: LD_VAR 0 4
26838: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
26839: LD_INT 0
26841: PPUSH
26842: PPUSH
// if exist_mode then
26843: LD_VAR 0 2
26847: IFFALSE 26872
// unit := CreateCharacter ( prefix & ident ) else
26849: LD_ADDR_VAR 0 5
26853: PUSH
26854: LD_VAR 0 3
26858: PUSH
26859: LD_VAR 0 1
26863: STR
26864: PPUSH
26865: CALL_OW 34
26869: ST_TO_ADDR
26870: GO 26887
// unit := NewCharacter ( ident ) ;
26872: LD_ADDR_VAR 0 5
26876: PUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 25
26886: ST_TO_ADDR
// result := unit ;
26887: LD_ADDR_VAR 0 4
26891: PUSH
26892: LD_VAR 0 5
26896: ST_TO_ADDR
// end ;
26897: LD_VAR 0 4
26901: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26902: LD_INT 0
26904: PPUSH
26905: PPUSH
// if not side or not nation then
26906: LD_VAR 0 1
26910: NOT
26911: IFTRUE 26920
26913: PUSH
26914: LD_VAR 0 2
26918: NOT
26919: OR
26920: IFFALSE 26924
// exit ;
26922: GO 27718
// case nation of nation_american :
26924: LD_VAR 0 2
26928: PUSH
26929: LD_INT 1
26931: DOUBLE
26932: EQUAL
26933: IFTRUE 26937
26935: GO 27159
26937: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
26938: LD_ADDR_VAR 0 4
26942: PUSH
26943: LD_INT 35
26945: PUSH
26946: LD_INT 45
26948: PUSH
26949: LD_INT 46
26951: PUSH
26952: LD_INT 47
26954: PUSH
26955: LD_INT 82
26957: PUSH
26958: LD_INT 83
26960: PUSH
26961: LD_INT 84
26963: PUSH
26964: LD_INT 85
26966: PUSH
26967: LD_INT 86
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: LD_INT 2
26975: PUSH
26976: LD_INT 6
26978: PUSH
26979: LD_INT 15
26981: PUSH
26982: LD_INT 16
26984: PUSH
26985: LD_INT 7
26987: PUSH
26988: LD_INT 12
26990: PUSH
26991: LD_INT 13
26993: PUSH
26994: LD_INT 10
26996: PUSH
26997: LD_INT 14
26999: PUSH
27000: LD_INT 20
27002: PUSH
27003: LD_INT 21
27005: PUSH
27006: LD_INT 22
27008: PUSH
27009: LD_INT 25
27011: PUSH
27012: LD_INT 32
27014: PUSH
27015: LD_INT 27
27017: PUSH
27018: LD_INT 36
27020: PUSH
27021: LD_INT 69
27023: PUSH
27024: LD_INT 39
27026: PUSH
27027: LD_INT 34
27029: PUSH
27030: LD_INT 40
27032: PUSH
27033: LD_INT 48
27035: PUSH
27036: LD_INT 49
27038: PUSH
27039: LD_INT 50
27041: PUSH
27042: LD_INT 51
27044: PUSH
27045: LD_INT 52
27047: PUSH
27048: LD_INT 53
27050: PUSH
27051: LD_INT 54
27053: PUSH
27054: LD_INT 55
27056: PUSH
27057: LD_INT 56
27059: PUSH
27060: LD_INT 57
27062: PUSH
27063: LD_INT 58
27065: PUSH
27066: LD_INT 59
27068: PUSH
27069: LD_INT 60
27071: PUSH
27072: LD_INT 61
27074: PUSH
27075: LD_INT 62
27077: PUSH
27078: LD_INT 80
27080: PUSH
27081: LD_INT 82
27083: PUSH
27084: LD_INT 83
27086: PUSH
27087: LD_INT 84
27089: PUSH
27090: LD_INT 85
27092: PUSH
27093: LD_INT 86
27095: PUSH
27096: LD_INT 90
27098: PUSH
27099: LD_INT 93
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: ST_TO_ADDR
27157: GO 27640
27159: LD_INT 2
27161: DOUBLE
27162: EQUAL
27163: IFTRUE 27167
27165: GO 27401
27167: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
27168: LD_ADDR_VAR 0 4
27172: PUSH
27173: LD_INT 35
27175: PUSH
27176: LD_INT 45
27178: PUSH
27179: LD_INT 46
27181: PUSH
27182: LD_INT 47
27184: PUSH
27185: LD_INT 82
27187: PUSH
27188: LD_INT 83
27190: PUSH
27191: LD_INT 84
27193: PUSH
27194: LD_INT 85
27196: PUSH
27197: LD_INT 87
27199: PUSH
27200: LD_INT 70
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 11
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 4
27214: PUSH
27215: LD_INT 5
27217: PUSH
27218: LD_INT 6
27220: PUSH
27221: LD_INT 15
27223: PUSH
27224: LD_INT 18
27226: PUSH
27227: LD_INT 7
27229: PUSH
27230: LD_INT 17
27232: PUSH
27233: LD_INT 8
27235: PUSH
27236: LD_INT 20
27238: PUSH
27239: LD_INT 21
27241: PUSH
27242: LD_INT 22
27244: PUSH
27245: LD_INT 72
27247: PUSH
27248: LD_INT 26
27250: PUSH
27251: LD_INT 69
27253: PUSH
27254: LD_INT 39
27256: PUSH
27257: LD_INT 40
27259: PUSH
27260: LD_INT 41
27262: PUSH
27263: LD_INT 42
27265: PUSH
27266: LD_INT 43
27268: PUSH
27269: LD_INT 48
27271: PUSH
27272: LD_INT 49
27274: PUSH
27275: LD_INT 50
27277: PUSH
27278: LD_INT 51
27280: PUSH
27281: LD_INT 52
27283: PUSH
27284: LD_INT 53
27286: PUSH
27287: LD_INT 54
27289: PUSH
27290: LD_INT 55
27292: PUSH
27293: LD_INT 56
27295: PUSH
27296: LD_INT 60
27298: PUSH
27299: LD_INT 61
27301: PUSH
27302: LD_INT 62
27304: PUSH
27305: LD_INT 66
27307: PUSH
27308: LD_INT 67
27310: PUSH
27311: LD_INT 68
27313: PUSH
27314: LD_INT 81
27316: PUSH
27317: LD_INT 82
27319: PUSH
27320: LD_INT 83
27322: PUSH
27323: LD_INT 84
27325: PUSH
27326: LD_INT 85
27328: PUSH
27329: LD_INT 87
27331: PUSH
27332: LD_INT 88
27334: PUSH
27335: LD_INT 92
27337: PUSH
27338: LD_INT 94
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: ST_TO_ADDR
27399: GO 27640
27401: LD_INT 3
27403: DOUBLE
27404: EQUAL
27405: IFTRUE 27409
27407: GO 27639
27409: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
27410: LD_ADDR_VAR 0 4
27414: PUSH
27415: LD_INT 46
27417: PUSH
27418: LD_INT 47
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 82
27429: PUSH
27430: LD_INT 83
27432: PUSH
27433: LD_INT 84
27435: PUSH
27436: LD_INT 85
27438: PUSH
27439: LD_INT 86
27441: PUSH
27442: LD_INT 11
27444: PUSH
27445: LD_INT 9
27447: PUSH
27448: LD_INT 20
27450: PUSH
27451: LD_INT 19
27453: PUSH
27454: LD_INT 21
27456: PUSH
27457: LD_INT 24
27459: PUSH
27460: LD_INT 22
27462: PUSH
27463: LD_INT 25
27465: PUSH
27466: LD_INT 28
27468: PUSH
27469: LD_INT 29
27471: PUSH
27472: LD_INT 30
27474: PUSH
27475: LD_INT 31
27477: PUSH
27478: LD_INT 37
27480: PUSH
27481: LD_INT 38
27483: PUSH
27484: LD_INT 32
27486: PUSH
27487: LD_INT 27
27489: PUSH
27490: LD_INT 33
27492: PUSH
27493: LD_INT 69
27495: PUSH
27496: LD_INT 39
27498: PUSH
27499: LD_INT 34
27501: PUSH
27502: LD_INT 40
27504: PUSH
27505: LD_INT 71
27507: PUSH
27508: LD_INT 23
27510: PUSH
27511: LD_INT 44
27513: PUSH
27514: LD_INT 48
27516: PUSH
27517: LD_INT 49
27519: PUSH
27520: LD_INT 50
27522: PUSH
27523: LD_INT 51
27525: PUSH
27526: LD_INT 52
27528: PUSH
27529: LD_INT 53
27531: PUSH
27532: LD_INT 54
27534: PUSH
27535: LD_INT 55
27537: PUSH
27538: LD_INT 56
27540: PUSH
27541: LD_INT 57
27543: PUSH
27544: LD_INT 58
27546: PUSH
27547: LD_INT 59
27549: PUSH
27550: LD_INT 63
27552: PUSH
27553: LD_INT 64
27555: PUSH
27556: LD_INT 65
27558: PUSH
27559: LD_INT 82
27561: PUSH
27562: LD_INT 83
27564: PUSH
27565: LD_INT 84
27567: PUSH
27568: LD_INT 85
27570: PUSH
27571: LD_INT 86
27573: PUSH
27574: LD_INT 89
27576: PUSH
27577: LD_INT 91
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
27637: GO 27640
27639: POP
// if state > - 1 and state < 3 then
27640: LD_VAR 0 3
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: GREATER
27649: IFFALSE 27661
27651: PUSH
27652: LD_VAR 0 3
27656: PUSH
27657: LD_INT 3
27659: LESS
27660: AND
27661: IFFALSE 27718
// for i in result do
27663: LD_ADDR_VAR 0 5
27667: PUSH
27668: LD_VAR 0 4
27672: PUSH
27673: FOR_IN
27674: IFFALSE 27716
// if GetTech ( i , side ) <> state then
27676: LD_VAR 0 5
27680: PPUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 321
27690: PUSH
27691: LD_VAR 0 3
27695: NONEQUAL
27696: IFFALSE 27714
// result := result diff i ;
27698: LD_ADDR_VAR 0 4
27702: PUSH
27703: LD_VAR 0 4
27707: PUSH
27708: LD_VAR 0 5
27712: DIFF
27713: ST_TO_ADDR
27714: GO 27673
27716: POP
27717: POP
// end ;
27718: LD_VAR 0 4
27722: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27723: LD_INT 0
27725: PPUSH
27726: PPUSH
27727: PPUSH
// result := true ;
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_INT 1
27735: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27736: LD_ADDR_VAR 0 5
27740: PUSH
27741: LD_VAR 0 2
27745: PPUSH
27746: CALL_OW 480
27750: ST_TO_ADDR
// if not tmp then
27751: LD_VAR 0 5
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27809
// for i in tmp do
27760: LD_ADDR_VAR 0 4
27764: PUSH
27765: LD_VAR 0 5
27769: PUSH
27770: FOR_IN
27771: IFFALSE 27807
// if GetTech ( i , side ) <> state_researched then
27773: LD_VAR 0 4
27777: PPUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 321
27787: PUSH
27788: LD_INT 2
27790: NONEQUAL
27791: IFFALSE 27805
// begin result := false ;
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_INT 0
27800: ST_TO_ADDR
// exit ;
27801: POP
27802: POP
27803: GO 27809
// end ;
27805: GO 27770
27807: POP
27808: POP
// end ;
27809: LD_VAR 0 3
27813: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27814: LD_INT 0
27816: PPUSH
27817: PPUSH
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
27826: PPUSH
27827: PPUSH
27828: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27829: LD_VAR 0 1
27833: NOT
27834: IFTRUE 27851
27836: PUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 257
27846: PUSH
27847: LD_INT 9
27849: NONEQUAL
27850: OR
27851: IFFALSE 27855
// exit ;
27853: GO 28434
// side := GetSide ( unit ) ;
27855: LD_ADDR_VAR 0 9
27859: PUSH
27860: LD_VAR 0 1
27864: PPUSH
27865: CALL_OW 255
27869: ST_TO_ADDR
// tech_space := tech_spacanom ;
27870: LD_ADDR_VAR 0 12
27874: PUSH
27875: LD_INT 29
27877: ST_TO_ADDR
// tech_time := tech_taurad ;
27878: LD_ADDR_VAR 0 13
27882: PUSH
27883: LD_INT 28
27885: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27886: LD_ADDR_VAR 0 11
27890: PUSH
27891: LD_VAR 0 1
27895: PPUSH
27896: CALL_OW 310
27900: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27901: LD_VAR 0 11
27905: PPUSH
27906: CALL_OW 247
27910: PUSH
27911: LD_INT 2
27913: EQUAL
27914: IFFALSE 27918
// exit ;
27916: GO 28434
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27918: LD_ADDR_VAR 0 8
27922: PUSH
27923: LD_INT 81
27925: PUSH
27926: LD_VAR 0 9
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 3
27937: PUSH
27938: LD_INT 21
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PPUSH
27956: CALL_OW 69
27960: ST_TO_ADDR
// if not tmp then
27961: LD_VAR 0 8
27965: NOT
27966: IFFALSE 27970
// exit ;
27968: GO 28434
// if in_unit then
27970: LD_VAR 0 11
27974: IFFALSE 27998
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27976: LD_ADDR_VAR 0 10
27980: PUSH
27981: LD_VAR 0 8
27985: PPUSH
27986: LD_VAR 0 11
27990: PPUSH
27991: CALL_OW 74
27995: ST_TO_ADDR
27996: GO 28018
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27998: LD_ADDR_VAR 0 10
28002: PUSH
28003: LD_VAR 0 8
28007: PPUSH
28008: LD_VAR 0 1
28012: PPUSH
28013: CALL_OW 74
28017: ST_TO_ADDR
// if not enemy then
28018: LD_VAR 0 10
28022: NOT
28023: IFFALSE 28027
// exit ;
28025: GO 28434
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28027: LD_VAR 0 11
28031: IFFALSE 28053
28033: PUSH
28034: LD_VAR 0 11
28038: PPUSH
28039: LD_VAR 0 10
28043: PPUSH
28044: CALL_OW 296
28048: PUSH
28049: LD_INT 13
28051: GREATER
28052: AND
28053: IFTRUE 28075
28055: PUSH
28056: LD_VAR 0 1
28060: PPUSH
28061: LD_VAR 0 10
28065: PPUSH
28066: CALL_OW 296
28070: PUSH
28071: LD_INT 12
28073: GREATER
28074: OR
28075: IFFALSE 28079
// exit ;
28077: GO 28434
// missile := [ 1 ] ;
28079: LD_ADDR_VAR 0 14
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28090: LD_VAR 0 9
28094: PPUSH
28095: LD_VAR 0 12
28099: PPUSH
28100: CALL_OW 325
28104: IFFALSE 28133
// missile := Replace ( missile , missile + 1 , 2 ) ;
28106: LD_ADDR_VAR 0 14
28110: PUSH
28111: LD_VAR 0 14
28115: PPUSH
28116: LD_VAR 0 14
28120: PUSH
28121: LD_INT 1
28123: PLUS
28124: PPUSH
28125: LD_INT 2
28127: PPUSH
28128: CALL_OW 1
28132: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28133: LD_VAR 0 9
28137: PPUSH
28138: LD_VAR 0 13
28142: PPUSH
28143: CALL_OW 325
28147: IFFALSE 28171
28149: PUSH
28150: LD_VAR 0 10
28154: PPUSH
28155: CALL_OW 255
28159: PPUSH
28160: LD_VAR 0 13
28164: PPUSH
28165: CALL_OW 325
28169: NOT
28170: AND
28171: IFFALSE 28200
// missile := Replace ( missile , missile + 1 , 3 ) ;
28173: LD_ADDR_VAR 0 14
28177: PUSH
28178: LD_VAR 0 14
28182: PPUSH
28183: LD_VAR 0 14
28187: PUSH
28188: LD_INT 1
28190: PLUS
28191: PPUSH
28192: LD_INT 3
28194: PPUSH
28195: CALL_OW 1
28199: ST_TO_ADDR
// if missile < 2 then
28200: LD_VAR 0 14
28204: PUSH
28205: LD_INT 2
28207: LESS
28208: IFFALSE 28212
// exit ;
28210: GO 28434
// x := GetX ( enemy ) ;
28212: LD_ADDR_VAR 0 4
28216: PUSH
28217: LD_VAR 0 10
28221: PPUSH
28222: CALL_OW 250
28226: ST_TO_ADDR
// y := GetY ( enemy ) ;
28227: LD_ADDR_VAR 0 5
28231: PUSH
28232: LD_VAR 0 10
28236: PPUSH
28237: CALL_OW 251
28241: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28242: LD_ADDR_VAR 0 6
28246: PUSH
28247: LD_VAR 0 4
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PPUSH
28256: LD_INT 1
28258: PPUSH
28259: CALL_OW 12
28263: PLUS
28264: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28265: LD_ADDR_VAR 0 7
28269: PUSH
28270: LD_VAR 0 5
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PPUSH
28279: LD_INT 1
28281: PPUSH
28282: CALL_OW 12
28286: PLUS
28287: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28288: LD_VAR 0 6
28292: PPUSH
28293: LD_VAR 0 7
28297: PPUSH
28298: CALL_OW 488
28302: NOT
28303: IFFALSE 28325
// begin _x := x ;
28305: LD_ADDR_VAR 0 6
28309: PUSH
28310: LD_VAR 0 4
28314: ST_TO_ADDR
// _y := y ;
28315: LD_ADDR_VAR 0 7
28319: PUSH
28320: LD_VAR 0 5
28324: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_INT 1
28332: PPUSH
28333: LD_VAR 0 14
28337: PPUSH
28338: CALL_OW 12
28342: ST_TO_ADDR
// case i of 1 :
28343: LD_VAR 0 3
28347: PUSH
28348: LD_INT 1
28350: DOUBLE
28351: EQUAL
28352: IFTRUE 28356
28354: GO 28373
28356: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28357: LD_VAR 0 1
28361: PPUSH
28362: LD_VAR 0 10
28366: PPUSH
28367: CALL_OW 115
28371: GO 28434
28373: LD_INT 2
28375: DOUBLE
28376: EQUAL
28377: IFTRUE 28381
28379: GO 28403
28381: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28382: LD_VAR 0 1
28386: PPUSH
28387: LD_VAR 0 6
28391: PPUSH
28392: LD_VAR 0 7
28396: PPUSH
28397: CALL_OW 153
28401: GO 28434
28403: LD_INT 3
28405: DOUBLE
28406: EQUAL
28407: IFTRUE 28411
28409: GO 28433
28411: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28412: LD_VAR 0 1
28416: PPUSH
28417: LD_VAR 0 6
28421: PPUSH
28422: LD_VAR 0 7
28426: PPUSH
28427: CALL_OW 154
28431: GO 28434
28433: POP
// end ;
28434: LD_VAR 0 2
28438: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28439: LD_INT 0
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
28445: PPUSH
28446: PPUSH
// if not unit or not building then
28447: LD_VAR 0 1
28451: NOT
28452: IFTRUE 28461
28454: PUSH
28455: LD_VAR 0 2
28459: NOT
28460: OR
28461: IFFALSE 28465
// exit ;
28463: GO 28623
// x := GetX ( building ) ;
28465: LD_ADDR_VAR 0 5
28469: PUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: CALL_OW 250
28479: ST_TO_ADDR
// y := GetY ( building ) ;
28480: LD_ADDR_VAR 0 6
28484: PUSH
28485: LD_VAR 0 2
28489: PPUSH
28490: CALL_OW 251
28494: ST_TO_ADDR
// for i := 0 to 5 do
28495: LD_ADDR_VAR 0 4
28499: PUSH
28500: DOUBLE
28501: LD_INT 0
28503: DEC
28504: ST_TO_ADDR
28505: LD_INT 5
28507: PUSH
28508: FOR_TO
28509: IFFALSE 28621
// begin _x := ShiftX ( x , i , 3 ) ;
28511: LD_ADDR_VAR 0 7
28515: PUSH
28516: LD_VAR 0 5
28520: PPUSH
28521: LD_VAR 0 4
28525: PPUSH
28526: LD_INT 3
28528: PPUSH
28529: CALL_OW 272
28533: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28534: LD_ADDR_VAR 0 8
28538: PUSH
28539: LD_VAR 0 6
28543: PPUSH
28544: LD_VAR 0 4
28548: PPUSH
28549: LD_INT 3
28551: PPUSH
28552: CALL_OW 273
28556: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28557: LD_VAR 0 7
28561: PPUSH
28562: LD_VAR 0 8
28566: PPUSH
28567: CALL_OW 488
28571: NOT
28572: IFFALSE 28576
// continue ;
28574: GO 28508
// if HexInfo ( _x , _y ) = 0 then
28576: LD_VAR 0 7
28580: PPUSH
28581: LD_VAR 0 8
28585: PPUSH
28586: CALL_OW 428
28590: PUSH
28591: LD_INT 0
28593: EQUAL
28594: IFFALSE 28619
// begin ComMoveXY ( unit , _x , _y ) ;
28596: LD_VAR 0 1
28600: PPUSH
28601: LD_VAR 0 7
28605: PPUSH
28606: LD_VAR 0 8
28610: PPUSH
28611: CALL_OW 111
// exit ;
28615: POP
28616: POP
28617: GO 28623
// end ; end ;
28619: GO 28508
28621: POP
28622: POP
// end ;
28623: LD_VAR 0 3
28627: RET
// export function ScanBase ( side , base_area ) ; begin
28628: LD_INT 0
28630: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_VAR 0 2
28640: PPUSH
28641: LD_INT 81
28643: PUSH
28644: LD_VAR 0 1
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PPUSH
28653: CALL_OW 70
28657: ST_TO_ADDR
// end ;
28658: LD_VAR 0 3
28662: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28663: LD_INT 0
28665: PPUSH
28666: PPUSH
28667: PPUSH
28668: PPUSH
// result := false ;
28669: LD_ADDR_VAR 0 2
28673: PUSH
28674: LD_INT 0
28676: ST_TO_ADDR
// side := GetSide ( unit ) ;
28677: LD_ADDR_VAR 0 3
28681: PUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 255
28691: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28692: LD_ADDR_VAR 0 4
28696: PUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL_OW 248
28706: ST_TO_ADDR
// case nat of 1 :
28707: LD_VAR 0 4
28711: PUSH
28712: LD_INT 1
28714: DOUBLE
28715: EQUAL
28716: IFTRUE 28720
28718: GO 28731
28720: POP
// tech := tech_lassight ; 2 :
28721: LD_ADDR_VAR 0 5
28725: PUSH
28726: LD_INT 12
28728: ST_TO_ADDR
28729: GO 28770
28731: LD_INT 2
28733: DOUBLE
28734: EQUAL
28735: IFTRUE 28739
28737: GO 28750
28739: POP
// tech := tech_mortar ; 3 :
28740: LD_ADDR_VAR 0 5
28744: PUSH
28745: LD_INT 41
28747: ST_TO_ADDR
28748: GO 28770
28750: LD_INT 3
28752: DOUBLE
28753: EQUAL
28754: IFTRUE 28758
28756: GO 28769
28758: POP
// tech := tech_bazooka ; end ;
28759: LD_ADDR_VAR 0 5
28763: PUSH
28764: LD_INT 44
28766: ST_TO_ADDR
28767: GO 28770
28769: POP
// if Researched ( side , tech ) then
28770: LD_VAR 0 3
28774: PPUSH
28775: LD_VAR 0 5
28779: PPUSH
28780: CALL_OW 325
28784: IFFALSE 28811
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28786: LD_ADDR_VAR 0 2
28790: PUSH
28791: LD_INT 5
28793: PUSH
28794: LD_INT 8
28796: PUSH
28797: LD_INT 9
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PUSH
28805: LD_VAR 0 4
28809: ARRAY
28810: ST_TO_ADDR
// end ;
28811: LD_VAR 0 2
28815: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
28820: PPUSH
// if not mines then
28821: LD_VAR 0 2
28825: NOT
28826: IFFALSE 28830
// exit ;
28828: GO 28974
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28830: LD_ADDR_VAR 0 5
28834: PUSH
28835: LD_INT 81
28837: PUSH
28838: LD_VAR 0 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: PUSH
28850: LD_INT 21
28852: PUSH
28853: LD_INT 3
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PPUSH
28868: CALL_OW 69
28872: ST_TO_ADDR
// for i in mines do
28873: LD_ADDR_VAR 0 4
28877: PUSH
28878: LD_VAR 0 2
28882: PUSH
28883: FOR_IN
28884: IFFALSE 28972
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28886: LD_VAR 0 4
28890: PUSH
28891: LD_INT 1
28893: ARRAY
28894: PPUSH
28895: LD_VAR 0 4
28899: PUSH
28900: LD_INT 2
28902: ARRAY
28903: PPUSH
28904: CALL_OW 458
28908: NOT
28909: IFFALSE 28913
// continue ;
28911: GO 28883
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28913: LD_VAR 0 4
28917: PUSH
28918: LD_INT 1
28920: ARRAY
28921: PPUSH
28922: LD_VAR 0 4
28926: PUSH
28927: LD_INT 2
28929: ARRAY
28930: PPUSH
28931: CALL_OW 428
28935: PUSH
28936: LD_VAR 0 5
28940: IN
28941: IFFALSE 28970
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28943: LD_VAR 0 4
28947: PUSH
28948: LD_INT 1
28950: ARRAY
28951: PPUSH
28952: LD_VAR 0 4
28956: PUSH
28957: LD_INT 2
28959: ARRAY
28960: PPUSH
28961: LD_VAR 0 1
28965: PPUSH
28966: CALL_OW 456
// end ;
28970: GO 28883
28972: POP
28973: POP
// end ;
28974: LD_VAR 0 3
28978: RET
// export function Count ( array ) ; begin
28979: LD_INT 0
28981: PPUSH
// result := array + 0 ;
28982: LD_ADDR_VAR 0 2
28986: PUSH
28987: LD_VAR 0 1
28991: PUSH
28992: LD_INT 0
28994: PLUS
28995: ST_TO_ADDR
// end ;
28996: LD_VAR 0 2
29000: RET
// export function IsEmpty ( building ) ; begin
29001: LD_INT 0
29003: PPUSH
// if not building then
29004: LD_VAR 0 1
29008: NOT
29009: IFFALSE 29013
// exit ;
29011: GO 29056
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29013: LD_ADDR_VAR 0 2
29017: PUSH
29018: LD_VAR 0 1
29022: PUSH
29023: LD_INT 22
29025: PUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 255
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 58
29042: PUSH
29043: EMPTY
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 69
29054: IN
29055: ST_TO_ADDR
// end ;
29056: LD_VAR 0 2
29060: RET
// export function IsNotFull ( building ) ; var places ; begin
29061: LD_INT 0
29063: PPUSH
29064: PPUSH
// if not building then
29065: LD_VAR 0 1
29069: NOT
29070: IFFALSE 29074
// exit ;
29072: GO 29102
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29074: LD_ADDR_VAR 0 2
29078: PUSH
29079: LD_VAR 0 1
29083: PPUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 62
29089: PUSH
29090: EMPTY
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PPUSH
29097: CALL_OW 72
29101: ST_TO_ADDR
// end ;
29102: LD_VAR 0 2
29106: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29107: LD_INT 0
29109: PPUSH
29110: PPUSH
29111: PPUSH
29112: PPUSH
// tmp := [ ] ;
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: EMPTY
29119: ST_TO_ADDR
// list := [ ] ;
29120: LD_ADDR_VAR 0 5
29124: PUSH
29125: EMPTY
29126: ST_TO_ADDR
// for i = 16 to 25 do
29127: LD_ADDR_VAR 0 4
29131: PUSH
29132: DOUBLE
29133: LD_INT 16
29135: DEC
29136: ST_TO_ADDR
29137: LD_INT 25
29139: PUSH
29140: FOR_TO
29141: IFFALSE 29214
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29143: LD_ADDR_VAR 0 3
29147: PUSH
29148: LD_VAR 0 3
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_VAR 0 1
29160: PPUSH
29161: CALL_OW 255
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 91
29172: PUSH
29173: LD_VAR 0 1
29177: PUSH
29178: LD_INT 6
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 30
29188: PUSH
29189: LD_VAR 0 4
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: PUSH
29203: EMPTY
29204: LIST
29205: PPUSH
29206: CALL_OW 69
29210: ADD
29211: ST_TO_ADDR
29212: GO 29140
29214: POP
29215: POP
// for i = 1 to tmp do
29216: LD_ADDR_VAR 0 4
29220: PUSH
29221: DOUBLE
29222: LD_INT 1
29224: DEC
29225: ST_TO_ADDR
29226: LD_VAR 0 3
29230: PUSH
29231: FOR_TO
29232: IFFALSE 29320
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29234: LD_ADDR_VAR 0 5
29238: PUSH
29239: LD_VAR 0 5
29243: PUSH
29244: LD_VAR 0 3
29248: PUSH
29249: LD_VAR 0 4
29253: ARRAY
29254: PPUSH
29255: CALL_OW 266
29259: PUSH
29260: LD_VAR 0 3
29264: PUSH
29265: LD_VAR 0 4
29269: ARRAY
29270: PPUSH
29271: CALL_OW 250
29275: PUSH
29276: LD_VAR 0 3
29280: PUSH
29281: LD_VAR 0 4
29285: ARRAY
29286: PPUSH
29287: CALL_OW 251
29291: PUSH
29292: LD_VAR 0 3
29296: PUSH
29297: LD_VAR 0 4
29301: ARRAY
29302: PPUSH
29303: CALL_OW 254
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: ADD
29317: ST_TO_ADDR
29318: GO 29231
29320: POP
29321: POP
// result := list ;
29322: LD_ADDR_VAR 0 2
29326: PUSH
29327: LD_VAR 0 5
29331: ST_TO_ADDR
// end ;
29332: LD_VAR 0 2
29336: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29337: LD_INT 0
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
// if not factory then
29346: LD_VAR 0 1
29350: NOT
29351: IFFALSE 29355
// exit ;
29353: GO 29958
// if control = control_apeman then
29355: LD_VAR 0 4
29359: PUSH
29360: LD_INT 5
29362: EQUAL
29363: IFFALSE 29472
// begin tmp := UnitsInside ( factory ) ;
29365: LD_ADDR_VAR 0 8
29369: PUSH
29370: LD_VAR 0 1
29374: PPUSH
29375: CALL_OW 313
29379: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29380: LD_VAR 0 8
29384: PPUSH
29385: LD_INT 25
29387: PUSH
29388: LD_INT 12
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PPUSH
29395: CALL_OW 72
29399: NOT
29400: IFFALSE 29410
// control := control_manual ;
29402: LD_ADDR_VAR 0 4
29406: PUSH
29407: LD_INT 1
29409: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29410: LD_ADDR_VAR 0 8
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL 29107 0 1
29424: ST_TO_ADDR
// if tmp then
29425: LD_VAR 0 8
29429: IFFALSE 29472
// begin for i in tmp do
29431: LD_ADDR_VAR 0 7
29435: PUSH
29436: LD_VAR 0 8
29440: PUSH
29441: FOR_IN
29442: IFFALSE 29470
// if i [ 1 ] = b_ext_radio then
29444: LD_VAR 0 7
29448: PUSH
29449: LD_INT 1
29451: ARRAY
29452: PUSH
29453: LD_INT 22
29455: EQUAL
29456: IFFALSE 29468
// begin control := control_remote ;
29458: LD_ADDR_VAR 0 4
29462: PUSH
29463: LD_INT 2
29465: ST_TO_ADDR
// break ;
29466: GO 29470
// end ;
29468: GO 29441
29470: POP
29471: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29472: LD_VAR 0 1
29476: PPUSH
29477: LD_VAR 0 2
29481: PPUSH
29482: LD_VAR 0 3
29486: PPUSH
29487: LD_VAR 0 4
29491: PPUSH
29492: LD_VAR 0 5
29496: PPUSH
29497: CALL_OW 448
29501: IFFALSE 29536
// begin result := [ chassis , engine , control , weapon ] ;
29503: LD_ADDR_VAR 0 6
29507: PUSH
29508: LD_VAR 0 2
29512: PUSH
29513: LD_VAR 0 3
29517: PUSH
29518: LD_VAR 0 4
29522: PUSH
29523: LD_VAR 0 5
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: ST_TO_ADDR
// exit ;
29534: GO 29958
// end ; _chassis := AvailableChassisList ( factory ) ;
29536: LD_ADDR_VAR 0 9
29540: PUSH
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL_OW 475
29550: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29551: LD_ADDR_VAR 0 11
29555: PUSH
29556: LD_VAR 0 1
29560: PPUSH
29561: CALL_OW 476
29565: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29566: LD_ADDR_VAR 0 12
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 477
29580: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29581: LD_ADDR_VAR 0 10
29585: PUSH
29586: LD_VAR 0 1
29590: PPUSH
29591: CALL_OW 478
29595: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29596: LD_VAR 0 9
29600: NOT
29601: IFTRUE 29610
29603: PUSH
29604: LD_VAR 0 11
29608: NOT
29609: OR
29610: IFTRUE 29619
29612: PUSH
29613: LD_VAR 0 12
29617: NOT
29618: OR
29619: IFTRUE 29628
29621: PUSH
29622: LD_VAR 0 10
29626: NOT
29627: OR
29628: IFFALSE 29663
// begin result := [ chassis , engine , control , weapon ] ;
29630: LD_ADDR_VAR 0 6
29634: PUSH
29635: LD_VAR 0 2
29639: PUSH
29640: LD_VAR 0 3
29644: PUSH
29645: LD_VAR 0 4
29649: PUSH
29650: LD_VAR 0 5
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: ST_TO_ADDR
// exit ;
29661: GO 29958
// end ; if not chassis in _chassis then
29663: LD_VAR 0 2
29667: PUSH
29668: LD_VAR 0 9
29672: IN
29673: NOT
29674: IFFALSE 29700
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29676: LD_ADDR_VAR 0 2
29680: PUSH
29681: LD_VAR 0 9
29685: PUSH
29686: LD_INT 1
29688: PPUSH
29689: LD_VAR 0 9
29693: PPUSH
29694: CALL_OW 12
29698: ARRAY
29699: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29700: LD_VAR 0 2
29704: PPUSH
29705: LD_VAR 0 3
29709: PPUSH
29710: CALL 29963 0 2
29714: NOT
29715: IFFALSE 29776
// repeat engine := _engine [ 1 ] ;
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: LD_VAR 0 11
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29731: LD_ADDR_VAR 0 11
29735: PUSH
29736: LD_VAR 0 11
29740: PPUSH
29741: LD_INT 1
29743: PPUSH
29744: CALL_OW 3
29748: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29749: LD_VAR 0 2
29753: PPUSH
29754: LD_VAR 0 3
29758: PPUSH
29759: CALL 29963 0 2
29763: IFTRUE 29774
29765: PUSH
29766: LD_VAR 0 11
29770: PUSH
29771: EMPTY
29772: EQUAL
29773: OR
29774: IFFALSE 29717
// if not control in _control then
29776: LD_VAR 0 4
29780: PUSH
29781: LD_VAR 0 12
29785: IN
29786: NOT
29787: IFFALSE 29813
// control := _control [ rand ( 1 , _control ) ] ;
29789: LD_ADDR_VAR 0 4
29793: PUSH
29794: LD_VAR 0 12
29798: PUSH
29799: LD_INT 1
29801: PPUSH
29802: LD_VAR 0 12
29806: PPUSH
29807: CALL_OW 12
29811: ARRAY
29812: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29813: LD_VAR 0 2
29817: PPUSH
29818: LD_VAR 0 5
29822: PPUSH
29823: CALL 30185 0 2
29827: NOT
29828: IFFALSE 29889
// repeat weapon := _weapon [ 1 ] ;
29830: LD_ADDR_VAR 0 5
29834: PUSH
29835: LD_VAR 0 10
29839: PUSH
29840: LD_INT 1
29842: ARRAY
29843: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29844: LD_ADDR_VAR 0 10
29848: PUSH
29849: LD_VAR 0 10
29853: PPUSH
29854: LD_INT 1
29856: PPUSH
29857: CALL_OW 3
29861: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29862: LD_VAR 0 2
29866: PPUSH
29867: LD_VAR 0 5
29871: PPUSH
29872: CALL 30185 0 2
29876: IFTRUE 29887
29878: PUSH
29879: LD_VAR 0 10
29883: PUSH
29884: EMPTY
29885: EQUAL
29886: OR
29887: IFFALSE 29830
// result := [ ] ;
29889: LD_ADDR_VAR 0 6
29893: PUSH
29894: EMPTY
29895: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29896: LD_VAR 0 1
29900: PPUSH
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: LD_VAR 0 4
29915: PPUSH
29916: LD_VAR 0 5
29920: PPUSH
29921: CALL_OW 448
29925: IFFALSE 29958
// result := [ chassis , engine , control , weapon ] ;
29927: LD_ADDR_VAR 0 6
29931: PUSH
29932: LD_VAR 0 2
29936: PUSH
29937: LD_VAR 0 3
29941: PUSH
29942: LD_VAR 0 4
29946: PUSH
29947: LD_VAR 0 5
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: ST_TO_ADDR
// end ;
29958: LD_VAR 0 6
29962: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29963: LD_INT 0
29965: PPUSH
// if not chassis or not engine then
29966: LD_VAR 0 1
29970: NOT
29971: IFTRUE 29980
29973: PUSH
29974: LD_VAR 0 2
29978: NOT
29979: OR
29980: IFFALSE 29984
// exit ;
29982: GO 30180
// case engine of engine_solar :
29984: LD_VAR 0 2
29988: PUSH
29989: LD_INT 2
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30035
29997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29998: LD_ADDR_VAR 0 3
30002: PUSH
30003: LD_INT 11
30005: PUSH
30006: LD_INT 12
30008: PUSH
30009: LD_INT 13
30011: PUSH
30012: LD_INT 14
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: LD_INT 3
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: ST_TO_ADDR
30033: GO 30164
30035: LD_INT 1
30037: DOUBLE
30038: EQUAL
30039: IFTRUE 30043
30041: GO 30105
30043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30044: LD_ADDR_VAR 0 3
30048: PUSH
30049: LD_INT 11
30051: PUSH
30052: LD_INT 12
30054: PUSH
30055: LD_INT 13
30057: PUSH
30058: LD_INT 14
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: LD_INT 4
30072: PUSH
30073: LD_INT 5
30075: PUSH
30076: LD_INT 21
30078: PUSH
30079: LD_INT 23
30081: PUSH
30082: LD_INT 22
30084: PUSH
30085: LD_INT 24
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
30103: GO 30164
30105: LD_INT 3
30107: DOUBLE
30108: EQUAL
30109: IFTRUE 30113
30111: GO 30163
30113: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30114: LD_ADDR_VAR 0 3
30118: PUSH
30119: LD_INT 13
30121: PUSH
30122: LD_INT 14
30124: PUSH
30125: LD_INT 2
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: LD_INT 4
30133: PUSH
30134: LD_INT 5
30136: PUSH
30137: LD_INT 21
30139: PUSH
30140: LD_INT 22
30142: PUSH
30143: LD_INT 23
30145: PUSH
30146: LD_INT 24
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: ST_TO_ADDR
30161: GO 30164
30163: POP
// result := ( chassis in result ) ;
30164: LD_ADDR_VAR 0 3
30168: PUSH
30169: LD_VAR 0 1
30173: PUSH
30174: LD_VAR 0 3
30178: IN
30179: ST_TO_ADDR
// end ;
30180: LD_VAR 0 3
30184: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30185: LD_INT 0
30187: PPUSH
// if not chassis or not weapon then
30188: LD_VAR 0 1
30192: NOT
30193: IFTRUE 30202
30195: PUSH
30196: LD_VAR 0 2
30200: NOT
30201: OR
30202: IFFALSE 30206
// exit ;
30204: GO 31266
// case weapon of us_machine_gun :
30206: LD_VAR 0 2
30210: PUSH
30211: LD_INT 2
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30249
30219: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30220: LD_ADDR_VAR 0 3
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: LD_INT 3
30233: PUSH
30234: LD_INT 4
30236: PUSH
30237: LD_INT 5
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: ST_TO_ADDR
30247: GO 31250
30249: LD_INT 3
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 30287
30257: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30258: LD_ADDR_VAR 0 3
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: LD_INT 3
30271: PUSH
30272: LD_INT 4
30274: PUSH
30275: LD_INT 5
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: ST_TO_ADDR
30285: GO 31250
30287: LD_INT 11
30289: DOUBLE
30290: EQUAL
30291: IFTRUE 30295
30293: GO 30325
30295: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30296: LD_ADDR_VAR 0 3
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 3
30309: PUSH
30310: LD_INT 4
30312: PUSH
30313: LD_INT 5
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
30323: GO 31250
30325: LD_INT 4
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30359
30333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30334: LD_ADDR_VAR 0 3
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 3
30344: PUSH
30345: LD_INT 4
30347: PUSH
30348: LD_INT 5
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: ST_TO_ADDR
30357: GO 31250
30359: LD_INT 5
30361: DOUBLE
30362: EQUAL
30363: IFTRUE 30367
30365: GO 30393
30367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30368: LD_ADDR_VAR 0 3
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: LD_INT 4
30381: PUSH
30382: LD_INT 5
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: ST_TO_ADDR
30391: GO 31250
30393: LD_INT 9
30395: DOUBLE
30396: EQUAL
30397: IFTRUE 30401
30399: GO 30427
30401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30402: LD_ADDR_VAR 0 3
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: ST_TO_ADDR
30425: GO 31250
30427: LD_INT 7
30429: DOUBLE
30430: EQUAL
30431: IFTRUE 30435
30433: GO 30461
30435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30436: LD_ADDR_VAR 0 3
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 3
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
30459: GO 31250
30461: LD_INT 12
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30495
30469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30470: LD_ADDR_VAR 0 3
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 4
30483: PUSH
30484: LD_INT 5
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
30493: GO 31250
30495: LD_INT 13
30497: DOUBLE
30498: EQUAL
30499: IFTRUE 30503
30501: GO 30529
30503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30504: LD_ADDR_VAR 0 3
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: LD_INT 4
30517: PUSH
30518: LD_INT 5
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
30527: GO 31250
30529: LD_INT 14
30531: DOUBLE
30532: EQUAL
30533: IFTRUE 30537
30535: GO 30555
30537: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: LD_INT 5
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: ST_TO_ADDR
30553: GO 31250
30555: LD_INT 6
30557: DOUBLE
30558: EQUAL
30559: IFTRUE 30563
30561: GO 30581
30563: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30564: LD_ADDR_VAR 0 3
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: ST_TO_ADDR
30579: GO 31250
30581: LD_INT 10
30583: DOUBLE
30584: EQUAL
30585: IFTRUE 30589
30587: GO 30607
30589: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30590: LD_ADDR_VAR 0 3
30594: PUSH
30595: LD_INT 4
30597: PUSH
30598: LD_INT 5
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: ST_TO_ADDR
30605: GO 31250
30607: LD_INT 22
30609: DOUBLE
30610: EQUAL
30611: IFTRUE 30615
30613: GO 30641
30615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30616: LD_ADDR_VAR 0 3
30620: PUSH
30621: LD_INT 11
30623: PUSH
30624: LD_INT 12
30626: PUSH
30627: LD_INT 13
30629: PUSH
30630: LD_INT 14
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: ST_TO_ADDR
30639: GO 31250
30641: LD_INT 23
30643: DOUBLE
30644: EQUAL
30645: IFTRUE 30649
30647: GO 30675
30649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30650: LD_ADDR_VAR 0 3
30654: PUSH
30655: LD_INT 11
30657: PUSH
30658: LD_INT 12
30660: PUSH
30661: LD_INT 13
30663: PUSH
30664: LD_INT 14
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: ST_TO_ADDR
30673: GO 31250
30675: LD_INT 24
30677: DOUBLE
30678: EQUAL
30679: IFTRUE 30683
30681: GO 30709
30683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30684: LD_ADDR_VAR 0 3
30688: PUSH
30689: LD_INT 11
30691: PUSH
30692: LD_INT 12
30694: PUSH
30695: LD_INT 13
30697: PUSH
30698: LD_INT 14
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 31250
30709: LD_INT 30
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30743
30717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 11
30725: PUSH
30726: LD_INT 12
30728: PUSH
30729: LD_INT 13
30731: PUSH
30732: LD_INT 14
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: ST_TO_ADDR
30741: GO 31250
30743: LD_INT 25
30745: DOUBLE
30746: EQUAL
30747: IFTRUE 30751
30749: GO 30769
30751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30752: LD_ADDR_VAR 0 3
30756: PUSH
30757: LD_INT 13
30759: PUSH
30760: LD_INT 14
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: ST_TO_ADDR
30767: GO 31250
30769: LD_INT 27
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30795
30777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30778: LD_ADDR_VAR 0 3
30782: PUSH
30783: LD_INT 13
30785: PUSH
30786: LD_INT 14
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: ST_TO_ADDR
30793: GO 31250
30795: LD_INT 92
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30829
30803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30804: LD_ADDR_VAR 0 3
30808: PUSH
30809: LD_INT 11
30811: PUSH
30812: LD_INT 12
30814: PUSH
30815: LD_INT 13
30817: PUSH
30818: LD_INT 14
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
30827: GO 31250
30829: LD_INT 28
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30855
30837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30838: LD_ADDR_VAR 0 3
30842: PUSH
30843: LD_INT 13
30845: PUSH
30846: LD_INT 14
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: ST_TO_ADDR
30853: GO 31250
30855: LD_INT 29
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30881
30863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_INT 13
30871: PUSH
30872: LD_INT 14
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: ST_TO_ADDR
30879: GO 31250
30881: LD_INT 31
30883: DOUBLE
30884: EQUAL
30885: IFTRUE 30889
30887: GO 30907
30889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30890: LD_ADDR_VAR 0 3
30894: PUSH
30895: LD_INT 13
30897: PUSH
30898: LD_INT 14
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31250
30907: LD_INT 26
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30933
30915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 13
30923: PUSH
30924: LD_INT 14
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: ST_TO_ADDR
30931: GO 31250
30933: LD_INT 42
30935: DOUBLE
30936: EQUAL
30937: IFTRUE 30941
30939: GO 30967
30941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30942: LD_ADDR_VAR 0 3
30946: PUSH
30947: LD_INT 21
30949: PUSH
30950: LD_INT 22
30952: PUSH
30953: LD_INT 23
30955: PUSH
30956: LD_INT 24
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
30965: GO 31250
30967: LD_INT 43
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 31001
30975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_INT 21
30983: PUSH
30984: LD_INT 22
30986: PUSH
30987: LD_INT 23
30989: PUSH
30990: LD_INT 24
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
30999: GO 31250
31001: LD_INT 44
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31035
31009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31010: LD_ADDR_VAR 0 3
31014: PUSH
31015: LD_INT 21
31017: PUSH
31018: LD_INT 22
31020: PUSH
31021: LD_INT 23
31023: PUSH
31024: LD_INT 24
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
31033: GO 31250
31035: LD_INT 45
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31069
31043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 22
31054: PUSH
31055: LD_INT 23
31057: PUSH
31058: LD_INT 24
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31250
31069: LD_INT 49
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31103
31077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 21
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_INT 23
31091: PUSH
31092: LD_INT 24
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
31101: GO 31250
31103: LD_INT 51
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31137
31111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_INT 21
31119: PUSH
31120: LD_INT 22
31122: PUSH
31123: LD_INT 23
31125: PUSH
31126: LD_INT 24
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
31135: GO 31250
31137: LD_INT 52
31139: DOUBLE
31140: EQUAL
31141: IFTRUE 31145
31143: GO 31171
31145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31146: LD_ADDR_VAR 0 3
31150: PUSH
31151: LD_INT 21
31153: PUSH
31154: LD_INT 22
31156: PUSH
31157: LD_INT 23
31159: PUSH
31160: LD_INT 24
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
31169: GO 31250
31171: LD_INT 53
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31197
31179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31180: LD_ADDR_VAR 0 3
31184: PUSH
31185: LD_INT 23
31187: PUSH
31188: LD_INT 24
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: ST_TO_ADDR
31195: GO 31250
31197: LD_INT 46
31199: DOUBLE
31200: EQUAL
31201: IFTRUE 31205
31203: GO 31223
31205: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31206: LD_ADDR_VAR 0 3
31210: PUSH
31211: LD_INT 23
31213: PUSH
31214: LD_INT 24
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31250
31223: LD_INT 47
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31249
31231: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 23
31239: PUSH
31240: LD_INT 24
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: ST_TO_ADDR
31247: GO 31250
31249: POP
// result := ( chassis in result ) ;
31250: LD_ADDR_VAR 0 3
31254: PUSH
31255: LD_VAR 0 1
31259: PUSH
31260: LD_VAR 0 3
31264: IN
31265: ST_TO_ADDR
// end ;
31266: LD_VAR 0 3
31270: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31271: LD_INT 0
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
// result := array ;
31280: LD_ADDR_VAR 0 5
31284: PUSH
31285: LD_VAR 0 1
31289: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31290: LD_VAR 0 1
31294: NOT
31295: IFTRUE 31304
31297: PUSH
31298: LD_VAR 0 2
31302: NOT
31303: OR
31304: IFTRUE 31313
31306: PUSH
31307: LD_VAR 0 3
31311: NOT
31312: OR
31313: IFTRUE 31327
31315: PUSH
31316: LD_VAR 0 2
31320: PUSH
31321: LD_VAR 0 1
31325: GREATER
31326: OR
31327: IFTRUE 31341
31329: PUSH
31330: LD_VAR 0 3
31334: PUSH
31335: LD_VAR 0 1
31339: GREATER
31340: OR
31341: IFFALSE 31345
// exit ;
31343: GO 31641
// if direction then
31345: LD_VAR 0 4
31349: IFFALSE 31413
// begin d := 1 ;
31351: LD_ADDR_VAR 0 9
31355: PUSH
31356: LD_INT 1
31358: ST_TO_ADDR
// if i_from > i_to then
31359: LD_VAR 0 2
31363: PUSH
31364: LD_VAR 0 3
31368: GREATER
31369: IFFALSE 31395
// length := ( array - i_from ) + i_to else
31371: LD_ADDR_VAR 0 11
31375: PUSH
31376: LD_VAR 0 1
31380: PUSH
31381: LD_VAR 0 2
31385: MINUS
31386: PUSH
31387: LD_VAR 0 3
31391: PLUS
31392: ST_TO_ADDR
31393: GO 31411
// length := i_to - i_from ;
31395: LD_ADDR_VAR 0 11
31399: PUSH
31400: LD_VAR 0 3
31404: PUSH
31405: LD_VAR 0 2
31409: MINUS
31410: ST_TO_ADDR
// end else
31411: GO 31474
// begin d := - 1 ;
31413: LD_ADDR_VAR 0 9
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: ST_TO_ADDR
// if i_from > i_to then
31422: LD_VAR 0 2
31426: PUSH
31427: LD_VAR 0 3
31431: GREATER
31432: IFFALSE 31452
// length := i_from - i_to else
31434: LD_ADDR_VAR 0 11
31438: PUSH
31439: LD_VAR 0 2
31443: PUSH
31444: LD_VAR 0 3
31448: MINUS
31449: ST_TO_ADDR
31450: GO 31474
// length := ( array - i_to ) + i_from ;
31452: LD_ADDR_VAR 0 11
31456: PUSH
31457: LD_VAR 0 1
31461: PUSH
31462: LD_VAR 0 3
31466: MINUS
31467: PUSH
31468: LD_VAR 0 2
31472: PLUS
31473: ST_TO_ADDR
// end ; if not length then
31474: LD_VAR 0 11
31478: NOT
31479: IFFALSE 31483
// exit ;
31481: GO 31641
// tmp := array ;
31483: LD_ADDR_VAR 0 10
31487: PUSH
31488: LD_VAR 0 1
31492: ST_TO_ADDR
// for i = 1 to length do
31493: LD_ADDR_VAR 0 6
31497: PUSH
31498: DOUBLE
31499: LD_INT 1
31501: DEC
31502: ST_TO_ADDR
31503: LD_VAR 0 11
31507: PUSH
31508: FOR_TO
31509: IFFALSE 31629
// begin for j = 1 to array do
31511: LD_ADDR_VAR 0 7
31515: PUSH
31516: DOUBLE
31517: LD_INT 1
31519: DEC
31520: ST_TO_ADDR
31521: LD_VAR 0 1
31525: PUSH
31526: FOR_TO
31527: IFFALSE 31615
// begin k := j + d ;
31529: LD_ADDR_VAR 0 8
31533: PUSH
31534: LD_VAR 0 7
31538: PUSH
31539: LD_VAR 0 9
31543: PLUS
31544: ST_TO_ADDR
// if k > array then
31545: LD_VAR 0 8
31549: PUSH
31550: LD_VAR 0 1
31554: GREATER
31555: IFFALSE 31565
// k := 1 ;
31557: LD_ADDR_VAR 0 8
31561: PUSH
31562: LD_INT 1
31564: ST_TO_ADDR
// if not k then
31565: LD_VAR 0 8
31569: NOT
31570: IFFALSE 31582
// k := array ;
31572: LD_ADDR_VAR 0 8
31576: PUSH
31577: LD_VAR 0 1
31581: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31582: LD_ADDR_VAR 0 10
31586: PUSH
31587: LD_VAR 0 10
31591: PPUSH
31592: LD_VAR 0 8
31596: PPUSH
31597: LD_VAR 0 1
31601: PUSH
31602: LD_VAR 0 7
31606: ARRAY
31607: PPUSH
31608: CALL_OW 1
31612: ST_TO_ADDR
// end ;
31613: GO 31526
31615: POP
31616: POP
// array := tmp ;
31617: LD_ADDR_VAR 0 1
31621: PUSH
31622: LD_VAR 0 10
31626: ST_TO_ADDR
// end ;
31627: GO 31508
31629: POP
31630: POP
// result := array ;
31631: LD_ADDR_VAR 0 5
31635: PUSH
31636: LD_VAR 0 1
31640: ST_TO_ADDR
// end ;
31641: LD_VAR 0 5
31645: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31646: LD_INT 0
31648: PPUSH
31649: PPUSH
// result := 0 ;
31650: LD_ADDR_VAR 0 3
31654: PUSH
31655: LD_INT 0
31657: ST_TO_ADDR
// if not array or not value in array then
31658: LD_VAR 0 1
31662: NOT
31663: IFTRUE 31678
31665: PUSH
31666: LD_VAR 0 2
31670: PUSH
31671: LD_VAR 0 1
31675: IN
31676: NOT
31677: OR
31678: IFFALSE 31682
// exit ;
31680: GO 31736
// for i = 1 to array do
31682: LD_ADDR_VAR 0 4
31686: PUSH
31687: DOUBLE
31688: LD_INT 1
31690: DEC
31691: ST_TO_ADDR
31692: LD_VAR 0 1
31696: PUSH
31697: FOR_TO
31698: IFFALSE 31734
// if value = array [ i ] then
31700: LD_VAR 0 2
31704: PUSH
31705: LD_VAR 0 1
31709: PUSH
31710: LD_VAR 0 4
31714: ARRAY
31715: EQUAL
31716: IFFALSE 31732
// begin result := i ;
31718: LD_ADDR_VAR 0 3
31722: PUSH
31723: LD_VAR 0 4
31727: ST_TO_ADDR
// exit ;
31728: POP
31729: POP
31730: GO 31736
// end ;
31732: GO 31697
31734: POP
31735: POP
// end ;
31736: LD_VAR 0 3
31740: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31741: LD_INT 0
31743: PPUSH
// vc_chassis := chassis ;
31744: LD_ADDR_OWVAR 37
31748: PUSH
31749: LD_VAR 0 1
31753: ST_TO_ADDR
// vc_engine := engine ;
31754: LD_ADDR_OWVAR 39
31758: PUSH
31759: LD_VAR 0 2
31763: ST_TO_ADDR
// vc_control := control ;
31764: LD_ADDR_OWVAR 38
31768: PUSH
31769: LD_VAR 0 3
31773: ST_TO_ADDR
// vc_weapon := weapon ;
31774: LD_ADDR_OWVAR 40
31778: PUSH
31779: LD_VAR 0 4
31783: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31784: LD_ADDR_OWVAR 41
31788: PUSH
31789: LD_VAR 0 5
31793: ST_TO_ADDR
// end ;
31794: LD_VAR 0 6
31798: RET
// export function WantPlant ( unit ) ; var task ; begin
31799: LD_INT 0
31801: PPUSH
31802: PPUSH
// result := false ;
31803: LD_ADDR_VAR 0 2
31807: PUSH
31808: LD_INT 0
31810: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31811: LD_ADDR_VAR 0 3
31815: PUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 437
31825: ST_TO_ADDR
// if task then
31826: LD_VAR 0 3
31830: IFFALSE 31858
// if task [ 1 ] [ 1 ] = p then
31832: LD_VAR 0 3
31836: PUSH
31837: LD_INT 1
31839: ARRAY
31840: PUSH
31841: LD_INT 1
31843: ARRAY
31844: PUSH
31845: LD_STRING p
31847: EQUAL
31848: IFFALSE 31858
// result := true ;
31850: LD_ADDR_VAR 0 2
31854: PUSH
31855: LD_INT 1
31857: ST_TO_ADDR
// end ;
31858: LD_VAR 0 2
31862: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31863: LD_INT 0
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
// if pos < 1 then
31869: LD_VAR 0 2
31873: PUSH
31874: LD_INT 1
31876: LESS
31877: IFFALSE 31881
// exit ;
31879: GO 32184
// if pos = 1 then
31881: LD_VAR 0 2
31885: PUSH
31886: LD_INT 1
31888: EQUAL
31889: IFFALSE 31922
// result := Replace ( arr , pos [ 1 ] , value ) else
31891: LD_ADDR_VAR 0 4
31895: PUSH
31896: LD_VAR 0 1
31900: PPUSH
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 1
31908: ARRAY
31909: PPUSH
31910: LD_VAR 0 3
31914: PPUSH
31915: CALL_OW 1
31919: ST_TO_ADDR
31920: GO 32184
// begin tmp := arr ;
31922: LD_ADDR_VAR 0 6
31926: PUSH
31927: LD_VAR 0 1
31931: ST_TO_ADDR
// s_arr := [ tmp ] ;
31932: LD_ADDR_VAR 0 7
31936: PUSH
31937: LD_VAR 0 6
31941: PUSH
31942: EMPTY
31943: LIST
31944: ST_TO_ADDR
// for i = 1 to pos - 1 do
31945: LD_ADDR_VAR 0 5
31949: PUSH
31950: DOUBLE
31951: LD_INT 1
31953: DEC
31954: ST_TO_ADDR
31955: LD_VAR 0 2
31959: PUSH
31960: LD_INT 1
31962: MINUS
31963: PUSH
31964: FOR_TO
31965: IFFALSE 32010
// begin tmp := tmp [ pos [ i ] ] ;
31967: LD_ADDR_VAR 0 6
31971: PUSH
31972: LD_VAR 0 6
31976: PUSH
31977: LD_VAR 0 2
31981: PUSH
31982: LD_VAR 0 5
31986: ARRAY
31987: ARRAY
31988: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31989: LD_ADDR_VAR 0 7
31993: PUSH
31994: LD_VAR 0 7
31998: PUSH
31999: LD_VAR 0 6
32003: PUSH
32004: EMPTY
32005: LIST
32006: ADD
32007: ST_TO_ADDR
// end ;
32008: GO 31964
32010: POP
32011: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32012: LD_ADDR_VAR 0 6
32016: PUSH
32017: LD_VAR 0 6
32021: PPUSH
32022: LD_VAR 0 2
32026: PUSH
32027: LD_VAR 0 2
32031: ARRAY
32032: PPUSH
32033: LD_VAR 0 3
32037: PPUSH
32038: CALL_OW 1
32042: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32043: LD_ADDR_VAR 0 7
32047: PUSH
32048: LD_VAR 0 7
32052: PPUSH
32053: LD_VAR 0 7
32057: PPUSH
32058: LD_VAR 0 6
32062: PPUSH
32063: CALL_OW 1
32067: ST_TO_ADDR
// for i = s_arr downto 2 do
32068: LD_ADDR_VAR 0 5
32072: PUSH
32073: DOUBLE
32074: LD_VAR 0 7
32078: INC
32079: ST_TO_ADDR
32080: LD_INT 2
32082: PUSH
32083: FOR_DOWNTO
32084: IFFALSE 32168
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32086: LD_ADDR_VAR 0 6
32090: PUSH
32091: LD_VAR 0 7
32095: PUSH
32096: LD_VAR 0 5
32100: PUSH
32101: LD_INT 1
32103: MINUS
32104: ARRAY
32105: PPUSH
32106: LD_VAR 0 2
32110: PUSH
32111: LD_VAR 0 5
32115: PUSH
32116: LD_INT 1
32118: MINUS
32119: ARRAY
32120: PPUSH
32121: LD_VAR 0 7
32125: PUSH
32126: LD_VAR 0 5
32130: ARRAY
32131: PPUSH
32132: CALL_OW 1
32136: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32137: LD_ADDR_VAR 0 7
32141: PUSH
32142: LD_VAR 0 7
32146: PPUSH
32147: LD_VAR 0 5
32151: PUSH
32152: LD_INT 1
32154: MINUS
32155: PPUSH
32156: LD_VAR 0 6
32160: PPUSH
32161: CALL_OW 1
32165: ST_TO_ADDR
// end ;
32166: GO 32083
32168: POP
32169: POP
// result := s_arr [ 1 ] ;
32170: LD_ADDR_VAR 0 4
32174: PUSH
32175: LD_VAR 0 7
32179: PUSH
32180: LD_INT 1
32182: ARRAY
32183: ST_TO_ADDR
// end ; end ;
32184: LD_VAR 0 4
32188: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32189: LD_INT 0
32191: PPUSH
32192: PPUSH
// if not list then
32193: LD_VAR 0 1
32197: NOT
32198: IFFALSE 32202
// exit ;
32200: GO 32293
// i := list [ pos1 ] ;
32202: LD_ADDR_VAR 0 5
32206: PUSH
32207: LD_VAR 0 1
32211: PUSH
32212: LD_VAR 0 2
32216: ARRAY
32217: ST_TO_ADDR
// if not i then
32218: LD_VAR 0 5
32222: NOT
32223: IFFALSE 32227
// exit ;
32225: GO 32293
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32227: LD_ADDR_VAR 0 1
32231: PUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: LD_VAR 0 2
32241: PPUSH
32242: LD_VAR 0 1
32246: PUSH
32247: LD_VAR 0 3
32251: ARRAY
32252: PPUSH
32253: CALL_OW 1
32257: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32258: LD_ADDR_VAR 0 1
32262: PUSH
32263: LD_VAR 0 1
32267: PPUSH
32268: LD_VAR 0 3
32272: PPUSH
32273: LD_VAR 0 5
32277: PPUSH
32278: CALL_OW 1
32282: ST_TO_ADDR
// result := list ;
32283: LD_ADDR_VAR 0 4
32287: PUSH
32288: LD_VAR 0 1
32292: ST_TO_ADDR
// end ;
32293: LD_VAR 0 4
32297: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32298: LD_INT 0
32300: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32301: LD_ADDR_VAR 0 5
32305: PUSH
32306: LD_VAR 0 1
32310: PPUSH
32311: CALL_OW 250
32315: PPUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: CALL_OW 251
32325: PPUSH
32326: LD_VAR 0 2
32330: PPUSH
32331: LD_VAR 0 3
32335: PPUSH
32336: LD_VAR 0 4
32340: PPUSH
32341: CALL 32723 0 5
32345: ST_TO_ADDR
// end ;
32346: LD_VAR 0 5
32350: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32351: LD_INT 0
32353: PPUSH
32354: PPUSH
32355: PPUSH
32356: PPUSH
// if not list or not unit then
32357: LD_VAR 0 2
32361: NOT
32362: IFTRUE 32371
32364: PUSH
32365: LD_VAR 0 1
32369: NOT
32370: OR
32371: IFFALSE 32375
// exit ;
32373: GO 32718
// result := [ ] ;
32375: LD_ADDR_VAR 0 5
32379: PUSH
32380: EMPTY
32381: ST_TO_ADDR
// for i in list do
32382: LD_ADDR_VAR 0 6
32386: PUSH
32387: LD_VAR 0 2
32391: PUSH
32392: FOR_IN
32393: IFFALSE 32611
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32395: LD_ADDR_VAR 0 8
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_VAR 0 6
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 6
32418: PUSH
32419: LD_INT 2
32421: ARRAY
32422: PPUSH
32423: CALL_OW 297
32427: ST_TO_ADDR
// if not Count ( result ) then
32428: LD_VAR 0 5
32432: PPUSH
32433: CALL 28979 0 1
32437: NOT
32438: IFFALSE 32471
// begin result := Join ( result , [ i , tmp ] ) ;
32440: LD_ADDR_VAR 0 5
32444: PUSH
32445: LD_VAR 0 5
32449: PPUSH
32450: LD_VAR 0 6
32454: PUSH
32455: LD_VAR 0 8
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PPUSH
32464: CALL 64911 0 2
32468: ST_TO_ADDR
// continue ;
32469: GO 32392
// end ; if result [ result ] [ 2 ] <= tmp then
32471: LD_VAR 0 5
32475: PUSH
32476: LD_VAR 0 5
32480: ARRAY
32481: PUSH
32482: LD_INT 2
32484: ARRAY
32485: PUSH
32486: LD_VAR 0 8
32490: LESSEQUAL
32491: IFFALSE 32524
// result := Join ( result , [ i , tmp ] ) else
32493: LD_ADDR_VAR 0 5
32497: PUSH
32498: LD_VAR 0 5
32502: PPUSH
32503: LD_VAR 0 6
32507: PUSH
32508: LD_VAR 0 8
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PPUSH
32517: CALL 64911 0 2
32521: ST_TO_ADDR
32522: GO 32609
// begin for j := 1 to Count ( result ) do
32524: LD_ADDR_VAR 0 7
32528: PUSH
32529: DOUBLE
32530: LD_INT 1
32532: DEC
32533: ST_TO_ADDR
32534: LD_VAR 0 5
32538: PPUSH
32539: CALL 28979 0 1
32543: PUSH
32544: FOR_TO
32545: IFFALSE 32607
// begin if tmp < result [ j ] [ 2 ] then
32547: LD_VAR 0 8
32551: PUSH
32552: LD_VAR 0 5
32556: PUSH
32557: LD_VAR 0 7
32561: ARRAY
32562: PUSH
32563: LD_INT 2
32565: ARRAY
32566: LESS
32567: IFFALSE 32605
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32569: LD_ADDR_VAR 0 5
32573: PUSH
32574: LD_VAR 0 5
32578: PPUSH
32579: LD_VAR 0 7
32583: PPUSH
32584: LD_VAR 0 6
32588: PUSH
32589: LD_VAR 0 8
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PPUSH
32598: CALL_OW 2
32602: ST_TO_ADDR
// break ;
32603: GO 32607
// end ; end ;
32605: GO 32544
32607: POP
32608: POP
// end ; end ;
32609: GO 32392
32611: POP
32612: POP
// if result and not asc then
32613: LD_VAR 0 5
32617: IFFALSE 32626
32619: PUSH
32620: LD_VAR 0 3
32624: NOT
32625: AND
32626: IFFALSE 32643
// result := ReverseArray ( result ) ;
32628: LD_ADDR_VAR 0 5
32632: PUSH
32633: LD_VAR 0 5
32637: PPUSH
32638: CALL 60001 0 1
32642: ST_TO_ADDR
// tmp := [ ] ;
32643: LD_ADDR_VAR 0 8
32647: PUSH
32648: EMPTY
32649: ST_TO_ADDR
// if mode then
32650: LD_VAR 0 4
32654: IFFALSE 32718
// begin for i := 1 to result do
32656: LD_ADDR_VAR 0 6
32660: PUSH
32661: DOUBLE
32662: LD_INT 1
32664: DEC
32665: ST_TO_ADDR
32666: LD_VAR 0 5
32670: PUSH
32671: FOR_TO
32672: IFFALSE 32706
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32674: LD_ADDR_VAR 0 8
32678: PUSH
32679: LD_VAR 0 8
32683: PPUSH
32684: LD_VAR 0 5
32688: PUSH
32689: LD_VAR 0 6
32693: ARRAY
32694: PUSH
32695: LD_INT 1
32697: ARRAY
32698: PPUSH
32699: CALL 64911 0 2
32703: ST_TO_ADDR
32704: GO 32671
32706: POP
32707: POP
// result := tmp ;
32708: LD_ADDR_VAR 0 5
32712: PUSH
32713: LD_VAR 0 8
32717: ST_TO_ADDR
// end ; end ;
32718: LD_VAR 0 5
32722: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32723: LD_INT 0
32725: PPUSH
32726: PPUSH
32727: PPUSH
32728: PPUSH
// if not list then
32729: LD_VAR 0 3
32733: NOT
32734: IFFALSE 32738
// exit ;
32736: GO 33128
// result := [ ] ;
32738: LD_ADDR_VAR 0 6
32742: PUSH
32743: EMPTY
32744: ST_TO_ADDR
// for i in list do
32745: LD_ADDR_VAR 0 7
32749: PUSH
32750: LD_VAR 0 3
32754: PUSH
32755: FOR_IN
32756: IFFALSE 32958
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32758: LD_ADDR_VAR 0 9
32762: PUSH
32763: LD_VAR 0 7
32767: PPUSH
32768: LD_VAR 0 1
32772: PPUSH
32773: LD_VAR 0 2
32777: PPUSH
32778: CALL_OW 297
32782: ST_TO_ADDR
// if not result then
32783: LD_VAR 0 6
32787: NOT
32788: IFFALSE 32814
// result := [ [ i , tmp ] ] else
32790: LD_ADDR_VAR 0 6
32794: PUSH
32795: LD_VAR 0 7
32799: PUSH
32800: LD_VAR 0 9
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: ST_TO_ADDR
32812: GO 32956
// begin if result [ result ] [ 2 ] <= tmp then
32814: LD_VAR 0 6
32818: PUSH
32819: LD_VAR 0 6
32823: ARRAY
32824: PUSH
32825: LD_INT 2
32827: ARRAY
32828: PUSH
32829: LD_VAR 0 9
32833: LESSEQUAL
32834: IFFALSE 32876
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32836: LD_ADDR_VAR 0 6
32840: PUSH
32841: LD_VAR 0 6
32845: PPUSH
32846: LD_VAR 0 6
32850: PUSH
32851: LD_INT 1
32853: PLUS
32854: PPUSH
32855: LD_VAR 0 7
32859: PUSH
32860: LD_VAR 0 9
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PPUSH
32869: CALL_OW 2
32873: ST_TO_ADDR
32874: GO 32956
// for j := 1 to result do
32876: LD_ADDR_VAR 0 8
32880: PUSH
32881: DOUBLE
32882: LD_INT 1
32884: DEC
32885: ST_TO_ADDR
32886: LD_VAR 0 6
32890: PUSH
32891: FOR_TO
32892: IFFALSE 32954
// begin if tmp < result [ j ] [ 2 ] then
32894: LD_VAR 0 9
32898: PUSH
32899: LD_VAR 0 6
32903: PUSH
32904: LD_VAR 0 8
32908: ARRAY
32909: PUSH
32910: LD_INT 2
32912: ARRAY
32913: LESS
32914: IFFALSE 32952
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32916: LD_ADDR_VAR 0 6
32920: PUSH
32921: LD_VAR 0 6
32925: PPUSH
32926: LD_VAR 0 8
32930: PPUSH
32931: LD_VAR 0 7
32935: PUSH
32936: LD_VAR 0 9
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PPUSH
32945: CALL_OW 2
32949: ST_TO_ADDR
// break ;
32950: GO 32954
// end ; end ;
32952: GO 32891
32954: POP
32955: POP
// end ; end ;
32956: GO 32755
32958: POP
32959: POP
// if result and not asc then
32960: LD_VAR 0 6
32964: IFFALSE 32973
32966: PUSH
32967: LD_VAR 0 4
32971: NOT
32972: AND
32973: IFFALSE 33048
// begin tmp := result ;
32975: LD_ADDR_VAR 0 9
32979: PUSH
32980: LD_VAR 0 6
32984: ST_TO_ADDR
// for i = tmp downto 1 do
32985: LD_ADDR_VAR 0 7
32989: PUSH
32990: DOUBLE
32991: LD_VAR 0 9
32995: INC
32996: ST_TO_ADDR
32997: LD_INT 1
32999: PUSH
33000: FOR_DOWNTO
33001: IFFALSE 33046
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33003: LD_ADDR_VAR 0 6
33007: PUSH
33008: LD_VAR 0 6
33012: PPUSH
33013: LD_VAR 0 9
33017: PUSH
33018: LD_VAR 0 7
33022: MINUS
33023: PUSH
33024: LD_INT 1
33026: PLUS
33027: PPUSH
33028: LD_VAR 0 9
33032: PUSH
33033: LD_VAR 0 7
33037: ARRAY
33038: PPUSH
33039: CALL_OW 1
33043: ST_TO_ADDR
33044: GO 33000
33046: POP
33047: POP
// end ; tmp := [ ] ;
33048: LD_ADDR_VAR 0 9
33052: PUSH
33053: EMPTY
33054: ST_TO_ADDR
// if mode then
33055: LD_VAR 0 5
33059: IFFALSE 33128
// begin for i = 1 to result do
33061: LD_ADDR_VAR 0 7
33065: PUSH
33066: DOUBLE
33067: LD_INT 1
33069: DEC
33070: ST_TO_ADDR
33071: LD_VAR 0 6
33075: PUSH
33076: FOR_TO
33077: IFFALSE 33116
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33079: LD_ADDR_VAR 0 9
33083: PUSH
33084: LD_VAR 0 9
33088: PPUSH
33089: LD_VAR 0 7
33093: PPUSH
33094: LD_VAR 0 6
33098: PUSH
33099: LD_VAR 0 7
33103: ARRAY
33104: PUSH
33105: LD_INT 1
33107: ARRAY
33108: PPUSH
33109: CALL_OW 1
33113: ST_TO_ADDR
33114: GO 33076
33116: POP
33117: POP
// result := tmp ;
33118: LD_ADDR_VAR 0 6
33122: PUSH
33123: LD_VAR 0 9
33127: ST_TO_ADDR
// end ; end ;
33128: LD_VAR 0 6
33132: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33133: LD_INT 0
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33141: LD_ADDR_VAR 0 5
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: EMPTY
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: ST_TO_ADDR
// if not x or not y then
33163: LD_VAR 0 2
33167: NOT
33168: IFTRUE 33177
33170: PUSH
33171: LD_VAR 0 3
33175: NOT
33176: OR
33177: IFFALSE 33181
// exit ;
33179: GO 34837
// if not range then
33181: LD_VAR 0 4
33185: NOT
33186: IFFALSE 33196
// range := 10 ;
33188: LD_ADDR_VAR 0 4
33192: PUSH
33193: LD_INT 10
33195: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33196: LD_ADDR_VAR 0 8
33200: PUSH
33201: LD_INT 81
33203: PUSH
33204: LD_VAR 0 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 92
33215: PUSH
33216: LD_VAR 0 2
33220: PUSH
33221: LD_VAR 0 3
33225: PUSH
33226: LD_VAR 0 4
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: LD_INT 21
33242: PUSH
33243: LD_INT 3
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: PPUSH
33259: CALL_OW 69
33263: ST_TO_ADDR
// if not tmp then
33264: LD_VAR 0 8
33268: NOT
33269: IFFALSE 33273
// exit ;
33271: GO 34837
// for i in tmp do
33273: LD_ADDR_VAR 0 6
33277: PUSH
33278: LD_VAR 0 8
33282: PUSH
33283: FOR_IN
33284: IFFALSE 34812
// begin points := [ 0 , 0 , 0 ] ;
33286: LD_ADDR_VAR 0 9
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: LIST
33304: ST_TO_ADDR
// bpoints := 1 ;
33305: LD_ADDR_VAR 0 10
33309: PUSH
33310: LD_INT 1
33312: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33313: LD_VAR 0 6
33317: PPUSH
33318: CALL_OW 247
33322: PUSH
33323: LD_INT 1
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33913
33331: POP
// begin if GetClass ( i ) = 1 then
33332: LD_VAR 0 6
33336: PPUSH
33337: CALL_OW 257
33341: PUSH
33342: LD_INT 1
33344: EQUAL
33345: IFFALSE 33366
// points := [ 10 , 5 , 3 ] ;
33347: LD_ADDR_VAR 0 9
33351: PUSH
33352: LD_INT 10
33354: PUSH
33355: LD_INT 5
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33366: LD_VAR 0 6
33370: PPUSH
33371: CALL_OW 257
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: LD_INT 4
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: IN
33390: IFFALSE 33411
// points := [ 3 , 2 , 1 ] ;
33392: LD_ADDR_VAR 0 9
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33411: LD_VAR 0 6
33415: PPUSH
33416: CALL_OW 257
33420: PUSH
33421: LD_INT 5
33423: EQUAL
33424: IFFALSE 33445
// points := [ 130 , 5 , 2 ] ;
33426: LD_ADDR_VAR 0 9
33430: PUSH
33431: LD_INT 130
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33445: LD_VAR 0 6
33449: PPUSH
33450: CALL_OW 257
33454: PUSH
33455: LD_INT 8
33457: EQUAL
33458: IFFALSE 33479
// points := [ 35 , 35 , 30 ] ;
33460: LD_ADDR_VAR 0 9
33464: PUSH
33465: LD_INT 35
33467: PUSH
33468: LD_INT 35
33470: PUSH
33471: LD_INT 30
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33479: LD_VAR 0 6
33483: PPUSH
33484: CALL_OW 257
33488: PUSH
33489: LD_INT 9
33491: EQUAL
33492: IFFALSE 33513
// points := [ 20 , 55 , 40 ] ;
33494: LD_ADDR_VAR 0 9
33498: PUSH
33499: LD_INT 20
33501: PUSH
33502: LD_INT 55
33504: PUSH
33505: LD_INT 40
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33513: LD_VAR 0 6
33517: PPUSH
33518: CALL_OW 257
33522: PUSH
33523: LD_INT 12
33525: PUSH
33526: LD_INT 16
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: IN
33533: IFFALSE 33554
// points := [ 5 , 3 , 2 ] ;
33535: LD_ADDR_VAR 0 9
33539: PUSH
33540: LD_INT 5
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33554: LD_VAR 0 6
33558: PPUSH
33559: CALL_OW 257
33563: PUSH
33564: LD_INT 17
33566: EQUAL
33567: IFFALSE 33588
// points := [ 100 , 50 , 75 ] ;
33569: LD_ADDR_VAR 0 9
33573: PUSH
33574: LD_INT 100
33576: PUSH
33577: LD_INT 50
33579: PUSH
33580: LD_INT 75
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: LIST
33587: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33588: LD_VAR 0 6
33592: PPUSH
33593: CALL_OW 257
33597: PUSH
33598: LD_INT 15
33600: EQUAL
33601: IFFALSE 33622
// points := [ 10 , 5 , 3 ] ;
33603: LD_ADDR_VAR 0 9
33607: PUSH
33608: LD_INT 10
33610: PUSH
33611: LD_INT 5
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: LIST
33621: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33622: LD_VAR 0 6
33626: PPUSH
33627: CALL_OW 257
33631: PUSH
33632: LD_INT 14
33634: EQUAL
33635: IFFALSE 33656
// points := [ 10 , 0 , 0 ] ;
33637: LD_ADDR_VAR 0 9
33641: PUSH
33642: LD_INT 10
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33656: LD_VAR 0 6
33660: PPUSH
33661: CALL_OW 257
33665: PUSH
33666: LD_INT 11
33668: EQUAL
33669: IFFALSE 33690
// points := [ 30 , 10 , 5 ] ;
33671: LD_ADDR_VAR 0 9
33675: PUSH
33676: LD_INT 30
33678: PUSH
33679: LD_INT 10
33681: PUSH
33682: LD_INT 5
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33690: LD_VAR 0 1
33694: PPUSH
33695: LD_INT 5
33697: PPUSH
33698: CALL_OW 321
33702: PUSH
33703: LD_INT 2
33705: EQUAL
33706: IFFALSE 33723
// bpoints := bpoints * 1.8 ;
33708: LD_ADDR_VAR 0 10
33712: PUSH
33713: LD_VAR 0 10
33717: PUSH
33718: LD_REAL  1.80000000000000E+0000
33721: MUL
33722: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33723: LD_VAR 0 6
33727: PPUSH
33728: CALL_OW 257
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: LD_INT 4
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: IN
33751: IFFALSE 33771
33753: PUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: LD_INT 51
33761: PPUSH
33762: CALL_OW 321
33766: PUSH
33767: LD_INT 2
33769: EQUAL
33770: AND
33771: IFFALSE 33788
// bpoints := bpoints * 1.2 ;
33773: LD_ADDR_VAR 0 10
33777: PUSH
33778: LD_VAR 0 10
33782: PUSH
33783: LD_REAL  1.20000000000000E+0000
33786: MUL
33787: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33788: LD_VAR 0 6
33792: PPUSH
33793: CALL_OW 257
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: LD_INT 7
33803: PUSH
33804: LD_INT 9
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: IN
33812: IFFALSE 33832
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: LD_INT 52
33822: PPUSH
33823: CALL_OW 321
33827: PUSH
33828: LD_INT 2
33830: EQUAL
33831: AND
33832: IFFALSE 33849
// bpoints := bpoints * 1.5 ;
33834: LD_ADDR_VAR 0 10
33838: PUSH
33839: LD_VAR 0 10
33843: PUSH
33844: LD_REAL  1.50000000000000E+0000
33847: MUL
33848: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33849: LD_VAR 0 1
33853: PPUSH
33854: LD_INT 66
33856: PPUSH
33857: CALL_OW 321
33861: PUSH
33862: LD_INT 2
33864: EQUAL
33865: IFFALSE 33882
// bpoints := bpoints * 1.1 ;
33867: LD_ADDR_VAR 0 10
33871: PUSH
33872: LD_VAR 0 10
33876: PUSH
33877: LD_REAL  1.10000000000000E+0000
33880: MUL
33881: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33882: LD_ADDR_VAR 0 10
33886: PUSH
33887: LD_VAR 0 10
33891: PUSH
33892: LD_VAR 0 6
33896: PPUSH
33897: LD_INT 1
33899: PPUSH
33900: CALL_OW 259
33904: PUSH
33905: LD_REAL  1.15000000000000E+0000
33908: MUL
33909: MUL
33910: ST_TO_ADDR
// end ; unit_vehicle :
33911: GO 34741
33913: LD_INT 2
33915: DOUBLE
33916: EQUAL
33917: IFTRUE 33921
33919: GO 34729
33921: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33922: LD_VAR 0 6
33926: PPUSH
33927: CALL_OW 264
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 42
33937: PUSH
33938: LD_INT 24
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: IN
33946: IFFALSE 33967
// points := [ 25 , 5 , 3 ] ;
33948: LD_ADDR_VAR 0 9
33952: PUSH
33953: LD_INT 25
33955: PUSH
33956: LD_INT 5
33958: PUSH
33959: LD_INT 3
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33967: LD_VAR 0 6
33971: PPUSH
33972: CALL_OW 264
33976: PUSH
33977: LD_INT 4
33979: PUSH
33980: LD_INT 43
33982: PUSH
33983: LD_INT 25
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: LIST
33990: IN
33991: IFFALSE 34012
// points := [ 40 , 15 , 5 ] ;
33993: LD_ADDR_VAR 0 9
33997: PUSH
33998: LD_INT 40
34000: PUSH
34001: LD_INT 15
34003: PUSH
34004: LD_INT 5
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34012: LD_VAR 0 6
34016: PPUSH
34017: CALL_OW 264
34021: PUSH
34022: LD_INT 3
34024: PUSH
34025: LD_INT 23
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: IN
34032: IFFALSE 34053
// points := [ 7 , 25 , 8 ] ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_INT 7
34041: PUSH
34042: LD_INT 25
34044: PUSH
34045: LD_INT 8
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34053: LD_VAR 0 6
34057: PPUSH
34058: CALL_OW 264
34062: PUSH
34063: LD_INT 5
34065: PUSH
34066: LD_INT 27
34068: PUSH
34069: LD_INT 44
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: IN
34077: IFFALSE 34098
// points := [ 14 , 50 , 16 ] ;
34079: LD_ADDR_VAR 0 9
34083: PUSH
34084: LD_INT 14
34086: PUSH
34087: LD_INT 50
34089: PUSH
34090: LD_INT 16
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: LIST
34097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34098: LD_VAR 0 6
34102: PPUSH
34103: CALL_OW 264
34107: PUSH
34108: LD_INT 6
34110: PUSH
34111: LD_INT 46
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: IN
34118: IFFALSE 34139
// points := [ 32 , 120 , 70 ] ;
34120: LD_ADDR_VAR 0 9
34124: PUSH
34125: LD_INT 32
34127: PUSH
34128: LD_INT 120
34130: PUSH
34131: LD_INT 70
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34139: LD_VAR 0 6
34143: PPUSH
34144: CALL_OW 264
34148: PUSH
34149: LD_INT 7
34151: PUSH
34152: LD_INT 28
34154: PUSH
34155: LD_INT 45
34157: PUSH
34158: LD_INT 92
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: IN
34167: IFFALSE 34188
// points := [ 35 , 20 , 45 ] ;
34169: LD_ADDR_VAR 0 9
34173: PUSH
34174: LD_INT 35
34176: PUSH
34177: LD_INT 20
34179: PUSH
34180: LD_INT 45
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34188: LD_VAR 0 6
34192: PPUSH
34193: CALL_OW 264
34197: PUSH
34198: LD_INT 47
34200: PUSH
34201: EMPTY
34202: LIST
34203: IN
34204: IFFALSE 34225
// points := [ 67 , 45 , 75 ] ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_INT 67
34213: PUSH
34214: LD_INT 45
34216: PUSH
34217: LD_INT 75
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 264
34234: PUSH
34235: LD_INT 26
34237: PUSH
34238: EMPTY
34239: LIST
34240: IN
34241: IFFALSE 34262
// points := [ 120 , 30 , 80 ] ;
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_INT 120
34250: PUSH
34251: LD_INT 30
34253: PUSH
34254: LD_INT 80
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34262: LD_VAR 0 6
34266: PPUSH
34267: CALL_OW 264
34271: PUSH
34272: LD_INT 22
34274: PUSH
34275: EMPTY
34276: LIST
34277: IN
34278: IFFALSE 34299
// points := [ 40 , 1 , 1 ] ;
34280: LD_ADDR_VAR 0 9
34284: PUSH
34285: LD_INT 40
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34299: LD_VAR 0 6
34303: PPUSH
34304: CALL_OW 264
34308: PUSH
34309: LD_INT 29
34311: PUSH
34312: EMPTY
34313: LIST
34314: IN
34315: IFFALSE 34336
// points := [ 70 , 200 , 400 ] ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_INT 70
34324: PUSH
34325: LD_INT 200
34327: PUSH
34328: LD_INT 400
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34336: LD_VAR 0 6
34340: PPUSH
34341: CALL_OW 264
34345: PUSH
34346: LD_INT 14
34348: PUSH
34349: LD_INT 53
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: IN
34356: IFFALSE 34377
// points := [ 40 , 10 , 20 ] ;
34358: LD_ADDR_VAR 0 9
34362: PUSH
34363: LD_INT 40
34365: PUSH
34366: LD_INT 10
34368: PUSH
34369: LD_INT 20
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34377: LD_VAR 0 6
34381: PPUSH
34382: CALL_OW 264
34386: PUSH
34387: LD_INT 9
34389: PUSH
34390: EMPTY
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 5 , 70 , 20 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 5
34402: PUSH
34403: LD_INT 70
34405: PUSH
34406: LD_INT 20
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 264
34423: PUSH
34424: LD_INT 10
34426: PUSH
34427: EMPTY
34428: LIST
34429: IN
34430: IFFALSE 34451
// points := [ 35 , 110 , 70 ] ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_INT 35
34439: PUSH
34440: LD_INT 110
34442: PUSH
34443: LD_INT 70
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 265
34460: PUSH
34461: LD_INT 25
34463: EQUAL
34464: IFFALSE 34485
// points := [ 80 , 65 , 100 ] ;
34466: LD_ADDR_VAR 0 9
34470: PUSH
34471: LD_INT 80
34473: PUSH
34474: LD_INT 65
34476: PUSH
34477: LD_INT 100
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34485: LD_VAR 0 6
34489: PPUSH
34490: CALL_OW 263
34494: PUSH
34495: LD_INT 1
34497: EQUAL
34498: IFFALSE 34533
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34500: LD_ADDR_VAR 0 10
34504: PUSH
34505: LD_VAR 0 10
34509: PUSH
34510: LD_VAR 0 6
34514: PPUSH
34515: CALL_OW 311
34519: PPUSH
34520: LD_INT 3
34522: PPUSH
34523: CALL_OW 259
34527: PUSH
34528: LD_INT 4
34530: MUL
34531: MUL
34532: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34533: LD_VAR 0 6
34537: PPUSH
34538: CALL_OW 263
34542: PUSH
34543: LD_INT 2
34545: EQUAL
34546: IFFALSE 34597
// begin j := IsControledBy ( i ) ;
34548: LD_ADDR_VAR 0 7
34552: PUSH
34553: LD_VAR 0 6
34557: PPUSH
34558: CALL_OW 312
34562: ST_TO_ADDR
// if j then
34563: LD_VAR 0 7
34567: IFFALSE 34597
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34569: LD_ADDR_VAR 0 10
34573: PUSH
34574: LD_VAR 0 10
34578: PUSH
34579: LD_VAR 0 7
34583: PPUSH
34584: LD_INT 3
34586: PPUSH
34587: CALL_OW 259
34591: PUSH
34592: LD_INT 3
34594: MUL
34595: MUL
34596: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34597: LD_VAR 0 6
34601: PPUSH
34602: CALL_OW 264
34606: PUSH
34607: LD_INT 5
34609: PUSH
34610: LD_INT 6
34612: PUSH
34613: LD_INT 46
34615: PUSH
34616: LD_INT 44
34618: PUSH
34619: LD_INT 47
34621: PUSH
34622: LD_INT 45
34624: PUSH
34625: LD_INT 28
34627: PUSH
34628: LD_INT 7
34630: PUSH
34631: LD_INT 27
34633: PUSH
34634: LD_INT 29
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: IN
34649: IFFALSE 34669
34651: PUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: LD_INT 52
34659: PPUSH
34660: CALL_OW 321
34664: PUSH
34665: LD_INT 2
34667: EQUAL
34668: AND
34669: IFFALSE 34686
// bpoints := bpoints * 1.2 ;
34671: LD_ADDR_VAR 0 10
34675: PUSH
34676: LD_VAR 0 10
34680: PUSH
34681: LD_REAL  1.20000000000000E+0000
34684: MUL
34685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34686: LD_VAR 0 6
34690: PPUSH
34691: CALL_OW 264
34695: PUSH
34696: LD_INT 6
34698: PUSH
34699: LD_INT 46
34701: PUSH
34702: LD_INT 47
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: IN
34710: IFFALSE 34727
// bpoints := bpoints * 1.2 ;
34712: LD_ADDR_VAR 0 10
34716: PUSH
34717: LD_VAR 0 10
34721: PUSH
34722: LD_REAL  1.20000000000000E+0000
34725: MUL
34726: ST_TO_ADDR
// end ; unit_building :
34727: GO 34741
34729: LD_INT 3
34731: DOUBLE
34732: EQUAL
34733: IFTRUE 34737
34735: GO 34740
34737: POP
// ; end ;
34738: GO 34741
34740: POP
// for j = 1 to 3 do
34741: LD_ADDR_VAR 0 7
34745: PUSH
34746: DOUBLE
34747: LD_INT 1
34749: DEC
34750: ST_TO_ADDR
34751: LD_INT 3
34753: PUSH
34754: FOR_TO
34755: IFFALSE 34808
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34757: LD_ADDR_VAR 0 5
34761: PUSH
34762: LD_VAR 0 5
34766: PPUSH
34767: LD_VAR 0 7
34771: PPUSH
34772: LD_VAR 0 5
34776: PUSH
34777: LD_VAR 0 7
34781: ARRAY
34782: PUSH
34783: LD_VAR 0 9
34787: PUSH
34788: LD_VAR 0 7
34792: ARRAY
34793: PUSH
34794: LD_VAR 0 10
34798: MUL
34799: PLUS
34800: PPUSH
34801: CALL_OW 1
34805: ST_TO_ADDR
34806: GO 34754
34808: POP
34809: POP
// end ;
34810: GO 33283
34812: POP
34813: POP
// result := Replace ( result , 4 , tmp ) ;
34814: LD_ADDR_VAR 0 5
34818: PUSH
34819: LD_VAR 0 5
34823: PPUSH
34824: LD_INT 4
34826: PPUSH
34827: LD_VAR 0 8
34831: PPUSH
34832: CALL_OW 1
34836: ST_TO_ADDR
// end ;
34837: LD_VAR 0 5
34841: RET
// export function DangerAtRange ( unit , range ) ; begin
34842: LD_INT 0
34844: PPUSH
// if not unit then
34845: LD_VAR 0 1
34849: NOT
34850: IFFALSE 34854
// exit ;
34852: GO 34899
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34854: LD_ADDR_VAR 0 3
34858: PUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 255
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 250
34878: PPUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 251
34888: PPUSH
34889: LD_VAR 0 2
34893: PPUSH
34894: CALL 33133 0 4
34898: ST_TO_ADDR
// end ;
34899: LD_VAR 0 3
34903: RET
// export function DangerInArea ( side , area ) ; begin
34904: LD_INT 0
34906: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_VAR 0 2
34916: PPUSH
34917: LD_INT 81
34919: PUSH
34920: LD_VAR 0 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PPUSH
34929: CALL_OW 70
34933: ST_TO_ADDR
// end ;
34934: LD_VAR 0 3
34938: RET
// export function IsExtension ( b ) ; begin
34939: LD_INT 0
34941: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34942: LD_ADDR_VAR 0 2
34946: PUSH
34947: LD_VAR 0 1
34951: PUSH
34952: LD_INT 23
34954: PUSH
34955: LD_INT 20
34957: PUSH
34958: LD_INT 22
34960: PUSH
34961: LD_INT 17
34963: PUSH
34964: LD_INT 24
34966: PUSH
34967: LD_INT 21
34969: PUSH
34970: LD_INT 19
34972: PUSH
34973: LD_INT 16
34975: PUSH
34976: LD_INT 25
34978: PUSH
34979: LD_INT 18
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: IN
34994: ST_TO_ADDR
// end ;
34995: LD_VAR 0 2
34999: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35000: LD_INT 0
35002: PPUSH
35003: PPUSH
35004: PPUSH
// result := [ ] ;
35005: LD_ADDR_VAR 0 4
35009: PUSH
35010: EMPTY
35011: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35012: LD_ADDR_VAR 0 5
35016: PUSH
35017: LD_VAR 0 2
35021: PPUSH
35022: LD_INT 21
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PPUSH
35032: CALL_OW 70
35036: ST_TO_ADDR
// if not tmp then
35037: LD_VAR 0 5
35041: NOT
35042: IFFALSE 35046
// exit ;
35044: GO 35110
// if checkLink then
35046: LD_VAR 0 3
35050: IFFALSE 35100
// begin for i in tmp do
35052: LD_ADDR_VAR 0 6
35056: PUSH
35057: LD_VAR 0 5
35061: PUSH
35062: FOR_IN
35063: IFFALSE 35098
// if GetBase ( i ) <> base then
35065: LD_VAR 0 6
35069: PPUSH
35070: CALL_OW 274
35074: PUSH
35075: LD_VAR 0 1
35079: NONEQUAL
35080: IFFALSE 35096
// ComLinkToBase ( base , i ) ;
35082: LD_VAR 0 1
35086: PPUSH
35087: LD_VAR 0 6
35091: PPUSH
35092: CALL_OW 169
35096: GO 35062
35098: POP
35099: POP
// end ; result := tmp ;
35100: LD_ADDR_VAR 0 4
35104: PUSH
35105: LD_VAR 0 5
35109: ST_TO_ADDR
// end ;
35110: LD_VAR 0 4
35114: RET
// export function ComComplete ( units , b ) ; var i ; begin
35115: LD_INT 0
35117: PPUSH
35118: PPUSH
// if not units then
35119: LD_VAR 0 1
35123: NOT
35124: IFFALSE 35128
// exit ;
35126: GO 35218
// for i in units do
35128: LD_ADDR_VAR 0 4
35132: PUSH
35133: LD_VAR 0 1
35137: PUSH
35138: FOR_IN
35139: IFFALSE 35216
// if BuildingStatus ( b ) = bs_build then
35141: LD_VAR 0 2
35145: PPUSH
35146: CALL_OW 461
35150: PUSH
35151: LD_INT 1
35153: EQUAL
35154: IFFALSE 35214
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35156: LD_VAR 0 4
35160: PPUSH
35161: LD_STRING h
35163: PUSH
35164: LD_VAR 0 2
35168: PPUSH
35169: CALL_OW 250
35173: PUSH
35174: LD_VAR 0 2
35178: PPUSH
35179: CALL_OW 251
35183: PUSH
35184: LD_VAR 0 2
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: PPUSH
35210: CALL_OW 446
35214: GO 35138
35216: POP
35217: POP
// end ;
35218: LD_VAR 0 3
35222: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35223: LD_INT 0
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35231: LD_VAR 0 1
35235: NOT
35236: IFTRUE 35253
35238: PUSH
35239: LD_VAR 0 1
35243: PPUSH
35244: CALL_OW 263
35248: PUSH
35249: LD_INT 2
35251: NONEQUAL
35252: OR
35253: IFFALSE 35257
// exit ;
35255: GO 35573
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35257: LD_ADDR_VAR 0 6
35261: PUSH
35262: LD_INT 22
35264: PUSH
35265: LD_VAR 0 1
35269: PPUSH
35270: CALL_OW 255
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 30
35284: PUSH
35285: LD_INT 36
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 34
35294: PUSH
35295: LD_INT 31
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 69
35315: ST_TO_ADDR
// if not tmp then
35316: LD_VAR 0 6
35320: NOT
35321: IFFALSE 35325
// exit ;
35323: GO 35573
// result := [ ] ;
35325: LD_ADDR_VAR 0 2
35329: PUSH
35330: EMPTY
35331: ST_TO_ADDR
// for i in tmp do
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_VAR 0 6
35341: PUSH
35342: FOR_IN
35343: IFFALSE 35414
// begin t := UnitsInside ( i ) ;
35345: LD_ADDR_VAR 0 4
35349: PUSH
35350: LD_VAR 0 3
35354: PPUSH
35355: CALL_OW 313
35359: ST_TO_ADDR
// if t then
35360: LD_VAR 0 4
35364: IFFALSE 35412
// for j in t do
35366: LD_ADDR_VAR 0 7
35370: PUSH
35371: LD_VAR 0 4
35375: PUSH
35376: FOR_IN
35377: IFFALSE 35410
// result := Replace ( result , result + 1 , j ) ;
35379: LD_ADDR_VAR 0 2
35383: PUSH
35384: LD_VAR 0 2
35388: PPUSH
35389: LD_VAR 0 2
35393: PUSH
35394: LD_INT 1
35396: PLUS
35397: PPUSH
35398: LD_VAR 0 7
35402: PPUSH
35403: CALL_OW 1
35407: ST_TO_ADDR
35408: GO 35376
35410: POP
35411: POP
// end ;
35412: GO 35342
35414: POP
35415: POP
// if not result then
35416: LD_VAR 0 2
35420: NOT
35421: IFFALSE 35425
// exit ;
35423: GO 35573
// mech := result [ 1 ] ;
35425: LD_ADDR_VAR 0 5
35429: PUSH
35430: LD_VAR 0 2
35434: PUSH
35435: LD_INT 1
35437: ARRAY
35438: ST_TO_ADDR
// if result > 1 then
35439: LD_VAR 0 2
35443: PUSH
35444: LD_INT 1
35446: GREATER
35447: IFFALSE 35559
// begin for i = 2 to result do
35449: LD_ADDR_VAR 0 3
35453: PUSH
35454: DOUBLE
35455: LD_INT 2
35457: DEC
35458: ST_TO_ADDR
35459: LD_VAR 0 2
35463: PUSH
35464: FOR_TO
35465: IFFALSE 35557
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35467: LD_ADDR_VAR 0 4
35471: PUSH
35472: LD_VAR 0 2
35476: PUSH
35477: LD_VAR 0 3
35481: ARRAY
35482: PPUSH
35483: LD_INT 3
35485: PPUSH
35486: CALL_OW 259
35490: PUSH
35491: LD_VAR 0 2
35495: PUSH
35496: LD_VAR 0 3
35500: ARRAY
35501: PPUSH
35502: CALL_OW 432
35506: MINUS
35507: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35508: LD_VAR 0 4
35512: PUSH
35513: LD_VAR 0 5
35517: PPUSH
35518: LD_INT 3
35520: PPUSH
35521: CALL_OW 259
35525: PUSH
35526: LD_VAR 0 5
35530: PPUSH
35531: CALL_OW 432
35535: MINUS
35536: GREATEREQUAL
35537: IFFALSE 35555
// mech := result [ i ] ;
35539: LD_ADDR_VAR 0 5
35543: PUSH
35544: LD_VAR 0 2
35548: PUSH
35549: LD_VAR 0 3
35553: ARRAY
35554: ST_TO_ADDR
// end ;
35555: GO 35464
35557: POP
35558: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35559: LD_VAR 0 1
35563: PPUSH
35564: LD_VAR 0 5
35568: PPUSH
35569: CALL_OW 135
// end ;
35573: LD_VAR 0 2
35577: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35578: LD_INT 0
35580: PPUSH
35581: PPUSH
35582: PPUSH
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
// result := [ ] ;
35593: LD_ADDR_VAR 0 7
35597: PUSH
35598: EMPTY
35599: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 266
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: IN
35620: NOT
35621: IFFALSE 35625
// exit ;
35623: GO 37265
// if name then
35625: LD_VAR 0 3
35629: IFFALSE 35645
// SetBName ( base_dep , name ) ;
35631: LD_VAR 0 1
35635: PPUSH
35636: LD_VAR 0 3
35640: PPUSH
35641: CALL_OW 500
// base := GetBase ( base_dep ) ;
35645: LD_ADDR_VAR 0 15
35649: PUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: CALL_OW 274
35659: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35660: LD_ADDR_VAR 0 16
35664: PUSH
35665: LD_VAR 0 1
35669: PPUSH
35670: CALL_OW 255
35674: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35675: LD_ADDR_VAR 0 17
35679: PUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 248
35689: ST_TO_ADDR
// if sources then
35690: LD_VAR 0 5
35694: IFFALSE 35741
// for i = 1 to 3 do
35696: LD_ADDR_VAR 0 8
35700: PUSH
35701: DOUBLE
35702: LD_INT 1
35704: DEC
35705: ST_TO_ADDR
35706: LD_INT 3
35708: PUSH
35709: FOR_TO
35710: IFFALSE 35739
// AddResourceType ( base , i , sources [ i ] ) ;
35712: LD_VAR 0 15
35716: PPUSH
35717: LD_VAR 0 8
35721: PPUSH
35722: LD_VAR 0 5
35726: PUSH
35727: LD_VAR 0 8
35731: ARRAY
35732: PPUSH
35733: CALL_OW 276
35737: GO 35709
35739: POP
35740: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35741: LD_ADDR_VAR 0 18
35745: PUSH
35746: LD_VAR 0 15
35750: PPUSH
35751: LD_VAR 0 2
35755: PPUSH
35756: LD_INT 1
35758: PPUSH
35759: CALL 35000 0 3
35763: ST_TO_ADDR
// InitHc ;
35764: CALL_OW 19
// InitUc ;
35768: CALL_OW 18
// uc_side := side ;
35772: LD_ADDR_OWVAR 20
35776: PUSH
35777: LD_VAR 0 16
35781: ST_TO_ADDR
// uc_nation := nation ;
35782: LD_ADDR_OWVAR 21
35786: PUSH
35787: LD_VAR 0 17
35791: ST_TO_ADDR
// if buildings then
35792: LD_VAR 0 18
35796: IFFALSE 37124
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35798: LD_ADDR_VAR 0 19
35802: PUSH
35803: LD_VAR 0 18
35807: PPUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 30
35813: PUSH
35814: LD_INT 29
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 30
35823: PUSH
35824: LD_INT 30
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: PPUSH
35836: CALL_OW 72
35840: ST_TO_ADDR
// if tmp then
35841: LD_VAR 0 19
35845: IFFALSE 35893
// for i in tmp do
35847: LD_ADDR_VAR 0 8
35851: PUSH
35852: LD_VAR 0 19
35856: PUSH
35857: FOR_IN
35858: IFFALSE 35891
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35860: LD_VAR 0 8
35864: PPUSH
35865: CALL_OW 250
35869: PPUSH
35870: LD_VAR 0 8
35874: PPUSH
35875: CALL_OW 251
35879: PPUSH
35880: LD_VAR 0 16
35884: PPUSH
35885: CALL_OW 441
35889: GO 35857
35891: POP
35892: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35893: LD_VAR 0 18
35897: PPUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 30
35903: PUSH
35904: LD_INT 32
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 30
35913: PUSH
35914: LD_INT 33
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: PPUSH
35926: CALL_OW 72
35930: IFFALSE 36018
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35932: LD_ADDR_VAR 0 8
35936: PUSH
35937: LD_VAR 0 18
35941: PPUSH
35942: LD_INT 2
35944: PUSH
35945: LD_INT 30
35947: PUSH
35948: LD_INT 32
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 30
35957: PUSH
35958: LD_INT 33
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: PPUSH
35970: CALL_OW 72
35974: PUSH
35975: FOR_IN
35976: IFFALSE 36016
// begin if not GetBWeapon ( i ) then
35978: LD_VAR 0 8
35982: PPUSH
35983: CALL_OW 269
35987: NOT
35988: IFFALSE 36014
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35990: LD_VAR 0 8
35994: PPUSH
35995: LD_VAR 0 8
35999: PPUSH
36000: LD_VAR 0 2
36004: PPUSH
36005: CALL 37270 0 2
36009: PPUSH
36010: CALL_OW 431
// end ;
36014: GO 35975
36016: POP
36017: POP
// end ; for i = 1 to personel do
36018: LD_ADDR_VAR 0 8
36022: PUSH
36023: DOUBLE
36024: LD_INT 1
36026: DEC
36027: ST_TO_ADDR
36028: LD_VAR 0 6
36032: PUSH
36033: FOR_TO
36034: IFFALSE 37104
// begin if i > 4 then
36036: LD_VAR 0 8
36040: PUSH
36041: LD_INT 4
36043: GREATER
36044: IFFALSE 36048
// break ;
36046: GO 37104
// case i of 1 :
36048: LD_VAR 0 8
36052: PUSH
36053: LD_INT 1
36055: DOUBLE
36056: EQUAL
36057: IFTRUE 36061
36059: GO 36141
36061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36062: LD_ADDR_VAR 0 12
36066: PUSH
36067: LD_VAR 0 18
36071: PPUSH
36072: LD_INT 22
36074: PUSH
36075: LD_VAR 0 16
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 58
36086: PUSH
36087: EMPTY
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 30
36095: PUSH
36096: LD_INT 32
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 30
36105: PUSH
36106: LD_INT 4
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 30
36115: PUSH
36116: LD_INT 5
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL_OW 72
36138: ST_TO_ADDR
36139: GO 36363
36141: LD_INT 2
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36149
36147: GO 36211
36149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36150: LD_ADDR_VAR 0 12
36154: PUSH
36155: LD_VAR 0 18
36159: PPUSH
36160: LD_INT 22
36162: PUSH
36163: LD_VAR 0 16
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 30
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 30
36187: PUSH
36188: LD_INT 1
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PPUSH
36204: CALL_OW 72
36208: ST_TO_ADDR
36209: GO 36363
36211: LD_INT 3
36213: DOUBLE
36214: EQUAL
36215: IFTRUE 36219
36217: GO 36281
36219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36220: LD_ADDR_VAR 0 12
36224: PUSH
36225: LD_VAR 0 18
36229: PPUSH
36230: LD_INT 22
36232: PUSH
36233: LD_VAR 0 16
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 2
36244: PUSH
36245: LD_INT 30
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 30
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PPUSH
36274: CALL_OW 72
36278: ST_TO_ADDR
36279: GO 36363
36281: LD_INT 4
36283: DOUBLE
36284: EQUAL
36285: IFTRUE 36289
36287: GO 36362
36289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36290: LD_ADDR_VAR 0 12
36294: PUSH
36295: LD_VAR 0 18
36299: PPUSH
36300: LD_INT 22
36302: PUSH
36303: LD_VAR 0 16
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: LD_INT 30
36317: PUSH
36318: LD_INT 6
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 30
36327: PUSH
36328: LD_INT 7
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 30
36337: PUSH
36338: LD_INT 8
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PPUSH
36355: CALL_OW 72
36359: ST_TO_ADDR
36360: GO 36363
36362: POP
// if i = 1 then
36363: LD_VAR 0 8
36367: PUSH
36368: LD_INT 1
36370: EQUAL
36371: IFFALSE 36482
// begin tmp := [ ] ;
36373: LD_ADDR_VAR 0 19
36377: PUSH
36378: EMPTY
36379: ST_TO_ADDR
// for j in f do
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_VAR 0 12
36389: PUSH
36390: FOR_IN
36391: IFFALSE 36464
// if GetBType ( j ) = b_bunker then
36393: LD_VAR 0 9
36397: PPUSH
36398: CALL_OW 266
36402: PUSH
36403: LD_INT 32
36405: EQUAL
36406: IFFALSE 36433
// tmp := Insert ( tmp , 1 , j ) else
36408: LD_ADDR_VAR 0 19
36412: PUSH
36413: LD_VAR 0 19
36417: PPUSH
36418: LD_INT 1
36420: PPUSH
36421: LD_VAR 0 9
36425: PPUSH
36426: CALL_OW 2
36430: ST_TO_ADDR
36431: GO 36462
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36433: LD_ADDR_VAR 0 19
36437: PUSH
36438: LD_VAR 0 19
36442: PPUSH
36443: LD_VAR 0 19
36447: PUSH
36448: LD_INT 1
36450: PLUS
36451: PPUSH
36452: LD_VAR 0 9
36456: PPUSH
36457: CALL_OW 2
36461: ST_TO_ADDR
36462: GO 36390
36464: POP
36465: POP
// if tmp then
36466: LD_VAR 0 19
36470: IFFALSE 36482
// f := tmp ;
36472: LD_ADDR_VAR 0 12
36476: PUSH
36477: LD_VAR 0 19
36481: ST_TO_ADDR
// end ; x := personel [ i ] ;
36482: LD_ADDR_VAR 0 13
36486: PUSH
36487: LD_VAR 0 6
36491: PUSH
36492: LD_VAR 0 8
36496: ARRAY
36497: ST_TO_ADDR
// if x = - 1 then
36498: LD_VAR 0 13
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: EQUAL
36507: IFFALSE 36718
// begin for j in f do
36509: LD_ADDR_VAR 0 9
36513: PUSH
36514: LD_VAR 0 12
36518: PUSH
36519: FOR_IN
36520: IFFALSE 36714
// repeat InitHc ;
36522: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36526: LD_VAR 0 9
36530: PPUSH
36531: CALL_OW 266
36535: PUSH
36536: LD_INT 5
36538: EQUAL
36539: IFFALSE 36609
// begin if UnitsInside ( j ) < 3 then
36541: LD_VAR 0 9
36545: PPUSH
36546: CALL_OW 313
36550: PUSH
36551: LD_INT 3
36553: LESS
36554: IFFALSE 36590
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36556: LD_INT 0
36558: PPUSH
36559: LD_INT 5
36561: PUSH
36562: LD_INT 8
36564: PUSH
36565: LD_INT 9
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: PUSH
36573: LD_VAR 0 17
36577: ARRAY
36578: PPUSH
36579: LD_VAR 0 4
36583: PPUSH
36584: CALL_OW 380
36588: GO 36607
// PrepareHuman ( false , i , skill ) ;
36590: LD_INT 0
36592: PPUSH
36593: LD_VAR 0 8
36597: PPUSH
36598: LD_VAR 0 4
36602: PPUSH
36603: CALL_OW 380
// end else
36607: GO 36626
// PrepareHuman ( false , i , skill ) ;
36609: LD_INT 0
36611: PPUSH
36612: LD_VAR 0 8
36616: PPUSH
36617: LD_VAR 0 4
36621: PPUSH
36622: CALL_OW 380
// un := CreateHuman ;
36626: LD_ADDR_VAR 0 14
36630: PUSH
36631: CALL_OW 44
36635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36636: LD_ADDR_VAR 0 7
36640: PUSH
36641: LD_VAR 0 7
36645: PPUSH
36646: LD_INT 1
36648: PPUSH
36649: LD_VAR 0 14
36653: PPUSH
36654: CALL_OW 2
36658: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36659: LD_VAR 0 14
36663: PPUSH
36664: LD_VAR 0 9
36668: PPUSH
36669: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36673: LD_VAR 0 9
36677: PPUSH
36678: CALL_OW 313
36682: PUSH
36683: LD_INT 6
36685: EQUAL
36686: IFTRUE 36710
36688: PUSH
36689: LD_VAR 0 9
36693: PPUSH
36694: CALL_OW 266
36698: PUSH
36699: LD_INT 32
36701: PUSH
36702: LD_INT 31
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: IN
36709: OR
36710: IFFALSE 36522
36712: GO 36519
36714: POP
36715: POP
// end else
36716: GO 37102
// for j = 1 to x do
36718: LD_ADDR_VAR 0 9
36722: PUSH
36723: DOUBLE
36724: LD_INT 1
36726: DEC
36727: ST_TO_ADDR
36728: LD_VAR 0 13
36732: PUSH
36733: FOR_TO
36734: IFFALSE 37100
// begin InitHc ;
36736: CALL_OW 19
// if not f then
36740: LD_VAR 0 12
36744: NOT
36745: IFFALSE 36834
// begin PrepareHuman ( false , i , skill ) ;
36747: LD_INT 0
36749: PPUSH
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_VAR 0 4
36759: PPUSH
36760: CALL_OW 380
// un := CreateHuman ;
36764: LD_ADDR_VAR 0 14
36768: PUSH
36769: CALL_OW 44
36773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36774: LD_ADDR_VAR 0 7
36778: PUSH
36779: LD_VAR 0 7
36783: PPUSH
36784: LD_INT 1
36786: PPUSH
36787: LD_VAR 0 14
36791: PPUSH
36792: CALL_OW 2
36796: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36797: LD_VAR 0 14
36801: PPUSH
36802: LD_VAR 0 1
36806: PPUSH
36807: CALL_OW 250
36811: PPUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 251
36821: PPUSH
36822: LD_INT 10
36824: PPUSH
36825: LD_INT 0
36827: PPUSH
36828: CALL_OW 50
// continue ;
36832: GO 36733
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36834: LD_VAR 0 12
36838: PUSH
36839: LD_INT 1
36841: ARRAY
36842: PPUSH
36843: CALL_OW 313
36847: IFFALSE 36875
36849: PUSH
36850: LD_VAR 0 12
36854: PUSH
36855: LD_INT 1
36857: ARRAY
36858: PPUSH
36859: CALL_OW 266
36863: PUSH
36864: LD_INT 32
36866: PUSH
36867: LD_INT 31
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: IN
36874: AND
36875: IFTRUE 36896
36877: PUSH
36878: LD_VAR 0 12
36882: PUSH
36883: LD_INT 1
36885: ARRAY
36886: PPUSH
36887: CALL_OW 313
36891: PUSH
36892: LD_INT 6
36894: EQUAL
36895: OR
36896: IFFALSE 36916
// f := Delete ( f , 1 ) ;
36898: LD_ADDR_VAR 0 12
36902: PUSH
36903: LD_VAR 0 12
36907: PPUSH
36908: LD_INT 1
36910: PPUSH
36911: CALL_OW 3
36915: ST_TO_ADDR
// if not f then
36916: LD_VAR 0 12
36920: NOT
36921: IFFALSE 36939
// begin x := x + 2 ;
36923: LD_ADDR_VAR 0 13
36927: PUSH
36928: LD_VAR 0 13
36932: PUSH
36933: LD_INT 2
36935: PLUS
36936: ST_TO_ADDR
// continue ;
36937: GO 36733
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36939: LD_VAR 0 12
36943: PUSH
36944: LD_INT 1
36946: ARRAY
36947: PPUSH
36948: CALL_OW 266
36952: PUSH
36953: LD_INT 5
36955: EQUAL
36956: IFFALSE 37030
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36958: LD_VAR 0 12
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PPUSH
36967: CALL_OW 313
36971: PUSH
36972: LD_INT 3
36974: LESS
36975: IFFALSE 37011
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36977: LD_INT 0
36979: PPUSH
36980: LD_INT 5
36982: PUSH
36983: LD_INT 8
36985: PUSH
36986: LD_INT 9
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: PUSH
36994: LD_VAR 0 17
36998: ARRAY
36999: PPUSH
37000: LD_VAR 0 4
37004: PPUSH
37005: CALL_OW 380
37009: GO 37028
// PrepareHuman ( false , i , skill ) ;
37011: LD_INT 0
37013: PPUSH
37014: LD_VAR 0 8
37018: PPUSH
37019: LD_VAR 0 4
37023: PPUSH
37024: CALL_OW 380
// end else
37028: GO 37047
// PrepareHuman ( false , i , skill ) ;
37030: LD_INT 0
37032: PPUSH
37033: LD_VAR 0 8
37037: PPUSH
37038: LD_VAR 0 4
37042: PPUSH
37043: CALL_OW 380
// un := CreateHuman ;
37047: LD_ADDR_VAR 0 14
37051: PUSH
37052: CALL_OW 44
37056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37057: LD_ADDR_VAR 0 7
37061: PUSH
37062: LD_VAR 0 7
37066: PPUSH
37067: LD_INT 1
37069: PPUSH
37070: LD_VAR 0 14
37074: PPUSH
37075: CALL_OW 2
37079: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37080: LD_VAR 0 14
37084: PPUSH
37085: LD_VAR 0 12
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: PPUSH
37094: CALL_OW 52
// end ;
37098: GO 36733
37100: POP
37101: POP
// end ;
37102: GO 36033
37104: POP
37105: POP
// result := result ^ buildings ;
37106: LD_ADDR_VAR 0 7
37110: PUSH
37111: LD_VAR 0 7
37115: PUSH
37116: LD_VAR 0 18
37120: ADD
37121: ST_TO_ADDR
// end else
37122: GO 37265
// begin for i = 1 to personel do
37124: LD_ADDR_VAR 0 8
37128: PUSH
37129: DOUBLE
37130: LD_INT 1
37132: DEC
37133: ST_TO_ADDR
37134: LD_VAR 0 6
37138: PUSH
37139: FOR_TO
37140: IFFALSE 37263
// begin if i > 4 then
37142: LD_VAR 0 8
37146: PUSH
37147: LD_INT 4
37149: GREATER
37150: IFFALSE 37154
// break ;
37152: GO 37263
// x := personel [ i ] ;
37154: LD_ADDR_VAR 0 13
37158: PUSH
37159: LD_VAR 0 6
37163: PUSH
37164: LD_VAR 0 8
37168: ARRAY
37169: ST_TO_ADDR
// if x = - 1 then
37170: LD_VAR 0 13
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: EQUAL
37179: IFFALSE 37183
// continue ;
37181: GO 37139
// PrepareHuman ( false , i , skill ) ;
37183: LD_INT 0
37185: PPUSH
37186: LD_VAR 0 8
37190: PPUSH
37191: LD_VAR 0 4
37195: PPUSH
37196: CALL_OW 380
// un := CreateHuman ;
37200: LD_ADDR_VAR 0 14
37204: PUSH
37205: CALL_OW 44
37209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37210: LD_VAR 0 14
37214: PPUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 250
37224: PPUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 251
37234: PPUSH
37235: LD_INT 10
37237: PPUSH
37238: LD_INT 0
37240: PPUSH
37241: CALL_OW 50
// result := result ^ un ;
37245: LD_ADDR_VAR 0 7
37249: PUSH
37250: LD_VAR 0 7
37254: PUSH
37255: LD_VAR 0 14
37259: ADD
37260: ST_TO_ADDR
// end ;
37261: GO 37139
37263: POP
37264: POP
// end ; end ;
37265: LD_VAR 0 7
37269: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37270: LD_INT 0
37272: PPUSH
37273: PPUSH
37274: PPUSH
37275: PPUSH
37276: PPUSH
37277: PPUSH
37278: PPUSH
37279: PPUSH
37280: PPUSH
37281: PPUSH
37282: PPUSH
37283: PPUSH
37284: PPUSH
37285: PPUSH
37286: PPUSH
37287: PPUSH
// result := false ;
37288: LD_ADDR_VAR 0 3
37292: PUSH
37293: LD_INT 0
37295: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37296: LD_VAR 0 1
37300: NOT
37301: IFTRUE 37326
37303: PUSH
37304: LD_VAR 0 1
37308: PPUSH
37309: CALL_OW 266
37313: PUSH
37314: LD_INT 32
37316: PUSH
37317: LD_INT 33
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: IN
37324: NOT
37325: OR
37326: IFFALSE 37330
// exit ;
37328: GO 38465
// nat := GetNation ( tower ) ;
37330: LD_ADDR_VAR 0 12
37334: PUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 248
37344: ST_TO_ADDR
// side := GetSide ( tower ) ;
37345: LD_ADDR_VAR 0 16
37349: PUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 255
37359: ST_TO_ADDR
// x := GetX ( tower ) ;
37360: LD_ADDR_VAR 0 10
37364: PUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 250
37374: ST_TO_ADDR
// y := GetY ( tower ) ;
37375: LD_ADDR_VAR 0 11
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 251
37389: ST_TO_ADDR
// if not x or not y then
37390: LD_VAR 0 10
37394: NOT
37395: IFTRUE 37404
37397: PUSH
37398: LD_VAR 0 11
37402: NOT
37403: OR
37404: IFFALSE 37408
// exit ;
37406: GO 38465
// weapon := 0 ;
37408: LD_ADDR_VAR 0 18
37412: PUSH
37413: LD_INT 0
37415: ST_TO_ADDR
// fac_list := [ ] ;
37416: LD_ADDR_VAR 0 17
37420: PUSH
37421: EMPTY
37422: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37423: LD_ADDR_VAR 0 6
37427: PUSH
37428: LD_VAR 0 1
37432: PPUSH
37433: CALL_OW 274
37437: PPUSH
37438: LD_VAR 0 2
37442: PPUSH
37443: LD_INT 0
37445: PPUSH
37446: CALL 35000 0 3
37450: PPUSH
37451: LD_INT 30
37453: PUSH
37454: LD_INT 3
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PPUSH
37461: CALL_OW 72
37465: ST_TO_ADDR
// if not factories then
37466: LD_VAR 0 6
37470: NOT
37471: IFFALSE 37475
// exit ;
37473: GO 38465
// for i in factories do
37475: LD_ADDR_VAR 0 8
37479: PUSH
37480: LD_VAR 0 6
37484: PUSH
37485: FOR_IN
37486: IFFALSE 37511
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37488: LD_ADDR_VAR 0 17
37492: PUSH
37493: LD_VAR 0 17
37497: PUSH
37498: LD_VAR 0 8
37502: PPUSH
37503: CALL_OW 478
37507: UNION
37508: ST_TO_ADDR
37509: GO 37485
37511: POP
37512: POP
// if not fac_list then
37513: LD_VAR 0 17
37517: NOT
37518: IFFALSE 37522
// exit ;
37520: GO 38465
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37522: LD_ADDR_VAR 0 5
37526: PUSH
37527: LD_INT 4
37529: PUSH
37530: LD_INT 5
37532: PUSH
37533: LD_INT 9
37535: PUSH
37536: LD_INT 10
37538: PUSH
37539: LD_INT 6
37541: PUSH
37542: LD_INT 7
37544: PUSH
37545: LD_INT 11
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 27
37559: PUSH
37560: LD_INT 28
37562: PUSH
37563: LD_INT 26
37565: PUSH
37566: LD_INT 30
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 43
37577: PUSH
37578: LD_INT 44
37580: PUSH
37581: LD_INT 46
37583: PUSH
37584: LD_INT 45
37586: PUSH
37587: LD_INT 47
37589: PUSH
37590: LD_INT 49
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: LIST
37605: PUSH
37606: LD_VAR 0 12
37610: ARRAY
37611: ST_TO_ADDR
// list := list isect fac_list ;
37612: LD_ADDR_VAR 0 5
37616: PUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_VAR 0 17
37626: ISECT
37627: ST_TO_ADDR
// if not list then
37628: LD_VAR 0 5
37632: NOT
37633: IFFALSE 37637
// exit ;
37635: GO 38465
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37637: LD_VAR 0 12
37641: PUSH
37642: LD_INT 3
37644: EQUAL
37645: IFFALSE 37657
37647: PUSH
37648: LD_INT 49
37650: PUSH
37651: LD_VAR 0 5
37655: IN
37656: AND
37657: IFFALSE 37677
37659: PUSH
37660: LD_INT 31
37662: PPUSH
37663: LD_VAR 0 16
37667: PPUSH
37668: CALL_OW 321
37672: PUSH
37673: LD_INT 2
37675: EQUAL
37676: AND
37677: IFFALSE 37737
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37679: LD_INT 22
37681: PUSH
37682: LD_VAR 0 16
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 35
37693: PUSH
37694: LD_INT 49
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 91
37703: PUSH
37704: LD_VAR 0 1
37708: PUSH
37709: LD_INT 10
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: PPUSH
37722: CALL_OW 69
37726: NOT
37727: IFFALSE 37737
// weapon := ru_time_lapser ;
37729: LD_ADDR_VAR 0 18
37733: PUSH
37734: LD_INT 49
37736: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37737: LD_VAR 0 12
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: IN
37752: IFFALSE 37776
37754: PUSH
37755: LD_INT 11
37757: PUSH
37758: LD_VAR 0 5
37762: IN
37763: IFTRUE 37775
37765: PUSH
37766: LD_INT 30
37768: PUSH
37769: LD_VAR 0 5
37773: IN
37774: OR
37775: AND
37776: IFFALSE 37796
37778: PUSH
37779: LD_INT 6
37781: PPUSH
37782: LD_VAR 0 16
37786: PPUSH
37787: CALL_OW 321
37791: PUSH
37792: LD_INT 2
37794: EQUAL
37795: AND
37796: IFFALSE 37963
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37798: LD_INT 22
37800: PUSH
37801: LD_VAR 0 16
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 35
37815: PUSH
37816: LD_INT 11
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 35
37825: PUSH
37826: LD_INT 30
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 91
37840: PUSH
37841: LD_VAR 0 1
37845: PUSH
37846: LD_INT 18
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: PPUSH
37859: CALL_OW 69
37863: NOT
37864: IFFALSE 37940
37866: PUSH
37867: LD_INT 22
37869: PUSH
37870: LD_VAR 0 16
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 30
37884: PUSH
37885: LD_INT 32
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 30
37894: PUSH
37895: LD_INT 33
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 91
37909: PUSH
37910: LD_VAR 0 1
37914: PUSH
37915: LD_INT 12
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: PPUSH
37931: CALL_OW 69
37935: PUSH
37936: LD_INT 2
37938: GREATER
37939: AND
37940: IFFALSE 37963
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37942: LD_ADDR_VAR 0 18
37946: PUSH
37947: LD_INT 11
37949: PUSH
37950: LD_INT 30
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_VAR 0 12
37961: ARRAY
37962: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37963: LD_VAR 0 18
37967: NOT
37968: IFFALSE 37988
37970: PUSH
37971: LD_INT 40
37973: PPUSH
37974: LD_VAR 0 16
37978: PPUSH
37979: CALL_OW 321
37983: PUSH
37984: LD_INT 2
37986: EQUAL
37987: AND
37988: IFFALSE 38024
37990: PUSH
37991: LD_INT 7
37993: PUSH
37994: LD_VAR 0 5
37998: IN
37999: IFTRUE 38011
38001: PUSH
38002: LD_INT 28
38004: PUSH
38005: LD_VAR 0 5
38009: IN
38010: OR
38011: IFTRUE 38023
38013: PUSH
38014: LD_INT 45
38016: PUSH
38017: LD_VAR 0 5
38021: IN
38022: OR
38023: AND
38024: IFFALSE 38278
// begin hex := GetHexInfo ( x , y ) ;
38026: LD_ADDR_VAR 0 4
38030: PUSH
38031: LD_VAR 0 10
38035: PPUSH
38036: LD_VAR 0 11
38040: PPUSH
38041: CALL_OW 546
38045: ST_TO_ADDR
// if hex [ 1 ] then
38046: LD_VAR 0 4
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: IFFALSE 38058
// exit ;
38056: GO 38465
// height := hex [ 2 ] ;
38058: LD_ADDR_VAR 0 15
38062: PUSH
38063: LD_VAR 0 4
38067: PUSH
38068: LD_INT 2
38070: ARRAY
38071: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38072: LD_ADDR_VAR 0 14
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: LD_INT 5
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// for i in tmp do
38095: LD_ADDR_VAR 0 8
38099: PUSH
38100: LD_VAR 0 14
38104: PUSH
38105: FOR_IN
38106: IFFALSE 38276
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38108: LD_ADDR_VAR 0 9
38112: PUSH
38113: LD_VAR 0 10
38117: PPUSH
38118: LD_VAR 0 8
38122: PPUSH
38123: LD_INT 5
38125: PPUSH
38126: CALL_OW 272
38130: PUSH
38131: LD_VAR 0 11
38135: PPUSH
38136: LD_VAR 0 8
38140: PPUSH
38141: LD_INT 5
38143: PPUSH
38144: CALL_OW 273
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38153: LD_VAR 0 9
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: PPUSH
38162: LD_VAR 0 9
38166: PUSH
38167: LD_INT 2
38169: ARRAY
38170: PPUSH
38171: CALL_OW 488
38175: IFFALSE 38274
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38177: LD_ADDR_VAR 0 4
38181: PUSH
38182: LD_VAR 0 9
38186: PUSH
38187: LD_INT 1
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 9
38195: PUSH
38196: LD_INT 2
38198: ARRAY
38199: PPUSH
38200: CALL_OW 546
38204: ST_TO_ADDR
// if hex [ 1 ] then
38205: LD_VAR 0 4
38209: PUSH
38210: LD_INT 1
38212: ARRAY
38213: IFFALSE 38217
// continue ;
38215: GO 38105
// h := hex [ 2 ] ;
38217: LD_ADDR_VAR 0 13
38221: PUSH
38222: LD_VAR 0 4
38226: PUSH
38227: LD_INT 2
38229: ARRAY
38230: ST_TO_ADDR
// if h + 7 < height then
38231: LD_VAR 0 13
38235: PUSH
38236: LD_INT 7
38238: PLUS
38239: PUSH
38240: LD_VAR 0 15
38244: LESS
38245: IFFALSE 38274
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38247: LD_ADDR_VAR 0 18
38251: PUSH
38252: LD_INT 7
38254: PUSH
38255: LD_INT 28
38257: PUSH
38258: LD_INT 45
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: PUSH
38266: LD_VAR 0 12
38270: ARRAY
38271: ST_TO_ADDR
// break ;
38272: GO 38276
// end ; end ; end ;
38274: GO 38105
38276: POP
38277: POP
// end ; if not weapon then
38278: LD_VAR 0 18
38282: NOT
38283: IFFALSE 38343
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38285: LD_ADDR_VAR 0 5
38289: PUSH
38290: LD_VAR 0 5
38294: PUSH
38295: LD_INT 11
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 49
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: DIFF
38309: ST_TO_ADDR
// if not list then
38310: LD_VAR 0 5
38314: NOT
38315: IFFALSE 38319
// exit ;
38317: GO 38465
// weapon := list [ rand ( 1 , list ) ] ;
38319: LD_ADDR_VAR 0 18
38323: PUSH
38324: LD_VAR 0 5
38328: PUSH
38329: LD_INT 1
38331: PPUSH
38332: LD_VAR 0 5
38336: PPUSH
38337: CALL_OW 12
38341: ARRAY
38342: ST_TO_ADDR
// end ; if weapon then
38343: LD_VAR 0 18
38347: IFFALSE 38465
// begin tmp := CostOfWeapon ( weapon ) ;
38349: LD_ADDR_VAR 0 14
38353: PUSH
38354: LD_VAR 0 18
38358: PPUSH
38359: CALL_OW 451
38363: ST_TO_ADDR
// j := GetBase ( tower ) ;
38364: LD_ADDR_VAR 0 9
38368: PUSH
38369: LD_VAR 0 1
38373: PPUSH
38374: CALL_OW 274
38378: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38379: LD_VAR 0 9
38383: PPUSH
38384: LD_INT 1
38386: PPUSH
38387: CALL_OW 275
38391: PUSH
38392: LD_VAR 0 14
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: GREATEREQUAL
38401: IFFALSE 38427
38403: PUSH
38404: LD_VAR 0 9
38408: PPUSH
38409: LD_INT 2
38411: PPUSH
38412: CALL_OW 275
38416: PUSH
38417: LD_VAR 0 14
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: GREATEREQUAL
38426: AND
38427: IFFALSE 38453
38429: PUSH
38430: LD_VAR 0 9
38434: PPUSH
38435: LD_INT 3
38437: PPUSH
38438: CALL_OW 275
38442: PUSH
38443: LD_VAR 0 14
38447: PUSH
38448: LD_INT 3
38450: ARRAY
38451: GREATEREQUAL
38452: AND
38453: IFFALSE 38465
// result := weapon ;
38455: LD_ADDR_VAR 0 3
38459: PUSH
38460: LD_VAR 0 18
38464: ST_TO_ADDR
// end ; end ;
38465: LD_VAR 0 3
38469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38470: LD_INT 0
38472: PPUSH
38473: PPUSH
// result := true ;
38474: LD_ADDR_VAR 0 3
38478: PUSH
38479: LD_INT 1
38481: ST_TO_ADDR
// if array1 = array2 then
38482: LD_VAR 0 1
38486: PUSH
38487: LD_VAR 0 2
38491: EQUAL
38492: IFFALSE 38552
// begin for i = 1 to array1 do
38494: LD_ADDR_VAR 0 4
38498: PUSH
38499: DOUBLE
38500: LD_INT 1
38502: DEC
38503: ST_TO_ADDR
38504: LD_VAR 0 1
38508: PUSH
38509: FOR_TO
38510: IFFALSE 38548
// if array1 [ i ] <> array2 [ i ] then
38512: LD_VAR 0 1
38516: PUSH
38517: LD_VAR 0 4
38521: ARRAY
38522: PUSH
38523: LD_VAR 0 2
38527: PUSH
38528: LD_VAR 0 4
38532: ARRAY
38533: NONEQUAL
38534: IFFALSE 38546
// begin result := false ;
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: LD_INT 0
38543: ST_TO_ADDR
// break ;
38544: GO 38548
// end ;
38546: GO 38509
38548: POP
38549: POP
// end else
38550: GO 38560
// result := false ;
38552: LD_ADDR_VAR 0 3
38556: PUSH
38557: LD_INT 0
38559: ST_TO_ADDR
// end ;
38560: LD_VAR 0 3
38564: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38565: LD_INT 0
38567: PPUSH
38568: PPUSH
// if not array1 or not array2 then
38569: LD_VAR 0 1
38573: NOT
38574: IFTRUE 38583
38576: PUSH
38577: LD_VAR 0 2
38581: NOT
38582: OR
38583: IFFALSE 38587
// exit ;
38585: GO 38651
// result := true ;
38587: LD_ADDR_VAR 0 3
38591: PUSH
38592: LD_INT 1
38594: ST_TO_ADDR
// for i = 1 to array1 do
38595: LD_ADDR_VAR 0 4
38599: PUSH
38600: DOUBLE
38601: LD_INT 1
38603: DEC
38604: ST_TO_ADDR
38605: LD_VAR 0 1
38609: PUSH
38610: FOR_TO
38611: IFFALSE 38649
// if array1 [ i ] <> array2 [ i ] then
38613: LD_VAR 0 1
38617: PUSH
38618: LD_VAR 0 4
38622: ARRAY
38623: PUSH
38624: LD_VAR 0 2
38628: PUSH
38629: LD_VAR 0 4
38633: ARRAY
38634: NONEQUAL
38635: IFFALSE 38647
// begin result := false ;
38637: LD_ADDR_VAR 0 3
38641: PUSH
38642: LD_INT 0
38644: ST_TO_ADDR
// break ;
38645: GO 38649
// end ;
38647: GO 38610
38649: POP
38650: POP
// end ;
38651: LD_VAR 0 3
38655: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38656: LD_INT 0
38658: PPUSH
38659: PPUSH
38660: PPUSH
// pom := GetBase ( fac ) ;
38661: LD_ADDR_VAR 0 5
38665: PUSH
38666: LD_VAR 0 1
38670: PPUSH
38671: CALL_OW 274
38675: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38676: LD_ADDR_VAR 0 4
38680: PUSH
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 1
38688: ARRAY
38689: PPUSH
38690: LD_VAR 0 2
38694: PUSH
38695: LD_INT 2
38697: ARRAY
38698: PPUSH
38699: LD_VAR 0 2
38703: PUSH
38704: LD_INT 3
38706: ARRAY
38707: PPUSH
38708: LD_VAR 0 2
38712: PUSH
38713: LD_INT 4
38715: ARRAY
38716: PPUSH
38717: CALL_OW 449
38721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38722: LD_ADDR_VAR 0 3
38726: PUSH
38727: LD_VAR 0 5
38731: PPUSH
38732: LD_INT 1
38734: PPUSH
38735: CALL_OW 275
38739: PUSH
38740: LD_VAR 0 4
38744: PUSH
38745: LD_INT 1
38747: ARRAY
38748: GREATEREQUAL
38749: IFFALSE 38775
38751: PUSH
38752: LD_VAR 0 5
38756: PPUSH
38757: LD_INT 2
38759: PPUSH
38760: CALL_OW 275
38764: PUSH
38765: LD_VAR 0 4
38769: PUSH
38770: LD_INT 2
38772: ARRAY
38773: GREATEREQUAL
38774: AND
38775: IFFALSE 38801
38777: PUSH
38778: LD_VAR 0 5
38782: PPUSH
38783: LD_INT 3
38785: PPUSH
38786: CALL_OW 275
38790: PUSH
38791: LD_VAR 0 4
38795: PUSH
38796: LD_INT 3
38798: ARRAY
38799: GREATEREQUAL
38800: AND
38801: ST_TO_ADDR
// end ;
38802: LD_VAR 0 3
38806: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38807: LD_INT 0
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
// pom := GetBase ( building ) ;
38813: LD_ADDR_VAR 0 3
38817: PUSH
38818: LD_VAR 0 1
38822: PPUSH
38823: CALL_OW 274
38827: ST_TO_ADDR
// if not pom then
38828: LD_VAR 0 3
38832: NOT
38833: IFFALSE 38837
// exit ;
38835: GO 39011
// btype := GetBType ( building ) ;
38837: LD_ADDR_VAR 0 5
38841: PUSH
38842: LD_VAR 0 1
38846: PPUSH
38847: CALL_OW 266
38851: ST_TO_ADDR
// if btype = b_armoury then
38852: LD_VAR 0 5
38856: PUSH
38857: LD_INT 4
38859: EQUAL
38860: IFFALSE 38870
// btype := b_barracks ;
38862: LD_ADDR_VAR 0 5
38866: PUSH
38867: LD_INT 5
38869: ST_TO_ADDR
// if btype = b_depot then
38870: LD_VAR 0 5
38874: PUSH
38875: LD_INT 0
38877: EQUAL
38878: IFFALSE 38888
// btype := b_warehouse ;
38880: LD_ADDR_VAR 0 5
38884: PUSH
38885: LD_INT 1
38887: ST_TO_ADDR
// if btype = b_workshop then
38888: LD_VAR 0 5
38892: PUSH
38893: LD_INT 2
38895: EQUAL
38896: IFFALSE 38906
// btype := b_factory ;
38898: LD_ADDR_VAR 0 5
38902: PUSH
38903: LD_INT 3
38905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38906: LD_ADDR_VAR 0 4
38910: PUSH
38911: LD_VAR 0 5
38915: PPUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 248
38925: PPUSH
38926: CALL_OW 450
38930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38931: LD_ADDR_VAR 0 2
38935: PUSH
38936: LD_VAR 0 3
38940: PPUSH
38941: LD_INT 1
38943: PPUSH
38944: CALL_OW 275
38948: PUSH
38949: LD_VAR 0 4
38953: PUSH
38954: LD_INT 1
38956: ARRAY
38957: GREATEREQUAL
38958: IFFALSE 38984
38960: PUSH
38961: LD_VAR 0 3
38965: PPUSH
38966: LD_INT 2
38968: PPUSH
38969: CALL_OW 275
38973: PUSH
38974: LD_VAR 0 4
38978: PUSH
38979: LD_INT 2
38981: ARRAY
38982: GREATEREQUAL
38983: AND
38984: IFFALSE 39010
38986: PUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: LD_INT 3
38994: PPUSH
38995: CALL_OW 275
38999: PUSH
39000: LD_VAR 0 4
39004: PUSH
39005: LD_INT 3
39007: ARRAY
39008: GREATEREQUAL
39009: AND
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 2
39015: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
39020: PPUSH
// pom := GetBase ( building ) ;
39021: LD_ADDR_VAR 0 4
39025: PUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 274
39035: ST_TO_ADDR
// if not pom then
39036: LD_VAR 0 4
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 39150
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39045: LD_ADDR_VAR 0 5
39049: PUSH
39050: LD_VAR 0 2
39054: PPUSH
39055: LD_VAR 0 1
39059: PPUSH
39060: CALL_OW 248
39064: PPUSH
39065: CALL_OW 450
39069: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39070: LD_ADDR_VAR 0 3
39074: PUSH
39075: LD_VAR 0 4
39079: PPUSH
39080: LD_INT 1
39082: PPUSH
39083: CALL_OW 275
39087: PUSH
39088: LD_VAR 0 5
39092: PUSH
39093: LD_INT 1
39095: ARRAY
39096: GREATEREQUAL
39097: IFFALSE 39123
39099: PUSH
39100: LD_VAR 0 4
39104: PPUSH
39105: LD_INT 2
39107: PPUSH
39108: CALL_OW 275
39112: PUSH
39113: LD_VAR 0 5
39117: PUSH
39118: LD_INT 2
39120: ARRAY
39121: GREATEREQUAL
39122: AND
39123: IFFALSE 39149
39125: PUSH
39126: LD_VAR 0 4
39130: PPUSH
39131: LD_INT 3
39133: PPUSH
39134: CALL_OW 275
39138: PUSH
39139: LD_VAR 0 5
39143: PUSH
39144: LD_INT 3
39146: ARRAY
39147: GREATEREQUAL
39148: AND
39149: ST_TO_ADDR
// end ;
39150: LD_VAR 0 3
39154: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39155: LD_INT 0
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
// result := false ;
39168: LD_ADDR_VAR 0 8
39172: PUSH
39173: LD_INT 0
39175: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39176: LD_VAR 0 5
39180: NOT
39181: IFTRUE 39190
39183: PUSH
39184: LD_VAR 0 1
39188: NOT
39189: OR
39190: IFTRUE 39199
39192: PUSH
39193: LD_VAR 0 2
39197: NOT
39198: OR
39199: IFTRUE 39208
39201: PUSH
39202: LD_VAR 0 3
39206: NOT
39207: OR
39208: IFFALSE 39212
// exit ;
39210: GO 40038
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39212: LD_ADDR_VAR 0 14
39216: PUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: LD_VAR 0 2
39226: PPUSH
39227: LD_VAR 0 3
39231: PPUSH
39232: LD_VAR 0 4
39236: PPUSH
39237: LD_VAR 0 5
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: PPUSH
39246: CALL_OW 248
39250: PPUSH
39251: LD_INT 0
39253: PPUSH
39254: CALL 41319 0 6
39258: ST_TO_ADDR
// if not hexes then
39259: LD_VAR 0 14
39263: NOT
39264: IFFALSE 39268
// exit ;
39266: GO 40038
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39268: LD_ADDR_VAR 0 17
39272: PUSH
39273: LD_VAR 0 5
39277: PPUSH
39278: LD_INT 22
39280: PUSH
39281: LD_VAR 0 13
39285: PPUSH
39286: CALL_OW 255
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 30
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 30
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PPUSH
39327: CALL_OW 72
39331: ST_TO_ADDR
// for i = 1 to hexes do
39332: LD_ADDR_VAR 0 9
39336: PUSH
39337: DOUBLE
39338: LD_INT 1
39340: DEC
39341: ST_TO_ADDR
39342: LD_VAR 0 14
39346: PUSH
39347: FOR_TO
39348: IFFALSE 40036
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39350: LD_ADDR_VAR 0 13
39354: PUSH
39355: LD_VAR 0 14
39359: PUSH
39360: LD_VAR 0 9
39364: ARRAY
39365: PUSH
39366: LD_INT 1
39368: ARRAY
39369: PPUSH
39370: LD_VAR 0 14
39374: PUSH
39375: LD_VAR 0 9
39379: ARRAY
39380: PUSH
39381: LD_INT 2
39383: ARRAY
39384: PPUSH
39385: CALL_OW 428
39389: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39390: LD_VAR 0 14
39394: PUSH
39395: LD_VAR 0 9
39399: ARRAY
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PPUSH
39405: LD_VAR 0 14
39409: PUSH
39410: LD_VAR 0 9
39414: ARRAY
39415: PUSH
39416: LD_INT 2
39418: ARRAY
39419: PPUSH
39420: CALL_OW 351
39424: IFTRUE 39463
39426: PUSH
39427: LD_VAR 0 14
39431: PUSH
39432: LD_VAR 0 9
39436: ARRAY
39437: PUSH
39438: LD_INT 1
39440: ARRAY
39441: PPUSH
39442: LD_VAR 0 14
39446: PUSH
39447: LD_VAR 0 9
39451: ARRAY
39452: PUSH
39453: LD_INT 2
39455: ARRAY
39456: PPUSH
39457: CALL_OW 488
39461: NOT
39462: OR
39463: IFTRUE 39480
39465: PUSH
39466: LD_VAR 0 13
39470: PPUSH
39471: CALL_OW 247
39475: PUSH
39476: LD_INT 3
39478: EQUAL
39479: OR
39480: IFFALSE 39486
// exit ;
39482: POP
39483: POP
39484: GO 40038
// if not tmp then
39486: LD_VAR 0 13
39490: NOT
39491: IFFALSE 39495
// continue ;
39493: GO 39347
// result := true ;
39495: LD_ADDR_VAR 0 8
39499: PUSH
39500: LD_INT 1
39502: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39503: LD_VAR 0 6
39507: IFFALSE 39524
39509: PUSH
39510: LD_VAR 0 13
39514: PPUSH
39515: CALL_OW 247
39519: PUSH
39520: LD_INT 2
39522: EQUAL
39523: AND
39524: IFFALSE 39541
39526: PUSH
39527: LD_VAR 0 13
39531: PPUSH
39532: CALL_OW 263
39536: PUSH
39537: LD_INT 1
39539: EQUAL
39540: AND
39541: IFFALSE 39705
// begin if IsDrivenBy ( tmp ) then
39543: LD_VAR 0 13
39547: PPUSH
39548: CALL_OW 311
39552: IFFALSE 39556
// continue ;
39554: GO 39347
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39556: LD_VAR 0 6
39560: PPUSH
39561: LD_INT 3
39563: PUSH
39564: LD_INT 60
39566: PUSH
39567: EMPTY
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: LD_INT 55
39579: PUSH
39580: EMPTY
39581: LIST
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PPUSH
39591: CALL_OW 72
39595: IFFALSE 39703
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39597: LD_ADDR_VAR 0 18
39601: PUSH
39602: LD_VAR 0 6
39606: PPUSH
39607: LD_INT 3
39609: PUSH
39610: LD_INT 60
39612: PUSH
39613: EMPTY
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: LD_INT 55
39625: PUSH
39626: EMPTY
39627: LIST
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PPUSH
39637: CALL_OW 72
39641: PUSH
39642: LD_INT 1
39644: ARRAY
39645: ST_TO_ADDR
// if IsInUnit ( driver ) then
39646: LD_VAR 0 18
39650: PPUSH
39651: CALL_OW 310
39655: IFFALSE 39666
// ComExit ( driver ) ;
39657: LD_VAR 0 18
39661: PPUSH
39662: CALL 65309 0 1
// AddComEnterUnit ( driver , tmp ) ;
39666: LD_VAR 0 18
39670: PPUSH
39671: LD_VAR 0 13
39675: PPUSH
39676: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39680: LD_VAR 0 18
39684: PPUSH
39685: LD_VAR 0 7
39689: PPUSH
39690: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39694: LD_VAR 0 18
39698: PPUSH
39699: CALL_OW 181
// end ; continue ;
39703: GO 39347
// end ; if not cleaners or not tmp in cleaners then
39705: LD_VAR 0 6
39709: NOT
39710: IFTRUE 39725
39712: PUSH
39713: LD_VAR 0 13
39717: PUSH
39718: LD_VAR 0 6
39722: IN
39723: NOT
39724: OR
39725: IFFALSE 40034
// begin if dep then
39727: LD_VAR 0 17
39731: IFFALSE 39867
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39733: LD_ADDR_VAR 0 16
39737: PUSH
39738: LD_VAR 0 17
39742: PUSH
39743: LD_INT 1
39745: ARRAY
39746: PPUSH
39747: CALL_OW 250
39751: PPUSH
39752: LD_VAR 0 17
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PPUSH
39761: CALL_OW 254
39765: PPUSH
39766: LD_INT 5
39768: PPUSH
39769: CALL_OW 272
39773: PUSH
39774: LD_VAR 0 17
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: CALL_OW 251
39787: PPUSH
39788: LD_VAR 0 17
39792: PUSH
39793: LD_INT 1
39795: ARRAY
39796: PPUSH
39797: CALL_OW 254
39801: PPUSH
39802: LD_INT 5
39804: PPUSH
39805: CALL_OW 273
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39814: LD_VAR 0 16
39818: PUSH
39819: LD_INT 1
39821: ARRAY
39822: PPUSH
39823: LD_VAR 0 16
39827: PUSH
39828: LD_INT 2
39830: ARRAY
39831: PPUSH
39832: CALL_OW 488
39836: IFFALSE 39867
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39838: LD_VAR 0 13
39842: PPUSH
39843: LD_VAR 0 16
39847: PUSH
39848: LD_INT 1
39850: ARRAY
39851: PPUSH
39852: LD_VAR 0 16
39856: PUSH
39857: LD_INT 2
39859: ARRAY
39860: PPUSH
39861: CALL_OW 111
// continue ;
39865: GO 39347
// end ; end ; r := GetDir ( tmp ) ;
39867: LD_ADDR_VAR 0 15
39871: PUSH
39872: LD_VAR 0 13
39876: PPUSH
39877: CALL_OW 254
39881: ST_TO_ADDR
// if r = 5 then
39882: LD_VAR 0 15
39886: PUSH
39887: LD_INT 5
39889: EQUAL
39890: IFFALSE 39900
// r := 0 ;
39892: LD_ADDR_VAR 0 15
39896: PUSH
39897: LD_INT 0
39899: ST_TO_ADDR
// for j = r to 5 do
39900: LD_ADDR_VAR 0 10
39904: PUSH
39905: DOUBLE
39906: LD_VAR 0 15
39910: DEC
39911: ST_TO_ADDR
39912: LD_INT 5
39914: PUSH
39915: FOR_TO
39916: IFFALSE 40032
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39918: LD_ADDR_VAR 0 11
39922: PUSH
39923: LD_VAR 0 13
39927: PPUSH
39928: CALL_OW 250
39932: PPUSH
39933: LD_VAR 0 10
39937: PPUSH
39938: LD_INT 2
39940: PPUSH
39941: CALL_OW 272
39945: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39946: LD_ADDR_VAR 0 12
39950: PUSH
39951: LD_VAR 0 13
39955: PPUSH
39956: CALL_OW 251
39960: PPUSH
39961: LD_VAR 0 10
39965: PPUSH
39966: LD_INT 2
39968: PPUSH
39969: CALL_OW 273
39973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39974: LD_VAR 0 11
39978: PPUSH
39979: LD_VAR 0 12
39983: PPUSH
39984: CALL_OW 488
39988: IFFALSE 40007
39990: PUSH
39991: LD_VAR 0 11
39995: PPUSH
39996: LD_VAR 0 12
40000: PPUSH
40001: CALL_OW 428
40005: NOT
40006: AND
40007: IFFALSE 40030
// begin ComMoveXY ( tmp , _x , _y ) ;
40009: LD_VAR 0 13
40013: PPUSH
40014: LD_VAR 0 11
40018: PPUSH
40019: LD_VAR 0 12
40023: PPUSH
40024: CALL_OW 111
// break ;
40028: GO 40032
// end ; end ;
40030: GO 39915
40032: POP
40033: POP
// end ; end ;
40034: GO 39347
40036: POP
40037: POP
// end ;
40038: LD_VAR 0 8
40042: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40043: LD_INT 0
40045: PPUSH
// result := true ;
40046: LD_ADDR_VAR 0 3
40050: PUSH
40051: LD_INT 1
40053: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40054: LD_VAR 0 2
40058: PUSH
40059: LD_INT 24
40061: DOUBLE
40062: EQUAL
40063: IFTRUE 40073
40065: LD_INT 33
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40073
40071: GO 40098
40073: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40074: LD_ADDR_VAR 0 3
40078: PUSH
40079: LD_INT 32
40081: PPUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 321
40091: PUSH
40092: LD_INT 2
40094: EQUAL
40095: ST_TO_ADDR
40096: GO 40414
40098: LD_INT 20
40100: DOUBLE
40101: EQUAL
40102: IFTRUE 40106
40104: GO 40131
40106: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_INT 6
40114: PPUSH
40115: LD_VAR 0 1
40119: PPUSH
40120: CALL_OW 321
40124: PUSH
40125: LD_INT 2
40127: EQUAL
40128: ST_TO_ADDR
40129: GO 40414
40131: LD_INT 22
40133: DOUBLE
40134: EQUAL
40135: IFTRUE 40145
40137: LD_INT 36
40139: DOUBLE
40140: EQUAL
40141: IFTRUE 40145
40143: GO 40170
40145: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40146: LD_ADDR_VAR 0 3
40150: PUSH
40151: LD_INT 15
40153: PPUSH
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 321
40163: PUSH
40164: LD_INT 2
40166: EQUAL
40167: ST_TO_ADDR
40168: GO 40414
40170: LD_INT 30
40172: DOUBLE
40173: EQUAL
40174: IFTRUE 40178
40176: GO 40203
40178: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40179: LD_ADDR_VAR 0 3
40183: PUSH
40184: LD_INT 20
40186: PPUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: CALL_OW 321
40196: PUSH
40197: LD_INT 2
40199: EQUAL
40200: ST_TO_ADDR
40201: GO 40414
40203: LD_INT 28
40205: DOUBLE
40206: EQUAL
40207: IFTRUE 40217
40209: LD_INT 21
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40242
40217: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40218: LD_ADDR_VAR 0 3
40222: PUSH
40223: LD_INT 21
40225: PPUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 321
40235: PUSH
40236: LD_INT 2
40238: EQUAL
40239: ST_TO_ADDR
40240: GO 40414
40242: LD_INT 16
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40250
40248: GO 40275
40250: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_INT 84
40258: PPUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: CALL_OW 321
40268: PUSH
40269: LD_INT 2
40271: EQUAL
40272: ST_TO_ADDR
40273: GO 40414
40275: LD_INT 19
40277: DOUBLE
40278: EQUAL
40279: IFTRUE 40289
40281: LD_INT 23
40283: DOUBLE
40284: EQUAL
40285: IFTRUE 40289
40287: GO 40314
40289: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40290: LD_ADDR_VAR 0 3
40294: PUSH
40295: LD_INT 83
40297: PPUSH
40298: LD_VAR 0 1
40302: PPUSH
40303: CALL_OW 321
40307: PUSH
40308: LD_INT 2
40310: EQUAL
40311: ST_TO_ADDR
40312: GO 40414
40314: LD_INT 17
40316: DOUBLE
40317: EQUAL
40318: IFTRUE 40322
40320: GO 40347
40322: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40323: LD_ADDR_VAR 0 3
40327: PUSH
40328: LD_INT 39
40330: PPUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 321
40340: PUSH
40341: LD_INT 2
40343: EQUAL
40344: ST_TO_ADDR
40345: GO 40414
40347: LD_INT 18
40349: DOUBLE
40350: EQUAL
40351: IFTRUE 40355
40353: GO 40380
40355: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40356: LD_ADDR_VAR 0 3
40360: PUSH
40361: LD_INT 40
40363: PPUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: CALL_OW 321
40373: PUSH
40374: LD_INT 2
40376: EQUAL
40377: ST_TO_ADDR
40378: GO 40414
40380: LD_INT 27
40382: DOUBLE
40383: EQUAL
40384: IFTRUE 40388
40386: GO 40413
40388: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40389: LD_ADDR_VAR 0 3
40393: PUSH
40394: LD_INT 35
40396: PPUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 321
40406: PUSH
40407: LD_INT 2
40409: EQUAL
40410: ST_TO_ADDR
40411: GO 40414
40413: POP
// end ;
40414: LD_VAR 0 3
40418: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40419: LD_INT 0
40421: PPUSH
40422: PPUSH
40423: PPUSH
40424: PPUSH
40425: PPUSH
40426: PPUSH
40427: PPUSH
40428: PPUSH
40429: PPUSH
40430: PPUSH
40431: PPUSH
// result := false ;
40432: LD_ADDR_VAR 0 6
40436: PUSH
40437: LD_INT 0
40439: ST_TO_ADDR
// if btype = b_depot then
40440: LD_VAR 0 2
40444: PUSH
40445: LD_INT 0
40447: EQUAL
40448: IFFALSE 40460
// begin result := true ;
40450: LD_ADDR_VAR 0 6
40454: PUSH
40455: LD_INT 1
40457: ST_TO_ADDR
// exit ;
40458: GO 41314
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40460: LD_VAR 0 1
40464: NOT
40465: IFTRUE 40490
40467: PUSH
40468: LD_VAR 0 1
40472: PPUSH
40473: CALL_OW 266
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: IN
40488: NOT
40489: OR
40490: IFTRUE 40499
40492: PUSH
40493: LD_VAR 0 2
40497: NOT
40498: OR
40499: IFTRUE 40535
40501: PUSH
40502: LD_VAR 0 5
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 3
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: LD_INT 5
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: IN
40533: NOT
40534: OR
40535: IFTRUE 40554
40537: PUSH
40538: LD_VAR 0 3
40542: PPUSH
40543: LD_VAR 0 4
40547: PPUSH
40548: CALL_OW 488
40552: NOT
40553: OR
40554: IFFALSE 40558
// exit ;
40556: GO 41314
// side := GetSide ( depot ) ;
40558: LD_ADDR_VAR 0 9
40562: PUSH
40563: LD_VAR 0 1
40567: PPUSH
40568: CALL_OW 255
40572: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40573: LD_VAR 0 9
40577: PPUSH
40578: LD_VAR 0 2
40582: PPUSH
40583: CALL 40043 0 2
40587: NOT
40588: IFFALSE 40592
// exit ;
40590: GO 41314
// pom := GetBase ( depot ) ;
40592: LD_ADDR_VAR 0 10
40596: PUSH
40597: LD_VAR 0 1
40601: PPUSH
40602: CALL_OW 274
40606: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40607: LD_ADDR_VAR 0 11
40611: PUSH
40612: LD_VAR 0 2
40616: PPUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: CALL_OW 248
40626: PPUSH
40627: CALL_OW 450
40631: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40632: LD_VAR 0 10
40636: PPUSH
40637: LD_INT 1
40639: PPUSH
40640: CALL_OW 275
40644: PUSH
40645: LD_VAR 0 11
40649: PUSH
40650: LD_INT 1
40652: ARRAY
40653: GREATEREQUAL
40654: IFFALSE 40680
40656: PUSH
40657: LD_VAR 0 10
40661: PPUSH
40662: LD_INT 2
40664: PPUSH
40665: CALL_OW 275
40669: PUSH
40670: LD_VAR 0 11
40674: PUSH
40675: LD_INT 2
40677: ARRAY
40678: GREATEREQUAL
40679: AND
40680: IFFALSE 40706
40682: PUSH
40683: LD_VAR 0 10
40687: PPUSH
40688: LD_INT 3
40690: PPUSH
40691: CALL_OW 275
40695: PUSH
40696: LD_VAR 0 11
40700: PUSH
40701: LD_INT 3
40703: ARRAY
40704: GREATEREQUAL
40705: AND
40706: NOT
40707: IFFALSE 40711
// exit ;
40709: GO 41314
// if GetBType ( depot ) = b_depot then
40711: LD_VAR 0 1
40715: PPUSH
40716: CALL_OW 266
40720: PUSH
40721: LD_INT 0
40723: EQUAL
40724: IFFALSE 40736
// dist := 28 else
40726: LD_ADDR_VAR 0 14
40730: PUSH
40731: LD_INT 28
40733: ST_TO_ADDR
40734: GO 40744
// dist := 36 ;
40736: LD_ADDR_VAR 0 14
40740: PUSH
40741: LD_INT 36
40743: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40744: LD_VAR 0 1
40748: PPUSH
40749: LD_VAR 0 3
40753: PPUSH
40754: LD_VAR 0 4
40758: PPUSH
40759: CALL_OW 297
40763: PUSH
40764: LD_VAR 0 14
40768: GREATER
40769: IFFALSE 40773
// exit ;
40771: GO 41314
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40773: LD_ADDR_VAR 0 12
40777: PUSH
40778: LD_VAR 0 2
40782: PPUSH
40783: LD_VAR 0 3
40787: PPUSH
40788: LD_VAR 0 4
40792: PPUSH
40793: LD_VAR 0 5
40797: PPUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: CALL_OW 248
40807: PPUSH
40808: LD_INT 0
40810: PPUSH
40811: CALL 41319 0 6
40815: ST_TO_ADDR
// if not hexes then
40816: LD_VAR 0 12
40820: NOT
40821: IFFALSE 40825
// exit ;
40823: GO 41314
// hex := GetHexInfo ( x , y ) ;
40825: LD_ADDR_VAR 0 15
40829: PUSH
40830: LD_VAR 0 3
40834: PPUSH
40835: LD_VAR 0 4
40839: PPUSH
40840: CALL_OW 546
40844: ST_TO_ADDR
// if hex [ 1 ] then
40845: LD_VAR 0 15
40849: PUSH
40850: LD_INT 1
40852: ARRAY
40853: IFFALSE 40857
// exit ;
40855: GO 41314
// height := hex [ 2 ] ;
40857: LD_ADDR_VAR 0 13
40861: PUSH
40862: LD_VAR 0 15
40866: PUSH
40867: LD_INT 2
40869: ARRAY
40870: ST_TO_ADDR
// for i = 1 to hexes do
40871: LD_ADDR_VAR 0 7
40875: PUSH
40876: DOUBLE
40877: LD_INT 1
40879: DEC
40880: ST_TO_ADDR
40881: LD_VAR 0 12
40885: PUSH
40886: FOR_TO
40887: IFFALSE 41231
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40889: LD_VAR 0 12
40893: PUSH
40894: LD_VAR 0 7
40898: ARRAY
40899: PUSH
40900: LD_INT 1
40902: ARRAY
40903: PPUSH
40904: LD_VAR 0 12
40908: PUSH
40909: LD_VAR 0 7
40913: ARRAY
40914: PUSH
40915: LD_INT 2
40917: ARRAY
40918: PPUSH
40919: CALL_OW 488
40923: NOT
40924: IFTRUE 40966
40926: PUSH
40927: LD_VAR 0 12
40931: PUSH
40932: LD_VAR 0 7
40936: ARRAY
40937: PUSH
40938: LD_INT 1
40940: ARRAY
40941: PPUSH
40942: LD_VAR 0 12
40946: PUSH
40947: LD_VAR 0 7
40951: ARRAY
40952: PUSH
40953: LD_INT 2
40955: ARRAY
40956: PPUSH
40957: CALL_OW 428
40961: PUSH
40962: LD_INT 0
40964: GREATER
40965: OR
40966: IFTRUE 41004
40968: PUSH
40969: LD_VAR 0 12
40973: PUSH
40974: LD_VAR 0 7
40978: ARRAY
40979: PUSH
40980: LD_INT 1
40982: ARRAY
40983: PPUSH
40984: LD_VAR 0 12
40988: PUSH
40989: LD_VAR 0 7
40993: ARRAY
40994: PUSH
40995: LD_INT 2
40997: ARRAY
40998: PPUSH
40999: CALL_OW 351
41003: OR
41004: IFFALSE 41010
// exit ;
41006: POP
41007: POP
41008: GO 41314
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41010: LD_ADDR_VAR 0 8
41014: PUSH
41015: LD_VAR 0 12
41019: PUSH
41020: LD_VAR 0 7
41024: ARRAY
41025: PUSH
41026: LD_INT 1
41028: ARRAY
41029: PPUSH
41030: LD_VAR 0 12
41034: PUSH
41035: LD_VAR 0 7
41039: ARRAY
41040: PUSH
41041: LD_INT 2
41043: ARRAY
41044: PPUSH
41045: CALL_OW 546
41049: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41050: LD_VAR 0 8
41054: PUSH
41055: LD_INT 1
41057: ARRAY
41058: IFTRUE 41080
41060: PUSH
41061: LD_VAR 0 8
41065: PUSH
41066: LD_INT 2
41068: ARRAY
41069: PUSH
41070: LD_VAR 0 13
41074: PUSH
41075: LD_INT 2
41077: PLUS
41078: GREATER
41079: OR
41080: IFTRUE 41102
41082: PUSH
41083: LD_VAR 0 8
41087: PUSH
41088: LD_INT 2
41090: ARRAY
41091: PUSH
41092: LD_VAR 0 13
41096: PUSH
41097: LD_INT 2
41099: MINUS
41100: LESS
41101: OR
41102: IFTRUE 41170
41104: PUSH
41105: LD_VAR 0 8
41109: PUSH
41110: LD_INT 3
41112: ARRAY
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 8
41119: PUSH
41120: LD_INT 9
41122: PUSH
41123: LD_INT 10
41125: PUSH
41126: LD_INT 11
41128: PUSH
41129: LD_INT 12
41131: PUSH
41132: LD_INT 13
41134: PUSH
41135: LD_INT 16
41137: PUSH
41138: LD_INT 17
41140: PUSH
41141: LD_INT 18
41143: PUSH
41144: LD_INT 19
41146: PUSH
41147: LD_INT 20
41149: PUSH
41150: LD_INT 21
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: IN
41168: NOT
41169: OR
41170: IFTRUE 41183
41172: PUSH
41173: LD_VAR 0 8
41177: PUSH
41178: LD_INT 5
41180: ARRAY
41181: NOT
41182: OR
41183: IFTRUE 41223
41185: PUSH
41186: LD_VAR 0 8
41190: PUSH
41191: LD_INT 6
41193: ARRAY
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 7
41203: PUSH
41204: LD_INT 9
41206: PUSH
41207: LD_INT 10
41209: PUSH
41210: LD_INT 11
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: IN
41221: NOT
41222: OR
41223: IFFALSE 41229
// exit ;
41225: POP
41226: POP
41227: GO 41314
// end ;
41229: GO 40886
41231: POP
41232: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41233: LD_VAR 0 9
41237: PPUSH
41238: LD_VAR 0 3
41242: PPUSH
41243: LD_VAR 0 4
41247: PPUSH
41248: LD_INT 20
41250: PPUSH
41251: CALL 33133 0 4
41255: PUSH
41256: LD_INT 4
41258: ARRAY
41259: IFFALSE 41263
// exit ;
41261: GO 41314
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41263: LD_VAR 0 2
41267: PUSH
41268: LD_INT 29
41270: PUSH
41271: LD_INT 30
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: IN
41278: IFFALSE 41302
41280: PUSH
41281: LD_VAR 0 3
41285: PPUSH
41286: LD_VAR 0 4
41290: PPUSH
41291: LD_VAR 0 9
41295: PPUSH
41296: CALL_OW 440
41300: NOT
41301: AND
41302: IFFALSE 41306
// exit ;
41304: GO 41314
// result := true ;
41306: LD_ADDR_VAR 0 6
41310: PUSH
41311: LD_INT 1
41313: ST_TO_ADDR
// end ;
41314: LD_VAR 0 6
41318: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41319: LD_INT 0
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
41376: PPUSH
41377: PPUSH
41378: PPUSH
// result = [ ] ;
41379: LD_ADDR_VAR 0 7
41383: PUSH
41384: EMPTY
41385: ST_TO_ADDR
// temp_list = [ ] ;
41386: LD_ADDR_VAR 0 9
41390: PUSH
41391: EMPTY
41392: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41393: LD_VAR 0 4
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: IN
41424: NOT
41425: IFTRUE 41468
41427: PUSH
41428: LD_VAR 0 1
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: IN
41443: IFFALSE 41467
41445: PUSH
41446: LD_VAR 0 5
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: LD_INT 3
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: IN
41465: NOT
41466: AND
41467: OR
41468: IFFALSE 41472
// exit ;
41470: GO 59871
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41472: LD_VAR 0 1
41476: PUSH
41477: LD_INT 6
41479: PUSH
41480: LD_INT 7
41482: PUSH
41483: LD_INT 8
41485: PUSH
41486: LD_INT 13
41488: PUSH
41489: LD_INT 12
41491: PUSH
41492: LD_INT 15
41494: PUSH
41495: LD_INT 11
41497: PUSH
41498: LD_INT 14
41500: PUSH
41501: LD_INT 10
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: IN
41515: IFFALSE 41525
// btype = b_lab ;
41517: LD_ADDR_VAR 0 1
41521: PUSH
41522: LD_INT 6
41524: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41525: LD_VAR 0 6
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: IN
41544: NOT
41545: IFTRUE 41613
41547: PUSH
41548: LD_VAR 0 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: LD_INT 6
41567: PUSH
41568: LD_INT 36
41570: PUSH
41571: LD_INT 4
41573: PUSH
41574: LD_INT 5
41576: PUSH
41577: LD_INT 31
41579: PUSH
41580: LD_INT 32
41582: PUSH
41583: LD_INT 33
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: IN
41599: NOT
41600: IFFALSE 41612
41602: PUSH
41603: LD_VAR 0 6
41607: PUSH
41608: LD_INT 1
41610: EQUAL
41611: AND
41612: OR
41613: IFTRUE 41645
41615: PUSH
41616: LD_VAR 0 1
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 3
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: IN
41631: NOT
41632: IFFALSE 41644
41634: PUSH
41635: LD_VAR 0 6
41639: PUSH
41640: LD_INT 2
41642: EQUAL
41643: AND
41644: OR
41645: IFFALSE 41655
// mode = 0 ;
41647: LD_ADDR_VAR 0 6
41651: PUSH
41652: LD_INT 0
41654: ST_TO_ADDR
// case mode of 0 :
41655: LD_VAR 0 6
41659: PUSH
41660: LD_INT 0
41662: DOUBLE
41663: EQUAL
41664: IFTRUE 41668
41666: GO 53121
41668: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41669: LD_ADDR_VAR 0 11
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 3
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41862: LD_ADDR_VAR 0 12
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42058: LD_ADDR_VAR 0 13
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: LD_INT 2
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: LD_INT 3
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: NEG
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: NEG
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42257: LD_ADDR_VAR 0 14
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 3
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 3
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42453: LD_ADDR_VAR 0 15
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 3
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42646: LD_ADDR_VAR 0 16
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 2
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42839: LD_ADDR_VAR 0 17
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 2
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43069: LD_ADDR_VAR 0 18
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 2
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43299: LD_ADDR_VAR 0 19
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 2
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43529: LD_ADDR_VAR 0 20
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43759: LD_ADDR_VAR 0 21
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43989: LD_ADDR_VAR 0 22
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44219: LD_ADDR_VAR 0 23
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 2
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 3
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 3
44446: NEG
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44499: LD_ADDR_VAR 0 24
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44775: LD_ADDR_VAR 0 25
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45049: LD_ADDR_VAR 0 26
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45325: LD_ADDR_VAR 0 27
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 3
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 3
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45605: LD_ADDR_VAR 0 28
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 3
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45887: LD_ADDR_VAR 0 29
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 3
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46166: LD_ADDR_VAR 0 30
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46444: LD_ADDR_VAR 0 31
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 2
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: NEG
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46722: LD_ADDR_VAR 0 32
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 2
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 2
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47000: LD_ADDR_VAR 0 33
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: LD_INT 3
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47279: LD_ADDR_VAR 0 34
47283: PUSH
47284: LD_INT 0
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 3
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 2
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 3
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47559: LD_ADDR_VAR 0 35
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47671: LD_ADDR_VAR 0 36
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47783: LD_ADDR_VAR 0 37
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47895: LD_ADDR_VAR 0 38
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48007: LD_ADDR_VAR 0 39
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48119: LD_ADDR_VAR 0 40
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48231: LD_ADDR_VAR 0 41
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: LD_INT 1
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 3
48516: NEG
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: LD_INT 3
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48581: LD_ADDR_VAR 0 42
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 0
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 2
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 3
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48931: LD_ADDR_VAR 0 43
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 3
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 3
49227: NEG
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 3
49238: NEG
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49279: LD_ADDR_VAR 0 44
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 3
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 3
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49629: LD_ADDR_VAR 0 45
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: LD_INT 2
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 3
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 3
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 3
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: NEG
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49979: LD_ADDR_VAR 0 46
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 3
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: NEG
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: NEG
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50327: LD_ADDR_VAR 0 47
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50478: LD_ADDR_VAR 0 48
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50625: LD_ADDR_VAR 0 49
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50769: LD_ADDR_VAR 0 50
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 2
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50913: LD_ADDR_VAR 0 51
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51060: LD_ADDR_VAR 0 52
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51211: LD_ADDR_VAR 0 53
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51441: LD_ADDR_VAR 0 54
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51671: LD_ADDR_VAR 0 55
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51901: LD_ADDR_VAR 0 56
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52131: LD_ADDR_VAR 0 57
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 2
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 1
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 2
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52361: LD_ADDR_VAR 0 58
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 1
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: LD_INT 2
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 2
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52591: LD_ADDR_VAR 0 59
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52679: LD_ADDR_VAR 0 60
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52767: LD_ADDR_VAR 0 61
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52855: LD_ADDR_VAR 0 62
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52943: LD_ADDR_VAR 0 63
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53031: LD_ADDR_VAR 0 64
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 1
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// end ; 1 :
53119: GO 59016
53121: LD_INT 1
53123: DOUBLE
53124: EQUAL
53125: IFTRUE 53129
53127: GO 55752
53129: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53130: LD_ADDR_VAR 0 11
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 0
53149: PUSH
53150: LD_INT 3
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53174: LD_ADDR_VAR 0 12
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53215: LD_ADDR_VAR 0 13
53219: PUSH
53220: LD_INT 3
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 3
53232: PUSH
53233: LD_INT 3
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 3
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53255: LD_ADDR_VAR 0 14
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: LD_INT 3
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53296: LD_ADDR_VAR 0 15
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53340: LD_ADDR_VAR 0 16
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: LD_INT 3
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53386: LD_ADDR_VAR 0 17
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 3
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 3
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: LIST
53429: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53430: LD_ADDR_VAR 0 18
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53471: LD_ADDR_VAR 0 19
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 3
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53511: LD_ADDR_VAR 0 20
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53552: LD_ADDR_VAR 0 21
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53596: LD_ADDR_VAR 0 22
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 3
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53642: LD_ADDR_VAR 0 23
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 3
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 4
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53686: LD_ADDR_VAR 0 24
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53727: LD_ADDR_VAR 0 25
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53767: LD_ADDR_VAR 0 26
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 4
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 3
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53808: LD_ADDR_VAR 0 27
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 4
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: LIST
53851: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53852: LD_ADDR_VAR 0 28
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 3
53871: NEG
53872: PUSH
53873: LD_INT 4
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 4
53883: NEG
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53898: LD_ADDR_VAR 0 29
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 3
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 4
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 4
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 5
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 5
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 6
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 6
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 5
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54053: LD_ADDR_VAR 0 30
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 4
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 4
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: PUSH
54123: LD_INT 1
54125: NEG
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 5
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 5
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 5
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 6
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 6
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54196: LD_ADDR_VAR 0 31
54200: PUSH
54201: LD_INT 3
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 4
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 4
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 5
54263: PUSH
54264: LD_INT 4
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 5
54273: PUSH
54274: LD_INT 5
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 4
54283: PUSH
54284: LD_INT 5
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 6
54293: PUSH
54294: LD_INT 5
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 6
54303: PUSH
54304: LD_INT 6
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 5
54313: PUSH
54314: LD_INT 6
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54335: LD_ADDR_VAR 0 32
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 4
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: LD_INT 4
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 5
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 5
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: LD_INT 4
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 6
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 6
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 5
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54478: LD_ADDR_VAR 0 33
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 4
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 4
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 4
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 5
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 5
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 5
54587: NEG
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 6
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 6
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54633: LD_ADDR_VAR 0 34
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 3
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: NEG
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: NEG
54677: PUSH
54678: LD_INT 4
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 4
54688: NEG
54689: PUSH
54690: LD_INT 3
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 4
54700: NEG
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 4
54712: NEG
54713: PUSH
54714: LD_INT 5
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 5
54724: NEG
54725: PUSH
54726: LD_INT 4
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 5
54736: NEG
54737: PUSH
54738: LD_INT 5
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 5
54748: NEG
54749: PUSH
54750: LD_INT 6
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 6
54760: NEG
54761: PUSH
54762: LD_INT 5
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 6
54772: NEG
54773: PUSH
54774: LD_INT 6
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54796: LD_ADDR_VAR 0 41
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 2
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54840: LD_ADDR_VAR 0 42
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54881: LD_ADDR_VAR 0 43
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54921: LD_ADDR_VAR 0 44
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54962: LD_ADDR_VAR 0 45
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55006: LD_ADDR_VAR 0 46
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 3
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55052: LD_ADDR_VAR 0 47
55056: PUSH
55057: LD_INT 2
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 3
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55085: LD_ADDR_VAR 0 48
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55116: LD_ADDR_VAR 0 49
55120: PUSH
55121: LD_INT 3
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55145: LD_ADDR_VAR 0 50
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55174: LD_ADDR_VAR 0 51
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55205: LD_ADDR_VAR 0 52
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55238: LD_ADDR_VAR 0 53
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 3
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: LD_INT 3
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55282: LD_ADDR_VAR 0 54
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55323: LD_ADDR_VAR 0 55
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: LD_INT 2
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 3
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55363: LD_ADDR_VAR 0 56
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: LD_INT 3
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55404: LD_ADDR_VAR 0 57
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: LIST
55447: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55448: LD_ADDR_VAR 0 58
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 3
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55494: LD_ADDR_VAR 0 59
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55538: LD_ADDR_VAR 0 60
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55579: LD_ADDR_VAR 0 61
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55619: LD_ADDR_VAR 0 62
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55660: LD_ADDR_VAR 0 63
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55704: LD_ADDR_VAR 0 64
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// end ; 2 :
55750: GO 59016
55752: LD_INT 2
55754: DOUBLE
55755: EQUAL
55756: IFTRUE 55760
55758: GO 59015
55760: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55761: LD_ADDR_VAR 0 29
55765: PUSH
55766: LD_INT 4
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 4
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 5
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 4
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 4
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 4
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: LD_INT 4
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 4
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 4
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 4
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 3
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 4
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 5
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 5
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 5
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 4
56100: NEG
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 4
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: LD_INT 2
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 4
56146: NEG
56147: PUSH
56148: LD_INT 4
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 4
56158: NEG
56159: PUSH
56160: LD_INT 5
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: LD_INT 3
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 4
56194: NEG
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 5
56206: NEG
56207: PUSH
56208: LD_INT 4
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 5
56218: NEG
56219: PUSH
56220: LD_INT 5
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: LD_INT 5
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 5
56242: NEG
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56299: LD_ADDR_VAR 0 30
56303: PUSH
56304: LD_INT 4
56306: PUSH
56307: LD_INT 4
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 4
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 5
56326: PUSH
56327: LD_INT 4
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 4
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 5
56376: PUSH
56377: LD_INT 3
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: LD_INT 5
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: LD_INT 4
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: LD_INT 4
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: LD_INT 4
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 5
56556: NEG
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 5
56568: NEG
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: NEG
56604: PUSH
56605: LD_INT 4
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 4
56663: NEG
56664: PUSH
56665: LD_INT 4
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: LD_INT 4
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 4
56687: NEG
56688: PUSH
56689: LD_INT 2
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 5
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 4
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 5
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: NEG
56790: PUSH
56791: LD_INT 5
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56846: LD_ADDR_VAR 0 31
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 4
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 5
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 5
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 4
57002: NEG
57003: PUSH
57004: LD_INT 0
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 4
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 4
57025: NEG
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 4
57048: NEG
57049: PUSH
57050: LD_INT 4
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 4
57060: NEG
57061: PUSH
57062: LD_INT 5
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 4
57076: NEG
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 5
57108: NEG
57109: PUSH
57110: LD_INT 4
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 5
57120: NEG
57121: PUSH
57122: LD_INT 5
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: LD_INT 5
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 5
57144: NEG
57145: PUSH
57146: LD_INT 3
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 4
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 4
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: NEG
57247: PUSH
57248: LD_INT 4
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 4
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 4
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 5
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: PUSH
57331: LD_INT 2
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 5
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57396: LD_ADDR_VAR 0 32
57400: PUSH
57401: LD_INT 4
57403: NEG
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 4
57414: NEG
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 4
57448: NEG
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 5
57459: NEG
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 5
57470: NEG
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 5
57482: NEG
57483: PUSH
57484: LD_INT 2
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: LD_INT 3
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 2
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: LD_INT 3
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 4
57577: NEG
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 4
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 5
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 3
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: NEG
57669: PUSH
57670: LD_INT 4
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: LD_INT 5
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 5
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 4
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 4
57808: PUSH
57809: LD_INT 4
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 4
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 5
57828: PUSH
57829: LD_INT 4
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 5
57838: PUSH
57839: LD_INT 5
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 4
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 4
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 5
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: LD_INT 5
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57943: LD_ADDR_VAR 0 33
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 4
57962: NEG
57963: PUSH
57964: LD_INT 5
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 3
57974: NEG
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 4
57998: NEG
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 5
58010: NEG
58011: PUSH
58012: LD_INT 4
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 5
58022: NEG
58023: PUSH
58024: LD_INT 5
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 5
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 5
58046: NEG
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 3
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 0
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 3
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 5
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 5
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 4
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 3
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 3
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 3
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 5
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: LD_INT 3
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 4
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 4
58283: PUSH
58284: LD_INT 4
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: LD_INT 4
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 4
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: LD_INT 4
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 3
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: LD_INT 5
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 5
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58481: LD_ADDR_VAR 0 34
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 5
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 4
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: LD_INT 4
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 5
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 3
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 4
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 4
58683: PUSH
58684: LD_INT 4
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: LD_INT 3
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 5
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 5
58713: PUSH
58714: LD_INT 5
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 4
58723: PUSH
58724: LD_INT 5
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: LD_INT 4
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: LD_INT 5
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: LD_INT 4
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: LD_INT 4
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 4
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 4
58866: NEG
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 4
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 5
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 5
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 5
58945: NEG
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 3
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: ST_TO_ADDR
// end ; end ;
59013: GO 59016
59015: POP
// case btype of b_depot , b_warehouse :
59016: LD_VAR 0 1
59020: PUSH
59021: LD_INT 0
59023: DOUBLE
59024: EQUAL
59025: IFTRUE 59035
59027: LD_INT 1
59029: DOUBLE
59030: EQUAL
59031: IFTRUE 59035
59033: GO 59236
59035: POP
// case nation of nation_american :
59036: LD_VAR 0 5
59040: PUSH
59041: LD_INT 1
59043: DOUBLE
59044: EQUAL
59045: IFTRUE 59049
59047: GO 59105
59049: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59050: LD_ADDR_VAR 0 9
59054: PUSH
59055: LD_VAR 0 11
59059: PUSH
59060: LD_VAR 0 12
59064: PUSH
59065: LD_VAR 0 13
59069: PUSH
59070: LD_VAR 0 14
59074: PUSH
59075: LD_VAR 0 15
59079: PUSH
59080: LD_VAR 0 16
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: PUSH
59093: LD_VAR 0 4
59097: PUSH
59098: LD_INT 1
59100: PLUS
59101: ARRAY
59102: ST_TO_ADDR
59103: GO 59234
59105: LD_INT 2
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59113
59111: GO 59169
59113: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59114: LD_ADDR_VAR 0 9
59118: PUSH
59119: LD_VAR 0 17
59123: PUSH
59124: LD_VAR 0 18
59128: PUSH
59129: LD_VAR 0 19
59133: PUSH
59134: LD_VAR 0 20
59138: PUSH
59139: LD_VAR 0 21
59143: PUSH
59144: LD_VAR 0 22
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: PUSH
59157: LD_VAR 0 4
59161: PUSH
59162: LD_INT 1
59164: PLUS
59165: ARRAY
59166: ST_TO_ADDR
59167: GO 59234
59169: LD_INT 3
59171: DOUBLE
59172: EQUAL
59173: IFTRUE 59177
59175: GO 59233
59177: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59178: LD_ADDR_VAR 0 9
59182: PUSH
59183: LD_VAR 0 23
59187: PUSH
59188: LD_VAR 0 24
59192: PUSH
59193: LD_VAR 0 25
59197: PUSH
59198: LD_VAR 0 26
59202: PUSH
59203: LD_VAR 0 27
59207: PUSH
59208: LD_VAR 0 28
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: PUSH
59221: LD_VAR 0 4
59225: PUSH
59226: LD_INT 1
59228: PLUS
59229: ARRAY
59230: ST_TO_ADDR
59231: GO 59234
59233: POP
59234: GO 59789
59236: LD_INT 2
59238: DOUBLE
59239: EQUAL
59240: IFTRUE 59250
59242: LD_INT 3
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59250
59248: GO 59306
59250: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59251: LD_ADDR_VAR 0 9
59255: PUSH
59256: LD_VAR 0 29
59260: PUSH
59261: LD_VAR 0 30
59265: PUSH
59266: LD_VAR 0 31
59270: PUSH
59271: LD_VAR 0 32
59275: PUSH
59276: LD_VAR 0 33
59280: PUSH
59281: LD_VAR 0 34
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: PUSH
59294: LD_VAR 0 4
59298: PUSH
59299: LD_INT 1
59301: PLUS
59302: ARRAY
59303: ST_TO_ADDR
59304: GO 59789
59306: LD_INT 16
59308: DOUBLE
59309: EQUAL
59310: IFTRUE 59368
59312: LD_INT 17
59314: DOUBLE
59315: EQUAL
59316: IFTRUE 59368
59318: LD_INT 18
59320: DOUBLE
59321: EQUAL
59322: IFTRUE 59368
59324: LD_INT 19
59326: DOUBLE
59327: EQUAL
59328: IFTRUE 59368
59330: LD_INT 22
59332: DOUBLE
59333: EQUAL
59334: IFTRUE 59368
59336: LD_INT 20
59338: DOUBLE
59339: EQUAL
59340: IFTRUE 59368
59342: LD_INT 21
59344: DOUBLE
59345: EQUAL
59346: IFTRUE 59368
59348: LD_INT 23
59350: DOUBLE
59351: EQUAL
59352: IFTRUE 59368
59354: LD_INT 24
59356: DOUBLE
59357: EQUAL
59358: IFTRUE 59368
59360: LD_INT 25
59362: DOUBLE
59363: EQUAL
59364: IFTRUE 59368
59366: GO 59424
59368: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59369: LD_ADDR_VAR 0 9
59373: PUSH
59374: LD_VAR 0 35
59378: PUSH
59379: LD_VAR 0 36
59383: PUSH
59384: LD_VAR 0 37
59388: PUSH
59389: LD_VAR 0 38
59393: PUSH
59394: LD_VAR 0 39
59398: PUSH
59399: LD_VAR 0 40
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: PUSH
59412: LD_VAR 0 4
59416: PUSH
59417: LD_INT 1
59419: PLUS
59420: ARRAY
59421: ST_TO_ADDR
59422: GO 59789
59424: LD_INT 6
59426: DOUBLE
59427: EQUAL
59428: IFTRUE 59480
59430: LD_INT 7
59432: DOUBLE
59433: EQUAL
59434: IFTRUE 59480
59436: LD_INT 8
59438: DOUBLE
59439: EQUAL
59440: IFTRUE 59480
59442: LD_INT 13
59444: DOUBLE
59445: EQUAL
59446: IFTRUE 59480
59448: LD_INT 12
59450: DOUBLE
59451: EQUAL
59452: IFTRUE 59480
59454: LD_INT 15
59456: DOUBLE
59457: EQUAL
59458: IFTRUE 59480
59460: LD_INT 11
59462: DOUBLE
59463: EQUAL
59464: IFTRUE 59480
59466: LD_INT 14
59468: DOUBLE
59469: EQUAL
59470: IFTRUE 59480
59472: LD_INT 10
59474: DOUBLE
59475: EQUAL
59476: IFTRUE 59480
59478: GO 59536
59480: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59481: LD_ADDR_VAR 0 9
59485: PUSH
59486: LD_VAR 0 41
59490: PUSH
59491: LD_VAR 0 42
59495: PUSH
59496: LD_VAR 0 43
59500: PUSH
59501: LD_VAR 0 44
59505: PUSH
59506: LD_VAR 0 45
59510: PUSH
59511: LD_VAR 0 46
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: PUSH
59524: LD_VAR 0 4
59528: PUSH
59529: LD_INT 1
59531: PLUS
59532: ARRAY
59533: ST_TO_ADDR
59534: GO 59789
59536: LD_INT 36
59538: DOUBLE
59539: EQUAL
59540: IFTRUE 59544
59542: GO 59600
59544: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59545: LD_ADDR_VAR 0 9
59549: PUSH
59550: LD_VAR 0 47
59554: PUSH
59555: LD_VAR 0 48
59559: PUSH
59560: LD_VAR 0 49
59564: PUSH
59565: LD_VAR 0 50
59569: PUSH
59570: LD_VAR 0 51
59574: PUSH
59575: LD_VAR 0 52
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: PUSH
59588: LD_VAR 0 4
59592: PUSH
59593: LD_INT 1
59595: PLUS
59596: ARRAY
59597: ST_TO_ADDR
59598: GO 59789
59600: LD_INT 4
59602: DOUBLE
59603: EQUAL
59604: IFTRUE 59626
59606: LD_INT 5
59608: DOUBLE
59609: EQUAL
59610: IFTRUE 59626
59612: LD_INT 34
59614: DOUBLE
59615: EQUAL
59616: IFTRUE 59626
59618: LD_INT 37
59620: DOUBLE
59621: EQUAL
59622: IFTRUE 59626
59624: GO 59682
59626: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59627: LD_ADDR_VAR 0 9
59631: PUSH
59632: LD_VAR 0 53
59636: PUSH
59637: LD_VAR 0 54
59641: PUSH
59642: LD_VAR 0 55
59646: PUSH
59647: LD_VAR 0 56
59651: PUSH
59652: LD_VAR 0 57
59656: PUSH
59657: LD_VAR 0 58
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: PUSH
59670: LD_VAR 0 4
59674: PUSH
59675: LD_INT 1
59677: PLUS
59678: ARRAY
59679: ST_TO_ADDR
59680: GO 59789
59682: LD_INT 31
59684: DOUBLE
59685: EQUAL
59686: IFTRUE 59732
59688: LD_INT 32
59690: DOUBLE
59691: EQUAL
59692: IFTRUE 59732
59694: LD_INT 33
59696: DOUBLE
59697: EQUAL
59698: IFTRUE 59732
59700: LD_INT 27
59702: DOUBLE
59703: EQUAL
59704: IFTRUE 59732
59706: LD_INT 26
59708: DOUBLE
59709: EQUAL
59710: IFTRUE 59732
59712: LD_INT 28
59714: DOUBLE
59715: EQUAL
59716: IFTRUE 59732
59718: LD_INT 29
59720: DOUBLE
59721: EQUAL
59722: IFTRUE 59732
59724: LD_INT 30
59726: DOUBLE
59727: EQUAL
59728: IFTRUE 59732
59730: GO 59788
59732: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59733: LD_ADDR_VAR 0 9
59737: PUSH
59738: LD_VAR 0 59
59742: PUSH
59743: LD_VAR 0 60
59747: PUSH
59748: LD_VAR 0 61
59752: PUSH
59753: LD_VAR 0 62
59757: PUSH
59758: LD_VAR 0 63
59762: PUSH
59763: LD_VAR 0 64
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: PUSH
59776: LD_VAR 0 4
59780: PUSH
59781: LD_INT 1
59783: PLUS
59784: ARRAY
59785: ST_TO_ADDR
59786: GO 59789
59788: POP
// temp_list2 = [ ] ;
59789: LD_ADDR_VAR 0 10
59793: PUSH
59794: EMPTY
59795: ST_TO_ADDR
// for i in temp_list do
59796: LD_ADDR_VAR 0 8
59800: PUSH
59801: LD_VAR 0 9
59805: PUSH
59806: FOR_IN
59807: IFFALSE 59859
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59809: LD_ADDR_VAR 0 10
59813: PUSH
59814: LD_VAR 0 10
59818: PUSH
59819: LD_VAR 0 8
59823: PUSH
59824: LD_INT 1
59826: ARRAY
59827: PUSH
59828: LD_VAR 0 2
59832: PLUS
59833: PUSH
59834: LD_VAR 0 8
59838: PUSH
59839: LD_INT 2
59841: ARRAY
59842: PUSH
59843: LD_VAR 0 3
59847: PLUS
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: EMPTY
59854: LIST
59855: ADD
59856: ST_TO_ADDR
59857: GO 59806
59859: POP
59860: POP
// result = temp_list2 ;
59861: LD_ADDR_VAR 0 7
59865: PUSH
59866: LD_VAR 0 10
59870: ST_TO_ADDR
// end ;
59871: LD_VAR 0 7
59875: RET
// export function EnemyInRange ( unit , dist ) ; begin
59876: LD_INT 0
59878: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59879: LD_ADDR_VAR 0 3
59883: PUSH
59884: LD_VAR 0 1
59888: PPUSH
59889: CALL_OW 255
59893: PPUSH
59894: LD_VAR 0 1
59898: PPUSH
59899: CALL_OW 250
59903: PPUSH
59904: LD_VAR 0 1
59908: PPUSH
59909: CALL_OW 251
59913: PPUSH
59914: LD_VAR 0 2
59918: PPUSH
59919: CALL 33133 0 4
59923: PUSH
59924: LD_INT 4
59926: ARRAY
59927: ST_TO_ADDR
// end ;
59928: LD_VAR 0 3
59932: RET
// export function PlayerSeeMe ( unit ) ; begin
59933: LD_INT 0
59935: PPUSH
// result := See ( your_side , unit ) ;
59936: LD_ADDR_VAR 0 2
59940: PUSH
59941: LD_OWVAR 2
59945: PPUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 292
59955: ST_TO_ADDR
// end ;
59956: LD_VAR 0 2
59960: RET
// export function ReverseDir ( unit ) ; begin
59961: LD_INT 0
59963: PPUSH
// if not unit then
59964: LD_VAR 0 1
59968: NOT
59969: IFFALSE 59973
// exit ;
59971: GO 59996
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59973: LD_ADDR_VAR 0 2
59977: PUSH
59978: LD_VAR 0 1
59982: PPUSH
59983: CALL_OW 254
59987: PUSH
59988: LD_INT 3
59990: PLUS
59991: PUSH
59992: LD_INT 6
59994: MOD
59995: ST_TO_ADDR
// end ;
59996: LD_VAR 0 2
60000: RET
// export function ReverseArray ( array ) ; var i ; begin
60001: LD_INT 0
60003: PPUSH
60004: PPUSH
// if not array then
60005: LD_VAR 0 1
60009: NOT
60010: IFFALSE 60014
// exit ;
60012: GO 60069
// result := [ ] ;
60014: LD_ADDR_VAR 0 2
60018: PUSH
60019: EMPTY
60020: ST_TO_ADDR
// for i := array downto 1 do
60021: LD_ADDR_VAR 0 3
60025: PUSH
60026: DOUBLE
60027: LD_VAR 0 1
60031: INC
60032: ST_TO_ADDR
60033: LD_INT 1
60035: PUSH
60036: FOR_DOWNTO
60037: IFFALSE 60067
// result := Join ( result , array [ i ] ) ;
60039: LD_ADDR_VAR 0 2
60043: PUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: LD_VAR 0 1
60053: PUSH
60054: LD_VAR 0 3
60058: ARRAY
60059: PPUSH
60060: CALL 64911 0 2
60064: ST_TO_ADDR
60065: GO 60036
60067: POP
60068: POP
// end ;
60069: LD_VAR 0 2
60073: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60074: LD_INT 0
60076: PPUSH
60077: PPUSH
60078: PPUSH
60079: PPUSH
60080: PPUSH
60081: PPUSH
// if not unit or not hexes then
60082: LD_VAR 0 1
60086: NOT
60087: IFTRUE 60096
60089: PUSH
60090: LD_VAR 0 2
60094: NOT
60095: OR
60096: IFFALSE 60100
// exit ;
60098: GO 60223
// dist := 9999 ;
60100: LD_ADDR_VAR 0 5
60104: PUSH
60105: LD_INT 9999
60107: ST_TO_ADDR
// for i = 1 to hexes do
60108: LD_ADDR_VAR 0 4
60112: PUSH
60113: DOUBLE
60114: LD_INT 1
60116: DEC
60117: ST_TO_ADDR
60118: LD_VAR 0 2
60122: PUSH
60123: FOR_TO
60124: IFFALSE 60211
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60126: LD_ADDR_VAR 0 6
60130: PUSH
60131: LD_VAR 0 1
60135: PPUSH
60136: LD_VAR 0 2
60140: PUSH
60141: LD_VAR 0 4
60145: ARRAY
60146: PUSH
60147: LD_INT 1
60149: ARRAY
60150: PPUSH
60151: LD_VAR 0 2
60155: PUSH
60156: LD_VAR 0 4
60160: ARRAY
60161: PUSH
60162: LD_INT 2
60164: ARRAY
60165: PPUSH
60166: CALL_OW 297
60170: ST_TO_ADDR
// if tdist < dist then
60171: LD_VAR 0 6
60175: PUSH
60176: LD_VAR 0 5
60180: LESS
60181: IFFALSE 60209
// begin hex := hexes [ i ] ;
60183: LD_ADDR_VAR 0 8
60187: PUSH
60188: LD_VAR 0 2
60192: PUSH
60193: LD_VAR 0 4
60197: ARRAY
60198: ST_TO_ADDR
// dist := tdist ;
60199: LD_ADDR_VAR 0 5
60203: PUSH
60204: LD_VAR 0 6
60208: ST_TO_ADDR
// end ; end ;
60209: GO 60123
60211: POP
60212: POP
// result := hex ;
60213: LD_ADDR_VAR 0 3
60217: PUSH
60218: LD_VAR 0 8
60222: ST_TO_ADDR
// end ;
60223: LD_VAR 0 3
60227: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60228: LD_INT 0
60230: PPUSH
60231: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60232: LD_VAR 0 1
60236: NOT
60237: IFTRUE 60276
60239: PUSH
60240: LD_VAR 0 1
60244: PUSH
60245: LD_INT 21
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 23
60257: PUSH
60258: LD_INT 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PPUSH
60269: CALL_OW 69
60273: IN
60274: NOT
60275: OR
60276: IFFALSE 60280
// exit ;
60278: GO 60327
// for i = 1 to 3 do
60280: LD_ADDR_VAR 0 3
60284: PUSH
60285: DOUBLE
60286: LD_INT 1
60288: DEC
60289: ST_TO_ADDR
60290: LD_INT 3
60292: PUSH
60293: FOR_TO
60294: IFFALSE 60325
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60296: LD_VAR 0 1
60300: PPUSH
60301: CALL_OW 250
60305: PPUSH
60306: LD_VAR 0 1
60310: PPUSH
60311: CALL_OW 251
60315: PPUSH
60316: LD_INT 1
60318: PPUSH
60319: CALL_OW 453
60323: GO 60293
60325: POP
60326: POP
// end ;
60327: LD_VAR 0 2
60331: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60332: LD_INT 0
60334: PPUSH
60335: PPUSH
60336: PPUSH
60337: PPUSH
60338: PPUSH
60339: PPUSH
// if not unit or not enemy_unit then
60340: LD_VAR 0 1
60344: NOT
60345: IFTRUE 60354
60347: PUSH
60348: LD_VAR 0 2
60352: NOT
60353: OR
60354: IFFALSE 60358
// exit ;
60356: GO 60829
// if GetLives ( i ) < 250 then
60358: LD_VAR 0 4
60362: PPUSH
60363: CALL_OW 256
60367: PUSH
60368: LD_INT 250
60370: LESS
60371: IFFALSE 60384
// begin ComAutodestruct ( i ) ;
60373: LD_VAR 0 4
60377: PPUSH
60378: CALL 60228 0 1
// exit ;
60382: GO 60829
// end ; x := GetX ( enemy_unit ) ;
60384: LD_ADDR_VAR 0 7
60388: PUSH
60389: LD_VAR 0 2
60393: PPUSH
60394: CALL_OW 250
60398: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60399: LD_ADDR_VAR 0 8
60403: PUSH
60404: LD_VAR 0 2
60408: PPUSH
60409: CALL_OW 251
60413: ST_TO_ADDR
// if not x or not y then
60414: LD_VAR 0 7
60418: NOT
60419: IFTRUE 60428
60421: PUSH
60422: LD_VAR 0 8
60426: NOT
60427: OR
60428: IFFALSE 60432
// exit ;
60430: GO 60829
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60432: LD_ADDR_VAR 0 6
60436: PUSH
60437: LD_VAR 0 7
60441: PPUSH
60442: LD_INT 0
60444: PPUSH
60445: LD_INT 4
60447: PPUSH
60448: CALL_OW 272
60452: PUSH
60453: LD_VAR 0 8
60457: PPUSH
60458: LD_INT 0
60460: PPUSH
60461: LD_INT 4
60463: PPUSH
60464: CALL_OW 273
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_VAR 0 7
60477: PPUSH
60478: LD_INT 1
60480: PPUSH
60481: LD_INT 4
60483: PPUSH
60484: CALL_OW 272
60488: PUSH
60489: LD_VAR 0 8
60493: PPUSH
60494: LD_INT 1
60496: PPUSH
60497: LD_INT 4
60499: PPUSH
60500: CALL_OW 273
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_VAR 0 7
60513: PPUSH
60514: LD_INT 2
60516: PPUSH
60517: LD_INT 4
60519: PPUSH
60520: CALL_OW 272
60524: PUSH
60525: LD_VAR 0 8
60529: PPUSH
60530: LD_INT 2
60532: PPUSH
60533: LD_INT 4
60535: PPUSH
60536: CALL_OW 273
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_VAR 0 7
60549: PPUSH
60550: LD_INT 3
60552: PPUSH
60553: LD_INT 4
60555: PPUSH
60556: CALL_OW 272
60560: PUSH
60561: LD_VAR 0 8
60565: PPUSH
60566: LD_INT 3
60568: PPUSH
60569: LD_INT 4
60571: PPUSH
60572: CALL_OW 273
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_VAR 0 7
60585: PPUSH
60586: LD_INT 4
60588: PPUSH
60589: LD_INT 4
60591: PPUSH
60592: CALL_OW 272
60596: PUSH
60597: LD_VAR 0 8
60601: PPUSH
60602: LD_INT 4
60604: PPUSH
60605: LD_INT 4
60607: PPUSH
60608: CALL_OW 273
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_VAR 0 7
60621: PPUSH
60622: LD_INT 5
60624: PPUSH
60625: LD_INT 4
60627: PPUSH
60628: CALL_OW 272
60632: PUSH
60633: LD_VAR 0 8
60637: PPUSH
60638: LD_INT 5
60640: PPUSH
60641: LD_INT 4
60643: PPUSH
60644: CALL_OW 273
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: ST_TO_ADDR
// for i = tmp downto 1 do
60661: LD_ADDR_VAR 0 4
60665: PUSH
60666: DOUBLE
60667: LD_VAR 0 6
60671: INC
60672: ST_TO_ADDR
60673: LD_INT 1
60675: PUSH
60676: FOR_DOWNTO
60677: IFFALSE 60780
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60679: LD_VAR 0 6
60683: PUSH
60684: LD_VAR 0 4
60688: ARRAY
60689: PUSH
60690: LD_INT 1
60692: ARRAY
60693: PPUSH
60694: LD_VAR 0 6
60698: PUSH
60699: LD_VAR 0 4
60703: ARRAY
60704: PUSH
60705: LD_INT 2
60707: ARRAY
60708: PPUSH
60709: CALL_OW 488
60713: NOT
60714: IFTRUE 60756
60716: PUSH
60717: LD_VAR 0 6
60721: PUSH
60722: LD_VAR 0 4
60726: ARRAY
60727: PUSH
60728: LD_INT 1
60730: ARRAY
60731: PPUSH
60732: LD_VAR 0 6
60736: PUSH
60737: LD_VAR 0 4
60741: ARRAY
60742: PUSH
60743: LD_INT 2
60745: ARRAY
60746: PPUSH
60747: CALL_OW 428
60751: PUSH
60752: LD_INT 0
60754: NONEQUAL
60755: OR
60756: IFFALSE 60778
// tmp := Delete ( tmp , i ) ;
60758: LD_ADDR_VAR 0 6
60762: PUSH
60763: LD_VAR 0 6
60767: PPUSH
60768: LD_VAR 0 4
60772: PPUSH
60773: CALL_OW 3
60777: ST_TO_ADDR
60778: GO 60676
60780: POP
60781: POP
// j := GetClosestHex ( unit , tmp ) ;
60782: LD_ADDR_VAR 0 5
60786: PUSH
60787: LD_VAR 0 1
60791: PPUSH
60792: LD_VAR 0 6
60796: PPUSH
60797: CALL 60074 0 2
60801: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60802: LD_VAR 0 1
60806: PPUSH
60807: LD_VAR 0 5
60811: PUSH
60812: LD_INT 1
60814: ARRAY
60815: PPUSH
60816: LD_VAR 0 5
60820: PUSH
60821: LD_INT 2
60823: ARRAY
60824: PPUSH
60825: CALL_OW 111
// end ;
60829: LD_VAR 0 3
60833: RET
// export function PrepareApemanSoldier ( ) ; begin
60834: LD_INT 0
60836: PPUSH
// uc_nation := 0 ;
60837: LD_ADDR_OWVAR 21
60841: PUSH
60842: LD_INT 0
60844: ST_TO_ADDR
// hc_sex := sex_male ;
60845: LD_ADDR_OWVAR 27
60849: PUSH
60850: LD_INT 1
60852: ST_TO_ADDR
// hc_name :=  ;
60853: LD_ADDR_OWVAR 26
60857: PUSH
60858: LD_STRING 
60860: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60861: LD_ADDR_OWVAR 28
60865: PUSH
60866: LD_INT 15
60868: ST_TO_ADDR
// hc_gallery :=  ;
60869: LD_ADDR_OWVAR 33
60873: PUSH
60874: LD_STRING 
60876: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60877: LD_ADDR_OWVAR 31
60881: PUSH
60882: LD_INT 0
60884: PPUSH
60885: LD_INT 3
60887: PPUSH
60888: CALL_OW 12
60892: PUSH
60893: LD_INT 0
60895: PPUSH
60896: LD_INT 3
60898: PPUSH
60899: CALL_OW 12
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60916: LD_ADDR_OWVAR 29
60920: PUSH
60921: LD_INT 12
60923: PUSH
60924: LD_INT 12
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: ST_TO_ADDR
// end ;
60931: LD_VAR 0 1
60935: RET
// export function PrepareApemanEngineer ( ) ; begin
60936: LD_INT 0
60938: PPUSH
// uc_nation := 0 ;
60939: LD_ADDR_OWVAR 21
60943: PUSH
60944: LD_INT 0
60946: ST_TO_ADDR
// hc_sex := sex_male ;
60947: LD_ADDR_OWVAR 27
60951: PUSH
60952: LD_INT 1
60954: ST_TO_ADDR
// hc_name :=  ;
60955: LD_ADDR_OWVAR 26
60959: PUSH
60960: LD_STRING 
60962: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60963: LD_ADDR_OWVAR 28
60967: PUSH
60968: LD_INT 16
60970: ST_TO_ADDR
// hc_gallery :=  ;
60971: LD_ADDR_OWVAR 33
60975: PUSH
60976: LD_STRING 
60978: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60979: LD_ADDR_OWVAR 31
60983: PUSH
60984: LD_INT 0
60986: PPUSH
60987: LD_INT 3
60989: PPUSH
60990: CALL_OW 12
60994: PUSH
60995: LD_INT 0
60997: PPUSH
60998: LD_INT 3
61000: PPUSH
61001: CALL_OW 12
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61018: LD_ADDR_OWVAR 29
61022: PUSH
61023: LD_INT 12
61025: PUSH
61026: LD_INT 12
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: ST_TO_ADDR
// end ;
61033: LD_VAR 0 1
61037: RET
// export function PrepareApeman ( agressivity ) ; begin
61038: LD_INT 0
61040: PPUSH
// uc_side := 0 ;
61041: LD_ADDR_OWVAR 20
61045: PUSH
61046: LD_INT 0
61048: ST_TO_ADDR
// uc_nation := 0 ;
61049: LD_ADDR_OWVAR 21
61053: PUSH
61054: LD_INT 0
61056: ST_TO_ADDR
// hc_sex := sex_male ;
61057: LD_ADDR_OWVAR 27
61061: PUSH
61062: LD_INT 1
61064: ST_TO_ADDR
// hc_class := class_apeman ;
61065: LD_ADDR_OWVAR 28
61069: PUSH
61070: LD_INT 12
61072: ST_TO_ADDR
// hc_gallery :=  ;
61073: LD_ADDR_OWVAR 33
61077: PUSH
61078: LD_STRING 
61080: ST_TO_ADDR
// hc_name :=  ;
61081: LD_ADDR_OWVAR 26
61085: PUSH
61086: LD_STRING 
61088: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61089: LD_ADDR_OWVAR 29
61093: PUSH
61094: LD_INT 12
61096: PUSH
61097: LD_INT 12
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: ST_TO_ADDR
// if agressivity = 0 then
61104: LD_VAR 0 1
61108: PUSH
61109: LD_INT 0
61111: EQUAL
61112: IFFALSE 61124
// hc_agressivity := 0 else
61114: LD_ADDR_OWVAR 35
61118: PUSH
61119: LD_INT 0
61121: ST_TO_ADDR
61122: GO 61145
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61124: LD_ADDR_OWVAR 35
61128: PUSH
61129: LD_VAR 0 1
61133: NEG
61134: PPUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: CALL_OW 12
61144: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61145: LD_ADDR_OWVAR 31
61149: PUSH
61150: LD_INT 0
61152: PPUSH
61153: LD_INT 3
61155: PPUSH
61156: CALL_OW 12
61160: PUSH
61161: LD_INT 0
61163: PPUSH
61164: LD_INT 3
61166: PPUSH
61167: CALL_OW 12
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: ST_TO_ADDR
// end ;
61184: LD_VAR 0 2
61188: RET
// export function PrepareTiger ( agressivity ) ; begin
61189: LD_INT 0
61191: PPUSH
// uc_side := 0 ;
61192: LD_ADDR_OWVAR 20
61196: PUSH
61197: LD_INT 0
61199: ST_TO_ADDR
// uc_nation := 0 ;
61200: LD_ADDR_OWVAR 21
61204: PUSH
61205: LD_INT 0
61207: ST_TO_ADDR
// InitHc ;
61208: CALL_OW 19
// hc_class := class_tiger ;
61212: LD_ADDR_OWVAR 28
61216: PUSH
61217: LD_INT 14
61219: ST_TO_ADDR
// hc_gallery :=  ;
61220: LD_ADDR_OWVAR 33
61224: PUSH
61225: LD_STRING 
61227: ST_TO_ADDR
// hc_name :=  ;
61228: LD_ADDR_OWVAR 26
61232: PUSH
61233: LD_STRING 
61235: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61236: LD_ADDR_OWVAR 35
61240: PUSH
61241: LD_VAR 0 1
61245: NEG
61246: PPUSH
61247: LD_VAR 0 1
61251: PPUSH
61252: CALL_OW 12
61256: ST_TO_ADDR
// end ;
61257: LD_VAR 0 2
61261: RET
// export function PrepareEnchidna ( ) ; begin
61262: LD_INT 0
61264: PPUSH
// uc_side := 0 ;
61265: LD_ADDR_OWVAR 20
61269: PUSH
61270: LD_INT 0
61272: ST_TO_ADDR
// uc_nation := 0 ;
61273: LD_ADDR_OWVAR 21
61277: PUSH
61278: LD_INT 0
61280: ST_TO_ADDR
// InitHc ;
61281: CALL_OW 19
// hc_class := class_baggie ;
61285: LD_ADDR_OWVAR 28
61289: PUSH
61290: LD_INT 13
61292: ST_TO_ADDR
// hc_gallery :=  ;
61293: LD_ADDR_OWVAR 33
61297: PUSH
61298: LD_STRING 
61300: ST_TO_ADDR
// hc_name :=  ;
61301: LD_ADDR_OWVAR 26
61305: PUSH
61306: LD_STRING 
61308: ST_TO_ADDR
// end ;
61309: LD_VAR 0 1
61313: RET
// export function PrepareFrog ( ) ; begin
61314: LD_INT 0
61316: PPUSH
// uc_side := 0 ;
61317: LD_ADDR_OWVAR 20
61321: PUSH
61322: LD_INT 0
61324: ST_TO_ADDR
// uc_nation := 0 ;
61325: LD_ADDR_OWVAR 21
61329: PUSH
61330: LD_INT 0
61332: ST_TO_ADDR
// InitHc ;
61333: CALL_OW 19
// hc_class := class_frog ;
61337: LD_ADDR_OWVAR 28
61341: PUSH
61342: LD_INT 19
61344: ST_TO_ADDR
// hc_gallery :=  ;
61345: LD_ADDR_OWVAR 33
61349: PUSH
61350: LD_STRING 
61352: ST_TO_ADDR
// hc_name :=  ;
61353: LD_ADDR_OWVAR 26
61357: PUSH
61358: LD_STRING 
61360: ST_TO_ADDR
// end ;
61361: LD_VAR 0 1
61365: RET
// export function PrepareFish ( ) ; begin
61366: LD_INT 0
61368: PPUSH
// uc_side := 0 ;
61369: LD_ADDR_OWVAR 20
61373: PUSH
61374: LD_INT 0
61376: ST_TO_ADDR
// uc_nation := 0 ;
61377: LD_ADDR_OWVAR 21
61381: PUSH
61382: LD_INT 0
61384: ST_TO_ADDR
// InitHc ;
61385: CALL_OW 19
// hc_class := class_fish ;
61389: LD_ADDR_OWVAR 28
61393: PUSH
61394: LD_INT 20
61396: ST_TO_ADDR
// hc_gallery :=  ;
61397: LD_ADDR_OWVAR 33
61401: PUSH
61402: LD_STRING 
61404: ST_TO_ADDR
// hc_name :=  ;
61405: LD_ADDR_OWVAR 26
61409: PUSH
61410: LD_STRING 
61412: ST_TO_ADDR
// end ;
61413: LD_VAR 0 1
61417: RET
// export function PrepareBird ( ) ; begin
61418: LD_INT 0
61420: PPUSH
// uc_side := 0 ;
61421: LD_ADDR_OWVAR 20
61425: PUSH
61426: LD_INT 0
61428: ST_TO_ADDR
// uc_nation := 0 ;
61429: LD_ADDR_OWVAR 21
61433: PUSH
61434: LD_INT 0
61436: ST_TO_ADDR
// InitHc ;
61437: CALL_OW 19
// hc_class := class_phororhacos ;
61441: LD_ADDR_OWVAR 28
61445: PUSH
61446: LD_INT 18
61448: ST_TO_ADDR
// hc_gallery :=  ;
61449: LD_ADDR_OWVAR 33
61453: PUSH
61454: LD_STRING 
61456: ST_TO_ADDR
// hc_name :=  ;
61457: LD_ADDR_OWVAR 26
61461: PUSH
61462: LD_STRING 
61464: ST_TO_ADDR
// end ;
61465: LD_VAR 0 1
61469: RET
// export function PrepareHorse ( ) ; begin
61470: LD_INT 0
61472: PPUSH
// uc_side := 0 ;
61473: LD_ADDR_OWVAR 20
61477: PUSH
61478: LD_INT 0
61480: ST_TO_ADDR
// uc_nation := 0 ;
61481: LD_ADDR_OWVAR 21
61485: PUSH
61486: LD_INT 0
61488: ST_TO_ADDR
// InitHc ;
61489: CALL_OW 19
// hc_class := class_horse ;
61493: LD_ADDR_OWVAR 28
61497: PUSH
61498: LD_INT 21
61500: ST_TO_ADDR
// hc_gallery :=  ;
61501: LD_ADDR_OWVAR 33
61505: PUSH
61506: LD_STRING 
61508: ST_TO_ADDR
// hc_name :=  ;
61509: LD_ADDR_OWVAR 26
61513: PUSH
61514: LD_STRING 
61516: ST_TO_ADDR
// end ;
61517: LD_VAR 0 1
61521: RET
// export function PrepareMastodont ( ) ; begin
61522: LD_INT 0
61524: PPUSH
// uc_side := 0 ;
61525: LD_ADDR_OWVAR 20
61529: PUSH
61530: LD_INT 0
61532: ST_TO_ADDR
// uc_nation := 0 ;
61533: LD_ADDR_OWVAR 21
61537: PUSH
61538: LD_INT 0
61540: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61541: LD_ADDR_OWVAR 37
61545: PUSH
61546: LD_INT 31
61548: ST_TO_ADDR
// vc_control := control_rider ;
61549: LD_ADDR_OWVAR 38
61553: PUSH
61554: LD_INT 4
61556: ST_TO_ADDR
// end ;
61557: LD_VAR 0 1
61561: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61562: LD_INT 0
61564: PPUSH
61565: PPUSH
61566: PPUSH
// uc_side = 0 ;
61567: LD_ADDR_OWVAR 20
61571: PUSH
61572: LD_INT 0
61574: ST_TO_ADDR
// uc_nation = 0 ;
61575: LD_ADDR_OWVAR 21
61579: PUSH
61580: LD_INT 0
61582: ST_TO_ADDR
// InitHc_All ( ) ;
61583: CALL_OW 584
// InitVc ;
61587: CALL_OW 20
// if mastodonts then
61591: LD_VAR 0 6
61595: IFFALSE 61662
// for i = 1 to mastodonts do
61597: LD_ADDR_VAR 0 11
61601: PUSH
61602: DOUBLE
61603: LD_INT 1
61605: DEC
61606: ST_TO_ADDR
61607: LD_VAR 0 6
61611: PUSH
61612: FOR_TO
61613: IFFALSE 61660
// begin vc_chassis := 31 ;
61615: LD_ADDR_OWVAR 37
61619: PUSH
61620: LD_INT 31
61622: ST_TO_ADDR
// vc_control := control_rider ;
61623: LD_ADDR_OWVAR 38
61627: PUSH
61628: LD_INT 4
61630: ST_TO_ADDR
// animal := CreateVehicle ;
61631: LD_ADDR_VAR 0 12
61635: PUSH
61636: CALL_OW 45
61640: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61641: LD_VAR 0 12
61645: PPUSH
61646: LD_VAR 0 8
61650: PPUSH
61651: LD_INT 0
61653: PPUSH
61654: CALL 63804 0 3
// end ;
61658: GO 61612
61660: POP
61661: POP
// if horses then
61662: LD_VAR 0 5
61666: IFFALSE 61733
// for i = 1 to horses do
61668: LD_ADDR_VAR 0 11
61672: PUSH
61673: DOUBLE
61674: LD_INT 1
61676: DEC
61677: ST_TO_ADDR
61678: LD_VAR 0 5
61682: PUSH
61683: FOR_TO
61684: IFFALSE 61731
// begin hc_class := 21 ;
61686: LD_ADDR_OWVAR 28
61690: PUSH
61691: LD_INT 21
61693: ST_TO_ADDR
// hc_gallery :=  ;
61694: LD_ADDR_OWVAR 33
61698: PUSH
61699: LD_STRING 
61701: ST_TO_ADDR
// animal := CreateHuman ;
61702: LD_ADDR_VAR 0 12
61706: PUSH
61707: CALL_OW 44
61711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61712: LD_VAR 0 12
61716: PPUSH
61717: LD_VAR 0 8
61721: PPUSH
61722: LD_INT 0
61724: PPUSH
61725: CALL 63804 0 3
// end ;
61729: GO 61683
61731: POP
61732: POP
// if birds then
61733: LD_VAR 0 1
61737: IFFALSE 61804
// for i = 1 to birds do
61739: LD_ADDR_VAR 0 11
61743: PUSH
61744: DOUBLE
61745: LD_INT 1
61747: DEC
61748: ST_TO_ADDR
61749: LD_VAR 0 1
61753: PUSH
61754: FOR_TO
61755: IFFALSE 61802
// begin hc_class := 18 ;
61757: LD_ADDR_OWVAR 28
61761: PUSH
61762: LD_INT 18
61764: ST_TO_ADDR
// hc_gallery =  ;
61765: LD_ADDR_OWVAR 33
61769: PUSH
61770: LD_STRING 
61772: ST_TO_ADDR
// animal := CreateHuman ;
61773: LD_ADDR_VAR 0 12
61777: PUSH
61778: CALL_OW 44
61782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61783: LD_VAR 0 12
61787: PPUSH
61788: LD_VAR 0 8
61792: PPUSH
61793: LD_INT 0
61795: PPUSH
61796: CALL 63804 0 3
// end ;
61800: GO 61754
61802: POP
61803: POP
// if tigers then
61804: LD_VAR 0 2
61808: IFFALSE 61892
// for i = 1 to tigers do
61810: LD_ADDR_VAR 0 11
61814: PUSH
61815: DOUBLE
61816: LD_INT 1
61818: DEC
61819: ST_TO_ADDR
61820: LD_VAR 0 2
61824: PUSH
61825: FOR_TO
61826: IFFALSE 61890
// begin hc_class = class_tiger ;
61828: LD_ADDR_OWVAR 28
61832: PUSH
61833: LD_INT 14
61835: ST_TO_ADDR
// hc_gallery =  ;
61836: LD_ADDR_OWVAR 33
61840: PUSH
61841: LD_STRING 
61843: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61844: LD_ADDR_OWVAR 35
61848: PUSH
61849: LD_INT 7
61851: NEG
61852: PPUSH
61853: LD_INT 7
61855: PPUSH
61856: CALL_OW 12
61860: ST_TO_ADDR
// animal := CreateHuman ;
61861: LD_ADDR_VAR 0 12
61865: PUSH
61866: CALL_OW 44
61870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61871: LD_VAR 0 12
61875: PPUSH
61876: LD_VAR 0 8
61880: PPUSH
61881: LD_INT 0
61883: PPUSH
61884: CALL 63804 0 3
// end ;
61888: GO 61825
61890: POP
61891: POP
// if apemans then
61892: LD_VAR 0 3
61896: IFFALSE 62019
// for i = 1 to apemans do
61898: LD_ADDR_VAR 0 11
61902: PUSH
61903: DOUBLE
61904: LD_INT 1
61906: DEC
61907: ST_TO_ADDR
61908: LD_VAR 0 3
61912: PUSH
61913: FOR_TO
61914: IFFALSE 62017
// begin hc_class = class_apeman ;
61916: LD_ADDR_OWVAR 28
61920: PUSH
61921: LD_INT 12
61923: ST_TO_ADDR
// hc_gallery =  ;
61924: LD_ADDR_OWVAR 33
61928: PUSH
61929: LD_STRING 
61931: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61932: LD_ADDR_OWVAR 35
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PPUSH
61941: LD_INT 2
61943: PPUSH
61944: CALL_OW 12
61948: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61949: LD_ADDR_OWVAR 31
61953: PUSH
61954: LD_INT 1
61956: PPUSH
61957: LD_INT 3
61959: PPUSH
61960: CALL_OW 12
61964: PUSH
61965: LD_INT 1
61967: PPUSH
61968: LD_INT 3
61970: PPUSH
61971: CALL_OW 12
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: ST_TO_ADDR
// animal := CreateHuman ;
61988: LD_ADDR_VAR 0 12
61992: PUSH
61993: CALL_OW 44
61997: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61998: LD_VAR 0 12
62002: PPUSH
62003: LD_VAR 0 8
62007: PPUSH
62008: LD_INT 0
62010: PPUSH
62011: CALL 63804 0 3
// end ;
62015: GO 61913
62017: POP
62018: POP
// if enchidnas then
62019: LD_VAR 0 4
62023: IFFALSE 62090
// for i = 1 to enchidnas do
62025: LD_ADDR_VAR 0 11
62029: PUSH
62030: DOUBLE
62031: LD_INT 1
62033: DEC
62034: ST_TO_ADDR
62035: LD_VAR 0 4
62039: PUSH
62040: FOR_TO
62041: IFFALSE 62088
// begin hc_class = 13 ;
62043: LD_ADDR_OWVAR 28
62047: PUSH
62048: LD_INT 13
62050: ST_TO_ADDR
// hc_gallery =  ;
62051: LD_ADDR_OWVAR 33
62055: PUSH
62056: LD_STRING 
62058: ST_TO_ADDR
// animal := CreateHuman ;
62059: LD_ADDR_VAR 0 12
62063: PUSH
62064: CALL_OW 44
62068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62069: LD_VAR 0 12
62073: PPUSH
62074: LD_VAR 0 8
62078: PPUSH
62079: LD_INT 0
62081: PPUSH
62082: CALL 63804 0 3
// end ;
62086: GO 62040
62088: POP
62089: POP
// if fishes then
62090: LD_VAR 0 7
62094: IFFALSE 62161
// for i = 1 to fishes do
62096: LD_ADDR_VAR 0 11
62100: PUSH
62101: DOUBLE
62102: LD_INT 1
62104: DEC
62105: ST_TO_ADDR
62106: LD_VAR 0 7
62110: PUSH
62111: FOR_TO
62112: IFFALSE 62159
// begin hc_class = 20 ;
62114: LD_ADDR_OWVAR 28
62118: PUSH
62119: LD_INT 20
62121: ST_TO_ADDR
// hc_gallery =  ;
62122: LD_ADDR_OWVAR 33
62126: PUSH
62127: LD_STRING 
62129: ST_TO_ADDR
// animal := CreateHuman ;
62130: LD_ADDR_VAR 0 12
62134: PUSH
62135: CALL_OW 44
62139: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62140: LD_VAR 0 12
62144: PPUSH
62145: LD_VAR 0 9
62149: PPUSH
62150: LD_INT 0
62152: PPUSH
62153: CALL 63804 0 3
// end ;
62157: GO 62111
62159: POP
62160: POP
// end ;
62161: LD_VAR 0 10
62165: RET
// export function WantHeal ( sci , unit ) ; begin
62166: LD_INT 0
62168: PPUSH
// if GetTaskList ( sci ) > 0 then
62169: LD_VAR 0 1
62173: PPUSH
62174: CALL_OW 437
62178: PUSH
62179: LD_INT 0
62181: GREATER
62182: IFFALSE 62254
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62184: LD_VAR 0 1
62188: PPUSH
62189: CALL_OW 437
62193: PUSH
62194: LD_INT 1
62196: ARRAY
62197: PUSH
62198: LD_INT 1
62200: ARRAY
62201: PUSH
62202: LD_STRING l
62204: EQUAL
62205: IFFALSE 62232
62207: PUSH
62208: LD_VAR 0 1
62212: PPUSH
62213: CALL_OW 437
62217: PUSH
62218: LD_INT 1
62220: ARRAY
62221: PUSH
62222: LD_INT 4
62224: ARRAY
62225: PUSH
62226: LD_VAR 0 2
62230: EQUAL
62231: AND
62232: IFFALSE 62244
// result := true else
62234: LD_ADDR_VAR 0 3
62238: PUSH
62239: LD_INT 1
62241: ST_TO_ADDR
62242: GO 62252
// result := false ;
62244: LD_ADDR_VAR 0 3
62248: PUSH
62249: LD_INT 0
62251: ST_TO_ADDR
// end else
62252: GO 62262
// result := false ;
62254: LD_ADDR_VAR 0 3
62258: PUSH
62259: LD_INT 0
62261: ST_TO_ADDR
// end ;
62262: LD_VAR 0 3
62266: RET
// export function HealTarget ( sci ) ; begin
62267: LD_INT 0
62269: PPUSH
// if not sci then
62270: LD_VAR 0 1
62274: NOT
62275: IFFALSE 62279
// exit ;
62277: GO 62344
// result := 0 ;
62279: LD_ADDR_VAR 0 2
62283: PUSH
62284: LD_INT 0
62286: ST_TO_ADDR
// if GetTaskList ( sci ) then
62287: LD_VAR 0 1
62291: PPUSH
62292: CALL_OW 437
62296: IFFALSE 62344
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 437
62307: PUSH
62308: LD_INT 1
62310: ARRAY
62311: PUSH
62312: LD_INT 1
62314: ARRAY
62315: PUSH
62316: LD_STRING l
62318: EQUAL
62319: IFFALSE 62344
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62321: LD_ADDR_VAR 0 2
62325: PUSH
62326: LD_VAR 0 1
62330: PPUSH
62331: CALL_OW 437
62335: PUSH
62336: LD_INT 1
62338: ARRAY
62339: PUSH
62340: LD_INT 4
62342: ARRAY
62343: ST_TO_ADDR
// end ;
62344: LD_VAR 0 2
62348: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62349: LD_INT 0
62351: PPUSH
62352: PPUSH
62353: PPUSH
62354: PPUSH
// if not base_units then
62355: LD_VAR 0 1
62359: NOT
62360: IFFALSE 62364
// exit ;
62362: GO 62451
// result := false ;
62364: LD_ADDR_VAR 0 2
62368: PUSH
62369: LD_INT 0
62371: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62372: LD_ADDR_VAR 0 5
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: LD_INT 21
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PPUSH
62392: CALL_OW 72
62396: ST_TO_ADDR
// if not tmp then
62397: LD_VAR 0 5
62401: NOT
62402: IFFALSE 62406
// exit ;
62404: GO 62451
// for i in tmp do
62406: LD_ADDR_VAR 0 3
62410: PUSH
62411: LD_VAR 0 5
62415: PUSH
62416: FOR_IN
62417: IFFALSE 62449
// begin result := EnemyInRange ( i , 22 ) ;
62419: LD_ADDR_VAR 0 2
62423: PUSH
62424: LD_VAR 0 3
62428: PPUSH
62429: LD_INT 22
62431: PPUSH
62432: CALL 59876 0 2
62436: ST_TO_ADDR
// if result then
62437: LD_VAR 0 2
62441: IFFALSE 62447
// exit ;
62443: POP
62444: POP
62445: GO 62451
// end ;
62447: GO 62416
62449: POP
62450: POP
// end ;
62451: LD_VAR 0 2
62455: RET
// export function FilterByTag ( units , tag ) ; begin
62456: LD_INT 0
62458: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62459: LD_ADDR_VAR 0 3
62463: PUSH
62464: LD_VAR 0 1
62468: PPUSH
62469: LD_INT 120
62471: PUSH
62472: LD_VAR 0 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PPUSH
62481: CALL_OW 72
62485: ST_TO_ADDR
// end ;
62486: LD_VAR 0 3
62490: RET
// export function IsDriver ( un ) ; begin
62491: LD_INT 0
62493: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62494: LD_ADDR_VAR 0 2
62498: PUSH
62499: LD_VAR 0 1
62503: PUSH
62504: LD_INT 55
62506: PUSH
62507: EMPTY
62508: LIST
62509: PPUSH
62510: CALL_OW 69
62514: IN
62515: ST_TO_ADDR
// end ;
62516: LD_VAR 0 2
62520: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62521: LD_INT 0
62523: PPUSH
62524: PPUSH
// list := [ ] ;
62525: LD_ADDR_VAR 0 5
62529: PUSH
62530: EMPTY
62531: ST_TO_ADDR
// case d of 0 :
62532: LD_VAR 0 3
62536: PUSH
62537: LD_INT 0
62539: DOUBLE
62540: EQUAL
62541: IFTRUE 62545
62543: GO 62678
62545: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62546: LD_ADDR_VAR 0 5
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_INT 4
62558: MINUS
62559: PUSH
62560: LD_VAR 0 2
62564: PUSH
62565: LD_INT 4
62567: MINUS
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: PUSH
62577: LD_VAR 0 1
62581: PUSH
62582: LD_INT 3
62584: MINUS
62585: PUSH
62586: LD_VAR 0 2
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: PUSH
62599: LD_VAR 0 1
62603: PUSH
62604: LD_INT 4
62606: PLUS
62607: PUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_INT 4
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: LIST
62620: PUSH
62621: LD_VAR 0 1
62625: PUSH
62626: LD_INT 3
62628: PLUS
62629: PUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_INT 3
62637: PLUS
62638: PUSH
62639: LD_INT 5
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: PUSH
62647: LD_VAR 0 1
62651: PUSH
62652: LD_VAR 0 2
62656: PUSH
62657: LD_INT 4
62659: PLUS
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: ST_TO_ADDR
// end ; 1 :
62676: GO 63376
62678: LD_INT 1
62680: DOUBLE
62681: EQUAL
62682: IFTRUE 62686
62684: GO 62819
62686: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_VAR 0 1
62696: PUSH
62697: LD_VAR 0 2
62701: PUSH
62702: LD_INT 4
62704: MINUS
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: PUSH
62714: LD_VAR 0 1
62718: PUSH
62719: LD_INT 3
62721: MINUS
62722: PUSH
62723: LD_VAR 0 2
62727: PUSH
62728: LD_INT 3
62730: MINUS
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: LIST
62739: PUSH
62740: LD_VAR 0 1
62744: PUSH
62745: LD_INT 4
62747: MINUS
62748: PUSH
62749: LD_VAR 0 2
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_VAR 0 2
62771: PUSH
62772: LD_INT 3
62774: PLUS
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: LIST
62783: PUSH
62784: LD_VAR 0 1
62788: PUSH
62789: LD_INT 4
62791: PLUS
62792: PUSH
62793: LD_VAR 0 2
62797: PUSH
62798: LD_INT 4
62800: PLUS
62801: PUSH
62802: LD_INT 5
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: ST_TO_ADDR
// end ; 2 :
62817: GO 63376
62819: LD_INT 2
62821: DOUBLE
62822: EQUAL
62823: IFTRUE 62827
62825: GO 62956
62827: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62828: LD_ADDR_VAR 0 5
62832: PUSH
62833: LD_VAR 0 1
62837: PUSH
62838: LD_VAR 0 2
62842: PUSH
62843: LD_INT 3
62845: MINUS
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: PUSH
62855: LD_VAR 0 1
62859: PUSH
62860: LD_INT 4
62862: PLUS
62863: PUSH
62864: LD_VAR 0 2
62868: PUSH
62869: LD_INT 4
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: LIST
62876: PUSH
62877: LD_VAR 0 1
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: LD_INT 4
62889: PLUS
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: LD_VAR 0 1
62903: PUSH
62904: LD_INT 3
62906: MINUS
62907: PUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: PUSH
62921: LD_VAR 0 1
62925: PUSH
62926: LD_INT 4
62928: MINUS
62929: PUSH
62930: LD_VAR 0 2
62934: PUSH
62935: LD_INT 4
62937: MINUS
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: ST_TO_ADDR
// end ; 3 :
62954: GO 63376
62956: LD_INT 3
62958: DOUBLE
62959: EQUAL
62960: IFTRUE 62964
62962: GO 63097
62964: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62965: LD_ADDR_VAR 0 5
62969: PUSH
62970: LD_VAR 0 1
62974: PUSH
62975: LD_INT 3
62977: PLUS
62978: PUSH
62979: LD_VAR 0 2
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_INT 4
62999: PLUS
63000: PUSH
63001: LD_VAR 0 2
63005: PUSH
63006: LD_INT 4
63008: PLUS
63009: PUSH
63010: LD_INT 5
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: PUSH
63018: LD_VAR 0 1
63022: PUSH
63023: LD_INT 4
63025: MINUS
63026: PUSH
63027: LD_VAR 0 2
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: PUSH
63040: LD_VAR 0 1
63044: PUSH
63045: LD_VAR 0 2
63049: PUSH
63050: LD_INT 4
63052: MINUS
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: PUSH
63062: LD_VAR 0 1
63066: PUSH
63067: LD_INT 3
63069: MINUS
63070: PUSH
63071: LD_VAR 0 2
63075: PUSH
63076: LD_INT 3
63078: MINUS
63079: PUSH
63080: LD_INT 2
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: LIST
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// end ; 4 :
63095: GO 63376
63097: LD_INT 4
63099: DOUBLE
63100: EQUAL
63101: IFTRUE 63105
63103: GO 63238
63105: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63106: LD_ADDR_VAR 0 5
63110: PUSH
63111: LD_VAR 0 1
63115: PUSH
63116: LD_VAR 0 2
63120: PUSH
63121: LD_INT 4
63123: PLUS
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: LD_INT 3
63140: PLUS
63141: PUSH
63142: LD_VAR 0 2
63146: PUSH
63147: LD_INT 3
63149: PLUS
63150: PUSH
63151: LD_INT 5
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: PUSH
63159: LD_VAR 0 1
63163: PUSH
63164: LD_INT 4
63166: PLUS
63167: PUSH
63168: LD_VAR 0 2
63172: PUSH
63173: LD_INT 4
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: LIST
63180: PUSH
63181: LD_VAR 0 1
63185: PUSH
63186: LD_VAR 0 2
63190: PUSH
63191: LD_INT 3
63193: MINUS
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: PUSH
63203: LD_VAR 0 1
63207: PUSH
63208: LD_INT 4
63210: MINUS
63211: PUSH
63212: LD_VAR 0 2
63216: PUSH
63217: LD_INT 4
63219: MINUS
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// end ; 5 :
63236: GO 63376
63238: LD_INT 5
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63246
63244: GO 63375
63246: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63247: LD_ADDR_VAR 0 5
63251: PUSH
63252: LD_VAR 0 1
63256: PUSH
63257: LD_INT 4
63259: MINUS
63260: PUSH
63261: LD_VAR 0 2
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: PUSH
63274: LD_VAR 0 1
63278: PUSH
63279: LD_VAR 0 2
63283: PUSH
63284: LD_INT 4
63286: MINUS
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: LIST
63295: PUSH
63296: LD_VAR 0 1
63300: PUSH
63301: LD_INT 4
63303: PLUS
63304: PUSH
63305: LD_VAR 0 2
63309: PUSH
63310: LD_INT 4
63312: PLUS
63313: PUSH
63314: LD_INT 5
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: PUSH
63322: LD_VAR 0 1
63326: PUSH
63327: LD_INT 3
63329: PLUS
63330: PUSH
63331: LD_VAR 0 2
63335: PUSH
63336: LD_INT 4
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: PUSH
63344: LD_VAR 0 1
63348: PUSH
63349: LD_VAR 0 2
63353: PUSH
63354: LD_INT 3
63356: PLUS
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: LIST
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: ST_TO_ADDR
// end ; end ;
63373: GO 63376
63375: POP
// result := list ;
63376: LD_ADDR_VAR 0 4
63380: PUSH
63381: LD_VAR 0 5
63385: ST_TO_ADDR
// end ;
63386: LD_VAR 0 4
63390: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63391: LD_INT 0
63393: PPUSH
63394: PPUSH
63395: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63396: LD_VAR 0 1
63400: NOT
63401: IFTRUE 63429
63403: PUSH
63404: LD_VAR 0 2
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 3
63417: PUSH
63418: LD_INT 4
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: IN
63427: NOT
63428: OR
63429: IFFALSE 63433
// exit ;
63431: GO 63516
// tmp := [ ] ;
63433: LD_ADDR_VAR 0 5
63437: PUSH
63438: EMPTY
63439: ST_TO_ADDR
// for i in units do
63440: LD_ADDR_VAR 0 4
63444: PUSH
63445: LD_VAR 0 1
63449: PUSH
63450: FOR_IN
63451: IFFALSE 63485
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63453: LD_ADDR_VAR 0 5
63457: PUSH
63458: LD_VAR 0 5
63462: PPUSH
63463: LD_VAR 0 4
63467: PPUSH
63468: LD_VAR 0 2
63472: PPUSH
63473: CALL_OW 259
63477: PPUSH
63478: CALL 64911 0 2
63482: ST_TO_ADDR
63483: GO 63450
63485: POP
63486: POP
// if not tmp then
63487: LD_VAR 0 5
63491: NOT
63492: IFFALSE 63496
// exit ;
63494: GO 63516
// result := SortListByListDesc ( units , tmp ) ;
63496: LD_ADDR_VAR 0 3
63500: PUSH
63501: LD_VAR 0 1
63505: PPUSH
63506: LD_VAR 0 5
63510: PPUSH
63511: CALL_OW 77
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 3
63520: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63521: LD_INT 0
63523: PPUSH
63524: PPUSH
63525: PPUSH
// result := false ;
63526: LD_ADDR_VAR 0 3
63530: PUSH
63531: LD_INT 0
63533: ST_TO_ADDR
// if not building then
63534: LD_VAR 0 2
63538: NOT
63539: IFFALSE 63543
// exit ;
63541: GO 63687
// x := GetX ( building ) ;
63543: LD_ADDR_VAR 0 4
63547: PUSH
63548: LD_VAR 0 2
63552: PPUSH
63553: CALL_OW 250
63557: ST_TO_ADDR
// y := GetY ( building ) ;
63558: LD_ADDR_VAR 0 5
63562: PUSH
63563: LD_VAR 0 2
63567: PPUSH
63568: CALL_OW 251
63572: ST_TO_ADDR
// if not x or not y then
63573: LD_VAR 0 4
63577: NOT
63578: IFTRUE 63587
63580: PUSH
63581: LD_VAR 0 5
63585: NOT
63586: OR
63587: IFFALSE 63591
// exit ;
63589: GO 63687
// if GetTaskList ( unit ) then
63591: LD_VAR 0 1
63595: PPUSH
63596: CALL_OW 437
63600: IFFALSE 63687
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63602: LD_STRING e
63604: PUSH
63605: LD_VAR 0 1
63609: PPUSH
63610: CALL_OW 437
63614: PUSH
63615: LD_INT 1
63617: ARRAY
63618: PUSH
63619: LD_INT 1
63621: ARRAY
63622: EQUAL
63623: IFFALSE 63650
63625: PUSH
63626: LD_VAR 0 4
63630: PUSH
63631: LD_VAR 0 1
63635: PPUSH
63636: CALL_OW 437
63640: PUSH
63641: LD_INT 1
63643: ARRAY
63644: PUSH
63645: LD_INT 2
63647: ARRAY
63648: EQUAL
63649: AND
63650: IFFALSE 63677
63652: PUSH
63653: LD_VAR 0 5
63657: PUSH
63658: LD_VAR 0 1
63662: PPUSH
63663: CALL_OW 437
63667: PUSH
63668: LD_INT 1
63670: ARRAY
63671: PUSH
63672: LD_INT 3
63674: ARRAY
63675: EQUAL
63676: AND
63677: IFFALSE 63687
// result := true end ;
63679: LD_ADDR_VAR 0 3
63683: PUSH
63684: LD_INT 1
63686: ST_TO_ADDR
// end ;
63687: LD_VAR 0 3
63691: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63692: LD_INT 0
63694: PPUSH
// result := false ;
63695: LD_ADDR_VAR 0 4
63699: PUSH
63700: LD_INT 0
63702: ST_TO_ADDR
// if GetTaskList ( unit ) then
63703: LD_VAR 0 1
63707: PPUSH
63708: CALL_OW 437
63712: IFFALSE 63799
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63714: LD_STRING M
63716: PUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: CALL_OW 437
63726: PUSH
63727: LD_INT 1
63729: ARRAY
63730: PUSH
63731: LD_INT 1
63733: ARRAY
63734: EQUAL
63735: IFFALSE 63762
63737: PUSH
63738: LD_VAR 0 2
63742: PUSH
63743: LD_VAR 0 1
63747: PPUSH
63748: CALL_OW 437
63752: PUSH
63753: LD_INT 1
63755: ARRAY
63756: PUSH
63757: LD_INT 2
63759: ARRAY
63760: EQUAL
63761: AND
63762: IFFALSE 63789
63764: PUSH
63765: LD_VAR 0 3
63769: PUSH
63770: LD_VAR 0 1
63774: PPUSH
63775: CALL_OW 437
63779: PUSH
63780: LD_INT 1
63782: ARRAY
63783: PUSH
63784: LD_INT 3
63786: ARRAY
63787: EQUAL
63788: AND
63789: IFFALSE 63799
// result := true ;
63791: LD_ADDR_VAR 0 4
63795: PUSH
63796: LD_INT 1
63798: ST_TO_ADDR
// end ; end ;
63799: LD_VAR 0 4
63803: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63804: LD_INT 0
63806: PPUSH
63807: PPUSH
63808: PPUSH
63809: PPUSH
// if not unit or not area then
63810: LD_VAR 0 1
63814: NOT
63815: IFTRUE 63824
63817: PUSH
63818: LD_VAR 0 2
63822: NOT
63823: OR
63824: IFFALSE 63828
// exit ;
63826: GO 64004
// tmp := AreaToList ( area , i ) ;
63828: LD_ADDR_VAR 0 6
63832: PUSH
63833: LD_VAR 0 2
63837: PPUSH
63838: LD_VAR 0 5
63842: PPUSH
63843: CALL_OW 517
63847: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63848: LD_ADDR_VAR 0 5
63852: PUSH
63853: DOUBLE
63854: LD_INT 1
63856: DEC
63857: ST_TO_ADDR
63858: LD_VAR 0 6
63862: PUSH
63863: LD_INT 1
63865: ARRAY
63866: PUSH
63867: FOR_TO
63868: IFFALSE 64002
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63870: LD_ADDR_VAR 0 7
63874: PUSH
63875: LD_VAR 0 6
63879: PUSH
63880: LD_INT 1
63882: ARRAY
63883: PUSH
63884: LD_VAR 0 5
63888: ARRAY
63889: PUSH
63890: LD_VAR 0 6
63894: PUSH
63895: LD_INT 2
63897: ARRAY
63898: PUSH
63899: LD_VAR 0 5
63903: ARRAY
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63909: LD_INT 92
63911: PUSH
63912: LD_VAR 0 7
63916: PUSH
63917: LD_INT 1
63919: ARRAY
63920: PUSH
63921: LD_VAR 0 7
63925: PUSH
63926: LD_INT 2
63928: ARRAY
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: PPUSH
63939: CALL_OW 69
63943: PUSH
63944: LD_INT 0
63946: EQUAL
63947: IFFALSE 64000
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63949: LD_VAR 0 1
63953: PPUSH
63954: LD_VAR 0 7
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: PPUSH
63963: LD_VAR 0 7
63967: PUSH
63968: LD_INT 2
63970: ARRAY
63971: PPUSH
63972: LD_VAR 0 3
63976: PPUSH
63977: CALL_OW 48
// result := IsPlaced ( unit ) ;
63981: LD_ADDR_VAR 0 4
63985: PUSH
63986: LD_VAR 0 1
63990: PPUSH
63991: CALL_OW 305
63995: ST_TO_ADDR
// exit ;
63996: POP
63997: POP
63998: GO 64004
// end ; end ;
64000: GO 63867
64002: POP
64003: POP
// end ;
64004: LD_VAR 0 4
64008: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64009: LD_INT 0
64011: PPUSH
64012: PPUSH
64013: PPUSH
// if not side or side > 8 then
64014: LD_VAR 0 1
64018: NOT
64019: IFTRUE 64031
64021: PUSH
64022: LD_VAR 0 1
64026: PUSH
64027: LD_INT 8
64029: GREATER
64030: OR
64031: IFFALSE 64035
// exit ;
64033: GO 64222
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64035: LD_ADDR_VAR 0 4
64039: PUSH
64040: LD_INT 22
64042: PUSH
64043: LD_VAR 0 1
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 21
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 69
64070: ST_TO_ADDR
// if not tmp then
64071: LD_VAR 0 4
64075: NOT
64076: IFFALSE 64080
// exit ;
64078: GO 64222
// enable_addtolog := true ;
64080: LD_ADDR_OWVAR 81
64084: PUSH
64085: LD_INT 1
64087: ST_TO_ADDR
// AddToLog ( [ ) ;
64088: LD_STRING [
64090: PPUSH
64091: CALL_OW 561
// for i in tmp do
64095: LD_ADDR_VAR 0 3
64099: PUSH
64100: LD_VAR 0 4
64104: PUSH
64105: FOR_IN
64106: IFFALSE 64213
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64108: LD_STRING [
64110: PUSH
64111: LD_VAR 0 3
64115: PPUSH
64116: CALL_OW 266
64120: STR
64121: PUSH
64122: LD_STRING , 
64124: STR
64125: PUSH
64126: LD_VAR 0 3
64130: PPUSH
64131: CALL_OW 250
64135: STR
64136: PUSH
64137: LD_STRING , 
64139: STR
64140: PUSH
64141: LD_VAR 0 3
64145: PPUSH
64146: CALL_OW 251
64150: STR
64151: PUSH
64152: LD_STRING , 
64154: STR
64155: PUSH
64156: LD_VAR 0 3
64160: PPUSH
64161: CALL_OW 254
64165: STR
64166: PUSH
64167: LD_STRING , 
64169: STR
64170: PUSH
64171: LD_VAR 0 3
64175: PPUSH
64176: LD_INT 1
64178: PPUSH
64179: CALL_OW 268
64183: STR
64184: PUSH
64185: LD_STRING , 
64187: STR
64188: PUSH
64189: LD_VAR 0 3
64193: PPUSH
64194: LD_INT 2
64196: PPUSH
64197: CALL_OW 268
64201: STR
64202: PUSH
64203: LD_STRING ],
64205: STR
64206: PPUSH
64207: CALL_OW 561
// end ;
64211: GO 64105
64213: POP
64214: POP
// AddToLog ( ]; ) ;
64215: LD_STRING ];
64217: PPUSH
64218: CALL_OW 561
// end ;
64222: LD_VAR 0 2
64226: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64227: LD_INT 0
64229: PPUSH
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
// if not area or not rate or not max then
64234: LD_VAR 0 1
64238: NOT
64239: IFTRUE 64248
64241: PUSH
64242: LD_VAR 0 2
64246: NOT
64247: OR
64248: IFTRUE 64257
64250: PUSH
64251: LD_VAR 0 4
64255: NOT
64256: OR
64257: IFFALSE 64261
// exit ;
64259: GO 64450
// while 1 do
64261: LD_INT 1
64263: IFFALSE 64450
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64265: LD_ADDR_VAR 0 9
64269: PUSH
64270: LD_VAR 0 1
64274: PPUSH
64275: LD_INT 1
64277: PPUSH
64278: CALL_OW 287
64282: PUSH
64283: LD_INT 10
64285: MUL
64286: ST_TO_ADDR
// r := rate / 10 ;
64287: LD_ADDR_VAR 0 7
64291: PUSH
64292: LD_VAR 0 2
64296: PUSH
64297: LD_INT 10
64299: DIVREAL
64300: ST_TO_ADDR
// time := 1 1$00 ;
64301: LD_ADDR_VAR 0 8
64305: PUSH
64306: LD_INT 2100
64308: ST_TO_ADDR
// if amount < min then
64309: LD_VAR 0 9
64313: PUSH
64314: LD_VAR 0 3
64318: LESS
64319: IFFALSE 64337
// r := r * 2 else
64321: LD_ADDR_VAR 0 7
64325: PUSH
64326: LD_VAR 0 7
64330: PUSH
64331: LD_INT 2
64333: MUL
64334: ST_TO_ADDR
64335: GO 64363
// if amount > max then
64337: LD_VAR 0 9
64341: PUSH
64342: LD_VAR 0 4
64346: GREATER
64347: IFFALSE 64363
// r := r / 2 ;
64349: LD_ADDR_VAR 0 7
64353: PUSH
64354: LD_VAR 0 7
64358: PUSH
64359: LD_INT 2
64361: DIVREAL
64362: ST_TO_ADDR
// time := time / r ;
64363: LD_ADDR_VAR 0 8
64367: PUSH
64368: LD_VAR 0 8
64372: PUSH
64373: LD_VAR 0 7
64377: DIVREAL
64378: ST_TO_ADDR
// if time < 0 then
64379: LD_VAR 0 8
64383: PUSH
64384: LD_INT 0
64386: LESS
64387: IFFALSE 64404
// time := time * - 1 ;
64389: LD_ADDR_VAR 0 8
64393: PUSH
64394: LD_VAR 0 8
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: MUL
64403: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64404: LD_VAR 0 8
64408: PUSH
64409: LD_INT 35
64411: PPUSH
64412: LD_INT 875
64414: PPUSH
64415: CALL_OW 12
64419: PLUS
64420: PPUSH
64421: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64425: LD_INT 1
64427: PPUSH
64428: LD_INT 5
64430: PPUSH
64431: CALL_OW 12
64435: PPUSH
64436: LD_VAR 0 1
64440: PPUSH
64441: LD_INT 1
64443: PPUSH
64444: CALL_OW 55
// end ;
64448: GO 64261
// end ;
64450: LD_VAR 0 5
64454: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64455: LD_INT 0
64457: PPUSH
64458: PPUSH
64459: PPUSH
64460: PPUSH
64461: PPUSH
64462: PPUSH
64463: PPUSH
64464: PPUSH
// if not turrets or not factories then
64465: LD_VAR 0 1
64469: NOT
64470: IFTRUE 64479
64472: PUSH
64473: LD_VAR 0 2
64477: NOT
64478: OR
64479: IFFALSE 64483
// exit ;
64481: GO 64790
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64483: LD_ADDR_VAR 0 10
64487: PUSH
64488: LD_INT 5
64490: PUSH
64491: LD_INT 6
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: LD_INT 4
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 3
64510: PUSH
64511: LD_INT 5
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 24
64525: PUSH
64526: LD_INT 25
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 23
64535: PUSH
64536: LD_INT 27
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 42
64549: PUSH
64550: LD_INT 43
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 44
64559: PUSH
64560: LD_INT 46
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 45
64569: PUSH
64570: LD_INT 47
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: ST_TO_ADDR
// result := [ ] ;
64587: LD_ADDR_VAR 0 3
64591: PUSH
64592: EMPTY
64593: ST_TO_ADDR
// for i in turrets do
64594: LD_ADDR_VAR 0 4
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: FOR_IN
64605: IFFALSE 64788
// begin nat := GetNation ( i ) ;
64607: LD_ADDR_VAR 0 7
64611: PUSH
64612: LD_VAR 0 4
64616: PPUSH
64617: CALL_OW 248
64621: ST_TO_ADDR
// weapon := 0 ;
64622: LD_ADDR_VAR 0 8
64626: PUSH
64627: LD_INT 0
64629: ST_TO_ADDR
// if not nat then
64630: LD_VAR 0 7
64634: NOT
64635: IFFALSE 64639
// continue ;
64637: GO 64604
// for j in list [ nat ] do
64639: LD_ADDR_VAR 0 5
64643: PUSH
64644: LD_VAR 0 10
64648: PUSH
64649: LD_VAR 0 7
64653: ARRAY
64654: PUSH
64655: FOR_IN
64656: IFFALSE 64697
// if GetBWeapon ( i ) = j [ 1 ] then
64658: LD_VAR 0 4
64662: PPUSH
64663: CALL_OW 269
64667: PUSH
64668: LD_VAR 0 5
64672: PUSH
64673: LD_INT 1
64675: ARRAY
64676: EQUAL
64677: IFFALSE 64695
// begin weapon := j [ 2 ] ;
64679: LD_ADDR_VAR 0 8
64683: PUSH
64684: LD_VAR 0 5
64688: PUSH
64689: LD_INT 2
64691: ARRAY
64692: ST_TO_ADDR
// break ;
64693: GO 64697
// end ;
64695: GO 64655
64697: POP
64698: POP
// if not weapon then
64699: LD_VAR 0 8
64703: NOT
64704: IFFALSE 64708
// continue ;
64706: GO 64604
// for k in factories do
64708: LD_ADDR_VAR 0 6
64712: PUSH
64713: LD_VAR 0 2
64717: PUSH
64718: FOR_IN
64719: IFFALSE 64784
// begin weapons := AvailableWeaponList ( k ) ;
64721: LD_ADDR_VAR 0 9
64725: PUSH
64726: LD_VAR 0 6
64730: PPUSH
64731: CALL_OW 478
64735: ST_TO_ADDR
// if not weapons then
64736: LD_VAR 0 9
64740: NOT
64741: IFFALSE 64745
// continue ;
64743: GO 64718
// if weapon in weapons then
64745: LD_VAR 0 8
64749: PUSH
64750: LD_VAR 0 9
64754: IN
64755: IFFALSE 64782
// begin result := [ i , weapon ] ;
64757: LD_ADDR_VAR 0 3
64761: PUSH
64762: LD_VAR 0 4
64766: PUSH
64767: LD_VAR 0 8
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: ST_TO_ADDR
// exit ;
64776: POP
64777: POP
64778: POP
64779: POP
64780: GO 64790
// end ; end ;
64782: GO 64718
64784: POP
64785: POP
// end ;
64786: GO 64604
64788: POP
64789: POP
// end ;
64790: LD_VAR 0 3
64794: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64795: LD_INT 0
64797: PPUSH
// if not side or side > 8 then
64798: LD_VAR 0 3
64802: NOT
64803: IFTRUE 64815
64805: PUSH
64806: LD_VAR 0 3
64810: PUSH
64811: LD_INT 8
64813: GREATER
64814: OR
64815: IFFALSE 64819
// exit ;
64817: GO 64878
// if not range then
64819: LD_VAR 0 4
64823: NOT
64824: IFFALSE 64835
// range := - 12 ;
64826: LD_ADDR_VAR 0 4
64830: PUSH
64831: LD_INT 12
64833: NEG
64834: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64835: LD_VAR 0 1
64839: PPUSH
64840: LD_VAR 0 2
64844: PPUSH
64845: LD_VAR 0 3
64849: PPUSH
64850: LD_VAR 0 4
64854: PPUSH
64855: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64859: LD_VAR 0 1
64863: PPUSH
64864: LD_VAR 0 2
64868: PPUSH
64869: LD_VAR 0 3
64873: PPUSH
64874: CALL_OW 331
// end ;
64878: LD_VAR 0 5
64882: RET
// export function Video ( mode ) ; begin
64883: LD_INT 0
64885: PPUSH
// ingame_video = mode ;
64886: LD_ADDR_OWVAR 52
64890: PUSH
64891: LD_VAR 0 1
64895: ST_TO_ADDR
// interface_hidden = mode ;
64896: LD_ADDR_OWVAR 54
64900: PUSH
64901: LD_VAR 0 1
64905: ST_TO_ADDR
// end ;
64906: LD_VAR 0 2
64910: RET
// export function Join ( array , element ) ; begin
64911: LD_INT 0
64913: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64914: LD_ADDR_VAR 0 3
64918: PUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: LD_VAR 0 1
64928: PUSH
64929: LD_INT 1
64931: PLUS
64932: PPUSH
64933: LD_VAR 0 2
64937: PPUSH
64938: CALL_OW 1
64942: ST_TO_ADDR
// end ;
64943: LD_VAR 0 3
64947: RET
// export function JoinUnion ( array , element ) ; begin
64948: LD_INT 0
64950: PPUSH
// result := array union element ;
64951: LD_ADDR_VAR 0 3
64955: PUSH
64956: LD_VAR 0 1
64960: PUSH
64961: LD_VAR 0 2
64965: UNION
64966: ST_TO_ADDR
// end ;
64967: LD_VAR 0 3
64971: RET
// export function GetBehemoths ( side ) ; begin
64972: LD_INT 0
64974: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64975: LD_ADDR_VAR 0 2
64979: PUSH
64980: LD_INT 22
64982: PUSH
64983: LD_VAR 0 1
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 31
64994: PUSH
64995: LD_INT 25
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PPUSH
65006: CALL_OW 69
65010: ST_TO_ADDR
// end ;
65011: LD_VAR 0 2
65015: RET
// export function Shuffle ( array ) ; var i , index ; begin
65016: LD_INT 0
65018: PPUSH
65019: PPUSH
65020: PPUSH
// result := [ ] ;
65021: LD_ADDR_VAR 0 2
65025: PUSH
65026: EMPTY
65027: ST_TO_ADDR
// if not array then
65028: LD_VAR 0 1
65032: NOT
65033: IFFALSE 65037
// exit ;
65035: GO 65136
// Randomize ;
65037: CALL_OW 10
// for i = array downto 1 do
65041: LD_ADDR_VAR 0 3
65045: PUSH
65046: DOUBLE
65047: LD_VAR 0 1
65051: INC
65052: ST_TO_ADDR
65053: LD_INT 1
65055: PUSH
65056: FOR_DOWNTO
65057: IFFALSE 65134
// begin index := rand ( 1 , array ) ;
65059: LD_ADDR_VAR 0 4
65063: PUSH
65064: LD_INT 1
65066: PPUSH
65067: LD_VAR 0 1
65071: PPUSH
65072: CALL_OW 12
65076: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65077: LD_ADDR_VAR 0 2
65081: PUSH
65082: LD_VAR 0 2
65086: PPUSH
65087: LD_VAR 0 2
65091: PUSH
65092: LD_INT 1
65094: PLUS
65095: PPUSH
65096: LD_VAR 0 1
65100: PUSH
65101: LD_VAR 0 4
65105: ARRAY
65106: PPUSH
65107: CALL_OW 2
65111: ST_TO_ADDR
// array := Delete ( array , index ) ;
65112: LD_ADDR_VAR 0 1
65116: PUSH
65117: LD_VAR 0 1
65121: PPUSH
65122: LD_VAR 0 4
65126: PPUSH
65127: CALL_OW 3
65131: ST_TO_ADDR
// end ;
65132: GO 65056
65134: POP
65135: POP
// end ;
65136: LD_VAR 0 2
65140: RET
// export function GetBaseMaterials ( base ) ; begin
65141: LD_INT 0
65143: PPUSH
// result := [ 0 , 0 , 0 ] ;
65144: LD_ADDR_VAR 0 2
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// if not base then
65163: LD_VAR 0 1
65167: NOT
65168: IFFALSE 65172
// exit ;
65170: GO 65221
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65172: LD_ADDR_VAR 0 2
65176: PUSH
65177: LD_VAR 0 1
65181: PPUSH
65182: LD_INT 1
65184: PPUSH
65185: CALL_OW 275
65189: PUSH
65190: LD_VAR 0 1
65194: PPUSH
65195: LD_INT 2
65197: PPUSH
65198: CALL_OW 275
65202: PUSH
65203: LD_VAR 0 1
65207: PPUSH
65208: LD_INT 3
65210: PPUSH
65211: CALL_OW 275
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// end ;
65221: LD_VAR 0 2
65225: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65226: LD_INT 0
65228: PPUSH
65229: PPUSH
// result := array ;
65230: LD_ADDR_VAR 0 3
65234: PUSH
65235: LD_VAR 0 1
65239: ST_TO_ADDR
// if size >= result then
65240: LD_VAR 0 2
65244: PUSH
65245: LD_VAR 0 3
65249: GREATEREQUAL
65250: IFFALSE 65254
// exit ;
65252: GO 65304
// if size then
65254: LD_VAR 0 2
65258: IFFALSE 65304
// for i := array downto size do
65260: LD_ADDR_VAR 0 4
65264: PUSH
65265: DOUBLE
65266: LD_VAR 0 1
65270: INC
65271: ST_TO_ADDR
65272: LD_VAR 0 2
65276: PUSH
65277: FOR_DOWNTO
65278: IFFALSE 65302
// result := Delete ( result , result ) ;
65280: LD_ADDR_VAR 0 3
65284: PUSH
65285: LD_VAR 0 3
65289: PPUSH
65290: LD_VAR 0 3
65294: PPUSH
65295: CALL_OW 3
65299: ST_TO_ADDR
65300: GO 65277
65302: POP
65303: POP
// end ;
65304: LD_VAR 0 3
65308: RET
// export function ComExit ( unit ) ; var tmp ; begin
65309: LD_INT 0
65311: PPUSH
65312: PPUSH
// if not IsInUnit ( unit ) then
65313: LD_VAR 0 1
65317: PPUSH
65318: CALL_OW 310
65322: NOT
65323: IFFALSE 65327
// exit ;
65325: GO 65387
// tmp := IsInUnit ( unit ) ;
65327: LD_ADDR_VAR 0 3
65331: PUSH
65332: LD_VAR 0 1
65336: PPUSH
65337: CALL_OW 310
65341: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65342: LD_VAR 0 3
65346: PPUSH
65347: CALL_OW 247
65351: PUSH
65352: LD_INT 2
65354: EQUAL
65355: IFFALSE 65368
// ComExitVehicle ( unit ) else
65357: LD_VAR 0 1
65361: PPUSH
65362: CALL_OW 121
65366: GO 65377
// ComExitBuilding ( unit ) ;
65368: LD_VAR 0 1
65372: PPUSH
65373: CALL_OW 122
// result := tmp ;
65377: LD_ADDR_VAR 0 2
65381: PUSH
65382: LD_VAR 0 3
65386: ST_TO_ADDR
// end ;
65387: LD_VAR 0 2
65391: RET
// export function ComExitAll ( units ) ; var i ; begin
65392: LD_INT 0
65394: PPUSH
65395: PPUSH
// if not units then
65396: LD_VAR 0 1
65400: NOT
65401: IFFALSE 65405
// exit ;
65403: GO 65431
// for i in units do
65405: LD_ADDR_VAR 0 3
65409: PUSH
65410: LD_VAR 0 1
65414: PUSH
65415: FOR_IN
65416: IFFALSE 65429
// ComExit ( i ) ;
65418: LD_VAR 0 3
65422: PPUSH
65423: CALL 65309 0 1
65427: GO 65415
65429: POP
65430: POP
// end ;
65431: LD_VAR 0 2
65435: RET
// export function ResetHc ; begin
65436: LD_INT 0
65438: PPUSH
// InitHc ;
65439: CALL_OW 19
// hc_importance := 0 ;
65443: LD_ADDR_OWVAR 32
65447: PUSH
65448: LD_INT 0
65450: ST_TO_ADDR
// end ;
65451: LD_VAR 0 1
65455: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65456: LD_INT 0
65458: PPUSH
65459: PPUSH
65460: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65461: LD_ADDR_VAR 0 6
65465: PUSH
65466: LD_VAR 0 1
65470: PUSH
65471: LD_VAR 0 3
65475: PLUS
65476: PUSH
65477: LD_INT 2
65479: DIV
65480: ST_TO_ADDR
// if _x < 0 then
65481: LD_VAR 0 6
65485: PUSH
65486: LD_INT 0
65488: LESS
65489: IFFALSE 65506
// _x := _x * - 1 ;
65491: LD_ADDR_VAR 0 6
65495: PUSH
65496: LD_VAR 0 6
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: MUL
65505: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65506: LD_ADDR_VAR 0 7
65510: PUSH
65511: LD_VAR 0 2
65515: PUSH
65516: LD_VAR 0 4
65520: PLUS
65521: PUSH
65522: LD_INT 2
65524: DIV
65525: ST_TO_ADDR
// if _y < 0 then
65526: LD_VAR 0 7
65530: PUSH
65531: LD_INT 0
65533: LESS
65534: IFFALSE 65551
// _y := _y * - 1 ;
65536: LD_ADDR_VAR 0 7
65540: PUSH
65541: LD_VAR 0 7
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: MUL
65550: ST_TO_ADDR
// result := [ _x , _y ] ;
65551: LD_ADDR_VAR 0 5
65555: PUSH
65556: LD_VAR 0 6
65560: PUSH
65561: LD_VAR 0 7
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: ST_TO_ADDR
// end ;
65570: LD_VAR 0 5
65574: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65575: LD_INT 0
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
// task := GetTaskList ( unit ) ;
65581: LD_ADDR_VAR 0 7
65585: PUSH
65586: LD_VAR 0 1
65590: PPUSH
65591: CALL_OW 437
65595: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65596: LD_VAR 0 7
65600: NOT
65601: IFFALSE 65620
65603: PUSH
65604: LD_VAR 0 1
65608: PPUSH
65609: LD_VAR 0 2
65613: PPUSH
65614: CALL_OW 308
65618: NOT
65619: AND
65620: IFFALSE 65624
// exit ;
65622: GO 65742
// if IsInArea ( unit , area ) then
65624: LD_VAR 0 1
65628: PPUSH
65629: LD_VAR 0 2
65633: PPUSH
65634: CALL_OW 308
65638: IFFALSE 65656
// begin ComMoveToArea ( unit , goAway ) ;
65640: LD_VAR 0 1
65644: PPUSH
65645: LD_VAR 0 3
65649: PPUSH
65650: CALL_OW 113
// exit ;
65654: GO 65742
// end ; if task [ 1 ] [ 1 ] <> M then
65656: LD_VAR 0 7
65660: PUSH
65661: LD_INT 1
65663: ARRAY
65664: PUSH
65665: LD_INT 1
65667: ARRAY
65668: PUSH
65669: LD_STRING M
65671: NONEQUAL
65672: IFFALSE 65676
// exit ;
65674: GO 65742
// x := task [ 1 ] [ 2 ] ;
65676: LD_ADDR_VAR 0 5
65680: PUSH
65681: LD_VAR 0 7
65685: PUSH
65686: LD_INT 1
65688: ARRAY
65689: PUSH
65690: LD_INT 2
65692: ARRAY
65693: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65694: LD_ADDR_VAR 0 6
65698: PUSH
65699: LD_VAR 0 7
65703: PUSH
65704: LD_INT 1
65706: ARRAY
65707: PUSH
65708: LD_INT 3
65710: ARRAY
65711: ST_TO_ADDR
// if InArea ( x , y , area ) then
65712: LD_VAR 0 5
65716: PPUSH
65717: LD_VAR 0 6
65721: PPUSH
65722: LD_VAR 0 2
65726: PPUSH
65727: CALL_OW 309
65731: IFFALSE 65742
// ComStop ( unit ) ;
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 141
// end ;
65742: LD_VAR 0 4
65746: RET
// export function Abs ( value ) ; begin
65747: LD_INT 0
65749: PPUSH
// result := value ;
65750: LD_ADDR_VAR 0 2
65754: PUSH
65755: LD_VAR 0 1
65759: ST_TO_ADDR
// if value < 0 then
65760: LD_VAR 0 1
65764: PUSH
65765: LD_INT 0
65767: LESS
65768: IFFALSE 65785
// result := value * - 1 ;
65770: LD_ADDR_VAR 0 2
65774: PUSH
65775: LD_VAR 0 1
65779: PUSH
65780: LD_INT 1
65782: NEG
65783: MUL
65784: ST_TO_ADDR
// end ;
65785: LD_VAR 0 2
65789: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65790: LD_INT 0
65792: PPUSH
65793: PPUSH
65794: PPUSH
65795: PPUSH
65796: PPUSH
65797: PPUSH
65798: PPUSH
65799: PPUSH
// if not unit or not building then
65800: LD_VAR 0 1
65804: NOT
65805: IFTRUE 65814
65807: PUSH
65808: LD_VAR 0 2
65812: NOT
65813: OR
65814: IFFALSE 65818
// exit ;
65816: GO 66046
// x := GetX ( building ) ;
65818: LD_ADDR_VAR 0 4
65822: PUSH
65823: LD_VAR 0 2
65827: PPUSH
65828: CALL_OW 250
65832: ST_TO_ADDR
// y := GetY ( building ) ;
65833: LD_ADDR_VAR 0 6
65837: PUSH
65838: LD_VAR 0 2
65842: PPUSH
65843: CALL_OW 251
65847: ST_TO_ADDR
// d := GetDir ( building ) ;
65848: LD_ADDR_VAR 0 8
65852: PUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: CALL_OW 254
65862: ST_TO_ADDR
// r := 4 ;
65863: LD_ADDR_VAR 0 9
65867: PUSH
65868: LD_INT 4
65870: ST_TO_ADDR
// for i := 1 to 5 do
65871: LD_ADDR_VAR 0 10
65875: PUSH
65876: DOUBLE
65877: LD_INT 1
65879: DEC
65880: ST_TO_ADDR
65881: LD_INT 5
65883: PUSH
65884: FOR_TO
65885: IFFALSE 66044
// begin _x := ShiftX ( x , d , r + i ) ;
65887: LD_ADDR_VAR 0 5
65891: PUSH
65892: LD_VAR 0 4
65896: PPUSH
65897: LD_VAR 0 8
65901: PPUSH
65902: LD_VAR 0 9
65906: PUSH
65907: LD_VAR 0 10
65911: PLUS
65912: PPUSH
65913: CALL_OW 272
65917: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65918: LD_ADDR_VAR 0 7
65922: PUSH
65923: LD_VAR 0 6
65927: PPUSH
65928: LD_VAR 0 8
65932: PPUSH
65933: LD_VAR 0 9
65937: PUSH
65938: LD_VAR 0 10
65942: PLUS
65943: PPUSH
65944: CALL_OW 273
65948: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65949: LD_VAR 0 5
65953: PPUSH
65954: LD_VAR 0 7
65958: PPUSH
65959: CALL_OW 488
65963: IFFALSE 65998
65965: PUSH
65966: LD_VAR 0 5
65970: PPUSH
65971: LD_VAR 0 7
65975: PPUSH
65976: CALL_OW 428
65980: PPUSH
65981: CALL_OW 247
65985: PUSH
65986: LD_INT 3
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: IN
65996: NOT
65997: AND
65998: IFFALSE 66042
// begin ComMoveXY ( unit , _x , _y ) ;
66000: LD_VAR 0 1
66004: PPUSH
66005: LD_VAR 0 5
66009: PPUSH
66010: LD_VAR 0 7
66014: PPUSH
66015: CALL_OW 111
// result := [ _x , _y ] ;
66019: LD_ADDR_VAR 0 3
66023: PUSH
66024: LD_VAR 0 5
66028: PUSH
66029: LD_VAR 0 7
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: ST_TO_ADDR
// exit ;
66038: POP
66039: POP
66040: GO 66046
// end ; end ;
66042: GO 65884
66044: POP
66045: POP
// end ;
66046: LD_VAR 0 3
66050: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66051: LD_INT 0
66053: PPUSH
66054: PPUSH
66055: PPUSH
// result := 0 ;
66056: LD_ADDR_VAR 0 3
66060: PUSH
66061: LD_INT 0
66063: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 0
66071: LESS
66072: IFTRUE 66084
66074: PUSH
66075: LD_VAR 0 1
66079: PUSH
66080: LD_INT 8
66082: GREATER
66083: OR
66084: IFTRUE 66096
66086: PUSH
66087: LD_VAR 0 2
66091: PUSH
66092: LD_INT 0
66094: LESS
66095: OR
66096: IFTRUE 66108
66098: PUSH
66099: LD_VAR 0 2
66103: PUSH
66104: LD_INT 8
66106: GREATER
66107: OR
66108: IFFALSE 66112
// exit ;
66110: GO 66187
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66112: LD_ADDR_VAR 0 4
66116: PUSH
66117: LD_INT 22
66119: PUSH
66120: LD_VAR 0 2
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PPUSH
66129: CALL_OW 69
66133: PUSH
66134: FOR_IN
66135: IFFALSE 66185
// begin un := UnitShoot ( i ) ;
66137: LD_ADDR_VAR 0 5
66141: PUSH
66142: LD_VAR 0 4
66146: PPUSH
66147: CALL_OW 504
66151: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66152: LD_VAR 0 5
66156: PPUSH
66157: CALL_OW 255
66161: PUSH
66162: LD_VAR 0 1
66166: EQUAL
66167: IFFALSE 66183
// begin result := un ;
66169: LD_ADDR_VAR 0 3
66173: PUSH
66174: LD_VAR 0 5
66178: ST_TO_ADDR
// exit ;
66179: POP
66180: POP
66181: GO 66187
// end ; end ;
66183: GO 66134
66185: POP
66186: POP
// end ;
66187: LD_VAR 0 3
66191: RET
// export function GetCargoBay ( units ) ; begin
66192: LD_INT 0
66194: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66195: LD_ADDR_VAR 0 2
66199: PUSH
66200: LD_VAR 0 1
66204: PPUSH
66205: LD_INT 2
66207: PUSH
66208: LD_INT 34
66210: PUSH
66211: LD_INT 12
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 34
66220: PUSH
66221: LD_INT 51
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 34
66230: PUSH
66231: LD_INT 32
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 34
66240: PUSH
66241: LD_INT 89
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: PPUSH
66255: CALL_OW 72
66259: ST_TO_ADDR
// end ;
66260: LD_VAR 0 2
66264: RET
// export function Negate ( value ) ; begin
66265: LD_INT 0
66267: PPUSH
// result := not value ;
66268: LD_ADDR_VAR 0 2
66272: PUSH
66273: LD_VAR 0 1
66277: NOT
66278: ST_TO_ADDR
// end ;
66279: LD_VAR 0 2
66283: RET
// export function Inc ( value ) ; begin
66284: LD_INT 0
66286: PPUSH
// result := value + 1 ;
66287: LD_ADDR_VAR 0 2
66291: PUSH
66292: LD_VAR 0 1
66296: PUSH
66297: LD_INT 1
66299: PLUS
66300: ST_TO_ADDR
// end ;
66301: LD_VAR 0 2
66305: RET
// export function Dec ( value ) ; begin
66306: LD_INT 0
66308: PPUSH
// result := value - 1 ;
66309: LD_ADDR_VAR 0 2
66313: PUSH
66314: LD_VAR 0 1
66318: PUSH
66319: LD_INT 1
66321: MINUS
66322: ST_TO_ADDR
// end ;
66323: LD_VAR 0 2
66327: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66328: LD_INT 0
66330: PPUSH
66331: PPUSH
66332: PPUSH
66333: PPUSH
66334: PPUSH
66335: PPUSH
66336: PPUSH
66337: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66338: LD_VAR 0 1
66342: PPUSH
66343: LD_VAR 0 2
66347: PPUSH
66348: CALL_OW 488
66352: NOT
66353: IFTRUE 66372
66355: PUSH
66356: LD_VAR 0 3
66360: PPUSH
66361: LD_VAR 0 4
66365: PPUSH
66366: CALL_OW 488
66370: NOT
66371: OR
66372: IFFALSE 66385
// begin result := - 1 ;
66374: LD_ADDR_VAR 0 5
66378: PUSH
66379: LD_INT 1
66381: NEG
66382: ST_TO_ADDR
// exit ;
66383: GO 66620
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66385: LD_ADDR_VAR 0 12
66389: PUSH
66390: LD_VAR 0 1
66394: PPUSH
66395: LD_VAR 0 2
66399: PPUSH
66400: LD_VAR 0 3
66404: PPUSH
66405: LD_VAR 0 4
66409: PPUSH
66410: CALL 65456 0 4
66414: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66415: LD_ADDR_VAR 0 11
66419: PUSH
66420: LD_VAR 0 1
66424: PPUSH
66425: LD_VAR 0 2
66429: PPUSH
66430: LD_VAR 0 12
66434: PUSH
66435: LD_INT 1
66437: ARRAY
66438: PPUSH
66439: LD_VAR 0 12
66443: PUSH
66444: LD_INT 2
66446: ARRAY
66447: PPUSH
66448: CALL_OW 298
66452: ST_TO_ADDR
// distance := 9999 ;
66453: LD_ADDR_VAR 0 10
66457: PUSH
66458: LD_INT 9999
66460: ST_TO_ADDR
// for i := 0 to 5 do
66461: LD_ADDR_VAR 0 6
66465: PUSH
66466: DOUBLE
66467: LD_INT 0
66469: DEC
66470: ST_TO_ADDR
66471: LD_INT 5
66473: PUSH
66474: FOR_TO
66475: IFFALSE 66618
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66477: LD_ADDR_VAR 0 7
66481: PUSH
66482: LD_VAR 0 1
66486: PPUSH
66487: LD_VAR 0 6
66491: PPUSH
66492: LD_VAR 0 11
66496: PPUSH
66497: CALL_OW 272
66501: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66502: LD_ADDR_VAR 0 8
66506: PUSH
66507: LD_VAR 0 2
66511: PPUSH
66512: LD_VAR 0 6
66516: PPUSH
66517: LD_VAR 0 11
66521: PPUSH
66522: CALL_OW 273
66526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66527: LD_VAR 0 7
66531: PPUSH
66532: LD_VAR 0 8
66536: PPUSH
66537: CALL_OW 488
66541: NOT
66542: IFFALSE 66546
// continue ;
66544: GO 66474
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66546: LD_ADDR_VAR 0 9
66550: PUSH
66551: LD_VAR 0 12
66555: PUSH
66556: LD_INT 1
66558: ARRAY
66559: PPUSH
66560: LD_VAR 0 12
66564: PUSH
66565: LD_INT 2
66567: ARRAY
66568: PPUSH
66569: LD_VAR 0 7
66573: PPUSH
66574: LD_VAR 0 8
66578: PPUSH
66579: CALL_OW 298
66583: ST_TO_ADDR
// if tmp < distance then
66584: LD_VAR 0 9
66588: PUSH
66589: LD_VAR 0 10
66593: LESS
66594: IFFALSE 66616
// begin result := i ;
66596: LD_ADDR_VAR 0 5
66600: PUSH
66601: LD_VAR 0 6
66605: ST_TO_ADDR
// distance := tmp ;
66606: LD_ADDR_VAR 0 10
66610: PUSH
66611: LD_VAR 0 9
66615: ST_TO_ADDR
// end ; end ;
66616: GO 66474
66618: POP
66619: POP
// end ;
66620: LD_VAR 0 5
66624: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66625: LD_INT 0
66627: PPUSH
66628: PPUSH
// if not driver or not IsInUnit ( driver ) then
66629: LD_VAR 0 1
66633: NOT
66634: IFTRUE 66648
66636: PUSH
66637: LD_VAR 0 1
66641: PPUSH
66642: CALL_OW 310
66646: NOT
66647: OR
66648: IFFALSE 66652
// exit ;
66650: GO 66742
// vehicle := IsInUnit ( driver ) ;
66652: LD_ADDR_VAR 0 3
66656: PUSH
66657: LD_VAR 0 1
66661: PPUSH
66662: CALL_OW 310
66666: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66667: LD_VAR 0 1
66671: PPUSH
66672: LD_STRING \
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: PUSH
66702: LD_STRING E
66704: PUSH
66705: LD_INT 0
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_VAR 0 3
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PPUSH
66738: CALL_OW 446
// end ;
66742: LD_VAR 0 2
66746: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66747: LD_INT 0
66749: PPUSH
66750: PPUSH
// if not driver or not IsInUnit ( driver ) then
66751: LD_VAR 0 1
66755: NOT
66756: IFTRUE 66770
66758: PUSH
66759: LD_VAR 0 1
66763: PPUSH
66764: CALL_OW 310
66768: NOT
66769: OR
66770: IFFALSE 66774
// exit ;
66772: GO 66864
// vehicle := IsInUnit ( driver ) ;
66774: LD_ADDR_VAR 0 3
66778: PUSH
66779: LD_VAR 0 1
66783: PPUSH
66784: CALL_OW 310
66788: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66789: LD_VAR 0 1
66793: PPUSH
66794: LD_STRING \
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: LD_INT 0
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: PUSH
66824: LD_STRING E
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_VAR 0 3
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PPUSH
66860: CALL_OW 447
// end ;
66864: LD_VAR 0 2
66868: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66869: LD_INT 0
66871: PPUSH
66872: PPUSH
66873: PPUSH
// tmp := [ ] ;
66874: LD_ADDR_VAR 0 5
66878: PUSH
66879: EMPTY
66880: ST_TO_ADDR
// for i in units do
66881: LD_ADDR_VAR 0 4
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: FOR_IN
66892: IFFALSE 66930
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66894: LD_ADDR_VAR 0 5
66898: PUSH
66899: LD_VAR 0 5
66903: PPUSH
66904: LD_VAR 0 5
66908: PUSH
66909: LD_INT 1
66911: PLUS
66912: PPUSH
66913: LD_VAR 0 4
66917: PPUSH
66918: CALL_OW 256
66922: PPUSH
66923: CALL_OW 2
66927: ST_TO_ADDR
66928: GO 66891
66930: POP
66931: POP
// if not tmp then
66932: LD_VAR 0 5
66936: NOT
66937: IFFALSE 66941
// exit ;
66939: GO 66989
// if asc then
66941: LD_VAR 0 2
66945: IFFALSE 66969
// result := SortListByListAsc ( units , tmp ) else
66947: LD_ADDR_VAR 0 3
66951: PUSH
66952: LD_VAR 0 1
66956: PPUSH
66957: LD_VAR 0 5
66961: PPUSH
66962: CALL_OW 76
66966: ST_TO_ADDR
66967: GO 66989
// result := SortListByListDesc ( units , tmp ) ;
66969: LD_ADDR_VAR 0 3
66973: PUSH
66974: LD_VAR 0 1
66978: PPUSH
66979: LD_VAR 0 5
66983: PPUSH
66984: CALL_OW 77
66988: ST_TO_ADDR
// end ;
66989: LD_VAR 0 3
66993: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66994: LD_INT 0
66996: PPUSH
66997: PPUSH
// task := GetTaskList ( mech ) ;
66998: LD_ADDR_VAR 0 4
67002: PUSH
67003: LD_VAR 0 1
67007: PPUSH
67008: CALL_OW 437
67012: ST_TO_ADDR
// if not task then
67013: LD_VAR 0 4
67017: NOT
67018: IFFALSE 67022
// exit ;
67020: GO 67066
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: LD_VAR 0 4
67031: PUSH
67032: LD_INT 1
67034: ARRAY
67035: PUSH
67036: LD_INT 1
67038: ARRAY
67039: PUSH
67040: LD_STRING r
67042: EQUAL
67043: IFFALSE 67065
67045: PUSH
67046: LD_VAR 0 4
67050: PUSH
67051: LD_INT 1
67053: ARRAY
67054: PUSH
67055: LD_INT 4
67057: ARRAY
67058: PUSH
67059: LD_VAR 0 2
67063: EQUAL
67064: AND
67065: ST_TO_ADDR
// end ;
67066: LD_VAR 0 3
67070: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67071: LD_INT 0
67073: PPUSH
// SetDir ( unit , d ) ;
67074: LD_VAR 0 1
67078: PPUSH
67079: LD_VAR 0 4
67083: PPUSH
67084: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67088: LD_ADDR_VAR 0 6
67092: PUSH
67093: LD_VAR 0 1
67097: PPUSH
67098: LD_VAR 0 2
67102: PPUSH
67103: LD_VAR 0 3
67107: PPUSH
67108: LD_VAR 0 5
67112: PPUSH
67113: CALL_OW 48
67117: ST_TO_ADDR
// end ;
67118: LD_VAR 0 6
67122: RET
// export function ToNaturalNumber ( number ) ; begin
67123: LD_INT 0
67125: PPUSH
// result := number div 1 ;
67126: LD_ADDR_VAR 0 2
67130: PUSH
67131: LD_VAR 0 1
67135: PUSH
67136: LD_INT 1
67138: DIV
67139: ST_TO_ADDR
// if number < 0 then
67140: LD_VAR 0 1
67144: PUSH
67145: LD_INT 0
67147: LESS
67148: IFFALSE 67158
// result := 0 ;
67150: LD_ADDR_VAR 0 2
67154: PUSH
67155: LD_INT 0
67157: ST_TO_ADDR
// end ;
67158: LD_VAR 0 2
67162: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67163: LD_INT 0
67165: PPUSH
67166: PPUSH
67167: PPUSH
// if not buildings then
67168: LD_VAR 0 1
67172: NOT
67173: IFFALSE 67177
// exit ;
67175: GO 67292
// tmp := [ ] ;
67177: LD_ADDR_VAR 0 5
67181: PUSH
67182: EMPTY
67183: ST_TO_ADDR
// for b in buildings do
67184: LD_ADDR_VAR 0 4
67188: PUSH
67189: LD_VAR 0 1
67193: PUSH
67194: FOR_IN
67195: IFFALSE 67233
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67197: LD_ADDR_VAR 0 5
67201: PUSH
67202: LD_VAR 0 5
67206: PPUSH
67207: LD_VAR 0 5
67211: PUSH
67212: LD_INT 1
67214: PLUS
67215: PPUSH
67216: LD_VAR 0 4
67220: PPUSH
67221: CALL_OW 266
67225: PPUSH
67226: CALL_OW 1
67230: ST_TO_ADDR
67231: GO 67194
67233: POP
67234: POP
// if not tmp then
67235: LD_VAR 0 5
67239: NOT
67240: IFFALSE 67244
// exit ;
67242: GO 67292
// if asc then
67244: LD_VAR 0 2
67248: IFFALSE 67272
// result := SortListByListAsc ( buildings , tmp ) else
67250: LD_ADDR_VAR 0 3
67254: PUSH
67255: LD_VAR 0 1
67259: PPUSH
67260: LD_VAR 0 5
67264: PPUSH
67265: CALL_OW 76
67269: ST_TO_ADDR
67270: GO 67292
// result := SortListByListDesc ( buildings , tmp ) ;
67272: LD_ADDR_VAR 0 3
67276: PUSH
67277: LD_VAR 0 1
67281: PPUSH
67282: LD_VAR 0 5
67286: PPUSH
67287: CALL_OW 77
67291: ST_TO_ADDR
// end ;
67292: LD_VAR 0 3
67296: RET
// export function SortByClass ( units , class ) ; var un ; begin
67297: LD_INT 0
67299: PPUSH
67300: PPUSH
// if not units or not class then
67301: LD_VAR 0 1
67305: NOT
67306: IFTRUE 67315
67308: PUSH
67309: LD_VAR 0 2
67313: NOT
67314: OR
67315: IFFALSE 67319
// exit ;
67317: GO 67414
// result := [ ] ;
67319: LD_ADDR_VAR 0 3
67323: PUSH
67324: EMPTY
67325: ST_TO_ADDR
// for un in units do
67326: LD_ADDR_VAR 0 4
67330: PUSH
67331: LD_VAR 0 1
67335: PUSH
67336: FOR_IN
67337: IFFALSE 67412
// if GetClass ( un ) = class then
67339: LD_VAR 0 4
67343: PPUSH
67344: CALL_OW 257
67348: PUSH
67349: LD_VAR 0 2
67353: EQUAL
67354: IFFALSE 67381
// result := Insert ( result , 1 , un ) else
67356: LD_ADDR_VAR 0 3
67360: PUSH
67361: LD_VAR 0 3
67365: PPUSH
67366: LD_INT 1
67368: PPUSH
67369: LD_VAR 0 4
67373: PPUSH
67374: CALL_OW 2
67378: ST_TO_ADDR
67379: GO 67410
// result := Replace ( result , result + 1 , un ) ;
67381: LD_ADDR_VAR 0 3
67385: PUSH
67386: LD_VAR 0 3
67390: PPUSH
67391: LD_VAR 0 3
67395: PUSH
67396: LD_INT 1
67398: PLUS
67399: PPUSH
67400: LD_VAR 0 4
67404: PPUSH
67405: CALL_OW 1
67409: ST_TO_ADDR
67410: GO 67336
67412: POP
67413: POP
// end ;
67414: LD_VAR 0 3
67418: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67419: LD_INT 0
67421: PPUSH
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
67427: PPUSH
// result := [ ] ;
67428: LD_ADDR_VAR 0 4
67432: PUSH
67433: EMPTY
67434: ST_TO_ADDR
// if x - r < 0 then
67435: LD_VAR 0 1
67439: PUSH
67440: LD_VAR 0 3
67444: MINUS
67445: PUSH
67446: LD_INT 0
67448: LESS
67449: IFFALSE 67461
// min_x := 0 else
67451: LD_ADDR_VAR 0 8
67455: PUSH
67456: LD_INT 0
67458: ST_TO_ADDR
67459: GO 67477
// min_x := x - r ;
67461: LD_ADDR_VAR 0 8
67465: PUSH
67466: LD_VAR 0 1
67470: PUSH
67471: LD_VAR 0 3
67475: MINUS
67476: ST_TO_ADDR
// if y - r < 0 then
67477: LD_VAR 0 2
67481: PUSH
67482: LD_VAR 0 3
67486: MINUS
67487: PUSH
67488: LD_INT 0
67490: LESS
67491: IFFALSE 67503
// min_y := 0 else
67493: LD_ADDR_VAR 0 7
67497: PUSH
67498: LD_INT 0
67500: ST_TO_ADDR
67501: GO 67519
// min_y := y - r ;
67503: LD_ADDR_VAR 0 7
67507: PUSH
67508: LD_VAR 0 2
67512: PUSH
67513: LD_VAR 0 3
67517: MINUS
67518: ST_TO_ADDR
// max_x := x + r ;
67519: LD_ADDR_VAR 0 9
67523: PUSH
67524: LD_VAR 0 1
67528: PUSH
67529: LD_VAR 0 3
67533: PLUS
67534: ST_TO_ADDR
// max_y := y + r ;
67535: LD_ADDR_VAR 0 10
67539: PUSH
67540: LD_VAR 0 2
67544: PUSH
67545: LD_VAR 0 3
67549: PLUS
67550: ST_TO_ADDR
// for _x = min_x to max_x do
67551: LD_ADDR_VAR 0 5
67555: PUSH
67556: DOUBLE
67557: LD_VAR 0 8
67561: DEC
67562: ST_TO_ADDR
67563: LD_VAR 0 9
67567: PUSH
67568: FOR_TO
67569: IFFALSE 67670
// for _y = min_y to max_y do
67571: LD_ADDR_VAR 0 6
67575: PUSH
67576: DOUBLE
67577: LD_VAR 0 7
67581: DEC
67582: ST_TO_ADDR
67583: LD_VAR 0 10
67587: PUSH
67588: FOR_TO
67589: IFFALSE 67666
// begin if not ValidHex ( _x , _y ) then
67591: LD_VAR 0 5
67595: PPUSH
67596: LD_VAR 0 6
67600: PPUSH
67601: CALL_OW 488
67605: NOT
67606: IFFALSE 67610
// continue ;
67608: GO 67588
// if GetResourceTypeXY ( _x , _y ) then
67610: LD_VAR 0 5
67614: PPUSH
67615: LD_VAR 0 6
67619: PPUSH
67620: CALL_OW 283
67624: IFFALSE 67664
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67626: LD_ADDR_VAR 0 4
67630: PUSH
67631: LD_VAR 0 4
67635: PPUSH
67636: LD_VAR 0 4
67640: PUSH
67641: LD_INT 1
67643: PLUS
67644: PPUSH
67645: LD_VAR 0 5
67649: PUSH
67650: LD_VAR 0 6
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PPUSH
67659: CALL_OW 1
67663: ST_TO_ADDR
// end ;
67664: GO 67588
67666: POP
67667: POP
67668: GO 67568
67670: POP
67671: POP
// end ;
67672: LD_VAR 0 4
67676: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67677: LD_INT 0
67679: PPUSH
67680: PPUSH
67681: PPUSH
67682: PPUSH
67683: PPUSH
67684: PPUSH
67685: PPUSH
67686: PPUSH
// if not units then
67687: LD_VAR 0 1
67691: NOT
67692: IFFALSE 67696
// exit ;
67694: GO 68228
// result := UnitFilter ( units , [ f_ok ] ) ;
67696: LD_ADDR_VAR 0 3
67700: PUSH
67701: LD_VAR 0 1
67705: PPUSH
67706: LD_INT 50
67708: PUSH
67709: EMPTY
67710: LIST
67711: PPUSH
67712: CALL_OW 72
67716: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67717: LD_ADDR_VAR 0 8
67721: PUSH
67722: LD_VAR 0 1
67726: PUSH
67727: LD_INT 1
67729: ARRAY
67730: PPUSH
67731: CALL_OW 255
67735: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67736: LD_ADDR_VAR 0 10
67740: PUSH
67741: LD_INT 29
67743: PUSH
67744: LD_INT 91
67746: PUSH
67747: LD_INT 49
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// if not result then
67755: LD_VAR 0 3
67759: NOT
67760: IFFALSE 67764
// exit ;
67762: GO 68228
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67764: LD_ADDR_VAR 0 5
67768: PUSH
67769: LD_INT 81
67771: PUSH
67772: LD_VAR 0 8
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PPUSH
67781: CALL_OW 69
67785: ST_TO_ADDR
// for i in result do
67786: LD_ADDR_VAR 0 4
67790: PUSH
67791: LD_VAR 0 3
67795: PUSH
67796: FOR_IN
67797: IFFALSE 68226
// begin tag := GetTag ( i ) + 1 ;
67799: LD_ADDR_VAR 0 9
67803: PUSH
67804: LD_VAR 0 4
67808: PPUSH
67809: CALL_OW 110
67813: PUSH
67814: LD_INT 1
67816: PLUS
67817: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67818: LD_ADDR_VAR 0 7
67822: PUSH
67823: LD_VAR 0 4
67827: PPUSH
67828: CALL_OW 250
67832: PPUSH
67833: LD_VAR 0 4
67837: PPUSH
67838: CALL_OW 251
67842: PPUSH
67843: LD_INT 4
67845: PPUSH
67846: CALL 67419 0 3
67850: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67851: LD_VAR 0 4
67855: PPUSH
67856: CALL_OW 247
67860: PUSH
67861: LD_INT 2
67863: EQUAL
67864: IFFALSE 67876
67866: PUSH
67867: LD_VAR 0 7
67871: PUSH
67872: LD_INT 2
67874: GREATER
67875: AND
67876: IFFALSE 67896
67878: PUSH
67879: LD_VAR 0 4
67883: PPUSH
67884: CALL_OW 264
67888: PUSH
67889: LD_VAR 0 10
67893: IN
67894: NOT
67895: AND
67896: IFFALSE 67935
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67898: LD_VAR 0 4
67902: PPUSH
67903: LD_VAR 0 7
67907: PUSH
67908: LD_INT 1
67910: ARRAY
67911: PUSH
67912: LD_INT 1
67914: ARRAY
67915: PPUSH
67916: LD_VAR 0 7
67920: PUSH
67921: LD_INT 1
67923: ARRAY
67924: PUSH
67925: LD_INT 2
67927: ARRAY
67928: PPUSH
67929: CALL_OW 116
67933: GO 68224
// if path > tag then
67935: LD_VAR 0 2
67939: PUSH
67940: LD_VAR 0 9
67944: GREATER
67945: IFFALSE 68153
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67947: LD_ADDR_VAR 0 6
67951: PUSH
67952: LD_VAR 0 5
67956: PPUSH
67957: LD_INT 91
67959: PUSH
67960: LD_VAR 0 4
67964: PUSH
67965: LD_INT 8
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: PPUSH
67973: CALL_OW 72
67977: ST_TO_ADDR
// if nearEnemy then
67978: LD_VAR 0 6
67982: IFFALSE 68051
// begin if GetWeapon ( i ) = ru_time_lapser then
67984: LD_VAR 0 4
67988: PPUSH
67989: CALL_OW 264
67993: PUSH
67994: LD_INT 49
67996: EQUAL
67997: IFFALSE 68025
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67999: LD_VAR 0 4
68003: PPUSH
68004: LD_VAR 0 6
68008: PPUSH
68009: LD_VAR 0 4
68013: PPUSH
68014: CALL_OW 74
68018: PPUSH
68019: CALL_OW 112
68023: GO 68049
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68025: LD_VAR 0 4
68029: PPUSH
68030: LD_VAR 0 6
68034: PPUSH
68035: LD_VAR 0 4
68039: PPUSH
68040: CALL_OW 74
68044: PPUSH
68045: CALL 69309 0 2
// end else
68049: GO 68151
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68051: LD_VAR 0 4
68055: PPUSH
68056: LD_VAR 0 2
68060: PUSH
68061: LD_VAR 0 9
68065: ARRAY
68066: PUSH
68067: LD_INT 1
68069: ARRAY
68070: PPUSH
68071: LD_VAR 0 2
68075: PUSH
68076: LD_VAR 0 9
68080: ARRAY
68081: PUSH
68082: LD_INT 2
68084: ARRAY
68085: PPUSH
68086: CALL_OW 297
68090: PUSH
68091: LD_INT 6
68093: GREATER
68094: IFFALSE 68137
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68096: LD_VAR 0 4
68100: PPUSH
68101: LD_VAR 0 2
68105: PUSH
68106: LD_VAR 0 9
68110: ARRAY
68111: PUSH
68112: LD_INT 1
68114: ARRAY
68115: PPUSH
68116: LD_VAR 0 2
68120: PUSH
68121: LD_VAR 0 9
68125: ARRAY
68126: PUSH
68127: LD_INT 2
68129: ARRAY
68130: PPUSH
68131: CALL_OW 114
68135: GO 68151
// SetTag ( i , tag ) ;
68137: LD_VAR 0 4
68141: PPUSH
68142: LD_VAR 0 9
68146: PPUSH
68147: CALL_OW 109
// end else
68151: GO 68224
// if enemy then
68153: LD_VAR 0 5
68157: IFFALSE 68224
// begin if GetWeapon ( i ) = ru_time_lapser then
68159: LD_VAR 0 4
68163: PPUSH
68164: CALL_OW 264
68168: PUSH
68169: LD_INT 49
68171: EQUAL
68172: IFFALSE 68200
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68174: LD_VAR 0 4
68178: PPUSH
68179: LD_VAR 0 5
68183: PPUSH
68184: LD_VAR 0 4
68188: PPUSH
68189: CALL_OW 74
68193: PPUSH
68194: CALL_OW 112
68198: GO 68224
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68200: LD_VAR 0 4
68204: PPUSH
68205: LD_VAR 0 5
68209: PPUSH
68210: LD_VAR 0 4
68214: PPUSH
68215: CALL_OW 74
68219: PPUSH
68220: CALL 69309 0 2
// end ; end ;
68224: GO 67796
68226: POP
68227: POP
// end ;
68228: LD_VAR 0 3
68232: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68233: LD_INT 0
68235: PPUSH
68236: PPUSH
68237: PPUSH
// if not unit or IsInUnit ( unit ) then
68238: LD_VAR 0 1
68242: NOT
68243: IFTRUE 68256
68245: PUSH
68246: LD_VAR 0 1
68250: PPUSH
68251: CALL_OW 310
68255: OR
68256: IFFALSE 68260
// exit ;
68258: GO 68351
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68260: LD_ADDR_VAR 0 4
68264: PUSH
68265: LD_VAR 0 1
68269: PPUSH
68270: CALL_OW 250
68274: PPUSH
68275: LD_VAR 0 2
68279: PPUSH
68280: LD_INT 1
68282: PPUSH
68283: CALL_OW 272
68287: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68288: LD_ADDR_VAR 0 5
68292: PUSH
68293: LD_VAR 0 1
68297: PPUSH
68298: CALL_OW 251
68302: PPUSH
68303: LD_VAR 0 2
68307: PPUSH
68308: LD_INT 1
68310: PPUSH
68311: CALL_OW 273
68315: ST_TO_ADDR
// if ValidHex ( x , y ) then
68316: LD_VAR 0 4
68320: PPUSH
68321: LD_VAR 0 5
68325: PPUSH
68326: CALL_OW 488
68330: IFFALSE 68351
// ComTurnXY ( unit , x , y ) ;
68332: LD_VAR 0 1
68336: PPUSH
68337: LD_VAR 0 4
68341: PPUSH
68342: LD_VAR 0 5
68346: PPUSH
68347: CALL_OW 118
// end ;
68351: LD_VAR 0 3
68355: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68356: LD_INT 0
68358: PPUSH
68359: PPUSH
// result := false ;
68360: LD_ADDR_VAR 0 3
68364: PUSH
68365: LD_INT 0
68367: ST_TO_ADDR
// if not units then
68368: LD_VAR 0 2
68372: NOT
68373: IFFALSE 68377
// exit ;
68375: GO 68422
// for i in units do
68377: LD_ADDR_VAR 0 4
68381: PUSH
68382: LD_VAR 0 2
68386: PUSH
68387: FOR_IN
68388: IFFALSE 68420
// if See ( side , i ) then
68390: LD_VAR 0 1
68394: PPUSH
68395: LD_VAR 0 4
68399: PPUSH
68400: CALL_OW 292
68404: IFFALSE 68418
// begin result := true ;
68406: LD_ADDR_VAR 0 3
68410: PUSH
68411: LD_INT 1
68413: ST_TO_ADDR
// exit ;
68414: POP
68415: POP
68416: GO 68422
// end ;
68418: GO 68387
68420: POP
68421: POP
// end ;
68422: LD_VAR 0 3
68426: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68427: LD_INT 0
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
// if not unit or not points then
68433: LD_VAR 0 1
68437: NOT
68438: IFTRUE 68447
68440: PUSH
68441: LD_VAR 0 2
68445: NOT
68446: OR
68447: IFFALSE 68451
// exit ;
68449: GO 68541
// dist := 99999 ;
68451: LD_ADDR_VAR 0 5
68455: PUSH
68456: LD_INT 99999
68458: ST_TO_ADDR
// for i in points do
68459: LD_ADDR_VAR 0 4
68463: PUSH
68464: LD_VAR 0 2
68468: PUSH
68469: FOR_IN
68470: IFFALSE 68539
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68472: LD_ADDR_VAR 0 6
68476: PUSH
68477: LD_VAR 0 1
68481: PPUSH
68482: LD_VAR 0 4
68486: PUSH
68487: LD_INT 1
68489: ARRAY
68490: PPUSH
68491: LD_VAR 0 4
68495: PUSH
68496: LD_INT 2
68498: ARRAY
68499: PPUSH
68500: CALL_OW 297
68504: ST_TO_ADDR
// if tmpDist < dist then
68505: LD_VAR 0 6
68509: PUSH
68510: LD_VAR 0 5
68514: LESS
68515: IFFALSE 68537
// begin result := i ;
68517: LD_ADDR_VAR 0 3
68521: PUSH
68522: LD_VAR 0 4
68526: ST_TO_ADDR
// dist := tmpDist ;
68527: LD_ADDR_VAR 0 5
68531: PUSH
68532: LD_VAR 0 6
68536: ST_TO_ADDR
// end ; end ;
68537: GO 68469
68539: POP
68540: POP
// end ;
68541: LD_VAR 0 3
68545: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68546: LD_INT 0
68548: PPUSH
// uc_side := side ;
68549: LD_ADDR_OWVAR 20
68553: PUSH
68554: LD_VAR 0 1
68558: ST_TO_ADDR
// uc_nation := 3 ;
68559: LD_ADDR_OWVAR 21
68563: PUSH
68564: LD_INT 3
68566: ST_TO_ADDR
// vc_chassis := 25 ;
68567: LD_ADDR_OWVAR 37
68571: PUSH
68572: LD_INT 25
68574: ST_TO_ADDR
// vc_engine := engine_siberite ;
68575: LD_ADDR_OWVAR 39
68579: PUSH
68580: LD_INT 3
68582: ST_TO_ADDR
// vc_control := control_computer ;
68583: LD_ADDR_OWVAR 38
68587: PUSH
68588: LD_INT 3
68590: ST_TO_ADDR
// vc_weapon := 59 ;
68591: LD_ADDR_OWVAR 40
68595: PUSH
68596: LD_INT 59
68598: ST_TO_ADDR
// result := CreateVehicle ;
68599: LD_ADDR_VAR 0 5
68603: PUSH
68604: CALL_OW 45
68608: ST_TO_ADDR
// SetDir ( result , d ) ;
68609: LD_VAR 0 5
68613: PPUSH
68614: LD_VAR 0 4
68618: PPUSH
68619: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68623: LD_VAR 0 5
68627: PPUSH
68628: LD_VAR 0 2
68632: PPUSH
68633: LD_VAR 0 3
68637: PPUSH
68638: LD_INT 0
68640: PPUSH
68641: CALL_OW 48
// end ;
68645: LD_VAR 0 5
68649: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68650: LD_INT 0
68652: PPUSH
68653: PPUSH
68654: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68655: LD_ADDR_VAR 0 2
68659: PUSH
68660: LD_INT 0
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68678: LD_VAR 0 1
68682: NOT
68683: IFTRUE 68716
68685: PUSH
68686: LD_VAR 0 1
68690: PPUSH
68691: CALL_OW 264
68695: PUSH
68696: LD_INT 12
68698: PUSH
68699: LD_INT 51
68701: PUSH
68702: LD_INT 32
68704: PUSH
68705: LD_INT 89
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: IN
68714: NOT
68715: OR
68716: IFFALSE 68720
// exit ;
68718: GO 68818
// for i := 1 to 3 do
68720: LD_ADDR_VAR 0 3
68724: PUSH
68725: DOUBLE
68726: LD_INT 1
68728: DEC
68729: ST_TO_ADDR
68730: LD_INT 3
68732: PUSH
68733: FOR_TO
68734: IFFALSE 68816
// begin tmp := GetCargo ( cargo , i ) ;
68736: LD_ADDR_VAR 0 4
68740: PUSH
68741: LD_VAR 0 1
68745: PPUSH
68746: LD_VAR 0 3
68750: PPUSH
68751: CALL_OW 289
68755: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68756: LD_ADDR_VAR 0 2
68760: PUSH
68761: LD_VAR 0 2
68765: PPUSH
68766: LD_VAR 0 3
68770: PPUSH
68771: LD_VAR 0 4
68775: PPUSH
68776: CALL_OW 1
68780: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68781: LD_ADDR_VAR 0 2
68785: PUSH
68786: LD_VAR 0 2
68790: PPUSH
68791: LD_INT 4
68793: PPUSH
68794: LD_VAR 0 2
68798: PUSH
68799: LD_INT 4
68801: ARRAY
68802: PUSH
68803: LD_VAR 0 4
68807: PLUS
68808: PPUSH
68809: CALL_OW 1
68813: ST_TO_ADDR
// end ;
68814: GO 68733
68816: POP
68817: POP
// end ;
68818: LD_VAR 0 2
68822: RET
// export function Length ( array ) ; begin
68823: LD_INT 0
68825: PPUSH
// result := array + 0 ;
68826: LD_ADDR_VAR 0 2
68830: PUSH
68831: LD_VAR 0 1
68835: PUSH
68836: LD_INT 0
68838: PLUS
68839: ST_TO_ADDR
// end ;
68840: LD_VAR 0 2
68844: RET
// export function PrepareArray ( array ) ; begin
68845: LD_INT 0
68847: PPUSH
// result := array diff 0 ;
68848: LD_ADDR_VAR 0 2
68852: PUSH
68853: LD_VAR 0 1
68857: PUSH
68858: LD_INT 0
68860: DIFF
68861: ST_TO_ADDR
// if not result [ 1 ] then
68862: LD_VAR 0 2
68866: PUSH
68867: LD_INT 1
68869: ARRAY
68870: NOT
68871: IFFALSE 68891
// result := Delete ( result , 1 ) ;
68873: LD_ADDR_VAR 0 2
68877: PUSH
68878: LD_VAR 0 2
68882: PPUSH
68883: LD_INT 1
68885: PPUSH
68886: CALL_OW 3
68890: ST_TO_ADDR
// end ;
68891: LD_VAR 0 2
68895: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68896: LD_INT 0
68898: PPUSH
68899: PPUSH
68900: PPUSH
68901: PPUSH
// sibRocketRange := 25 ;
68902: LD_ADDR_VAR 0 6
68906: PUSH
68907: LD_INT 25
68909: ST_TO_ADDR
// result := false ;
68910: LD_ADDR_VAR 0 4
68914: PUSH
68915: LD_INT 0
68917: ST_TO_ADDR
// for i := 0 to 5 do
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: DOUBLE
68924: LD_INT 0
68926: DEC
68927: ST_TO_ADDR
68928: LD_INT 5
68930: PUSH
68931: FOR_TO
68932: IFFALSE 68999
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68934: LD_VAR 0 1
68938: PPUSH
68939: LD_VAR 0 5
68943: PPUSH
68944: LD_VAR 0 6
68948: PPUSH
68949: CALL_OW 272
68953: PPUSH
68954: LD_VAR 0 2
68958: PPUSH
68959: LD_VAR 0 5
68963: PPUSH
68964: LD_VAR 0 6
68968: PPUSH
68969: CALL_OW 273
68973: PPUSH
68974: LD_VAR 0 3
68978: PPUSH
68979: CALL_OW 309
68983: IFFALSE 68997
// begin result := true ;
68985: LD_ADDR_VAR 0 4
68989: PUSH
68990: LD_INT 1
68992: ST_TO_ADDR
// exit ;
68993: POP
68994: POP
68995: GO 69001
// end ;
68997: GO 68931
68999: POP
69000: POP
// end ;
69001: LD_VAR 0 4
69005: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69006: LD_INT 0
69008: PPUSH
69009: PPUSH
69010: PPUSH
// if btype = b_depot then
69011: LD_VAR 0 2
69015: PUSH
69016: LD_INT 0
69018: EQUAL
69019: IFFALSE 69031
// begin result := true ;
69021: LD_ADDR_VAR 0 3
69025: PUSH
69026: LD_INT 1
69028: ST_TO_ADDR
// exit ;
69029: GO 69151
// end ; pom := GetBase ( depot ) ;
69031: LD_ADDR_VAR 0 4
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 274
69045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69046: LD_ADDR_VAR 0 5
69050: PUSH
69051: LD_VAR 0 2
69055: PPUSH
69056: LD_VAR 0 1
69060: PPUSH
69061: CALL_OW 248
69065: PPUSH
69066: CALL_OW 450
69070: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69071: LD_ADDR_VAR 0 3
69075: PUSH
69076: LD_VAR 0 4
69080: PPUSH
69081: LD_INT 1
69083: PPUSH
69084: CALL_OW 275
69088: PUSH
69089: LD_VAR 0 5
69093: PUSH
69094: LD_INT 1
69096: ARRAY
69097: GREATEREQUAL
69098: IFFALSE 69124
69100: PUSH
69101: LD_VAR 0 4
69105: PPUSH
69106: LD_INT 2
69108: PPUSH
69109: CALL_OW 275
69113: PUSH
69114: LD_VAR 0 5
69118: PUSH
69119: LD_INT 2
69121: ARRAY
69122: GREATEREQUAL
69123: AND
69124: IFFALSE 69150
69126: PUSH
69127: LD_VAR 0 4
69131: PPUSH
69132: LD_INT 3
69134: PPUSH
69135: CALL_OW 275
69139: PUSH
69140: LD_VAR 0 5
69144: PUSH
69145: LD_INT 3
69147: ARRAY
69148: GREATEREQUAL
69149: AND
69150: ST_TO_ADDR
// end ;
69151: LD_VAR 0 3
69155: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69156: LD_INT 0
69158: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69159: LD_VAR 0 1
69163: PPUSH
69164: LD_VAR 0 2
69168: PPUSH
69169: LD_INT 0
69171: PPUSH
69172: LD_INT 0
69174: PPUSH
69175: LD_INT 1
69177: PPUSH
69178: LD_INT 0
69180: PPUSH
69181: CALL_OW 587
// end ;
69185: LD_VAR 0 3
69189: RET
// export function CenterOnNow ( unit ) ; begin
69190: LD_INT 0
69192: PPUSH
// result := IsInUnit ( unit ) ;
69193: LD_ADDR_VAR 0 2
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 310
69207: ST_TO_ADDR
// if not result then
69208: LD_VAR 0 2
69212: NOT
69213: IFFALSE 69225
// result := unit ;
69215: LD_ADDR_VAR 0 2
69219: PUSH
69220: LD_VAR 0 1
69224: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 87
// end ;
69234: LD_VAR 0 2
69238: RET
// export function ComMoveHex ( unit , hex ) ; begin
69239: LD_INT 0
69241: PPUSH
// if not hex then
69242: LD_VAR 0 2
69246: NOT
69247: IFFALSE 69251
// exit ;
69249: GO 69304
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69251: LD_VAR 0 2
69255: PUSH
69256: LD_INT 1
69258: ARRAY
69259: PPUSH
69260: LD_VAR 0 2
69264: PUSH
69265: LD_INT 2
69267: ARRAY
69268: PPUSH
69269: CALL_OW 428
69273: IFFALSE 69277
// exit ;
69275: GO 69304
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69277: LD_VAR 0 1
69281: PPUSH
69282: LD_VAR 0 2
69286: PUSH
69287: LD_INT 1
69289: ARRAY
69290: PPUSH
69291: LD_VAR 0 2
69295: PUSH
69296: LD_INT 2
69298: ARRAY
69299: PPUSH
69300: CALL_OW 111
// end ;
69304: LD_VAR 0 3
69308: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69309: LD_INT 0
69311: PPUSH
69312: PPUSH
69313: PPUSH
// if not unit or not enemy then
69314: LD_VAR 0 1
69318: NOT
69319: IFTRUE 69328
69321: PUSH
69322: LD_VAR 0 2
69326: NOT
69327: OR
69328: IFFALSE 69332
// exit ;
69330: GO 69458
// x := GetX ( enemy ) ;
69332: LD_ADDR_VAR 0 4
69336: PUSH
69337: LD_VAR 0 2
69341: PPUSH
69342: CALL_OW 250
69346: ST_TO_ADDR
// y := GetY ( enemy ) ;
69347: LD_ADDR_VAR 0 5
69351: PUSH
69352: LD_VAR 0 2
69356: PPUSH
69357: CALL_OW 251
69361: ST_TO_ADDR
// if ValidHex ( x , y ) then
69362: LD_VAR 0 4
69366: PPUSH
69367: LD_VAR 0 5
69371: PPUSH
69372: CALL_OW 488
69376: IFFALSE 69458
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69378: LD_VAR 0 2
69382: PPUSH
69383: CALL_OW 247
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: IN
69398: IFTRUE 69421
69400: PUSH
69401: LD_VAR 0 1
69405: PPUSH
69406: CALL_OW 255
69410: PPUSH
69411: LD_VAR 0 2
69415: PPUSH
69416: CALL_OW 292
69420: OR
69421: IFFALSE 69439
// ComAttackUnit ( unit , enemy ) else
69423: LD_VAR 0 1
69427: PPUSH
69428: LD_VAR 0 2
69432: PPUSH
69433: CALL_OW 115
69437: GO 69458
// ComAgressiveMove ( unit , x , y ) ;
69439: LD_VAR 0 1
69443: PPUSH
69444: LD_VAR 0 4
69448: PPUSH
69449: LD_VAR 0 5
69453: PPUSH
69454: CALL_OW 114
// end ;
69458: LD_VAR 0 3
69462: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69463: LD_INT 0
69465: PPUSH
69466: PPUSH
69467: PPUSH
// list := AreaToList ( area , 0 ) ;
69468: LD_ADDR_VAR 0 5
69472: PUSH
69473: LD_VAR 0 1
69477: PPUSH
69478: LD_INT 0
69480: PPUSH
69481: CALL_OW 517
69485: ST_TO_ADDR
// if not list then
69486: LD_VAR 0 5
69490: NOT
69491: IFFALSE 69495
// exit ;
69493: GO 69625
// if all then
69495: LD_VAR 0 2
69499: IFFALSE 69587
// begin for i := 1 to list [ 1 ] do
69501: LD_ADDR_VAR 0 4
69505: PUSH
69506: DOUBLE
69507: LD_INT 1
69509: DEC
69510: ST_TO_ADDR
69511: LD_VAR 0 5
69515: PUSH
69516: LD_INT 1
69518: ARRAY
69519: PUSH
69520: FOR_TO
69521: IFFALSE 69583
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69523: LD_ADDR_VAR 0 3
69527: PUSH
69528: LD_VAR 0 3
69532: PPUSH
69533: LD_VAR 0 3
69537: PUSH
69538: LD_INT 1
69540: PLUS
69541: PPUSH
69542: LD_VAR 0 5
69546: PUSH
69547: LD_INT 1
69549: ARRAY
69550: PUSH
69551: LD_VAR 0 4
69555: ARRAY
69556: PUSH
69557: LD_VAR 0 5
69561: PUSH
69562: LD_INT 2
69564: ARRAY
69565: PUSH
69566: LD_VAR 0 4
69570: ARRAY
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PPUSH
69576: CALL_OW 1
69580: ST_TO_ADDR
69581: GO 69520
69583: POP
69584: POP
// exit ;
69585: GO 69625
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69587: LD_ADDR_VAR 0 3
69591: PUSH
69592: LD_VAR 0 5
69596: PUSH
69597: LD_INT 1
69599: ARRAY
69600: PUSH
69601: LD_INT 1
69603: ARRAY
69604: PUSH
69605: LD_VAR 0 5
69609: PUSH
69610: LD_INT 2
69612: ARRAY
69613: PUSH
69614: LD_INT 1
69616: ARRAY
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: ST_TO_ADDR
// end ;
69625: LD_VAR 0 3
69629: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69630: LD_INT 0
69632: PPUSH
69633: PPUSH
// list := AreaToList ( area , 0 ) ;
69634: LD_ADDR_VAR 0 4
69638: PUSH
69639: LD_VAR 0 1
69643: PPUSH
69644: LD_INT 0
69646: PPUSH
69647: CALL_OW 517
69651: ST_TO_ADDR
// if not list then
69652: LD_VAR 0 4
69656: NOT
69657: IFFALSE 69661
// exit ;
69659: GO 69702
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69661: LD_ADDR_VAR 0 3
69665: PUSH
69666: LD_VAR 0 4
69670: PUSH
69671: LD_INT 1
69673: ARRAY
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PUSH
69679: LD_VAR 0 4
69683: PUSH
69684: LD_INT 2
69686: ARRAY
69687: PUSH
69688: LD_INT 1
69690: ARRAY
69691: PUSH
69692: LD_VAR 0 2
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: LIST
69701: ST_TO_ADDR
// end ;
69702: LD_VAR 0 3
69706: RET
// export function First ( array ) ; begin
69707: LD_INT 0
69709: PPUSH
// if not array then
69710: LD_VAR 0 1
69714: NOT
69715: IFFALSE 69719
// exit ;
69717: GO 69733
// result := array [ 1 ] ;
69719: LD_ADDR_VAR 0 2
69723: PUSH
69724: LD_VAR 0 1
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: ST_TO_ADDR
// end ;
69733: LD_VAR 0 2
69737: RET
// export function Last ( array ) ; begin
69738: LD_INT 0
69740: PPUSH
// if not array then
69741: LD_VAR 0 1
69745: NOT
69746: IFFALSE 69750
// exit ;
69748: GO 69766
// result := array [ array ] ;
69750: LD_ADDR_VAR 0 2
69754: PUSH
69755: LD_VAR 0 1
69759: PUSH
69760: LD_VAR 0 1
69764: ARRAY
69765: ST_TO_ADDR
// end ;
69766: LD_VAR 0 2
69770: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69771: LD_INT 0
69773: PPUSH
69774: PPUSH
// result := [ ] ;
69775: LD_ADDR_VAR 0 5
69779: PUSH
69780: EMPTY
69781: ST_TO_ADDR
// if not array then
69782: LD_VAR 0 1
69786: NOT
69787: IFFALSE 69791
// exit ;
69789: GO 69903
// for i := 1 to array do
69791: LD_ADDR_VAR 0 6
69795: PUSH
69796: DOUBLE
69797: LD_INT 1
69799: DEC
69800: ST_TO_ADDR
69801: LD_VAR 0 1
69805: PUSH
69806: FOR_TO
69807: IFFALSE 69901
// if array [ i ] [ index ] = value then
69809: LD_VAR 0 1
69813: PUSH
69814: LD_VAR 0 6
69818: ARRAY
69819: PUSH
69820: LD_VAR 0 2
69824: ARRAY
69825: PUSH
69826: LD_VAR 0 3
69830: EQUAL
69831: IFFALSE 69899
// begin if indexColumn then
69833: LD_VAR 0 4
69837: IFFALSE 69873
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69839: LD_ADDR_VAR 0 5
69843: PUSH
69844: LD_VAR 0 5
69848: PPUSH
69849: LD_VAR 0 1
69853: PUSH
69854: LD_VAR 0 6
69858: ARRAY
69859: PUSH
69860: LD_VAR 0 4
69864: ARRAY
69865: PPUSH
69866: CALL 64911 0 2
69870: ST_TO_ADDR
69871: GO 69899
// result := Join ( result , array [ i ] ) ;
69873: LD_ADDR_VAR 0 5
69877: PUSH
69878: LD_VAR 0 5
69882: PPUSH
69883: LD_VAR 0 1
69887: PUSH
69888: LD_VAR 0 6
69892: ARRAY
69893: PPUSH
69894: CALL 64911 0 2
69898: ST_TO_ADDR
// end ;
69899: GO 69806
69901: POP
69902: POP
// end ;
69903: LD_VAR 0 5
69907: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69908: LD_INT 0
69910: PPUSH
// if not vehicles or not parkingPoint then
69911: LD_VAR 0 1
69915: NOT
69916: IFTRUE 69925
69918: PUSH
69919: LD_VAR 0 2
69923: NOT
69924: OR
69925: IFFALSE 69929
// exit ;
69927: GO 70027
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69929: LD_ADDR_VAR 0 1
69933: PUSH
69934: LD_VAR 0 1
69938: PPUSH
69939: LD_INT 50
69941: PUSH
69942: EMPTY
69943: LIST
69944: PUSH
69945: LD_INT 3
69947: PUSH
69948: LD_INT 92
69950: PUSH
69951: LD_VAR 0 2
69955: PUSH
69956: LD_INT 1
69958: ARRAY
69959: PUSH
69960: LD_VAR 0 2
69964: PUSH
69965: LD_INT 2
69967: ARRAY
69968: PUSH
69969: LD_INT 8
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PPUSH
69986: CALL_OW 72
69990: ST_TO_ADDR
// if not vehicles then
69991: LD_VAR 0 1
69995: NOT
69996: IFFALSE 70000
// exit ;
69998: GO 70027
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 2
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PPUSH
70014: LD_VAR 0 2
70018: PUSH
70019: LD_INT 2
70021: ARRAY
70022: PPUSH
70023: CALL_OW 111
// end ;
70027: LD_VAR 0 3
70031: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70032: LD_INT 0
70034: PPUSH
70035: PPUSH
70036: PPUSH
// if not side or not area then
70037: LD_VAR 0 1
70041: NOT
70042: IFTRUE 70051
70044: PUSH
70045: LD_VAR 0 2
70049: NOT
70050: OR
70051: IFFALSE 70055
// exit ;
70053: GO 70174
// tmp := AreaToList ( area , 0 ) ;
70055: LD_ADDR_VAR 0 5
70059: PUSH
70060: LD_VAR 0 2
70064: PPUSH
70065: LD_INT 0
70067: PPUSH
70068: CALL_OW 517
70072: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70073: LD_ADDR_VAR 0 4
70077: PUSH
70078: DOUBLE
70079: LD_INT 1
70081: DEC
70082: ST_TO_ADDR
70083: LD_VAR 0 5
70087: PUSH
70088: LD_INT 1
70090: ARRAY
70091: PUSH
70092: FOR_TO
70093: IFFALSE 70172
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70095: LD_VAR 0 5
70099: PUSH
70100: LD_INT 1
70102: ARRAY
70103: PUSH
70104: LD_VAR 0 4
70108: ARRAY
70109: PPUSH
70110: LD_VAR 0 5
70114: PUSH
70115: LD_INT 2
70117: ARRAY
70118: PUSH
70119: LD_VAR 0 4
70123: ARRAY
70124: PPUSH
70125: CALL_OW 351
70129: IFFALSE 70170
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70131: LD_VAR 0 5
70135: PUSH
70136: LD_INT 1
70138: ARRAY
70139: PUSH
70140: LD_VAR 0 4
70144: ARRAY
70145: PPUSH
70146: LD_VAR 0 5
70150: PUSH
70151: LD_INT 2
70153: ARRAY
70154: PUSH
70155: LD_VAR 0 4
70159: ARRAY
70160: PPUSH
70161: LD_VAR 0 1
70165: PPUSH
70166: CALL_OW 244
// end ;
70170: GO 70092
70172: POP
70173: POP
// end ;
70174: LD_VAR 0 3
70178: RET
// export function UniqueArray ( array ) ; var i ; begin
70179: LD_INT 0
70181: PPUSH
70182: PPUSH
// result := [ ] ;
70183: LD_ADDR_VAR 0 2
70187: PUSH
70188: EMPTY
70189: ST_TO_ADDR
// if not array then
70190: LD_VAR 0 1
70194: NOT
70195: IFFALSE 70199
// exit ;
70197: GO 70260
// for i := 1 to array do
70199: LD_ADDR_VAR 0 3
70203: PUSH
70204: DOUBLE
70205: LD_INT 1
70207: DEC
70208: ST_TO_ADDR
70209: LD_VAR 0 1
70213: PUSH
70214: FOR_TO
70215: IFFALSE 70258
// if not array [ i ] in result then
70217: LD_VAR 0 1
70221: PUSH
70222: LD_VAR 0 3
70226: ARRAY
70227: PUSH
70228: LD_VAR 0 2
70232: IN
70233: NOT
70234: IFFALSE 70256
// result := Join ( result , i ) ;
70236: LD_ADDR_VAR 0 2
70240: PUSH
70241: LD_VAR 0 2
70245: PPUSH
70246: LD_VAR 0 3
70250: PPUSH
70251: CALL 64911 0 2
70255: ST_TO_ADDR
70256: GO 70214
70258: POP
70259: POP
// end ; end_of_file
70260: LD_VAR 0 2
70264: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70265: LD_VAR 0 1
70269: PUSH
70270: LD_INT 200
70272: DOUBLE
70273: GREATEREQUAL
70274: IFFALSE 70282
70276: LD_INT 299
70278: DOUBLE
70279: LESSEQUAL
70280: IFTRUE 70284
70282: GO 70316
70284: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70285: LD_VAR 0 1
70289: PPUSH
70290: LD_VAR 0 2
70294: PPUSH
70295: LD_VAR 0 3
70299: PPUSH
70300: LD_VAR 0 4
70304: PPUSH
70305: LD_VAR 0 5
70309: PPUSH
70310: CALL 21221 0 5
70314: GO 70393
70316: LD_INT 300
70318: DOUBLE
70319: GREATEREQUAL
70320: IFFALSE 70328
70322: LD_INT 399
70324: DOUBLE
70325: LESSEQUAL
70326: IFTRUE 70330
70328: GO 70392
70330: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70331: LD_VAR 0 1
70335: PPUSH
70336: LD_VAR 0 2
70340: PPUSH
70341: LD_VAR 0 3
70345: PPUSH
70346: LD_VAR 0 4
70350: PPUSH
70351: LD_VAR 0 5
70355: PPUSH
70356: LD_VAR 0 6
70360: PPUSH
70361: LD_VAR 0 7
70365: PPUSH
70366: LD_VAR 0 8
70370: PPUSH
70371: LD_VAR 0 9
70375: PPUSH
70376: LD_VAR 0 10
70380: PPUSH
70381: LD_VAR 0 11
70385: PPUSH
70386: CALL 17105 0 11
70390: GO 70393
70392: POP
// end ;
70393: PPOPN 11
70395: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70396: LD_VAR 0 1
70400: PPUSH
70401: LD_VAR 0 2
70405: PPUSH
70406: LD_VAR 0 3
70410: PPUSH
70411: LD_VAR 0 4
70415: PPUSH
70416: LD_VAR 0 5
70420: PPUSH
70421: CALL 20602 0 5
// end ; end_of_file
70425: PPOPN 5
70427: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70428: LD_VAR 0 1
70432: PPUSH
70433: LD_VAR 0 2
70437: PPUSH
70438: LD_VAR 0 3
70442: PPUSH
70443: LD_VAR 0 4
70447: PPUSH
70448: LD_VAR 0 5
70452: PPUSH
70453: LD_VAR 0 6
70457: PPUSH
70458: CALL 4645 0 6
// end ;
70462: PPOPN 6
70464: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70465: LD_INT 0
70467: PPUSH
// begin if not units then
70468: LD_VAR 0 1
70472: NOT
70473: IFFALSE 70477
// exit ;
70475: GO 70511
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70477: LD_VAR 0 1
70481: PPUSH
70482: LD_VAR 0 2
70486: PPUSH
70487: LD_VAR 0 3
70491: PPUSH
70492: LD_VAR 0 4
70496: PPUSH
70497: LD_VAR 0 5
70501: PPUSH
70502: LD_VAR 0 6
70506: PPUSH
70507: CALL 26728 0 6
// end ;
70511: PPOPN 7
70513: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70514: CALL 4532 0 0
// end ;
70518: PPOPN 1
70520: END
