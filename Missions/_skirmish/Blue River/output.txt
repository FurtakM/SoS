// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4269
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4167
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4036
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: PUSH
3936: LD_INT 63
3938: PPUSH
3939: LD_INT 37
3941: PPUSH
3942: CALL_OW 428
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 30
3954: EQUAL
3955: AND
3956: IFFALSE 3962
// ComitSib ;
3958: CALL 2766 0 0
// if Difficulty > 2 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 2
3969: GREATER
3970: IFFALSE 3998
// begin Wait ( 0 0$25 ) ;
3972: LD_INT 875
3974: PPUSH
3975: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PUSH
3989: LD_INT 4
3991: PPUSH
3992: CALL 1355 0 1
3996: ADD
3997: ST_TO_ADDR
// end ; if attackN > 7 then
3998: LD_EXP 6
4002: PUSH
4003: LD_INT 7
4005: GREATER
4006: IFFALSE 4034
// begin Wait ( 0 0$15 ) ;
4008: LD_INT 525
4010: PPUSH
4011: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL 1355 0 1
4032: ADD
4033: ST_TO_ADDR
// end ; end ; 3 :
4034: GO 4167
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4166
4044: POP
// begin pom := pom ^ Attack ( 1 ) ;
4045: LD_ADDR_EXP 4
4049: PUSH
4050: LD_EXP 4
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL 1355 0 1
4062: ADD
4063: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4064: LD_INT 70
4066: PPUSH
4067: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4071: LD_ADDR_EXP 4
4075: PUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL 1355 0 1
4088: ADD
4089: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4090: LD_INT 2100
4092: PPUSH
4093: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4097: LD_ADDR_EXP 4
4101: PUSH
4102: LD_EXP 4
4106: PUSH
4107: LD_INT 3
4109: PPUSH
4110: CALL 1355 0 1
4114: ADD
4115: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4116: LD_ADDR_EXP 4
4120: PUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 5
4128: PPUSH
4129: CALL 1355 0 1
4133: ADD
4134: ST_TO_ADDR
// if attackN > 10 then
4135: LD_EXP 6
4139: PUSH
4140: LD_INT 10
4142: GREATER
4143: IFFALSE 4164
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1355 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ;
4164: GO 4167
4166: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 1
4174: GREATER
4175: PUSH
4176: LD_EXP 6
4180: PUSH
4181: LD_INT 4
4183: MOD
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: AND
4189: IFFALSE 4255
// begin Wait ( 1 1$45 ) ;
4191: LD_INT 3675
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4217: LD_ADDR_EXP 4
4221: PUSH
4222: LD_EXP 4
4226: PUSH
4227: LD_INT 4
4229: PPUSH
4230: CALL 1355 0 1
4234: ADD
4235: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4236: LD_ADDR_EXP 5
4240: PUSH
4241: LD_EXP 5
4245: PUSH
4246: LD_INT 6
4248: PPUSH
4249: CALL 1355 0 1
4253: ADD
4254: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4255: LD_ADDR_EXP 6
4259: PUSH
4260: LD_EXP 6
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: PPOPN 2
4271: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4272: LD_EXP 6
4276: PUSH
4277: LD_INT 10
4279: PUSH
4280: LD_INT 12
4282: PUSH
4283: LD_INT 14
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: GREATEREQUAL
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PUSH
4313: LD_INT 0
4315: EQUAL
4316: AND
4317: IFFALSE 4360
4319: GO 4321
4321: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4322: LD_EXP 2
4326: PPUSH
4327: LD_STRING DDocEnd
4329: PPUSH
4330: CALL_OW 586
// wait ( 0 0$03 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// Query ( QWin ) ;
4341: LD_STRING QWin
4343: PPUSH
4344: CALL_OW 97
// music_nat := 5 ;
4348: LD_ADDR_OWVAR 71
4352: PUSH
4353: LD_INT 5
4355: ST_TO_ADDR
// YouWin ;
4356: CALL_OW 103
// end ; end_of_file
4360: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL 20267 0 1
// if un = brave or un = com then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 1
4377: EQUAL
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: LD_EXP 1
4388: EQUAL
4389: OR
4390: IFFALSE 4411
// begin SayRadioNoFace ( doc , DDocWin ) ;
4392: LD_EXP 2
4396: PPUSH
4397: LD_STRING DDocWin
4399: PPUSH
4400: CALL_OW 586
// YouLost (  ) ;
4404: LD_STRING 
4406: PPUSH
4407: CALL_OW 104
// end ; end ;
4411: PPOPN 1
4413: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL 20363 0 3
// end ;
4433: PPOPN 3
4435: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4436: LD_VAR 0 1
4440: PPUSH
4441: CALL 20371 0 1
// end ;
4445: PPOPN 1
4447: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL 20387 0 2
// end ; end_of_file end_of_file
4462: PPOPN 2
4464: END
// export globalGameSaveCounter ; every 0 0$1 do
4465: GO 4467
4467: DISABLE
// begin enable ;
4468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4469: LD_STRING updateTimer(
4471: PUSH
4472: LD_OWVAR 1
4476: STR
4477: PUSH
4478: LD_STRING );
4480: STR
4481: PPUSH
4482: CALL_OW 559
// end ;
4486: END
// every 0 0$1 do
4487: GO 4489
4489: DISABLE
// begin globalGameSaveCounter := 0 ;
4490: LD_ADDR_EXP 7
4494: PUSH
4495: LD_INT 0
4497: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4498: LD_STRING setGameSaveCounter(0)
4500: PPUSH
4501: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4505: LD_STRING initStreamRollete();
4507: PPUSH
4508: CALL_OW 559
// InitStreamMode ;
4512: CALL 5838 0 0
// DefineStreamItems ( false ) ;
4516: LD_INT 0
4518: PPUSH
4519: CALL 6302 0 1
// end ;
4523: END
// export function SOS_MapStart ( ) ; begin
4524: LD_INT 0
4526: PPUSH
// if streamModeActive then
4527: LD_EXP 8
4531: IFFALSE 4540
// DefineStreamItems ( true ) ;
4533: LD_INT 1
4535: PPUSH
4536: CALL 6302 0 1
// UpdateLuaVariables ( ) ;
4540: CALL 4557 0 0
// UpdateFactoryWaypoints ( ) ;
4544: CALL 19171 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4548: CALL 19428 0 0
// end ;
4552: LD_VAR 0 1
4556: RET
// function UpdateLuaVariables ( ) ; begin
4557: LD_INT 0
4559: PPUSH
// if globalGameSaveCounter then
4560: LD_EXP 7
4564: IFFALSE 4598
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4566: LD_ADDR_EXP 7
4570: PUSH
4571: LD_EXP 7
4575: PPUSH
4576: CALL 64058 0 1
4580: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4581: LD_STRING setGameSaveCounter(
4583: PUSH
4584: LD_EXP 7
4588: STR
4589: PUSH
4590: LD_STRING )
4592: STR
4593: PPUSH
4594: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4598: LD_STRING setGameDifficulty(
4600: PUSH
4601: LD_OWVAR 67
4605: STR
4606: PUSH
4607: LD_STRING )
4609: STR
4610: PPUSH
4611: CALL_OW 559
// end ;
4615: LD_VAR 0 1
4619: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4620: LD_INT 0
4622: PPUSH
// if p2 = stream_mode then
4623: LD_VAR 0 2
4627: PUSH
4628: LD_INT 100
4630: EQUAL
4631: IFFALSE 5634
// begin if not StreamModeActive then
4633: LD_EXP 8
4637: NOT
4638: IFFALSE 4648
// StreamModeActive := true ;
4640: LD_ADDR_EXP 8
4644: PUSH
4645: LD_INT 1
4647: ST_TO_ADDR
// if p3 = 0 then
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 0
4655: EQUAL
4656: IFFALSE 4662
// InitStreamMode ;
4658: CALL 5838 0 0
// if p3 = 1 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 1
4669: EQUAL
4670: IFFALSE 4680
// sRocket := true ;
4672: LD_ADDR_EXP 13
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 2 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 2
4687: EQUAL
4688: IFFALSE 4698
// sSpeed := true ;
4690: LD_ADDR_EXP 12
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 3 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 3
4705: EQUAL
4706: IFFALSE 4716
// sEngine := true ;
4708: LD_ADDR_EXP 14
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 4 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 4
4723: EQUAL
4724: IFFALSE 4734
// sSpec := true ;
4726: LD_ADDR_EXP 11
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 5 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 5
4741: EQUAL
4742: IFFALSE 4752
// sLevel := true ;
4744: LD_ADDR_EXP 15
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 6 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 6
4759: EQUAL
4760: IFFALSE 4770
// sArmoury := true ;
4762: LD_ADDR_EXP 16
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 7 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 7
4777: EQUAL
4778: IFFALSE 4788
// sRadar := true ;
4780: LD_ADDR_EXP 17
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 8 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 8
4795: EQUAL
4796: IFFALSE 4806
// sBunker := true ;
4798: LD_ADDR_EXP 18
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 9 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 9
4813: EQUAL
4814: IFFALSE 4824
// sHack := true ;
4816: LD_ADDR_EXP 19
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 10 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 10
4831: EQUAL
4832: IFFALSE 4842
// sFire := true ;
4834: LD_ADDR_EXP 20
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 11 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 11
4849: EQUAL
4850: IFFALSE 4860
// sRefresh := true ;
4852: LD_ADDR_EXP 21
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 12 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 12
4867: EQUAL
4868: IFFALSE 4878
// sExp := true ;
4870: LD_ADDR_EXP 22
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 13 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 13
4885: EQUAL
4886: IFFALSE 4896
// sDepot := true ;
4888: LD_ADDR_EXP 23
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 14 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 14
4903: EQUAL
4904: IFFALSE 4914
// sFlag := true ;
4906: LD_ADDR_EXP 24
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 15 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 15
4921: EQUAL
4922: IFFALSE 4932
// sKamikadze := true ;
4924: LD_ADDR_EXP 32
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 16 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 16
4939: EQUAL
4940: IFFALSE 4950
// sTroll := true ;
4942: LD_ADDR_EXP 33
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 17 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 17
4957: EQUAL
4958: IFFALSE 4968
// sSlow := true ;
4960: LD_ADDR_EXP 34
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 18 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 18
4975: EQUAL
4976: IFFALSE 4986
// sLack := true ;
4978: LD_ADDR_EXP 35
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 19 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 19
4993: EQUAL
4994: IFFALSE 5004
// sTank := true ;
4996: LD_ADDR_EXP 37
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 20 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 20
5011: EQUAL
5012: IFFALSE 5022
// sRemote := true ;
5014: LD_ADDR_EXP 38
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 21 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 21
5029: EQUAL
5030: IFFALSE 5040
// sPowell := true ;
5032: LD_ADDR_EXP 39
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 22 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 22
5047: EQUAL
5048: IFFALSE 5058
// sTeleport := true ;
5050: LD_ADDR_EXP 42
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 23 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 23
5065: EQUAL
5066: IFFALSE 5076
// sOilTower := true ;
5068: LD_ADDR_EXP 44
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 24 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 24
5083: EQUAL
5084: IFFALSE 5094
// sShovel := true ;
5086: LD_ADDR_EXP 45
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 25 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 25
5101: EQUAL
5102: IFFALSE 5112
// sSheik := true ;
5104: LD_ADDR_EXP 46
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 26 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 26
5119: EQUAL
5120: IFFALSE 5130
// sEarthquake := true ;
5122: LD_ADDR_EXP 48
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 27 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 27
5137: EQUAL
5138: IFFALSE 5148
// sAI := true ;
5140: LD_ADDR_EXP 49
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 28 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 28
5155: EQUAL
5156: IFFALSE 5166
// sCargo := true ;
5158: LD_ADDR_EXP 52
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 29 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 29
5173: EQUAL
5174: IFFALSE 5184
// sDLaser := true ;
5176: LD_ADDR_EXP 53
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 30 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 30
5191: EQUAL
5192: IFFALSE 5202
// sExchange := true ;
5194: LD_ADDR_EXP 54
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 31 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 31
5209: EQUAL
5210: IFFALSE 5220
// sFac := true ;
5212: LD_ADDR_EXP 55
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 32 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 32
5227: EQUAL
5228: IFFALSE 5238
// sPower := true ;
5230: LD_ADDR_EXP 56
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 33 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 33
5245: EQUAL
5246: IFFALSE 5256
// sRandom := true ;
5248: LD_ADDR_EXP 57
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 34 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 34
5263: EQUAL
5264: IFFALSE 5274
// sShield := true ;
5266: LD_ADDR_EXP 58
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 35 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 35
5281: EQUAL
5282: IFFALSE 5292
// sTime := true ;
5284: LD_ADDR_EXP 59
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 36 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 36
5299: EQUAL
5300: IFFALSE 5310
// sTools := true ;
5302: LD_ADDR_EXP 60
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 101 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 101
5317: EQUAL
5318: IFFALSE 5328
// sSold := true ;
5320: LD_ADDR_EXP 25
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 102 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 102
5335: EQUAL
5336: IFFALSE 5346
// sDiff := true ;
5338: LD_ADDR_EXP 26
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 103 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 103
5353: EQUAL
5354: IFFALSE 5364
// sFog := true ;
5356: LD_ADDR_EXP 29
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 104 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 104
5371: EQUAL
5372: IFFALSE 5382
// sReset := true ;
5374: LD_ADDR_EXP 30
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 105 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 105
5389: EQUAL
5390: IFFALSE 5400
// sSun := true ;
5392: LD_ADDR_EXP 31
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 106 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 106
5407: EQUAL
5408: IFFALSE 5418
// sTiger := true ;
5410: LD_ADDR_EXP 27
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 107 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 107
5425: EQUAL
5426: IFFALSE 5436
// sBomb := true ;
5428: LD_ADDR_EXP 28
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 108 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 108
5443: EQUAL
5444: IFFALSE 5454
// sWound := true ;
5446: LD_ADDR_EXP 36
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 109 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 109
5461: EQUAL
5462: IFFALSE 5472
// sBetray := true ;
5464: LD_ADDR_EXP 40
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 110 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 110
5479: EQUAL
5480: IFFALSE 5490
// sContamin := true ;
5482: LD_ADDR_EXP 41
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 111 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 111
5497: EQUAL
5498: IFFALSE 5508
// sOil := true ;
5500: LD_ADDR_EXP 43
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 112 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 112
5515: EQUAL
5516: IFFALSE 5526
// sStu := true ;
5518: LD_ADDR_EXP 47
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 113 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 113
5533: EQUAL
5534: IFFALSE 5544
// sBazooka := true ;
5536: LD_ADDR_EXP 50
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 114 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 114
5551: EQUAL
5552: IFFALSE 5562
// sMortar := true ;
5554: LD_ADDR_EXP 51
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 115 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 115
5569: EQUAL
5570: IFFALSE 5580
// sRanger := true ;
5572: LD_ADDR_EXP 61
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 116 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 116
5587: EQUAL
5588: IFFALSE 5598
// sComputer := true ;
5590: LD_ADDR_EXP 62
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 117 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 117
5605: EQUAL
5606: IFFALSE 5616
// s30 := true ;
5608: LD_ADDR_EXP 63
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 118 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 118
5623: EQUAL
5624: IFFALSE 5634
// s60 := true ;
5626: LD_ADDR_EXP 64
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// end ; if p2 = hack_mode then
5634: LD_VAR 0 2
5638: PUSH
5639: LD_INT 101
5641: EQUAL
5642: IFFALSE 5770
// begin case p3 of 1 :
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 1
5651: DOUBLE
5652: EQUAL
5653: IFTRUE 5657
5655: GO 5664
5657: POP
// hHackUnlimitedResources ; 2 :
5658: CALL 17917 0 0
5662: GO 5770
5664: LD_INT 2
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5672
5670: GO 5679
5672: POP
// hHackSetLevel10 ; 3 :
5673: CALL 18050 0 0
5677: GO 5770
5679: LD_INT 3
5681: DOUBLE
5682: EQUAL
5683: IFTRUE 5687
5685: GO 5694
5687: POP
// hHackSetLevel10YourUnits ; 4 :
5688: CALL 18135 0 0
5692: GO 5770
5694: LD_INT 4
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5709
5702: POP
// hHackInvincible ; 5 :
5703: CALL 18583 0 0
5707: GO 5770
5709: LD_INT 5
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5724
5717: POP
// hHackInvisible ; 6 :
5718: CALL 18694 0 0
5722: GO 5770
5724: LD_INT 6
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5739
5732: POP
// hHackChangeYourSide ; 7 :
5733: CALL 18751 0 0
5737: GO 5770
5739: LD_INT 7
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5754
5747: POP
// hHackChangeUnitSide ; 8 :
5748: CALL 18793 0 0
5752: GO 5770
5754: LD_INT 8
5756: DOUBLE
5757: EQUAL
5758: IFTRUE 5762
5760: GO 5769
5762: POP
// hHackFog ; end ;
5763: CALL 18894 0 0
5767: GO 5770
5769: POP
// end ; if p2 = game_save_mode then
5770: LD_VAR 0 2
5774: PUSH
5775: LD_INT 102
5777: EQUAL
5778: IFFALSE 5833
// begin if p3 = 1 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 1
5787: EQUAL
5788: IFFALSE 5800
// globalGameSaveCounter := p4 ;
5790: LD_ADDR_EXP 7
5794: PUSH
5795: LD_VAR 0 4
5799: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5800: LD_VAR 0 3
5804: PUSH
5805: LD_INT 2
5807: EQUAL
5808: PUSH
5809: LD_EXP 7
5813: AND
5814: IFFALSE 5833
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5816: LD_STRING setGameSaveCounter(
5818: PUSH
5819: LD_EXP 7
5823: STR
5824: PUSH
5825: LD_STRING )
5827: STR
5828: PPUSH
5829: CALL_OW 559
// end ; end ;
5833: LD_VAR 0 7
5837: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5838: LD_INT 0
5840: PPUSH
// streamModeActive := false ;
5841: LD_ADDR_EXP 8
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// normalCounter := 36 ;
5849: LD_ADDR_EXP 9
5853: PUSH
5854: LD_INT 36
5856: ST_TO_ADDR
// hardcoreCounter := 18 ;
5857: LD_ADDR_EXP 10
5861: PUSH
5862: LD_INT 18
5864: ST_TO_ADDR
// sRocket := false ;
5865: LD_ADDR_EXP 13
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// sSpeed := false ;
5873: LD_ADDR_EXP 12
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// sEngine := false ;
5881: LD_ADDR_EXP 14
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// sSpec := false ;
5889: LD_ADDR_EXP 11
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// sLevel := false ;
5897: LD_ADDR_EXP 15
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
// sArmoury := false ;
5905: LD_ADDR_EXP 16
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// sRadar := false ;
5913: LD_ADDR_EXP 17
5917: PUSH
5918: LD_INT 0
5920: ST_TO_ADDR
// sBunker := false ;
5921: LD_ADDR_EXP 18
5925: PUSH
5926: LD_INT 0
5928: ST_TO_ADDR
// sHack := false ;
5929: LD_ADDR_EXP 19
5933: PUSH
5934: LD_INT 0
5936: ST_TO_ADDR
// sFire := false ;
5937: LD_ADDR_EXP 20
5941: PUSH
5942: LD_INT 0
5944: ST_TO_ADDR
// sRefresh := false ;
5945: LD_ADDR_EXP 21
5949: PUSH
5950: LD_INT 0
5952: ST_TO_ADDR
// sExp := false ;
5953: LD_ADDR_EXP 22
5957: PUSH
5958: LD_INT 0
5960: ST_TO_ADDR
// sDepot := false ;
5961: LD_ADDR_EXP 23
5965: PUSH
5966: LD_INT 0
5968: ST_TO_ADDR
// sFlag := false ;
5969: LD_ADDR_EXP 24
5973: PUSH
5974: LD_INT 0
5976: ST_TO_ADDR
// sKamikadze := false ;
5977: LD_ADDR_EXP 32
5981: PUSH
5982: LD_INT 0
5984: ST_TO_ADDR
// sTroll := false ;
5985: LD_ADDR_EXP 33
5989: PUSH
5990: LD_INT 0
5992: ST_TO_ADDR
// sSlow := false ;
5993: LD_ADDR_EXP 34
5997: PUSH
5998: LD_INT 0
6000: ST_TO_ADDR
// sLack := false ;
6001: LD_ADDR_EXP 35
6005: PUSH
6006: LD_INT 0
6008: ST_TO_ADDR
// sTank := false ;
6009: LD_ADDR_EXP 37
6013: PUSH
6014: LD_INT 0
6016: ST_TO_ADDR
// sRemote := false ;
6017: LD_ADDR_EXP 38
6021: PUSH
6022: LD_INT 0
6024: ST_TO_ADDR
// sPowell := false ;
6025: LD_ADDR_EXP 39
6029: PUSH
6030: LD_INT 0
6032: ST_TO_ADDR
// sTeleport := false ;
6033: LD_ADDR_EXP 42
6037: PUSH
6038: LD_INT 0
6040: ST_TO_ADDR
// sOilTower := false ;
6041: LD_ADDR_EXP 44
6045: PUSH
6046: LD_INT 0
6048: ST_TO_ADDR
// sShovel := false ;
6049: LD_ADDR_EXP 45
6053: PUSH
6054: LD_INT 0
6056: ST_TO_ADDR
// sSheik := false ;
6057: LD_ADDR_EXP 46
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// sEarthquake := false ;
6065: LD_ADDR_EXP 48
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// sAI := false ;
6073: LD_ADDR_EXP 49
6077: PUSH
6078: LD_INT 0
6080: ST_TO_ADDR
// sCargo := false ;
6081: LD_ADDR_EXP 52
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// sDLaser := false ;
6089: LD_ADDR_EXP 53
6093: PUSH
6094: LD_INT 0
6096: ST_TO_ADDR
// sExchange := false ;
6097: LD_ADDR_EXP 54
6101: PUSH
6102: LD_INT 0
6104: ST_TO_ADDR
// sFac := false ;
6105: LD_ADDR_EXP 55
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sPower := false ;
6113: LD_ADDR_EXP 56
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sRandom := false ;
6121: LD_ADDR_EXP 57
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sShield := false ;
6129: LD_ADDR_EXP 58
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sTime := false ;
6137: LD_ADDR_EXP 59
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sTools := false ;
6145: LD_ADDR_EXP 60
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sSold := false ;
6153: LD_ADDR_EXP 25
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sDiff := false ;
6161: LD_ADDR_EXP 26
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sFog := false ;
6169: LD_ADDR_EXP 29
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sReset := false ;
6177: LD_ADDR_EXP 30
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sSun := false ;
6185: LD_ADDR_EXP 31
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sTiger := false ;
6193: LD_ADDR_EXP 27
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sBomb := false ;
6201: LD_ADDR_EXP 28
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sWound := false ;
6209: LD_ADDR_EXP 36
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sBetray := false ;
6217: LD_ADDR_EXP 40
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sContamin := false ;
6225: LD_ADDR_EXP 41
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sOil := false ;
6233: LD_ADDR_EXP 43
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sStu := false ;
6241: LD_ADDR_EXP 47
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sBazooka := false ;
6249: LD_ADDR_EXP 50
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sMortar := false ;
6257: LD_ADDR_EXP 51
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sRanger := false ;
6265: LD_ADDR_EXP 61
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sComputer := false ;
6273: LD_ADDR_EXP 62
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// s30 := false ;
6281: LD_ADDR_EXP 63
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// s60 := false ;
6289: LD_ADDR_EXP 64
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// end ;
6297: LD_VAR 0 1
6301: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6302: LD_INT 0
6304: PPUSH
6305: PPUSH
6306: PPUSH
6307: PPUSH
6308: PPUSH
6309: PPUSH
6310: PPUSH
// result := [ ] ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: EMPTY
6317: ST_TO_ADDR
// if campaign_id = 1 then
6318: LD_OWVAR 69
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 9492
// begin case mission_number of 1 :
6328: LD_OWVAR 70
6332: PUSH
6333: LD_INT 1
6335: DOUBLE
6336: EQUAL
6337: IFTRUE 6341
6339: GO 6417
6341: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: LD_INT 11
6355: PUSH
6356: LD_INT 12
6358: PUSH
6359: LD_INT 15
6361: PUSH
6362: LD_INT 16
6364: PUSH
6365: LD_INT 22
6367: PUSH
6368: LD_INT 23
6370: PUSH
6371: LD_INT 26
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 101
6387: PUSH
6388: LD_INT 102
6390: PUSH
6391: LD_INT 106
6393: PUSH
6394: LD_INT 116
6396: PUSH
6397: LD_INT 117
6399: PUSH
6400: LD_INT 118
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 9490
6417: LD_INT 2
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6509
6425: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 11
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: LD_INT 15
6445: PUSH
6446: LD_INT 16
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 23
6454: PUSH
6455: LD_INT 26
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 101
6471: PUSH
6472: LD_INT 102
6474: PUSH
6475: LD_INT 105
6477: PUSH
6478: LD_INT 106
6480: PUSH
6481: LD_INT 108
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: ST_TO_ADDR
6507: GO 9490
6509: LD_INT 3
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6605
6517: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: LD_INT 5
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: LD_INT 15
6540: PUSH
6541: LD_INT 16
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 26
6549: PUSH
6550: LD_INT 36
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 101
6567: PUSH
6568: LD_INT 102
6570: PUSH
6571: LD_INT 105
6573: PUSH
6574: LD_INT 106
6576: PUSH
6577: LD_INT 108
6579: PUSH
6580: LD_INT 116
6582: PUSH
6583: LD_INT 117
6585: PUSH
6586: LD_INT 118
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 9490
6605: LD_INT 4
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6709
6613: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 4
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: LD_INT 8
6630: PUSH
6631: LD_INT 11
6633: PUSH
6634: LD_INT 12
6636: PUSH
6637: LD_INT 15
6639: PUSH
6640: LD_INT 16
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 23
6648: PUSH
6649: LD_INT 26
6651: PUSH
6652: LD_INT 36
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 101
6671: PUSH
6672: LD_INT 102
6674: PUSH
6675: LD_INT 105
6677: PUSH
6678: LD_INT 106
6680: PUSH
6681: LD_INT 108
6683: PUSH
6684: LD_INT 116
6686: PUSH
6687: LD_INT 117
6689: PUSH
6690: LD_INT 118
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: ST_TO_ADDR
6707: GO 9490
6709: LD_INT 5
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6829
6717: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_INT 2
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: LD_INT 5
6731: PUSH
6732: LD_INT 6
6734: PUSH
6735: LD_INT 8
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 15
6746: PUSH
6747: LD_INT 16
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 23
6755: PUSH
6756: LD_INT 25
6758: PUSH
6759: LD_INT 26
6761: PUSH
6762: LD_INT 36
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 101
6783: PUSH
6784: LD_INT 102
6786: PUSH
6787: LD_INT 105
6789: PUSH
6790: LD_INT 106
6792: PUSH
6793: LD_INT 108
6795: PUSH
6796: LD_INT 109
6798: PUSH
6799: LD_INT 112
6801: PUSH
6802: LD_INT 116
6804: PUSH
6805: LD_INT 117
6807: PUSH
6808: LD_INT 118
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: ST_TO_ADDR
6827: GO 9490
6829: LD_INT 6
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6969
6837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 2
6845: PUSH
6846: LD_INT 4
6848: PUSH
6849: LD_INT 5
6851: PUSH
6852: LD_INT 6
6854: PUSH
6855: LD_INT 8
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 15
6866: PUSH
6867: LD_INT 16
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 22
6878: PUSH
6879: LD_INT 23
6881: PUSH
6882: LD_INT 25
6884: PUSH
6885: LD_INT 26
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 31
6893: PUSH
6894: LD_INT 32
6896: PUSH
6897: LD_INT 36
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 101
6923: PUSH
6924: LD_INT 102
6926: PUSH
6927: LD_INT 105
6929: PUSH
6930: LD_INT 106
6932: PUSH
6933: LD_INT 108
6935: PUSH
6936: LD_INT 109
6938: PUSH
6939: LD_INT 112
6941: PUSH
6942: LD_INT 116
6944: PUSH
6945: LD_INT 117
6947: PUSH
6948: LD_INT 118
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: ST_TO_ADDR
6967: GO 9490
6969: LD_INT 7
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7089
6977: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6978: LD_ADDR_VAR 0 2
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: LD_INT 4
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: LD_INT 7
6994: PUSH
6995: LD_INT 11
6997: PUSH
6998: LD_INT 12
7000: PUSH
7001: LD_INT 15
7003: PUSH
7004: LD_INT 16
7006: PUSH
7007: LD_INT 20
7009: PUSH
7010: LD_INT 21
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_INT 23
7018: PUSH
7019: LD_INT 25
7021: PUSH
7022: LD_INT 26
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 101
7043: PUSH
7044: LD_INT 102
7046: PUSH
7047: LD_INT 103
7049: PUSH
7050: LD_INT 105
7052: PUSH
7053: LD_INT 106
7055: PUSH
7056: LD_INT 108
7058: PUSH
7059: LD_INT 112
7061: PUSH
7062: LD_INT 116
7064: PUSH
7065: LD_INT 117
7067: PUSH
7068: LD_INT 118
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 9490
7089: LD_INT 8
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7237
7097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7098: LD_ADDR_VAR 0 2
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 4
7108: PUSH
7109: LD_INT 5
7111: PUSH
7112: LD_INT 6
7114: PUSH
7115: LD_INT 7
7117: PUSH
7118: LD_INT 8
7120: PUSH
7121: LD_INT 11
7123: PUSH
7124: LD_INT 12
7126: PUSH
7127: LD_INT 15
7129: PUSH
7130: LD_INT 16
7132: PUSH
7133: LD_INT 20
7135: PUSH
7136: LD_INT 21
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 23
7144: PUSH
7145: LD_INT 25
7147: PUSH
7148: LD_INT 26
7150: PUSH
7151: LD_INT 30
7153: PUSH
7154: LD_INT 31
7156: PUSH
7157: LD_INT 32
7159: PUSH
7160: LD_INT 36
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 101
7187: PUSH
7188: LD_INT 102
7190: PUSH
7191: LD_INT 103
7193: PUSH
7194: LD_INT 105
7196: PUSH
7197: LD_INT 106
7199: PUSH
7200: LD_INT 108
7202: PUSH
7203: LD_INT 109
7205: PUSH
7206: LD_INT 112
7208: PUSH
7209: LD_INT 116
7211: PUSH
7212: LD_INT 117
7214: PUSH
7215: LD_INT 118
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 9490
7237: LD_INT 9
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7393
7245: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7246: LD_ADDR_VAR 0 2
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 4
7256: PUSH
7257: LD_INT 5
7259: PUSH
7260: LD_INT 6
7262: PUSH
7263: LD_INT 7
7265: PUSH
7266: LD_INT 8
7268: PUSH
7269: LD_INT 11
7271: PUSH
7272: LD_INT 12
7274: PUSH
7275: LD_INT 15
7277: PUSH
7278: LD_INT 16
7280: PUSH
7281: LD_INT 20
7283: PUSH
7284: LD_INT 21
7286: PUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 23
7292: PUSH
7293: LD_INT 25
7295: PUSH
7296: LD_INT 26
7298: PUSH
7299: LD_INT 28
7301: PUSH
7302: LD_INT 30
7304: PUSH
7305: LD_INT 31
7307: PUSH
7308: LD_INT 32
7310: PUSH
7311: LD_INT 36
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 101
7339: PUSH
7340: LD_INT 102
7342: PUSH
7343: LD_INT 103
7345: PUSH
7346: LD_INT 105
7348: PUSH
7349: LD_INT 106
7351: PUSH
7352: LD_INT 108
7354: PUSH
7355: LD_INT 109
7357: PUSH
7358: LD_INT 112
7360: PUSH
7361: LD_INT 114
7363: PUSH
7364: LD_INT 116
7366: PUSH
7367: LD_INT 117
7369: PUSH
7370: LD_INT 118
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: ST_TO_ADDR
7391: GO 9490
7393: LD_INT 10
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7597
7401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7402: LD_ADDR_VAR 0 2
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 4
7412: PUSH
7413: LD_INT 5
7415: PUSH
7416: LD_INT 6
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: LD_INT 8
7424: PUSH
7425: LD_INT 9
7427: PUSH
7428: LD_INT 10
7430: PUSH
7431: LD_INT 11
7433: PUSH
7434: LD_INT 12
7436: PUSH
7437: LD_INT 13
7439: PUSH
7440: LD_INT 14
7442: PUSH
7443: LD_INT 15
7445: PUSH
7446: LD_INT 16
7448: PUSH
7449: LD_INT 17
7451: PUSH
7452: LD_INT 18
7454: PUSH
7455: LD_INT 19
7457: PUSH
7458: LD_INT 20
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 22
7466: PUSH
7467: LD_INT 23
7469: PUSH
7470: LD_INT 24
7472: PUSH
7473: LD_INT 25
7475: PUSH
7476: LD_INT 26
7478: PUSH
7479: LD_INT 28
7481: PUSH
7482: LD_INT 30
7484: PUSH
7485: LD_INT 31
7487: PUSH
7488: LD_INT 32
7490: PUSH
7491: LD_INT 36
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 101
7527: PUSH
7528: LD_INT 102
7530: PUSH
7531: LD_INT 103
7533: PUSH
7534: LD_INT 104
7536: PUSH
7537: LD_INT 105
7539: PUSH
7540: LD_INT 106
7542: PUSH
7543: LD_INT 107
7545: PUSH
7546: LD_INT 108
7548: PUSH
7549: LD_INT 109
7551: PUSH
7552: LD_INT 110
7554: PUSH
7555: LD_INT 111
7557: PUSH
7558: LD_INT 112
7560: PUSH
7561: LD_INT 114
7563: PUSH
7564: LD_INT 116
7566: PUSH
7567: LD_INT 117
7569: PUSH
7570: LD_INT 118
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: ST_TO_ADDR
7595: GO 9490
7597: LD_INT 11
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7809
7605: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7606: LD_ADDR_VAR 0 2
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 4
7619: PUSH
7620: LD_INT 5
7622: PUSH
7623: LD_INT 6
7625: PUSH
7626: LD_INT 7
7628: PUSH
7629: LD_INT 8
7631: PUSH
7632: LD_INT 9
7634: PUSH
7635: LD_INT 10
7637: PUSH
7638: LD_INT 11
7640: PUSH
7641: LD_INT 12
7643: PUSH
7644: LD_INT 13
7646: PUSH
7647: LD_INT 14
7649: PUSH
7650: LD_INT 15
7652: PUSH
7653: LD_INT 16
7655: PUSH
7656: LD_INT 17
7658: PUSH
7659: LD_INT 18
7661: PUSH
7662: LD_INT 19
7664: PUSH
7665: LD_INT 20
7667: PUSH
7668: LD_INT 21
7670: PUSH
7671: LD_INT 22
7673: PUSH
7674: LD_INT 23
7676: PUSH
7677: LD_INT 24
7679: PUSH
7680: LD_INT 25
7682: PUSH
7683: LD_INT 26
7685: PUSH
7686: LD_INT 28
7688: PUSH
7689: LD_INT 30
7691: PUSH
7692: LD_INT 31
7694: PUSH
7695: LD_INT 32
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 36
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 101
7739: PUSH
7740: LD_INT 102
7742: PUSH
7743: LD_INT 103
7745: PUSH
7746: LD_INT 104
7748: PUSH
7749: LD_INT 105
7751: PUSH
7752: LD_INT 106
7754: PUSH
7755: LD_INT 107
7757: PUSH
7758: LD_INT 108
7760: PUSH
7761: LD_INT 109
7763: PUSH
7764: LD_INT 110
7766: PUSH
7767: LD_INT 111
7769: PUSH
7770: LD_INT 112
7772: PUSH
7773: LD_INT 114
7775: PUSH
7776: LD_INT 116
7778: PUSH
7779: LD_INT 117
7781: PUSH
7782: LD_INT 118
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: ST_TO_ADDR
7807: GO 9490
7809: LD_INT 12
7811: DOUBLE
7812: EQUAL
7813: IFTRUE 7817
7815: GO 8037
7817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7818: LD_ADDR_VAR 0 2
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 4
7834: PUSH
7835: LD_INT 5
7837: PUSH
7838: LD_INT 6
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: LD_INT 9
7849: PUSH
7850: LD_INT 10
7852: PUSH
7853: LD_INT 11
7855: PUSH
7856: LD_INT 12
7858: PUSH
7859: LD_INT 13
7861: PUSH
7862: LD_INT 14
7864: PUSH
7865: LD_INT 15
7867: PUSH
7868: LD_INT 16
7870: PUSH
7871: LD_INT 17
7873: PUSH
7874: LD_INT 18
7876: PUSH
7877: LD_INT 19
7879: PUSH
7880: LD_INT 20
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 24
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 26
7900: PUSH
7901: LD_INT 27
7903: PUSH
7904: LD_INT 28
7906: PUSH
7907: LD_INT 30
7909: PUSH
7910: LD_INT 31
7912: PUSH
7913: LD_INT 32
7915: PUSH
7916: LD_INT 33
7918: PUSH
7919: LD_INT 34
7921: PUSH
7922: LD_INT 36
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 101
7963: PUSH
7964: LD_INT 102
7966: PUSH
7967: LD_INT 103
7969: PUSH
7970: LD_INT 104
7972: PUSH
7973: LD_INT 105
7975: PUSH
7976: LD_INT 106
7978: PUSH
7979: LD_INT 107
7981: PUSH
7982: LD_INT 108
7984: PUSH
7985: LD_INT 109
7987: PUSH
7988: LD_INT 110
7990: PUSH
7991: LD_INT 111
7993: PUSH
7994: LD_INT 112
7996: PUSH
7997: LD_INT 113
7999: PUSH
8000: LD_INT 114
8002: PUSH
8003: LD_INT 116
8005: PUSH
8006: LD_INT 117
8008: PUSH
8009: LD_INT 118
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: ST_TO_ADDR
8035: GO 9490
8037: LD_INT 13
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8253
8045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8046: LD_ADDR_VAR 0 2
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: LD_INT 4
8062: PUSH
8063: LD_INT 5
8065: PUSH
8066: LD_INT 8
8068: PUSH
8069: LD_INT 9
8071: PUSH
8072: LD_INT 10
8074: PUSH
8075: LD_INT 11
8077: PUSH
8078: LD_INT 12
8080: PUSH
8081: LD_INT 14
8083: PUSH
8084: LD_INT 15
8086: PUSH
8087: LD_INT 16
8089: PUSH
8090: LD_INT 17
8092: PUSH
8093: LD_INT 18
8095: PUSH
8096: LD_INT 19
8098: PUSH
8099: LD_INT 20
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 22
8107: PUSH
8108: LD_INT 23
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 25
8116: PUSH
8117: LD_INT 26
8119: PUSH
8120: LD_INT 27
8122: PUSH
8123: LD_INT 28
8125: PUSH
8126: LD_INT 30
8128: PUSH
8129: LD_INT 31
8131: PUSH
8132: LD_INT 32
8134: PUSH
8135: LD_INT 33
8137: PUSH
8138: LD_INT 34
8140: PUSH
8141: LD_INT 36
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 101
8179: PUSH
8180: LD_INT 102
8182: PUSH
8183: LD_INT 103
8185: PUSH
8186: LD_INT 104
8188: PUSH
8189: LD_INT 105
8191: PUSH
8192: LD_INT 106
8194: PUSH
8195: LD_INT 107
8197: PUSH
8198: LD_INT 108
8200: PUSH
8201: LD_INT 109
8203: PUSH
8204: LD_INT 110
8206: PUSH
8207: LD_INT 111
8209: PUSH
8210: LD_INT 112
8212: PUSH
8213: LD_INT 113
8215: PUSH
8216: LD_INT 114
8218: PUSH
8219: LD_INT 116
8221: PUSH
8222: LD_INT 117
8224: PUSH
8225: LD_INT 118
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: ST_TO_ADDR
8251: GO 9490
8253: LD_INT 14
8255: DOUBLE
8256: EQUAL
8257: IFTRUE 8261
8259: GO 8485
8261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8262: LD_ADDR_VAR 0 2
8266: PUSH
8267: LD_INT 1
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: LD_INT 3
8275: PUSH
8276: LD_INT 4
8278: PUSH
8279: LD_INT 5
8281: PUSH
8282: LD_INT 6
8284: PUSH
8285: LD_INT 7
8287: PUSH
8288: LD_INT 8
8290: PUSH
8291: LD_INT 9
8293: PUSH
8294: LD_INT 10
8296: PUSH
8297: LD_INT 11
8299: PUSH
8300: LD_INT 12
8302: PUSH
8303: LD_INT 13
8305: PUSH
8306: LD_INT 14
8308: PUSH
8309: LD_INT 15
8311: PUSH
8312: LD_INT 16
8314: PUSH
8315: LD_INT 17
8317: PUSH
8318: LD_INT 18
8320: PUSH
8321: LD_INT 19
8323: PUSH
8324: LD_INT 20
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 23
8335: PUSH
8336: LD_INT 24
8338: PUSH
8339: LD_INT 25
8341: PUSH
8342: LD_INT 26
8344: PUSH
8345: LD_INT 27
8347: PUSH
8348: LD_INT 28
8350: PUSH
8351: LD_INT 29
8353: PUSH
8354: LD_INT 30
8356: PUSH
8357: LD_INT 31
8359: PUSH
8360: LD_INT 32
8362: PUSH
8363: LD_INT 33
8365: PUSH
8366: LD_INT 34
8368: PUSH
8369: LD_INT 36
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 101
8411: PUSH
8412: LD_INT 102
8414: PUSH
8415: LD_INT 103
8417: PUSH
8418: LD_INT 104
8420: PUSH
8421: LD_INT 105
8423: PUSH
8424: LD_INT 106
8426: PUSH
8427: LD_INT 107
8429: PUSH
8430: LD_INT 108
8432: PUSH
8433: LD_INT 109
8435: PUSH
8436: LD_INT 110
8438: PUSH
8439: LD_INT 111
8441: PUSH
8442: LD_INT 112
8444: PUSH
8445: LD_INT 113
8447: PUSH
8448: LD_INT 114
8450: PUSH
8451: LD_INT 116
8453: PUSH
8454: LD_INT 117
8456: PUSH
8457: LD_INT 118
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: ST_TO_ADDR
8483: GO 9490
8485: LD_INT 15
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8717
8493: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8494: LD_ADDR_VAR 0 2
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: LD_INT 3
8507: PUSH
8508: LD_INT 4
8510: PUSH
8511: LD_INT 5
8513: PUSH
8514: LD_INT 6
8516: PUSH
8517: LD_INT 7
8519: PUSH
8520: LD_INT 8
8522: PUSH
8523: LD_INT 9
8525: PUSH
8526: LD_INT 10
8528: PUSH
8529: LD_INT 11
8531: PUSH
8532: LD_INT 12
8534: PUSH
8535: LD_INT 13
8537: PUSH
8538: LD_INT 14
8540: PUSH
8541: LD_INT 15
8543: PUSH
8544: LD_INT 16
8546: PUSH
8547: LD_INT 17
8549: PUSH
8550: LD_INT 18
8552: PUSH
8553: LD_INT 19
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 24
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 26
8576: PUSH
8577: LD_INT 27
8579: PUSH
8580: LD_INT 28
8582: PUSH
8583: LD_INT 29
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: LD_INT 32
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 34
8600: PUSH
8601: LD_INT 36
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 101
8643: PUSH
8644: LD_INT 102
8646: PUSH
8647: LD_INT 103
8649: PUSH
8650: LD_INT 104
8652: PUSH
8653: LD_INT 105
8655: PUSH
8656: LD_INT 106
8658: PUSH
8659: LD_INT 107
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: LD_INT 109
8667: PUSH
8668: LD_INT 110
8670: PUSH
8671: LD_INT 111
8673: PUSH
8674: LD_INT 112
8676: PUSH
8677: LD_INT 113
8679: PUSH
8680: LD_INT 114
8682: PUSH
8683: LD_INT 116
8685: PUSH
8686: LD_INT 117
8688: PUSH
8689: LD_INT 118
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: ST_TO_ADDR
8715: GO 9490
8717: LD_INT 16
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8861
8725: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 11
8745: PUSH
8746: LD_INT 12
8748: PUSH
8749: LD_INT 15
8751: PUSH
8752: LD_INT 16
8754: PUSH
8755: LD_INT 20
8757: PUSH
8758: LD_INT 21
8760: PUSH
8761: LD_INT 22
8763: PUSH
8764: LD_INT 23
8766: PUSH
8767: LD_INT 25
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 30
8775: PUSH
8776: LD_INT 31
8778: PUSH
8779: LD_INT 32
8781: PUSH
8782: LD_INT 33
8784: PUSH
8785: LD_INT 34
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 101
8811: PUSH
8812: LD_INT 102
8814: PUSH
8815: LD_INT 103
8817: PUSH
8818: LD_INT 106
8820: PUSH
8821: LD_INT 108
8823: PUSH
8824: LD_INT 112
8826: PUSH
8827: LD_INT 113
8829: PUSH
8830: LD_INT 114
8832: PUSH
8833: LD_INT 116
8835: PUSH
8836: LD_INT 117
8838: PUSH
8839: LD_INT 118
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: ST_TO_ADDR
8859: GO 9490
8861: LD_INT 17
8863: DOUBLE
8864: EQUAL
8865: IFTRUE 8869
8867: GO 9093
8869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 4
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: LD_INT 6
8892: PUSH
8893: LD_INT 7
8895: PUSH
8896: LD_INT 8
8898: PUSH
8899: LD_INT 9
8901: PUSH
8902: LD_INT 10
8904: PUSH
8905: LD_INT 11
8907: PUSH
8908: LD_INT 12
8910: PUSH
8911: LD_INT 13
8913: PUSH
8914: LD_INT 14
8916: PUSH
8917: LD_INT 15
8919: PUSH
8920: LD_INT 16
8922: PUSH
8923: LD_INT 17
8925: PUSH
8926: LD_INT 18
8928: PUSH
8929: LD_INT 19
8931: PUSH
8932: LD_INT 20
8934: PUSH
8935: LD_INT 21
8937: PUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 23
8943: PUSH
8944: LD_INT 24
8946: PUSH
8947: LD_INT 25
8949: PUSH
8950: LD_INT 26
8952: PUSH
8953: LD_INT 27
8955: PUSH
8956: LD_INT 28
8958: PUSH
8959: LD_INT 29
8961: PUSH
8962: LD_INT 30
8964: PUSH
8965: LD_INT 31
8967: PUSH
8968: LD_INT 32
8970: PUSH
8971: LD_INT 33
8973: PUSH
8974: LD_INT 34
8976: PUSH
8977: LD_INT 36
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 101
9019: PUSH
9020: LD_INT 102
9022: PUSH
9023: LD_INT 103
9025: PUSH
9026: LD_INT 104
9028: PUSH
9029: LD_INT 105
9031: PUSH
9032: LD_INT 106
9034: PUSH
9035: LD_INT 107
9037: PUSH
9038: LD_INT 108
9040: PUSH
9041: LD_INT 109
9043: PUSH
9044: LD_INT 110
9046: PUSH
9047: LD_INT 111
9049: PUSH
9050: LD_INT 112
9052: PUSH
9053: LD_INT 113
9055: PUSH
9056: LD_INT 114
9058: PUSH
9059: LD_INT 116
9061: PUSH
9062: LD_INT 117
9064: PUSH
9065: LD_INT 118
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: ST_TO_ADDR
9091: GO 9490
9093: LD_INT 18
9095: DOUBLE
9096: EQUAL
9097: IFTRUE 9101
9099: GO 9249
9101: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 2
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: LD_INT 5
9115: PUSH
9116: LD_INT 7
9118: PUSH
9119: LD_INT 11
9121: PUSH
9122: LD_INT 12
9124: PUSH
9125: LD_INT 15
9127: PUSH
9128: LD_INT 16
9130: PUSH
9131: LD_INT 20
9133: PUSH
9134: LD_INT 21
9136: PUSH
9137: LD_INT 22
9139: PUSH
9140: LD_INT 23
9142: PUSH
9143: LD_INT 25
9145: PUSH
9146: LD_INT 26
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 31
9154: PUSH
9155: LD_INT 32
9157: PUSH
9158: LD_INT 33
9160: PUSH
9161: LD_INT 34
9163: PUSH
9164: LD_INT 35
9166: PUSH
9167: LD_INT 36
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 102
9198: PUSH
9199: LD_INT 103
9201: PUSH
9202: LD_INT 106
9204: PUSH
9205: LD_INT 108
9207: PUSH
9208: LD_INT 112
9210: PUSH
9211: LD_INT 113
9213: PUSH
9214: LD_INT 114
9216: PUSH
9217: LD_INT 115
9219: PUSH
9220: LD_INT 116
9222: PUSH
9223: LD_INT 117
9225: PUSH
9226: LD_INT 118
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: ST_TO_ADDR
9247: GO 9490
9249: LD_INT 19
9251: DOUBLE
9252: EQUAL
9253: IFTRUE 9257
9255: GO 9489
9257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9258: LD_ADDR_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: LD_INT 2
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 6
9280: PUSH
9281: LD_INT 7
9283: PUSH
9284: LD_INT 8
9286: PUSH
9287: LD_INT 9
9289: PUSH
9290: LD_INT 10
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 12
9298: PUSH
9299: LD_INT 13
9301: PUSH
9302: LD_INT 14
9304: PUSH
9305: LD_INT 15
9307: PUSH
9308: LD_INT 16
9310: PUSH
9311: LD_INT 17
9313: PUSH
9314: LD_INT 18
9316: PUSH
9317: LD_INT 19
9319: PUSH
9320: LD_INT 20
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 23
9331: PUSH
9332: LD_INT 24
9334: PUSH
9335: LD_INT 25
9337: PUSH
9338: LD_INT 26
9340: PUSH
9341: LD_INT 27
9343: PUSH
9344: LD_INT 28
9346: PUSH
9347: LD_INT 29
9349: PUSH
9350: LD_INT 30
9352: PUSH
9353: LD_INT 31
9355: PUSH
9356: LD_INT 32
9358: PUSH
9359: LD_INT 33
9361: PUSH
9362: LD_INT 34
9364: PUSH
9365: LD_INT 35
9367: PUSH
9368: LD_INT 36
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 101
9411: PUSH
9412: LD_INT 102
9414: PUSH
9415: LD_INT 103
9417: PUSH
9418: LD_INT 104
9420: PUSH
9421: LD_INT 105
9423: PUSH
9424: LD_INT 106
9426: PUSH
9427: LD_INT 107
9429: PUSH
9430: LD_INT 108
9432: PUSH
9433: LD_INT 109
9435: PUSH
9436: LD_INT 110
9438: PUSH
9439: LD_INT 111
9441: PUSH
9442: LD_INT 112
9444: PUSH
9445: LD_INT 113
9447: PUSH
9448: LD_INT 114
9450: PUSH
9451: LD_INT 115
9453: PUSH
9454: LD_INT 116
9456: PUSH
9457: LD_INT 117
9459: PUSH
9460: LD_INT 118
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: ST_TO_ADDR
9487: GO 9490
9489: POP
// end else
9490: GO 9721
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_INT 1
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 4
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: LD_INT 6
9514: PUSH
9515: LD_INT 7
9517: PUSH
9518: LD_INT 8
9520: PUSH
9521: LD_INT 9
9523: PUSH
9524: LD_INT 10
9526: PUSH
9527: LD_INT 11
9529: PUSH
9530: LD_INT 12
9532: PUSH
9533: LD_INT 13
9535: PUSH
9536: LD_INT 14
9538: PUSH
9539: LD_INT 15
9541: PUSH
9542: LD_INT 16
9544: PUSH
9545: LD_INT 17
9547: PUSH
9548: LD_INT 18
9550: PUSH
9551: LD_INT 19
9553: PUSH
9554: LD_INT 20
9556: PUSH
9557: LD_INT 21
9559: PUSH
9560: LD_INT 22
9562: PUSH
9563: LD_INT 23
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 25
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 27
9577: PUSH
9578: LD_INT 28
9580: PUSH
9581: LD_INT 29
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 31
9589: PUSH
9590: LD_INT 32
9592: PUSH
9593: LD_INT 33
9595: PUSH
9596: LD_INT 34
9598: PUSH
9599: LD_INT 35
9601: PUSH
9602: LD_INT 36
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 103
9651: PUSH
9652: LD_INT 104
9654: PUSH
9655: LD_INT 105
9657: PUSH
9658: LD_INT 106
9660: PUSH
9661: LD_INT 107
9663: PUSH
9664: LD_INT 108
9666: PUSH
9667: LD_INT 109
9669: PUSH
9670: LD_INT 110
9672: PUSH
9673: LD_INT 111
9675: PUSH
9676: LD_INT 112
9678: PUSH
9679: LD_INT 113
9681: PUSH
9682: LD_INT 114
9684: PUSH
9685: LD_INT 115
9687: PUSH
9688: LD_INT 116
9690: PUSH
9691: LD_INT 117
9693: PUSH
9694: LD_INT 118
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: ST_TO_ADDR
// if result then
9721: LD_VAR 0 2
9725: IFFALSE 10511
// begin normal :=  ;
9727: LD_ADDR_VAR 0 5
9731: PUSH
9732: LD_STRING 
9734: ST_TO_ADDR
// hardcore :=  ;
9735: LD_ADDR_VAR 0 6
9739: PUSH
9740: LD_STRING 
9742: ST_TO_ADDR
// active :=  ;
9743: LD_ADDR_VAR 0 7
9747: PUSH
9748: LD_STRING 
9750: ST_TO_ADDR
// for i = 1 to normalCounter do
9751: LD_ADDR_VAR 0 8
9755: PUSH
9756: DOUBLE
9757: LD_INT 1
9759: DEC
9760: ST_TO_ADDR
9761: LD_EXP 9
9765: PUSH
9766: FOR_TO
9767: IFFALSE 9868
// begin tmp := 0 ;
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: LD_STRING 0
9776: ST_TO_ADDR
// if result [ 1 ] then
9777: LD_VAR 0 2
9781: PUSH
9782: LD_INT 1
9784: ARRAY
9785: IFFALSE 9850
// if result [ 1 ] [ 1 ] = i then
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PUSH
9796: LD_INT 1
9798: ARRAY
9799: PUSH
9800: LD_VAR 0 8
9804: EQUAL
9805: IFFALSE 9850
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9807: LD_ADDR_VAR 0 2
9811: PUSH
9812: LD_VAR 0 2
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: LD_VAR 0 2
9824: PUSH
9825: LD_INT 1
9827: ARRAY
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 3
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// tmp := 1 ;
9842: LD_ADDR_VAR 0 3
9846: PUSH
9847: LD_STRING 1
9849: ST_TO_ADDR
// end ; normal := normal & tmp ;
9850: LD_ADDR_VAR 0 5
9854: PUSH
9855: LD_VAR 0 5
9859: PUSH
9860: LD_VAR 0 3
9864: STR
9865: ST_TO_ADDR
// end ;
9866: GO 9766
9868: POP
9869: POP
// for i = 1 to hardcoreCounter do
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: DOUBLE
9876: LD_INT 1
9878: DEC
9879: ST_TO_ADDR
9880: LD_EXP 10
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9991
// begin tmp := 0 ;
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: LD_STRING 0
9895: ST_TO_ADDR
// if result [ 2 ] then
9896: LD_VAR 0 2
9900: PUSH
9901: LD_INT 2
9903: ARRAY
9904: IFFALSE 9973
// if result [ 2 ] [ 1 ] = 100 + i then
9906: LD_VAR 0 2
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PUSH
9919: LD_INT 100
9921: PUSH
9922: LD_VAR 0 8
9926: PLUS
9927: EQUAL
9928: IFFALSE 9973
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_VAR 0 2
9939: PPUSH
9940: LD_INT 2
9942: PPUSH
9943: LD_VAR 0 2
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 3
9959: PPUSH
9960: CALL_OW 1
9964: ST_TO_ADDR
// tmp := 1 ;
9965: LD_ADDR_VAR 0 3
9969: PUSH
9970: LD_STRING 1
9972: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9973: LD_ADDR_VAR 0 6
9977: PUSH
9978: LD_VAR 0 6
9982: PUSH
9983: LD_VAR 0 3
9987: STR
9988: ST_TO_ADDR
// end ;
9989: GO 9885
9991: POP
9992: POP
// if isGameLoad then
9993: LD_VAR 0 1
9997: IFFALSE 10472
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9999: LD_ADDR_VAR 0 4
10003: PUSH
10004: LD_EXP 13
10008: PUSH
10009: LD_EXP 12
10013: PUSH
10014: LD_EXP 14
10018: PUSH
10019: LD_EXP 11
10023: PUSH
10024: LD_EXP 15
10028: PUSH
10029: LD_EXP 16
10033: PUSH
10034: LD_EXP 17
10038: PUSH
10039: LD_EXP 18
10043: PUSH
10044: LD_EXP 19
10048: PUSH
10049: LD_EXP 20
10053: PUSH
10054: LD_EXP 21
10058: PUSH
10059: LD_EXP 22
10063: PUSH
10064: LD_EXP 23
10068: PUSH
10069: LD_EXP 24
10073: PUSH
10074: LD_EXP 32
10078: PUSH
10079: LD_EXP 33
10083: PUSH
10084: LD_EXP 34
10088: PUSH
10089: LD_EXP 35
10093: PUSH
10094: LD_EXP 37
10098: PUSH
10099: LD_EXP 38
10103: PUSH
10104: LD_EXP 39
10108: PUSH
10109: LD_EXP 42
10113: PUSH
10114: LD_EXP 44
10118: PUSH
10119: LD_EXP 45
10123: PUSH
10124: LD_EXP 46
10128: PUSH
10129: LD_EXP 48
10133: PUSH
10134: LD_EXP 49
10138: PUSH
10139: LD_EXP 52
10143: PUSH
10144: LD_EXP 53
10148: PUSH
10149: LD_EXP 54
10153: PUSH
10154: LD_EXP 55
10158: PUSH
10159: LD_EXP 56
10163: PUSH
10164: LD_EXP 57
10168: PUSH
10169: LD_EXP 58
10173: PUSH
10174: LD_EXP 59
10178: PUSH
10179: LD_EXP 60
10183: PUSH
10184: LD_EXP 25
10188: PUSH
10189: LD_EXP 26
10193: PUSH
10194: LD_EXP 29
10198: PUSH
10199: LD_EXP 30
10203: PUSH
10204: LD_EXP 31
10208: PUSH
10209: LD_EXP 27
10213: PUSH
10214: LD_EXP 28
10218: PUSH
10219: LD_EXP 36
10223: PUSH
10224: LD_EXP 40
10228: PUSH
10229: LD_EXP 41
10233: PUSH
10234: LD_EXP 43
10238: PUSH
10239: LD_EXP 47
10243: PUSH
10244: LD_EXP 50
10248: PUSH
10249: LD_EXP 51
10253: PUSH
10254: LD_EXP 61
10258: PUSH
10259: LD_EXP 62
10263: PUSH
10264: LD_EXP 63
10268: PUSH
10269: LD_EXP 64
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: ST_TO_ADDR
// tmp :=  ;
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: LD_STRING 
10337: ST_TO_ADDR
// for i = 1 to normalCounter do
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: DOUBLE
10344: LD_INT 1
10346: DEC
10347: ST_TO_ADDR
10348: LD_EXP 9
10352: PUSH
10353: FOR_TO
10354: IFFALSE 10390
// begin if flags [ i ] then
10356: LD_VAR 0 4
10360: PUSH
10361: LD_VAR 0 8
10365: ARRAY
10366: IFFALSE 10388
// tmp := tmp & i & ; ;
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: LD_VAR 0 3
10377: PUSH
10378: LD_VAR 0 8
10382: STR
10383: PUSH
10384: LD_STRING ;
10386: STR
10387: ST_TO_ADDR
// end ;
10388: GO 10353
10390: POP
10391: POP
// for i = 1 to hardcoreCounter do
10392: LD_ADDR_VAR 0 8
10396: PUSH
10397: DOUBLE
10398: LD_INT 1
10400: DEC
10401: ST_TO_ADDR
10402: LD_EXP 10
10406: PUSH
10407: FOR_TO
10408: IFFALSE 10454
// begin if flags [ normalCounter + i ] then
10410: LD_VAR 0 4
10414: PUSH
10415: LD_EXP 9
10419: PUSH
10420: LD_VAR 0 8
10424: PLUS
10425: ARRAY
10426: IFFALSE 10452
// tmp := tmp & ( 100 + i ) & ; ;
10428: LD_ADDR_VAR 0 3
10432: PUSH
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 100
10440: PUSH
10441: LD_VAR 0 8
10445: PLUS
10446: STR
10447: PUSH
10448: LD_STRING ;
10450: STR
10451: ST_TO_ADDR
// end ;
10452: GO 10407
10454: POP
10455: POP
// if tmp then
10456: LD_VAR 0 3
10460: IFFALSE 10472
// active := tmp ;
10462: LD_ADDR_VAR 0 7
10466: PUSH
10467: LD_VAR 0 3
10471: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10472: LD_STRING getStreamItemsFromMission("
10474: PUSH
10475: LD_VAR 0 5
10479: STR
10480: PUSH
10481: LD_STRING ","
10483: STR
10484: PUSH
10485: LD_VAR 0 6
10489: STR
10490: PUSH
10491: LD_STRING ","
10493: STR
10494: PUSH
10495: LD_VAR 0 7
10499: STR
10500: PUSH
10501: LD_STRING ")
10503: STR
10504: PPUSH
10505: CALL_OW 559
// end else
10509: GO 10518
// ToLua ( getStreamItemsFromMission("","","") ) ;
10511: LD_STRING getStreamItemsFromMission("","","")
10513: PPUSH
10514: CALL_OW 559
// end ;
10518: LD_VAR 0 2
10522: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10523: LD_EXP 8
10527: PUSH
10528: LD_EXP 13
10532: AND
10533: IFFALSE 10657
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
// begin enable ;
10542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 22
10550: PUSH
10551: LD_OWVAR 2
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: LD_INT 34
10565: PUSH
10566: LD_INT 7
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 45
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 34
10585: PUSH
10586: LD_INT 28
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 34
10595: PUSH
10596: LD_INT 47
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: ST_TO_ADDR
// if not tmp then
10619: LD_VAR 0 2
10623: NOT
10624: IFFALSE 10628
// exit ;
10626: GO 10657
// for i in tmp do
10628: LD_ADDR_VAR 0 1
10632: PUSH
10633: LD_VAR 0 2
10637: PUSH
10638: FOR_IN
10639: IFFALSE 10655
// begin SetLives ( i , 0 ) ;
10641: LD_VAR 0 1
10645: PPUSH
10646: LD_INT 0
10648: PPUSH
10649: CALL_OW 234
// end ;
10653: GO 10638
10655: POP
10656: POP
// end ;
10657: PPOPN 2
10659: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10660: LD_EXP 8
10664: PUSH
10665: LD_EXP 14
10669: AND
10670: IFFALSE 10754
10672: GO 10674
10674: DISABLE
10675: LD_INT 0
10677: PPUSH
10678: PPUSH
// begin enable ;
10679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10680: LD_ADDR_VAR 0 2
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 32
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: ST_TO_ADDR
// if not tmp then
10716: LD_VAR 0 2
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10754
// for i in tmp do
10725: LD_ADDR_VAR 0 1
10729: PUSH
10730: LD_VAR 0 2
10734: PUSH
10735: FOR_IN
10736: IFFALSE 10752
// begin SetLives ( i , 0 ) ;
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: CALL_OW 234
// end ;
10750: GO 10735
10752: POP
10753: POP
// end ;
10754: PPOPN 2
10756: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10757: LD_EXP 8
10761: PUSH
10762: LD_EXP 11
10766: AND
10767: IFFALSE 10860
10769: GO 10771
10771: DISABLE
10772: LD_INT 0
10774: PPUSH
// begin enable ;
10775: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_INT 22
10783: PUSH
10784: LD_OWVAR 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 5
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 9
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 8
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PPUSH
10836: CALL_OW 69
10840: PUSH
10841: FOR_IN
10842: IFFALSE 10858
// begin SetClass ( i , 1 ) ;
10844: LD_VAR 0 1
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 336
// end ;
10856: GO 10841
10858: POP
10859: POP
// end ;
10860: PPOPN 1
10862: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10863: LD_EXP 8
10867: PUSH
10868: LD_EXP 12
10872: AND
10873: PUSH
10874: LD_OWVAR 65
10878: PUSH
10879: LD_INT 7
10881: LESS
10882: AND
10883: IFFALSE 10897
10885: GO 10887
10887: DISABLE
// begin enable ;
10888: ENABLE
// game_speed := 7 ;
10889: LD_ADDR_OWVAR 65
10893: PUSH
10894: LD_INT 7
10896: ST_TO_ADDR
// end ;
10897: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10898: LD_EXP 8
10902: PUSH
10903: LD_EXP 15
10907: AND
10908: IFFALSE 11110
10910: GO 10912
10912: DISABLE
10913: LD_INT 0
10915: PPUSH
10916: PPUSH
10917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_OWVAR 2
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 21
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: ST_TO_ADDR
// if not tmp then
10954: LD_VAR 0 3
10958: NOT
10959: IFFALSE 10963
// exit ;
10961: GO 11110
// if tmp > 5 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 5
10970: GREATER
10971: IFFALSE 10983
// k := 5 else
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_INT 5
10980: ST_TO_ADDR
10981: GO 10993
// k := tmp ;
10983: LD_ADDR_VAR 0 2
10987: PUSH
10988: LD_VAR 0 3
10992: ST_TO_ADDR
// for i := 1 to k do
10993: LD_ADDR_VAR 0 1
10997: PUSH
10998: DOUBLE
10999: LD_INT 1
11001: DEC
11002: ST_TO_ADDR
11003: LD_VAR 0 2
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11108
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_VAR 0 1
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 1
11026: PUSH
11027: LD_INT 4
11029: MOD
11030: PUSH
11031: LD_INT 1
11033: PLUS
11034: PPUSH
11035: CALL_OW 259
11039: PUSH
11040: LD_INT 10
11042: LESS
11043: IFFALSE 11106
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11045: LD_VAR 0 3
11049: PUSH
11050: LD_VAR 0 1
11054: ARRAY
11055: PPUSH
11056: LD_VAR 0 1
11060: PUSH
11061: LD_INT 4
11063: MOD
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: PPUSH
11069: LD_VAR 0 3
11073: PUSH
11074: LD_VAR 0 1
11078: ARRAY
11079: PPUSH
11080: LD_VAR 0 1
11084: PUSH
11085: LD_INT 4
11087: MOD
11088: PUSH
11089: LD_INT 1
11091: PLUS
11092: PPUSH
11093: CALL_OW 259
11097: PUSH
11098: LD_INT 1
11100: PLUS
11101: PPUSH
11102: CALL_OW 237
11106: GO 11008
11108: POP
11109: POP
// end ;
11110: PPOPN 3
11112: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11113: LD_EXP 8
11117: PUSH
11118: LD_EXP 16
11122: AND
11123: IFFALSE 11143
11125: GO 11127
11127: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11128: LD_INT 4
11130: PPUSH
11131: LD_OWVAR 2
11135: PPUSH
11136: LD_INT 0
11138: PPUSH
11139: CALL_OW 324
11143: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11144: LD_EXP 8
11148: PUSH
11149: LD_EXP 45
11153: AND
11154: IFFALSE 11174
11156: GO 11158
11158: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11159: LD_INT 19
11161: PPUSH
11162: LD_OWVAR 2
11166: PPUSH
11167: LD_INT 0
11169: PPUSH
11170: CALL_OW 324
11174: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11175: LD_EXP 8
11179: PUSH
11180: LD_EXP 17
11184: AND
11185: IFFALSE 11287
11187: GO 11189
11189: DISABLE
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
// begin enable ;
11194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11195: LD_ADDR_VAR 0 2
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_OWVAR 2
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 34
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 34
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// if not tmp then
11249: LD_VAR 0 2
11253: NOT
11254: IFFALSE 11258
// exit ;
11256: GO 11287
// for i in tmp do
11258: LD_ADDR_VAR 0 1
11262: PUSH
11263: LD_VAR 0 2
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11285
// begin SetLives ( i , 0 ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 234
// end ;
11283: GO 11268
11285: POP
11286: POP
// end ;
11287: PPOPN 2
11289: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11290: LD_EXP 8
11294: PUSH
11295: LD_EXP 18
11299: AND
11300: IFFALSE 11320
11302: GO 11304
11304: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11305: LD_INT 32
11307: PPUSH
11308: LD_OWVAR 2
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 324
11320: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11321: LD_EXP 8
11325: PUSH
11326: LD_EXP 19
11330: AND
11331: IFFALSE 11512
11333: GO 11335
11335: DISABLE
11336: LD_INT 0
11338: PPUSH
11339: PPUSH
11340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: LD_INT 22
11348: PUSH
11349: LD_OWVAR 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 33
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PPUSH
11372: CALL_OW 69
11376: ST_TO_ADDR
// if not tmp then
11377: LD_VAR 0 2
11381: NOT
11382: IFFALSE 11386
// exit ;
11384: GO 11512
// side := 0 ;
11386: LD_ADDR_VAR 0 3
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// for i := 1 to 8 do
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: DOUBLE
11400: LD_INT 1
11402: DEC
11403: ST_TO_ADDR
11404: LD_INT 8
11406: PUSH
11407: FOR_TO
11408: IFFALSE 11456
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11410: LD_OWVAR 2
11414: PUSH
11415: LD_VAR 0 1
11419: NONEQUAL
11420: PUSH
11421: LD_OWVAR 2
11425: PPUSH
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 81
11435: PUSH
11436: LD_INT 2
11438: EQUAL
11439: AND
11440: IFFALSE 11454
// begin side := i ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_VAR 0 1
11451: ST_TO_ADDR
// break ;
11452: GO 11456
// end ;
11454: GO 11407
11456: POP
11457: POP
// if not side then
11458: LD_VAR 0 3
11462: NOT
11463: IFFALSE 11467
// exit ;
11465: GO 11512
// for i := 1 to tmp do
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_VAR 0 2
11481: PUSH
11482: FOR_TO
11483: IFFALSE 11510
// if Prob ( 60 ) then
11485: LD_INT 60
11487: PPUSH
11488: CALL_OW 13
11492: IFFALSE 11508
// SetSide ( i , side ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_VAR 0 3
11503: PPUSH
11504: CALL_OW 235
11508: GO 11482
11510: POP
11511: POP
// end ;
11512: PPOPN 3
11514: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11515: LD_EXP 8
11519: PUSH
11520: LD_EXP 21
11524: AND
11525: IFFALSE 11644
11527: GO 11529
11529: DISABLE
11530: LD_INT 0
11532: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_OWVAR 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 3
11562: PUSH
11563: LD_INT 23
11565: PUSH
11566: LD_INT 0
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: PUSH
11587: FOR_IN
11588: IFFALSE 11642
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 257
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: LD_INT 2
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: LD_INT 4
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: IN
11618: IFFALSE 11640
// SetClass ( un , rand ( 1 , 4 ) ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: LD_INT 4
11630: PPUSH
11631: CALL_OW 12
11635: PPUSH
11636: CALL_OW 336
11640: GO 11587
11642: POP
11643: POP
// end ;
11644: PPOPN 1
11646: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11647: LD_EXP 8
11651: PUSH
11652: LD_EXP 20
11656: AND
11657: IFFALSE 11736
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_OWVAR 2
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 21
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if not tmp then
11701: LD_VAR 0 1
11705: NOT
11706: IFFALSE 11710
// exit ;
11708: GO 11736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11710: LD_VAR 0 1
11714: PUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_VAR 0 1
11722: PPUSH
11723: CALL_OW 12
11727: ARRAY
11728: PPUSH
11729: LD_INT 100
11731: PPUSH
11732: CALL_OW 234
// end ;
11736: PPOPN 1
11738: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11739: LD_EXP 8
11743: PUSH
11744: LD_EXP 22
11748: AND
11749: IFFALSE 11847
11751: GO 11753
11753: DISABLE
11754: LD_INT 0
11756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11757: LD_ADDR_VAR 0 1
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_OWVAR 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 21
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: ST_TO_ADDR
// if not tmp then
11793: LD_VAR 0 1
11797: NOT
11798: IFFALSE 11802
// exit ;
11800: GO 11847
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11802: LD_VAR 0 1
11806: PUSH
11807: LD_INT 1
11809: PPUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 12
11819: ARRAY
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: LD_INT 4
11826: PPUSH
11827: CALL_OW 12
11831: PPUSH
11832: LD_INT 3000
11834: PPUSH
11835: LD_INT 9000
11837: PPUSH
11838: CALL_OW 12
11842: PPUSH
11843: CALL_OW 492
// end ;
11847: PPOPN 1
11849: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11850: LD_EXP 8
11854: PUSH
11855: LD_EXP 23
11859: AND
11860: IFFALSE 11880
11862: GO 11864
11864: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11865: LD_INT 1
11867: PPUSH
11868: LD_OWVAR 2
11872: PPUSH
11873: LD_INT 0
11875: PPUSH
11876: CALL_OW 324
11880: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11881: LD_EXP 8
11885: PUSH
11886: LD_EXP 24
11890: AND
11891: IFFALSE 11974
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11900: LD_ADDR_VAR 0 2
11904: PUSH
11905: LD_INT 22
11907: PUSH
11908: LD_OWVAR 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 21
11919: PUSH
11920: LD_INT 3
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: ST_TO_ADDR
// if not tmp then
11936: LD_VAR 0 2
11940: NOT
11941: IFFALSE 11945
// exit ;
11943: GO 11974
// for i in tmp do
11945: LD_ADDR_VAR 0 1
11949: PUSH
11950: LD_VAR 0 2
11954: PUSH
11955: FOR_IN
11956: IFFALSE 11972
// SetBLevel ( i , 10 ) ;
11958: LD_VAR 0 1
11962: PPUSH
11963: LD_INT 10
11965: PPUSH
11966: CALL_OW 241
11970: GO 11955
11972: POP
11973: POP
// end ;
11974: PPOPN 2
11976: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11977: LD_EXP 8
11981: PUSH
11982: LD_EXP 25
11986: AND
11987: IFFALSE 12098
11989: GO 11991
11991: DISABLE
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11997: LD_ADDR_VAR 0 3
12001: PUSH
12002: LD_INT 22
12004: PUSH
12005: LD_OWVAR 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: ST_TO_ADDR
// if not tmp then
12033: LD_VAR 0 3
12037: NOT
12038: IFFALSE 12042
// exit ;
12040: GO 12098
// un := tmp [ rand ( 1 , tmp ) ] ;
12042: LD_ADDR_VAR 0 2
12046: PUSH
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 1
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 12
12064: ARRAY
12065: ST_TO_ADDR
// if Crawls ( un ) then
12066: LD_VAR 0 2
12070: PPUSH
12071: CALL_OW 318
12075: IFFALSE 12086
// ComWalk ( un ) ;
12077: LD_VAR 0 2
12081: PPUSH
12082: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12086: LD_VAR 0 2
12090: PPUSH
12091: LD_INT 5
12093: PPUSH
12094: CALL_OW 336
// end ;
12098: PPOPN 3
12100: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12101: LD_EXP 8
12105: PUSH
12106: LD_EXP 26
12110: AND
12111: PUSH
12112: LD_OWVAR 67
12116: PUSH
12117: LD_INT 4
12119: LESS
12120: AND
12121: IFFALSE 12140
12123: GO 12125
12125: DISABLE
// begin Difficulty := Difficulty + 1 ;
12126: LD_ADDR_OWVAR 67
12130: PUSH
12131: LD_OWVAR 67
12135: PUSH
12136: LD_INT 1
12138: PLUS
12139: ST_TO_ADDR
// end ;
12140: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12141: LD_EXP 8
12145: PUSH
12146: LD_EXP 27
12150: AND
12151: IFFALSE 12254
12153: GO 12155
12155: DISABLE
12156: LD_INT 0
12158: PPUSH
// begin for i := 1 to 5 do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: DOUBLE
12165: LD_INT 1
12167: DEC
12168: ST_TO_ADDR
12169: LD_INT 5
12171: PUSH
12172: FOR_TO
12173: IFFALSE 12252
// begin uc_nation := nation_nature ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// uc_side := 0 ;
12183: LD_ADDR_OWVAR 20
12187: PUSH
12188: LD_INT 0
12190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12191: LD_ADDR_OWVAR 29
12195: PUSH
12196: LD_INT 12
12198: PUSH
12199: LD_INT 12
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: ST_TO_ADDR
// hc_agressivity := 20 ;
12206: LD_ADDR_OWVAR 35
12210: PUSH
12211: LD_INT 20
12213: ST_TO_ADDR
// hc_class := class_tiger ;
12214: LD_ADDR_OWVAR 28
12218: PUSH
12219: LD_INT 14
12221: ST_TO_ADDR
// hc_gallery :=  ;
12222: LD_ADDR_OWVAR 33
12226: PUSH
12227: LD_STRING 
12229: ST_TO_ADDR
// hc_name :=  ;
12230: LD_ADDR_OWVAR 26
12234: PUSH
12235: LD_STRING 
12237: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12238: CALL_OW 44
12242: PPUSH
12243: LD_INT 0
12245: PPUSH
12246: CALL_OW 51
// end ;
12250: GO 12172
12252: POP
12253: POP
// end ;
12254: PPOPN 1
12256: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12257: LD_EXP 8
12261: PUSH
12262: LD_EXP 28
12266: AND
12267: IFFALSE 12276
12269: GO 12271
12271: DISABLE
// StreamSibBomb ;
12272: CALL 12277 0 0
12276: END
// export function StreamSibBomb ; var i , x , y ; begin
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
// result := false ;
12283: LD_ADDR_VAR 0 1
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// for i := 1 to 16 do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_INT 16
12303: PUSH
12304: FOR_TO
12305: IFFALSE 12504
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 10
12314: PUSH
12315: LD_INT 20
12317: PUSH
12318: LD_INT 30
12320: PUSH
12321: LD_INT 40
12323: PUSH
12324: LD_INT 50
12326: PUSH
12327: LD_INT 60
12329: PUSH
12330: LD_INT 70
12332: PUSH
12333: LD_INT 80
12335: PUSH
12336: LD_INT 90
12338: PUSH
12339: LD_INT 100
12341: PUSH
12342: LD_INT 110
12344: PUSH
12345: LD_INT 120
12347: PUSH
12348: LD_INT 130
12350: PUSH
12351: LD_INT 140
12353: PUSH
12354: LD_INT 150
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 1
12376: PPUSH
12377: LD_INT 15
12379: PPUSH
12380: CALL_OW 12
12384: ARRAY
12385: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12386: LD_ADDR_VAR 0 4
12390: PUSH
12391: LD_INT 10
12393: PUSH
12394: LD_INT 20
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 40
12402: PUSH
12403: LD_INT 50
12405: PUSH
12406: LD_INT 60
12408: PUSH
12409: LD_INT 70
12411: PUSH
12412: LD_INT 80
12414: PUSH
12415: LD_INT 90
12417: PUSH
12418: LD_INT 100
12420: PUSH
12421: LD_INT 110
12423: PUSH
12424: LD_INT 120
12426: PUSH
12427: LD_INT 130
12429: PUSH
12430: LD_INT 140
12432: PUSH
12433: LD_INT 150
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 15
12458: PPUSH
12459: CALL_OW 12
12463: ARRAY
12464: ST_TO_ADDR
// if ValidHex ( x , y ) then
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 488
12479: IFFALSE 12502
// begin result := [ x , y ] ;
12481: LD_ADDR_VAR 0 1
12485: PUSH
12486: LD_VAR 0 3
12490: PUSH
12491: LD_VAR 0 4
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// break ;
12500: GO 12504
// end ; end ;
12502: GO 12304
12504: POP
12505: POP
// if result then
12506: LD_VAR 0 1
12510: IFFALSE 12570
// begin ToLua ( playSibBomb() ) ;
12512: LD_STRING playSibBomb()
12514: PPUSH
12515: CALL_OW 559
// wait ( 0 0$14 ) ;
12519: LD_INT 490
12521: PPUSH
12522: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: LD_VAR 0 1
12539: PUSH
12540: LD_INT 2
12542: ARRAY
12543: PPUSH
12544: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12548: LD_VAR 0 1
12552: PUSH
12553: LD_INT 1
12555: ARRAY
12556: PPUSH
12557: LD_VAR 0 1
12561: PUSH
12562: LD_INT 2
12564: ARRAY
12565: PPUSH
12566: CALL_OW 429
// end ; end ;
12570: LD_VAR 0 1
12574: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12575: LD_EXP 8
12579: PUSH
12580: LD_EXP 30
12584: AND
12585: IFFALSE 12597
12587: GO 12589
12589: DISABLE
// YouLost (  ) ;
12590: LD_STRING 
12592: PPUSH
12593: CALL_OW 104
12597: END
// every 0 0$1 trigger StreamModeActive and sFog do
12598: LD_EXP 8
12602: PUSH
12603: LD_EXP 29
12607: AND
12608: IFFALSE 12622
12610: GO 12612
12612: DISABLE
// FogOff ( your_side ) ;
12613: LD_OWVAR 2
12617: PPUSH
12618: CALL_OW 344
12622: END
// every 0 0$1 trigger StreamModeActive and sSun do
12623: LD_EXP 8
12627: PUSH
12628: LD_EXP 31
12632: AND
12633: IFFALSE 12661
12635: GO 12637
12637: DISABLE
// begin solar_recharge_percent := 0 ;
12638: LD_ADDR_OWVAR 79
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12646: LD_INT 10500
12648: PPUSH
12649: CALL_OW 67
// solar_recharge_percent := 100 ;
12653: LD_ADDR_OWVAR 79
12657: PUSH
12658: LD_INT 100
12660: ST_TO_ADDR
// end ;
12661: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12662: LD_EXP 8
12666: PUSH
12667: LD_EXP 32
12671: AND
12672: IFFALSE 12911
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin tmp := [ ] ;
12682: LD_ADDR_VAR 0 3
12686: PUSH
12687: EMPTY
12688: ST_TO_ADDR
// for i := 1 to 6 do
12689: LD_ADDR_VAR 0 1
12693: PUSH
12694: DOUBLE
12695: LD_INT 1
12697: DEC
12698: ST_TO_ADDR
12699: LD_INT 6
12701: PUSH
12702: FOR_TO
12703: IFFALSE 12808
// begin uc_nation := nation_nature ;
12705: LD_ADDR_OWVAR 21
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// uc_side := 0 ;
12713: LD_ADDR_OWVAR 20
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12721: LD_ADDR_OWVAR 29
12725: PUSH
12726: LD_INT 12
12728: PUSH
12729: LD_INT 12
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: ST_TO_ADDR
// hc_agressivity := 20 ;
12736: LD_ADDR_OWVAR 35
12740: PUSH
12741: LD_INT 20
12743: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12744: LD_ADDR_OWVAR 28
12748: PUSH
12749: LD_INT 17
12751: ST_TO_ADDR
// hc_gallery :=  ;
12752: LD_ADDR_OWVAR 33
12756: PUSH
12757: LD_STRING 
12759: ST_TO_ADDR
// hc_name :=  ;
12760: LD_ADDR_OWVAR 26
12764: PUSH
12765: LD_STRING 
12767: ST_TO_ADDR
// un := CreateHuman ;
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: CALL_OW 44
12777: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 51
// tmp := tmp ^ un ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_VAR 0 3
12799: PUSH
12800: LD_VAR 0 2
12804: ADD
12805: ST_TO_ADDR
// end ;
12806: GO 12702
12808: POP
12809: POP
// repeat wait ( 0 0$1 ) ;
12810: LD_INT 35
12812: PPUSH
12813: CALL_OW 67
// for un in tmp do
12817: LD_ADDR_VAR 0 2
12821: PUSH
12822: LD_VAR 0 3
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12902
// begin if IsDead ( un ) then
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 301
12839: IFFALSE 12859
// begin tmp := tmp diff un ;
12841: LD_ADDR_VAR 0 3
12845: PUSH
12846: LD_VAR 0 3
12850: PUSH
12851: LD_VAR 0 2
12855: DIFF
12856: ST_TO_ADDR
// continue ;
12857: GO 12827
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12859: LD_VAR 0 2
12863: PPUSH
12864: LD_INT 3
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 0
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PPUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: CALL_OW 74
12895: PPUSH
12896: CALL_OW 115
// end ;
12900: GO 12827
12902: POP
12903: POP
// until not tmp ;
12904: LD_VAR 0 3
12908: NOT
12909: IFFALSE 12810
// end ;
12911: PPOPN 3
12913: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12914: LD_EXP 8
12918: PUSH
12919: LD_EXP 33
12923: AND
12924: IFFALSE 12978
12926: GO 12928
12928: DISABLE
// begin ToLua ( displayTroll(); ) ;
12929: LD_STRING displayTroll();
12931: PPUSH
12932: CALL_OW 559
// wait ( 3 3$00 ) ;
12936: LD_INT 6300
12938: PPUSH
12939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12943: LD_STRING hideTroll();
12945: PPUSH
12946: CALL_OW 559
// wait ( 1 1$00 ) ;
12950: LD_INT 2100
12952: PPUSH
12953: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12957: LD_STRING displayTroll();
12959: PPUSH
12960: CALL_OW 559
// wait ( 1 1$00 ) ;
12964: LD_INT 2100
12966: PPUSH
12967: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12971: LD_STRING hideTroll();
12973: PPUSH
12974: CALL_OW 559
// end ;
12978: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12979: LD_EXP 8
12983: PUSH
12984: LD_EXP 34
12988: AND
12989: IFFALSE 13052
12991: GO 12993
12993: DISABLE
12994: LD_INT 0
12996: PPUSH
// begin p := 0 ;
12997: LD_ADDR_VAR 0 1
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// repeat game_speed := 1 ;
13005: LD_ADDR_OWVAR 65
13009: PUSH
13010: LD_INT 1
13012: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13013: LD_INT 35
13015: PPUSH
13016: CALL_OW 67
// p := p + 1 ;
13020: LD_ADDR_VAR 0 1
13024: PUSH
13025: LD_VAR 0 1
13029: PUSH
13030: LD_INT 1
13032: PLUS
13033: ST_TO_ADDR
// until p >= 60 ;
13034: LD_VAR 0 1
13038: PUSH
13039: LD_INT 60
13041: GREATEREQUAL
13042: IFFALSE 13005
// game_speed := 4 ;
13044: LD_ADDR_OWVAR 65
13048: PUSH
13049: LD_INT 4
13051: ST_TO_ADDR
// end ;
13052: PPOPN 1
13054: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13055: LD_EXP 8
13059: PUSH
13060: LD_EXP 35
13064: AND
13065: IFFALSE 13211
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_OWVAR 2
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 0
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// if not depot then
13128: LD_VAR 0 1
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13211
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: LD_VAR 0 1
13146: PUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 12
13159: ARRAY
13160: PPUSH
13161: CALL_OW 274
13165: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13166: LD_VAR 0 2
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: LD_INT 0
13176: PPUSH
13177: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13181: LD_VAR 0 2
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 0
13191: PPUSH
13192: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_INT 3
13203: PPUSH
13204: LD_INT 0
13206: PPUSH
13207: CALL_OW 277
// end ;
13211: PPOPN 2
13213: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13214: LD_EXP 8
13218: PUSH
13219: LD_EXP 36
13223: AND
13224: IFFALSE 13321
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13232: LD_ADDR_VAR 0 1
13236: PUSH
13237: LD_INT 22
13239: PUSH
13240: LD_OWVAR 2
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 21
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: LD_INT 23
13264: PUSH
13265: LD_INT 0
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: ST_TO_ADDR
// if not tmp then
13286: LD_VAR 0 1
13290: NOT
13291: IFFALSE 13295
// exit ;
13293: GO 13321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13295: LD_VAR 0 1
13299: PUSH
13300: LD_INT 1
13302: PPUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 12
13312: ARRAY
13313: PPUSH
13314: LD_INT 200
13316: PPUSH
13317: CALL_OW 234
// end ;
13321: PPOPN 1
13323: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13324: LD_EXP 8
13328: PUSH
13329: LD_EXP 37
13333: AND
13334: IFFALSE 13413
13336: GO 13338
13338: DISABLE
13339: LD_INT 0
13341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_OWVAR 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 21
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: ST_TO_ADDR
// if not tmp then
13378: LD_VAR 0 1
13382: NOT
13383: IFFALSE 13387
// exit ;
13385: GO 13413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13387: LD_VAR 0 1
13391: PUSH
13392: LD_INT 1
13394: PPUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: PPUSH
13406: LD_INT 60
13408: PPUSH
13409: CALL_OW 234
// end ;
13413: PPOPN 1
13415: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13416: LD_EXP 8
13420: PUSH
13421: LD_EXP 38
13425: AND
13426: IFFALSE 13525
13428: GO 13430
13430: DISABLE
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
// begin enable ;
13435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13436: LD_ADDR_VAR 0 1
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_OWVAR 2
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 61
13455: PUSH
13456: EMPTY
13457: LIST
13458: PUSH
13459: LD_INT 33
13461: PUSH
13462: LD_INT 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PPUSH
13474: CALL_OW 69
13478: ST_TO_ADDR
// if not tmp then
13479: LD_VAR 0 1
13483: NOT
13484: IFFALSE 13488
// exit ;
13486: GO 13525
// for i in tmp do
13488: LD_ADDR_VAR 0 2
13492: PUSH
13493: LD_VAR 0 1
13497: PUSH
13498: FOR_IN
13499: IFFALSE 13523
// if IsControledBy ( i ) then
13501: LD_VAR 0 2
13505: PPUSH
13506: CALL_OW 312
13510: IFFALSE 13521
// ComUnlink ( i ) ;
13512: LD_VAR 0 2
13516: PPUSH
13517: CALL_OW 136
13521: GO 13498
13523: POP
13524: POP
// end ;
13525: PPOPN 2
13527: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13528: LD_EXP 8
13532: PUSH
13533: LD_EXP 39
13537: AND
13538: IFFALSE 13678
13540: GO 13542
13542: DISABLE
13543: LD_INT 0
13545: PPUSH
13546: PPUSH
// begin ToLua ( displayPowell(); ) ;
13547: LD_STRING displayPowell();
13549: PPUSH
13550: CALL_OW 559
// uc_side := 0 ;
13554: LD_ADDR_OWVAR 20
13558: PUSH
13559: LD_INT 0
13561: ST_TO_ADDR
// uc_nation := 2 ;
13562: LD_ADDR_OWVAR 21
13566: PUSH
13567: LD_INT 2
13569: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13570: LD_ADDR_OWVAR 37
13574: PUSH
13575: LD_INT 14
13577: ST_TO_ADDR
// vc_engine := engine_siberite ;
13578: LD_ADDR_OWVAR 39
13582: PUSH
13583: LD_INT 3
13585: ST_TO_ADDR
// vc_control := control_apeman ;
13586: LD_ADDR_OWVAR 38
13590: PUSH
13591: LD_INT 5
13593: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13594: LD_ADDR_OWVAR 40
13598: PUSH
13599: LD_INT 29
13601: ST_TO_ADDR
// un := CreateVehicle ;
13602: LD_ADDR_VAR 0 2
13606: PUSH
13607: CALL_OW 45
13611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_INT 22
13638: PUSH
13639: LD_OWVAR 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PPUSH
13653: LD_VAR 0 2
13657: PPUSH
13658: CALL_OW 74
13662: PPUSH
13663: CALL_OW 115
// until IsDead ( un ) ;
13667: LD_VAR 0 2
13671: PPUSH
13672: CALL_OW 301
13676: IFFALSE 13624
// end ;
13678: PPOPN 2
13680: END
// every 0 0$1 trigger StreamModeActive and sStu do
13681: LD_EXP 8
13685: PUSH
13686: LD_EXP 47
13690: AND
13691: IFFALSE 13707
13693: GO 13695
13695: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13696: LD_STRING displayStucuk();
13698: PPUSH
13699: CALL_OW 559
// ResetFog ;
13703: CALL_OW 335
// end ;
13707: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13708: LD_EXP 8
13712: PUSH
13713: LD_EXP 40
13717: AND
13718: IFFALSE 13859
13720: GO 13722
13722: DISABLE
13723: LD_INT 0
13725: PPUSH
13726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_OWVAR 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 21
13746: PUSH
13747: LD_INT 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if not tmp then
13763: LD_VAR 0 2
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 13859
// un := tmp [ rand ( 1 , tmp ) ] ;
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_VAR 0 2
13781: PUSH
13782: LD_INT 1
13784: PPUSH
13785: LD_VAR 0 2
13789: PPUSH
13790: CALL_OW 12
13794: ARRAY
13795: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13796: LD_VAR 0 1
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13808: LD_VAR 0 1
13812: PPUSH
13813: LD_OWVAR 3
13817: PUSH
13818: LD_VAR 0 1
13822: DIFF
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 74
13833: PPUSH
13834: CALL_OW 115
// wait ( 0 0$20 ) ;
13838: LD_INT 700
13840: PPUSH
13841: CALL_OW 67
// SetSide ( un , your_side ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_OWVAR 2
13854: PPUSH
13855: CALL_OW 235
// end ;
13859: PPOPN 2
13861: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13862: LD_EXP 8
13866: PUSH
13867: LD_EXP 41
13871: AND
13872: IFFALSE 13978
13874: GO 13876
13876: DISABLE
13877: LD_INT 0
13879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13880: LD_ADDR_VAR 0 1
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_OWVAR 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 30
13902: PUSH
13903: LD_INT 0
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 30
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PPUSH
13929: CALL_OW 69
13933: ST_TO_ADDR
// if not depot then
13934: LD_VAR 0 1
13938: NOT
13939: IFFALSE 13943
// exit ;
13941: GO 13978
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13943: LD_VAR 0 1
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 250
13956: PPUSH
13957: LD_VAR 0 1
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: CALL_OW 251
13970: PPUSH
13971: LD_INT 70
13973: PPUSH
13974: CALL_OW 495
// end ;
13978: PPOPN 1
13980: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13981: LD_EXP 8
13985: PUSH
13986: LD_EXP 42
13990: AND
13991: IFFALSE 14202
13993: GO 13995
13995: DISABLE
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_OWVAR 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 21
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 5
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 14202
// for i in tmp do
14048: LD_ADDR_VAR 0 1
14052: PUSH
14053: LD_VAR 0 5
14057: PUSH
14058: FOR_IN
14059: IFFALSE 14200
// begin d := rand ( 0 , 5 ) ;
14061: LD_ADDR_VAR 0 4
14065: PUSH
14066: LD_INT 0
14068: PPUSH
14069: LD_INT 5
14071: PPUSH
14072: CALL_OW 12
14076: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 250
14091: PPUSH
14092: LD_VAR 0 4
14096: PPUSH
14097: LD_INT 3
14099: PPUSH
14100: LD_INT 12
14102: PPUSH
14103: CALL_OW 12
14107: PPUSH
14108: CALL_OW 272
14112: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 251
14127: PPUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 12
14138: PPUSH
14139: CALL_OW 12
14143: PPUSH
14144: CALL_OW 273
14148: ST_TO_ADDR
// if ValidHex ( x , y ) then
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: CALL_OW 488
14163: IFFALSE 14198
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: LD_VAR 0 2
14174: PPUSH
14175: LD_VAR 0 3
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 6
14185: PPUSH
14186: CALL_OW 12
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 483
// end ;
14198: GO 14058
14200: POP
14201: POP
// end ;
14202: PPOPN 5
14204: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14205: LD_EXP 8
14209: PUSH
14210: LD_EXP 43
14214: AND
14215: IFFALSE 14309
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14224: LD_ADDR_VAR 0 2
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 32
14243: PUSH
14244: LD_INT 1
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// if not tmp then
14271: LD_VAR 0 2
14275: NOT
14276: IFFALSE 14280
// exit ;
14278: GO 14309
// for i in tmp do
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_VAR 0 2
14289: PUSH
14290: FOR_IN
14291: IFFALSE 14307
// SetFuel ( i , 0 ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 0
14300: PPUSH
14301: CALL_OW 240
14305: GO 14290
14307: POP
14308: POP
// end ;
14309: PPOPN 2
14311: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14312: LD_EXP 8
14316: PUSH
14317: LD_EXP 44
14321: AND
14322: IFFALSE 14388
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14330: LD_ADDR_VAR 0 1
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_OWVAR 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 29
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if not tmp then
14366: LD_VAR 0 1
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14388
// DestroyUnit ( tmp [ 1 ] ) ;
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 1
14382: ARRAY
14383: PPUSH
14384: CALL_OW 65
// end ;
14388: PPOPN 1
14390: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14391: LD_EXP 8
14395: PUSH
14396: LD_EXP 46
14400: AND
14401: IFFALSE 14530
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
// begin uc_side := 0 ;
14409: LD_ADDR_OWVAR 20
14413: PUSH
14414: LD_INT 0
14416: ST_TO_ADDR
// uc_nation := nation_arabian ;
14417: LD_ADDR_OWVAR 21
14421: PUSH
14422: LD_INT 2
14424: ST_TO_ADDR
// hc_gallery :=  ;
14425: LD_ADDR_OWVAR 33
14429: PUSH
14430: LD_STRING 
14432: ST_TO_ADDR
// hc_name :=  ;
14433: LD_ADDR_OWVAR 26
14437: PUSH
14438: LD_STRING 
14440: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14441: LD_INT 1
14443: PPUSH
14444: LD_INT 11
14446: PPUSH
14447: LD_INT 10
14449: PPUSH
14450: CALL_OW 380
// un := CreateHuman ;
14454: LD_ADDR_VAR 0 1
14458: PUSH
14459: CALL_OW 44
14463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14476: LD_INT 35
14478: PPUSH
14479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14483: LD_VAR 0 1
14487: PPUSH
14488: LD_INT 22
14490: PUSH
14491: LD_OWVAR 2
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PPUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 74
14514: PPUSH
14515: CALL_OW 115
// until IsDead ( un ) ;
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 301
14528: IFFALSE 14476
// end ;
14530: PPOPN 1
14532: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14533: LD_EXP 8
14537: PUSH
14538: LD_EXP 48
14542: AND
14543: IFFALSE 14555
14545: GO 14547
14547: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14548: LD_STRING earthquake(getX(game), 0, 32)
14550: PPUSH
14551: CALL_OW 559
14555: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14556: LD_EXP 8
14560: PUSH
14561: LD_EXP 49
14565: AND
14566: IFFALSE 14657
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
// begin enable ;
14574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14575: LD_ADDR_VAR 0 1
14579: PUSH
14580: LD_INT 22
14582: PUSH
14583: LD_OWVAR 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 2
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 33
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PPUSH
14617: CALL_OW 69
14621: ST_TO_ADDR
// if not tmp then
14622: LD_VAR 0 1
14626: NOT
14627: IFFALSE 14631
// exit ;
14629: GO 14657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: PPUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 12
14648: ARRAY
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 234
// end ;
14657: PPOPN 1
14659: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14660: LD_EXP 8
14664: PUSH
14665: LD_EXP 50
14669: AND
14670: IFFALSE 14811
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
14679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: LD_INT 22
14687: PUSH
14688: LD_OWVAR 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 25
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: ST_TO_ADDR
// if not tmp then
14716: LD_VAR 0 3
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14811
// un := tmp [ rand ( 1 , tmp ) ] ;
14725: LD_ADDR_VAR 0 2
14729: PUSH
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: PPUSH
14738: LD_VAR 0 3
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// if Crawls ( un ) then
14749: LD_VAR 0 2
14753: PPUSH
14754: CALL_OW 318
14758: IFFALSE 14769
// ComWalk ( un ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14769: LD_VAR 0 2
14773: PPUSH
14774: LD_INT 9
14776: PPUSH
14777: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14781: LD_INT 28
14783: PPUSH
14784: LD_OWVAR 2
14788: PPUSH
14789: LD_INT 2
14791: PPUSH
14792: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14796: LD_INT 29
14798: PPUSH
14799: LD_OWVAR 2
14803: PPUSH
14804: LD_INT 2
14806: PPUSH
14807: CALL_OW 322
// end ;
14811: PPOPN 3
14813: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14814: LD_EXP 8
14818: PUSH
14819: LD_EXP 51
14823: AND
14824: IFFALSE 14935
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
14833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14834: LD_ADDR_VAR 0 3
14838: PUSH
14839: LD_INT 22
14841: PUSH
14842: LD_OWVAR 2
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 25
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: ST_TO_ADDR
// if not tmp then
14870: LD_VAR 0 3
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 14935
// un := tmp [ rand ( 1 , tmp ) ] ;
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: CALL_OW 12
14901: ARRAY
14902: ST_TO_ADDR
// if Crawls ( un ) then
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 318
14912: IFFALSE 14923
// ComWalk ( un ) ;
14914: LD_VAR 0 2
14918: PPUSH
14919: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14923: LD_VAR 0 2
14927: PPUSH
14928: LD_INT 8
14930: PPUSH
14931: CALL_OW 336
// end ;
14935: PPOPN 3
14937: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14938: LD_EXP 8
14942: PUSH
14943: LD_EXP 52
14947: AND
14948: IFFALSE 15092
14950: GO 14952
14952: DISABLE
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_OWVAR 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 21
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 34
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 34
14999: PUSH
15000: LD_INT 51
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 34
15009: PUSH
15010: LD_INT 32
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: PPUSH
15028: CALL_OW 69
15032: ST_TO_ADDR
// if not tmp then
15033: LD_VAR 0 2
15037: NOT
15038: IFFALSE 15042
// exit ;
15040: GO 15092
// for i in tmp do
15042: LD_ADDR_VAR 0 1
15046: PUSH
15047: LD_VAR 0 2
15051: PUSH
15052: FOR_IN
15053: IFFALSE 15090
// if GetCargo ( i , mat_artifact ) = 0 then
15055: LD_VAR 0 1
15059: PPUSH
15060: LD_INT 4
15062: PPUSH
15063: CALL_OW 289
15067: PUSH
15068: LD_INT 0
15070: EQUAL
15071: IFFALSE 15088
// SetCargo ( i , mat_siberit , 100 ) ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 3
15080: PPUSH
15081: LD_INT 100
15083: PPUSH
15084: CALL_OW 290
15088: GO 15052
15090: POP
15091: POP
// end ;
15092: PPOPN 2
15094: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15095: LD_EXP 8
15099: PUSH
15100: LD_EXP 53
15104: AND
15105: IFFALSE 15288
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 69
15135: ST_TO_ADDR
// if not tmp then
15136: LD_VAR 0 2
15140: NOT
15141: IFFALSE 15145
// exit ;
15143: GO 15288
// for i := 1 to 2 do
15145: LD_ADDR_VAR 0 1
15149: PUSH
15150: DOUBLE
15151: LD_INT 1
15153: DEC
15154: ST_TO_ADDR
15155: LD_INT 2
15157: PUSH
15158: FOR_TO
15159: IFFALSE 15286
// begin uc_side := your_side ;
15161: LD_ADDR_OWVAR 20
15165: PUSH
15166: LD_OWVAR 2
15170: ST_TO_ADDR
// uc_nation := nation_american ;
15171: LD_ADDR_OWVAR 21
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// vc_chassis := us_morphling ;
15179: LD_ADDR_OWVAR 37
15183: PUSH
15184: LD_INT 5
15186: ST_TO_ADDR
// vc_engine := engine_siberite ;
15187: LD_ADDR_OWVAR 39
15191: PUSH
15192: LD_INT 3
15194: ST_TO_ADDR
// vc_control := control_computer ;
15195: LD_ADDR_OWVAR 38
15199: PUSH
15200: LD_INT 3
15202: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15203: LD_ADDR_OWVAR 40
15207: PUSH
15208: LD_INT 10
15210: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15211: LD_VAR 0 2
15215: PUSH
15216: LD_INT 1
15218: ARRAY
15219: PPUSH
15220: CALL_OW 310
15224: NOT
15225: IFFALSE 15272
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15227: CALL_OW 45
15231: PPUSH
15232: LD_VAR 0 2
15236: PUSH
15237: LD_INT 1
15239: ARRAY
15240: PPUSH
15241: CALL_OW 250
15245: PPUSH
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: PPUSH
15255: CALL_OW 251
15259: PPUSH
15260: LD_INT 12
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 50
15270: GO 15284
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15272: CALL_OW 45
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 51
// end ;
15284: GO 15158
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15291: LD_EXP 8
15295: PUSH
15296: LD_EXP 54
15300: AND
15301: IFFALSE 15523
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15314: LD_ADDR_VAR 0 6
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_OWVAR 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: LD_INT 23
15346: PUSH
15347: LD_INT 0
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 6
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15523
// s1 := rand ( 1 , 4 ) ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 4
15387: PPUSH
15388: CALL_OW 12
15392: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15393: LD_ADDR_VAR 0 4
15397: PUSH
15398: LD_VAR 0 6
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 259
15416: ST_TO_ADDR
// if s1 = 1 then
15417: LD_VAR 0 2
15421: PUSH
15422: LD_INT 1
15424: EQUAL
15425: IFFALSE 15445
// s2 := rand ( 2 , 4 ) else
15427: LD_ADDR_VAR 0 3
15431: PUSH
15432: LD_INT 2
15434: PPUSH
15435: LD_INT 4
15437: PPUSH
15438: CALL_OW 12
15442: ST_TO_ADDR
15443: GO 15453
// s2 := 1 ;
15445: LD_ADDR_VAR 0 3
15449: PUSH
15450: LD_INT 1
15452: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15453: LD_ADDR_VAR 0 5
15457: PUSH
15458: LD_VAR 0 6
15462: PUSH
15463: LD_INT 1
15465: ARRAY
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: CALL_OW 259
15476: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15477: LD_VAR 0 6
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 5
15495: PPUSH
15496: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15500: LD_VAR 0 6
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: CALL_OW 237
// end ;
15523: PPOPN 6
15525: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15526: LD_EXP 8
15530: PUSH
15531: LD_EXP 55
15535: AND
15536: IFFALSE 15615
15538: GO 15540
15540: DISABLE
15541: LD_INT 0
15543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15544: LD_ADDR_VAR 0 1
15548: PUSH
15549: LD_INT 22
15551: PUSH
15552: LD_OWVAR 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PPUSH
15575: CALL_OW 69
15579: ST_TO_ADDR
// if not tmp then
15580: LD_VAR 0 1
15584: NOT
15585: IFFALSE 15589
// exit ;
15587: GO 15615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15589: LD_VAR 0 1
15593: PUSH
15594: LD_INT 1
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 12
15606: ARRAY
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 234
// end ;
15615: PPOPN 1
15617: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15618: LD_EXP 8
15622: PUSH
15623: LD_EXP 56
15627: AND
15628: IFFALSE 15740
15630: GO 15632
15632: DISABLE
15633: LD_INT 0
15635: PPUSH
15636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_OWVAR 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: LD_INT 30
15659: PUSH
15660: LD_INT 27
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 30
15669: PUSH
15670: LD_INT 26
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 28
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: ST_TO_ADDR
// if not tmp then
15702: LD_VAR 0 2
15706: NOT
15707: IFFALSE 15711
// exit ;
15709: GO 15740
// for i in tmp do
15711: LD_ADDR_VAR 0 1
15715: PUSH
15716: LD_VAR 0 2
15720: PUSH
15721: FOR_IN
15722: IFFALSE 15738
// SetLives ( i , 1 ) ;
15724: LD_VAR 0 1
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 234
15736: GO 15721
15738: POP
15739: POP
// end ;
15740: PPOPN 2
15742: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15743: LD_EXP 8
15747: PUSH
15748: LD_EXP 57
15752: AND
15753: IFFALSE 16040
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
// begin i := rand ( 1 , 7 ) ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 1
15770: PPUSH
15771: LD_INT 7
15773: PPUSH
15774: CALL_OW 12
15778: ST_TO_ADDR
// case i of 1 :
15779: LD_VAR 0 1
15783: PUSH
15784: LD_INT 1
15786: DOUBLE
15787: EQUAL
15788: IFTRUE 15792
15790: GO 15802
15792: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15793: LD_STRING earthquake(getX(game), 0, 32)
15795: PPUSH
15796: CALL_OW 559
15800: GO 16040
15802: LD_INT 2
15804: DOUBLE
15805: EQUAL
15806: IFTRUE 15810
15808: GO 15824
15810: POP
// begin ToLua ( displayStucuk(); ) ;
15811: LD_STRING displayStucuk();
15813: PPUSH
15814: CALL_OW 559
// ResetFog ;
15818: CALL_OW 335
// end ; 3 :
15822: GO 16040
15824: LD_INT 3
15826: DOUBLE
15827: EQUAL
15828: IFTRUE 15832
15830: GO 15936
15832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15833: LD_ADDR_VAR 0 2
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_OWVAR 2
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 25
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 2
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 16040
// un := tmp [ rand ( 1 , tmp ) ] ;
15878: LD_ADDR_VAR 0 3
15882: PUSH
15883: LD_VAR 0 2
15887: PUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_VAR 0 2
15895: PPUSH
15896: CALL_OW 12
15900: ARRAY
15901: ST_TO_ADDR
// if Crawls ( un ) then
15902: LD_VAR 0 3
15906: PPUSH
15907: CALL_OW 318
15911: IFFALSE 15922
// ComWalk ( un ) ;
15913: LD_VAR 0 3
15917: PPUSH
15918: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_INT 8
15929: PPUSH
15930: CALL_OW 336
// end ; 4 :
15934: GO 16040
15936: LD_INT 4
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 16018
15944: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 30
15964: PUSH
15965: LD_INT 29
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: ST_TO_ADDR
// if not tmp then
15981: LD_VAR 0 2
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16040
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15990: LD_VAR 0 2
15994: PUSH
15995: LD_INT 1
15997: ARRAY
15998: PPUSH
15999: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16003: LD_VAR 0 2
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: CALL_OW 65
// end ; 5 .. 7 :
16016: GO 16040
16018: LD_INT 5
16020: DOUBLE
16021: GREATEREQUAL
16022: IFFALSE 16030
16024: LD_INT 7
16026: DOUBLE
16027: LESSEQUAL
16028: IFTRUE 16032
16030: GO 16039
16032: POP
// StreamSibBomb ; end ;
16033: CALL 12277 0 0
16037: GO 16040
16039: POP
// end ;
16040: PPOPN 3
16042: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16043: LD_EXP 8
16047: PUSH
16048: LD_EXP 58
16052: AND
16053: IFFALSE 16209
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_INT 81
16070: PUSH
16071: LD_OWVAR 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: LD_INT 21
16085: PUSH
16086: LD_INT 1
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: ST_TO_ADDR
// if not tmp then
16117: LD_VAR 0 2
16121: NOT
16122: IFFALSE 16126
// exit ;
16124: GO 16209
// p := 0 ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_INT 0
16133: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16134: LD_INT 35
16136: PPUSH
16137: CALL_OW 67
// p := p + 1 ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 1
16153: PLUS
16154: ST_TO_ADDR
// for i in tmp do
16155: LD_ADDR_VAR 0 1
16159: PUSH
16160: LD_VAR 0 2
16164: PUSH
16165: FOR_IN
16166: IFFALSE 16197
// if GetLives ( i ) < 1000 then
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 256
16177: PUSH
16178: LD_INT 1000
16180: LESS
16181: IFFALSE 16195
// SetLives ( i , 1000 ) ;
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_INT 1000
16190: PPUSH
16191: CALL_OW 234
16195: GO 16165
16197: POP
16198: POP
// until p > 20 ;
16199: LD_VAR 0 3
16203: PUSH
16204: LD_INT 20
16206: GREATER
16207: IFFALSE 16134
// end ;
16209: PPOPN 3
16211: END
// every 0 0$1 trigger StreamModeActive and sTime do
16212: LD_EXP 8
16216: PUSH
16217: LD_EXP 59
16221: AND
16222: IFFALSE 16257
16224: GO 16226
16226: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16227: LD_INT 28
16229: PPUSH
16230: LD_OWVAR 2
16234: PPUSH
16235: LD_INT 2
16237: PPUSH
16238: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16242: LD_INT 30
16244: PPUSH
16245: LD_OWVAR 2
16249: PPUSH
16250: LD_INT 2
16252: PPUSH
16253: CALL_OW 322
// end ;
16257: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16258: LD_EXP 8
16262: PUSH
16263: LD_EXP 60
16267: AND
16268: IFFALSE 16389
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_OWVAR 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 21
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 3
16306: PUSH
16307: LD_INT 23
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: ST_TO_ADDR
// if not tmp then
16331: LD_VAR 0 2
16335: NOT
16336: IFFALSE 16340
// exit ;
16338: GO 16389
// for i in tmp do
16340: LD_ADDR_VAR 0 1
16344: PUSH
16345: LD_VAR 0 2
16349: PUSH
16350: FOR_IN
16351: IFFALSE 16387
// begin if Crawls ( i ) then
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 318
16362: IFFALSE 16373
// ComWalk ( i ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 138
// SetClass ( i , 2 ) ;
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_INT 2
16380: PPUSH
16381: CALL_OW 336
// end ;
16385: GO 16350
16387: POP
16388: POP
// end ;
16389: PPOPN 2
16391: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16392: LD_EXP 8
16396: PUSH
16397: LD_EXP 61
16401: AND
16402: IFFALSE 16690
16404: GO 16406
16406: DISABLE
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
16411: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16412: LD_OWVAR 2
16416: PPUSH
16417: LD_INT 9
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: LD_INT 1
16425: PPUSH
16426: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16430: LD_INT 9
16432: PPUSH
16433: LD_OWVAR 2
16437: PPUSH
16438: CALL_OW 343
// uc_side := 9 ;
16442: LD_ADDR_OWVAR 20
16446: PUSH
16447: LD_INT 9
16449: ST_TO_ADDR
// uc_nation := 2 ;
16450: LD_ADDR_OWVAR 21
16454: PUSH
16455: LD_INT 2
16457: ST_TO_ADDR
// hc_name := Dark Warrior ;
16458: LD_ADDR_OWVAR 26
16462: PUSH
16463: LD_STRING Dark Warrior
16465: ST_TO_ADDR
// hc_gallery :=  ;
16466: LD_ADDR_OWVAR 33
16470: PUSH
16471: LD_STRING 
16473: ST_TO_ADDR
// hc_noskilllimit := true ;
16474: LD_ADDR_OWVAR 76
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16482: LD_ADDR_OWVAR 31
16486: PUSH
16487: LD_INT 30
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 30
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: ST_TO_ADDR
// un := CreateHuman ;
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: CALL_OW 44
16514: ST_TO_ADDR
// hc_noskilllimit := false ;
16515: LD_ADDR_OWVAR 76
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16523: LD_VAR 0 3
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 51
// ToLua ( playRanger() ) ;
16535: LD_STRING playRanger()
16537: PPUSH
16538: CALL_OW 559
// p := 0 ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16550: LD_INT 35
16552: PPUSH
16553: CALL_OW 67
// p := p + 1 ;
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_VAR 0 2
16566: PUSH
16567: LD_INT 1
16569: PLUS
16570: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16571: LD_VAR 0 3
16575: PPUSH
16576: CALL_OW 256
16580: PUSH
16581: LD_INT 1000
16583: LESS
16584: IFFALSE 16598
// SetLives ( un , 1000 ) ;
16586: LD_VAR 0 3
16590: PPUSH
16591: LD_INT 1000
16593: PPUSH
16594: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16598: LD_VAR 0 3
16602: PPUSH
16603: LD_INT 81
16605: PUSH
16606: LD_OWVAR 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 91
16617: PUSH
16618: LD_VAR 0 3
16622: PUSH
16623: LD_INT 30
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: CALL_OW 74
16649: PPUSH
16650: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 80
16661: GREATER
16662: PUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: CALL_OW 301
16672: OR
16673: IFFALSE 16550
// if un then
16675: LD_VAR 0 3
16679: IFFALSE 16690
// RemoveUnit ( un ) ;
16681: LD_VAR 0 3
16685: PPUSH
16686: CALL_OW 64
// end ;
16690: PPOPN 3
16692: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16693: LD_EXP 62
16697: IFFALSE 16813
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16707: LD_ADDR_VAR 0 2
16711: PUSH
16712: LD_INT 81
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16743: LD_STRING playComputer()
16745: PPUSH
16746: CALL_OW 559
// if not tmp then
16750: LD_VAR 0 2
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 16813
// for i in tmp do
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16811
// for j := 1 to 4 do
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: DOUBLE
16778: LD_INT 1
16780: DEC
16781: ST_TO_ADDR
16782: LD_INT 4
16784: PUSH
16785: FOR_TO
16786: IFFALSE 16807
// SetSkill ( i , j , 10 ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_INT 10
16800: PPUSH
16801: CALL_OW 237
16805: GO 16785
16807: POP
16808: POP
16809: GO 16769
16811: POP
16812: POP
// end ;
16813: PPOPN 3
16815: END
// every 0 0$1 trigger s30 do var i , tmp ;
16816: LD_EXP 63
16820: IFFALSE 16889
16822: GO 16824
16824: DISABLE
16825: LD_INT 0
16827: PPUSH
16828: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: ST_TO_ADDR
// if not tmp then
16851: LD_VAR 0 2
16855: NOT
16856: IFFALSE 16860
// exit ;
16858: GO 16889
// for i in tmp do
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_VAR 0 2
16869: PUSH
16870: FOR_IN
16871: IFFALSE 16887
// SetLives ( i , 300 ) ;
16873: LD_VAR 0 1
16877: PPUSH
16878: LD_INT 300
16880: PPUSH
16881: CALL_OW 234
16885: GO 16870
16887: POP
16888: POP
// end ;
16889: PPOPN 2
16891: END
// every 0 0$1 trigger s60 do var i , tmp ;
16892: LD_EXP 64
16896: IFFALSE 16965
16898: GO 16900
16900: DISABLE
16901: LD_INT 0
16903: PPUSH
16904: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16905: LD_ADDR_VAR 0 2
16909: PUSH
16910: LD_INT 22
16912: PUSH
16913: LD_OWVAR 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PPUSH
16922: CALL_OW 69
16926: ST_TO_ADDR
// if not tmp then
16927: LD_VAR 0 2
16931: NOT
16932: IFFALSE 16936
// exit ;
16934: GO 16965
// for i in tmp do
16936: LD_ADDR_VAR 0 1
16940: PUSH
16941: LD_VAR 0 2
16945: PUSH
16946: FOR_IN
16947: IFFALSE 16963
// SetLives ( i , 600 ) ;
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_INT 600
16956: PPUSH
16957: CALL_OW 234
16961: GO 16946
16963: POP
16964: POP
// end ;
16965: PPOPN 2
16967: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16968: LD_INT 0
16970: PPUSH
// case cmd of 301 :
16971: LD_VAR 0 1
16975: PUSH
16976: LD_INT 301
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17016
16984: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16985: LD_VAR 0 6
16989: PPUSH
16990: LD_VAR 0 7
16994: PPUSH
16995: LD_VAR 0 8
16999: PPUSH
17000: LD_VAR 0 4
17004: PPUSH
17005: LD_VAR 0 5
17009: PPUSH
17010: CALL 18225 0 5
17014: GO 17137
17016: LD_INT 302
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17061
17024: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17025: LD_VAR 0 6
17029: PPUSH
17030: LD_VAR 0 7
17034: PPUSH
17035: LD_VAR 0 8
17039: PPUSH
17040: LD_VAR 0 9
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_VAR 0 5
17054: PPUSH
17055: CALL 18316 0 6
17059: GO 17137
17061: LD_INT 303
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17106
17069: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17070: LD_VAR 0 6
17074: PPUSH
17075: LD_VAR 0 7
17079: PPUSH
17080: LD_VAR 0 8
17084: PPUSH
17085: LD_VAR 0 9
17089: PPUSH
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL 17142 0 6
17104: GO 17137
17106: LD_INT 304
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17136
17114: POP
// hHackTeleport ( unit , x , y ) ; end ;
17115: LD_VAR 0 2
17119: PPUSH
17120: LD_VAR 0 4
17124: PPUSH
17125: LD_VAR 0 5
17129: PPUSH
17130: CALL 18909 0 3
17134: GO 17137
17136: POP
// end ;
17137: LD_VAR 0 12
17141: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17146: LD_VAR 0 1
17150: PUSH
17151: LD_INT 1
17153: LESS
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 3
17162: GREATER
17163: OR
17164: PUSH
17165: LD_VAR 0 5
17169: PPUSH
17170: LD_VAR 0 6
17174: PPUSH
17175: CALL_OW 428
17179: OR
17180: IFFALSE 17184
// exit ;
17182: GO 17912
// uc_side := your_side ;
17184: LD_ADDR_OWVAR 20
17188: PUSH
17189: LD_OWVAR 2
17193: ST_TO_ADDR
// uc_nation := nation ;
17194: LD_ADDR_OWVAR 21
17198: PUSH
17199: LD_VAR 0 1
17203: ST_TO_ADDR
// bc_level = 1 ;
17204: LD_ADDR_OWVAR 43
17208: PUSH
17209: LD_INT 1
17211: ST_TO_ADDR
// case btype of 1 :
17212: LD_VAR 0 2
17216: PUSH
17217: LD_INT 1
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17236
17225: POP
// bc_type := b_depot ; 2 :
17226: LD_ADDR_OWVAR 42
17230: PUSH
17231: LD_INT 0
17233: ST_TO_ADDR
17234: GO 17856
17236: LD_INT 2
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17255
17244: POP
// bc_type := b_warehouse ; 3 :
17245: LD_ADDR_OWVAR 42
17249: PUSH
17250: LD_INT 1
17252: ST_TO_ADDR
17253: GO 17856
17255: LD_INT 3
17257: DOUBLE
17258: EQUAL
17259: IFTRUE 17263
17261: GO 17274
17263: POP
// bc_type := b_lab ; 4 .. 9 :
17264: LD_ADDR_OWVAR 42
17268: PUSH
17269: LD_INT 6
17271: ST_TO_ADDR
17272: GO 17856
17274: LD_INT 4
17276: DOUBLE
17277: GREATEREQUAL
17278: IFFALSE 17286
17280: LD_INT 9
17282: DOUBLE
17283: LESSEQUAL
17284: IFTRUE 17288
17286: GO 17348
17288: POP
// begin bc_type := b_lab_half ;
17289: LD_ADDR_OWVAR 42
17293: PUSH
17294: LD_INT 7
17296: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17297: LD_ADDR_OWVAR 44
17301: PUSH
17302: LD_INT 10
17304: PUSH
17305: LD_INT 11
17307: PUSH
17308: LD_INT 12
17310: PUSH
17311: LD_INT 15
17313: PUSH
17314: LD_INT 14
17316: PUSH
17317: LD_INT 13
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 3
17335: MINUS
17336: ARRAY
17337: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17338: LD_ADDR_OWVAR 45
17342: PUSH
17343: LD_INT 9
17345: ST_TO_ADDR
// end ; 10 .. 13 :
17346: GO 17856
17348: LD_INT 10
17350: DOUBLE
17351: GREATEREQUAL
17352: IFFALSE 17360
17354: LD_INT 13
17356: DOUBLE
17357: LESSEQUAL
17358: IFTRUE 17362
17360: GO 17439
17362: POP
// begin bc_type := b_lab_full ;
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 8
17370: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17371: LD_ADDR_OWVAR 44
17375: PUSH
17376: LD_INT 10
17378: PUSH
17379: LD_INT 12
17381: PUSH
17382: LD_INT 14
17384: PUSH
17385: LD_INT 13
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 9
17401: MINUS
17402: ARRAY
17403: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17404: LD_ADDR_OWVAR 45
17408: PUSH
17409: LD_INT 11
17411: PUSH
17412: LD_INT 15
17414: PUSH
17415: LD_INT 12
17417: PUSH
17418: LD_INT 15
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: PUSH
17427: LD_VAR 0 2
17431: PUSH
17432: LD_INT 9
17434: MINUS
17435: ARRAY
17436: ST_TO_ADDR
// end ; 14 :
17437: GO 17856
17439: LD_INT 14
17441: DOUBLE
17442: EQUAL
17443: IFTRUE 17447
17445: GO 17458
17447: POP
// bc_type := b_workshop ; 15 :
17448: LD_ADDR_OWVAR 42
17452: PUSH
17453: LD_INT 2
17455: ST_TO_ADDR
17456: GO 17856
17458: LD_INT 15
17460: DOUBLE
17461: EQUAL
17462: IFTRUE 17466
17464: GO 17477
17466: POP
// bc_type := b_factory ; 16 :
17467: LD_ADDR_OWVAR 42
17471: PUSH
17472: LD_INT 3
17474: ST_TO_ADDR
17475: GO 17856
17477: LD_INT 16
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17496
17485: POP
// bc_type := b_ext_gun ; 17 :
17486: LD_ADDR_OWVAR 42
17490: PUSH
17491: LD_INT 17
17493: ST_TO_ADDR
17494: GO 17856
17496: LD_INT 17
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17532
17504: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17505: LD_ADDR_OWVAR 42
17509: PUSH
17510: LD_INT 19
17512: PUSH
17513: LD_INT 23
17515: PUSH
17516: LD_INT 19
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: LD_VAR 0 1
17528: ARRAY
17529: ST_TO_ADDR
17530: GO 17856
17532: LD_INT 18
17534: DOUBLE
17535: EQUAL
17536: IFTRUE 17540
17538: GO 17551
17540: POP
// bc_type := b_ext_radar ; 19 :
17541: LD_ADDR_OWVAR 42
17545: PUSH
17546: LD_INT 20
17548: ST_TO_ADDR
17549: GO 17856
17551: LD_INT 19
17553: DOUBLE
17554: EQUAL
17555: IFTRUE 17559
17557: GO 17570
17559: POP
// bc_type := b_ext_radio ; 20 :
17560: LD_ADDR_OWVAR 42
17564: PUSH
17565: LD_INT 22
17567: ST_TO_ADDR
17568: GO 17856
17570: LD_INT 20
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17589
17578: POP
// bc_type := b_ext_siberium ; 21 :
17579: LD_ADDR_OWVAR 42
17583: PUSH
17584: LD_INT 21
17586: ST_TO_ADDR
17587: GO 17856
17589: LD_INT 21
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 17608
17597: POP
// bc_type := b_ext_computer ; 22 :
17598: LD_ADDR_OWVAR 42
17602: PUSH
17603: LD_INT 24
17605: ST_TO_ADDR
17606: GO 17856
17608: LD_INT 22
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 17627
17616: POP
// bc_type := b_ext_track ; 23 :
17617: LD_ADDR_OWVAR 42
17621: PUSH
17622: LD_INT 16
17624: ST_TO_ADDR
17625: GO 17856
17627: LD_INT 23
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17646
17635: POP
// bc_type := b_ext_laser ; 24 :
17636: LD_ADDR_OWVAR 42
17640: PUSH
17641: LD_INT 25
17643: ST_TO_ADDR
17644: GO 17856
17646: LD_INT 24
17648: DOUBLE
17649: EQUAL
17650: IFTRUE 17654
17652: GO 17665
17654: POP
// bc_type := b_control_tower ; 25 :
17655: LD_ADDR_OWVAR 42
17659: PUSH
17660: LD_INT 36
17662: ST_TO_ADDR
17663: GO 17856
17665: LD_INT 25
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17673
17671: GO 17684
17673: POP
// bc_type := b_breastwork ; 26 :
17674: LD_ADDR_OWVAR 42
17678: PUSH
17679: LD_INT 31
17681: ST_TO_ADDR
17682: GO 17856
17684: LD_INT 26
17686: DOUBLE
17687: EQUAL
17688: IFTRUE 17692
17690: GO 17703
17692: POP
// bc_type := b_bunker ; 27 :
17693: LD_ADDR_OWVAR 42
17697: PUSH
17698: LD_INT 32
17700: ST_TO_ADDR
17701: GO 17856
17703: LD_INT 27
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17722
17711: POP
// bc_type := b_turret ; 28 :
17712: LD_ADDR_OWVAR 42
17716: PUSH
17717: LD_INT 33
17719: ST_TO_ADDR
17720: GO 17856
17722: LD_INT 28
17724: DOUBLE
17725: EQUAL
17726: IFTRUE 17730
17728: GO 17741
17730: POP
// bc_type := b_armoury ; 29 :
17731: LD_ADDR_OWVAR 42
17735: PUSH
17736: LD_INT 4
17738: ST_TO_ADDR
17739: GO 17856
17741: LD_INT 29
17743: DOUBLE
17744: EQUAL
17745: IFTRUE 17749
17747: GO 17760
17749: POP
// bc_type := b_barracks ; 30 :
17750: LD_ADDR_OWVAR 42
17754: PUSH
17755: LD_INT 5
17757: ST_TO_ADDR
17758: GO 17856
17760: LD_INT 30
17762: DOUBLE
17763: EQUAL
17764: IFTRUE 17768
17766: GO 17779
17768: POP
// bc_type := b_solar_power ; 31 :
17769: LD_ADDR_OWVAR 42
17773: PUSH
17774: LD_INT 27
17776: ST_TO_ADDR
17777: GO 17856
17779: LD_INT 31
17781: DOUBLE
17782: EQUAL
17783: IFTRUE 17787
17785: GO 17798
17787: POP
// bc_type := b_oil_power ; 32 :
17788: LD_ADDR_OWVAR 42
17792: PUSH
17793: LD_INT 26
17795: ST_TO_ADDR
17796: GO 17856
17798: LD_INT 32
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 17817
17806: POP
// bc_type := b_siberite_power ; 33 :
17807: LD_ADDR_OWVAR 42
17811: PUSH
17812: LD_INT 28
17814: ST_TO_ADDR
17815: GO 17856
17817: LD_INT 33
17819: DOUBLE
17820: EQUAL
17821: IFTRUE 17825
17823: GO 17836
17825: POP
// bc_type := b_oil_mine ; 34 :
17826: LD_ADDR_OWVAR 42
17830: PUSH
17831: LD_INT 29
17833: ST_TO_ADDR
17834: GO 17856
17836: LD_INT 34
17838: DOUBLE
17839: EQUAL
17840: IFTRUE 17844
17842: GO 17855
17844: POP
// bc_type := b_siberite_mine ; end ;
17845: LD_ADDR_OWVAR 42
17849: PUSH
17850: LD_INT 30
17852: ST_TO_ADDR
17853: GO 17856
17855: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17856: LD_ADDR_VAR 0 8
17860: PUSH
17861: LD_VAR 0 5
17865: PPUSH
17866: LD_VAR 0 6
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: CALL_OW 47
17880: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17881: LD_OWVAR 42
17885: PUSH
17886: LD_INT 32
17888: PUSH
17889: LD_INT 33
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: IN
17896: IFFALSE 17912
// PlaceWeaponTurret ( b , weapon ) ;
17898: LD_VAR 0 8
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: CALL_OW 431
// end ;
17912: LD_VAR 0 7
17916: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17917: LD_INT 0
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17923: LD_ADDR_VAR 0 4
17927: PUSH
17928: LD_INT 22
17930: PUSH
17931: LD_OWVAR 2
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 30
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 30
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 69
17976: ST_TO_ADDR
// if not tmp then
17977: LD_VAR 0 4
17981: NOT
17982: IFFALSE 17986
// exit ;
17984: GO 18045
// for i in tmp do
17986: LD_ADDR_VAR 0 2
17990: PUSH
17991: LD_VAR 0 4
17995: PUSH
17996: FOR_IN
17997: IFFALSE 18043
// for j = 1 to 3 do
17999: LD_ADDR_VAR 0 3
18003: PUSH
18004: DOUBLE
18005: LD_INT 1
18007: DEC
18008: ST_TO_ADDR
18009: LD_INT 3
18011: PUSH
18012: FOR_TO
18013: IFFALSE 18039
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18015: LD_VAR 0 2
18019: PPUSH
18020: CALL_OW 274
18024: PPUSH
18025: LD_VAR 0 3
18029: PPUSH
18030: LD_INT 99999
18032: PPUSH
18033: CALL_OW 277
18037: GO 18012
18039: POP
18040: POP
18041: GO 17996
18043: POP
18044: POP
// end ;
18045: LD_VAR 0 1
18049: RET
// export function hHackSetLevel10 ; var i , j ; begin
18050: LD_INT 0
18052: PPUSH
18053: PPUSH
18054: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18055: LD_ADDR_VAR 0 2
18059: PUSH
18060: LD_INT 21
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18128
// if IsSelected ( i ) then
18078: LD_VAR 0 2
18082: PPUSH
18083: CALL_OW 306
18087: IFFALSE 18126
// begin for j := 1 to 4 do
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: DOUBLE
18095: LD_INT 1
18097: DEC
18098: ST_TO_ADDR
18099: LD_INT 4
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18124
// SetSkill ( i , j , 10 ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: LD_VAR 0 3
18114: PPUSH
18115: LD_INT 10
18117: PPUSH
18118: CALL_OW 237
18122: GO 18102
18124: POP
18125: POP
// end ;
18126: GO 18075
18128: POP
18129: POP
// end ;
18130: LD_VAR 0 1
18134: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18135: LD_INT 0
18137: PPUSH
18138: PPUSH
18139: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18140: LD_ADDR_VAR 0 2
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_OWVAR 2
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 21
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: PUSH
18176: FOR_IN
18177: IFFALSE 18218
// begin for j := 1 to 4 do
18179: LD_ADDR_VAR 0 3
18183: PUSH
18184: DOUBLE
18185: LD_INT 1
18187: DEC
18188: ST_TO_ADDR
18189: LD_INT 4
18191: PUSH
18192: FOR_TO
18193: IFFALSE 18214
// SetSkill ( i , j , 10 ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: LD_VAR 0 3
18204: PPUSH
18205: LD_INT 10
18207: PPUSH
18208: CALL_OW 237
18212: GO 18192
18214: POP
18215: POP
// end ;
18216: GO 18176
18218: POP
18219: POP
// end ;
18220: LD_VAR 0 1
18224: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18225: LD_INT 0
18227: PPUSH
// uc_side := your_side ;
18228: LD_ADDR_OWVAR 20
18232: PUSH
18233: LD_OWVAR 2
18237: ST_TO_ADDR
// uc_nation := nation ;
18238: LD_ADDR_OWVAR 21
18242: PUSH
18243: LD_VAR 0 1
18247: ST_TO_ADDR
// InitHc ;
18248: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18252: LD_INT 0
18254: PPUSH
18255: LD_VAR 0 2
18259: PPUSH
18260: LD_VAR 0 3
18264: PPUSH
18265: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18269: LD_VAR 0 4
18273: PPUSH
18274: LD_VAR 0 5
18278: PPUSH
18279: CALL_OW 428
18283: PUSH
18284: LD_INT 0
18286: EQUAL
18287: IFFALSE 18311
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18289: CALL_OW 44
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: LD_INT 1
18306: PPUSH
18307: CALL_OW 48
// end ;
18311: LD_VAR 0 6
18315: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18316: LD_INT 0
18318: PPUSH
18319: PPUSH
// uc_side := your_side ;
18320: LD_ADDR_OWVAR 20
18324: PUSH
18325: LD_OWVAR 2
18329: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: LD_INT 5
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: IN
18357: IFFALSE 18369
// uc_nation := nation_american else
18359: LD_ADDR_OWVAR 21
18363: PUSH
18364: LD_INT 1
18366: ST_TO_ADDR
18367: GO 18412
// if chassis in [ 11 , 12 , 13 , 14 ] then
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 11
18376: PUSH
18377: LD_INT 12
18379: PUSH
18380: LD_INT 13
18382: PUSH
18383: LD_INT 14
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: IN
18392: IFFALSE 18404
// uc_nation := nation_arabian else
18394: LD_ADDR_OWVAR 21
18398: PUSH
18399: LD_INT 2
18401: ST_TO_ADDR
18402: GO 18412
// uc_nation := nation_russian ;
18404: LD_ADDR_OWVAR 21
18408: PUSH
18409: LD_INT 3
18411: ST_TO_ADDR
// vc_chassis := chassis ;
18412: LD_ADDR_OWVAR 37
18416: PUSH
18417: LD_VAR 0 1
18421: ST_TO_ADDR
// vc_engine := engine ;
18422: LD_ADDR_OWVAR 39
18426: PUSH
18427: LD_VAR 0 2
18431: ST_TO_ADDR
// vc_control := control ;
18432: LD_ADDR_OWVAR 38
18436: PUSH
18437: LD_VAR 0 3
18441: ST_TO_ADDR
// vc_weapon := weapon ;
18442: LD_ADDR_OWVAR 40
18446: PUSH
18447: LD_VAR 0 4
18451: ST_TO_ADDR
// un := CreateVehicle ;
18452: LD_ADDR_VAR 0 8
18456: PUSH
18457: CALL_OW 45
18461: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18462: LD_VAR 0 8
18466: PPUSH
18467: LD_INT 0
18469: PPUSH
18470: LD_INT 5
18472: PPUSH
18473: CALL_OW 12
18477: PPUSH
18478: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18482: LD_VAR 0 8
18486: PPUSH
18487: LD_VAR 0 5
18491: PPUSH
18492: LD_VAR 0 6
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 48
// end ;
18504: LD_VAR 0 7
18508: RET
// export hInvincible ; every 1 do
18509: GO 18511
18511: DISABLE
// hInvincible := [ ] ;
18512: LD_ADDR_EXP 65
18516: PUSH
18517: EMPTY
18518: ST_TO_ADDR
18519: END
// every 10 do var i ;
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
// begin enable ;
18526: ENABLE
// if not hInvincible then
18527: LD_EXP 65
18531: NOT
18532: IFFALSE 18536
// exit ;
18534: GO 18580
// for i in hInvincible do
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_EXP 65
18545: PUSH
18546: FOR_IN
18547: IFFALSE 18578
// if GetLives ( i ) < 1000 then
18549: LD_VAR 0 1
18553: PPUSH
18554: CALL_OW 256
18558: PUSH
18559: LD_INT 1000
18561: LESS
18562: IFFALSE 18576
// SetLives ( i , 1000 ) ;
18564: LD_VAR 0 1
18568: PPUSH
18569: LD_INT 1000
18571: PPUSH
18572: CALL_OW 234
18576: GO 18546
18578: POP
18579: POP
// end ;
18580: PPOPN 1
18582: END
// export function hHackInvincible ; var i ; begin
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18587: LD_ADDR_VAR 0 2
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 21
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PPUSH
18620: CALL_OW 69
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18687
// if IsSelected ( i ) then
18628: LD_VAR 0 2
18632: PPUSH
18633: CALL_OW 306
18637: IFFALSE 18685
// begin if i in hInvincible then
18639: LD_VAR 0 2
18643: PUSH
18644: LD_EXP 65
18648: IN
18649: IFFALSE 18669
// hInvincible := hInvincible diff i else
18651: LD_ADDR_EXP 65
18655: PUSH
18656: LD_EXP 65
18660: PUSH
18661: LD_VAR 0 2
18665: DIFF
18666: ST_TO_ADDR
18667: GO 18685
// hInvincible := hInvincible union i ;
18669: LD_ADDR_EXP 65
18673: PUSH
18674: LD_EXP 65
18678: PUSH
18679: LD_VAR 0 2
18683: UNION
18684: ST_TO_ADDR
// end ;
18685: GO 18625
18687: POP
18688: POP
// end ;
18689: LD_VAR 0 1
18693: RET
// export function hHackInvisible ; var i , j ; begin
18694: LD_INT 0
18696: PPUSH
18697: PPUSH
18698: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: LD_INT 21
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: PUSH
18719: FOR_IN
18720: IFFALSE 18744
// if IsSelected ( i ) then
18722: LD_VAR 0 2
18726: PPUSH
18727: CALL_OW 306
18731: IFFALSE 18742
// ComForceInvisible ( i ) ;
18733: LD_VAR 0 2
18737: PPUSH
18738: CALL_OW 496
18742: GO 18719
18744: POP
18745: POP
// end ;
18746: LD_VAR 0 1
18750: RET
// export function hHackChangeYourSide ; begin
18751: LD_INT 0
18753: PPUSH
// if your_side = 8 then
18754: LD_OWVAR 2
18758: PUSH
18759: LD_INT 8
18761: EQUAL
18762: IFFALSE 18774
// your_side := 0 else
18764: LD_ADDR_OWVAR 2
18768: PUSH
18769: LD_INT 0
18771: ST_TO_ADDR
18772: GO 18788
// your_side := your_side + 1 ;
18774: LD_ADDR_OWVAR 2
18778: PUSH
18779: LD_OWVAR 2
18783: PUSH
18784: LD_INT 1
18786: PLUS
18787: ST_TO_ADDR
// end ;
18788: LD_VAR 0 1
18792: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
18797: PPUSH
// for i in all_units do
18798: LD_ADDR_VAR 0 2
18802: PUSH
18803: LD_OWVAR 3
18807: PUSH
18808: FOR_IN
18809: IFFALSE 18887
// if IsSelected ( i ) then
18811: LD_VAR 0 2
18815: PPUSH
18816: CALL_OW 306
18820: IFFALSE 18885
// begin j := GetSide ( i ) ;
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_VAR 0 2
18831: PPUSH
18832: CALL_OW 255
18836: ST_TO_ADDR
// if j = 8 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 8
18844: EQUAL
18845: IFFALSE 18857
// j := 0 else
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 0
18854: ST_TO_ADDR
18855: GO 18871
// j := j + 1 ;
18857: LD_ADDR_VAR 0 3
18861: PUSH
18862: LD_VAR 0 3
18866: PUSH
18867: LD_INT 1
18869: PLUS
18870: ST_TO_ADDR
// SetSide ( i , j ) ;
18871: LD_VAR 0 2
18875: PPUSH
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 235
// end ;
18885: GO 18808
18887: POP
18888: POP
// end ;
18889: LD_VAR 0 1
18893: RET
// export function hHackFog ; begin
18894: LD_INT 0
18896: PPUSH
// FogOff ( true ) ;
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 344
// end ;
18904: LD_VAR 0 1
18908: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18909: LD_INT 0
18911: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_VAR 0 2
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 483
// CenterOnXY ( x , y ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_VAR 0 3
18946: PPUSH
18947: CALL_OW 84
// end ;
18951: LD_VAR 0 4
18955: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18960: LD_VAR 0 1
18964: NOT
18965: PUSH
18966: LD_VAR 0 2
18970: PPUSH
18971: LD_VAR 0 3
18975: PPUSH
18976: CALL_OW 488
18980: NOT
18981: OR
18982: PUSH
18983: LD_VAR 0 1
18987: PPUSH
18988: CALL_OW 266
18992: PUSH
18993: LD_INT 3
18995: NONEQUAL
18996: PUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL_OW 247
19006: PUSH
19007: LD_INT 1
19009: EQUAL
19010: NOT
19011: AND
19012: OR
19013: IFFALSE 19017
// exit ;
19015: GO 19166
// if GetType ( factory ) = unit_human then
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 247
19026: PUSH
19027: LD_INT 1
19029: EQUAL
19030: IFFALSE 19047
// factory := IsInUnit ( factory ) ;
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: LD_VAR 0 1
19041: PPUSH
19042: CALL_OW 310
19046: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 266
19056: PUSH
19057: LD_INT 3
19059: NONEQUAL
19060: IFFALSE 19064
// exit ;
19062: GO 19166
// if HexInfo ( x , y ) = factory then
19064: LD_VAR 0 2
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: CALL_OW 428
19078: PUSH
19079: LD_VAR 0 1
19083: EQUAL
19084: IFFALSE 19111
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19086: LD_ADDR_EXP 66
19090: PUSH
19091: LD_EXP 66
19095: PPUSH
19096: LD_VAR 0 1
19100: PPUSH
19101: LD_INT 0
19103: PPUSH
19104: CALL_OW 1
19108: ST_TO_ADDR
19109: GO 19162
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19111: LD_ADDR_EXP 66
19115: PUSH
19116: LD_EXP 66
19120: PPUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: LD_VAR 0 1
19130: PPUSH
19131: CALL_OW 255
19135: PUSH
19136: LD_VAR 0 1
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: LD_VAR 0 3
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 1
19161: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19162: CALL 19171 0 0
// end ;
19166: LD_VAR 0 4
19170: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19176: LD_STRING resetFactoryWaypoint();
19178: PPUSH
19179: CALL_OW 559
// if factoryWaypoints then
19183: LD_EXP 66
19187: IFFALSE 19313
// begin list := PrepareArray ( factoryWaypoints ) ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_EXP 66
19198: PPUSH
19199: CALL 66455 0 1
19203: ST_TO_ADDR
// for i := 1 to list do
19204: LD_ADDR_VAR 0 2
19208: PUSH
19209: DOUBLE
19210: LD_INT 1
19212: DEC
19213: ST_TO_ADDR
19214: LD_VAR 0 3
19218: PUSH
19219: FOR_TO
19220: IFFALSE 19311
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19222: LD_STRING setFactoryWaypointXY(
19224: PUSH
19225: LD_VAR 0 3
19229: PUSH
19230: LD_VAR 0 2
19234: ARRAY
19235: PUSH
19236: LD_INT 1
19238: ARRAY
19239: STR
19240: PUSH
19241: LD_STRING ,
19243: STR
19244: PUSH
19245: LD_VAR 0 3
19249: PUSH
19250: LD_VAR 0 2
19254: ARRAY
19255: PUSH
19256: LD_INT 2
19258: ARRAY
19259: STR
19260: PUSH
19261: LD_STRING ,
19263: STR
19264: PUSH
19265: LD_VAR 0 3
19269: PUSH
19270: LD_VAR 0 2
19274: ARRAY
19275: PUSH
19276: LD_INT 3
19278: ARRAY
19279: STR
19280: PUSH
19281: LD_STRING ,
19283: STR
19284: PUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_VAR 0 2
19294: ARRAY
19295: PUSH
19296: LD_INT 4
19298: ARRAY
19299: STR
19300: PUSH
19301: LD_STRING )
19303: STR
19304: PPUSH
19305: CALL_OW 559
19309: GO 19219
19311: POP
19312: POP
// end ; end ;
19313: LD_VAR 0 1
19317: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19318: LD_INT 0
19320: PPUSH
// if HexInfo ( x , y ) = warehouse then
19321: LD_VAR 0 2
19325: PPUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: CALL_OW 428
19335: PUSH
19336: LD_VAR 0 1
19340: EQUAL
19341: IFFALSE 19368
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19343: LD_ADDR_EXP 67
19347: PUSH
19348: LD_EXP 67
19352: PPUSH
19353: LD_VAR 0 1
19357: PPUSH
19358: LD_INT 0
19360: PPUSH
19361: CALL_OW 1
19365: ST_TO_ADDR
19366: GO 19419
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19368: LD_ADDR_EXP 67
19372: PUSH
19373: LD_EXP 67
19377: PPUSH
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 255
19392: PUSH
19393: LD_VAR 0 1
19397: PUSH
19398: LD_VAR 0 2
19402: PUSH
19403: LD_VAR 0 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 1
19418: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19419: CALL 19428 0 0
// end ;
19423: LD_VAR 0 4
19427: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19428: LD_INT 0
19430: PPUSH
19431: PPUSH
19432: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19433: LD_STRING resetWarehouseGatheringPoints();
19435: PPUSH
19436: CALL_OW 559
// if warehouseGatheringPoints then
19440: LD_EXP 67
19444: IFFALSE 19570
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19446: LD_ADDR_VAR 0 3
19450: PUSH
19451: LD_EXP 67
19455: PPUSH
19456: CALL 66455 0 1
19460: ST_TO_ADDR
// for i := 1 to list do
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: DOUBLE
19467: LD_INT 1
19469: DEC
19470: ST_TO_ADDR
19471: LD_VAR 0 3
19475: PUSH
19476: FOR_TO
19477: IFFALSE 19568
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19479: LD_STRING setWarehouseGatheringPointXY(
19481: PUSH
19482: LD_VAR 0 3
19486: PUSH
19487: LD_VAR 0 2
19491: ARRAY
19492: PUSH
19493: LD_INT 1
19495: ARRAY
19496: STR
19497: PUSH
19498: LD_STRING ,
19500: STR
19501: PUSH
19502: LD_VAR 0 3
19506: PUSH
19507: LD_VAR 0 2
19511: ARRAY
19512: PUSH
19513: LD_INT 2
19515: ARRAY
19516: STR
19517: PUSH
19518: LD_STRING ,
19520: STR
19521: PUSH
19522: LD_VAR 0 3
19526: PUSH
19527: LD_VAR 0 2
19531: ARRAY
19532: PUSH
19533: LD_INT 3
19535: ARRAY
19536: STR
19537: PUSH
19538: LD_STRING ,
19540: STR
19541: PUSH
19542: LD_VAR 0 3
19546: PUSH
19547: LD_VAR 0 2
19551: ARRAY
19552: PUSH
19553: LD_INT 4
19555: ARRAY
19556: STR
19557: PUSH
19558: LD_STRING )
19560: STR
19561: PPUSH
19562: CALL_OW 559
19566: GO 19476
19568: POP
19569: POP
// end ; end ;
19570: LD_VAR 0 1
19574: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19575: LD_EXP 67
19579: IFFALSE 20264
19581: GO 19583
19583: DISABLE
19584: LD_INT 0
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
// begin enable ;
19595: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_EXP 67
19605: PPUSH
19606: CALL 66455 0 1
19610: ST_TO_ADDR
// if not list then
19611: LD_VAR 0 3
19615: NOT
19616: IFFALSE 19620
// exit ;
19618: GO 20264
// for i := 1 to list do
19620: LD_ADDR_VAR 0 1
19624: PUSH
19625: DOUBLE
19626: LD_INT 1
19628: DEC
19629: ST_TO_ADDR
19630: LD_VAR 0 3
19634: PUSH
19635: FOR_TO
19636: IFFALSE 20262
// begin depot := list [ i ] [ 2 ] ;
19638: LD_ADDR_VAR 0 8
19642: PUSH
19643: LD_VAR 0 3
19647: PUSH
19648: LD_VAR 0 1
19652: ARRAY
19653: PUSH
19654: LD_INT 2
19656: ARRAY
19657: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19658: LD_ADDR_VAR 0 5
19662: PUSH
19663: LD_VAR 0 3
19667: PUSH
19668: LD_VAR 0 1
19672: ARRAY
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19678: LD_VAR 0 8
19682: PPUSH
19683: CALL_OW 301
19687: PUSH
19688: LD_VAR 0 5
19692: PUSH
19693: LD_VAR 0 8
19697: PPUSH
19698: CALL_OW 255
19702: NONEQUAL
19703: OR
19704: IFFALSE 19733
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19706: LD_ADDR_EXP 67
19710: PUSH
19711: LD_EXP 67
19715: PPUSH
19716: LD_VAR 0 8
19720: PPUSH
19721: LD_INT 0
19723: PPUSH
19724: CALL_OW 1
19728: ST_TO_ADDR
// exit ;
19729: POP
19730: POP
19731: GO 20264
// end ; x := list [ i ] [ 3 ] ;
19733: LD_ADDR_VAR 0 6
19737: PUSH
19738: LD_VAR 0 3
19742: PUSH
19743: LD_VAR 0 1
19747: ARRAY
19748: PUSH
19749: LD_INT 3
19751: ARRAY
19752: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19753: LD_ADDR_VAR 0 7
19757: PUSH
19758: LD_VAR 0 3
19762: PUSH
19763: LD_VAR 0 1
19767: ARRAY
19768: PUSH
19769: LD_INT 4
19771: ARRAY
19772: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19773: LD_ADDR_VAR 0 9
19777: PUSH
19778: LD_VAR 0 6
19782: PPUSH
19783: LD_VAR 0 7
19787: PPUSH
19788: LD_INT 16
19790: PPUSH
19791: CALL 65043 0 3
19795: ST_TO_ADDR
// if not cratesNearbyPoint then
19796: LD_VAR 0 9
19800: NOT
19801: IFFALSE 19807
// exit ;
19803: POP
19804: POP
19805: GO 20264
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_INT 22
19814: PUSH
19815: LD_VAR 0 5
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 60
19829: PUSH
19830: EMPTY
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 91
19839: PUSH
19840: LD_VAR 0 8
19844: PUSH
19845: LD_INT 6
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 25
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 25
19868: PUSH
19869: LD_INT 16
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: PUSH
19892: LD_VAR 0 8
19896: PPUSH
19897: CALL_OW 313
19901: PPUSH
19902: LD_INT 3
19904: PUSH
19905: LD_INT 60
19907: PUSH
19908: EMPTY
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 25
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: LD_INT 16
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 72
19951: UNION
19952: ST_TO_ADDR
// if tmp then
19953: LD_VAR 0 4
19957: IFFALSE 20037
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19959: LD_ADDR_VAR 0 4
19963: PUSH
19964: LD_VAR 0 4
19968: PPUSH
19969: LD_INT 3
19971: PPUSH
19972: CALL 63012 0 2
19976: ST_TO_ADDR
// for j in tmp do
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: LD_VAR 0 4
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20031
// begin if IsInUnit ( j ) then
19990: LD_VAR 0 2
19994: PPUSH
19995: CALL_OW 310
19999: IFFALSE 20010
// ComExit ( j ) ;
20001: LD_VAR 0 2
20005: PPUSH
20006: CALL 63095 0 1
// AddComCollect ( j , x , y ) ;
20010: LD_VAR 0 2
20014: PPUSH
20015: LD_VAR 0 6
20019: PPUSH
20020: LD_VAR 0 7
20024: PPUSH
20025: CALL_OW 177
// end ;
20029: GO 19987
20031: POP
20032: POP
// exit ;
20033: POP
20034: POP
20035: GO 20264
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20037: LD_ADDR_VAR 0 4
20041: PUSH
20042: LD_INT 22
20044: PUSH
20045: LD_VAR 0 5
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 91
20056: PUSH
20057: LD_VAR 0 8
20061: PUSH
20062: LD_INT 8
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 34
20075: PUSH
20076: LD_INT 12
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 34
20085: PUSH
20086: LD_INT 51
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 34
20095: PUSH
20096: LD_INT 32
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 34
20105: PUSH
20106: LD_INT 89
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 69
20129: ST_TO_ADDR
// if tmp then
20130: LD_VAR 0 4
20134: IFFALSE 20260
// begin for j in tmp do
20136: LD_ADDR_VAR 0 2
20140: PUSH
20141: LD_VAR 0 4
20145: PUSH
20146: FOR_IN
20147: IFFALSE 20258
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20149: LD_VAR 0 2
20153: PPUSH
20154: CALL_OW 262
20158: PUSH
20159: LD_INT 3
20161: EQUAL
20162: PUSH
20163: LD_VAR 0 2
20167: PPUSH
20168: CALL_OW 261
20172: PUSH
20173: LD_INT 20
20175: GREATER
20176: OR
20177: PUSH
20178: LD_VAR 0 2
20182: PPUSH
20183: CALL_OW 314
20187: NOT
20188: AND
20189: PUSH
20190: LD_VAR 0 2
20194: PPUSH
20195: CALL_OW 263
20199: PUSH
20200: LD_INT 1
20202: NONEQUAL
20203: PUSH
20204: LD_VAR 0 2
20208: PPUSH
20209: CALL_OW 311
20213: OR
20214: AND
20215: IFFALSE 20256
// begin ComCollect ( j , x , y ) ;
20217: LD_VAR 0 2
20221: PPUSH
20222: LD_VAR 0 6
20226: PPUSH
20227: LD_VAR 0 7
20231: PPUSH
20232: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_VAR 0 8
20245: PPUSH
20246: CALL_OW 172
// exit ;
20250: POP
20251: POP
20252: POP
20253: POP
20254: GO 20264
// end ;
20256: GO 20146
20258: POP
20259: POP
// end ; end ;
20260: GO 19635
20262: POP
20263: POP
// end ; end_of_file
20264: PPOPN 9
20266: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20267: LD_INT 0
20269: PPUSH
20270: PPUSH
20271: PPUSH
20272: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20273: LD_VAR 0 1
20277: PPUSH
20278: CALL_OW 264
20282: PUSH
20283: LD_INT 91
20285: EQUAL
20286: IFFALSE 20358
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20288: LD_INT 68
20290: PPUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 255
20300: PPUSH
20301: CALL_OW 321
20305: PUSH
20306: LD_INT 2
20308: EQUAL
20309: IFFALSE 20321
// eff := 70 else
20311: LD_ADDR_VAR 0 4
20315: PUSH
20316: LD_INT 70
20318: ST_TO_ADDR
20319: GO 20329
// eff := 30 ;
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_INT 30
20328: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20329: LD_VAR 0 1
20333: PPUSH
20334: CALL_OW 250
20338: PPUSH
20339: LD_VAR 0 1
20343: PPUSH
20344: CALL_OW 251
20348: PPUSH
20349: LD_VAR 0 4
20353: PPUSH
20354: CALL_OW 495
// end ; end ;
20358: LD_VAR 0 2
20362: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20363: LD_INT 0
20365: PPUSH
// end ;
20366: LD_VAR 0 4
20370: RET
// export function SOS_Command ( cmd ) ; begin
20371: LD_INT 0
20373: PPUSH
// end ;
20374: LD_VAR 0 2
20378: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20379: LD_INT 0
20381: PPUSH
// end ;
20382: LD_VAR 0 6
20386: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20387: LD_INT 0
20389: PPUSH
20390: PPUSH
// if not vehicle or not factory then
20391: LD_VAR 0 1
20395: NOT
20396: PUSH
20397: LD_VAR 0 2
20401: NOT
20402: OR
20403: IFFALSE 20407
// exit ;
20405: GO 20638
// if factoryWaypoints >= factory then
20407: LD_EXP 66
20411: PUSH
20412: LD_VAR 0 2
20416: GREATEREQUAL
20417: IFFALSE 20638
// if factoryWaypoints [ factory ] then
20419: LD_EXP 66
20423: PUSH
20424: LD_VAR 0 2
20428: ARRAY
20429: IFFALSE 20638
// begin if GetControl ( vehicle ) = control_manual then
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 263
20440: PUSH
20441: LD_INT 1
20443: EQUAL
20444: IFFALSE 20525
// begin driver := IsDrivenBy ( vehicle ) ;
20446: LD_ADDR_VAR 0 4
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 311
20460: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20461: LD_VAR 0 4
20465: PPUSH
20466: LD_EXP 66
20470: PUSH
20471: LD_VAR 0 2
20475: ARRAY
20476: PUSH
20477: LD_INT 3
20479: ARRAY
20480: PPUSH
20481: LD_EXP 66
20485: PUSH
20486: LD_VAR 0 2
20490: ARRAY
20491: PUSH
20492: LD_INT 4
20494: ARRAY
20495: PPUSH
20496: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20500: LD_VAR 0 4
20504: PPUSH
20505: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20509: LD_VAR 0 4
20513: PPUSH
20514: LD_VAR 0 2
20518: PPUSH
20519: CALL_OW 180
// end else
20523: GO 20638
// if GetControl ( vehicle ) = control_remote then
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 263
20534: PUSH
20535: LD_INT 2
20537: EQUAL
20538: IFFALSE 20599
// begin wait ( 0 0$2 ) ;
20540: LD_INT 70
20542: PPUSH
20543: CALL_OW 67
// if Connect ( vehicle ) then
20547: LD_VAR 0 1
20551: PPUSH
20552: CALL 33303 0 1
20556: IFFALSE 20597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20558: LD_VAR 0 1
20562: PPUSH
20563: LD_EXP 66
20567: PUSH
20568: LD_VAR 0 2
20572: ARRAY
20573: PUSH
20574: LD_INT 3
20576: ARRAY
20577: PPUSH
20578: LD_EXP 66
20582: PUSH
20583: LD_VAR 0 2
20587: ARRAY
20588: PUSH
20589: LD_INT 4
20591: ARRAY
20592: PPUSH
20593: CALL_OW 171
// end else
20597: GO 20638
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: LD_EXP 66
20608: PUSH
20609: LD_VAR 0 2
20613: ARRAY
20614: PUSH
20615: LD_INT 3
20617: ARRAY
20618: PPUSH
20619: LD_EXP 66
20623: PUSH
20624: LD_VAR 0 2
20628: ARRAY
20629: PUSH
20630: LD_INT 4
20632: ARRAY
20633: PPUSH
20634: CALL_OW 171
// end ; end ;
20638: LD_VAR 0 3
20642: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20643: LD_INT 0
20645: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20646: LD_VAR 0 1
20650: PUSH
20651: LD_INT 250
20653: EQUAL
20654: PUSH
20655: LD_VAR 0 2
20659: PPUSH
20660: CALL_OW 264
20664: PUSH
20665: LD_INT 81
20667: EQUAL
20668: AND
20669: IFFALSE 20690
// MinerPlaceMine ( unit , x , y ) ;
20671: LD_VAR 0 2
20675: PPUSH
20676: LD_VAR 0 4
20680: PPUSH
20681: LD_VAR 0 5
20685: PPUSH
20686: CALL 23514 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20690: LD_VAR 0 1
20694: PUSH
20695: LD_INT 251
20697: EQUAL
20698: PUSH
20699: LD_VAR 0 2
20703: PPUSH
20704: CALL_OW 264
20708: PUSH
20709: LD_INT 81
20711: EQUAL
20712: AND
20713: IFFALSE 20734
// MinerDetonateMine ( unit , x , y ) ;
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 4
20724: PPUSH
20725: LD_VAR 0 5
20729: PPUSH
20730: CALL 23789 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 252
20741: EQUAL
20742: PUSH
20743: LD_VAR 0 2
20747: PPUSH
20748: CALL_OW 264
20752: PUSH
20753: LD_INT 81
20755: EQUAL
20756: AND
20757: IFFALSE 20778
// MinerCreateMinefield ( unit , x , y ) ;
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 4
20768: PPUSH
20769: LD_VAR 0 5
20773: PPUSH
20774: CALL 24206 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20778: LD_VAR 0 1
20782: PUSH
20783: LD_INT 253
20785: EQUAL
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 257
20796: PUSH
20797: LD_INT 5
20799: EQUAL
20800: AND
20801: IFFALSE 20822
// ComBinocular ( unit , x , y ) ;
20803: LD_VAR 0 2
20807: PPUSH
20808: LD_VAR 0 4
20812: PPUSH
20813: LD_VAR 0 5
20817: PPUSH
20818: CALL 24575 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20822: LD_VAR 0 1
20826: PUSH
20827: LD_INT 254
20829: EQUAL
20830: PUSH
20831: LD_VAR 0 2
20835: PPUSH
20836: CALL_OW 264
20840: PUSH
20841: LD_INT 99
20843: EQUAL
20844: AND
20845: PUSH
20846: LD_VAR 0 3
20850: PPUSH
20851: CALL_OW 263
20855: PUSH
20856: LD_INT 3
20858: EQUAL
20859: AND
20860: IFFALSE 20876
// HackDestroyVehicle ( unit , selectedUnit ) ;
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: CALL 22878 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20876: LD_VAR 0 1
20880: PUSH
20881: LD_INT 255
20883: EQUAL
20884: PUSH
20885: LD_VAR 0 2
20889: PPUSH
20890: CALL_OW 264
20894: PUSH
20895: LD_INT 14
20897: PUSH
20898: LD_INT 53
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: IN
20905: AND
20906: PUSH
20907: LD_VAR 0 4
20911: PPUSH
20912: LD_VAR 0 5
20916: PPUSH
20917: CALL_OW 488
20921: AND
20922: IFFALSE 20946
// CutTreeXYR ( unit , x , y , 12 ) ;
20924: LD_VAR 0 2
20928: PPUSH
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: LD_INT 12
20941: PPUSH
20942: CALL 21041 0 4
// if cmd = 256 then
20946: LD_VAR 0 1
20950: PUSH
20951: LD_INT 256
20953: EQUAL
20954: IFFALSE 20975
// SetFactoryWaypoint ( unit , x , y ) ;
20956: LD_VAR 0 2
20960: PPUSH
20961: LD_VAR 0 4
20965: PPUSH
20966: LD_VAR 0 5
20970: PPUSH
20971: CALL 18956 0 3
// if cmd = 257 then
20975: LD_VAR 0 1
20979: PUSH
20980: LD_INT 257
20982: EQUAL
20983: IFFALSE 21004
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_VAR 0 4
20994: PPUSH
20995: LD_VAR 0 5
20999: PPUSH
21000: CALL 19318 0 3
// if cmd = 258 then
21004: LD_VAR 0 1
21008: PUSH
21009: LD_INT 258
21011: EQUAL
21012: IFFALSE 21036
// BurnTreeXYR ( unit , x , y , 8 ) ;
21014: LD_VAR 0 2
21018: PPUSH
21019: LD_VAR 0 4
21023: PPUSH
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_INT 8
21031: PPUSH
21032: CALL 21435 0 4
// end ;
21036: LD_VAR 0 6
21040: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 302
21061: NOT
21062: PUSH
21063: LD_VAR 0 2
21067: PPUSH
21068: LD_VAR 0 3
21072: PPUSH
21073: CALL_OW 488
21077: NOT
21078: OR
21079: PUSH
21080: LD_VAR 0 4
21084: NOT
21085: OR
21086: IFFALSE 21090
// exit ;
21088: GO 21430
// list := [ ] ;
21090: LD_ADDR_VAR 0 13
21094: PUSH
21095: EMPTY
21096: ST_TO_ADDR
// if x - r < 0 then
21097: LD_VAR 0 2
21101: PUSH
21102: LD_VAR 0 4
21106: MINUS
21107: PUSH
21108: LD_INT 0
21110: LESS
21111: IFFALSE 21123
// min_x := 0 else
21113: LD_ADDR_VAR 0 7
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
21121: GO 21139
// min_x := x - r ;
21123: LD_ADDR_VAR 0 7
21127: PUSH
21128: LD_VAR 0 2
21132: PUSH
21133: LD_VAR 0 4
21137: MINUS
21138: ST_TO_ADDR
// if y - r < 0 then
21139: LD_VAR 0 3
21143: PUSH
21144: LD_VAR 0 4
21148: MINUS
21149: PUSH
21150: LD_INT 0
21152: LESS
21153: IFFALSE 21165
// min_y := 0 else
21155: LD_ADDR_VAR 0 8
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
21163: GO 21181
// min_y := y - r ;
21165: LD_ADDR_VAR 0 8
21169: PUSH
21170: LD_VAR 0 3
21174: PUSH
21175: LD_VAR 0 4
21179: MINUS
21180: ST_TO_ADDR
// max_x := x + r ;
21181: LD_ADDR_VAR 0 9
21185: PUSH
21186: LD_VAR 0 2
21190: PUSH
21191: LD_VAR 0 4
21195: PLUS
21196: ST_TO_ADDR
// max_y := y + r ;
21197: LD_ADDR_VAR 0 10
21201: PUSH
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 4
21211: PLUS
21212: ST_TO_ADDR
// for _x = min_x to max_x do
21213: LD_ADDR_VAR 0 11
21217: PUSH
21218: DOUBLE
21219: LD_VAR 0 7
21223: DEC
21224: ST_TO_ADDR
21225: LD_VAR 0 9
21229: PUSH
21230: FOR_TO
21231: IFFALSE 21348
// for _y = min_y to max_y do
21233: LD_ADDR_VAR 0 12
21237: PUSH
21238: DOUBLE
21239: LD_VAR 0 8
21243: DEC
21244: ST_TO_ADDR
21245: LD_VAR 0 10
21249: PUSH
21250: FOR_TO
21251: IFFALSE 21344
// begin if not ValidHex ( _x , _y ) then
21253: LD_VAR 0 11
21257: PPUSH
21258: LD_VAR 0 12
21262: PPUSH
21263: CALL_OW 488
21267: NOT
21268: IFFALSE 21272
// continue ;
21270: GO 21250
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21272: LD_VAR 0 11
21276: PPUSH
21277: LD_VAR 0 12
21281: PPUSH
21282: CALL_OW 351
21286: PUSH
21287: LD_VAR 0 11
21291: PPUSH
21292: LD_VAR 0 12
21296: PPUSH
21297: CALL_OW 554
21301: AND
21302: IFFALSE 21342
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21304: LD_ADDR_VAR 0 13
21308: PUSH
21309: LD_VAR 0 13
21313: PPUSH
21314: LD_VAR 0 13
21318: PUSH
21319: LD_INT 1
21321: PLUS
21322: PPUSH
21323: LD_VAR 0 11
21327: PUSH
21328: LD_VAR 0 12
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PPUSH
21337: CALL_OW 2
21341: ST_TO_ADDR
// end ;
21342: GO 21250
21344: POP
21345: POP
21346: GO 21230
21348: POP
21349: POP
// if not list then
21350: LD_VAR 0 13
21354: NOT
21355: IFFALSE 21359
// exit ;
21357: GO 21430
// for i in list do
21359: LD_ADDR_VAR 0 6
21363: PUSH
21364: LD_VAR 0 13
21368: PUSH
21369: FOR_IN
21370: IFFALSE 21428
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21372: LD_VAR 0 1
21376: PPUSH
21377: LD_STRING M
21379: PUSH
21380: LD_VAR 0 6
21384: PUSH
21385: LD_INT 1
21387: ARRAY
21388: PUSH
21389: LD_VAR 0 6
21393: PUSH
21394: LD_INT 2
21396: ARRAY
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: PUSH
21419: EMPTY
21420: LIST
21421: PPUSH
21422: CALL_OW 447
21426: GO 21369
21428: POP
21429: POP
// end ;
21430: LD_VAR 0 5
21434: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21435: LD_INT 0
21437: PPUSH
21438: PPUSH
21439: PPUSH
21440: PPUSH
21441: PPUSH
21442: PPUSH
21443: PPUSH
21444: PPUSH
21445: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL_OW 302
21455: NOT
21456: PUSH
21457: LD_VAR 0 2
21461: PPUSH
21462: LD_VAR 0 3
21466: PPUSH
21467: CALL_OW 488
21471: NOT
21472: OR
21473: PUSH
21474: LD_VAR 0 4
21478: NOT
21479: OR
21480: IFFALSE 21484
// exit ;
21482: GO 21832
// list := [ ] ;
21484: LD_ADDR_VAR 0 13
21488: PUSH
21489: EMPTY
21490: ST_TO_ADDR
// if x - r < 0 then
21491: LD_VAR 0 2
21495: PUSH
21496: LD_VAR 0 4
21500: MINUS
21501: PUSH
21502: LD_INT 0
21504: LESS
21505: IFFALSE 21517
// min_x := 0 else
21507: LD_ADDR_VAR 0 7
21511: PUSH
21512: LD_INT 0
21514: ST_TO_ADDR
21515: GO 21533
// min_x := x - r ;
21517: LD_ADDR_VAR 0 7
21521: PUSH
21522: LD_VAR 0 2
21526: PUSH
21527: LD_VAR 0 4
21531: MINUS
21532: ST_TO_ADDR
// if y - r < 0 then
21533: LD_VAR 0 3
21537: PUSH
21538: LD_VAR 0 4
21542: MINUS
21543: PUSH
21544: LD_INT 0
21546: LESS
21547: IFFALSE 21559
// min_y := 0 else
21549: LD_ADDR_VAR 0 8
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
21557: GO 21575
// min_y := y - r ;
21559: LD_ADDR_VAR 0 8
21563: PUSH
21564: LD_VAR 0 3
21568: PUSH
21569: LD_VAR 0 4
21573: MINUS
21574: ST_TO_ADDR
// max_x := x + r ;
21575: LD_ADDR_VAR 0 9
21579: PUSH
21580: LD_VAR 0 2
21584: PUSH
21585: LD_VAR 0 4
21589: PLUS
21590: ST_TO_ADDR
// max_y := y + r ;
21591: LD_ADDR_VAR 0 10
21595: PUSH
21596: LD_VAR 0 3
21600: PUSH
21601: LD_VAR 0 4
21605: PLUS
21606: ST_TO_ADDR
// for _x = min_x to max_x do
21607: LD_ADDR_VAR 0 11
21611: PUSH
21612: DOUBLE
21613: LD_VAR 0 7
21617: DEC
21618: ST_TO_ADDR
21619: LD_VAR 0 9
21623: PUSH
21624: FOR_TO
21625: IFFALSE 21742
// for _y = min_y to max_y do
21627: LD_ADDR_VAR 0 12
21631: PUSH
21632: DOUBLE
21633: LD_VAR 0 8
21637: DEC
21638: ST_TO_ADDR
21639: LD_VAR 0 10
21643: PUSH
21644: FOR_TO
21645: IFFALSE 21738
// begin if not ValidHex ( _x , _y ) then
21647: LD_VAR 0 11
21651: PPUSH
21652: LD_VAR 0 12
21656: PPUSH
21657: CALL_OW 488
21661: NOT
21662: IFFALSE 21666
// continue ;
21664: GO 21644
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21666: LD_VAR 0 11
21670: PPUSH
21671: LD_VAR 0 12
21675: PPUSH
21676: CALL_OW 351
21680: PUSH
21681: LD_VAR 0 11
21685: PPUSH
21686: LD_VAR 0 12
21690: PPUSH
21691: CALL_OW 554
21695: AND
21696: IFFALSE 21736
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21698: LD_ADDR_VAR 0 13
21702: PUSH
21703: LD_VAR 0 13
21707: PPUSH
21708: LD_VAR 0 13
21712: PUSH
21713: LD_INT 1
21715: PLUS
21716: PPUSH
21717: LD_VAR 0 11
21721: PUSH
21722: LD_VAR 0 12
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PPUSH
21731: CALL_OW 2
21735: ST_TO_ADDR
// end ;
21736: GO 21644
21738: POP
21739: POP
21740: GO 21624
21742: POP
21743: POP
// if not list then
21744: LD_VAR 0 13
21748: NOT
21749: IFFALSE 21753
// exit ;
21751: GO 21832
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
21753: LD_ADDR_VAR 0 13
21757: PUSH
21758: LD_VAR 0 1
21762: PPUSH
21763: LD_VAR 0 13
21767: PPUSH
21768: LD_INT 1
21770: PPUSH
21771: LD_INT 1
21773: PPUSH
21774: CALL 30445 0 4
21778: ST_TO_ADDR
// ComStop ( flame ) ;
21779: LD_VAR 0 1
21783: PPUSH
21784: CALL_OW 141
// for i in list do
21788: LD_ADDR_VAR 0 6
21792: PUSH
21793: LD_VAR 0 13
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21830
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_VAR 0 6
21810: PUSH
21811: LD_INT 1
21813: ARRAY
21814: PPUSH
21815: LD_VAR 0 6
21819: PUSH
21820: LD_INT 2
21822: ARRAY
21823: PPUSH
21824: CALL_OW 176
21828: GO 21798
21830: POP
21831: POP
// end ;
21832: LD_VAR 0 5
21836: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21837: LD_EXP 69
21841: NOT
21842: IFFALSE 21892
21844: GO 21846
21846: DISABLE
// begin initHack := true ;
21847: LD_ADDR_EXP 69
21851: PUSH
21852: LD_INT 1
21854: ST_TO_ADDR
// hackTanks := [ ] ;
21855: LD_ADDR_EXP 70
21859: PUSH
21860: EMPTY
21861: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21862: LD_ADDR_EXP 71
21866: PUSH
21867: EMPTY
21868: ST_TO_ADDR
// hackLimit := 3 ;
21869: LD_ADDR_EXP 72
21873: PUSH
21874: LD_INT 3
21876: ST_TO_ADDR
// hackDist := 12 ;
21877: LD_ADDR_EXP 73
21881: PUSH
21882: LD_INT 12
21884: ST_TO_ADDR
// hackCounter := [ ] ;
21885: LD_ADDR_EXP 74
21889: PUSH
21890: EMPTY
21891: ST_TO_ADDR
// end ;
21892: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21893: LD_EXP 69
21897: PUSH
21898: LD_INT 34
21900: PUSH
21901: LD_INT 99
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PPUSH
21908: CALL_OW 69
21912: AND
21913: IFFALSE 22166
21915: GO 21917
21917: DISABLE
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
// begin enable ;
21922: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21923: LD_ADDR_VAR 0 1
21927: PUSH
21928: LD_INT 34
21930: PUSH
21931: LD_INT 99
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PPUSH
21938: CALL_OW 69
21942: PUSH
21943: FOR_IN
21944: IFFALSE 22164
// begin if not i in hackTanks then
21946: LD_VAR 0 1
21950: PUSH
21951: LD_EXP 70
21955: IN
21956: NOT
21957: IFFALSE 22040
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21959: LD_ADDR_EXP 70
21963: PUSH
21964: LD_EXP 70
21968: PPUSH
21969: LD_EXP 70
21973: PUSH
21974: LD_INT 1
21976: PLUS
21977: PPUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 1
21987: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21988: LD_ADDR_EXP 71
21992: PUSH
21993: LD_EXP 71
21997: PPUSH
21998: LD_EXP 71
22002: PUSH
22003: LD_INT 1
22005: PLUS
22006: PPUSH
22007: EMPTY
22008: PPUSH
22009: CALL_OW 1
22013: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22014: LD_ADDR_EXP 74
22018: PUSH
22019: LD_EXP 74
22023: PPUSH
22024: LD_EXP 74
22028: PUSH
22029: LD_INT 1
22031: PLUS
22032: PPUSH
22033: EMPTY
22034: PPUSH
22035: CALL_OW 1
22039: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22040: LD_VAR 0 1
22044: PPUSH
22045: CALL_OW 302
22049: NOT
22050: IFFALSE 22063
// begin HackUnlinkAll ( i ) ;
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL 22169 0 1
// continue ;
22061: GO 21943
// end ; HackCheckCapturedStatus ( i ) ;
22063: LD_VAR 0 1
22067: PPUSH
22068: CALL 22612 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22072: LD_ADDR_VAR 0 2
22076: PUSH
22077: LD_INT 81
22079: PUSH
22080: LD_VAR 0 1
22084: PPUSH
22085: CALL_OW 255
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 33
22096: PUSH
22097: LD_INT 3
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 91
22106: PUSH
22107: LD_VAR 0 1
22111: PUSH
22112: LD_EXP 73
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 50
22124: PUSH
22125: EMPTY
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: PPUSH
22134: CALL_OW 69
22138: ST_TO_ADDR
// if not tmp then
22139: LD_VAR 0 2
22143: NOT
22144: IFFALSE 22148
// continue ;
22146: GO 21943
// HackLink ( i , tmp ) ;
22148: LD_VAR 0 1
22152: PPUSH
22153: LD_VAR 0 2
22157: PPUSH
22158: CALL 22305 0 2
// end ;
22162: GO 21943
22164: POP
22165: POP
// end ;
22166: PPOPN 2
22168: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22169: LD_INT 0
22171: PPUSH
22172: PPUSH
22173: PPUSH
// if not hack in hackTanks then
22174: LD_VAR 0 1
22178: PUSH
22179: LD_EXP 70
22183: IN
22184: NOT
22185: IFFALSE 22189
// exit ;
22187: GO 22300
// index := GetElementIndex ( hackTanks , hack ) ;
22189: LD_ADDR_VAR 0 4
22193: PUSH
22194: LD_EXP 70
22198: PPUSH
22199: LD_VAR 0 1
22203: PPUSH
22204: CALL 29742 0 2
22208: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22209: LD_EXP 71
22213: PUSH
22214: LD_VAR 0 4
22218: ARRAY
22219: IFFALSE 22300
// begin for i in hackTanksCaptured [ index ] do
22221: LD_ADDR_VAR 0 3
22225: PUSH
22226: LD_EXP 71
22230: PUSH
22231: LD_VAR 0 4
22235: ARRAY
22236: PUSH
22237: FOR_IN
22238: IFFALSE 22264
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22240: LD_VAR 0 3
22244: PUSH
22245: LD_INT 1
22247: ARRAY
22248: PPUSH
22249: LD_VAR 0 3
22253: PUSH
22254: LD_INT 2
22256: ARRAY
22257: PPUSH
22258: CALL_OW 235
22262: GO 22237
22264: POP
22265: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22266: LD_ADDR_EXP 71
22270: PUSH
22271: LD_EXP 71
22275: PPUSH
22276: LD_VAR 0 4
22280: PPUSH
22281: EMPTY
22282: PPUSH
22283: CALL_OW 1
22287: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_INT 0
22295: PPUSH
22296: CALL_OW 505
// end ; end ;
22300: LD_VAR 0 2
22304: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22305: LD_INT 0
22307: PPUSH
22308: PPUSH
22309: PPUSH
// if not hack in hackTanks or not vehicles then
22310: LD_VAR 0 1
22314: PUSH
22315: LD_EXP 70
22319: IN
22320: NOT
22321: PUSH
22322: LD_VAR 0 2
22326: NOT
22327: OR
22328: IFFALSE 22332
// exit ;
22330: GO 22607
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_VAR 0 1
22341: PPUSH
22342: LD_VAR 0 2
22346: PPUSH
22347: LD_INT 1
22349: PPUSH
22350: LD_INT 1
22352: PPUSH
22353: CALL 30392 0 4
22357: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22358: LD_ADDR_VAR 0 5
22362: PUSH
22363: LD_EXP 70
22367: PPUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL 29742 0 2
22377: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22378: LD_EXP 71
22382: PUSH
22383: LD_VAR 0 5
22387: ARRAY
22388: PUSH
22389: LD_EXP 72
22393: LESS
22394: IFFALSE 22583
// begin for i := 1 to vehicles do
22396: LD_ADDR_VAR 0 4
22400: PUSH
22401: DOUBLE
22402: LD_INT 1
22404: DEC
22405: ST_TO_ADDR
22406: LD_VAR 0 2
22410: PUSH
22411: FOR_TO
22412: IFFALSE 22581
// begin if hackTanksCaptured [ index ] = hackLimit then
22414: LD_EXP 71
22418: PUSH
22419: LD_VAR 0 5
22423: ARRAY
22424: PUSH
22425: LD_EXP 72
22429: EQUAL
22430: IFFALSE 22434
// break ;
22432: GO 22581
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22434: LD_ADDR_EXP 74
22438: PUSH
22439: LD_EXP 74
22443: PPUSH
22444: LD_VAR 0 5
22448: PPUSH
22449: LD_EXP 74
22453: PUSH
22454: LD_VAR 0 5
22458: ARRAY
22459: PUSH
22460: LD_INT 1
22462: PLUS
22463: PPUSH
22464: CALL_OW 1
22468: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22469: LD_ADDR_EXP 71
22473: PUSH
22474: LD_EXP 71
22478: PPUSH
22479: LD_VAR 0 5
22483: PUSH
22484: LD_EXP 71
22488: PUSH
22489: LD_VAR 0 5
22493: ARRAY
22494: PUSH
22495: LD_INT 1
22497: PLUS
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PPUSH
22503: LD_VAR 0 2
22507: PUSH
22508: LD_VAR 0 4
22512: ARRAY
22513: PUSH
22514: LD_VAR 0 2
22518: PUSH
22519: LD_VAR 0 4
22523: ARRAY
22524: PPUSH
22525: CALL_OW 255
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PPUSH
22534: CALL 29957 0 3
22538: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22539: LD_VAR 0 2
22543: PUSH
22544: LD_VAR 0 4
22548: ARRAY
22549: PPUSH
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 255
22559: PPUSH
22560: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22564: LD_VAR 0 2
22568: PUSH
22569: LD_VAR 0 4
22573: ARRAY
22574: PPUSH
22575: CALL_OW 141
// end ;
22579: GO 22411
22581: POP
22582: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22583: LD_VAR 0 1
22587: PPUSH
22588: LD_EXP 71
22592: PUSH
22593: LD_VAR 0 5
22597: ARRAY
22598: PUSH
22599: LD_INT 0
22601: PLUS
22602: PPUSH
22603: CALL_OW 505
// end ;
22607: LD_VAR 0 3
22611: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22612: LD_INT 0
22614: PPUSH
22615: PPUSH
22616: PPUSH
22617: PPUSH
// if not hack in hackTanks then
22618: LD_VAR 0 1
22622: PUSH
22623: LD_EXP 70
22627: IN
22628: NOT
22629: IFFALSE 22633
// exit ;
22631: GO 22873
// index := GetElementIndex ( hackTanks , hack ) ;
22633: LD_ADDR_VAR 0 4
22637: PUSH
22638: LD_EXP 70
22642: PPUSH
22643: LD_VAR 0 1
22647: PPUSH
22648: CALL 29742 0 2
22652: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: DOUBLE
22659: LD_EXP 71
22663: PUSH
22664: LD_VAR 0 4
22668: ARRAY
22669: INC
22670: ST_TO_ADDR
22671: LD_INT 1
22673: PUSH
22674: FOR_DOWNTO
22675: IFFALSE 22847
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22677: LD_ADDR_VAR 0 5
22681: PUSH
22682: LD_EXP 71
22686: PUSH
22687: LD_VAR 0 4
22691: ARRAY
22692: PUSH
22693: LD_VAR 0 3
22697: ARRAY
22698: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22699: LD_VAR 0 5
22703: PUSH
22704: LD_INT 1
22706: ARRAY
22707: PPUSH
22708: CALL_OW 302
22712: NOT
22713: PUSH
22714: LD_VAR 0 5
22718: PUSH
22719: LD_INT 1
22721: ARRAY
22722: PPUSH
22723: CALL_OW 255
22727: PUSH
22728: LD_VAR 0 1
22732: PPUSH
22733: CALL_OW 255
22737: NONEQUAL
22738: OR
22739: IFFALSE 22845
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22741: LD_VAR 0 5
22745: PUSH
22746: LD_INT 1
22748: ARRAY
22749: PPUSH
22750: CALL_OW 305
22754: PUSH
22755: LD_VAR 0 5
22759: PUSH
22760: LD_INT 1
22762: ARRAY
22763: PPUSH
22764: CALL_OW 255
22768: PUSH
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 255
22778: EQUAL
22779: AND
22780: IFFALSE 22804
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22782: LD_VAR 0 5
22786: PUSH
22787: LD_INT 1
22789: ARRAY
22790: PPUSH
22791: LD_VAR 0 5
22795: PUSH
22796: LD_INT 2
22798: ARRAY
22799: PPUSH
22800: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22804: LD_ADDR_EXP 71
22808: PUSH
22809: LD_EXP 71
22813: PPUSH
22814: LD_VAR 0 4
22818: PPUSH
22819: LD_EXP 71
22823: PUSH
22824: LD_VAR 0 4
22828: ARRAY
22829: PPUSH
22830: LD_VAR 0 3
22834: PPUSH
22835: CALL_OW 3
22839: PPUSH
22840: CALL_OW 1
22844: ST_TO_ADDR
// end ; end ;
22845: GO 22674
22847: POP
22848: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22849: LD_VAR 0 1
22853: PPUSH
22854: LD_EXP 71
22858: PUSH
22859: LD_VAR 0 4
22863: ARRAY
22864: PUSH
22865: LD_INT 0
22867: PLUS
22868: PPUSH
22869: CALL_OW 505
// end ;
22873: LD_VAR 0 2
22877: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22878: LD_INT 0
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
// if not hack in hackTanks then
22884: LD_VAR 0 1
22888: PUSH
22889: LD_EXP 70
22893: IN
22894: NOT
22895: IFFALSE 22899
// exit ;
22897: GO 22984
// index := GetElementIndex ( hackTanks , hack ) ;
22899: LD_ADDR_VAR 0 5
22903: PUSH
22904: LD_EXP 70
22908: PPUSH
22909: LD_VAR 0 1
22913: PPUSH
22914: CALL 29742 0 2
22918: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22919: LD_ADDR_VAR 0 4
22923: PUSH
22924: DOUBLE
22925: LD_INT 1
22927: DEC
22928: ST_TO_ADDR
22929: LD_EXP 71
22933: PUSH
22934: LD_VAR 0 5
22938: ARRAY
22939: PUSH
22940: FOR_TO
22941: IFFALSE 22982
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22943: LD_EXP 71
22947: PUSH
22948: LD_VAR 0 5
22952: ARRAY
22953: PUSH
22954: LD_VAR 0 4
22958: ARRAY
22959: PUSH
22960: LD_INT 1
22962: ARRAY
22963: PUSH
22964: LD_VAR 0 2
22968: EQUAL
22969: IFFALSE 22980
// KillUnit ( vehicle ) ;
22971: LD_VAR 0 2
22975: PPUSH
22976: CALL_OW 66
22980: GO 22940
22982: POP
22983: POP
// end ;
22984: LD_VAR 0 3
22988: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22989: LD_EXP 75
22993: NOT
22994: IFFALSE 23029
22996: GO 22998
22998: DISABLE
// begin initMiner := true ;
22999: LD_ADDR_EXP 75
23003: PUSH
23004: LD_INT 1
23006: ST_TO_ADDR
// minersList := [ ] ;
23007: LD_ADDR_EXP 76
23011: PUSH
23012: EMPTY
23013: ST_TO_ADDR
// minerMinesList := [ ] ;
23014: LD_ADDR_EXP 77
23018: PUSH
23019: EMPTY
23020: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23021: LD_ADDR_EXP 78
23025: PUSH
23026: LD_INT 5
23028: ST_TO_ADDR
// end ;
23029: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23030: LD_EXP 75
23034: PUSH
23035: LD_INT 34
23037: PUSH
23038: LD_INT 81
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 69
23049: AND
23050: IFFALSE 23511
23052: GO 23054
23054: DISABLE
23055: LD_INT 0
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
// begin enable ;
23061: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23062: LD_ADDR_VAR 0 1
23066: PUSH
23067: LD_INT 34
23069: PUSH
23070: LD_INT 81
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: PUSH
23082: FOR_IN
23083: IFFALSE 23155
// begin if not i in minersList then
23085: LD_VAR 0 1
23089: PUSH
23090: LD_EXP 76
23094: IN
23095: NOT
23096: IFFALSE 23153
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23098: LD_ADDR_EXP 76
23102: PUSH
23103: LD_EXP 76
23107: PPUSH
23108: LD_EXP 76
23112: PUSH
23113: LD_INT 1
23115: PLUS
23116: PPUSH
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL_OW 1
23126: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23127: LD_ADDR_EXP 77
23131: PUSH
23132: LD_EXP 77
23136: PPUSH
23137: LD_EXP 77
23141: PUSH
23142: LD_INT 1
23144: PLUS
23145: PPUSH
23146: EMPTY
23147: PPUSH
23148: CALL_OW 1
23152: ST_TO_ADDR
// end end ;
23153: GO 23082
23155: POP
23156: POP
// for i := minerMinesList downto 1 do
23157: LD_ADDR_VAR 0 1
23161: PUSH
23162: DOUBLE
23163: LD_EXP 77
23167: INC
23168: ST_TO_ADDR
23169: LD_INT 1
23171: PUSH
23172: FOR_DOWNTO
23173: IFFALSE 23509
// begin if IsLive ( minersList [ i ] ) then
23175: LD_EXP 76
23179: PUSH
23180: LD_VAR 0 1
23184: ARRAY
23185: PPUSH
23186: CALL_OW 300
23190: IFFALSE 23218
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23192: LD_EXP 76
23196: PUSH
23197: LD_VAR 0 1
23201: ARRAY
23202: PPUSH
23203: LD_EXP 77
23207: PUSH
23208: LD_VAR 0 1
23212: ARRAY
23213: PPUSH
23214: CALL_OW 505
// if not minerMinesList [ i ] then
23218: LD_EXP 77
23222: PUSH
23223: LD_VAR 0 1
23227: ARRAY
23228: NOT
23229: IFFALSE 23233
// continue ;
23231: GO 23172
// for j := minerMinesList [ i ] downto 1 do
23233: LD_ADDR_VAR 0 2
23237: PUSH
23238: DOUBLE
23239: LD_EXP 77
23243: PUSH
23244: LD_VAR 0 1
23248: ARRAY
23249: INC
23250: ST_TO_ADDR
23251: LD_INT 1
23253: PUSH
23254: FOR_DOWNTO
23255: IFFALSE 23505
// begin side := GetSide ( minersList [ i ] ) ;
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_EXP 76
23266: PUSH
23267: LD_VAR 0 1
23271: ARRAY
23272: PPUSH
23273: CALL_OW 255
23277: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_EXP 77
23287: PUSH
23288: LD_VAR 0 1
23292: ARRAY
23293: PUSH
23294: LD_VAR 0 2
23298: ARRAY
23299: PUSH
23300: LD_INT 1
23302: ARRAY
23303: PPUSH
23304: LD_EXP 77
23308: PUSH
23309: LD_VAR 0 1
23313: ARRAY
23314: PUSH
23315: LD_VAR 0 2
23319: ARRAY
23320: PUSH
23321: LD_INT 2
23323: ARRAY
23324: PPUSH
23325: CALL_OW 428
23329: ST_TO_ADDR
// if not tmp then
23330: LD_VAR 0 4
23334: NOT
23335: IFFALSE 23339
// continue ;
23337: GO 23254
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23339: LD_VAR 0 4
23343: PUSH
23344: LD_INT 81
23346: PUSH
23347: LD_VAR 0 3
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PPUSH
23356: CALL_OW 69
23360: IN
23361: PUSH
23362: LD_EXP 77
23366: PUSH
23367: LD_VAR 0 1
23371: ARRAY
23372: PUSH
23373: LD_VAR 0 2
23377: ARRAY
23378: PUSH
23379: LD_INT 1
23381: ARRAY
23382: PPUSH
23383: LD_EXP 77
23387: PUSH
23388: LD_VAR 0 1
23392: ARRAY
23393: PUSH
23394: LD_VAR 0 2
23398: ARRAY
23399: PUSH
23400: LD_INT 2
23402: ARRAY
23403: PPUSH
23404: CALL_OW 458
23408: AND
23409: IFFALSE 23503
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23411: LD_EXP 77
23415: PUSH
23416: LD_VAR 0 1
23420: ARRAY
23421: PUSH
23422: LD_VAR 0 2
23426: ARRAY
23427: PUSH
23428: LD_INT 1
23430: ARRAY
23431: PPUSH
23432: LD_EXP 77
23436: PUSH
23437: LD_VAR 0 1
23441: ARRAY
23442: PUSH
23443: LD_VAR 0 2
23447: ARRAY
23448: PUSH
23449: LD_INT 2
23451: ARRAY
23452: PPUSH
23453: LD_VAR 0 3
23457: PPUSH
23458: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23462: LD_ADDR_EXP 77
23466: PUSH
23467: LD_EXP 77
23471: PPUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: LD_EXP 77
23481: PUSH
23482: LD_VAR 0 1
23486: ARRAY
23487: PPUSH
23488: LD_VAR 0 2
23492: PPUSH
23493: CALL_OW 3
23497: PPUSH
23498: CALL_OW 1
23502: ST_TO_ADDR
// end ; end ;
23503: GO 23254
23505: POP
23506: POP
// end ;
23507: GO 23172
23509: POP
23510: POP
// end ;
23511: PPOPN 4
23513: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23514: LD_INT 0
23516: PPUSH
23517: PPUSH
// result := false ;
23518: LD_ADDR_VAR 0 4
23522: PUSH
23523: LD_INT 0
23525: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 264
23535: PUSH
23536: LD_INT 81
23538: EQUAL
23539: NOT
23540: IFFALSE 23544
// exit ;
23542: GO 23784
// index := GetElementIndex ( minersList , unit ) ;
23544: LD_ADDR_VAR 0 5
23548: PUSH
23549: LD_EXP 76
23553: PPUSH
23554: LD_VAR 0 1
23558: PPUSH
23559: CALL 29742 0 2
23563: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23564: LD_EXP 77
23568: PUSH
23569: LD_VAR 0 5
23573: ARRAY
23574: PUSH
23575: LD_EXP 78
23579: GREATEREQUAL
23580: IFFALSE 23584
// exit ;
23582: GO 23784
// ComMoveXY ( unit , x , y ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_VAR 0 2
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23603: LD_INT 35
23605: PPUSH
23606: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23610: LD_VAR 0 1
23614: PPUSH
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_VAR 0 3
23624: PPUSH
23625: CALL 61494 0 3
23629: NOT
23630: PUSH
23631: LD_VAR 0 1
23635: PPUSH
23636: CALL_OW 314
23640: AND
23641: IFFALSE 23645
// exit ;
23643: GO 23784
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23645: LD_VAR 0 2
23649: PPUSH
23650: LD_VAR 0 3
23654: PPUSH
23655: CALL_OW 428
23659: PUSH
23660: LD_VAR 0 1
23664: EQUAL
23665: PUSH
23666: LD_VAR 0 1
23670: PPUSH
23671: CALL_OW 314
23675: NOT
23676: AND
23677: IFFALSE 23603
// PlaySoundXY ( x , y , PlantMine ) ;
23679: LD_VAR 0 2
23683: PPUSH
23684: LD_VAR 0 3
23688: PPUSH
23689: LD_STRING PlantMine
23691: PPUSH
23692: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_VAR 0 3
23705: PPUSH
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 255
23715: PPUSH
23716: LD_INT 0
23718: PPUSH
23719: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23723: LD_ADDR_EXP 77
23727: PUSH
23728: LD_EXP 77
23732: PPUSH
23733: LD_VAR 0 5
23737: PUSH
23738: LD_EXP 77
23742: PUSH
23743: LD_VAR 0 5
23747: ARRAY
23748: PUSH
23749: LD_INT 1
23751: PLUS
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PPUSH
23757: LD_VAR 0 2
23761: PUSH
23762: LD_VAR 0 3
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PPUSH
23771: CALL 29957 0 3
23775: ST_TO_ADDR
// result := true ;
23776: LD_ADDR_VAR 0 4
23780: PUSH
23781: LD_INT 1
23783: ST_TO_ADDR
// end ;
23784: LD_VAR 0 4
23788: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23789: LD_INT 0
23791: PPUSH
23792: PPUSH
23793: PPUSH
// if not unit in minersList then
23794: LD_VAR 0 1
23798: PUSH
23799: LD_EXP 76
23803: IN
23804: NOT
23805: IFFALSE 23809
// exit ;
23807: GO 24201
// index := GetElementIndex ( minersList , unit ) ;
23809: LD_ADDR_VAR 0 6
23813: PUSH
23814: LD_EXP 76
23818: PPUSH
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL 29742 0 2
23828: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23829: LD_ADDR_VAR 0 5
23833: PUSH
23834: DOUBLE
23835: LD_EXP 77
23839: PUSH
23840: LD_VAR 0 6
23844: ARRAY
23845: INC
23846: ST_TO_ADDR
23847: LD_INT 1
23849: PUSH
23850: FOR_DOWNTO
23851: IFFALSE 24012
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23853: LD_EXP 77
23857: PUSH
23858: LD_VAR 0 6
23862: ARRAY
23863: PUSH
23864: LD_VAR 0 5
23868: ARRAY
23869: PUSH
23870: LD_INT 1
23872: ARRAY
23873: PUSH
23874: LD_VAR 0 2
23878: EQUAL
23879: PUSH
23880: LD_EXP 77
23884: PUSH
23885: LD_VAR 0 6
23889: ARRAY
23890: PUSH
23891: LD_VAR 0 5
23895: ARRAY
23896: PUSH
23897: LD_INT 2
23899: ARRAY
23900: PUSH
23901: LD_VAR 0 3
23905: EQUAL
23906: AND
23907: IFFALSE 24010
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23909: LD_EXP 77
23913: PUSH
23914: LD_VAR 0 6
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 5
23924: ARRAY
23925: PUSH
23926: LD_INT 1
23928: ARRAY
23929: PPUSH
23930: LD_EXP 77
23934: PUSH
23935: LD_VAR 0 6
23939: ARRAY
23940: PUSH
23941: LD_VAR 0 5
23945: ARRAY
23946: PUSH
23947: LD_INT 2
23949: ARRAY
23950: PPUSH
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL_OW 255
23960: PPUSH
23961: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23965: LD_ADDR_EXP 77
23969: PUSH
23970: LD_EXP 77
23974: PPUSH
23975: LD_VAR 0 6
23979: PPUSH
23980: LD_EXP 77
23984: PUSH
23985: LD_VAR 0 6
23989: ARRAY
23990: PPUSH
23991: LD_VAR 0 5
23995: PPUSH
23996: CALL_OW 3
24000: PPUSH
24001: CALL_OW 1
24005: ST_TO_ADDR
// exit ;
24006: POP
24007: POP
24008: GO 24201
// end ; end ;
24010: GO 23850
24012: POP
24013: POP
// for i := minerMinesList [ index ] downto 1 do
24014: LD_ADDR_VAR 0 5
24018: PUSH
24019: DOUBLE
24020: LD_EXP 77
24024: PUSH
24025: LD_VAR 0 6
24029: ARRAY
24030: INC
24031: ST_TO_ADDR
24032: LD_INT 1
24034: PUSH
24035: FOR_DOWNTO
24036: IFFALSE 24199
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24038: LD_EXP 77
24042: PUSH
24043: LD_VAR 0 6
24047: ARRAY
24048: PUSH
24049: LD_VAR 0 5
24053: ARRAY
24054: PUSH
24055: LD_INT 1
24057: ARRAY
24058: PPUSH
24059: LD_EXP 77
24063: PUSH
24064: LD_VAR 0 6
24068: ARRAY
24069: PUSH
24070: LD_VAR 0 5
24074: ARRAY
24075: PUSH
24076: LD_INT 2
24078: ARRAY
24079: PPUSH
24080: LD_VAR 0 2
24084: PPUSH
24085: LD_VAR 0 3
24089: PPUSH
24090: CALL_OW 298
24094: PUSH
24095: LD_INT 6
24097: LESS
24098: IFFALSE 24197
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24100: LD_EXP 77
24104: PUSH
24105: LD_VAR 0 6
24109: ARRAY
24110: PUSH
24111: LD_VAR 0 5
24115: ARRAY
24116: PUSH
24117: LD_INT 1
24119: ARRAY
24120: PPUSH
24121: LD_EXP 77
24125: PUSH
24126: LD_VAR 0 6
24130: ARRAY
24131: PUSH
24132: LD_VAR 0 5
24136: ARRAY
24137: PUSH
24138: LD_INT 2
24140: ARRAY
24141: PPUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 255
24151: PPUSH
24152: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24156: LD_ADDR_EXP 77
24160: PUSH
24161: LD_EXP 77
24165: PPUSH
24166: LD_VAR 0 6
24170: PPUSH
24171: LD_EXP 77
24175: PUSH
24176: LD_VAR 0 6
24180: ARRAY
24181: PPUSH
24182: LD_VAR 0 5
24186: PPUSH
24187: CALL_OW 3
24191: PPUSH
24192: CALL_OW 1
24196: ST_TO_ADDR
// end ; end ;
24197: GO 24035
24199: POP
24200: POP
// end ;
24201: LD_VAR 0 4
24205: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24206: LD_INT 0
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 264
24226: PUSH
24227: LD_INT 81
24229: EQUAL
24230: NOT
24231: PUSH
24232: LD_VAR 0 1
24236: PUSH
24237: LD_EXP 76
24241: IN
24242: NOT
24243: OR
24244: IFFALSE 24248
// exit ;
24246: GO 24570
// index := GetElementIndex ( minersList , unit ) ;
24248: LD_ADDR_VAR 0 6
24252: PUSH
24253: LD_EXP 76
24257: PPUSH
24258: LD_VAR 0 1
24262: PPUSH
24263: CALL 29742 0 2
24267: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24268: LD_ADDR_VAR 0 8
24272: PUSH
24273: LD_EXP 78
24277: PUSH
24278: LD_EXP 77
24282: PUSH
24283: LD_VAR 0 6
24287: ARRAY
24288: MINUS
24289: ST_TO_ADDR
// if not minesFreeAmount then
24290: LD_VAR 0 8
24294: NOT
24295: IFFALSE 24299
// exit ;
24297: GO 24570
// tmp := [ ] ;
24299: LD_ADDR_VAR 0 7
24303: PUSH
24304: EMPTY
24305: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24306: LD_ADDR_VAR 0 5
24310: PUSH
24311: DOUBLE
24312: LD_INT 1
24314: DEC
24315: ST_TO_ADDR
24316: LD_VAR 0 8
24320: PUSH
24321: FOR_TO
24322: IFFALSE 24517
// begin _d := rand ( 0 , 5 ) ;
24324: LD_ADDR_VAR 0 11
24328: PUSH
24329: LD_INT 0
24331: PPUSH
24332: LD_INT 5
24334: PPUSH
24335: CALL_OW 12
24339: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24340: LD_ADDR_VAR 0 12
24344: PUSH
24345: LD_INT 2
24347: PPUSH
24348: LD_INT 6
24350: PPUSH
24351: CALL_OW 12
24355: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24356: LD_ADDR_VAR 0 9
24360: PUSH
24361: LD_VAR 0 2
24365: PPUSH
24366: LD_VAR 0 11
24370: PPUSH
24371: LD_VAR 0 12
24375: PPUSH
24376: CALL_OW 272
24380: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24381: LD_ADDR_VAR 0 10
24385: PUSH
24386: LD_VAR 0 3
24390: PPUSH
24391: LD_VAR 0 11
24395: PPUSH
24396: LD_VAR 0 12
24400: PPUSH
24401: CALL_OW 273
24405: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24406: LD_VAR 0 9
24410: PPUSH
24411: LD_VAR 0 10
24415: PPUSH
24416: CALL_OW 488
24420: PUSH
24421: LD_VAR 0 9
24425: PUSH
24426: LD_VAR 0 10
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_VAR 0 7
24439: IN
24440: NOT
24441: AND
24442: PUSH
24443: LD_VAR 0 9
24447: PPUSH
24448: LD_VAR 0 10
24452: PPUSH
24453: CALL_OW 458
24457: NOT
24458: AND
24459: IFFALSE 24501
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24461: LD_ADDR_VAR 0 7
24465: PUSH
24466: LD_VAR 0 7
24470: PPUSH
24471: LD_VAR 0 7
24475: PUSH
24476: LD_INT 1
24478: PLUS
24479: PPUSH
24480: LD_VAR 0 9
24484: PUSH
24485: LD_VAR 0 10
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PPUSH
24494: CALL_OW 1
24498: ST_TO_ADDR
24499: GO 24515
// i := i - 1 ;
24501: LD_ADDR_VAR 0 5
24505: PUSH
24506: LD_VAR 0 5
24510: PUSH
24511: LD_INT 1
24513: MINUS
24514: ST_TO_ADDR
// end ;
24515: GO 24321
24517: POP
24518: POP
// for i in tmp do
24519: LD_ADDR_VAR 0 5
24523: PUSH
24524: LD_VAR 0 7
24528: PUSH
24529: FOR_IN
24530: IFFALSE 24568
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24532: LD_VAR 0 1
24536: PPUSH
24537: LD_VAR 0 5
24541: PUSH
24542: LD_INT 1
24544: ARRAY
24545: PPUSH
24546: LD_VAR 0 5
24550: PUSH
24551: LD_INT 2
24553: ARRAY
24554: PPUSH
24555: CALL 23514 0 3
24559: NOT
24560: IFFALSE 24566
// exit ;
24562: POP
24563: POP
24564: GO 24570
24566: GO 24529
24568: POP
24569: POP
// end ;
24570: LD_VAR 0 4
24574: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24575: LD_INT 0
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
// if not GetClass ( unit ) = class_sniper then
24584: LD_VAR 0 1
24588: PPUSH
24589: CALL_OW 257
24593: PUSH
24594: LD_INT 5
24596: EQUAL
24597: NOT
24598: IFFALSE 24602
// exit ;
24600: GO 24990
// dist := 8 ;
24602: LD_ADDR_VAR 0 5
24606: PUSH
24607: LD_INT 8
24609: ST_TO_ADDR
// viewRange := 12 ;
24610: LD_ADDR_VAR 0 7
24614: PUSH
24615: LD_INT 12
24617: ST_TO_ADDR
// side := GetSide ( unit ) ;
24618: LD_ADDR_VAR 0 6
24622: PUSH
24623: LD_VAR 0 1
24627: PPUSH
24628: CALL_OW 255
24632: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24633: LD_INT 61
24635: PPUSH
24636: LD_VAR 0 6
24640: PPUSH
24641: CALL_OW 321
24645: PUSH
24646: LD_INT 2
24648: EQUAL
24649: IFFALSE 24659
// viewRange := 16 ;
24651: LD_ADDR_VAR 0 7
24655: PUSH
24656: LD_INT 16
24658: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24659: LD_VAR 0 1
24663: PPUSH
24664: LD_VAR 0 2
24668: PPUSH
24669: LD_VAR 0 3
24673: PPUSH
24674: CALL_OW 297
24678: PUSH
24679: LD_VAR 0 5
24683: GREATER
24684: IFFALSE 24763
// begin ComMoveXY ( unit , x , y ) ;
24686: LD_VAR 0 1
24690: PPUSH
24691: LD_VAR 0 2
24695: PPUSH
24696: LD_VAR 0 3
24700: PPUSH
24701: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24705: LD_INT 35
24707: PPUSH
24708: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24712: LD_VAR 0 1
24716: PPUSH
24717: LD_VAR 0 2
24721: PPUSH
24722: LD_VAR 0 3
24726: PPUSH
24727: CALL 61494 0 3
24731: NOT
24732: IFFALSE 24736
// exit ;
24734: GO 24990
// until GetDistUnitXY ( unit , x , y ) < dist ;
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_VAR 0 2
24745: PPUSH
24746: LD_VAR 0 3
24750: PPUSH
24751: CALL_OW 297
24755: PUSH
24756: LD_VAR 0 5
24760: LESS
24761: IFFALSE 24705
// end ; ComTurnXY ( unit , x , y ) ;
24763: LD_VAR 0 1
24767: PPUSH
24768: LD_VAR 0 2
24772: PPUSH
24773: LD_VAR 0 3
24777: PPUSH
24778: CALL_OW 118
// wait ( 5 ) ;
24782: LD_INT 5
24784: PPUSH
24785: CALL_OW 67
// _d := GetDir ( unit ) ;
24789: LD_ADDR_VAR 0 10
24793: PUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL_OW 254
24803: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24804: LD_ADDR_VAR 0 8
24808: PUSH
24809: LD_VAR 0 1
24813: PPUSH
24814: CALL_OW 250
24818: PPUSH
24819: LD_VAR 0 10
24823: PPUSH
24824: LD_VAR 0 5
24828: PPUSH
24829: CALL_OW 272
24833: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24834: LD_ADDR_VAR 0 9
24838: PUSH
24839: LD_VAR 0 1
24843: PPUSH
24844: CALL_OW 251
24848: PPUSH
24849: LD_VAR 0 10
24853: PPUSH
24854: LD_VAR 0 5
24858: PPUSH
24859: CALL_OW 273
24863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24864: LD_VAR 0 8
24868: PPUSH
24869: LD_VAR 0 9
24873: PPUSH
24874: CALL_OW 488
24878: NOT
24879: IFFALSE 24883
// exit ;
24881: GO 24990
// ComAnimCustom ( unit , 1 ) ;
24883: LD_VAR 0 1
24887: PPUSH
24888: LD_INT 1
24890: PPUSH
24891: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24895: LD_VAR 0 8
24899: PPUSH
24900: LD_VAR 0 9
24904: PPUSH
24905: LD_VAR 0 6
24909: PPUSH
24910: LD_VAR 0 7
24914: PPUSH
24915: CALL_OW 330
// repeat wait ( 1 ) ;
24919: LD_INT 1
24921: PPUSH
24922: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24926: LD_VAR 0 1
24930: PPUSH
24931: CALL_OW 316
24935: PUSH
24936: LD_VAR 0 1
24940: PPUSH
24941: CALL_OW 314
24945: OR
24946: PUSH
24947: LD_VAR 0 1
24951: PPUSH
24952: CALL_OW 302
24956: NOT
24957: OR
24958: PUSH
24959: LD_VAR 0 1
24963: PPUSH
24964: CALL_OW 301
24968: OR
24969: IFFALSE 24919
// RemoveSeeing ( _x , _y , side ) ;
24971: LD_VAR 0 8
24975: PPUSH
24976: LD_VAR 0 9
24980: PPUSH
24981: LD_VAR 0 6
24985: PPUSH
24986: CALL_OW 331
// end ; end_of_file
24990: LD_VAR 0 4
24994: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
// if exist_mode then
24999: LD_VAR 0 2
25003: IFFALSE 25028
// unit := CreateCharacter ( prefix & ident ) else
25005: LD_ADDR_VAR 0 5
25009: PUSH
25010: LD_VAR 0 3
25014: PUSH
25015: LD_VAR 0 1
25019: STR
25020: PPUSH
25021: CALL_OW 34
25025: ST_TO_ADDR
25026: GO 25043
// unit := NewCharacter ( ident ) ;
25028: LD_ADDR_VAR 0 5
25032: PUSH
25033: LD_VAR 0 1
25037: PPUSH
25038: CALL_OW 25
25042: ST_TO_ADDR
// result := unit ;
25043: LD_ADDR_VAR 0 4
25047: PUSH
25048: LD_VAR 0 5
25052: ST_TO_ADDR
// end ;
25053: LD_VAR 0 4
25057: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
// if not side or not nation then
25062: LD_VAR 0 1
25066: NOT
25067: PUSH
25068: LD_VAR 0 2
25072: NOT
25073: OR
25074: IFFALSE 25078
// exit ;
25076: GO 25846
// case nation of nation_american :
25078: LD_VAR 0 2
25082: PUSH
25083: LD_INT 1
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25305
25091: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25092: LD_ADDR_VAR 0 4
25096: PUSH
25097: LD_INT 35
25099: PUSH
25100: LD_INT 45
25102: PUSH
25103: LD_INT 46
25105: PUSH
25106: LD_INT 47
25108: PUSH
25109: LD_INT 82
25111: PUSH
25112: LD_INT 83
25114: PUSH
25115: LD_INT 84
25117: PUSH
25118: LD_INT 85
25120: PUSH
25121: LD_INT 86
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: LD_INT 2
25129: PUSH
25130: LD_INT 6
25132: PUSH
25133: LD_INT 15
25135: PUSH
25136: LD_INT 16
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: LD_INT 12
25144: PUSH
25145: LD_INT 13
25147: PUSH
25148: LD_INT 10
25150: PUSH
25151: LD_INT 14
25153: PUSH
25154: LD_INT 20
25156: PUSH
25157: LD_INT 21
25159: PUSH
25160: LD_INT 22
25162: PUSH
25163: LD_INT 25
25165: PUSH
25166: LD_INT 32
25168: PUSH
25169: LD_INT 27
25171: PUSH
25172: LD_INT 36
25174: PUSH
25175: LD_INT 69
25177: PUSH
25178: LD_INT 39
25180: PUSH
25181: LD_INT 34
25183: PUSH
25184: LD_INT 40
25186: PUSH
25187: LD_INT 48
25189: PUSH
25190: LD_INT 49
25192: PUSH
25193: LD_INT 50
25195: PUSH
25196: LD_INT 51
25198: PUSH
25199: LD_INT 52
25201: PUSH
25202: LD_INT 53
25204: PUSH
25205: LD_INT 54
25207: PUSH
25208: LD_INT 55
25210: PUSH
25211: LD_INT 56
25213: PUSH
25214: LD_INT 57
25216: PUSH
25217: LD_INT 58
25219: PUSH
25220: LD_INT 59
25222: PUSH
25223: LD_INT 60
25225: PUSH
25226: LD_INT 61
25228: PUSH
25229: LD_INT 62
25231: PUSH
25232: LD_INT 80
25234: PUSH
25235: LD_INT 82
25237: PUSH
25238: LD_INT 83
25240: PUSH
25241: LD_INT 84
25243: PUSH
25244: LD_INT 85
25246: PUSH
25247: LD_INT 86
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 25770
25305: LD_INT 2
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25539
25313: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25314: LD_ADDR_VAR 0 4
25318: PUSH
25319: LD_INT 35
25321: PUSH
25322: LD_INT 45
25324: PUSH
25325: LD_INT 46
25327: PUSH
25328: LD_INT 47
25330: PUSH
25331: LD_INT 82
25333: PUSH
25334: LD_INT 83
25336: PUSH
25337: LD_INT 84
25339: PUSH
25340: LD_INT 85
25342: PUSH
25343: LD_INT 87
25345: PUSH
25346: LD_INT 70
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 11
25354: PUSH
25355: LD_INT 3
25357: PUSH
25358: LD_INT 4
25360: PUSH
25361: LD_INT 5
25363: PUSH
25364: LD_INT 6
25366: PUSH
25367: LD_INT 15
25369: PUSH
25370: LD_INT 18
25372: PUSH
25373: LD_INT 7
25375: PUSH
25376: LD_INT 17
25378: PUSH
25379: LD_INT 8
25381: PUSH
25382: LD_INT 20
25384: PUSH
25385: LD_INT 21
25387: PUSH
25388: LD_INT 22
25390: PUSH
25391: LD_INT 72
25393: PUSH
25394: LD_INT 26
25396: PUSH
25397: LD_INT 69
25399: PUSH
25400: LD_INT 39
25402: PUSH
25403: LD_INT 40
25405: PUSH
25406: LD_INT 41
25408: PUSH
25409: LD_INT 42
25411: PUSH
25412: LD_INT 43
25414: PUSH
25415: LD_INT 48
25417: PUSH
25418: LD_INT 49
25420: PUSH
25421: LD_INT 50
25423: PUSH
25424: LD_INT 51
25426: PUSH
25427: LD_INT 52
25429: PUSH
25430: LD_INT 53
25432: PUSH
25433: LD_INT 54
25435: PUSH
25436: LD_INT 55
25438: PUSH
25439: LD_INT 56
25441: PUSH
25442: LD_INT 60
25444: PUSH
25445: LD_INT 61
25447: PUSH
25448: LD_INT 62
25450: PUSH
25451: LD_INT 66
25453: PUSH
25454: LD_INT 67
25456: PUSH
25457: LD_INT 68
25459: PUSH
25460: LD_INT 81
25462: PUSH
25463: LD_INT 82
25465: PUSH
25466: LD_INT 83
25468: PUSH
25469: LD_INT 84
25471: PUSH
25472: LD_INT 85
25474: PUSH
25475: LD_INT 87
25477: PUSH
25478: LD_INT 88
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: ST_TO_ADDR
25537: GO 25770
25539: LD_INT 3
25541: DOUBLE
25542: EQUAL
25543: IFTRUE 25547
25545: GO 25769
25547: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25548: LD_ADDR_VAR 0 4
25552: PUSH
25553: LD_INT 46
25555: PUSH
25556: LD_INT 47
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: LD_INT 82
25567: PUSH
25568: LD_INT 83
25570: PUSH
25571: LD_INT 84
25573: PUSH
25574: LD_INT 85
25576: PUSH
25577: LD_INT 86
25579: PUSH
25580: LD_INT 11
25582: PUSH
25583: LD_INT 9
25585: PUSH
25586: LD_INT 20
25588: PUSH
25589: LD_INT 19
25591: PUSH
25592: LD_INT 21
25594: PUSH
25595: LD_INT 24
25597: PUSH
25598: LD_INT 22
25600: PUSH
25601: LD_INT 25
25603: PUSH
25604: LD_INT 28
25606: PUSH
25607: LD_INT 29
25609: PUSH
25610: LD_INT 30
25612: PUSH
25613: LD_INT 31
25615: PUSH
25616: LD_INT 37
25618: PUSH
25619: LD_INT 38
25621: PUSH
25622: LD_INT 32
25624: PUSH
25625: LD_INT 27
25627: PUSH
25628: LD_INT 33
25630: PUSH
25631: LD_INT 69
25633: PUSH
25634: LD_INT 39
25636: PUSH
25637: LD_INT 34
25639: PUSH
25640: LD_INT 40
25642: PUSH
25643: LD_INT 71
25645: PUSH
25646: LD_INT 23
25648: PUSH
25649: LD_INT 44
25651: PUSH
25652: LD_INT 48
25654: PUSH
25655: LD_INT 49
25657: PUSH
25658: LD_INT 50
25660: PUSH
25661: LD_INT 51
25663: PUSH
25664: LD_INT 52
25666: PUSH
25667: LD_INT 53
25669: PUSH
25670: LD_INT 54
25672: PUSH
25673: LD_INT 55
25675: PUSH
25676: LD_INT 56
25678: PUSH
25679: LD_INT 57
25681: PUSH
25682: LD_INT 58
25684: PUSH
25685: LD_INT 59
25687: PUSH
25688: LD_INT 63
25690: PUSH
25691: LD_INT 64
25693: PUSH
25694: LD_INT 65
25696: PUSH
25697: LD_INT 82
25699: PUSH
25700: LD_INT 83
25702: PUSH
25703: LD_INT 84
25705: PUSH
25706: LD_INT 85
25708: PUSH
25709: LD_INT 86
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: ST_TO_ADDR
25767: GO 25770
25769: POP
// if state > - 1 and state < 3 then
25770: LD_VAR 0 3
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: GREATER
25779: PUSH
25780: LD_VAR 0 3
25784: PUSH
25785: LD_INT 3
25787: LESS
25788: AND
25789: IFFALSE 25846
// for i in result do
25791: LD_ADDR_VAR 0 5
25795: PUSH
25796: LD_VAR 0 4
25800: PUSH
25801: FOR_IN
25802: IFFALSE 25844
// if GetTech ( i , side ) <> state then
25804: LD_VAR 0 5
25808: PPUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 321
25818: PUSH
25819: LD_VAR 0 3
25823: NONEQUAL
25824: IFFALSE 25842
// result := result diff i ;
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: LD_VAR 0 4
25835: PUSH
25836: LD_VAR 0 5
25840: DIFF
25841: ST_TO_ADDR
25842: GO 25801
25844: POP
25845: POP
// end ;
25846: LD_VAR 0 4
25850: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25851: LD_INT 0
25853: PPUSH
25854: PPUSH
25855: PPUSH
// result := true ;
25856: LD_ADDR_VAR 0 3
25860: PUSH
25861: LD_INT 1
25863: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25864: LD_ADDR_VAR 0 5
25868: PUSH
25869: LD_VAR 0 2
25873: PPUSH
25874: CALL_OW 480
25878: ST_TO_ADDR
// if not tmp then
25879: LD_VAR 0 5
25883: NOT
25884: IFFALSE 25888
// exit ;
25886: GO 25937
// for i in tmp do
25888: LD_ADDR_VAR 0 4
25892: PUSH
25893: LD_VAR 0 5
25897: PUSH
25898: FOR_IN
25899: IFFALSE 25935
// if GetTech ( i , side ) <> state_researched then
25901: LD_VAR 0 4
25905: PPUSH
25906: LD_VAR 0 1
25910: PPUSH
25911: CALL_OW 321
25915: PUSH
25916: LD_INT 2
25918: NONEQUAL
25919: IFFALSE 25933
// begin result := false ;
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_INT 0
25928: ST_TO_ADDR
// exit ;
25929: POP
25930: POP
25931: GO 25937
// end ;
25933: GO 25898
25935: POP
25936: POP
// end ;
25937: LD_VAR 0 3
25941: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25942: LD_INT 0
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25957: LD_VAR 0 1
25961: NOT
25962: PUSH
25963: LD_VAR 0 1
25967: PPUSH
25968: CALL_OW 257
25972: PUSH
25973: LD_INT 9
25975: NONEQUAL
25976: OR
25977: IFFALSE 25981
// exit ;
25979: GO 26554
// side := GetSide ( unit ) ;
25981: LD_ADDR_VAR 0 9
25985: PUSH
25986: LD_VAR 0 1
25990: PPUSH
25991: CALL_OW 255
25995: ST_TO_ADDR
// tech_space := tech_spacanom ;
25996: LD_ADDR_VAR 0 12
26000: PUSH
26001: LD_INT 29
26003: ST_TO_ADDR
// tech_time := tech_taurad ;
26004: LD_ADDR_VAR 0 13
26008: PUSH
26009: LD_INT 28
26011: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26012: LD_ADDR_VAR 0 11
26016: PUSH
26017: LD_VAR 0 1
26021: PPUSH
26022: CALL_OW 310
26026: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26027: LD_VAR 0 11
26031: PPUSH
26032: CALL_OW 247
26036: PUSH
26037: LD_INT 2
26039: EQUAL
26040: IFFALSE 26044
// exit ;
26042: GO 26554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26044: LD_ADDR_VAR 0 8
26048: PUSH
26049: LD_INT 81
26051: PUSH
26052: LD_VAR 0 9
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 3
26063: PUSH
26064: LD_INT 21
26066: PUSH
26067: LD_INT 3
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PPUSH
26082: CALL_OW 69
26086: ST_TO_ADDR
// if not tmp then
26087: LD_VAR 0 8
26091: NOT
26092: IFFALSE 26096
// exit ;
26094: GO 26554
// if in_unit then
26096: LD_VAR 0 11
26100: IFFALSE 26124
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26102: LD_ADDR_VAR 0 10
26106: PUSH
26107: LD_VAR 0 8
26111: PPUSH
26112: LD_VAR 0 11
26116: PPUSH
26117: CALL_OW 74
26121: ST_TO_ADDR
26122: GO 26144
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26124: LD_ADDR_VAR 0 10
26128: PUSH
26129: LD_VAR 0 8
26133: PPUSH
26134: LD_VAR 0 1
26138: PPUSH
26139: CALL_OW 74
26143: ST_TO_ADDR
// if not enemy then
26144: LD_VAR 0 10
26148: NOT
26149: IFFALSE 26153
// exit ;
26151: GO 26554
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26153: LD_VAR 0 11
26157: PUSH
26158: LD_VAR 0 11
26162: PPUSH
26163: LD_VAR 0 10
26167: PPUSH
26168: CALL_OW 296
26172: PUSH
26173: LD_INT 13
26175: GREATER
26176: AND
26177: PUSH
26178: LD_VAR 0 1
26182: PPUSH
26183: LD_VAR 0 10
26187: PPUSH
26188: CALL_OW 296
26192: PUSH
26193: LD_INT 12
26195: GREATER
26196: OR
26197: IFFALSE 26201
// exit ;
26199: GO 26554
// missile := [ 1 ] ;
26201: LD_ADDR_VAR 0 14
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26212: LD_VAR 0 9
26216: PPUSH
26217: LD_VAR 0 12
26221: PPUSH
26222: CALL_OW 325
26226: IFFALSE 26255
// missile := Replace ( missile , missile + 1 , 2 ) ;
26228: LD_ADDR_VAR 0 14
26232: PUSH
26233: LD_VAR 0 14
26237: PPUSH
26238: LD_VAR 0 14
26242: PUSH
26243: LD_INT 1
26245: PLUS
26246: PPUSH
26247: LD_INT 2
26249: PPUSH
26250: CALL_OW 1
26254: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26255: LD_VAR 0 9
26259: PPUSH
26260: LD_VAR 0 13
26264: PPUSH
26265: CALL_OW 325
26269: PUSH
26270: LD_VAR 0 10
26274: PPUSH
26275: CALL_OW 255
26279: PPUSH
26280: LD_VAR 0 13
26284: PPUSH
26285: CALL_OW 325
26289: NOT
26290: AND
26291: IFFALSE 26320
// missile := Replace ( missile , missile + 1 , 3 ) ;
26293: LD_ADDR_VAR 0 14
26297: PUSH
26298: LD_VAR 0 14
26302: PPUSH
26303: LD_VAR 0 14
26307: PUSH
26308: LD_INT 1
26310: PLUS
26311: PPUSH
26312: LD_INT 3
26314: PPUSH
26315: CALL_OW 1
26319: ST_TO_ADDR
// if missile < 2 then
26320: LD_VAR 0 14
26324: PUSH
26325: LD_INT 2
26327: LESS
26328: IFFALSE 26332
// exit ;
26330: GO 26554
// x := GetX ( enemy ) ;
26332: LD_ADDR_VAR 0 4
26336: PUSH
26337: LD_VAR 0 10
26341: PPUSH
26342: CALL_OW 250
26346: ST_TO_ADDR
// y := GetY ( enemy ) ;
26347: LD_ADDR_VAR 0 5
26351: PUSH
26352: LD_VAR 0 10
26356: PPUSH
26357: CALL_OW 251
26361: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26362: LD_ADDR_VAR 0 6
26366: PUSH
26367: LD_VAR 0 4
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PPUSH
26376: LD_INT 1
26378: PPUSH
26379: CALL_OW 12
26383: PLUS
26384: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26385: LD_ADDR_VAR 0 7
26389: PUSH
26390: LD_VAR 0 5
26394: PUSH
26395: LD_INT 1
26397: NEG
26398: PPUSH
26399: LD_INT 1
26401: PPUSH
26402: CALL_OW 12
26406: PLUS
26407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26408: LD_VAR 0 6
26412: PPUSH
26413: LD_VAR 0 7
26417: PPUSH
26418: CALL_OW 488
26422: NOT
26423: IFFALSE 26445
// begin _x := x ;
26425: LD_ADDR_VAR 0 6
26429: PUSH
26430: LD_VAR 0 4
26434: ST_TO_ADDR
// _y := y ;
26435: LD_ADDR_VAR 0 7
26439: PUSH
26440: LD_VAR 0 5
26444: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26445: LD_ADDR_VAR 0 3
26449: PUSH
26450: LD_INT 1
26452: PPUSH
26453: LD_VAR 0 14
26457: PPUSH
26458: CALL_OW 12
26462: ST_TO_ADDR
// case i of 1 :
26463: LD_VAR 0 3
26467: PUSH
26468: LD_INT 1
26470: DOUBLE
26471: EQUAL
26472: IFTRUE 26476
26474: GO 26493
26476: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26477: LD_VAR 0 1
26481: PPUSH
26482: LD_VAR 0 10
26486: PPUSH
26487: CALL_OW 115
26491: GO 26554
26493: LD_INT 2
26495: DOUBLE
26496: EQUAL
26497: IFTRUE 26501
26499: GO 26523
26501: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26502: LD_VAR 0 1
26506: PPUSH
26507: LD_VAR 0 6
26511: PPUSH
26512: LD_VAR 0 7
26516: PPUSH
26517: CALL_OW 153
26521: GO 26554
26523: LD_INT 3
26525: DOUBLE
26526: EQUAL
26527: IFTRUE 26531
26529: GO 26553
26531: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26532: LD_VAR 0 1
26536: PPUSH
26537: LD_VAR 0 6
26541: PPUSH
26542: LD_VAR 0 7
26546: PPUSH
26547: CALL_OW 154
26551: GO 26554
26553: POP
// end ;
26554: LD_VAR 0 2
26558: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26559: LD_INT 0
26561: PPUSH
26562: PPUSH
26563: PPUSH
26564: PPUSH
26565: PPUSH
26566: PPUSH
// if not unit or not building then
26567: LD_VAR 0 1
26571: NOT
26572: PUSH
26573: LD_VAR 0 2
26577: NOT
26578: OR
26579: IFFALSE 26583
// exit ;
26581: GO 26741
// x := GetX ( building ) ;
26583: LD_ADDR_VAR 0 5
26587: PUSH
26588: LD_VAR 0 2
26592: PPUSH
26593: CALL_OW 250
26597: ST_TO_ADDR
// y := GetY ( building ) ;
26598: LD_ADDR_VAR 0 6
26602: PUSH
26603: LD_VAR 0 2
26607: PPUSH
26608: CALL_OW 251
26612: ST_TO_ADDR
// for i = 0 to 5 do
26613: LD_ADDR_VAR 0 4
26617: PUSH
26618: DOUBLE
26619: LD_INT 0
26621: DEC
26622: ST_TO_ADDR
26623: LD_INT 5
26625: PUSH
26626: FOR_TO
26627: IFFALSE 26739
// begin _x := ShiftX ( x , i , 3 ) ;
26629: LD_ADDR_VAR 0 7
26633: PUSH
26634: LD_VAR 0 5
26638: PPUSH
26639: LD_VAR 0 4
26643: PPUSH
26644: LD_INT 3
26646: PPUSH
26647: CALL_OW 272
26651: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26652: LD_ADDR_VAR 0 8
26656: PUSH
26657: LD_VAR 0 6
26661: PPUSH
26662: LD_VAR 0 4
26666: PPUSH
26667: LD_INT 3
26669: PPUSH
26670: CALL_OW 273
26674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26675: LD_VAR 0 7
26679: PPUSH
26680: LD_VAR 0 8
26684: PPUSH
26685: CALL_OW 488
26689: NOT
26690: IFFALSE 26694
// continue ;
26692: GO 26626
// if HexInfo ( _x , _y ) = 0 then
26694: LD_VAR 0 7
26698: PPUSH
26699: LD_VAR 0 8
26703: PPUSH
26704: CALL_OW 428
26708: PUSH
26709: LD_INT 0
26711: EQUAL
26712: IFFALSE 26737
// begin ComMoveXY ( unit , _x , _y ) ;
26714: LD_VAR 0 1
26718: PPUSH
26719: LD_VAR 0 7
26723: PPUSH
26724: LD_VAR 0 8
26728: PPUSH
26729: CALL_OW 111
// exit ;
26733: POP
26734: POP
26735: GO 26741
// end ; end ;
26737: GO 26626
26739: POP
26740: POP
// end ;
26741: LD_VAR 0 3
26745: RET
// export function ScanBase ( side , base_area ) ; begin
26746: LD_INT 0
26748: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26749: LD_ADDR_VAR 0 3
26753: PUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: LD_INT 81
26761: PUSH
26762: LD_VAR 0 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PPUSH
26771: CALL_OW 70
26775: ST_TO_ADDR
// end ;
26776: LD_VAR 0 3
26780: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26781: LD_INT 0
26783: PPUSH
26784: PPUSH
26785: PPUSH
26786: PPUSH
// result := false ;
26787: LD_ADDR_VAR 0 2
26791: PUSH
26792: LD_INT 0
26794: ST_TO_ADDR
// side := GetSide ( unit ) ;
26795: LD_ADDR_VAR 0 3
26799: PUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 255
26809: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 248
26824: ST_TO_ADDR
// case nat of 1 :
26825: LD_VAR 0 4
26829: PUSH
26830: LD_INT 1
26832: DOUBLE
26833: EQUAL
26834: IFTRUE 26838
26836: GO 26849
26838: POP
// tech := tech_lassight ; 2 :
26839: LD_ADDR_VAR 0 5
26843: PUSH
26844: LD_INT 12
26846: ST_TO_ADDR
26847: GO 26888
26849: LD_INT 2
26851: DOUBLE
26852: EQUAL
26853: IFTRUE 26857
26855: GO 26868
26857: POP
// tech := tech_mortar ; 3 :
26858: LD_ADDR_VAR 0 5
26862: PUSH
26863: LD_INT 41
26865: ST_TO_ADDR
26866: GO 26888
26868: LD_INT 3
26870: DOUBLE
26871: EQUAL
26872: IFTRUE 26876
26874: GO 26887
26876: POP
// tech := tech_bazooka ; end ;
26877: LD_ADDR_VAR 0 5
26881: PUSH
26882: LD_INT 44
26884: ST_TO_ADDR
26885: GO 26888
26887: POP
// if Researched ( side , tech ) then
26888: LD_VAR 0 3
26892: PPUSH
26893: LD_VAR 0 5
26897: PPUSH
26898: CALL_OW 325
26902: IFFALSE 26929
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26904: LD_ADDR_VAR 0 2
26908: PUSH
26909: LD_INT 5
26911: PUSH
26912: LD_INT 8
26914: PUSH
26915: LD_INT 9
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: LD_VAR 0 4
26927: ARRAY
26928: ST_TO_ADDR
// end ;
26929: LD_VAR 0 2
26933: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26934: LD_INT 0
26936: PPUSH
26937: PPUSH
26938: PPUSH
// if not mines then
26939: LD_VAR 0 2
26943: NOT
26944: IFFALSE 26948
// exit ;
26946: GO 27092
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26948: LD_ADDR_VAR 0 5
26952: PUSH
26953: LD_INT 81
26955: PUSH
26956: LD_VAR 0 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: LD_INT 21
26970: PUSH
26971: LD_INT 3
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 69
26990: ST_TO_ADDR
// for i in mines do
26991: LD_ADDR_VAR 0 4
26995: PUSH
26996: LD_VAR 0 2
27000: PUSH
27001: FOR_IN
27002: IFFALSE 27090
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27004: LD_VAR 0 4
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PPUSH
27013: LD_VAR 0 4
27017: PUSH
27018: LD_INT 2
27020: ARRAY
27021: PPUSH
27022: CALL_OW 458
27026: NOT
27027: IFFALSE 27031
// continue ;
27029: GO 27001
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27031: LD_VAR 0 4
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: LD_VAR 0 4
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: PPUSH
27049: CALL_OW 428
27053: PUSH
27054: LD_VAR 0 5
27058: IN
27059: IFFALSE 27088
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27061: LD_VAR 0 4
27065: PUSH
27066: LD_INT 1
27068: ARRAY
27069: PPUSH
27070: LD_VAR 0 4
27074: PUSH
27075: LD_INT 2
27077: ARRAY
27078: PPUSH
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL_OW 456
// end ;
27088: GO 27001
27090: POP
27091: POP
// end ;
27092: LD_VAR 0 3
27096: RET
// export function Count ( array ) ; begin
27097: LD_INT 0
27099: PPUSH
// result := array + 0 ;
27100: LD_ADDR_VAR 0 2
27104: PUSH
27105: LD_VAR 0 1
27109: PUSH
27110: LD_INT 0
27112: PLUS
27113: ST_TO_ADDR
// end ;
27114: LD_VAR 0 2
27118: RET
// export function IsEmpty ( building ) ; begin
27119: LD_INT 0
27121: PPUSH
// if not building then
27122: LD_VAR 0 1
27126: NOT
27127: IFFALSE 27131
// exit ;
27129: GO 27174
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27131: LD_ADDR_VAR 0 2
27135: PUSH
27136: LD_VAR 0 1
27140: PUSH
27141: LD_INT 22
27143: PUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 255
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 58
27160: PUSH
27161: EMPTY
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PPUSH
27168: CALL_OW 69
27172: IN
27173: ST_TO_ADDR
// end ;
27174: LD_VAR 0 2
27178: RET
// export function IsNotFull ( building ) ; var places ; begin
27179: LD_INT 0
27181: PPUSH
27182: PPUSH
// if not building then
27183: LD_VAR 0 1
27187: NOT
27188: IFFALSE 27192
// exit ;
27190: GO 27220
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27192: LD_ADDR_VAR 0 2
27196: PUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: LD_INT 3
27204: PUSH
27205: LD_INT 62
27207: PUSH
27208: EMPTY
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PPUSH
27215: CALL_OW 72
27219: ST_TO_ADDR
// end ;
27220: LD_VAR 0 2
27224: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
// tmp := [ ] ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: EMPTY
27237: ST_TO_ADDR
// list := [ ] ;
27238: LD_ADDR_VAR 0 5
27242: PUSH
27243: EMPTY
27244: ST_TO_ADDR
// for i = 16 to 25 do
27245: LD_ADDR_VAR 0 4
27249: PUSH
27250: DOUBLE
27251: LD_INT 16
27253: DEC
27254: ST_TO_ADDR
27255: LD_INT 25
27257: PUSH
27258: FOR_TO
27259: IFFALSE 27332
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27261: LD_ADDR_VAR 0 3
27265: PUSH
27266: LD_VAR 0 3
27270: PUSH
27271: LD_INT 22
27273: PUSH
27274: LD_VAR 0 1
27278: PPUSH
27279: CALL_OW 255
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 91
27290: PUSH
27291: LD_VAR 0 1
27295: PUSH
27296: LD_INT 6
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 30
27306: PUSH
27307: LD_VAR 0 4
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: PPUSH
27324: CALL_OW 69
27328: ADD
27329: ST_TO_ADDR
27330: GO 27258
27332: POP
27333: POP
// for i = 1 to tmp do
27334: LD_ADDR_VAR 0 4
27338: PUSH
27339: DOUBLE
27340: LD_INT 1
27342: DEC
27343: ST_TO_ADDR
27344: LD_VAR 0 3
27348: PUSH
27349: FOR_TO
27350: IFFALSE 27438
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27352: LD_ADDR_VAR 0 5
27356: PUSH
27357: LD_VAR 0 5
27361: PUSH
27362: LD_VAR 0 3
27366: PUSH
27367: LD_VAR 0 4
27371: ARRAY
27372: PPUSH
27373: CALL_OW 266
27377: PUSH
27378: LD_VAR 0 3
27382: PUSH
27383: LD_VAR 0 4
27387: ARRAY
27388: PPUSH
27389: CALL_OW 250
27393: PUSH
27394: LD_VAR 0 3
27398: PUSH
27399: LD_VAR 0 4
27403: ARRAY
27404: PPUSH
27405: CALL_OW 251
27409: PUSH
27410: LD_VAR 0 3
27414: PUSH
27415: LD_VAR 0 4
27419: ARRAY
27420: PPUSH
27421: CALL_OW 254
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: ADD
27435: ST_TO_ADDR
27436: GO 27349
27438: POP
27439: POP
// result := list ;
27440: LD_ADDR_VAR 0 2
27444: PUSH
27445: LD_VAR 0 5
27449: ST_TO_ADDR
// end ;
27450: LD_VAR 0 2
27454: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27455: LD_INT 0
27457: PPUSH
27458: PPUSH
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
// if not factory then
27464: LD_VAR 0 1
27468: NOT
27469: IFFALSE 27473
// exit ;
27471: GO 28066
// if control = control_apeman then
27473: LD_VAR 0 4
27477: PUSH
27478: LD_INT 5
27480: EQUAL
27481: IFFALSE 27590
// begin tmp := UnitsInside ( factory ) ;
27483: LD_ADDR_VAR 0 8
27487: PUSH
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 313
27497: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27498: LD_VAR 0 8
27502: PPUSH
27503: LD_INT 25
27505: PUSH
27506: LD_INT 12
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PPUSH
27513: CALL_OW 72
27517: NOT
27518: IFFALSE 27528
// control := control_manual ;
27520: LD_ADDR_VAR 0 4
27524: PUSH
27525: LD_INT 1
27527: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27528: LD_ADDR_VAR 0 8
27532: PUSH
27533: LD_VAR 0 1
27537: PPUSH
27538: CALL 27225 0 1
27542: ST_TO_ADDR
// if tmp then
27543: LD_VAR 0 8
27547: IFFALSE 27590
// begin for i in tmp do
27549: LD_ADDR_VAR 0 7
27553: PUSH
27554: LD_VAR 0 8
27558: PUSH
27559: FOR_IN
27560: IFFALSE 27588
// if i [ 1 ] = b_ext_radio then
27562: LD_VAR 0 7
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PUSH
27571: LD_INT 22
27573: EQUAL
27574: IFFALSE 27586
// begin control := control_remote ;
27576: LD_ADDR_VAR 0 4
27580: PUSH
27581: LD_INT 2
27583: ST_TO_ADDR
// break ;
27584: GO 27588
// end ;
27586: GO 27559
27588: POP
27589: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27590: LD_VAR 0 1
27594: PPUSH
27595: LD_VAR 0 2
27599: PPUSH
27600: LD_VAR 0 3
27604: PPUSH
27605: LD_VAR 0 4
27609: PPUSH
27610: LD_VAR 0 5
27614: PPUSH
27615: CALL_OW 448
27619: IFFALSE 27654
// begin result := [ chassis , engine , control , weapon ] ;
27621: LD_ADDR_VAR 0 6
27625: PUSH
27626: LD_VAR 0 2
27630: PUSH
27631: LD_VAR 0 3
27635: PUSH
27636: LD_VAR 0 4
27640: PUSH
27641: LD_VAR 0 5
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// exit ;
27652: GO 28066
// end ; _chassis := AvailableChassisList ( factory ) ;
27654: LD_ADDR_VAR 0 9
27658: PUSH
27659: LD_VAR 0 1
27663: PPUSH
27664: CALL_OW 475
27668: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27669: LD_ADDR_VAR 0 11
27673: PUSH
27674: LD_VAR 0 1
27678: PPUSH
27679: CALL_OW 476
27683: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27684: LD_ADDR_VAR 0 12
27688: PUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 477
27698: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27699: LD_ADDR_VAR 0 10
27703: PUSH
27704: LD_VAR 0 1
27708: PPUSH
27709: CALL_OW 478
27713: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27714: LD_VAR 0 9
27718: NOT
27719: PUSH
27720: LD_VAR 0 11
27724: NOT
27725: OR
27726: PUSH
27727: LD_VAR 0 12
27731: NOT
27732: OR
27733: PUSH
27734: LD_VAR 0 10
27738: NOT
27739: OR
27740: IFFALSE 27775
// begin result := [ chassis , engine , control , weapon ] ;
27742: LD_ADDR_VAR 0 6
27746: PUSH
27747: LD_VAR 0 2
27751: PUSH
27752: LD_VAR 0 3
27756: PUSH
27757: LD_VAR 0 4
27761: PUSH
27762: LD_VAR 0 5
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// exit ;
27773: GO 28066
// end ; if not chassis in _chassis then
27775: LD_VAR 0 2
27779: PUSH
27780: LD_VAR 0 9
27784: IN
27785: NOT
27786: IFFALSE 27812
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27788: LD_ADDR_VAR 0 2
27792: PUSH
27793: LD_VAR 0 9
27797: PUSH
27798: LD_INT 1
27800: PPUSH
27801: LD_VAR 0 9
27805: PPUSH
27806: CALL_OW 12
27810: ARRAY
27811: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27812: LD_VAR 0 2
27816: PPUSH
27817: LD_VAR 0 3
27821: PPUSH
27822: CALL 28071 0 2
27826: NOT
27827: IFFALSE 27886
// repeat engine := _engine [ 1 ] ;
27829: LD_ADDR_VAR 0 3
27833: PUSH
27834: LD_VAR 0 11
27838: PUSH
27839: LD_INT 1
27841: ARRAY
27842: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27843: LD_ADDR_VAR 0 11
27847: PUSH
27848: LD_VAR 0 11
27852: PPUSH
27853: LD_INT 1
27855: PPUSH
27856: CALL_OW 3
27860: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27861: LD_VAR 0 2
27865: PPUSH
27866: LD_VAR 0 3
27870: PPUSH
27871: CALL 28071 0 2
27875: PUSH
27876: LD_VAR 0 11
27880: PUSH
27881: EMPTY
27882: EQUAL
27883: OR
27884: IFFALSE 27829
// if not control in _control then
27886: LD_VAR 0 4
27890: PUSH
27891: LD_VAR 0 12
27895: IN
27896: NOT
27897: IFFALSE 27923
// control := _control [ rand ( 1 , _control ) ] ;
27899: LD_ADDR_VAR 0 4
27903: PUSH
27904: LD_VAR 0 12
27908: PUSH
27909: LD_INT 1
27911: PPUSH
27912: LD_VAR 0 12
27916: PPUSH
27917: CALL_OW 12
27921: ARRAY
27922: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27923: LD_VAR 0 2
27927: PPUSH
27928: LD_VAR 0 5
27932: PPUSH
27933: CALL 28291 0 2
27937: NOT
27938: IFFALSE 27997
// repeat weapon := _weapon [ 1 ] ;
27940: LD_ADDR_VAR 0 5
27944: PUSH
27945: LD_VAR 0 10
27949: PUSH
27950: LD_INT 1
27952: ARRAY
27953: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27954: LD_ADDR_VAR 0 10
27958: PUSH
27959: LD_VAR 0 10
27963: PPUSH
27964: LD_INT 1
27966: PPUSH
27967: CALL_OW 3
27971: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 5
27981: PPUSH
27982: CALL 28291 0 2
27986: PUSH
27987: LD_VAR 0 10
27991: PUSH
27992: EMPTY
27993: EQUAL
27994: OR
27995: IFFALSE 27940
// result := [ ] ;
27997: LD_ADDR_VAR 0 6
28001: PUSH
28002: EMPTY
28003: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28004: LD_VAR 0 1
28008: PPUSH
28009: LD_VAR 0 2
28013: PPUSH
28014: LD_VAR 0 3
28018: PPUSH
28019: LD_VAR 0 4
28023: PPUSH
28024: LD_VAR 0 5
28028: PPUSH
28029: CALL_OW 448
28033: IFFALSE 28066
// result := [ chassis , engine , control , weapon ] ;
28035: LD_ADDR_VAR 0 6
28039: PUSH
28040: LD_VAR 0 2
28044: PUSH
28045: LD_VAR 0 3
28049: PUSH
28050: LD_VAR 0 4
28054: PUSH
28055: LD_VAR 0 5
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: ST_TO_ADDR
// end ;
28066: LD_VAR 0 6
28070: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28071: LD_INT 0
28073: PPUSH
// if not chassis or not engine then
28074: LD_VAR 0 1
28078: NOT
28079: PUSH
28080: LD_VAR 0 2
28084: NOT
28085: OR
28086: IFFALSE 28090
// exit ;
28088: GO 28286
// case engine of engine_solar :
28090: LD_VAR 0 2
28094: PUSH
28095: LD_INT 2
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28141
28103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28104: LD_ADDR_VAR 0 3
28108: PUSH
28109: LD_INT 11
28111: PUSH
28112: LD_INT 12
28114: PUSH
28115: LD_INT 13
28117: PUSH
28118: LD_INT 14
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
28139: GO 28270
28141: LD_INT 1
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28211
28149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28150: LD_ADDR_VAR 0 3
28154: PUSH
28155: LD_INT 11
28157: PUSH
28158: LD_INT 12
28160: PUSH
28161: LD_INT 13
28163: PUSH
28164: LD_INT 14
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 3
28175: PUSH
28176: LD_INT 4
28178: PUSH
28179: LD_INT 5
28181: PUSH
28182: LD_INT 21
28184: PUSH
28185: LD_INT 23
28187: PUSH
28188: LD_INT 22
28190: PUSH
28191: LD_INT 24
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
28209: GO 28270
28211: LD_INT 3
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28269
28219: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28220: LD_ADDR_VAR 0 3
28224: PUSH
28225: LD_INT 13
28227: PUSH
28228: LD_INT 14
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: LD_INT 3
28236: PUSH
28237: LD_INT 4
28239: PUSH
28240: LD_INT 5
28242: PUSH
28243: LD_INT 21
28245: PUSH
28246: LD_INT 22
28248: PUSH
28249: LD_INT 23
28251: PUSH
28252: LD_INT 24
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: ST_TO_ADDR
28267: GO 28270
28269: POP
// result := ( chassis in result ) ;
28270: LD_ADDR_VAR 0 3
28274: PUSH
28275: LD_VAR 0 1
28279: PUSH
28280: LD_VAR 0 3
28284: IN
28285: ST_TO_ADDR
// end ;
28286: LD_VAR 0 3
28290: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28291: LD_INT 0
28293: PPUSH
// if not chassis or not weapon then
28294: LD_VAR 0 1
28298: NOT
28299: PUSH
28300: LD_VAR 0 2
28304: NOT
28305: OR
28306: IFFALSE 28310
// exit ;
28308: GO 29370
// case weapon of us_machine_gun :
28310: LD_VAR 0 2
28314: PUSH
28315: LD_INT 2
28317: DOUBLE
28318: EQUAL
28319: IFTRUE 28323
28321: GO 28353
28323: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: LD_INT 3
28337: PUSH
28338: LD_INT 4
28340: PUSH
28341: LD_INT 5
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
28351: GO 29354
28353: LD_INT 3
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28391
28361: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28362: LD_ADDR_VAR 0 3
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: LD_INT 3
28375: PUSH
28376: LD_INT 4
28378: PUSH
28379: LD_INT 5
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: ST_TO_ADDR
28389: GO 29354
28391: LD_INT 11
28393: DOUBLE
28394: EQUAL
28395: IFTRUE 28399
28397: GO 28429
28399: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: LD_INT 3
28413: PUSH
28414: LD_INT 4
28416: PUSH
28417: LD_INT 5
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: ST_TO_ADDR
28427: GO 29354
28429: LD_INT 4
28431: DOUBLE
28432: EQUAL
28433: IFTRUE 28437
28435: GO 28463
28437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28438: LD_ADDR_VAR 0 3
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: LD_INT 4
28451: PUSH
28452: LD_INT 5
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: ST_TO_ADDR
28461: GO 29354
28463: LD_INT 5
28465: DOUBLE
28466: EQUAL
28467: IFTRUE 28471
28469: GO 28497
28471: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28472: LD_ADDR_VAR 0 3
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: LD_INT 3
28482: PUSH
28483: LD_INT 4
28485: PUSH
28486: LD_INT 5
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
28495: GO 29354
28497: LD_INT 9
28499: DOUBLE
28500: EQUAL
28501: IFTRUE 28505
28503: GO 28531
28505: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28506: LD_ADDR_VAR 0 3
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 3
28516: PUSH
28517: LD_INT 4
28519: PUSH
28520: LD_INT 5
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: ST_TO_ADDR
28529: GO 29354
28531: LD_INT 7
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28565
28539: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28540: LD_ADDR_VAR 0 3
28544: PUSH
28545: LD_INT 2
28547: PUSH
28548: LD_INT 3
28550: PUSH
28551: LD_INT 4
28553: PUSH
28554: LD_INT 5
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
28563: GO 29354
28565: LD_INT 12
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28599
28573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28574: LD_ADDR_VAR 0 3
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 4
28587: PUSH
28588: LD_INT 5
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: ST_TO_ADDR
28597: GO 29354
28599: LD_INT 13
28601: DOUBLE
28602: EQUAL
28603: IFTRUE 28607
28605: GO 28633
28607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: LD_INT 3
28618: PUSH
28619: LD_INT 4
28621: PUSH
28622: LD_INT 5
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: ST_TO_ADDR
28631: GO 29354
28633: LD_INT 14
28635: DOUBLE
28636: EQUAL
28637: IFTRUE 28641
28639: GO 28659
28641: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28642: LD_ADDR_VAR 0 3
28646: PUSH
28647: LD_INT 4
28649: PUSH
28650: LD_INT 5
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: ST_TO_ADDR
28657: GO 29354
28659: LD_INT 6
28661: DOUBLE
28662: EQUAL
28663: IFTRUE 28667
28665: GO 28685
28667: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 4
28675: PUSH
28676: LD_INT 5
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 29354
28685: LD_INT 10
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28711
28693: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 4
28701: PUSH
28702: LD_INT 5
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: ST_TO_ADDR
28709: GO 29354
28711: LD_INT 22
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28745
28719: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_INT 11
28727: PUSH
28728: LD_INT 12
28730: PUSH
28731: LD_INT 13
28733: PUSH
28734: LD_INT 14
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: ST_TO_ADDR
28743: GO 29354
28745: LD_INT 23
28747: DOUBLE
28748: EQUAL
28749: IFTRUE 28753
28751: GO 28779
28753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28754: LD_ADDR_VAR 0 3
28758: PUSH
28759: LD_INT 11
28761: PUSH
28762: LD_INT 12
28764: PUSH
28765: LD_INT 13
28767: PUSH
28768: LD_INT 14
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
28777: GO 29354
28779: LD_INT 24
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 28813
28787: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: LD_INT 11
28795: PUSH
28796: LD_INT 12
28798: PUSH
28799: LD_INT 13
28801: PUSH
28802: LD_INT 14
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
28811: GO 29354
28813: LD_INT 30
28815: DOUBLE
28816: EQUAL
28817: IFTRUE 28821
28819: GO 28847
28821: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28822: LD_ADDR_VAR 0 3
28826: PUSH
28827: LD_INT 11
28829: PUSH
28830: LD_INT 12
28832: PUSH
28833: LD_INT 13
28835: PUSH
28836: LD_INT 14
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: ST_TO_ADDR
28845: GO 29354
28847: LD_INT 25
28849: DOUBLE
28850: EQUAL
28851: IFTRUE 28855
28853: GO 28873
28855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28856: LD_ADDR_VAR 0 3
28860: PUSH
28861: LD_INT 13
28863: PUSH
28864: LD_INT 14
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: ST_TO_ADDR
28871: GO 29354
28873: LD_INT 27
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28899
28881: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28882: LD_ADDR_VAR 0 3
28886: PUSH
28887: LD_INT 13
28889: PUSH
28890: LD_INT 14
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: ST_TO_ADDR
28897: GO 29354
28899: LD_INT 92
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28933
28907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 11
28915: PUSH
28916: LD_INT 12
28918: PUSH
28919: LD_INT 13
28921: PUSH
28922: LD_INT 14
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
28931: GO 29354
28933: LD_INT 28
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28959
28941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_INT 13
28949: PUSH
28950: LD_INT 14
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: ST_TO_ADDR
28957: GO 29354
28959: LD_INT 29
28961: DOUBLE
28962: EQUAL
28963: IFTRUE 28967
28965: GO 28985
28967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28968: LD_ADDR_VAR 0 3
28972: PUSH
28973: LD_INT 13
28975: PUSH
28976: LD_INT 14
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: ST_TO_ADDR
28983: GO 29354
28985: LD_INT 31
28987: DOUBLE
28988: EQUAL
28989: IFTRUE 28993
28991: GO 29011
28993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28994: LD_ADDR_VAR 0 3
28998: PUSH
28999: LD_INT 13
29001: PUSH
29002: LD_INT 14
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: ST_TO_ADDR
29009: GO 29354
29011: LD_INT 26
29013: DOUBLE
29014: EQUAL
29015: IFTRUE 29019
29017: GO 29037
29019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29020: LD_ADDR_VAR 0 3
29024: PUSH
29025: LD_INT 13
29027: PUSH
29028: LD_INT 14
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: ST_TO_ADDR
29035: GO 29354
29037: LD_INT 42
29039: DOUBLE
29040: EQUAL
29041: IFTRUE 29045
29043: GO 29071
29045: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: LD_INT 21
29053: PUSH
29054: LD_INT 22
29056: PUSH
29057: LD_INT 23
29059: PUSH
29060: LD_INT 24
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: ST_TO_ADDR
29069: GO 29354
29071: LD_INT 43
29073: DOUBLE
29074: EQUAL
29075: IFTRUE 29079
29077: GO 29105
29079: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29080: LD_ADDR_VAR 0 3
29084: PUSH
29085: LD_INT 21
29087: PUSH
29088: LD_INT 22
29090: PUSH
29091: LD_INT 23
29093: PUSH
29094: LD_INT 24
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: ST_TO_ADDR
29103: GO 29354
29105: LD_INT 44
29107: DOUBLE
29108: EQUAL
29109: IFTRUE 29113
29111: GO 29139
29113: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29114: LD_ADDR_VAR 0 3
29118: PUSH
29119: LD_INT 21
29121: PUSH
29122: LD_INT 22
29124: PUSH
29125: LD_INT 23
29127: PUSH
29128: LD_INT 24
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
29137: GO 29354
29139: LD_INT 45
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29173
29147: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29148: LD_ADDR_VAR 0 3
29152: PUSH
29153: LD_INT 21
29155: PUSH
29156: LD_INT 22
29158: PUSH
29159: LD_INT 23
29161: PUSH
29162: LD_INT 24
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
29171: GO 29354
29173: LD_INT 49
29175: DOUBLE
29176: EQUAL
29177: IFTRUE 29181
29179: GO 29207
29181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29182: LD_ADDR_VAR 0 3
29186: PUSH
29187: LD_INT 21
29189: PUSH
29190: LD_INT 22
29192: PUSH
29193: LD_INT 23
29195: PUSH
29196: LD_INT 24
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: ST_TO_ADDR
29205: GO 29354
29207: LD_INT 51
29209: DOUBLE
29210: EQUAL
29211: IFTRUE 29215
29213: GO 29241
29215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29216: LD_ADDR_VAR 0 3
29220: PUSH
29221: LD_INT 21
29223: PUSH
29224: LD_INT 22
29226: PUSH
29227: LD_INT 23
29229: PUSH
29230: LD_INT 24
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: ST_TO_ADDR
29239: GO 29354
29241: LD_INT 52
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29275
29249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 21
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_INT 23
29263: PUSH
29264: LD_INT 24
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
29273: GO 29354
29275: LD_INT 53
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 29301
29283: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 23
29291: PUSH
29292: LD_INT 24
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: ST_TO_ADDR
29299: GO 29354
29301: LD_INT 46
29303: DOUBLE
29304: EQUAL
29305: IFTRUE 29309
29307: GO 29327
29309: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29310: LD_ADDR_VAR 0 3
29314: PUSH
29315: LD_INT 23
29317: PUSH
29318: LD_INT 24
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: ST_TO_ADDR
29325: GO 29354
29327: LD_INT 47
29329: DOUBLE
29330: EQUAL
29331: IFTRUE 29335
29333: GO 29353
29335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29336: LD_ADDR_VAR 0 3
29340: PUSH
29341: LD_INT 23
29343: PUSH
29344: LD_INT 24
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: ST_TO_ADDR
29351: GO 29354
29353: POP
// result := ( chassis in result ) ;
29354: LD_ADDR_VAR 0 3
29358: PUSH
29359: LD_VAR 0 1
29363: PUSH
29364: LD_VAR 0 3
29368: IN
29369: ST_TO_ADDR
// end ;
29370: LD_VAR 0 3
29374: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
// result := array ;
29384: LD_ADDR_VAR 0 5
29388: PUSH
29389: LD_VAR 0 1
29393: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29394: LD_VAR 0 1
29398: NOT
29399: PUSH
29400: LD_VAR 0 2
29404: NOT
29405: OR
29406: PUSH
29407: LD_VAR 0 3
29411: NOT
29412: OR
29413: PUSH
29414: LD_VAR 0 2
29418: PUSH
29419: LD_VAR 0 1
29423: GREATER
29424: OR
29425: PUSH
29426: LD_VAR 0 3
29430: PUSH
29431: LD_VAR 0 1
29435: GREATER
29436: OR
29437: IFFALSE 29441
// exit ;
29439: GO 29737
// if direction then
29441: LD_VAR 0 4
29445: IFFALSE 29509
// begin d := 1 ;
29447: LD_ADDR_VAR 0 9
29451: PUSH
29452: LD_INT 1
29454: ST_TO_ADDR
// if i_from > i_to then
29455: LD_VAR 0 2
29459: PUSH
29460: LD_VAR 0 3
29464: GREATER
29465: IFFALSE 29491
// length := ( array - i_from ) + i_to else
29467: LD_ADDR_VAR 0 11
29471: PUSH
29472: LD_VAR 0 1
29476: PUSH
29477: LD_VAR 0 2
29481: MINUS
29482: PUSH
29483: LD_VAR 0 3
29487: PLUS
29488: ST_TO_ADDR
29489: GO 29507
// length := i_to - i_from ;
29491: LD_ADDR_VAR 0 11
29495: PUSH
29496: LD_VAR 0 3
29500: PUSH
29501: LD_VAR 0 2
29505: MINUS
29506: ST_TO_ADDR
// end else
29507: GO 29570
// begin d := - 1 ;
29509: LD_ADDR_VAR 0 9
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: ST_TO_ADDR
// if i_from > i_to then
29518: LD_VAR 0 2
29522: PUSH
29523: LD_VAR 0 3
29527: GREATER
29528: IFFALSE 29548
// length := i_from - i_to else
29530: LD_ADDR_VAR 0 11
29534: PUSH
29535: LD_VAR 0 2
29539: PUSH
29540: LD_VAR 0 3
29544: MINUS
29545: ST_TO_ADDR
29546: GO 29570
// length := ( array - i_to ) + i_from ;
29548: LD_ADDR_VAR 0 11
29552: PUSH
29553: LD_VAR 0 1
29557: PUSH
29558: LD_VAR 0 3
29562: MINUS
29563: PUSH
29564: LD_VAR 0 2
29568: PLUS
29569: ST_TO_ADDR
// end ; if not length then
29570: LD_VAR 0 11
29574: NOT
29575: IFFALSE 29579
// exit ;
29577: GO 29737
// tmp := array ;
29579: LD_ADDR_VAR 0 10
29583: PUSH
29584: LD_VAR 0 1
29588: ST_TO_ADDR
// for i = 1 to length do
29589: LD_ADDR_VAR 0 6
29593: PUSH
29594: DOUBLE
29595: LD_INT 1
29597: DEC
29598: ST_TO_ADDR
29599: LD_VAR 0 11
29603: PUSH
29604: FOR_TO
29605: IFFALSE 29725
// begin for j = 1 to array do
29607: LD_ADDR_VAR 0 7
29611: PUSH
29612: DOUBLE
29613: LD_INT 1
29615: DEC
29616: ST_TO_ADDR
29617: LD_VAR 0 1
29621: PUSH
29622: FOR_TO
29623: IFFALSE 29711
// begin k := j + d ;
29625: LD_ADDR_VAR 0 8
29629: PUSH
29630: LD_VAR 0 7
29634: PUSH
29635: LD_VAR 0 9
29639: PLUS
29640: ST_TO_ADDR
// if k > array then
29641: LD_VAR 0 8
29645: PUSH
29646: LD_VAR 0 1
29650: GREATER
29651: IFFALSE 29661
// k := 1 ;
29653: LD_ADDR_VAR 0 8
29657: PUSH
29658: LD_INT 1
29660: ST_TO_ADDR
// if not k then
29661: LD_VAR 0 8
29665: NOT
29666: IFFALSE 29678
// k := array ;
29668: LD_ADDR_VAR 0 8
29672: PUSH
29673: LD_VAR 0 1
29677: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29678: LD_ADDR_VAR 0 10
29682: PUSH
29683: LD_VAR 0 10
29687: PPUSH
29688: LD_VAR 0 8
29692: PPUSH
29693: LD_VAR 0 1
29697: PUSH
29698: LD_VAR 0 7
29702: ARRAY
29703: PPUSH
29704: CALL_OW 1
29708: ST_TO_ADDR
// end ;
29709: GO 29622
29711: POP
29712: POP
// array := tmp ;
29713: LD_ADDR_VAR 0 1
29717: PUSH
29718: LD_VAR 0 10
29722: ST_TO_ADDR
// end ;
29723: GO 29604
29725: POP
29726: POP
// result := array ;
29727: LD_ADDR_VAR 0 5
29731: PUSH
29732: LD_VAR 0 1
29736: ST_TO_ADDR
// end ;
29737: LD_VAR 0 5
29741: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29742: LD_INT 0
29744: PPUSH
29745: PPUSH
// result := 0 ;
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_INT 0
29753: ST_TO_ADDR
// if not array or not value in array then
29754: LD_VAR 0 1
29758: NOT
29759: PUSH
29760: LD_VAR 0 2
29764: PUSH
29765: LD_VAR 0 1
29769: IN
29770: NOT
29771: OR
29772: IFFALSE 29776
// exit ;
29774: GO 29830
// for i = 1 to array do
29776: LD_ADDR_VAR 0 4
29780: PUSH
29781: DOUBLE
29782: LD_INT 1
29784: DEC
29785: ST_TO_ADDR
29786: LD_VAR 0 1
29790: PUSH
29791: FOR_TO
29792: IFFALSE 29828
// if value = array [ i ] then
29794: LD_VAR 0 2
29798: PUSH
29799: LD_VAR 0 1
29803: PUSH
29804: LD_VAR 0 4
29808: ARRAY
29809: EQUAL
29810: IFFALSE 29826
// begin result := i ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_VAR 0 4
29821: ST_TO_ADDR
// exit ;
29822: POP
29823: POP
29824: GO 29830
// end ;
29826: GO 29791
29828: POP
29829: POP
// end ;
29830: LD_VAR 0 3
29834: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29835: LD_INT 0
29837: PPUSH
// vc_chassis := chassis ;
29838: LD_ADDR_OWVAR 37
29842: PUSH
29843: LD_VAR 0 1
29847: ST_TO_ADDR
// vc_engine := engine ;
29848: LD_ADDR_OWVAR 39
29852: PUSH
29853: LD_VAR 0 2
29857: ST_TO_ADDR
// vc_control := control ;
29858: LD_ADDR_OWVAR 38
29862: PUSH
29863: LD_VAR 0 3
29867: ST_TO_ADDR
// vc_weapon := weapon ;
29868: LD_ADDR_OWVAR 40
29872: PUSH
29873: LD_VAR 0 4
29877: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29878: LD_ADDR_OWVAR 41
29882: PUSH
29883: LD_VAR 0 5
29887: ST_TO_ADDR
// end ;
29888: LD_VAR 0 6
29892: RET
// export function WantPlant ( unit ) ; var task ; begin
29893: LD_INT 0
29895: PPUSH
29896: PPUSH
// result := false ;
29897: LD_ADDR_VAR 0 2
29901: PUSH
29902: LD_INT 0
29904: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29905: LD_ADDR_VAR 0 3
29909: PUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 437
29919: ST_TO_ADDR
// if task then
29920: LD_VAR 0 3
29924: IFFALSE 29952
// if task [ 1 ] [ 1 ] = p then
29926: LD_VAR 0 3
29930: PUSH
29931: LD_INT 1
29933: ARRAY
29934: PUSH
29935: LD_INT 1
29937: ARRAY
29938: PUSH
29939: LD_STRING p
29941: EQUAL
29942: IFFALSE 29952
// result := true ;
29944: LD_ADDR_VAR 0 2
29948: PUSH
29949: LD_INT 1
29951: ST_TO_ADDR
// end ;
29952: LD_VAR 0 2
29956: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29957: LD_INT 0
29959: PPUSH
29960: PPUSH
29961: PPUSH
29962: PPUSH
// if pos < 1 then
29963: LD_VAR 0 2
29967: PUSH
29968: LD_INT 1
29970: LESS
29971: IFFALSE 29975
// exit ;
29973: GO 30278
// if pos = 1 then
29975: LD_VAR 0 2
29979: PUSH
29980: LD_INT 1
29982: EQUAL
29983: IFFALSE 30016
// result := Replace ( arr , pos [ 1 ] , value ) else
29985: LD_ADDR_VAR 0 4
29989: PUSH
29990: LD_VAR 0 1
29994: PPUSH
29995: LD_VAR 0 2
29999: PUSH
30000: LD_INT 1
30002: ARRAY
30003: PPUSH
30004: LD_VAR 0 3
30008: PPUSH
30009: CALL_OW 1
30013: ST_TO_ADDR
30014: GO 30278
// begin tmp := arr ;
30016: LD_ADDR_VAR 0 6
30020: PUSH
30021: LD_VAR 0 1
30025: ST_TO_ADDR
// s_arr := [ tmp ] ;
30026: LD_ADDR_VAR 0 7
30030: PUSH
30031: LD_VAR 0 6
30035: PUSH
30036: EMPTY
30037: LIST
30038: ST_TO_ADDR
// for i = 1 to pos - 1 do
30039: LD_ADDR_VAR 0 5
30043: PUSH
30044: DOUBLE
30045: LD_INT 1
30047: DEC
30048: ST_TO_ADDR
30049: LD_VAR 0 2
30053: PUSH
30054: LD_INT 1
30056: MINUS
30057: PUSH
30058: FOR_TO
30059: IFFALSE 30104
// begin tmp := tmp [ pos [ i ] ] ;
30061: LD_ADDR_VAR 0 6
30065: PUSH
30066: LD_VAR 0 6
30070: PUSH
30071: LD_VAR 0 2
30075: PUSH
30076: LD_VAR 0 5
30080: ARRAY
30081: ARRAY
30082: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30083: LD_ADDR_VAR 0 7
30087: PUSH
30088: LD_VAR 0 7
30092: PUSH
30093: LD_VAR 0 6
30097: PUSH
30098: EMPTY
30099: LIST
30100: ADD
30101: ST_TO_ADDR
// end ;
30102: GO 30058
30104: POP
30105: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30106: LD_ADDR_VAR 0 6
30110: PUSH
30111: LD_VAR 0 6
30115: PPUSH
30116: LD_VAR 0 2
30120: PUSH
30121: LD_VAR 0 2
30125: ARRAY
30126: PPUSH
30127: LD_VAR 0 3
30131: PPUSH
30132: CALL_OW 1
30136: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30137: LD_ADDR_VAR 0 7
30141: PUSH
30142: LD_VAR 0 7
30146: PPUSH
30147: LD_VAR 0 7
30151: PPUSH
30152: LD_VAR 0 6
30156: PPUSH
30157: CALL_OW 1
30161: ST_TO_ADDR
// for i = s_arr downto 2 do
30162: LD_ADDR_VAR 0 5
30166: PUSH
30167: DOUBLE
30168: LD_VAR 0 7
30172: INC
30173: ST_TO_ADDR
30174: LD_INT 2
30176: PUSH
30177: FOR_DOWNTO
30178: IFFALSE 30262
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30180: LD_ADDR_VAR 0 6
30184: PUSH
30185: LD_VAR 0 7
30189: PUSH
30190: LD_VAR 0 5
30194: PUSH
30195: LD_INT 1
30197: MINUS
30198: ARRAY
30199: PPUSH
30200: LD_VAR 0 2
30204: PUSH
30205: LD_VAR 0 5
30209: PUSH
30210: LD_INT 1
30212: MINUS
30213: ARRAY
30214: PPUSH
30215: LD_VAR 0 7
30219: PUSH
30220: LD_VAR 0 5
30224: ARRAY
30225: PPUSH
30226: CALL_OW 1
30230: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30231: LD_ADDR_VAR 0 7
30235: PUSH
30236: LD_VAR 0 7
30240: PPUSH
30241: LD_VAR 0 5
30245: PUSH
30246: LD_INT 1
30248: MINUS
30249: PPUSH
30250: LD_VAR 0 6
30254: PPUSH
30255: CALL_OW 1
30259: ST_TO_ADDR
// end ;
30260: GO 30177
30262: POP
30263: POP
// result := s_arr [ 1 ] ;
30264: LD_ADDR_VAR 0 4
30268: PUSH
30269: LD_VAR 0 7
30273: PUSH
30274: LD_INT 1
30276: ARRAY
30277: ST_TO_ADDR
// end ; end ;
30278: LD_VAR 0 4
30282: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30283: LD_INT 0
30285: PPUSH
30286: PPUSH
// if not list then
30287: LD_VAR 0 1
30291: NOT
30292: IFFALSE 30296
// exit ;
30294: GO 30387
// i := list [ pos1 ] ;
30296: LD_ADDR_VAR 0 5
30300: PUSH
30301: LD_VAR 0 1
30305: PUSH
30306: LD_VAR 0 2
30310: ARRAY
30311: ST_TO_ADDR
// if not i then
30312: LD_VAR 0 5
30316: NOT
30317: IFFALSE 30321
// exit ;
30319: GO 30387
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30321: LD_ADDR_VAR 0 1
30325: PUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: LD_VAR 0 2
30335: PPUSH
30336: LD_VAR 0 1
30340: PUSH
30341: LD_VAR 0 3
30345: ARRAY
30346: PPUSH
30347: CALL_OW 1
30351: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30352: LD_ADDR_VAR 0 1
30356: PUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: LD_VAR 0 3
30366: PPUSH
30367: LD_VAR 0 5
30371: PPUSH
30372: CALL_OW 1
30376: ST_TO_ADDR
// result := list ;
30377: LD_ADDR_VAR 0 4
30381: PUSH
30382: LD_VAR 0 1
30386: ST_TO_ADDR
// end ;
30387: LD_VAR 0 4
30391: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30392: LD_INT 0
30394: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30395: LD_ADDR_VAR 0 5
30399: PUSH
30400: LD_VAR 0 1
30404: PPUSH
30405: CALL_OW 250
30409: PPUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 251
30419: PPUSH
30420: LD_VAR 0 2
30424: PPUSH
30425: LD_VAR 0 3
30429: PPUSH
30430: LD_VAR 0 4
30434: PPUSH
30435: CALL 30813 0 5
30439: ST_TO_ADDR
// end ;
30440: LD_VAR 0 5
30444: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30445: LD_INT 0
30447: PPUSH
30448: PPUSH
30449: PPUSH
30450: PPUSH
// if not list or not unit then
30451: LD_VAR 0 2
30455: NOT
30456: PUSH
30457: LD_VAR 0 1
30461: NOT
30462: OR
30463: IFFALSE 30467
// exit ;
30465: GO 30808
// result := [ ] ;
30467: LD_ADDR_VAR 0 5
30471: PUSH
30472: EMPTY
30473: ST_TO_ADDR
// for i in list do
30474: LD_ADDR_VAR 0 6
30478: PUSH
30479: LD_VAR 0 2
30483: PUSH
30484: FOR_IN
30485: IFFALSE 30703
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30487: LD_ADDR_VAR 0 8
30491: PUSH
30492: LD_VAR 0 1
30496: PPUSH
30497: LD_VAR 0 6
30501: PUSH
30502: LD_INT 1
30504: ARRAY
30505: PPUSH
30506: LD_VAR 0 6
30510: PUSH
30511: LD_INT 2
30513: ARRAY
30514: PPUSH
30515: CALL_OW 297
30519: ST_TO_ADDR
// if not Count ( result ) then
30520: LD_VAR 0 5
30524: PPUSH
30525: CALL 27097 0 1
30529: NOT
30530: IFFALSE 30563
// begin result := Join ( result , [ i , tmp ] ) ;
30532: LD_ADDR_VAR 0 5
30536: PUSH
30537: LD_VAR 0 5
30541: PPUSH
30542: LD_VAR 0 6
30546: PUSH
30547: LD_VAR 0 8
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PPUSH
30556: CALL 62697 0 2
30560: ST_TO_ADDR
// continue ;
30561: GO 30484
// end ; if result [ result ] [ 2 ] <= tmp then
30563: LD_VAR 0 5
30567: PUSH
30568: LD_VAR 0 5
30572: ARRAY
30573: PUSH
30574: LD_INT 2
30576: ARRAY
30577: PUSH
30578: LD_VAR 0 8
30582: LESSEQUAL
30583: IFFALSE 30616
// result := Join ( result , [ i , tmp ] ) else
30585: LD_ADDR_VAR 0 5
30589: PUSH
30590: LD_VAR 0 5
30594: PPUSH
30595: LD_VAR 0 6
30599: PUSH
30600: LD_VAR 0 8
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PPUSH
30609: CALL 62697 0 2
30613: ST_TO_ADDR
30614: GO 30701
// begin for j := 1 to Count ( result ) do
30616: LD_ADDR_VAR 0 7
30620: PUSH
30621: DOUBLE
30622: LD_INT 1
30624: DEC
30625: ST_TO_ADDR
30626: LD_VAR 0 5
30630: PPUSH
30631: CALL 27097 0 1
30635: PUSH
30636: FOR_TO
30637: IFFALSE 30699
// begin if tmp < result [ j ] [ 2 ] then
30639: LD_VAR 0 8
30643: PUSH
30644: LD_VAR 0 5
30648: PUSH
30649: LD_VAR 0 7
30653: ARRAY
30654: PUSH
30655: LD_INT 2
30657: ARRAY
30658: LESS
30659: IFFALSE 30697
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30661: LD_ADDR_VAR 0 5
30665: PUSH
30666: LD_VAR 0 5
30670: PPUSH
30671: LD_VAR 0 7
30675: PPUSH
30676: LD_VAR 0 6
30680: PUSH
30681: LD_VAR 0 8
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PPUSH
30690: CALL_OW 2
30694: ST_TO_ADDR
// break ;
30695: GO 30699
// end ; end ;
30697: GO 30636
30699: POP
30700: POP
// end ; end ;
30701: GO 30484
30703: POP
30704: POP
// if result and not asc then
30705: LD_VAR 0 5
30709: PUSH
30710: LD_VAR 0 3
30714: NOT
30715: AND
30716: IFFALSE 30733
// result := ReverseArray ( result ) ;
30718: LD_ADDR_VAR 0 5
30722: PUSH
30723: LD_VAR 0 5
30727: PPUSH
30728: CALL 57973 0 1
30732: ST_TO_ADDR
// tmp := [ ] ;
30733: LD_ADDR_VAR 0 8
30737: PUSH
30738: EMPTY
30739: ST_TO_ADDR
// if mode then
30740: LD_VAR 0 4
30744: IFFALSE 30808
// begin for i := 1 to result do
30746: LD_ADDR_VAR 0 6
30750: PUSH
30751: DOUBLE
30752: LD_INT 1
30754: DEC
30755: ST_TO_ADDR
30756: LD_VAR 0 5
30760: PUSH
30761: FOR_TO
30762: IFFALSE 30796
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30764: LD_ADDR_VAR 0 8
30768: PUSH
30769: LD_VAR 0 8
30773: PPUSH
30774: LD_VAR 0 5
30778: PUSH
30779: LD_VAR 0 6
30783: ARRAY
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PPUSH
30789: CALL 62697 0 2
30793: ST_TO_ADDR
30794: GO 30761
30796: POP
30797: POP
// result := tmp ;
30798: LD_ADDR_VAR 0 5
30802: PUSH
30803: LD_VAR 0 8
30807: ST_TO_ADDR
// end ; end ;
30808: LD_VAR 0 5
30812: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30813: LD_INT 0
30815: PPUSH
30816: PPUSH
30817: PPUSH
30818: PPUSH
// if not list then
30819: LD_VAR 0 3
30823: NOT
30824: IFFALSE 30828
// exit ;
30826: GO 31216
// result := [ ] ;
30828: LD_ADDR_VAR 0 6
30832: PUSH
30833: EMPTY
30834: ST_TO_ADDR
// for i in list do
30835: LD_ADDR_VAR 0 7
30839: PUSH
30840: LD_VAR 0 3
30844: PUSH
30845: FOR_IN
30846: IFFALSE 31048
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30848: LD_ADDR_VAR 0 9
30852: PUSH
30853: LD_VAR 0 7
30857: PPUSH
30858: LD_VAR 0 1
30862: PPUSH
30863: LD_VAR 0 2
30867: PPUSH
30868: CALL_OW 297
30872: ST_TO_ADDR
// if not result then
30873: LD_VAR 0 6
30877: NOT
30878: IFFALSE 30904
// result := [ [ i , tmp ] ] else
30880: LD_ADDR_VAR 0 6
30884: PUSH
30885: LD_VAR 0 7
30889: PUSH
30890: LD_VAR 0 9
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: ST_TO_ADDR
30902: GO 31046
// begin if result [ result ] [ 2 ] < tmp then
30904: LD_VAR 0 6
30908: PUSH
30909: LD_VAR 0 6
30913: ARRAY
30914: PUSH
30915: LD_INT 2
30917: ARRAY
30918: PUSH
30919: LD_VAR 0 9
30923: LESS
30924: IFFALSE 30966
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30926: LD_ADDR_VAR 0 6
30930: PUSH
30931: LD_VAR 0 6
30935: PPUSH
30936: LD_VAR 0 6
30940: PUSH
30941: LD_INT 1
30943: PLUS
30944: PPUSH
30945: LD_VAR 0 7
30949: PUSH
30950: LD_VAR 0 9
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PPUSH
30959: CALL_OW 2
30963: ST_TO_ADDR
30964: GO 31046
// for j = 1 to result do
30966: LD_ADDR_VAR 0 8
30970: PUSH
30971: DOUBLE
30972: LD_INT 1
30974: DEC
30975: ST_TO_ADDR
30976: LD_VAR 0 6
30980: PUSH
30981: FOR_TO
30982: IFFALSE 31044
// begin if tmp < result [ j ] [ 2 ] then
30984: LD_VAR 0 9
30988: PUSH
30989: LD_VAR 0 6
30993: PUSH
30994: LD_VAR 0 8
30998: ARRAY
30999: PUSH
31000: LD_INT 2
31002: ARRAY
31003: LESS
31004: IFFALSE 31042
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31006: LD_ADDR_VAR 0 6
31010: PUSH
31011: LD_VAR 0 6
31015: PPUSH
31016: LD_VAR 0 8
31020: PPUSH
31021: LD_VAR 0 7
31025: PUSH
31026: LD_VAR 0 9
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PPUSH
31035: CALL_OW 2
31039: ST_TO_ADDR
// break ;
31040: GO 31044
// end ; end ;
31042: GO 30981
31044: POP
31045: POP
// end ; end ;
31046: GO 30845
31048: POP
31049: POP
// if result and not asc then
31050: LD_VAR 0 6
31054: PUSH
31055: LD_VAR 0 4
31059: NOT
31060: AND
31061: IFFALSE 31136
// begin tmp := result ;
31063: LD_ADDR_VAR 0 9
31067: PUSH
31068: LD_VAR 0 6
31072: ST_TO_ADDR
// for i = tmp downto 1 do
31073: LD_ADDR_VAR 0 7
31077: PUSH
31078: DOUBLE
31079: LD_VAR 0 9
31083: INC
31084: ST_TO_ADDR
31085: LD_INT 1
31087: PUSH
31088: FOR_DOWNTO
31089: IFFALSE 31134
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31091: LD_ADDR_VAR 0 6
31095: PUSH
31096: LD_VAR 0 6
31100: PPUSH
31101: LD_VAR 0 9
31105: PUSH
31106: LD_VAR 0 7
31110: MINUS
31111: PUSH
31112: LD_INT 1
31114: PLUS
31115: PPUSH
31116: LD_VAR 0 9
31120: PUSH
31121: LD_VAR 0 7
31125: ARRAY
31126: PPUSH
31127: CALL_OW 1
31131: ST_TO_ADDR
31132: GO 31088
31134: POP
31135: POP
// end ; tmp := [ ] ;
31136: LD_ADDR_VAR 0 9
31140: PUSH
31141: EMPTY
31142: ST_TO_ADDR
// if mode then
31143: LD_VAR 0 5
31147: IFFALSE 31216
// begin for i = 1 to result do
31149: LD_ADDR_VAR 0 7
31153: PUSH
31154: DOUBLE
31155: LD_INT 1
31157: DEC
31158: ST_TO_ADDR
31159: LD_VAR 0 6
31163: PUSH
31164: FOR_TO
31165: IFFALSE 31204
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31167: LD_ADDR_VAR 0 9
31171: PUSH
31172: LD_VAR 0 9
31176: PPUSH
31177: LD_VAR 0 7
31181: PPUSH
31182: LD_VAR 0 6
31186: PUSH
31187: LD_VAR 0 7
31191: ARRAY
31192: PUSH
31193: LD_INT 1
31195: ARRAY
31196: PPUSH
31197: CALL_OW 1
31201: ST_TO_ADDR
31202: GO 31164
31204: POP
31205: POP
// result := tmp ;
31206: LD_ADDR_VAR 0 6
31210: PUSH
31211: LD_VAR 0 9
31215: ST_TO_ADDR
// end ; end ;
31216: LD_VAR 0 6
31220: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31221: LD_INT 0
31223: PPUSH
31224: PPUSH
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31229: LD_ADDR_VAR 0 5
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: EMPTY
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: ST_TO_ADDR
// if not x or not y then
31251: LD_VAR 0 2
31255: NOT
31256: PUSH
31257: LD_VAR 0 3
31261: NOT
31262: OR
31263: IFFALSE 31267
// exit ;
31265: GO 32917
// if not range then
31267: LD_VAR 0 4
31271: NOT
31272: IFFALSE 31282
// range := 10 ;
31274: LD_ADDR_VAR 0 4
31278: PUSH
31279: LD_INT 10
31281: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31282: LD_ADDR_VAR 0 8
31286: PUSH
31287: LD_INT 81
31289: PUSH
31290: LD_VAR 0 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 92
31301: PUSH
31302: LD_VAR 0 2
31306: PUSH
31307: LD_VAR 0 3
31311: PUSH
31312: LD_VAR 0 4
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: LD_INT 21
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: PPUSH
31345: CALL_OW 69
31349: ST_TO_ADDR
// if not tmp then
31350: LD_VAR 0 8
31354: NOT
31355: IFFALSE 31359
// exit ;
31357: GO 32917
// for i in tmp do
31359: LD_ADDR_VAR 0 6
31363: PUSH
31364: LD_VAR 0 8
31368: PUSH
31369: FOR_IN
31370: IFFALSE 32892
// begin points := [ 0 , 0 , 0 ] ;
31372: LD_ADDR_VAR 0 9
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: ST_TO_ADDR
// bpoints := 1 ;
31391: LD_ADDR_VAR 0 10
31395: PUSH
31396: LD_INT 1
31398: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31399: LD_VAR 0 6
31403: PPUSH
31404: CALL_OW 247
31408: PUSH
31409: LD_INT 1
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31995
31417: POP
// begin if GetClass ( i ) = 1 then
31418: LD_VAR 0 6
31422: PPUSH
31423: CALL_OW 257
31427: PUSH
31428: LD_INT 1
31430: EQUAL
31431: IFFALSE 31452
// points := [ 10 , 5 , 3 ] ;
31433: LD_ADDR_VAR 0 9
31437: PUSH
31438: LD_INT 10
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31452: LD_VAR 0 6
31456: PPUSH
31457: CALL_OW 257
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: LD_INT 4
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: IN
31476: IFFALSE 31497
// points := [ 3 , 2 , 1 ] ;
31478: LD_ADDR_VAR 0 9
31482: PUSH
31483: LD_INT 3
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: LIST
31496: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31497: LD_VAR 0 6
31501: PPUSH
31502: CALL_OW 257
31506: PUSH
31507: LD_INT 5
31509: EQUAL
31510: IFFALSE 31531
// points := [ 130 , 5 , 2 ] ;
31512: LD_ADDR_VAR 0 9
31516: PUSH
31517: LD_INT 130
31519: PUSH
31520: LD_INT 5
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31531: LD_VAR 0 6
31535: PPUSH
31536: CALL_OW 257
31540: PUSH
31541: LD_INT 8
31543: EQUAL
31544: IFFALSE 31565
// points := [ 35 , 35 , 30 ] ;
31546: LD_ADDR_VAR 0 9
31550: PUSH
31551: LD_INT 35
31553: PUSH
31554: LD_INT 35
31556: PUSH
31557: LD_INT 30
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31565: LD_VAR 0 6
31569: PPUSH
31570: CALL_OW 257
31574: PUSH
31575: LD_INT 9
31577: EQUAL
31578: IFFALSE 31599
// points := [ 20 , 55 , 40 ] ;
31580: LD_ADDR_VAR 0 9
31584: PUSH
31585: LD_INT 20
31587: PUSH
31588: LD_INT 55
31590: PUSH
31591: LD_INT 40
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31599: LD_VAR 0 6
31603: PPUSH
31604: CALL_OW 257
31608: PUSH
31609: LD_INT 12
31611: PUSH
31612: LD_INT 16
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: IN
31619: IFFALSE 31640
// points := [ 5 , 3 , 2 ] ;
31621: LD_ADDR_VAR 0 9
31625: PUSH
31626: LD_INT 5
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31640: LD_VAR 0 6
31644: PPUSH
31645: CALL_OW 257
31649: PUSH
31650: LD_INT 17
31652: EQUAL
31653: IFFALSE 31674
// points := [ 100 , 50 , 75 ] ;
31655: LD_ADDR_VAR 0 9
31659: PUSH
31660: LD_INT 100
31662: PUSH
31663: LD_INT 50
31665: PUSH
31666: LD_INT 75
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31674: LD_VAR 0 6
31678: PPUSH
31679: CALL_OW 257
31683: PUSH
31684: LD_INT 15
31686: EQUAL
31687: IFFALSE 31708
// points := [ 10 , 5 , 3 ] ;
31689: LD_ADDR_VAR 0 9
31693: PUSH
31694: LD_INT 10
31696: PUSH
31697: LD_INT 5
31699: PUSH
31700: LD_INT 3
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31708: LD_VAR 0 6
31712: PPUSH
31713: CALL_OW 257
31717: PUSH
31718: LD_INT 14
31720: EQUAL
31721: IFFALSE 31742
// points := [ 10 , 0 , 0 ] ;
31723: LD_ADDR_VAR 0 9
31727: PUSH
31728: LD_INT 10
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31742: LD_VAR 0 6
31746: PPUSH
31747: CALL_OW 257
31751: PUSH
31752: LD_INT 11
31754: EQUAL
31755: IFFALSE 31776
// points := [ 30 , 10 , 5 ] ;
31757: LD_ADDR_VAR 0 9
31761: PUSH
31762: LD_INT 30
31764: PUSH
31765: LD_INT 10
31767: PUSH
31768: LD_INT 5
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31776: LD_VAR 0 1
31780: PPUSH
31781: LD_INT 5
31783: PPUSH
31784: CALL_OW 321
31788: PUSH
31789: LD_INT 2
31791: EQUAL
31792: IFFALSE 31809
// bpoints := bpoints * 1.8 ;
31794: LD_ADDR_VAR 0 10
31798: PUSH
31799: LD_VAR 0 10
31803: PUSH
31804: LD_REAL  1.80000000000000E+0000
31807: MUL
31808: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31809: LD_VAR 0 6
31813: PPUSH
31814: CALL_OW 257
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: LD_INT 4
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: IN
31837: PUSH
31838: LD_VAR 0 1
31842: PPUSH
31843: LD_INT 51
31845: PPUSH
31846: CALL_OW 321
31850: PUSH
31851: LD_INT 2
31853: EQUAL
31854: AND
31855: IFFALSE 31872
// bpoints := bpoints * 1.2 ;
31857: LD_ADDR_VAR 0 10
31861: PUSH
31862: LD_VAR 0 10
31866: PUSH
31867: LD_REAL  1.20000000000000E+0000
31870: MUL
31871: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31872: LD_VAR 0 6
31876: PPUSH
31877: CALL_OW 257
31881: PUSH
31882: LD_INT 5
31884: PUSH
31885: LD_INT 7
31887: PUSH
31888: LD_INT 9
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: IN
31896: PUSH
31897: LD_VAR 0 1
31901: PPUSH
31902: LD_INT 52
31904: PPUSH
31905: CALL_OW 321
31909: PUSH
31910: LD_INT 2
31912: EQUAL
31913: AND
31914: IFFALSE 31931
// bpoints := bpoints * 1.5 ;
31916: LD_ADDR_VAR 0 10
31920: PUSH
31921: LD_VAR 0 10
31925: PUSH
31926: LD_REAL  1.50000000000000E+0000
31929: MUL
31930: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31931: LD_VAR 0 1
31935: PPUSH
31936: LD_INT 66
31938: PPUSH
31939: CALL_OW 321
31943: PUSH
31944: LD_INT 2
31946: EQUAL
31947: IFFALSE 31964
// bpoints := bpoints * 1.1 ;
31949: LD_ADDR_VAR 0 10
31953: PUSH
31954: LD_VAR 0 10
31958: PUSH
31959: LD_REAL  1.10000000000000E+0000
31962: MUL
31963: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31964: LD_ADDR_VAR 0 10
31968: PUSH
31969: LD_VAR 0 10
31973: PUSH
31974: LD_VAR 0 6
31978: PPUSH
31979: LD_INT 1
31981: PPUSH
31982: CALL_OW 259
31986: PUSH
31987: LD_REAL  1.15000000000000E+0000
31990: MUL
31991: MUL
31992: ST_TO_ADDR
// end ; unit_vehicle :
31993: GO 32821
31995: LD_INT 2
31997: DOUBLE
31998: EQUAL
31999: IFTRUE 32003
32001: GO 32809
32003: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32004: LD_VAR 0 6
32008: PPUSH
32009: CALL_OW 264
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 42
32019: PUSH
32020: LD_INT 24
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: IN
32028: IFFALSE 32049
// points := [ 25 , 5 , 3 ] ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_INT 25
32037: PUSH
32038: LD_INT 5
32040: PUSH
32041: LD_INT 3
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32049: LD_VAR 0 6
32053: PPUSH
32054: CALL_OW 264
32058: PUSH
32059: LD_INT 4
32061: PUSH
32062: LD_INT 43
32064: PUSH
32065: LD_INT 25
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: IN
32073: IFFALSE 32094
// points := [ 40 , 15 , 5 ] ;
32075: LD_ADDR_VAR 0 9
32079: PUSH
32080: LD_INT 40
32082: PUSH
32083: LD_INT 15
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32094: LD_VAR 0 6
32098: PPUSH
32099: CALL_OW 264
32103: PUSH
32104: LD_INT 3
32106: PUSH
32107: LD_INT 23
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: IN
32114: IFFALSE 32135
// points := [ 7 , 25 , 8 ] ;
32116: LD_ADDR_VAR 0 9
32120: PUSH
32121: LD_INT 7
32123: PUSH
32124: LD_INT 25
32126: PUSH
32127: LD_INT 8
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32135: LD_VAR 0 6
32139: PPUSH
32140: CALL_OW 264
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: LD_INT 27
32150: PUSH
32151: LD_INT 44
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: IN
32159: IFFALSE 32180
// points := [ 14 , 50 , 16 ] ;
32161: LD_ADDR_VAR 0 9
32165: PUSH
32166: LD_INT 14
32168: PUSH
32169: LD_INT 50
32171: PUSH
32172: LD_INT 16
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32180: LD_VAR 0 6
32184: PPUSH
32185: CALL_OW 264
32189: PUSH
32190: LD_INT 6
32192: PUSH
32193: LD_INT 46
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: IN
32200: IFFALSE 32221
// points := [ 32 , 120 , 70 ] ;
32202: LD_ADDR_VAR 0 9
32206: PUSH
32207: LD_INT 32
32209: PUSH
32210: LD_INT 120
32212: PUSH
32213: LD_INT 70
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32221: LD_VAR 0 6
32225: PPUSH
32226: CALL_OW 264
32230: PUSH
32231: LD_INT 7
32233: PUSH
32234: LD_INT 28
32236: PUSH
32237: LD_INT 45
32239: PUSH
32240: LD_INT 92
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: IN
32249: IFFALSE 32270
// points := [ 35 , 20 , 45 ] ;
32251: LD_ADDR_VAR 0 9
32255: PUSH
32256: LD_INT 35
32258: PUSH
32259: LD_INT 20
32261: PUSH
32262: LD_INT 45
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32270: LD_VAR 0 6
32274: PPUSH
32275: CALL_OW 264
32279: PUSH
32280: LD_INT 47
32282: PUSH
32283: EMPTY
32284: LIST
32285: IN
32286: IFFALSE 32307
// points := [ 67 , 45 , 75 ] ;
32288: LD_ADDR_VAR 0 9
32292: PUSH
32293: LD_INT 67
32295: PUSH
32296: LD_INT 45
32298: PUSH
32299: LD_INT 75
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32307: LD_VAR 0 6
32311: PPUSH
32312: CALL_OW 264
32316: PUSH
32317: LD_INT 26
32319: PUSH
32320: EMPTY
32321: LIST
32322: IN
32323: IFFALSE 32344
// points := [ 120 , 30 , 80 ] ;
32325: LD_ADDR_VAR 0 9
32329: PUSH
32330: LD_INT 120
32332: PUSH
32333: LD_INT 30
32335: PUSH
32336: LD_INT 80
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32344: LD_VAR 0 6
32348: PPUSH
32349: CALL_OW 264
32353: PUSH
32354: LD_INT 22
32356: PUSH
32357: EMPTY
32358: LIST
32359: IN
32360: IFFALSE 32381
// points := [ 40 , 1 , 1 ] ;
32362: LD_ADDR_VAR 0 9
32366: PUSH
32367: LD_INT 40
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32381: LD_VAR 0 6
32385: PPUSH
32386: CALL_OW 264
32390: PUSH
32391: LD_INT 29
32393: PUSH
32394: EMPTY
32395: LIST
32396: IN
32397: IFFALSE 32418
// points := [ 70 , 200 , 400 ] ;
32399: LD_ADDR_VAR 0 9
32403: PUSH
32404: LD_INT 70
32406: PUSH
32407: LD_INT 200
32409: PUSH
32410: LD_INT 400
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 264
32427: PUSH
32428: LD_INT 14
32430: PUSH
32431: LD_INT 53
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: IN
32438: IFFALSE 32459
// points := [ 40 , 10 , 20 ] ;
32440: LD_ADDR_VAR 0 9
32444: PUSH
32445: LD_INT 40
32447: PUSH
32448: LD_INT 10
32450: PUSH
32451: LD_INT 20
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32459: LD_VAR 0 6
32463: PPUSH
32464: CALL_OW 264
32468: PUSH
32469: LD_INT 9
32471: PUSH
32472: EMPTY
32473: LIST
32474: IN
32475: IFFALSE 32496
// points := [ 5 , 70 , 20 ] ;
32477: LD_ADDR_VAR 0 9
32481: PUSH
32482: LD_INT 5
32484: PUSH
32485: LD_INT 70
32487: PUSH
32488: LD_INT 20
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32496: LD_VAR 0 6
32500: PPUSH
32501: CALL_OW 264
32505: PUSH
32506: LD_INT 10
32508: PUSH
32509: EMPTY
32510: LIST
32511: IN
32512: IFFALSE 32533
// points := [ 35 , 110 , 70 ] ;
32514: LD_ADDR_VAR 0 9
32518: PUSH
32519: LD_INT 35
32521: PUSH
32522: LD_INT 110
32524: PUSH
32525: LD_INT 70
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32533: LD_VAR 0 6
32537: PPUSH
32538: CALL_OW 265
32542: PUSH
32543: LD_INT 25
32545: EQUAL
32546: IFFALSE 32567
// points := [ 80 , 65 , 100 ] ;
32548: LD_ADDR_VAR 0 9
32552: PUSH
32553: LD_INT 80
32555: PUSH
32556: LD_INT 65
32558: PUSH
32559: LD_INT 100
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: LIST
32566: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32567: LD_VAR 0 6
32571: PPUSH
32572: CALL_OW 263
32576: PUSH
32577: LD_INT 1
32579: EQUAL
32580: IFFALSE 32615
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32582: LD_ADDR_VAR 0 10
32586: PUSH
32587: LD_VAR 0 10
32591: PUSH
32592: LD_VAR 0 6
32596: PPUSH
32597: CALL_OW 311
32601: PPUSH
32602: LD_INT 3
32604: PPUSH
32605: CALL_OW 259
32609: PUSH
32610: LD_INT 4
32612: MUL
32613: MUL
32614: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32615: LD_VAR 0 6
32619: PPUSH
32620: CALL_OW 263
32624: PUSH
32625: LD_INT 2
32627: EQUAL
32628: IFFALSE 32679
// begin j := IsControledBy ( i ) ;
32630: LD_ADDR_VAR 0 7
32634: PUSH
32635: LD_VAR 0 6
32639: PPUSH
32640: CALL_OW 312
32644: ST_TO_ADDR
// if j then
32645: LD_VAR 0 7
32649: IFFALSE 32679
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32651: LD_ADDR_VAR 0 10
32655: PUSH
32656: LD_VAR 0 10
32660: PUSH
32661: LD_VAR 0 7
32665: PPUSH
32666: LD_INT 3
32668: PPUSH
32669: CALL_OW 259
32673: PUSH
32674: LD_INT 3
32676: MUL
32677: MUL
32678: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32679: LD_VAR 0 6
32683: PPUSH
32684: CALL_OW 264
32688: PUSH
32689: LD_INT 5
32691: PUSH
32692: LD_INT 6
32694: PUSH
32695: LD_INT 46
32697: PUSH
32698: LD_INT 44
32700: PUSH
32701: LD_INT 47
32703: PUSH
32704: LD_INT 45
32706: PUSH
32707: LD_INT 28
32709: PUSH
32710: LD_INT 7
32712: PUSH
32713: LD_INT 27
32715: PUSH
32716: LD_INT 29
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: IN
32731: PUSH
32732: LD_VAR 0 1
32736: PPUSH
32737: LD_INT 52
32739: PPUSH
32740: CALL_OW 321
32744: PUSH
32745: LD_INT 2
32747: EQUAL
32748: AND
32749: IFFALSE 32766
// bpoints := bpoints * 1.2 ;
32751: LD_ADDR_VAR 0 10
32755: PUSH
32756: LD_VAR 0 10
32760: PUSH
32761: LD_REAL  1.20000000000000E+0000
32764: MUL
32765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32766: LD_VAR 0 6
32770: PPUSH
32771: CALL_OW 264
32775: PUSH
32776: LD_INT 6
32778: PUSH
32779: LD_INT 46
32781: PUSH
32782: LD_INT 47
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: LIST
32789: IN
32790: IFFALSE 32807
// bpoints := bpoints * 1.2 ;
32792: LD_ADDR_VAR 0 10
32796: PUSH
32797: LD_VAR 0 10
32801: PUSH
32802: LD_REAL  1.20000000000000E+0000
32805: MUL
32806: ST_TO_ADDR
// end ; unit_building :
32807: GO 32821
32809: LD_INT 3
32811: DOUBLE
32812: EQUAL
32813: IFTRUE 32817
32815: GO 32820
32817: POP
// ; end ;
32818: GO 32821
32820: POP
// for j = 1 to 3 do
32821: LD_ADDR_VAR 0 7
32825: PUSH
32826: DOUBLE
32827: LD_INT 1
32829: DEC
32830: ST_TO_ADDR
32831: LD_INT 3
32833: PUSH
32834: FOR_TO
32835: IFFALSE 32888
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32837: LD_ADDR_VAR 0 5
32841: PUSH
32842: LD_VAR 0 5
32846: PPUSH
32847: LD_VAR 0 7
32851: PPUSH
32852: LD_VAR 0 5
32856: PUSH
32857: LD_VAR 0 7
32861: ARRAY
32862: PUSH
32863: LD_VAR 0 9
32867: PUSH
32868: LD_VAR 0 7
32872: ARRAY
32873: PUSH
32874: LD_VAR 0 10
32878: MUL
32879: PLUS
32880: PPUSH
32881: CALL_OW 1
32885: ST_TO_ADDR
32886: GO 32834
32888: POP
32889: POP
// end ;
32890: GO 31369
32892: POP
32893: POP
// result := Replace ( result , 4 , tmp ) ;
32894: LD_ADDR_VAR 0 5
32898: PUSH
32899: LD_VAR 0 5
32903: PPUSH
32904: LD_INT 4
32906: PPUSH
32907: LD_VAR 0 8
32911: PPUSH
32912: CALL_OW 1
32916: ST_TO_ADDR
// end ;
32917: LD_VAR 0 5
32921: RET
// export function DangerAtRange ( unit , range ) ; begin
32922: LD_INT 0
32924: PPUSH
// if not unit then
32925: LD_VAR 0 1
32929: NOT
32930: IFFALSE 32934
// exit ;
32932: GO 32979
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32934: LD_ADDR_VAR 0 3
32938: PUSH
32939: LD_VAR 0 1
32943: PPUSH
32944: CALL_OW 255
32948: PPUSH
32949: LD_VAR 0 1
32953: PPUSH
32954: CALL_OW 250
32958: PPUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: CALL_OW 251
32968: PPUSH
32969: LD_VAR 0 2
32973: PPUSH
32974: CALL 31221 0 4
32978: ST_TO_ADDR
// end ;
32979: LD_VAR 0 3
32983: RET
// export function DangerInArea ( side , area ) ; begin
32984: LD_INT 0
32986: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32987: LD_ADDR_VAR 0 3
32991: PUSH
32992: LD_VAR 0 2
32996: PPUSH
32997: LD_INT 81
32999: PUSH
33000: LD_VAR 0 1
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PPUSH
33009: CALL_OW 70
33013: ST_TO_ADDR
// end ;
33014: LD_VAR 0 3
33018: RET
// export function IsExtension ( b ) ; begin
33019: LD_INT 0
33021: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33022: LD_ADDR_VAR 0 2
33026: PUSH
33027: LD_VAR 0 1
33031: PUSH
33032: LD_INT 23
33034: PUSH
33035: LD_INT 20
33037: PUSH
33038: LD_INT 22
33040: PUSH
33041: LD_INT 17
33043: PUSH
33044: LD_INT 24
33046: PUSH
33047: LD_INT 21
33049: PUSH
33050: LD_INT 19
33052: PUSH
33053: LD_INT 16
33055: PUSH
33056: LD_INT 25
33058: PUSH
33059: LD_INT 18
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: IN
33074: ST_TO_ADDR
// end ;
33075: LD_VAR 0 2
33079: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
// result := [ ] ;
33085: LD_ADDR_VAR 0 4
33089: PUSH
33090: EMPTY
33091: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33092: LD_ADDR_VAR 0 5
33096: PUSH
33097: LD_VAR 0 2
33101: PPUSH
33102: LD_INT 21
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PPUSH
33112: CALL_OW 70
33116: ST_TO_ADDR
// if not tmp then
33117: LD_VAR 0 5
33121: NOT
33122: IFFALSE 33126
// exit ;
33124: GO 33190
// if checkLink then
33126: LD_VAR 0 3
33130: IFFALSE 33180
// begin for i in tmp do
33132: LD_ADDR_VAR 0 6
33136: PUSH
33137: LD_VAR 0 5
33141: PUSH
33142: FOR_IN
33143: IFFALSE 33178
// if GetBase ( i ) <> base then
33145: LD_VAR 0 6
33149: PPUSH
33150: CALL_OW 274
33154: PUSH
33155: LD_VAR 0 1
33159: NONEQUAL
33160: IFFALSE 33176
// ComLinkToBase ( base , i ) ;
33162: LD_VAR 0 1
33166: PPUSH
33167: LD_VAR 0 6
33171: PPUSH
33172: CALL_OW 169
33176: GO 33142
33178: POP
33179: POP
// end ; result := tmp ;
33180: LD_ADDR_VAR 0 4
33184: PUSH
33185: LD_VAR 0 5
33189: ST_TO_ADDR
// end ;
33190: LD_VAR 0 4
33194: RET
// export function ComComplete ( units , b ) ; var i ; begin
33195: LD_INT 0
33197: PPUSH
33198: PPUSH
// if not units then
33199: LD_VAR 0 1
33203: NOT
33204: IFFALSE 33208
// exit ;
33206: GO 33298
// for i in units do
33208: LD_ADDR_VAR 0 4
33212: PUSH
33213: LD_VAR 0 1
33217: PUSH
33218: FOR_IN
33219: IFFALSE 33296
// if BuildingStatus ( b ) = bs_build then
33221: LD_VAR 0 2
33225: PPUSH
33226: CALL_OW 461
33230: PUSH
33231: LD_INT 1
33233: EQUAL
33234: IFFALSE 33294
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33236: LD_VAR 0 4
33240: PPUSH
33241: LD_STRING h
33243: PUSH
33244: LD_VAR 0 2
33248: PPUSH
33249: CALL_OW 250
33253: PUSH
33254: LD_VAR 0 2
33258: PPUSH
33259: CALL_OW 251
33263: PUSH
33264: LD_VAR 0 2
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: PPUSH
33290: CALL_OW 446
33294: GO 33218
33296: POP
33297: POP
// end ;
33298: LD_VAR 0 3
33302: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33303: LD_INT 0
33305: PPUSH
33306: PPUSH
33307: PPUSH
33308: PPUSH
33309: PPUSH
33310: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33311: LD_VAR 0 1
33315: NOT
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 263
33326: PUSH
33327: LD_INT 2
33329: NONEQUAL
33330: OR
33331: IFFALSE 33335
// exit ;
33333: GO 33651
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33335: LD_ADDR_VAR 0 6
33339: PUSH
33340: LD_INT 22
33342: PUSH
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 255
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 30
33362: PUSH
33363: LD_INT 36
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 34
33372: PUSH
33373: LD_INT 31
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PPUSH
33389: CALL_OW 69
33393: ST_TO_ADDR
// if not tmp then
33394: LD_VAR 0 6
33398: NOT
33399: IFFALSE 33403
// exit ;
33401: GO 33651
// result := [ ] ;
33403: LD_ADDR_VAR 0 2
33407: PUSH
33408: EMPTY
33409: ST_TO_ADDR
// for i in tmp do
33410: LD_ADDR_VAR 0 3
33414: PUSH
33415: LD_VAR 0 6
33419: PUSH
33420: FOR_IN
33421: IFFALSE 33492
// begin t := UnitsInside ( i ) ;
33423: LD_ADDR_VAR 0 4
33427: PUSH
33428: LD_VAR 0 3
33432: PPUSH
33433: CALL_OW 313
33437: ST_TO_ADDR
// if t then
33438: LD_VAR 0 4
33442: IFFALSE 33490
// for j in t do
33444: LD_ADDR_VAR 0 7
33448: PUSH
33449: LD_VAR 0 4
33453: PUSH
33454: FOR_IN
33455: IFFALSE 33488
// result := Replace ( result , result + 1 , j ) ;
33457: LD_ADDR_VAR 0 2
33461: PUSH
33462: LD_VAR 0 2
33466: PPUSH
33467: LD_VAR 0 2
33471: PUSH
33472: LD_INT 1
33474: PLUS
33475: PPUSH
33476: LD_VAR 0 7
33480: PPUSH
33481: CALL_OW 1
33485: ST_TO_ADDR
33486: GO 33454
33488: POP
33489: POP
// end ;
33490: GO 33420
33492: POP
33493: POP
// if not result then
33494: LD_VAR 0 2
33498: NOT
33499: IFFALSE 33503
// exit ;
33501: GO 33651
// mech := result [ 1 ] ;
33503: LD_ADDR_VAR 0 5
33507: PUSH
33508: LD_VAR 0 2
33512: PUSH
33513: LD_INT 1
33515: ARRAY
33516: ST_TO_ADDR
// if result > 1 then
33517: LD_VAR 0 2
33521: PUSH
33522: LD_INT 1
33524: GREATER
33525: IFFALSE 33637
// begin for i = 2 to result do
33527: LD_ADDR_VAR 0 3
33531: PUSH
33532: DOUBLE
33533: LD_INT 2
33535: DEC
33536: ST_TO_ADDR
33537: LD_VAR 0 2
33541: PUSH
33542: FOR_TO
33543: IFFALSE 33635
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33545: LD_ADDR_VAR 0 4
33549: PUSH
33550: LD_VAR 0 2
33554: PUSH
33555: LD_VAR 0 3
33559: ARRAY
33560: PPUSH
33561: LD_INT 3
33563: PPUSH
33564: CALL_OW 259
33568: PUSH
33569: LD_VAR 0 2
33573: PUSH
33574: LD_VAR 0 3
33578: ARRAY
33579: PPUSH
33580: CALL_OW 432
33584: MINUS
33585: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33586: LD_VAR 0 4
33590: PUSH
33591: LD_VAR 0 5
33595: PPUSH
33596: LD_INT 3
33598: PPUSH
33599: CALL_OW 259
33603: PUSH
33604: LD_VAR 0 5
33608: PPUSH
33609: CALL_OW 432
33613: MINUS
33614: GREATEREQUAL
33615: IFFALSE 33633
// mech := result [ i ] ;
33617: LD_ADDR_VAR 0 5
33621: PUSH
33622: LD_VAR 0 2
33626: PUSH
33627: LD_VAR 0 3
33631: ARRAY
33632: ST_TO_ADDR
// end ;
33633: GO 33542
33635: POP
33636: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33637: LD_VAR 0 1
33641: PPUSH
33642: LD_VAR 0 5
33646: PPUSH
33647: CALL_OW 135
// end ;
33651: LD_VAR 0 2
33655: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33656: LD_INT 0
33658: PPUSH
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
// result := [ ] ;
33671: LD_ADDR_VAR 0 7
33675: PUSH
33676: EMPTY
33677: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 266
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: IN
33698: NOT
33699: IFFALSE 33703
// exit ;
33701: GO 35337
// if name then
33703: LD_VAR 0 3
33707: IFFALSE 33723
// SetBName ( base_dep , name ) ;
33709: LD_VAR 0 1
33713: PPUSH
33714: LD_VAR 0 3
33718: PPUSH
33719: CALL_OW 500
// base := GetBase ( base_dep ) ;
33723: LD_ADDR_VAR 0 15
33727: PUSH
33728: LD_VAR 0 1
33732: PPUSH
33733: CALL_OW 274
33737: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33738: LD_ADDR_VAR 0 16
33742: PUSH
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 255
33752: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33753: LD_ADDR_VAR 0 17
33757: PUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL_OW 248
33767: ST_TO_ADDR
// if sources then
33768: LD_VAR 0 5
33772: IFFALSE 33819
// for i = 1 to 3 do
33774: LD_ADDR_VAR 0 8
33778: PUSH
33779: DOUBLE
33780: LD_INT 1
33782: DEC
33783: ST_TO_ADDR
33784: LD_INT 3
33786: PUSH
33787: FOR_TO
33788: IFFALSE 33817
// AddResourceType ( base , i , sources [ i ] ) ;
33790: LD_VAR 0 15
33794: PPUSH
33795: LD_VAR 0 8
33799: PPUSH
33800: LD_VAR 0 5
33804: PUSH
33805: LD_VAR 0 8
33809: ARRAY
33810: PPUSH
33811: CALL_OW 276
33815: GO 33787
33817: POP
33818: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33819: LD_ADDR_VAR 0 18
33823: PUSH
33824: LD_VAR 0 15
33828: PPUSH
33829: LD_VAR 0 2
33833: PPUSH
33834: LD_INT 1
33836: PPUSH
33837: CALL 33080 0 3
33841: ST_TO_ADDR
// InitHc ;
33842: CALL_OW 19
// InitUc ;
33846: CALL_OW 18
// uc_side := side ;
33850: LD_ADDR_OWVAR 20
33854: PUSH
33855: LD_VAR 0 16
33859: ST_TO_ADDR
// uc_nation := nation ;
33860: LD_ADDR_OWVAR 21
33864: PUSH
33865: LD_VAR 0 17
33869: ST_TO_ADDR
// if buildings then
33870: LD_VAR 0 18
33874: IFFALSE 35196
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33876: LD_ADDR_VAR 0 19
33880: PUSH
33881: LD_VAR 0 18
33885: PPUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 30
33891: PUSH
33892: LD_INT 29
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 30
33901: PUSH
33902: LD_INT 30
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: PPUSH
33914: CALL_OW 72
33918: ST_TO_ADDR
// if tmp then
33919: LD_VAR 0 19
33923: IFFALSE 33971
// for i in tmp do
33925: LD_ADDR_VAR 0 8
33929: PUSH
33930: LD_VAR 0 19
33934: PUSH
33935: FOR_IN
33936: IFFALSE 33969
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33938: LD_VAR 0 8
33942: PPUSH
33943: CALL_OW 250
33947: PPUSH
33948: LD_VAR 0 8
33952: PPUSH
33953: CALL_OW 251
33957: PPUSH
33958: LD_VAR 0 16
33962: PPUSH
33963: CALL_OW 441
33967: GO 33935
33969: POP
33970: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33971: LD_VAR 0 18
33975: PPUSH
33976: LD_INT 2
33978: PUSH
33979: LD_INT 30
33981: PUSH
33982: LD_INT 32
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 30
33991: PUSH
33992: LD_INT 33
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: PPUSH
34004: CALL_OW 72
34008: IFFALSE 34096
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34010: LD_ADDR_VAR 0 8
34014: PUSH
34015: LD_VAR 0 18
34019: PPUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 30
34025: PUSH
34026: LD_INT 32
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 30
34035: PUSH
34036: LD_INT 33
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: PPUSH
34048: CALL_OW 72
34052: PUSH
34053: FOR_IN
34054: IFFALSE 34094
// begin if not GetBWeapon ( i ) then
34056: LD_VAR 0 8
34060: PPUSH
34061: CALL_OW 269
34065: NOT
34066: IFFALSE 34092
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34068: LD_VAR 0 8
34072: PPUSH
34073: LD_VAR 0 8
34077: PPUSH
34078: LD_VAR 0 2
34082: PPUSH
34083: CALL 35342 0 2
34087: PPUSH
34088: CALL_OW 431
// end ;
34092: GO 34053
34094: POP
34095: POP
// end ; for i = 1 to personel do
34096: LD_ADDR_VAR 0 8
34100: PUSH
34101: DOUBLE
34102: LD_INT 1
34104: DEC
34105: ST_TO_ADDR
34106: LD_VAR 0 6
34110: PUSH
34111: FOR_TO
34112: IFFALSE 35176
// begin if i > 4 then
34114: LD_VAR 0 8
34118: PUSH
34119: LD_INT 4
34121: GREATER
34122: IFFALSE 34126
// break ;
34124: GO 35176
// case i of 1 :
34126: LD_VAR 0 8
34130: PUSH
34131: LD_INT 1
34133: DOUBLE
34134: EQUAL
34135: IFTRUE 34139
34137: GO 34219
34139: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34140: LD_ADDR_VAR 0 12
34144: PUSH
34145: LD_VAR 0 18
34149: PPUSH
34150: LD_INT 22
34152: PUSH
34153: LD_VAR 0 16
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 58
34164: PUSH
34165: EMPTY
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: LD_INT 30
34173: PUSH
34174: LD_INT 32
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 30
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 30
34193: PUSH
34194: LD_INT 5
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: PPUSH
34212: CALL_OW 72
34216: ST_TO_ADDR
34217: GO 34441
34219: LD_INT 2
34221: DOUBLE
34222: EQUAL
34223: IFTRUE 34227
34225: GO 34289
34227: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34228: LD_ADDR_VAR 0 12
34232: PUSH
34233: LD_VAR 0 18
34237: PPUSH
34238: LD_INT 22
34240: PUSH
34241: LD_VAR 0 16
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 30
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 30
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PPUSH
34282: CALL_OW 72
34286: ST_TO_ADDR
34287: GO 34441
34289: LD_INT 3
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34359
34297: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34298: LD_ADDR_VAR 0 12
34302: PUSH
34303: LD_VAR 0 18
34307: PPUSH
34308: LD_INT 22
34310: PUSH
34311: LD_VAR 0 16
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: LD_INT 30
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 30
34335: PUSH
34336: LD_INT 3
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PPUSH
34352: CALL_OW 72
34356: ST_TO_ADDR
34357: GO 34441
34359: LD_INT 4
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 34440
34367: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34368: LD_ADDR_VAR 0 12
34372: PUSH
34373: LD_VAR 0 18
34377: PPUSH
34378: LD_INT 22
34380: PUSH
34381: LD_VAR 0 16
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 30
34395: PUSH
34396: LD_INT 6
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 30
34405: PUSH
34406: LD_INT 7
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: LD_INT 8
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PPUSH
34433: CALL_OW 72
34437: ST_TO_ADDR
34438: GO 34441
34440: POP
// if i = 1 then
34441: LD_VAR 0 8
34445: PUSH
34446: LD_INT 1
34448: EQUAL
34449: IFFALSE 34560
// begin tmp := [ ] ;
34451: LD_ADDR_VAR 0 19
34455: PUSH
34456: EMPTY
34457: ST_TO_ADDR
// for j in f do
34458: LD_ADDR_VAR 0 9
34462: PUSH
34463: LD_VAR 0 12
34467: PUSH
34468: FOR_IN
34469: IFFALSE 34542
// if GetBType ( j ) = b_bunker then
34471: LD_VAR 0 9
34475: PPUSH
34476: CALL_OW 266
34480: PUSH
34481: LD_INT 32
34483: EQUAL
34484: IFFALSE 34511
// tmp := Insert ( tmp , 1 , j ) else
34486: LD_ADDR_VAR 0 19
34490: PUSH
34491: LD_VAR 0 19
34495: PPUSH
34496: LD_INT 1
34498: PPUSH
34499: LD_VAR 0 9
34503: PPUSH
34504: CALL_OW 2
34508: ST_TO_ADDR
34509: GO 34540
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34511: LD_ADDR_VAR 0 19
34515: PUSH
34516: LD_VAR 0 19
34520: PPUSH
34521: LD_VAR 0 19
34525: PUSH
34526: LD_INT 1
34528: PLUS
34529: PPUSH
34530: LD_VAR 0 9
34534: PPUSH
34535: CALL_OW 2
34539: ST_TO_ADDR
34540: GO 34468
34542: POP
34543: POP
// if tmp then
34544: LD_VAR 0 19
34548: IFFALSE 34560
// f := tmp ;
34550: LD_ADDR_VAR 0 12
34554: PUSH
34555: LD_VAR 0 19
34559: ST_TO_ADDR
// end ; x := personel [ i ] ;
34560: LD_ADDR_VAR 0 13
34564: PUSH
34565: LD_VAR 0 6
34569: PUSH
34570: LD_VAR 0 8
34574: ARRAY
34575: ST_TO_ADDR
// if x = - 1 then
34576: LD_VAR 0 13
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: EQUAL
34585: IFFALSE 34794
// begin for j in f do
34587: LD_ADDR_VAR 0 9
34591: PUSH
34592: LD_VAR 0 12
34596: PUSH
34597: FOR_IN
34598: IFFALSE 34790
// repeat InitHc ;
34600: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34604: LD_VAR 0 9
34608: PPUSH
34609: CALL_OW 266
34613: PUSH
34614: LD_INT 5
34616: EQUAL
34617: IFFALSE 34687
// begin if UnitsInside ( j ) < 3 then
34619: LD_VAR 0 9
34623: PPUSH
34624: CALL_OW 313
34628: PUSH
34629: LD_INT 3
34631: LESS
34632: IFFALSE 34668
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34634: LD_INT 0
34636: PPUSH
34637: LD_INT 5
34639: PUSH
34640: LD_INT 8
34642: PUSH
34643: LD_INT 9
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: LIST
34650: PUSH
34651: LD_VAR 0 17
34655: ARRAY
34656: PPUSH
34657: LD_VAR 0 4
34661: PPUSH
34662: CALL_OW 380
34666: GO 34685
// PrepareHuman ( false , i , skill ) ;
34668: LD_INT 0
34670: PPUSH
34671: LD_VAR 0 8
34675: PPUSH
34676: LD_VAR 0 4
34680: PPUSH
34681: CALL_OW 380
// end else
34685: GO 34704
// PrepareHuman ( false , i , skill ) ;
34687: LD_INT 0
34689: PPUSH
34690: LD_VAR 0 8
34694: PPUSH
34695: LD_VAR 0 4
34699: PPUSH
34700: CALL_OW 380
// un := CreateHuman ;
34704: LD_ADDR_VAR 0 14
34708: PUSH
34709: CALL_OW 44
34713: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34714: LD_ADDR_VAR 0 7
34718: PUSH
34719: LD_VAR 0 7
34723: PPUSH
34724: LD_INT 1
34726: PPUSH
34727: LD_VAR 0 14
34731: PPUSH
34732: CALL_OW 2
34736: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34737: LD_VAR 0 14
34741: PPUSH
34742: LD_VAR 0 9
34746: PPUSH
34747: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34751: LD_VAR 0 9
34755: PPUSH
34756: CALL_OW 313
34760: PUSH
34761: LD_INT 6
34763: EQUAL
34764: PUSH
34765: LD_VAR 0 9
34769: PPUSH
34770: CALL_OW 266
34774: PUSH
34775: LD_INT 32
34777: PUSH
34778: LD_INT 31
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: IN
34785: OR
34786: IFFALSE 34600
34788: GO 34597
34790: POP
34791: POP
// end else
34792: GO 35174
// for j = 1 to x do
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: DOUBLE
34800: LD_INT 1
34802: DEC
34803: ST_TO_ADDR
34804: LD_VAR 0 13
34808: PUSH
34809: FOR_TO
34810: IFFALSE 35172
// begin InitHc ;
34812: CALL_OW 19
// if not f then
34816: LD_VAR 0 12
34820: NOT
34821: IFFALSE 34910
// begin PrepareHuman ( false , i , skill ) ;
34823: LD_INT 0
34825: PPUSH
34826: LD_VAR 0 8
34830: PPUSH
34831: LD_VAR 0 4
34835: PPUSH
34836: CALL_OW 380
// un := CreateHuman ;
34840: LD_ADDR_VAR 0 14
34844: PUSH
34845: CALL_OW 44
34849: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34850: LD_ADDR_VAR 0 7
34854: PUSH
34855: LD_VAR 0 7
34859: PPUSH
34860: LD_INT 1
34862: PPUSH
34863: LD_VAR 0 14
34867: PPUSH
34868: CALL_OW 2
34872: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34873: LD_VAR 0 14
34877: PPUSH
34878: LD_VAR 0 1
34882: PPUSH
34883: CALL_OW 250
34887: PPUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 251
34897: PPUSH
34898: LD_INT 10
34900: PPUSH
34901: LD_INT 0
34903: PPUSH
34904: CALL_OW 50
// continue ;
34908: GO 34809
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34910: LD_VAR 0 12
34914: PUSH
34915: LD_INT 1
34917: ARRAY
34918: PPUSH
34919: CALL_OW 313
34923: PUSH
34924: LD_VAR 0 12
34928: PUSH
34929: LD_INT 1
34931: ARRAY
34932: PPUSH
34933: CALL_OW 266
34937: PUSH
34938: LD_INT 32
34940: PUSH
34941: LD_INT 31
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: IN
34948: AND
34949: PUSH
34950: LD_VAR 0 12
34954: PUSH
34955: LD_INT 1
34957: ARRAY
34958: PPUSH
34959: CALL_OW 313
34963: PUSH
34964: LD_INT 6
34966: EQUAL
34967: OR
34968: IFFALSE 34988
// f := Delete ( f , 1 ) ;
34970: LD_ADDR_VAR 0 12
34974: PUSH
34975: LD_VAR 0 12
34979: PPUSH
34980: LD_INT 1
34982: PPUSH
34983: CALL_OW 3
34987: ST_TO_ADDR
// if not f then
34988: LD_VAR 0 12
34992: NOT
34993: IFFALSE 35011
// begin x := x + 2 ;
34995: LD_ADDR_VAR 0 13
34999: PUSH
35000: LD_VAR 0 13
35004: PUSH
35005: LD_INT 2
35007: PLUS
35008: ST_TO_ADDR
// continue ;
35009: GO 34809
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35011: LD_VAR 0 12
35015: PUSH
35016: LD_INT 1
35018: ARRAY
35019: PPUSH
35020: CALL_OW 266
35024: PUSH
35025: LD_INT 5
35027: EQUAL
35028: IFFALSE 35102
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35030: LD_VAR 0 12
35034: PUSH
35035: LD_INT 1
35037: ARRAY
35038: PPUSH
35039: CALL_OW 313
35043: PUSH
35044: LD_INT 3
35046: LESS
35047: IFFALSE 35083
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35049: LD_INT 0
35051: PPUSH
35052: LD_INT 5
35054: PUSH
35055: LD_INT 8
35057: PUSH
35058: LD_INT 9
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: PUSH
35066: LD_VAR 0 17
35070: ARRAY
35071: PPUSH
35072: LD_VAR 0 4
35076: PPUSH
35077: CALL_OW 380
35081: GO 35100
// PrepareHuman ( false , i , skill ) ;
35083: LD_INT 0
35085: PPUSH
35086: LD_VAR 0 8
35090: PPUSH
35091: LD_VAR 0 4
35095: PPUSH
35096: CALL_OW 380
// end else
35100: GO 35119
// PrepareHuman ( false , i , skill ) ;
35102: LD_INT 0
35104: PPUSH
35105: LD_VAR 0 8
35109: PPUSH
35110: LD_VAR 0 4
35114: PPUSH
35115: CALL_OW 380
// un := CreateHuman ;
35119: LD_ADDR_VAR 0 14
35123: PUSH
35124: CALL_OW 44
35128: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35129: LD_ADDR_VAR 0 7
35133: PUSH
35134: LD_VAR 0 7
35138: PPUSH
35139: LD_INT 1
35141: PPUSH
35142: LD_VAR 0 14
35146: PPUSH
35147: CALL_OW 2
35151: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35152: LD_VAR 0 14
35156: PPUSH
35157: LD_VAR 0 12
35161: PUSH
35162: LD_INT 1
35164: ARRAY
35165: PPUSH
35166: CALL_OW 52
// end ;
35170: GO 34809
35172: POP
35173: POP
// end ;
35174: GO 34111
35176: POP
35177: POP
// result := result ^ buildings ;
35178: LD_ADDR_VAR 0 7
35182: PUSH
35183: LD_VAR 0 7
35187: PUSH
35188: LD_VAR 0 18
35192: ADD
35193: ST_TO_ADDR
// end else
35194: GO 35337
// begin for i = 1 to personel do
35196: LD_ADDR_VAR 0 8
35200: PUSH
35201: DOUBLE
35202: LD_INT 1
35204: DEC
35205: ST_TO_ADDR
35206: LD_VAR 0 6
35210: PUSH
35211: FOR_TO
35212: IFFALSE 35335
// begin if i > 4 then
35214: LD_VAR 0 8
35218: PUSH
35219: LD_INT 4
35221: GREATER
35222: IFFALSE 35226
// break ;
35224: GO 35335
// x := personel [ i ] ;
35226: LD_ADDR_VAR 0 13
35230: PUSH
35231: LD_VAR 0 6
35235: PUSH
35236: LD_VAR 0 8
35240: ARRAY
35241: ST_TO_ADDR
// if x = - 1 then
35242: LD_VAR 0 13
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: EQUAL
35251: IFFALSE 35255
// continue ;
35253: GO 35211
// PrepareHuman ( false , i , skill ) ;
35255: LD_INT 0
35257: PPUSH
35258: LD_VAR 0 8
35262: PPUSH
35263: LD_VAR 0 4
35267: PPUSH
35268: CALL_OW 380
// un := CreateHuman ;
35272: LD_ADDR_VAR 0 14
35276: PUSH
35277: CALL_OW 44
35281: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35282: LD_VAR 0 14
35286: PPUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 250
35296: PPUSH
35297: LD_VAR 0 1
35301: PPUSH
35302: CALL_OW 251
35306: PPUSH
35307: LD_INT 10
35309: PPUSH
35310: LD_INT 0
35312: PPUSH
35313: CALL_OW 50
// result := result ^ un ;
35317: LD_ADDR_VAR 0 7
35321: PUSH
35322: LD_VAR 0 7
35326: PUSH
35327: LD_VAR 0 14
35331: ADD
35332: ST_TO_ADDR
// end ;
35333: GO 35211
35335: POP
35336: POP
// end ; end ;
35337: LD_VAR 0 7
35341: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35342: LD_INT 0
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
35358: PPUSH
35359: PPUSH
// result := false ;
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_INT 0
35367: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35368: LD_VAR 0 1
35372: NOT
35373: PUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: CALL_OW 266
35383: PUSH
35384: LD_INT 32
35386: PUSH
35387: LD_INT 33
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: IN
35394: NOT
35395: OR
35396: IFFALSE 35400
// exit ;
35398: GO 36509
// nat := GetNation ( tower ) ;
35400: LD_ADDR_VAR 0 12
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 248
35414: ST_TO_ADDR
// side := GetSide ( tower ) ;
35415: LD_ADDR_VAR 0 16
35419: PUSH
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 255
35429: ST_TO_ADDR
// x := GetX ( tower ) ;
35430: LD_ADDR_VAR 0 10
35434: PUSH
35435: LD_VAR 0 1
35439: PPUSH
35440: CALL_OW 250
35444: ST_TO_ADDR
// y := GetY ( tower ) ;
35445: LD_ADDR_VAR 0 11
35449: PUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 251
35459: ST_TO_ADDR
// if not x or not y then
35460: LD_VAR 0 10
35464: NOT
35465: PUSH
35466: LD_VAR 0 11
35470: NOT
35471: OR
35472: IFFALSE 35476
// exit ;
35474: GO 36509
// weapon := 0 ;
35476: LD_ADDR_VAR 0 18
35480: PUSH
35481: LD_INT 0
35483: ST_TO_ADDR
// fac_list := [ ] ;
35484: LD_ADDR_VAR 0 17
35488: PUSH
35489: EMPTY
35490: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35491: LD_ADDR_VAR 0 6
35495: PUSH
35496: LD_VAR 0 1
35500: PPUSH
35501: CALL_OW 274
35505: PPUSH
35506: LD_VAR 0 2
35510: PPUSH
35511: LD_INT 0
35513: PPUSH
35514: CALL 33080 0 3
35518: PPUSH
35519: LD_INT 30
35521: PUSH
35522: LD_INT 3
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PPUSH
35529: CALL_OW 72
35533: ST_TO_ADDR
// if not factories then
35534: LD_VAR 0 6
35538: NOT
35539: IFFALSE 35543
// exit ;
35541: GO 36509
// for i in factories do
35543: LD_ADDR_VAR 0 8
35547: PUSH
35548: LD_VAR 0 6
35552: PUSH
35553: FOR_IN
35554: IFFALSE 35579
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35556: LD_ADDR_VAR 0 17
35560: PUSH
35561: LD_VAR 0 17
35565: PUSH
35566: LD_VAR 0 8
35570: PPUSH
35571: CALL_OW 478
35575: UNION
35576: ST_TO_ADDR
35577: GO 35553
35579: POP
35580: POP
// if not fac_list then
35581: LD_VAR 0 17
35585: NOT
35586: IFFALSE 35590
// exit ;
35588: GO 36509
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35590: LD_ADDR_VAR 0 5
35594: PUSH
35595: LD_INT 4
35597: PUSH
35598: LD_INT 5
35600: PUSH
35601: LD_INT 9
35603: PUSH
35604: LD_INT 10
35606: PUSH
35607: LD_INT 6
35609: PUSH
35610: LD_INT 7
35612: PUSH
35613: LD_INT 11
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 27
35627: PUSH
35628: LD_INT 28
35630: PUSH
35631: LD_INT 26
35633: PUSH
35634: LD_INT 30
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 43
35645: PUSH
35646: LD_INT 44
35648: PUSH
35649: LD_INT 46
35651: PUSH
35652: LD_INT 45
35654: PUSH
35655: LD_INT 47
35657: PUSH
35658: LD_INT 49
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PUSH
35674: LD_VAR 0 12
35678: ARRAY
35679: ST_TO_ADDR
// list := list isect fac_list ;
35680: LD_ADDR_VAR 0 5
35684: PUSH
35685: LD_VAR 0 5
35689: PUSH
35690: LD_VAR 0 17
35694: ISECT
35695: ST_TO_ADDR
// if not list then
35696: LD_VAR 0 5
35700: NOT
35701: IFFALSE 35705
// exit ;
35703: GO 36509
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35705: LD_VAR 0 12
35709: PUSH
35710: LD_INT 3
35712: EQUAL
35713: PUSH
35714: LD_INT 49
35716: PUSH
35717: LD_VAR 0 5
35721: IN
35722: AND
35723: PUSH
35724: LD_INT 31
35726: PPUSH
35727: LD_VAR 0 16
35731: PPUSH
35732: CALL_OW 321
35736: PUSH
35737: LD_INT 2
35739: EQUAL
35740: AND
35741: IFFALSE 35801
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35743: LD_INT 22
35745: PUSH
35746: LD_VAR 0 16
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 35
35757: PUSH
35758: LD_INT 49
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 91
35767: PUSH
35768: LD_VAR 0 1
35772: PUSH
35773: LD_INT 10
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 69
35790: NOT
35791: IFFALSE 35801
// weapon := ru_time_lapser ;
35793: LD_ADDR_VAR 0 18
35797: PUSH
35798: LD_INT 49
35800: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35801: LD_VAR 0 12
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: IN
35816: PUSH
35817: LD_INT 11
35819: PUSH
35820: LD_VAR 0 5
35824: IN
35825: PUSH
35826: LD_INT 30
35828: PUSH
35829: LD_VAR 0 5
35833: IN
35834: OR
35835: AND
35836: PUSH
35837: LD_INT 6
35839: PPUSH
35840: LD_VAR 0 16
35844: PPUSH
35845: CALL_OW 321
35849: PUSH
35850: LD_INT 2
35852: EQUAL
35853: AND
35854: IFFALSE 36019
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35856: LD_INT 22
35858: PUSH
35859: LD_VAR 0 16
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 35
35873: PUSH
35874: LD_INT 11
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 35
35883: PUSH
35884: LD_INT 30
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 91
35898: PUSH
35899: LD_VAR 0 1
35903: PUSH
35904: LD_INT 18
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: PPUSH
35917: CALL_OW 69
35921: NOT
35922: PUSH
35923: LD_INT 22
35925: PUSH
35926: LD_VAR 0 16
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: LD_INT 30
35940: PUSH
35941: LD_INT 32
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 30
35950: PUSH
35951: LD_INT 33
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 91
35965: PUSH
35966: LD_VAR 0 1
35970: PUSH
35971: LD_INT 12
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: PPUSH
35987: CALL_OW 69
35991: PUSH
35992: LD_INT 2
35994: GREATER
35995: AND
35996: IFFALSE 36019
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35998: LD_ADDR_VAR 0 18
36002: PUSH
36003: LD_INT 11
36005: PUSH
36006: LD_INT 30
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_VAR 0 12
36017: ARRAY
36018: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36019: LD_VAR 0 18
36023: NOT
36024: PUSH
36025: LD_INT 40
36027: PPUSH
36028: LD_VAR 0 16
36032: PPUSH
36033: CALL_OW 321
36037: PUSH
36038: LD_INT 2
36040: EQUAL
36041: AND
36042: PUSH
36043: LD_INT 7
36045: PUSH
36046: LD_VAR 0 5
36050: IN
36051: PUSH
36052: LD_INT 28
36054: PUSH
36055: LD_VAR 0 5
36059: IN
36060: OR
36061: PUSH
36062: LD_INT 45
36064: PUSH
36065: LD_VAR 0 5
36069: IN
36070: OR
36071: AND
36072: IFFALSE 36326
// begin hex := GetHexInfo ( x , y ) ;
36074: LD_ADDR_VAR 0 4
36078: PUSH
36079: LD_VAR 0 10
36083: PPUSH
36084: LD_VAR 0 11
36088: PPUSH
36089: CALL_OW 546
36093: ST_TO_ADDR
// if hex [ 1 ] then
36094: LD_VAR 0 4
36098: PUSH
36099: LD_INT 1
36101: ARRAY
36102: IFFALSE 36106
// exit ;
36104: GO 36509
// height := hex [ 2 ] ;
36106: LD_ADDR_VAR 0 15
36110: PUSH
36111: LD_VAR 0 4
36115: PUSH
36116: LD_INT 2
36118: ARRAY
36119: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36120: LD_ADDR_VAR 0 14
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: LD_INT 5
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
// for i in tmp do
36143: LD_ADDR_VAR 0 8
36147: PUSH
36148: LD_VAR 0 14
36152: PUSH
36153: FOR_IN
36154: IFFALSE 36324
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36156: LD_ADDR_VAR 0 9
36160: PUSH
36161: LD_VAR 0 10
36165: PPUSH
36166: LD_VAR 0 8
36170: PPUSH
36171: LD_INT 5
36173: PPUSH
36174: CALL_OW 272
36178: PUSH
36179: LD_VAR 0 11
36183: PPUSH
36184: LD_VAR 0 8
36188: PPUSH
36189: LD_INT 5
36191: PPUSH
36192: CALL_OW 273
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36201: LD_VAR 0 9
36205: PUSH
36206: LD_INT 1
36208: ARRAY
36209: PPUSH
36210: LD_VAR 0 9
36214: PUSH
36215: LD_INT 2
36217: ARRAY
36218: PPUSH
36219: CALL_OW 488
36223: IFFALSE 36322
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36225: LD_ADDR_VAR 0 4
36229: PUSH
36230: LD_VAR 0 9
36234: PUSH
36235: LD_INT 1
36237: ARRAY
36238: PPUSH
36239: LD_VAR 0 9
36243: PUSH
36244: LD_INT 2
36246: ARRAY
36247: PPUSH
36248: CALL_OW 546
36252: ST_TO_ADDR
// if hex [ 1 ] then
36253: LD_VAR 0 4
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: IFFALSE 36265
// continue ;
36263: GO 36153
// h := hex [ 2 ] ;
36265: LD_ADDR_VAR 0 13
36269: PUSH
36270: LD_VAR 0 4
36274: PUSH
36275: LD_INT 2
36277: ARRAY
36278: ST_TO_ADDR
// if h + 7 < height then
36279: LD_VAR 0 13
36283: PUSH
36284: LD_INT 7
36286: PLUS
36287: PUSH
36288: LD_VAR 0 15
36292: LESS
36293: IFFALSE 36322
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36295: LD_ADDR_VAR 0 18
36299: PUSH
36300: LD_INT 7
36302: PUSH
36303: LD_INT 28
36305: PUSH
36306: LD_INT 45
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: PUSH
36314: LD_VAR 0 12
36318: ARRAY
36319: ST_TO_ADDR
// break ;
36320: GO 36324
// end ; end ; end ;
36322: GO 36153
36324: POP
36325: POP
// end ; if not weapon then
36326: LD_VAR 0 18
36330: NOT
36331: IFFALSE 36391
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36333: LD_ADDR_VAR 0 5
36337: PUSH
36338: LD_VAR 0 5
36342: PUSH
36343: LD_INT 11
36345: PUSH
36346: LD_INT 30
36348: PUSH
36349: LD_INT 49
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: DIFF
36357: ST_TO_ADDR
// if not list then
36358: LD_VAR 0 5
36362: NOT
36363: IFFALSE 36367
// exit ;
36365: GO 36509
// weapon := list [ rand ( 1 , list ) ] ;
36367: LD_ADDR_VAR 0 18
36371: PUSH
36372: LD_VAR 0 5
36376: PUSH
36377: LD_INT 1
36379: PPUSH
36380: LD_VAR 0 5
36384: PPUSH
36385: CALL_OW 12
36389: ARRAY
36390: ST_TO_ADDR
// end ; if weapon then
36391: LD_VAR 0 18
36395: IFFALSE 36509
// begin tmp := CostOfWeapon ( weapon ) ;
36397: LD_ADDR_VAR 0 14
36401: PUSH
36402: LD_VAR 0 18
36406: PPUSH
36407: CALL_OW 451
36411: ST_TO_ADDR
// j := GetBase ( tower ) ;
36412: LD_ADDR_VAR 0 9
36416: PUSH
36417: LD_VAR 0 1
36421: PPUSH
36422: CALL_OW 274
36426: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36427: LD_VAR 0 9
36431: PPUSH
36432: LD_INT 1
36434: PPUSH
36435: CALL_OW 275
36439: PUSH
36440: LD_VAR 0 14
36444: PUSH
36445: LD_INT 1
36447: ARRAY
36448: GREATEREQUAL
36449: PUSH
36450: LD_VAR 0 9
36454: PPUSH
36455: LD_INT 2
36457: PPUSH
36458: CALL_OW 275
36462: PUSH
36463: LD_VAR 0 14
36467: PUSH
36468: LD_INT 2
36470: ARRAY
36471: GREATEREQUAL
36472: AND
36473: PUSH
36474: LD_VAR 0 9
36478: PPUSH
36479: LD_INT 3
36481: PPUSH
36482: CALL_OW 275
36486: PUSH
36487: LD_VAR 0 14
36491: PUSH
36492: LD_INT 3
36494: ARRAY
36495: GREATEREQUAL
36496: AND
36497: IFFALSE 36509
// result := weapon ;
36499: LD_ADDR_VAR 0 3
36503: PUSH
36504: LD_VAR 0 18
36508: ST_TO_ADDR
// end ; end ;
36509: LD_VAR 0 3
36513: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36514: LD_INT 0
36516: PPUSH
36517: PPUSH
// result := true ;
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_INT 1
36525: ST_TO_ADDR
// if array1 = array2 then
36526: LD_VAR 0 1
36530: PUSH
36531: LD_VAR 0 2
36535: EQUAL
36536: IFFALSE 36596
// begin for i = 1 to array1 do
36538: LD_ADDR_VAR 0 4
36542: PUSH
36543: DOUBLE
36544: LD_INT 1
36546: DEC
36547: ST_TO_ADDR
36548: LD_VAR 0 1
36552: PUSH
36553: FOR_TO
36554: IFFALSE 36592
// if array1 [ i ] <> array2 [ i ] then
36556: LD_VAR 0 1
36560: PUSH
36561: LD_VAR 0 4
36565: ARRAY
36566: PUSH
36567: LD_VAR 0 2
36571: PUSH
36572: LD_VAR 0 4
36576: ARRAY
36577: NONEQUAL
36578: IFFALSE 36590
// begin result := false ;
36580: LD_ADDR_VAR 0 3
36584: PUSH
36585: LD_INT 0
36587: ST_TO_ADDR
// break ;
36588: GO 36592
// end ;
36590: GO 36553
36592: POP
36593: POP
// end else
36594: GO 36604
// result := false ;
36596: LD_ADDR_VAR 0 3
36600: PUSH
36601: LD_INT 0
36603: ST_TO_ADDR
// end ;
36604: LD_VAR 0 3
36608: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36609: LD_INT 0
36611: PPUSH
36612: PPUSH
// if not array1 or not array2 then
36613: LD_VAR 0 1
36617: NOT
36618: PUSH
36619: LD_VAR 0 2
36623: NOT
36624: OR
36625: IFFALSE 36629
// exit ;
36627: GO 36693
// result := true ;
36629: LD_ADDR_VAR 0 3
36633: PUSH
36634: LD_INT 1
36636: ST_TO_ADDR
// for i = 1 to array1 do
36637: LD_ADDR_VAR 0 4
36641: PUSH
36642: DOUBLE
36643: LD_INT 1
36645: DEC
36646: ST_TO_ADDR
36647: LD_VAR 0 1
36651: PUSH
36652: FOR_TO
36653: IFFALSE 36691
// if array1 [ i ] <> array2 [ i ] then
36655: LD_VAR 0 1
36659: PUSH
36660: LD_VAR 0 4
36664: ARRAY
36665: PUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_VAR 0 4
36675: ARRAY
36676: NONEQUAL
36677: IFFALSE 36689
// begin result := false ;
36679: LD_ADDR_VAR 0 3
36683: PUSH
36684: LD_INT 0
36686: ST_TO_ADDR
// break ;
36687: GO 36691
// end ;
36689: GO 36652
36691: POP
36692: POP
// end ;
36693: LD_VAR 0 3
36697: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36698: LD_INT 0
36700: PPUSH
36701: PPUSH
36702: PPUSH
// pom := GetBase ( fac ) ;
36703: LD_ADDR_VAR 0 5
36707: PUSH
36708: LD_VAR 0 1
36712: PPUSH
36713: CALL_OW 274
36717: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36718: LD_ADDR_VAR 0 4
36722: PUSH
36723: LD_VAR 0 2
36727: PUSH
36728: LD_INT 1
36730: ARRAY
36731: PPUSH
36732: LD_VAR 0 2
36736: PUSH
36737: LD_INT 2
36739: ARRAY
36740: PPUSH
36741: LD_VAR 0 2
36745: PUSH
36746: LD_INT 3
36748: ARRAY
36749: PPUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_INT 4
36757: ARRAY
36758: PPUSH
36759: CALL_OW 449
36763: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36764: LD_ADDR_VAR 0 3
36768: PUSH
36769: LD_VAR 0 5
36773: PPUSH
36774: LD_INT 1
36776: PPUSH
36777: CALL_OW 275
36781: PUSH
36782: LD_VAR 0 4
36786: PUSH
36787: LD_INT 1
36789: ARRAY
36790: GREATEREQUAL
36791: PUSH
36792: LD_VAR 0 5
36796: PPUSH
36797: LD_INT 2
36799: PPUSH
36800: CALL_OW 275
36804: PUSH
36805: LD_VAR 0 4
36809: PUSH
36810: LD_INT 2
36812: ARRAY
36813: GREATEREQUAL
36814: AND
36815: PUSH
36816: LD_VAR 0 5
36820: PPUSH
36821: LD_INT 3
36823: PPUSH
36824: CALL_OW 275
36828: PUSH
36829: LD_VAR 0 4
36833: PUSH
36834: LD_INT 3
36836: ARRAY
36837: GREATEREQUAL
36838: AND
36839: ST_TO_ADDR
// end ;
36840: LD_VAR 0 3
36844: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36845: LD_INT 0
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
// pom := GetBase ( building ) ;
36851: LD_ADDR_VAR 0 3
36855: PUSH
36856: LD_VAR 0 1
36860: PPUSH
36861: CALL_OW 274
36865: ST_TO_ADDR
// if not pom then
36866: LD_VAR 0 3
36870: NOT
36871: IFFALSE 36875
// exit ;
36873: GO 37045
// btype := GetBType ( building ) ;
36875: LD_ADDR_VAR 0 5
36879: PUSH
36880: LD_VAR 0 1
36884: PPUSH
36885: CALL_OW 266
36889: ST_TO_ADDR
// if btype = b_armoury then
36890: LD_VAR 0 5
36894: PUSH
36895: LD_INT 4
36897: EQUAL
36898: IFFALSE 36908
// btype := b_barracks ;
36900: LD_ADDR_VAR 0 5
36904: PUSH
36905: LD_INT 5
36907: ST_TO_ADDR
// if btype = b_depot then
36908: LD_VAR 0 5
36912: PUSH
36913: LD_INT 0
36915: EQUAL
36916: IFFALSE 36926
// btype := b_warehouse ;
36918: LD_ADDR_VAR 0 5
36922: PUSH
36923: LD_INT 1
36925: ST_TO_ADDR
// if btype = b_workshop then
36926: LD_VAR 0 5
36930: PUSH
36931: LD_INT 2
36933: EQUAL
36934: IFFALSE 36944
// btype := b_factory ;
36936: LD_ADDR_VAR 0 5
36940: PUSH
36941: LD_INT 3
36943: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36944: LD_ADDR_VAR 0 4
36948: PUSH
36949: LD_VAR 0 5
36953: PPUSH
36954: LD_VAR 0 1
36958: PPUSH
36959: CALL_OW 248
36963: PPUSH
36964: CALL_OW 450
36968: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36969: LD_ADDR_VAR 0 2
36973: PUSH
36974: LD_VAR 0 3
36978: PPUSH
36979: LD_INT 1
36981: PPUSH
36982: CALL_OW 275
36986: PUSH
36987: LD_VAR 0 4
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: GREATEREQUAL
36996: PUSH
36997: LD_VAR 0 3
37001: PPUSH
37002: LD_INT 2
37004: PPUSH
37005: CALL_OW 275
37009: PUSH
37010: LD_VAR 0 4
37014: PUSH
37015: LD_INT 2
37017: ARRAY
37018: GREATEREQUAL
37019: AND
37020: PUSH
37021: LD_VAR 0 3
37025: PPUSH
37026: LD_INT 3
37028: PPUSH
37029: CALL_OW 275
37033: PUSH
37034: LD_VAR 0 4
37038: PUSH
37039: LD_INT 3
37041: ARRAY
37042: GREATEREQUAL
37043: AND
37044: ST_TO_ADDR
// end ;
37045: LD_VAR 0 2
37049: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37050: LD_INT 0
37052: PPUSH
37053: PPUSH
37054: PPUSH
// pom := GetBase ( building ) ;
37055: LD_ADDR_VAR 0 4
37059: PUSH
37060: LD_VAR 0 1
37064: PPUSH
37065: CALL_OW 274
37069: ST_TO_ADDR
// if not pom then
37070: LD_VAR 0 4
37074: NOT
37075: IFFALSE 37079
// exit ;
37077: GO 37180
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37079: LD_ADDR_VAR 0 5
37083: PUSH
37084: LD_VAR 0 2
37088: PPUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: CALL_OW 248
37098: PPUSH
37099: CALL_OW 450
37103: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37104: LD_ADDR_VAR 0 3
37108: PUSH
37109: LD_VAR 0 4
37113: PPUSH
37114: LD_INT 1
37116: PPUSH
37117: CALL_OW 275
37121: PUSH
37122: LD_VAR 0 5
37126: PUSH
37127: LD_INT 1
37129: ARRAY
37130: GREATEREQUAL
37131: PUSH
37132: LD_VAR 0 4
37136: PPUSH
37137: LD_INT 2
37139: PPUSH
37140: CALL_OW 275
37144: PUSH
37145: LD_VAR 0 5
37149: PUSH
37150: LD_INT 2
37152: ARRAY
37153: GREATEREQUAL
37154: AND
37155: PUSH
37156: LD_VAR 0 4
37160: PPUSH
37161: LD_INT 3
37163: PPUSH
37164: CALL_OW 275
37168: PUSH
37169: LD_VAR 0 5
37173: PUSH
37174: LD_INT 3
37176: ARRAY
37177: GREATEREQUAL
37178: AND
37179: ST_TO_ADDR
// end ;
37180: LD_VAR 0 3
37184: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37185: LD_INT 0
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
// result := false ;
37198: LD_ADDR_VAR 0 8
37202: PUSH
37203: LD_INT 0
37205: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37206: LD_VAR 0 5
37210: NOT
37211: PUSH
37212: LD_VAR 0 1
37216: NOT
37217: OR
37218: PUSH
37219: LD_VAR 0 2
37223: NOT
37224: OR
37225: PUSH
37226: LD_VAR 0 3
37230: NOT
37231: OR
37232: IFFALSE 37236
// exit ;
37234: GO 38050
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37236: LD_ADDR_VAR 0 14
37240: PUSH
37241: LD_VAR 0 1
37245: PPUSH
37246: LD_VAR 0 2
37250: PPUSH
37251: LD_VAR 0 3
37255: PPUSH
37256: LD_VAR 0 4
37260: PPUSH
37261: LD_VAR 0 5
37265: PUSH
37266: LD_INT 1
37268: ARRAY
37269: PPUSH
37270: CALL_OW 248
37274: PPUSH
37275: LD_INT 0
37277: PPUSH
37278: CALL 39303 0 6
37282: ST_TO_ADDR
// if not hexes then
37283: LD_VAR 0 14
37287: NOT
37288: IFFALSE 37292
// exit ;
37290: GO 38050
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37292: LD_ADDR_VAR 0 17
37296: PUSH
37297: LD_VAR 0 5
37301: PPUSH
37302: LD_INT 22
37304: PUSH
37305: LD_VAR 0 13
37309: PPUSH
37310: CALL_OW 255
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 30
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 30
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PPUSH
37351: CALL_OW 72
37355: ST_TO_ADDR
// for i = 1 to hexes do
37356: LD_ADDR_VAR 0 9
37360: PUSH
37361: DOUBLE
37362: LD_INT 1
37364: DEC
37365: ST_TO_ADDR
37366: LD_VAR 0 14
37370: PUSH
37371: FOR_TO
37372: IFFALSE 38048
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37374: LD_ADDR_VAR 0 13
37378: PUSH
37379: LD_VAR 0 14
37383: PUSH
37384: LD_VAR 0 9
37388: ARRAY
37389: PUSH
37390: LD_INT 1
37392: ARRAY
37393: PPUSH
37394: LD_VAR 0 14
37398: PUSH
37399: LD_VAR 0 9
37403: ARRAY
37404: PUSH
37405: LD_INT 2
37407: ARRAY
37408: PPUSH
37409: CALL_OW 428
37413: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37414: LD_VAR 0 14
37418: PUSH
37419: LD_VAR 0 9
37423: ARRAY
37424: PUSH
37425: LD_INT 1
37427: ARRAY
37428: PPUSH
37429: LD_VAR 0 14
37433: PUSH
37434: LD_VAR 0 9
37438: ARRAY
37439: PUSH
37440: LD_INT 2
37442: ARRAY
37443: PPUSH
37444: CALL_OW 351
37448: PUSH
37449: LD_VAR 0 14
37453: PUSH
37454: LD_VAR 0 9
37458: ARRAY
37459: PUSH
37460: LD_INT 1
37462: ARRAY
37463: PPUSH
37464: LD_VAR 0 14
37468: PUSH
37469: LD_VAR 0 9
37473: ARRAY
37474: PUSH
37475: LD_INT 2
37477: ARRAY
37478: PPUSH
37479: CALL_OW 488
37483: NOT
37484: OR
37485: PUSH
37486: LD_VAR 0 13
37490: PPUSH
37491: CALL_OW 247
37495: PUSH
37496: LD_INT 3
37498: EQUAL
37499: OR
37500: IFFALSE 37506
// exit ;
37502: POP
37503: POP
37504: GO 38050
// if not tmp then
37506: LD_VAR 0 13
37510: NOT
37511: IFFALSE 37515
// continue ;
37513: GO 37371
// result := true ;
37515: LD_ADDR_VAR 0 8
37519: PUSH
37520: LD_INT 1
37522: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37523: LD_VAR 0 6
37527: PUSH
37528: LD_VAR 0 13
37532: PPUSH
37533: CALL_OW 247
37537: PUSH
37538: LD_INT 2
37540: EQUAL
37541: AND
37542: PUSH
37543: LD_VAR 0 13
37547: PPUSH
37548: CALL_OW 263
37552: PUSH
37553: LD_INT 1
37555: EQUAL
37556: AND
37557: IFFALSE 37721
// begin if IsDrivenBy ( tmp ) then
37559: LD_VAR 0 13
37563: PPUSH
37564: CALL_OW 311
37568: IFFALSE 37572
// continue ;
37570: GO 37371
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37572: LD_VAR 0 6
37576: PPUSH
37577: LD_INT 3
37579: PUSH
37580: LD_INT 60
37582: PUSH
37583: EMPTY
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: LD_INT 55
37595: PUSH
37596: EMPTY
37597: LIST
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PPUSH
37607: CALL_OW 72
37611: IFFALSE 37719
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37613: LD_ADDR_VAR 0 18
37617: PUSH
37618: LD_VAR 0 6
37622: PPUSH
37623: LD_INT 3
37625: PUSH
37626: LD_INT 60
37628: PUSH
37629: EMPTY
37630: LIST
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 3
37638: PUSH
37639: LD_INT 55
37641: PUSH
37642: EMPTY
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PPUSH
37653: CALL_OW 72
37657: PUSH
37658: LD_INT 1
37660: ARRAY
37661: ST_TO_ADDR
// if IsInUnit ( driver ) then
37662: LD_VAR 0 18
37666: PPUSH
37667: CALL_OW 310
37671: IFFALSE 37682
// ComExit ( driver ) ;
37673: LD_VAR 0 18
37677: PPUSH
37678: CALL 63095 0 1
// AddComEnterUnit ( driver , tmp ) ;
37682: LD_VAR 0 18
37686: PPUSH
37687: LD_VAR 0 13
37691: PPUSH
37692: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37696: LD_VAR 0 18
37700: PPUSH
37701: LD_VAR 0 7
37705: PPUSH
37706: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37710: LD_VAR 0 18
37714: PPUSH
37715: CALL_OW 181
// end ; continue ;
37719: GO 37371
// end ; if not cleaners or not tmp in cleaners then
37721: LD_VAR 0 6
37725: NOT
37726: PUSH
37727: LD_VAR 0 13
37731: PUSH
37732: LD_VAR 0 6
37736: IN
37737: NOT
37738: OR
37739: IFFALSE 38046
// begin if dep then
37741: LD_VAR 0 17
37745: IFFALSE 37881
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37747: LD_ADDR_VAR 0 16
37751: PUSH
37752: LD_VAR 0 17
37756: PUSH
37757: LD_INT 1
37759: ARRAY
37760: PPUSH
37761: CALL_OW 250
37765: PPUSH
37766: LD_VAR 0 17
37770: PUSH
37771: LD_INT 1
37773: ARRAY
37774: PPUSH
37775: CALL_OW 254
37779: PPUSH
37780: LD_INT 5
37782: PPUSH
37783: CALL_OW 272
37787: PUSH
37788: LD_VAR 0 17
37792: PUSH
37793: LD_INT 1
37795: ARRAY
37796: PPUSH
37797: CALL_OW 251
37801: PPUSH
37802: LD_VAR 0 17
37806: PUSH
37807: LD_INT 1
37809: ARRAY
37810: PPUSH
37811: CALL_OW 254
37815: PPUSH
37816: LD_INT 5
37818: PPUSH
37819: CALL_OW 273
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37828: LD_VAR 0 16
37832: PUSH
37833: LD_INT 1
37835: ARRAY
37836: PPUSH
37837: LD_VAR 0 16
37841: PUSH
37842: LD_INT 2
37844: ARRAY
37845: PPUSH
37846: CALL_OW 488
37850: IFFALSE 37881
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37852: LD_VAR 0 13
37856: PPUSH
37857: LD_VAR 0 16
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: PPUSH
37866: LD_VAR 0 16
37870: PUSH
37871: LD_INT 2
37873: ARRAY
37874: PPUSH
37875: CALL_OW 111
// continue ;
37879: GO 37371
// end ; end ; r := GetDir ( tmp ) ;
37881: LD_ADDR_VAR 0 15
37885: PUSH
37886: LD_VAR 0 13
37890: PPUSH
37891: CALL_OW 254
37895: ST_TO_ADDR
// if r = 5 then
37896: LD_VAR 0 15
37900: PUSH
37901: LD_INT 5
37903: EQUAL
37904: IFFALSE 37914
// r := 0 ;
37906: LD_ADDR_VAR 0 15
37910: PUSH
37911: LD_INT 0
37913: ST_TO_ADDR
// for j = r to 5 do
37914: LD_ADDR_VAR 0 10
37918: PUSH
37919: DOUBLE
37920: LD_VAR 0 15
37924: DEC
37925: ST_TO_ADDR
37926: LD_INT 5
37928: PUSH
37929: FOR_TO
37930: IFFALSE 38044
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37932: LD_ADDR_VAR 0 11
37936: PUSH
37937: LD_VAR 0 13
37941: PPUSH
37942: CALL_OW 250
37946: PPUSH
37947: LD_VAR 0 10
37951: PPUSH
37952: LD_INT 2
37954: PPUSH
37955: CALL_OW 272
37959: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37960: LD_ADDR_VAR 0 12
37964: PUSH
37965: LD_VAR 0 13
37969: PPUSH
37970: CALL_OW 251
37974: PPUSH
37975: LD_VAR 0 10
37979: PPUSH
37980: LD_INT 2
37982: PPUSH
37983: CALL_OW 273
37987: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37988: LD_VAR 0 11
37992: PPUSH
37993: LD_VAR 0 12
37997: PPUSH
37998: CALL_OW 488
38002: PUSH
38003: LD_VAR 0 11
38007: PPUSH
38008: LD_VAR 0 12
38012: PPUSH
38013: CALL_OW 428
38017: NOT
38018: AND
38019: IFFALSE 38042
// begin ComMoveXY ( tmp , _x , _y ) ;
38021: LD_VAR 0 13
38025: PPUSH
38026: LD_VAR 0 11
38030: PPUSH
38031: LD_VAR 0 12
38035: PPUSH
38036: CALL_OW 111
// break ;
38040: GO 38044
// end ; end ;
38042: GO 37929
38044: POP
38045: POP
// end ; end ;
38046: GO 37371
38048: POP
38049: POP
// end ;
38050: LD_VAR 0 8
38054: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38055: LD_INT 0
38057: PPUSH
// result := true ;
38058: LD_ADDR_VAR 0 3
38062: PUSH
38063: LD_INT 1
38065: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38066: LD_VAR 0 2
38070: PUSH
38071: LD_INT 24
38073: DOUBLE
38074: EQUAL
38075: IFTRUE 38085
38077: LD_INT 33
38079: DOUBLE
38080: EQUAL
38081: IFTRUE 38085
38083: GO 38110
38085: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38086: LD_ADDR_VAR 0 3
38090: PUSH
38091: LD_INT 32
38093: PPUSH
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 321
38103: PUSH
38104: LD_INT 2
38106: EQUAL
38107: ST_TO_ADDR
38108: GO 38426
38110: LD_INT 20
38112: DOUBLE
38113: EQUAL
38114: IFTRUE 38118
38116: GO 38143
38118: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38119: LD_ADDR_VAR 0 3
38123: PUSH
38124: LD_INT 6
38126: PPUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL_OW 321
38136: PUSH
38137: LD_INT 2
38139: EQUAL
38140: ST_TO_ADDR
38141: GO 38426
38143: LD_INT 22
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38157
38149: LD_INT 36
38151: DOUBLE
38152: EQUAL
38153: IFTRUE 38157
38155: GO 38182
38157: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38158: LD_ADDR_VAR 0 3
38162: PUSH
38163: LD_INT 15
38165: PPUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 321
38175: PUSH
38176: LD_INT 2
38178: EQUAL
38179: ST_TO_ADDR
38180: GO 38426
38182: LD_INT 30
38184: DOUBLE
38185: EQUAL
38186: IFTRUE 38190
38188: GO 38215
38190: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38191: LD_ADDR_VAR 0 3
38195: PUSH
38196: LD_INT 20
38198: PPUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 321
38208: PUSH
38209: LD_INT 2
38211: EQUAL
38212: ST_TO_ADDR
38213: GO 38426
38215: LD_INT 28
38217: DOUBLE
38218: EQUAL
38219: IFTRUE 38229
38221: LD_INT 21
38223: DOUBLE
38224: EQUAL
38225: IFTRUE 38229
38227: GO 38254
38229: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38230: LD_ADDR_VAR 0 3
38234: PUSH
38235: LD_INT 21
38237: PPUSH
38238: LD_VAR 0 1
38242: PPUSH
38243: CALL_OW 321
38247: PUSH
38248: LD_INT 2
38250: EQUAL
38251: ST_TO_ADDR
38252: GO 38426
38254: LD_INT 16
38256: DOUBLE
38257: EQUAL
38258: IFTRUE 38262
38260: GO 38287
38262: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38263: LD_ADDR_VAR 0 3
38267: PUSH
38268: LD_INT 84
38270: PPUSH
38271: LD_VAR 0 1
38275: PPUSH
38276: CALL_OW 321
38280: PUSH
38281: LD_INT 2
38283: EQUAL
38284: ST_TO_ADDR
38285: GO 38426
38287: LD_INT 19
38289: DOUBLE
38290: EQUAL
38291: IFTRUE 38301
38293: LD_INT 23
38295: DOUBLE
38296: EQUAL
38297: IFTRUE 38301
38299: GO 38326
38301: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_INT 83
38309: PPUSH
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 321
38319: PUSH
38320: LD_INT 2
38322: EQUAL
38323: ST_TO_ADDR
38324: GO 38426
38326: LD_INT 17
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38334
38332: GO 38359
38334: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38335: LD_ADDR_VAR 0 3
38339: PUSH
38340: LD_INT 39
38342: PPUSH
38343: LD_VAR 0 1
38347: PPUSH
38348: CALL_OW 321
38352: PUSH
38353: LD_INT 2
38355: EQUAL
38356: ST_TO_ADDR
38357: GO 38426
38359: LD_INT 18
38361: DOUBLE
38362: EQUAL
38363: IFTRUE 38367
38365: GO 38392
38367: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38368: LD_ADDR_VAR 0 3
38372: PUSH
38373: LD_INT 40
38375: PPUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: CALL_OW 321
38385: PUSH
38386: LD_INT 2
38388: EQUAL
38389: ST_TO_ADDR
38390: GO 38426
38392: LD_INT 27
38394: DOUBLE
38395: EQUAL
38396: IFTRUE 38400
38398: GO 38425
38400: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38401: LD_ADDR_VAR 0 3
38405: PUSH
38406: LD_INT 35
38408: PPUSH
38409: LD_VAR 0 1
38413: PPUSH
38414: CALL_OW 321
38418: PUSH
38419: LD_INT 2
38421: EQUAL
38422: ST_TO_ADDR
38423: GO 38426
38425: POP
// end ;
38426: LD_VAR 0 3
38430: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38431: LD_INT 0
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
// result := false ;
38444: LD_ADDR_VAR 0 6
38448: PUSH
38449: LD_INT 0
38451: ST_TO_ADDR
// if btype = b_depot then
38452: LD_VAR 0 2
38456: PUSH
38457: LD_INT 0
38459: EQUAL
38460: IFFALSE 38472
// begin result := true ;
38462: LD_ADDR_VAR 0 6
38466: PUSH
38467: LD_INT 1
38469: ST_TO_ADDR
// exit ;
38470: GO 39298
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38472: LD_VAR 0 1
38476: NOT
38477: PUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: CALL_OW 266
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: IN
38498: NOT
38499: OR
38500: PUSH
38501: LD_VAR 0 2
38505: NOT
38506: OR
38507: PUSH
38508: LD_VAR 0 5
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: LD_INT 4
38527: PUSH
38528: LD_INT 5
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: IN
38539: NOT
38540: OR
38541: PUSH
38542: LD_VAR 0 3
38546: PPUSH
38547: LD_VAR 0 4
38551: PPUSH
38552: CALL_OW 488
38556: NOT
38557: OR
38558: IFFALSE 38562
// exit ;
38560: GO 39298
// side := GetSide ( depot ) ;
38562: LD_ADDR_VAR 0 9
38566: PUSH
38567: LD_VAR 0 1
38571: PPUSH
38572: CALL_OW 255
38576: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38577: LD_VAR 0 9
38581: PPUSH
38582: LD_VAR 0 2
38586: PPUSH
38587: CALL 38055 0 2
38591: NOT
38592: IFFALSE 38596
// exit ;
38594: GO 39298
// pom := GetBase ( depot ) ;
38596: LD_ADDR_VAR 0 10
38600: PUSH
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 274
38610: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38611: LD_ADDR_VAR 0 11
38615: PUSH
38616: LD_VAR 0 2
38620: PPUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 248
38630: PPUSH
38631: CALL_OW 450
38635: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38636: LD_VAR 0 10
38640: PPUSH
38641: LD_INT 1
38643: PPUSH
38644: CALL_OW 275
38648: PUSH
38649: LD_VAR 0 11
38653: PUSH
38654: LD_INT 1
38656: ARRAY
38657: GREATEREQUAL
38658: PUSH
38659: LD_VAR 0 10
38663: PPUSH
38664: LD_INT 2
38666: PPUSH
38667: CALL_OW 275
38671: PUSH
38672: LD_VAR 0 11
38676: PUSH
38677: LD_INT 2
38679: ARRAY
38680: GREATEREQUAL
38681: AND
38682: PUSH
38683: LD_VAR 0 10
38687: PPUSH
38688: LD_INT 3
38690: PPUSH
38691: CALL_OW 275
38695: PUSH
38696: LD_VAR 0 11
38700: PUSH
38701: LD_INT 3
38703: ARRAY
38704: GREATEREQUAL
38705: AND
38706: NOT
38707: IFFALSE 38711
// exit ;
38709: GO 39298
// if GetBType ( depot ) = b_depot then
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 266
38720: PUSH
38721: LD_INT 0
38723: EQUAL
38724: IFFALSE 38736
// dist := 28 else
38726: LD_ADDR_VAR 0 14
38730: PUSH
38731: LD_INT 28
38733: ST_TO_ADDR
38734: GO 38744
// dist := 36 ;
38736: LD_ADDR_VAR 0 14
38740: PUSH
38741: LD_INT 36
38743: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38744: LD_VAR 0 1
38748: PPUSH
38749: LD_VAR 0 3
38753: PPUSH
38754: LD_VAR 0 4
38758: PPUSH
38759: CALL_OW 297
38763: PUSH
38764: LD_VAR 0 14
38768: GREATER
38769: IFFALSE 38773
// exit ;
38771: GO 39298
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38773: LD_ADDR_VAR 0 12
38777: PUSH
38778: LD_VAR 0 2
38782: PPUSH
38783: LD_VAR 0 3
38787: PPUSH
38788: LD_VAR 0 4
38792: PPUSH
38793: LD_VAR 0 5
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: CALL_OW 248
38807: PPUSH
38808: LD_INT 0
38810: PPUSH
38811: CALL 39303 0 6
38815: ST_TO_ADDR
// if not hexes then
38816: LD_VAR 0 12
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 39298
// hex := GetHexInfo ( x , y ) ;
38825: LD_ADDR_VAR 0 15
38829: PUSH
38830: LD_VAR 0 3
38834: PPUSH
38835: LD_VAR 0 4
38839: PPUSH
38840: CALL_OW 546
38844: ST_TO_ADDR
// if hex [ 1 ] then
38845: LD_VAR 0 15
38849: PUSH
38850: LD_INT 1
38852: ARRAY
38853: IFFALSE 38857
// exit ;
38855: GO 39298
// height := hex [ 2 ] ;
38857: LD_ADDR_VAR 0 13
38861: PUSH
38862: LD_VAR 0 15
38866: PUSH
38867: LD_INT 2
38869: ARRAY
38870: ST_TO_ADDR
// for i = 1 to hexes do
38871: LD_ADDR_VAR 0 7
38875: PUSH
38876: DOUBLE
38877: LD_INT 1
38879: DEC
38880: ST_TO_ADDR
38881: LD_VAR 0 12
38885: PUSH
38886: FOR_TO
38887: IFFALSE 39217
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38889: LD_VAR 0 12
38893: PUSH
38894: LD_VAR 0 7
38898: ARRAY
38899: PUSH
38900: LD_INT 1
38902: ARRAY
38903: PPUSH
38904: LD_VAR 0 12
38908: PUSH
38909: LD_VAR 0 7
38913: ARRAY
38914: PUSH
38915: LD_INT 2
38917: ARRAY
38918: PPUSH
38919: CALL_OW 488
38923: NOT
38924: PUSH
38925: LD_VAR 0 12
38929: PUSH
38930: LD_VAR 0 7
38934: ARRAY
38935: PUSH
38936: LD_INT 1
38938: ARRAY
38939: PPUSH
38940: LD_VAR 0 12
38944: PUSH
38945: LD_VAR 0 7
38949: ARRAY
38950: PUSH
38951: LD_INT 2
38953: ARRAY
38954: PPUSH
38955: CALL_OW 428
38959: PUSH
38960: LD_INT 0
38962: GREATER
38963: OR
38964: PUSH
38965: LD_VAR 0 12
38969: PUSH
38970: LD_VAR 0 7
38974: ARRAY
38975: PUSH
38976: LD_INT 1
38978: ARRAY
38979: PPUSH
38980: LD_VAR 0 12
38984: PUSH
38985: LD_VAR 0 7
38989: ARRAY
38990: PUSH
38991: LD_INT 2
38993: ARRAY
38994: PPUSH
38995: CALL_OW 351
38999: OR
39000: IFFALSE 39006
// exit ;
39002: POP
39003: POP
39004: GO 39298
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39006: LD_ADDR_VAR 0 8
39010: PUSH
39011: LD_VAR 0 12
39015: PUSH
39016: LD_VAR 0 7
39020: ARRAY
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: PPUSH
39026: LD_VAR 0 12
39030: PUSH
39031: LD_VAR 0 7
39035: ARRAY
39036: PUSH
39037: LD_INT 2
39039: ARRAY
39040: PPUSH
39041: CALL_OW 546
39045: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39046: LD_VAR 0 8
39050: PUSH
39051: LD_INT 1
39053: ARRAY
39054: PUSH
39055: LD_VAR 0 8
39059: PUSH
39060: LD_INT 2
39062: ARRAY
39063: PUSH
39064: LD_VAR 0 13
39068: PUSH
39069: LD_INT 2
39071: PLUS
39072: GREATER
39073: OR
39074: PUSH
39075: LD_VAR 0 8
39079: PUSH
39080: LD_INT 2
39082: ARRAY
39083: PUSH
39084: LD_VAR 0 13
39088: PUSH
39089: LD_INT 2
39091: MINUS
39092: LESS
39093: OR
39094: PUSH
39095: LD_VAR 0 8
39099: PUSH
39100: LD_INT 3
39102: ARRAY
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 8
39109: PUSH
39110: LD_INT 9
39112: PUSH
39113: LD_INT 10
39115: PUSH
39116: LD_INT 11
39118: PUSH
39119: LD_INT 12
39121: PUSH
39122: LD_INT 13
39124: PUSH
39125: LD_INT 16
39127: PUSH
39128: LD_INT 17
39130: PUSH
39131: LD_INT 18
39133: PUSH
39134: LD_INT 19
39136: PUSH
39137: LD_INT 20
39139: PUSH
39140: LD_INT 21
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: IN
39158: NOT
39159: OR
39160: PUSH
39161: LD_VAR 0 8
39165: PUSH
39166: LD_INT 5
39168: ARRAY
39169: NOT
39170: OR
39171: PUSH
39172: LD_VAR 0 8
39176: PUSH
39177: LD_INT 6
39179: ARRAY
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 7
39189: PUSH
39190: LD_INT 9
39192: PUSH
39193: LD_INT 10
39195: PUSH
39196: LD_INT 11
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: IN
39207: NOT
39208: OR
39209: IFFALSE 39215
// exit ;
39211: POP
39212: POP
39213: GO 39298
// end ;
39215: GO 38886
39217: POP
39218: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39219: LD_VAR 0 9
39223: PPUSH
39224: LD_VAR 0 3
39228: PPUSH
39229: LD_VAR 0 4
39233: PPUSH
39234: LD_INT 20
39236: PPUSH
39237: CALL 31221 0 4
39241: PUSH
39242: LD_INT 4
39244: ARRAY
39245: IFFALSE 39249
// exit ;
39247: GO 39298
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39249: LD_VAR 0 2
39253: PUSH
39254: LD_INT 29
39256: PUSH
39257: LD_INT 30
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: IN
39264: PUSH
39265: LD_VAR 0 3
39269: PPUSH
39270: LD_VAR 0 4
39274: PPUSH
39275: LD_VAR 0 9
39279: PPUSH
39280: CALL_OW 440
39284: NOT
39285: AND
39286: IFFALSE 39290
// exit ;
39288: GO 39298
// result := true ;
39290: LD_ADDR_VAR 0 6
39294: PUSH
39295: LD_INT 1
39297: ST_TO_ADDR
// end ;
39298: LD_VAR 0 6
39302: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39303: LD_INT 0
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
39312: PPUSH
39313: PPUSH
39314: PPUSH
39315: PPUSH
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
39327: PPUSH
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
39360: PPUSH
39361: PPUSH
39362: PPUSH
// result = [ ] ;
39363: LD_ADDR_VAR 0 7
39367: PUSH
39368: EMPTY
39369: ST_TO_ADDR
// temp_list = [ ] ;
39370: LD_ADDR_VAR 0 9
39374: PUSH
39375: EMPTY
39376: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39377: LD_VAR 0 4
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 3
39393: PUSH
39394: LD_INT 4
39396: PUSH
39397: LD_INT 5
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: IN
39408: NOT
39409: PUSH
39410: LD_VAR 0 1
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: IN
39425: PUSH
39426: LD_VAR 0 5
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: IN
39445: NOT
39446: AND
39447: OR
39448: IFFALSE 39452
// exit ;
39450: GO 57843
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39452: LD_VAR 0 1
39456: PUSH
39457: LD_INT 6
39459: PUSH
39460: LD_INT 7
39462: PUSH
39463: LD_INT 8
39465: PUSH
39466: LD_INT 13
39468: PUSH
39469: LD_INT 12
39471: PUSH
39472: LD_INT 15
39474: PUSH
39475: LD_INT 11
39477: PUSH
39478: LD_INT 14
39480: PUSH
39481: LD_INT 10
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: IN
39495: IFFALSE 39505
// btype = b_lab ;
39497: LD_ADDR_VAR 0 1
39501: PUSH
39502: LD_INT 6
39504: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39505: LD_VAR 0 6
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: IN
39524: NOT
39525: PUSH
39526: LD_VAR 0 1
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 6
39545: PUSH
39546: LD_INT 36
39548: PUSH
39549: LD_INT 4
39551: PUSH
39552: LD_INT 5
39554: PUSH
39555: LD_INT 31
39557: PUSH
39558: LD_INT 32
39560: PUSH
39561: LD_INT 33
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: IN
39577: NOT
39578: PUSH
39579: LD_VAR 0 6
39583: PUSH
39584: LD_INT 1
39586: EQUAL
39587: AND
39588: OR
39589: PUSH
39590: LD_VAR 0 1
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: IN
39605: NOT
39606: PUSH
39607: LD_VAR 0 6
39611: PUSH
39612: LD_INT 2
39614: EQUAL
39615: AND
39616: OR
39617: IFFALSE 39627
// mode = 0 ;
39619: LD_ADDR_VAR 0 6
39623: PUSH
39624: LD_INT 0
39626: ST_TO_ADDR
// case mode of 0 :
39627: LD_VAR 0 6
39631: PUSH
39632: LD_INT 0
39634: DOUBLE
39635: EQUAL
39636: IFTRUE 39640
39638: GO 51093
39640: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39641: LD_ADDR_VAR 0 11
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39834: LD_ADDR_VAR 0 12
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 3
39991: NEG
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40030: LD_ADDR_VAR 0 13
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: LD_INT 3
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 3
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 3
40201: NEG
40202: PUSH
40203: LD_INT 3
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40229: LD_ADDR_VAR 0 14
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 3
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 3
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40425: LD_ADDR_VAR 0 15
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 3
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 3
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40618: LD_ADDR_VAR 0 16
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40811: LD_ADDR_VAR 0 17
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41041: LD_ADDR_VAR 0 18
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 2
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41271: LD_ADDR_VAR 0 19
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: NEG
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41501: LD_ADDR_VAR 0 20
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: LD_INT 2
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41731: LD_ADDR_VAR 0 21
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41961: LD_ADDR_VAR 0 22
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: NEG
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 2
42164: NEG
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42191: LD_ADDR_VAR 0 23
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: LD_INT 3
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 3
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42471: LD_ADDR_VAR 0 24
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42747: LD_ADDR_VAR 0 25
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 2
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 3
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 3
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43021: LD_ADDR_VAR 0 26
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43297: LD_ADDR_VAR 0 27
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43577: LD_ADDR_VAR 0 28
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 3
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 3
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43859: LD_ADDR_VAR 0 29
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 3
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 3
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 3
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: NEG
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44138: LD_ADDR_VAR 0 30
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 3
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 3
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 3
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44416: LD_ADDR_VAR 0 31
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 1
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: LD_INT 3
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 3
44659: NEG
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44694: LD_ADDR_VAR 0 32
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 3
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 3
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 3
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44972: LD_ADDR_VAR 0 33
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: LD_INT 3
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 3
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 3
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45251: LD_ADDR_VAR 0 34
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 3
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45531: LD_ADDR_VAR 0 35
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45643: LD_ADDR_VAR 0 36
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45755: LD_ADDR_VAR 0 37
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45867: LD_ADDR_VAR 0 38
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45979: LD_ADDR_VAR 0 39
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46091: LD_ADDR_VAR 0 40
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46203: LD_ADDR_VAR 0 41
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 0
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 3
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 3
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 3
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46553: LD_ADDR_VAR 0 42
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 3
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 3
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: LD_INT 3
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 3
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: LD_INT 3
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: LD_INT 3
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46903: LD_ADDR_VAR 0 43
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47251: LD_ADDR_VAR 0 44
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 3
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 3
47494: PUSH
47495: LD_INT 3
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: NEG
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: NEG
47561: PUSH
47562: LD_INT 3
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47601: LD_ADDR_VAR 0 45
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 2
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: LD_INT 3
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 3
47910: NEG
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47951: LD_ADDR_VAR 0 46
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 2
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 2
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: NEG
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48299: LD_ADDR_VAR 0 47
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 2
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48450: LD_ADDR_VAR 0 48
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48597: LD_ADDR_VAR 0 49
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48741: LD_ADDR_VAR 0 50
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 1
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48885: LD_ADDR_VAR 0 51
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: NEG
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49032: LD_ADDR_VAR 0 52
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 0
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49183: LD_ADDR_VAR 0 53
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49413: LD_ADDR_VAR 0 54
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49643: LD_ADDR_VAR 0 55
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 2
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49873: LD_ADDR_VAR 0 56
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 2
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50103: LD_ADDR_VAR 0 57
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 2
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50333: LD_ADDR_VAR 0 58
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 2
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50563: LD_ADDR_VAR 0 59
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50651: LD_ADDR_VAR 0 60
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50739: LD_ADDR_VAR 0 61
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50827: LD_ADDR_VAR 0 62
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50915: LD_ADDR_VAR 0 63
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51003: LD_ADDR_VAR 0 64
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// end ; 1 :
51091: GO 56988
51093: LD_INT 1
51095: DOUBLE
51096: EQUAL
51097: IFTRUE 51101
51099: GO 53724
51101: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51102: LD_ADDR_VAR 0 11
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 3
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51146: LD_ADDR_VAR 0 12
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51187: LD_ADDR_VAR 0 13
51191: PUSH
51192: LD_INT 3
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51227: LD_ADDR_VAR 0 14
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51268: LD_ADDR_VAR 0 15
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51312: LD_ADDR_VAR 0 16
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51358: LD_ADDR_VAR 0 17
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 3
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 3
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51402: LD_ADDR_VAR 0 18
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51443: LD_ADDR_VAR 0 19
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: LIST
51482: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51483: LD_ADDR_VAR 0 20
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51524: LD_ADDR_VAR 0 21
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 3
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51568: LD_ADDR_VAR 0 22
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 3
51587: NEG
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: NEG
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51614: LD_ADDR_VAR 0 23
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 4
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51658: LD_ADDR_VAR 0 24
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51699: LD_ADDR_VAR 0 25
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 4
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: PUSH
51727: LD_INT 4
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51739: LD_ADDR_VAR 0 26
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: LD_INT 4
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51780: LD_ADDR_VAR 0 27
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 4
51809: NEG
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51824: LD_ADDR_VAR 0 28
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 4
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 4
51855: NEG
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51870: LD_ADDR_VAR 0 29
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: LD_INT 3
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 4
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 0
51923: PUSH
51924: LD_INT 4
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: LD_INT 5
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 5
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 4
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 6
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: LD_INT 6
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52025: LD_ADDR_VAR 0 30
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 4
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 4
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 5
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 5
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 5
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 6
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 6
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52168: LD_ADDR_VAR 0 31
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: LD_INT 4
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 5
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 4
52255: PUSH
52256: LD_INT 5
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 6
52265: PUSH
52266: LD_INT 5
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 6
52275: PUSH
52276: LD_INT 6
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 5
52285: PUSH
52286: LD_INT 6
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52307: LD_ADDR_VAR 0 32
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: LD_INT 4
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 4
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 5
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 5
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 6
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 6
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52450: LD_ADDR_VAR 0 33
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 3
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 3
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 4
52502: NEG
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 4
52513: NEG
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 4
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 5
52536: NEG
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 5
52547: NEG
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 5
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 6
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 6
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52605: LD_ADDR_VAR 0 34
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: LD_INT 3
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 3
52648: NEG
52649: PUSH
52650: LD_INT 4
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 4
52660: NEG
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 4
52672: NEG
52673: PUSH
52674: LD_INT 4
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 4
52684: NEG
52685: PUSH
52686: LD_INT 5
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 5
52696: NEG
52697: PUSH
52698: LD_INT 4
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 5
52708: NEG
52709: PUSH
52710: LD_INT 5
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 5
52720: NEG
52721: PUSH
52722: LD_INT 6
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 6
52732: NEG
52733: PUSH
52734: LD_INT 5
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 6
52744: NEG
52745: PUSH
52746: LD_INT 6
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52768: LD_ADDR_VAR 0 41
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 3
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52812: LD_ADDR_VAR 0 42
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52853: LD_ADDR_VAR 0 43
52857: PUSH
52858: LD_INT 2
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: LIST
52892: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52893: LD_ADDR_VAR 0 44
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52934: LD_ADDR_VAR 0 45
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52978: LD_ADDR_VAR 0 46
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: LD_INT 2
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 3
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53024: LD_ADDR_VAR 0 47
53028: PUSH
53029: LD_INT 2
53031: NEG
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53057: LD_ADDR_VAR 0 48
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53088: LD_ADDR_VAR 0 49
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53117: LD_ADDR_VAR 0 50
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53146: LD_ADDR_VAR 0 51
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53177: LD_ADDR_VAR 0 52
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53210: LD_ADDR_VAR 0 53
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 3
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: LD_INT 3
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53254: LD_ADDR_VAR 0 54
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53295: LD_ADDR_VAR 0 55
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53335: LD_ADDR_VAR 0 56
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53376: LD_ADDR_VAR 0 57
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: NEG
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: NEG
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53420: LD_ADDR_VAR 0 58
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 3
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 3
53451: NEG
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53466: LD_ADDR_VAR 0 59
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53510: LD_ADDR_VAR 0 60
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53551: LD_ADDR_VAR 0 61
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53591: LD_ADDR_VAR 0 62
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: LIST
53631: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53632: LD_ADDR_VAR 0 63
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53676: LD_ADDR_VAR 0 64
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// end ; 2 :
53722: GO 56988
53724: LD_INT 2
53726: DOUBLE
53727: EQUAL
53728: IFTRUE 53732
53730: GO 56987
53732: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53733: LD_ADDR_VAR 0 29
53737: PUSH
53738: LD_INT 4
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 4
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 5
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 5
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 5
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 4
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 4
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: LD_INT 4
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: PUSH
53884: LD_INT 3
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 4
53903: PUSH
53904: LD_INT 2
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 4
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 4
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 3
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 4
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 5
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 5
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 4
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: LD_INT 5
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: LD_INT 3
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 3
54016: NEG
54017: PUSH
54018: LD_INT 0
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 4
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 4
54095: NEG
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 2
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 4
54118: NEG
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 4
54130: NEG
54131: PUSH
54132: LD_INT 5
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 3
54142: NEG
54143: PUSH
54144: LD_INT 4
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: LD_INT 3
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 4
54166: NEG
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 5
54178: NEG
54179: PUSH
54180: LD_INT 4
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 5
54190: NEG
54191: PUSH
54192: LD_INT 5
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: LD_INT 5
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 5
54214: NEG
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54271: LD_ADDR_VAR 0 30
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: LD_INT 4
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 4
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: LD_INT 4
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 5
54308: PUSH
54309: LD_INT 5
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 4
54318: PUSH
54319: LD_INT 5
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 3
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 5
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 4
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 4
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 4
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 4
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 5
54517: NEG
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 5
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 5
54540: NEG
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 3
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 4
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: NEG
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 4
54623: NEG
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 4
54635: NEG
54636: PUSH
54637: LD_INT 4
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: NEG
54648: PUSH
54649: LD_INT 4
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 4
54659: NEG
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 4
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 5
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 4
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 4
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 5
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 3
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 5
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54818: LD_ADDR_VAR 0 31
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 5
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 5
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 4
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: LD_INT 5
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: LD_INT 3
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 1
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 4
54974: NEG
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 4
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 4
55020: NEG
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: LD_INT 5
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: NEG
55045: PUSH
55046: LD_INT 4
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 3
55056: NEG
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 4
55068: NEG
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 5
55080: NEG
55081: PUSH
55082: LD_INT 4
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 5
55092: NEG
55093: PUSH
55094: LD_INT 5
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 3
55104: NEG
55105: PUSH
55106: LD_INT 5
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 5
55116: NEG
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 0
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 4
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 4
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 4
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 4
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 5
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 5
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 4
55271: PUSH
55272: LD_INT 1
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 5
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55368: LD_ADDR_VAR 0 32
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 4
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 3
55398: NEG
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 4
55420: NEG
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 5
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 5
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 5
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: NEG
55478: PUSH
55479: LD_INT 3
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: LD_INT 4
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: LD_INT 2
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 4
55537: NEG
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: LD_INT 4
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 2
55561: NEG
55562: PUSH
55563: LD_INT 4
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 5
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: LD_INT 3
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 4
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 5
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 3
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 5
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 3
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 4
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 4
55780: PUSH
55781: LD_INT 4
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 4
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 5
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 5
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 5
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 5
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55915: LD_ADDR_VAR 0 33
55919: PUSH
55920: LD_INT 4
55922: NEG
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 4
55934: NEG
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 3
55958: NEG
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 4
55970: NEG
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 5
55982: NEG
55983: PUSH
55984: LD_INT 4
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 5
55994: NEG
55995: PUSH
55996: LD_INT 5
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: LD_INT 5
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 3
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 4
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 3
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 4
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: LD_INT 0
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 5
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 4
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 5
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: LD_INT 3
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 4
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 5
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 5
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 3
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: LD_INT 5
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 3
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56453: LD_ADDR_VAR 0 34
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 4
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 5
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 4
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 5
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 5
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 4
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 4
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 4
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 4
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 5
56675: PUSH
56676: LD_INT 4
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 5
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 4
56695: PUSH
56696: LD_INT 5
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 4
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 5
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: LD_INT 5
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 4
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 4
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 4
56849: NEG
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 3
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 4
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 5
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 5
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 5
56917: NEG
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: ST_TO_ADDR
// end ; end ;
56985: GO 56988
56987: POP
// case btype of b_depot , b_warehouse :
56988: LD_VAR 0 1
56992: PUSH
56993: LD_INT 0
56995: DOUBLE
56996: EQUAL
56997: IFTRUE 57007
56999: LD_INT 1
57001: DOUBLE
57002: EQUAL
57003: IFTRUE 57007
57005: GO 57208
57007: POP
// case nation of nation_american :
57008: LD_VAR 0 5
57012: PUSH
57013: LD_INT 1
57015: DOUBLE
57016: EQUAL
57017: IFTRUE 57021
57019: GO 57077
57021: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57022: LD_ADDR_VAR 0 9
57026: PUSH
57027: LD_VAR 0 11
57031: PUSH
57032: LD_VAR 0 12
57036: PUSH
57037: LD_VAR 0 13
57041: PUSH
57042: LD_VAR 0 14
57046: PUSH
57047: LD_VAR 0 15
57051: PUSH
57052: LD_VAR 0 16
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: PUSH
57065: LD_VAR 0 4
57069: PUSH
57070: LD_INT 1
57072: PLUS
57073: ARRAY
57074: ST_TO_ADDR
57075: GO 57206
57077: LD_INT 2
57079: DOUBLE
57080: EQUAL
57081: IFTRUE 57085
57083: GO 57141
57085: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57086: LD_ADDR_VAR 0 9
57090: PUSH
57091: LD_VAR 0 17
57095: PUSH
57096: LD_VAR 0 18
57100: PUSH
57101: LD_VAR 0 19
57105: PUSH
57106: LD_VAR 0 20
57110: PUSH
57111: LD_VAR 0 21
57115: PUSH
57116: LD_VAR 0 22
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: PUSH
57129: LD_VAR 0 4
57133: PUSH
57134: LD_INT 1
57136: PLUS
57137: ARRAY
57138: ST_TO_ADDR
57139: GO 57206
57141: LD_INT 3
57143: DOUBLE
57144: EQUAL
57145: IFTRUE 57149
57147: GO 57205
57149: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57150: LD_ADDR_VAR 0 9
57154: PUSH
57155: LD_VAR 0 23
57159: PUSH
57160: LD_VAR 0 24
57164: PUSH
57165: LD_VAR 0 25
57169: PUSH
57170: LD_VAR 0 26
57174: PUSH
57175: LD_VAR 0 27
57179: PUSH
57180: LD_VAR 0 28
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: PUSH
57193: LD_VAR 0 4
57197: PUSH
57198: LD_INT 1
57200: PLUS
57201: ARRAY
57202: ST_TO_ADDR
57203: GO 57206
57205: POP
57206: GO 57761
57208: LD_INT 2
57210: DOUBLE
57211: EQUAL
57212: IFTRUE 57222
57214: LD_INT 3
57216: DOUBLE
57217: EQUAL
57218: IFTRUE 57222
57220: GO 57278
57222: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57223: LD_ADDR_VAR 0 9
57227: PUSH
57228: LD_VAR 0 29
57232: PUSH
57233: LD_VAR 0 30
57237: PUSH
57238: LD_VAR 0 31
57242: PUSH
57243: LD_VAR 0 32
57247: PUSH
57248: LD_VAR 0 33
57252: PUSH
57253: LD_VAR 0 34
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: PUSH
57266: LD_VAR 0 4
57270: PUSH
57271: LD_INT 1
57273: PLUS
57274: ARRAY
57275: ST_TO_ADDR
57276: GO 57761
57278: LD_INT 16
57280: DOUBLE
57281: EQUAL
57282: IFTRUE 57340
57284: LD_INT 17
57286: DOUBLE
57287: EQUAL
57288: IFTRUE 57340
57290: LD_INT 18
57292: DOUBLE
57293: EQUAL
57294: IFTRUE 57340
57296: LD_INT 19
57298: DOUBLE
57299: EQUAL
57300: IFTRUE 57340
57302: LD_INT 22
57304: DOUBLE
57305: EQUAL
57306: IFTRUE 57340
57308: LD_INT 20
57310: DOUBLE
57311: EQUAL
57312: IFTRUE 57340
57314: LD_INT 21
57316: DOUBLE
57317: EQUAL
57318: IFTRUE 57340
57320: LD_INT 23
57322: DOUBLE
57323: EQUAL
57324: IFTRUE 57340
57326: LD_INT 24
57328: DOUBLE
57329: EQUAL
57330: IFTRUE 57340
57332: LD_INT 25
57334: DOUBLE
57335: EQUAL
57336: IFTRUE 57340
57338: GO 57396
57340: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57341: LD_ADDR_VAR 0 9
57345: PUSH
57346: LD_VAR 0 35
57350: PUSH
57351: LD_VAR 0 36
57355: PUSH
57356: LD_VAR 0 37
57360: PUSH
57361: LD_VAR 0 38
57365: PUSH
57366: LD_VAR 0 39
57370: PUSH
57371: LD_VAR 0 40
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: PUSH
57384: LD_VAR 0 4
57388: PUSH
57389: LD_INT 1
57391: PLUS
57392: ARRAY
57393: ST_TO_ADDR
57394: GO 57761
57396: LD_INT 6
57398: DOUBLE
57399: EQUAL
57400: IFTRUE 57452
57402: LD_INT 7
57404: DOUBLE
57405: EQUAL
57406: IFTRUE 57452
57408: LD_INT 8
57410: DOUBLE
57411: EQUAL
57412: IFTRUE 57452
57414: LD_INT 13
57416: DOUBLE
57417: EQUAL
57418: IFTRUE 57452
57420: LD_INT 12
57422: DOUBLE
57423: EQUAL
57424: IFTRUE 57452
57426: LD_INT 15
57428: DOUBLE
57429: EQUAL
57430: IFTRUE 57452
57432: LD_INT 11
57434: DOUBLE
57435: EQUAL
57436: IFTRUE 57452
57438: LD_INT 14
57440: DOUBLE
57441: EQUAL
57442: IFTRUE 57452
57444: LD_INT 10
57446: DOUBLE
57447: EQUAL
57448: IFTRUE 57452
57450: GO 57508
57452: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57453: LD_ADDR_VAR 0 9
57457: PUSH
57458: LD_VAR 0 41
57462: PUSH
57463: LD_VAR 0 42
57467: PUSH
57468: LD_VAR 0 43
57472: PUSH
57473: LD_VAR 0 44
57477: PUSH
57478: LD_VAR 0 45
57482: PUSH
57483: LD_VAR 0 46
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: PUSH
57496: LD_VAR 0 4
57500: PUSH
57501: LD_INT 1
57503: PLUS
57504: ARRAY
57505: ST_TO_ADDR
57506: GO 57761
57508: LD_INT 36
57510: DOUBLE
57511: EQUAL
57512: IFTRUE 57516
57514: GO 57572
57516: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57517: LD_ADDR_VAR 0 9
57521: PUSH
57522: LD_VAR 0 47
57526: PUSH
57527: LD_VAR 0 48
57531: PUSH
57532: LD_VAR 0 49
57536: PUSH
57537: LD_VAR 0 50
57541: PUSH
57542: LD_VAR 0 51
57546: PUSH
57547: LD_VAR 0 52
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: PUSH
57560: LD_VAR 0 4
57564: PUSH
57565: LD_INT 1
57567: PLUS
57568: ARRAY
57569: ST_TO_ADDR
57570: GO 57761
57572: LD_INT 4
57574: DOUBLE
57575: EQUAL
57576: IFTRUE 57598
57578: LD_INT 5
57580: DOUBLE
57581: EQUAL
57582: IFTRUE 57598
57584: LD_INT 34
57586: DOUBLE
57587: EQUAL
57588: IFTRUE 57598
57590: LD_INT 37
57592: DOUBLE
57593: EQUAL
57594: IFTRUE 57598
57596: GO 57654
57598: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57599: LD_ADDR_VAR 0 9
57603: PUSH
57604: LD_VAR 0 53
57608: PUSH
57609: LD_VAR 0 54
57613: PUSH
57614: LD_VAR 0 55
57618: PUSH
57619: LD_VAR 0 56
57623: PUSH
57624: LD_VAR 0 57
57628: PUSH
57629: LD_VAR 0 58
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: PUSH
57642: LD_VAR 0 4
57646: PUSH
57647: LD_INT 1
57649: PLUS
57650: ARRAY
57651: ST_TO_ADDR
57652: GO 57761
57654: LD_INT 31
57656: DOUBLE
57657: EQUAL
57658: IFTRUE 57704
57660: LD_INT 32
57662: DOUBLE
57663: EQUAL
57664: IFTRUE 57704
57666: LD_INT 33
57668: DOUBLE
57669: EQUAL
57670: IFTRUE 57704
57672: LD_INT 27
57674: DOUBLE
57675: EQUAL
57676: IFTRUE 57704
57678: LD_INT 26
57680: DOUBLE
57681: EQUAL
57682: IFTRUE 57704
57684: LD_INT 28
57686: DOUBLE
57687: EQUAL
57688: IFTRUE 57704
57690: LD_INT 29
57692: DOUBLE
57693: EQUAL
57694: IFTRUE 57704
57696: LD_INT 30
57698: DOUBLE
57699: EQUAL
57700: IFTRUE 57704
57702: GO 57760
57704: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57705: LD_ADDR_VAR 0 9
57709: PUSH
57710: LD_VAR 0 59
57714: PUSH
57715: LD_VAR 0 60
57719: PUSH
57720: LD_VAR 0 61
57724: PUSH
57725: LD_VAR 0 62
57729: PUSH
57730: LD_VAR 0 63
57734: PUSH
57735: LD_VAR 0 64
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: PUSH
57748: LD_VAR 0 4
57752: PUSH
57753: LD_INT 1
57755: PLUS
57756: ARRAY
57757: ST_TO_ADDR
57758: GO 57761
57760: POP
// temp_list2 = [ ] ;
57761: LD_ADDR_VAR 0 10
57765: PUSH
57766: EMPTY
57767: ST_TO_ADDR
// for i in temp_list do
57768: LD_ADDR_VAR 0 8
57772: PUSH
57773: LD_VAR 0 9
57777: PUSH
57778: FOR_IN
57779: IFFALSE 57831
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57781: LD_ADDR_VAR 0 10
57785: PUSH
57786: LD_VAR 0 10
57790: PUSH
57791: LD_VAR 0 8
57795: PUSH
57796: LD_INT 1
57798: ARRAY
57799: PUSH
57800: LD_VAR 0 2
57804: PLUS
57805: PUSH
57806: LD_VAR 0 8
57810: PUSH
57811: LD_INT 2
57813: ARRAY
57814: PUSH
57815: LD_VAR 0 3
57819: PLUS
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: ADD
57828: ST_TO_ADDR
57829: GO 57778
57831: POP
57832: POP
// result = temp_list2 ;
57833: LD_ADDR_VAR 0 7
57837: PUSH
57838: LD_VAR 0 10
57842: ST_TO_ADDR
// end ;
57843: LD_VAR 0 7
57847: RET
// export function EnemyInRange ( unit , dist ) ; begin
57848: LD_INT 0
57850: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57851: LD_ADDR_VAR 0 3
57855: PUSH
57856: LD_VAR 0 1
57860: PPUSH
57861: CALL_OW 255
57865: PPUSH
57866: LD_VAR 0 1
57870: PPUSH
57871: CALL_OW 250
57875: PPUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: CALL_OW 251
57885: PPUSH
57886: LD_VAR 0 2
57890: PPUSH
57891: CALL 31221 0 4
57895: PUSH
57896: LD_INT 4
57898: ARRAY
57899: ST_TO_ADDR
// end ;
57900: LD_VAR 0 3
57904: RET
// export function PlayerSeeMe ( unit ) ; begin
57905: LD_INT 0
57907: PPUSH
// result := See ( your_side , unit ) ;
57908: LD_ADDR_VAR 0 2
57912: PUSH
57913: LD_OWVAR 2
57917: PPUSH
57918: LD_VAR 0 1
57922: PPUSH
57923: CALL_OW 292
57927: ST_TO_ADDR
// end ;
57928: LD_VAR 0 2
57932: RET
// export function ReverseDir ( unit ) ; begin
57933: LD_INT 0
57935: PPUSH
// if not unit then
57936: LD_VAR 0 1
57940: NOT
57941: IFFALSE 57945
// exit ;
57943: GO 57968
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57945: LD_ADDR_VAR 0 2
57949: PUSH
57950: LD_VAR 0 1
57954: PPUSH
57955: CALL_OW 254
57959: PUSH
57960: LD_INT 3
57962: PLUS
57963: PUSH
57964: LD_INT 6
57966: MOD
57967: ST_TO_ADDR
// end ;
57968: LD_VAR 0 2
57972: RET
// export function ReverseArray ( array ) ; var i ; begin
57973: LD_INT 0
57975: PPUSH
57976: PPUSH
// if not array then
57977: LD_VAR 0 1
57981: NOT
57982: IFFALSE 57986
// exit ;
57984: GO 58041
// result := [ ] ;
57986: LD_ADDR_VAR 0 2
57990: PUSH
57991: EMPTY
57992: ST_TO_ADDR
// for i := array downto 1 do
57993: LD_ADDR_VAR 0 3
57997: PUSH
57998: DOUBLE
57999: LD_VAR 0 1
58003: INC
58004: ST_TO_ADDR
58005: LD_INT 1
58007: PUSH
58008: FOR_DOWNTO
58009: IFFALSE 58039
// result := Join ( result , array [ i ] ) ;
58011: LD_ADDR_VAR 0 2
58015: PUSH
58016: LD_VAR 0 2
58020: PPUSH
58021: LD_VAR 0 1
58025: PUSH
58026: LD_VAR 0 3
58030: ARRAY
58031: PPUSH
58032: CALL 62697 0 2
58036: ST_TO_ADDR
58037: GO 58008
58039: POP
58040: POP
// end ;
58041: LD_VAR 0 2
58045: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58046: LD_INT 0
58048: PPUSH
58049: PPUSH
58050: PPUSH
58051: PPUSH
58052: PPUSH
58053: PPUSH
// if not unit or not hexes then
58054: LD_VAR 0 1
58058: NOT
58059: PUSH
58060: LD_VAR 0 2
58064: NOT
58065: OR
58066: IFFALSE 58070
// exit ;
58068: GO 58193
// dist := 9999 ;
58070: LD_ADDR_VAR 0 5
58074: PUSH
58075: LD_INT 9999
58077: ST_TO_ADDR
// for i = 1 to hexes do
58078: LD_ADDR_VAR 0 4
58082: PUSH
58083: DOUBLE
58084: LD_INT 1
58086: DEC
58087: ST_TO_ADDR
58088: LD_VAR 0 2
58092: PUSH
58093: FOR_TO
58094: IFFALSE 58181
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58096: LD_ADDR_VAR 0 6
58100: PUSH
58101: LD_VAR 0 1
58105: PPUSH
58106: LD_VAR 0 2
58110: PUSH
58111: LD_VAR 0 4
58115: ARRAY
58116: PUSH
58117: LD_INT 1
58119: ARRAY
58120: PPUSH
58121: LD_VAR 0 2
58125: PUSH
58126: LD_VAR 0 4
58130: ARRAY
58131: PUSH
58132: LD_INT 2
58134: ARRAY
58135: PPUSH
58136: CALL_OW 297
58140: ST_TO_ADDR
// if tdist < dist then
58141: LD_VAR 0 6
58145: PUSH
58146: LD_VAR 0 5
58150: LESS
58151: IFFALSE 58179
// begin hex := hexes [ i ] ;
58153: LD_ADDR_VAR 0 8
58157: PUSH
58158: LD_VAR 0 2
58162: PUSH
58163: LD_VAR 0 4
58167: ARRAY
58168: ST_TO_ADDR
// dist := tdist ;
58169: LD_ADDR_VAR 0 5
58173: PUSH
58174: LD_VAR 0 6
58178: ST_TO_ADDR
// end ; end ;
58179: GO 58093
58181: POP
58182: POP
// result := hex ;
58183: LD_ADDR_VAR 0 3
58187: PUSH
58188: LD_VAR 0 8
58192: ST_TO_ADDR
// end ;
58193: LD_VAR 0 3
58197: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58198: LD_INT 0
58200: PPUSH
58201: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58202: LD_VAR 0 1
58206: NOT
58207: PUSH
58208: LD_VAR 0 1
58212: PUSH
58213: LD_INT 21
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 23
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PPUSH
58237: CALL_OW 69
58241: IN
58242: NOT
58243: OR
58244: IFFALSE 58248
// exit ;
58246: GO 58295
// for i = 1 to 3 do
58248: LD_ADDR_VAR 0 3
58252: PUSH
58253: DOUBLE
58254: LD_INT 1
58256: DEC
58257: ST_TO_ADDR
58258: LD_INT 3
58260: PUSH
58261: FOR_TO
58262: IFFALSE 58293
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58264: LD_VAR 0 1
58268: PPUSH
58269: CALL_OW 250
58273: PPUSH
58274: LD_VAR 0 1
58278: PPUSH
58279: CALL_OW 251
58283: PPUSH
58284: LD_INT 1
58286: PPUSH
58287: CALL_OW 453
58291: GO 58261
58293: POP
58294: POP
// end ;
58295: LD_VAR 0 2
58299: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58300: LD_INT 0
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58308: LD_VAR 0 1
58312: NOT
58313: PUSH
58314: LD_VAR 0 2
58318: NOT
58319: OR
58320: PUSH
58321: LD_VAR 0 1
58325: PPUSH
58326: CALL_OW 314
58330: OR
58331: IFFALSE 58335
// exit ;
58333: GO 58802
// if GetLives ( i ) < 250 then
58335: LD_VAR 0 4
58339: PPUSH
58340: CALL_OW 256
58344: PUSH
58345: LD_INT 250
58347: LESS
58348: IFFALSE 58361
// begin ComAutodestruct ( i ) ;
58350: LD_VAR 0 4
58354: PPUSH
58355: CALL 58198 0 1
// exit ;
58359: GO 58802
// end ; x := GetX ( enemy_unit ) ;
58361: LD_ADDR_VAR 0 7
58365: PUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: CALL_OW 250
58375: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58376: LD_ADDR_VAR 0 8
58380: PUSH
58381: LD_VAR 0 2
58385: PPUSH
58386: CALL_OW 251
58390: ST_TO_ADDR
// if not x or not y then
58391: LD_VAR 0 7
58395: NOT
58396: PUSH
58397: LD_VAR 0 8
58401: NOT
58402: OR
58403: IFFALSE 58407
// exit ;
58405: GO 58802
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58407: LD_ADDR_VAR 0 6
58411: PUSH
58412: LD_VAR 0 7
58416: PPUSH
58417: LD_INT 0
58419: PPUSH
58420: LD_INT 4
58422: PPUSH
58423: CALL_OW 272
58427: PUSH
58428: LD_VAR 0 8
58432: PPUSH
58433: LD_INT 0
58435: PPUSH
58436: LD_INT 4
58438: PPUSH
58439: CALL_OW 273
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_VAR 0 7
58452: PPUSH
58453: LD_INT 1
58455: PPUSH
58456: LD_INT 4
58458: PPUSH
58459: CALL_OW 272
58463: PUSH
58464: LD_VAR 0 8
58468: PPUSH
58469: LD_INT 1
58471: PPUSH
58472: LD_INT 4
58474: PPUSH
58475: CALL_OW 273
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_VAR 0 7
58488: PPUSH
58489: LD_INT 2
58491: PPUSH
58492: LD_INT 4
58494: PPUSH
58495: CALL_OW 272
58499: PUSH
58500: LD_VAR 0 8
58504: PPUSH
58505: LD_INT 2
58507: PPUSH
58508: LD_INT 4
58510: PPUSH
58511: CALL_OW 273
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 7
58524: PPUSH
58525: LD_INT 3
58527: PPUSH
58528: LD_INT 4
58530: PPUSH
58531: CALL_OW 272
58535: PUSH
58536: LD_VAR 0 8
58540: PPUSH
58541: LD_INT 3
58543: PPUSH
58544: LD_INT 4
58546: PPUSH
58547: CALL_OW 273
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_VAR 0 7
58560: PPUSH
58561: LD_INT 4
58563: PPUSH
58564: LD_INT 4
58566: PPUSH
58567: CALL_OW 272
58571: PUSH
58572: LD_VAR 0 8
58576: PPUSH
58577: LD_INT 4
58579: PPUSH
58580: LD_INT 4
58582: PPUSH
58583: CALL_OW 273
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_VAR 0 7
58596: PPUSH
58597: LD_INT 5
58599: PPUSH
58600: LD_INT 4
58602: PPUSH
58603: CALL_OW 272
58607: PUSH
58608: LD_VAR 0 8
58612: PPUSH
58613: LD_INT 5
58615: PPUSH
58616: LD_INT 4
58618: PPUSH
58619: CALL_OW 273
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: ST_TO_ADDR
// for i = tmp downto 1 do
58636: LD_ADDR_VAR 0 4
58640: PUSH
58641: DOUBLE
58642: LD_VAR 0 6
58646: INC
58647: ST_TO_ADDR
58648: LD_INT 1
58650: PUSH
58651: FOR_DOWNTO
58652: IFFALSE 58753
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58654: LD_VAR 0 6
58658: PUSH
58659: LD_VAR 0 4
58663: ARRAY
58664: PUSH
58665: LD_INT 1
58667: ARRAY
58668: PPUSH
58669: LD_VAR 0 6
58673: PUSH
58674: LD_VAR 0 4
58678: ARRAY
58679: PUSH
58680: LD_INT 2
58682: ARRAY
58683: PPUSH
58684: CALL_OW 488
58688: NOT
58689: PUSH
58690: LD_VAR 0 6
58694: PUSH
58695: LD_VAR 0 4
58699: ARRAY
58700: PUSH
58701: LD_INT 1
58703: ARRAY
58704: PPUSH
58705: LD_VAR 0 6
58709: PUSH
58710: LD_VAR 0 4
58714: ARRAY
58715: PUSH
58716: LD_INT 2
58718: ARRAY
58719: PPUSH
58720: CALL_OW 428
58724: PUSH
58725: LD_INT 0
58727: NONEQUAL
58728: OR
58729: IFFALSE 58751
// tmp := Delete ( tmp , i ) ;
58731: LD_ADDR_VAR 0 6
58735: PUSH
58736: LD_VAR 0 6
58740: PPUSH
58741: LD_VAR 0 4
58745: PPUSH
58746: CALL_OW 3
58750: ST_TO_ADDR
58751: GO 58651
58753: POP
58754: POP
// j := GetClosestHex ( unit , tmp ) ;
58755: LD_ADDR_VAR 0 5
58759: PUSH
58760: LD_VAR 0 1
58764: PPUSH
58765: LD_VAR 0 6
58769: PPUSH
58770: CALL 58046 0 2
58774: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_VAR 0 5
58784: PUSH
58785: LD_INT 1
58787: ARRAY
58788: PPUSH
58789: LD_VAR 0 5
58793: PUSH
58794: LD_INT 2
58796: ARRAY
58797: PPUSH
58798: CALL_OW 111
// end ;
58802: LD_VAR 0 3
58806: RET
// export function PrepareApemanSoldier ( ) ; begin
58807: LD_INT 0
58809: PPUSH
// uc_nation := 0 ;
58810: LD_ADDR_OWVAR 21
58814: PUSH
58815: LD_INT 0
58817: ST_TO_ADDR
// hc_sex := sex_male ;
58818: LD_ADDR_OWVAR 27
58822: PUSH
58823: LD_INT 1
58825: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58826: LD_ADDR_OWVAR 28
58830: PUSH
58831: LD_INT 15
58833: ST_TO_ADDR
// hc_gallery :=  ;
58834: LD_ADDR_OWVAR 33
58838: PUSH
58839: LD_STRING 
58841: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58842: LD_ADDR_OWVAR 31
58846: PUSH
58847: LD_INT 0
58849: PPUSH
58850: LD_INT 3
58852: PPUSH
58853: CALL_OW 12
58857: PUSH
58858: LD_INT 0
58860: PPUSH
58861: LD_INT 3
58863: PPUSH
58864: CALL_OW 12
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: ST_TO_ADDR
// end ;
58881: LD_VAR 0 1
58885: RET
// export function PrepareApemanEngineer ( ) ; begin
58886: LD_INT 0
58888: PPUSH
// uc_nation := 0 ;
58889: LD_ADDR_OWVAR 21
58893: PUSH
58894: LD_INT 0
58896: ST_TO_ADDR
// hc_sex := sex_male ;
58897: LD_ADDR_OWVAR 27
58901: PUSH
58902: LD_INT 1
58904: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58905: LD_ADDR_OWVAR 28
58909: PUSH
58910: LD_INT 16
58912: ST_TO_ADDR
// hc_gallery :=  ;
58913: LD_ADDR_OWVAR 33
58917: PUSH
58918: LD_STRING 
58920: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58921: LD_ADDR_OWVAR 31
58925: PUSH
58926: LD_INT 0
58928: PPUSH
58929: LD_INT 3
58931: PPUSH
58932: CALL_OW 12
58936: PUSH
58937: LD_INT 0
58939: PPUSH
58940: LD_INT 3
58942: PPUSH
58943: CALL_OW 12
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// end ;
58960: LD_VAR 0 1
58964: RET
// export function PrepareApeman ( agressivity ) ; begin
58965: LD_INT 0
58967: PPUSH
// uc_side := 0 ;
58968: LD_ADDR_OWVAR 20
58972: PUSH
58973: LD_INT 0
58975: ST_TO_ADDR
// uc_nation := 0 ;
58976: LD_ADDR_OWVAR 21
58980: PUSH
58981: LD_INT 0
58983: ST_TO_ADDR
// hc_sex := sex_male ;
58984: LD_ADDR_OWVAR 27
58988: PUSH
58989: LD_INT 1
58991: ST_TO_ADDR
// hc_class := class_apeman ;
58992: LD_ADDR_OWVAR 28
58996: PUSH
58997: LD_INT 12
58999: ST_TO_ADDR
// hc_gallery :=  ;
59000: LD_ADDR_OWVAR 33
59004: PUSH
59005: LD_STRING 
59007: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59008: LD_ADDR_OWVAR 35
59012: PUSH
59013: LD_VAR 0 1
59017: NEG
59018: PPUSH
59019: LD_VAR 0 1
59023: PPUSH
59024: CALL_OW 12
59028: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59029: LD_ADDR_OWVAR 31
59033: PUSH
59034: LD_INT 0
59036: PPUSH
59037: LD_INT 3
59039: PPUSH
59040: CALL_OW 12
59044: PUSH
59045: LD_INT 0
59047: PPUSH
59048: LD_INT 3
59050: PPUSH
59051: CALL_OW 12
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: ST_TO_ADDR
// end ;
59068: LD_VAR 0 2
59072: RET
// export function PrepareTiger ( agressivity ) ; begin
59073: LD_INT 0
59075: PPUSH
// uc_side := 0 ;
59076: LD_ADDR_OWVAR 20
59080: PUSH
59081: LD_INT 0
59083: ST_TO_ADDR
// uc_nation := 0 ;
59084: LD_ADDR_OWVAR 21
59088: PUSH
59089: LD_INT 0
59091: ST_TO_ADDR
// hc_class := class_tiger ;
59092: LD_ADDR_OWVAR 28
59096: PUSH
59097: LD_INT 14
59099: ST_TO_ADDR
// hc_gallery :=  ;
59100: LD_ADDR_OWVAR 33
59104: PUSH
59105: LD_STRING 
59107: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59108: LD_ADDR_OWVAR 35
59112: PUSH
59113: LD_VAR 0 1
59117: NEG
59118: PPUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 12
59128: ST_TO_ADDR
// end ;
59129: LD_VAR 0 2
59133: RET
// export function PrepareEnchidna ( ) ; begin
59134: LD_INT 0
59136: PPUSH
// uc_side := 0 ;
59137: LD_ADDR_OWVAR 20
59141: PUSH
59142: LD_INT 0
59144: ST_TO_ADDR
// uc_nation := 0 ;
59145: LD_ADDR_OWVAR 21
59149: PUSH
59150: LD_INT 0
59152: ST_TO_ADDR
// hc_class := class_baggie ;
59153: LD_ADDR_OWVAR 28
59157: PUSH
59158: LD_INT 13
59160: ST_TO_ADDR
// hc_gallery :=  ;
59161: LD_ADDR_OWVAR 33
59165: PUSH
59166: LD_STRING 
59168: ST_TO_ADDR
// end ;
59169: LD_VAR 0 1
59173: RET
// export function PrepareFrog ( ) ; begin
59174: LD_INT 0
59176: PPUSH
// uc_side := 0 ;
59177: LD_ADDR_OWVAR 20
59181: PUSH
59182: LD_INT 0
59184: ST_TO_ADDR
// uc_nation := 0 ;
59185: LD_ADDR_OWVAR 21
59189: PUSH
59190: LD_INT 0
59192: ST_TO_ADDR
// hc_class := class_frog ;
59193: LD_ADDR_OWVAR 28
59197: PUSH
59198: LD_INT 19
59200: ST_TO_ADDR
// hc_gallery :=  ;
59201: LD_ADDR_OWVAR 33
59205: PUSH
59206: LD_STRING 
59208: ST_TO_ADDR
// end ;
59209: LD_VAR 0 1
59213: RET
// export function PrepareFish ( ) ; begin
59214: LD_INT 0
59216: PPUSH
// uc_side := 0 ;
59217: LD_ADDR_OWVAR 20
59221: PUSH
59222: LD_INT 0
59224: ST_TO_ADDR
// uc_nation := 0 ;
59225: LD_ADDR_OWVAR 21
59229: PUSH
59230: LD_INT 0
59232: ST_TO_ADDR
// hc_class := class_fish ;
59233: LD_ADDR_OWVAR 28
59237: PUSH
59238: LD_INT 20
59240: ST_TO_ADDR
// hc_gallery :=  ;
59241: LD_ADDR_OWVAR 33
59245: PUSH
59246: LD_STRING 
59248: ST_TO_ADDR
// end ;
59249: LD_VAR 0 1
59253: RET
// export function PrepareBird ( ) ; begin
59254: LD_INT 0
59256: PPUSH
// uc_side := 0 ;
59257: LD_ADDR_OWVAR 20
59261: PUSH
59262: LD_INT 0
59264: ST_TO_ADDR
// uc_nation := 0 ;
59265: LD_ADDR_OWVAR 21
59269: PUSH
59270: LD_INT 0
59272: ST_TO_ADDR
// hc_class := class_phororhacos ;
59273: LD_ADDR_OWVAR 28
59277: PUSH
59278: LD_INT 18
59280: ST_TO_ADDR
// hc_gallery :=  ;
59281: LD_ADDR_OWVAR 33
59285: PUSH
59286: LD_STRING 
59288: ST_TO_ADDR
// end ;
59289: LD_VAR 0 1
59293: RET
// export function PrepareHorse ( ) ; begin
59294: LD_INT 0
59296: PPUSH
// uc_side := 0 ;
59297: LD_ADDR_OWVAR 20
59301: PUSH
59302: LD_INT 0
59304: ST_TO_ADDR
// uc_nation := 0 ;
59305: LD_ADDR_OWVAR 21
59309: PUSH
59310: LD_INT 0
59312: ST_TO_ADDR
// hc_class := class_horse ;
59313: LD_ADDR_OWVAR 28
59317: PUSH
59318: LD_INT 21
59320: ST_TO_ADDR
// hc_gallery :=  ;
59321: LD_ADDR_OWVAR 33
59325: PUSH
59326: LD_STRING 
59328: ST_TO_ADDR
// end ;
59329: LD_VAR 0 1
59333: RET
// export function PrepareMastodont ( ) ; begin
59334: LD_INT 0
59336: PPUSH
// uc_side := 0 ;
59337: LD_ADDR_OWVAR 20
59341: PUSH
59342: LD_INT 0
59344: ST_TO_ADDR
// uc_nation := 0 ;
59345: LD_ADDR_OWVAR 21
59349: PUSH
59350: LD_INT 0
59352: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59353: LD_ADDR_OWVAR 37
59357: PUSH
59358: LD_INT 31
59360: ST_TO_ADDR
// vc_control := control_rider ;
59361: LD_ADDR_OWVAR 38
59365: PUSH
59366: LD_INT 4
59368: ST_TO_ADDR
// end ;
59369: LD_VAR 0 1
59373: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59374: LD_INT 0
59376: PPUSH
59377: PPUSH
59378: PPUSH
// uc_side = 0 ;
59379: LD_ADDR_OWVAR 20
59383: PUSH
59384: LD_INT 0
59386: ST_TO_ADDR
// uc_nation = 0 ;
59387: LD_ADDR_OWVAR 21
59391: PUSH
59392: LD_INT 0
59394: ST_TO_ADDR
// InitHc_All ( ) ;
59395: CALL_OW 584
// InitVc ;
59399: CALL_OW 20
// if mastodonts then
59403: LD_VAR 0 6
59407: IFFALSE 59474
// for i = 1 to mastodonts do
59409: LD_ADDR_VAR 0 11
59413: PUSH
59414: DOUBLE
59415: LD_INT 1
59417: DEC
59418: ST_TO_ADDR
59419: LD_VAR 0 6
59423: PUSH
59424: FOR_TO
59425: IFFALSE 59472
// begin vc_chassis := 31 ;
59427: LD_ADDR_OWVAR 37
59431: PUSH
59432: LD_INT 31
59434: ST_TO_ADDR
// vc_control := control_rider ;
59435: LD_ADDR_OWVAR 38
59439: PUSH
59440: LD_INT 4
59442: ST_TO_ADDR
// animal := CreateVehicle ;
59443: LD_ADDR_VAR 0 12
59447: PUSH
59448: CALL_OW 45
59452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59453: LD_VAR 0 12
59457: PPUSH
59458: LD_VAR 0 8
59462: PPUSH
59463: LD_INT 0
59465: PPUSH
59466: CALL 61602 0 3
// end ;
59470: GO 59424
59472: POP
59473: POP
// if horses then
59474: LD_VAR 0 5
59478: IFFALSE 59545
// for i = 1 to horses do
59480: LD_ADDR_VAR 0 11
59484: PUSH
59485: DOUBLE
59486: LD_INT 1
59488: DEC
59489: ST_TO_ADDR
59490: LD_VAR 0 5
59494: PUSH
59495: FOR_TO
59496: IFFALSE 59543
// begin hc_class := 21 ;
59498: LD_ADDR_OWVAR 28
59502: PUSH
59503: LD_INT 21
59505: ST_TO_ADDR
// hc_gallery :=  ;
59506: LD_ADDR_OWVAR 33
59510: PUSH
59511: LD_STRING 
59513: ST_TO_ADDR
// animal := CreateHuman ;
59514: LD_ADDR_VAR 0 12
59518: PUSH
59519: CALL_OW 44
59523: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59524: LD_VAR 0 12
59528: PPUSH
59529: LD_VAR 0 8
59533: PPUSH
59534: LD_INT 0
59536: PPUSH
59537: CALL 61602 0 3
// end ;
59541: GO 59495
59543: POP
59544: POP
// if birds then
59545: LD_VAR 0 1
59549: IFFALSE 59616
// for i = 1 to birds do
59551: LD_ADDR_VAR 0 11
59555: PUSH
59556: DOUBLE
59557: LD_INT 1
59559: DEC
59560: ST_TO_ADDR
59561: LD_VAR 0 1
59565: PUSH
59566: FOR_TO
59567: IFFALSE 59614
// begin hc_class := 18 ;
59569: LD_ADDR_OWVAR 28
59573: PUSH
59574: LD_INT 18
59576: ST_TO_ADDR
// hc_gallery =  ;
59577: LD_ADDR_OWVAR 33
59581: PUSH
59582: LD_STRING 
59584: ST_TO_ADDR
// animal := CreateHuman ;
59585: LD_ADDR_VAR 0 12
59589: PUSH
59590: CALL_OW 44
59594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59595: LD_VAR 0 12
59599: PPUSH
59600: LD_VAR 0 8
59604: PPUSH
59605: LD_INT 0
59607: PPUSH
59608: CALL 61602 0 3
// end ;
59612: GO 59566
59614: POP
59615: POP
// if tigers then
59616: LD_VAR 0 2
59620: IFFALSE 59704
// for i = 1 to tigers do
59622: LD_ADDR_VAR 0 11
59626: PUSH
59627: DOUBLE
59628: LD_INT 1
59630: DEC
59631: ST_TO_ADDR
59632: LD_VAR 0 2
59636: PUSH
59637: FOR_TO
59638: IFFALSE 59702
// begin hc_class = class_tiger ;
59640: LD_ADDR_OWVAR 28
59644: PUSH
59645: LD_INT 14
59647: ST_TO_ADDR
// hc_gallery =  ;
59648: LD_ADDR_OWVAR 33
59652: PUSH
59653: LD_STRING 
59655: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59656: LD_ADDR_OWVAR 35
59660: PUSH
59661: LD_INT 7
59663: NEG
59664: PPUSH
59665: LD_INT 7
59667: PPUSH
59668: CALL_OW 12
59672: ST_TO_ADDR
// animal := CreateHuman ;
59673: LD_ADDR_VAR 0 12
59677: PUSH
59678: CALL_OW 44
59682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59683: LD_VAR 0 12
59687: PPUSH
59688: LD_VAR 0 8
59692: PPUSH
59693: LD_INT 0
59695: PPUSH
59696: CALL 61602 0 3
// end ;
59700: GO 59637
59702: POP
59703: POP
// if apemans then
59704: LD_VAR 0 3
59708: IFFALSE 59831
// for i = 1 to apemans do
59710: LD_ADDR_VAR 0 11
59714: PUSH
59715: DOUBLE
59716: LD_INT 1
59718: DEC
59719: ST_TO_ADDR
59720: LD_VAR 0 3
59724: PUSH
59725: FOR_TO
59726: IFFALSE 59829
// begin hc_class = class_apeman ;
59728: LD_ADDR_OWVAR 28
59732: PUSH
59733: LD_INT 12
59735: ST_TO_ADDR
// hc_gallery =  ;
59736: LD_ADDR_OWVAR 33
59740: PUSH
59741: LD_STRING 
59743: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59744: LD_ADDR_OWVAR 35
59748: PUSH
59749: LD_INT 2
59751: NEG
59752: PPUSH
59753: LD_INT 2
59755: PPUSH
59756: CALL_OW 12
59760: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59761: LD_ADDR_OWVAR 31
59765: PUSH
59766: LD_INT 1
59768: PPUSH
59769: LD_INT 3
59771: PPUSH
59772: CALL_OW 12
59776: PUSH
59777: LD_INT 1
59779: PPUSH
59780: LD_INT 3
59782: PPUSH
59783: CALL_OW 12
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: ST_TO_ADDR
// animal := CreateHuman ;
59800: LD_ADDR_VAR 0 12
59804: PUSH
59805: CALL_OW 44
59809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59810: LD_VAR 0 12
59814: PPUSH
59815: LD_VAR 0 8
59819: PPUSH
59820: LD_INT 0
59822: PPUSH
59823: CALL 61602 0 3
// end ;
59827: GO 59725
59829: POP
59830: POP
// if enchidnas then
59831: LD_VAR 0 4
59835: IFFALSE 59902
// for i = 1 to enchidnas do
59837: LD_ADDR_VAR 0 11
59841: PUSH
59842: DOUBLE
59843: LD_INT 1
59845: DEC
59846: ST_TO_ADDR
59847: LD_VAR 0 4
59851: PUSH
59852: FOR_TO
59853: IFFALSE 59900
// begin hc_class = 13 ;
59855: LD_ADDR_OWVAR 28
59859: PUSH
59860: LD_INT 13
59862: ST_TO_ADDR
// hc_gallery =  ;
59863: LD_ADDR_OWVAR 33
59867: PUSH
59868: LD_STRING 
59870: ST_TO_ADDR
// animal := CreateHuman ;
59871: LD_ADDR_VAR 0 12
59875: PUSH
59876: CALL_OW 44
59880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59881: LD_VAR 0 12
59885: PPUSH
59886: LD_VAR 0 8
59890: PPUSH
59891: LD_INT 0
59893: PPUSH
59894: CALL 61602 0 3
// end ;
59898: GO 59852
59900: POP
59901: POP
// if fishes then
59902: LD_VAR 0 7
59906: IFFALSE 59973
// for i = 1 to fishes do
59908: LD_ADDR_VAR 0 11
59912: PUSH
59913: DOUBLE
59914: LD_INT 1
59916: DEC
59917: ST_TO_ADDR
59918: LD_VAR 0 7
59922: PUSH
59923: FOR_TO
59924: IFFALSE 59971
// begin hc_class = 20 ;
59926: LD_ADDR_OWVAR 28
59930: PUSH
59931: LD_INT 20
59933: ST_TO_ADDR
// hc_gallery =  ;
59934: LD_ADDR_OWVAR 33
59938: PUSH
59939: LD_STRING 
59941: ST_TO_ADDR
// animal := CreateHuman ;
59942: LD_ADDR_VAR 0 12
59946: PUSH
59947: CALL_OW 44
59951: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59952: LD_VAR 0 12
59956: PPUSH
59957: LD_VAR 0 9
59961: PPUSH
59962: LD_INT 0
59964: PPUSH
59965: CALL 61602 0 3
// end ;
59969: GO 59923
59971: POP
59972: POP
// end ;
59973: LD_VAR 0 10
59977: RET
// export function WantHeal ( sci , unit ) ; begin
59978: LD_INT 0
59980: PPUSH
// if GetTaskList ( sci ) > 0 then
59981: LD_VAR 0 1
59985: PPUSH
59986: CALL_OW 437
59990: PUSH
59991: LD_INT 0
59993: GREATER
59994: IFFALSE 60064
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59996: LD_VAR 0 1
60000: PPUSH
60001: CALL_OW 437
60005: PUSH
60006: LD_INT 1
60008: ARRAY
60009: PUSH
60010: LD_INT 1
60012: ARRAY
60013: PUSH
60014: LD_STRING l
60016: EQUAL
60017: PUSH
60018: LD_VAR 0 1
60022: PPUSH
60023: CALL_OW 437
60027: PUSH
60028: LD_INT 1
60030: ARRAY
60031: PUSH
60032: LD_INT 4
60034: ARRAY
60035: PUSH
60036: LD_VAR 0 2
60040: EQUAL
60041: AND
60042: IFFALSE 60054
// result := true else
60044: LD_ADDR_VAR 0 3
60048: PUSH
60049: LD_INT 1
60051: ST_TO_ADDR
60052: GO 60062
// result := false ;
60054: LD_ADDR_VAR 0 3
60058: PUSH
60059: LD_INT 0
60061: ST_TO_ADDR
// end else
60062: GO 60072
// result := false ;
60064: LD_ADDR_VAR 0 3
60068: PUSH
60069: LD_INT 0
60071: ST_TO_ADDR
// end ;
60072: LD_VAR 0 3
60076: RET
// export function HealTarget ( sci ) ; begin
60077: LD_INT 0
60079: PPUSH
// if not sci then
60080: LD_VAR 0 1
60084: NOT
60085: IFFALSE 60089
// exit ;
60087: GO 60154
// result := 0 ;
60089: LD_ADDR_VAR 0 2
60093: PUSH
60094: LD_INT 0
60096: ST_TO_ADDR
// if GetTaskList ( sci ) then
60097: LD_VAR 0 1
60101: PPUSH
60102: CALL_OW 437
60106: IFFALSE 60154
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60108: LD_VAR 0 1
60112: PPUSH
60113: CALL_OW 437
60117: PUSH
60118: LD_INT 1
60120: ARRAY
60121: PUSH
60122: LD_INT 1
60124: ARRAY
60125: PUSH
60126: LD_STRING l
60128: EQUAL
60129: IFFALSE 60154
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60131: LD_ADDR_VAR 0 2
60135: PUSH
60136: LD_VAR 0 1
60140: PPUSH
60141: CALL_OW 437
60145: PUSH
60146: LD_INT 1
60148: ARRAY
60149: PUSH
60150: LD_INT 4
60152: ARRAY
60153: ST_TO_ADDR
// end ;
60154: LD_VAR 0 2
60158: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60159: LD_INT 0
60161: PPUSH
60162: PPUSH
60163: PPUSH
60164: PPUSH
// if not base_units then
60165: LD_VAR 0 1
60169: NOT
60170: IFFALSE 60174
// exit ;
60172: GO 60261
// result := false ;
60174: LD_ADDR_VAR 0 2
60178: PUSH
60179: LD_INT 0
60181: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60182: LD_ADDR_VAR 0 5
60186: PUSH
60187: LD_VAR 0 1
60191: PPUSH
60192: LD_INT 21
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PPUSH
60202: CALL_OW 72
60206: ST_TO_ADDR
// if not tmp then
60207: LD_VAR 0 5
60211: NOT
60212: IFFALSE 60216
// exit ;
60214: GO 60261
// for i in tmp do
60216: LD_ADDR_VAR 0 3
60220: PUSH
60221: LD_VAR 0 5
60225: PUSH
60226: FOR_IN
60227: IFFALSE 60259
// begin result := EnemyInRange ( i , 22 ) ;
60229: LD_ADDR_VAR 0 2
60233: PUSH
60234: LD_VAR 0 3
60238: PPUSH
60239: LD_INT 22
60241: PPUSH
60242: CALL 57848 0 2
60246: ST_TO_ADDR
// if result then
60247: LD_VAR 0 2
60251: IFFALSE 60257
// exit ;
60253: POP
60254: POP
60255: GO 60261
// end ;
60257: GO 60226
60259: POP
60260: POP
// end ;
60261: LD_VAR 0 2
60265: RET
// export function FilterByTag ( units , tag ) ; begin
60266: LD_INT 0
60268: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60269: LD_ADDR_VAR 0 3
60273: PUSH
60274: LD_VAR 0 1
60278: PPUSH
60279: LD_INT 120
60281: PUSH
60282: LD_VAR 0 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PPUSH
60291: CALL_OW 72
60295: ST_TO_ADDR
// end ;
60296: LD_VAR 0 3
60300: RET
// export function IsDriver ( un ) ; begin
60301: LD_INT 0
60303: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60304: LD_ADDR_VAR 0 2
60308: PUSH
60309: LD_VAR 0 1
60313: PUSH
60314: LD_INT 55
60316: PUSH
60317: EMPTY
60318: LIST
60319: PPUSH
60320: CALL_OW 69
60324: IN
60325: ST_TO_ADDR
// end ;
60326: LD_VAR 0 2
60330: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60331: LD_INT 0
60333: PPUSH
60334: PPUSH
// list := [ ] ;
60335: LD_ADDR_VAR 0 5
60339: PUSH
60340: EMPTY
60341: ST_TO_ADDR
// case d of 0 :
60342: LD_VAR 0 3
60346: PUSH
60347: LD_INT 0
60349: DOUBLE
60350: EQUAL
60351: IFTRUE 60355
60353: GO 60488
60355: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60356: LD_ADDR_VAR 0 5
60360: PUSH
60361: LD_VAR 0 1
60365: PUSH
60366: LD_INT 4
60368: MINUS
60369: PUSH
60370: LD_VAR 0 2
60374: PUSH
60375: LD_INT 4
60377: MINUS
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: LIST
60386: PUSH
60387: LD_VAR 0 1
60391: PUSH
60392: LD_INT 3
60394: MINUS
60395: PUSH
60396: LD_VAR 0 2
60400: PUSH
60401: LD_INT 1
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: PUSH
60409: LD_VAR 0 1
60413: PUSH
60414: LD_INT 4
60416: PLUS
60417: PUSH
60418: LD_VAR 0 2
60422: PUSH
60423: LD_INT 4
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: PUSH
60431: LD_VAR 0 1
60435: PUSH
60436: LD_INT 3
60438: PLUS
60439: PUSH
60440: LD_VAR 0 2
60444: PUSH
60445: LD_INT 3
60447: PLUS
60448: PUSH
60449: LD_INT 5
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: PUSH
60457: LD_VAR 0 1
60461: PUSH
60462: LD_VAR 0 2
60466: PUSH
60467: LD_INT 4
60469: PLUS
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: ST_TO_ADDR
// end ; 1 :
60486: GO 61186
60488: LD_INT 1
60490: DOUBLE
60491: EQUAL
60492: IFTRUE 60496
60494: GO 60629
60496: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60497: LD_ADDR_VAR 0 5
60501: PUSH
60502: LD_VAR 0 1
60506: PUSH
60507: LD_VAR 0 2
60511: PUSH
60512: LD_INT 4
60514: MINUS
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: PUSH
60524: LD_VAR 0 1
60528: PUSH
60529: LD_INT 3
60531: MINUS
60532: PUSH
60533: LD_VAR 0 2
60537: PUSH
60538: LD_INT 3
60540: MINUS
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: PUSH
60550: LD_VAR 0 1
60554: PUSH
60555: LD_INT 4
60557: MINUS
60558: PUSH
60559: LD_VAR 0 2
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: PUSH
60572: LD_VAR 0 1
60576: PUSH
60577: LD_VAR 0 2
60581: PUSH
60582: LD_INT 3
60584: PLUS
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: PUSH
60594: LD_VAR 0 1
60598: PUSH
60599: LD_INT 4
60601: PLUS
60602: PUSH
60603: LD_VAR 0 2
60607: PUSH
60608: LD_INT 4
60610: PLUS
60611: PUSH
60612: LD_INT 5
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: ST_TO_ADDR
// end ; 2 :
60627: GO 61186
60629: LD_INT 2
60631: DOUBLE
60632: EQUAL
60633: IFTRUE 60637
60635: GO 60766
60637: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60638: LD_ADDR_VAR 0 5
60642: PUSH
60643: LD_VAR 0 1
60647: PUSH
60648: LD_VAR 0 2
60652: PUSH
60653: LD_INT 3
60655: MINUS
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: PUSH
60665: LD_VAR 0 1
60669: PUSH
60670: LD_INT 4
60672: PLUS
60673: PUSH
60674: LD_VAR 0 2
60678: PUSH
60679: LD_INT 4
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: PUSH
60687: LD_VAR 0 1
60691: PUSH
60692: LD_VAR 0 2
60696: PUSH
60697: LD_INT 4
60699: PLUS
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: PUSH
60709: LD_VAR 0 1
60713: PUSH
60714: LD_INT 3
60716: MINUS
60717: PUSH
60718: LD_VAR 0 2
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: LIST
60730: PUSH
60731: LD_VAR 0 1
60735: PUSH
60736: LD_INT 4
60738: MINUS
60739: PUSH
60740: LD_VAR 0 2
60744: PUSH
60745: LD_INT 4
60747: MINUS
60748: PUSH
60749: LD_INT 2
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: LIST
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// end ; 3 :
60764: GO 61186
60766: LD_INT 3
60768: DOUBLE
60769: EQUAL
60770: IFTRUE 60774
60772: GO 60907
60774: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60775: LD_ADDR_VAR 0 5
60779: PUSH
60780: LD_VAR 0 1
60784: PUSH
60785: LD_INT 3
60787: PLUS
60788: PUSH
60789: LD_VAR 0 2
60793: PUSH
60794: LD_INT 4
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: PUSH
60802: LD_VAR 0 1
60806: PUSH
60807: LD_INT 4
60809: PLUS
60810: PUSH
60811: LD_VAR 0 2
60815: PUSH
60816: LD_INT 4
60818: PLUS
60819: PUSH
60820: LD_INT 5
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: PUSH
60828: LD_VAR 0 1
60832: PUSH
60833: LD_INT 4
60835: MINUS
60836: PUSH
60837: LD_VAR 0 2
60841: PUSH
60842: LD_INT 1
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: PUSH
60850: LD_VAR 0 1
60854: PUSH
60855: LD_VAR 0 2
60859: PUSH
60860: LD_INT 4
60862: MINUS
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: LIST
60871: PUSH
60872: LD_VAR 0 1
60876: PUSH
60877: LD_INT 3
60879: MINUS
60880: PUSH
60881: LD_VAR 0 2
60885: PUSH
60886: LD_INT 3
60888: MINUS
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// end ; 4 :
60905: GO 61186
60907: LD_INT 4
60909: DOUBLE
60910: EQUAL
60911: IFTRUE 60915
60913: GO 61048
60915: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60916: LD_ADDR_VAR 0 5
60920: PUSH
60921: LD_VAR 0 1
60925: PUSH
60926: LD_VAR 0 2
60930: PUSH
60931: LD_INT 4
60933: PLUS
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: PUSH
60943: LD_VAR 0 1
60947: PUSH
60948: LD_INT 3
60950: PLUS
60951: PUSH
60952: LD_VAR 0 2
60956: PUSH
60957: LD_INT 3
60959: PLUS
60960: PUSH
60961: LD_INT 5
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: PUSH
60969: LD_VAR 0 1
60973: PUSH
60974: LD_INT 4
60976: PLUS
60977: PUSH
60978: LD_VAR 0 2
60982: PUSH
60983: LD_INT 4
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: PUSH
60991: LD_VAR 0 1
60995: PUSH
60996: LD_VAR 0 2
61000: PUSH
61001: LD_INT 3
61003: MINUS
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: PUSH
61013: LD_VAR 0 1
61017: PUSH
61018: LD_INT 4
61020: MINUS
61021: PUSH
61022: LD_VAR 0 2
61026: PUSH
61027: LD_INT 4
61029: MINUS
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: LIST
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: ST_TO_ADDR
// end ; 5 :
61046: GO 61186
61048: LD_INT 5
61050: DOUBLE
61051: EQUAL
61052: IFTRUE 61056
61054: GO 61185
61056: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61057: LD_ADDR_VAR 0 5
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 4
61069: MINUS
61070: PUSH
61071: LD_VAR 0 2
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: PUSH
61084: LD_VAR 0 1
61088: PUSH
61089: LD_VAR 0 2
61093: PUSH
61094: LD_INT 4
61096: MINUS
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: PUSH
61106: LD_VAR 0 1
61110: PUSH
61111: LD_INT 4
61113: PLUS
61114: PUSH
61115: LD_VAR 0 2
61119: PUSH
61120: LD_INT 4
61122: PLUS
61123: PUSH
61124: LD_INT 5
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: PUSH
61132: LD_VAR 0 1
61136: PUSH
61137: LD_INT 3
61139: PLUS
61140: PUSH
61141: LD_VAR 0 2
61145: PUSH
61146: LD_INT 4
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: LIST
61153: PUSH
61154: LD_VAR 0 1
61158: PUSH
61159: LD_VAR 0 2
61163: PUSH
61164: LD_INT 3
61166: PLUS
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// end ; end ;
61183: GO 61186
61185: POP
// result := list ;
61186: LD_ADDR_VAR 0 4
61190: PUSH
61191: LD_VAR 0 5
61195: ST_TO_ADDR
// end ;
61196: LD_VAR 0 4
61200: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61201: LD_INT 0
61203: PPUSH
61204: PPUSH
61205: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61206: LD_VAR 0 1
61210: NOT
61211: PUSH
61212: LD_VAR 0 2
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 4
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: IN
61235: NOT
61236: OR
61237: IFFALSE 61241
// exit ;
61239: GO 61324
// tmp := [ ] ;
61241: LD_ADDR_VAR 0 5
61245: PUSH
61246: EMPTY
61247: ST_TO_ADDR
// for i in units do
61248: LD_ADDR_VAR 0 4
61252: PUSH
61253: LD_VAR 0 1
61257: PUSH
61258: FOR_IN
61259: IFFALSE 61293
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61261: LD_ADDR_VAR 0 5
61265: PUSH
61266: LD_VAR 0 5
61270: PPUSH
61271: LD_VAR 0 4
61275: PPUSH
61276: LD_VAR 0 2
61280: PPUSH
61281: CALL_OW 259
61285: PPUSH
61286: CALL 62697 0 2
61290: ST_TO_ADDR
61291: GO 61258
61293: POP
61294: POP
// if not tmp then
61295: LD_VAR 0 5
61299: NOT
61300: IFFALSE 61304
// exit ;
61302: GO 61324
// result := SortListByListDesc ( units , tmp ) ;
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: LD_VAR 0 1
61313: PPUSH
61314: LD_VAR 0 5
61318: PPUSH
61319: CALL_OW 77
61323: ST_TO_ADDR
// end ;
61324: LD_VAR 0 3
61328: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61329: LD_INT 0
61331: PPUSH
61332: PPUSH
61333: PPUSH
// result := false ;
61334: LD_ADDR_VAR 0 3
61338: PUSH
61339: LD_INT 0
61341: ST_TO_ADDR
// if not building then
61342: LD_VAR 0 2
61346: NOT
61347: IFFALSE 61351
// exit ;
61349: GO 61489
// x := GetX ( building ) ;
61351: LD_ADDR_VAR 0 4
61355: PUSH
61356: LD_VAR 0 2
61360: PPUSH
61361: CALL_OW 250
61365: ST_TO_ADDR
// y := GetY ( building ) ;
61366: LD_ADDR_VAR 0 5
61370: PUSH
61371: LD_VAR 0 2
61375: PPUSH
61376: CALL_OW 251
61380: ST_TO_ADDR
// if not x or not y then
61381: LD_VAR 0 4
61385: NOT
61386: PUSH
61387: LD_VAR 0 5
61391: NOT
61392: OR
61393: IFFALSE 61397
// exit ;
61395: GO 61489
// if GetTaskList ( unit ) then
61397: LD_VAR 0 1
61401: PPUSH
61402: CALL_OW 437
61406: IFFALSE 61489
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61408: LD_STRING e
61410: PUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 437
61420: PUSH
61421: LD_INT 1
61423: ARRAY
61424: PUSH
61425: LD_INT 1
61427: ARRAY
61428: EQUAL
61429: PUSH
61430: LD_VAR 0 4
61434: PUSH
61435: LD_VAR 0 1
61439: PPUSH
61440: CALL_OW 437
61444: PUSH
61445: LD_INT 1
61447: ARRAY
61448: PUSH
61449: LD_INT 2
61451: ARRAY
61452: EQUAL
61453: AND
61454: PUSH
61455: LD_VAR 0 5
61459: PUSH
61460: LD_VAR 0 1
61464: PPUSH
61465: CALL_OW 437
61469: PUSH
61470: LD_INT 1
61472: ARRAY
61473: PUSH
61474: LD_INT 3
61476: ARRAY
61477: EQUAL
61478: AND
61479: IFFALSE 61489
// result := true end ;
61481: LD_ADDR_VAR 0 3
61485: PUSH
61486: LD_INT 1
61488: ST_TO_ADDR
// end ;
61489: LD_VAR 0 3
61493: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61494: LD_INT 0
61496: PPUSH
// result := false ;
61497: LD_ADDR_VAR 0 4
61501: PUSH
61502: LD_INT 0
61504: ST_TO_ADDR
// if GetTaskList ( unit ) then
61505: LD_VAR 0 1
61509: PPUSH
61510: CALL_OW 437
61514: IFFALSE 61597
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61516: LD_STRING M
61518: PUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: CALL_OW 437
61528: PUSH
61529: LD_INT 1
61531: ARRAY
61532: PUSH
61533: LD_INT 1
61535: ARRAY
61536: EQUAL
61537: PUSH
61538: LD_VAR 0 2
61542: PUSH
61543: LD_VAR 0 1
61547: PPUSH
61548: CALL_OW 437
61552: PUSH
61553: LD_INT 1
61555: ARRAY
61556: PUSH
61557: LD_INT 2
61559: ARRAY
61560: EQUAL
61561: AND
61562: PUSH
61563: LD_VAR 0 3
61567: PUSH
61568: LD_VAR 0 1
61572: PPUSH
61573: CALL_OW 437
61577: PUSH
61578: LD_INT 1
61580: ARRAY
61581: PUSH
61582: LD_INT 3
61584: ARRAY
61585: EQUAL
61586: AND
61587: IFFALSE 61597
// result := true ;
61589: LD_ADDR_VAR 0 4
61593: PUSH
61594: LD_INT 1
61596: ST_TO_ADDR
// end ; end ;
61597: LD_VAR 0 4
61601: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61602: LD_INT 0
61604: PPUSH
61605: PPUSH
61606: PPUSH
61607: PPUSH
// if not unit or not area then
61608: LD_VAR 0 1
61612: NOT
61613: PUSH
61614: LD_VAR 0 2
61618: NOT
61619: OR
61620: IFFALSE 61624
// exit ;
61622: GO 61800
// tmp := AreaToList ( area , i ) ;
61624: LD_ADDR_VAR 0 6
61628: PUSH
61629: LD_VAR 0 2
61633: PPUSH
61634: LD_VAR 0 5
61638: PPUSH
61639: CALL_OW 517
61643: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61644: LD_ADDR_VAR 0 5
61648: PUSH
61649: DOUBLE
61650: LD_INT 1
61652: DEC
61653: ST_TO_ADDR
61654: LD_VAR 0 6
61658: PUSH
61659: LD_INT 1
61661: ARRAY
61662: PUSH
61663: FOR_TO
61664: IFFALSE 61798
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61666: LD_ADDR_VAR 0 7
61670: PUSH
61671: LD_VAR 0 6
61675: PUSH
61676: LD_INT 1
61678: ARRAY
61679: PUSH
61680: LD_VAR 0 5
61684: ARRAY
61685: PUSH
61686: LD_VAR 0 6
61690: PUSH
61691: LD_INT 2
61693: ARRAY
61694: PUSH
61695: LD_VAR 0 5
61699: ARRAY
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61705: LD_INT 92
61707: PUSH
61708: LD_VAR 0 7
61712: PUSH
61713: LD_INT 1
61715: ARRAY
61716: PUSH
61717: LD_VAR 0 7
61721: PUSH
61722: LD_INT 2
61724: ARRAY
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: PPUSH
61735: CALL_OW 69
61739: PUSH
61740: LD_INT 0
61742: EQUAL
61743: IFFALSE 61796
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61745: LD_VAR 0 1
61749: PPUSH
61750: LD_VAR 0 7
61754: PUSH
61755: LD_INT 1
61757: ARRAY
61758: PPUSH
61759: LD_VAR 0 7
61763: PUSH
61764: LD_INT 2
61766: ARRAY
61767: PPUSH
61768: LD_VAR 0 3
61772: PPUSH
61773: CALL_OW 48
// result := IsPlaced ( unit ) ;
61777: LD_ADDR_VAR 0 4
61781: PUSH
61782: LD_VAR 0 1
61786: PPUSH
61787: CALL_OW 305
61791: ST_TO_ADDR
// exit ;
61792: POP
61793: POP
61794: GO 61800
// end ; end ;
61796: GO 61663
61798: POP
61799: POP
// end ;
61800: LD_VAR 0 4
61804: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61805: LD_INT 0
61807: PPUSH
61808: PPUSH
61809: PPUSH
// if not side or side > 8 then
61810: LD_VAR 0 1
61814: NOT
61815: PUSH
61816: LD_VAR 0 1
61820: PUSH
61821: LD_INT 8
61823: GREATER
61824: OR
61825: IFFALSE 61829
// exit ;
61827: GO 62016
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61829: LD_ADDR_VAR 0 4
61833: PUSH
61834: LD_INT 22
61836: PUSH
61837: LD_VAR 0 1
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 21
61848: PUSH
61849: LD_INT 3
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PPUSH
61860: CALL_OW 69
61864: ST_TO_ADDR
// if not tmp then
61865: LD_VAR 0 4
61869: NOT
61870: IFFALSE 61874
// exit ;
61872: GO 62016
// enable_addtolog := true ;
61874: LD_ADDR_OWVAR 81
61878: PUSH
61879: LD_INT 1
61881: ST_TO_ADDR
// AddToLog ( [ ) ;
61882: LD_STRING [
61884: PPUSH
61885: CALL_OW 561
// for i in tmp do
61889: LD_ADDR_VAR 0 3
61893: PUSH
61894: LD_VAR 0 4
61898: PUSH
61899: FOR_IN
61900: IFFALSE 62007
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61902: LD_STRING [
61904: PUSH
61905: LD_VAR 0 3
61909: PPUSH
61910: CALL_OW 266
61914: STR
61915: PUSH
61916: LD_STRING , 
61918: STR
61919: PUSH
61920: LD_VAR 0 3
61924: PPUSH
61925: CALL_OW 250
61929: STR
61930: PUSH
61931: LD_STRING , 
61933: STR
61934: PUSH
61935: LD_VAR 0 3
61939: PPUSH
61940: CALL_OW 251
61944: STR
61945: PUSH
61946: LD_STRING , 
61948: STR
61949: PUSH
61950: LD_VAR 0 3
61954: PPUSH
61955: CALL_OW 254
61959: STR
61960: PUSH
61961: LD_STRING , 
61963: STR
61964: PUSH
61965: LD_VAR 0 3
61969: PPUSH
61970: LD_INT 1
61972: PPUSH
61973: CALL_OW 268
61977: STR
61978: PUSH
61979: LD_STRING , 
61981: STR
61982: PUSH
61983: LD_VAR 0 3
61987: PPUSH
61988: LD_INT 2
61990: PPUSH
61991: CALL_OW 268
61995: STR
61996: PUSH
61997: LD_STRING ],
61999: STR
62000: PPUSH
62001: CALL_OW 561
// end ;
62005: GO 61899
62007: POP
62008: POP
// AddToLog ( ]; ) ;
62009: LD_STRING ];
62011: PPUSH
62012: CALL_OW 561
// end ;
62016: LD_VAR 0 2
62020: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62021: LD_INT 0
62023: PPUSH
62024: PPUSH
62025: PPUSH
62026: PPUSH
62027: PPUSH
// if not area or not rate or not max then
62028: LD_VAR 0 1
62032: NOT
62033: PUSH
62034: LD_VAR 0 2
62038: NOT
62039: OR
62040: PUSH
62041: LD_VAR 0 4
62045: NOT
62046: OR
62047: IFFALSE 62051
// exit ;
62049: GO 62240
// while 1 do
62051: LD_INT 1
62053: IFFALSE 62240
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62055: LD_ADDR_VAR 0 9
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: LD_INT 1
62067: PPUSH
62068: CALL_OW 287
62072: PUSH
62073: LD_INT 10
62075: MUL
62076: ST_TO_ADDR
// r := rate / 10 ;
62077: LD_ADDR_VAR 0 7
62081: PUSH
62082: LD_VAR 0 2
62086: PUSH
62087: LD_INT 10
62089: DIVREAL
62090: ST_TO_ADDR
// time := 1 1$00 ;
62091: LD_ADDR_VAR 0 8
62095: PUSH
62096: LD_INT 2100
62098: ST_TO_ADDR
// if amount < min then
62099: LD_VAR 0 9
62103: PUSH
62104: LD_VAR 0 3
62108: LESS
62109: IFFALSE 62127
// r := r * 2 else
62111: LD_ADDR_VAR 0 7
62115: PUSH
62116: LD_VAR 0 7
62120: PUSH
62121: LD_INT 2
62123: MUL
62124: ST_TO_ADDR
62125: GO 62153
// if amount > max then
62127: LD_VAR 0 9
62131: PUSH
62132: LD_VAR 0 4
62136: GREATER
62137: IFFALSE 62153
// r := r / 2 ;
62139: LD_ADDR_VAR 0 7
62143: PUSH
62144: LD_VAR 0 7
62148: PUSH
62149: LD_INT 2
62151: DIVREAL
62152: ST_TO_ADDR
// time := time / r ;
62153: LD_ADDR_VAR 0 8
62157: PUSH
62158: LD_VAR 0 8
62162: PUSH
62163: LD_VAR 0 7
62167: DIVREAL
62168: ST_TO_ADDR
// if time < 0 then
62169: LD_VAR 0 8
62173: PUSH
62174: LD_INT 0
62176: LESS
62177: IFFALSE 62194
// time := time * - 1 ;
62179: LD_ADDR_VAR 0 8
62183: PUSH
62184: LD_VAR 0 8
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: MUL
62193: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62194: LD_VAR 0 8
62198: PUSH
62199: LD_INT 35
62201: PPUSH
62202: LD_INT 875
62204: PPUSH
62205: CALL_OW 12
62209: PLUS
62210: PPUSH
62211: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62215: LD_INT 1
62217: PPUSH
62218: LD_INT 5
62220: PPUSH
62221: CALL_OW 12
62225: PPUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: LD_INT 1
62233: PPUSH
62234: CALL_OW 55
// end ;
62238: GO 62051
// end ;
62240: LD_VAR 0 5
62244: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62245: LD_INT 0
62247: PPUSH
62248: PPUSH
62249: PPUSH
62250: PPUSH
62251: PPUSH
62252: PPUSH
62253: PPUSH
62254: PPUSH
// if not turrets or not factories then
62255: LD_VAR 0 1
62259: NOT
62260: PUSH
62261: LD_VAR 0 2
62265: NOT
62266: OR
62267: IFFALSE 62271
// exit ;
62269: GO 62578
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62271: LD_ADDR_VAR 0 10
62275: PUSH
62276: LD_INT 5
62278: PUSH
62279: LD_INT 6
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 2
62288: PUSH
62289: LD_INT 4
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: LD_INT 5
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 24
62313: PUSH
62314: LD_INT 25
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 23
62323: PUSH
62324: LD_INT 27
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 42
62337: PUSH
62338: LD_INT 43
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 44
62347: PUSH
62348: LD_INT 46
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 45
62357: PUSH
62358: LD_INT 47
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// result := [ ] ;
62375: LD_ADDR_VAR 0 3
62379: PUSH
62380: EMPTY
62381: ST_TO_ADDR
// for i in turrets do
62382: LD_ADDR_VAR 0 4
62386: PUSH
62387: LD_VAR 0 1
62391: PUSH
62392: FOR_IN
62393: IFFALSE 62576
// begin nat := GetNation ( i ) ;
62395: LD_ADDR_VAR 0 7
62399: PUSH
62400: LD_VAR 0 4
62404: PPUSH
62405: CALL_OW 248
62409: ST_TO_ADDR
// weapon := 0 ;
62410: LD_ADDR_VAR 0 8
62414: PUSH
62415: LD_INT 0
62417: ST_TO_ADDR
// if not nat then
62418: LD_VAR 0 7
62422: NOT
62423: IFFALSE 62427
// continue ;
62425: GO 62392
// for j in list [ nat ] do
62427: LD_ADDR_VAR 0 5
62431: PUSH
62432: LD_VAR 0 10
62436: PUSH
62437: LD_VAR 0 7
62441: ARRAY
62442: PUSH
62443: FOR_IN
62444: IFFALSE 62485
// if GetBWeapon ( i ) = j [ 1 ] then
62446: LD_VAR 0 4
62450: PPUSH
62451: CALL_OW 269
62455: PUSH
62456: LD_VAR 0 5
62460: PUSH
62461: LD_INT 1
62463: ARRAY
62464: EQUAL
62465: IFFALSE 62483
// begin weapon := j [ 2 ] ;
62467: LD_ADDR_VAR 0 8
62471: PUSH
62472: LD_VAR 0 5
62476: PUSH
62477: LD_INT 2
62479: ARRAY
62480: ST_TO_ADDR
// break ;
62481: GO 62485
// end ;
62483: GO 62443
62485: POP
62486: POP
// if not weapon then
62487: LD_VAR 0 8
62491: NOT
62492: IFFALSE 62496
// continue ;
62494: GO 62392
// for k in factories do
62496: LD_ADDR_VAR 0 6
62500: PUSH
62501: LD_VAR 0 2
62505: PUSH
62506: FOR_IN
62507: IFFALSE 62572
// begin weapons := AvailableWeaponList ( k ) ;
62509: LD_ADDR_VAR 0 9
62513: PUSH
62514: LD_VAR 0 6
62518: PPUSH
62519: CALL_OW 478
62523: ST_TO_ADDR
// if not weapons then
62524: LD_VAR 0 9
62528: NOT
62529: IFFALSE 62533
// continue ;
62531: GO 62506
// if weapon in weapons then
62533: LD_VAR 0 8
62537: PUSH
62538: LD_VAR 0 9
62542: IN
62543: IFFALSE 62570
// begin result := [ i , weapon ] ;
62545: LD_ADDR_VAR 0 3
62549: PUSH
62550: LD_VAR 0 4
62554: PUSH
62555: LD_VAR 0 8
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// exit ;
62564: POP
62565: POP
62566: POP
62567: POP
62568: GO 62578
// end ; end ;
62570: GO 62506
62572: POP
62573: POP
// end ;
62574: GO 62392
62576: POP
62577: POP
// end ;
62578: LD_VAR 0 3
62582: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62583: LD_INT 0
62585: PPUSH
// if not side or side > 8 then
62586: LD_VAR 0 3
62590: NOT
62591: PUSH
62592: LD_VAR 0 3
62596: PUSH
62597: LD_INT 8
62599: GREATER
62600: OR
62601: IFFALSE 62605
// exit ;
62603: GO 62664
// if not range then
62605: LD_VAR 0 4
62609: NOT
62610: IFFALSE 62621
// range := - 12 ;
62612: LD_ADDR_VAR 0 4
62616: PUSH
62617: LD_INT 12
62619: NEG
62620: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62621: LD_VAR 0 1
62625: PPUSH
62626: LD_VAR 0 2
62630: PPUSH
62631: LD_VAR 0 3
62635: PPUSH
62636: LD_VAR 0 4
62640: PPUSH
62641: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62645: LD_VAR 0 1
62649: PPUSH
62650: LD_VAR 0 2
62654: PPUSH
62655: LD_VAR 0 3
62659: PPUSH
62660: CALL_OW 331
// end ;
62664: LD_VAR 0 5
62668: RET
// export function Video ( mode ) ; begin
62669: LD_INT 0
62671: PPUSH
// ingame_video = mode ;
62672: LD_ADDR_OWVAR 52
62676: PUSH
62677: LD_VAR 0 1
62681: ST_TO_ADDR
// interface_hidden = mode ;
62682: LD_ADDR_OWVAR 54
62686: PUSH
62687: LD_VAR 0 1
62691: ST_TO_ADDR
// end ;
62692: LD_VAR 0 2
62696: RET
// export function Join ( array , element ) ; begin
62697: LD_INT 0
62699: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62700: LD_ADDR_VAR 0 3
62704: PUSH
62705: LD_VAR 0 1
62709: PPUSH
62710: LD_VAR 0 1
62714: PUSH
62715: LD_INT 1
62717: PLUS
62718: PPUSH
62719: LD_VAR 0 2
62723: PPUSH
62724: CALL_OW 1
62728: ST_TO_ADDR
// end ;
62729: LD_VAR 0 3
62733: RET
// export function JoinUnion ( array , element ) ; begin
62734: LD_INT 0
62736: PPUSH
// result := array union element ;
62737: LD_ADDR_VAR 0 3
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: LD_VAR 0 2
62751: UNION
62752: ST_TO_ADDR
// end ;
62753: LD_VAR 0 3
62757: RET
// export function GetBehemoths ( side ) ; begin
62758: LD_INT 0
62760: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62761: LD_ADDR_VAR 0 2
62765: PUSH
62766: LD_INT 22
62768: PUSH
62769: LD_VAR 0 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 31
62780: PUSH
62781: LD_INT 25
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PPUSH
62792: CALL_OW 69
62796: ST_TO_ADDR
// end ;
62797: LD_VAR 0 2
62801: RET
// export function Shuffle ( array ) ; var i , index ; begin
62802: LD_INT 0
62804: PPUSH
62805: PPUSH
62806: PPUSH
// result := [ ] ;
62807: LD_ADDR_VAR 0 2
62811: PUSH
62812: EMPTY
62813: ST_TO_ADDR
// if not array then
62814: LD_VAR 0 1
62818: NOT
62819: IFFALSE 62823
// exit ;
62821: GO 62922
// Randomize ;
62823: CALL_OW 10
// for i = array downto 1 do
62827: LD_ADDR_VAR 0 3
62831: PUSH
62832: DOUBLE
62833: LD_VAR 0 1
62837: INC
62838: ST_TO_ADDR
62839: LD_INT 1
62841: PUSH
62842: FOR_DOWNTO
62843: IFFALSE 62920
// begin index := rand ( 1 , array ) ;
62845: LD_ADDR_VAR 0 4
62849: PUSH
62850: LD_INT 1
62852: PPUSH
62853: LD_VAR 0 1
62857: PPUSH
62858: CALL_OW 12
62862: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62863: LD_ADDR_VAR 0 2
62867: PUSH
62868: LD_VAR 0 2
62872: PPUSH
62873: LD_VAR 0 2
62877: PUSH
62878: LD_INT 1
62880: PLUS
62881: PPUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_VAR 0 4
62891: ARRAY
62892: PPUSH
62893: CALL_OW 2
62897: ST_TO_ADDR
// array := Delete ( array , index ) ;
62898: LD_ADDR_VAR 0 1
62902: PUSH
62903: LD_VAR 0 1
62907: PPUSH
62908: LD_VAR 0 4
62912: PPUSH
62913: CALL_OW 3
62917: ST_TO_ADDR
// end ;
62918: GO 62842
62920: POP
62921: POP
// end ;
62922: LD_VAR 0 2
62926: RET
// export function GetBaseMaterials ( base ) ; begin
62927: LD_INT 0
62929: PPUSH
// result := [ 0 , 0 , 0 ] ;
62930: LD_ADDR_VAR 0 2
62934: PUSH
62935: LD_INT 0
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// if not base then
62949: LD_VAR 0 1
62953: NOT
62954: IFFALSE 62958
// exit ;
62956: GO 63007
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62958: LD_ADDR_VAR 0 2
62962: PUSH
62963: LD_VAR 0 1
62967: PPUSH
62968: LD_INT 1
62970: PPUSH
62971: CALL_OW 275
62975: PUSH
62976: LD_VAR 0 1
62980: PPUSH
62981: LD_INT 2
62983: PPUSH
62984: CALL_OW 275
62988: PUSH
62989: LD_VAR 0 1
62993: PPUSH
62994: LD_INT 3
62996: PPUSH
62997: CALL_OW 275
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 2
63011: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
// result := array ;
63016: LD_ADDR_VAR 0 3
63020: PUSH
63021: LD_VAR 0 1
63025: ST_TO_ADDR
// if size >= result then
63026: LD_VAR 0 2
63030: PUSH
63031: LD_VAR 0 3
63035: GREATEREQUAL
63036: IFFALSE 63040
// exit ;
63038: GO 63090
// if size then
63040: LD_VAR 0 2
63044: IFFALSE 63090
// for i := array downto size do
63046: LD_ADDR_VAR 0 4
63050: PUSH
63051: DOUBLE
63052: LD_VAR 0 1
63056: INC
63057: ST_TO_ADDR
63058: LD_VAR 0 2
63062: PUSH
63063: FOR_DOWNTO
63064: IFFALSE 63088
// result := Delete ( result , result ) ;
63066: LD_ADDR_VAR 0 3
63070: PUSH
63071: LD_VAR 0 3
63075: PPUSH
63076: LD_VAR 0 3
63080: PPUSH
63081: CALL_OW 3
63085: ST_TO_ADDR
63086: GO 63063
63088: POP
63089: POP
// end ;
63090: LD_VAR 0 3
63094: RET
// export function ComExit ( unit ) ; var tmp ; begin
63095: LD_INT 0
63097: PPUSH
63098: PPUSH
// if not IsInUnit ( unit ) then
63099: LD_VAR 0 1
63103: PPUSH
63104: CALL_OW 310
63108: NOT
63109: IFFALSE 63113
// exit ;
63111: GO 63173
// tmp := IsInUnit ( unit ) ;
63113: LD_ADDR_VAR 0 3
63117: PUSH
63118: LD_VAR 0 1
63122: PPUSH
63123: CALL_OW 310
63127: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63128: LD_VAR 0 3
63132: PPUSH
63133: CALL_OW 247
63137: PUSH
63138: LD_INT 2
63140: EQUAL
63141: IFFALSE 63154
// ComExitVehicle ( unit ) else
63143: LD_VAR 0 1
63147: PPUSH
63148: CALL_OW 121
63152: GO 63163
// ComExitBuilding ( unit ) ;
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 122
// result := tmp ;
63163: LD_ADDR_VAR 0 2
63167: PUSH
63168: LD_VAR 0 3
63172: ST_TO_ADDR
// end ;
63173: LD_VAR 0 2
63177: RET
// export function ComExitAll ( units ) ; var i ; begin
63178: LD_INT 0
63180: PPUSH
63181: PPUSH
// if not units then
63182: LD_VAR 0 1
63186: NOT
63187: IFFALSE 63191
// exit ;
63189: GO 63217
// for i in units do
63191: LD_ADDR_VAR 0 3
63195: PUSH
63196: LD_VAR 0 1
63200: PUSH
63201: FOR_IN
63202: IFFALSE 63215
// ComExit ( i ) ;
63204: LD_VAR 0 3
63208: PPUSH
63209: CALL 63095 0 1
63213: GO 63201
63215: POP
63216: POP
// end ;
63217: LD_VAR 0 2
63221: RET
// export function ResetHc ; begin
63222: LD_INT 0
63224: PPUSH
// InitHc ;
63225: CALL_OW 19
// hc_importance := 0 ;
63229: LD_ADDR_OWVAR 32
63233: PUSH
63234: LD_INT 0
63236: ST_TO_ADDR
// end ;
63237: LD_VAR 0 1
63241: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63242: LD_INT 0
63244: PPUSH
63245: PPUSH
63246: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63247: LD_ADDR_VAR 0 6
63251: PUSH
63252: LD_VAR 0 1
63256: PUSH
63257: LD_VAR 0 3
63261: PLUS
63262: PUSH
63263: LD_INT 2
63265: DIV
63266: ST_TO_ADDR
// if _x < 0 then
63267: LD_VAR 0 6
63271: PUSH
63272: LD_INT 0
63274: LESS
63275: IFFALSE 63292
// _x := _x * - 1 ;
63277: LD_ADDR_VAR 0 6
63281: PUSH
63282: LD_VAR 0 6
63286: PUSH
63287: LD_INT 1
63289: NEG
63290: MUL
63291: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63292: LD_ADDR_VAR 0 7
63296: PUSH
63297: LD_VAR 0 2
63301: PUSH
63302: LD_VAR 0 4
63306: PLUS
63307: PUSH
63308: LD_INT 2
63310: DIV
63311: ST_TO_ADDR
// if _y < 0 then
63312: LD_VAR 0 7
63316: PUSH
63317: LD_INT 0
63319: LESS
63320: IFFALSE 63337
// _y := _y * - 1 ;
63322: LD_ADDR_VAR 0 7
63326: PUSH
63327: LD_VAR 0 7
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: MUL
63336: ST_TO_ADDR
// result := [ _x , _y ] ;
63337: LD_ADDR_VAR 0 5
63341: PUSH
63342: LD_VAR 0 6
63346: PUSH
63347: LD_VAR 0 7
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: ST_TO_ADDR
// end ;
63356: LD_VAR 0 5
63360: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63361: LD_INT 0
63363: PPUSH
63364: PPUSH
63365: PPUSH
63366: PPUSH
// task := GetTaskList ( unit ) ;
63367: LD_ADDR_VAR 0 7
63371: PUSH
63372: LD_VAR 0 1
63376: PPUSH
63377: CALL_OW 437
63381: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63382: LD_VAR 0 7
63386: NOT
63387: PUSH
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_VAR 0 2
63397: PPUSH
63398: CALL_OW 308
63402: NOT
63403: AND
63404: IFFALSE 63408
// exit ;
63406: GO 63526
// if IsInArea ( unit , area ) then
63408: LD_VAR 0 1
63412: PPUSH
63413: LD_VAR 0 2
63417: PPUSH
63418: CALL_OW 308
63422: IFFALSE 63440
// begin ComMoveToArea ( unit , goAway ) ;
63424: LD_VAR 0 1
63428: PPUSH
63429: LD_VAR 0 3
63433: PPUSH
63434: CALL_OW 113
// exit ;
63438: GO 63526
// end ; if task [ 1 ] [ 1 ] <> M then
63440: LD_VAR 0 7
63444: PUSH
63445: LD_INT 1
63447: ARRAY
63448: PUSH
63449: LD_INT 1
63451: ARRAY
63452: PUSH
63453: LD_STRING M
63455: NONEQUAL
63456: IFFALSE 63460
// exit ;
63458: GO 63526
// x := task [ 1 ] [ 2 ] ;
63460: LD_ADDR_VAR 0 5
63464: PUSH
63465: LD_VAR 0 7
63469: PUSH
63470: LD_INT 1
63472: ARRAY
63473: PUSH
63474: LD_INT 2
63476: ARRAY
63477: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63478: LD_ADDR_VAR 0 6
63482: PUSH
63483: LD_VAR 0 7
63487: PUSH
63488: LD_INT 1
63490: ARRAY
63491: PUSH
63492: LD_INT 3
63494: ARRAY
63495: ST_TO_ADDR
// if InArea ( x , y , area ) then
63496: LD_VAR 0 5
63500: PPUSH
63501: LD_VAR 0 6
63505: PPUSH
63506: LD_VAR 0 2
63510: PPUSH
63511: CALL_OW 309
63515: IFFALSE 63526
// ComStop ( unit ) ;
63517: LD_VAR 0 1
63521: PPUSH
63522: CALL_OW 141
// end ;
63526: LD_VAR 0 4
63530: RET
// export function Abs ( value ) ; begin
63531: LD_INT 0
63533: PPUSH
// result := value ;
63534: LD_ADDR_VAR 0 2
63538: PUSH
63539: LD_VAR 0 1
63543: ST_TO_ADDR
// if value < 0 then
63544: LD_VAR 0 1
63548: PUSH
63549: LD_INT 0
63551: LESS
63552: IFFALSE 63569
// result := value * - 1 ;
63554: LD_ADDR_VAR 0 2
63558: PUSH
63559: LD_VAR 0 1
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: MUL
63568: ST_TO_ADDR
// end ;
63569: LD_VAR 0 2
63573: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63574: LD_INT 0
63576: PPUSH
63577: PPUSH
63578: PPUSH
63579: PPUSH
63580: PPUSH
63581: PPUSH
63582: PPUSH
63583: PPUSH
// if not unit or not building then
63584: LD_VAR 0 1
63588: NOT
63589: PUSH
63590: LD_VAR 0 2
63594: NOT
63595: OR
63596: IFFALSE 63600
// exit ;
63598: GO 63826
// x := GetX ( building ) ;
63600: LD_ADDR_VAR 0 4
63604: PUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: CALL_OW 250
63614: ST_TO_ADDR
// y := GetY ( building ) ;
63615: LD_ADDR_VAR 0 6
63619: PUSH
63620: LD_VAR 0 2
63624: PPUSH
63625: CALL_OW 251
63629: ST_TO_ADDR
// d := GetDir ( building ) ;
63630: LD_ADDR_VAR 0 8
63634: PUSH
63635: LD_VAR 0 2
63639: PPUSH
63640: CALL_OW 254
63644: ST_TO_ADDR
// r := 4 ;
63645: LD_ADDR_VAR 0 9
63649: PUSH
63650: LD_INT 4
63652: ST_TO_ADDR
// for i := 1 to 5 do
63653: LD_ADDR_VAR 0 10
63657: PUSH
63658: DOUBLE
63659: LD_INT 1
63661: DEC
63662: ST_TO_ADDR
63663: LD_INT 5
63665: PUSH
63666: FOR_TO
63667: IFFALSE 63824
// begin _x := ShiftX ( x , d , r + i ) ;
63669: LD_ADDR_VAR 0 5
63673: PUSH
63674: LD_VAR 0 4
63678: PPUSH
63679: LD_VAR 0 8
63683: PPUSH
63684: LD_VAR 0 9
63688: PUSH
63689: LD_VAR 0 10
63693: PLUS
63694: PPUSH
63695: CALL_OW 272
63699: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63700: LD_ADDR_VAR 0 7
63704: PUSH
63705: LD_VAR 0 6
63709: PPUSH
63710: LD_VAR 0 8
63714: PPUSH
63715: LD_VAR 0 9
63719: PUSH
63720: LD_VAR 0 10
63724: PLUS
63725: PPUSH
63726: CALL_OW 273
63730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63731: LD_VAR 0 5
63735: PPUSH
63736: LD_VAR 0 7
63740: PPUSH
63741: CALL_OW 488
63745: PUSH
63746: LD_VAR 0 5
63750: PPUSH
63751: LD_VAR 0 7
63755: PPUSH
63756: CALL_OW 428
63760: PPUSH
63761: CALL_OW 247
63765: PUSH
63766: LD_INT 3
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: IN
63776: NOT
63777: AND
63778: IFFALSE 63822
// begin ComMoveXY ( unit , _x , _y ) ;
63780: LD_VAR 0 1
63784: PPUSH
63785: LD_VAR 0 5
63789: PPUSH
63790: LD_VAR 0 7
63794: PPUSH
63795: CALL_OW 111
// result := [ _x , _y ] ;
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: LD_VAR 0 5
63808: PUSH
63809: LD_VAR 0 7
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: ST_TO_ADDR
// exit ;
63818: POP
63819: POP
63820: GO 63826
// end ; end ;
63822: GO 63666
63824: POP
63825: POP
// end ;
63826: LD_VAR 0 3
63830: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63831: LD_INT 0
63833: PPUSH
63834: PPUSH
63835: PPUSH
// result := 0 ;
63836: LD_ADDR_VAR 0 3
63840: PUSH
63841: LD_INT 0
63843: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63844: LD_VAR 0 1
63848: PUSH
63849: LD_INT 0
63851: LESS
63852: PUSH
63853: LD_VAR 0 1
63857: PUSH
63858: LD_INT 8
63860: GREATER
63861: OR
63862: PUSH
63863: LD_VAR 0 2
63867: PUSH
63868: LD_INT 0
63870: LESS
63871: OR
63872: PUSH
63873: LD_VAR 0 2
63877: PUSH
63878: LD_INT 8
63880: GREATER
63881: OR
63882: IFFALSE 63886
// exit ;
63884: GO 63961
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63886: LD_ADDR_VAR 0 4
63890: PUSH
63891: LD_INT 22
63893: PUSH
63894: LD_VAR 0 2
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PPUSH
63903: CALL_OW 69
63907: PUSH
63908: FOR_IN
63909: IFFALSE 63959
// begin un := UnitShoot ( i ) ;
63911: LD_ADDR_VAR 0 5
63915: PUSH
63916: LD_VAR 0 4
63920: PPUSH
63921: CALL_OW 504
63925: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63926: LD_VAR 0 5
63930: PPUSH
63931: CALL_OW 255
63935: PUSH
63936: LD_VAR 0 1
63940: EQUAL
63941: IFFALSE 63957
// begin result := un ;
63943: LD_ADDR_VAR 0 3
63947: PUSH
63948: LD_VAR 0 5
63952: ST_TO_ADDR
// exit ;
63953: POP
63954: POP
63955: GO 63961
// end ; end ;
63957: GO 63908
63959: POP
63960: POP
// end ;
63961: LD_VAR 0 3
63965: RET
// export function GetCargoBay ( units ) ; begin
63966: LD_INT 0
63968: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63969: LD_ADDR_VAR 0 2
63973: PUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: LD_INT 2
63981: PUSH
63982: LD_INT 34
63984: PUSH
63985: LD_INT 12
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 34
63994: PUSH
63995: LD_INT 51
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 34
64004: PUSH
64005: LD_INT 32
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 34
64014: PUSH
64015: LD_INT 89
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: PPUSH
64029: CALL_OW 72
64033: ST_TO_ADDR
// end ;
64034: LD_VAR 0 2
64038: RET
// export function Negate ( value ) ; begin
64039: LD_INT 0
64041: PPUSH
// result := not value ;
64042: LD_ADDR_VAR 0 2
64046: PUSH
64047: LD_VAR 0 1
64051: NOT
64052: ST_TO_ADDR
// end ;
64053: LD_VAR 0 2
64057: RET
// export function Inc ( value ) ; begin
64058: LD_INT 0
64060: PPUSH
// result := value + 1 ;
64061: LD_ADDR_VAR 0 2
64065: PUSH
64066: LD_VAR 0 1
64070: PUSH
64071: LD_INT 1
64073: PLUS
64074: ST_TO_ADDR
// end ;
64075: LD_VAR 0 2
64079: RET
// export function Dec ( value ) ; begin
64080: LD_INT 0
64082: PPUSH
// result := value - 1 ;
64083: LD_ADDR_VAR 0 2
64087: PUSH
64088: LD_VAR 0 1
64092: PUSH
64093: LD_INT 1
64095: MINUS
64096: ST_TO_ADDR
// end ;
64097: LD_VAR 0 2
64101: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64102: LD_INT 0
64104: PPUSH
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
64111: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64112: LD_VAR 0 1
64116: PPUSH
64117: LD_VAR 0 2
64121: PPUSH
64122: CALL_OW 488
64126: NOT
64127: PUSH
64128: LD_VAR 0 3
64132: PPUSH
64133: LD_VAR 0 4
64137: PPUSH
64138: CALL_OW 488
64142: NOT
64143: OR
64144: IFFALSE 64157
// begin result := - 1 ;
64146: LD_ADDR_VAR 0 5
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: ST_TO_ADDR
// exit ;
64155: GO 64392
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64157: LD_ADDR_VAR 0 12
64161: PUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_VAR 0 2
64171: PPUSH
64172: LD_VAR 0 3
64176: PPUSH
64177: LD_VAR 0 4
64181: PPUSH
64182: CALL 63242 0 4
64186: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64187: LD_ADDR_VAR 0 11
64191: PUSH
64192: LD_VAR 0 1
64196: PPUSH
64197: LD_VAR 0 2
64201: PPUSH
64202: LD_VAR 0 12
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PPUSH
64211: LD_VAR 0 12
64215: PUSH
64216: LD_INT 2
64218: ARRAY
64219: PPUSH
64220: CALL_OW 298
64224: ST_TO_ADDR
// distance := 9999 ;
64225: LD_ADDR_VAR 0 10
64229: PUSH
64230: LD_INT 9999
64232: ST_TO_ADDR
// for i := 0 to 5 do
64233: LD_ADDR_VAR 0 6
64237: PUSH
64238: DOUBLE
64239: LD_INT 0
64241: DEC
64242: ST_TO_ADDR
64243: LD_INT 5
64245: PUSH
64246: FOR_TO
64247: IFFALSE 64390
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64249: LD_ADDR_VAR 0 7
64253: PUSH
64254: LD_VAR 0 1
64258: PPUSH
64259: LD_VAR 0 6
64263: PPUSH
64264: LD_VAR 0 11
64268: PPUSH
64269: CALL_OW 272
64273: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64274: LD_ADDR_VAR 0 8
64278: PUSH
64279: LD_VAR 0 2
64283: PPUSH
64284: LD_VAR 0 6
64288: PPUSH
64289: LD_VAR 0 11
64293: PPUSH
64294: CALL_OW 273
64298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64299: LD_VAR 0 7
64303: PPUSH
64304: LD_VAR 0 8
64308: PPUSH
64309: CALL_OW 488
64313: NOT
64314: IFFALSE 64318
// continue ;
64316: GO 64246
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64318: LD_ADDR_VAR 0 9
64322: PUSH
64323: LD_VAR 0 12
64327: PUSH
64328: LD_INT 1
64330: ARRAY
64331: PPUSH
64332: LD_VAR 0 12
64336: PUSH
64337: LD_INT 2
64339: ARRAY
64340: PPUSH
64341: LD_VAR 0 7
64345: PPUSH
64346: LD_VAR 0 8
64350: PPUSH
64351: CALL_OW 298
64355: ST_TO_ADDR
// if tmp < distance then
64356: LD_VAR 0 9
64360: PUSH
64361: LD_VAR 0 10
64365: LESS
64366: IFFALSE 64388
// begin result := i ;
64368: LD_ADDR_VAR 0 5
64372: PUSH
64373: LD_VAR 0 6
64377: ST_TO_ADDR
// distance := tmp ;
64378: LD_ADDR_VAR 0 10
64382: PUSH
64383: LD_VAR 0 9
64387: ST_TO_ADDR
// end ; end ;
64388: GO 64246
64390: POP
64391: POP
// end ;
64392: LD_VAR 0 5
64396: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64397: LD_INT 0
64399: PPUSH
64400: PPUSH
// if not driver or not IsInUnit ( driver ) then
64401: LD_VAR 0 1
64405: NOT
64406: PUSH
64407: LD_VAR 0 1
64411: PPUSH
64412: CALL_OW 310
64416: NOT
64417: OR
64418: IFFALSE 64422
// exit ;
64420: GO 64512
// vehicle := IsInUnit ( driver ) ;
64422: LD_ADDR_VAR 0 3
64426: PUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 310
64436: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64437: LD_VAR 0 1
64441: PPUSH
64442: LD_STRING \
64444: PUSH
64445: LD_INT 0
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: PUSH
64472: LD_STRING E
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_VAR 0 3
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PPUSH
64508: CALL_OW 446
// end ;
64512: LD_VAR 0 2
64516: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64517: LD_INT 0
64519: PPUSH
64520: PPUSH
// if not driver or not IsInUnit ( driver ) then
64521: LD_VAR 0 1
64525: NOT
64526: PUSH
64527: LD_VAR 0 1
64531: PPUSH
64532: CALL_OW 310
64536: NOT
64537: OR
64538: IFFALSE 64542
// exit ;
64540: GO 64632
// vehicle := IsInUnit ( driver ) ;
64542: LD_ADDR_VAR 0 3
64546: PUSH
64547: LD_VAR 0 1
64551: PPUSH
64552: CALL_OW 310
64556: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64557: LD_VAR 0 1
64561: PPUSH
64562: LD_STRING \
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 0
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: PUSH
64592: LD_STRING E
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_VAR 0 3
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PPUSH
64628: CALL_OW 447
// end ;
64632: LD_VAR 0 2
64636: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64637: LD_INT 0
64639: PPUSH
64640: PPUSH
64641: PPUSH
// tmp := [ ] ;
64642: LD_ADDR_VAR 0 5
64646: PUSH
64647: EMPTY
64648: ST_TO_ADDR
// for i in units do
64649: LD_ADDR_VAR 0 4
64653: PUSH
64654: LD_VAR 0 1
64658: PUSH
64659: FOR_IN
64660: IFFALSE 64698
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64662: LD_ADDR_VAR 0 5
64666: PUSH
64667: LD_VAR 0 5
64671: PPUSH
64672: LD_VAR 0 5
64676: PUSH
64677: LD_INT 1
64679: PLUS
64680: PPUSH
64681: LD_VAR 0 4
64685: PPUSH
64686: CALL_OW 256
64690: PPUSH
64691: CALL_OW 2
64695: ST_TO_ADDR
64696: GO 64659
64698: POP
64699: POP
// if not tmp then
64700: LD_VAR 0 5
64704: NOT
64705: IFFALSE 64709
// exit ;
64707: GO 64757
// if asc then
64709: LD_VAR 0 2
64713: IFFALSE 64737
// result := SortListByListAsc ( units , tmp ) else
64715: LD_ADDR_VAR 0 3
64719: PUSH
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_VAR 0 5
64729: PPUSH
64730: CALL_OW 76
64734: ST_TO_ADDR
64735: GO 64757
// result := SortListByListDesc ( units , tmp ) ;
64737: LD_ADDR_VAR 0 3
64741: PUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: LD_VAR 0 5
64751: PPUSH
64752: CALL_OW 77
64756: ST_TO_ADDR
// end ;
64757: LD_VAR 0 3
64761: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64762: LD_INT 0
64764: PPUSH
64765: PPUSH
// task := GetTaskList ( mech ) ;
64766: LD_ADDR_VAR 0 4
64770: PUSH
64771: LD_VAR 0 1
64775: PPUSH
64776: CALL_OW 437
64780: ST_TO_ADDR
// if not task then
64781: LD_VAR 0 4
64785: NOT
64786: IFFALSE 64790
// exit ;
64788: GO 64832
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64790: LD_ADDR_VAR 0 3
64794: PUSH
64795: LD_VAR 0 4
64799: PUSH
64800: LD_INT 1
64802: ARRAY
64803: PUSH
64804: LD_INT 1
64806: ARRAY
64807: PUSH
64808: LD_STRING r
64810: EQUAL
64811: PUSH
64812: LD_VAR 0 4
64816: PUSH
64817: LD_INT 1
64819: ARRAY
64820: PUSH
64821: LD_INT 4
64823: ARRAY
64824: PUSH
64825: LD_VAR 0 2
64829: EQUAL
64830: AND
64831: ST_TO_ADDR
// end ;
64832: LD_VAR 0 3
64836: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64837: LD_INT 0
64839: PPUSH
// SetDir ( unit , d ) ;
64840: LD_VAR 0 1
64844: PPUSH
64845: LD_VAR 0 4
64849: PPUSH
64850: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64854: LD_VAR 0 1
64858: PPUSH
64859: LD_VAR 0 2
64863: PPUSH
64864: LD_VAR 0 3
64868: PPUSH
64869: LD_VAR 0 5
64873: PPUSH
64874: CALL_OW 48
// end ;
64878: LD_VAR 0 6
64882: RET
// export function ToNaturalNumber ( number ) ; begin
64883: LD_INT 0
64885: PPUSH
// result := number div 1 ;
64886: LD_ADDR_VAR 0 2
64890: PUSH
64891: LD_VAR 0 1
64895: PUSH
64896: LD_INT 1
64898: DIV
64899: ST_TO_ADDR
// if number < 0 then
64900: LD_VAR 0 1
64904: PUSH
64905: LD_INT 0
64907: LESS
64908: IFFALSE 64918
// result := 0 ;
64910: LD_ADDR_VAR 0 2
64914: PUSH
64915: LD_INT 0
64917: ST_TO_ADDR
// end ;
64918: LD_VAR 0 2
64922: RET
// export function SortByClass ( units , class ) ; var un ; begin
64923: LD_INT 0
64925: PPUSH
64926: PPUSH
// if not units or not class then
64927: LD_VAR 0 1
64931: NOT
64932: PUSH
64933: LD_VAR 0 2
64937: NOT
64938: OR
64939: IFFALSE 64943
// exit ;
64941: GO 65038
// result := [ ] ;
64943: LD_ADDR_VAR 0 3
64947: PUSH
64948: EMPTY
64949: ST_TO_ADDR
// for un in units do
64950: LD_ADDR_VAR 0 4
64954: PUSH
64955: LD_VAR 0 1
64959: PUSH
64960: FOR_IN
64961: IFFALSE 65036
// if GetClass ( un ) = class then
64963: LD_VAR 0 4
64967: PPUSH
64968: CALL_OW 257
64972: PUSH
64973: LD_VAR 0 2
64977: EQUAL
64978: IFFALSE 65005
// result := Insert ( result , 1 , un ) else
64980: LD_ADDR_VAR 0 3
64984: PUSH
64985: LD_VAR 0 3
64989: PPUSH
64990: LD_INT 1
64992: PPUSH
64993: LD_VAR 0 4
64997: PPUSH
64998: CALL_OW 2
65002: ST_TO_ADDR
65003: GO 65034
// result := Replace ( result , result + 1 , un ) ;
65005: LD_ADDR_VAR 0 3
65009: PUSH
65010: LD_VAR 0 3
65014: PPUSH
65015: LD_VAR 0 3
65019: PUSH
65020: LD_INT 1
65022: PLUS
65023: PPUSH
65024: LD_VAR 0 4
65028: PPUSH
65029: CALL_OW 1
65033: ST_TO_ADDR
65034: GO 64960
65036: POP
65037: POP
// end ;
65038: LD_VAR 0 3
65042: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65043: LD_INT 0
65045: PPUSH
65046: PPUSH
65047: PPUSH
65048: PPUSH
65049: PPUSH
65050: PPUSH
65051: PPUSH
// result := [ ] ;
65052: LD_ADDR_VAR 0 4
65056: PUSH
65057: EMPTY
65058: ST_TO_ADDR
// if x - r < 0 then
65059: LD_VAR 0 1
65063: PUSH
65064: LD_VAR 0 3
65068: MINUS
65069: PUSH
65070: LD_INT 0
65072: LESS
65073: IFFALSE 65085
// min_x := 0 else
65075: LD_ADDR_VAR 0 8
65079: PUSH
65080: LD_INT 0
65082: ST_TO_ADDR
65083: GO 65101
// min_x := x - r ;
65085: LD_ADDR_VAR 0 8
65089: PUSH
65090: LD_VAR 0 1
65094: PUSH
65095: LD_VAR 0 3
65099: MINUS
65100: ST_TO_ADDR
// if y - r < 0 then
65101: LD_VAR 0 2
65105: PUSH
65106: LD_VAR 0 3
65110: MINUS
65111: PUSH
65112: LD_INT 0
65114: LESS
65115: IFFALSE 65127
// min_y := 0 else
65117: LD_ADDR_VAR 0 7
65121: PUSH
65122: LD_INT 0
65124: ST_TO_ADDR
65125: GO 65143
// min_y := y - r ;
65127: LD_ADDR_VAR 0 7
65131: PUSH
65132: LD_VAR 0 2
65136: PUSH
65137: LD_VAR 0 3
65141: MINUS
65142: ST_TO_ADDR
// max_x := x + r ;
65143: LD_ADDR_VAR 0 9
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_VAR 0 3
65157: PLUS
65158: ST_TO_ADDR
// max_y := y + r ;
65159: LD_ADDR_VAR 0 10
65163: PUSH
65164: LD_VAR 0 2
65168: PUSH
65169: LD_VAR 0 3
65173: PLUS
65174: ST_TO_ADDR
// for _x = min_x to max_x do
65175: LD_ADDR_VAR 0 5
65179: PUSH
65180: DOUBLE
65181: LD_VAR 0 8
65185: DEC
65186: ST_TO_ADDR
65187: LD_VAR 0 9
65191: PUSH
65192: FOR_TO
65193: IFFALSE 65294
// for _y = min_y to max_y do
65195: LD_ADDR_VAR 0 6
65199: PUSH
65200: DOUBLE
65201: LD_VAR 0 7
65205: DEC
65206: ST_TO_ADDR
65207: LD_VAR 0 10
65211: PUSH
65212: FOR_TO
65213: IFFALSE 65290
// begin if not ValidHex ( _x , _y ) then
65215: LD_VAR 0 5
65219: PPUSH
65220: LD_VAR 0 6
65224: PPUSH
65225: CALL_OW 488
65229: NOT
65230: IFFALSE 65234
// continue ;
65232: GO 65212
// if GetResourceTypeXY ( _x , _y ) then
65234: LD_VAR 0 5
65238: PPUSH
65239: LD_VAR 0 6
65243: PPUSH
65244: CALL_OW 283
65248: IFFALSE 65288
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65250: LD_ADDR_VAR 0 4
65254: PUSH
65255: LD_VAR 0 4
65259: PPUSH
65260: LD_VAR 0 4
65264: PUSH
65265: LD_INT 1
65267: PLUS
65268: PPUSH
65269: LD_VAR 0 5
65273: PUSH
65274: LD_VAR 0 6
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PPUSH
65283: CALL_OW 1
65287: ST_TO_ADDR
// end ;
65288: GO 65212
65290: POP
65291: POP
65292: GO 65192
65294: POP
65295: POP
// end ;
65296: LD_VAR 0 4
65300: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65301: LD_INT 0
65303: PPUSH
65304: PPUSH
65305: PPUSH
65306: PPUSH
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
// if not units then
65311: LD_VAR 0 1
65315: NOT
65316: IFFALSE 65320
// exit ;
65318: GO 65844
// result := UnitFilter ( units , [ f_ok ] ) ;
65320: LD_ADDR_VAR 0 3
65324: PUSH
65325: LD_VAR 0 1
65329: PPUSH
65330: LD_INT 50
65332: PUSH
65333: EMPTY
65334: LIST
65335: PPUSH
65336: CALL_OW 72
65340: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65341: LD_ADDR_VAR 0 8
65345: PUSH
65346: LD_VAR 0 1
65350: PUSH
65351: LD_INT 1
65353: ARRAY
65354: PPUSH
65355: CALL_OW 255
65359: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65360: LD_ADDR_VAR 0 10
65364: PUSH
65365: LD_INT 29
65367: PUSH
65368: LD_INT 91
65370: PUSH
65371: LD_INT 49
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// if not result then
65379: LD_VAR 0 3
65383: NOT
65384: IFFALSE 65388
// exit ;
65386: GO 65844
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65388: LD_ADDR_VAR 0 5
65392: PUSH
65393: LD_INT 81
65395: PUSH
65396: LD_VAR 0 8
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PPUSH
65405: CALL_OW 69
65409: ST_TO_ADDR
// for i in result do
65410: LD_ADDR_VAR 0 4
65414: PUSH
65415: LD_VAR 0 3
65419: PUSH
65420: FOR_IN
65421: IFFALSE 65842
// begin tag := GetTag ( i ) + 1 ;
65423: LD_ADDR_VAR 0 9
65427: PUSH
65428: LD_VAR 0 4
65432: PPUSH
65433: CALL_OW 110
65437: PUSH
65438: LD_INT 1
65440: PLUS
65441: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65442: LD_ADDR_VAR 0 7
65446: PUSH
65447: LD_VAR 0 4
65451: PPUSH
65452: CALL_OW 250
65456: PPUSH
65457: LD_VAR 0 4
65461: PPUSH
65462: CALL_OW 251
65466: PPUSH
65467: LD_INT 6
65469: PPUSH
65470: CALL 65043 0 3
65474: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65475: LD_VAR 0 4
65479: PPUSH
65480: CALL_OW 247
65484: PUSH
65485: LD_INT 2
65487: EQUAL
65488: PUSH
65489: LD_VAR 0 7
65493: AND
65494: PUSH
65495: LD_VAR 0 4
65499: PPUSH
65500: CALL_OW 264
65504: PUSH
65505: LD_VAR 0 10
65509: IN
65510: NOT
65511: AND
65512: IFFALSE 65551
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65514: LD_VAR 0 4
65518: PPUSH
65519: LD_VAR 0 7
65523: PUSH
65524: LD_INT 1
65526: ARRAY
65527: PUSH
65528: LD_INT 1
65530: ARRAY
65531: PPUSH
65532: LD_VAR 0 7
65536: PUSH
65537: LD_INT 1
65539: ARRAY
65540: PUSH
65541: LD_INT 2
65543: ARRAY
65544: PPUSH
65545: CALL_OW 116
65549: GO 65840
// if path > tag then
65551: LD_VAR 0 2
65555: PUSH
65556: LD_VAR 0 9
65560: GREATER
65561: IFFALSE 65769
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65563: LD_ADDR_VAR 0 6
65567: PUSH
65568: LD_VAR 0 5
65572: PPUSH
65573: LD_INT 91
65575: PUSH
65576: LD_VAR 0 4
65580: PUSH
65581: LD_INT 8
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: PPUSH
65589: CALL_OW 72
65593: ST_TO_ADDR
// if nearEnemy then
65594: LD_VAR 0 6
65598: IFFALSE 65667
// begin if GetWeapon ( i ) = ru_time_lapser then
65600: LD_VAR 0 4
65604: PPUSH
65605: CALL_OW 264
65609: PUSH
65610: LD_INT 49
65612: EQUAL
65613: IFFALSE 65641
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65615: LD_VAR 0 4
65619: PPUSH
65620: LD_VAR 0 6
65624: PPUSH
65625: LD_VAR 0 4
65629: PPUSH
65630: CALL_OW 74
65634: PPUSH
65635: CALL_OW 112
65639: GO 65665
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65641: LD_VAR 0 4
65645: PPUSH
65646: LD_VAR 0 6
65650: PPUSH
65651: LD_VAR 0 4
65655: PPUSH
65656: CALL_OW 74
65660: PPUSH
65661: CALL 66769 0 2
// end else
65665: GO 65767
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65667: LD_VAR 0 4
65671: PPUSH
65672: LD_VAR 0 2
65676: PUSH
65677: LD_VAR 0 9
65681: ARRAY
65682: PUSH
65683: LD_INT 1
65685: ARRAY
65686: PPUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_VAR 0 9
65696: ARRAY
65697: PUSH
65698: LD_INT 2
65700: ARRAY
65701: PPUSH
65702: CALL_OW 297
65706: PUSH
65707: LD_INT 6
65709: GREATER
65710: IFFALSE 65753
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65712: LD_VAR 0 4
65716: PPUSH
65717: LD_VAR 0 2
65721: PUSH
65722: LD_VAR 0 9
65726: ARRAY
65727: PUSH
65728: LD_INT 1
65730: ARRAY
65731: PPUSH
65732: LD_VAR 0 2
65736: PUSH
65737: LD_VAR 0 9
65741: ARRAY
65742: PUSH
65743: LD_INT 2
65745: ARRAY
65746: PPUSH
65747: CALL_OW 114
65751: GO 65767
// SetTag ( i , tag ) ;
65753: LD_VAR 0 4
65757: PPUSH
65758: LD_VAR 0 9
65762: PPUSH
65763: CALL_OW 109
// end else
65767: GO 65840
// if enemy then
65769: LD_VAR 0 5
65773: IFFALSE 65840
// begin if GetWeapon ( i ) = ru_time_lapser then
65775: LD_VAR 0 4
65779: PPUSH
65780: CALL_OW 264
65784: PUSH
65785: LD_INT 49
65787: EQUAL
65788: IFFALSE 65816
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65790: LD_VAR 0 4
65794: PPUSH
65795: LD_VAR 0 5
65799: PPUSH
65800: LD_VAR 0 4
65804: PPUSH
65805: CALL_OW 74
65809: PPUSH
65810: CALL_OW 112
65814: GO 65840
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65816: LD_VAR 0 4
65820: PPUSH
65821: LD_VAR 0 5
65825: PPUSH
65826: LD_VAR 0 4
65830: PPUSH
65831: CALL_OW 74
65835: PPUSH
65836: CALL 66769 0 2
// end ; end ;
65840: GO 65420
65842: POP
65843: POP
// end ;
65844: LD_VAR 0 3
65848: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65849: LD_INT 0
65851: PPUSH
65852: PPUSH
65853: PPUSH
// if not unit or IsInUnit ( unit ) then
65854: LD_VAR 0 1
65858: NOT
65859: PUSH
65860: LD_VAR 0 1
65864: PPUSH
65865: CALL_OW 310
65869: OR
65870: IFFALSE 65874
// exit ;
65872: GO 65965
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65874: LD_ADDR_VAR 0 4
65878: PUSH
65879: LD_VAR 0 1
65883: PPUSH
65884: CALL_OW 250
65888: PPUSH
65889: LD_VAR 0 2
65893: PPUSH
65894: LD_INT 1
65896: PPUSH
65897: CALL_OW 272
65901: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65902: LD_ADDR_VAR 0 5
65906: PUSH
65907: LD_VAR 0 1
65911: PPUSH
65912: CALL_OW 251
65916: PPUSH
65917: LD_VAR 0 2
65921: PPUSH
65922: LD_INT 1
65924: PPUSH
65925: CALL_OW 273
65929: ST_TO_ADDR
// if ValidHex ( x , y ) then
65930: LD_VAR 0 4
65934: PPUSH
65935: LD_VAR 0 5
65939: PPUSH
65940: CALL_OW 488
65944: IFFALSE 65965
// ComTurnXY ( unit , x , y ) ;
65946: LD_VAR 0 1
65950: PPUSH
65951: LD_VAR 0 4
65955: PPUSH
65956: LD_VAR 0 5
65960: PPUSH
65961: CALL_OW 118
// end ;
65965: LD_VAR 0 3
65969: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65970: LD_INT 0
65972: PPUSH
65973: PPUSH
// result := false ;
65974: LD_ADDR_VAR 0 3
65978: PUSH
65979: LD_INT 0
65981: ST_TO_ADDR
// if not units then
65982: LD_VAR 0 2
65986: NOT
65987: IFFALSE 65991
// exit ;
65989: GO 66036
// for i in units do
65991: LD_ADDR_VAR 0 4
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: FOR_IN
66002: IFFALSE 66034
// if See ( side , i ) then
66004: LD_VAR 0 1
66008: PPUSH
66009: LD_VAR 0 4
66013: PPUSH
66014: CALL_OW 292
66018: IFFALSE 66032
// begin result := true ;
66020: LD_ADDR_VAR 0 3
66024: PUSH
66025: LD_INT 1
66027: ST_TO_ADDR
// exit ;
66028: POP
66029: POP
66030: GO 66036
// end ;
66032: GO 66001
66034: POP
66035: POP
// end ;
66036: LD_VAR 0 3
66040: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66041: LD_INT 0
66043: PPUSH
66044: PPUSH
66045: PPUSH
66046: PPUSH
// if not unit or not points then
66047: LD_VAR 0 1
66051: NOT
66052: PUSH
66053: LD_VAR 0 2
66057: NOT
66058: OR
66059: IFFALSE 66063
// exit ;
66061: GO 66153
// dist := 99999 ;
66063: LD_ADDR_VAR 0 5
66067: PUSH
66068: LD_INT 99999
66070: ST_TO_ADDR
// for i in points do
66071: LD_ADDR_VAR 0 4
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: FOR_IN
66082: IFFALSE 66151
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66084: LD_ADDR_VAR 0 6
66088: PUSH
66089: LD_VAR 0 1
66093: PPUSH
66094: LD_VAR 0 4
66098: PUSH
66099: LD_INT 1
66101: ARRAY
66102: PPUSH
66103: LD_VAR 0 4
66107: PUSH
66108: LD_INT 2
66110: ARRAY
66111: PPUSH
66112: CALL_OW 297
66116: ST_TO_ADDR
// if tmpDist < dist then
66117: LD_VAR 0 6
66121: PUSH
66122: LD_VAR 0 5
66126: LESS
66127: IFFALSE 66149
// begin result := i ;
66129: LD_ADDR_VAR 0 3
66133: PUSH
66134: LD_VAR 0 4
66138: ST_TO_ADDR
// dist := tmpDist ;
66139: LD_ADDR_VAR 0 5
66143: PUSH
66144: LD_VAR 0 6
66148: ST_TO_ADDR
// end ; end ;
66149: GO 66081
66151: POP
66152: POP
// end ;
66153: LD_VAR 0 3
66157: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66158: LD_INT 0
66160: PPUSH
// uc_side := side ;
66161: LD_ADDR_OWVAR 20
66165: PUSH
66166: LD_VAR 0 1
66170: ST_TO_ADDR
// uc_nation := 3 ;
66171: LD_ADDR_OWVAR 21
66175: PUSH
66176: LD_INT 3
66178: ST_TO_ADDR
// vc_chassis := 25 ;
66179: LD_ADDR_OWVAR 37
66183: PUSH
66184: LD_INT 25
66186: ST_TO_ADDR
// vc_engine := engine_siberite ;
66187: LD_ADDR_OWVAR 39
66191: PUSH
66192: LD_INT 3
66194: ST_TO_ADDR
// vc_control := control_computer ;
66195: LD_ADDR_OWVAR 38
66199: PUSH
66200: LD_INT 3
66202: ST_TO_ADDR
// vc_weapon := 59 ;
66203: LD_ADDR_OWVAR 40
66207: PUSH
66208: LD_INT 59
66210: ST_TO_ADDR
// result := CreateVehicle ;
66211: LD_ADDR_VAR 0 5
66215: PUSH
66216: CALL_OW 45
66220: ST_TO_ADDR
// SetDir ( result , d ) ;
66221: LD_VAR 0 5
66225: PPUSH
66226: LD_VAR 0 4
66230: PPUSH
66231: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66235: LD_VAR 0 5
66239: PPUSH
66240: LD_VAR 0 2
66244: PPUSH
66245: LD_VAR 0 3
66249: PPUSH
66250: LD_INT 0
66252: PPUSH
66253: CALL_OW 48
// end ;
66257: LD_VAR 0 5
66261: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66262: LD_INT 0
66264: PPUSH
66265: PPUSH
66266: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66267: LD_ADDR_VAR 0 2
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: LD_INT 0
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66290: LD_VAR 0 1
66294: NOT
66295: PUSH
66296: LD_VAR 0 1
66300: PPUSH
66301: CALL_OW 264
66305: PUSH
66306: LD_INT 12
66308: PUSH
66309: LD_INT 51
66311: PUSH
66312: LD_INT 32
66314: PUSH
66315: LD_INT 89
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: IN
66324: NOT
66325: OR
66326: IFFALSE 66330
// exit ;
66328: GO 66428
// for i := 1 to 3 do
66330: LD_ADDR_VAR 0 3
66334: PUSH
66335: DOUBLE
66336: LD_INT 1
66338: DEC
66339: ST_TO_ADDR
66340: LD_INT 3
66342: PUSH
66343: FOR_TO
66344: IFFALSE 66426
// begin tmp := GetCargo ( cargo , i ) ;
66346: LD_ADDR_VAR 0 4
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_VAR 0 3
66360: PPUSH
66361: CALL_OW 289
66365: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66366: LD_ADDR_VAR 0 2
66370: PUSH
66371: LD_VAR 0 2
66375: PPUSH
66376: LD_VAR 0 3
66380: PPUSH
66381: LD_VAR 0 4
66385: PPUSH
66386: CALL_OW 1
66390: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66391: LD_ADDR_VAR 0 2
66395: PUSH
66396: LD_VAR 0 2
66400: PPUSH
66401: LD_INT 4
66403: PPUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 4
66411: ARRAY
66412: PUSH
66413: LD_VAR 0 4
66417: PLUS
66418: PPUSH
66419: CALL_OW 1
66423: ST_TO_ADDR
// end ;
66424: GO 66343
66426: POP
66427: POP
// end ;
66428: LD_VAR 0 2
66432: RET
// export function Length ( array ) ; begin
66433: LD_INT 0
66435: PPUSH
// result := array + 0 ;
66436: LD_ADDR_VAR 0 2
66440: PUSH
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 0
66448: PLUS
66449: ST_TO_ADDR
// end ;
66450: LD_VAR 0 2
66454: RET
// export function PrepareArray ( array ) ; begin
66455: LD_INT 0
66457: PPUSH
// result := array diff 0 ;
66458: LD_ADDR_VAR 0 2
66462: PUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_INT 0
66470: DIFF
66471: ST_TO_ADDR
// if not result [ 1 ] then
66472: LD_VAR 0 2
66476: PUSH
66477: LD_INT 1
66479: ARRAY
66480: NOT
66481: IFFALSE 66501
// result := Delete ( result , 1 ) ;
66483: LD_ADDR_VAR 0 2
66487: PUSH
66488: LD_VAR 0 2
66492: PPUSH
66493: LD_INT 1
66495: PPUSH
66496: CALL_OW 3
66500: ST_TO_ADDR
// end ;
66501: LD_VAR 0 2
66505: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66506: LD_INT 0
66508: PPUSH
66509: PPUSH
66510: PPUSH
66511: PPUSH
// sibRocketRange := 25 ;
66512: LD_ADDR_VAR 0 6
66516: PUSH
66517: LD_INT 25
66519: ST_TO_ADDR
// result := false ;
66520: LD_ADDR_VAR 0 4
66524: PUSH
66525: LD_INT 0
66527: ST_TO_ADDR
// for i := 0 to 5 do
66528: LD_ADDR_VAR 0 5
66532: PUSH
66533: DOUBLE
66534: LD_INT 0
66536: DEC
66537: ST_TO_ADDR
66538: LD_INT 5
66540: PUSH
66541: FOR_TO
66542: IFFALSE 66609
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66544: LD_VAR 0 1
66548: PPUSH
66549: LD_VAR 0 5
66553: PPUSH
66554: LD_VAR 0 6
66558: PPUSH
66559: CALL_OW 272
66563: PPUSH
66564: LD_VAR 0 2
66568: PPUSH
66569: LD_VAR 0 5
66573: PPUSH
66574: LD_VAR 0 6
66578: PPUSH
66579: CALL_OW 273
66583: PPUSH
66584: LD_VAR 0 3
66588: PPUSH
66589: CALL_OW 309
66593: IFFALSE 66607
// begin result := true ;
66595: LD_ADDR_VAR 0 4
66599: PUSH
66600: LD_INT 1
66602: ST_TO_ADDR
// exit ;
66603: POP
66604: POP
66605: GO 66611
// end ;
66607: GO 66541
66609: POP
66610: POP
// end ;
66611: LD_VAR 0 4
66615: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66616: LD_INT 0
66618: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66619: LD_VAR 0 1
66623: PPUSH
66624: LD_VAR 0 2
66628: PPUSH
66629: LD_INT 0
66631: PPUSH
66632: LD_INT 0
66634: PPUSH
66635: LD_INT 1
66637: PPUSH
66638: LD_INT 0
66640: PPUSH
66641: CALL_OW 587
// end ;
66645: LD_VAR 0 3
66649: RET
// export function CenterOnNow ( unit ) ; begin
66650: LD_INT 0
66652: PPUSH
// result := IsInUnit ( unit ) ;
66653: LD_ADDR_VAR 0 2
66657: PUSH
66658: LD_VAR 0 1
66662: PPUSH
66663: CALL_OW 310
66667: ST_TO_ADDR
// if not result then
66668: LD_VAR 0 2
66672: NOT
66673: IFFALSE 66685
// result := unit ;
66675: LD_ADDR_VAR 0 2
66679: PUSH
66680: LD_VAR 0 1
66684: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 87
// end ;
66694: LD_VAR 0 2
66698: RET
// export function ComMoveHex ( unit , hex ) ; begin
66699: LD_INT 0
66701: PPUSH
// if not hex then
66702: LD_VAR 0 2
66706: NOT
66707: IFFALSE 66711
// exit ;
66709: GO 66764
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66711: LD_VAR 0 2
66715: PUSH
66716: LD_INT 1
66718: ARRAY
66719: PPUSH
66720: LD_VAR 0 2
66724: PUSH
66725: LD_INT 2
66727: ARRAY
66728: PPUSH
66729: CALL_OW 428
66733: IFFALSE 66737
// exit ;
66735: GO 66764
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66737: LD_VAR 0 1
66741: PPUSH
66742: LD_VAR 0 2
66746: PUSH
66747: LD_INT 1
66749: ARRAY
66750: PPUSH
66751: LD_VAR 0 2
66755: PUSH
66756: LD_INT 2
66758: ARRAY
66759: PPUSH
66760: CALL_OW 111
// end ;
66764: LD_VAR 0 3
66768: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66769: LD_INT 0
66771: PPUSH
66772: PPUSH
66773: PPUSH
// if not unit or not enemy then
66774: LD_VAR 0 1
66778: NOT
66779: PUSH
66780: LD_VAR 0 2
66784: NOT
66785: OR
66786: IFFALSE 66790
// exit ;
66788: GO 66914
// x := GetX ( enemy ) ;
66790: LD_ADDR_VAR 0 4
66794: PUSH
66795: LD_VAR 0 2
66799: PPUSH
66800: CALL_OW 250
66804: ST_TO_ADDR
// y := GetY ( enemy ) ;
66805: LD_ADDR_VAR 0 5
66809: PUSH
66810: LD_VAR 0 2
66814: PPUSH
66815: CALL_OW 251
66819: ST_TO_ADDR
// if ValidHex ( x , y ) then
66820: LD_VAR 0 4
66824: PPUSH
66825: LD_VAR 0 5
66829: PPUSH
66830: CALL_OW 488
66834: IFFALSE 66914
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
66836: LD_VAR 0 2
66840: PPUSH
66841: CALL_OW 247
66845: PUSH
66846: LD_INT 3
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: IN
66856: PUSH
66857: LD_VAR 0 1
66861: PPUSH
66862: CALL_OW 255
66866: PPUSH
66867: LD_VAR 0 2
66871: PPUSH
66872: CALL_OW 292
66876: AND
66877: IFFALSE 66895
// ComAttackUnit ( unit , enemy ) else
66879: LD_VAR 0 1
66883: PPUSH
66884: LD_VAR 0 2
66888: PPUSH
66889: CALL_OW 115
66893: GO 66914
// ComAgressiveMove ( unit , x , y ) ;
66895: LD_VAR 0 1
66899: PPUSH
66900: LD_VAR 0 4
66904: PPUSH
66905: LD_VAR 0 5
66909: PPUSH
66910: CALL_OW 114
// end ; end_of_file
66914: LD_VAR 0 3
66918: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66919: LD_VAR 0 1
66923: PUSH
66924: LD_INT 200
66926: DOUBLE
66927: GREATEREQUAL
66928: IFFALSE 66936
66930: LD_INT 299
66932: DOUBLE
66933: LESSEQUAL
66934: IFTRUE 66938
66936: GO 66970
66938: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66939: LD_VAR 0 1
66943: PPUSH
66944: LD_VAR 0 2
66948: PPUSH
66949: LD_VAR 0 3
66953: PPUSH
66954: LD_VAR 0 4
66958: PPUSH
66959: LD_VAR 0 5
66963: PPUSH
66964: CALL 20643 0 5
66968: GO 67047
66970: LD_INT 300
66972: DOUBLE
66973: GREATEREQUAL
66974: IFFALSE 66982
66976: LD_INT 399
66978: DOUBLE
66979: LESSEQUAL
66980: IFTRUE 66984
66982: GO 67046
66984: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66985: LD_VAR 0 1
66989: PPUSH
66990: LD_VAR 0 2
66994: PPUSH
66995: LD_VAR 0 3
66999: PPUSH
67000: LD_VAR 0 4
67004: PPUSH
67005: LD_VAR 0 5
67009: PPUSH
67010: LD_VAR 0 6
67014: PPUSH
67015: LD_VAR 0 7
67019: PPUSH
67020: LD_VAR 0 8
67024: PPUSH
67025: LD_VAR 0 9
67029: PPUSH
67030: LD_VAR 0 10
67034: PPUSH
67035: LD_VAR 0 11
67039: PPUSH
67040: CALL 16968 0 11
67044: GO 67047
67046: POP
// end ;
67047: PPOPN 11
67049: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67050: LD_VAR 0 1
67054: PPUSH
67055: LD_VAR 0 2
67059: PPUSH
67060: LD_VAR 0 3
67064: PPUSH
67065: LD_VAR 0 4
67069: PPUSH
67070: LD_VAR 0 5
67074: PPUSH
67075: CALL 20379 0 5
// end ; end_of_file
67079: PPOPN 5
67081: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67082: LD_VAR 0 1
67086: PPUSH
67087: LD_VAR 0 2
67091: PPUSH
67092: LD_VAR 0 3
67096: PPUSH
67097: LD_VAR 0 4
67101: PPUSH
67102: LD_VAR 0 5
67106: PPUSH
67107: LD_VAR 0 6
67111: PPUSH
67112: CALL 4620 0 6
// end ;
67116: PPOPN 6
67118: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67119: LD_INT 0
67121: PPUSH
// begin if not units then
67122: LD_VAR 0 1
67126: NOT
67127: IFFALSE 67131
// exit ;
67129: GO 67131
// end ;
67131: PPOPN 7
67133: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67134: CALL 4524 0 0
// end ;
67138: PPOPN 1
67140: END
