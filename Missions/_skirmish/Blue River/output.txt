// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4269
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4167
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4036
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: PUSH
3936: LD_INT 63
3938: PPUSH
3939: LD_INT 37
3941: PPUSH
3942: CALL_OW 428
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 30
3954: EQUAL
3955: AND
3956: IFFALSE 3962
// ComitSib ;
3958: CALL 2766 0 0
// if Difficulty > 2 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 2
3969: GREATER
3970: IFFALSE 3998
// begin Wait ( 0 0$25 ) ;
3972: LD_INT 875
3974: PPUSH
3975: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PUSH
3989: LD_INT 4
3991: PPUSH
3992: CALL 1355 0 1
3996: ADD
3997: ST_TO_ADDR
// end ; if attackN > 7 then
3998: LD_EXP 6
4002: PUSH
4003: LD_INT 7
4005: GREATER
4006: IFFALSE 4034
// begin Wait ( 0 0$15 ) ;
4008: LD_INT 525
4010: PPUSH
4011: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL 1355 0 1
4032: ADD
4033: ST_TO_ADDR
// end ; end ; 3 :
4034: GO 4167
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4166
4044: POP
// begin pom := pom ^ Attack ( 1 ) ;
4045: LD_ADDR_EXP 4
4049: PUSH
4050: LD_EXP 4
4054: PUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL 1355 0 1
4062: ADD
4063: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4064: LD_INT 70
4066: PPUSH
4067: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4071: LD_ADDR_EXP 4
4075: PUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL 1355 0 1
4088: ADD
4089: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4090: LD_INT 2100
4092: PPUSH
4093: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4097: LD_ADDR_EXP 4
4101: PUSH
4102: LD_EXP 4
4106: PUSH
4107: LD_INT 3
4109: PPUSH
4110: CALL 1355 0 1
4114: ADD
4115: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4116: LD_ADDR_EXP 4
4120: PUSH
4121: LD_EXP 4
4125: PUSH
4126: LD_INT 5
4128: PPUSH
4129: CALL 1355 0 1
4133: ADD
4134: ST_TO_ADDR
// if attackN > 10 then
4135: LD_EXP 6
4139: PUSH
4140: LD_INT 10
4142: GREATER
4143: IFFALSE 4164
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1355 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ;
4164: GO 4167
4166: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 1
4174: GREATER
4175: PUSH
4176: LD_EXP 6
4180: PUSH
4181: LD_INT 4
4183: MOD
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: AND
4189: IFFALSE 4255
// begin Wait ( 1 1$45 ) ;
4191: LD_INT 3675
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 3
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4217: LD_ADDR_EXP 4
4221: PUSH
4222: LD_EXP 4
4226: PUSH
4227: LD_INT 4
4229: PPUSH
4230: CALL 1355 0 1
4234: ADD
4235: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4236: LD_ADDR_EXP 5
4240: PUSH
4241: LD_EXP 5
4245: PUSH
4246: LD_INT 6
4248: PPUSH
4249: CALL 1355 0 1
4253: ADD
4254: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4255: LD_ADDR_EXP 6
4259: PUSH
4260: LD_EXP 6
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: PPOPN 2
4271: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4272: LD_EXP 6
4276: PUSH
4277: LD_INT 10
4279: PUSH
4280: LD_INT 12
4282: PUSH
4283: LD_INT 14
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_OWVAR 67
4295: ARRAY
4296: GREATEREQUAL
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: PUSH
4313: LD_INT 0
4315: EQUAL
4316: AND
4317: IFFALSE 4360
4319: GO 4321
4321: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4322: LD_EXP 2
4326: PPUSH
4327: LD_STRING DDocEnd
4329: PPUSH
4330: CALL_OW 586
// wait ( 0 0$03 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// Query ( QWin ) ;
4341: LD_STRING QWin
4343: PPUSH
4344: CALL_OW 97
// music_nat := 5 ;
4348: LD_ADDR_OWVAR 71
4352: PUSH
4353: LD_INT 5
4355: ST_TO_ADDR
// YouWin ;
4356: CALL_OW 103
// end ; end_of_file
4360: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4361: LD_VAR 0 1
4365: PPUSH
4366: CALL 20267 0 1
// if un = brave or un = com then
4370: LD_VAR 0 1
4374: PUSH
4375: LD_INT 1
4377: EQUAL
4378: PUSH
4379: LD_VAR 0 1
4383: PUSH
4384: LD_EXP 1
4388: EQUAL
4389: OR
4390: IFFALSE 4411
// begin SayRadioNoFace ( doc , DDocWin ) ;
4392: LD_EXP 2
4396: PPUSH
4397: LD_STRING DDocWin
4399: PPUSH
4400: CALL_OW 586
// YouLost (  ) ;
4404: LD_STRING 
4406: PPUSH
4407: CALL_OW 104
// end ; end ;
4411: PPOPN 1
4413: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 3
4428: PPUSH
4429: CALL 20363 0 3
// end ;
4433: PPOPN 3
4435: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4436: LD_VAR 0 1
4440: PPUSH
4441: CALL 20371 0 1
// end ;
4445: PPOPN 1
4447: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL 20387 0 2
// end ; end_of_file end_of_file
4462: PPOPN 2
4464: END
// export globalGameSaveCounter ; every 0 0$1 do
4465: GO 4467
4467: DISABLE
// begin enable ;
4468: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4469: LD_STRING updateTimer(
4471: PUSH
4472: LD_OWVAR 1
4476: STR
4477: PUSH
4478: LD_STRING );
4480: STR
4481: PPUSH
4482: CALL_OW 559
// end ;
4486: END
// every 0 0$1 do
4487: GO 4489
4489: DISABLE
// begin globalGameSaveCounter := 0 ;
4490: LD_ADDR_EXP 7
4494: PUSH
4495: LD_INT 0
4497: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4498: LD_STRING setGameSaveCounter(0)
4500: PPUSH
4501: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4505: LD_STRING initStreamRollete();
4507: PPUSH
4508: CALL_OW 559
// InitStreamMode ;
4512: CALL 5838 0 0
// DefineStreamItems ( false ) ;
4516: LD_INT 0
4518: PPUSH
4519: CALL 6302 0 1
// end ;
4523: END
// export function SOS_MapStart ( ) ; begin
4524: LD_INT 0
4526: PPUSH
// if streamModeActive then
4527: LD_EXP 8
4531: IFFALSE 4540
// DefineStreamItems ( true ) ;
4533: LD_INT 1
4535: PPUSH
4536: CALL 6302 0 1
// UpdateLuaVariables ( ) ;
4540: CALL 4557 0 0
// UpdateFactoryWaypoints ( ) ;
4544: CALL 19171 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4548: CALL 19428 0 0
// end ;
4552: LD_VAR 0 1
4556: RET
// function UpdateLuaVariables ( ) ; begin
4557: LD_INT 0
4559: PPUSH
// if globalGameSaveCounter then
4560: LD_EXP 7
4564: IFFALSE 4598
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4566: LD_ADDR_EXP 7
4570: PUSH
4571: LD_EXP 7
4575: PPUSH
4576: CALL 63238 0 1
4580: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4581: LD_STRING setGameSaveCounter(
4583: PUSH
4584: LD_EXP 7
4588: STR
4589: PUSH
4590: LD_STRING )
4592: STR
4593: PPUSH
4594: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4598: LD_STRING setGameDifficulty(
4600: PUSH
4601: LD_OWVAR 67
4605: STR
4606: PUSH
4607: LD_STRING )
4609: STR
4610: PPUSH
4611: CALL_OW 559
// end ;
4615: LD_VAR 0 1
4619: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4620: LD_INT 0
4622: PPUSH
// if p2 = stream_mode then
4623: LD_VAR 0 2
4627: PUSH
4628: LD_INT 100
4630: EQUAL
4631: IFFALSE 5634
// begin if not StreamModeActive then
4633: LD_EXP 8
4637: NOT
4638: IFFALSE 4648
// StreamModeActive := true ;
4640: LD_ADDR_EXP 8
4644: PUSH
4645: LD_INT 1
4647: ST_TO_ADDR
// if p3 = 0 then
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 0
4655: EQUAL
4656: IFFALSE 4662
// InitStreamMode ;
4658: CALL 5838 0 0
// if p3 = 1 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 1
4669: EQUAL
4670: IFFALSE 4680
// sRocket := true ;
4672: LD_ADDR_EXP 13
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 2 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 2
4687: EQUAL
4688: IFFALSE 4698
// sSpeed := true ;
4690: LD_ADDR_EXP 12
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 3 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 3
4705: EQUAL
4706: IFFALSE 4716
// sEngine := true ;
4708: LD_ADDR_EXP 14
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 4 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 4
4723: EQUAL
4724: IFFALSE 4734
// sSpec := true ;
4726: LD_ADDR_EXP 11
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 5 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 5
4741: EQUAL
4742: IFFALSE 4752
// sLevel := true ;
4744: LD_ADDR_EXP 15
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 6 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 6
4759: EQUAL
4760: IFFALSE 4770
// sArmoury := true ;
4762: LD_ADDR_EXP 16
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 7 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 7
4777: EQUAL
4778: IFFALSE 4788
// sRadar := true ;
4780: LD_ADDR_EXP 17
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 8 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 8
4795: EQUAL
4796: IFFALSE 4806
// sBunker := true ;
4798: LD_ADDR_EXP 18
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 9 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 9
4813: EQUAL
4814: IFFALSE 4824
// sHack := true ;
4816: LD_ADDR_EXP 19
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 10 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 10
4831: EQUAL
4832: IFFALSE 4842
// sFire := true ;
4834: LD_ADDR_EXP 20
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 11 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 11
4849: EQUAL
4850: IFFALSE 4860
// sRefresh := true ;
4852: LD_ADDR_EXP 21
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 12 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 12
4867: EQUAL
4868: IFFALSE 4878
// sExp := true ;
4870: LD_ADDR_EXP 22
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 13 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 13
4885: EQUAL
4886: IFFALSE 4896
// sDepot := true ;
4888: LD_ADDR_EXP 23
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 14 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 14
4903: EQUAL
4904: IFFALSE 4914
// sFlag := true ;
4906: LD_ADDR_EXP 24
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 15 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 15
4921: EQUAL
4922: IFFALSE 4932
// sKamikadze := true ;
4924: LD_ADDR_EXP 32
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 16 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 16
4939: EQUAL
4940: IFFALSE 4950
// sTroll := true ;
4942: LD_ADDR_EXP 33
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 17 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 17
4957: EQUAL
4958: IFFALSE 4968
// sSlow := true ;
4960: LD_ADDR_EXP 34
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 18 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 18
4975: EQUAL
4976: IFFALSE 4986
// sLack := true ;
4978: LD_ADDR_EXP 35
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 19 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 19
4993: EQUAL
4994: IFFALSE 5004
// sTank := true ;
4996: LD_ADDR_EXP 37
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 20 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 20
5011: EQUAL
5012: IFFALSE 5022
// sRemote := true ;
5014: LD_ADDR_EXP 38
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 21 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 21
5029: EQUAL
5030: IFFALSE 5040
// sPowell := true ;
5032: LD_ADDR_EXP 39
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 22 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 22
5047: EQUAL
5048: IFFALSE 5058
// sTeleport := true ;
5050: LD_ADDR_EXP 42
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 23 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 23
5065: EQUAL
5066: IFFALSE 5076
// sOilTower := true ;
5068: LD_ADDR_EXP 44
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 24 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 24
5083: EQUAL
5084: IFFALSE 5094
// sShovel := true ;
5086: LD_ADDR_EXP 45
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 25 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 25
5101: EQUAL
5102: IFFALSE 5112
// sSheik := true ;
5104: LD_ADDR_EXP 46
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 26 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 26
5119: EQUAL
5120: IFFALSE 5130
// sEarthquake := true ;
5122: LD_ADDR_EXP 48
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 27 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 27
5137: EQUAL
5138: IFFALSE 5148
// sAI := true ;
5140: LD_ADDR_EXP 49
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 28 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 28
5155: EQUAL
5156: IFFALSE 5166
// sCargo := true ;
5158: LD_ADDR_EXP 52
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 29 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 29
5173: EQUAL
5174: IFFALSE 5184
// sDLaser := true ;
5176: LD_ADDR_EXP 53
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 30 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 30
5191: EQUAL
5192: IFFALSE 5202
// sExchange := true ;
5194: LD_ADDR_EXP 54
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 31 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 31
5209: EQUAL
5210: IFFALSE 5220
// sFac := true ;
5212: LD_ADDR_EXP 55
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 32 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 32
5227: EQUAL
5228: IFFALSE 5238
// sPower := true ;
5230: LD_ADDR_EXP 56
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 33 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 33
5245: EQUAL
5246: IFFALSE 5256
// sRandom := true ;
5248: LD_ADDR_EXP 57
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 34 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 34
5263: EQUAL
5264: IFFALSE 5274
// sShield := true ;
5266: LD_ADDR_EXP 58
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 35 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 35
5281: EQUAL
5282: IFFALSE 5292
// sTime := true ;
5284: LD_ADDR_EXP 59
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 36 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 36
5299: EQUAL
5300: IFFALSE 5310
// sTools := true ;
5302: LD_ADDR_EXP 60
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 101 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 101
5317: EQUAL
5318: IFFALSE 5328
// sSold := true ;
5320: LD_ADDR_EXP 25
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 102 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 102
5335: EQUAL
5336: IFFALSE 5346
// sDiff := true ;
5338: LD_ADDR_EXP 26
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 103 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 103
5353: EQUAL
5354: IFFALSE 5364
// sFog := true ;
5356: LD_ADDR_EXP 29
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 104 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 104
5371: EQUAL
5372: IFFALSE 5382
// sReset := true ;
5374: LD_ADDR_EXP 30
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 105 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 105
5389: EQUAL
5390: IFFALSE 5400
// sSun := true ;
5392: LD_ADDR_EXP 31
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 106 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 106
5407: EQUAL
5408: IFFALSE 5418
// sTiger := true ;
5410: LD_ADDR_EXP 27
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 107 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 107
5425: EQUAL
5426: IFFALSE 5436
// sBomb := true ;
5428: LD_ADDR_EXP 28
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 108 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 108
5443: EQUAL
5444: IFFALSE 5454
// sWound := true ;
5446: LD_ADDR_EXP 36
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 109 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 109
5461: EQUAL
5462: IFFALSE 5472
// sBetray := true ;
5464: LD_ADDR_EXP 40
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 110 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 110
5479: EQUAL
5480: IFFALSE 5490
// sContamin := true ;
5482: LD_ADDR_EXP 41
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 111 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 111
5497: EQUAL
5498: IFFALSE 5508
// sOil := true ;
5500: LD_ADDR_EXP 43
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 112 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 112
5515: EQUAL
5516: IFFALSE 5526
// sStu := true ;
5518: LD_ADDR_EXP 47
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 113 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 113
5533: EQUAL
5534: IFFALSE 5544
// sBazooka := true ;
5536: LD_ADDR_EXP 50
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 114 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 114
5551: EQUAL
5552: IFFALSE 5562
// sMortar := true ;
5554: LD_ADDR_EXP 51
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 115 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 115
5569: EQUAL
5570: IFFALSE 5580
// sRanger := true ;
5572: LD_ADDR_EXP 61
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 116 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 116
5587: EQUAL
5588: IFFALSE 5598
// sComputer := true ;
5590: LD_ADDR_EXP 62
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 117 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 117
5605: EQUAL
5606: IFFALSE 5616
// s30 := true ;
5608: LD_ADDR_EXP 63
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 118 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 118
5623: EQUAL
5624: IFFALSE 5634
// s60 := true ;
5626: LD_ADDR_EXP 64
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// end ; if p2 = hack_mode then
5634: LD_VAR 0 2
5638: PUSH
5639: LD_INT 101
5641: EQUAL
5642: IFFALSE 5770
// begin case p3 of 1 :
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 1
5651: DOUBLE
5652: EQUAL
5653: IFTRUE 5657
5655: GO 5664
5657: POP
// hHackUnlimitedResources ; 2 :
5658: CALL 17917 0 0
5662: GO 5770
5664: LD_INT 2
5666: DOUBLE
5667: EQUAL
5668: IFTRUE 5672
5670: GO 5679
5672: POP
// hHackSetLevel10 ; 3 :
5673: CALL 18050 0 0
5677: GO 5770
5679: LD_INT 3
5681: DOUBLE
5682: EQUAL
5683: IFTRUE 5687
5685: GO 5694
5687: POP
// hHackSetLevel10YourUnits ; 4 :
5688: CALL 18135 0 0
5692: GO 5770
5694: LD_INT 4
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5709
5702: POP
// hHackInvincible ; 5 :
5703: CALL 18583 0 0
5707: GO 5770
5709: LD_INT 5
5711: DOUBLE
5712: EQUAL
5713: IFTRUE 5717
5715: GO 5724
5717: POP
// hHackInvisible ; 6 :
5718: CALL 18694 0 0
5722: GO 5770
5724: LD_INT 6
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5739
5732: POP
// hHackChangeYourSide ; 7 :
5733: CALL 18751 0 0
5737: GO 5770
5739: LD_INT 7
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5754
5747: POP
// hHackChangeUnitSide ; 8 :
5748: CALL 18793 0 0
5752: GO 5770
5754: LD_INT 8
5756: DOUBLE
5757: EQUAL
5758: IFTRUE 5762
5760: GO 5769
5762: POP
// hHackFog ; end ;
5763: CALL 18894 0 0
5767: GO 5770
5769: POP
// end ; if p2 = game_save_mode then
5770: LD_VAR 0 2
5774: PUSH
5775: LD_INT 102
5777: EQUAL
5778: IFFALSE 5833
// begin if p3 = 1 then
5780: LD_VAR 0 3
5784: PUSH
5785: LD_INT 1
5787: EQUAL
5788: IFFALSE 5800
// globalGameSaveCounter := p4 ;
5790: LD_ADDR_EXP 7
5794: PUSH
5795: LD_VAR 0 4
5799: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5800: LD_VAR 0 3
5804: PUSH
5805: LD_INT 2
5807: EQUAL
5808: PUSH
5809: LD_EXP 7
5813: AND
5814: IFFALSE 5833
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5816: LD_STRING setGameSaveCounter(
5818: PUSH
5819: LD_EXP 7
5823: STR
5824: PUSH
5825: LD_STRING )
5827: STR
5828: PPUSH
5829: CALL_OW 559
// end ; end ;
5833: LD_VAR 0 7
5837: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5838: LD_INT 0
5840: PPUSH
// streamModeActive := false ;
5841: LD_ADDR_EXP 8
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// normalCounter := 36 ;
5849: LD_ADDR_EXP 9
5853: PUSH
5854: LD_INT 36
5856: ST_TO_ADDR
// hardcoreCounter := 18 ;
5857: LD_ADDR_EXP 10
5861: PUSH
5862: LD_INT 18
5864: ST_TO_ADDR
// sRocket := false ;
5865: LD_ADDR_EXP 13
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// sSpeed := false ;
5873: LD_ADDR_EXP 12
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// sEngine := false ;
5881: LD_ADDR_EXP 14
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// sSpec := false ;
5889: LD_ADDR_EXP 11
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// sLevel := false ;
5897: LD_ADDR_EXP 15
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
// sArmoury := false ;
5905: LD_ADDR_EXP 16
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// sRadar := false ;
5913: LD_ADDR_EXP 17
5917: PUSH
5918: LD_INT 0
5920: ST_TO_ADDR
// sBunker := false ;
5921: LD_ADDR_EXP 18
5925: PUSH
5926: LD_INT 0
5928: ST_TO_ADDR
// sHack := false ;
5929: LD_ADDR_EXP 19
5933: PUSH
5934: LD_INT 0
5936: ST_TO_ADDR
// sFire := false ;
5937: LD_ADDR_EXP 20
5941: PUSH
5942: LD_INT 0
5944: ST_TO_ADDR
// sRefresh := false ;
5945: LD_ADDR_EXP 21
5949: PUSH
5950: LD_INT 0
5952: ST_TO_ADDR
// sExp := false ;
5953: LD_ADDR_EXP 22
5957: PUSH
5958: LD_INT 0
5960: ST_TO_ADDR
// sDepot := false ;
5961: LD_ADDR_EXP 23
5965: PUSH
5966: LD_INT 0
5968: ST_TO_ADDR
// sFlag := false ;
5969: LD_ADDR_EXP 24
5973: PUSH
5974: LD_INT 0
5976: ST_TO_ADDR
// sKamikadze := false ;
5977: LD_ADDR_EXP 32
5981: PUSH
5982: LD_INT 0
5984: ST_TO_ADDR
// sTroll := false ;
5985: LD_ADDR_EXP 33
5989: PUSH
5990: LD_INT 0
5992: ST_TO_ADDR
// sSlow := false ;
5993: LD_ADDR_EXP 34
5997: PUSH
5998: LD_INT 0
6000: ST_TO_ADDR
// sLack := false ;
6001: LD_ADDR_EXP 35
6005: PUSH
6006: LD_INT 0
6008: ST_TO_ADDR
// sTank := false ;
6009: LD_ADDR_EXP 37
6013: PUSH
6014: LD_INT 0
6016: ST_TO_ADDR
// sRemote := false ;
6017: LD_ADDR_EXP 38
6021: PUSH
6022: LD_INT 0
6024: ST_TO_ADDR
// sPowell := false ;
6025: LD_ADDR_EXP 39
6029: PUSH
6030: LD_INT 0
6032: ST_TO_ADDR
// sTeleport := false ;
6033: LD_ADDR_EXP 42
6037: PUSH
6038: LD_INT 0
6040: ST_TO_ADDR
// sOilTower := false ;
6041: LD_ADDR_EXP 44
6045: PUSH
6046: LD_INT 0
6048: ST_TO_ADDR
// sShovel := false ;
6049: LD_ADDR_EXP 45
6053: PUSH
6054: LD_INT 0
6056: ST_TO_ADDR
// sSheik := false ;
6057: LD_ADDR_EXP 46
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// sEarthquake := false ;
6065: LD_ADDR_EXP 48
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// sAI := false ;
6073: LD_ADDR_EXP 49
6077: PUSH
6078: LD_INT 0
6080: ST_TO_ADDR
// sCargo := false ;
6081: LD_ADDR_EXP 52
6085: PUSH
6086: LD_INT 0
6088: ST_TO_ADDR
// sDLaser := false ;
6089: LD_ADDR_EXP 53
6093: PUSH
6094: LD_INT 0
6096: ST_TO_ADDR
// sExchange := false ;
6097: LD_ADDR_EXP 54
6101: PUSH
6102: LD_INT 0
6104: ST_TO_ADDR
// sFac := false ;
6105: LD_ADDR_EXP 55
6109: PUSH
6110: LD_INT 0
6112: ST_TO_ADDR
// sPower := false ;
6113: LD_ADDR_EXP 56
6117: PUSH
6118: LD_INT 0
6120: ST_TO_ADDR
// sRandom := false ;
6121: LD_ADDR_EXP 57
6125: PUSH
6126: LD_INT 0
6128: ST_TO_ADDR
// sShield := false ;
6129: LD_ADDR_EXP 58
6133: PUSH
6134: LD_INT 0
6136: ST_TO_ADDR
// sTime := false ;
6137: LD_ADDR_EXP 59
6141: PUSH
6142: LD_INT 0
6144: ST_TO_ADDR
// sTools := false ;
6145: LD_ADDR_EXP 60
6149: PUSH
6150: LD_INT 0
6152: ST_TO_ADDR
// sSold := false ;
6153: LD_ADDR_EXP 25
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// sDiff := false ;
6161: LD_ADDR_EXP 26
6165: PUSH
6166: LD_INT 0
6168: ST_TO_ADDR
// sFog := false ;
6169: LD_ADDR_EXP 29
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// sReset := false ;
6177: LD_ADDR_EXP 30
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// sSun := false ;
6185: LD_ADDR_EXP 31
6189: PUSH
6190: LD_INT 0
6192: ST_TO_ADDR
// sTiger := false ;
6193: LD_ADDR_EXP 27
6197: PUSH
6198: LD_INT 0
6200: ST_TO_ADDR
// sBomb := false ;
6201: LD_ADDR_EXP 28
6205: PUSH
6206: LD_INT 0
6208: ST_TO_ADDR
// sWound := false ;
6209: LD_ADDR_EXP 36
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// sBetray := false ;
6217: LD_ADDR_EXP 40
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// sContamin := false ;
6225: LD_ADDR_EXP 41
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// sOil := false ;
6233: LD_ADDR_EXP 43
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// sStu := false ;
6241: LD_ADDR_EXP 47
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// sBazooka := false ;
6249: LD_ADDR_EXP 50
6253: PUSH
6254: LD_INT 0
6256: ST_TO_ADDR
// sMortar := false ;
6257: LD_ADDR_EXP 51
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// sRanger := false ;
6265: LD_ADDR_EXP 61
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// sComputer := false ;
6273: LD_ADDR_EXP 62
6277: PUSH
6278: LD_INT 0
6280: ST_TO_ADDR
// s30 := false ;
6281: LD_ADDR_EXP 63
6285: PUSH
6286: LD_INT 0
6288: ST_TO_ADDR
// s60 := false ;
6289: LD_ADDR_EXP 64
6293: PUSH
6294: LD_INT 0
6296: ST_TO_ADDR
// end ;
6297: LD_VAR 0 1
6301: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6302: LD_INT 0
6304: PPUSH
6305: PPUSH
6306: PPUSH
6307: PPUSH
6308: PPUSH
6309: PPUSH
6310: PPUSH
// result := [ ] ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: EMPTY
6317: ST_TO_ADDR
// if campaign_id = 1 then
6318: LD_OWVAR 69
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 9492
// begin case mission_number of 1 :
6328: LD_OWVAR 70
6332: PUSH
6333: LD_INT 1
6335: DOUBLE
6336: EQUAL
6337: IFTRUE 6341
6339: GO 6417
6341: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: LD_INT 4
6352: PUSH
6353: LD_INT 11
6355: PUSH
6356: LD_INT 12
6358: PUSH
6359: LD_INT 15
6361: PUSH
6362: LD_INT 16
6364: PUSH
6365: LD_INT 22
6367: PUSH
6368: LD_INT 23
6370: PUSH
6371: LD_INT 26
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 101
6387: PUSH
6388: LD_INT 102
6390: PUSH
6391: LD_INT 106
6393: PUSH
6394: LD_INT 116
6396: PUSH
6397: LD_INT 117
6399: PUSH
6400: LD_INT 118
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 9490
6417: LD_INT 2
6419: DOUBLE
6420: EQUAL
6421: IFTRUE 6425
6423: GO 6509
6425: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 11
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: LD_INT 15
6445: PUSH
6446: LD_INT 16
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 23
6454: PUSH
6455: LD_INT 26
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 101
6471: PUSH
6472: LD_INT 102
6474: PUSH
6475: LD_INT 105
6477: PUSH
6478: LD_INT 106
6480: PUSH
6481: LD_INT 108
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: ST_TO_ADDR
6507: GO 9490
6509: LD_INT 3
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6605
6517: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: LD_INT 5
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: LD_INT 15
6540: PUSH
6541: LD_INT 16
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 26
6549: PUSH
6550: LD_INT 36
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 101
6567: PUSH
6568: LD_INT 102
6570: PUSH
6571: LD_INT 105
6573: PUSH
6574: LD_INT 106
6576: PUSH
6577: LD_INT 108
6579: PUSH
6580: LD_INT 116
6582: PUSH
6583: LD_INT 117
6585: PUSH
6586: LD_INT 118
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: ST_TO_ADDR
6603: GO 9490
6605: LD_INT 4
6607: DOUBLE
6608: EQUAL
6609: IFTRUE 6613
6611: GO 6709
6613: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_INT 2
6621: PUSH
6622: LD_INT 4
6624: PUSH
6625: LD_INT 5
6627: PUSH
6628: LD_INT 8
6630: PUSH
6631: LD_INT 11
6633: PUSH
6634: LD_INT 12
6636: PUSH
6637: LD_INT 15
6639: PUSH
6640: LD_INT 16
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 23
6648: PUSH
6649: LD_INT 26
6651: PUSH
6652: LD_INT 36
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 101
6671: PUSH
6672: LD_INT 102
6674: PUSH
6675: LD_INT 105
6677: PUSH
6678: LD_INT 106
6680: PUSH
6681: LD_INT 108
6683: PUSH
6684: LD_INT 116
6686: PUSH
6687: LD_INT 117
6689: PUSH
6690: LD_INT 118
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: ST_TO_ADDR
6707: GO 9490
6709: LD_INT 5
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6829
6717: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6718: LD_ADDR_VAR 0 2
6722: PUSH
6723: LD_INT 2
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: LD_INT 5
6731: PUSH
6732: LD_INT 6
6734: PUSH
6735: LD_INT 8
6737: PUSH
6738: LD_INT 11
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 15
6746: PUSH
6747: LD_INT 16
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 23
6755: PUSH
6756: LD_INT 25
6758: PUSH
6759: LD_INT 26
6761: PUSH
6762: LD_INT 36
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 101
6783: PUSH
6784: LD_INT 102
6786: PUSH
6787: LD_INT 105
6789: PUSH
6790: LD_INT 106
6792: PUSH
6793: LD_INT 108
6795: PUSH
6796: LD_INT 109
6798: PUSH
6799: LD_INT 112
6801: PUSH
6802: LD_INT 116
6804: PUSH
6805: LD_INT 117
6807: PUSH
6808: LD_INT 118
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: ST_TO_ADDR
6827: GO 9490
6829: LD_INT 6
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6969
6837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 2
6845: PUSH
6846: LD_INT 4
6848: PUSH
6849: LD_INT 5
6851: PUSH
6852: LD_INT 6
6854: PUSH
6855: LD_INT 8
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 15
6866: PUSH
6867: LD_INT 16
6869: PUSH
6870: LD_INT 20
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 22
6878: PUSH
6879: LD_INT 23
6881: PUSH
6882: LD_INT 25
6884: PUSH
6885: LD_INT 26
6887: PUSH
6888: LD_INT 30
6890: PUSH
6891: LD_INT 31
6893: PUSH
6894: LD_INT 32
6896: PUSH
6897: LD_INT 36
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 101
6923: PUSH
6924: LD_INT 102
6926: PUSH
6927: LD_INT 105
6929: PUSH
6930: LD_INT 106
6932: PUSH
6933: LD_INT 108
6935: PUSH
6936: LD_INT 109
6938: PUSH
6939: LD_INT 112
6941: PUSH
6942: LD_INT 116
6944: PUSH
6945: LD_INT 117
6947: PUSH
6948: LD_INT 118
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: ST_TO_ADDR
6967: GO 9490
6969: LD_INT 7
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7089
6977: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6978: LD_ADDR_VAR 0 2
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: LD_INT 4
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: LD_INT 7
6994: PUSH
6995: LD_INT 11
6997: PUSH
6998: LD_INT 12
7000: PUSH
7001: LD_INT 15
7003: PUSH
7004: LD_INT 16
7006: PUSH
7007: LD_INT 20
7009: PUSH
7010: LD_INT 21
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_INT 23
7018: PUSH
7019: LD_INT 25
7021: PUSH
7022: LD_INT 26
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 101
7043: PUSH
7044: LD_INT 102
7046: PUSH
7047: LD_INT 103
7049: PUSH
7050: LD_INT 105
7052: PUSH
7053: LD_INT 106
7055: PUSH
7056: LD_INT 108
7058: PUSH
7059: LD_INT 112
7061: PUSH
7062: LD_INT 116
7064: PUSH
7065: LD_INT 117
7067: PUSH
7068: LD_INT 118
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: ST_TO_ADDR
7087: GO 9490
7089: LD_INT 8
7091: DOUBLE
7092: EQUAL
7093: IFTRUE 7097
7095: GO 7237
7097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7098: LD_ADDR_VAR 0 2
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: LD_INT 4
7108: PUSH
7109: LD_INT 5
7111: PUSH
7112: LD_INT 6
7114: PUSH
7115: LD_INT 7
7117: PUSH
7118: LD_INT 8
7120: PUSH
7121: LD_INT 11
7123: PUSH
7124: LD_INT 12
7126: PUSH
7127: LD_INT 15
7129: PUSH
7130: LD_INT 16
7132: PUSH
7133: LD_INT 20
7135: PUSH
7136: LD_INT 21
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 23
7144: PUSH
7145: LD_INT 25
7147: PUSH
7148: LD_INT 26
7150: PUSH
7151: LD_INT 30
7153: PUSH
7154: LD_INT 31
7156: PUSH
7157: LD_INT 32
7159: PUSH
7160: LD_INT 36
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 101
7187: PUSH
7188: LD_INT 102
7190: PUSH
7191: LD_INT 103
7193: PUSH
7194: LD_INT 105
7196: PUSH
7197: LD_INT 106
7199: PUSH
7200: LD_INT 108
7202: PUSH
7203: LD_INT 109
7205: PUSH
7206: LD_INT 112
7208: PUSH
7209: LD_INT 116
7211: PUSH
7212: LD_INT 117
7214: PUSH
7215: LD_INT 118
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 9490
7237: LD_INT 9
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7393
7245: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7246: LD_ADDR_VAR 0 2
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 4
7256: PUSH
7257: LD_INT 5
7259: PUSH
7260: LD_INT 6
7262: PUSH
7263: LD_INT 7
7265: PUSH
7266: LD_INT 8
7268: PUSH
7269: LD_INT 11
7271: PUSH
7272: LD_INT 12
7274: PUSH
7275: LD_INT 15
7277: PUSH
7278: LD_INT 16
7280: PUSH
7281: LD_INT 20
7283: PUSH
7284: LD_INT 21
7286: PUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 23
7292: PUSH
7293: LD_INT 25
7295: PUSH
7296: LD_INT 26
7298: PUSH
7299: LD_INT 28
7301: PUSH
7302: LD_INT 30
7304: PUSH
7305: LD_INT 31
7307: PUSH
7308: LD_INT 32
7310: PUSH
7311: LD_INT 36
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 101
7339: PUSH
7340: LD_INT 102
7342: PUSH
7343: LD_INT 103
7345: PUSH
7346: LD_INT 105
7348: PUSH
7349: LD_INT 106
7351: PUSH
7352: LD_INT 108
7354: PUSH
7355: LD_INT 109
7357: PUSH
7358: LD_INT 112
7360: PUSH
7361: LD_INT 114
7363: PUSH
7364: LD_INT 116
7366: PUSH
7367: LD_INT 117
7369: PUSH
7370: LD_INT 118
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: ST_TO_ADDR
7391: GO 9490
7393: LD_INT 10
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7597
7401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7402: LD_ADDR_VAR 0 2
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 4
7412: PUSH
7413: LD_INT 5
7415: PUSH
7416: LD_INT 6
7418: PUSH
7419: LD_INT 7
7421: PUSH
7422: LD_INT 8
7424: PUSH
7425: LD_INT 9
7427: PUSH
7428: LD_INT 10
7430: PUSH
7431: LD_INT 11
7433: PUSH
7434: LD_INT 12
7436: PUSH
7437: LD_INT 13
7439: PUSH
7440: LD_INT 14
7442: PUSH
7443: LD_INT 15
7445: PUSH
7446: LD_INT 16
7448: PUSH
7449: LD_INT 17
7451: PUSH
7452: LD_INT 18
7454: PUSH
7455: LD_INT 19
7457: PUSH
7458: LD_INT 20
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 22
7466: PUSH
7467: LD_INT 23
7469: PUSH
7470: LD_INT 24
7472: PUSH
7473: LD_INT 25
7475: PUSH
7476: LD_INT 26
7478: PUSH
7479: LD_INT 28
7481: PUSH
7482: LD_INT 30
7484: PUSH
7485: LD_INT 31
7487: PUSH
7488: LD_INT 32
7490: PUSH
7491: LD_INT 36
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 101
7527: PUSH
7528: LD_INT 102
7530: PUSH
7531: LD_INT 103
7533: PUSH
7534: LD_INT 104
7536: PUSH
7537: LD_INT 105
7539: PUSH
7540: LD_INT 106
7542: PUSH
7543: LD_INT 107
7545: PUSH
7546: LD_INT 108
7548: PUSH
7549: LD_INT 109
7551: PUSH
7552: LD_INT 110
7554: PUSH
7555: LD_INT 111
7557: PUSH
7558: LD_INT 112
7560: PUSH
7561: LD_INT 114
7563: PUSH
7564: LD_INT 116
7566: PUSH
7567: LD_INT 117
7569: PUSH
7570: LD_INT 118
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: ST_TO_ADDR
7595: GO 9490
7597: LD_INT 11
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7809
7605: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7606: LD_ADDR_VAR 0 2
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 4
7619: PUSH
7620: LD_INT 5
7622: PUSH
7623: LD_INT 6
7625: PUSH
7626: LD_INT 7
7628: PUSH
7629: LD_INT 8
7631: PUSH
7632: LD_INT 9
7634: PUSH
7635: LD_INT 10
7637: PUSH
7638: LD_INT 11
7640: PUSH
7641: LD_INT 12
7643: PUSH
7644: LD_INT 13
7646: PUSH
7647: LD_INT 14
7649: PUSH
7650: LD_INT 15
7652: PUSH
7653: LD_INT 16
7655: PUSH
7656: LD_INT 17
7658: PUSH
7659: LD_INT 18
7661: PUSH
7662: LD_INT 19
7664: PUSH
7665: LD_INT 20
7667: PUSH
7668: LD_INT 21
7670: PUSH
7671: LD_INT 22
7673: PUSH
7674: LD_INT 23
7676: PUSH
7677: LD_INT 24
7679: PUSH
7680: LD_INT 25
7682: PUSH
7683: LD_INT 26
7685: PUSH
7686: LD_INT 28
7688: PUSH
7689: LD_INT 30
7691: PUSH
7692: LD_INT 31
7694: PUSH
7695: LD_INT 32
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 36
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 101
7739: PUSH
7740: LD_INT 102
7742: PUSH
7743: LD_INT 103
7745: PUSH
7746: LD_INT 104
7748: PUSH
7749: LD_INT 105
7751: PUSH
7752: LD_INT 106
7754: PUSH
7755: LD_INT 107
7757: PUSH
7758: LD_INT 108
7760: PUSH
7761: LD_INT 109
7763: PUSH
7764: LD_INT 110
7766: PUSH
7767: LD_INT 111
7769: PUSH
7770: LD_INT 112
7772: PUSH
7773: LD_INT 114
7775: PUSH
7776: LD_INT 116
7778: PUSH
7779: LD_INT 117
7781: PUSH
7782: LD_INT 118
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: ST_TO_ADDR
7807: GO 9490
7809: LD_INT 12
7811: DOUBLE
7812: EQUAL
7813: IFTRUE 7817
7815: GO 8037
7817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7818: LD_ADDR_VAR 0 2
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 4
7834: PUSH
7835: LD_INT 5
7837: PUSH
7838: LD_INT 6
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: LD_INT 9
7849: PUSH
7850: LD_INT 10
7852: PUSH
7853: LD_INT 11
7855: PUSH
7856: LD_INT 12
7858: PUSH
7859: LD_INT 13
7861: PUSH
7862: LD_INT 14
7864: PUSH
7865: LD_INT 15
7867: PUSH
7868: LD_INT 16
7870: PUSH
7871: LD_INT 17
7873: PUSH
7874: LD_INT 18
7876: PUSH
7877: LD_INT 19
7879: PUSH
7880: LD_INT 20
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 24
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 26
7900: PUSH
7901: LD_INT 27
7903: PUSH
7904: LD_INT 28
7906: PUSH
7907: LD_INT 30
7909: PUSH
7910: LD_INT 31
7912: PUSH
7913: LD_INT 32
7915: PUSH
7916: LD_INT 33
7918: PUSH
7919: LD_INT 34
7921: PUSH
7922: LD_INT 36
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 101
7963: PUSH
7964: LD_INT 102
7966: PUSH
7967: LD_INT 103
7969: PUSH
7970: LD_INT 104
7972: PUSH
7973: LD_INT 105
7975: PUSH
7976: LD_INT 106
7978: PUSH
7979: LD_INT 107
7981: PUSH
7982: LD_INT 108
7984: PUSH
7985: LD_INT 109
7987: PUSH
7988: LD_INT 110
7990: PUSH
7991: LD_INT 111
7993: PUSH
7994: LD_INT 112
7996: PUSH
7997: LD_INT 113
7999: PUSH
8000: LD_INT 114
8002: PUSH
8003: LD_INT 116
8005: PUSH
8006: LD_INT 117
8008: PUSH
8009: LD_INT 118
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: ST_TO_ADDR
8035: GO 9490
8037: LD_INT 13
8039: DOUBLE
8040: EQUAL
8041: IFTRUE 8045
8043: GO 8253
8045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8046: LD_ADDR_VAR 0 2
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: LD_INT 4
8062: PUSH
8063: LD_INT 5
8065: PUSH
8066: LD_INT 8
8068: PUSH
8069: LD_INT 9
8071: PUSH
8072: LD_INT 10
8074: PUSH
8075: LD_INT 11
8077: PUSH
8078: LD_INT 12
8080: PUSH
8081: LD_INT 14
8083: PUSH
8084: LD_INT 15
8086: PUSH
8087: LD_INT 16
8089: PUSH
8090: LD_INT 17
8092: PUSH
8093: LD_INT 18
8095: PUSH
8096: LD_INT 19
8098: PUSH
8099: LD_INT 20
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 22
8107: PUSH
8108: LD_INT 23
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 25
8116: PUSH
8117: LD_INT 26
8119: PUSH
8120: LD_INT 27
8122: PUSH
8123: LD_INT 28
8125: PUSH
8126: LD_INT 30
8128: PUSH
8129: LD_INT 31
8131: PUSH
8132: LD_INT 32
8134: PUSH
8135: LD_INT 33
8137: PUSH
8138: LD_INT 34
8140: PUSH
8141: LD_INT 36
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 101
8179: PUSH
8180: LD_INT 102
8182: PUSH
8183: LD_INT 103
8185: PUSH
8186: LD_INT 104
8188: PUSH
8189: LD_INT 105
8191: PUSH
8192: LD_INT 106
8194: PUSH
8195: LD_INT 107
8197: PUSH
8198: LD_INT 108
8200: PUSH
8201: LD_INT 109
8203: PUSH
8204: LD_INT 110
8206: PUSH
8207: LD_INT 111
8209: PUSH
8210: LD_INT 112
8212: PUSH
8213: LD_INT 113
8215: PUSH
8216: LD_INT 114
8218: PUSH
8219: LD_INT 116
8221: PUSH
8222: LD_INT 117
8224: PUSH
8225: LD_INT 118
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: ST_TO_ADDR
8251: GO 9490
8253: LD_INT 14
8255: DOUBLE
8256: EQUAL
8257: IFTRUE 8261
8259: GO 8485
8261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8262: LD_ADDR_VAR 0 2
8266: PUSH
8267: LD_INT 1
8269: PUSH
8270: LD_INT 2
8272: PUSH
8273: LD_INT 3
8275: PUSH
8276: LD_INT 4
8278: PUSH
8279: LD_INT 5
8281: PUSH
8282: LD_INT 6
8284: PUSH
8285: LD_INT 7
8287: PUSH
8288: LD_INT 8
8290: PUSH
8291: LD_INT 9
8293: PUSH
8294: LD_INT 10
8296: PUSH
8297: LD_INT 11
8299: PUSH
8300: LD_INT 12
8302: PUSH
8303: LD_INT 13
8305: PUSH
8306: LD_INT 14
8308: PUSH
8309: LD_INT 15
8311: PUSH
8312: LD_INT 16
8314: PUSH
8315: LD_INT 17
8317: PUSH
8318: LD_INT 18
8320: PUSH
8321: LD_INT 19
8323: PUSH
8324: LD_INT 20
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 23
8335: PUSH
8336: LD_INT 24
8338: PUSH
8339: LD_INT 25
8341: PUSH
8342: LD_INT 26
8344: PUSH
8345: LD_INT 27
8347: PUSH
8348: LD_INT 28
8350: PUSH
8351: LD_INT 29
8353: PUSH
8354: LD_INT 30
8356: PUSH
8357: LD_INT 31
8359: PUSH
8360: LD_INT 32
8362: PUSH
8363: LD_INT 33
8365: PUSH
8366: LD_INT 34
8368: PUSH
8369: LD_INT 36
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 101
8411: PUSH
8412: LD_INT 102
8414: PUSH
8415: LD_INT 103
8417: PUSH
8418: LD_INT 104
8420: PUSH
8421: LD_INT 105
8423: PUSH
8424: LD_INT 106
8426: PUSH
8427: LD_INT 107
8429: PUSH
8430: LD_INT 108
8432: PUSH
8433: LD_INT 109
8435: PUSH
8436: LD_INT 110
8438: PUSH
8439: LD_INT 111
8441: PUSH
8442: LD_INT 112
8444: PUSH
8445: LD_INT 113
8447: PUSH
8448: LD_INT 114
8450: PUSH
8451: LD_INT 116
8453: PUSH
8454: LD_INT 117
8456: PUSH
8457: LD_INT 118
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: ST_TO_ADDR
8483: GO 9490
8485: LD_INT 15
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8717
8493: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8494: LD_ADDR_VAR 0 2
8498: PUSH
8499: LD_INT 1
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: LD_INT 3
8507: PUSH
8508: LD_INT 4
8510: PUSH
8511: LD_INT 5
8513: PUSH
8514: LD_INT 6
8516: PUSH
8517: LD_INT 7
8519: PUSH
8520: LD_INT 8
8522: PUSH
8523: LD_INT 9
8525: PUSH
8526: LD_INT 10
8528: PUSH
8529: LD_INT 11
8531: PUSH
8532: LD_INT 12
8534: PUSH
8535: LD_INT 13
8537: PUSH
8538: LD_INT 14
8540: PUSH
8541: LD_INT 15
8543: PUSH
8544: LD_INT 16
8546: PUSH
8547: LD_INT 17
8549: PUSH
8550: LD_INT 18
8552: PUSH
8553: LD_INT 19
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 22
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 24
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 26
8576: PUSH
8577: LD_INT 27
8579: PUSH
8580: LD_INT 28
8582: PUSH
8583: LD_INT 29
8585: PUSH
8586: LD_INT 30
8588: PUSH
8589: LD_INT 31
8591: PUSH
8592: LD_INT 32
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 34
8600: PUSH
8601: LD_INT 36
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 101
8643: PUSH
8644: LD_INT 102
8646: PUSH
8647: LD_INT 103
8649: PUSH
8650: LD_INT 104
8652: PUSH
8653: LD_INT 105
8655: PUSH
8656: LD_INT 106
8658: PUSH
8659: LD_INT 107
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: LD_INT 109
8667: PUSH
8668: LD_INT 110
8670: PUSH
8671: LD_INT 111
8673: PUSH
8674: LD_INT 112
8676: PUSH
8677: LD_INT 113
8679: PUSH
8680: LD_INT 114
8682: PUSH
8683: LD_INT 116
8685: PUSH
8686: LD_INT 117
8688: PUSH
8689: LD_INT 118
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: ST_TO_ADDR
8715: GO 9490
8717: LD_INT 16
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8861
8725: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8726: LD_ADDR_VAR 0 2
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 11
8745: PUSH
8746: LD_INT 12
8748: PUSH
8749: LD_INT 15
8751: PUSH
8752: LD_INT 16
8754: PUSH
8755: LD_INT 20
8757: PUSH
8758: LD_INT 21
8760: PUSH
8761: LD_INT 22
8763: PUSH
8764: LD_INT 23
8766: PUSH
8767: LD_INT 25
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 30
8775: PUSH
8776: LD_INT 31
8778: PUSH
8779: LD_INT 32
8781: PUSH
8782: LD_INT 33
8784: PUSH
8785: LD_INT 34
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 101
8811: PUSH
8812: LD_INT 102
8814: PUSH
8815: LD_INT 103
8817: PUSH
8818: LD_INT 106
8820: PUSH
8821: LD_INT 108
8823: PUSH
8824: LD_INT 112
8826: PUSH
8827: LD_INT 113
8829: PUSH
8830: LD_INT 114
8832: PUSH
8833: LD_INT 116
8835: PUSH
8836: LD_INT 117
8838: PUSH
8839: LD_INT 118
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: ST_TO_ADDR
8859: GO 9490
8861: LD_INT 17
8863: DOUBLE
8864: EQUAL
8865: IFTRUE 8869
8867: GO 9093
8869: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: LD_INT 4
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: LD_INT 6
8892: PUSH
8893: LD_INT 7
8895: PUSH
8896: LD_INT 8
8898: PUSH
8899: LD_INT 9
8901: PUSH
8902: LD_INT 10
8904: PUSH
8905: LD_INT 11
8907: PUSH
8908: LD_INT 12
8910: PUSH
8911: LD_INT 13
8913: PUSH
8914: LD_INT 14
8916: PUSH
8917: LD_INT 15
8919: PUSH
8920: LD_INT 16
8922: PUSH
8923: LD_INT 17
8925: PUSH
8926: LD_INT 18
8928: PUSH
8929: LD_INT 19
8931: PUSH
8932: LD_INT 20
8934: PUSH
8935: LD_INT 21
8937: PUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 23
8943: PUSH
8944: LD_INT 24
8946: PUSH
8947: LD_INT 25
8949: PUSH
8950: LD_INT 26
8952: PUSH
8953: LD_INT 27
8955: PUSH
8956: LD_INT 28
8958: PUSH
8959: LD_INT 29
8961: PUSH
8962: LD_INT 30
8964: PUSH
8965: LD_INT 31
8967: PUSH
8968: LD_INT 32
8970: PUSH
8971: LD_INT 33
8973: PUSH
8974: LD_INT 34
8976: PUSH
8977: LD_INT 36
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 101
9019: PUSH
9020: LD_INT 102
9022: PUSH
9023: LD_INT 103
9025: PUSH
9026: LD_INT 104
9028: PUSH
9029: LD_INT 105
9031: PUSH
9032: LD_INT 106
9034: PUSH
9035: LD_INT 107
9037: PUSH
9038: LD_INT 108
9040: PUSH
9041: LD_INT 109
9043: PUSH
9044: LD_INT 110
9046: PUSH
9047: LD_INT 111
9049: PUSH
9050: LD_INT 112
9052: PUSH
9053: LD_INT 113
9055: PUSH
9056: LD_INT 114
9058: PUSH
9059: LD_INT 116
9061: PUSH
9062: LD_INT 117
9064: PUSH
9065: LD_INT 118
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: ST_TO_ADDR
9091: GO 9490
9093: LD_INT 18
9095: DOUBLE
9096: EQUAL
9097: IFTRUE 9101
9099: GO 9249
9101: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9102: LD_ADDR_VAR 0 2
9106: PUSH
9107: LD_INT 2
9109: PUSH
9110: LD_INT 4
9112: PUSH
9113: LD_INT 5
9115: PUSH
9116: LD_INT 7
9118: PUSH
9119: LD_INT 11
9121: PUSH
9122: LD_INT 12
9124: PUSH
9125: LD_INT 15
9127: PUSH
9128: LD_INT 16
9130: PUSH
9131: LD_INT 20
9133: PUSH
9134: LD_INT 21
9136: PUSH
9137: LD_INT 22
9139: PUSH
9140: LD_INT 23
9142: PUSH
9143: LD_INT 25
9145: PUSH
9146: LD_INT 26
9148: PUSH
9149: LD_INT 30
9151: PUSH
9152: LD_INT 31
9154: PUSH
9155: LD_INT 32
9157: PUSH
9158: LD_INT 33
9160: PUSH
9161: LD_INT 34
9163: PUSH
9164: LD_INT 35
9166: PUSH
9167: LD_INT 36
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 102
9198: PUSH
9199: LD_INT 103
9201: PUSH
9202: LD_INT 106
9204: PUSH
9205: LD_INT 108
9207: PUSH
9208: LD_INT 112
9210: PUSH
9211: LD_INT 113
9213: PUSH
9214: LD_INT 114
9216: PUSH
9217: LD_INT 115
9219: PUSH
9220: LD_INT 116
9222: PUSH
9223: LD_INT 117
9225: PUSH
9226: LD_INT 118
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: ST_TO_ADDR
9247: GO 9490
9249: LD_INT 19
9251: DOUBLE
9252: EQUAL
9253: IFTRUE 9257
9255: GO 9489
9257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9258: LD_ADDR_VAR 0 2
9262: PUSH
9263: LD_INT 1
9265: PUSH
9266: LD_INT 2
9268: PUSH
9269: LD_INT 3
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 6
9280: PUSH
9281: LD_INT 7
9283: PUSH
9284: LD_INT 8
9286: PUSH
9287: LD_INT 9
9289: PUSH
9290: LD_INT 10
9292: PUSH
9293: LD_INT 11
9295: PUSH
9296: LD_INT 12
9298: PUSH
9299: LD_INT 13
9301: PUSH
9302: LD_INT 14
9304: PUSH
9305: LD_INT 15
9307: PUSH
9308: LD_INT 16
9310: PUSH
9311: LD_INT 17
9313: PUSH
9314: LD_INT 18
9316: PUSH
9317: LD_INT 19
9319: PUSH
9320: LD_INT 20
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 23
9331: PUSH
9332: LD_INT 24
9334: PUSH
9335: LD_INT 25
9337: PUSH
9338: LD_INT 26
9340: PUSH
9341: LD_INT 27
9343: PUSH
9344: LD_INT 28
9346: PUSH
9347: LD_INT 29
9349: PUSH
9350: LD_INT 30
9352: PUSH
9353: LD_INT 31
9355: PUSH
9356: LD_INT 32
9358: PUSH
9359: LD_INT 33
9361: PUSH
9362: LD_INT 34
9364: PUSH
9365: LD_INT 35
9367: PUSH
9368: LD_INT 36
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 101
9411: PUSH
9412: LD_INT 102
9414: PUSH
9415: LD_INT 103
9417: PUSH
9418: LD_INT 104
9420: PUSH
9421: LD_INT 105
9423: PUSH
9424: LD_INT 106
9426: PUSH
9427: LD_INT 107
9429: PUSH
9430: LD_INT 108
9432: PUSH
9433: LD_INT 109
9435: PUSH
9436: LD_INT 110
9438: PUSH
9439: LD_INT 111
9441: PUSH
9442: LD_INT 112
9444: PUSH
9445: LD_INT 113
9447: PUSH
9448: LD_INT 114
9450: PUSH
9451: LD_INT 115
9453: PUSH
9454: LD_INT 116
9456: PUSH
9457: LD_INT 117
9459: PUSH
9460: LD_INT 118
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: ST_TO_ADDR
9487: GO 9490
9489: POP
// end else
9490: GO 9721
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_INT 1
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 4
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: LD_INT 6
9514: PUSH
9515: LD_INT 7
9517: PUSH
9518: LD_INT 8
9520: PUSH
9521: LD_INT 9
9523: PUSH
9524: LD_INT 10
9526: PUSH
9527: LD_INT 11
9529: PUSH
9530: LD_INT 12
9532: PUSH
9533: LD_INT 13
9535: PUSH
9536: LD_INT 14
9538: PUSH
9539: LD_INT 15
9541: PUSH
9542: LD_INT 16
9544: PUSH
9545: LD_INT 17
9547: PUSH
9548: LD_INT 18
9550: PUSH
9551: LD_INT 19
9553: PUSH
9554: LD_INT 20
9556: PUSH
9557: LD_INT 21
9559: PUSH
9560: LD_INT 22
9562: PUSH
9563: LD_INT 23
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 25
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 27
9577: PUSH
9578: LD_INT 28
9580: PUSH
9581: LD_INT 29
9583: PUSH
9584: LD_INT 30
9586: PUSH
9587: LD_INT 31
9589: PUSH
9590: LD_INT 32
9592: PUSH
9593: LD_INT 33
9595: PUSH
9596: LD_INT 34
9598: PUSH
9599: LD_INT 35
9601: PUSH
9602: LD_INT 36
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 103
9651: PUSH
9652: LD_INT 104
9654: PUSH
9655: LD_INT 105
9657: PUSH
9658: LD_INT 106
9660: PUSH
9661: LD_INT 107
9663: PUSH
9664: LD_INT 108
9666: PUSH
9667: LD_INT 109
9669: PUSH
9670: LD_INT 110
9672: PUSH
9673: LD_INT 111
9675: PUSH
9676: LD_INT 112
9678: PUSH
9679: LD_INT 113
9681: PUSH
9682: LD_INT 114
9684: PUSH
9685: LD_INT 115
9687: PUSH
9688: LD_INT 116
9690: PUSH
9691: LD_INT 117
9693: PUSH
9694: LD_INT 118
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: ST_TO_ADDR
// if result then
9721: LD_VAR 0 2
9725: IFFALSE 10511
// begin normal :=  ;
9727: LD_ADDR_VAR 0 5
9731: PUSH
9732: LD_STRING 
9734: ST_TO_ADDR
// hardcore :=  ;
9735: LD_ADDR_VAR 0 6
9739: PUSH
9740: LD_STRING 
9742: ST_TO_ADDR
// active :=  ;
9743: LD_ADDR_VAR 0 7
9747: PUSH
9748: LD_STRING 
9750: ST_TO_ADDR
// for i = 1 to normalCounter do
9751: LD_ADDR_VAR 0 8
9755: PUSH
9756: DOUBLE
9757: LD_INT 1
9759: DEC
9760: ST_TO_ADDR
9761: LD_EXP 9
9765: PUSH
9766: FOR_TO
9767: IFFALSE 9868
// begin tmp := 0 ;
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: LD_STRING 0
9776: ST_TO_ADDR
// if result [ 1 ] then
9777: LD_VAR 0 2
9781: PUSH
9782: LD_INT 1
9784: ARRAY
9785: IFFALSE 9850
// if result [ 1 ] [ 1 ] = i then
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PUSH
9796: LD_INT 1
9798: ARRAY
9799: PUSH
9800: LD_VAR 0 8
9804: EQUAL
9805: IFFALSE 9850
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9807: LD_ADDR_VAR 0 2
9811: PUSH
9812: LD_VAR 0 2
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: LD_VAR 0 2
9824: PUSH
9825: LD_INT 1
9827: ARRAY
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 3
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// tmp := 1 ;
9842: LD_ADDR_VAR 0 3
9846: PUSH
9847: LD_STRING 1
9849: ST_TO_ADDR
// end ; normal := normal & tmp ;
9850: LD_ADDR_VAR 0 5
9854: PUSH
9855: LD_VAR 0 5
9859: PUSH
9860: LD_VAR 0 3
9864: STR
9865: ST_TO_ADDR
// end ;
9866: GO 9766
9868: POP
9869: POP
// for i = 1 to hardcoreCounter do
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: DOUBLE
9876: LD_INT 1
9878: DEC
9879: ST_TO_ADDR
9880: LD_EXP 10
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9991
// begin tmp := 0 ;
9888: LD_ADDR_VAR 0 3
9892: PUSH
9893: LD_STRING 0
9895: ST_TO_ADDR
// if result [ 2 ] then
9896: LD_VAR 0 2
9900: PUSH
9901: LD_INT 2
9903: ARRAY
9904: IFFALSE 9973
// if result [ 2 ] [ 1 ] = 100 + i then
9906: LD_VAR 0 2
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PUSH
9919: LD_INT 100
9921: PUSH
9922: LD_VAR 0 8
9926: PLUS
9927: EQUAL
9928: IFFALSE 9973
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_VAR 0 2
9939: PPUSH
9940: LD_INT 2
9942: PPUSH
9943: LD_VAR 0 2
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 3
9959: PPUSH
9960: CALL_OW 1
9964: ST_TO_ADDR
// tmp := 1 ;
9965: LD_ADDR_VAR 0 3
9969: PUSH
9970: LD_STRING 1
9972: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9973: LD_ADDR_VAR 0 6
9977: PUSH
9978: LD_VAR 0 6
9982: PUSH
9983: LD_VAR 0 3
9987: STR
9988: ST_TO_ADDR
// end ;
9989: GO 9885
9991: POP
9992: POP
// if isGameLoad then
9993: LD_VAR 0 1
9997: IFFALSE 10472
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9999: LD_ADDR_VAR 0 4
10003: PUSH
10004: LD_EXP 13
10008: PUSH
10009: LD_EXP 12
10013: PUSH
10014: LD_EXP 14
10018: PUSH
10019: LD_EXP 11
10023: PUSH
10024: LD_EXP 15
10028: PUSH
10029: LD_EXP 16
10033: PUSH
10034: LD_EXP 17
10038: PUSH
10039: LD_EXP 18
10043: PUSH
10044: LD_EXP 19
10048: PUSH
10049: LD_EXP 20
10053: PUSH
10054: LD_EXP 21
10058: PUSH
10059: LD_EXP 22
10063: PUSH
10064: LD_EXP 23
10068: PUSH
10069: LD_EXP 24
10073: PUSH
10074: LD_EXP 32
10078: PUSH
10079: LD_EXP 33
10083: PUSH
10084: LD_EXP 34
10088: PUSH
10089: LD_EXP 35
10093: PUSH
10094: LD_EXP 37
10098: PUSH
10099: LD_EXP 38
10103: PUSH
10104: LD_EXP 39
10108: PUSH
10109: LD_EXP 42
10113: PUSH
10114: LD_EXP 44
10118: PUSH
10119: LD_EXP 45
10123: PUSH
10124: LD_EXP 46
10128: PUSH
10129: LD_EXP 48
10133: PUSH
10134: LD_EXP 49
10138: PUSH
10139: LD_EXP 52
10143: PUSH
10144: LD_EXP 53
10148: PUSH
10149: LD_EXP 54
10153: PUSH
10154: LD_EXP 55
10158: PUSH
10159: LD_EXP 56
10163: PUSH
10164: LD_EXP 57
10168: PUSH
10169: LD_EXP 58
10173: PUSH
10174: LD_EXP 59
10178: PUSH
10179: LD_EXP 60
10183: PUSH
10184: LD_EXP 25
10188: PUSH
10189: LD_EXP 26
10193: PUSH
10194: LD_EXP 29
10198: PUSH
10199: LD_EXP 30
10203: PUSH
10204: LD_EXP 31
10208: PUSH
10209: LD_EXP 27
10213: PUSH
10214: LD_EXP 28
10218: PUSH
10219: LD_EXP 36
10223: PUSH
10224: LD_EXP 40
10228: PUSH
10229: LD_EXP 41
10233: PUSH
10234: LD_EXP 43
10238: PUSH
10239: LD_EXP 47
10243: PUSH
10244: LD_EXP 50
10248: PUSH
10249: LD_EXP 51
10253: PUSH
10254: LD_EXP 61
10258: PUSH
10259: LD_EXP 62
10263: PUSH
10264: LD_EXP 63
10268: PUSH
10269: LD_EXP 64
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: ST_TO_ADDR
// tmp :=  ;
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: LD_STRING 
10337: ST_TO_ADDR
// for i = 1 to normalCounter do
10338: LD_ADDR_VAR 0 8
10342: PUSH
10343: DOUBLE
10344: LD_INT 1
10346: DEC
10347: ST_TO_ADDR
10348: LD_EXP 9
10352: PUSH
10353: FOR_TO
10354: IFFALSE 10390
// begin if flags [ i ] then
10356: LD_VAR 0 4
10360: PUSH
10361: LD_VAR 0 8
10365: ARRAY
10366: IFFALSE 10388
// tmp := tmp & i & ; ;
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: LD_VAR 0 3
10377: PUSH
10378: LD_VAR 0 8
10382: STR
10383: PUSH
10384: LD_STRING ;
10386: STR
10387: ST_TO_ADDR
// end ;
10388: GO 10353
10390: POP
10391: POP
// for i = 1 to hardcoreCounter do
10392: LD_ADDR_VAR 0 8
10396: PUSH
10397: DOUBLE
10398: LD_INT 1
10400: DEC
10401: ST_TO_ADDR
10402: LD_EXP 10
10406: PUSH
10407: FOR_TO
10408: IFFALSE 10454
// begin if flags [ normalCounter + i ] then
10410: LD_VAR 0 4
10414: PUSH
10415: LD_EXP 9
10419: PUSH
10420: LD_VAR 0 8
10424: PLUS
10425: ARRAY
10426: IFFALSE 10452
// tmp := tmp & ( 100 + i ) & ; ;
10428: LD_ADDR_VAR 0 3
10432: PUSH
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 100
10440: PUSH
10441: LD_VAR 0 8
10445: PLUS
10446: STR
10447: PUSH
10448: LD_STRING ;
10450: STR
10451: ST_TO_ADDR
// end ;
10452: GO 10407
10454: POP
10455: POP
// if tmp then
10456: LD_VAR 0 3
10460: IFFALSE 10472
// active := tmp ;
10462: LD_ADDR_VAR 0 7
10466: PUSH
10467: LD_VAR 0 3
10471: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10472: LD_STRING getStreamItemsFromMission("
10474: PUSH
10475: LD_VAR 0 5
10479: STR
10480: PUSH
10481: LD_STRING ","
10483: STR
10484: PUSH
10485: LD_VAR 0 6
10489: STR
10490: PUSH
10491: LD_STRING ","
10493: STR
10494: PUSH
10495: LD_VAR 0 7
10499: STR
10500: PUSH
10501: LD_STRING ")
10503: STR
10504: PPUSH
10505: CALL_OW 559
// end else
10509: GO 10518
// ToLua ( getStreamItemsFromMission("","","") ) ;
10511: LD_STRING getStreamItemsFromMission("","","")
10513: PPUSH
10514: CALL_OW 559
// end ;
10518: LD_VAR 0 2
10522: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10523: LD_EXP 8
10527: PUSH
10528: LD_EXP 13
10532: AND
10533: IFFALSE 10657
10535: GO 10537
10537: DISABLE
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
// begin enable ;
10542: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10543: LD_ADDR_VAR 0 2
10547: PUSH
10548: LD_INT 22
10550: PUSH
10551: LD_OWVAR 2
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: LD_INT 34
10565: PUSH
10566: LD_INT 7
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 34
10575: PUSH
10576: LD_INT 45
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 34
10585: PUSH
10586: LD_INT 28
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 34
10595: PUSH
10596: LD_INT 47
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: ST_TO_ADDR
// if not tmp then
10619: LD_VAR 0 2
10623: NOT
10624: IFFALSE 10628
// exit ;
10626: GO 10657
// for i in tmp do
10628: LD_ADDR_VAR 0 1
10632: PUSH
10633: LD_VAR 0 2
10637: PUSH
10638: FOR_IN
10639: IFFALSE 10655
// begin SetLives ( i , 0 ) ;
10641: LD_VAR 0 1
10645: PPUSH
10646: LD_INT 0
10648: PPUSH
10649: CALL_OW 234
// end ;
10653: GO 10638
10655: POP
10656: POP
// end ;
10657: PPOPN 2
10659: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10660: LD_EXP 8
10664: PUSH
10665: LD_EXP 14
10669: AND
10670: IFFALSE 10754
10672: GO 10674
10674: DISABLE
10675: LD_INT 0
10677: PPUSH
10678: PPUSH
// begin enable ;
10679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10680: LD_ADDR_VAR 0 2
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 32
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: ST_TO_ADDR
// if not tmp then
10716: LD_VAR 0 2
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10754
// for i in tmp do
10725: LD_ADDR_VAR 0 1
10729: PUSH
10730: LD_VAR 0 2
10734: PUSH
10735: FOR_IN
10736: IFFALSE 10752
// begin SetLives ( i , 0 ) ;
10738: LD_VAR 0 1
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: CALL_OW 234
// end ;
10750: GO 10735
10752: POP
10753: POP
// end ;
10754: PPOPN 2
10756: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10757: LD_EXP 8
10761: PUSH
10762: LD_EXP 11
10766: AND
10767: IFFALSE 10860
10769: GO 10771
10771: DISABLE
10772: LD_INT 0
10774: PPUSH
// begin enable ;
10775: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_INT 22
10783: PUSH
10784: LD_OWVAR 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 5
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 9
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 8
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PPUSH
10836: CALL_OW 69
10840: PUSH
10841: FOR_IN
10842: IFFALSE 10858
// begin SetClass ( i , 1 ) ;
10844: LD_VAR 0 1
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 336
// end ;
10856: GO 10841
10858: POP
10859: POP
// end ;
10860: PPOPN 1
10862: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10863: LD_EXP 8
10867: PUSH
10868: LD_EXP 12
10872: AND
10873: PUSH
10874: LD_OWVAR 65
10878: PUSH
10879: LD_INT 7
10881: LESS
10882: AND
10883: IFFALSE 10897
10885: GO 10887
10887: DISABLE
// begin enable ;
10888: ENABLE
// game_speed := 7 ;
10889: LD_ADDR_OWVAR 65
10893: PUSH
10894: LD_INT 7
10896: ST_TO_ADDR
// end ;
10897: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10898: LD_EXP 8
10902: PUSH
10903: LD_EXP 15
10907: AND
10908: IFFALSE 11110
10910: GO 10912
10912: DISABLE
10913: LD_INT 0
10915: PPUSH
10916: PPUSH
10917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_OWVAR 2
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 21
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: ST_TO_ADDR
// if not tmp then
10954: LD_VAR 0 3
10958: NOT
10959: IFFALSE 10963
// exit ;
10961: GO 11110
// if tmp > 5 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 5
10970: GREATER
10971: IFFALSE 10983
// k := 5 else
10973: LD_ADDR_VAR 0 2
10977: PUSH
10978: LD_INT 5
10980: ST_TO_ADDR
10981: GO 10993
// k := tmp ;
10983: LD_ADDR_VAR 0 2
10987: PUSH
10988: LD_VAR 0 3
10992: ST_TO_ADDR
// for i := 1 to k do
10993: LD_ADDR_VAR 0 1
10997: PUSH
10998: DOUBLE
10999: LD_INT 1
11001: DEC
11002: ST_TO_ADDR
11003: LD_VAR 0 2
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11108
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11011: LD_VAR 0 3
11015: PUSH
11016: LD_VAR 0 1
11020: ARRAY
11021: PPUSH
11022: LD_VAR 0 1
11026: PUSH
11027: LD_INT 4
11029: MOD
11030: PUSH
11031: LD_INT 1
11033: PLUS
11034: PPUSH
11035: CALL_OW 259
11039: PUSH
11040: LD_INT 10
11042: LESS
11043: IFFALSE 11106
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11045: LD_VAR 0 3
11049: PUSH
11050: LD_VAR 0 1
11054: ARRAY
11055: PPUSH
11056: LD_VAR 0 1
11060: PUSH
11061: LD_INT 4
11063: MOD
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: PPUSH
11069: LD_VAR 0 3
11073: PUSH
11074: LD_VAR 0 1
11078: ARRAY
11079: PPUSH
11080: LD_VAR 0 1
11084: PUSH
11085: LD_INT 4
11087: MOD
11088: PUSH
11089: LD_INT 1
11091: PLUS
11092: PPUSH
11093: CALL_OW 259
11097: PUSH
11098: LD_INT 1
11100: PLUS
11101: PPUSH
11102: CALL_OW 237
11106: GO 11008
11108: POP
11109: POP
// end ;
11110: PPOPN 3
11112: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11113: LD_EXP 8
11117: PUSH
11118: LD_EXP 16
11122: AND
11123: IFFALSE 11143
11125: GO 11127
11127: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11128: LD_INT 4
11130: PPUSH
11131: LD_OWVAR 2
11135: PPUSH
11136: LD_INT 0
11138: PPUSH
11139: CALL_OW 324
11143: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11144: LD_EXP 8
11148: PUSH
11149: LD_EXP 45
11153: AND
11154: IFFALSE 11174
11156: GO 11158
11158: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11159: LD_INT 19
11161: PPUSH
11162: LD_OWVAR 2
11166: PPUSH
11167: LD_INT 0
11169: PPUSH
11170: CALL_OW 324
11174: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11175: LD_EXP 8
11179: PUSH
11180: LD_EXP 17
11184: AND
11185: IFFALSE 11287
11187: GO 11189
11189: DISABLE
11190: LD_INT 0
11192: PPUSH
11193: PPUSH
// begin enable ;
11194: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11195: LD_ADDR_VAR 0 2
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_OWVAR 2
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: LD_INT 34
11217: PUSH
11218: LD_INT 11
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 34
11227: PUSH
11228: LD_INT 30
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// if not tmp then
11249: LD_VAR 0 2
11253: NOT
11254: IFFALSE 11258
// exit ;
11256: GO 11287
// for i in tmp do
11258: LD_ADDR_VAR 0 1
11262: PUSH
11263: LD_VAR 0 2
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11285
// begin SetLives ( i , 0 ) ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 234
// end ;
11283: GO 11268
11285: POP
11286: POP
// end ;
11287: PPOPN 2
11289: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11290: LD_EXP 8
11294: PUSH
11295: LD_EXP 18
11299: AND
11300: IFFALSE 11320
11302: GO 11304
11304: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11305: LD_INT 32
11307: PPUSH
11308: LD_OWVAR 2
11312: PPUSH
11313: LD_INT 0
11315: PPUSH
11316: CALL_OW 324
11320: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11321: LD_EXP 8
11325: PUSH
11326: LD_EXP 19
11330: AND
11331: IFFALSE 11512
11333: GO 11335
11335: DISABLE
11336: LD_INT 0
11338: PPUSH
11339: PPUSH
11340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: LD_INT 22
11348: PUSH
11349: LD_OWVAR 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 33
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PPUSH
11372: CALL_OW 69
11376: ST_TO_ADDR
// if not tmp then
11377: LD_VAR 0 2
11381: NOT
11382: IFFALSE 11386
// exit ;
11384: GO 11512
// side := 0 ;
11386: LD_ADDR_VAR 0 3
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// for i := 1 to 8 do
11394: LD_ADDR_VAR 0 1
11398: PUSH
11399: DOUBLE
11400: LD_INT 1
11402: DEC
11403: ST_TO_ADDR
11404: LD_INT 8
11406: PUSH
11407: FOR_TO
11408: IFFALSE 11456
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11410: LD_OWVAR 2
11414: PUSH
11415: LD_VAR 0 1
11419: NONEQUAL
11420: PUSH
11421: LD_OWVAR 2
11425: PPUSH
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 81
11435: PUSH
11436: LD_INT 2
11438: EQUAL
11439: AND
11440: IFFALSE 11454
// begin side := i ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_VAR 0 1
11451: ST_TO_ADDR
// break ;
11452: GO 11456
// end ;
11454: GO 11407
11456: POP
11457: POP
// if not side then
11458: LD_VAR 0 3
11462: NOT
11463: IFFALSE 11467
// exit ;
11465: GO 11512
// for i := 1 to tmp do
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_VAR 0 2
11481: PUSH
11482: FOR_TO
11483: IFFALSE 11510
// if Prob ( 60 ) then
11485: LD_INT 60
11487: PPUSH
11488: CALL_OW 13
11492: IFFALSE 11508
// SetSide ( i , side ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_VAR 0 3
11503: PPUSH
11504: CALL_OW 235
11508: GO 11482
11510: POP
11511: POP
// end ;
11512: PPOPN 3
11514: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11515: LD_EXP 8
11519: PUSH
11520: LD_EXP 21
11524: AND
11525: IFFALSE 11644
11527: GO 11529
11529: DISABLE
11530: LD_INT 0
11532: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_OWVAR 2
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 1
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 3
11562: PUSH
11563: LD_INT 23
11565: PUSH
11566: LD_INT 0
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: PUSH
11587: FOR_IN
11588: IFFALSE 11642
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 257
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: LD_INT 2
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: LD_INT 4
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: IN
11618: IFFALSE 11640
// SetClass ( un , rand ( 1 , 4 ) ) ;
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: LD_INT 4
11630: PPUSH
11631: CALL_OW 12
11635: PPUSH
11636: CALL_OW 336
11640: GO 11587
11642: POP
11643: POP
// end ;
11644: PPOPN 1
11646: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11647: LD_EXP 8
11651: PUSH
11652: LD_EXP 20
11656: AND
11657: IFFALSE 11736
11659: GO 11661
11661: DISABLE
11662: LD_INT 0
11664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_OWVAR 2
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 21
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if not tmp then
11701: LD_VAR 0 1
11705: NOT
11706: IFFALSE 11710
// exit ;
11708: GO 11736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11710: LD_VAR 0 1
11714: PUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_VAR 0 1
11722: PPUSH
11723: CALL_OW 12
11727: ARRAY
11728: PPUSH
11729: LD_INT 100
11731: PPUSH
11732: CALL_OW 234
// end ;
11736: PPOPN 1
11738: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11739: LD_EXP 8
11743: PUSH
11744: LD_EXP 22
11748: AND
11749: IFFALSE 11847
11751: GO 11753
11753: DISABLE
11754: LD_INT 0
11756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11757: LD_ADDR_VAR 0 1
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_OWVAR 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 21
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: ST_TO_ADDR
// if not tmp then
11793: LD_VAR 0 1
11797: NOT
11798: IFFALSE 11802
// exit ;
11800: GO 11847
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11802: LD_VAR 0 1
11806: PUSH
11807: LD_INT 1
11809: PPUSH
11810: LD_VAR 0 1
11814: PPUSH
11815: CALL_OW 12
11819: ARRAY
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: LD_INT 4
11826: PPUSH
11827: CALL_OW 12
11831: PPUSH
11832: LD_INT 3000
11834: PPUSH
11835: LD_INT 9000
11837: PPUSH
11838: CALL_OW 12
11842: PPUSH
11843: CALL_OW 492
// end ;
11847: PPOPN 1
11849: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11850: LD_EXP 8
11854: PUSH
11855: LD_EXP 23
11859: AND
11860: IFFALSE 11880
11862: GO 11864
11864: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11865: LD_INT 1
11867: PPUSH
11868: LD_OWVAR 2
11872: PPUSH
11873: LD_INT 0
11875: PPUSH
11876: CALL_OW 324
11880: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11881: LD_EXP 8
11885: PUSH
11886: LD_EXP 24
11890: AND
11891: IFFALSE 11974
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11900: LD_ADDR_VAR 0 2
11904: PUSH
11905: LD_INT 22
11907: PUSH
11908: LD_OWVAR 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 21
11919: PUSH
11920: LD_INT 3
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: ST_TO_ADDR
// if not tmp then
11936: LD_VAR 0 2
11940: NOT
11941: IFFALSE 11945
// exit ;
11943: GO 11974
// for i in tmp do
11945: LD_ADDR_VAR 0 1
11949: PUSH
11950: LD_VAR 0 2
11954: PUSH
11955: FOR_IN
11956: IFFALSE 11972
// SetBLevel ( i , 10 ) ;
11958: LD_VAR 0 1
11962: PPUSH
11963: LD_INT 10
11965: PPUSH
11966: CALL_OW 241
11970: GO 11955
11972: POP
11973: POP
// end ;
11974: PPOPN 2
11976: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11977: LD_EXP 8
11981: PUSH
11982: LD_EXP 25
11986: AND
11987: IFFALSE 12098
11989: GO 11991
11991: DISABLE
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11997: LD_ADDR_VAR 0 3
12001: PUSH
12002: LD_INT 22
12004: PUSH
12005: LD_OWVAR 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 25
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: ST_TO_ADDR
// if not tmp then
12033: LD_VAR 0 3
12037: NOT
12038: IFFALSE 12042
// exit ;
12040: GO 12098
// un := tmp [ rand ( 1 , tmp ) ] ;
12042: LD_ADDR_VAR 0 2
12046: PUSH
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 1
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 12
12064: ARRAY
12065: ST_TO_ADDR
// if Crawls ( un ) then
12066: LD_VAR 0 2
12070: PPUSH
12071: CALL_OW 318
12075: IFFALSE 12086
// ComWalk ( un ) ;
12077: LD_VAR 0 2
12081: PPUSH
12082: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12086: LD_VAR 0 2
12090: PPUSH
12091: LD_INT 5
12093: PPUSH
12094: CALL_OW 336
// end ;
12098: PPOPN 3
12100: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12101: LD_EXP 8
12105: PUSH
12106: LD_EXP 26
12110: AND
12111: PUSH
12112: LD_OWVAR 67
12116: PUSH
12117: LD_INT 4
12119: LESS
12120: AND
12121: IFFALSE 12140
12123: GO 12125
12125: DISABLE
// begin Difficulty := Difficulty + 1 ;
12126: LD_ADDR_OWVAR 67
12130: PUSH
12131: LD_OWVAR 67
12135: PUSH
12136: LD_INT 1
12138: PLUS
12139: ST_TO_ADDR
// end ;
12140: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12141: LD_EXP 8
12145: PUSH
12146: LD_EXP 27
12150: AND
12151: IFFALSE 12254
12153: GO 12155
12155: DISABLE
12156: LD_INT 0
12158: PPUSH
// begin for i := 1 to 5 do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: DOUBLE
12165: LD_INT 1
12167: DEC
12168: ST_TO_ADDR
12169: LD_INT 5
12171: PUSH
12172: FOR_TO
12173: IFFALSE 12252
// begin uc_nation := nation_nature ;
12175: LD_ADDR_OWVAR 21
12179: PUSH
12180: LD_INT 0
12182: ST_TO_ADDR
// uc_side := 0 ;
12183: LD_ADDR_OWVAR 20
12187: PUSH
12188: LD_INT 0
12190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12191: LD_ADDR_OWVAR 29
12195: PUSH
12196: LD_INT 12
12198: PUSH
12199: LD_INT 12
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: ST_TO_ADDR
// hc_agressivity := 20 ;
12206: LD_ADDR_OWVAR 35
12210: PUSH
12211: LD_INT 20
12213: ST_TO_ADDR
// hc_class := class_tiger ;
12214: LD_ADDR_OWVAR 28
12218: PUSH
12219: LD_INT 14
12221: ST_TO_ADDR
// hc_gallery :=  ;
12222: LD_ADDR_OWVAR 33
12226: PUSH
12227: LD_STRING 
12229: ST_TO_ADDR
// hc_name :=  ;
12230: LD_ADDR_OWVAR 26
12234: PUSH
12235: LD_STRING 
12237: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12238: CALL_OW 44
12242: PPUSH
12243: LD_INT 0
12245: PPUSH
12246: CALL_OW 51
// end ;
12250: GO 12172
12252: POP
12253: POP
// end ;
12254: PPOPN 1
12256: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12257: LD_EXP 8
12261: PUSH
12262: LD_EXP 28
12266: AND
12267: IFFALSE 12276
12269: GO 12271
12271: DISABLE
// StreamSibBomb ;
12272: CALL 12277 0 0
12276: END
// export function StreamSibBomb ; var i , x , y ; begin
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
// result := false ;
12283: LD_ADDR_VAR 0 1
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// for i := 1 to 16 do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_INT 16
12303: PUSH
12304: FOR_TO
12305: IFFALSE 12504
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12307: LD_ADDR_VAR 0 3
12311: PUSH
12312: LD_INT 10
12314: PUSH
12315: LD_INT 20
12317: PUSH
12318: LD_INT 30
12320: PUSH
12321: LD_INT 40
12323: PUSH
12324: LD_INT 50
12326: PUSH
12327: LD_INT 60
12329: PUSH
12330: LD_INT 70
12332: PUSH
12333: LD_INT 80
12335: PUSH
12336: LD_INT 90
12338: PUSH
12339: LD_INT 100
12341: PUSH
12342: LD_INT 110
12344: PUSH
12345: LD_INT 120
12347: PUSH
12348: LD_INT 130
12350: PUSH
12351: LD_INT 140
12353: PUSH
12354: LD_INT 150
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 1
12376: PPUSH
12377: LD_INT 15
12379: PPUSH
12380: CALL_OW 12
12384: ARRAY
12385: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12386: LD_ADDR_VAR 0 4
12390: PUSH
12391: LD_INT 10
12393: PUSH
12394: LD_INT 20
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 40
12402: PUSH
12403: LD_INT 50
12405: PUSH
12406: LD_INT 60
12408: PUSH
12409: LD_INT 70
12411: PUSH
12412: LD_INT 80
12414: PUSH
12415: LD_INT 90
12417: PUSH
12418: LD_INT 100
12420: PUSH
12421: LD_INT 110
12423: PUSH
12424: LD_INT 120
12426: PUSH
12427: LD_INT 130
12429: PUSH
12430: LD_INT 140
12432: PUSH
12433: LD_INT 150
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 1
12455: PPUSH
12456: LD_INT 15
12458: PPUSH
12459: CALL_OW 12
12463: ARRAY
12464: ST_TO_ADDR
// if ValidHex ( x , y ) then
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: CALL_OW 488
12479: IFFALSE 12502
// begin result := [ x , y ] ;
12481: LD_ADDR_VAR 0 1
12485: PUSH
12486: LD_VAR 0 3
12490: PUSH
12491: LD_VAR 0 4
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: ST_TO_ADDR
// break ;
12500: GO 12504
// end ; end ;
12502: GO 12304
12504: POP
12505: POP
// if result then
12506: LD_VAR 0 1
12510: IFFALSE 12570
// begin ToLua ( playSibBomb() ) ;
12512: LD_STRING playSibBomb()
12514: PPUSH
12515: CALL_OW 559
// wait ( 0 0$14 ) ;
12519: LD_INT 490
12521: PPUSH
12522: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: LD_VAR 0 1
12539: PUSH
12540: LD_INT 2
12542: ARRAY
12543: PPUSH
12544: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12548: LD_VAR 0 1
12552: PUSH
12553: LD_INT 1
12555: ARRAY
12556: PPUSH
12557: LD_VAR 0 1
12561: PUSH
12562: LD_INT 2
12564: ARRAY
12565: PPUSH
12566: CALL_OW 429
// end ; end ;
12570: LD_VAR 0 1
12574: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12575: LD_EXP 8
12579: PUSH
12580: LD_EXP 30
12584: AND
12585: IFFALSE 12597
12587: GO 12589
12589: DISABLE
// YouLost (  ) ;
12590: LD_STRING 
12592: PPUSH
12593: CALL_OW 104
12597: END
// every 0 0$1 trigger StreamModeActive and sFog do
12598: LD_EXP 8
12602: PUSH
12603: LD_EXP 29
12607: AND
12608: IFFALSE 12622
12610: GO 12612
12612: DISABLE
// FogOff ( your_side ) ;
12613: LD_OWVAR 2
12617: PPUSH
12618: CALL_OW 344
12622: END
// every 0 0$1 trigger StreamModeActive and sSun do
12623: LD_EXP 8
12627: PUSH
12628: LD_EXP 31
12632: AND
12633: IFFALSE 12661
12635: GO 12637
12637: DISABLE
// begin solar_recharge_percent := 0 ;
12638: LD_ADDR_OWVAR 79
12642: PUSH
12643: LD_INT 0
12645: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12646: LD_INT 10500
12648: PPUSH
12649: CALL_OW 67
// solar_recharge_percent := 100 ;
12653: LD_ADDR_OWVAR 79
12657: PUSH
12658: LD_INT 100
12660: ST_TO_ADDR
// end ;
12661: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12662: LD_EXP 8
12666: PUSH
12667: LD_EXP 32
12671: AND
12672: IFFALSE 12911
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin tmp := [ ] ;
12682: LD_ADDR_VAR 0 3
12686: PUSH
12687: EMPTY
12688: ST_TO_ADDR
// for i := 1 to 6 do
12689: LD_ADDR_VAR 0 1
12693: PUSH
12694: DOUBLE
12695: LD_INT 1
12697: DEC
12698: ST_TO_ADDR
12699: LD_INT 6
12701: PUSH
12702: FOR_TO
12703: IFFALSE 12808
// begin uc_nation := nation_nature ;
12705: LD_ADDR_OWVAR 21
12709: PUSH
12710: LD_INT 0
12712: ST_TO_ADDR
// uc_side := 0 ;
12713: LD_ADDR_OWVAR 20
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12721: LD_ADDR_OWVAR 29
12725: PUSH
12726: LD_INT 12
12728: PUSH
12729: LD_INT 12
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: ST_TO_ADDR
// hc_agressivity := 20 ;
12736: LD_ADDR_OWVAR 35
12740: PUSH
12741: LD_INT 20
12743: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12744: LD_ADDR_OWVAR 28
12748: PUSH
12749: LD_INT 17
12751: ST_TO_ADDR
// hc_gallery :=  ;
12752: LD_ADDR_OWVAR 33
12756: PUSH
12757: LD_STRING 
12759: ST_TO_ADDR
// hc_name :=  ;
12760: LD_ADDR_OWVAR 26
12764: PUSH
12765: LD_STRING 
12767: ST_TO_ADDR
// un := CreateHuman ;
12768: LD_ADDR_VAR 0 2
12772: PUSH
12773: CALL_OW 44
12777: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12778: LD_VAR 0 2
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 51
// tmp := tmp ^ un ;
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_VAR 0 3
12799: PUSH
12800: LD_VAR 0 2
12804: ADD
12805: ST_TO_ADDR
// end ;
12806: GO 12702
12808: POP
12809: POP
// repeat wait ( 0 0$1 ) ;
12810: LD_INT 35
12812: PPUSH
12813: CALL_OW 67
// for un in tmp do
12817: LD_ADDR_VAR 0 2
12821: PUSH
12822: LD_VAR 0 3
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12902
// begin if IsDead ( un ) then
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 301
12839: IFFALSE 12859
// begin tmp := tmp diff un ;
12841: LD_ADDR_VAR 0 3
12845: PUSH
12846: LD_VAR 0 3
12850: PUSH
12851: LD_VAR 0 2
12855: DIFF
12856: ST_TO_ADDR
// continue ;
12857: GO 12827
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12859: LD_VAR 0 2
12863: PPUSH
12864: LD_INT 3
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 0
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PPUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: CALL_OW 74
12895: PPUSH
12896: CALL_OW 115
// end ;
12900: GO 12827
12902: POP
12903: POP
// until not tmp ;
12904: LD_VAR 0 3
12908: NOT
12909: IFFALSE 12810
// end ;
12911: PPOPN 3
12913: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12914: LD_EXP 8
12918: PUSH
12919: LD_EXP 33
12923: AND
12924: IFFALSE 12978
12926: GO 12928
12928: DISABLE
// begin ToLua ( displayTroll(); ) ;
12929: LD_STRING displayTroll();
12931: PPUSH
12932: CALL_OW 559
// wait ( 3 3$00 ) ;
12936: LD_INT 6300
12938: PPUSH
12939: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12943: LD_STRING hideTroll();
12945: PPUSH
12946: CALL_OW 559
// wait ( 1 1$00 ) ;
12950: LD_INT 2100
12952: PPUSH
12953: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12957: LD_STRING displayTroll();
12959: PPUSH
12960: CALL_OW 559
// wait ( 1 1$00 ) ;
12964: LD_INT 2100
12966: PPUSH
12967: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12971: LD_STRING hideTroll();
12973: PPUSH
12974: CALL_OW 559
// end ;
12978: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12979: LD_EXP 8
12983: PUSH
12984: LD_EXP 34
12988: AND
12989: IFFALSE 13052
12991: GO 12993
12993: DISABLE
12994: LD_INT 0
12996: PPUSH
// begin p := 0 ;
12997: LD_ADDR_VAR 0 1
13001: PUSH
13002: LD_INT 0
13004: ST_TO_ADDR
// repeat game_speed := 1 ;
13005: LD_ADDR_OWVAR 65
13009: PUSH
13010: LD_INT 1
13012: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13013: LD_INT 35
13015: PPUSH
13016: CALL_OW 67
// p := p + 1 ;
13020: LD_ADDR_VAR 0 1
13024: PUSH
13025: LD_VAR 0 1
13029: PUSH
13030: LD_INT 1
13032: PLUS
13033: ST_TO_ADDR
// until p >= 60 ;
13034: LD_VAR 0 1
13038: PUSH
13039: LD_INT 60
13041: GREATEREQUAL
13042: IFFALSE 13005
// game_speed := 4 ;
13044: LD_ADDR_OWVAR 65
13048: PUSH
13049: LD_INT 4
13051: ST_TO_ADDR
// end ;
13052: PPOPN 1
13054: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13055: LD_EXP 8
13059: PUSH
13060: LD_EXP 35
13064: AND
13065: IFFALSE 13211
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_OWVAR 2
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 2
13093: PUSH
13094: LD_INT 30
13096: PUSH
13097: LD_INT 0
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PPUSH
13123: CALL_OW 69
13127: ST_TO_ADDR
// if not depot then
13128: LD_VAR 0 1
13132: NOT
13133: IFFALSE 13137
// exit ;
13135: GO 13211
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13137: LD_ADDR_VAR 0 2
13141: PUSH
13142: LD_VAR 0 1
13146: PUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_VAR 0 1
13154: PPUSH
13155: CALL_OW 12
13159: ARRAY
13160: PPUSH
13161: CALL_OW 274
13165: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13166: LD_VAR 0 2
13170: PPUSH
13171: LD_INT 1
13173: PPUSH
13174: LD_INT 0
13176: PPUSH
13177: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13181: LD_VAR 0 2
13185: PPUSH
13186: LD_INT 2
13188: PPUSH
13189: LD_INT 0
13191: PPUSH
13192: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_INT 3
13203: PPUSH
13204: LD_INT 0
13206: PPUSH
13207: CALL_OW 277
// end ;
13211: PPOPN 2
13213: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13214: LD_EXP 8
13218: PUSH
13219: LD_EXP 36
13223: AND
13224: IFFALSE 13321
13226: GO 13228
13228: DISABLE
13229: LD_INT 0
13231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13232: LD_ADDR_VAR 0 1
13236: PUSH
13237: LD_INT 22
13239: PUSH
13240: LD_OWVAR 2
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 21
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 3
13261: PUSH
13262: LD_INT 23
13264: PUSH
13265: LD_INT 0
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: ST_TO_ADDR
// if not tmp then
13286: LD_VAR 0 1
13290: NOT
13291: IFFALSE 13295
// exit ;
13293: GO 13321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13295: LD_VAR 0 1
13299: PUSH
13300: LD_INT 1
13302: PPUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 12
13312: ARRAY
13313: PPUSH
13314: LD_INT 200
13316: PPUSH
13317: CALL_OW 234
// end ;
13321: PPOPN 1
13323: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13324: LD_EXP 8
13328: PUSH
13329: LD_EXP 37
13333: AND
13334: IFFALSE 13413
13336: GO 13338
13338: DISABLE
13339: LD_INT 0
13341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13342: LD_ADDR_VAR 0 1
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_OWVAR 2
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 21
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PPUSH
13373: CALL_OW 69
13377: ST_TO_ADDR
// if not tmp then
13378: LD_VAR 0 1
13382: NOT
13383: IFFALSE 13387
// exit ;
13385: GO 13413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13387: LD_VAR 0 1
13391: PUSH
13392: LD_INT 1
13394: PPUSH
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: PPUSH
13406: LD_INT 60
13408: PPUSH
13409: CALL_OW 234
// end ;
13413: PPOPN 1
13415: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13416: LD_EXP 8
13420: PUSH
13421: LD_EXP 38
13425: AND
13426: IFFALSE 13525
13428: GO 13430
13430: DISABLE
13431: LD_INT 0
13433: PPUSH
13434: PPUSH
// begin enable ;
13435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13436: LD_ADDR_VAR 0 1
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_OWVAR 2
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 61
13455: PUSH
13456: EMPTY
13457: LIST
13458: PUSH
13459: LD_INT 33
13461: PUSH
13462: LD_INT 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: PPUSH
13474: CALL_OW 69
13478: ST_TO_ADDR
// if not tmp then
13479: LD_VAR 0 1
13483: NOT
13484: IFFALSE 13488
// exit ;
13486: GO 13525
// for i in tmp do
13488: LD_ADDR_VAR 0 2
13492: PUSH
13493: LD_VAR 0 1
13497: PUSH
13498: FOR_IN
13499: IFFALSE 13523
// if IsControledBy ( i ) then
13501: LD_VAR 0 2
13505: PPUSH
13506: CALL_OW 312
13510: IFFALSE 13521
// ComUnlink ( i ) ;
13512: LD_VAR 0 2
13516: PPUSH
13517: CALL_OW 136
13521: GO 13498
13523: POP
13524: POP
// end ;
13525: PPOPN 2
13527: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13528: LD_EXP 8
13532: PUSH
13533: LD_EXP 39
13537: AND
13538: IFFALSE 13678
13540: GO 13542
13542: DISABLE
13543: LD_INT 0
13545: PPUSH
13546: PPUSH
// begin ToLua ( displayPowell(); ) ;
13547: LD_STRING displayPowell();
13549: PPUSH
13550: CALL_OW 559
// uc_side := 0 ;
13554: LD_ADDR_OWVAR 20
13558: PUSH
13559: LD_INT 0
13561: ST_TO_ADDR
// uc_nation := 2 ;
13562: LD_ADDR_OWVAR 21
13566: PUSH
13567: LD_INT 2
13569: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13570: LD_ADDR_OWVAR 37
13574: PUSH
13575: LD_INT 14
13577: ST_TO_ADDR
// vc_engine := engine_siberite ;
13578: LD_ADDR_OWVAR 39
13582: PUSH
13583: LD_INT 3
13585: ST_TO_ADDR
// vc_control := control_apeman ;
13586: LD_ADDR_OWVAR 38
13590: PUSH
13591: LD_INT 5
13593: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13594: LD_ADDR_OWVAR 40
13598: PUSH
13599: LD_INT 29
13601: ST_TO_ADDR
// un := CreateVehicle ;
13602: LD_ADDR_VAR 0 2
13606: PUSH
13607: CALL_OW 45
13611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13624: LD_INT 35
13626: PPUSH
13627: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_INT 22
13638: PUSH
13639: LD_OWVAR 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PPUSH
13653: LD_VAR 0 2
13657: PPUSH
13658: CALL_OW 74
13662: PPUSH
13663: CALL_OW 115
// until IsDead ( un ) ;
13667: LD_VAR 0 2
13671: PPUSH
13672: CALL_OW 301
13676: IFFALSE 13624
// end ;
13678: PPOPN 2
13680: END
// every 0 0$1 trigger StreamModeActive and sStu do
13681: LD_EXP 8
13685: PUSH
13686: LD_EXP 47
13690: AND
13691: IFFALSE 13707
13693: GO 13695
13695: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13696: LD_STRING displayStucuk();
13698: PPUSH
13699: CALL_OW 559
// ResetFog ;
13703: CALL_OW 335
// end ;
13707: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13708: LD_EXP 8
13712: PUSH
13713: LD_EXP 40
13717: AND
13718: IFFALSE 13859
13720: GO 13722
13722: DISABLE
13723: LD_INT 0
13725: PPUSH
13726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_INT 22
13734: PUSH
13735: LD_OWVAR 2
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 21
13746: PUSH
13747: LD_INT 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if not tmp then
13763: LD_VAR 0 2
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 13859
// un := tmp [ rand ( 1 , tmp ) ] ;
13772: LD_ADDR_VAR 0 1
13776: PUSH
13777: LD_VAR 0 2
13781: PUSH
13782: LD_INT 1
13784: PPUSH
13785: LD_VAR 0 2
13789: PPUSH
13790: CALL_OW 12
13794: ARRAY
13795: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13796: LD_VAR 0 1
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13808: LD_VAR 0 1
13812: PPUSH
13813: LD_OWVAR 3
13817: PUSH
13818: LD_VAR 0 1
13822: DIFF
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 74
13833: PPUSH
13834: CALL_OW 115
// wait ( 0 0$20 ) ;
13838: LD_INT 700
13840: PPUSH
13841: CALL_OW 67
// SetSide ( un , your_side ) ;
13845: LD_VAR 0 1
13849: PPUSH
13850: LD_OWVAR 2
13854: PPUSH
13855: CALL_OW 235
// end ;
13859: PPOPN 2
13861: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13862: LD_EXP 8
13866: PUSH
13867: LD_EXP 41
13871: AND
13872: IFFALSE 13978
13874: GO 13876
13876: DISABLE
13877: LD_INT 0
13879: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13880: LD_ADDR_VAR 0 1
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_OWVAR 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 30
13902: PUSH
13903: LD_INT 0
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 30
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PPUSH
13929: CALL_OW 69
13933: ST_TO_ADDR
// if not depot then
13934: LD_VAR 0 1
13938: NOT
13939: IFFALSE 13943
// exit ;
13941: GO 13978
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13943: LD_VAR 0 1
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 250
13956: PPUSH
13957: LD_VAR 0 1
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PPUSH
13966: CALL_OW 251
13970: PPUSH
13971: LD_INT 70
13973: PPUSH
13974: CALL_OW 495
// end ;
13978: PPOPN 1
13980: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13981: LD_EXP 8
13985: PUSH
13986: LD_EXP 42
13990: AND
13991: IFFALSE 14202
13993: GO 13995
13995: DISABLE
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_OWVAR 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 21
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 5
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 14202
// for i in tmp do
14048: LD_ADDR_VAR 0 1
14052: PUSH
14053: LD_VAR 0 5
14057: PUSH
14058: FOR_IN
14059: IFFALSE 14200
// begin d := rand ( 0 , 5 ) ;
14061: LD_ADDR_VAR 0 4
14065: PUSH
14066: LD_INT 0
14068: PPUSH
14069: LD_INT 5
14071: PPUSH
14072: CALL_OW 12
14076: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14077: LD_ADDR_VAR 0 2
14081: PUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 250
14091: PPUSH
14092: LD_VAR 0 4
14096: PPUSH
14097: LD_INT 3
14099: PPUSH
14100: LD_INT 12
14102: PPUSH
14103: CALL_OW 12
14107: PPUSH
14108: CALL_OW 272
14112: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 251
14127: PPUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: LD_INT 3
14135: PPUSH
14136: LD_INT 12
14138: PPUSH
14139: CALL_OW 12
14143: PPUSH
14144: CALL_OW 273
14148: ST_TO_ADDR
// if ValidHex ( x , y ) then
14149: LD_VAR 0 2
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: CALL_OW 488
14163: IFFALSE 14198
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14165: LD_VAR 0 1
14169: PPUSH
14170: LD_VAR 0 2
14174: PPUSH
14175: LD_VAR 0 3
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: LD_INT 6
14185: PPUSH
14186: CALL_OW 12
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 483
// end ;
14198: GO 14058
14200: POP
14201: POP
// end ;
14202: PPOPN 5
14204: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14205: LD_EXP 8
14209: PUSH
14210: LD_EXP 43
14214: AND
14215: IFFALSE 14309
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14224: LD_ADDR_VAR 0 2
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_OWVAR 2
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 32
14243: PUSH
14244: LD_INT 1
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 21
14253: PUSH
14254: LD_INT 2
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// if not tmp then
14271: LD_VAR 0 2
14275: NOT
14276: IFFALSE 14280
// exit ;
14278: GO 14309
// for i in tmp do
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: LD_VAR 0 2
14289: PUSH
14290: FOR_IN
14291: IFFALSE 14307
// SetFuel ( i , 0 ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 0
14300: PPUSH
14301: CALL_OW 240
14305: GO 14290
14307: POP
14308: POP
// end ;
14309: PPOPN 2
14311: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14312: LD_EXP 8
14316: PUSH
14317: LD_EXP 44
14321: AND
14322: IFFALSE 14388
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14330: LD_ADDR_VAR 0 1
14334: PUSH
14335: LD_INT 22
14337: PUSH
14338: LD_OWVAR 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 29
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if not tmp then
14366: LD_VAR 0 1
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14388
// DestroyUnit ( tmp [ 1 ] ) ;
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 1
14382: ARRAY
14383: PPUSH
14384: CALL_OW 65
// end ;
14388: PPOPN 1
14390: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14391: LD_EXP 8
14395: PUSH
14396: LD_EXP 46
14400: AND
14401: IFFALSE 14530
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
// begin uc_side := 0 ;
14409: LD_ADDR_OWVAR 20
14413: PUSH
14414: LD_INT 0
14416: ST_TO_ADDR
// uc_nation := nation_arabian ;
14417: LD_ADDR_OWVAR 21
14421: PUSH
14422: LD_INT 2
14424: ST_TO_ADDR
// hc_gallery :=  ;
14425: LD_ADDR_OWVAR 33
14429: PUSH
14430: LD_STRING 
14432: ST_TO_ADDR
// hc_name :=  ;
14433: LD_ADDR_OWVAR 26
14437: PUSH
14438: LD_STRING 
14440: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14441: LD_INT 1
14443: PPUSH
14444: LD_INT 11
14446: PPUSH
14447: LD_INT 10
14449: PPUSH
14450: CALL_OW 380
// un := CreateHuman ;
14454: LD_ADDR_VAR 0 1
14458: PUSH
14459: CALL_OW 44
14463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14476: LD_INT 35
14478: PPUSH
14479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14483: LD_VAR 0 1
14487: PPUSH
14488: LD_INT 22
14490: PUSH
14491: LD_OWVAR 2
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PPUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 74
14514: PPUSH
14515: CALL_OW 115
// until IsDead ( un ) ;
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 301
14528: IFFALSE 14476
// end ;
14530: PPOPN 1
14532: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14533: LD_EXP 8
14537: PUSH
14538: LD_EXP 48
14542: AND
14543: IFFALSE 14555
14545: GO 14547
14547: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14548: LD_STRING earthquake(getX(game), 0, 32)
14550: PPUSH
14551: CALL_OW 559
14555: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14556: LD_EXP 8
14560: PUSH
14561: LD_EXP 49
14565: AND
14566: IFFALSE 14657
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
// begin enable ;
14574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14575: LD_ADDR_VAR 0 1
14579: PUSH
14580: LD_INT 22
14582: PUSH
14583: LD_OWVAR 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 2
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 33
14604: PUSH
14605: LD_INT 3
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PPUSH
14617: CALL_OW 69
14621: ST_TO_ADDR
// if not tmp then
14622: LD_VAR 0 1
14626: NOT
14627: IFFALSE 14631
// exit ;
14629: GO 14657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: PPUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 12
14648: ARRAY
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 234
// end ;
14657: PPOPN 1
14659: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14660: LD_EXP 8
14664: PUSH
14665: LD_EXP 50
14669: AND
14670: IFFALSE 14811
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
14679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: LD_INT 22
14687: PUSH
14688: LD_OWVAR 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 25
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PPUSH
14711: CALL_OW 69
14715: ST_TO_ADDR
// if not tmp then
14716: LD_VAR 0 3
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14811
// un := tmp [ rand ( 1 , tmp ) ] ;
14725: LD_ADDR_VAR 0 2
14729: PUSH
14730: LD_VAR 0 3
14734: PUSH
14735: LD_INT 1
14737: PPUSH
14738: LD_VAR 0 3
14742: PPUSH
14743: CALL_OW 12
14747: ARRAY
14748: ST_TO_ADDR
// if Crawls ( un ) then
14749: LD_VAR 0 2
14753: PPUSH
14754: CALL_OW 318
14758: IFFALSE 14769
// ComWalk ( un ) ;
14760: LD_VAR 0 2
14764: PPUSH
14765: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14769: LD_VAR 0 2
14773: PPUSH
14774: LD_INT 9
14776: PPUSH
14777: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14781: LD_INT 28
14783: PPUSH
14784: LD_OWVAR 2
14788: PPUSH
14789: LD_INT 2
14791: PPUSH
14792: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14796: LD_INT 29
14798: PPUSH
14799: LD_OWVAR 2
14803: PPUSH
14804: LD_INT 2
14806: PPUSH
14807: CALL_OW 322
// end ;
14811: PPOPN 3
14813: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14814: LD_EXP 8
14818: PUSH
14819: LD_EXP 51
14823: AND
14824: IFFALSE 14935
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
14833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14834: LD_ADDR_VAR 0 3
14838: PUSH
14839: LD_INT 22
14841: PUSH
14842: LD_OWVAR 2
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 25
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PPUSH
14865: CALL_OW 69
14869: ST_TO_ADDR
// if not tmp then
14870: LD_VAR 0 3
14874: NOT
14875: IFFALSE 14879
// exit ;
14877: GO 14935
// un := tmp [ rand ( 1 , tmp ) ] ;
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: CALL_OW 12
14901: ARRAY
14902: ST_TO_ADDR
// if Crawls ( un ) then
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 318
14912: IFFALSE 14923
// ComWalk ( un ) ;
14914: LD_VAR 0 2
14918: PPUSH
14919: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14923: LD_VAR 0 2
14927: PPUSH
14928: LD_INT 8
14930: PPUSH
14931: CALL_OW 336
// end ;
14935: PPOPN 3
14937: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14938: LD_EXP 8
14942: PUSH
14943: LD_EXP 52
14947: AND
14948: IFFALSE 15092
14950: GO 14952
14952: DISABLE
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_OWVAR 2
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 21
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 34
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 34
14999: PUSH
15000: LD_INT 51
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 34
15009: PUSH
15010: LD_INT 32
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: PPUSH
15028: CALL_OW 69
15032: ST_TO_ADDR
// if not tmp then
15033: LD_VAR 0 2
15037: NOT
15038: IFFALSE 15042
// exit ;
15040: GO 15092
// for i in tmp do
15042: LD_ADDR_VAR 0 1
15046: PUSH
15047: LD_VAR 0 2
15051: PUSH
15052: FOR_IN
15053: IFFALSE 15090
// if GetCargo ( i , mat_artifact ) = 0 then
15055: LD_VAR 0 1
15059: PPUSH
15060: LD_INT 4
15062: PPUSH
15063: CALL_OW 289
15067: PUSH
15068: LD_INT 0
15070: EQUAL
15071: IFFALSE 15088
// SetCargo ( i , mat_siberit , 100 ) ;
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 3
15080: PPUSH
15081: LD_INT 100
15083: PPUSH
15084: CALL_OW 290
15088: GO 15052
15090: POP
15091: POP
// end ;
15092: PPOPN 2
15094: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15095: LD_EXP 8
15099: PUSH
15100: LD_EXP 53
15104: AND
15105: IFFALSE 15288
15107: GO 15109
15109: DISABLE
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15114: LD_ADDR_VAR 0 2
15118: PUSH
15119: LD_INT 22
15121: PUSH
15122: LD_OWVAR 2
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 69
15135: ST_TO_ADDR
// if not tmp then
15136: LD_VAR 0 2
15140: NOT
15141: IFFALSE 15145
// exit ;
15143: GO 15288
// for i := 1 to 2 do
15145: LD_ADDR_VAR 0 1
15149: PUSH
15150: DOUBLE
15151: LD_INT 1
15153: DEC
15154: ST_TO_ADDR
15155: LD_INT 2
15157: PUSH
15158: FOR_TO
15159: IFFALSE 15286
// begin uc_side := your_side ;
15161: LD_ADDR_OWVAR 20
15165: PUSH
15166: LD_OWVAR 2
15170: ST_TO_ADDR
// uc_nation := nation_american ;
15171: LD_ADDR_OWVAR 21
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// vc_chassis := us_morphling ;
15179: LD_ADDR_OWVAR 37
15183: PUSH
15184: LD_INT 5
15186: ST_TO_ADDR
// vc_engine := engine_siberite ;
15187: LD_ADDR_OWVAR 39
15191: PUSH
15192: LD_INT 3
15194: ST_TO_ADDR
// vc_control := control_computer ;
15195: LD_ADDR_OWVAR 38
15199: PUSH
15200: LD_INT 3
15202: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15203: LD_ADDR_OWVAR 40
15207: PUSH
15208: LD_INT 10
15210: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15211: LD_VAR 0 2
15215: PUSH
15216: LD_INT 1
15218: ARRAY
15219: PPUSH
15220: CALL_OW 310
15224: NOT
15225: IFFALSE 15272
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15227: CALL_OW 45
15231: PPUSH
15232: LD_VAR 0 2
15236: PUSH
15237: LD_INT 1
15239: ARRAY
15240: PPUSH
15241: CALL_OW 250
15245: PPUSH
15246: LD_VAR 0 2
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: PPUSH
15255: CALL_OW 251
15259: PPUSH
15260: LD_INT 12
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 50
15270: GO 15284
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15272: CALL_OW 45
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 51
// end ;
15284: GO 15158
15286: POP
15287: POP
// end ;
15288: PPOPN 2
15290: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15291: LD_EXP 8
15295: PUSH
15296: LD_EXP 54
15300: AND
15301: IFFALSE 15523
15303: GO 15305
15305: DISABLE
15306: LD_INT 0
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15314: LD_ADDR_VAR 0 6
15318: PUSH
15319: LD_INT 22
15321: PUSH
15322: LD_OWVAR 2
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: LD_INT 23
15346: PUSH
15347: LD_INT 0
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 69
15367: ST_TO_ADDR
// if not tmp then
15368: LD_VAR 0 6
15372: NOT
15373: IFFALSE 15377
// exit ;
15375: GO 15523
// s1 := rand ( 1 , 4 ) ;
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 4
15387: PPUSH
15388: CALL_OW 12
15392: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15393: LD_ADDR_VAR 0 4
15397: PUSH
15398: LD_VAR 0 6
15402: PUSH
15403: LD_INT 1
15405: ARRAY
15406: PPUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 259
15416: ST_TO_ADDR
// if s1 = 1 then
15417: LD_VAR 0 2
15421: PUSH
15422: LD_INT 1
15424: EQUAL
15425: IFFALSE 15445
// s2 := rand ( 2 , 4 ) else
15427: LD_ADDR_VAR 0 3
15431: PUSH
15432: LD_INT 2
15434: PPUSH
15435: LD_INT 4
15437: PPUSH
15438: CALL_OW 12
15442: ST_TO_ADDR
15443: GO 15453
// s2 := 1 ;
15445: LD_ADDR_VAR 0 3
15449: PUSH
15450: LD_INT 1
15452: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15453: LD_ADDR_VAR 0 5
15457: PUSH
15458: LD_VAR 0 6
15462: PUSH
15463: LD_INT 1
15465: ARRAY
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: CALL_OW 259
15476: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15477: LD_VAR 0 6
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 5
15495: PPUSH
15496: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15500: LD_VAR 0 6
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: CALL_OW 237
// end ;
15523: PPOPN 6
15525: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15526: LD_EXP 8
15530: PUSH
15531: LD_EXP 55
15535: AND
15536: IFFALSE 15615
15538: GO 15540
15540: DISABLE
15541: LD_INT 0
15543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15544: LD_ADDR_VAR 0 1
15548: PUSH
15549: LD_INT 22
15551: PUSH
15552: LD_OWVAR 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PPUSH
15575: CALL_OW 69
15579: ST_TO_ADDR
// if not tmp then
15580: LD_VAR 0 1
15584: NOT
15585: IFFALSE 15589
// exit ;
15587: GO 15615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15589: LD_VAR 0 1
15593: PUSH
15594: LD_INT 1
15596: PPUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 12
15606: ARRAY
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 234
// end ;
15615: PPOPN 1
15617: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15618: LD_EXP 8
15622: PUSH
15623: LD_EXP 56
15627: AND
15628: IFFALSE 15740
15630: GO 15632
15632: DISABLE
15633: LD_INT 0
15635: PPUSH
15636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15637: LD_ADDR_VAR 0 2
15641: PUSH
15642: LD_INT 22
15644: PUSH
15645: LD_OWVAR 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: LD_INT 30
15659: PUSH
15660: LD_INT 27
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 30
15669: PUSH
15670: LD_INT 26
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 30
15679: PUSH
15680: LD_INT 28
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: ST_TO_ADDR
// if not tmp then
15702: LD_VAR 0 2
15706: NOT
15707: IFFALSE 15711
// exit ;
15709: GO 15740
// for i in tmp do
15711: LD_ADDR_VAR 0 1
15715: PUSH
15716: LD_VAR 0 2
15720: PUSH
15721: FOR_IN
15722: IFFALSE 15738
// SetLives ( i , 1 ) ;
15724: LD_VAR 0 1
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 234
15736: GO 15721
15738: POP
15739: POP
// end ;
15740: PPOPN 2
15742: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15743: LD_EXP 8
15747: PUSH
15748: LD_EXP 57
15752: AND
15753: IFFALSE 16040
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
// begin i := rand ( 1 , 7 ) ;
15763: LD_ADDR_VAR 0 1
15767: PUSH
15768: LD_INT 1
15770: PPUSH
15771: LD_INT 7
15773: PPUSH
15774: CALL_OW 12
15778: ST_TO_ADDR
// case i of 1 :
15779: LD_VAR 0 1
15783: PUSH
15784: LD_INT 1
15786: DOUBLE
15787: EQUAL
15788: IFTRUE 15792
15790: GO 15802
15792: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15793: LD_STRING earthquake(getX(game), 0, 32)
15795: PPUSH
15796: CALL_OW 559
15800: GO 16040
15802: LD_INT 2
15804: DOUBLE
15805: EQUAL
15806: IFTRUE 15810
15808: GO 15824
15810: POP
// begin ToLua ( displayStucuk(); ) ;
15811: LD_STRING displayStucuk();
15813: PPUSH
15814: CALL_OW 559
// ResetFog ;
15818: CALL_OW 335
// end ; 3 :
15822: GO 16040
15824: LD_INT 3
15826: DOUBLE
15827: EQUAL
15828: IFTRUE 15832
15830: GO 15936
15832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15833: LD_ADDR_VAR 0 2
15837: PUSH
15838: LD_INT 22
15840: PUSH
15841: LD_OWVAR 2
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 25
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// if not tmp then
15869: LD_VAR 0 2
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 16040
// un := tmp [ rand ( 1 , tmp ) ] ;
15878: LD_ADDR_VAR 0 3
15882: PUSH
15883: LD_VAR 0 2
15887: PUSH
15888: LD_INT 1
15890: PPUSH
15891: LD_VAR 0 2
15895: PPUSH
15896: CALL_OW 12
15900: ARRAY
15901: ST_TO_ADDR
// if Crawls ( un ) then
15902: LD_VAR 0 3
15906: PPUSH
15907: CALL_OW 318
15911: IFFALSE 15922
// ComWalk ( un ) ;
15913: LD_VAR 0 3
15917: PPUSH
15918: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_INT 8
15929: PPUSH
15930: CALL_OW 336
// end ; 4 :
15934: GO 16040
15936: LD_INT 4
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 16018
15944: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_OWVAR 2
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 30
15964: PUSH
15965: LD_INT 29
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PPUSH
15976: CALL_OW 69
15980: ST_TO_ADDR
// if not tmp then
15981: LD_VAR 0 2
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16040
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15990: LD_VAR 0 2
15994: PUSH
15995: LD_INT 1
15997: ARRAY
15998: PPUSH
15999: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16003: LD_VAR 0 2
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: CALL_OW 65
// end ; 5 .. 7 :
16016: GO 16040
16018: LD_INT 5
16020: DOUBLE
16021: GREATEREQUAL
16022: IFFALSE 16030
16024: LD_INT 7
16026: DOUBLE
16027: LESSEQUAL
16028: IFTRUE 16032
16030: GO 16039
16032: POP
// StreamSibBomb ; end ;
16033: CALL 12277 0 0
16037: GO 16040
16039: POP
// end ;
16040: PPOPN 3
16042: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16043: LD_EXP 8
16047: PUSH
16048: LD_EXP 58
16052: AND
16053: IFFALSE 16209
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16063: LD_ADDR_VAR 0 2
16067: PUSH
16068: LD_INT 81
16070: PUSH
16071: LD_OWVAR 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: LD_INT 21
16085: PUSH
16086: LD_INT 1
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 21
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: ST_TO_ADDR
// if not tmp then
16117: LD_VAR 0 2
16121: NOT
16122: IFFALSE 16126
// exit ;
16124: GO 16209
// p := 0 ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_INT 0
16133: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16134: LD_INT 35
16136: PPUSH
16137: CALL_OW 67
// p := p + 1 ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_VAR 0 3
16150: PUSH
16151: LD_INT 1
16153: PLUS
16154: ST_TO_ADDR
// for i in tmp do
16155: LD_ADDR_VAR 0 1
16159: PUSH
16160: LD_VAR 0 2
16164: PUSH
16165: FOR_IN
16166: IFFALSE 16197
// if GetLives ( i ) < 1000 then
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 256
16177: PUSH
16178: LD_INT 1000
16180: LESS
16181: IFFALSE 16195
// SetLives ( i , 1000 ) ;
16183: LD_VAR 0 1
16187: PPUSH
16188: LD_INT 1000
16190: PPUSH
16191: CALL_OW 234
16195: GO 16165
16197: POP
16198: POP
// until p > 20 ;
16199: LD_VAR 0 3
16203: PUSH
16204: LD_INT 20
16206: GREATER
16207: IFFALSE 16134
// end ;
16209: PPOPN 3
16211: END
// every 0 0$1 trigger StreamModeActive and sTime do
16212: LD_EXP 8
16216: PUSH
16217: LD_EXP 59
16221: AND
16222: IFFALSE 16257
16224: GO 16226
16226: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16227: LD_INT 28
16229: PPUSH
16230: LD_OWVAR 2
16234: PPUSH
16235: LD_INT 2
16237: PPUSH
16238: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16242: LD_INT 30
16244: PPUSH
16245: LD_OWVAR 2
16249: PPUSH
16250: LD_INT 2
16252: PPUSH
16253: CALL_OW 322
// end ;
16257: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16258: LD_EXP 8
16262: PUSH
16263: LD_EXP 60
16267: AND
16268: IFFALSE 16389
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_OWVAR 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 21
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 3
16306: PUSH
16307: LD_INT 23
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: ST_TO_ADDR
// if not tmp then
16331: LD_VAR 0 2
16335: NOT
16336: IFFALSE 16340
// exit ;
16338: GO 16389
// for i in tmp do
16340: LD_ADDR_VAR 0 1
16344: PUSH
16345: LD_VAR 0 2
16349: PUSH
16350: FOR_IN
16351: IFFALSE 16387
// begin if Crawls ( i ) then
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 318
16362: IFFALSE 16373
// ComWalk ( i ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 138
// SetClass ( i , 2 ) ;
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_INT 2
16380: PPUSH
16381: CALL_OW 336
// end ;
16385: GO 16350
16387: POP
16388: POP
// end ;
16389: PPOPN 2
16391: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16392: LD_EXP 8
16396: PUSH
16397: LD_EXP 61
16401: AND
16402: IFFALSE 16690
16404: GO 16406
16406: DISABLE
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
16411: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16412: LD_OWVAR 2
16416: PPUSH
16417: LD_INT 9
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: LD_INT 1
16425: PPUSH
16426: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16430: LD_INT 9
16432: PPUSH
16433: LD_OWVAR 2
16437: PPUSH
16438: CALL_OW 343
// uc_side := 9 ;
16442: LD_ADDR_OWVAR 20
16446: PUSH
16447: LD_INT 9
16449: ST_TO_ADDR
// uc_nation := 2 ;
16450: LD_ADDR_OWVAR 21
16454: PUSH
16455: LD_INT 2
16457: ST_TO_ADDR
// hc_name := Dark Warrior ;
16458: LD_ADDR_OWVAR 26
16462: PUSH
16463: LD_STRING Dark Warrior
16465: ST_TO_ADDR
// hc_gallery :=  ;
16466: LD_ADDR_OWVAR 33
16470: PUSH
16471: LD_STRING 
16473: ST_TO_ADDR
// hc_noskilllimit := true ;
16474: LD_ADDR_OWVAR 76
16478: PUSH
16479: LD_INT 1
16481: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16482: LD_ADDR_OWVAR 31
16486: PUSH
16487: LD_INT 30
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 30
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: ST_TO_ADDR
// un := CreateHuman ;
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: CALL_OW 44
16514: ST_TO_ADDR
// hc_noskilllimit := false ;
16515: LD_ADDR_OWVAR 76
16519: PUSH
16520: LD_INT 0
16522: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16523: LD_VAR 0 3
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 51
// ToLua ( playRanger() ) ;
16535: LD_STRING playRanger()
16537: PPUSH
16538: CALL_OW 559
// p := 0 ;
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16550: LD_INT 35
16552: PPUSH
16553: CALL_OW 67
// p := p + 1 ;
16557: LD_ADDR_VAR 0 2
16561: PUSH
16562: LD_VAR 0 2
16566: PUSH
16567: LD_INT 1
16569: PLUS
16570: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16571: LD_VAR 0 3
16575: PPUSH
16576: CALL_OW 256
16580: PUSH
16581: LD_INT 1000
16583: LESS
16584: IFFALSE 16598
// SetLives ( un , 1000 ) ;
16586: LD_VAR 0 3
16590: PPUSH
16591: LD_INT 1000
16593: PPUSH
16594: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16598: LD_VAR 0 3
16602: PPUSH
16603: LD_INT 81
16605: PUSH
16606: LD_OWVAR 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 91
16617: PUSH
16618: LD_VAR 0 3
16622: PUSH
16623: LD_INT 30
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: CALL_OW 74
16649: PPUSH
16650: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 80
16661: GREATER
16662: PUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: CALL_OW 301
16672: OR
16673: IFFALSE 16550
// if un then
16675: LD_VAR 0 3
16679: IFFALSE 16690
// RemoveUnit ( un ) ;
16681: LD_VAR 0 3
16685: PPUSH
16686: CALL_OW 64
// end ;
16690: PPOPN 3
16692: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16693: LD_EXP 62
16697: IFFALSE 16813
16699: GO 16701
16701: DISABLE
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16707: LD_ADDR_VAR 0 2
16711: PUSH
16712: LD_INT 81
16714: PUSH
16715: LD_OWVAR 2
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16743: LD_STRING playComputer()
16745: PPUSH
16746: CALL_OW 559
// if not tmp then
16750: LD_VAR 0 2
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 16813
// for i in tmp do
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: FOR_IN
16770: IFFALSE 16811
// for j := 1 to 4 do
16772: LD_ADDR_VAR 0 3
16776: PUSH
16777: DOUBLE
16778: LD_INT 1
16780: DEC
16781: ST_TO_ADDR
16782: LD_INT 4
16784: PUSH
16785: FOR_TO
16786: IFFALSE 16807
// SetSkill ( i , j , 10 ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_INT 10
16800: PPUSH
16801: CALL_OW 237
16805: GO 16785
16807: POP
16808: POP
16809: GO 16769
16811: POP
16812: POP
// end ;
16813: PPOPN 3
16815: END
// every 0 0$1 trigger s30 do var i , tmp ;
16816: LD_EXP 63
16820: IFFALSE 16889
16822: GO 16824
16824: DISABLE
16825: LD_INT 0
16827: PPUSH
16828: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16829: LD_ADDR_VAR 0 2
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: ST_TO_ADDR
// if not tmp then
16851: LD_VAR 0 2
16855: NOT
16856: IFFALSE 16860
// exit ;
16858: GO 16889
// for i in tmp do
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_VAR 0 2
16869: PUSH
16870: FOR_IN
16871: IFFALSE 16887
// SetLives ( i , 300 ) ;
16873: LD_VAR 0 1
16877: PPUSH
16878: LD_INT 300
16880: PPUSH
16881: CALL_OW 234
16885: GO 16870
16887: POP
16888: POP
// end ;
16889: PPOPN 2
16891: END
// every 0 0$1 trigger s60 do var i , tmp ;
16892: LD_EXP 64
16896: IFFALSE 16965
16898: GO 16900
16900: DISABLE
16901: LD_INT 0
16903: PPUSH
16904: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16905: LD_ADDR_VAR 0 2
16909: PUSH
16910: LD_INT 22
16912: PUSH
16913: LD_OWVAR 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PPUSH
16922: CALL_OW 69
16926: ST_TO_ADDR
// if not tmp then
16927: LD_VAR 0 2
16931: NOT
16932: IFFALSE 16936
// exit ;
16934: GO 16965
// for i in tmp do
16936: LD_ADDR_VAR 0 1
16940: PUSH
16941: LD_VAR 0 2
16945: PUSH
16946: FOR_IN
16947: IFFALSE 16963
// SetLives ( i , 600 ) ;
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_INT 600
16956: PPUSH
16957: CALL_OW 234
16961: GO 16946
16963: POP
16964: POP
// end ;
16965: PPOPN 2
16967: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16968: LD_INT 0
16970: PPUSH
// case cmd of 301 :
16971: LD_VAR 0 1
16975: PUSH
16976: LD_INT 301
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 17016
16984: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16985: LD_VAR 0 6
16989: PPUSH
16990: LD_VAR 0 7
16994: PPUSH
16995: LD_VAR 0 8
16999: PPUSH
17000: LD_VAR 0 4
17004: PPUSH
17005: LD_VAR 0 5
17009: PPUSH
17010: CALL 18225 0 5
17014: GO 17137
17016: LD_INT 302
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17061
17024: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17025: LD_VAR 0 6
17029: PPUSH
17030: LD_VAR 0 7
17034: PPUSH
17035: LD_VAR 0 8
17039: PPUSH
17040: LD_VAR 0 9
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: LD_VAR 0 5
17054: PPUSH
17055: CALL 18316 0 6
17059: GO 17137
17061: LD_INT 303
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17106
17069: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17070: LD_VAR 0 6
17074: PPUSH
17075: LD_VAR 0 7
17079: PPUSH
17080: LD_VAR 0 8
17084: PPUSH
17085: LD_VAR 0 9
17089: PPUSH
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL 17142 0 6
17104: GO 17137
17106: LD_INT 304
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17136
17114: POP
// hHackTeleport ( unit , x , y ) ; end ;
17115: LD_VAR 0 2
17119: PPUSH
17120: LD_VAR 0 4
17124: PPUSH
17125: LD_VAR 0 5
17129: PPUSH
17130: CALL 18909 0 3
17134: GO 17137
17136: POP
// end ;
17137: LD_VAR 0 12
17141: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17146: LD_VAR 0 1
17150: PUSH
17151: LD_INT 1
17153: LESS
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 3
17162: GREATER
17163: OR
17164: PUSH
17165: LD_VAR 0 5
17169: PPUSH
17170: LD_VAR 0 6
17174: PPUSH
17175: CALL_OW 428
17179: OR
17180: IFFALSE 17184
// exit ;
17182: GO 17912
// uc_side := your_side ;
17184: LD_ADDR_OWVAR 20
17188: PUSH
17189: LD_OWVAR 2
17193: ST_TO_ADDR
// uc_nation := nation ;
17194: LD_ADDR_OWVAR 21
17198: PUSH
17199: LD_VAR 0 1
17203: ST_TO_ADDR
// bc_level = 1 ;
17204: LD_ADDR_OWVAR 43
17208: PUSH
17209: LD_INT 1
17211: ST_TO_ADDR
// case btype of 1 :
17212: LD_VAR 0 2
17216: PUSH
17217: LD_INT 1
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17236
17225: POP
// bc_type := b_depot ; 2 :
17226: LD_ADDR_OWVAR 42
17230: PUSH
17231: LD_INT 0
17233: ST_TO_ADDR
17234: GO 17856
17236: LD_INT 2
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17255
17244: POP
// bc_type := b_warehouse ; 3 :
17245: LD_ADDR_OWVAR 42
17249: PUSH
17250: LD_INT 1
17252: ST_TO_ADDR
17253: GO 17856
17255: LD_INT 3
17257: DOUBLE
17258: EQUAL
17259: IFTRUE 17263
17261: GO 17274
17263: POP
// bc_type := b_lab ; 4 .. 9 :
17264: LD_ADDR_OWVAR 42
17268: PUSH
17269: LD_INT 6
17271: ST_TO_ADDR
17272: GO 17856
17274: LD_INT 4
17276: DOUBLE
17277: GREATEREQUAL
17278: IFFALSE 17286
17280: LD_INT 9
17282: DOUBLE
17283: LESSEQUAL
17284: IFTRUE 17288
17286: GO 17348
17288: POP
// begin bc_type := b_lab_half ;
17289: LD_ADDR_OWVAR 42
17293: PUSH
17294: LD_INT 7
17296: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17297: LD_ADDR_OWVAR 44
17301: PUSH
17302: LD_INT 10
17304: PUSH
17305: LD_INT 11
17307: PUSH
17308: LD_INT 12
17310: PUSH
17311: LD_INT 15
17313: PUSH
17314: LD_INT 14
17316: PUSH
17317: LD_INT 13
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 3
17335: MINUS
17336: ARRAY
17337: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17338: LD_ADDR_OWVAR 45
17342: PUSH
17343: LD_INT 9
17345: ST_TO_ADDR
// end ; 10 .. 13 :
17346: GO 17856
17348: LD_INT 10
17350: DOUBLE
17351: GREATEREQUAL
17352: IFFALSE 17360
17354: LD_INT 13
17356: DOUBLE
17357: LESSEQUAL
17358: IFTRUE 17362
17360: GO 17439
17362: POP
// begin bc_type := b_lab_full ;
17363: LD_ADDR_OWVAR 42
17367: PUSH
17368: LD_INT 8
17370: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17371: LD_ADDR_OWVAR 44
17375: PUSH
17376: LD_INT 10
17378: PUSH
17379: LD_INT 12
17381: PUSH
17382: LD_INT 14
17384: PUSH
17385: LD_INT 13
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 9
17401: MINUS
17402: ARRAY
17403: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17404: LD_ADDR_OWVAR 45
17408: PUSH
17409: LD_INT 11
17411: PUSH
17412: LD_INT 15
17414: PUSH
17415: LD_INT 12
17417: PUSH
17418: LD_INT 15
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: PUSH
17427: LD_VAR 0 2
17431: PUSH
17432: LD_INT 9
17434: MINUS
17435: ARRAY
17436: ST_TO_ADDR
// end ; 14 :
17437: GO 17856
17439: LD_INT 14
17441: DOUBLE
17442: EQUAL
17443: IFTRUE 17447
17445: GO 17458
17447: POP
// bc_type := b_workshop ; 15 :
17448: LD_ADDR_OWVAR 42
17452: PUSH
17453: LD_INT 2
17455: ST_TO_ADDR
17456: GO 17856
17458: LD_INT 15
17460: DOUBLE
17461: EQUAL
17462: IFTRUE 17466
17464: GO 17477
17466: POP
// bc_type := b_factory ; 16 :
17467: LD_ADDR_OWVAR 42
17471: PUSH
17472: LD_INT 3
17474: ST_TO_ADDR
17475: GO 17856
17477: LD_INT 16
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17496
17485: POP
// bc_type := b_ext_gun ; 17 :
17486: LD_ADDR_OWVAR 42
17490: PUSH
17491: LD_INT 17
17493: ST_TO_ADDR
17494: GO 17856
17496: LD_INT 17
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17532
17504: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17505: LD_ADDR_OWVAR 42
17509: PUSH
17510: LD_INT 19
17512: PUSH
17513: LD_INT 23
17515: PUSH
17516: LD_INT 19
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: LD_VAR 0 1
17528: ARRAY
17529: ST_TO_ADDR
17530: GO 17856
17532: LD_INT 18
17534: DOUBLE
17535: EQUAL
17536: IFTRUE 17540
17538: GO 17551
17540: POP
// bc_type := b_ext_radar ; 19 :
17541: LD_ADDR_OWVAR 42
17545: PUSH
17546: LD_INT 20
17548: ST_TO_ADDR
17549: GO 17856
17551: LD_INT 19
17553: DOUBLE
17554: EQUAL
17555: IFTRUE 17559
17557: GO 17570
17559: POP
// bc_type := b_ext_radio ; 20 :
17560: LD_ADDR_OWVAR 42
17564: PUSH
17565: LD_INT 22
17567: ST_TO_ADDR
17568: GO 17856
17570: LD_INT 20
17572: DOUBLE
17573: EQUAL
17574: IFTRUE 17578
17576: GO 17589
17578: POP
// bc_type := b_ext_siberium ; 21 :
17579: LD_ADDR_OWVAR 42
17583: PUSH
17584: LD_INT 21
17586: ST_TO_ADDR
17587: GO 17856
17589: LD_INT 21
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 17608
17597: POP
// bc_type := b_ext_computer ; 22 :
17598: LD_ADDR_OWVAR 42
17602: PUSH
17603: LD_INT 24
17605: ST_TO_ADDR
17606: GO 17856
17608: LD_INT 22
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 17627
17616: POP
// bc_type := b_ext_track ; 23 :
17617: LD_ADDR_OWVAR 42
17621: PUSH
17622: LD_INT 16
17624: ST_TO_ADDR
17625: GO 17856
17627: LD_INT 23
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17646
17635: POP
// bc_type := b_ext_laser ; 24 :
17636: LD_ADDR_OWVAR 42
17640: PUSH
17641: LD_INT 25
17643: ST_TO_ADDR
17644: GO 17856
17646: LD_INT 24
17648: DOUBLE
17649: EQUAL
17650: IFTRUE 17654
17652: GO 17665
17654: POP
// bc_type := b_control_tower ; 25 :
17655: LD_ADDR_OWVAR 42
17659: PUSH
17660: LD_INT 36
17662: ST_TO_ADDR
17663: GO 17856
17665: LD_INT 25
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17673
17671: GO 17684
17673: POP
// bc_type := b_breastwork ; 26 :
17674: LD_ADDR_OWVAR 42
17678: PUSH
17679: LD_INT 31
17681: ST_TO_ADDR
17682: GO 17856
17684: LD_INT 26
17686: DOUBLE
17687: EQUAL
17688: IFTRUE 17692
17690: GO 17703
17692: POP
// bc_type := b_bunker ; 27 :
17693: LD_ADDR_OWVAR 42
17697: PUSH
17698: LD_INT 32
17700: ST_TO_ADDR
17701: GO 17856
17703: LD_INT 27
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17722
17711: POP
// bc_type := b_turret ; 28 :
17712: LD_ADDR_OWVAR 42
17716: PUSH
17717: LD_INT 33
17719: ST_TO_ADDR
17720: GO 17856
17722: LD_INT 28
17724: DOUBLE
17725: EQUAL
17726: IFTRUE 17730
17728: GO 17741
17730: POP
// bc_type := b_armoury ; 29 :
17731: LD_ADDR_OWVAR 42
17735: PUSH
17736: LD_INT 4
17738: ST_TO_ADDR
17739: GO 17856
17741: LD_INT 29
17743: DOUBLE
17744: EQUAL
17745: IFTRUE 17749
17747: GO 17760
17749: POP
// bc_type := b_barracks ; 30 :
17750: LD_ADDR_OWVAR 42
17754: PUSH
17755: LD_INT 5
17757: ST_TO_ADDR
17758: GO 17856
17760: LD_INT 30
17762: DOUBLE
17763: EQUAL
17764: IFTRUE 17768
17766: GO 17779
17768: POP
// bc_type := b_solar_power ; 31 :
17769: LD_ADDR_OWVAR 42
17773: PUSH
17774: LD_INT 27
17776: ST_TO_ADDR
17777: GO 17856
17779: LD_INT 31
17781: DOUBLE
17782: EQUAL
17783: IFTRUE 17787
17785: GO 17798
17787: POP
// bc_type := b_oil_power ; 32 :
17788: LD_ADDR_OWVAR 42
17792: PUSH
17793: LD_INT 26
17795: ST_TO_ADDR
17796: GO 17856
17798: LD_INT 32
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 17817
17806: POP
// bc_type := b_siberite_power ; 33 :
17807: LD_ADDR_OWVAR 42
17811: PUSH
17812: LD_INT 28
17814: ST_TO_ADDR
17815: GO 17856
17817: LD_INT 33
17819: DOUBLE
17820: EQUAL
17821: IFTRUE 17825
17823: GO 17836
17825: POP
// bc_type := b_oil_mine ; 34 :
17826: LD_ADDR_OWVAR 42
17830: PUSH
17831: LD_INT 29
17833: ST_TO_ADDR
17834: GO 17856
17836: LD_INT 34
17838: DOUBLE
17839: EQUAL
17840: IFTRUE 17844
17842: GO 17855
17844: POP
// bc_type := b_siberite_mine ; end ;
17845: LD_ADDR_OWVAR 42
17849: PUSH
17850: LD_INT 30
17852: ST_TO_ADDR
17853: GO 17856
17855: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17856: LD_ADDR_VAR 0 8
17860: PUSH
17861: LD_VAR 0 5
17865: PPUSH
17866: LD_VAR 0 6
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: CALL_OW 47
17880: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17881: LD_OWVAR 42
17885: PUSH
17886: LD_INT 32
17888: PUSH
17889: LD_INT 33
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: IN
17896: IFFALSE 17912
// PlaceWeaponTurret ( b , weapon ) ;
17898: LD_VAR 0 8
17902: PPUSH
17903: LD_VAR 0 4
17907: PPUSH
17908: CALL_OW 431
// end ;
17912: LD_VAR 0 7
17916: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17917: LD_INT 0
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17923: LD_ADDR_VAR 0 4
17927: PUSH
17928: LD_INT 22
17930: PUSH
17931: LD_OWVAR 2
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 30
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 30
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 69
17976: ST_TO_ADDR
// if not tmp then
17977: LD_VAR 0 4
17981: NOT
17982: IFFALSE 17986
// exit ;
17984: GO 18045
// for i in tmp do
17986: LD_ADDR_VAR 0 2
17990: PUSH
17991: LD_VAR 0 4
17995: PUSH
17996: FOR_IN
17997: IFFALSE 18043
// for j = 1 to 3 do
17999: LD_ADDR_VAR 0 3
18003: PUSH
18004: DOUBLE
18005: LD_INT 1
18007: DEC
18008: ST_TO_ADDR
18009: LD_INT 3
18011: PUSH
18012: FOR_TO
18013: IFFALSE 18039
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18015: LD_VAR 0 2
18019: PPUSH
18020: CALL_OW 274
18024: PPUSH
18025: LD_VAR 0 3
18029: PPUSH
18030: LD_INT 99999
18032: PPUSH
18033: CALL_OW 277
18037: GO 18012
18039: POP
18040: POP
18041: GO 17996
18043: POP
18044: POP
// end ;
18045: LD_VAR 0 1
18049: RET
// export function hHackSetLevel10 ; var i , j ; begin
18050: LD_INT 0
18052: PPUSH
18053: PPUSH
18054: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18055: LD_ADDR_VAR 0 2
18059: PUSH
18060: LD_INT 21
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18128
// if IsSelected ( i ) then
18078: LD_VAR 0 2
18082: PPUSH
18083: CALL_OW 306
18087: IFFALSE 18126
// begin for j := 1 to 4 do
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: DOUBLE
18095: LD_INT 1
18097: DEC
18098: ST_TO_ADDR
18099: LD_INT 4
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18124
// SetSkill ( i , j , 10 ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: LD_VAR 0 3
18114: PPUSH
18115: LD_INT 10
18117: PPUSH
18118: CALL_OW 237
18122: GO 18102
18124: POP
18125: POP
// end ;
18126: GO 18075
18128: POP
18129: POP
// end ;
18130: LD_VAR 0 1
18134: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18135: LD_INT 0
18137: PPUSH
18138: PPUSH
18139: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18140: LD_ADDR_VAR 0 2
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_OWVAR 2
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 21
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: PUSH
18176: FOR_IN
18177: IFFALSE 18218
// begin for j := 1 to 4 do
18179: LD_ADDR_VAR 0 3
18183: PUSH
18184: DOUBLE
18185: LD_INT 1
18187: DEC
18188: ST_TO_ADDR
18189: LD_INT 4
18191: PUSH
18192: FOR_TO
18193: IFFALSE 18214
// SetSkill ( i , j , 10 ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: LD_VAR 0 3
18204: PPUSH
18205: LD_INT 10
18207: PPUSH
18208: CALL_OW 237
18212: GO 18192
18214: POP
18215: POP
// end ;
18216: GO 18176
18218: POP
18219: POP
// end ;
18220: LD_VAR 0 1
18224: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18225: LD_INT 0
18227: PPUSH
// uc_side := your_side ;
18228: LD_ADDR_OWVAR 20
18232: PUSH
18233: LD_OWVAR 2
18237: ST_TO_ADDR
// uc_nation := nation ;
18238: LD_ADDR_OWVAR 21
18242: PUSH
18243: LD_VAR 0 1
18247: ST_TO_ADDR
// InitHc ;
18248: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18252: LD_INT 0
18254: PPUSH
18255: LD_VAR 0 2
18259: PPUSH
18260: LD_VAR 0 3
18264: PPUSH
18265: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18269: LD_VAR 0 4
18273: PPUSH
18274: LD_VAR 0 5
18278: PPUSH
18279: CALL_OW 428
18283: PUSH
18284: LD_INT 0
18286: EQUAL
18287: IFFALSE 18311
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18289: CALL_OW 44
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: LD_INT 1
18306: PPUSH
18307: CALL_OW 48
// end ;
18311: LD_VAR 0 6
18315: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18316: LD_INT 0
18318: PPUSH
18319: PPUSH
// uc_side := your_side ;
18320: LD_ADDR_OWVAR 20
18324: PUSH
18325: LD_OWVAR 2
18329: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18330: LD_VAR 0 1
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: LD_INT 4
18346: PUSH
18347: LD_INT 5
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: IN
18357: IFFALSE 18369
// uc_nation := nation_american else
18359: LD_ADDR_OWVAR 21
18363: PUSH
18364: LD_INT 1
18366: ST_TO_ADDR
18367: GO 18412
// if chassis in [ 11 , 12 , 13 , 14 ] then
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 11
18376: PUSH
18377: LD_INT 12
18379: PUSH
18380: LD_INT 13
18382: PUSH
18383: LD_INT 14
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: IN
18392: IFFALSE 18404
// uc_nation := nation_arabian else
18394: LD_ADDR_OWVAR 21
18398: PUSH
18399: LD_INT 2
18401: ST_TO_ADDR
18402: GO 18412
// uc_nation := nation_russian ;
18404: LD_ADDR_OWVAR 21
18408: PUSH
18409: LD_INT 3
18411: ST_TO_ADDR
// vc_chassis := chassis ;
18412: LD_ADDR_OWVAR 37
18416: PUSH
18417: LD_VAR 0 1
18421: ST_TO_ADDR
// vc_engine := engine ;
18422: LD_ADDR_OWVAR 39
18426: PUSH
18427: LD_VAR 0 2
18431: ST_TO_ADDR
// vc_control := control ;
18432: LD_ADDR_OWVAR 38
18436: PUSH
18437: LD_VAR 0 3
18441: ST_TO_ADDR
// vc_weapon := weapon ;
18442: LD_ADDR_OWVAR 40
18446: PUSH
18447: LD_VAR 0 4
18451: ST_TO_ADDR
// un := CreateVehicle ;
18452: LD_ADDR_VAR 0 8
18456: PUSH
18457: CALL_OW 45
18461: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18462: LD_VAR 0 8
18466: PPUSH
18467: LD_INT 0
18469: PPUSH
18470: LD_INT 5
18472: PPUSH
18473: CALL_OW 12
18477: PPUSH
18478: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18482: LD_VAR 0 8
18486: PPUSH
18487: LD_VAR 0 5
18491: PPUSH
18492: LD_VAR 0 6
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 48
// end ;
18504: LD_VAR 0 7
18508: RET
// export hInvincible ; every 1 do
18509: GO 18511
18511: DISABLE
// hInvincible := [ ] ;
18512: LD_ADDR_EXP 65
18516: PUSH
18517: EMPTY
18518: ST_TO_ADDR
18519: END
// every 10 do var i ;
18520: GO 18522
18522: DISABLE
18523: LD_INT 0
18525: PPUSH
// begin enable ;
18526: ENABLE
// if not hInvincible then
18527: LD_EXP 65
18531: NOT
18532: IFFALSE 18536
// exit ;
18534: GO 18580
// for i in hInvincible do
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_EXP 65
18545: PUSH
18546: FOR_IN
18547: IFFALSE 18578
// if GetLives ( i ) < 1000 then
18549: LD_VAR 0 1
18553: PPUSH
18554: CALL_OW 256
18558: PUSH
18559: LD_INT 1000
18561: LESS
18562: IFFALSE 18576
// SetLives ( i , 1000 ) ;
18564: LD_VAR 0 1
18568: PPUSH
18569: LD_INT 1000
18571: PPUSH
18572: CALL_OW 234
18576: GO 18546
18578: POP
18579: POP
// end ;
18580: PPOPN 1
18582: END
// export function hHackInvincible ; var i ; begin
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18587: LD_ADDR_VAR 0 2
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 21
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PPUSH
18620: CALL_OW 69
18624: PUSH
18625: FOR_IN
18626: IFFALSE 18687
// if IsSelected ( i ) then
18628: LD_VAR 0 2
18632: PPUSH
18633: CALL_OW 306
18637: IFFALSE 18685
// begin if i in hInvincible then
18639: LD_VAR 0 2
18643: PUSH
18644: LD_EXP 65
18648: IN
18649: IFFALSE 18669
// hInvincible := hInvincible diff i else
18651: LD_ADDR_EXP 65
18655: PUSH
18656: LD_EXP 65
18660: PUSH
18661: LD_VAR 0 2
18665: DIFF
18666: ST_TO_ADDR
18667: GO 18685
// hInvincible := hInvincible union i ;
18669: LD_ADDR_EXP 65
18673: PUSH
18674: LD_EXP 65
18678: PUSH
18679: LD_VAR 0 2
18683: UNION
18684: ST_TO_ADDR
// end ;
18685: GO 18625
18687: POP
18688: POP
// end ;
18689: LD_VAR 0 1
18693: RET
// export function hHackInvisible ; var i , j ; begin
18694: LD_INT 0
18696: PPUSH
18697: PPUSH
18698: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: LD_INT 21
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: PUSH
18719: FOR_IN
18720: IFFALSE 18744
// if IsSelected ( i ) then
18722: LD_VAR 0 2
18726: PPUSH
18727: CALL_OW 306
18731: IFFALSE 18742
// ComForceInvisible ( i ) ;
18733: LD_VAR 0 2
18737: PPUSH
18738: CALL_OW 496
18742: GO 18719
18744: POP
18745: POP
// end ;
18746: LD_VAR 0 1
18750: RET
// export function hHackChangeYourSide ; begin
18751: LD_INT 0
18753: PPUSH
// if your_side = 8 then
18754: LD_OWVAR 2
18758: PUSH
18759: LD_INT 8
18761: EQUAL
18762: IFFALSE 18774
// your_side := 0 else
18764: LD_ADDR_OWVAR 2
18768: PUSH
18769: LD_INT 0
18771: ST_TO_ADDR
18772: GO 18788
// your_side := your_side + 1 ;
18774: LD_ADDR_OWVAR 2
18778: PUSH
18779: LD_OWVAR 2
18783: PUSH
18784: LD_INT 1
18786: PLUS
18787: ST_TO_ADDR
// end ;
18788: LD_VAR 0 1
18792: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
18797: PPUSH
// for i in all_units do
18798: LD_ADDR_VAR 0 2
18802: PUSH
18803: LD_OWVAR 3
18807: PUSH
18808: FOR_IN
18809: IFFALSE 18887
// if IsSelected ( i ) then
18811: LD_VAR 0 2
18815: PPUSH
18816: CALL_OW 306
18820: IFFALSE 18885
// begin j := GetSide ( i ) ;
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_VAR 0 2
18831: PPUSH
18832: CALL_OW 255
18836: ST_TO_ADDR
// if j = 8 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 8
18844: EQUAL
18845: IFFALSE 18857
// j := 0 else
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 0
18854: ST_TO_ADDR
18855: GO 18871
// j := j + 1 ;
18857: LD_ADDR_VAR 0 3
18861: PUSH
18862: LD_VAR 0 3
18866: PUSH
18867: LD_INT 1
18869: PLUS
18870: ST_TO_ADDR
// SetSide ( i , j ) ;
18871: LD_VAR 0 2
18875: PPUSH
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 235
// end ;
18885: GO 18808
18887: POP
18888: POP
// end ;
18889: LD_VAR 0 1
18893: RET
// export function hHackFog ; begin
18894: LD_INT 0
18896: PPUSH
// FogOff ( true ) ;
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 344
// end ;
18904: LD_VAR 0 1
18908: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18909: LD_INT 0
18911: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_VAR 0 2
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 483
// CenterOnXY ( x , y ) ;
18937: LD_VAR 0 2
18941: PPUSH
18942: LD_VAR 0 3
18946: PPUSH
18947: CALL_OW 84
// end ;
18951: LD_VAR 0 4
18955: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18960: LD_VAR 0 1
18964: NOT
18965: PUSH
18966: LD_VAR 0 2
18970: PPUSH
18971: LD_VAR 0 3
18975: PPUSH
18976: CALL_OW 488
18980: NOT
18981: OR
18982: PUSH
18983: LD_VAR 0 1
18987: PPUSH
18988: CALL_OW 266
18992: PUSH
18993: LD_INT 3
18995: NONEQUAL
18996: PUSH
18997: LD_VAR 0 1
19001: PPUSH
19002: CALL_OW 247
19006: PUSH
19007: LD_INT 1
19009: EQUAL
19010: NOT
19011: AND
19012: OR
19013: IFFALSE 19017
// exit ;
19015: GO 19166
// if GetType ( factory ) = unit_human then
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 247
19026: PUSH
19027: LD_INT 1
19029: EQUAL
19030: IFFALSE 19047
// factory := IsInUnit ( factory ) ;
19032: LD_ADDR_VAR 0 1
19036: PUSH
19037: LD_VAR 0 1
19041: PPUSH
19042: CALL_OW 310
19046: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 266
19056: PUSH
19057: LD_INT 3
19059: NONEQUAL
19060: IFFALSE 19064
// exit ;
19062: GO 19166
// if HexInfo ( x , y ) = factory then
19064: LD_VAR 0 2
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: CALL_OW 428
19078: PUSH
19079: LD_VAR 0 1
19083: EQUAL
19084: IFFALSE 19111
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19086: LD_ADDR_EXP 66
19090: PUSH
19091: LD_EXP 66
19095: PPUSH
19096: LD_VAR 0 1
19100: PPUSH
19101: LD_INT 0
19103: PPUSH
19104: CALL_OW 1
19108: ST_TO_ADDR
19109: GO 19162
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19111: LD_ADDR_EXP 66
19115: PUSH
19116: LD_EXP 66
19120: PPUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: LD_VAR 0 1
19130: PPUSH
19131: CALL_OW 255
19135: PUSH
19136: LD_VAR 0 1
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: LD_VAR 0 3
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 1
19161: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19162: CALL 19171 0 0
// end ;
19166: LD_VAR 0 4
19170: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19176: LD_STRING resetFactoryWaypoint();
19178: PPUSH
19179: CALL_OW 559
// if factoryWaypoints then
19183: LD_EXP 66
19187: IFFALSE 19313
// begin list := PrepareArray ( factoryWaypoints ) ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_EXP 66
19198: PPUSH
19199: CALL 65635 0 1
19203: ST_TO_ADDR
// for i := 1 to list do
19204: LD_ADDR_VAR 0 2
19208: PUSH
19209: DOUBLE
19210: LD_INT 1
19212: DEC
19213: ST_TO_ADDR
19214: LD_VAR 0 3
19218: PUSH
19219: FOR_TO
19220: IFFALSE 19311
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19222: LD_STRING setFactoryWaypointXY(
19224: PUSH
19225: LD_VAR 0 3
19229: PUSH
19230: LD_VAR 0 2
19234: ARRAY
19235: PUSH
19236: LD_INT 1
19238: ARRAY
19239: STR
19240: PUSH
19241: LD_STRING ,
19243: STR
19244: PUSH
19245: LD_VAR 0 3
19249: PUSH
19250: LD_VAR 0 2
19254: ARRAY
19255: PUSH
19256: LD_INT 2
19258: ARRAY
19259: STR
19260: PUSH
19261: LD_STRING ,
19263: STR
19264: PUSH
19265: LD_VAR 0 3
19269: PUSH
19270: LD_VAR 0 2
19274: ARRAY
19275: PUSH
19276: LD_INT 3
19278: ARRAY
19279: STR
19280: PUSH
19281: LD_STRING ,
19283: STR
19284: PUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_VAR 0 2
19294: ARRAY
19295: PUSH
19296: LD_INT 4
19298: ARRAY
19299: STR
19300: PUSH
19301: LD_STRING )
19303: STR
19304: PPUSH
19305: CALL_OW 559
19309: GO 19219
19311: POP
19312: POP
// end ; end ;
19313: LD_VAR 0 1
19317: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19318: LD_INT 0
19320: PPUSH
// if HexInfo ( x , y ) = warehouse then
19321: LD_VAR 0 2
19325: PPUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: CALL_OW 428
19335: PUSH
19336: LD_VAR 0 1
19340: EQUAL
19341: IFFALSE 19368
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19343: LD_ADDR_EXP 67
19347: PUSH
19348: LD_EXP 67
19352: PPUSH
19353: LD_VAR 0 1
19357: PPUSH
19358: LD_INT 0
19360: PPUSH
19361: CALL_OW 1
19365: ST_TO_ADDR
19366: GO 19419
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19368: LD_ADDR_EXP 67
19372: PUSH
19373: LD_EXP 67
19377: PPUSH
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 255
19392: PUSH
19393: LD_VAR 0 1
19397: PUSH
19398: LD_VAR 0 2
19402: PUSH
19403: LD_VAR 0 3
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: PPUSH
19414: CALL_OW 1
19418: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19419: CALL 19428 0 0
// end ;
19423: LD_VAR 0 4
19427: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19428: LD_INT 0
19430: PPUSH
19431: PPUSH
19432: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19433: LD_STRING resetWarehouseGatheringPoints();
19435: PPUSH
19436: CALL_OW 559
// if warehouseGatheringPoints then
19440: LD_EXP 67
19444: IFFALSE 19570
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19446: LD_ADDR_VAR 0 3
19450: PUSH
19451: LD_EXP 67
19455: PPUSH
19456: CALL 65635 0 1
19460: ST_TO_ADDR
// for i := 1 to list do
19461: LD_ADDR_VAR 0 2
19465: PUSH
19466: DOUBLE
19467: LD_INT 1
19469: DEC
19470: ST_TO_ADDR
19471: LD_VAR 0 3
19475: PUSH
19476: FOR_TO
19477: IFFALSE 19568
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19479: LD_STRING setWarehouseGatheringPointXY(
19481: PUSH
19482: LD_VAR 0 3
19486: PUSH
19487: LD_VAR 0 2
19491: ARRAY
19492: PUSH
19493: LD_INT 1
19495: ARRAY
19496: STR
19497: PUSH
19498: LD_STRING ,
19500: STR
19501: PUSH
19502: LD_VAR 0 3
19506: PUSH
19507: LD_VAR 0 2
19511: ARRAY
19512: PUSH
19513: LD_INT 2
19515: ARRAY
19516: STR
19517: PUSH
19518: LD_STRING ,
19520: STR
19521: PUSH
19522: LD_VAR 0 3
19526: PUSH
19527: LD_VAR 0 2
19531: ARRAY
19532: PUSH
19533: LD_INT 3
19535: ARRAY
19536: STR
19537: PUSH
19538: LD_STRING ,
19540: STR
19541: PUSH
19542: LD_VAR 0 3
19546: PUSH
19547: LD_VAR 0 2
19551: ARRAY
19552: PUSH
19553: LD_INT 4
19555: ARRAY
19556: STR
19557: PUSH
19558: LD_STRING )
19560: STR
19561: PPUSH
19562: CALL_OW 559
19566: GO 19476
19568: POP
19569: POP
// end ; end ;
19570: LD_VAR 0 1
19574: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19575: LD_EXP 67
19579: IFFALSE 20264
19581: GO 19583
19583: DISABLE
19584: LD_INT 0
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
19591: PPUSH
19592: PPUSH
19593: PPUSH
19594: PPUSH
// begin enable ;
19595: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_EXP 67
19605: PPUSH
19606: CALL 65635 0 1
19610: ST_TO_ADDR
// if not list then
19611: LD_VAR 0 3
19615: NOT
19616: IFFALSE 19620
// exit ;
19618: GO 20264
// for i := 1 to list do
19620: LD_ADDR_VAR 0 1
19624: PUSH
19625: DOUBLE
19626: LD_INT 1
19628: DEC
19629: ST_TO_ADDR
19630: LD_VAR 0 3
19634: PUSH
19635: FOR_TO
19636: IFFALSE 20262
// begin depot := list [ i ] [ 2 ] ;
19638: LD_ADDR_VAR 0 8
19642: PUSH
19643: LD_VAR 0 3
19647: PUSH
19648: LD_VAR 0 1
19652: ARRAY
19653: PUSH
19654: LD_INT 2
19656: ARRAY
19657: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19658: LD_ADDR_VAR 0 5
19662: PUSH
19663: LD_VAR 0 3
19667: PUSH
19668: LD_VAR 0 1
19672: ARRAY
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19678: LD_VAR 0 8
19682: PPUSH
19683: CALL_OW 301
19687: PUSH
19688: LD_VAR 0 5
19692: PUSH
19693: LD_VAR 0 8
19697: PPUSH
19698: CALL_OW 255
19702: NONEQUAL
19703: OR
19704: IFFALSE 19733
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19706: LD_ADDR_EXP 67
19710: PUSH
19711: LD_EXP 67
19715: PPUSH
19716: LD_VAR 0 8
19720: PPUSH
19721: LD_INT 0
19723: PPUSH
19724: CALL_OW 1
19728: ST_TO_ADDR
// exit ;
19729: POP
19730: POP
19731: GO 20264
// end ; x := list [ i ] [ 3 ] ;
19733: LD_ADDR_VAR 0 6
19737: PUSH
19738: LD_VAR 0 3
19742: PUSH
19743: LD_VAR 0 1
19747: ARRAY
19748: PUSH
19749: LD_INT 3
19751: ARRAY
19752: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19753: LD_ADDR_VAR 0 7
19757: PUSH
19758: LD_VAR 0 3
19762: PUSH
19763: LD_VAR 0 1
19767: ARRAY
19768: PUSH
19769: LD_INT 4
19771: ARRAY
19772: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19773: LD_ADDR_VAR 0 9
19777: PUSH
19778: LD_VAR 0 6
19782: PPUSH
19783: LD_VAR 0 7
19787: PPUSH
19788: LD_INT 16
19790: PPUSH
19791: CALL 64223 0 3
19795: ST_TO_ADDR
// if not cratesNearbyPoint then
19796: LD_VAR 0 9
19800: NOT
19801: IFFALSE 19807
// exit ;
19803: POP
19804: POP
19805: GO 20264
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19807: LD_ADDR_VAR 0 4
19811: PUSH
19812: LD_INT 22
19814: PUSH
19815: LD_VAR 0 5
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 60
19829: PUSH
19830: EMPTY
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 91
19839: PUSH
19840: LD_VAR 0 8
19844: PUSH
19845: LD_INT 6
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 25
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 25
19868: PUSH
19869: LD_INT 16
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 69
19891: PUSH
19892: LD_VAR 0 8
19896: PPUSH
19897: CALL_OW 313
19901: PPUSH
19902: LD_INT 3
19904: PUSH
19905: LD_INT 60
19907: PUSH
19908: EMPTY
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 25
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: LD_INT 16
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 72
19951: UNION
19952: ST_TO_ADDR
// if tmp then
19953: LD_VAR 0 4
19957: IFFALSE 20037
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19959: LD_ADDR_VAR 0 4
19963: PUSH
19964: LD_VAR 0 4
19968: PPUSH
19969: LD_INT 3
19971: PPUSH
19972: CALL 62192 0 2
19976: ST_TO_ADDR
// for j in tmp do
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: LD_VAR 0 4
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20031
// begin if IsInUnit ( j ) then
19990: LD_VAR 0 2
19994: PPUSH
19995: CALL_OW 310
19999: IFFALSE 20010
// ComExit ( j ) ;
20001: LD_VAR 0 2
20005: PPUSH
20006: CALL 62275 0 1
// AddComCollect ( j , x , y ) ;
20010: LD_VAR 0 2
20014: PPUSH
20015: LD_VAR 0 6
20019: PPUSH
20020: LD_VAR 0 7
20024: PPUSH
20025: CALL_OW 177
// end ;
20029: GO 19987
20031: POP
20032: POP
// exit ;
20033: POP
20034: POP
20035: GO 20264
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20037: LD_ADDR_VAR 0 4
20041: PUSH
20042: LD_INT 22
20044: PUSH
20045: LD_VAR 0 5
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 91
20056: PUSH
20057: LD_VAR 0 8
20061: PUSH
20062: LD_INT 8
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 34
20075: PUSH
20076: LD_INT 12
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 34
20085: PUSH
20086: LD_INT 51
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 34
20095: PUSH
20096: LD_INT 32
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 34
20105: PUSH
20106: LD_INT 89
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 69
20129: ST_TO_ADDR
// if tmp then
20130: LD_VAR 0 4
20134: IFFALSE 20260
// begin for j in tmp do
20136: LD_ADDR_VAR 0 2
20140: PUSH
20141: LD_VAR 0 4
20145: PUSH
20146: FOR_IN
20147: IFFALSE 20258
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20149: LD_VAR 0 2
20153: PPUSH
20154: CALL_OW 262
20158: PUSH
20159: LD_INT 3
20161: EQUAL
20162: PUSH
20163: LD_VAR 0 2
20167: PPUSH
20168: CALL_OW 261
20172: PUSH
20173: LD_INT 20
20175: GREATER
20176: OR
20177: PUSH
20178: LD_VAR 0 2
20182: PPUSH
20183: CALL_OW 314
20187: NOT
20188: AND
20189: PUSH
20190: LD_VAR 0 2
20194: PPUSH
20195: CALL_OW 263
20199: PUSH
20200: LD_INT 1
20202: NONEQUAL
20203: PUSH
20204: LD_VAR 0 2
20208: PPUSH
20209: CALL_OW 311
20213: OR
20214: AND
20215: IFFALSE 20256
// begin ComCollect ( j , x , y ) ;
20217: LD_VAR 0 2
20221: PPUSH
20222: LD_VAR 0 6
20226: PPUSH
20227: LD_VAR 0 7
20231: PPUSH
20232: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_VAR 0 8
20245: PPUSH
20246: CALL_OW 172
// exit ;
20250: POP
20251: POP
20252: POP
20253: POP
20254: GO 20264
// end ;
20256: GO 20146
20258: POP
20259: POP
// end ; end ;
20260: GO 19635
20262: POP
20263: POP
// end ; end_of_file
20264: PPOPN 9
20266: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20267: LD_INT 0
20269: PPUSH
20270: PPUSH
20271: PPUSH
20272: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20273: LD_VAR 0 1
20277: PPUSH
20278: CALL_OW 264
20282: PUSH
20283: LD_INT 91
20285: EQUAL
20286: IFFALSE 20358
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20288: LD_INT 68
20290: PPUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 255
20300: PPUSH
20301: CALL_OW 321
20305: PUSH
20306: LD_INT 2
20308: EQUAL
20309: IFFALSE 20321
// eff := 70 else
20311: LD_ADDR_VAR 0 4
20315: PUSH
20316: LD_INT 70
20318: ST_TO_ADDR
20319: GO 20329
// eff := 30 ;
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_INT 30
20328: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20329: LD_VAR 0 1
20333: PPUSH
20334: CALL_OW 250
20338: PPUSH
20339: LD_VAR 0 1
20343: PPUSH
20344: CALL_OW 251
20348: PPUSH
20349: LD_VAR 0 4
20353: PPUSH
20354: CALL_OW 495
// end ; end ;
20358: LD_VAR 0 2
20362: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20363: LD_INT 0
20365: PPUSH
// end ;
20366: LD_VAR 0 4
20370: RET
// export function SOS_Command ( cmd ) ; begin
20371: LD_INT 0
20373: PPUSH
// end ;
20374: LD_VAR 0 2
20378: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20379: LD_INT 0
20381: PPUSH
// end ;
20382: LD_VAR 0 6
20386: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20387: LD_INT 0
20389: PPUSH
20390: PPUSH
// if not vehicle or not factory then
20391: LD_VAR 0 1
20395: NOT
20396: PUSH
20397: LD_VAR 0 2
20401: NOT
20402: OR
20403: IFFALSE 20407
// exit ;
20405: GO 20638
// if factoryWaypoints >= factory then
20407: LD_EXP 66
20411: PUSH
20412: LD_VAR 0 2
20416: GREATEREQUAL
20417: IFFALSE 20638
// if factoryWaypoints [ factory ] then
20419: LD_EXP 66
20423: PUSH
20424: LD_VAR 0 2
20428: ARRAY
20429: IFFALSE 20638
// begin if GetControl ( vehicle ) = control_manual then
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 263
20440: PUSH
20441: LD_INT 1
20443: EQUAL
20444: IFFALSE 20525
// begin driver := IsDrivenBy ( vehicle ) ;
20446: LD_ADDR_VAR 0 4
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: CALL_OW 311
20460: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20461: LD_VAR 0 4
20465: PPUSH
20466: LD_EXP 66
20470: PUSH
20471: LD_VAR 0 2
20475: ARRAY
20476: PUSH
20477: LD_INT 3
20479: ARRAY
20480: PPUSH
20481: LD_EXP 66
20485: PUSH
20486: LD_VAR 0 2
20490: ARRAY
20491: PUSH
20492: LD_INT 4
20494: ARRAY
20495: PPUSH
20496: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20500: LD_VAR 0 4
20504: PPUSH
20505: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20509: LD_VAR 0 4
20513: PPUSH
20514: LD_VAR 0 2
20518: PPUSH
20519: CALL_OW 180
// end else
20523: GO 20638
// if GetControl ( vehicle ) = control_remote then
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 263
20534: PUSH
20535: LD_INT 2
20537: EQUAL
20538: IFFALSE 20599
// begin wait ( 0 0$2 ) ;
20540: LD_INT 70
20542: PPUSH
20543: CALL_OW 67
// if Connect ( vehicle ) then
20547: LD_VAR 0 1
20551: PPUSH
20552: CALL 32496 0 1
20556: IFFALSE 20597
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20558: LD_VAR 0 1
20562: PPUSH
20563: LD_EXP 66
20567: PUSH
20568: LD_VAR 0 2
20572: ARRAY
20573: PUSH
20574: LD_INT 3
20576: ARRAY
20577: PPUSH
20578: LD_EXP 66
20582: PUSH
20583: LD_VAR 0 2
20587: ARRAY
20588: PUSH
20589: LD_INT 4
20591: ARRAY
20592: PPUSH
20593: CALL_OW 171
// end else
20597: GO 20638
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20599: LD_VAR 0 1
20603: PPUSH
20604: LD_EXP 66
20608: PUSH
20609: LD_VAR 0 2
20613: ARRAY
20614: PUSH
20615: LD_INT 3
20617: ARRAY
20618: PPUSH
20619: LD_EXP 66
20623: PUSH
20624: LD_VAR 0 2
20628: ARRAY
20629: PUSH
20630: LD_INT 4
20632: ARRAY
20633: PPUSH
20634: CALL_OW 171
// end ; end ;
20638: LD_VAR 0 3
20642: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20643: LD_INT 0
20645: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20646: LD_VAR 0 1
20650: PUSH
20651: LD_INT 250
20653: EQUAL
20654: PUSH
20655: LD_VAR 0 2
20659: PPUSH
20660: CALL_OW 264
20664: PUSH
20665: LD_INT 81
20667: EQUAL
20668: AND
20669: IFFALSE 20690
// MinerPlaceMine ( unit , x , y ) ;
20671: LD_VAR 0 2
20675: PPUSH
20676: LD_VAR 0 4
20680: PPUSH
20681: LD_VAR 0 5
20685: PPUSH
20686: CALL 23075 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20690: LD_VAR 0 1
20694: PUSH
20695: LD_INT 251
20697: EQUAL
20698: PUSH
20699: LD_VAR 0 2
20703: PPUSH
20704: CALL_OW 264
20708: PUSH
20709: LD_INT 81
20711: EQUAL
20712: AND
20713: IFFALSE 20734
// MinerDetonateMine ( unit , x , y ) ;
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 4
20724: PPUSH
20725: LD_VAR 0 5
20729: PPUSH
20730: CALL 23350 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 252
20741: EQUAL
20742: PUSH
20743: LD_VAR 0 2
20747: PPUSH
20748: CALL_OW 264
20752: PUSH
20753: LD_INT 81
20755: EQUAL
20756: AND
20757: IFFALSE 20778
// MinerCreateMinefield ( unit , x , y ) ;
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 4
20768: PPUSH
20769: LD_VAR 0 5
20773: PPUSH
20774: CALL 23767 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20778: LD_VAR 0 1
20782: PUSH
20783: LD_INT 253
20785: EQUAL
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 257
20796: PUSH
20797: LD_INT 5
20799: EQUAL
20800: AND
20801: IFFALSE 20822
// ComBinocular ( unit , x , y ) ;
20803: LD_VAR 0 2
20807: PPUSH
20808: LD_VAR 0 4
20812: PPUSH
20813: LD_VAR 0 5
20817: PPUSH
20818: CALL 24136 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20822: LD_VAR 0 1
20826: PUSH
20827: LD_INT 254
20829: EQUAL
20830: PUSH
20831: LD_VAR 0 2
20835: PPUSH
20836: CALL_OW 264
20840: PUSH
20841: LD_INT 99
20843: EQUAL
20844: AND
20845: PUSH
20846: LD_VAR 0 3
20850: PPUSH
20851: CALL_OW 263
20855: PUSH
20856: LD_INT 3
20858: EQUAL
20859: AND
20860: IFFALSE 20876
// HackDestroyVehicle ( unit , selectedUnit ) ;
20862: LD_VAR 0 2
20866: PPUSH
20867: LD_VAR 0 3
20871: PPUSH
20872: CALL 22439 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20876: LD_VAR 0 1
20880: PUSH
20881: LD_INT 255
20883: EQUAL
20884: PUSH
20885: LD_VAR 0 2
20889: PPUSH
20890: CALL_OW 264
20894: PUSH
20895: LD_INT 14
20897: PUSH
20898: LD_INT 53
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: IN
20905: AND
20906: PUSH
20907: LD_VAR 0 4
20911: PPUSH
20912: LD_VAR 0 5
20916: PPUSH
20917: CALL_OW 488
20921: AND
20922: IFFALSE 20946
// CutTreeXYR ( unit , x , y , 12 ) ;
20924: LD_VAR 0 2
20928: PPUSH
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: LD_INT 12
20941: PPUSH
20942: CALL 21009 0 4
// if cmd = 256 then
20946: LD_VAR 0 1
20950: PUSH
20951: LD_INT 256
20953: EQUAL
20954: IFFALSE 20975
// SetFactoryWaypoint ( unit , x , y ) ;
20956: LD_VAR 0 2
20960: PPUSH
20961: LD_VAR 0 4
20965: PPUSH
20966: LD_VAR 0 5
20970: PPUSH
20971: CALL 18956 0 3
// if cmd = 257 then
20975: LD_VAR 0 1
20979: PUSH
20980: LD_INT 257
20982: EQUAL
20983: IFFALSE 21004
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_VAR 0 4
20994: PPUSH
20995: LD_VAR 0 5
20999: PPUSH
21000: CALL 19318 0 3
// end ;
21004: LD_VAR 0 6
21008: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21009: LD_INT 0
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
21019: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21020: LD_VAR 0 1
21024: NOT
21025: PUSH
21026: LD_VAR 0 2
21030: PPUSH
21031: LD_VAR 0 3
21035: PPUSH
21036: CALL_OW 488
21040: NOT
21041: OR
21042: PUSH
21043: LD_VAR 0 4
21047: NOT
21048: OR
21049: IFFALSE 21053
// exit ;
21051: GO 21393
// list := [ ] ;
21053: LD_ADDR_VAR 0 13
21057: PUSH
21058: EMPTY
21059: ST_TO_ADDR
// if x - r < 0 then
21060: LD_VAR 0 2
21064: PUSH
21065: LD_VAR 0 4
21069: MINUS
21070: PUSH
21071: LD_INT 0
21073: LESS
21074: IFFALSE 21086
// min_x := 0 else
21076: LD_ADDR_VAR 0 7
21080: PUSH
21081: LD_INT 0
21083: ST_TO_ADDR
21084: GO 21102
// min_x := x - r ;
21086: LD_ADDR_VAR 0 7
21090: PUSH
21091: LD_VAR 0 2
21095: PUSH
21096: LD_VAR 0 4
21100: MINUS
21101: ST_TO_ADDR
// if y - r < 0 then
21102: LD_VAR 0 3
21106: PUSH
21107: LD_VAR 0 4
21111: MINUS
21112: PUSH
21113: LD_INT 0
21115: LESS
21116: IFFALSE 21128
// min_y := 0 else
21118: LD_ADDR_VAR 0 8
21122: PUSH
21123: LD_INT 0
21125: ST_TO_ADDR
21126: GO 21144
// min_y := y - r ;
21128: LD_ADDR_VAR 0 8
21132: PUSH
21133: LD_VAR 0 3
21137: PUSH
21138: LD_VAR 0 4
21142: MINUS
21143: ST_TO_ADDR
// max_x := x + r ;
21144: LD_ADDR_VAR 0 9
21148: PUSH
21149: LD_VAR 0 2
21153: PUSH
21154: LD_VAR 0 4
21158: PLUS
21159: ST_TO_ADDR
// max_y := y + r ;
21160: LD_ADDR_VAR 0 10
21164: PUSH
21165: LD_VAR 0 3
21169: PUSH
21170: LD_VAR 0 4
21174: PLUS
21175: ST_TO_ADDR
// for _x = min_x to max_x do
21176: LD_ADDR_VAR 0 11
21180: PUSH
21181: DOUBLE
21182: LD_VAR 0 7
21186: DEC
21187: ST_TO_ADDR
21188: LD_VAR 0 9
21192: PUSH
21193: FOR_TO
21194: IFFALSE 21311
// for _y = min_y to max_y do
21196: LD_ADDR_VAR 0 12
21200: PUSH
21201: DOUBLE
21202: LD_VAR 0 8
21206: DEC
21207: ST_TO_ADDR
21208: LD_VAR 0 10
21212: PUSH
21213: FOR_TO
21214: IFFALSE 21307
// begin if not ValidHex ( _x , _y ) then
21216: LD_VAR 0 11
21220: PPUSH
21221: LD_VAR 0 12
21225: PPUSH
21226: CALL_OW 488
21230: NOT
21231: IFFALSE 21235
// continue ;
21233: GO 21213
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21235: LD_VAR 0 11
21239: PPUSH
21240: LD_VAR 0 12
21244: PPUSH
21245: CALL_OW 351
21249: PUSH
21250: LD_VAR 0 11
21254: PPUSH
21255: LD_VAR 0 12
21259: PPUSH
21260: CALL_OW 554
21264: AND
21265: IFFALSE 21305
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21267: LD_ADDR_VAR 0 13
21271: PUSH
21272: LD_VAR 0 13
21276: PPUSH
21277: LD_VAR 0 13
21281: PUSH
21282: LD_INT 1
21284: PLUS
21285: PPUSH
21286: LD_VAR 0 11
21290: PUSH
21291: LD_VAR 0 12
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 2
21304: ST_TO_ADDR
// end ;
21305: GO 21213
21307: POP
21308: POP
21309: GO 21193
21311: POP
21312: POP
// if not list then
21313: LD_VAR 0 13
21317: NOT
21318: IFFALSE 21322
// exit ;
21320: GO 21393
// for i in list do
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_VAR 0 13
21331: PUSH
21332: FOR_IN
21333: IFFALSE 21391
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21335: LD_VAR 0 1
21339: PPUSH
21340: LD_STRING M
21342: PUSH
21343: LD_VAR 0 6
21347: PUSH
21348: LD_INT 1
21350: ARRAY
21351: PUSH
21352: LD_VAR 0 6
21356: PUSH
21357: LD_INT 2
21359: ARRAY
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: PPUSH
21385: CALL_OW 447
21389: GO 21332
21391: POP
21392: POP
// end ;
21393: LD_VAR 0 5
21397: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21398: LD_EXP 69
21402: NOT
21403: IFFALSE 21453
21405: GO 21407
21407: DISABLE
// begin initHack := true ;
21408: LD_ADDR_EXP 69
21412: PUSH
21413: LD_INT 1
21415: ST_TO_ADDR
// hackTanks := [ ] ;
21416: LD_ADDR_EXP 70
21420: PUSH
21421: EMPTY
21422: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21423: LD_ADDR_EXP 71
21427: PUSH
21428: EMPTY
21429: ST_TO_ADDR
// hackLimit := 3 ;
21430: LD_ADDR_EXP 72
21434: PUSH
21435: LD_INT 3
21437: ST_TO_ADDR
// hackDist := 12 ;
21438: LD_ADDR_EXP 73
21442: PUSH
21443: LD_INT 12
21445: ST_TO_ADDR
// hackCounter := [ ] ;
21446: LD_ADDR_EXP 74
21450: PUSH
21451: EMPTY
21452: ST_TO_ADDR
// end ;
21453: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21454: LD_EXP 69
21458: PUSH
21459: LD_INT 34
21461: PUSH
21462: LD_INT 99
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PPUSH
21469: CALL_OW 69
21473: AND
21474: IFFALSE 21727
21476: GO 21478
21478: DISABLE
21479: LD_INT 0
21481: PPUSH
21482: PPUSH
// begin enable ;
21483: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21484: LD_ADDR_VAR 0 1
21488: PUSH
21489: LD_INT 34
21491: PUSH
21492: LD_INT 99
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PPUSH
21499: CALL_OW 69
21503: PUSH
21504: FOR_IN
21505: IFFALSE 21725
// begin if not i in hackTanks then
21507: LD_VAR 0 1
21511: PUSH
21512: LD_EXP 70
21516: IN
21517: NOT
21518: IFFALSE 21601
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21520: LD_ADDR_EXP 70
21524: PUSH
21525: LD_EXP 70
21529: PPUSH
21530: LD_EXP 70
21534: PUSH
21535: LD_INT 1
21537: PLUS
21538: PPUSH
21539: LD_VAR 0 1
21543: PPUSH
21544: CALL_OW 1
21548: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21549: LD_ADDR_EXP 71
21553: PUSH
21554: LD_EXP 71
21558: PPUSH
21559: LD_EXP 71
21563: PUSH
21564: LD_INT 1
21566: PLUS
21567: PPUSH
21568: EMPTY
21569: PPUSH
21570: CALL_OW 1
21574: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21575: LD_ADDR_EXP 74
21579: PUSH
21580: LD_EXP 74
21584: PPUSH
21585: LD_EXP 74
21589: PUSH
21590: LD_INT 1
21592: PLUS
21593: PPUSH
21594: EMPTY
21595: PPUSH
21596: CALL_OW 1
21600: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21601: LD_VAR 0 1
21605: PPUSH
21606: CALL_OW 302
21610: NOT
21611: IFFALSE 21624
// begin HackUnlinkAll ( i ) ;
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL 21730 0 1
// continue ;
21622: GO 21504
// end ; HackCheckCapturedStatus ( i ) ;
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL 22173 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21633: LD_ADDR_VAR 0 2
21637: PUSH
21638: LD_INT 81
21640: PUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 255
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 33
21657: PUSH
21658: LD_INT 3
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 91
21667: PUSH
21668: LD_VAR 0 1
21672: PUSH
21673: LD_EXP 73
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 50
21685: PUSH
21686: EMPTY
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: ST_TO_ADDR
// if not tmp then
21700: LD_VAR 0 2
21704: NOT
21705: IFFALSE 21709
// continue ;
21707: GO 21504
// HackLink ( i , tmp ) ;
21709: LD_VAR 0 1
21713: PPUSH
21714: LD_VAR 0 2
21718: PPUSH
21719: CALL 21866 0 2
// end ;
21723: GO 21504
21725: POP
21726: POP
// end ;
21727: PPOPN 2
21729: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
// if not hack in hackTanks then
21735: LD_VAR 0 1
21739: PUSH
21740: LD_EXP 70
21744: IN
21745: NOT
21746: IFFALSE 21750
// exit ;
21748: GO 21861
// index := GetElementIndex ( hackTanks , hack ) ;
21750: LD_ADDR_VAR 0 4
21754: PUSH
21755: LD_EXP 70
21759: PPUSH
21760: LD_VAR 0 1
21764: PPUSH
21765: CALL 29303 0 2
21769: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21770: LD_EXP 71
21774: PUSH
21775: LD_VAR 0 4
21779: ARRAY
21780: IFFALSE 21861
// begin for i in hackTanksCaptured [ index ] do
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_EXP 71
21791: PUSH
21792: LD_VAR 0 4
21796: ARRAY
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21825
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21801: LD_VAR 0 3
21805: PUSH
21806: LD_INT 1
21808: ARRAY
21809: PPUSH
21810: LD_VAR 0 3
21814: PUSH
21815: LD_INT 2
21817: ARRAY
21818: PPUSH
21819: CALL_OW 235
21823: GO 21798
21825: POP
21826: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21827: LD_ADDR_EXP 71
21831: PUSH
21832: LD_EXP 71
21836: PPUSH
21837: LD_VAR 0 4
21841: PPUSH
21842: EMPTY
21843: PPUSH
21844: CALL_OW 1
21848: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21849: LD_VAR 0 1
21853: PPUSH
21854: LD_INT 0
21856: PPUSH
21857: CALL_OW 505
// end ; end ;
21861: LD_VAR 0 2
21865: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21866: LD_INT 0
21868: PPUSH
21869: PPUSH
21870: PPUSH
// if not hack in hackTanks or not vehicles then
21871: LD_VAR 0 1
21875: PUSH
21876: LD_EXP 70
21880: IN
21881: NOT
21882: PUSH
21883: LD_VAR 0 2
21887: NOT
21888: OR
21889: IFFALSE 21893
// exit ;
21891: GO 22168
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21893: LD_ADDR_VAR 0 2
21897: PUSH
21898: LD_VAR 0 1
21902: PPUSH
21903: LD_VAR 0 2
21907: PPUSH
21908: LD_INT 1
21910: PPUSH
21911: LD_INT 1
21913: PPUSH
21914: CALL 29953 0 4
21918: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21919: LD_ADDR_VAR 0 5
21923: PUSH
21924: LD_EXP 70
21928: PPUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL 29303 0 2
21938: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21939: LD_EXP 71
21943: PUSH
21944: LD_VAR 0 5
21948: ARRAY
21949: PUSH
21950: LD_EXP 72
21954: LESS
21955: IFFALSE 22144
// begin for i := 1 to vehicles do
21957: LD_ADDR_VAR 0 4
21961: PUSH
21962: DOUBLE
21963: LD_INT 1
21965: DEC
21966: ST_TO_ADDR
21967: LD_VAR 0 2
21971: PUSH
21972: FOR_TO
21973: IFFALSE 22142
// begin if hackTanksCaptured [ index ] = hackLimit then
21975: LD_EXP 71
21979: PUSH
21980: LD_VAR 0 5
21984: ARRAY
21985: PUSH
21986: LD_EXP 72
21990: EQUAL
21991: IFFALSE 21995
// break ;
21993: GO 22142
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21995: LD_ADDR_EXP 74
21999: PUSH
22000: LD_EXP 74
22004: PPUSH
22005: LD_VAR 0 5
22009: PPUSH
22010: LD_EXP 74
22014: PUSH
22015: LD_VAR 0 5
22019: ARRAY
22020: PUSH
22021: LD_INT 1
22023: PLUS
22024: PPUSH
22025: CALL_OW 1
22029: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22030: LD_ADDR_EXP 71
22034: PUSH
22035: LD_EXP 71
22039: PPUSH
22040: LD_VAR 0 5
22044: PUSH
22045: LD_EXP 71
22049: PUSH
22050: LD_VAR 0 5
22054: ARRAY
22055: PUSH
22056: LD_INT 1
22058: PLUS
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PPUSH
22064: LD_VAR 0 2
22068: PUSH
22069: LD_VAR 0 4
22073: ARRAY
22074: PUSH
22075: LD_VAR 0 2
22079: PUSH
22080: LD_VAR 0 4
22084: ARRAY
22085: PPUSH
22086: CALL_OW 255
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL 29518 0 3
22099: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22100: LD_VAR 0 2
22104: PUSH
22105: LD_VAR 0 4
22109: ARRAY
22110: PPUSH
22111: LD_VAR 0 1
22115: PPUSH
22116: CALL_OW 255
22120: PPUSH
22121: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22125: LD_VAR 0 2
22129: PUSH
22130: LD_VAR 0 4
22134: ARRAY
22135: PPUSH
22136: CALL_OW 141
// end ;
22140: GO 21972
22142: POP
22143: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22144: LD_VAR 0 1
22148: PPUSH
22149: LD_EXP 71
22153: PUSH
22154: LD_VAR 0 5
22158: ARRAY
22159: PUSH
22160: LD_INT 0
22162: PLUS
22163: PPUSH
22164: CALL_OW 505
// end ;
22168: LD_VAR 0 3
22172: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22173: LD_INT 0
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
// if not hack in hackTanks then
22179: LD_VAR 0 1
22183: PUSH
22184: LD_EXP 70
22188: IN
22189: NOT
22190: IFFALSE 22194
// exit ;
22192: GO 22434
// index := GetElementIndex ( hackTanks , hack ) ;
22194: LD_ADDR_VAR 0 4
22198: PUSH
22199: LD_EXP 70
22203: PPUSH
22204: LD_VAR 0 1
22208: PPUSH
22209: CALL 29303 0 2
22213: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22214: LD_ADDR_VAR 0 3
22218: PUSH
22219: DOUBLE
22220: LD_EXP 71
22224: PUSH
22225: LD_VAR 0 4
22229: ARRAY
22230: INC
22231: ST_TO_ADDR
22232: LD_INT 1
22234: PUSH
22235: FOR_DOWNTO
22236: IFFALSE 22408
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22238: LD_ADDR_VAR 0 5
22242: PUSH
22243: LD_EXP 71
22247: PUSH
22248: LD_VAR 0 4
22252: ARRAY
22253: PUSH
22254: LD_VAR 0 3
22258: ARRAY
22259: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22260: LD_VAR 0 5
22264: PUSH
22265: LD_INT 1
22267: ARRAY
22268: PPUSH
22269: CALL_OW 302
22273: NOT
22274: PUSH
22275: LD_VAR 0 5
22279: PUSH
22280: LD_INT 1
22282: ARRAY
22283: PPUSH
22284: CALL_OW 255
22288: PUSH
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL_OW 255
22298: NONEQUAL
22299: OR
22300: IFFALSE 22406
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22302: LD_VAR 0 5
22306: PUSH
22307: LD_INT 1
22309: ARRAY
22310: PPUSH
22311: CALL_OW 305
22315: PUSH
22316: LD_VAR 0 5
22320: PUSH
22321: LD_INT 1
22323: ARRAY
22324: PPUSH
22325: CALL_OW 255
22329: PUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 255
22339: EQUAL
22340: AND
22341: IFFALSE 22365
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22343: LD_VAR 0 5
22347: PUSH
22348: LD_INT 1
22350: ARRAY
22351: PPUSH
22352: LD_VAR 0 5
22356: PUSH
22357: LD_INT 2
22359: ARRAY
22360: PPUSH
22361: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22365: LD_ADDR_EXP 71
22369: PUSH
22370: LD_EXP 71
22374: PPUSH
22375: LD_VAR 0 4
22379: PPUSH
22380: LD_EXP 71
22384: PUSH
22385: LD_VAR 0 4
22389: ARRAY
22390: PPUSH
22391: LD_VAR 0 3
22395: PPUSH
22396: CALL_OW 3
22400: PPUSH
22401: CALL_OW 1
22405: ST_TO_ADDR
// end ; end ;
22406: GO 22235
22408: POP
22409: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22410: LD_VAR 0 1
22414: PPUSH
22415: LD_EXP 71
22419: PUSH
22420: LD_VAR 0 4
22424: ARRAY
22425: PUSH
22426: LD_INT 0
22428: PLUS
22429: PPUSH
22430: CALL_OW 505
// end ;
22434: LD_VAR 0 2
22438: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22439: LD_INT 0
22441: PPUSH
22442: PPUSH
22443: PPUSH
22444: PPUSH
// if not hack in hackTanks then
22445: LD_VAR 0 1
22449: PUSH
22450: LD_EXP 70
22454: IN
22455: NOT
22456: IFFALSE 22460
// exit ;
22458: GO 22545
// index := GetElementIndex ( hackTanks , hack ) ;
22460: LD_ADDR_VAR 0 5
22464: PUSH
22465: LD_EXP 70
22469: PPUSH
22470: LD_VAR 0 1
22474: PPUSH
22475: CALL 29303 0 2
22479: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22480: LD_ADDR_VAR 0 4
22484: PUSH
22485: DOUBLE
22486: LD_INT 1
22488: DEC
22489: ST_TO_ADDR
22490: LD_EXP 71
22494: PUSH
22495: LD_VAR 0 5
22499: ARRAY
22500: PUSH
22501: FOR_TO
22502: IFFALSE 22543
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22504: LD_EXP 71
22508: PUSH
22509: LD_VAR 0 5
22513: ARRAY
22514: PUSH
22515: LD_VAR 0 4
22519: ARRAY
22520: PUSH
22521: LD_INT 1
22523: ARRAY
22524: PUSH
22525: LD_VAR 0 2
22529: EQUAL
22530: IFFALSE 22541
// KillUnit ( vehicle ) ;
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 66
22541: GO 22501
22543: POP
22544: POP
// end ;
22545: LD_VAR 0 3
22549: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22550: LD_EXP 75
22554: NOT
22555: IFFALSE 22590
22557: GO 22559
22559: DISABLE
// begin initMiner := true ;
22560: LD_ADDR_EXP 75
22564: PUSH
22565: LD_INT 1
22567: ST_TO_ADDR
// minersList := [ ] ;
22568: LD_ADDR_EXP 76
22572: PUSH
22573: EMPTY
22574: ST_TO_ADDR
// minerMinesList := [ ] ;
22575: LD_ADDR_EXP 77
22579: PUSH
22580: EMPTY
22581: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22582: LD_ADDR_EXP 78
22586: PUSH
22587: LD_INT 5
22589: ST_TO_ADDR
// end ;
22590: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22591: LD_EXP 75
22595: PUSH
22596: LD_INT 34
22598: PUSH
22599: LD_INT 81
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PPUSH
22606: CALL_OW 69
22610: AND
22611: IFFALSE 23072
22613: GO 22615
22615: DISABLE
22616: LD_INT 0
22618: PPUSH
22619: PPUSH
22620: PPUSH
22621: PPUSH
// begin enable ;
22622: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22623: LD_ADDR_VAR 0 1
22627: PUSH
22628: LD_INT 34
22630: PUSH
22631: LD_INT 81
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PPUSH
22638: CALL_OW 69
22642: PUSH
22643: FOR_IN
22644: IFFALSE 22716
// begin if not i in minersList then
22646: LD_VAR 0 1
22650: PUSH
22651: LD_EXP 76
22655: IN
22656: NOT
22657: IFFALSE 22714
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22659: LD_ADDR_EXP 76
22663: PUSH
22664: LD_EXP 76
22668: PPUSH
22669: LD_EXP 76
22673: PUSH
22674: LD_INT 1
22676: PLUS
22677: PPUSH
22678: LD_VAR 0 1
22682: PPUSH
22683: CALL_OW 1
22687: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22688: LD_ADDR_EXP 77
22692: PUSH
22693: LD_EXP 77
22697: PPUSH
22698: LD_EXP 77
22702: PUSH
22703: LD_INT 1
22705: PLUS
22706: PPUSH
22707: EMPTY
22708: PPUSH
22709: CALL_OW 1
22713: ST_TO_ADDR
// end end ;
22714: GO 22643
22716: POP
22717: POP
// for i := minerMinesList downto 1 do
22718: LD_ADDR_VAR 0 1
22722: PUSH
22723: DOUBLE
22724: LD_EXP 77
22728: INC
22729: ST_TO_ADDR
22730: LD_INT 1
22732: PUSH
22733: FOR_DOWNTO
22734: IFFALSE 23070
// begin if IsLive ( minersList [ i ] ) then
22736: LD_EXP 76
22740: PUSH
22741: LD_VAR 0 1
22745: ARRAY
22746: PPUSH
22747: CALL_OW 300
22751: IFFALSE 22779
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22753: LD_EXP 76
22757: PUSH
22758: LD_VAR 0 1
22762: ARRAY
22763: PPUSH
22764: LD_EXP 77
22768: PUSH
22769: LD_VAR 0 1
22773: ARRAY
22774: PPUSH
22775: CALL_OW 505
// if not minerMinesList [ i ] then
22779: LD_EXP 77
22783: PUSH
22784: LD_VAR 0 1
22788: ARRAY
22789: NOT
22790: IFFALSE 22794
// continue ;
22792: GO 22733
// for j := minerMinesList [ i ] downto 1 do
22794: LD_ADDR_VAR 0 2
22798: PUSH
22799: DOUBLE
22800: LD_EXP 77
22804: PUSH
22805: LD_VAR 0 1
22809: ARRAY
22810: INC
22811: ST_TO_ADDR
22812: LD_INT 1
22814: PUSH
22815: FOR_DOWNTO
22816: IFFALSE 23066
// begin side := GetSide ( minersList [ i ] ) ;
22818: LD_ADDR_VAR 0 3
22822: PUSH
22823: LD_EXP 76
22827: PUSH
22828: LD_VAR 0 1
22832: ARRAY
22833: PPUSH
22834: CALL_OW 255
22838: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22839: LD_ADDR_VAR 0 4
22843: PUSH
22844: LD_EXP 77
22848: PUSH
22849: LD_VAR 0 1
22853: ARRAY
22854: PUSH
22855: LD_VAR 0 2
22859: ARRAY
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: LD_EXP 77
22869: PUSH
22870: LD_VAR 0 1
22874: ARRAY
22875: PUSH
22876: LD_VAR 0 2
22880: ARRAY
22881: PUSH
22882: LD_INT 2
22884: ARRAY
22885: PPUSH
22886: CALL_OW 428
22890: ST_TO_ADDR
// if not tmp then
22891: LD_VAR 0 4
22895: NOT
22896: IFFALSE 22900
// continue ;
22898: GO 22815
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22900: LD_VAR 0 4
22904: PUSH
22905: LD_INT 81
22907: PUSH
22908: LD_VAR 0 3
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 69
22921: IN
22922: PUSH
22923: LD_EXP 77
22927: PUSH
22928: LD_VAR 0 1
22932: ARRAY
22933: PUSH
22934: LD_VAR 0 2
22938: ARRAY
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: PPUSH
22944: LD_EXP 77
22948: PUSH
22949: LD_VAR 0 1
22953: ARRAY
22954: PUSH
22955: LD_VAR 0 2
22959: ARRAY
22960: PUSH
22961: LD_INT 2
22963: ARRAY
22964: PPUSH
22965: CALL_OW 458
22969: AND
22970: IFFALSE 23064
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22972: LD_EXP 77
22976: PUSH
22977: LD_VAR 0 1
22981: ARRAY
22982: PUSH
22983: LD_VAR 0 2
22987: ARRAY
22988: PUSH
22989: LD_INT 1
22991: ARRAY
22992: PPUSH
22993: LD_EXP 77
22997: PUSH
22998: LD_VAR 0 1
23002: ARRAY
23003: PUSH
23004: LD_VAR 0 2
23008: ARRAY
23009: PUSH
23010: LD_INT 2
23012: ARRAY
23013: PPUSH
23014: LD_VAR 0 3
23018: PPUSH
23019: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23023: LD_ADDR_EXP 77
23027: PUSH
23028: LD_EXP 77
23032: PPUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: LD_EXP 77
23042: PUSH
23043: LD_VAR 0 1
23047: ARRAY
23048: PPUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 3
23058: PPUSH
23059: CALL_OW 1
23063: ST_TO_ADDR
// end ; end ;
23064: GO 22815
23066: POP
23067: POP
// end ;
23068: GO 22733
23070: POP
23071: POP
// end ;
23072: PPOPN 4
23074: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23075: LD_INT 0
23077: PPUSH
23078: PPUSH
// result := false ;
23079: LD_ADDR_VAR 0 4
23083: PUSH
23084: LD_INT 0
23086: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL_OW 264
23096: PUSH
23097: LD_INT 81
23099: EQUAL
23100: NOT
23101: IFFALSE 23105
// exit ;
23103: GO 23345
// index := GetElementIndex ( minersList , unit ) ;
23105: LD_ADDR_VAR 0 5
23109: PUSH
23110: LD_EXP 76
23114: PPUSH
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL 29303 0 2
23124: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23125: LD_EXP 77
23129: PUSH
23130: LD_VAR 0 5
23134: ARRAY
23135: PUSH
23136: LD_EXP 78
23140: GREATEREQUAL
23141: IFFALSE 23145
// exit ;
23143: GO 23345
// ComMoveXY ( unit , x , y ) ;
23145: LD_VAR 0 1
23149: PPUSH
23150: LD_VAR 0 2
23154: PPUSH
23155: LD_VAR 0 3
23159: PPUSH
23160: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23164: LD_INT 35
23166: PPUSH
23167: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_VAR 0 2
23180: PPUSH
23181: LD_VAR 0 3
23185: PPUSH
23186: CALL 60687 0 3
23190: NOT
23191: PUSH
23192: LD_VAR 0 1
23196: PPUSH
23197: CALL_OW 314
23201: AND
23202: IFFALSE 23206
// exit ;
23204: GO 23345
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23206: LD_VAR 0 2
23210: PPUSH
23211: LD_VAR 0 3
23215: PPUSH
23216: CALL_OW 428
23220: PUSH
23221: LD_VAR 0 1
23225: EQUAL
23226: PUSH
23227: LD_VAR 0 1
23231: PPUSH
23232: CALL_OW 314
23236: NOT
23237: AND
23238: IFFALSE 23164
// PlaySoundXY ( x , y , PlantMine ) ;
23240: LD_VAR 0 2
23244: PPUSH
23245: LD_VAR 0 3
23249: PPUSH
23250: LD_STRING PlantMine
23252: PPUSH
23253: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23257: LD_VAR 0 2
23261: PPUSH
23262: LD_VAR 0 3
23266: PPUSH
23267: LD_VAR 0 1
23271: PPUSH
23272: CALL_OW 255
23276: PPUSH
23277: LD_INT 0
23279: PPUSH
23280: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23284: LD_ADDR_EXP 77
23288: PUSH
23289: LD_EXP 77
23293: PPUSH
23294: LD_VAR 0 5
23298: PUSH
23299: LD_EXP 77
23303: PUSH
23304: LD_VAR 0 5
23308: ARRAY
23309: PUSH
23310: LD_INT 1
23312: PLUS
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PPUSH
23318: LD_VAR 0 2
23322: PUSH
23323: LD_VAR 0 3
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PPUSH
23332: CALL 29518 0 3
23336: ST_TO_ADDR
// result := true ;
23337: LD_ADDR_VAR 0 4
23341: PUSH
23342: LD_INT 1
23344: ST_TO_ADDR
// end ;
23345: LD_VAR 0 4
23349: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23350: LD_INT 0
23352: PPUSH
23353: PPUSH
23354: PPUSH
// if not unit in minersList then
23355: LD_VAR 0 1
23359: PUSH
23360: LD_EXP 76
23364: IN
23365: NOT
23366: IFFALSE 23370
// exit ;
23368: GO 23762
// index := GetElementIndex ( minersList , unit ) ;
23370: LD_ADDR_VAR 0 6
23374: PUSH
23375: LD_EXP 76
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL 29303 0 2
23389: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23390: LD_ADDR_VAR 0 5
23394: PUSH
23395: DOUBLE
23396: LD_EXP 77
23400: PUSH
23401: LD_VAR 0 6
23405: ARRAY
23406: INC
23407: ST_TO_ADDR
23408: LD_INT 1
23410: PUSH
23411: FOR_DOWNTO
23412: IFFALSE 23573
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23414: LD_EXP 77
23418: PUSH
23419: LD_VAR 0 6
23423: ARRAY
23424: PUSH
23425: LD_VAR 0 5
23429: ARRAY
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PUSH
23435: LD_VAR 0 2
23439: EQUAL
23440: PUSH
23441: LD_EXP 77
23445: PUSH
23446: LD_VAR 0 6
23450: ARRAY
23451: PUSH
23452: LD_VAR 0 5
23456: ARRAY
23457: PUSH
23458: LD_INT 2
23460: ARRAY
23461: PUSH
23462: LD_VAR 0 3
23466: EQUAL
23467: AND
23468: IFFALSE 23571
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23470: LD_EXP 77
23474: PUSH
23475: LD_VAR 0 6
23479: ARRAY
23480: PUSH
23481: LD_VAR 0 5
23485: ARRAY
23486: PUSH
23487: LD_INT 1
23489: ARRAY
23490: PPUSH
23491: LD_EXP 77
23495: PUSH
23496: LD_VAR 0 6
23500: ARRAY
23501: PUSH
23502: LD_VAR 0 5
23506: ARRAY
23507: PUSH
23508: LD_INT 2
23510: ARRAY
23511: PPUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 255
23521: PPUSH
23522: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23526: LD_ADDR_EXP 77
23530: PUSH
23531: LD_EXP 77
23535: PPUSH
23536: LD_VAR 0 6
23540: PPUSH
23541: LD_EXP 77
23545: PUSH
23546: LD_VAR 0 6
23550: ARRAY
23551: PPUSH
23552: LD_VAR 0 5
23556: PPUSH
23557: CALL_OW 3
23561: PPUSH
23562: CALL_OW 1
23566: ST_TO_ADDR
// exit ;
23567: POP
23568: POP
23569: GO 23762
// end ; end ;
23571: GO 23411
23573: POP
23574: POP
// for i := minerMinesList [ index ] downto 1 do
23575: LD_ADDR_VAR 0 5
23579: PUSH
23580: DOUBLE
23581: LD_EXP 77
23585: PUSH
23586: LD_VAR 0 6
23590: ARRAY
23591: INC
23592: ST_TO_ADDR
23593: LD_INT 1
23595: PUSH
23596: FOR_DOWNTO
23597: IFFALSE 23760
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23599: LD_EXP 77
23603: PUSH
23604: LD_VAR 0 6
23608: ARRAY
23609: PUSH
23610: LD_VAR 0 5
23614: ARRAY
23615: PUSH
23616: LD_INT 1
23618: ARRAY
23619: PPUSH
23620: LD_EXP 77
23624: PUSH
23625: LD_VAR 0 6
23629: ARRAY
23630: PUSH
23631: LD_VAR 0 5
23635: ARRAY
23636: PUSH
23637: LD_INT 2
23639: ARRAY
23640: PPUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: CALL_OW 298
23655: PUSH
23656: LD_INT 6
23658: LESS
23659: IFFALSE 23758
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23661: LD_EXP 77
23665: PUSH
23666: LD_VAR 0 6
23670: ARRAY
23671: PUSH
23672: LD_VAR 0 5
23676: ARRAY
23677: PUSH
23678: LD_INT 1
23680: ARRAY
23681: PPUSH
23682: LD_EXP 77
23686: PUSH
23687: LD_VAR 0 6
23691: ARRAY
23692: PUSH
23693: LD_VAR 0 5
23697: ARRAY
23698: PUSH
23699: LD_INT 2
23701: ARRAY
23702: PPUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 255
23712: PPUSH
23713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23717: LD_ADDR_EXP 77
23721: PUSH
23722: LD_EXP 77
23726: PPUSH
23727: LD_VAR 0 6
23731: PPUSH
23732: LD_EXP 77
23736: PUSH
23737: LD_VAR 0 6
23741: ARRAY
23742: PPUSH
23743: LD_VAR 0 5
23747: PPUSH
23748: CALL_OW 3
23752: PPUSH
23753: CALL_OW 1
23757: ST_TO_ADDR
// end ; end ;
23758: GO 23596
23760: POP
23761: POP
// end ;
23762: LD_VAR 0 4
23766: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23767: LD_INT 0
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL_OW 264
23787: PUSH
23788: LD_INT 81
23790: EQUAL
23791: NOT
23792: PUSH
23793: LD_VAR 0 1
23797: PUSH
23798: LD_EXP 76
23802: IN
23803: NOT
23804: OR
23805: IFFALSE 23809
// exit ;
23807: GO 24131
// index := GetElementIndex ( minersList , unit ) ;
23809: LD_ADDR_VAR 0 6
23813: PUSH
23814: LD_EXP 76
23818: PPUSH
23819: LD_VAR 0 1
23823: PPUSH
23824: CALL 29303 0 2
23828: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23829: LD_ADDR_VAR 0 8
23833: PUSH
23834: LD_EXP 78
23838: PUSH
23839: LD_EXP 77
23843: PUSH
23844: LD_VAR 0 6
23848: ARRAY
23849: MINUS
23850: ST_TO_ADDR
// if not minesFreeAmount then
23851: LD_VAR 0 8
23855: NOT
23856: IFFALSE 23860
// exit ;
23858: GO 24131
// tmp := [ ] ;
23860: LD_ADDR_VAR 0 7
23864: PUSH
23865: EMPTY
23866: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23867: LD_ADDR_VAR 0 5
23871: PUSH
23872: DOUBLE
23873: LD_INT 1
23875: DEC
23876: ST_TO_ADDR
23877: LD_VAR 0 8
23881: PUSH
23882: FOR_TO
23883: IFFALSE 24078
// begin _d := rand ( 0 , 5 ) ;
23885: LD_ADDR_VAR 0 11
23889: PUSH
23890: LD_INT 0
23892: PPUSH
23893: LD_INT 5
23895: PPUSH
23896: CALL_OW 12
23900: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23901: LD_ADDR_VAR 0 12
23905: PUSH
23906: LD_INT 2
23908: PPUSH
23909: LD_INT 6
23911: PPUSH
23912: CALL_OW 12
23916: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23917: LD_ADDR_VAR 0 9
23921: PUSH
23922: LD_VAR 0 2
23926: PPUSH
23927: LD_VAR 0 11
23931: PPUSH
23932: LD_VAR 0 12
23936: PPUSH
23937: CALL_OW 272
23941: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23942: LD_ADDR_VAR 0 10
23946: PUSH
23947: LD_VAR 0 3
23951: PPUSH
23952: LD_VAR 0 11
23956: PPUSH
23957: LD_VAR 0 12
23961: PPUSH
23962: CALL_OW 273
23966: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23967: LD_VAR 0 9
23971: PPUSH
23972: LD_VAR 0 10
23976: PPUSH
23977: CALL_OW 488
23981: PUSH
23982: LD_VAR 0 9
23986: PUSH
23987: LD_VAR 0 10
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_VAR 0 7
24000: IN
24001: NOT
24002: AND
24003: PUSH
24004: LD_VAR 0 9
24008: PPUSH
24009: LD_VAR 0 10
24013: PPUSH
24014: CALL_OW 458
24018: NOT
24019: AND
24020: IFFALSE 24062
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24022: LD_ADDR_VAR 0 7
24026: PUSH
24027: LD_VAR 0 7
24031: PPUSH
24032: LD_VAR 0 7
24036: PUSH
24037: LD_INT 1
24039: PLUS
24040: PPUSH
24041: LD_VAR 0 9
24045: PUSH
24046: LD_VAR 0 10
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PPUSH
24055: CALL_OW 1
24059: ST_TO_ADDR
24060: GO 24076
// i := i - 1 ;
24062: LD_ADDR_VAR 0 5
24066: PUSH
24067: LD_VAR 0 5
24071: PUSH
24072: LD_INT 1
24074: MINUS
24075: ST_TO_ADDR
// end ;
24076: GO 23882
24078: POP
24079: POP
// for i in tmp do
24080: LD_ADDR_VAR 0 5
24084: PUSH
24085: LD_VAR 0 7
24089: PUSH
24090: FOR_IN
24091: IFFALSE 24129
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24093: LD_VAR 0 1
24097: PPUSH
24098: LD_VAR 0 5
24102: PUSH
24103: LD_INT 1
24105: ARRAY
24106: PPUSH
24107: LD_VAR 0 5
24111: PUSH
24112: LD_INT 2
24114: ARRAY
24115: PPUSH
24116: CALL 23075 0 3
24120: NOT
24121: IFFALSE 24127
// exit ;
24123: POP
24124: POP
24125: GO 24131
24127: GO 24090
24129: POP
24130: POP
// end ;
24131: LD_VAR 0 4
24135: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24136: LD_INT 0
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
// if not GetClass ( unit ) = class_sniper then
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 257
24154: PUSH
24155: LD_INT 5
24157: EQUAL
24158: NOT
24159: IFFALSE 24163
// exit ;
24161: GO 24551
// dist := 8 ;
24163: LD_ADDR_VAR 0 5
24167: PUSH
24168: LD_INT 8
24170: ST_TO_ADDR
// viewRange := 12 ;
24171: LD_ADDR_VAR 0 7
24175: PUSH
24176: LD_INT 12
24178: ST_TO_ADDR
// side := GetSide ( unit ) ;
24179: LD_ADDR_VAR 0 6
24183: PUSH
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL_OW 255
24193: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24194: LD_INT 61
24196: PPUSH
24197: LD_VAR 0 6
24201: PPUSH
24202: CALL_OW 321
24206: PUSH
24207: LD_INT 2
24209: EQUAL
24210: IFFALSE 24220
// viewRange := 16 ;
24212: LD_ADDR_VAR 0 7
24216: PUSH
24217: LD_INT 16
24219: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24220: LD_VAR 0 1
24224: PPUSH
24225: LD_VAR 0 2
24229: PPUSH
24230: LD_VAR 0 3
24234: PPUSH
24235: CALL_OW 297
24239: PUSH
24240: LD_VAR 0 5
24244: GREATER
24245: IFFALSE 24324
// begin ComMoveXY ( unit , x , y ) ;
24247: LD_VAR 0 1
24251: PPUSH
24252: LD_VAR 0 2
24256: PPUSH
24257: LD_VAR 0 3
24261: PPUSH
24262: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24266: LD_INT 35
24268: PPUSH
24269: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24273: LD_VAR 0 1
24277: PPUSH
24278: LD_VAR 0 2
24282: PPUSH
24283: LD_VAR 0 3
24287: PPUSH
24288: CALL 60687 0 3
24292: NOT
24293: IFFALSE 24297
// exit ;
24295: GO 24551
// until GetDistUnitXY ( unit , x , y ) < dist ;
24297: LD_VAR 0 1
24301: PPUSH
24302: LD_VAR 0 2
24306: PPUSH
24307: LD_VAR 0 3
24311: PPUSH
24312: CALL_OW 297
24316: PUSH
24317: LD_VAR 0 5
24321: LESS
24322: IFFALSE 24266
// end ; ComTurnXY ( unit , x , y ) ;
24324: LD_VAR 0 1
24328: PPUSH
24329: LD_VAR 0 2
24333: PPUSH
24334: LD_VAR 0 3
24338: PPUSH
24339: CALL_OW 118
// wait ( 5 ) ;
24343: LD_INT 5
24345: PPUSH
24346: CALL_OW 67
// _d := GetDir ( unit ) ;
24350: LD_ADDR_VAR 0 10
24354: PUSH
24355: LD_VAR 0 1
24359: PPUSH
24360: CALL_OW 254
24364: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24365: LD_ADDR_VAR 0 8
24369: PUSH
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 250
24379: PPUSH
24380: LD_VAR 0 10
24384: PPUSH
24385: LD_VAR 0 5
24389: PPUSH
24390: CALL_OW 272
24394: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24395: LD_ADDR_VAR 0 9
24399: PUSH
24400: LD_VAR 0 1
24404: PPUSH
24405: CALL_OW 251
24409: PPUSH
24410: LD_VAR 0 10
24414: PPUSH
24415: LD_VAR 0 5
24419: PPUSH
24420: CALL_OW 273
24424: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24425: LD_VAR 0 8
24429: PPUSH
24430: LD_VAR 0 9
24434: PPUSH
24435: CALL_OW 488
24439: NOT
24440: IFFALSE 24444
// exit ;
24442: GO 24551
// ComAnimCustom ( unit , 1 ) ;
24444: LD_VAR 0 1
24448: PPUSH
24449: LD_INT 1
24451: PPUSH
24452: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24456: LD_VAR 0 8
24460: PPUSH
24461: LD_VAR 0 9
24465: PPUSH
24466: LD_VAR 0 6
24470: PPUSH
24471: LD_VAR 0 7
24475: PPUSH
24476: CALL_OW 330
// repeat wait ( 1 ) ;
24480: LD_INT 1
24482: PPUSH
24483: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 316
24496: PUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 314
24506: OR
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 302
24517: NOT
24518: OR
24519: PUSH
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL_OW 301
24529: OR
24530: IFFALSE 24480
// RemoveSeeing ( _x , _y , side ) ;
24532: LD_VAR 0 8
24536: PPUSH
24537: LD_VAR 0 9
24541: PPUSH
24542: LD_VAR 0 6
24546: PPUSH
24547: CALL_OW 331
// end ; end_of_file
24551: LD_VAR 0 4
24555: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24556: LD_INT 0
24558: PPUSH
24559: PPUSH
// if exist_mode then
24560: LD_VAR 0 2
24564: IFFALSE 24589
// unit := CreateCharacter ( prefix & ident ) else
24566: LD_ADDR_VAR 0 5
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 1
24580: STR
24581: PPUSH
24582: CALL_OW 34
24586: ST_TO_ADDR
24587: GO 24604
// unit := NewCharacter ( ident ) ;
24589: LD_ADDR_VAR 0 5
24593: PUSH
24594: LD_VAR 0 1
24598: PPUSH
24599: CALL_OW 25
24603: ST_TO_ADDR
// result := unit ;
24604: LD_ADDR_VAR 0 4
24608: PUSH
24609: LD_VAR 0 5
24613: ST_TO_ADDR
// end ;
24614: LD_VAR 0 4
24618: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24619: LD_INT 0
24621: PPUSH
24622: PPUSH
// if not side or not nation then
24623: LD_VAR 0 1
24627: NOT
24628: PUSH
24629: LD_VAR 0 2
24633: NOT
24634: OR
24635: IFFALSE 24639
// exit ;
24637: GO 25407
// case nation of nation_american :
24639: LD_VAR 0 2
24643: PUSH
24644: LD_INT 1
24646: DOUBLE
24647: EQUAL
24648: IFTRUE 24652
24650: GO 24866
24652: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24653: LD_ADDR_VAR 0 4
24657: PUSH
24658: LD_INT 35
24660: PUSH
24661: LD_INT 45
24663: PUSH
24664: LD_INT 46
24666: PUSH
24667: LD_INT 47
24669: PUSH
24670: LD_INT 82
24672: PUSH
24673: LD_INT 83
24675: PUSH
24676: LD_INT 84
24678: PUSH
24679: LD_INT 85
24681: PUSH
24682: LD_INT 86
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 6
24693: PUSH
24694: LD_INT 15
24696: PUSH
24697: LD_INT 16
24699: PUSH
24700: LD_INT 7
24702: PUSH
24703: LD_INT 12
24705: PUSH
24706: LD_INT 13
24708: PUSH
24709: LD_INT 10
24711: PUSH
24712: LD_INT 14
24714: PUSH
24715: LD_INT 20
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_INT 25
24726: PUSH
24727: LD_INT 32
24729: PUSH
24730: LD_INT 27
24732: PUSH
24733: LD_INT 36
24735: PUSH
24736: LD_INT 69
24738: PUSH
24739: LD_INT 39
24741: PUSH
24742: LD_INT 34
24744: PUSH
24745: LD_INT 40
24747: PUSH
24748: LD_INT 48
24750: PUSH
24751: LD_INT 49
24753: PUSH
24754: LD_INT 50
24756: PUSH
24757: LD_INT 51
24759: PUSH
24760: LD_INT 52
24762: PUSH
24763: LD_INT 53
24765: PUSH
24766: LD_INT 54
24768: PUSH
24769: LD_INT 55
24771: PUSH
24772: LD_INT 56
24774: PUSH
24775: LD_INT 57
24777: PUSH
24778: LD_INT 58
24780: PUSH
24781: LD_INT 59
24783: PUSH
24784: LD_INT 60
24786: PUSH
24787: LD_INT 61
24789: PUSH
24790: LD_INT 62
24792: PUSH
24793: LD_INT 80
24795: PUSH
24796: LD_INT 82
24798: PUSH
24799: LD_INT 83
24801: PUSH
24802: LD_INT 84
24804: PUSH
24805: LD_INT 85
24807: PUSH
24808: LD_INT 86
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: ST_TO_ADDR
24864: GO 25331
24866: LD_INT 2
24868: DOUBLE
24869: EQUAL
24870: IFTRUE 24874
24872: GO 25100
24874: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24875: LD_ADDR_VAR 0 4
24879: PUSH
24880: LD_INT 35
24882: PUSH
24883: LD_INT 45
24885: PUSH
24886: LD_INT 46
24888: PUSH
24889: LD_INT 47
24891: PUSH
24892: LD_INT 82
24894: PUSH
24895: LD_INT 83
24897: PUSH
24898: LD_INT 84
24900: PUSH
24901: LD_INT 85
24903: PUSH
24904: LD_INT 87
24906: PUSH
24907: LD_INT 70
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 11
24915: PUSH
24916: LD_INT 3
24918: PUSH
24919: LD_INT 4
24921: PUSH
24922: LD_INT 5
24924: PUSH
24925: LD_INT 6
24927: PUSH
24928: LD_INT 15
24930: PUSH
24931: LD_INT 18
24933: PUSH
24934: LD_INT 7
24936: PUSH
24937: LD_INT 17
24939: PUSH
24940: LD_INT 8
24942: PUSH
24943: LD_INT 20
24945: PUSH
24946: LD_INT 21
24948: PUSH
24949: LD_INT 22
24951: PUSH
24952: LD_INT 72
24954: PUSH
24955: LD_INT 26
24957: PUSH
24958: LD_INT 69
24960: PUSH
24961: LD_INT 39
24963: PUSH
24964: LD_INT 40
24966: PUSH
24967: LD_INT 41
24969: PUSH
24970: LD_INT 42
24972: PUSH
24973: LD_INT 43
24975: PUSH
24976: LD_INT 48
24978: PUSH
24979: LD_INT 49
24981: PUSH
24982: LD_INT 50
24984: PUSH
24985: LD_INT 51
24987: PUSH
24988: LD_INT 52
24990: PUSH
24991: LD_INT 53
24993: PUSH
24994: LD_INT 54
24996: PUSH
24997: LD_INT 55
24999: PUSH
25000: LD_INT 56
25002: PUSH
25003: LD_INT 60
25005: PUSH
25006: LD_INT 61
25008: PUSH
25009: LD_INT 62
25011: PUSH
25012: LD_INT 66
25014: PUSH
25015: LD_INT 67
25017: PUSH
25018: LD_INT 68
25020: PUSH
25021: LD_INT 81
25023: PUSH
25024: LD_INT 82
25026: PUSH
25027: LD_INT 83
25029: PUSH
25030: LD_INT 84
25032: PUSH
25033: LD_INT 85
25035: PUSH
25036: LD_INT 87
25038: PUSH
25039: LD_INT 88
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: ST_TO_ADDR
25098: GO 25331
25100: LD_INT 3
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25108
25106: GO 25330
25108: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25109: LD_ADDR_VAR 0 4
25113: PUSH
25114: LD_INT 46
25116: PUSH
25117: LD_INT 47
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 2
25125: PUSH
25126: LD_INT 82
25128: PUSH
25129: LD_INT 83
25131: PUSH
25132: LD_INT 84
25134: PUSH
25135: LD_INT 85
25137: PUSH
25138: LD_INT 86
25140: PUSH
25141: LD_INT 11
25143: PUSH
25144: LD_INT 9
25146: PUSH
25147: LD_INT 20
25149: PUSH
25150: LD_INT 19
25152: PUSH
25153: LD_INT 21
25155: PUSH
25156: LD_INT 24
25158: PUSH
25159: LD_INT 22
25161: PUSH
25162: LD_INT 25
25164: PUSH
25165: LD_INT 28
25167: PUSH
25168: LD_INT 29
25170: PUSH
25171: LD_INT 30
25173: PUSH
25174: LD_INT 31
25176: PUSH
25177: LD_INT 37
25179: PUSH
25180: LD_INT 38
25182: PUSH
25183: LD_INT 32
25185: PUSH
25186: LD_INT 27
25188: PUSH
25189: LD_INT 33
25191: PUSH
25192: LD_INT 69
25194: PUSH
25195: LD_INT 39
25197: PUSH
25198: LD_INT 34
25200: PUSH
25201: LD_INT 40
25203: PUSH
25204: LD_INT 71
25206: PUSH
25207: LD_INT 23
25209: PUSH
25210: LD_INT 44
25212: PUSH
25213: LD_INT 48
25215: PUSH
25216: LD_INT 49
25218: PUSH
25219: LD_INT 50
25221: PUSH
25222: LD_INT 51
25224: PUSH
25225: LD_INT 52
25227: PUSH
25228: LD_INT 53
25230: PUSH
25231: LD_INT 54
25233: PUSH
25234: LD_INT 55
25236: PUSH
25237: LD_INT 56
25239: PUSH
25240: LD_INT 57
25242: PUSH
25243: LD_INT 58
25245: PUSH
25246: LD_INT 59
25248: PUSH
25249: LD_INT 63
25251: PUSH
25252: LD_INT 64
25254: PUSH
25255: LD_INT 65
25257: PUSH
25258: LD_INT 82
25260: PUSH
25261: LD_INT 83
25263: PUSH
25264: LD_INT 84
25266: PUSH
25267: LD_INT 85
25269: PUSH
25270: LD_INT 86
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: ST_TO_ADDR
25328: GO 25331
25330: POP
// if state > - 1 and state < 3 then
25331: LD_VAR 0 3
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: GREATER
25340: PUSH
25341: LD_VAR 0 3
25345: PUSH
25346: LD_INT 3
25348: LESS
25349: AND
25350: IFFALSE 25407
// for i in result do
25352: LD_ADDR_VAR 0 5
25356: PUSH
25357: LD_VAR 0 4
25361: PUSH
25362: FOR_IN
25363: IFFALSE 25405
// if GetTech ( i , side ) <> state then
25365: LD_VAR 0 5
25369: PPUSH
25370: LD_VAR 0 1
25374: PPUSH
25375: CALL_OW 321
25379: PUSH
25380: LD_VAR 0 3
25384: NONEQUAL
25385: IFFALSE 25403
// result := result diff i ;
25387: LD_ADDR_VAR 0 4
25391: PUSH
25392: LD_VAR 0 4
25396: PUSH
25397: LD_VAR 0 5
25401: DIFF
25402: ST_TO_ADDR
25403: GO 25362
25405: POP
25406: POP
// end ;
25407: LD_VAR 0 4
25411: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25412: LD_INT 0
25414: PPUSH
25415: PPUSH
25416: PPUSH
// result := true ;
25417: LD_ADDR_VAR 0 3
25421: PUSH
25422: LD_INT 1
25424: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25425: LD_ADDR_VAR 0 5
25429: PUSH
25430: LD_VAR 0 2
25434: PPUSH
25435: CALL_OW 480
25439: ST_TO_ADDR
// if not tmp then
25440: LD_VAR 0 5
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25498
// for i in tmp do
25449: LD_ADDR_VAR 0 4
25453: PUSH
25454: LD_VAR 0 5
25458: PUSH
25459: FOR_IN
25460: IFFALSE 25496
// if GetTech ( i , side ) <> state_researched then
25462: LD_VAR 0 4
25466: PPUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 321
25476: PUSH
25477: LD_INT 2
25479: NONEQUAL
25480: IFFALSE 25494
// begin result := false ;
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 0
25489: ST_TO_ADDR
// exit ;
25490: POP
25491: POP
25492: GO 25498
// end ;
25494: GO 25459
25496: POP
25497: POP
// end ;
25498: LD_VAR 0 3
25502: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25503: LD_INT 0
25505: PPUSH
25506: PPUSH
25507: PPUSH
25508: PPUSH
25509: PPUSH
25510: PPUSH
25511: PPUSH
25512: PPUSH
25513: PPUSH
25514: PPUSH
25515: PPUSH
25516: PPUSH
25517: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25518: LD_VAR 0 1
25522: NOT
25523: PUSH
25524: LD_VAR 0 1
25528: PPUSH
25529: CALL_OW 257
25533: PUSH
25534: LD_INT 9
25536: NONEQUAL
25537: OR
25538: IFFALSE 25542
// exit ;
25540: GO 26115
// side := GetSide ( unit ) ;
25542: LD_ADDR_VAR 0 9
25546: PUSH
25547: LD_VAR 0 1
25551: PPUSH
25552: CALL_OW 255
25556: ST_TO_ADDR
// tech_space := tech_spacanom ;
25557: LD_ADDR_VAR 0 12
25561: PUSH
25562: LD_INT 29
25564: ST_TO_ADDR
// tech_time := tech_taurad ;
25565: LD_ADDR_VAR 0 13
25569: PUSH
25570: LD_INT 28
25572: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25573: LD_ADDR_VAR 0 11
25577: PUSH
25578: LD_VAR 0 1
25582: PPUSH
25583: CALL_OW 310
25587: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25588: LD_VAR 0 11
25592: PPUSH
25593: CALL_OW 247
25597: PUSH
25598: LD_INT 2
25600: EQUAL
25601: IFFALSE 25605
// exit ;
25603: GO 26115
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25605: LD_ADDR_VAR 0 8
25609: PUSH
25610: LD_INT 81
25612: PUSH
25613: LD_VAR 0 9
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 3
25624: PUSH
25625: LD_INT 21
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PPUSH
25643: CALL_OW 69
25647: ST_TO_ADDR
// if not tmp then
25648: LD_VAR 0 8
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 26115
// if in_unit then
25657: LD_VAR 0 11
25661: IFFALSE 25685
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25663: LD_ADDR_VAR 0 10
25667: PUSH
25668: LD_VAR 0 8
25672: PPUSH
25673: LD_VAR 0 11
25677: PPUSH
25678: CALL_OW 74
25682: ST_TO_ADDR
25683: GO 25705
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25685: LD_ADDR_VAR 0 10
25689: PUSH
25690: LD_VAR 0 8
25694: PPUSH
25695: LD_VAR 0 1
25699: PPUSH
25700: CALL_OW 74
25704: ST_TO_ADDR
// if not enemy then
25705: LD_VAR 0 10
25709: NOT
25710: IFFALSE 25714
// exit ;
25712: GO 26115
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25714: LD_VAR 0 11
25718: PUSH
25719: LD_VAR 0 11
25723: PPUSH
25724: LD_VAR 0 10
25728: PPUSH
25729: CALL_OW 296
25733: PUSH
25734: LD_INT 13
25736: GREATER
25737: AND
25738: PUSH
25739: LD_VAR 0 1
25743: PPUSH
25744: LD_VAR 0 10
25748: PPUSH
25749: CALL_OW 296
25753: PUSH
25754: LD_INT 12
25756: GREATER
25757: OR
25758: IFFALSE 25762
// exit ;
25760: GO 26115
// missile := [ 1 ] ;
25762: LD_ADDR_VAR 0 14
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25773: LD_VAR 0 9
25777: PPUSH
25778: LD_VAR 0 12
25782: PPUSH
25783: CALL_OW 325
25787: IFFALSE 25816
// missile := Replace ( missile , missile + 1 , 2 ) ;
25789: LD_ADDR_VAR 0 14
25793: PUSH
25794: LD_VAR 0 14
25798: PPUSH
25799: LD_VAR 0 14
25803: PUSH
25804: LD_INT 1
25806: PLUS
25807: PPUSH
25808: LD_INT 2
25810: PPUSH
25811: CALL_OW 1
25815: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25816: LD_VAR 0 9
25820: PPUSH
25821: LD_VAR 0 13
25825: PPUSH
25826: CALL_OW 325
25830: PUSH
25831: LD_VAR 0 10
25835: PPUSH
25836: CALL_OW 255
25840: PPUSH
25841: LD_VAR 0 13
25845: PPUSH
25846: CALL_OW 325
25850: NOT
25851: AND
25852: IFFALSE 25881
// missile := Replace ( missile , missile + 1 , 3 ) ;
25854: LD_ADDR_VAR 0 14
25858: PUSH
25859: LD_VAR 0 14
25863: PPUSH
25864: LD_VAR 0 14
25868: PUSH
25869: LD_INT 1
25871: PLUS
25872: PPUSH
25873: LD_INT 3
25875: PPUSH
25876: CALL_OW 1
25880: ST_TO_ADDR
// if missile < 2 then
25881: LD_VAR 0 14
25885: PUSH
25886: LD_INT 2
25888: LESS
25889: IFFALSE 25893
// exit ;
25891: GO 26115
// x := GetX ( enemy ) ;
25893: LD_ADDR_VAR 0 4
25897: PUSH
25898: LD_VAR 0 10
25902: PPUSH
25903: CALL_OW 250
25907: ST_TO_ADDR
// y := GetY ( enemy ) ;
25908: LD_ADDR_VAR 0 5
25912: PUSH
25913: LD_VAR 0 10
25917: PPUSH
25918: CALL_OW 251
25922: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25923: LD_ADDR_VAR 0 6
25927: PUSH
25928: LD_VAR 0 4
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PPUSH
25937: LD_INT 1
25939: PPUSH
25940: CALL_OW 12
25944: PLUS
25945: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25946: LD_ADDR_VAR 0 7
25950: PUSH
25951: LD_VAR 0 5
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PPUSH
25960: LD_INT 1
25962: PPUSH
25963: CALL_OW 12
25967: PLUS
25968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25969: LD_VAR 0 6
25973: PPUSH
25974: LD_VAR 0 7
25978: PPUSH
25979: CALL_OW 488
25983: NOT
25984: IFFALSE 26006
// begin _x := x ;
25986: LD_ADDR_VAR 0 6
25990: PUSH
25991: LD_VAR 0 4
25995: ST_TO_ADDR
// _y := y ;
25996: LD_ADDR_VAR 0 7
26000: PUSH
26001: LD_VAR 0 5
26005: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_INT 1
26013: PPUSH
26014: LD_VAR 0 14
26018: PPUSH
26019: CALL_OW 12
26023: ST_TO_ADDR
// case i of 1 :
26024: LD_VAR 0 3
26028: PUSH
26029: LD_INT 1
26031: DOUBLE
26032: EQUAL
26033: IFTRUE 26037
26035: GO 26054
26037: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26038: LD_VAR 0 1
26042: PPUSH
26043: LD_VAR 0 10
26047: PPUSH
26048: CALL_OW 115
26052: GO 26115
26054: LD_INT 2
26056: DOUBLE
26057: EQUAL
26058: IFTRUE 26062
26060: GO 26084
26062: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26063: LD_VAR 0 1
26067: PPUSH
26068: LD_VAR 0 6
26072: PPUSH
26073: LD_VAR 0 7
26077: PPUSH
26078: CALL_OW 153
26082: GO 26115
26084: LD_INT 3
26086: DOUBLE
26087: EQUAL
26088: IFTRUE 26092
26090: GO 26114
26092: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26093: LD_VAR 0 1
26097: PPUSH
26098: LD_VAR 0 6
26102: PPUSH
26103: LD_VAR 0 7
26107: PPUSH
26108: CALL_OW 154
26112: GO 26115
26114: POP
// end ;
26115: LD_VAR 0 2
26119: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
// if not unit or not building then
26128: LD_VAR 0 1
26132: NOT
26133: PUSH
26134: LD_VAR 0 2
26138: NOT
26139: OR
26140: IFFALSE 26144
// exit ;
26142: GO 26302
// x := GetX ( building ) ;
26144: LD_ADDR_VAR 0 5
26148: PUSH
26149: LD_VAR 0 2
26153: PPUSH
26154: CALL_OW 250
26158: ST_TO_ADDR
// y := GetY ( building ) ;
26159: LD_ADDR_VAR 0 6
26163: PUSH
26164: LD_VAR 0 2
26168: PPUSH
26169: CALL_OW 251
26173: ST_TO_ADDR
// for i = 0 to 5 do
26174: LD_ADDR_VAR 0 4
26178: PUSH
26179: DOUBLE
26180: LD_INT 0
26182: DEC
26183: ST_TO_ADDR
26184: LD_INT 5
26186: PUSH
26187: FOR_TO
26188: IFFALSE 26300
// begin _x := ShiftX ( x , i , 3 ) ;
26190: LD_ADDR_VAR 0 7
26194: PUSH
26195: LD_VAR 0 5
26199: PPUSH
26200: LD_VAR 0 4
26204: PPUSH
26205: LD_INT 3
26207: PPUSH
26208: CALL_OW 272
26212: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26213: LD_ADDR_VAR 0 8
26217: PUSH
26218: LD_VAR 0 6
26222: PPUSH
26223: LD_VAR 0 4
26227: PPUSH
26228: LD_INT 3
26230: PPUSH
26231: CALL_OW 273
26235: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26236: LD_VAR 0 7
26240: PPUSH
26241: LD_VAR 0 8
26245: PPUSH
26246: CALL_OW 488
26250: NOT
26251: IFFALSE 26255
// continue ;
26253: GO 26187
// if HexInfo ( _x , _y ) = 0 then
26255: LD_VAR 0 7
26259: PPUSH
26260: LD_VAR 0 8
26264: PPUSH
26265: CALL_OW 428
26269: PUSH
26270: LD_INT 0
26272: EQUAL
26273: IFFALSE 26298
// begin ComMoveXY ( unit , _x , _y ) ;
26275: LD_VAR 0 1
26279: PPUSH
26280: LD_VAR 0 7
26284: PPUSH
26285: LD_VAR 0 8
26289: PPUSH
26290: CALL_OW 111
// exit ;
26294: POP
26295: POP
26296: GO 26302
// end ; end ;
26298: GO 26187
26300: POP
26301: POP
// end ;
26302: LD_VAR 0 3
26306: RET
// export function ScanBase ( side , base_area ) ; begin
26307: LD_INT 0
26309: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26310: LD_ADDR_VAR 0 3
26314: PUSH
26315: LD_VAR 0 2
26319: PPUSH
26320: LD_INT 81
26322: PUSH
26323: LD_VAR 0 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 70
26336: ST_TO_ADDR
// end ;
26337: LD_VAR 0 3
26341: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26342: LD_INT 0
26344: PPUSH
26345: PPUSH
26346: PPUSH
26347: PPUSH
// result := false ;
26348: LD_ADDR_VAR 0 2
26352: PUSH
26353: LD_INT 0
26355: ST_TO_ADDR
// side := GetSide ( unit ) ;
26356: LD_ADDR_VAR 0 3
26360: PUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 255
26370: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26371: LD_ADDR_VAR 0 4
26375: PUSH
26376: LD_VAR 0 1
26380: PPUSH
26381: CALL_OW 248
26385: ST_TO_ADDR
// case nat of 1 :
26386: LD_VAR 0 4
26390: PUSH
26391: LD_INT 1
26393: DOUBLE
26394: EQUAL
26395: IFTRUE 26399
26397: GO 26410
26399: POP
// tech := tech_lassight ; 2 :
26400: LD_ADDR_VAR 0 5
26404: PUSH
26405: LD_INT 12
26407: ST_TO_ADDR
26408: GO 26449
26410: LD_INT 2
26412: DOUBLE
26413: EQUAL
26414: IFTRUE 26418
26416: GO 26429
26418: POP
// tech := tech_mortar ; 3 :
26419: LD_ADDR_VAR 0 5
26423: PUSH
26424: LD_INT 41
26426: ST_TO_ADDR
26427: GO 26449
26429: LD_INT 3
26431: DOUBLE
26432: EQUAL
26433: IFTRUE 26437
26435: GO 26448
26437: POP
// tech := tech_bazooka ; end ;
26438: LD_ADDR_VAR 0 5
26442: PUSH
26443: LD_INT 44
26445: ST_TO_ADDR
26446: GO 26449
26448: POP
// if Researched ( side , tech ) then
26449: LD_VAR 0 3
26453: PPUSH
26454: LD_VAR 0 5
26458: PPUSH
26459: CALL_OW 325
26463: IFFALSE 26490
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26465: LD_ADDR_VAR 0 2
26469: PUSH
26470: LD_INT 5
26472: PUSH
26473: LD_INT 8
26475: PUSH
26476: LD_INT 9
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: PUSH
26484: LD_VAR 0 4
26488: ARRAY
26489: ST_TO_ADDR
// end ;
26490: LD_VAR 0 2
26494: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
26499: PPUSH
// if not mines then
26500: LD_VAR 0 2
26504: NOT
26505: IFFALSE 26509
// exit ;
26507: GO 26653
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26509: LD_ADDR_VAR 0 5
26513: PUSH
26514: LD_INT 81
26516: PUSH
26517: LD_VAR 0 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: LD_INT 21
26531: PUSH
26532: LD_INT 3
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PPUSH
26547: CALL_OW 69
26551: ST_TO_ADDR
// for i in mines do
26552: LD_ADDR_VAR 0 4
26556: PUSH
26557: LD_VAR 0 2
26561: PUSH
26562: FOR_IN
26563: IFFALSE 26651
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26565: LD_VAR 0 4
26569: PUSH
26570: LD_INT 1
26572: ARRAY
26573: PPUSH
26574: LD_VAR 0 4
26578: PUSH
26579: LD_INT 2
26581: ARRAY
26582: PPUSH
26583: CALL_OW 458
26587: NOT
26588: IFFALSE 26592
// continue ;
26590: GO 26562
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26592: LD_VAR 0 4
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: LD_VAR 0 4
26605: PUSH
26606: LD_INT 2
26608: ARRAY
26609: PPUSH
26610: CALL_OW 428
26614: PUSH
26615: LD_VAR 0 5
26619: IN
26620: IFFALSE 26649
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26622: LD_VAR 0 4
26626: PUSH
26627: LD_INT 1
26629: ARRAY
26630: PPUSH
26631: LD_VAR 0 4
26635: PUSH
26636: LD_INT 2
26638: ARRAY
26639: PPUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 456
// end ;
26649: GO 26562
26651: POP
26652: POP
// end ;
26653: LD_VAR 0 3
26657: RET
// export function Count ( array ) ; begin
26658: LD_INT 0
26660: PPUSH
// result := array + 0 ;
26661: LD_ADDR_VAR 0 2
26665: PUSH
26666: LD_VAR 0 1
26670: PUSH
26671: LD_INT 0
26673: PLUS
26674: ST_TO_ADDR
// end ;
26675: LD_VAR 0 2
26679: RET
// export function IsEmpty ( building ) ; begin
26680: LD_INT 0
26682: PPUSH
// if not building then
26683: LD_VAR 0 1
26687: NOT
26688: IFFALSE 26692
// exit ;
26690: GO 26735
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26692: LD_ADDR_VAR 0 2
26696: PUSH
26697: LD_VAR 0 1
26701: PUSH
26702: LD_INT 22
26704: PUSH
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 255
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 58
26721: PUSH
26722: EMPTY
26723: LIST
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PPUSH
26729: CALL_OW 69
26733: IN
26734: ST_TO_ADDR
// end ;
26735: LD_VAR 0 2
26739: RET
// export function IsNotFull ( building ) ; var places ; begin
26740: LD_INT 0
26742: PPUSH
26743: PPUSH
// if not building then
26744: LD_VAR 0 1
26748: NOT
26749: IFFALSE 26753
// exit ;
26751: GO 26781
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26753: LD_ADDR_VAR 0 2
26757: PUSH
26758: LD_VAR 0 1
26762: PPUSH
26763: LD_INT 3
26765: PUSH
26766: LD_INT 62
26768: PUSH
26769: EMPTY
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 72
26780: ST_TO_ADDR
// end ;
26781: LD_VAR 0 2
26785: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26786: LD_INT 0
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
// tmp := [ ] ;
26792: LD_ADDR_VAR 0 3
26796: PUSH
26797: EMPTY
26798: ST_TO_ADDR
// list := [ ] ;
26799: LD_ADDR_VAR 0 5
26803: PUSH
26804: EMPTY
26805: ST_TO_ADDR
// for i = 16 to 25 do
26806: LD_ADDR_VAR 0 4
26810: PUSH
26811: DOUBLE
26812: LD_INT 16
26814: DEC
26815: ST_TO_ADDR
26816: LD_INT 25
26818: PUSH
26819: FOR_TO
26820: IFFALSE 26893
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_VAR 0 3
26831: PUSH
26832: LD_INT 22
26834: PUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 255
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 91
26851: PUSH
26852: LD_VAR 0 1
26856: PUSH
26857: LD_INT 6
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 30
26867: PUSH
26868: LD_VAR 0 4
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: PPUSH
26885: CALL_OW 69
26889: ADD
26890: ST_TO_ADDR
26891: GO 26819
26893: POP
26894: POP
// for i = 1 to tmp do
26895: LD_ADDR_VAR 0 4
26899: PUSH
26900: DOUBLE
26901: LD_INT 1
26903: DEC
26904: ST_TO_ADDR
26905: LD_VAR 0 3
26909: PUSH
26910: FOR_TO
26911: IFFALSE 26999
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26913: LD_ADDR_VAR 0 5
26917: PUSH
26918: LD_VAR 0 5
26922: PUSH
26923: LD_VAR 0 3
26927: PUSH
26928: LD_VAR 0 4
26932: ARRAY
26933: PPUSH
26934: CALL_OW 266
26938: PUSH
26939: LD_VAR 0 3
26943: PUSH
26944: LD_VAR 0 4
26948: ARRAY
26949: PPUSH
26950: CALL_OW 250
26954: PUSH
26955: LD_VAR 0 3
26959: PUSH
26960: LD_VAR 0 4
26964: ARRAY
26965: PPUSH
26966: CALL_OW 251
26970: PUSH
26971: LD_VAR 0 3
26975: PUSH
26976: LD_VAR 0 4
26980: ARRAY
26981: PPUSH
26982: CALL_OW 254
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: ADD
26996: ST_TO_ADDR
26997: GO 26910
26999: POP
27000: POP
// result := list ;
27001: LD_ADDR_VAR 0 2
27005: PUSH
27006: LD_VAR 0 5
27010: ST_TO_ADDR
// end ;
27011: LD_VAR 0 2
27015: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
27020: PPUSH
27021: PPUSH
27022: PPUSH
27023: PPUSH
27024: PPUSH
// if not factory then
27025: LD_VAR 0 1
27029: NOT
27030: IFFALSE 27034
// exit ;
27032: GO 27627
// if control = control_apeman then
27034: LD_VAR 0 4
27038: PUSH
27039: LD_INT 5
27041: EQUAL
27042: IFFALSE 27151
// begin tmp := UnitsInside ( factory ) ;
27044: LD_ADDR_VAR 0 8
27048: PUSH
27049: LD_VAR 0 1
27053: PPUSH
27054: CALL_OW 313
27058: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27059: LD_VAR 0 8
27063: PPUSH
27064: LD_INT 25
27066: PUSH
27067: LD_INT 12
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PPUSH
27074: CALL_OW 72
27078: NOT
27079: IFFALSE 27089
// control := control_manual ;
27081: LD_ADDR_VAR 0 4
27085: PUSH
27086: LD_INT 1
27088: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27089: LD_ADDR_VAR 0 8
27093: PUSH
27094: LD_VAR 0 1
27098: PPUSH
27099: CALL 26786 0 1
27103: ST_TO_ADDR
// if tmp then
27104: LD_VAR 0 8
27108: IFFALSE 27151
// begin for i in tmp do
27110: LD_ADDR_VAR 0 7
27114: PUSH
27115: LD_VAR 0 8
27119: PUSH
27120: FOR_IN
27121: IFFALSE 27149
// if i [ 1 ] = b_ext_radio then
27123: LD_VAR 0 7
27127: PUSH
27128: LD_INT 1
27130: ARRAY
27131: PUSH
27132: LD_INT 22
27134: EQUAL
27135: IFFALSE 27147
// begin control := control_remote ;
27137: LD_ADDR_VAR 0 4
27141: PUSH
27142: LD_INT 2
27144: ST_TO_ADDR
// break ;
27145: GO 27149
// end ;
27147: GO 27120
27149: POP
27150: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27151: LD_VAR 0 1
27155: PPUSH
27156: LD_VAR 0 2
27160: PPUSH
27161: LD_VAR 0 3
27165: PPUSH
27166: LD_VAR 0 4
27170: PPUSH
27171: LD_VAR 0 5
27175: PPUSH
27176: CALL_OW 448
27180: IFFALSE 27215
// begin result := [ chassis , engine , control , weapon ] ;
27182: LD_ADDR_VAR 0 6
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_VAR 0 3
27196: PUSH
27197: LD_VAR 0 4
27201: PUSH
27202: LD_VAR 0 5
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
// exit ;
27213: GO 27627
// end ; _chassis := AvailableChassisList ( factory ) ;
27215: LD_ADDR_VAR 0 9
27219: PUSH
27220: LD_VAR 0 1
27224: PPUSH
27225: CALL_OW 475
27229: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27230: LD_ADDR_VAR 0 11
27234: PUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 476
27244: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27245: LD_ADDR_VAR 0 12
27249: PUSH
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL_OW 477
27259: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27260: LD_ADDR_VAR 0 10
27264: PUSH
27265: LD_VAR 0 1
27269: PPUSH
27270: CALL_OW 478
27274: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27275: LD_VAR 0 9
27279: NOT
27280: PUSH
27281: LD_VAR 0 11
27285: NOT
27286: OR
27287: PUSH
27288: LD_VAR 0 12
27292: NOT
27293: OR
27294: PUSH
27295: LD_VAR 0 10
27299: NOT
27300: OR
27301: IFFALSE 27336
// begin result := [ chassis , engine , control , weapon ] ;
27303: LD_ADDR_VAR 0 6
27307: PUSH
27308: LD_VAR 0 2
27312: PUSH
27313: LD_VAR 0 3
27317: PUSH
27318: LD_VAR 0 4
27322: PUSH
27323: LD_VAR 0 5
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: ST_TO_ADDR
// exit ;
27334: GO 27627
// end ; if not chassis in _chassis then
27336: LD_VAR 0 2
27340: PUSH
27341: LD_VAR 0 9
27345: IN
27346: NOT
27347: IFFALSE 27373
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27349: LD_ADDR_VAR 0 2
27353: PUSH
27354: LD_VAR 0 9
27358: PUSH
27359: LD_INT 1
27361: PPUSH
27362: LD_VAR 0 9
27366: PPUSH
27367: CALL_OW 12
27371: ARRAY
27372: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: CALL 27632 0 2
27387: NOT
27388: IFFALSE 27447
// repeat engine := _engine [ 1 ] ;
27390: LD_ADDR_VAR 0 3
27394: PUSH
27395: LD_VAR 0 11
27399: PUSH
27400: LD_INT 1
27402: ARRAY
27403: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27404: LD_ADDR_VAR 0 11
27408: PUSH
27409: LD_VAR 0 11
27413: PPUSH
27414: LD_INT 1
27416: PPUSH
27417: CALL_OW 3
27421: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27422: LD_VAR 0 2
27426: PPUSH
27427: LD_VAR 0 3
27431: PPUSH
27432: CALL 27632 0 2
27436: PUSH
27437: LD_VAR 0 11
27441: PUSH
27442: EMPTY
27443: EQUAL
27444: OR
27445: IFFALSE 27390
// if not control in _control then
27447: LD_VAR 0 4
27451: PUSH
27452: LD_VAR 0 12
27456: IN
27457: NOT
27458: IFFALSE 27484
// control := _control [ rand ( 1 , _control ) ] ;
27460: LD_ADDR_VAR 0 4
27464: PUSH
27465: LD_VAR 0 12
27469: PUSH
27470: LD_INT 1
27472: PPUSH
27473: LD_VAR 0 12
27477: PPUSH
27478: CALL_OW 12
27482: ARRAY
27483: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27484: LD_VAR 0 2
27488: PPUSH
27489: LD_VAR 0 5
27493: PPUSH
27494: CALL 27852 0 2
27498: NOT
27499: IFFALSE 27558
// repeat weapon := _weapon [ 1 ] ;
27501: LD_ADDR_VAR 0 5
27505: PUSH
27506: LD_VAR 0 10
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27515: LD_ADDR_VAR 0 10
27519: PUSH
27520: LD_VAR 0 10
27524: PPUSH
27525: LD_INT 1
27527: PPUSH
27528: CALL_OW 3
27532: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27533: LD_VAR 0 2
27537: PPUSH
27538: LD_VAR 0 5
27542: PPUSH
27543: CALL 27852 0 2
27547: PUSH
27548: LD_VAR 0 10
27552: PUSH
27553: EMPTY
27554: EQUAL
27555: OR
27556: IFFALSE 27501
// result := [ ] ;
27558: LD_ADDR_VAR 0 6
27562: PUSH
27563: EMPTY
27564: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27565: LD_VAR 0 1
27569: PPUSH
27570: LD_VAR 0 2
27574: PPUSH
27575: LD_VAR 0 3
27579: PPUSH
27580: LD_VAR 0 4
27584: PPUSH
27585: LD_VAR 0 5
27589: PPUSH
27590: CALL_OW 448
27594: IFFALSE 27627
// result := [ chassis , engine , control , weapon ] ;
27596: LD_ADDR_VAR 0 6
27600: PUSH
27601: LD_VAR 0 2
27605: PUSH
27606: LD_VAR 0 3
27610: PUSH
27611: LD_VAR 0 4
27615: PUSH
27616: LD_VAR 0 5
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: ST_TO_ADDR
// end ;
27627: LD_VAR 0 6
27631: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27632: LD_INT 0
27634: PPUSH
// if not chassis or not engine then
27635: LD_VAR 0 1
27639: NOT
27640: PUSH
27641: LD_VAR 0 2
27645: NOT
27646: OR
27647: IFFALSE 27651
// exit ;
27649: GO 27847
// case engine of engine_solar :
27651: LD_VAR 0 2
27655: PUSH
27656: LD_INT 2
27658: DOUBLE
27659: EQUAL
27660: IFTRUE 27664
27662: GO 27702
27664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27665: LD_ADDR_VAR 0 3
27669: PUSH
27670: LD_INT 11
27672: PUSH
27673: LD_INT 12
27675: PUSH
27676: LD_INT 13
27678: PUSH
27679: LD_INT 14
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: ST_TO_ADDR
27700: GO 27831
27702: LD_INT 1
27704: DOUBLE
27705: EQUAL
27706: IFTRUE 27710
27708: GO 27772
27710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27711: LD_ADDR_VAR 0 3
27715: PUSH
27716: LD_INT 11
27718: PUSH
27719: LD_INT 12
27721: PUSH
27722: LD_INT 13
27724: PUSH
27725: LD_INT 14
27727: PUSH
27728: LD_INT 1
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: LD_INT 3
27736: PUSH
27737: LD_INT 4
27739: PUSH
27740: LD_INT 5
27742: PUSH
27743: LD_INT 21
27745: PUSH
27746: LD_INT 23
27748: PUSH
27749: LD_INT 22
27751: PUSH
27752: LD_INT 24
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: ST_TO_ADDR
27770: GO 27831
27772: LD_INT 3
27774: DOUBLE
27775: EQUAL
27776: IFTRUE 27780
27778: GO 27830
27780: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27781: LD_ADDR_VAR 0 3
27785: PUSH
27786: LD_INT 13
27788: PUSH
27789: LD_INT 14
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 4
27800: PUSH
27801: LD_INT 5
27803: PUSH
27804: LD_INT 21
27806: PUSH
27807: LD_INT 22
27809: PUSH
27810: LD_INT 23
27812: PUSH
27813: LD_INT 24
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: ST_TO_ADDR
27828: GO 27831
27830: POP
// result := ( chassis in result ) ;
27831: LD_ADDR_VAR 0 3
27835: PUSH
27836: LD_VAR 0 1
27840: PUSH
27841: LD_VAR 0 3
27845: IN
27846: ST_TO_ADDR
// end ;
27847: LD_VAR 0 3
27851: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27852: LD_INT 0
27854: PPUSH
// if not chassis or not weapon then
27855: LD_VAR 0 1
27859: NOT
27860: PUSH
27861: LD_VAR 0 2
27865: NOT
27866: OR
27867: IFFALSE 27871
// exit ;
27869: GO 28931
// case weapon of us_machine_gun :
27871: LD_VAR 0 2
27875: PUSH
27876: LD_INT 2
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27884
27882: GO 27914
27884: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27885: LD_ADDR_VAR 0 3
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: LD_INT 4
27901: PUSH
27902: LD_INT 5
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
27912: GO 28915
27914: LD_INT 3
27916: DOUBLE
27917: EQUAL
27918: IFTRUE 27922
27920: GO 27952
27922: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27923: LD_ADDR_VAR 0 3
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 3
27936: PUSH
27937: LD_INT 4
27939: PUSH
27940: LD_INT 5
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: ST_TO_ADDR
27950: GO 28915
27952: LD_INT 11
27954: DOUBLE
27955: EQUAL
27956: IFTRUE 27960
27958: GO 27990
27960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27961: LD_ADDR_VAR 0 3
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 3
27974: PUSH
27975: LD_INT 4
27977: PUSH
27978: LD_INT 5
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
27988: GO 28915
27990: LD_INT 4
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28024
27998: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27999: LD_ADDR_VAR 0 3
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 4
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: ST_TO_ADDR
28022: GO 28915
28024: LD_INT 5
28026: DOUBLE
28027: EQUAL
28028: IFTRUE 28032
28030: GO 28058
28032: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28033: LD_ADDR_VAR 0 3
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: LD_INT 3
28043: PUSH
28044: LD_INT 4
28046: PUSH
28047: LD_INT 5
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: ST_TO_ADDR
28056: GO 28915
28058: LD_INT 9
28060: DOUBLE
28061: EQUAL
28062: IFTRUE 28066
28064: GO 28092
28066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: LD_INT 4
28080: PUSH
28081: LD_INT 5
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: ST_TO_ADDR
28090: GO 28915
28092: LD_INT 7
28094: DOUBLE
28095: EQUAL
28096: IFTRUE 28100
28098: GO 28126
28100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28101: LD_ADDR_VAR 0 3
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 3
28111: PUSH
28112: LD_INT 4
28114: PUSH
28115: LD_INT 5
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: ST_TO_ADDR
28124: GO 28915
28126: LD_INT 12
28128: DOUBLE
28129: EQUAL
28130: IFTRUE 28134
28132: GO 28160
28134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28135: LD_ADDR_VAR 0 3
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: LD_INT 3
28145: PUSH
28146: LD_INT 4
28148: PUSH
28149: LD_INT 5
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
28158: GO 28915
28160: LD_INT 13
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28194
28168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 3
28179: PUSH
28180: LD_INT 4
28182: PUSH
28183: LD_INT 5
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
28192: GO 28915
28194: LD_INT 14
28196: DOUBLE
28197: EQUAL
28198: IFTRUE 28202
28200: GO 28220
28202: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28203: LD_ADDR_VAR 0 3
28207: PUSH
28208: LD_INT 4
28210: PUSH
28211: LD_INT 5
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: ST_TO_ADDR
28218: GO 28915
28220: LD_INT 6
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28246
28228: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28229: LD_ADDR_VAR 0 3
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: LD_INT 5
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: ST_TO_ADDR
28244: GO 28915
28246: LD_INT 10
28248: DOUBLE
28249: EQUAL
28250: IFTRUE 28254
28252: GO 28272
28254: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28255: LD_ADDR_VAR 0 3
28259: PUSH
28260: LD_INT 4
28262: PUSH
28263: LD_INT 5
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: ST_TO_ADDR
28270: GO 28915
28272: LD_INT 22
28274: DOUBLE
28275: EQUAL
28276: IFTRUE 28280
28278: GO 28306
28280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28281: LD_ADDR_VAR 0 3
28285: PUSH
28286: LD_INT 11
28288: PUSH
28289: LD_INT 12
28291: PUSH
28292: LD_INT 13
28294: PUSH
28295: LD_INT 14
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
28304: GO 28915
28306: LD_INT 23
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28314
28312: GO 28340
28314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28315: LD_ADDR_VAR 0 3
28319: PUSH
28320: LD_INT 11
28322: PUSH
28323: LD_INT 12
28325: PUSH
28326: LD_INT 13
28328: PUSH
28329: LD_INT 14
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
28338: GO 28915
28340: LD_INT 24
28342: DOUBLE
28343: EQUAL
28344: IFTRUE 28348
28346: GO 28374
28348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28349: LD_ADDR_VAR 0 3
28353: PUSH
28354: LD_INT 11
28356: PUSH
28357: LD_INT 12
28359: PUSH
28360: LD_INT 13
28362: PUSH
28363: LD_INT 14
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
28372: GO 28915
28374: LD_INT 30
28376: DOUBLE
28377: EQUAL
28378: IFTRUE 28382
28380: GO 28408
28382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_INT 11
28390: PUSH
28391: LD_INT 12
28393: PUSH
28394: LD_INT 13
28396: PUSH
28397: LD_INT 14
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
28406: GO 28915
28408: LD_INT 25
28410: DOUBLE
28411: EQUAL
28412: IFTRUE 28416
28414: GO 28434
28416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28417: LD_ADDR_VAR 0 3
28421: PUSH
28422: LD_INT 13
28424: PUSH
28425: LD_INT 14
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: ST_TO_ADDR
28432: GO 28915
28434: LD_INT 27
28436: DOUBLE
28437: EQUAL
28438: IFTRUE 28442
28440: GO 28460
28442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28443: LD_ADDR_VAR 0 3
28447: PUSH
28448: LD_INT 13
28450: PUSH
28451: LD_INT 14
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: ST_TO_ADDR
28458: GO 28915
28460: LD_INT 92
28462: DOUBLE
28463: EQUAL
28464: IFTRUE 28468
28466: GO 28494
28468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28469: LD_ADDR_VAR 0 3
28473: PUSH
28474: LD_INT 11
28476: PUSH
28477: LD_INT 12
28479: PUSH
28480: LD_INT 13
28482: PUSH
28483: LD_INT 14
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
28492: GO 28915
28494: LD_INT 28
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28520
28502: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 13
28510: PUSH
28511: LD_INT 14
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: ST_TO_ADDR
28518: GO 28915
28520: LD_INT 29
28522: DOUBLE
28523: EQUAL
28524: IFTRUE 28528
28526: GO 28546
28528: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28529: LD_ADDR_VAR 0 3
28533: PUSH
28534: LD_INT 13
28536: PUSH
28537: LD_INT 14
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: ST_TO_ADDR
28544: GO 28915
28546: LD_INT 31
28548: DOUBLE
28549: EQUAL
28550: IFTRUE 28554
28552: GO 28572
28554: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28555: LD_ADDR_VAR 0 3
28559: PUSH
28560: LD_INT 13
28562: PUSH
28563: LD_INT 14
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: ST_TO_ADDR
28570: GO 28915
28572: LD_INT 26
28574: DOUBLE
28575: EQUAL
28576: IFTRUE 28580
28578: GO 28598
28580: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28581: LD_ADDR_VAR 0 3
28585: PUSH
28586: LD_INT 13
28588: PUSH
28589: LD_INT 14
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: ST_TO_ADDR
28596: GO 28915
28598: LD_INT 42
28600: DOUBLE
28601: EQUAL
28602: IFTRUE 28606
28604: GO 28632
28606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28607: LD_ADDR_VAR 0 3
28611: PUSH
28612: LD_INT 21
28614: PUSH
28615: LD_INT 22
28617: PUSH
28618: LD_INT 23
28620: PUSH
28621: LD_INT 24
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
28630: GO 28915
28632: LD_INT 43
28634: DOUBLE
28635: EQUAL
28636: IFTRUE 28640
28638: GO 28666
28640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28641: LD_ADDR_VAR 0 3
28645: PUSH
28646: LD_INT 21
28648: PUSH
28649: LD_INT 22
28651: PUSH
28652: LD_INT 23
28654: PUSH
28655: LD_INT 24
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
28664: GO 28915
28666: LD_INT 44
28668: DOUBLE
28669: EQUAL
28670: IFTRUE 28674
28672: GO 28700
28674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28675: LD_ADDR_VAR 0 3
28679: PUSH
28680: LD_INT 21
28682: PUSH
28683: LD_INT 22
28685: PUSH
28686: LD_INT 23
28688: PUSH
28689: LD_INT 24
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: ST_TO_ADDR
28698: GO 28915
28700: LD_INT 45
28702: DOUBLE
28703: EQUAL
28704: IFTRUE 28708
28706: GO 28734
28708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28709: LD_ADDR_VAR 0 3
28713: PUSH
28714: LD_INT 21
28716: PUSH
28717: LD_INT 22
28719: PUSH
28720: LD_INT 23
28722: PUSH
28723: LD_INT 24
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
28732: GO 28915
28734: LD_INT 49
28736: DOUBLE
28737: EQUAL
28738: IFTRUE 28742
28740: GO 28768
28742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_INT 21
28750: PUSH
28751: LD_INT 22
28753: PUSH
28754: LD_INT 23
28756: PUSH
28757: LD_INT 24
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: ST_TO_ADDR
28766: GO 28915
28768: LD_INT 51
28770: DOUBLE
28771: EQUAL
28772: IFTRUE 28776
28774: GO 28802
28776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28777: LD_ADDR_VAR 0 3
28781: PUSH
28782: LD_INT 21
28784: PUSH
28785: LD_INT 22
28787: PUSH
28788: LD_INT 23
28790: PUSH
28791: LD_INT 24
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
28800: GO 28915
28802: LD_INT 52
28804: DOUBLE
28805: EQUAL
28806: IFTRUE 28810
28808: GO 28836
28810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_INT 21
28818: PUSH
28819: LD_INT 22
28821: PUSH
28822: LD_INT 23
28824: PUSH
28825: LD_INT 24
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
28834: GO 28915
28836: LD_INT 53
28838: DOUBLE
28839: EQUAL
28840: IFTRUE 28844
28842: GO 28862
28844: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28845: LD_ADDR_VAR 0 3
28849: PUSH
28850: LD_INT 23
28852: PUSH
28853: LD_INT 24
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: ST_TO_ADDR
28860: GO 28915
28862: LD_INT 46
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28870
28868: GO 28888
28870: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28871: LD_ADDR_VAR 0 3
28875: PUSH
28876: LD_INT 23
28878: PUSH
28879: LD_INT 24
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: ST_TO_ADDR
28886: GO 28915
28888: LD_INT 47
28890: DOUBLE
28891: EQUAL
28892: IFTRUE 28896
28894: GO 28914
28896: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28897: LD_ADDR_VAR 0 3
28901: PUSH
28902: LD_INT 23
28904: PUSH
28905: LD_INT 24
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: ST_TO_ADDR
28912: GO 28915
28914: POP
// result := ( chassis in result ) ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_VAR 0 1
28924: PUSH
28925: LD_VAR 0 3
28929: IN
28930: ST_TO_ADDR
// end ;
28931: LD_VAR 0 3
28935: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28936: LD_INT 0
28938: PPUSH
28939: PPUSH
28940: PPUSH
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
// result := array ;
28945: LD_ADDR_VAR 0 5
28949: PUSH
28950: LD_VAR 0 1
28954: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28955: LD_VAR 0 1
28959: NOT
28960: PUSH
28961: LD_VAR 0 2
28965: NOT
28966: OR
28967: PUSH
28968: LD_VAR 0 3
28972: NOT
28973: OR
28974: PUSH
28975: LD_VAR 0 2
28979: PUSH
28980: LD_VAR 0 1
28984: GREATER
28985: OR
28986: PUSH
28987: LD_VAR 0 3
28991: PUSH
28992: LD_VAR 0 1
28996: GREATER
28997: OR
28998: IFFALSE 29002
// exit ;
29000: GO 29298
// if direction then
29002: LD_VAR 0 4
29006: IFFALSE 29070
// begin d := 1 ;
29008: LD_ADDR_VAR 0 9
29012: PUSH
29013: LD_INT 1
29015: ST_TO_ADDR
// if i_from > i_to then
29016: LD_VAR 0 2
29020: PUSH
29021: LD_VAR 0 3
29025: GREATER
29026: IFFALSE 29052
// length := ( array - i_from ) + i_to else
29028: LD_ADDR_VAR 0 11
29032: PUSH
29033: LD_VAR 0 1
29037: PUSH
29038: LD_VAR 0 2
29042: MINUS
29043: PUSH
29044: LD_VAR 0 3
29048: PLUS
29049: ST_TO_ADDR
29050: GO 29068
// length := i_to - i_from ;
29052: LD_ADDR_VAR 0 11
29056: PUSH
29057: LD_VAR 0 3
29061: PUSH
29062: LD_VAR 0 2
29066: MINUS
29067: ST_TO_ADDR
// end else
29068: GO 29131
// begin d := - 1 ;
29070: LD_ADDR_VAR 0 9
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: ST_TO_ADDR
// if i_from > i_to then
29079: LD_VAR 0 2
29083: PUSH
29084: LD_VAR 0 3
29088: GREATER
29089: IFFALSE 29109
// length := i_from - i_to else
29091: LD_ADDR_VAR 0 11
29095: PUSH
29096: LD_VAR 0 2
29100: PUSH
29101: LD_VAR 0 3
29105: MINUS
29106: ST_TO_ADDR
29107: GO 29131
// length := ( array - i_to ) + i_from ;
29109: LD_ADDR_VAR 0 11
29113: PUSH
29114: LD_VAR 0 1
29118: PUSH
29119: LD_VAR 0 3
29123: MINUS
29124: PUSH
29125: LD_VAR 0 2
29129: PLUS
29130: ST_TO_ADDR
// end ; if not length then
29131: LD_VAR 0 11
29135: NOT
29136: IFFALSE 29140
// exit ;
29138: GO 29298
// tmp := array ;
29140: LD_ADDR_VAR 0 10
29144: PUSH
29145: LD_VAR 0 1
29149: ST_TO_ADDR
// for i = 1 to length do
29150: LD_ADDR_VAR 0 6
29154: PUSH
29155: DOUBLE
29156: LD_INT 1
29158: DEC
29159: ST_TO_ADDR
29160: LD_VAR 0 11
29164: PUSH
29165: FOR_TO
29166: IFFALSE 29286
// begin for j = 1 to array do
29168: LD_ADDR_VAR 0 7
29172: PUSH
29173: DOUBLE
29174: LD_INT 1
29176: DEC
29177: ST_TO_ADDR
29178: LD_VAR 0 1
29182: PUSH
29183: FOR_TO
29184: IFFALSE 29272
// begin k := j + d ;
29186: LD_ADDR_VAR 0 8
29190: PUSH
29191: LD_VAR 0 7
29195: PUSH
29196: LD_VAR 0 9
29200: PLUS
29201: ST_TO_ADDR
// if k > array then
29202: LD_VAR 0 8
29206: PUSH
29207: LD_VAR 0 1
29211: GREATER
29212: IFFALSE 29222
// k := 1 ;
29214: LD_ADDR_VAR 0 8
29218: PUSH
29219: LD_INT 1
29221: ST_TO_ADDR
// if not k then
29222: LD_VAR 0 8
29226: NOT
29227: IFFALSE 29239
// k := array ;
29229: LD_ADDR_VAR 0 8
29233: PUSH
29234: LD_VAR 0 1
29238: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29239: LD_ADDR_VAR 0 10
29243: PUSH
29244: LD_VAR 0 10
29248: PPUSH
29249: LD_VAR 0 8
29253: PPUSH
29254: LD_VAR 0 1
29258: PUSH
29259: LD_VAR 0 7
29263: ARRAY
29264: PPUSH
29265: CALL_OW 1
29269: ST_TO_ADDR
// end ;
29270: GO 29183
29272: POP
29273: POP
// array := tmp ;
29274: LD_ADDR_VAR 0 1
29278: PUSH
29279: LD_VAR 0 10
29283: ST_TO_ADDR
// end ;
29284: GO 29165
29286: POP
29287: POP
// result := array ;
29288: LD_ADDR_VAR 0 5
29292: PUSH
29293: LD_VAR 0 1
29297: ST_TO_ADDR
// end ;
29298: LD_VAR 0 5
29302: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29303: LD_INT 0
29305: PPUSH
29306: PPUSH
// result := 0 ;
29307: LD_ADDR_VAR 0 3
29311: PUSH
29312: LD_INT 0
29314: ST_TO_ADDR
// if not array or not value in array then
29315: LD_VAR 0 1
29319: NOT
29320: PUSH
29321: LD_VAR 0 2
29325: PUSH
29326: LD_VAR 0 1
29330: IN
29331: NOT
29332: OR
29333: IFFALSE 29337
// exit ;
29335: GO 29391
// for i = 1 to array do
29337: LD_ADDR_VAR 0 4
29341: PUSH
29342: DOUBLE
29343: LD_INT 1
29345: DEC
29346: ST_TO_ADDR
29347: LD_VAR 0 1
29351: PUSH
29352: FOR_TO
29353: IFFALSE 29389
// if value = array [ i ] then
29355: LD_VAR 0 2
29359: PUSH
29360: LD_VAR 0 1
29364: PUSH
29365: LD_VAR 0 4
29369: ARRAY
29370: EQUAL
29371: IFFALSE 29387
// begin result := i ;
29373: LD_ADDR_VAR 0 3
29377: PUSH
29378: LD_VAR 0 4
29382: ST_TO_ADDR
// exit ;
29383: POP
29384: POP
29385: GO 29391
// end ;
29387: GO 29352
29389: POP
29390: POP
// end ;
29391: LD_VAR 0 3
29395: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29396: LD_INT 0
29398: PPUSH
// vc_chassis := chassis ;
29399: LD_ADDR_OWVAR 37
29403: PUSH
29404: LD_VAR 0 1
29408: ST_TO_ADDR
// vc_engine := engine ;
29409: LD_ADDR_OWVAR 39
29413: PUSH
29414: LD_VAR 0 2
29418: ST_TO_ADDR
// vc_control := control ;
29419: LD_ADDR_OWVAR 38
29423: PUSH
29424: LD_VAR 0 3
29428: ST_TO_ADDR
// vc_weapon := weapon ;
29429: LD_ADDR_OWVAR 40
29433: PUSH
29434: LD_VAR 0 4
29438: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29439: LD_ADDR_OWVAR 41
29443: PUSH
29444: LD_VAR 0 5
29448: ST_TO_ADDR
// end ;
29449: LD_VAR 0 6
29453: RET
// export function WantPlant ( unit ) ; var task ; begin
29454: LD_INT 0
29456: PPUSH
29457: PPUSH
// result := false ;
29458: LD_ADDR_VAR 0 2
29462: PUSH
29463: LD_INT 0
29465: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29466: LD_ADDR_VAR 0 3
29470: PUSH
29471: LD_VAR 0 1
29475: PPUSH
29476: CALL_OW 437
29480: ST_TO_ADDR
// if task then
29481: LD_VAR 0 3
29485: IFFALSE 29513
// if task [ 1 ] [ 1 ] = p then
29487: LD_VAR 0 3
29491: PUSH
29492: LD_INT 1
29494: ARRAY
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: PUSH
29500: LD_STRING p
29502: EQUAL
29503: IFFALSE 29513
// result := true ;
29505: LD_ADDR_VAR 0 2
29509: PUSH
29510: LD_INT 1
29512: ST_TO_ADDR
// end ;
29513: LD_VAR 0 2
29517: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29518: LD_INT 0
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
// if pos < 1 then
29524: LD_VAR 0 2
29528: PUSH
29529: LD_INT 1
29531: LESS
29532: IFFALSE 29536
// exit ;
29534: GO 29839
// if pos = 1 then
29536: LD_VAR 0 2
29540: PUSH
29541: LD_INT 1
29543: EQUAL
29544: IFFALSE 29577
// result := Replace ( arr , pos [ 1 ] , value ) else
29546: LD_ADDR_VAR 0 4
29550: PUSH
29551: LD_VAR 0 1
29555: PPUSH
29556: LD_VAR 0 2
29560: PUSH
29561: LD_INT 1
29563: ARRAY
29564: PPUSH
29565: LD_VAR 0 3
29569: PPUSH
29570: CALL_OW 1
29574: ST_TO_ADDR
29575: GO 29839
// begin tmp := arr ;
29577: LD_ADDR_VAR 0 6
29581: PUSH
29582: LD_VAR 0 1
29586: ST_TO_ADDR
// s_arr := [ tmp ] ;
29587: LD_ADDR_VAR 0 7
29591: PUSH
29592: LD_VAR 0 6
29596: PUSH
29597: EMPTY
29598: LIST
29599: ST_TO_ADDR
// for i = 1 to pos - 1 do
29600: LD_ADDR_VAR 0 5
29604: PUSH
29605: DOUBLE
29606: LD_INT 1
29608: DEC
29609: ST_TO_ADDR
29610: LD_VAR 0 2
29614: PUSH
29615: LD_INT 1
29617: MINUS
29618: PUSH
29619: FOR_TO
29620: IFFALSE 29665
// begin tmp := tmp [ pos [ i ] ] ;
29622: LD_ADDR_VAR 0 6
29626: PUSH
29627: LD_VAR 0 6
29631: PUSH
29632: LD_VAR 0 2
29636: PUSH
29637: LD_VAR 0 5
29641: ARRAY
29642: ARRAY
29643: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29644: LD_ADDR_VAR 0 7
29648: PUSH
29649: LD_VAR 0 7
29653: PUSH
29654: LD_VAR 0 6
29658: PUSH
29659: EMPTY
29660: LIST
29661: ADD
29662: ST_TO_ADDR
// end ;
29663: GO 29619
29665: POP
29666: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29667: LD_ADDR_VAR 0 6
29671: PUSH
29672: LD_VAR 0 6
29676: PPUSH
29677: LD_VAR 0 2
29681: PUSH
29682: LD_VAR 0 2
29686: ARRAY
29687: PPUSH
29688: LD_VAR 0 3
29692: PPUSH
29693: CALL_OW 1
29697: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29698: LD_ADDR_VAR 0 7
29702: PUSH
29703: LD_VAR 0 7
29707: PPUSH
29708: LD_VAR 0 7
29712: PPUSH
29713: LD_VAR 0 6
29717: PPUSH
29718: CALL_OW 1
29722: ST_TO_ADDR
// for i = s_arr downto 2 do
29723: LD_ADDR_VAR 0 5
29727: PUSH
29728: DOUBLE
29729: LD_VAR 0 7
29733: INC
29734: ST_TO_ADDR
29735: LD_INT 2
29737: PUSH
29738: FOR_DOWNTO
29739: IFFALSE 29823
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29741: LD_ADDR_VAR 0 6
29745: PUSH
29746: LD_VAR 0 7
29750: PUSH
29751: LD_VAR 0 5
29755: PUSH
29756: LD_INT 1
29758: MINUS
29759: ARRAY
29760: PPUSH
29761: LD_VAR 0 2
29765: PUSH
29766: LD_VAR 0 5
29770: PUSH
29771: LD_INT 1
29773: MINUS
29774: ARRAY
29775: PPUSH
29776: LD_VAR 0 7
29780: PUSH
29781: LD_VAR 0 5
29785: ARRAY
29786: PPUSH
29787: CALL_OW 1
29791: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29792: LD_ADDR_VAR 0 7
29796: PUSH
29797: LD_VAR 0 7
29801: PPUSH
29802: LD_VAR 0 5
29806: PUSH
29807: LD_INT 1
29809: MINUS
29810: PPUSH
29811: LD_VAR 0 6
29815: PPUSH
29816: CALL_OW 1
29820: ST_TO_ADDR
// end ;
29821: GO 29738
29823: POP
29824: POP
// result := s_arr [ 1 ] ;
29825: LD_ADDR_VAR 0 4
29829: PUSH
29830: LD_VAR 0 7
29834: PUSH
29835: LD_INT 1
29837: ARRAY
29838: ST_TO_ADDR
// end ; end ;
29839: LD_VAR 0 4
29843: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29844: LD_INT 0
29846: PPUSH
29847: PPUSH
// if not list then
29848: LD_VAR 0 1
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 29948
// i := list [ pos1 ] ;
29857: LD_ADDR_VAR 0 5
29861: PUSH
29862: LD_VAR 0 1
29866: PUSH
29867: LD_VAR 0 2
29871: ARRAY
29872: ST_TO_ADDR
// if not i then
29873: LD_VAR 0 5
29877: NOT
29878: IFFALSE 29882
// exit ;
29880: GO 29948
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29882: LD_ADDR_VAR 0 1
29886: PUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: LD_VAR 0 2
29896: PPUSH
29897: LD_VAR 0 1
29901: PUSH
29902: LD_VAR 0 3
29906: ARRAY
29907: PPUSH
29908: CALL_OW 1
29912: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29913: LD_ADDR_VAR 0 1
29917: PUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: LD_VAR 0 3
29927: PPUSH
29928: LD_VAR 0 5
29932: PPUSH
29933: CALL_OW 1
29937: ST_TO_ADDR
// result := list ;
29938: LD_ADDR_VAR 0 4
29942: PUSH
29943: LD_VAR 0 1
29947: ST_TO_ADDR
// end ;
29948: LD_VAR 0 4
29952: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29953: LD_INT 0
29955: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29956: LD_ADDR_VAR 0 5
29960: PUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 250
29970: PPUSH
29971: LD_VAR 0 1
29975: PPUSH
29976: CALL_OW 251
29980: PPUSH
29981: LD_VAR 0 2
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: LD_VAR 0 4
29995: PPUSH
29996: CALL 30006 0 5
30000: ST_TO_ADDR
// end ;
30001: LD_VAR 0 5
30005: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
// if not list then
30012: LD_VAR 0 3
30016: NOT
30017: IFFALSE 30021
// exit ;
30019: GO 30409
// result := [ ] ;
30021: LD_ADDR_VAR 0 6
30025: PUSH
30026: EMPTY
30027: ST_TO_ADDR
// for i in list do
30028: LD_ADDR_VAR 0 7
30032: PUSH
30033: LD_VAR 0 3
30037: PUSH
30038: FOR_IN
30039: IFFALSE 30241
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30041: LD_ADDR_VAR 0 9
30045: PUSH
30046: LD_VAR 0 7
30050: PPUSH
30051: LD_VAR 0 1
30055: PPUSH
30056: LD_VAR 0 2
30060: PPUSH
30061: CALL_OW 297
30065: ST_TO_ADDR
// if not result then
30066: LD_VAR 0 6
30070: NOT
30071: IFFALSE 30097
// result := [ [ i , tmp ] ] else
30073: LD_ADDR_VAR 0 6
30077: PUSH
30078: LD_VAR 0 7
30082: PUSH
30083: LD_VAR 0 9
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: ST_TO_ADDR
30095: GO 30239
// begin if result [ result ] [ 2 ] < tmp then
30097: LD_VAR 0 6
30101: PUSH
30102: LD_VAR 0 6
30106: ARRAY
30107: PUSH
30108: LD_INT 2
30110: ARRAY
30111: PUSH
30112: LD_VAR 0 9
30116: LESS
30117: IFFALSE 30159
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30119: LD_ADDR_VAR 0 6
30123: PUSH
30124: LD_VAR 0 6
30128: PPUSH
30129: LD_VAR 0 6
30133: PUSH
30134: LD_INT 1
30136: PLUS
30137: PPUSH
30138: LD_VAR 0 7
30142: PUSH
30143: LD_VAR 0 9
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PPUSH
30152: CALL_OW 2
30156: ST_TO_ADDR
30157: GO 30239
// for j = 1 to result do
30159: LD_ADDR_VAR 0 8
30163: PUSH
30164: DOUBLE
30165: LD_INT 1
30167: DEC
30168: ST_TO_ADDR
30169: LD_VAR 0 6
30173: PUSH
30174: FOR_TO
30175: IFFALSE 30237
// begin if tmp < result [ j ] [ 2 ] then
30177: LD_VAR 0 9
30181: PUSH
30182: LD_VAR 0 6
30186: PUSH
30187: LD_VAR 0 8
30191: ARRAY
30192: PUSH
30193: LD_INT 2
30195: ARRAY
30196: LESS
30197: IFFALSE 30235
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30199: LD_ADDR_VAR 0 6
30203: PUSH
30204: LD_VAR 0 6
30208: PPUSH
30209: LD_VAR 0 8
30213: PPUSH
30214: LD_VAR 0 7
30218: PUSH
30219: LD_VAR 0 9
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PPUSH
30228: CALL_OW 2
30232: ST_TO_ADDR
// break ;
30233: GO 30237
// end ; end ;
30235: GO 30174
30237: POP
30238: POP
// end ; end ;
30239: GO 30038
30241: POP
30242: POP
// if result and not asc then
30243: LD_VAR 0 6
30247: PUSH
30248: LD_VAR 0 4
30252: NOT
30253: AND
30254: IFFALSE 30329
// begin tmp := result ;
30256: LD_ADDR_VAR 0 9
30260: PUSH
30261: LD_VAR 0 6
30265: ST_TO_ADDR
// for i = tmp downto 1 do
30266: LD_ADDR_VAR 0 7
30270: PUSH
30271: DOUBLE
30272: LD_VAR 0 9
30276: INC
30277: ST_TO_ADDR
30278: LD_INT 1
30280: PUSH
30281: FOR_DOWNTO
30282: IFFALSE 30327
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30284: LD_ADDR_VAR 0 6
30288: PUSH
30289: LD_VAR 0 6
30293: PPUSH
30294: LD_VAR 0 9
30298: PUSH
30299: LD_VAR 0 7
30303: MINUS
30304: PUSH
30305: LD_INT 1
30307: PLUS
30308: PPUSH
30309: LD_VAR 0 9
30313: PUSH
30314: LD_VAR 0 7
30318: ARRAY
30319: PPUSH
30320: CALL_OW 1
30324: ST_TO_ADDR
30325: GO 30281
30327: POP
30328: POP
// end ; tmp := [ ] ;
30329: LD_ADDR_VAR 0 9
30333: PUSH
30334: EMPTY
30335: ST_TO_ADDR
// if mode then
30336: LD_VAR 0 5
30340: IFFALSE 30409
// begin for i = 1 to result do
30342: LD_ADDR_VAR 0 7
30346: PUSH
30347: DOUBLE
30348: LD_INT 1
30350: DEC
30351: ST_TO_ADDR
30352: LD_VAR 0 6
30356: PUSH
30357: FOR_TO
30358: IFFALSE 30397
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30360: LD_ADDR_VAR 0 9
30364: PUSH
30365: LD_VAR 0 9
30369: PPUSH
30370: LD_VAR 0 7
30374: PPUSH
30375: LD_VAR 0 6
30379: PUSH
30380: LD_VAR 0 7
30384: ARRAY
30385: PUSH
30386: LD_INT 1
30388: ARRAY
30389: PPUSH
30390: CALL_OW 1
30394: ST_TO_ADDR
30395: GO 30357
30397: POP
30398: POP
// result := tmp ;
30399: LD_ADDR_VAR 0 6
30403: PUSH
30404: LD_VAR 0 9
30408: ST_TO_ADDR
// end ; end ;
30409: LD_VAR 0 6
30413: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30414: LD_INT 0
30416: PPUSH
30417: PPUSH
30418: PPUSH
30419: PPUSH
30420: PPUSH
30421: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30422: LD_ADDR_VAR 0 5
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 0
30435: PUSH
30436: EMPTY
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: ST_TO_ADDR
// if not x or not y then
30444: LD_VAR 0 2
30448: NOT
30449: PUSH
30450: LD_VAR 0 3
30454: NOT
30455: OR
30456: IFFALSE 30460
// exit ;
30458: GO 32110
// if not range then
30460: LD_VAR 0 4
30464: NOT
30465: IFFALSE 30475
// range := 10 ;
30467: LD_ADDR_VAR 0 4
30471: PUSH
30472: LD_INT 10
30474: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30475: LD_ADDR_VAR 0 8
30479: PUSH
30480: LD_INT 81
30482: PUSH
30483: LD_VAR 0 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 92
30494: PUSH
30495: LD_VAR 0 2
30499: PUSH
30500: LD_VAR 0 3
30504: PUSH
30505: LD_VAR 0 4
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: LD_INT 21
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: PPUSH
30538: CALL_OW 69
30542: ST_TO_ADDR
// if not tmp then
30543: LD_VAR 0 8
30547: NOT
30548: IFFALSE 30552
// exit ;
30550: GO 32110
// for i in tmp do
30552: LD_ADDR_VAR 0 6
30556: PUSH
30557: LD_VAR 0 8
30561: PUSH
30562: FOR_IN
30563: IFFALSE 32085
// begin points := [ 0 , 0 , 0 ] ;
30565: LD_ADDR_VAR 0 9
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// bpoints := 1 ;
30584: LD_ADDR_VAR 0 10
30588: PUSH
30589: LD_INT 1
30591: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30592: LD_VAR 0 6
30596: PPUSH
30597: CALL_OW 247
30601: PUSH
30602: LD_INT 1
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 31188
30610: POP
// begin if GetClass ( i ) = 1 then
30611: LD_VAR 0 6
30615: PPUSH
30616: CALL_OW 257
30620: PUSH
30621: LD_INT 1
30623: EQUAL
30624: IFFALSE 30645
// points := [ 10 , 5 , 3 ] ;
30626: LD_ADDR_VAR 0 9
30630: PUSH
30631: LD_INT 10
30633: PUSH
30634: LD_INT 5
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30645: LD_VAR 0 6
30649: PPUSH
30650: CALL_OW 257
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: IN
30669: IFFALSE 30690
// points := [ 3 , 2 , 1 ] ;
30671: LD_ADDR_VAR 0 9
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30690: LD_VAR 0 6
30694: PPUSH
30695: CALL_OW 257
30699: PUSH
30700: LD_INT 5
30702: EQUAL
30703: IFFALSE 30724
// points := [ 130 , 5 , 2 ] ;
30705: LD_ADDR_VAR 0 9
30709: PUSH
30710: LD_INT 130
30712: PUSH
30713: LD_INT 5
30715: PUSH
30716: LD_INT 2
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30724: LD_VAR 0 6
30728: PPUSH
30729: CALL_OW 257
30733: PUSH
30734: LD_INT 8
30736: EQUAL
30737: IFFALSE 30758
// points := [ 35 , 35 , 30 ] ;
30739: LD_ADDR_VAR 0 9
30743: PUSH
30744: LD_INT 35
30746: PUSH
30747: LD_INT 35
30749: PUSH
30750: LD_INT 30
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30758: LD_VAR 0 6
30762: PPUSH
30763: CALL_OW 257
30767: PUSH
30768: LD_INT 9
30770: EQUAL
30771: IFFALSE 30792
// points := [ 20 , 55 , 40 ] ;
30773: LD_ADDR_VAR 0 9
30777: PUSH
30778: LD_INT 20
30780: PUSH
30781: LD_INT 55
30783: PUSH
30784: LD_INT 40
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30792: LD_VAR 0 6
30796: PPUSH
30797: CALL_OW 257
30801: PUSH
30802: LD_INT 12
30804: PUSH
30805: LD_INT 16
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: IN
30812: IFFALSE 30833
// points := [ 5 , 3 , 2 ] ;
30814: LD_ADDR_VAR 0 9
30818: PUSH
30819: LD_INT 5
30821: PUSH
30822: LD_INT 3
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: LIST
30832: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30833: LD_VAR 0 6
30837: PPUSH
30838: CALL_OW 257
30842: PUSH
30843: LD_INT 17
30845: EQUAL
30846: IFFALSE 30867
// points := [ 100 , 50 , 75 ] ;
30848: LD_ADDR_VAR 0 9
30852: PUSH
30853: LD_INT 100
30855: PUSH
30856: LD_INT 50
30858: PUSH
30859: LD_INT 75
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30867: LD_VAR 0 6
30871: PPUSH
30872: CALL_OW 257
30876: PUSH
30877: LD_INT 15
30879: EQUAL
30880: IFFALSE 30901
// points := [ 10 , 5 , 3 ] ;
30882: LD_ADDR_VAR 0 9
30886: PUSH
30887: LD_INT 10
30889: PUSH
30890: LD_INT 5
30892: PUSH
30893: LD_INT 3
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30901: LD_VAR 0 6
30905: PPUSH
30906: CALL_OW 257
30910: PUSH
30911: LD_INT 14
30913: EQUAL
30914: IFFALSE 30935
// points := [ 10 , 0 , 0 ] ;
30916: LD_ADDR_VAR 0 9
30920: PUSH
30921: LD_INT 10
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30935: LD_VAR 0 6
30939: PPUSH
30940: CALL_OW 257
30944: PUSH
30945: LD_INT 11
30947: EQUAL
30948: IFFALSE 30969
// points := [ 30 , 10 , 5 ] ;
30950: LD_ADDR_VAR 0 9
30954: PUSH
30955: LD_INT 30
30957: PUSH
30958: LD_INT 10
30960: PUSH
30961: LD_INT 5
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30969: LD_VAR 0 1
30973: PPUSH
30974: LD_INT 5
30976: PPUSH
30977: CALL_OW 321
30981: PUSH
30982: LD_INT 2
30984: EQUAL
30985: IFFALSE 31002
// bpoints := bpoints * 1.8 ;
30987: LD_ADDR_VAR 0 10
30991: PUSH
30992: LD_VAR 0 10
30996: PUSH
30997: LD_REAL  1.80000000000000E+0000
31000: MUL
31001: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31002: LD_VAR 0 6
31006: PPUSH
31007: CALL_OW 257
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 4
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: IN
31030: PUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: LD_INT 51
31038: PPUSH
31039: CALL_OW 321
31043: PUSH
31044: LD_INT 2
31046: EQUAL
31047: AND
31048: IFFALSE 31065
// bpoints := bpoints * 1.2 ;
31050: LD_ADDR_VAR 0 10
31054: PUSH
31055: LD_VAR 0 10
31059: PUSH
31060: LD_REAL  1.20000000000000E+0000
31063: MUL
31064: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 257
31074: PUSH
31075: LD_INT 5
31077: PUSH
31078: LD_INT 7
31080: PUSH
31081: LD_INT 9
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: IN
31089: PUSH
31090: LD_VAR 0 1
31094: PPUSH
31095: LD_INT 52
31097: PPUSH
31098: CALL_OW 321
31102: PUSH
31103: LD_INT 2
31105: EQUAL
31106: AND
31107: IFFALSE 31124
// bpoints := bpoints * 1.5 ;
31109: LD_ADDR_VAR 0 10
31113: PUSH
31114: LD_VAR 0 10
31118: PUSH
31119: LD_REAL  1.50000000000000E+0000
31122: MUL
31123: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31124: LD_VAR 0 1
31128: PPUSH
31129: LD_INT 66
31131: PPUSH
31132: CALL_OW 321
31136: PUSH
31137: LD_INT 2
31139: EQUAL
31140: IFFALSE 31157
// bpoints := bpoints * 1.1 ;
31142: LD_ADDR_VAR 0 10
31146: PUSH
31147: LD_VAR 0 10
31151: PUSH
31152: LD_REAL  1.10000000000000E+0000
31155: MUL
31156: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31157: LD_ADDR_VAR 0 10
31161: PUSH
31162: LD_VAR 0 10
31166: PUSH
31167: LD_VAR 0 6
31171: PPUSH
31172: LD_INT 1
31174: PPUSH
31175: CALL_OW 259
31179: PUSH
31180: LD_REAL  1.15000000000000E+0000
31183: MUL
31184: MUL
31185: ST_TO_ADDR
// end ; unit_vehicle :
31186: GO 32014
31188: LD_INT 2
31190: DOUBLE
31191: EQUAL
31192: IFTRUE 31196
31194: GO 32002
31196: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31197: LD_VAR 0 6
31201: PPUSH
31202: CALL_OW 264
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 42
31212: PUSH
31213: LD_INT 24
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: IN
31221: IFFALSE 31242
// points := [ 25 , 5 , 3 ] ;
31223: LD_ADDR_VAR 0 9
31227: PUSH
31228: LD_INT 25
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: LD_INT 3
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31242: LD_VAR 0 6
31246: PPUSH
31247: CALL_OW 264
31251: PUSH
31252: LD_INT 4
31254: PUSH
31255: LD_INT 43
31257: PUSH
31258: LD_INT 25
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: IN
31266: IFFALSE 31287
// points := [ 40 , 15 , 5 ] ;
31268: LD_ADDR_VAR 0 9
31272: PUSH
31273: LD_INT 40
31275: PUSH
31276: LD_INT 15
31278: PUSH
31279: LD_INT 5
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31287: LD_VAR 0 6
31291: PPUSH
31292: CALL_OW 264
31296: PUSH
31297: LD_INT 3
31299: PUSH
31300: LD_INT 23
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: IN
31307: IFFALSE 31328
// points := [ 7 , 25 , 8 ] ;
31309: LD_ADDR_VAR 0 9
31313: PUSH
31314: LD_INT 7
31316: PUSH
31317: LD_INT 25
31319: PUSH
31320: LD_INT 8
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31328: LD_VAR 0 6
31332: PPUSH
31333: CALL_OW 264
31337: PUSH
31338: LD_INT 5
31340: PUSH
31341: LD_INT 27
31343: PUSH
31344: LD_INT 44
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: IN
31352: IFFALSE 31373
// points := [ 14 , 50 , 16 ] ;
31354: LD_ADDR_VAR 0 9
31358: PUSH
31359: LD_INT 14
31361: PUSH
31362: LD_INT 50
31364: PUSH
31365: LD_INT 16
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31373: LD_VAR 0 6
31377: PPUSH
31378: CALL_OW 264
31382: PUSH
31383: LD_INT 6
31385: PUSH
31386: LD_INT 46
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: IN
31393: IFFALSE 31414
// points := [ 32 , 120 , 70 ] ;
31395: LD_ADDR_VAR 0 9
31399: PUSH
31400: LD_INT 32
31402: PUSH
31403: LD_INT 120
31405: PUSH
31406: LD_INT 70
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31414: LD_VAR 0 6
31418: PPUSH
31419: CALL_OW 264
31423: PUSH
31424: LD_INT 7
31426: PUSH
31427: LD_INT 28
31429: PUSH
31430: LD_INT 45
31432: PUSH
31433: LD_INT 92
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: IN
31442: IFFALSE 31463
// points := [ 35 , 20 , 45 ] ;
31444: LD_ADDR_VAR 0 9
31448: PUSH
31449: LD_INT 35
31451: PUSH
31452: LD_INT 20
31454: PUSH
31455: LD_INT 45
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31463: LD_VAR 0 6
31467: PPUSH
31468: CALL_OW 264
31472: PUSH
31473: LD_INT 47
31475: PUSH
31476: EMPTY
31477: LIST
31478: IN
31479: IFFALSE 31500
// points := [ 67 , 45 , 75 ] ;
31481: LD_ADDR_VAR 0 9
31485: PUSH
31486: LD_INT 67
31488: PUSH
31489: LD_INT 45
31491: PUSH
31492: LD_INT 75
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31500: LD_VAR 0 6
31504: PPUSH
31505: CALL_OW 264
31509: PUSH
31510: LD_INT 26
31512: PUSH
31513: EMPTY
31514: LIST
31515: IN
31516: IFFALSE 31537
// points := [ 120 , 30 , 80 ] ;
31518: LD_ADDR_VAR 0 9
31522: PUSH
31523: LD_INT 120
31525: PUSH
31526: LD_INT 30
31528: PUSH
31529: LD_INT 80
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31537: LD_VAR 0 6
31541: PPUSH
31542: CALL_OW 264
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: EMPTY
31551: LIST
31552: IN
31553: IFFALSE 31574
// points := [ 40 , 1 , 1 ] ;
31555: LD_ADDR_VAR 0 9
31559: PUSH
31560: LD_INT 40
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31574: LD_VAR 0 6
31578: PPUSH
31579: CALL_OW 264
31583: PUSH
31584: LD_INT 29
31586: PUSH
31587: EMPTY
31588: LIST
31589: IN
31590: IFFALSE 31611
// points := [ 70 , 200 , 400 ] ;
31592: LD_ADDR_VAR 0 9
31596: PUSH
31597: LD_INT 70
31599: PUSH
31600: LD_INT 200
31602: PUSH
31603: LD_INT 400
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31611: LD_VAR 0 6
31615: PPUSH
31616: CALL_OW 264
31620: PUSH
31621: LD_INT 14
31623: PUSH
31624: LD_INT 53
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: IN
31631: IFFALSE 31652
// points := [ 40 , 10 , 20 ] ;
31633: LD_ADDR_VAR 0 9
31637: PUSH
31638: LD_INT 40
31640: PUSH
31641: LD_INT 10
31643: PUSH
31644: LD_INT 20
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 264
31661: PUSH
31662: LD_INT 9
31664: PUSH
31665: EMPTY
31666: LIST
31667: IN
31668: IFFALSE 31689
// points := [ 5 , 70 , 20 ] ;
31670: LD_ADDR_VAR 0 9
31674: PUSH
31675: LD_INT 5
31677: PUSH
31678: LD_INT 70
31680: PUSH
31681: LD_INT 20
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31689: LD_VAR 0 6
31693: PPUSH
31694: CALL_OW 264
31698: PUSH
31699: LD_INT 10
31701: PUSH
31702: EMPTY
31703: LIST
31704: IN
31705: IFFALSE 31726
// points := [ 35 , 110 , 70 ] ;
31707: LD_ADDR_VAR 0 9
31711: PUSH
31712: LD_INT 35
31714: PUSH
31715: LD_INT 110
31717: PUSH
31718: LD_INT 70
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31726: LD_VAR 0 6
31730: PPUSH
31731: CALL_OW 265
31735: PUSH
31736: LD_INT 25
31738: EQUAL
31739: IFFALSE 31760
// points := [ 80 , 65 , 100 ] ;
31741: LD_ADDR_VAR 0 9
31745: PUSH
31746: LD_INT 80
31748: PUSH
31749: LD_INT 65
31751: PUSH
31752: LD_INT 100
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31760: LD_VAR 0 6
31764: PPUSH
31765: CALL_OW 263
31769: PUSH
31770: LD_INT 1
31772: EQUAL
31773: IFFALSE 31808
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31775: LD_ADDR_VAR 0 10
31779: PUSH
31780: LD_VAR 0 10
31784: PUSH
31785: LD_VAR 0 6
31789: PPUSH
31790: CALL_OW 311
31794: PPUSH
31795: LD_INT 3
31797: PPUSH
31798: CALL_OW 259
31802: PUSH
31803: LD_INT 4
31805: MUL
31806: MUL
31807: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31808: LD_VAR 0 6
31812: PPUSH
31813: CALL_OW 263
31817: PUSH
31818: LD_INT 2
31820: EQUAL
31821: IFFALSE 31872
// begin j := IsControledBy ( i ) ;
31823: LD_ADDR_VAR 0 7
31827: PUSH
31828: LD_VAR 0 6
31832: PPUSH
31833: CALL_OW 312
31837: ST_TO_ADDR
// if j then
31838: LD_VAR 0 7
31842: IFFALSE 31872
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31844: LD_ADDR_VAR 0 10
31848: PUSH
31849: LD_VAR 0 10
31853: PUSH
31854: LD_VAR 0 7
31858: PPUSH
31859: LD_INT 3
31861: PPUSH
31862: CALL_OW 259
31866: PUSH
31867: LD_INT 3
31869: MUL
31870: MUL
31871: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31872: LD_VAR 0 6
31876: PPUSH
31877: CALL_OW 264
31881: PUSH
31882: LD_INT 5
31884: PUSH
31885: LD_INT 6
31887: PUSH
31888: LD_INT 46
31890: PUSH
31891: LD_INT 44
31893: PUSH
31894: LD_INT 47
31896: PUSH
31897: LD_INT 45
31899: PUSH
31900: LD_INT 28
31902: PUSH
31903: LD_INT 7
31905: PUSH
31906: LD_INT 27
31908: PUSH
31909: LD_INT 29
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: IN
31924: PUSH
31925: LD_VAR 0 1
31929: PPUSH
31930: LD_INT 52
31932: PPUSH
31933: CALL_OW 321
31937: PUSH
31938: LD_INT 2
31940: EQUAL
31941: AND
31942: IFFALSE 31959
// bpoints := bpoints * 1.2 ;
31944: LD_ADDR_VAR 0 10
31948: PUSH
31949: LD_VAR 0 10
31953: PUSH
31954: LD_REAL  1.20000000000000E+0000
31957: MUL
31958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31959: LD_VAR 0 6
31963: PPUSH
31964: CALL_OW 264
31968: PUSH
31969: LD_INT 6
31971: PUSH
31972: LD_INT 46
31974: PUSH
31975: LD_INT 47
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: IN
31983: IFFALSE 32000
// bpoints := bpoints * 1.2 ;
31985: LD_ADDR_VAR 0 10
31989: PUSH
31990: LD_VAR 0 10
31994: PUSH
31995: LD_REAL  1.20000000000000E+0000
31998: MUL
31999: ST_TO_ADDR
// end ; unit_building :
32000: GO 32014
32002: LD_INT 3
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32013
32010: POP
// ; end ;
32011: GO 32014
32013: POP
// for j = 1 to 3 do
32014: LD_ADDR_VAR 0 7
32018: PUSH
32019: DOUBLE
32020: LD_INT 1
32022: DEC
32023: ST_TO_ADDR
32024: LD_INT 3
32026: PUSH
32027: FOR_TO
32028: IFFALSE 32081
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32030: LD_ADDR_VAR 0 5
32034: PUSH
32035: LD_VAR 0 5
32039: PPUSH
32040: LD_VAR 0 7
32044: PPUSH
32045: LD_VAR 0 5
32049: PUSH
32050: LD_VAR 0 7
32054: ARRAY
32055: PUSH
32056: LD_VAR 0 9
32060: PUSH
32061: LD_VAR 0 7
32065: ARRAY
32066: PUSH
32067: LD_VAR 0 10
32071: MUL
32072: PLUS
32073: PPUSH
32074: CALL_OW 1
32078: ST_TO_ADDR
32079: GO 32027
32081: POP
32082: POP
// end ;
32083: GO 30562
32085: POP
32086: POP
// result := Replace ( result , 4 , tmp ) ;
32087: LD_ADDR_VAR 0 5
32091: PUSH
32092: LD_VAR 0 5
32096: PPUSH
32097: LD_INT 4
32099: PPUSH
32100: LD_VAR 0 8
32104: PPUSH
32105: CALL_OW 1
32109: ST_TO_ADDR
// end ;
32110: LD_VAR 0 5
32114: RET
// export function DangerAtRange ( unit , range ) ; begin
32115: LD_INT 0
32117: PPUSH
// if not unit then
32118: LD_VAR 0 1
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 32172
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_VAR 0 1
32136: PPUSH
32137: CALL_OW 255
32141: PPUSH
32142: LD_VAR 0 1
32146: PPUSH
32147: CALL_OW 250
32151: PPUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL_OW 251
32161: PPUSH
32162: LD_VAR 0 2
32166: PPUSH
32167: CALL 30414 0 4
32171: ST_TO_ADDR
// end ;
32172: LD_VAR 0 3
32176: RET
// export function DangerInArea ( side , area ) ; begin
32177: LD_INT 0
32179: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32180: LD_ADDR_VAR 0 3
32184: PUSH
32185: LD_VAR 0 2
32189: PPUSH
32190: LD_INT 81
32192: PUSH
32193: LD_VAR 0 1
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PPUSH
32202: CALL_OW 70
32206: ST_TO_ADDR
// end ;
32207: LD_VAR 0 3
32211: RET
// export function IsExtension ( b ) ; begin
32212: LD_INT 0
32214: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32215: LD_ADDR_VAR 0 2
32219: PUSH
32220: LD_VAR 0 1
32224: PUSH
32225: LD_INT 23
32227: PUSH
32228: LD_INT 20
32230: PUSH
32231: LD_INT 22
32233: PUSH
32234: LD_INT 17
32236: PUSH
32237: LD_INT 24
32239: PUSH
32240: LD_INT 21
32242: PUSH
32243: LD_INT 19
32245: PUSH
32246: LD_INT 16
32248: PUSH
32249: LD_INT 25
32251: PUSH
32252: LD_INT 18
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: IN
32267: ST_TO_ADDR
// end ;
32268: LD_VAR 0 2
32272: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32273: LD_INT 0
32275: PPUSH
32276: PPUSH
32277: PPUSH
// result := [ ] ;
32278: LD_ADDR_VAR 0 4
32282: PUSH
32283: EMPTY
32284: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32285: LD_ADDR_VAR 0 5
32289: PUSH
32290: LD_VAR 0 2
32294: PPUSH
32295: LD_INT 21
32297: PUSH
32298: LD_INT 3
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PPUSH
32305: CALL_OW 70
32309: ST_TO_ADDR
// if not tmp then
32310: LD_VAR 0 5
32314: NOT
32315: IFFALSE 32319
// exit ;
32317: GO 32383
// if checkLink then
32319: LD_VAR 0 3
32323: IFFALSE 32373
// begin for i in tmp do
32325: LD_ADDR_VAR 0 6
32329: PUSH
32330: LD_VAR 0 5
32334: PUSH
32335: FOR_IN
32336: IFFALSE 32371
// if GetBase ( i ) <> base then
32338: LD_VAR 0 6
32342: PPUSH
32343: CALL_OW 274
32347: PUSH
32348: LD_VAR 0 1
32352: NONEQUAL
32353: IFFALSE 32369
// ComLinkToBase ( base , i ) ;
32355: LD_VAR 0 1
32359: PPUSH
32360: LD_VAR 0 6
32364: PPUSH
32365: CALL_OW 169
32369: GO 32335
32371: POP
32372: POP
// end ; result := tmp ;
32373: LD_ADDR_VAR 0 4
32377: PUSH
32378: LD_VAR 0 5
32382: ST_TO_ADDR
// end ;
32383: LD_VAR 0 4
32387: RET
// export function ComComplete ( units , b ) ; var i ; begin
32388: LD_INT 0
32390: PPUSH
32391: PPUSH
// if not units then
32392: LD_VAR 0 1
32396: NOT
32397: IFFALSE 32401
// exit ;
32399: GO 32491
// for i in units do
32401: LD_ADDR_VAR 0 4
32405: PUSH
32406: LD_VAR 0 1
32410: PUSH
32411: FOR_IN
32412: IFFALSE 32489
// if BuildingStatus ( b ) = bs_build then
32414: LD_VAR 0 2
32418: PPUSH
32419: CALL_OW 461
32423: PUSH
32424: LD_INT 1
32426: EQUAL
32427: IFFALSE 32487
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32429: LD_VAR 0 4
32433: PPUSH
32434: LD_STRING h
32436: PUSH
32437: LD_VAR 0 2
32441: PPUSH
32442: CALL_OW 250
32446: PUSH
32447: LD_VAR 0 2
32451: PPUSH
32452: CALL_OW 251
32456: PUSH
32457: LD_VAR 0 2
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: PPUSH
32483: CALL_OW 446
32487: GO 32411
32489: POP
32490: POP
// end ;
32491: LD_VAR 0 3
32495: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32496: LD_INT 0
32498: PPUSH
32499: PPUSH
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32504: LD_VAR 0 1
32508: NOT
32509: PUSH
32510: LD_VAR 0 1
32514: PPUSH
32515: CALL_OW 263
32519: PUSH
32520: LD_INT 2
32522: NONEQUAL
32523: OR
32524: IFFALSE 32528
// exit ;
32526: GO 32844
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_INT 22
32535: PUSH
32536: LD_VAR 0 1
32540: PPUSH
32541: CALL_OW 255
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: LD_INT 30
32555: PUSH
32556: LD_INT 36
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 34
32565: PUSH
32566: LD_INT 31
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PPUSH
32582: CALL_OW 69
32586: ST_TO_ADDR
// if not tmp then
32587: LD_VAR 0 6
32591: NOT
32592: IFFALSE 32596
// exit ;
32594: GO 32844
// result := [ ] ;
32596: LD_ADDR_VAR 0 2
32600: PUSH
32601: EMPTY
32602: ST_TO_ADDR
// for i in tmp do
32603: LD_ADDR_VAR 0 3
32607: PUSH
32608: LD_VAR 0 6
32612: PUSH
32613: FOR_IN
32614: IFFALSE 32685
// begin t := UnitsInside ( i ) ;
32616: LD_ADDR_VAR 0 4
32620: PUSH
32621: LD_VAR 0 3
32625: PPUSH
32626: CALL_OW 313
32630: ST_TO_ADDR
// if t then
32631: LD_VAR 0 4
32635: IFFALSE 32683
// for j in t do
32637: LD_ADDR_VAR 0 7
32641: PUSH
32642: LD_VAR 0 4
32646: PUSH
32647: FOR_IN
32648: IFFALSE 32681
// result := Replace ( result , result + 1 , j ) ;
32650: LD_ADDR_VAR 0 2
32654: PUSH
32655: LD_VAR 0 2
32659: PPUSH
32660: LD_VAR 0 2
32664: PUSH
32665: LD_INT 1
32667: PLUS
32668: PPUSH
32669: LD_VAR 0 7
32673: PPUSH
32674: CALL_OW 1
32678: ST_TO_ADDR
32679: GO 32647
32681: POP
32682: POP
// end ;
32683: GO 32613
32685: POP
32686: POP
// if not result then
32687: LD_VAR 0 2
32691: NOT
32692: IFFALSE 32696
// exit ;
32694: GO 32844
// mech := result [ 1 ] ;
32696: LD_ADDR_VAR 0 5
32700: PUSH
32701: LD_VAR 0 2
32705: PUSH
32706: LD_INT 1
32708: ARRAY
32709: ST_TO_ADDR
// if result > 1 then
32710: LD_VAR 0 2
32714: PUSH
32715: LD_INT 1
32717: GREATER
32718: IFFALSE 32830
// begin for i = 2 to result do
32720: LD_ADDR_VAR 0 3
32724: PUSH
32725: DOUBLE
32726: LD_INT 2
32728: DEC
32729: ST_TO_ADDR
32730: LD_VAR 0 2
32734: PUSH
32735: FOR_TO
32736: IFFALSE 32828
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32738: LD_ADDR_VAR 0 4
32742: PUSH
32743: LD_VAR 0 2
32747: PUSH
32748: LD_VAR 0 3
32752: ARRAY
32753: PPUSH
32754: LD_INT 3
32756: PPUSH
32757: CALL_OW 259
32761: PUSH
32762: LD_VAR 0 2
32766: PUSH
32767: LD_VAR 0 3
32771: ARRAY
32772: PPUSH
32773: CALL_OW 432
32777: MINUS
32778: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32779: LD_VAR 0 4
32783: PUSH
32784: LD_VAR 0 5
32788: PPUSH
32789: LD_INT 3
32791: PPUSH
32792: CALL_OW 259
32796: PUSH
32797: LD_VAR 0 5
32801: PPUSH
32802: CALL_OW 432
32806: MINUS
32807: GREATEREQUAL
32808: IFFALSE 32826
// mech := result [ i ] ;
32810: LD_ADDR_VAR 0 5
32814: PUSH
32815: LD_VAR 0 2
32819: PUSH
32820: LD_VAR 0 3
32824: ARRAY
32825: ST_TO_ADDR
// end ;
32826: GO 32735
32828: POP
32829: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32830: LD_VAR 0 1
32834: PPUSH
32835: LD_VAR 0 5
32839: PPUSH
32840: CALL_OW 135
// end ;
32844: LD_VAR 0 2
32848: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32849: LD_INT 0
32851: PPUSH
32852: PPUSH
32853: PPUSH
32854: PPUSH
32855: PPUSH
32856: PPUSH
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
32861: PPUSH
32862: PPUSH
32863: PPUSH
// result := [ ] ;
32864: LD_ADDR_VAR 0 7
32868: PUSH
32869: EMPTY
32870: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32871: LD_VAR 0 1
32875: PPUSH
32876: CALL_OW 266
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: IN
32891: NOT
32892: IFFALSE 32896
// exit ;
32894: GO 34530
// if name then
32896: LD_VAR 0 3
32900: IFFALSE 32916
// SetBName ( base_dep , name ) ;
32902: LD_VAR 0 1
32906: PPUSH
32907: LD_VAR 0 3
32911: PPUSH
32912: CALL_OW 500
// base := GetBase ( base_dep ) ;
32916: LD_ADDR_VAR 0 15
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 274
32930: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32931: LD_ADDR_VAR 0 16
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 255
32945: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32946: LD_ADDR_VAR 0 17
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 248
32960: ST_TO_ADDR
// if sources then
32961: LD_VAR 0 5
32965: IFFALSE 33012
// for i = 1 to 3 do
32967: LD_ADDR_VAR 0 8
32971: PUSH
32972: DOUBLE
32973: LD_INT 1
32975: DEC
32976: ST_TO_ADDR
32977: LD_INT 3
32979: PUSH
32980: FOR_TO
32981: IFFALSE 33010
// AddResourceType ( base , i , sources [ i ] ) ;
32983: LD_VAR 0 15
32987: PPUSH
32988: LD_VAR 0 8
32992: PPUSH
32993: LD_VAR 0 5
32997: PUSH
32998: LD_VAR 0 8
33002: ARRAY
33003: PPUSH
33004: CALL_OW 276
33008: GO 32980
33010: POP
33011: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33012: LD_ADDR_VAR 0 18
33016: PUSH
33017: LD_VAR 0 15
33021: PPUSH
33022: LD_VAR 0 2
33026: PPUSH
33027: LD_INT 1
33029: PPUSH
33030: CALL 32273 0 3
33034: ST_TO_ADDR
// InitHc ;
33035: CALL_OW 19
// InitUc ;
33039: CALL_OW 18
// uc_side := side ;
33043: LD_ADDR_OWVAR 20
33047: PUSH
33048: LD_VAR 0 16
33052: ST_TO_ADDR
// uc_nation := nation ;
33053: LD_ADDR_OWVAR 21
33057: PUSH
33058: LD_VAR 0 17
33062: ST_TO_ADDR
// if buildings then
33063: LD_VAR 0 18
33067: IFFALSE 34389
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33069: LD_ADDR_VAR 0 19
33073: PUSH
33074: LD_VAR 0 18
33078: PPUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 30
33084: PUSH
33085: LD_INT 29
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 30
33094: PUSH
33095: LD_INT 30
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: PPUSH
33107: CALL_OW 72
33111: ST_TO_ADDR
// if tmp then
33112: LD_VAR 0 19
33116: IFFALSE 33164
// for i in tmp do
33118: LD_ADDR_VAR 0 8
33122: PUSH
33123: LD_VAR 0 19
33127: PUSH
33128: FOR_IN
33129: IFFALSE 33162
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33131: LD_VAR 0 8
33135: PPUSH
33136: CALL_OW 250
33140: PPUSH
33141: LD_VAR 0 8
33145: PPUSH
33146: CALL_OW 251
33150: PPUSH
33151: LD_VAR 0 16
33155: PPUSH
33156: CALL_OW 441
33160: GO 33128
33162: POP
33163: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33164: LD_VAR 0 18
33168: PPUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 30
33174: PUSH
33175: LD_INT 32
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 30
33184: PUSH
33185: LD_INT 33
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: LIST
33196: PPUSH
33197: CALL_OW 72
33201: IFFALSE 33289
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33203: LD_ADDR_VAR 0 8
33207: PUSH
33208: LD_VAR 0 18
33212: PPUSH
33213: LD_INT 2
33215: PUSH
33216: LD_INT 30
33218: PUSH
33219: LD_INT 32
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 30
33228: PUSH
33229: LD_INT 33
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: PPUSH
33241: CALL_OW 72
33245: PUSH
33246: FOR_IN
33247: IFFALSE 33287
// begin if not GetBWeapon ( i ) then
33249: LD_VAR 0 8
33253: PPUSH
33254: CALL_OW 269
33258: NOT
33259: IFFALSE 33285
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33261: LD_VAR 0 8
33265: PPUSH
33266: LD_VAR 0 8
33270: PPUSH
33271: LD_VAR 0 2
33275: PPUSH
33276: CALL 34535 0 2
33280: PPUSH
33281: CALL_OW 431
// end ;
33285: GO 33246
33287: POP
33288: POP
// end ; for i = 1 to personel do
33289: LD_ADDR_VAR 0 8
33293: PUSH
33294: DOUBLE
33295: LD_INT 1
33297: DEC
33298: ST_TO_ADDR
33299: LD_VAR 0 6
33303: PUSH
33304: FOR_TO
33305: IFFALSE 34369
// begin if i > 4 then
33307: LD_VAR 0 8
33311: PUSH
33312: LD_INT 4
33314: GREATER
33315: IFFALSE 33319
// break ;
33317: GO 34369
// case i of 1 :
33319: LD_VAR 0 8
33323: PUSH
33324: LD_INT 1
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33412
33332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33333: LD_ADDR_VAR 0 12
33337: PUSH
33338: LD_VAR 0 18
33342: PPUSH
33343: LD_INT 22
33345: PUSH
33346: LD_VAR 0 16
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 58
33357: PUSH
33358: EMPTY
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 30
33366: PUSH
33367: LD_INT 32
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 30
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 30
33386: PUSH
33387: LD_INT 5
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: PPUSH
33405: CALL_OW 72
33409: ST_TO_ADDR
33410: GO 33634
33412: LD_INT 2
33414: DOUBLE
33415: EQUAL
33416: IFTRUE 33420
33418: GO 33482
33420: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33421: LD_ADDR_VAR 0 12
33425: PUSH
33426: LD_VAR 0 18
33430: PPUSH
33431: LD_INT 22
33433: PUSH
33434: LD_VAR 0 16
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 30
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 30
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 72
33479: ST_TO_ADDR
33480: GO 33634
33482: LD_INT 3
33484: DOUBLE
33485: EQUAL
33486: IFTRUE 33490
33488: GO 33552
33490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33491: LD_ADDR_VAR 0 12
33495: PUSH
33496: LD_VAR 0 18
33500: PPUSH
33501: LD_INT 22
33503: PUSH
33504: LD_VAR 0 16
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 30
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 30
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: LIST
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PPUSH
33545: CALL_OW 72
33549: ST_TO_ADDR
33550: GO 33634
33552: LD_INT 4
33554: DOUBLE
33555: EQUAL
33556: IFTRUE 33560
33558: GO 33633
33560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33561: LD_ADDR_VAR 0 12
33565: PUSH
33566: LD_VAR 0 18
33570: PPUSH
33571: LD_INT 22
33573: PUSH
33574: LD_VAR 0 16
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 30
33588: PUSH
33589: LD_INT 6
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 30
33598: PUSH
33599: LD_INT 7
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 30
33608: PUSH
33609: LD_INT 8
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PPUSH
33626: CALL_OW 72
33630: ST_TO_ADDR
33631: GO 33634
33633: POP
// if i = 1 then
33634: LD_VAR 0 8
33638: PUSH
33639: LD_INT 1
33641: EQUAL
33642: IFFALSE 33753
// begin tmp := [ ] ;
33644: LD_ADDR_VAR 0 19
33648: PUSH
33649: EMPTY
33650: ST_TO_ADDR
// for j in f do
33651: LD_ADDR_VAR 0 9
33655: PUSH
33656: LD_VAR 0 12
33660: PUSH
33661: FOR_IN
33662: IFFALSE 33735
// if GetBType ( j ) = b_bunker then
33664: LD_VAR 0 9
33668: PPUSH
33669: CALL_OW 266
33673: PUSH
33674: LD_INT 32
33676: EQUAL
33677: IFFALSE 33704
// tmp := Insert ( tmp , 1 , j ) else
33679: LD_ADDR_VAR 0 19
33683: PUSH
33684: LD_VAR 0 19
33688: PPUSH
33689: LD_INT 1
33691: PPUSH
33692: LD_VAR 0 9
33696: PPUSH
33697: CALL_OW 2
33701: ST_TO_ADDR
33702: GO 33733
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33704: LD_ADDR_VAR 0 19
33708: PUSH
33709: LD_VAR 0 19
33713: PPUSH
33714: LD_VAR 0 19
33718: PUSH
33719: LD_INT 1
33721: PLUS
33722: PPUSH
33723: LD_VAR 0 9
33727: PPUSH
33728: CALL_OW 2
33732: ST_TO_ADDR
33733: GO 33661
33735: POP
33736: POP
// if tmp then
33737: LD_VAR 0 19
33741: IFFALSE 33753
// f := tmp ;
33743: LD_ADDR_VAR 0 12
33747: PUSH
33748: LD_VAR 0 19
33752: ST_TO_ADDR
// end ; x := personel [ i ] ;
33753: LD_ADDR_VAR 0 13
33757: PUSH
33758: LD_VAR 0 6
33762: PUSH
33763: LD_VAR 0 8
33767: ARRAY
33768: ST_TO_ADDR
// if x = - 1 then
33769: LD_VAR 0 13
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: EQUAL
33778: IFFALSE 33987
// begin for j in f do
33780: LD_ADDR_VAR 0 9
33784: PUSH
33785: LD_VAR 0 12
33789: PUSH
33790: FOR_IN
33791: IFFALSE 33983
// repeat InitHc ;
33793: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33797: LD_VAR 0 9
33801: PPUSH
33802: CALL_OW 266
33806: PUSH
33807: LD_INT 5
33809: EQUAL
33810: IFFALSE 33880
// begin if UnitsInside ( j ) < 3 then
33812: LD_VAR 0 9
33816: PPUSH
33817: CALL_OW 313
33821: PUSH
33822: LD_INT 3
33824: LESS
33825: IFFALSE 33861
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33827: LD_INT 0
33829: PPUSH
33830: LD_INT 5
33832: PUSH
33833: LD_INT 8
33835: PUSH
33836: LD_INT 9
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: PUSH
33844: LD_VAR 0 17
33848: ARRAY
33849: PPUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: CALL_OW 380
33859: GO 33878
// PrepareHuman ( false , i , skill ) ;
33861: LD_INT 0
33863: PPUSH
33864: LD_VAR 0 8
33868: PPUSH
33869: LD_VAR 0 4
33873: PPUSH
33874: CALL_OW 380
// end else
33878: GO 33897
// PrepareHuman ( false , i , skill ) ;
33880: LD_INT 0
33882: PPUSH
33883: LD_VAR 0 8
33887: PPUSH
33888: LD_VAR 0 4
33892: PPUSH
33893: CALL_OW 380
// un := CreateHuman ;
33897: LD_ADDR_VAR 0 14
33901: PUSH
33902: CALL_OW 44
33906: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33907: LD_ADDR_VAR 0 7
33911: PUSH
33912: LD_VAR 0 7
33916: PPUSH
33917: LD_INT 1
33919: PPUSH
33920: LD_VAR 0 14
33924: PPUSH
33925: CALL_OW 2
33929: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33930: LD_VAR 0 14
33934: PPUSH
33935: LD_VAR 0 9
33939: PPUSH
33940: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33944: LD_VAR 0 9
33948: PPUSH
33949: CALL_OW 313
33953: PUSH
33954: LD_INT 6
33956: EQUAL
33957: PUSH
33958: LD_VAR 0 9
33962: PPUSH
33963: CALL_OW 266
33967: PUSH
33968: LD_INT 32
33970: PUSH
33971: LD_INT 31
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: IN
33978: OR
33979: IFFALSE 33793
33981: GO 33790
33983: POP
33984: POP
// end else
33985: GO 34367
// for j = 1 to x do
33987: LD_ADDR_VAR 0 9
33991: PUSH
33992: DOUBLE
33993: LD_INT 1
33995: DEC
33996: ST_TO_ADDR
33997: LD_VAR 0 13
34001: PUSH
34002: FOR_TO
34003: IFFALSE 34365
// begin InitHc ;
34005: CALL_OW 19
// if not f then
34009: LD_VAR 0 12
34013: NOT
34014: IFFALSE 34103
// begin PrepareHuman ( false , i , skill ) ;
34016: LD_INT 0
34018: PPUSH
34019: LD_VAR 0 8
34023: PPUSH
34024: LD_VAR 0 4
34028: PPUSH
34029: CALL_OW 380
// un := CreateHuman ;
34033: LD_ADDR_VAR 0 14
34037: PUSH
34038: CALL_OW 44
34042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34043: LD_ADDR_VAR 0 7
34047: PUSH
34048: LD_VAR 0 7
34052: PPUSH
34053: LD_INT 1
34055: PPUSH
34056: LD_VAR 0 14
34060: PPUSH
34061: CALL_OW 2
34065: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34066: LD_VAR 0 14
34070: PPUSH
34071: LD_VAR 0 1
34075: PPUSH
34076: CALL_OW 250
34080: PPUSH
34081: LD_VAR 0 1
34085: PPUSH
34086: CALL_OW 251
34090: PPUSH
34091: LD_INT 10
34093: PPUSH
34094: LD_INT 0
34096: PPUSH
34097: CALL_OW 50
// continue ;
34101: GO 34002
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34103: LD_VAR 0 12
34107: PUSH
34108: LD_INT 1
34110: ARRAY
34111: PPUSH
34112: CALL_OW 313
34116: PUSH
34117: LD_VAR 0 12
34121: PUSH
34122: LD_INT 1
34124: ARRAY
34125: PPUSH
34126: CALL_OW 266
34130: PUSH
34131: LD_INT 32
34133: PUSH
34134: LD_INT 31
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: IN
34141: AND
34142: PUSH
34143: LD_VAR 0 12
34147: PUSH
34148: LD_INT 1
34150: ARRAY
34151: PPUSH
34152: CALL_OW 313
34156: PUSH
34157: LD_INT 6
34159: EQUAL
34160: OR
34161: IFFALSE 34181
// f := Delete ( f , 1 ) ;
34163: LD_ADDR_VAR 0 12
34167: PUSH
34168: LD_VAR 0 12
34172: PPUSH
34173: LD_INT 1
34175: PPUSH
34176: CALL_OW 3
34180: ST_TO_ADDR
// if not f then
34181: LD_VAR 0 12
34185: NOT
34186: IFFALSE 34204
// begin x := x + 2 ;
34188: LD_ADDR_VAR 0 13
34192: PUSH
34193: LD_VAR 0 13
34197: PUSH
34198: LD_INT 2
34200: PLUS
34201: ST_TO_ADDR
// continue ;
34202: GO 34002
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34204: LD_VAR 0 12
34208: PUSH
34209: LD_INT 1
34211: ARRAY
34212: PPUSH
34213: CALL_OW 266
34217: PUSH
34218: LD_INT 5
34220: EQUAL
34221: IFFALSE 34295
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34223: LD_VAR 0 12
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: CALL_OW 313
34236: PUSH
34237: LD_INT 3
34239: LESS
34240: IFFALSE 34276
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34242: LD_INT 0
34244: PPUSH
34245: LD_INT 5
34247: PUSH
34248: LD_INT 8
34250: PUSH
34251: LD_INT 9
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: LD_VAR 0 17
34263: ARRAY
34264: PPUSH
34265: LD_VAR 0 4
34269: PPUSH
34270: CALL_OW 380
34274: GO 34293
// PrepareHuman ( false , i , skill ) ;
34276: LD_INT 0
34278: PPUSH
34279: LD_VAR 0 8
34283: PPUSH
34284: LD_VAR 0 4
34288: PPUSH
34289: CALL_OW 380
// end else
34293: GO 34312
// PrepareHuman ( false , i , skill ) ;
34295: LD_INT 0
34297: PPUSH
34298: LD_VAR 0 8
34302: PPUSH
34303: LD_VAR 0 4
34307: PPUSH
34308: CALL_OW 380
// un := CreateHuman ;
34312: LD_ADDR_VAR 0 14
34316: PUSH
34317: CALL_OW 44
34321: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34322: LD_ADDR_VAR 0 7
34326: PUSH
34327: LD_VAR 0 7
34331: PPUSH
34332: LD_INT 1
34334: PPUSH
34335: LD_VAR 0 14
34339: PPUSH
34340: CALL_OW 2
34344: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34345: LD_VAR 0 14
34349: PPUSH
34350: LD_VAR 0 12
34354: PUSH
34355: LD_INT 1
34357: ARRAY
34358: PPUSH
34359: CALL_OW 52
// end ;
34363: GO 34002
34365: POP
34366: POP
// end ;
34367: GO 33304
34369: POP
34370: POP
// result := result ^ buildings ;
34371: LD_ADDR_VAR 0 7
34375: PUSH
34376: LD_VAR 0 7
34380: PUSH
34381: LD_VAR 0 18
34385: ADD
34386: ST_TO_ADDR
// end else
34387: GO 34530
// begin for i = 1 to personel do
34389: LD_ADDR_VAR 0 8
34393: PUSH
34394: DOUBLE
34395: LD_INT 1
34397: DEC
34398: ST_TO_ADDR
34399: LD_VAR 0 6
34403: PUSH
34404: FOR_TO
34405: IFFALSE 34528
// begin if i > 4 then
34407: LD_VAR 0 8
34411: PUSH
34412: LD_INT 4
34414: GREATER
34415: IFFALSE 34419
// break ;
34417: GO 34528
// x := personel [ i ] ;
34419: LD_ADDR_VAR 0 13
34423: PUSH
34424: LD_VAR 0 6
34428: PUSH
34429: LD_VAR 0 8
34433: ARRAY
34434: ST_TO_ADDR
// if x = - 1 then
34435: LD_VAR 0 13
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: EQUAL
34444: IFFALSE 34448
// continue ;
34446: GO 34404
// PrepareHuman ( false , i , skill ) ;
34448: LD_INT 0
34450: PPUSH
34451: LD_VAR 0 8
34455: PPUSH
34456: LD_VAR 0 4
34460: PPUSH
34461: CALL_OW 380
// un := CreateHuman ;
34465: LD_ADDR_VAR 0 14
34469: PUSH
34470: CALL_OW 44
34474: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34475: LD_VAR 0 14
34479: PPUSH
34480: LD_VAR 0 1
34484: PPUSH
34485: CALL_OW 250
34489: PPUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 251
34499: PPUSH
34500: LD_INT 10
34502: PPUSH
34503: LD_INT 0
34505: PPUSH
34506: CALL_OW 50
// result := result ^ un ;
34510: LD_ADDR_VAR 0 7
34514: PUSH
34515: LD_VAR 0 7
34519: PUSH
34520: LD_VAR 0 14
34524: ADD
34525: ST_TO_ADDR
// end ;
34526: GO 34404
34528: POP
34529: POP
// end ; end ;
34530: LD_VAR 0 7
34534: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34535: LD_INT 0
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
// result := false ;
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_INT 0
34560: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34561: LD_VAR 0 1
34565: NOT
34566: PUSH
34567: LD_VAR 0 1
34571: PPUSH
34572: CALL_OW 266
34576: PUSH
34577: LD_INT 32
34579: PUSH
34580: LD_INT 33
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: IN
34587: NOT
34588: OR
34589: IFFALSE 34593
// exit ;
34591: GO 35702
// nat := GetNation ( tower ) ;
34593: LD_ADDR_VAR 0 12
34597: PUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 248
34607: ST_TO_ADDR
// side := GetSide ( tower ) ;
34608: LD_ADDR_VAR 0 16
34612: PUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 255
34622: ST_TO_ADDR
// x := GetX ( tower ) ;
34623: LD_ADDR_VAR 0 10
34627: PUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 250
34637: ST_TO_ADDR
// y := GetY ( tower ) ;
34638: LD_ADDR_VAR 0 11
34642: PUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: CALL_OW 251
34652: ST_TO_ADDR
// if not x or not y then
34653: LD_VAR 0 10
34657: NOT
34658: PUSH
34659: LD_VAR 0 11
34663: NOT
34664: OR
34665: IFFALSE 34669
// exit ;
34667: GO 35702
// weapon := 0 ;
34669: LD_ADDR_VAR 0 18
34673: PUSH
34674: LD_INT 0
34676: ST_TO_ADDR
// fac_list := [ ] ;
34677: LD_ADDR_VAR 0 17
34681: PUSH
34682: EMPTY
34683: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34684: LD_ADDR_VAR 0 6
34688: PUSH
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL_OW 274
34698: PPUSH
34699: LD_VAR 0 2
34703: PPUSH
34704: LD_INT 0
34706: PPUSH
34707: CALL 32273 0 3
34711: PPUSH
34712: LD_INT 30
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PPUSH
34722: CALL_OW 72
34726: ST_TO_ADDR
// if not factories then
34727: LD_VAR 0 6
34731: NOT
34732: IFFALSE 34736
// exit ;
34734: GO 35702
// for i in factories do
34736: LD_ADDR_VAR 0 8
34740: PUSH
34741: LD_VAR 0 6
34745: PUSH
34746: FOR_IN
34747: IFFALSE 34772
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34749: LD_ADDR_VAR 0 17
34753: PUSH
34754: LD_VAR 0 17
34758: PUSH
34759: LD_VAR 0 8
34763: PPUSH
34764: CALL_OW 478
34768: UNION
34769: ST_TO_ADDR
34770: GO 34746
34772: POP
34773: POP
// if not fac_list then
34774: LD_VAR 0 17
34778: NOT
34779: IFFALSE 34783
// exit ;
34781: GO 35702
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34783: LD_ADDR_VAR 0 5
34787: PUSH
34788: LD_INT 4
34790: PUSH
34791: LD_INT 5
34793: PUSH
34794: LD_INT 9
34796: PUSH
34797: LD_INT 10
34799: PUSH
34800: LD_INT 6
34802: PUSH
34803: LD_INT 7
34805: PUSH
34806: LD_INT 11
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 27
34820: PUSH
34821: LD_INT 28
34823: PUSH
34824: LD_INT 26
34826: PUSH
34827: LD_INT 30
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 43
34838: PUSH
34839: LD_INT 44
34841: PUSH
34842: LD_INT 46
34844: PUSH
34845: LD_INT 45
34847: PUSH
34848: LD_INT 47
34850: PUSH
34851: LD_INT 49
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: LIST
34866: PUSH
34867: LD_VAR 0 12
34871: ARRAY
34872: ST_TO_ADDR
// list := list isect fac_list ;
34873: LD_ADDR_VAR 0 5
34877: PUSH
34878: LD_VAR 0 5
34882: PUSH
34883: LD_VAR 0 17
34887: ISECT
34888: ST_TO_ADDR
// if not list then
34889: LD_VAR 0 5
34893: NOT
34894: IFFALSE 34898
// exit ;
34896: GO 35702
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34898: LD_VAR 0 12
34902: PUSH
34903: LD_INT 3
34905: EQUAL
34906: PUSH
34907: LD_INT 49
34909: PUSH
34910: LD_VAR 0 5
34914: IN
34915: AND
34916: PUSH
34917: LD_INT 31
34919: PPUSH
34920: LD_VAR 0 16
34924: PPUSH
34925: CALL_OW 321
34929: PUSH
34930: LD_INT 2
34932: EQUAL
34933: AND
34934: IFFALSE 34994
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34936: LD_INT 22
34938: PUSH
34939: LD_VAR 0 16
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 35
34950: PUSH
34951: LD_INT 49
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 91
34960: PUSH
34961: LD_VAR 0 1
34965: PUSH
34966: LD_INT 10
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: PPUSH
34979: CALL_OW 69
34983: NOT
34984: IFFALSE 34994
// weapon := ru_time_lapser ;
34986: LD_ADDR_VAR 0 18
34990: PUSH
34991: LD_INT 49
34993: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34994: LD_VAR 0 12
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: IN
35009: PUSH
35010: LD_INT 11
35012: PUSH
35013: LD_VAR 0 5
35017: IN
35018: PUSH
35019: LD_INT 30
35021: PUSH
35022: LD_VAR 0 5
35026: IN
35027: OR
35028: AND
35029: PUSH
35030: LD_INT 6
35032: PPUSH
35033: LD_VAR 0 16
35037: PPUSH
35038: CALL_OW 321
35042: PUSH
35043: LD_INT 2
35045: EQUAL
35046: AND
35047: IFFALSE 35212
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35049: LD_INT 22
35051: PUSH
35052: LD_VAR 0 16
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 35
35066: PUSH
35067: LD_INT 11
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 35
35076: PUSH
35077: LD_INT 30
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 91
35091: PUSH
35092: LD_VAR 0 1
35096: PUSH
35097: LD_INT 18
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: PPUSH
35110: CALL_OW 69
35114: NOT
35115: PUSH
35116: LD_INT 22
35118: PUSH
35119: LD_VAR 0 16
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 30
35133: PUSH
35134: LD_INT 32
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 30
35143: PUSH
35144: LD_INT 33
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 91
35158: PUSH
35159: LD_VAR 0 1
35163: PUSH
35164: LD_INT 12
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: PUSH
35177: EMPTY
35178: LIST
35179: PPUSH
35180: CALL_OW 69
35184: PUSH
35185: LD_INT 2
35187: GREATER
35188: AND
35189: IFFALSE 35212
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35191: LD_ADDR_VAR 0 18
35195: PUSH
35196: LD_INT 11
35198: PUSH
35199: LD_INT 30
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_VAR 0 12
35210: ARRAY
35211: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35212: LD_VAR 0 18
35216: NOT
35217: PUSH
35218: LD_INT 40
35220: PPUSH
35221: LD_VAR 0 16
35225: PPUSH
35226: CALL_OW 321
35230: PUSH
35231: LD_INT 2
35233: EQUAL
35234: AND
35235: PUSH
35236: LD_INT 7
35238: PUSH
35239: LD_VAR 0 5
35243: IN
35244: PUSH
35245: LD_INT 28
35247: PUSH
35248: LD_VAR 0 5
35252: IN
35253: OR
35254: PUSH
35255: LD_INT 45
35257: PUSH
35258: LD_VAR 0 5
35262: IN
35263: OR
35264: AND
35265: IFFALSE 35519
// begin hex := GetHexInfo ( x , y ) ;
35267: LD_ADDR_VAR 0 4
35271: PUSH
35272: LD_VAR 0 10
35276: PPUSH
35277: LD_VAR 0 11
35281: PPUSH
35282: CALL_OW 546
35286: ST_TO_ADDR
// if hex [ 1 ] then
35287: LD_VAR 0 4
35291: PUSH
35292: LD_INT 1
35294: ARRAY
35295: IFFALSE 35299
// exit ;
35297: GO 35702
// height := hex [ 2 ] ;
35299: LD_ADDR_VAR 0 15
35303: PUSH
35304: LD_VAR 0 4
35308: PUSH
35309: LD_INT 2
35311: ARRAY
35312: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35313: LD_ADDR_VAR 0 14
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 3
35326: PUSH
35327: LD_INT 5
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: ST_TO_ADDR
// for i in tmp do
35336: LD_ADDR_VAR 0 8
35340: PUSH
35341: LD_VAR 0 14
35345: PUSH
35346: FOR_IN
35347: IFFALSE 35517
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35349: LD_ADDR_VAR 0 9
35353: PUSH
35354: LD_VAR 0 10
35358: PPUSH
35359: LD_VAR 0 8
35363: PPUSH
35364: LD_INT 5
35366: PPUSH
35367: CALL_OW 272
35371: PUSH
35372: LD_VAR 0 11
35376: PPUSH
35377: LD_VAR 0 8
35381: PPUSH
35382: LD_INT 5
35384: PPUSH
35385: CALL_OW 273
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35394: LD_VAR 0 9
35398: PUSH
35399: LD_INT 1
35401: ARRAY
35402: PPUSH
35403: LD_VAR 0 9
35407: PUSH
35408: LD_INT 2
35410: ARRAY
35411: PPUSH
35412: CALL_OW 488
35416: IFFALSE 35515
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35418: LD_ADDR_VAR 0 4
35422: PUSH
35423: LD_VAR 0 9
35427: PUSH
35428: LD_INT 1
35430: ARRAY
35431: PPUSH
35432: LD_VAR 0 9
35436: PUSH
35437: LD_INT 2
35439: ARRAY
35440: PPUSH
35441: CALL_OW 546
35445: ST_TO_ADDR
// if hex [ 1 ] then
35446: LD_VAR 0 4
35450: PUSH
35451: LD_INT 1
35453: ARRAY
35454: IFFALSE 35458
// continue ;
35456: GO 35346
// h := hex [ 2 ] ;
35458: LD_ADDR_VAR 0 13
35462: PUSH
35463: LD_VAR 0 4
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: ST_TO_ADDR
// if h + 7 < height then
35472: LD_VAR 0 13
35476: PUSH
35477: LD_INT 7
35479: PLUS
35480: PUSH
35481: LD_VAR 0 15
35485: LESS
35486: IFFALSE 35515
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35488: LD_ADDR_VAR 0 18
35492: PUSH
35493: LD_INT 7
35495: PUSH
35496: LD_INT 28
35498: PUSH
35499: LD_INT 45
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: PUSH
35507: LD_VAR 0 12
35511: ARRAY
35512: ST_TO_ADDR
// break ;
35513: GO 35517
// end ; end ; end ;
35515: GO 35346
35517: POP
35518: POP
// end ; if not weapon then
35519: LD_VAR 0 18
35523: NOT
35524: IFFALSE 35584
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35526: LD_ADDR_VAR 0 5
35530: PUSH
35531: LD_VAR 0 5
35535: PUSH
35536: LD_INT 11
35538: PUSH
35539: LD_INT 30
35541: PUSH
35542: LD_INT 49
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: DIFF
35550: ST_TO_ADDR
// if not list then
35551: LD_VAR 0 5
35555: NOT
35556: IFFALSE 35560
// exit ;
35558: GO 35702
// weapon := list [ rand ( 1 , list ) ] ;
35560: LD_ADDR_VAR 0 18
35564: PUSH
35565: LD_VAR 0 5
35569: PUSH
35570: LD_INT 1
35572: PPUSH
35573: LD_VAR 0 5
35577: PPUSH
35578: CALL_OW 12
35582: ARRAY
35583: ST_TO_ADDR
// end ; if weapon then
35584: LD_VAR 0 18
35588: IFFALSE 35702
// begin tmp := CostOfWeapon ( weapon ) ;
35590: LD_ADDR_VAR 0 14
35594: PUSH
35595: LD_VAR 0 18
35599: PPUSH
35600: CALL_OW 451
35604: ST_TO_ADDR
// j := GetBase ( tower ) ;
35605: LD_ADDR_VAR 0 9
35609: PUSH
35610: LD_VAR 0 1
35614: PPUSH
35615: CALL_OW 274
35619: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35620: LD_VAR 0 9
35624: PPUSH
35625: LD_INT 1
35627: PPUSH
35628: CALL_OW 275
35632: PUSH
35633: LD_VAR 0 14
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: GREATEREQUAL
35642: PUSH
35643: LD_VAR 0 9
35647: PPUSH
35648: LD_INT 2
35650: PPUSH
35651: CALL_OW 275
35655: PUSH
35656: LD_VAR 0 14
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: GREATEREQUAL
35665: AND
35666: PUSH
35667: LD_VAR 0 9
35671: PPUSH
35672: LD_INT 3
35674: PPUSH
35675: CALL_OW 275
35679: PUSH
35680: LD_VAR 0 14
35684: PUSH
35685: LD_INT 3
35687: ARRAY
35688: GREATEREQUAL
35689: AND
35690: IFFALSE 35702
// result := weapon ;
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: LD_VAR 0 18
35701: ST_TO_ADDR
// end ; end ;
35702: LD_VAR 0 3
35706: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35707: LD_INT 0
35709: PPUSH
35710: PPUSH
// result := true ;
35711: LD_ADDR_VAR 0 3
35715: PUSH
35716: LD_INT 1
35718: ST_TO_ADDR
// if array1 = array2 then
35719: LD_VAR 0 1
35723: PUSH
35724: LD_VAR 0 2
35728: EQUAL
35729: IFFALSE 35789
// begin for i = 1 to array1 do
35731: LD_ADDR_VAR 0 4
35735: PUSH
35736: DOUBLE
35737: LD_INT 1
35739: DEC
35740: ST_TO_ADDR
35741: LD_VAR 0 1
35745: PUSH
35746: FOR_TO
35747: IFFALSE 35785
// if array1 [ i ] <> array2 [ i ] then
35749: LD_VAR 0 1
35753: PUSH
35754: LD_VAR 0 4
35758: ARRAY
35759: PUSH
35760: LD_VAR 0 2
35764: PUSH
35765: LD_VAR 0 4
35769: ARRAY
35770: NONEQUAL
35771: IFFALSE 35783
// begin result := false ;
35773: LD_ADDR_VAR 0 3
35777: PUSH
35778: LD_INT 0
35780: ST_TO_ADDR
// break ;
35781: GO 35785
// end ;
35783: GO 35746
35785: POP
35786: POP
// end else
35787: GO 35797
// result := false ;
35789: LD_ADDR_VAR 0 3
35793: PUSH
35794: LD_INT 0
35796: ST_TO_ADDR
// end ;
35797: LD_VAR 0 3
35801: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35802: LD_INT 0
35804: PPUSH
35805: PPUSH
// if not array1 or not array2 then
35806: LD_VAR 0 1
35810: NOT
35811: PUSH
35812: LD_VAR 0 2
35816: NOT
35817: OR
35818: IFFALSE 35822
// exit ;
35820: GO 35886
// result := true ;
35822: LD_ADDR_VAR 0 3
35826: PUSH
35827: LD_INT 1
35829: ST_TO_ADDR
// for i = 1 to array1 do
35830: LD_ADDR_VAR 0 4
35834: PUSH
35835: DOUBLE
35836: LD_INT 1
35838: DEC
35839: ST_TO_ADDR
35840: LD_VAR 0 1
35844: PUSH
35845: FOR_TO
35846: IFFALSE 35884
// if array1 [ i ] <> array2 [ i ] then
35848: LD_VAR 0 1
35852: PUSH
35853: LD_VAR 0 4
35857: ARRAY
35858: PUSH
35859: LD_VAR 0 2
35863: PUSH
35864: LD_VAR 0 4
35868: ARRAY
35869: NONEQUAL
35870: IFFALSE 35882
// begin result := false ;
35872: LD_ADDR_VAR 0 3
35876: PUSH
35877: LD_INT 0
35879: ST_TO_ADDR
// break ;
35880: GO 35884
// end ;
35882: GO 35845
35884: POP
35885: POP
// end ;
35886: LD_VAR 0 3
35890: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35891: LD_INT 0
35893: PPUSH
35894: PPUSH
35895: PPUSH
// pom := GetBase ( fac ) ;
35896: LD_ADDR_VAR 0 5
35900: PUSH
35901: LD_VAR 0 1
35905: PPUSH
35906: CALL_OW 274
35910: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35911: LD_ADDR_VAR 0 4
35915: PUSH
35916: LD_VAR 0 2
35920: PUSH
35921: LD_INT 1
35923: ARRAY
35924: PPUSH
35925: LD_VAR 0 2
35929: PUSH
35930: LD_INT 2
35932: ARRAY
35933: PPUSH
35934: LD_VAR 0 2
35938: PUSH
35939: LD_INT 3
35941: ARRAY
35942: PPUSH
35943: LD_VAR 0 2
35947: PUSH
35948: LD_INT 4
35950: ARRAY
35951: PPUSH
35952: CALL_OW 449
35956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35957: LD_ADDR_VAR 0 3
35961: PUSH
35962: LD_VAR 0 5
35966: PPUSH
35967: LD_INT 1
35969: PPUSH
35970: CALL_OW 275
35974: PUSH
35975: LD_VAR 0 4
35979: PUSH
35980: LD_INT 1
35982: ARRAY
35983: GREATEREQUAL
35984: PUSH
35985: LD_VAR 0 5
35989: PPUSH
35990: LD_INT 2
35992: PPUSH
35993: CALL_OW 275
35997: PUSH
35998: LD_VAR 0 4
36002: PUSH
36003: LD_INT 2
36005: ARRAY
36006: GREATEREQUAL
36007: AND
36008: PUSH
36009: LD_VAR 0 5
36013: PPUSH
36014: LD_INT 3
36016: PPUSH
36017: CALL_OW 275
36021: PUSH
36022: LD_VAR 0 4
36026: PUSH
36027: LD_INT 3
36029: ARRAY
36030: GREATEREQUAL
36031: AND
36032: ST_TO_ADDR
// end ;
36033: LD_VAR 0 3
36037: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36038: LD_INT 0
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
// pom := GetBase ( building ) ;
36044: LD_ADDR_VAR 0 3
36048: PUSH
36049: LD_VAR 0 1
36053: PPUSH
36054: CALL_OW 274
36058: ST_TO_ADDR
// if not pom then
36059: LD_VAR 0 3
36063: NOT
36064: IFFALSE 36068
// exit ;
36066: GO 36238
// btype := GetBType ( building ) ;
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 266
36082: ST_TO_ADDR
// if btype = b_armoury then
36083: LD_VAR 0 5
36087: PUSH
36088: LD_INT 4
36090: EQUAL
36091: IFFALSE 36101
// btype := b_barracks ;
36093: LD_ADDR_VAR 0 5
36097: PUSH
36098: LD_INT 5
36100: ST_TO_ADDR
// if btype = b_depot then
36101: LD_VAR 0 5
36105: PUSH
36106: LD_INT 0
36108: EQUAL
36109: IFFALSE 36119
// btype := b_warehouse ;
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_INT 1
36118: ST_TO_ADDR
// if btype = b_workshop then
36119: LD_VAR 0 5
36123: PUSH
36124: LD_INT 2
36126: EQUAL
36127: IFFALSE 36137
// btype := b_factory ;
36129: LD_ADDR_VAR 0 5
36133: PUSH
36134: LD_INT 3
36136: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36137: LD_ADDR_VAR 0 4
36141: PUSH
36142: LD_VAR 0 5
36146: PPUSH
36147: LD_VAR 0 1
36151: PPUSH
36152: CALL_OW 248
36156: PPUSH
36157: CALL_OW 450
36161: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36162: LD_ADDR_VAR 0 2
36166: PUSH
36167: LD_VAR 0 3
36171: PPUSH
36172: LD_INT 1
36174: PPUSH
36175: CALL_OW 275
36179: PUSH
36180: LD_VAR 0 4
36184: PUSH
36185: LD_INT 1
36187: ARRAY
36188: GREATEREQUAL
36189: PUSH
36190: LD_VAR 0 3
36194: PPUSH
36195: LD_INT 2
36197: PPUSH
36198: CALL_OW 275
36202: PUSH
36203: LD_VAR 0 4
36207: PUSH
36208: LD_INT 2
36210: ARRAY
36211: GREATEREQUAL
36212: AND
36213: PUSH
36214: LD_VAR 0 3
36218: PPUSH
36219: LD_INT 3
36221: PPUSH
36222: CALL_OW 275
36226: PUSH
36227: LD_VAR 0 4
36231: PUSH
36232: LD_INT 3
36234: ARRAY
36235: GREATEREQUAL
36236: AND
36237: ST_TO_ADDR
// end ;
36238: LD_VAR 0 2
36242: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36243: LD_INT 0
36245: PPUSH
36246: PPUSH
36247: PPUSH
// pom := GetBase ( building ) ;
36248: LD_ADDR_VAR 0 4
36252: PUSH
36253: LD_VAR 0 1
36257: PPUSH
36258: CALL_OW 274
36262: ST_TO_ADDR
// if not pom then
36263: LD_VAR 0 4
36267: NOT
36268: IFFALSE 36272
// exit ;
36270: GO 36373
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36272: LD_ADDR_VAR 0 5
36276: PUSH
36277: LD_VAR 0 2
36281: PPUSH
36282: LD_VAR 0 1
36286: PPUSH
36287: CALL_OW 248
36291: PPUSH
36292: CALL_OW 450
36296: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_VAR 0 4
36306: PPUSH
36307: LD_INT 1
36309: PPUSH
36310: CALL_OW 275
36314: PUSH
36315: LD_VAR 0 5
36319: PUSH
36320: LD_INT 1
36322: ARRAY
36323: GREATEREQUAL
36324: PUSH
36325: LD_VAR 0 4
36329: PPUSH
36330: LD_INT 2
36332: PPUSH
36333: CALL_OW 275
36337: PUSH
36338: LD_VAR 0 5
36342: PUSH
36343: LD_INT 2
36345: ARRAY
36346: GREATEREQUAL
36347: AND
36348: PUSH
36349: LD_VAR 0 4
36353: PPUSH
36354: LD_INT 3
36356: PPUSH
36357: CALL_OW 275
36361: PUSH
36362: LD_VAR 0 5
36366: PUSH
36367: LD_INT 3
36369: ARRAY
36370: GREATEREQUAL
36371: AND
36372: ST_TO_ADDR
// end ;
36373: LD_VAR 0 3
36377: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36378: LD_INT 0
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
// result := false ;
36391: LD_ADDR_VAR 0 8
36395: PUSH
36396: LD_INT 0
36398: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36399: LD_VAR 0 5
36403: NOT
36404: PUSH
36405: LD_VAR 0 1
36409: NOT
36410: OR
36411: PUSH
36412: LD_VAR 0 2
36416: NOT
36417: OR
36418: PUSH
36419: LD_VAR 0 3
36423: NOT
36424: OR
36425: IFFALSE 36429
// exit ;
36427: GO 37243
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36429: LD_ADDR_VAR 0 14
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: LD_VAR 0 2
36443: PPUSH
36444: LD_VAR 0 3
36448: PPUSH
36449: LD_VAR 0 4
36453: PPUSH
36454: LD_VAR 0 5
36458: PUSH
36459: LD_INT 1
36461: ARRAY
36462: PPUSH
36463: CALL_OW 248
36467: PPUSH
36468: LD_INT 0
36470: PPUSH
36471: CALL 38496 0 6
36475: ST_TO_ADDR
// if not hexes then
36476: LD_VAR 0 14
36480: NOT
36481: IFFALSE 36485
// exit ;
36483: GO 37243
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36485: LD_ADDR_VAR 0 17
36489: PUSH
36490: LD_VAR 0 5
36494: PPUSH
36495: LD_INT 22
36497: PUSH
36498: LD_VAR 0 13
36502: PPUSH
36503: CALL_OW 255
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 30
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 30
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PPUSH
36544: CALL_OW 72
36548: ST_TO_ADDR
// for i = 1 to hexes do
36549: LD_ADDR_VAR 0 9
36553: PUSH
36554: DOUBLE
36555: LD_INT 1
36557: DEC
36558: ST_TO_ADDR
36559: LD_VAR 0 14
36563: PUSH
36564: FOR_TO
36565: IFFALSE 37241
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36567: LD_ADDR_VAR 0 13
36571: PUSH
36572: LD_VAR 0 14
36576: PUSH
36577: LD_VAR 0 9
36581: ARRAY
36582: PUSH
36583: LD_INT 1
36585: ARRAY
36586: PPUSH
36587: LD_VAR 0 14
36591: PUSH
36592: LD_VAR 0 9
36596: ARRAY
36597: PUSH
36598: LD_INT 2
36600: ARRAY
36601: PPUSH
36602: CALL_OW 428
36606: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36607: LD_VAR 0 14
36611: PUSH
36612: LD_VAR 0 9
36616: ARRAY
36617: PUSH
36618: LD_INT 1
36620: ARRAY
36621: PPUSH
36622: LD_VAR 0 14
36626: PUSH
36627: LD_VAR 0 9
36631: ARRAY
36632: PUSH
36633: LD_INT 2
36635: ARRAY
36636: PPUSH
36637: CALL_OW 351
36641: PUSH
36642: LD_VAR 0 14
36646: PUSH
36647: LD_VAR 0 9
36651: ARRAY
36652: PUSH
36653: LD_INT 1
36655: ARRAY
36656: PPUSH
36657: LD_VAR 0 14
36661: PUSH
36662: LD_VAR 0 9
36666: ARRAY
36667: PUSH
36668: LD_INT 2
36670: ARRAY
36671: PPUSH
36672: CALL_OW 488
36676: NOT
36677: OR
36678: PUSH
36679: LD_VAR 0 13
36683: PPUSH
36684: CALL_OW 247
36688: PUSH
36689: LD_INT 3
36691: EQUAL
36692: OR
36693: IFFALSE 36699
// exit ;
36695: POP
36696: POP
36697: GO 37243
// if not tmp then
36699: LD_VAR 0 13
36703: NOT
36704: IFFALSE 36708
// continue ;
36706: GO 36564
// result := true ;
36708: LD_ADDR_VAR 0 8
36712: PUSH
36713: LD_INT 1
36715: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36716: LD_VAR 0 6
36720: PUSH
36721: LD_VAR 0 13
36725: PPUSH
36726: CALL_OW 247
36730: PUSH
36731: LD_INT 2
36733: EQUAL
36734: AND
36735: PUSH
36736: LD_VAR 0 13
36740: PPUSH
36741: CALL_OW 263
36745: PUSH
36746: LD_INT 1
36748: EQUAL
36749: AND
36750: IFFALSE 36914
// begin if IsDrivenBy ( tmp ) then
36752: LD_VAR 0 13
36756: PPUSH
36757: CALL_OW 311
36761: IFFALSE 36765
// continue ;
36763: GO 36564
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36765: LD_VAR 0 6
36769: PPUSH
36770: LD_INT 3
36772: PUSH
36773: LD_INT 60
36775: PUSH
36776: EMPTY
36777: LIST
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 3
36785: PUSH
36786: LD_INT 55
36788: PUSH
36789: EMPTY
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PPUSH
36800: CALL_OW 72
36804: IFFALSE 36912
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36806: LD_ADDR_VAR 0 18
36810: PUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: LD_INT 3
36818: PUSH
36819: LD_INT 60
36821: PUSH
36822: EMPTY
36823: LIST
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 3
36831: PUSH
36832: LD_INT 55
36834: PUSH
36835: EMPTY
36836: LIST
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PPUSH
36846: CALL_OW 72
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: ST_TO_ADDR
// if IsInUnit ( driver ) then
36855: LD_VAR 0 18
36859: PPUSH
36860: CALL_OW 310
36864: IFFALSE 36875
// ComExit ( driver ) ;
36866: LD_VAR 0 18
36870: PPUSH
36871: CALL 62275 0 1
// AddComEnterUnit ( driver , tmp ) ;
36875: LD_VAR 0 18
36879: PPUSH
36880: LD_VAR 0 13
36884: PPUSH
36885: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36889: LD_VAR 0 18
36893: PPUSH
36894: LD_VAR 0 7
36898: PPUSH
36899: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36903: LD_VAR 0 18
36907: PPUSH
36908: CALL_OW 181
// end ; continue ;
36912: GO 36564
// end ; if not cleaners or not tmp in cleaners then
36914: LD_VAR 0 6
36918: NOT
36919: PUSH
36920: LD_VAR 0 13
36924: PUSH
36925: LD_VAR 0 6
36929: IN
36930: NOT
36931: OR
36932: IFFALSE 37239
// begin if dep then
36934: LD_VAR 0 17
36938: IFFALSE 37074
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36940: LD_ADDR_VAR 0 16
36944: PUSH
36945: LD_VAR 0 17
36949: PUSH
36950: LD_INT 1
36952: ARRAY
36953: PPUSH
36954: CALL_OW 250
36958: PPUSH
36959: LD_VAR 0 17
36963: PUSH
36964: LD_INT 1
36966: ARRAY
36967: PPUSH
36968: CALL_OW 254
36972: PPUSH
36973: LD_INT 5
36975: PPUSH
36976: CALL_OW 272
36980: PUSH
36981: LD_VAR 0 17
36985: PUSH
36986: LD_INT 1
36988: ARRAY
36989: PPUSH
36990: CALL_OW 251
36994: PPUSH
36995: LD_VAR 0 17
36999: PUSH
37000: LD_INT 1
37002: ARRAY
37003: PPUSH
37004: CALL_OW 254
37008: PPUSH
37009: LD_INT 5
37011: PPUSH
37012: CALL_OW 273
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37021: LD_VAR 0 16
37025: PUSH
37026: LD_INT 1
37028: ARRAY
37029: PPUSH
37030: LD_VAR 0 16
37034: PUSH
37035: LD_INT 2
37037: ARRAY
37038: PPUSH
37039: CALL_OW 488
37043: IFFALSE 37074
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37045: LD_VAR 0 13
37049: PPUSH
37050: LD_VAR 0 16
37054: PUSH
37055: LD_INT 1
37057: ARRAY
37058: PPUSH
37059: LD_VAR 0 16
37063: PUSH
37064: LD_INT 2
37066: ARRAY
37067: PPUSH
37068: CALL_OW 111
// continue ;
37072: GO 36564
// end ; end ; r := GetDir ( tmp ) ;
37074: LD_ADDR_VAR 0 15
37078: PUSH
37079: LD_VAR 0 13
37083: PPUSH
37084: CALL_OW 254
37088: ST_TO_ADDR
// if r = 5 then
37089: LD_VAR 0 15
37093: PUSH
37094: LD_INT 5
37096: EQUAL
37097: IFFALSE 37107
// r := 0 ;
37099: LD_ADDR_VAR 0 15
37103: PUSH
37104: LD_INT 0
37106: ST_TO_ADDR
// for j = r to 5 do
37107: LD_ADDR_VAR 0 10
37111: PUSH
37112: DOUBLE
37113: LD_VAR 0 15
37117: DEC
37118: ST_TO_ADDR
37119: LD_INT 5
37121: PUSH
37122: FOR_TO
37123: IFFALSE 37237
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37125: LD_ADDR_VAR 0 11
37129: PUSH
37130: LD_VAR 0 13
37134: PPUSH
37135: CALL_OW 250
37139: PPUSH
37140: LD_VAR 0 10
37144: PPUSH
37145: LD_INT 2
37147: PPUSH
37148: CALL_OW 272
37152: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37153: LD_ADDR_VAR 0 12
37157: PUSH
37158: LD_VAR 0 13
37162: PPUSH
37163: CALL_OW 251
37167: PPUSH
37168: LD_VAR 0 10
37172: PPUSH
37173: LD_INT 2
37175: PPUSH
37176: CALL_OW 273
37180: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37181: LD_VAR 0 11
37185: PPUSH
37186: LD_VAR 0 12
37190: PPUSH
37191: CALL_OW 488
37195: PUSH
37196: LD_VAR 0 11
37200: PPUSH
37201: LD_VAR 0 12
37205: PPUSH
37206: CALL_OW 428
37210: NOT
37211: AND
37212: IFFALSE 37235
// begin ComMoveXY ( tmp , _x , _y ) ;
37214: LD_VAR 0 13
37218: PPUSH
37219: LD_VAR 0 11
37223: PPUSH
37224: LD_VAR 0 12
37228: PPUSH
37229: CALL_OW 111
// break ;
37233: GO 37237
// end ; end ;
37235: GO 37122
37237: POP
37238: POP
// end ; end ;
37239: GO 36564
37241: POP
37242: POP
// end ;
37243: LD_VAR 0 8
37247: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37248: LD_INT 0
37250: PPUSH
// result := true ;
37251: LD_ADDR_VAR 0 3
37255: PUSH
37256: LD_INT 1
37258: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37259: LD_VAR 0 2
37263: PUSH
37264: LD_INT 24
37266: DOUBLE
37267: EQUAL
37268: IFTRUE 37278
37270: LD_INT 33
37272: DOUBLE
37273: EQUAL
37274: IFTRUE 37278
37276: GO 37303
37278: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37279: LD_ADDR_VAR 0 3
37283: PUSH
37284: LD_INT 32
37286: PPUSH
37287: LD_VAR 0 1
37291: PPUSH
37292: CALL_OW 321
37296: PUSH
37297: LD_INT 2
37299: EQUAL
37300: ST_TO_ADDR
37301: GO 37619
37303: LD_INT 20
37305: DOUBLE
37306: EQUAL
37307: IFTRUE 37311
37309: GO 37336
37311: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 6
37319: PPUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 321
37329: PUSH
37330: LD_INT 2
37332: EQUAL
37333: ST_TO_ADDR
37334: GO 37619
37336: LD_INT 22
37338: DOUBLE
37339: EQUAL
37340: IFTRUE 37350
37342: LD_INT 36
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37375
37350: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_INT 15
37358: PPUSH
37359: LD_VAR 0 1
37363: PPUSH
37364: CALL_OW 321
37368: PUSH
37369: LD_INT 2
37371: EQUAL
37372: ST_TO_ADDR
37373: GO 37619
37375: LD_INT 30
37377: DOUBLE
37378: EQUAL
37379: IFTRUE 37383
37381: GO 37408
37383: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37384: LD_ADDR_VAR 0 3
37388: PUSH
37389: LD_INT 20
37391: PPUSH
37392: LD_VAR 0 1
37396: PPUSH
37397: CALL_OW 321
37401: PUSH
37402: LD_INT 2
37404: EQUAL
37405: ST_TO_ADDR
37406: GO 37619
37408: LD_INT 28
37410: DOUBLE
37411: EQUAL
37412: IFTRUE 37422
37414: LD_INT 21
37416: DOUBLE
37417: EQUAL
37418: IFTRUE 37422
37420: GO 37447
37422: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: LD_INT 21
37430: PPUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 321
37440: PUSH
37441: LD_INT 2
37443: EQUAL
37444: ST_TO_ADDR
37445: GO 37619
37447: LD_INT 16
37449: DOUBLE
37450: EQUAL
37451: IFTRUE 37455
37453: GO 37480
37455: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37456: LD_ADDR_VAR 0 3
37460: PUSH
37461: LD_INT 84
37463: PPUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 321
37473: PUSH
37474: LD_INT 2
37476: EQUAL
37477: ST_TO_ADDR
37478: GO 37619
37480: LD_INT 19
37482: DOUBLE
37483: EQUAL
37484: IFTRUE 37494
37486: LD_INT 23
37488: DOUBLE
37489: EQUAL
37490: IFTRUE 37494
37492: GO 37519
37494: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37495: LD_ADDR_VAR 0 3
37499: PUSH
37500: LD_INT 83
37502: PPUSH
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 321
37512: PUSH
37513: LD_INT 2
37515: EQUAL
37516: ST_TO_ADDR
37517: GO 37619
37519: LD_INT 17
37521: DOUBLE
37522: EQUAL
37523: IFTRUE 37527
37525: GO 37552
37527: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_INT 39
37535: PPUSH
37536: LD_VAR 0 1
37540: PPUSH
37541: CALL_OW 321
37545: PUSH
37546: LD_INT 2
37548: EQUAL
37549: ST_TO_ADDR
37550: GO 37619
37552: LD_INT 18
37554: DOUBLE
37555: EQUAL
37556: IFTRUE 37560
37558: GO 37585
37560: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37561: LD_ADDR_VAR 0 3
37565: PUSH
37566: LD_INT 40
37568: PPUSH
37569: LD_VAR 0 1
37573: PPUSH
37574: CALL_OW 321
37578: PUSH
37579: LD_INT 2
37581: EQUAL
37582: ST_TO_ADDR
37583: GO 37619
37585: LD_INT 27
37587: DOUBLE
37588: EQUAL
37589: IFTRUE 37593
37591: GO 37618
37593: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37594: LD_ADDR_VAR 0 3
37598: PUSH
37599: LD_INT 35
37601: PPUSH
37602: LD_VAR 0 1
37606: PPUSH
37607: CALL_OW 321
37611: PUSH
37612: LD_INT 2
37614: EQUAL
37615: ST_TO_ADDR
37616: GO 37619
37618: POP
// end ;
37619: LD_VAR 0 3
37623: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37624: LD_INT 0
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
// result := false ;
37637: LD_ADDR_VAR 0 6
37641: PUSH
37642: LD_INT 0
37644: ST_TO_ADDR
// if btype = b_depot then
37645: LD_VAR 0 2
37649: PUSH
37650: LD_INT 0
37652: EQUAL
37653: IFFALSE 37665
// begin result := true ;
37655: LD_ADDR_VAR 0 6
37659: PUSH
37660: LD_INT 1
37662: ST_TO_ADDR
// exit ;
37663: GO 38491
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37665: LD_VAR 0 1
37669: NOT
37670: PUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 266
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: IN
37691: NOT
37692: OR
37693: PUSH
37694: LD_VAR 0 2
37698: NOT
37699: OR
37700: PUSH
37701: LD_VAR 0 5
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 3
37717: PUSH
37718: LD_INT 4
37720: PUSH
37721: LD_INT 5
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: IN
37732: NOT
37733: OR
37734: PUSH
37735: LD_VAR 0 3
37739: PPUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: CALL_OW 488
37749: NOT
37750: OR
37751: IFFALSE 37755
// exit ;
37753: GO 38491
// side := GetSide ( depot ) ;
37755: LD_ADDR_VAR 0 9
37759: PUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 255
37769: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37770: LD_VAR 0 9
37774: PPUSH
37775: LD_VAR 0 2
37779: PPUSH
37780: CALL 37248 0 2
37784: NOT
37785: IFFALSE 37789
// exit ;
37787: GO 38491
// pom := GetBase ( depot ) ;
37789: LD_ADDR_VAR 0 10
37793: PUSH
37794: LD_VAR 0 1
37798: PPUSH
37799: CALL_OW 274
37803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37804: LD_ADDR_VAR 0 11
37808: PUSH
37809: LD_VAR 0 2
37813: PPUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 248
37823: PPUSH
37824: CALL_OW 450
37828: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37829: LD_VAR 0 10
37833: PPUSH
37834: LD_INT 1
37836: PPUSH
37837: CALL_OW 275
37841: PUSH
37842: LD_VAR 0 11
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: GREATEREQUAL
37851: PUSH
37852: LD_VAR 0 10
37856: PPUSH
37857: LD_INT 2
37859: PPUSH
37860: CALL_OW 275
37864: PUSH
37865: LD_VAR 0 11
37869: PUSH
37870: LD_INT 2
37872: ARRAY
37873: GREATEREQUAL
37874: AND
37875: PUSH
37876: LD_VAR 0 10
37880: PPUSH
37881: LD_INT 3
37883: PPUSH
37884: CALL_OW 275
37888: PUSH
37889: LD_VAR 0 11
37893: PUSH
37894: LD_INT 3
37896: ARRAY
37897: GREATEREQUAL
37898: AND
37899: NOT
37900: IFFALSE 37904
// exit ;
37902: GO 38491
// if GetBType ( depot ) = b_depot then
37904: LD_VAR 0 1
37908: PPUSH
37909: CALL_OW 266
37913: PUSH
37914: LD_INT 0
37916: EQUAL
37917: IFFALSE 37929
// dist := 28 else
37919: LD_ADDR_VAR 0 14
37923: PUSH
37924: LD_INT 28
37926: ST_TO_ADDR
37927: GO 37937
// dist := 36 ;
37929: LD_ADDR_VAR 0 14
37933: PUSH
37934: LD_INT 36
37936: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37937: LD_VAR 0 1
37941: PPUSH
37942: LD_VAR 0 3
37946: PPUSH
37947: LD_VAR 0 4
37951: PPUSH
37952: CALL_OW 297
37956: PUSH
37957: LD_VAR 0 14
37961: GREATER
37962: IFFALSE 37966
// exit ;
37964: GO 38491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37966: LD_ADDR_VAR 0 12
37970: PUSH
37971: LD_VAR 0 2
37975: PPUSH
37976: LD_VAR 0 3
37980: PPUSH
37981: LD_VAR 0 4
37985: PPUSH
37986: LD_VAR 0 5
37990: PPUSH
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 248
38000: PPUSH
38001: LD_INT 0
38003: PPUSH
38004: CALL 38496 0 6
38008: ST_TO_ADDR
// if not hexes then
38009: LD_VAR 0 12
38013: NOT
38014: IFFALSE 38018
// exit ;
38016: GO 38491
// hex := GetHexInfo ( x , y ) ;
38018: LD_ADDR_VAR 0 15
38022: PUSH
38023: LD_VAR 0 3
38027: PPUSH
38028: LD_VAR 0 4
38032: PPUSH
38033: CALL_OW 546
38037: ST_TO_ADDR
// if hex [ 1 ] then
38038: LD_VAR 0 15
38042: PUSH
38043: LD_INT 1
38045: ARRAY
38046: IFFALSE 38050
// exit ;
38048: GO 38491
// height := hex [ 2 ] ;
38050: LD_ADDR_VAR 0 13
38054: PUSH
38055: LD_VAR 0 15
38059: PUSH
38060: LD_INT 2
38062: ARRAY
38063: ST_TO_ADDR
// for i = 1 to hexes do
38064: LD_ADDR_VAR 0 7
38068: PUSH
38069: DOUBLE
38070: LD_INT 1
38072: DEC
38073: ST_TO_ADDR
38074: LD_VAR 0 12
38078: PUSH
38079: FOR_TO
38080: IFFALSE 38410
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38082: LD_VAR 0 12
38086: PUSH
38087: LD_VAR 0 7
38091: ARRAY
38092: PUSH
38093: LD_INT 1
38095: ARRAY
38096: PPUSH
38097: LD_VAR 0 12
38101: PUSH
38102: LD_VAR 0 7
38106: ARRAY
38107: PUSH
38108: LD_INT 2
38110: ARRAY
38111: PPUSH
38112: CALL_OW 488
38116: NOT
38117: PUSH
38118: LD_VAR 0 12
38122: PUSH
38123: LD_VAR 0 7
38127: ARRAY
38128: PUSH
38129: LD_INT 1
38131: ARRAY
38132: PPUSH
38133: LD_VAR 0 12
38137: PUSH
38138: LD_VAR 0 7
38142: ARRAY
38143: PUSH
38144: LD_INT 2
38146: ARRAY
38147: PPUSH
38148: CALL_OW 428
38152: PUSH
38153: LD_INT 0
38155: GREATER
38156: OR
38157: PUSH
38158: LD_VAR 0 12
38162: PUSH
38163: LD_VAR 0 7
38167: ARRAY
38168: PUSH
38169: LD_INT 1
38171: ARRAY
38172: PPUSH
38173: LD_VAR 0 12
38177: PUSH
38178: LD_VAR 0 7
38182: ARRAY
38183: PUSH
38184: LD_INT 2
38186: ARRAY
38187: PPUSH
38188: CALL_OW 351
38192: OR
38193: IFFALSE 38199
// exit ;
38195: POP
38196: POP
38197: GO 38491
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38199: LD_ADDR_VAR 0 8
38203: PUSH
38204: LD_VAR 0 12
38208: PUSH
38209: LD_VAR 0 7
38213: ARRAY
38214: PUSH
38215: LD_INT 1
38217: ARRAY
38218: PPUSH
38219: LD_VAR 0 12
38223: PUSH
38224: LD_VAR 0 7
38228: ARRAY
38229: PUSH
38230: LD_INT 2
38232: ARRAY
38233: PPUSH
38234: CALL_OW 546
38238: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38239: LD_VAR 0 8
38243: PUSH
38244: LD_INT 1
38246: ARRAY
38247: PUSH
38248: LD_VAR 0 8
38252: PUSH
38253: LD_INT 2
38255: ARRAY
38256: PUSH
38257: LD_VAR 0 13
38261: PUSH
38262: LD_INT 2
38264: PLUS
38265: GREATER
38266: OR
38267: PUSH
38268: LD_VAR 0 8
38272: PUSH
38273: LD_INT 2
38275: ARRAY
38276: PUSH
38277: LD_VAR 0 13
38281: PUSH
38282: LD_INT 2
38284: MINUS
38285: LESS
38286: OR
38287: PUSH
38288: LD_VAR 0 8
38292: PUSH
38293: LD_INT 3
38295: ARRAY
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 8
38302: PUSH
38303: LD_INT 9
38305: PUSH
38306: LD_INT 10
38308: PUSH
38309: LD_INT 11
38311: PUSH
38312: LD_INT 12
38314: PUSH
38315: LD_INT 13
38317: PUSH
38318: LD_INT 16
38320: PUSH
38321: LD_INT 17
38323: PUSH
38324: LD_INT 18
38326: PUSH
38327: LD_INT 19
38329: PUSH
38330: LD_INT 20
38332: PUSH
38333: LD_INT 21
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: IN
38351: NOT
38352: OR
38353: PUSH
38354: LD_VAR 0 8
38358: PUSH
38359: LD_INT 5
38361: ARRAY
38362: NOT
38363: OR
38364: PUSH
38365: LD_VAR 0 8
38369: PUSH
38370: LD_INT 6
38372: ARRAY
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: LD_INT 7
38382: PUSH
38383: LD_INT 9
38385: PUSH
38386: LD_INT 10
38388: PUSH
38389: LD_INT 11
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: IN
38400: NOT
38401: OR
38402: IFFALSE 38408
// exit ;
38404: POP
38405: POP
38406: GO 38491
// end ;
38408: GO 38079
38410: POP
38411: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38412: LD_VAR 0 9
38416: PPUSH
38417: LD_VAR 0 3
38421: PPUSH
38422: LD_VAR 0 4
38426: PPUSH
38427: LD_INT 20
38429: PPUSH
38430: CALL 30414 0 4
38434: PUSH
38435: LD_INT 4
38437: ARRAY
38438: IFFALSE 38442
// exit ;
38440: GO 38491
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38442: LD_VAR 0 2
38446: PUSH
38447: LD_INT 29
38449: PUSH
38450: LD_INT 30
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: IN
38457: PUSH
38458: LD_VAR 0 3
38462: PPUSH
38463: LD_VAR 0 4
38467: PPUSH
38468: LD_VAR 0 9
38472: PPUSH
38473: CALL_OW 440
38477: NOT
38478: AND
38479: IFFALSE 38483
// exit ;
38481: GO 38491
// result := true ;
38483: LD_ADDR_VAR 0 6
38487: PUSH
38488: LD_INT 1
38490: ST_TO_ADDR
// end ;
38491: LD_VAR 0 6
38495: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38496: LD_INT 0
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
// result = [ ] ;
38556: LD_ADDR_VAR 0 7
38560: PUSH
38561: EMPTY
38562: ST_TO_ADDR
// temp_list = [ ] ;
38563: LD_ADDR_VAR 0 9
38567: PUSH
38568: EMPTY
38569: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38570: LD_VAR 0 4
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: LD_INT 4
38589: PUSH
38590: LD_INT 5
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: IN
38601: NOT
38602: PUSH
38603: LD_VAR 0 1
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: IN
38618: PUSH
38619: LD_VAR 0 5
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: IN
38638: NOT
38639: AND
38640: OR
38641: IFFALSE 38645
// exit ;
38643: GO 57036
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38645: LD_VAR 0 1
38649: PUSH
38650: LD_INT 6
38652: PUSH
38653: LD_INT 7
38655: PUSH
38656: LD_INT 8
38658: PUSH
38659: LD_INT 13
38661: PUSH
38662: LD_INT 12
38664: PUSH
38665: LD_INT 15
38667: PUSH
38668: LD_INT 11
38670: PUSH
38671: LD_INT 14
38673: PUSH
38674: LD_INT 10
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: IN
38688: IFFALSE 38698
// btype = b_lab ;
38690: LD_ADDR_VAR 0 1
38694: PUSH
38695: LD_INT 6
38697: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38698: LD_VAR 0 6
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: LIST
38716: IN
38717: NOT
38718: PUSH
38719: LD_VAR 0 1
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: LD_INT 6
38738: PUSH
38739: LD_INT 36
38741: PUSH
38742: LD_INT 4
38744: PUSH
38745: LD_INT 5
38747: PUSH
38748: LD_INT 31
38750: PUSH
38751: LD_INT 32
38753: PUSH
38754: LD_INT 33
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: IN
38770: NOT
38771: PUSH
38772: LD_VAR 0 6
38776: PUSH
38777: LD_INT 1
38779: EQUAL
38780: AND
38781: OR
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: IN
38798: NOT
38799: PUSH
38800: LD_VAR 0 6
38804: PUSH
38805: LD_INT 2
38807: EQUAL
38808: AND
38809: OR
38810: IFFALSE 38820
// mode = 0 ;
38812: LD_ADDR_VAR 0 6
38816: PUSH
38817: LD_INT 0
38819: ST_TO_ADDR
// case mode of 0 :
38820: LD_VAR 0 6
38824: PUSH
38825: LD_INT 0
38827: DOUBLE
38828: EQUAL
38829: IFTRUE 38833
38831: GO 50286
38833: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38834: LD_ADDR_VAR 0 11
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39027: LD_ADDR_VAR 0 12
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 3
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39223: LD_ADDR_VAR 0 13
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 3
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 3
39394: NEG
39395: PUSH
39396: LD_INT 3
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39422: LD_ADDR_VAR 0 14
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 3
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: LD_INT 3
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39618: LD_ADDR_VAR 0 15
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 2
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 2
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 3
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 3
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39811: LD_ADDR_VAR 0 16
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40004: LD_ADDR_VAR 0 17
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40234: LD_ADDR_VAR 0 18
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 2
40410: NEG
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: LD_INT 1
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40464: LD_ADDR_VAR 0 19
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40694: LD_ADDR_VAR 0 20
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40924: LD_ADDR_VAR 0 21
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 1
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41154: LD_ADDR_VAR 0 22
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41384: LD_ADDR_VAR 0 23
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 3
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41664: LD_ADDR_VAR 0 24
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41940: LD_ADDR_VAR 0 25
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 3
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42214: LD_ADDR_VAR 0 26
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 2
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42490: LD_ADDR_VAR 0 27
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 0
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42770: LD_ADDR_VAR 0 28
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 3
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43052: LD_ADDR_VAR 0 29
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: LD_INT 3
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 3
43296: NEG
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43331: LD_ADDR_VAR 0 30
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: LD_INT 3
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43609: LD_ADDR_VAR 0 31
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 3
43852: NEG
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43887: LD_ADDR_VAR 0 32
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 3
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 3
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44165: LD_ADDR_VAR 0 33
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44444: LD_ADDR_VAR 0 34
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44724: LD_ADDR_VAR 0 35
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44836: LD_ADDR_VAR 0 36
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44948: LD_ADDR_VAR 0 37
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45060: LD_ADDR_VAR 0 38
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45172: LD_ADDR_VAR 0 39
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 2
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45284: LD_ADDR_VAR 0 40
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45396: LD_ADDR_VAR 0 41
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: LD_INT 3
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 3
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 3
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 3
45705: NEG
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45746: LD_ADDR_VAR 0 42
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: NEG
45937: PUSH
45938: LD_INT 3
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: LD_INT 3
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 3
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: NEG
46056: PUSH
46057: LD_INT 3
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46096: LD_ADDR_VAR 0 43
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 3
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46444: LD_ADDR_VAR 0 44
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 2
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: NEG
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: NEG
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 3
46741: NEG
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 3
46753: NEG
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46794: LD_ADDR_VAR 0 45
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 3
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 3
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 3
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 3
47103: NEG
47104: PUSH
47105: LD_INT 3
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47144: LD_ADDR_VAR 0 46
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 2
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 3
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47492: LD_ADDR_VAR 0 47
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47643: LD_ADDR_VAR 0 48
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47790: LD_ADDR_VAR 0 49
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47934: LD_ADDR_VAR 0 50
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48078: LD_ADDR_VAR 0 51
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 2
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48225: LD_ADDR_VAR 0 52
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48376: LD_ADDR_VAR 0 53
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48606: LD_ADDR_VAR 0 54
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48836: LD_ADDR_VAR 0 55
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49066: LD_ADDR_VAR 0 56
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49296: LD_ADDR_VAR 0 57
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49526: LD_ADDR_VAR 0 58
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: NEG
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49756: LD_ADDR_VAR 0 59
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49844: LD_ADDR_VAR 0 60
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49932: LD_ADDR_VAR 0 61
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 1
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50020: LD_ADDR_VAR 0 62
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50108: LD_ADDR_VAR 0 63
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 0
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50196: LD_ADDR_VAR 0 64
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: ST_TO_ADDR
// end ; 1 :
50284: GO 56181
50286: LD_INT 1
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 52917
50294: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50295: LD_ADDR_VAR 0 11
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50339: LD_ADDR_VAR 0 12
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50380: LD_ADDR_VAR 0 13
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50420: LD_ADDR_VAR 0 14
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50461: LD_ADDR_VAR 0 15
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50505: LD_ADDR_VAR 0 16
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50551: LD_ADDR_VAR 0 17
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50595: LD_ADDR_VAR 0 18
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50636: LD_ADDR_VAR 0 19
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50676: LD_ADDR_VAR 0 20
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50717: LD_ADDR_VAR 0 21
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50761: LD_ADDR_VAR 0 22
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: LD_INT 3
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50807: LD_ADDR_VAR 0 23
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 3
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 4
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 3
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: LIST
50850: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50851: LD_ADDR_VAR 0 24
50855: PUSH
50856: LD_INT 3
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50892: LD_ADDR_VAR 0 25
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 4
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 3
50919: PUSH
50920: LD_INT 4
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50932: LD_ADDR_VAR 0 26
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 4
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50973: LD_ADDR_VAR 0 27
50977: PUSH
50978: LD_INT 3
50980: NEG
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 3
50991: NEG
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 4
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51017: LD_ADDR_VAR 0 28
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 4
51048: NEG
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51063: LD_ADDR_VAR 0 29
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: LD_INT 4
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 5
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 5
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 4
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 6
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 6
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 5
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51218: LD_ADDR_VAR 0 30
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 4
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 4
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 5
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 5
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 6
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 6
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51361: LD_ADDR_VAR 0 31
51365: PUSH
51366: LD_INT 3
51368: PUSH
51369: LD_INT 2
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: PUSH
51389: LD_INT 3
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 4
51408: PUSH
51409: LD_INT 4
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 3
51418: PUSH
51419: LD_INT 4
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 5
51428: PUSH
51429: LD_INT 4
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 5
51438: PUSH
51439: LD_INT 5
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 4
51448: PUSH
51449: LD_INT 5
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 6
51458: PUSH
51459: LD_INT 5
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 6
51468: PUSH
51469: LD_INT 6
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 5
51478: PUSH
51479: LD_INT 6
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51500: LD_ADDR_VAR 0 32
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: LD_INT 4
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 4
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 3
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 5
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 5
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 4
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 6
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 6
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 5
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51643: LD_ADDR_VAR 0 33
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: NEG
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 4
51695: NEG
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 4
51706: NEG
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 4
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 5
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 5
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 5
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 6
51763: NEG
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 6
51774: NEG
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51798: LD_ADDR_VAR 0 34
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 3
51841: NEG
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 4
51853: NEG
51854: PUSH
51855: LD_INT 3
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 4
51865: NEG
51866: PUSH
51867: LD_INT 4
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 4
51877: NEG
51878: PUSH
51879: LD_INT 5
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 5
51889: NEG
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 5
51901: NEG
51902: PUSH
51903: LD_INT 5
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 5
51913: NEG
51914: PUSH
51915: LD_INT 6
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 6
51925: NEG
51926: PUSH
51927: LD_INT 5
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 6
51937: NEG
51938: PUSH
51939: LD_INT 6
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51961: LD_ADDR_VAR 0 41
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 3
51983: NEG
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52005: LD_ADDR_VAR 0 42
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52046: LD_ADDR_VAR 0 43
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52086: LD_ADDR_VAR 0 44
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52127: LD_ADDR_VAR 0 45
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52171: LD_ADDR_VAR 0 46
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 3
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52217: LD_ADDR_VAR 0 47
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52250: LD_ADDR_VAR 0 48
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52281: LD_ADDR_VAR 0 49
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: LD_INT 2
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52310: LD_ADDR_VAR 0 50
52314: PUSH
52315: LD_INT 2
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52339: LD_ADDR_VAR 0 51
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52370: LD_ADDR_VAR 0 52
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52403: LD_ADDR_VAR 0 53
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 3
52414: NEG
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: LD_INT 3
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52447: LD_ADDR_VAR 0 54
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 1
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: LIST
52487: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52488: LD_ADDR_VAR 0 55
52492: PUSH
52493: LD_INT 3
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 3
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52528: LD_ADDR_VAR 0 56
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52569: LD_ADDR_VAR 0 57
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 3
52587: NEG
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52613: LD_ADDR_VAR 0 58
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: NEG
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: NEG
52645: PUSH
52646: LD_INT 3
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52659: LD_ADDR_VAR 0 59
52663: PUSH
52664: LD_INT 1
52666: NEG
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 2
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52703: LD_ADDR_VAR 0 60
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52744: LD_ADDR_VAR 0 61
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52784: LD_ADDR_VAR 0 62
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52825: LD_ADDR_VAR 0 63
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52869: LD_ADDR_VAR 0 64
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: NEG
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: LIST
52914: ST_TO_ADDR
// end ; 2 :
52915: GO 56181
52917: LD_INT 2
52919: DOUBLE
52920: EQUAL
52921: IFTRUE 52925
52923: GO 56180
52925: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52926: LD_ADDR_VAR 0 29
52930: PUSH
52931: LD_INT 4
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 4
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 5
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 5
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 5
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 3
53026: PUSH
53027: LD_INT 3
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 4
53046: PUSH
53047: LD_INT 3
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 4
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: LD_INT 2
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 4
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 4
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 4
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 4
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: LD_INT 5
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 5
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: LD_INT 4
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 3
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 5
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 4
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 4
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 4
53288: NEG
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 4
53311: NEG
53312: PUSH
53313: LD_INT 4
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 4
53323: NEG
53324: PUSH
53325: LD_INT 5
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: LD_INT 4
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 4
53359: NEG
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 5
53371: NEG
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 5
53383: NEG
53384: PUSH
53385: LD_INT 5
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 5
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 5
53407: NEG
53408: PUSH
53409: LD_INT 3
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53464: LD_ADDR_VAR 0 30
53468: PUSH
53469: LD_INT 4
53471: PUSH
53472: LD_INT 4
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 4
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 5
53491: PUSH
53492: LD_INT 4
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 5
53501: PUSH
53502: LD_INT 5
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: PUSH
53512: LD_INT 5
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: LD_INT 4
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 5
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 3
53551: PUSH
53552: LD_INT 5
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 3
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 3
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 4
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: LD_INT 4
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 3
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 4
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 4
53654: NEG
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 4
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 3
53677: NEG
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 4
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 5
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 5
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 4
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 4
53828: NEG
53829: PUSH
53830: LD_INT 4
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: NEG
53841: PUSH
53842: LD_INT 4
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 4
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 5
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 4
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 3
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 4
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 5
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 5
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54011: LD_ADDR_VAR 0 31
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 4
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 4
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 5
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 5
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 4
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 5
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 3
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 4
54178: NEG
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 4
54190: NEG
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: LD_INT 2
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 4
54213: NEG
54214: PUSH
54215: LD_INT 4
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 4
54225: NEG
54226: PUSH
54227: LD_INT 5
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 3
54237: NEG
54238: PUSH
54239: LD_INT 4
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 4
54261: NEG
54262: PUSH
54263: LD_INT 3
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 5
54273: NEG
54274: PUSH
54275: LD_INT 4
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 5
54285: NEG
54286: PUSH
54287: LD_INT 5
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: NEG
54298: PUSH
54299: LD_INT 5
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 5
54309: NEG
54310: PUSH
54311: LD_INT 3
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 3
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: LD_INT 4
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: LD_INT 4
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 4
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 4
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 4
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 5
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 5
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 3
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: PUSH
54496: LD_INT 2
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 5
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54561: LD_ADDR_VAR 0 32
54565: PUSH
54566: LD_INT 4
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 4
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 4
54613: NEG
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 5
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 5
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 5
54647: NEG
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: LD_INT 3
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 4
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 4
54742: NEG
54743: PUSH
54744: LD_INT 4
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 4
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 4
54766: NEG
54767: PUSH
54768: LD_INT 2
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 5
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 4
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 3
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 3
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: LD_INT 4
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 5
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 5
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 4
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 4
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 2
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 4
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 4
54973: PUSH
54974: LD_INT 4
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 4
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 5
54993: PUSH
54994: LD_INT 4
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 5
55003: PUSH
55004: LD_INT 5
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 4
55013: PUSH
55014: LD_INT 5
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: LD_INT 4
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 3
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 5
55043: PUSH
55044: LD_INT 3
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: LD_INT 5
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55108: LD_ADDR_VAR 0 33
55112: PUSH
55113: LD_INT 4
55115: NEG
55116: PUSH
55117: LD_INT 4
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 4
55127: NEG
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: LD_INT 4
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 4
55163: NEG
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 5
55175: NEG
55176: PUSH
55177: LD_INT 4
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 5
55187: NEG
55188: PUSH
55189: LD_INT 5
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 3
55199: NEG
55200: PUSH
55201: LD_INT 5
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 5
55211: NEG
55212: PUSH
55213: LD_INT 3
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 4
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 3
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 2
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 4
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: LD_INT 4
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 4
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 5
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 5
55356: PUSH
55357: LD_INT 1
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 4
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 3
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 4
55438: PUSH
55439: LD_INT 3
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 4
55448: PUSH
55449: LD_INT 4
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: LD_INT 4
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 4
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 4
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 4
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 3
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: LD_INT 4
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 5
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 4
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 5
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55646: LD_ADDR_VAR 0 34
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 4
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 5
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 4
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 3
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 3
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 4
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 5
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: LD_INT 3
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 5
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 4
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 4
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 4
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: LD_INT 4
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 5
55868: PUSH
55869: LD_INT 4
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 5
55878: PUSH
55879: LD_INT 5
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 4
55888: PUSH
55889: LD_INT 5
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: PUSH
55899: LD_INT 4
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 5
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: LD_INT 5
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 3
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 4
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 4
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 2
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 4
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 3
56054: NEG
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 4
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 5
56087: NEG
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 5
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 5
56110: NEG
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: ST_TO_ADDR
// end ; end ;
56178: GO 56181
56180: POP
// case btype of b_depot , b_warehouse :
56181: LD_VAR 0 1
56185: PUSH
56186: LD_INT 0
56188: DOUBLE
56189: EQUAL
56190: IFTRUE 56200
56192: LD_INT 1
56194: DOUBLE
56195: EQUAL
56196: IFTRUE 56200
56198: GO 56401
56200: POP
// case nation of nation_american :
56201: LD_VAR 0 5
56205: PUSH
56206: LD_INT 1
56208: DOUBLE
56209: EQUAL
56210: IFTRUE 56214
56212: GO 56270
56214: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56215: LD_ADDR_VAR 0 9
56219: PUSH
56220: LD_VAR 0 11
56224: PUSH
56225: LD_VAR 0 12
56229: PUSH
56230: LD_VAR 0 13
56234: PUSH
56235: LD_VAR 0 14
56239: PUSH
56240: LD_VAR 0 15
56244: PUSH
56245: LD_VAR 0 16
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: PUSH
56258: LD_VAR 0 4
56262: PUSH
56263: LD_INT 1
56265: PLUS
56266: ARRAY
56267: ST_TO_ADDR
56268: GO 56399
56270: LD_INT 2
56272: DOUBLE
56273: EQUAL
56274: IFTRUE 56278
56276: GO 56334
56278: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56279: LD_ADDR_VAR 0 9
56283: PUSH
56284: LD_VAR 0 17
56288: PUSH
56289: LD_VAR 0 18
56293: PUSH
56294: LD_VAR 0 19
56298: PUSH
56299: LD_VAR 0 20
56303: PUSH
56304: LD_VAR 0 21
56308: PUSH
56309: LD_VAR 0 22
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: LD_VAR 0 4
56326: PUSH
56327: LD_INT 1
56329: PLUS
56330: ARRAY
56331: ST_TO_ADDR
56332: GO 56399
56334: LD_INT 3
56336: DOUBLE
56337: EQUAL
56338: IFTRUE 56342
56340: GO 56398
56342: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56343: LD_ADDR_VAR 0 9
56347: PUSH
56348: LD_VAR 0 23
56352: PUSH
56353: LD_VAR 0 24
56357: PUSH
56358: LD_VAR 0 25
56362: PUSH
56363: LD_VAR 0 26
56367: PUSH
56368: LD_VAR 0 27
56372: PUSH
56373: LD_VAR 0 28
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: PUSH
56386: LD_VAR 0 4
56390: PUSH
56391: LD_INT 1
56393: PLUS
56394: ARRAY
56395: ST_TO_ADDR
56396: GO 56399
56398: POP
56399: GO 56954
56401: LD_INT 2
56403: DOUBLE
56404: EQUAL
56405: IFTRUE 56415
56407: LD_INT 3
56409: DOUBLE
56410: EQUAL
56411: IFTRUE 56415
56413: GO 56471
56415: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56416: LD_ADDR_VAR 0 9
56420: PUSH
56421: LD_VAR 0 29
56425: PUSH
56426: LD_VAR 0 30
56430: PUSH
56431: LD_VAR 0 31
56435: PUSH
56436: LD_VAR 0 32
56440: PUSH
56441: LD_VAR 0 33
56445: PUSH
56446: LD_VAR 0 34
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: PUSH
56459: LD_VAR 0 4
56463: PUSH
56464: LD_INT 1
56466: PLUS
56467: ARRAY
56468: ST_TO_ADDR
56469: GO 56954
56471: LD_INT 16
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56533
56477: LD_INT 17
56479: DOUBLE
56480: EQUAL
56481: IFTRUE 56533
56483: LD_INT 18
56485: DOUBLE
56486: EQUAL
56487: IFTRUE 56533
56489: LD_INT 19
56491: DOUBLE
56492: EQUAL
56493: IFTRUE 56533
56495: LD_INT 22
56497: DOUBLE
56498: EQUAL
56499: IFTRUE 56533
56501: LD_INT 20
56503: DOUBLE
56504: EQUAL
56505: IFTRUE 56533
56507: LD_INT 21
56509: DOUBLE
56510: EQUAL
56511: IFTRUE 56533
56513: LD_INT 23
56515: DOUBLE
56516: EQUAL
56517: IFTRUE 56533
56519: LD_INT 24
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56533
56525: LD_INT 25
56527: DOUBLE
56528: EQUAL
56529: IFTRUE 56533
56531: GO 56589
56533: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56534: LD_ADDR_VAR 0 9
56538: PUSH
56539: LD_VAR 0 35
56543: PUSH
56544: LD_VAR 0 36
56548: PUSH
56549: LD_VAR 0 37
56553: PUSH
56554: LD_VAR 0 38
56558: PUSH
56559: LD_VAR 0 39
56563: PUSH
56564: LD_VAR 0 40
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: PUSH
56577: LD_VAR 0 4
56581: PUSH
56582: LD_INT 1
56584: PLUS
56585: ARRAY
56586: ST_TO_ADDR
56587: GO 56954
56589: LD_INT 6
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56645
56595: LD_INT 7
56597: DOUBLE
56598: EQUAL
56599: IFTRUE 56645
56601: LD_INT 8
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56645
56607: LD_INT 13
56609: DOUBLE
56610: EQUAL
56611: IFTRUE 56645
56613: LD_INT 12
56615: DOUBLE
56616: EQUAL
56617: IFTRUE 56645
56619: LD_INT 15
56621: DOUBLE
56622: EQUAL
56623: IFTRUE 56645
56625: LD_INT 11
56627: DOUBLE
56628: EQUAL
56629: IFTRUE 56645
56631: LD_INT 14
56633: DOUBLE
56634: EQUAL
56635: IFTRUE 56645
56637: LD_INT 10
56639: DOUBLE
56640: EQUAL
56641: IFTRUE 56645
56643: GO 56701
56645: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56646: LD_ADDR_VAR 0 9
56650: PUSH
56651: LD_VAR 0 41
56655: PUSH
56656: LD_VAR 0 42
56660: PUSH
56661: LD_VAR 0 43
56665: PUSH
56666: LD_VAR 0 44
56670: PUSH
56671: LD_VAR 0 45
56675: PUSH
56676: LD_VAR 0 46
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: PUSH
56689: LD_VAR 0 4
56693: PUSH
56694: LD_INT 1
56696: PLUS
56697: ARRAY
56698: ST_TO_ADDR
56699: GO 56954
56701: LD_INT 36
56703: DOUBLE
56704: EQUAL
56705: IFTRUE 56709
56707: GO 56765
56709: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56710: LD_ADDR_VAR 0 9
56714: PUSH
56715: LD_VAR 0 47
56719: PUSH
56720: LD_VAR 0 48
56724: PUSH
56725: LD_VAR 0 49
56729: PUSH
56730: LD_VAR 0 50
56734: PUSH
56735: LD_VAR 0 51
56739: PUSH
56740: LD_VAR 0 52
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: LD_VAR 0 4
56757: PUSH
56758: LD_INT 1
56760: PLUS
56761: ARRAY
56762: ST_TO_ADDR
56763: GO 56954
56765: LD_INT 4
56767: DOUBLE
56768: EQUAL
56769: IFTRUE 56791
56771: LD_INT 5
56773: DOUBLE
56774: EQUAL
56775: IFTRUE 56791
56777: LD_INT 34
56779: DOUBLE
56780: EQUAL
56781: IFTRUE 56791
56783: LD_INT 37
56785: DOUBLE
56786: EQUAL
56787: IFTRUE 56791
56789: GO 56847
56791: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56792: LD_ADDR_VAR 0 9
56796: PUSH
56797: LD_VAR 0 53
56801: PUSH
56802: LD_VAR 0 54
56806: PUSH
56807: LD_VAR 0 55
56811: PUSH
56812: LD_VAR 0 56
56816: PUSH
56817: LD_VAR 0 57
56821: PUSH
56822: LD_VAR 0 58
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: PUSH
56835: LD_VAR 0 4
56839: PUSH
56840: LD_INT 1
56842: PLUS
56843: ARRAY
56844: ST_TO_ADDR
56845: GO 56954
56847: LD_INT 31
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56897
56853: LD_INT 32
56855: DOUBLE
56856: EQUAL
56857: IFTRUE 56897
56859: LD_INT 33
56861: DOUBLE
56862: EQUAL
56863: IFTRUE 56897
56865: LD_INT 27
56867: DOUBLE
56868: EQUAL
56869: IFTRUE 56897
56871: LD_INT 26
56873: DOUBLE
56874: EQUAL
56875: IFTRUE 56897
56877: LD_INT 28
56879: DOUBLE
56880: EQUAL
56881: IFTRUE 56897
56883: LD_INT 29
56885: DOUBLE
56886: EQUAL
56887: IFTRUE 56897
56889: LD_INT 30
56891: DOUBLE
56892: EQUAL
56893: IFTRUE 56897
56895: GO 56953
56897: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56898: LD_ADDR_VAR 0 9
56902: PUSH
56903: LD_VAR 0 59
56907: PUSH
56908: LD_VAR 0 60
56912: PUSH
56913: LD_VAR 0 61
56917: PUSH
56918: LD_VAR 0 62
56922: PUSH
56923: LD_VAR 0 63
56927: PUSH
56928: LD_VAR 0 64
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: LD_VAR 0 4
56945: PUSH
56946: LD_INT 1
56948: PLUS
56949: ARRAY
56950: ST_TO_ADDR
56951: GO 56954
56953: POP
// temp_list2 = [ ] ;
56954: LD_ADDR_VAR 0 10
56958: PUSH
56959: EMPTY
56960: ST_TO_ADDR
// for i in temp_list do
56961: LD_ADDR_VAR 0 8
56965: PUSH
56966: LD_VAR 0 9
56970: PUSH
56971: FOR_IN
56972: IFFALSE 57024
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56974: LD_ADDR_VAR 0 10
56978: PUSH
56979: LD_VAR 0 10
56983: PUSH
56984: LD_VAR 0 8
56988: PUSH
56989: LD_INT 1
56991: ARRAY
56992: PUSH
56993: LD_VAR 0 2
56997: PLUS
56998: PUSH
56999: LD_VAR 0 8
57003: PUSH
57004: LD_INT 2
57006: ARRAY
57007: PUSH
57008: LD_VAR 0 3
57012: PLUS
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: ADD
57021: ST_TO_ADDR
57022: GO 56971
57024: POP
57025: POP
// result = temp_list2 ;
57026: LD_ADDR_VAR 0 7
57030: PUSH
57031: LD_VAR 0 10
57035: ST_TO_ADDR
// end ;
57036: LD_VAR 0 7
57040: RET
// export function EnemyInRange ( unit , dist ) ; begin
57041: LD_INT 0
57043: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57044: LD_ADDR_VAR 0 3
57048: PUSH
57049: LD_VAR 0 1
57053: PPUSH
57054: CALL_OW 255
57058: PPUSH
57059: LD_VAR 0 1
57063: PPUSH
57064: CALL_OW 250
57068: PPUSH
57069: LD_VAR 0 1
57073: PPUSH
57074: CALL_OW 251
57078: PPUSH
57079: LD_VAR 0 2
57083: PPUSH
57084: CALL 30414 0 4
57088: PUSH
57089: LD_INT 4
57091: ARRAY
57092: ST_TO_ADDR
// end ;
57093: LD_VAR 0 3
57097: RET
// export function PlayerSeeMe ( unit ) ; begin
57098: LD_INT 0
57100: PPUSH
// result := See ( your_side , unit ) ;
57101: LD_ADDR_VAR 0 2
57105: PUSH
57106: LD_OWVAR 2
57110: PPUSH
57111: LD_VAR 0 1
57115: PPUSH
57116: CALL_OW 292
57120: ST_TO_ADDR
// end ;
57121: LD_VAR 0 2
57125: RET
// export function ReverseDir ( unit ) ; begin
57126: LD_INT 0
57128: PPUSH
// if not unit then
57129: LD_VAR 0 1
57133: NOT
57134: IFFALSE 57138
// exit ;
57136: GO 57161
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57138: LD_ADDR_VAR 0 2
57142: PUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: CALL_OW 254
57152: PUSH
57153: LD_INT 3
57155: PLUS
57156: PUSH
57157: LD_INT 6
57159: MOD
57160: ST_TO_ADDR
// end ;
57161: LD_VAR 0 2
57165: RET
// export function ReverseArray ( array ) ; var i ; begin
57166: LD_INT 0
57168: PPUSH
57169: PPUSH
// if not array then
57170: LD_VAR 0 1
57174: NOT
57175: IFFALSE 57179
// exit ;
57177: GO 57234
// result := [ ] ;
57179: LD_ADDR_VAR 0 2
57183: PUSH
57184: EMPTY
57185: ST_TO_ADDR
// for i := array downto 1 do
57186: LD_ADDR_VAR 0 3
57190: PUSH
57191: DOUBLE
57192: LD_VAR 0 1
57196: INC
57197: ST_TO_ADDR
57198: LD_INT 1
57200: PUSH
57201: FOR_DOWNTO
57202: IFFALSE 57232
// result := Join ( result , array [ i ] ) ;
57204: LD_ADDR_VAR 0 2
57208: PUSH
57209: LD_VAR 0 2
57213: PPUSH
57214: LD_VAR 0 1
57218: PUSH
57219: LD_VAR 0 3
57223: ARRAY
57224: PPUSH
57225: CALL 61877 0 2
57229: ST_TO_ADDR
57230: GO 57201
57232: POP
57233: POP
// end ;
57234: LD_VAR 0 2
57238: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57239: LD_INT 0
57241: PPUSH
57242: PPUSH
57243: PPUSH
57244: PPUSH
57245: PPUSH
57246: PPUSH
// if not unit or not hexes then
57247: LD_VAR 0 1
57251: NOT
57252: PUSH
57253: LD_VAR 0 2
57257: NOT
57258: OR
57259: IFFALSE 57263
// exit ;
57261: GO 57386
// dist := 9999 ;
57263: LD_ADDR_VAR 0 5
57267: PUSH
57268: LD_INT 9999
57270: ST_TO_ADDR
// for i = 1 to hexes do
57271: LD_ADDR_VAR 0 4
57275: PUSH
57276: DOUBLE
57277: LD_INT 1
57279: DEC
57280: ST_TO_ADDR
57281: LD_VAR 0 2
57285: PUSH
57286: FOR_TO
57287: IFFALSE 57374
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57289: LD_ADDR_VAR 0 6
57293: PUSH
57294: LD_VAR 0 1
57298: PPUSH
57299: LD_VAR 0 2
57303: PUSH
57304: LD_VAR 0 4
57308: ARRAY
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: PPUSH
57314: LD_VAR 0 2
57318: PUSH
57319: LD_VAR 0 4
57323: ARRAY
57324: PUSH
57325: LD_INT 2
57327: ARRAY
57328: PPUSH
57329: CALL_OW 297
57333: ST_TO_ADDR
// if tdist < dist then
57334: LD_VAR 0 6
57338: PUSH
57339: LD_VAR 0 5
57343: LESS
57344: IFFALSE 57372
// begin hex := hexes [ i ] ;
57346: LD_ADDR_VAR 0 8
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: LD_VAR 0 4
57360: ARRAY
57361: ST_TO_ADDR
// dist := tdist ;
57362: LD_ADDR_VAR 0 5
57366: PUSH
57367: LD_VAR 0 6
57371: ST_TO_ADDR
// end ; end ;
57372: GO 57286
57374: POP
57375: POP
// result := hex ;
57376: LD_ADDR_VAR 0 3
57380: PUSH
57381: LD_VAR 0 8
57385: ST_TO_ADDR
// end ;
57386: LD_VAR 0 3
57390: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57391: LD_INT 0
57393: PPUSH
57394: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57395: LD_VAR 0 1
57399: NOT
57400: PUSH
57401: LD_VAR 0 1
57405: PUSH
57406: LD_INT 21
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 23
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PPUSH
57430: CALL_OW 69
57434: IN
57435: NOT
57436: OR
57437: IFFALSE 57441
// exit ;
57439: GO 57488
// for i = 1 to 3 do
57441: LD_ADDR_VAR 0 3
57445: PUSH
57446: DOUBLE
57447: LD_INT 1
57449: DEC
57450: ST_TO_ADDR
57451: LD_INT 3
57453: PUSH
57454: FOR_TO
57455: IFFALSE 57486
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57457: LD_VAR 0 1
57461: PPUSH
57462: CALL_OW 250
57466: PPUSH
57467: LD_VAR 0 1
57471: PPUSH
57472: CALL_OW 251
57476: PPUSH
57477: LD_INT 1
57479: PPUSH
57480: CALL_OW 453
57484: GO 57454
57486: POP
57487: POP
// end ;
57488: LD_VAR 0 2
57492: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57493: LD_INT 0
57495: PPUSH
57496: PPUSH
57497: PPUSH
57498: PPUSH
57499: PPUSH
57500: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57501: LD_VAR 0 1
57505: NOT
57506: PUSH
57507: LD_VAR 0 2
57511: NOT
57512: OR
57513: PUSH
57514: LD_VAR 0 1
57518: PPUSH
57519: CALL_OW 314
57523: OR
57524: IFFALSE 57528
// exit ;
57526: GO 57995
// if GetLives ( i ) < 250 then
57528: LD_VAR 0 4
57532: PPUSH
57533: CALL_OW 256
57537: PUSH
57538: LD_INT 250
57540: LESS
57541: IFFALSE 57554
// begin ComAutodestruct ( i ) ;
57543: LD_VAR 0 4
57547: PPUSH
57548: CALL 57391 0 1
// exit ;
57552: GO 57995
// end ; x := GetX ( enemy_unit ) ;
57554: LD_ADDR_VAR 0 7
57558: PUSH
57559: LD_VAR 0 2
57563: PPUSH
57564: CALL_OW 250
57568: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57569: LD_ADDR_VAR 0 8
57573: PUSH
57574: LD_VAR 0 2
57578: PPUSH
57579: CALL_OW 251
57583: ST_TO_ADDR
// if not x or not y then
57584: LD_VAR 0 7
57588: NOT
57589: PUSH
57590: LD_VAR 0 8
57594: NOT
57595: OR
57596: IFFALSE 57600
// exit ;
57598: GO 57995
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57600: LD_ADDR_VAR 0 6
57604: PUSH
57605: LD_VAR 0 7
57609: PPUSH
57610: LD_INT 0
57612: PPUSH
57613: LD_INT 4
57615: PPUSH
57616: CALL_OW 272
57620: PUSH
57621: LD_VAR 0 8
57625: PPUSH
57626: LD_INT 0
57628: PPUSH
57629: LD_INT 4
57631: PPUSH
57632: CALL_OW 273
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_VAR 0 7
57645: PPUSH
57646: LD_INT 1
57648: PPUSH
57649: LD_INT 4
57651: PPUSH
57652: CALL_OW 272
57656: PUSH
57657: LD_VAR 0 8
57661: PPUSH
57662: LD_INT 1
57664: PPUSH
57665: LD_INT 4
57667: PPUSH
57668: CALL_OW 273
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_VAR 0 7
57681: PPUSH
57682: LD_INT 2
57684: PPUSH
57685: LD_INT 4
57687: PPUSH
57688: CALL_OW 272
57692: PUSH
57693: LD_VAR 0 8
57697: PPUSH
57698: LD_INT 2
57700: PPUSH
57701: LD_INT 4
57703: PPUSH
57704: CALL_OW 273
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_VAR 0 7
57717: PPUSH
57718: LD_INT 3
57720: PPUSH
57721: LD_INT 4
57723: PPUSH
57724: CALL_OW 272
57728: PUSH
57729: LD_VAR 0 8
57733: PPUSH
57734: LD_INT 3
57736: PPUSH
57737: LD_INT 4
57739: PPUSH
57740: CALL_OW 273
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_VAR 0 7
57753: PPUSH
57754: LD_INT 4
57756: PPUSH
57757: LD_INT 4
57759: PPUSH
57760: CALL_OW 272
57764: PUSH
57765: LD_VAR 0 8
57769: PPUSH
57770: LD_INT 4
57772: PPUSH
57773: LD_INT 4
57775: PPUSH
57776: CALL_OW 273
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_VAR 0 7
57789: PPUSH
57790: LD_INT 5
57792: PPUSH
57793: LD_INT 4
57795: PPUSH
57796: CALL_OW 272
57800: PUSH
57801: LD_VAR 0 8
57805: PPUSH
57806: LD_INT 5
57808: PPUSH
57809: LD_INT 4
57811: PPUSH
57812: CALL_OW 273
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: ST_TO_ADDR
// for i = tmp downto 1 do
57829: LD_ADDR_VAR 0 4
57833: PUSH
57834: DOUBLE
57835: LD_VAR 0 6
57839: INC
57840: ST_TO_ADDR
57841: LD_INT 1
57843: PUSH
57844: FOR_DOWNTO
57845: IFFALSE 57946
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57847: LD_VAR 0 6
57851: PUSH
57852: LD_VAR 0 4
57856: ARRAY
57857: PUSH
57858: LD_INT 1
57860: ARRAY
57861: PPUSH
57862: LD_VAR 0 6
57866: PUSH
57867: LD_VAR 0 4
57871: ARRAY
57872: PUSH
57873: LD_INT 2
57875: ARRAY
57876: PPUSH
57877: CALL_OW 488
57881: NOT
57882: PUSH
57883: LD_VAR 0 6
57887: PUSH
57888: LD_VAR 0 4
57892: ARRAY
57893: PUSH
57894: LD_INT 1
57896: ARRAY
57897: PPUSH
57898: LD_VAR 0 6
57902: PUSH
57903: LD_VAR 0 4
57907: ARRAY
57908: PUSH
57909: LD_INT 2
57911: ARRAY
57912: PPUSH
57913: CALL_OW 428
57917: PUSH
57918: LD_INT 0
57920: NONEQUAL
57921: OR
57922: IFFALSE 57944
// tmp := Delete ( tmp , i ) ;
57924: LD_ADDR_VAR 0 6
57928: PUSH
57929: LD_VAR 0 6
57933: PPUSH
57934: LD_VAR 0 4
57938: PPUSH
57939: CALL_OW 3
57943: ST_TO_ADDR
57944: GO 57844
57946: POP
57947: POP
// j := GetClosestHex ( unit , tmp ) ;
57948: LD_ADDR_VAR 0 5
57952: PUSH
57953: LD_VAR 0 1
57957: PPUSH
57958: LD_VAR 0 6
57962: PPUSH
57963: CALL 57239 0 2
57967: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57968: LD_VAR 0 1
57972: PPUSH
57973: LD_VAR 0 5
57977: PUSH
57978: LD_INT 1
57980: ARRAY
57981: PPUSH
57982: LD_VAR 0 5
57986: PUSH
57987: LD_INT 2
57989: ARRAY
57990: PPUSH
57991: CALL_OW 111
// end ;
57995: LD_VAR 0 3
57999: RET
// export function PrepareApemanSoldier ( ) ; begin
58000: LD_INT 0
58002: PPUSH
// uc_nation := 0 ;
58003: LD_ADDR_OWVAR 21
58007: PUSH
58008: LD_INT 0
58010: ST_TO_ADDR
// hc_sex := sex_male ;
58011: LD_ADDR_OWVAR 27
58015: PUSH
58016: LD_INT 1
58018: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58019: LD_ADDR_OWVAR 28
58023: PUSH
58024: LD_INT 15
58026: ST_TO_ADDR
// hc_gallery :=  ;
58027: LD_ADDR_OWVAR 33
58031: PUSH
58032: LD_STRING 
58034: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58035: LD_ADDR_OWVAR 31
58039: PUSH
58040: LD_INT 0
58042: PPUSH
58043: LD_INT 3
58045: PPUSH
58046: CALL_OW 12
58050: PUSH
58051: LD_INT 0
58053: PPUSH
58054: LD_INT 3
58056: PPUSH
58057: CALL_OW 12
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: ST_TO_ADDR
// end ;
58074: LD_VAR 0 1
58078: RET
// export function PrepareApemanEngineer ( ) ; begin
58079: LD_INT 0
58081: PPUSH
// uc_nation := 0 ;
58082: LD_ADDR_OWVAR 21
58086: PUSH
58087: LD_INT 0
58089: ST_TO_ADDR
// hc_sex := sex_male ;
58090: LD_ADDR_OWVAR 27
58094: PUSH
58095: LD_INT 1
58097: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58098: LD_ADDR_OWVAR 28
58102: PUSH
58103: LD_INT 16
58105: ST_TO_ADDR
// hc_gallery :=  ;
58106: LD_ADDR_OWVAR 33
58110: PUSH
58111: LD_STRING 
58113: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58114: LD_ADDR_OWVAR 31
58118: PUSH
58119: LD_INT 0
58121: PPUSH
58122: LD_INT 3
58124: PPUSH
58125: CALL_OW 12
58129: PUSH
58130: LD_INT 0
58132: PPUSH
58133: LD_INT 3
58135: PPUSH
58136: CALL_OW 12
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// end ;
58153: LD_VAR 0 1
58157: RET
// export function PrepareApeman ( agressivity ) ; begin
58158: LD_INT 0
58160: PPUSH
// uc_side := 0 ;
58161: LD_ADDR_OWVAR 20
58165: PUSH
58166: LD_INT 0
58168: ST_TO_ADDR
// uc_nation := 0 ;
58169: LD_ADDR_OWVAR 21
58173: PUSH
58174: LD_INT 0
58176: ST_TO_ADDR
// hc_sex := sex_male ;
58177: LD_ADDR_OWVAR 27
58181: PUSH
58182: LD_INT 1
58184: ST_TO_ADDR
// hc_class := class_apeman ;
58185: LD_ADDR_OWVAR 28
58189: PUSH
58190: LD_INT 12
58192: ST_TO_ADDR
// hc_gallery :=  ;
58193: LD_ADDR_OWVAR 33
58197: PUSH
58198: LD_STRING 
58200: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58201: LD_ADDR_OWVAR 35
58205: PUSH
58206: LD_VAR 0 1
58210: NEG
58211: PPUSH
58212: LD_VAR 0 1
58216: PPUSH
58217: CALL_OW 12
58221: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58222: LD_ADDR_OWVAR 31
58226: PUSH
58227: LD_INT 0
58229: PPUSH
58230: LD_INT 3
58232: PPUSH
58233: CALL_OW 12
58237: PUSH
58238: LD_INT 0
58240: PPUSH
58241: LD_INT 3
58243: PPUSH
58244: CALL_OW 12
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: ST_TO_ADDR
// end ;
58261: LD_VAR 0 2
58265: RET
// export function PrepareTiger ( agressivity ) ; begin
58266: LD_INT 0
58268: PPUSH
// uc_side := 0 ;
58269: LD_ADDR_OWVAR 20
58273: PUSH
58274: LD_INT 0
58276: ST_TO_ADDR
// uc_nation := 0 ;
58277: LD_ADDR_OWVAR 21
58281: PUSH
58282: LD_INT 0
58284: ST_TO_ADDR
// hc_class := class_tiger ;
58285: LD_ADDR_OWVAR 28
58289: PUSH
58290: LD_INT 14
58292: ST_TO_ADDR
// hc_gallery :=  ;
58293: LD_ADDR_OWVAR 33
58297: PUSH
58298: LD_STRING 
58300: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58301: LD_ADDR_OWVAR 35
58305: PUSH
58306: LD_VAR 0 1
58310: NEG
58311: PPUSH
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL_OW 12
58321: ST_TO_ADDR
// end ;
58322: LD_VAR 0 2
58326: RET
// export function PrepareEnchidna ( ) ; begin
58327: LD_INT 0
58329: PPUSH
// uc_side := 0 ;
58330: LD_ADDR_OWVAR 20
58334: PUSH
58335: LD_INT 0
58337: ST_TO_ADDR
// uc_nation := 0 ;
58338: LD_ADDR_OWVAR 21
58342: PUSH
58343: LD_INT 0
58345: ST_TO_ADDR
// hc_class := class_baggie ;
58346: LD_ADDR_OWVAR 28
58350: PUSH
58351: LD_INT 13
58353: ST_TO_ADDR
// hc_gallery :=  ;
58354: LD_ADDR_OWVAR 33
58358: PUSH
58359: LD_STRING 
58361: ST_TO_ADDR
// end ;
58362: LD_VAR 0 1
58366: RET
// export function PrepareFrog ( ) ; begin
58367: LD_INT 0
58369: PPUSH
// uc_side := 0 ;
58370: LD_ADDR_OWVAR 20
58374: PUSH
58375: LD_INT 0
58377: ST_TO_ADDR
// uc_nation := 0 ;
58378: LD_ADDR_OWVAR 21
58382: PUSH
58383: LD_INT 0
58385: ST_TO_ADDR
// hc_class := class_frog ;
58386: LD_ADDR_OWVAR 28
58390: PUSH
58391: LD_INT 19
58393: ST_TO_ADDR
// hc_gallery :=  ;
58394: LD_ADDR_OWVAR 33
58398: PUSH
58399: LD_STRING 
58401: ST_TO_ADDR
// end ;
58402: LD_VAR 0 1
58406: RET
// export function PrepareFish ( ) ; begin
58407: LD_INT 0
58409: PPUSH
// uc_side := 0 ;
58410: LD_ADDR_OWVAR 20
58414: PUSH
58415: LD_INT 0
58417: ST_TO_ADDR
// uc_nation := 0 ;
58418: LD_ADDR_OWVAR 21
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// hc_class := class_fish ;
58426: LD_ADDR_OWVAR 28
58430: PUSH
58431: LD_INT 20
58433: ST_TO_ADDR
// hc_gallery :=  ;
58434: LD_ADDR_OWVAR 33
58438: PUSH
58439: LD_STRING 
58441: ST_TO_ADDR
// end ;
58442: LD_VAR 0 1
58446: RET
// export function PrepareBird ( ) ; begin
58447: LD_INT 0
58449: PPUSH
// uc_side := 0 ;
58450: LD_ADDR_OWVAR 20
58454: PUSH
58455: LD_INT 0
58457: ST_TO_ADDR
// uc_nation := 0 ;
58458: LD_ADDR_OWVAR 21
58462: PUSH
58463: LD_INT 0
58465: ST_TO_ADDR
// hc_class := class_phororhacos ;
58466: LD_ADDR_OWVAR 28
58470: PUSH
58471: LD_INT 18
58473: ST_TO_ADDR
// hc_gallery :=  ;
58474: LD_ADDR_OWVAR 33
58478: PUSH
58479: LD_STRING 
58481: ST_TO_ADDR
// end ;
58482: LD_VAR 0 1
58486: RET
// export function PrepareHorse ( ) ; begin
58487: LD_INT 0
58489: PPUSH
// uc_side := 0 ;
58490: LD_ADDR_OWVAR 20
58494: PUSH
58495: LD_INT 0
58497: ST_TO_ADDR
// uc_nation := 0 ;
58498: LD_ADDR_OWVAR 21
58502: PUSH
58503: LD_INT 0
58505: ST_TO_ADDR
// hc_class := class_horse ;
58506: LD_ADDR_OWVAR 28
58510: PUSH
58511: LD_INT 21
58513: ST_TO_ADDR
// hc_gallery :=  ;
58514: LD_ADDR_OWVAR 33
58518: PUSH
58519: LD_STRING 
58521: ST_TO_ADDR
// end ;
58522: LD_VAR 0 1
58526: RET
// export function PrepareMastodont ( ) ; begin
58527: LD_INT 0
58529: PPUSH
// uc_side := 0 ;
58530: LD_ADDR_OWVAR 20
58534: PUSH
58535: LD_INT 0
58537: ST_TO_ADDR
// uc_nation := 0 ;
58538: LD_ADDR_OWVAR 21
58542: PUSH
58543: LD_INT 0
58545: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58546: LD_ADDR_OWVAR 37
58550: PUSH
58551: LD_INT 31
58553: ST_TO_ADDR
// vc_control := control_rider ;
58554: LD_ADDR_OWVAR 38
58558: PUSH
58559: LD_INT 4
58561: ST_TO_ADDR
// end ;
58562: LD_VAR 0 1
58566: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58567: LD_INT 0
58569: PPUSH
58570: PPUSH
58571: PPUSH
// uc_side = 0 ;
58572: LD_ADDR_OWVAR 20
58576: PUSH
58577: LD_INT 0
58579: ST_TO_ADDR
// uc_nation = 0 ;
58580: LD_ADDR_OWVAR 21
58584: PUSH
58585: LD_INT 0
58587: ST_TO_ADDR
// InitHc_All ( ) ;
58588: CALL_OW 584
// InitVc ;
58592: CALL_OW 20
// if mastodonts then
58596: LD_VAR 0 6
58600: IFFALSE 58667
// for i = 1 to mastodonts do
58602: LD_ADDR_VAR 0 11
58606: PUSH
58607: DOUBLE
58608: LD_INT 1
58610: DEC
58611: ST_TO_ADDR
58612: LD_VAR 0 6
58616: PUSH
58617: FOR_TO
58618: IFFALSE 58665
// begin vc_chassis := 31 ;
58620: LD_ADDR_OWVAR 37
58624: PUSH
58625: LD_INT 31
58627: ST_TO_ADDR
// vc_control := control_rider ;
58628: LD_ADDR_OWVAR 38
58632: PUSH
58633: LD_INT 4
58635: ST_TO_ADDR
// animal := CreateVehicle ;
58636: LD_ADDR_VAR 0 12
58640: PUSH
58641: CALL_OW 45
58645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58646: LD_VAR 0 12
58650: PPUSH
58651: LD_VAR 0 8
58655: PPUSH
58656: LD_INT 0
58658: PPUSH
58659: CALL 60795 0 3
// end ;
58663: GO 58617
58665: POP
58666: POP
// if horses then
58667: LD_VAR 0 5
58671: IFFALSE 58738
// for i = 1 to horses do
58673: LD_ADDR_VAR 0 11
58677: PUSH
58678: DOUBLE
58679: LD_INT 1
58681: DEC
58682: ST_TO_ADDR
58683: LD_VAR 0 5
58687: PUSH
58688: FOR_TO
58689: IFFALSE 58736
// begin hc_class := 21 ;
58691: LD_ADDR_OWVAR 28
58695: PUSH
58696: LD_INT 21
58698: ST_TO_ADDR
// hc_gallery :=  ;
58699: LD_ADDR_OWVAR 33
58703: PUSH
58704: LD_STRING 
58706: ST_TO_ADDR
// animal := CreateHuman ;
58707: LD_ADDR_VAR 0 12
58711: PUSH
58712: CALL_OW 44
58716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58717: LD_VAR 0 12
58721: PPUSH
58722: LD_VAR 0 8
58726: PPUSH
58727: LD_INT 0
58729: PPUSH
58730: CALL 60795 0 3
// end ;
58734: GO 58688
58736: POP
58737: POP
// if birds then
58738: LD_VAR 0 1
58742: IFFALSE 58809
// for i = 1 to birds do
58744: LD_ADDR_VAR 0 11
58748: PUSH
58749: DOUBLE
58750: LD_INT 1
58752: DEC
58753: ST_TO_ADDR
58754: LD_VAR 0 1
58758: PUSH
58759: FOR_TO
58760: IFFALSE 58807
// begin hc_class := 18 ;
58762: LD_ADDR_OWVAR 28
58766: PUSH
58767: LD_INT 18
58769: ST_TO_ADDR
// hc_gallery =  ;
58770: LD_ADDR_OWVAR 33
58774: PUSH
58775: LD_STRING 
58777: ST_TO_ADDR
// animal := CreateHuman ;
58778: LD_ADDR_VAR 0 12
58782: PUSH
58783: CALL_OW 44
58787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58788: LD_VAR 0 12
58792: PPUSH
58793: LD_VAR 0 8
58797: PPUSH
58798: LD_INT 0
58800: PPUSH
58801: CALL 60795 0 3
// end ;
58805: GO 58759
58807: POP
58808: POP
// if tigers then
58809: LD_VAR 0 2
58813: IFFALSE 58897
// for i = 1 to tigers do
58815: LD_ADDR_VAR 0 11
58819: PUSH
58820: DOUBLE
58821: LD_INT 1
58823: DEC
58824: ST_TO_ADDR
58825: LD_VAR 0 2
58829: PUSH
58830: FOR_TO
58831: IFFALSE 58895
// begin hc_class = class_tiger ;
58833: LD_ADDR_OWVAR 28
58837: PUSH
58838: LD_INT 14
58840: ST_TO_ADDR
// hc_gallery =  ;
58841: LD_ADDR_OWVAR 33
58845: PUSH
58846: LD_STRING 
58848: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58849: LD_ADDR_OWVAR 35
58853: PUSH
58854: LD_INT 7
58856: NEG
58857: PPUSH
58858: LD_INT 7
58860: PPUSH
58861: CALL_OW 12
58865: ST_TO_ADDR
// animal := CreateHuman ;
58866: LD_ADDR_VAR 0 12
58870: PUSH
58871: CALL_OW 44
58875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58876: LD_VAR 0 12
58880: PPUSH
58881: LD_VAR 0 8
58885: PPUSH
58886: LD_INT 0
58888: PPUSH
58889: CALL 60795 0 3
// end ;
58893: GO 58830
58895: POP
58896: POP
// if apemans then
58897: LD_VAR 0 3
58901: IFFALSE 59024
// for i = 1 to apemans do
58903: LD_ADDR_VAR 0 11
58907: PUSH
58908: DOUBLE
58909: LD_INT 1
58911: DEC
58912: ST_TO_ADDR
58913: LD_VAR 0 3
58917: PUSH
58918: FOR_TO
58919: IFFALSE 59022
// begin hc_class = class_apeman ;
58921: LD_ADDR_OWVAR 28
58925: PUSH
58926: LD_INT 12
58928: ST_TO_ADDR
// hc_gallery =  ;
58929: LD_ADDR_OWVAR 33
58933: PUSH
58934: LD_STRING 
58936: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58937: LD_ADDR_OWVAR 35
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PPUSH
58946: LD_INT 2
58948: PPUSH
58949: CALL_OW 12
58953: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58954: LD_ADDR_OWVAR 31
58958: PUSH
58959: LD_INT 1
58961: PPUSH
58962: LD_INT 3
58964: PPUSH
58965: CALL_OW 12
58969: PUSH
58970: LD_INT 1
58972: PPUSH
58973: LD_INT 3
58975: PPUSH
58976: CALL_OW 12
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: ST_TO_ADDR
// animal := CreateHuman ;
58993: LD_ADDR_VAR 0 12
58997: PUSH
58998: CALL_OW 44
59002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59003: LD_VAR 0 12
59007: PPUSH
59008: LD_VAR 0 8
59012: PPUSH
59013: LD_INT 0
59015: PPUSH
59016: CALL 60795 0 3
// end ;
59020: GO 58918
59022: POP
59023: POP
// if enchidnas then
59024: LD_VAR 0 4
59028: IFFALSE 59095
// for i = 1 to enchidnas do
59030: LD_ADDR_VAR 0 11
59034: PUSH
59035: DOUBLE
59036: LD_INT 1
59038: DEC
59039: ST_TO_ADDR
59040: LD_VAR 0 4
59044: PUSH
59045: FOR_TO
59046: IFFALSE 59093
// begin hc_class = 13 ;
59048: LD_ADDR_OWVAR 28
59052: PUSH
59053: LD_INT 13
59055: ST_TO_ADDR
// hc_gallery =  ;
59056: LD_ADDR_OWVAR 33
59060: PUSH
59061: LD_STRING 
59063: ST_TO_ADDR
// animal := CreateHuman ;
59064: LD_ADDR_VAR 0 12
59068: PUSH
59069: CALL_OW 44
59073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59074: LD_VAR 0 12
59078: PPUSH
59079: LD_VAR 0 8
59083: PPUSH
59084: LD_INT 0
59086: PPUSH
59087: CALL 60795 0 3
// end ;
59091: GO 59045
59093: POP
59094: POP
// if fishes then
59095: LD_VAR 0 7
59099: IFFALSE 59166
// for i = 1 to fishes do
59101: LD_ADDR_VAR 0 11
59105: PUSH
59106: DOUBLE
59107: LD_INT 1
59109: DEC
59110: ST_TO_ADDR
59111: LD_VAR 0 7
59115: PUSH
59116: FOR_TO
59117: IFFALSE 59164
// begin hc_class = 20 ;
59119: LD_ADDR_OWVAR 28
59123: PUSH
59124: LD_INT 20
59126: ST_TO_ADDR
// hc_gallery =  ;
59127: LD_ADDR_OWVAR 33
59131: PUSH
59132: LD_STRING 
59134: ST_TO_ADDR
// animal := CreateHuman ;
59135: LD_ADDR_VAR 0 12
59139: PUSH
59140: CALL_OW 44
59144: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59145: LD_VAR 0 12
59149: PPUSH
59150: LD_VAR 0 9
59154: PPUSH
59155: LD_INT 0
59157: PPUSH
59158: CALL 60795 0 3
// end ;
59162: GO 59116
59164: POP
59165: POP
// end ;
59166: LD_VAR 0 10
59170: RET
// export function WantHeal ( sci , unit ) ; begin
59171: LD_INT 0
59173: PPUSH
// if GetTaskList ( sci ) > 0 then
59174: LD_VAR 0 1
59178: PPUSH
59179: CALL_OW 437
59183: PUSH
59184: LD_INT 0
59186: GREATER
59187: IFFALSE 59257
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59189: LD_VAR 0 1
59193: PPUSH
59194: CALL_OW 437
59198: PUSH
59199: LD_INT 1
59201: ARRAY
59202: PUSH
59203: LD_INT 1
59205: ARRAY
59206: PUSH
59207: LD_STRING l
59209: EQUAL
59210: PUSH
59211: LD_VAR 0 1
59215: PPUSH
59216: CALL_OW 437
59220: PUSH
59221: LD_INT 1
59223: ARRAY
59224: PUSH
59225: LD_INT 4
59227: ARRAY
59228: PUSH
59229: LD_VAR 0 2
59233: EQUAL
59234: AND
59235: IFFALSE 59247
// result := true else
59237: LD_ADDR_VAR 0 3
59241: PUSH
59242: LD_INT 1
59244: ST_TO_ADDR
59245: GO 59255
// result := false ;
59247: LD_ADDR_VAR 0 3
59251: PUSH
59252: LD_INT 0
59254: ST_TO_ADDR
// end else
59255: GO 59265
// result := false ;
59257: LD_ADDR_VAR 0 3
59261: PUSH
59262: LD_INT 0
59264: ST_TO_ADDR
// end ;
59265: LD_VAR 0 3
59269: RET
// export function HealTarget ( sci ) ; begin
59270: LD_INT 0
59272: PPUSH
// if not sci then
59273: LD_VAR 0 1
59277: NOT
59278: IFFALSE 59282
// exit ;
59280: GO 59347
// result := 0 ;
59282: LD_ADDR_VAR 0 2
59286: PUSH
59287: LD_INT 0
59289: ST_TO_ADDR
// if GetTaskList ( sci ) then
59290: LD_VAR 0 1
59294: PPUSH
59295: CALL_OW 437
59299: IFFALSE 59347
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 437
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PUSH
59315: LD_INT 1
59317: ARRAY
59318: PUSH
59319: LD_STRING l
59321: EQUAL
59322: IFFALSE 59347
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59324: LD_ADDR_VAR 0 2
59328: PUSH
59329: LD_VAR 0 1
59333: PPUSH
59334: CALL_OW 437
59338: PUSH
59339: LD_INT 1
59341: ARRAY
59342: PUSH
59343: LD_INT 4
59345: ARRAY
59346: ST_TO_ADDR
// end ;
59347: LD_VAR 0 2
59351: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59352: LD_INT 0
59354: PPUSH
59355: PPUSH
59356: PPUSH
59357: PPUSH
// if not base_units then
59358: LD_VAR 0 1
59362: NOT
59363: IFFALSE 59367
// exit ;
59365: GO 59454
// result := false ;
59367: LD_ADDR_VAR 0 2
59371: PUSH
59372: LD_INT 0
59374: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59375: LD_ADDR_VAR 0 5
59379: PUSH
59380: LD_VAR 0 1
59384: PPUSH
59385: LD_INT 21
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PPUSH
59395: CALL_OW 72
59399: ST_TO_ADDR
// if not tmp then
59400: LD_VAR 0 5
59404: NOT
59405: IFFALSE 59409
// exit ;
59407: GO 59454
// for i in tmp do
59409: LD_ADDR_VAR 0 3
59413: PUSH
59414: LD_VAR 0 5
59418: PUSH
59419: FOR_IN
59420: IFFALSE 59452
// begin result := EnemyInRange ( i , 22 ) ;
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: LD_VAR 0 3
59431: PPUSH
59432: LD_INT 22
59434: PPUSH
59435: CALL 57041 0 2
59439: ST_TO_ADDR
// if result then
59440: LD_VAR 0 2
59444: IFFALSE 59450
// exit ;
59446: POP
59447: POP
59448: GO 59454
// end ;
59450: GO 59419
59452: POP
59453: POP
// end ;
59454: LD_VAR 0 2
59458: RET
// export function FilterByTag ( units , tag ) ; begin
59459: LD_INT 0
59461: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59462: LD_ADDR_VAR 0 3
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: LD_INT 120
59474: PUSH
59475: LD_VAR 0 2
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PPUSH
59484: CALL_OW 72
59488: ST_TO_ADDR
// end ;
59489: LD_VAR 0 3
59493: RET
// export function IsDriver ( un ) ; begin
59494: LD_INT 0
59496: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59497: LD_ADDR_VAR 0 2
59501: PUSH
59502: LD_VAR 0 1
59506: PUSH
59507: LD_INT 55
59509: PUSH
59510: EMPTY
59511: LIST
59512: PPUSH
59513: CALL_OW 69
59517: IN
59518: ST_TO_ADDR
// end ;
59519: LD_VAR 0 2
59523: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59524: LD_INT 0
59526: PPUSH
59527: PPUSH
// list := [ ] ;
59528: LD_ADDR_VAR 0 5
59532: PUSH
59533: EMPTY
59534: ST_TO_ADDR
// case d of 0 :
59535: LD_VAR 0 3
59539: PUSH
59540: LD_INT 0
59542: DOUBLE
59543: EQUAL
59544: IFTRUE 59548
59546: GO 59681
59548: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59549: LD_ADDR_VAR 0 5
59553: PUSH
59554: LD_VAR 0 1
59558: PUSH
59559: LD_INT 4
59561: MINUS
59562: PUSH
59563: LD_VAR 0 2
59567: PUSH
59568: LD_INT 4
59570: MINUS
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: PUSH
59580: LD_VAR 0 1
59584: PUSH
59585: LD_INT 3
59587: MINUS
59588: PUSH
59589: LD_VAR 0 2
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: PUSH
59602: LD_VAR 0 1
59606: PUSH
59607: LD_INT 4
59609: PLUS
59610: PUSH
59611: LD_VAR 0 2
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: PUSH
59624: LD_VAR 0 1
59628: PUSH
59629: LD_INT 3
59631: PLUS
59632: PUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_INT 3
59640: PLUS
59641: PUSH
59642: LD_INT 5
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: LIST
59649: PUSH
59650: LD_VAR 0 1
59654: PUSH
59655: LD_VAR 0 2
59659: PUSH
59660: LD_INT 4
59662: PLUS
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// end ; 1 :
59679: GO 60379
59681: LD_INT 1
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59689
59687: GO 59822
59689: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59690: LD_ADDR_VAR 0 5
59694: PUSH
59695: LD_VAR 0 1
59699: PUSH
59700: LD_VAR 0 2
59704: PUSH
59705: LD_INT 4
59707: MINUS
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: LIST
59716: PUSH
59717: LD_VAR 0 1
59721: PUSH
59722: LD_INT 3
59724: MINUS
59725: PUSH
59726: LD_VAR 0 2
59730: PUSH
59731: LD_INT 3
59733: MINUS
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: PUSH
59743: LD_VAR 0 1
59747: PUSH
59748: LD_INT 4
59750: MINUS
59751: PUSH
59752: LD_VAR 0 2
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: PUSH
59765: LD_VAR 0 1
59769: PUSH
59770: LD_VAR 0 2
59774: PUSH
59775: LD_INT 3
59777: PLUS
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: LD_VAR 0 1
59791: PUSH
59792: LD_INT 4
59794: PLUS
59795: PUSH
59796: LD_VAR 0 2
59800: PUSH
59801: LD_INT 4
59803: PLUS
59804: PUSH
59805: LD_INT 5
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// end ; 2 :
59820: GO 60379
59822: LD_INT 2
59824: DOUBLE
59825: EQUAL
59826: IFTRUE 59830
59828: GO 59959
59830: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59831: LD_ADDR_VAR 0 5
59835: PUSH
59836: LD_VAR 0 1
59840: PUSH
59841: LD_VAR 0 2
59845: PUSH
59846: LD_INT 3
59848: MINUS
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: PUSH
59858: LD_VAR 0 1
59862: PUSH
59863: LD_INT 4
59865: PLUS
59866: PUSH
59867: LD_VAR 0 2
59871: PUSH
59872: LD_INT 4
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: PUSH
59880: LD_VAR 0 1
59884: PUSH
59885: LD_VAR 0 2
59889: PUSH
59890: LD_INT 4
59892: PLUS
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: PUSH
59902: LD_VAR 0 1
59906: PUSH
59907: LD_INT 3
59909: MINUS
59910: PUSH
59911: LD_VAR 0 2
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: PUSH
59924: LD_VAR 0 1
59928: PUSH
59929: LD_INT 4
59931: MINUS
59932: PUSH
59933: LD_VAR 0 2
59937: PUSH
59938: LD_INT 4
59940: MINUS
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// end ; 3 :
59957: GO 60379
59959: LD_INT 3
59961: DOUBLE
59962: EQUAL
59963: IFTRUE 59967
59965: GO 60100
59967: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59968: LD_ADDR_VAR 0 5
59972: PUSH
59973: LD_VAR 0 1
59977: PUSH
59978: LD_INT 3
59980: PLUS
59981: PUSH
59982: LD_VAR 0 2
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: PUSH
59995: LD_VAR 0 1
59999: PUSH
60000: LD_INT 4
60002: PLUS
60003: PUSH
60004: LD_VAR 0 2
60008: PUSH
60009: LD_INT 4
60011: PLUS
60012: PUSH
60013: LD_INT 5
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: LIST
60020: PUSH
60021: LD_VAR 0 1
60025: PUSH
60026: LD_INT 4
60028: MINUS
60029: PUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: LD_VAR 0 1
60047: PUSH
60048: LD_VAR 0 2
60052: PUSH
60053: LD_INT 4
60055: MINUS
60056: PUSH
60057: LD_INT 3
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: LD_INT 3
60072: MINUS
60073: PUSH
60074: LD_VAR 0 2
60078: PUSH
60079: LD_INT 3
60081: MINUS
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: ST_TO_ADDR
// end ; 4 :
60098: GO 60379
60100: LD_INT 4
60102: DOUBLE
60103: EQUAL
60104: IFTRUE 60108
60106: GO 60241
60108: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60109: LD_ADDR_VAR 0 5
60113: PUSH
60114: LD_VAR 0 1
60118: PUSH
60119: LD_VAR 0 2
60123: PUSH
60124: LD_INT 4
60126: PLUS
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: PUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_INT 3
60143: PLUS
60144: PUSH
60145: LD_VAR 0 2
60149: PUSH
60150: LD_INT 3
60152: PLUS
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: LIST
60161: PUSH
60162: LD_VAR 0 1
60166: PUSH
60167: LD_INT 4
60169: PLUS
60170: PUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_INT 4
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: PUSH
60184: LD_VAR 0 1
60188: PUSH
60189: LD_VAR 0 2
60193: PUSH
60194: LD_INT 3
60196: MINUS
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: PUSH
60206: LD_VAR 0 1
60210: PUSH
60211: LD_INT 4
60213: MINUS
60214: PUSH
60215: LD_VAR 0 2
60219: PUSH
60220: LD_INT 4
60222: MINUS
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: ST_TO_ADDR
// end ; 5 :
60239: GO 60379
60241: LD_INT 5
60243: DOUBLE
60244: EQUAL
60245: IFTRUE 60249
60247: GO 60378
60249: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60250: LD_ADDR_VAR 0 5
60254: PUSH
60255: LD_VAR 0 1
60259: PUSH
60260: LD_INT 4
60262: MINUS
60263: PUSH
60264: LD_VAR 0 2
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: PUSH
60277: LD_VAR 0 1
60281: PUSH
60282: LD_VAR 0 2
60286: PUSH
60287: LD_INT 4
60289: MINUS
60290: PUSH
60291: LD_INT 3
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: PUSH
60299: LD_VAR 0 1
60303: PUSH
60304: LD_INT 4
60306: PLUS
60307: PUSH
60308: LD_VAR 0 2
60312: PUSH
60313: LD_INT 4
60315: PLUS
60316: PUSH
60317: LD_INT 5
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: PUSH
60325: LD_VAR 0 1
60329: PUSH
60330: LD_INT 3
60332: PLUS
60333: PUSH
60334: LD_VAR 0 2
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: PUSH
60347: LD_VAR 0 1
60351: PUSH
60352: LD_VAR 0 2
60356: PUSH
60357: LD_INT 3
60359: PLUS
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// end ; end ;
60376: GO 60379
60378: POP
// result := list ;
60379: LD_ADDR_VAR 0 4
60383: PUSH
60384: LD_VAR 0 5
60388: ST_TO_ADDR
// end ;
60389: LD_VAR 0 4
60393: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60394: LD_INT 0
60396: PPUSH
60397: PPUSH
60398: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60399: LD_VAR 0 1
60403: NOT
60404: PUSH
60405: LD_VAR 0 2
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 2
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: LD_INT 4
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: IN
60428: NOT
60429: OR
60430: IFFALSE 60434
// exit ;
60432: GO 60517
// tmp := [ ] ;
60434: LD_ADDR_VAR 0 5
60438: PUSH
60439: EMPTY
60440: ST_TO_ADDR
// for i in units do
60441: LD_ADDR_VAR 0 4
60445: PUSH
60446: LD_VAR 0 1
60450: PUSH
60451: FOR_IN
60452: IFFALSE 60486
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60454: LD_ADDR_VAR 0 5
60458: PUSH
60459: LD_VAR 0 5
60463: PPUSH
60464: LD_VAR 0 4
60468: PPUSH
60469: LD_VAR 0 2
60473: PPUSH
60474: CALL_OW 259
60478: PPUSH
60479: CALL 61877 0 2
60483: ST_TO_ADDR
60484: GO 60451
60486: POP
60487: POP
// if not tmp then
60488: LD_VAR 0 5
60492: NOT
60493: IFFALSE 60497
// exit ;
60495: GO 60517
// result := SortListByListDesc ( units , tmp ) ;
60497: LD_ADDR_VAR 0 3
60501: PUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: LD_VAR 0 5
60511: PPUSH
60512: CALL_OW 77
60516: ST_TO_ADDR
// end ;
60517: LD_VAR 0 3
60521: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60522: LD_INT 0
60524: PPUSH
60525: PPUSH
60526: PPUSH
// result := false ;
60527: LD_ADDR_VAR 0 3
60531: PUSH
60532: LD_INT 0
60534: ST_TO_ADDR
// if not building then
60535: LD_VAR 0 2
60539: NOT
60540: IFFALSE 60544
// exit ;
60542: GO 60682
// x := GetX ( building ) ;
60544: LD_ADDR_VAR 0 4
60548: PUSH
60549: LD_VAR 0 2
60553: PPUSH
60554: CALL_OW 250
60558: ST_TO_ADDR
// y := GetY ( building ) ;
60559: LD_ADDR_VAR 0 5
60563: PUSH
60564: LD_VAR 0 2
60568: PPUSH
60569: CALL_OW 251
60573: ST_TO_ADDR
// if not x or not y then
60574: LD_VAR 0 4
60578: NOT
60579: PUSH
60580: LD_VAR 0 5
60584: NOT
60585: OR
60586: IFFALSE 60590
// exit ;
60588: GO 60682
// if GetTaskList ( unit ) then
60590: LD_VAR 0 1
60594: PPUSH
60595: CALL_OW 437
60599: IFFALSE 60682
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60601: LD_STRING e
60603: PUSH
60604: LD_VAR 0 1
60608: PPUSH
60609: CALL_OW 437
60613: PUSH
60614: LD_INT 1
60616: ARRAY
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: EQUAL
60622: PUSH
60623: LD_VAR 0 4
60627: PUSH
60628: LD_VAR 0 1
60632: PPUSH
60633: CALL_OW 437
60637: PUSH
60638: LD_INT 1
60640: ARRAY
60641: PUSH
60642: LD_INT 2
60644: ARRAY
60645: EQUAL
60646: AND
60647: PUSH
60648: LD_VAR 0 5
60652: PUSH
60653: LD_VAR 0 1
60657: PPUSH
60658: CALL_OW 437
60662: PUSH
60663: LD_INT 1
60665: ARRAY
60666: PUSH
60667: LD_INT 3
60669: ARRAY
60670: EQUAL
60671: AND
60672: IFFALSE 60682
// result := true end ;
60674: LD_ADDR_VAR 0 3
60678: PUSH
60679: LD_INT 1
60681: ST_TO_ADDR
// end ;
60682: LD_VAR 0 3
60686: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60687: LD_INT 0
60689: PPUSH
// result := false ;
60690: LD_ADDR_VAR 0 4
60694: PUSH
60695: LD_INT 0
60697: ST_TO_ADDR
// if GetTaskList ( unit ) then
60698: LD_VAR 0 1
60702: PPUSH
60703: CALL_OW 437
60707: IFFALSE 60790
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60709: LD_STRING M
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 437
60721: PUSH
60722: LD_INT 1
60724: ARRAY
60725: PUSH
60726: LD_INT 1
60728: ARRAY
60729: EQUAL
60730: PUSH
60731: LD_VAR 0 2
60735: PUSH
60736: LD_VAR 0 1
60740: PPUSH
60741: CALL_OW 437
60745: PUSH
60746: LD_INT 1
60748: ARRAY
60749: PUSH
60750: LD_INT 2
60752: ARRAY
60753: EQUAL
60754: AND
60755: PUSH
60756: LD_VAR 0 3
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: CALL_OW 437
60770: PUSH
60771: LD_INT 1
60773: ARRAY
60774: PUSH
60775: LD_INT 3
60777: ARRAY
60778: EQUAL
60779: AND
60780: IFFALSE 60790
// result := true ;
60782: LD_ADDR_VAR 0 4
60786: PUSH
60787: LD_INT 1
60789: ST_TO_ADDR
// end ; end ;
60790: LD_VAR 0 4
60794: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
60799: PPUSH
60800: PPUSH
// if not unit or not area then
60801: LD_VAR 0 1
60805: NOT
60806: PUSH
60807: LD_VAR 0 2
60811: NOT
60812: OR
60813: IFFALSE 60817
// exit ;
60815: GO 60980
// tmp := AreaToList ( area , i ) ;
60817: LD_ADDR_VAR 0 6
60821: PUSH
60822: LD_VAR 0 2
60826: PPUSH
60827: LD_VAR 0 5
60831: PPUSH
60832: CALL_OW 517
60836: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60837: LD_ADDR_VAR 0 5
60841: PUSH
60842: DOUBLE
60843: LD_INT 1
60845: DEC
60846: ST_TO_ADDR
60847: LD_VAR 0 6
60851: PUSH
60852: LD_INT 1
60854: ARRAY
60855: PUSH
60856: FOR_TO
60857: IFFALSE 60978
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60859: LD_ADDR_VAR 0 7
60863: PUSH
60864: LD_VAR 0 6
60868: PUSH
60869: LD_INT 1
60871: ARRAY
60872: PUSH
60873: LD_VAR 0 5
60877: ARRAY
60878: PUSH
60879: LD_VAR 0 6
60883: PUSH
60884: LD_INT 2
60886: ARRAY
60887: PUSH
60888: LD_VAR 0 5
60892: ARRAY
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
60898: LD_INT 92
60900: PUSH
60901: LD_VAR 0 7
60905: PUSH
60906: LD_INT 1
60908: ARRAY
60909: PUSH
60910: LD_VAR 0 7
60914: PUSH
60915: LD_INT 2
60917: ARRAY
60918: PUSH
60919: LD_INT 3
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: PPUSH
60928: CALL_OW 69
60932: PUSH
60933: LD_INT 0
60935: EQUAL
60936: IFFALSE 60976
// begin PlaceUnitArea ( unit , area , mode ) ;
60938: LD_VAR 0 1
60942: PPUSH
60943: LD_VAR 0 2
60947: PPUSH
60948: LD_VAR 0 3
60952: PPUSH
60953: CALL_OW 49
// result := IsPlaced ( unit ) ;
60957: LD_ADDR_VAR 0 4
60961: PUSH
60962: LD_VAR 0 1
60966: PPUSH
60967: CALL_OW 305
60971: ST_TO_ADDR
// exit ;
60972: POP
60973: POP
60974: GO 60980
// end ; end ;
60976: GO 60856
60978: POP
60979: POP
// end ;
60980: LD_VAR 0 4
60984: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60985: LD_INT 0
60987: PPUSH
60988: PPUSH
60989: PPUSH
// if not side or side > 8 then
60990: LD_VAR 0 1
60994: NOT
60995: PUSH
60996: LD_VAR 0 1
61000: PUSH
61001: LD_INT 8
61003: GREATER
61004: OR
61005: IFFALSE 61009
// exit ;
61007: GO 61196
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61009: LD_ADDR_VAR 0 4
61013: PUSH
61014: LD_INT 22
61016: PUSH
61017: LD_VAR 0 1
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 21
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PPUSH
61040: CALL_OW 69
61044: ST_TO_ADDR
// if not tmp then
61045: LD_VAR 0 4
61049: NOT
61050: IFFALSE 61054
// exit ;
61052: GO 61196
// enable_addtolog := true ;
61054: LD_ADDR_OWVAR 81
61058: PUSH
61059: LD_INT 1
61061: ST_TO_ADDR
// AddToLog ( [ ) ;
61062: LD_STRING [
61064: PPUSH
61065: CALL_OW 561
// for i in tmp do
61069: LD_ADDR_VAR 0 3
61073: PUSH
61074: LD_VAR 0 4
61078: PUSH
61079: FOR_IN
61080: IFFALSE 61187
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61082: LD_STRING [
61084: PUSH
61085: LD_VAR 0 3
61089: PPUSH
61090: CALL_OW 266
61094: STR
61095: PUSH
61096: LD_STRING , 
61098: STR
61099: PUSH
61100: LD_VAR 0 3
61104: PPUSH
61105: CALL_OW 250
61109: STR
61110: PUSH
61111: LD_STRING , 
61113: STR
61114: PUSH
61115: LD_VAR 0 3
61119: PPUSH
61120: CALL_OW 251
61124: STR
61125: PUSH
61126: LD_STRING , 
61128: STR
61129: PUSH
61130: LD_VAR 0 3
61134: PPUSH
61135: CALL_OW 254
61139: STR
61140: PUSH
61141: LD_STRING , 
61143: STR
61144: PUSH
61145: LD_VAR 0 3
61149: PPUSH
61150: LD_INT 1
61152: PPUSH
61153: CALL_OW 268
61157: STR
61158: PUSH
61159: LD_STRING , 
61161: STR
61162: PUSH
61163: LD_VAR 0 3
61167: PPUSH
61168: LD_INT 2
61170: PPUSH
61171: CALL_OW 268
61175: STR
61176: PUSH
61177: LD_STRING ],
61179: STR
61180: PPUSH
61181: CALL_OW 561
// end ;
61185: GO 61079
61187: POP
61188: POP
// AddToLog ( ]; ) ;
61189: LD_STRING ];
61191: PPUSH
61192: CALL_OW 561
// end ;
61196: LD_VAR 0 2
61200: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61201: LD_INT 0
61203: PPUSH
61204: PPUSH
61205: PPUSH
61206: PPUSH
61207: PPUSH
// if not area or not rate or not max then
61208: LD_VAR 0 1
61212: NOT
61213: PUSH
61214: LD_VAR 0 2
61218: NOT
61219: OR
61220: PUSH
61221: LD_VAR 0 4
61225: NOT
61226: OR
61227: IFFALSE 61231
// exit ;
61229: GO 61420
// while 1 do
61231: LD_INT 1
61233: IFFALSE 61420
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61235: LD_ADDR_VAR 0 9
61239: PUSH
61240: LD_VAR 0 1
61244: PPUSH
61245: LD_INT 1
61247: PPUSH
61248: CALL_OW 287
61252: PUSH
61253: LD_INT 10
61255: MUL
61256: ST_TO_ADDR
// r := rate / 10 ;
61257: LD_ADDR_VAR 0 7
61261: PUSH
61262: LD_VAR 0 2
61266: PUSH
61267: LD_INT 10
61269: DIVREAL
61270: ST_TO_ADDR
// time := 1 1$00 ;
61271: LD_ADDR_VAR 0 8
61275: PUSH
61276: LD_INT 2100
61278: ST_TO_ADDR
// if amount < min then
61279: LD_VAR 0 9
61283: PUSH
61284: LD_VAR 0 3
61288: LESS
61289: IFFALSE 61307
// r := r * 2 else
61291: LD_ADDR_VAR 0 7
61295: PUSH
61296: LD_VAR 0 7
61300: PUSH
61301: LD_INT 2
61303: MUL
61304: ST_TO_ADDR
61305: GO 61333
// if amount > max then
61307: LD_VAR 0 9
61311: PUSH
61312: LD_VAR 0 4
61316: GREATER
61317: IFFALSE 61333
// r := r / 2 ;
61319: LD_ADDR_VAR 0 7
61323: PUSH
61324: LD_VAR 0 7
61328: PUSH
61329: LD_INT 2
61331: DIVREAL
61332: ST_TO_ADDR
// time := time / r ;
61333: LD_ADDR_VAR 0 8
61337: PUSH
61338: LD_VAR 0 8
61342: PUSH
61343: LD_VAR 0 7
61347: DIVREAL
61348: ST_TO_ADDR
// if time < 0 then
61349: LD_VAR 0 8
61353: PUSH
61354: LD_INT 0
61356: LESS
61357: IFFALSE 61374
// time := time * - 1 ;
61359: LD_ADDR_VAR 0 8
61363: PUSH
61364: LD_VAR 0 8
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: MUL
61373: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61374: LD_VAR 0 8
61378: PUSH
61379: LD_INT 35
61381: PPUSH
61382: LD_INT 875
61384: PPUSH
61385: CALL_OW 12
61389: PLUS
61390: PPUSH
61391: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61395: LD_INT 1
61397: PPUSH
61398: LD_INT 5
61400: PPUSH
61401: CALL_OW 12
61405: PPUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: LD_INT 1
61413: PPUSH
61414: CALL_OW 55
// end ;
61418: GO 61231
// end ;
61420: LD_VAR 0 5
61424: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61425: LD_INT 0
61427: PPUSH
61428: PPUSH
61429: PPUSH
61430: PPUSH
61431: PPUSH
61432: PPUSH
61433: PPUSH
61434: PPUSH
// if not turrets or not factories then
61435: LD_VAR 0 1
61439: NOT
61440: PUSH
61441: LD_VAR 0 2
61445: NOT
61446: OR
61447: IFFALSE 61451
// exit ;
61449: GO 61758
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61451: LD_ADDR_VAR 0 10
61455: PUSH
61456: LD_INT 5
61458: PUSH
61459: LD_INT 6
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 4
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 3
61478: PUSH
61479: LD_INT 5
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 24
61493: PUSH
61494: LD_INT 25
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 23
61503: PUSH
61504: LD_INT 27
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 42
61517: PUSH
61518: LD_INT 43
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 44
61527: PUSH
61528: LD_INT 46
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 45
61537: PUSH
61538: LD_INT 47
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// result := [ ] ;
61555: LD_ADDR_VAR 0 3
61559: PUSH
61560: EMPTY
61561: ST_TO_ADDR
// for i in turrets do
61562: LD_ADDR_VAR 0 4
61566: PUSH
61567: LD_VAR 0 1
61571: PUSH
61572: FOR_IN
61573: IFFALSE 61756
// begin nat := GetNation ( i ) ;
61575: LD_ADDR_VAR 0 7
61579: PUSH
61580: LD_VAR 0 4
61584: PPUSH
61585: CALL_OW 248
61589: ST_TO_ADDR
// weapon := 0 ;
61590: LD_ADDR_VAR 0 8
61594: PUSH
61595: LD_INT 0
61597: ST_TO_ADDR
// if not nat then
61598: LD_VAR 0 7
61602: NOT
61603: IFFALSE 61607
// continue ;
61605: GO 61572
// for j in list [ nat ] do
61607: LD_ADDR_VAR 0 5
61611: PUSH
61612: LD_VAR 0 10
61616: PUSH
61617: LD_VAR 0 7
61621: ARRAY
61622: PUSH
61623: FOR_IN
61624: IFFALSE 61665
// if GetBWeapon ( i ) = j [ 1 ] then
61626: LD_VAR 0 4
61630: PPUSH
61631: CALL_OW 269
61635: PUSH
61636: LD_VAR 0 5
61640: PUSH
61641: LD_INT 1
61643: ARRAY
61644: EQUAL
61645: IFFALSE 61663
// begin weapon := j [ 2 ] ;
61647: LD_ADDR_VAR 0 8
61651: PUSH
61652: LD_VAR 0 5
61656: PUSH
61657: LD_INT 2
61659: ARRAY
61660: ST_TO_ADDR
// break ;
61661: GO 61665
// end ;
61663: GO 61623
61665: POP
61666: POP
// if not weapon then
61667: LD_VAR 0 8
61671: NOT
61672: IFFALSE 61676
// continue ;
61674: GO 61572
// for k in factories do
61676: LD_ADDR_VAR 0 6
61680: PUSH
61681: LD_VAR 0 2
61685: PUSH
61686: FOR_IN
61687: IFFALSE 61752
// begin weapons := AvailableWeaponList ( k ) ;
61689: LD_ADDR_VAR 0 9
61693: PUSH
61694: LD_VAR 0 6
61698: PPUSH
61699: CALL_OW 478
61703: ST_TO_ADDR
// if not weapons then
61704: LD_VAR 0 9
61708: NOT
61709: IFFALSE 61713
// continue ;
61711: GO 61686
// if weapon in weapons then
61713: LD_VAR 0 8
61717: PUSH
61718: LD_VAR 0 9
61722: IN
61723: IFFALSE 61750
// begin result := [ i , weapon ] ;
61725: LD_ADDR_VAR 0 3
61729: PUSH
61730: LD_VAR 0 4
61734: PUSH
61735: LD_VAR 0 8
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// exit ;
61744: POP
61745: POP
61746: POP
61747: POP
61748: GO 61758
// end ; end ;
61750: GO 61686
61752: POP
61753: POP
// end ;
61754: GO 61572
61756: POP
61757: POP
// end ;
61758: LD_VAR 0 3
61762: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61763: LD_INT 0
61765: PPUSH
// if not side or side > 8 then
61766: LD_VAR 0 3
61770: NOT
61771: PUSH
61772: LD_VAR 0 3
61776: PUSH
61777: LD_INT 8
61779: GREATER
61780: OR
61781: IFFALSE 61785
// exit ;
61783: GO 61844
// if not range then
61785: LD_VAR 0 4
61789: NOT
61790: IFFALSE 61801
// range := - 12 ;
61792: LD_ADDR_VAR 0 4
61796: PUSH
61797: LD_INT 12
61799: NEG
61800: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61801: LD_VAR 0 1
61805: PPUSH
61806: LD_VAR 0 2
61810: PPUSH
61811: LD_VAR 0 3
61815: PPUSH
61816: LD_VAR 0 4
61820: PPUSH
61821: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61825: LD_VAR 0 1
61829: PPUSH
61830: LD_VAR 0 2
61834: PPUSH
61835: LD_VAR 0 3
61839: PPUSH
61840: CALL_OW 331
// end ;
61844: LD_VAR 0 5
61848: RET
// export function Video ( mode ) ; begin
61849: LD_INT 0
61851: PPUSH
// ingame_video = mode ;
61852: LD_ADDR_OWVAR 52
61856: PUSH
61857: LD_VAR 0 1
61861: ST_TO_ADDR
// interface_hidden = mode ;
61862: LD_ADDR_OWVAR 54
61866: PUSH
61867: LD_VAR 0 1
61871: ST_TO_ADDR
// end ;
61872: LD_VAR 0 2
61876: RET
// export function Join ( array , element ) ; begin
61877: LD_INT 0
61879: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61880: LD_ADDR_VAR 0 3
61884: PUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: LD_VAR 0 1
61894: PUSH
61895: LD_INT 1
61897: PLUS
61898: PPUSH
61899: LD_VAR 0 2
61903: PPUSH
61904: CALL_OW 1
61908: ST_TO_ADDR
// end ;
61909: LD_VAR 0 3
61913: RET
// export function JoinUnion ( array , element ) ; begin
61914: LD_INT 0
61916: PPUSH
// result := array union element ;
61917: LD_ADDR_VAR 0 3
61921: PUSH
61922: LD_VAR 0 1
61926: PUSH
61927: LD_VAR 0 2
61931: UNION
61932: ST_TO_ADDR
// end ;
61933: LD_VAR 0 3
61937: RET
// export function GetBehemoths ( side ) ; begin
61938: LD_INT 0
61940: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61941: LD_ADDR_VAR 0 2
61945: PUSH
61946: LD_INT 22
61948: PUSH
61949: LD_VAR 0 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 31
61960: PUSH
61961: LD_INT 25
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PPUSH
61972: CALL_OW 69
61976: ST_TO_ADDR
// end ;
61977: LD_VAR 0 2
61981: RET
// export function Shuffle ( array ) ; var i , index ; begin
61982: LD_INT 0
61984: PPUSH
61985: PPUSH
61986: PPUSH
// result := [ ] ;
61987: LD_ADDR_VAR 0 2
61991: PUSH
61992: EMPTY
61993: ST_TO_ADDR
// if not array then
61994: LD_VAR 0 1
61998: NOT
61999: IFFALSE 62003
// exit ;
62001: GO 62102
// Randomize ;
62003: CALL_OW 10
// for i = array downto 1 do
62007: LD_ADDR_VAR 0 3
62011: PUSH
62012: DOUBLE
62013: LD_VAR 0 1
62017: INC
62018: ST_TO_ADDR
62019: LD_INT 1
62021: PUSH
62022: FOR_DOWNTO
62023: IFFALSE 62100
// begin index := rand ( 1 , array ) ;
62025: LD_ADDR_VAR 0 4
62029: PUSH
62030: LD_INT 1
62032: PPUSH
62033: LD_VAR 0 1
62037: PPUSH
62038: CALL_OW 12
62042: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62043: LD_ADDR_VAR 0 2
62047: PUSH
62048: LD_VAR 0 2
62052: PPUSH
62053: LD_VAR 0 2
62057: PUSH
62058: LD_INT 1
62060: PLUS
62061: PPUSH
62062: LD_VAR 0 1
62066: PUSH
62067: LD_VAR 0 4
62071: ARRAY
62072: PPUSH
62073: CALL_OW 2
62077: ST_TO_ADDR
// array := Delete ( array , index ) ;
62078: LD_ADDR_VAR 0 1
62082: PUSH
62083: LD_VAR 0 1
62087: PPUSH
62088: LD_VAR 0 4
62092: PPUSH
62093: CALL_OW 3
62097: ST_TO_ADDR
// end ;
62098: GO 62022
62100: POP
62101: POP
// end ;
62102: LD_VAR 0 2
62106: RET
// export function GetBaseMaterials ( base ) ; begin
62107: LD_INT 0
62109: PPUSH
// result := [ 0 , 0 , 0 ] ;
62110: LD_ADDR_VAR 0 2
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: LIST
62128: ST_TO_ADDR
// if not base then
62129: LD_VAR 0 1
62133: NOT
62134: IFFALSE 62138
// exit ;
62136: GO 62187
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62138: LD_ADDR_VAR 0 2
62142: PUSH
62143: LD_VAR 0 1
62147: PPUSH
62148: LD_INT 1
62150: PPUSH
62151: CALL_OW 275
62155: PUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: LD_INT 2
62163: PPUSH
62164: CALL_OW 275
62168: PUSH
62169: LD_VAR 0 1
62173: PPUSH
62174: LD_INT 3
62176: PPUSH
62177: CALL_OW 275
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// end ;
62187: LD_VAR 0 2
62191: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62192: LD_INT 0
62194: PPUSH
62195: PPUSH
// result := array ;
62196: LD_ADDR_VAR 0 3
62200: PUSH
62201: LD_VAR 0 1
62205: ST_TO_ADDR
// if size >= result then
62206: LD_VAR 0 2
62210: PUSH
62211: LD_VAR 0 3
62215: GREATEREQUAL
62216: IFFALSE 62220
// exit ;
62218: GO 62270
// if size then
62220: LD_VAR 0 2
62224: IFFALSE 62270
// for i := array downto size do
62226: LD_ADDR_VAR 0 4
62230: PUSH
62231: DOUBLE
62232: LD_VAR 0 1
62236: INC
62237: ST_TO_ADDR
62238: LD_VAR 0 2
62242: PUSH
62243: FOR_DOWNTO
62244: IFFALSE 62268
// result := Delete ( result , result ) ;
62246: LD_ADDR_VAR 0 3
62250: PUSH
62251: LD_VAR 0 3
62255: PPUSH
62256: LD_VAR 0 3
62260: PPUSH
62261: CALL_OW 3
62265: ST_TO_ADDR
62266: GO 62243
62268: POP
62269: POP
// end ;
62270: LD_VAR 0 3
62274: RET
// export function ComExit ( unit ) ; var tmp ; begin
62275: LD_INT 0
62277: PPUSH
62278: PPUSH
// if not IsInUnit ( unit ) then
62279: LD_VAR 0 1
62283: PPUSH
62284: CALL_OW 310
62288: NOT
62289: IFFALSE 62293
// exit ;
62291: GO 62353
// tmp := IsInUnit ( unit ) ;
62293: LD_ADDR_VAR 0 3
62297: PUSH
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 310
62307: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62308: LD_VAR 0 3
62312: PPUSH
62313: CALL_OW 247
62317: PUSH
62318: LD_INT 2
62320: EQUAL
62321: IFFALSE 62334
// ComExitVehicle ( unit ) else
62323: LD_VAR 0 1
62327: PPUSH
62328: CALL_OW 121
62332: GO 62343
// ComExitBuilding ( unit ) ;
62334: LD_VAR 0 1
62338: PPUSH
62339: CALL_OW 122
// result := tmp ;
62343: LD_ADDR_VAR 0 2
62347: PUSH
62348: LD_VAR 0 3
62352: ST_TO_ADDR
// end ;
62353: LD_VAR 0 2
62357: RET
// export function ComExitAll ( units ) ; var i ; begin
62358: LD_INT 0
62360: PPUSH
62361: PPUSH
// if not units then
62362: LD_VAR 0 1
62366: NOT
62367: IFFALSE 62371
// exit ;
62369: GO 62397
// for i in units do
62371: LD_ADDR_VAR 0 3
62375: PUSH
62376: LD_VAR 0 1
62380: PUSH
62381: FOR_IN
62382: IFFALSE 62395
// ComExit ( i ) ;
62384: LD_VAR 0 3
62388: PPUSH
62389: CALL 62275 0 1
62393: GO 62381
62395: POP
62396: POP
// end ;
62397: LD_VAR 0 2
62401: RET
// export function ResetHc ; begin
62402: LD_INT 0
62404: PPUSH
// InitHc ;
62405: CALL_OW 19
// hc_importance := 0 ;
62409: LD_ADDR_OWVAR 32
62413: PUSH
62414: LD_INT 0
62416: ST_TO_ADDR
// end ;
62417: LD_VAR 0 1
62421: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62422: LD_INT 0
62424: PPUSH
62425: PPUSH
62426: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62427: LD_ADDR_VAR 0 6
62431: PUSH
62432: LD_VAR 0 1
62436: PUSH
62437: LD_VAR 0 3
62441: PLUS
62442: PUSH
62443: LD_INT 2
62445: DIV
62446: ST_TO_ADDR
// if _x < 0 then
62447: LD_VAR 0 6
62451: PUSH
62452: LD_INT 0
62454: LESS
62455: IFFALSE 62472
// _x := _x * - 1 ;
62457: LD_ADDR_VAR 0 6
62461: PUSH
62462: LD_VAR 0 6
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: MUL
62471: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62472: LD_ADDR_VAR 0 7
62476: PUSH
62477: LD_VAR 0 2
62481: PUSH
62482: LD_VAR 0 4
62486: PLUS
62487: PUSH
62488: LD_INT 2
62490: DIV
62491: ST_TO_ADDR
// if _y < 0 then
62492: LD_VAR 0 7
62496: PUSH
62497: LD_INT 0
62499: LESS
62500: IFFALSE 62517
// _y := _y * - 1 ;
62502: LD_ADDR_VAR 0 7
62506: PUSH
62507: LD_VAR 0 7
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: MUL
62516: ST_TO_ADDR
// result := [ _x , _y ] ;
62517: LD_ADDR_VAR 0 5
62521: PUSH
62522: LD_VAR 0 6
62526: PUSH
62527: LD_VAR 0 7
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// end ;
62536: LD_VAR 0 5
62540: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62541: LD_INT 0
62543: PPUSH
62544: PPUSH
62545: PPUSH
62546: PPUSH
// task := GetTaskList ( unit ) ;
62547: LD_ADDR_VAR 0 7
62551: PUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: CALL_OW 437
62561: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62562: LD_VAR 0 7
62566: NOT
62567: PUSH
62568: LD_VAR 0 1
62572: PPUSH
62573: LD_VAR 0 2
62577: PPUSH
62578: CALL_OW 308
62582: NOT
62583: AND
62584: IFFALSE 62588
// exit ;
62586: GO 62706
// if IsInArea ( unit , area ) then
62588: LD_VAR 0 1
62592: PPUSH
62593: LD_VAR 0 2
62597: PPUSH
62598: CALL_OW 308
62602: IFFALSE 62620
// begin ComMoveToArea ( unit , goAway ) ;
62604: LD_VAR 0 1
62608: PPUSH
62609: LD_VAR 0 3
62613: PPUSH
62614: CALL_OW 113
// exit ;
62618: GO 62706
// end ; if task [ 1 ] [ 1 ] <> M then
62620: LD_VAR 0 7
62624: PUSH
62625: LD_INT 1
62627: ARRAY
62628: PUSH
62629: LD_INT 1
62631: ARRAY
62632: PUSH
62633: LD_STRING M
62635: NONEQUAL
62636: IFFALSE 62640
// exit ;
62638: GO 62706
// x := task [ 1 ] [ 2 ] ;
62640: LD_ADDR_VAR 0 5
62644: PUSH
62645: LD_VAR 0 7
62649: PUSH
62650: LD_INT 1
62652: ARRAY
62653: PUSH
62654: LD_INT 2
62656: ARRAY
62657: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62658: LD_ADDR_VAR 0 6
62662: PUSH
62663: LD_VAR 0 7
62667: PUSH
62668: LD_INT 1
62670: ARRAY
62671: PUSH
62672: LD_INT 3
62674: ARRAY
62675: ST_TO_ADDR
// if InArea ( x , y , area ) then
62676: LD_VAR 0 5
62680: PPUSH
62681: LD_VAR 0 6
62685: PPUSH
62686: LD_VAR 0 2
62690: PPUSH
62691: CALL_OW 309
62695: IFFALSE 62706
// ComStop ( unit ) ;
62697: LD_VAR 0 1
62701: PPUSH
62702: CALL_OW 141
// end ;
62706: LD_VAR 0 4
62710: RET
// export function Abs ( value ) ; begin
62711: LD_INT 0
62713: PPUSH
// result := value ;
62714: LD_ADDR_VAR 0 2
62718: PUSH
62719: LD_VAR 0 1
62723: ST_TO_ADDR
// if value < 0 then
62724: LD_VAR 0 1
62728: PUSH
62729: LD_INT 0
62731: LESS
62732: IFFALSE 62749
// result := value * - 1 ;
62734: LD_ADDR_VAR 0 2
62738: PUSH
62739: LD_VAR 0 1
62743: PUSH
62744: LD_INT 1
62746: NEG
62747: MUL
62748: ST_TO_ADDR
// end ;
62749: LD_VAR 0 2
62753: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62754: LD_INT 0
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
// if not unit or not building then
62764: LD_VAR 0 1
62768: NOT
62769: PUSH
62770: LD_VAR 0 2
62774: NOT
62775: OR
62776: IFFALSE 62780
// exit ;
62778: GO 63006
// x := GetX ( building ) ;
62780: LD_ADDR_VAR 0 4
62784: PUSH
62785: LD_VAR 0 2
62789: PPUSH
62790: CALL_OW 250
62794: ST_TO_ADDR
// y := GetY ( building ) ;
62795: LD_ADDR_VAR 0 6
62799: PUSH
62800: LD_VAR 0 2
62804: PPUSH
62805: CALL_OW 251
62809: ST_TO_ADDR
// d := GetDir ( building ) ;
62810: LD_ADDR_VAR 0 8
62814: PUSH
62815: LD_VAR 0 2
62819: PPUSH
62820: CALL_OW 254
62824: ST_TO_ADDR
// r := 4 ;
62825: LD_ADDR_VAR 0 9
62829: PUSH
62830: LD_INT 4
62832: ST_TO_ADDR
// for i := 1 to 5 do
62833: LD_ADDR_VAR 0 10
62837: PUSH
62838: DOUBLE
62839: LD_INT 1
62841: DEC
62842: ST_TO_ADDR
62843: LD_INT 5
62845: PUSH
62846: FOR_TO
62847: IFFALSE 63004
// begin _x := ShiftX ( x , d , r + i ) ;
62849: LD_ADDR_VAR 0 5
62853: PUSH
62854: LD_VAR 0 4
62858: PPUSH
62859: LD_VAR 0 8
62863: PPUSH
62864: LD_VAR 0 9
62868: PUSH
62869: LD_VAR 0 10
62873: PLUS
62874: PPUSH
62875: CALL_OW 272
62879: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62880: LD_ADDR_VAR 0 7
62884: PUSH
62885: LD_VAR 0 6
62889: PPUSH
62890: LD_VAR 0 8
62894: PPUSH
62895: LD_VAR 0 9
62899: PUSH
62900: LD_VAR 0 10
62904: PLUS
62905: PPUSH
62906: CALL_OW 273
62910: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62911: LD_VAR 0 5
62915: PPUSH
62916: LD_VAR 0 7
62920: PPUSH
62921: CALL_OW 488
62925: PUSH
62926: LD_VAR 0 5
62930: PPUSH
62931: LD_VAR 0 7
62935: PPUSH
62936: CALL_OW 428
62940: PPUSH
62941: CALL_OW 247
62945: PUSH
62946: LD_INT 3
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: IN
62956: NOT
62957: AND
62958: IFFALSE 63002
// begin ComMoveXY ( unit , _x , _y ) ;
62960: LD_VAR 0 1
62964: PPUSH
62965: LD_VAR 0 5
62969: PPUSH
62970: LD_VAR 0 7
62974: PPUSH
62975: CALL_OW 111
// result := [ _x , _y ] ;
62979: LD_ADDR_VAR 0 3
62983: PUSH
62984: LD_VAR 0 5
62988: PUSH
62989: LD_VAR 0 7
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// exit ;
62998: POP
62999: POP
63000: GO 63006
// end ; end ;
63002: GO 62846
63004: POP
63005: POP
// end ;
63006: LD_VAR 0 3
63010: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63011: LD_INT 0
63013: PPUSH
63014: PPUSH
63015: PPUSH
// result := 0 ;
63016: LD_ADDR_VAR 0 3
63020: PUSH
63021: LD_INT 0
63023: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63024: LD_VAR 0 1
63028: PUSH
63029: LD_INT 0
63031: LESS
63032: PUSH
63033: LD_VAR 0 1
63037: PUSH
63038: LD_INT 8
63040: GREATER
63041: OR
63042: PUSH
63043: LD_VAR 0 2
63047: PUSH
63048: LD_INT 0
63050: LESS
63051: OR
63052: PUSH
63053: LD_VAR 0 2
63057: PUSH
63058: LD_INT 8
63060: GREATER
63061: OR
63062: IFFALSE 63066
// exit ;
63064: GO 63141
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63066: LD_ADDR_VAR 0 4
63070: PUSH
63071: LD_INT 22
63073: PUSH
63074: LD_VAR 0 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PPUSH
63083: CALL_OW 69
63087: PUSH
63088: FOR_IN
63089: IFFALSE 63139
// begin un := UnitShoot ( i ) ;
63091: LD_ADDR_VAR 0 5
63095: PUSH
63096: LD_VAR 0 4
63100: PPUSH
63101: CALL_OW 504
63105: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63106: LD_VAR 0 5
63110: PPUSH
63111: CALL_OW 255
63115: PUSH
63116: LD_VAR 0 1
63120: EQUAL
63121: IFFALSE 63137
// begin result := un ;
63123: LD_ADDR_VAR 0 3
63127: PUSH
63128: LD_VAR 0 5
63132: ST_TO_ADDR
// exit ;
63133: POP
63134: POP
63135: GO 63141
// end ; end ;
63137: GO 63088
63139: POP
63140: POP
// end ;
63141: LD_VAR 0 3
63145: RET
// export function GetCargoBay ( units ) ; begin
63146: LD_INT 0
63148: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63149: LD_ADDR_VAR 0 2
63153: PUSH
63154: LD_VAR 0 1
63158: PPUSH
63159: LD_INT 2
63161: PUSH
63162: LD_INT 34
63164: PUSH
63165: LD_INT 12
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 34
63174: PUSH
63175: LD_INT 51
63177: PUSH
63178: EMPTY
63179: LIST
63180: LIST
63181: PUSH
63182: LD_INT 34
63184: PUSH
63185: LD_INT 32
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 34
63194: PUSH
63195: LD_INT 89
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: PPUSH
63209: CALL_OW 72
63213: ST_TO_ADDR
// end ;
63214: LD_VAR 0 2
63218: RET
// export function Negate ( value ) ; begin
63219: LD_INT 0
63221: PPUSH
// result := not value ;
63222: LD_ADDR_VAR 0 2
63226: PUSH
63227: LD_VAR 0 1
63231: NOT
63232: ST_TO_ADDR
// end ;
63233: LD_VAR 0 2
63237: RET
// export function Inc ( value ) ; begin
63238: LD_INT 0
63240: PPUSH
// result := value + 1 ;
63241: LD_ADDR_VAR 0 2
63245: PUSH
63246: LD_VAR 0 1
63250: PUSH
63251: LD_INT 1
63253: PLUS
63254: ST_TO_ADDR
// end ;
63255: LD_VAR 0 2
63259: RET
// export function Dec ( value ) ; begin
63260: LD_INT 0
63262: PPUSH
// result := value - 1 ;
63263: LD_ADDR_VAR 0 2
63267: PUSH
63268: LD_VAR 0 1
63272: PUSH
63273: LD_INT 1
63275: MINUS
63276: ST_TO_ADDR
// end ;
63277: LD_VAR 0 2
63281: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63282: LD_INT 0
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
63291: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63292: LD_VAR 0 1
63296: PPUSH
63297: LD_VAR 0 2
63301: PPUSH
63302: CALL_OW 488
63306: NOT
63307: PUSH
63308: LD_VAR 0 3
63312: PPUSH
63313: LD_VAR 0 4
63317: PPUSH
63318: CALL_OW 488
63322: NOT
63323: OR
63324: IFFALSE 63337
// begin result := - 1 ;
63326: LD_ADDR_VAR 0 5
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: ST_TO_ADDR
// exit ;
63335: GO 63572
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63337: LD_ADDR_VAR 0 12
63341: PUSH
63342: LD_VAR 0 1
63346: PPUSH
63347: LD_VAR 0 2
63351: PPUSH
63352: LD_VAR 0 3
63356: PPUSH
63357: LD_VAR 0 4
63361: PPUSH
63362: CALL 62422 0 4
63366: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63367: LD_ADDR_VAR 0 11
63371: PUSH
63372: LD_VAR 0 1
63376: PPUSH
63377: LD_VAR 0 2
63381: PPUSH
63382: LD_VAR 0 12
63386: PUSH
63387: LD_INT 1
63389: ARRAY
63390: PPUSH
63391: LD_VAR 0 12
63395: PUSH
63396: LD_INT 2
63398: ARRAY
63399: PPUSH
63400: CALL_OW 298
63404: ST_TO_ADDR
// distance := 9999 ;
63405: LD_ADDR_VAR 0 10
63409: PUSH
63410: LD_INT 9999
63412: ST_TO_ADDR
// for i := 0 to 5 do
63413: LD_ADDR_VAR 0 6
63417: PUSH
63418: DOUBLE
63419: LD_INT 0
63421: DEC
63422: ST_TO_ADDR
63423: LD_INT 5
63425: PUSH
63426: FOR_TO
63427: IFFALSE 63570
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63429: LD_ADDR_VAR 0 7
63433: PUSH
63434: LD_VAR 0 1
63438: PPUSH
63439: LD_VAR 0 6
63443: PPUSH
63444: LD_VAR 0 11
63448: PPUSH
63449: CALL_OW 272
63453: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63454: LD_ADDR_VAR 0 8
63458: PUSH
63459: LD_VAR 0 2
63463: PPUSH
63464: LD_VAR 0 6
63468: PPUSH
63469: LD_VAR 0 11
63473: PPUSH
63474: CALL_OW 273
63478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63479: LD_VAR 0 7
63483: PPUSH
63484: LD_VAR 0 8
63488: PPUSH
63489: CALL_OW 488
63493: NOT
63494: IFFALSE 63498
// continue ;
63496: GO 63426
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63498: LD_ADDR_VAR 0 9
63502: PUSH
63503: LD_VAR 0 12
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PPUSH
63512: LD_VAR 0 12
63516: PUSH
63517: LD_INT 2
63519: ARRAY
63520: PPUSH
63521: LD_VAR 0 7
63525: PPUSH
63526: LD_VAR 0 8
63530: PPUSH
63531: CALL_OW 298
63535: ST_TO_ADDR
// if tmp < distance then
63536: LD_VAR 0 9
63540: PUSH
63541: LD_VAR 0 10
63545: LESS
63546: IFFALSE 63568
// begin result := i ;
63548: LD_ADDR_VAR 0 5
63552: PUSH
63553: LD_VAR 0 6
63557: ST_TO_ADDR
// distance := tmp ;
63558: LD_ADDR_VAR 0 10
63562: PUSH
63563: LD_VAR 0 9
63567: ST_TO_ADDR
// end ; end ;
63568: GO 63426
63570: POP
63571: POP
// end ;
63572: LD_VAR 0 5
63576: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63577: LD_INT 0
63579: PPUSH
63580: PPUSH
// if not driver or not IsInUnit ( driver ) then
63581: LD_VAR 0 1
63585: NOT
63586: PUSH
63587: LD_VAR 0 1
63591: PPUSH
63592: CALL_OW 310
63596: NOT
63597: OR
63598: IFFALSE 63602
// exit ;
63600: GO 63692
// vehicle := IsInUnit ( driver ) ;
63602: LD_ADDR_VAR 0 3
63606: PUSH
63607: LD_VAR 0 1
63611: PPUSH
63612: CALL_OW 310
63616: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63617: LD_VAR 0 1
63621: PPUSH
63622: LD_STRING \
63624: PUSH
63625: LD_INT 0
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: PUSH
63652: LD_STRING E
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_VAR 0 3
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PPUSH
63688: CALL_OW 446
// end ;
63692: LD_VAR 0 2
63696: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63697: LD_INT 0
63699: PPUSH
63700: PPUSH
// if not driver or not IsInUnit ( driver ) then
63701: LD_VAR 0 1
63705: NOT
63706: PUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: CALL_OW 310
63716: NOT
63717: OR
63718: IFFALSE 63722
// exit ;
63720: GO 63812
// vehicle := IsInUnit ( driver ) ;
63722: LD_ADDR_VAR 0 3
63726: PUSH
63727: LD_VAR 0 1
63731: PPUSH
63732: CALL_OW 310
63736: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63737: LD_VAR 0 1
63741: PPUSH
63742: LD_STRING \
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: LD_INT 0
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: PUSH
63772: LD_STRING E
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_VAR 0 3
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PPUSH
63808: CALL_OW 447
// end ;
63812: LD_VAR 0 2
63816: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63817: LD_INT 0
63819: PPUSH
63820: PPUSH
63821: PPUSH
// tmp := [ ] ;
63822: LD_ADDR_VAR 0 5
63826: PUSH
63827: EMPTY
63828: ST_TO_ADDR
// for i in units do
63829: LD_ADDR_VAR 0 4
63833: PUSH
63834: LD_VAR 0 1
63838: PUSH
63839: FOR_IN
63840: IFFALSE 63878
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63842: LD_ADDR_VAR 0 5
63846: PUSH
63847: LD_VAR 0 5
63851: PPUSH
63852: LD_VAR 0 5
63856: PUSH
63857: LD_INT 1
63859: PLUS
63860: PPUSH
63861: LD_VAR 0 4
63865: PPUSH
63866: CALL_OW 256
63870: PPUSH
63871: CALL_OW 2
63875: ST_TO_ADDR
63876: GO 63839
63878: POP
63879: POP
// if not tmp then
63880: LD_VAR 0 5
63884: NOT
63885: IFFALSE 63889
// exit ;
63887: GO 63937
// if asc then
63889: LD_VAR 0 2
63893: IFFALSE 63917
// result := SortListByListAsc ( units , tmp ) else
63895: LD_ADDR_VAR 0 3
63899: PUSH
63900: LD_VAR 0 1
63904: PPUSH
63905: LD_VAR 0 5
63909: PPUSH
63910: CALL_OW 76
63914: ST_TO_ADDR
63915: GO 63937
// result := SortListByListDesc ( units , tmp ) ;
63917: LD_ADDR_VAR 0 3
63921: PUSH
63922: LD_VAR 0 1
63926: PPUSH
63927: LD_VAR 0 5
63931: PPUSH
63932: CALL_OW 77
63936: ST_TO_ADDR
// end ;
63937: LD_VAR 0 3
63941: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63942: LD_INT 0
63944: PPUSH
63945: PPUSH
// task := GetTaskList ( mech ) ;
63946: LD_ADDR_VAR 0 4
63950: PUSH
63951: LD_VAR 0 1
63955: PPUSH
63956: CALL_OW 437
63960: ST_TO_ADDR
// if not task then
63961: LD_VAR 0 4
63965: NOT
63966: IFFALSE 63970
// exit ;
63968: GO 64012
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63970: LD_ADDR_VAR 0 3
63974: PUSH
63975: LD_VAR 0 4
63979: PUSH
63980: LD_INT 1
63982: ARRAY
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PUSH
63988: LD_STRING r
63990: EQUAL
63991: PUSH
63992: LD_VAR 0 4
63996: PUSH
63997: LD_INT 1
63999: ARRAY
64000: PUSH
64001: LD_INT 4
64003: ARRAY
64004: PUSH
64005: LD_VAR 0 2
64009: EQUAL
64010: AND
64011: ST_TO_ADDR
// end ;
64012: LD_VAR 0 3
64016: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64017: LD_INT 0
64019: PPUSH
// SetDir ( unit , d ) ;
64020: LD_VAR 0 1
64024: PPUSH
64025: LD_VAR 0 4
64029: PPUSH
64030: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64034: LD_VAR 0 1
64038: PPUSH
64039: LD_VAR 0 2
64043: PPUSH
64044: LD_VAR 0 3
64048: PPUSH
64049: LD_VAR 0 5
64053: PPUSH
64054: CALL_OW 48
// end ;
64058: LD_VAR 0 6
64062: RET
// export function ToNaturalNumber ( number ) ; begin
64063: LD_INT 0
64065: PPUSH
// result := number div 1 ;
64066: LD_ADDR_VAR 0 2
64070: PUSH
64071: LD_VAR 0 1
64075: PUSH
64076: LD_INT 1
64078: DIV
64079: ST_TO_ADDR
// if number < 0 then
64080: LD_VAR 0 1
64084: PUSH
64085: LD_INT 0
64087: LESS
64088: IFFALSE 64098
// result := 0 ;
64090: LD_ADDR_VAR 0 2
64094: PUSH
64095: LD_INT 0
64097: ST_TO_ADDR
// end ;
64098: LD_VAR 0 2
64102: RET
// export function SortByClass ( units , class ) ; var un ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
// if not units or not class then
64107: LD_VAR 0 1
64111: NOT
64112: PUSH
64113: LD_VAR 0 2
64117: NOT
64118: OR
64119: IFFALSE 64123
// exit ;
64121: GO 64218
// result := [ ] ;
64123: LD_ADDR_VAR 0 3
64127: PUSH
64128: EMPTY
64129: ST_TO_ADDR
// for un in units do
64130: LD_ADDR_VAR 0 4
64134: PUSH
64135: LD_VAR 0 1
64139: PUSH
64140: FOR_IN
64141: IFFALSE 64216
// if GetClass ( un ) = class then
64143: LD_VAR 0 4
64147: PPUSH
64148: CALL_OW 257
64152: PUSH
64153: LD_VAR 0 2
64157: EQUAL
64158: IFFALSE 64185
// result := Insert ( result , 1 , un ) else
64160: LD_ADDR_VAR 0 3
64164: PUSH
64165: LD_VAR 0 3
64169: PPUSH
64170: LD_INT 1
64172: PPUSH
64173: LD_VAR 0 4
64177: PPUSH
64178: CALL_OW 2
64182: ST_TO_ADDR
64183: GO 64214
// result := Replace ( result , result + 1 , un ) ;
64185: LD_ADDR_VAR 0 3
64189: PUSH
64190: LD_VAR 0 3
64194: PPUSH
64195: LD_VAR 0 3
64199: PUSH
64200: LD_INT 1
64202: PLUS
64203: PPUSH
64204: LD_VAR 0 4
64208: PPUSH
64209: CALL_OW 1
64213: ST_TO_ADDR
64214: GO 64140
64216: POP
64217: POP
// end ;
64218: LD_VAR 0 3
64222: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64223: LD_INT 0
64225: PPUSH
64226: PPUSH
64227: PPUSH
64228: PPUSH
64229: PPUSH
64230: PPUSH
64231: PPUSH
// result := [ ] ;
64232: LD_ADDR_VAR 0 4
64236: PUSH
64237: EMPTY
64238: ST_TO_ADDR
// if x - r < 0 then
64239: LD_VAR 0 1
64243: PUSH
64244: LD_VAR 0 3
64248: MINUS
64249: PUSH
64250: LD_INT 0
64252: LESS
64253: IFFALSE 64265
// min_x := 0 else
64255: LD_ADDR_VAR 0 8
64259: PUSH
64260: LD_INT 0
64262: ST_TO_ADDR
64263: GO 64281
// min_x := x - r ;
64265: LD_ADDR_VAR 0 8
64269: PUSH
64270: LD_VAR 0 1
64274: PUSH
64275: LD_VAR 0 3
64279: MINUS
64280: ST_TO_ADDR
// if y - r < 0 then
64281: LD_VAR 0 2
64285: PUSH
64286: LD_VAR 0 3
64290: MINUS
64291: PUSH
64292: LD_INT 0
64294: LESS
64295: IFFALSE 64307
// min_y := 0 else
64297: LD_ADDR_VAR 0 7
64301: PUSH
64302: LD_INT 0
64304: ST_TO_ADDR
64305: GO 64323
// min_y := y - r ;
64307: LD_ADDR_VAR 0 7
64311: PUSH
64312: LD_VAR 0 2
64316: PUSH
64317: LD_VAR 0 3
64321: MINUS
64322: ST_TO_ADDR
// max_x := x + r ;
64323: LD_ADDR_VAR 0 9
64327: PUSH
64328: LD_VAR 0 1
64332: PUSH
64333: LD_VAR 0 3
64337: PLUS
64338: ST_TO_ADDR
// max_y := y + r ;
64339: LD_ADDR_VAR 0 10
64343: PUSH
64344: LD_VAR 0 2
64348: PUSH
64349: LD_VAR 0 3
64353: PLUS
64354: ST_TO_ADDR
// for _x = min_x to max_x do
64355: LD_ADDR_VAR 0 5
64359: PUSH
64360: DOUBLE
64361: LD_VAR 0 8
64365: DEC
64366: ST_TO_ADDR
64367: LD_VAR 0 9
64371: PUSH
64372: FOR_TO
64373: IFFALSE 64474
// for _y = min_y to max_y do
64375: LD_ADDR_VAR 0 6
64379: PUSH
64380: DOUBLE
64381: LD_VAR 0 7
64385: DEC
64386: ST_TO_ADDR
64387: LD_VAR 0 10
64391: PUSH
64392: FOR_TO
64393: IFFALSE 64470
// begin if not ValidHex ( _x , _y ) then
64395: LD_VAR 0 5
64399: PPUSH
64400: LD_VAR 0 6
64404: PPUSH
64405: CALL_OW 488
64409: NOT
64410: IFFALSE 64414
// continue ;
64412: GO 64392
// if GetResourceTypeXY ( _x , _y ) then
64414: LD_VAR 0 5
64418: PPUSH
64419: LD_VAR 0 6
64423: PPUSH
64424: CALL_OW 283
64428: IFFALSE 64468
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64430: LD_ADDR_VAR 0 4
64434: PUSH
64435: LD_VAR 0 4
64439: PPUSH
64440: LD_VAR 0 4
64444: PUSH
64445: LD_INT 1
64447: PLUS
64448: PPUSH
64449: LD_VAR 0 5
64453: PUSH
64454: LD_VAR 0 6
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PPUSH
64463: CALL_OW 1
64467: ST_TO_ADDR
// end ;
64468: GO 64392
64470: POP
64471: POP
64472: GO 64372
64474: POP
64475: POP
// end ;
64476: LD_VAR 0 4
64480: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64481: LD_INT 0
64483: PPUSH
64484: PPUSH
64485: PPUSH
64486: PPUSH
64487: PPUSH
64488: PPUSH
64489: PPUSH
64490: PPUSH
// if not units then
64491: LD_VAR 0 1
64495: NOT
64496: IFFALSE 64500
// exit ;
64498: GO 65024
// result := UnitFilter ( units , [ f_ok ] ) ;
64500: LD_ADDR_VAR 0 3
64504: PUSH
64505: LD_VAR 0 1
64509: PPUSH
64510: LD_INT 50
64512: PUSH
64513: EMPTY
64514: LIST
64515: PPUSH
64516: CALL_OW 72
64520: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64521: LD_ADDR_VAR 0 8
64525: PUSH
64526: LD_VAR 0 1
64530: PUSH
64531: LD_INT 1
64533: ARRAY
64534: PPUSH
64535: CALL_OW 255
64539: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64540: LD_ADDR_VAR 0 10
64544: PUSH
64545: LD_INT 29
64547: PUSH
64548: LD_INT 91
64550: PUSH
64551: LD_INT 49
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: LIST
64558: ST_TO_ADDR
// if not result then
64559: LD_VAR 0 3
64563: NOT
64564: IFFALSE 64568
// exit ;
64566: GO 65024
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64568: LD_ADDR_VAR 0 5
64572: PUSH
64573: LD_INT 81
64575: PUSH
64576: LD_VAR 0 8
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PPUSH
64585: CALL_OW 69
64589: ST_TO_ADDR
// for i in result do
64590: LD_ADDR_VAR 0 4
64594: PUSH
64595: LD_VAR 0 3
64599: PUSH
64600: FOR_IN
64601: IFFALSE 65022
// begin tag := GetTag ( i ) + 1 ;
64603: LD_ADDR_VAR 0 9
64607: PUSH
64608: LD_VAR 0 4
64612: PPUSH
64613: CALL_OW 110
64617: PUSH
64618: LD_INT 1
64620: PLUS
64621: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64622: LD_ADDR_VAR 0 7
64626: PUSH
64627: LD_VAR 0 4
64631: PPUSH
64632: CALL_OW 250
64636: PPUSH
64637: LD_VAR 0 4
64641: PPUSH
64642: CALL_OW 251
64646: PPUSH
64647: LD_INT 6
64649: PPUSH
64650: CALL 64223 0 3
64654: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64655: LD_VAR 0 4
64659: PPUSH
64660: CALL_OW 247
64664: PUSH
64665: LD_INT 2
64667: EQUAL
64668: PUSH
64669: LD_VAR 0 7
64673: AND
64674: PUSH
64675: LD_VAR 0 4
64679: PPUSH
64680: CALL_OW 264
64684: PUSH
64685: LD_VAR 0 10
64689: IN
64690: NOT
64691: AND
64692: IFFALSE 64731
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64694: LD_VAR 0 4
64698: PPUSH
64699: LD_VAR 0 7
64703: PUSH
64704: LD_INT 1
64706: ARRAY
64707: PUSH
64708: LD_INT 1
64710: ARRAY
64711: PPUSH
64712: LD_VAR 0 7
64716: PUSH
64717: LD_INT 1
64719: ARRAY
64720: PUSH
64721: LD_INT 2
64723: ARRAY
64724: PPUSH
64725: CALL_OW 116
64729: GO 65020
// if path > tag then
64731: LD_VAR 0 2
64735: PUSH
64736: LD_VAR 0 9
64740: GREATER
64741: IFFALSE 64949
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64743: LD_ADDR_VAR 0 6
64747: PUSH
64748: LD_VAR 0 5
64752: PPUSH
64753: LD_INT 91
64755: PUSH
64756: LD_VAR 0 4
64760: PUSH
64761: LD_INT 8
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: PPUSH
64769: CALL_OW 72
64773: ST_TO_ADDR
// if nearEnemy then
64774: LD_VAR 0 6
64778: IFFALSE 64847
// begin if GetWeapon ( i ) = ru_time_lapser then
64780: LD_VAR 0 4
64784: PPUSH
64785: CALL_OW 264
64789: PUSH
64790: LD_INT 49
64792: EQUAL
64793: IFFALSE 64821
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64795: LD_VAR 0 4
64799: PPUSH
64800: LD_VAR 0 6
64804: PPUSH
64805: LD_VAR 0 4
64809: PPUSH
64810: CALL_OW 74
64814: PPUSH
64815: CALL_OW 112
64819: GO 64845
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64821: LD_VAR 0 4
64825: PPUSH
64826: LD_VAR 0 6
64830: PPUSH
64831: LD_VAR 0 4
64835: PPUSH
64836: CALL_OW 74
64840: PPUSH
64841: CALL 65949 0 2
// end else
64845: GO 64947
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64847: LD_VAR 0 4
64851: PPUSH
64852: LD_VAR 0 2
64856: PUSH
64857: LD_VAR 0 9
64861: ARRAY
64862: PUSH
64863: LD_INT 1
64865: ARRAY
64866: PPUSH
64867: LD_VAR 0 2
64871: PUSH
64872: LD_VAR 0 9
64876: ARRAY
64877: PUSH
64878: LD_INT 2
64880: ARRAY
64881: PPUSH
64882: CALL_OW 297
64886: PUSH
64887: LD_INT 6
64889: GREATER
64890: IFFALSE 64933
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64892: LD_VAR 0 4
64896: PPUSH
64897: LD_VAR 0 2
64901: PUSH
64902: LD_VAR 0 9
64906: ARRAY
64907: PUSH
64908: LD_INT 1
64910: ARRAY
64911: PPUSH
64912: LD_VAR 0 2
64916: PUSH
64917: LD_VAR 0 9
64921: ARRAY
64922: PUSH
64923: LD_INT 2
64925: ARRAY
64926: PPUSH
64927: CALL_OW 114
64931: GO 64947
// SetTag ( i , tag ) ;
64933: LD_VAR 0 4
64937: PPUSH
64938: LD_VAR 0 9
64942: PPUSH
64943: CALL_OW 109
// end else
64947: GO 65020
// if enemy then
64949: LD_VAR 0 5
64953: IFFALSE 65020
// begin if GetWeapon ( i ) = ru_time_lapser then
64955: LD_VAR 0 4
64959: PPUSH
64960: CALL_OW 264
64964: PUSH
64965: LD_INT 49
64967: EQUAL
64968: IFFALSE 64996
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64970: LD_VAR 0 4
64974: PPUSH
64975: LD_VAR 0 5
64979: PPUSH
64980: LD_VAR 0 4
64984: PPUSH
64985: CALL_OW 74
64989: PPUSH
64990: CALL_OW 112
64994: GO 65020
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64996: LD_VAR 0 4
65000: PPUSH
65001: LD_VAR 0 5
65005: PPUSH
65006: LD_VAR 0 4
65010: PPUSH
65011: CALL_OW 74
65015: PPUSH
65016: CALL 65949 0 2
// end ; end ;
65020: GO 64600
65022: POP
65023: POP
// end ;
65024: LD_VAR 0 3
65028: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65029: LD_INT 0
65031: PPUSH
65032: PPUSH
65033: PPUSH
// if not unit or IsInUnit ( unit ) then
65034: LD_VAR 0 1
65038: NOT
65039: PUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: CALL_OW 310
65049: OR
65050: IFFALSE 65054
// exit ;
65052: GO 65145
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65054: LD_ADDR_VAR 0 4
65058: PUSH
65059: LD_VAR 0 1
65063: PPUSH
65064: CALL_OW 250
65068: PPUSH
65069: LD_VAR 0 2
65073: PPUSH
65074: LD_INT 1
65076: PPUSH
65077: CALL_OW 272
65081: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65082: LD_ADDR_VAR 0 5
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 251
65096: PPUSH
65097: LD_VAR 0 2
65101: PPUSH
65102: LD_INT 1
65104: PPUSH
65105: CALL_OW 273
65109: ST_TO_ADDR
// if ValidHex ( x , y ) then
65110: LD_VAR 0 4
65114: PPUSH
65115: LD_VAR 0 5
65119: PPUSH
65120: CALL_OW 488
65124: IFFALSE 65145
// ComTurnXY ( unit , x , y ) ;
65126: LD_VAR 0 1
65130: PPUSH
65131: LD_VAR 0 4
65135: PPUSH
65136: LD_VAR 0 5
65140: PPUSH
65141: CALL_OW 118
// end ;
65145: LD_VAR 0 3
65149: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65150: LD_INT 0
65152: PPUSH
65153: PPUSH
// result := false ;
65154: LD_ADDR_VAR 0 3
65158: PUSH
65159: LD_INT 0
65161: ST_TO_ADDR
// if not units then
65162: LD_VAR 0 2
65166: NOT
65167: IFFALSE 65171
// exit ;
65169: GO 65216
// for i in units do
65171: LD_ADDR_VAR 0 4
65175: PUSH
65176: LD_VAR 0 2
65180: PUSH
65181: FOR_IN
65182: IFFALSE 65214
// if See ( side , i ) then
65184: LD_VAR 0 1
65188: PPUSH
65189: LD_VAR 0 4
65193: PPUSH
65194: CALL_OW 292
65198: IFFALSE 65212
// begin result := true ;
65200: LD_ADDR_VAR 0 3
65204: PUSH
65205: LD_INT 1
65207: ST_TO_ADDR
// exit ;
65208: POP
65209: POP
65210: GO 65216
// end ;
65212: GO 65181
65214: POP
65215: POP
// end ;
65216: LD_VAR 0 3
65220: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65221: LD_INT 0
65223: PPUSH
65224: PPUSH
65225: PPUSH
65226: PPUSH
// if not unit or not points then
65227: LD_VAR 0 1
65231: NOT
65232: PUSH
65233: LD_VAR 0 2
65237: NOT
65238: OR
65239: IFFALSE 65243
// exit ;
65241: GO 65333
// dist := 99999 ;
65243: LD_ADDR_VAR 0 5
65247: PUSH
65248: LD_INT 99999
65250: ST_TO_ADDR
// for i in points do
65251: LD_ADDR_VAR 0 4
65255: PUSH
65256: LD_VAR 0 2
65260: PUSH
65261: FOR_IN
65262: IFFALSE 65331
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65264: LD_ADDR_VAR 0 6
65268: PUSH
65269: LD_VAR 0 1
65273: PPUSH
65274: LD_VAR 0 4
65278: PUSH
65279: LD_INT 1
65281: ARRAY
65282: PPUSH
65283: LD_VAR 0 4
65287: PUSH
65288: LD_INT 2
65290: ARRAY
65291: PPUSH
65292: CALL_OW 297
65296: ST_TO_ADDR
// if tmpDist < dist then
65297: LD_VAR 0 6
65301: PUSH
65302: LD_VAR 0 5
65306: LESS
65307: IFFALSE 65329
// begin result := i ;
65309: LD_ADDR_VAR 0 3
65313: PUSH
65314: LD_VAR 0 4
65318: ST_TO_ADDR
// dist := tmpDist ;
65319: LD_ADDR_VAR 0 5
65323: PUSH
65324: LD_VAR 0 6
65328: ST_TO_ADDR
// end ; end ;
65329: GO 65261
65331: POP
65332: POP
// end ;
65333: LD_VAR 0 3
65337: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65338: LD_INT 0
65340: PPUSH
// uc_side := side ;
65341: LD_ADDR_OWVAR 20
65345: PUSH
65346: LD_VAR 0 1
65350: ST_TO_ADDR
// uc_nation := 3 ;
65351: LD_ADDR_OWVAR 21
65355: PUSH
65356: LD_INT 3
65358: ST_TO_ADDR
// vc_chassis := 25 ;
65359: LD_ADDR_OWVAR 37
65363: PUSH
65364: LD_INT 25
65366: ST_TO_ADDR
// vc_engine := engine_siberite ;
65367: LD_ADDR_OWVAR 39
65371: PUSH
65372: LD_INT 3
65374: ST_TO_ADDR
// vc_control := control_computer ;
65375: LD_ADDR_OWVAR 38
65379: PUSH
65380: LD_INT 3
65382: ST_TO_ADDR
// vc_weapon := 59 ;
65383: LD_ADDR_OWVAR 40
65387: PUSH
65388: LD_INT 59
65390: ST_TO_ADDR
// result := CreateVehicle ;
65391: LD_ADDR_VAR 0 5
65395: PUSH
65396: CALL_OW 45
65400: ST_TO_ADDR
// SetDir ( result , d ) ;
65401: LD_VAR 0 5
65405: PPUSH
65406: LD_VAR 0 4
65410: PPUSH
65411: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65415: LD_VAR 0 5
65419: PPUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: LD_VAR 0 3
65429: PPUSH
65430: LD_INT 0
65432: PPUSH
65433: CALL_OW 48
// end ;
65437: LD_VAR 0 5
65441: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65442: LD_INT 0
65444: PPUSH
65445: PPUSH
65446: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65447: LD_ADDR_VAR 0 2
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65470: LD_VAR 0 1
65474: NOT
65475: PUSH
65476: LD_VAR 0 1
65480: PPUSH
65481: CALL_OW 264
65485: PUSH
65486: LD_INT 12
65488: PUSH
65489: LD_INT 51
65491: PUSH
65492: LD_INT 32
65494: PUSH
65495: LD_INT 89
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: IN
65504: NOT
65505: OR
65506: IFFALSE 65510
// exit ;
65508: GO 65608
// for i := 1 to 3 do
65510: LD_ADDR_VAR 0 3
65514: PUSH
65515: DOUBLE
65516: LD_INT 1
65518: DEC
65519: ST_TO_ADDR
65520: LD_INT 3
65522: PUSH
65523: FOR_TO
65524: IFFALSE 65606
// begin tmp := GetCargo ( cargo , i ) ;
65526: LD_ADDR_VAR 0 4
65530: PUSH
65531: LD_VAR 0 1
65535: PPUSH
65536: LD_VAR 0 3
65540: PPUSH
65541: CALL_OW 289
65545: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65546: LD_ADDR_VAR 0 2
65550: PUSH
65551: LD_VAR 0 2
65555: PPUSH
65556: LD_VAR 0 3
65560: PPUSH
65561: LD_VAR 0 4
65565: PPUSH
65566: CALL_OW 1
65570: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65571: LD_ADDR_VAR 0 2
65575: PUSH
65576: LD_VAR 0 2
65580: PPUSH
65581: LD_INT 4
65583: PPUSH
65584: LD_VAR 0 2
65588: PUSH
65589: LD_INT 4
65591: ARRAY
65592: PUSH
65593: LD_VAR 0 4
65597: PLUS
65598: PPUSH
65599: CALL_OW 1
65603: ST_TO_ADDR
// end ;
65604: GO 65523
65606: POP
65607: POP
// end ;
65608: LD_VAR 0 2
65612: RET
// export function Length ( array ) ; begin
65613: LD_INT 0
65615: PPUSH
// result := array + 0 ;
65616: LD_ADDR_VAR 0 2
65620: PUSH
65621: LD_VAR 0 1
65625: PUSH
65626: LD_INT 0
65628: PLUS
65629: ST_TO_ADDR
// end ;
65630: LD_VAR 0 2
65634: RET
// export function PrepareArray ( array ) ; begin
65635: LD_INT 0
65637: PPUSH
// result := array diff 0 ;
65638: LD_ADDR_VAR 0 2
65642: PUSH
65643: LD_VAR 0 1
65647: PUSH
65648: LD_INT 0
65650: DIFF
65651: ST_TO_ADDR
// if not result [ 1 ] then
65652: LD_VAR 0 2
65656: PUSH
65657: LD_INT 1
65659: ARRAY
65660: NOT
65661: IFFALSE 65681
// result := Delete ( result , 1 ) ;
65663: LD_ADDR_VAR 0 2
65667: PUSH
65668: LD_VAR 0 2
65672: PPUSH
65673: LD_INT 1
65675: PPUSH
65676: CALL_OW 3
65680: ST_TO_ADDR
// end ;
65681: LD_VAR 0 2
65685: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65686: LD_INT 0
65688: PPUSH
65689: PPUSH
65690: PPUSH
65691: PPUSH
// sibRocketRange := 25 ;
65692: LD_ADDR_VAR 0 6
65696: PUSH
65697: LD_INT 25
65699: ST_TO_ADDR
// result := false ;
65700: LD_ADDR_VAR 0 4
65704: PUSH
65705: LD_INT 0
65707: ST_TO_ADDR
// for i := 0 to 5 do
65708: LD_ADDR_VAR 0 5
65712: PUSH
65713: DOUBLE
65714: LD_INT 0
65716: DEC
65717: ST_TO_ADDR
65718: LD_INT 5
65720: PUSH
65721: FOR_TO
65722: IFFALSE 65789
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65724: LD_VAR 0 1
65728: PPUSH
65729: LD_VAR 0 5
65733: PPUSH
65734: LD_VAR 0 6
65738: PPUSH
65739: CALL_OW 272
65743: PPUSH
65744: LD_VAR 0 2
65748: PPUSH
65749: LD_VAR 0 5
65753: PPUSH
65754: LD_VAR 0 6
65758: PPUSH
65759: CALL_OW 273
65763: PPUSH
65764: LD_VAR 0 3
65768: PPUSH
65769: CALL_OW 309
65773: IFFALSE 65787
// begin result := true ;
65775: LD_ADDR_VAR 0 4
65779: PUSH
65780: LD_INT 1
65782: ST_TO_ADDR
// exit ;
65783: POP
65784: POP
65785: GO 65791
// end ;
65787: GO 65721
65789: POP
65790: POP
// end ;
65791: LD_VAR 0 4
65795: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65796: LD_INT 0
65798: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65799: LD_VAR 0 1
65803: PPUSH
65804: LD_VAR 0 2
65808: PPUSH
65809: LD_INT 0
65811: PPUSH
65812: LD_INT 0
65814: PPUSH
65815: LD_INT 1
65817: PPUSH
65818: LD_INT 0
65820: PPUSH
65821: CALL_OW 587
// end ;
65825: LD_VAR 0 3
65829: RET
// export function CenterOnNow ( unit ) ; begin
65830: LD_INT 0
65832: PPUSH
// result := IsInUnit ( unit ) ;
65833: LD_ADDR_VAR 0 2
65837: PUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: CALL_OW 310
65847: ST_TO_ADDR
// if not result then
65848: LD_VAR 0 2
65852: NOT
65853: IFFALSE 65865
// result := unit ;
65855: LD_ADDR_VAR 0 2
65859: PUSH
65860: LD_VAR 0 1
65864: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65865: LD_VAR 0 1
65869: PPUSH
65870: CALL_OW 87
// end ;
65874: LD_VAR 0 2
65878: RET
// export function ComMoveHex ( unit , hex ) ; begin
65879: LD_INT 0
65881: PPUSH
// if not hex then
65882: LD_VAR 0 2
65886: NOT
65887: IFFALSE 65891
// exit ;
65889: GO 65944
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65891: LD_VAR 0 2
65895: PUSH
65896: LD_INT 1
65898: ARRAY
65899: PPUSH
65900: LD_VAR 0 2
65904: PUSH
65905: LD_INT 2
65907: ARRAY
65908: PPUSH
65909: CALL_OW 428
65913: IFFALSE 65917
// exit ;
65915: GO 65944
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65917: LD_VAR 0 1
65921: PPUSH
65922: LD_VAR 0 2
65926: PUSH
65927: LD_INT 1
65929: ARRAY
65930: PPUSH
65931: LD_VAR 0 2
65935: PUSH
65936: LD_INT 2
65938: ARRAY
65939: PPUSH
65940: CALL_OW 111
// end ;
65944: LD_VAR 0 3
65948: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65949: LD_INT 0
65951: PPUSH
65952: PPUSH
65953: PPUSH
// if not unit or not enemy then
65954: LD_VAR 0 1
65958: NOT
65959: PUSH
65960: LD_VAR 0 2
65964: NOT
65965: OR
65966: IFFALSE 65970
// exit ;
65968: GO 66094
// x := GetX ( enemy ) ;
65970: LD_ADDR_VAR 0 4
65974: PUSH
65975: LD_VAR 0 2
65979: PPUSH
65980: CALL_OW 250
65984: ST_TO_ADDR
// y := GetY ( enemy ) ;
65985: LD_ADDR_VAR 0 5
65989: PUSH
65990: LD_VAR 0 2
65994: PPUSH
65995: CALL_OW 251
65999: ST_TO_ADDR
// if ValidHex ( x , y ) then
66000: LD_VAR 0 4
66004: PPUSH
66005: LD_VAR 0 5
66009: PPUSH
66010: CALL_OW 488
66014: IFFALSE 66094
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
66016: LD_VAR 0 2
66020: PPUSH
66021: CALL_OW 247
66025: PUSH
66026: LD_INT 3
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: IN
66036: PUSH
66037: LD_VAR 0 1
66041: PPUSH
66042: CALL_OW 255
66046: PPUSH
66047: LD_VAR 0 2
66051: PPUSH
66052: CALL_OW 292
66056: AND
66057: IFFALSE 66075
// ComAttackUnit ( unit , enemy ) else
66059: LD_VAR 0 1
66063: PPUSH
66064: LD_VAR 0 2
66068: PPUSH
66069: CALL_OW 115
66073: GO 66094
// ComAgressiveMove ( unit , x , y ) ;
66075: LD_VAR 0 1
66079: PPUSH
66080: LD_VAR 0 4
66084: PPUSH
66085: LD_VAR 0 5
66089: PPUSH
66090: CALL_OW 114
// end ; end_of_file
66094: LD_VAR 0 3
66098: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66099: LD_VAR 0 1
66103: PUSH
66104: LD_INT 200
66106: DOUBLE
66107: GREATEREQUAL
66108: IFFALSE 66116
66110: LD_INT 299
66112: DOUBLE
66113: LESSEQUAL
66114: IFTRUE 66118
66116: GO 66150
66118: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66119: LD_VAR 0 1
66123: PPUSH
66124: LD_VAR 0 2
66128: PPUSH
66129: LD_VAR 0 3
66133: PPUSH
66134: LD_VAR 0 4
66138: PPUSH
66139: LD_VAR 0 5
66143: PPUSH
66144: CALL 20643 0 5
66148: GO 66227
66150: LD_INT 300
66152: DOUBLE
66153: GREATEREQUAL
66154: IFFALSE 66162
66156: LD_INT 399
66158: DOUBLE
66159: LESSEQUAL
66160: IFTRUE 66164
66162: GO 66226
66164: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66165: LD_VAR 0 1
66169: PPUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: LD_VAR 0 3
66179: PPUSH
66180: LD_VAR 0 4
66184: PPUSH
66185: LD_VAR 0 5
66189: PPUSH
66190: LD_VAR 0 6
66194: PPUSH
66195: LD_VAR 0 7
66199: PPUSH
66200: LD_VAR 0 8
66204: PPUSH
66205: LD_VAR 0 9
66209: PPUSH
66210: LD_VAR 0 10
66214: PPUSH
66215: LD_VAR 0 11
66219: PPUSH
66220: CALL 16968 0 11
66224: GO 66227
66226: POP
// end ;
66227: PPOPN 11
66229: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66230: LD_VAR 0 1
66234: PPUSH
66235: LD_VAR 0 2
66239: PPUSH
66240: LD_VAR 0 3
66244: PPUSH
66245: LD_VAR 0 4
66249: PPUSH
66250: LD_VAR 0 5
66254: PPUSH
66255: CALL 20379 0 5
// end ; end_of_file
66259: PPOPN 5
66261: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66262: LD_VAR 0 1
66266: PPUSH
66267: LD_VAR 0 2
66271: PPUSH
66272: LD_VAR 0 3
66276: PPUSH
66277: LD_VAR 0 4
66281: PPUSH
66282: LD_VAR 0 5
66286: PPUSH
66287: LD_VAR 0 6
66291: PPUSH
66292: CALL 4620 0 6
// end ;
66296: PPOPN 6
66298: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66299: LD_INT 0
66301: PPUSH
// begin if not units then
66302: LD_VAR 0 1
66306: NOT
66307: IFFALSE 66311
// exit ;
66309: GO 66311
// end ;
66311: PPOPN 7
66313: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66314: CALL 4524 0 0
// end ;
66318: PPOPN 1
66320: END
