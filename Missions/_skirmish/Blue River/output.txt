// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 18619 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 18717 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 18725 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_miner := 81 ;
4669: LD_ADDR_EXP 14
4673: PUSH
4674: LD_INT 81
4676: ST_TO_ADDR
// ar_crane := 88 ;
4677: LD_ADDR_EXP 13
4681: PUSH
4682: LD_INT 88
4684: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4685: LD_ADDR_EXP 8
4689: PUSH
4690: LD_INT 89
4692: ST_TO_ADDR
// us_hack := 99 ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 99
4700: ST_TO_ADDR
// us_artillery := 97 ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 97
4708: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4709: LD_ADDR_EXP 11
4713: PUSH
4714: LD_INT 91
4716: ST_TO_ADDR
// ar_mortar := 92 ;
4717: LD_ADDR_EXP 12
4721: PUSH
4722: LD_INT 92
4724: ST_TO_ADDR
// ru_radar := 98 ;
4725: LD_ADDR_EXP 7
4729: PUSH
4730: LD_INT 98
4732: ST_TO_ADDR
// tech_Artillery := 80 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 80
4740: ST_TO_ADDR
// tech_RadMat := 81 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 81
4748: ST_TO_ADDR
// tech_BasicTools := 82 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 82
4756: ST_TO_ADDR
// tech_Cargo := 83 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 83
4764: ST_TO_ADDR
// tech_Track := 84 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 84
4772: ST_TO_ADDR
// tech_Crane := 85 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 85
4780: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 86
4788: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4789: LD_ADDR_EXP 22
4793: PUSH
4794: LD_INT 87
4796: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4797: LD_ADDR_EXP 23
4801: PUSH
4802: LD_INT 88
4804: ST_TO_ADDR
// class_mastodont := 31 ;
4805: LD_ADDR_EXP 24
4809: PUSH
4810: LD_INT 31
4812: ST_TO_ADDR
// class_horse := 21 ;
4813: LD_ADDR_EXP 25
4817: PUSH
4818: LD_INT 21
4820: ST_TO_ADDR
// end ;
4821: LD_VAR 0 1
4825: RET
// every 1 do
4826: GO 4828
4828: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4829: CALL 4666 0 0
4833: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4834: LD_INT 0
4836: PPUSH
// if p2 = 100 then
4837: LD_VAR 0 2
4841: PUSH
4842: LD_INT 100
4844: EQUAL
4845: IFFALSE 5848
// begin if not StreamModeActive then
4847: LD_EXP 26
4851: NOT
4852: IFFALSE 4862
// StreamModeActive := true ;
4854: LD_ADDR_EXP 26
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// if p3 = 0 then
4862: LD_VAR 0 3
4866: PUSH
4867: LD_INT 0
4869: EQUAL
4870: IFFALSE 4876
// InitStreamMode ;
4872: CALL 6008 0 0
// if p3 = 1 then
4876: LD_VAR 0 3
4880: PUSH
4881: LD_INT 1
4883: EQUAL
4884: IFFALSE 4894
// sRocket := true ;
4886: LD_ADDR_EXP 31
4890: PUSH
4891: LD_INT 1
4893: ST_TO_ADDR
// if p3 = 2 then
4894: LD_VAR 0 3
4898: PUSH
4899: LD_INT 2
4901: EQUAL
4902: IFFALSE 4912
// sSpeed := true ;
4904: LD_ADDR_EXP 30
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// if p3 = 3 then
4912: LD_VAR 0 3
4916: PUSH
4917: LD_INT 3
4919: EQUAL
4920: IFFALSE 4930
// sEngine := true ;
4922: LD_ADDR_EXP 32
4926: PUSH
4927: LD_INT 1
4929: ST_TO_ADDR
// if p3 = 4 then
4930: LD_VAR 0 3
4934: PUSH
4935: LD_INT 4
4937: EQUAL
4938: IFFALSE 4948
// sSpec := true ;
4940: LD_ADDR_EXP 29
4944: PUSH
4945: LD_INT 1
4947: ST_TO_ADDR
// if p3 = 5 then
4948: LD_VAR 0 3
4952: PUSH
4953: LD_INT 5
4955: EQUAL
4956: IFFALSE 4966
// sLevel := true ;
4958: LD_ADDR_EXP 33
4962: PUSH
4963: LD_INT 1
4965: ST_TO_ADDR
// if p3 = 6 then
4966: LD_VAR 0 3
4970: PUSH
4971: LD_INT 6
4973: EQUAL
4974: IFFALSE 4984
// sArmoury := true ;
4976: LD_ADDR_EXP 34
4980: PUSH
4981: LD_INT 1
4983: ST_TO_ADDR
// if p3 = 7 then
4984: LD_VAR 0 3
4988: PUSH
4989: LD_INT 7
4991: EQUAL
4992: IFFALSE 5002
// sRadar := true ;
4994: LD_ADDR_EXP 35
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// if p3 = 8 then
5002: LD_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: EQUAL
5010: IFFALSE 5020
// sBunker := true ;
5012: LD_ADDR_EXP 36
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// if p3 = 9 then
5020: LD_VAR 0 3
5024: PUSH
5025: LD_INT 9
5027: EQUAL
5028: IFFALSE 5038
// sHack := true ;
5030: LD_ADDR_EXP 37
5034: PUSH
5035: LD_INT 1
5037: ST_TO_ADDR
// if p3 = 10 then
5038: LD_VAR 0 3
5042: PUSH
5043: LD_INT 10
5045: EQUAL
5046: IFFALSE 5056
// sFire := true ;
5048: LD_ADDR_EXP 38
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// if p3 = 11 then
5056: LD_VAR 0 3
5060: PUSH
5061: LD_INT 11
5063: EQUAL
5064: IFFALSE 5074
// sRefresh := true ;
5066: LD_ADDR_EXP 39
5070: PUSH
5071: LD_INT 1
5073: ST_TO_ADDR
// if p3 = 12 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 12
5081: EQUAL
5082: IFFALSE 5092
// sExp := true ;
5084: LD_ADDR_EXP 40
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// if p3 = 13 then
5092: LD_VAR 0 3
5096: PUSH
5097: LD_INT 13
5099: EQUAL
5100: IFFALSE 5110
// sDepot := true ;
5102: LD_ADDR_EXP 41
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// if p3 = 14 then
5110: LD_VAR 0 3
5114: PUSH
5115: LD_INT 14
5117: EQUAL
5118: IFFALSE 5128
// sFlag := true ;
5120: LD_ADDR_EXP 42
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// if p3 = 15 then
5128: LD_VAR 0 3
5132: PUSH
5133: LD_INT 15
5135: EQUAL
5136: IFFALSE 5146
// sKamikadze := true ;
5138: LD_ADDR_EXP 50
5142: PUSH
5143: LD_INT 1
5145: ST_TO_ADDR
// if p3 = 16 then
5146: LD_VAR 0 3
5150: PUSH
5151: LD_INT 16
5153: EQUAL
5154: IFFALSE 5164
// sTroll := true ;
5156: LD_ADDR_EXP 51
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// if p3 = 17 then
5164: LD_VAR 0 3
5168: PUSH
5169: LD_INT 17
5171: EQUAL
5172: IFFALSE 5182
// sSlow := true ;
5174: LD_ADDR_EXP 52
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if p3 = 18 then
5182: LD_VAR 0 3
5186: PUSH
5187: LD_INT 18
5189: EQUAL
5190: IFFALSE 5200
// sLack := true ;
5192: LD_ADDR_EXP 53
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// if p3 = 19 then
5200: LD_VAR 0 3
5204: PUSH
5205: LD_INT 19
5207: EQUAL
5208: IFFALSE 5218
// sTank := true ;
5210: LD_ADDR_EXP 55
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if p3 = 20 then
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 20
5225: EQUAL
5226: IFFALSE 5236
// sRemote := true ;
5228: LD_ADDR_EXP 56
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// if p3 = 21 then
5236: LD_VAR 0 3
5240: PUSH
5241: LD_INT 21
5243: EQUAL
5244: IFFALSE 5254
// sPowell := true ;
5246: LD_ADDR_EXP 57
5250: PUSH
5251: LD_INT 1
5253: ST_TO_ADDR
// if p3 = 22 then
5254: LD_VAR 0 3
5258: PUSH
5259: LD_INT 22
5261: EQUAL
5262: IFFALSE 5272
// sTeleport := true ;
5264: LD_ADDR_EXP 60
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// if p3 = 23 then
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 23
5279: EQUAL
5280: IFFALSE 5290
// sOilTower := true ;
5282: LD_ADDR_EXP 62
5286: PUSH
5287: LD_INT 1
5289: ST_TO_ADDR
// if p3 = 24 then
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 24
5297: EQUAL
5298: IFFALSE 5308
// sShovel := true ;
5300: LD_ADDR_EXP 63
5304: PUSH
5305: LD_INT 1
5307: ST_TO_ADDR
// if p3 = 25 then
5308: LD_VAR 0 3
5312: PUSH
5313: LD_INT 25
5315: EQUAL
5316: IFFALSE 5326
// sSheik := true ;
5318: LD_ADDR_EXP 64
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// if p3 = 26 then
5326: LD_VAR 0 3
5330: PUSH
5331: LD_INT 26
5333: EQUAL
5334: IFFALSE 5344
// sEarthquake := true ;
5336: LD_ADDR_EXP 66
5340: PUSH
5341: LD_INT 1
5343: ST_TO_ADDR
// if p3 = 27 then
5344: LD_VAR 0 3
5348: PUSH
5349: LD_INT 27
5351: EQUAL
5352: IFFALSE 5362
// sAI := true ;
5354: LD_ADDR_EXP 67
5358: PUSH
5359: LD_INT 1
5361: ST_TO_ADDR
// if p3 = 28 then
5362: LD_VAR 0 3
5366: PUSH
5367: LD_INT 28
5369: EQUAL
5370: IFFALSE 5380
// sCargo := true ;
5372: LD_ADDR_EXP 70
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// if p3 = 29 then
5380: LD_VAR 0 3
5384: PUSH
5385: LD_INT 29
5387: EQUAL
5388: IFFALSE 5398
// sDLaser := true ;
5390: LD_ADDR_EXP 71
5394: PUSH
5395: LD_INT 1
5397: ST_TO_ADDR
// if p3 = 30 then
5398: LD_VAR 0 3
5402: PUSH
5403: LD_INT 30
5405: EQUAL
5406: IFFALSE 5416
// sExchange := true ;
5408: LD_ADDR_EXP 72
5412: PUSH
5413: LD_INT 1
5415: ST_TO_ADDR
// if p3 = 31 then
5416: LD_VAR 0 3
5420: PUSH
5421: LD_INT 31
5423: EQUAL
5424: IFFALSE 5434
// sFac := true ;
5426: LD_ADDR_EXP 73
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// if p3 = 32 then
5434: LD_VAR 0 3
5438: PUSH
5439: LD_INT 32
5441: EQUAL
5442: IFFALSE 5452
// sPower := true ;
5444: LD_ADDR_EXP 74
5448: PUSH
5449: LD_INT 1
5451: ST_TO_ADDR
// if p3 = 33 then
5452: LD_VAR 0 3
5456: PUSH
5457: LD_INT 33
5459: EQUAL
5460: IFFALSE 5470
// sRandom := true ;
5462: LD_ADDR_EXP 75
5466: PUSH
5467: LD_INT 1
5469: ST_TO_ADDR
// if p3 = 34 then
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 34
5477: EQUAL
5478: IFFALSE 5488
// sShield := true ;
5480: LD_ADDR_EXP 76
5484: PUSH
5485: LD_INT 1
5487: ST_TO_ADDR
// if p3 = 35 then
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 35
5495: EQUAL
5496: IFFALSE 5506
// sTime := true ;
5498: LD_ADDR_EXP 77
5502: PUSH
5503: LD_INT 1
5505: ST_TO_ADDR
// if p3 = 36 then
5506: LD_VAR 0 3
5510: PUSH
5511: LD_INT 36
5513: EQUAL
5514: IFFALSE 5524
// sTools := true ;
5516: LD_ADDR_EXP 78
5520: PUSH
5521: LD_INT 1
5523: ST_TO_ADDR
// if p3 = 101 then
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 101
5531: EQUAL
5532: IFFALSE 5542
// sSold := true ;
5534: LD_ADDR_EXP 43
5538: PUSH
5539: LD_INT 1
5541: ST_TO_ADDR
// if p3 = 102 then
5542: LD_VAR 0 3
5546: PUSH
5547: LD_INT 102
5549: EQUAL
5550: IFFALSE 5560
// sDiff := true ;
5552: LD_ADDR_EXP 44
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// if p3 = 103 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_INT 103
5567: EQUAL
5568: IFFALSE 5578
// sFog := true ;
5570: LD_ADDR_EXP 47
5574: PUSH
5575: LD_INT 1
5577: ST_TO_ADDR
// if p3 = 104 then
5578: LD_VAR 0 3
5582: PUSH
5583: LD_INT 104
5585: EQUAL
5586: IFFALSE 5596
// sReset := true ;
5588: LD_ADDR_EXP 48
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// if p3 = 105 then
5596: LD_VAR 0 3
5600: PUSH
5601: LD_INT 105
5603: EQUAL
5604: IFFALSE 5614
// sSun := true ;
5606: LD_ADDR_EXP 49
5610: PUSH
5611: LD_INT 1
5613: ST_TO_ADDR
// if p3 = 106 then
5614: LD_VAR 0 3
5618: PUSH
5619: LD_INT 106
5621: EQUAL
5622: IFFALSE 5632
// sTiger := true ;
5624: LD_ADDR_EXP 45
5628: PUSH
5629: LD_INT 1
5631: ST_TO_ADDR
// if p3 = 107 then
5632: LD_VAR 0 3
5636: PUSH
5637: LD_INT 107
5639: EQUAL
5640: IFFALSE 5650
// sBomb := true ;
5642: LD_ADDR_EXP 46
5646: PUSH
5647: LD_INT 1
5649: ST_TO_ADDR
// if p3 = 108 then
5650: LD_VAR 0 3
5654: PUSH
5655: LD_INT 108
5657: EQUAL
5658: IFFALSE 5668
// sWound := true ;
5660: LD_ADDR_EXP 54
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// if p3 = 109 then
5668: LD_VAR 0 3
5672: PUSH
5673: LD_INT 109
5675: EQUAL
5676: IFFALSE 5686
// sBetray := true ;
5678: LD_ADDR_EXP 58
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// if p3 = 110 then
5686: LD_VAR 0 3
5690: PUSH
5691: LD_INT 110
5693: EQUAL
5694: IFFALSE 5704
// sContamin := true ;
5696: LD_ADDR_EXP 59
5700: PUSH
5701: LD_INT 1
5703: ST_TO_ADDR
// if p3 = 111 then
5704: LD_VAR 0 3
5708: PUSH
5709: LD_INT 111
5711: EQUAL
5712: IFFALSE 5722
// sOil := true ;
5714: LD_ADDR_EXP 61
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// if p3 = 112 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_INT 112
5729: EQUAL
5730: IFFALSE 5740
// sStu := true ;
5732: LD_ADDR_EXP 65
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// if p3 = 113 then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 113
5747: EQUAL
5748: IFFALSE 5758
// sBazooka := true ;
5750: LD_ADDR_EXP 68
5754: PUSH
5755: LD_INT 1
5757: ST_TO_ADDR
// if p3 = 114 then
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 114
5765: EQUAL
5766: IFFALSE 5776
// sMortar := true ;
5768: LD_ADDR_EXP 69
5772: PUSH
5773: LD_INT 1
5775: ST_TO_ADDR
// if p3 = 115 then
5776: LD_VAR 0 3
5780: PUSH
5781: LD_INT 115
5783: EQUAL
5784: IFFALSE 5794
// sRanger := true ;
5786: LD_ADDR_EXP 79
5790: PUSH
5791: LD_INT 1
5793: ST_TO_ADDR
// if p3 = 116 then
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 116
5801: EQUAL
5802: IFFALSE 5812
// sComputer := true ;
5804: LD_ADDR_EXP 80
5808: PUSH
5809: LD_INT 1
5811: ST_TO_ADDR
// if p3 = 117 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 117
5819: EQUAL
5820: IFFALSE 5830
// s30 := true ;
5822: LD_ADDR_EXP 81
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// if p3 = 118 then
5830: LD_VAR 0 3
5834: PUSH
5835: LD_INT 118
5837: EQUAL
5838: IFFALSE 5848
// s60 := true ;
5840: LD_ADDR_EXP 82
5844: PUSH
5845: LD_INT 1
5847: ST_TO_ADDR
// end ; if p2 = 101 then
5848: LD_VAR 0 2
5852: PUSH
5853: LD_INT 101
5855: EQUAL
5856: IFFALSE 5984
// begin case p3 of 1 :
5858: LD_VAR 0 3
5862: PUSH
5863: LD_INT 1
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5878
5871: POP
// hHackUnlimitedResources ; 2 :
5872: CALL 17580 0 0
5876: GO 5984
5878: LD_INT 2
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5893
5886: POP
// hHackSetLevel10 ; 3 :
5887: CALL 17713 0 0
5891: GO 5984
5893: LD_INT 3
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5908
5901: POP
// hHackSetLevel10YourUnits ; 4 :
5902: CALL 17798 0 0
5906: GO 5984
5908: LD_INT 4
5910: DOUBLE
5911: EQUAL
5912: IFTRUE 5916
5914: GO 5923
5916: POP
// hHackInvincible ; 5 :
5917: CALL 18246 0 0
5921: GO 5984
5923: LD_INT 5
5925: DOUBLE
5926: EQUAL
5927: IFTRUE 5931
5929: GO 5938
5931: POP
// hHackInvisible ; 6 :
5932: CALL 18357 0 0
5936: GO 5984
5938: LD_INT 6
5940: DOUBLE
5941: EQUAL
5942: IFTRUE 5946
5944: GO 5953
5946: POP
// hHackChangeYourSide ; 7 :
5947: CALL 18414 0 0
5951: GO 5984
5953: LD_INT 7
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5968
5961: POP
// hHackChangeUnitSide ; 8 :
5962: CALL 18456 0 0
5966: GO 5984
5968: LD_INT 8
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 5976
5974: GO 5983
5976: POP
// hHackFog ; end ;
5977: CALL 18557 0 0
5981: GO 5984
5983: POP
// end ; end ;
5984: LD_VAR 0 7
5988: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5989: GO 5991
5991: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5992: LD_STRING initStreamRollete();
5994: PPUSH
5995: CALL_OW 559
// InitStreamMode ;
5999: CALL 6008 0 0
// DefineStreamItems ( ) ;
6003: CALL 6472 0 0
// end ;
6007: END
// function InitStreamMode ; begin
6008: LD_INT 0
6010: PPUSH
// streamModeActive := false ;
6011: LD_ADDR_EXP 26
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// normalCounter := 36 ;
6019: LD_ADDR_EXP 27
6023: PUSH
6024: LD_INT 36
6026: ST_TO_ADDR
// hardcoreCounter := 16 ;
6027: LD_ADDR_EXP 28
6031: PUSH
6032: LD_INT 16
6034: ST_TO_ADDR
// sRocket := false ;
6035: LD_ADDR_EXP 31
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sSpeed := false ;
6043: LD_ADDR_EXP 30
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sEngine := false ;
6051: LD_ADDR_EXP 32
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sSpec := false ;
6059: LD_ADDR_EXP 29
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sLevel := false ;
6067: LD_ADDR_EXP 33
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sArmoury := false ;
6075: LD_ADDR_EXP 34
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sRadar := false ;
6083: LD_ADDR_EXP 35
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sBunker := false ;
6091: LD_ADDR_EXP 36
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sHack := false ;
6099: LD_ADDR_EXP 37
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sFire := false ;
6107: LD_ADDR_EXP 38
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sRefresh := false ;
6115: LD_ADDR_EXP 39
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sExp := false ;
6123: LD_ADDR_EXP 40
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sDepot := false ;
6131: LD_ADDR_EXP 41
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sFlag := false ;
6139: LD_ADDR_EXP 42
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sKamikadze := false ;
6147: LD_ADDR_EXP 50
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sTroll := false ;
6155: LD_ADDR_EXP 51
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sSlow := false ;
6163: LD_ADDR_EXP 52
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sLack := false ;
6171: LD_ADDR_EXP 53
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sTank := false ;
6179: LD_ADDR_EXP 55
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sRemote := false ;
6187: LD_ADDR_EXP 56
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sPowell := false ;
6195: LD_ADDR_EXP 57
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sTeleport := false ;
6203: LD_ADDR_EXP 60
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sOilTower := false ;
6211: LD_ADDR_EXP 62
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sShovel := false ;
6219: LD_ADDR_EXP 63
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sSheik := false ;
6227: LD_ADDR_EXP 64
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sEarthquake := false ;
6235: LD_ADDR_EXP 66
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sAI := false ;
6243: LD_ADDR_EXP 67
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sCargo := false ;
6251: LD_ADDR_EXP 70
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sDLaser := false ;
6259: LD_ADDR_EXP 71
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sExchange := false ;
6267: LD_ADDR_EXP 72
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sFac := false ;
6275: LD_ADDR_EXP 73
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sPower := false ;
6283: LD_ADDR_EXP 74
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sRandom := false ;
6291: LD_ADDR_EXP 75
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sShield := false ;
6299: LD_ADDR_EXP 76
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sTime := false ;
6307: LD_ADDR_EXP 77
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// sTools := false ;
6315: LD_ADDR_EXP 78
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// sSold := false ;
6323: LD_ADDR_EXP 43
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// sDiff := false ;
6331: LD_ADDR_EXP 44
6335: PUSH
6336: LD_INT 0
6338: ST_TO_ADDR
// sFog := false ;
6339: LD_ADDR_EXP 47
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// sReset := false ;
6347: LD_ADDR_EXP 48
6351: PUSH
6352: LD_INT 0
6354: ST_TO_ADDR
// sSun := false ;
6355: LD_ADDR_EXP 49
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// sTiger := false ;
6363: LD_ADDR_EXP 45
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// sBomb := false ;
6371: LD_ADDR_EXP 46
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// sWound := false ;
6379: LD_ADDR_EXP 54
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sBetray := false ;
6387: LD_ADDR_EXP 58
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sContamin := false ;
6395: LD_ADDR_EXP 59
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sOil := false ;
6403: LD_ADDR_EXP 61
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sStu := false ;
6411: LD_ADDR_EXP 65
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sBazooka := false ;
6419: LD_ADDR_EXP 68
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// sMortar := false ;
6427: LD_ADDR_EXP 69
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// sRanger := false ;
6435: LD_ADDR_EXP 79
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// sComputer := false ;
6443: LD_ADDR_EXP 80
6447: PUSH
6448: LD_INT 0
6450: ST_TO_ADDR
// s30 := false ;
6451: LD_ADDR_EXP 81
6455: PUSH
6456: LD_INT 0
6458: ST_TO_ADDR
// s60 := false ;
6459: LD_ADDR_EXP 82
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// end ;
6467: LD_VAR 0 1
6471: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6472: LD_INT 0
6474: PPUSH
6475: PPUSH
6476: PPUSH
6477: PPUSH
6478: PPUSH
// result := [ ] ;
6479: LD_ADDR_VAR 0 1
6483: PUSH
6484: EMPTY
6485: ST_TO_ADDR
// if campaign_id = 1 then
6486: LD_OWVAR 69
6490: PUSH
6491: LD_INT 1
6493: EQUAL
6494: IFFALSE 9660
// begin case mission_number of 1 :
6496: LD_OWVAR 70
6500: PUSH
6501: LD_INT 1
6503: DOUBLE
6504: EQUAL
6505: IFTRUE 6509
6507: GO 6585
6509: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6510: LD_ADDR_VAR 0 1
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: LD_INT 4
6520: PUSH
6521: LD_INT 11
6523: PUSH
6524: LD_INT 12
6526: PUSH
6527: LD_INT 15
6529: PUSH
6530: LD_INT 16
6532: PUSH
6533: LD_INT 22
6535: PUSH
6536: LD_INT 23
6538: PUSH
6539: LD_INT 26
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 101
6555: PUSH
6556: LD_INT 102
6558: PUSH
6559: LD_INT 106
6561: PUSH
6562: LD_INT 116
6564: PUSH
6565: LD_INT 117
6567: PUSH
6568: LD_INT 118
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: ST_TO_ADDR
6583: GO 9658
6585: LD_INT 2
6587: DOUBLE
6588: EQUAL
6589: IFTRUE 6593
6591: GO 6677
6593: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6594: LD_ADDR_VAR 0 1
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: LD_INT 4
6604: PUSH
6605: LD_INT 11
6607: PUSH
6608: LD_INT 12
6610: PUSH
6611: LD_INT 15
6613: PUSH
6614: LD_INT 16
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_INT 23
6622: PUSH
6623: LD_INT 26
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 101
6639: PUSH
6640: LD_INT 102
6642: PUSH
6643: LD_INT 105
6645: PUSH
6646: LD_INT 106
6648: PUSH
6649: LD_INT 108
6651: PUSH
6652: LD_INT 116
6654: PUSH
6655: LD_INT 117
6657: PUSH
6658: LD_INT 118
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: ST_TO_ADDR
6675: GO 9658
6677: LD_INT 3
6679: DOUBLE
6680: EQUAL
6681: IFTRUE 6685
6683: GO 6773
6685: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6686: LD_ADDR_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 4
6696: PUSH
6697: LD_INT 5
6699: PUSH
6700: LD_INT 11
6702: PUSH
6703: LD_INT 12
6705: PUSH
6706: LD_INT 15
6708: PUSH
6709: LD_INT 16
6711: PUSH
6712: LD_INT 22
6714: PUSH
6715: LD_INT 26
6717: PUSH
6718: LD_INT 36
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 101
6735: PUSH
6736: LD_INT 102
6738: PUSH
6739: LD_INT 105
6741: PUSH
6742: LD_INT 106
6744: PUSH
6745: LD_INT 108
6747: PUSH
6748: LD_INT 116
6750: PUSH
6751: LD_INT 117
6753: PUSH
6754: LD_INT 118
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: ST_TO_ADDR
6771: GO 9658
6773: LD_INT 4
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6877
6781: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6782: LD_ADDR_VAR 0 1
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: LD_INT 8
6798: PUSH
6799: LD_INT 11
6801: PUSH
6802: LD_INT 12
6804: PUSH
6805: LD_INT 15
6807: PUSH
6808: LD_INT 16
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_INT 23
6816: PUSH
6817: LD_INT 26
6819: PUSH
6820: LD_INT 36
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 101
6839: PUSH
6840: LD_INT 102
6842: PUSH
6843: LD_INT 105
6845: PUSH
6846: LD_INT 106
6848: PUSH
6849: LD_INT 108
6851: PUSH
6852: LD_INT 116
6854: PUSH
6855: LD_INT 117
6857: PUSH
6858: LD_INT 118
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: ST_TO_ADDR
6875: GO 9658
6877: LD_INT 5
6879: DOUBLE
6880: EQUAL
6881: IFTRUE 6885
6883: GO 6997
6885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6886: LD_ADDR_VAR 0 1
6890: PUSH
6891: LD_INT 2
6893: PUSH
6894: LD_INT 4
6896: PUSH
6897: LD_INT 5
6899: PUSH
6900: LD_INT 6
6902: PUSH
6903: LD_INT 8
6905: PUSH
6906: LD_INT 11
6908: PUSH
6909: LD_INT 12
6911: PUSH
6912: LD_INT 15
6914: PUSH
6915: LD_INT 16
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_INT 23
6923: PUSH
6924: LD_INT 25
6926: PUSH
6927: LD_INT 26
6929: PUSH
6930: LD_INT 36
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 101
6951: PUSH
6952: LD_INT 102
6954: PUSH
6955: LD_INT 105
6957: PUSH
6958: LD_INT 106
6960: PUSH
6961: LD_INT 108
6963: PUSH
6964: LD_INT 109
6966: PUSH
6967: LD_INT 112
6969: PUSH
6970: LD_INT 116
6972: PUSH
6973: LD_INT 117
6975: PUSH
6976: LD_INT 118
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: ST_TO_ADDR
6995: GO 9658
6997: LD_INT 6
6999: DOUBLE
7000: EQUAL
7001: IFTRUE 7005
7003: GO 7137
7005: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7006: LD_ADDR_VAR 0 1
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: LD_INT 5
7019: PUSH
7020: LD_INT 6
7022: PUSH
7023: LD_INT 8
7025: PUSH
7026: LD_INT 11
7028: PUSH
7029: LD_INT 12
7031: PUSH
7032: LD_INT 15
7034: PUSH
7035: LD_INT 16
7037: PUSH
7038: LD_INT 20
7040: PUSH
7041: LD_INT 21
7043: PUSH
7044: LD_INT 22
7046: PUSH
7047: LD_INT 23
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 26
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 31
7061: PUSH
7062: LD_INT 32
7064: PUSH
7065: LD_INT 36
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 101
7091: PUSH
7092: LD_INT 102
7094: PUSH
7095: LD_INT 105
7097: PUSH
7098: LD_INT 106
7100: PUSH
7101: LD_INT 108
7103: PUSH
7104: LD_INT 109
7106: PUSH
7107: LD_INT 112
7109: PUSH
7110: LD_INT 116
7112: PUSH
7113: LD_INT 117
7115: PUSH
7116: LD_INT 118
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: ST_TO_ADDR
7135: GO 9658
7137: LD_INT 7
7139: DOUBLE
7140: EQUAL
7141: IFTRUE 7145
7143: GO 7257
7145: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7146: LD_ADDR_VAR 0 1
7150: PUSH
7151: LD_INT 2
7153: PUSH
7154: LD_INT 4
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: LD_INT 7
7162: PUSH
7163: LD_INT 11
7165: PUSH
7166: LD_INT 12
7168: PUSH
7169: LD_INT 15
7171: PUSH
7172: LD_INT 16
7174: PUSH
7175: LD_INT 20
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 22
7183: PUSH
7184: LD_INT 23
7186: PUSH
7187: LD_INT 25
7189: PUSH
7190: LD_INT 26
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 101
7211: PUSH
7212: LD_INT 102
7214: PUSH
7215: LD_INT 103
7217: PUSH
7218: LD_INT 105
7220: PUSH
7221: LD_INT 106
7223: PUSH
7224: LD_INT 108
7226: PUSH
7227: LD_INT 112
7229: PUSH
7230: LD_INT 116
7232: PUSH
7233: LD_INT 117
7235: PUSH
7236: LD_INT 118
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: ST_TO_ADDR
7255: GO 9658
7257: LD_INT 8
7259: DOUBLE
7260: EQUAL
7261: IFTRUE 7265
7263: GO 7405
7265: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7266: LD_ADDR_VAR 0 1
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: LD_INT 6
7282: PUSH
7283: LD_INT 7
7285: PUSH
7286: LD_INT 8
7288: PUSH
7289: LD_INT 11
7291: PUSH
7292: LD_INT 12
7294: PUSH
7295: LD_INT 15
7297: PUSH
7298: LD_INT 16
7300: PUSH
7301: LD_INT 20
7303: PUSH
7304: LD_INT 21
7306: PUSH
7307: LD_INT 22
7309: PUSH
7310: LD_INT 23
7312: PUSH
7313: LD_INT 25
7315: PUSH
7316: LD_INT 26
7318: PUSH
7319: LD_INT 30
7321: PUSH
7322: LD_INT 31
7324: PUSH
7325: LD_INT 32
7327: PUSH
7328: LD_INT 36
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 101
7355: PUSH
7356: LD_INT 102
7358: PUSH
7359: LD_INT 103
7361: PUSH
7362: LD_INT 105
7364: PUSH
7365: LD_INT 106
7367: PUSH
7368: LD_INT 108
7370: PUSH
7371: LD_INT 109
7373: PUSH
7374: LD_INT 112
7376: PUSH
7377: LD_INT 116
7379: PUSH
7380: LD_INT 117
7382: PUSH
7383: LD_INT 118
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: ST_TO_ADDR
7403: GO 9658
7405: LD_INT 9
7407: DOUBLE
7408: EQUAL
7409: IFTRUE 7413
7411: GO 7561
7413: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7414: LD_ADDR_VAR 0 1
7418: PUSH
7419: LD_INT 2
7421: PUSH
7422: LD_INT 4
7424: PUSH
7425: LD_INT 5
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: LD_INT 7
7433: PUSH
7434: LD_INT 8
7436: PUSH
7437: LD_INT 11
7439: PUSH
7440: LD_INT 12
7442: PUSH
7443: LD_INT 15
7445: PUSH
7446: LD_INT 16
7448: PUSH
7449: LD_INT 20
7451: PUSH
7452: LD_INT 21
7454: PUSH
7455: LD_INT 22
7457: PUSH
7458: LD_INT 23
7460: PUSH
7461: LD_INT 25
7463: PUSH
7464: LD_INT 26
7466: PUSH
7467: LD_INT 28
7469: PUSH
7470: LD_INT 30
7472: PUSH
7473: LD_INT 31
7475: PUSH
7476: LD_INT 32
7478: PUSH
7479: LD_INT 36
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 101
7507: PUSH
7508: LD_INT 102
7510: PUSH
7511: LD_INT 103
7513: PUSH
7514: LD_INT 105
7516: PUSH
7517: LD_INT 106
7519: PUSH
7520: LD_INT 108
7522: PUSH
7523: LD_INT 109
7525: PUSH
7526: LD_INT 112
7528: PUSH
7529: LD_INT 114
7531: PUSH
7532: LD_INT 116
7534: PUSH
7535: LD_INT 117
7537: PUSH
7538: LD_INT 118
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 9658
7561: LD_INT 10
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7765
7569: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 5
7583: PUSH
7584: LD_INT 6
7586: PUSH
7587: LD_INT 7
7589: PUSH
7590: LD_INT 8
7592: PUSH
7593: LD_INT 9
7595: PUSH
7596: LD_INT 10
7598: PUSH
7599: LD_INT 11
7601: PUSH
7602: LD_INT 12
7604: PUSH
7605: LD_INT 13
7607: PUSH
7608: LD_INT 14
7610: PUSH
7611: LD_INT 15
7613: PUSH
7614: LD_INT 16
7616: PUSH
7617: LD_INT 17
7619: PUSH
7620: LD_INT 18
7622: PUSH
7623: LD_INT 19
7625: PUSH
7626: LD_INT 20
7628: PUSH
7629: LD_INT 21
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_INT 23
7637: PUSH
7638: LD_INT 24
7640: PUSH
7641: LD_INT 25
7643: PUSH
7644: LD_INT 26
7646: PUSH
7647: LD_INT 28
7649: PUSH
7650: LD_INT 30
7652: PUSH
7653: LD_INT 31
7655: PUSH
7656: LD_INT 32
7658: PUSH
7659: LD_INT 36
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 101
7695: PUSH
7696: LD_INT 102
7698: PUSH
7699: LD_INT 103
7701: PUSH
7702: LD_INT 104
7704: PUSH
7705: LD_INT 105
7707: PUSH
7708: LD_INT 106
7710: PUSH
7711: LD_INT 107
7713: PUSH
7714: LD_INT 108
7716: PUSH
7717: LD_INT 109
7719: PUSH
7720: LD_INT 110
7722: PUSH
7723: LD_INT 111
7725: PUSH
7726: LD_INT 112
7728: PUSH
7729: LD_INT 114
7731: PUSH
7732: LD_INT 116
7734: PUSH
7735: LD_INT 117
7737: PUSH
7738: LD_INT 118
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: ST_TO_ADDR
7763: GO 9658
7765: LD_INT 11
7767: DOUBLE
7768: EQUAL
7769: IFTRUE 7773
7771: GO 7977
7773: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7774: LD_ADDR_VAR 0 1
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: LD_INT 3
7784: PUSH
7785: LD_INT 4
7787: PUSH
7788: LD_INT 5
7790: PUSH
7791: LD_INT 6
7793: PUSH
7794: LD_INT 7
7796: PUSH
7797: LD_INT 8
7799: PUSH
7800: LD_INT 9
7802: PUSH
7803: LD_INT 10
7805: PUSH
7806: LD_INT 11
7808: PUSH
7809: LD_INT 12
7811: PUSH
7812: LD_INT 13
7814: PUSH
7815: LD_INT 14
7817: PUSH
7818: LD_INT 15
7820: PUSH
7821: LD_INT 16
7823: PUSH
7824: LD_INT 17
7826: PUSH
7827: LD_INT 18
7829: PUSH
7830: LD_INT 19
7832: PUSH
7833: LD_INT 20
7835: PUSH
7836: LD_INT 21
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_INT 23
7844: PUSH
7845: LD_INT 24
7847: PUSH
7848: LD_INT 25
7850: PUSH
7851: LD_INT 26
7853: PUSH
7854: LD_INT 28
7856: PUSH
7857: LD_INT 30
7859: PUSH
7860: LD_INT 31
7862: PUSH
7863: LD_INT 32
7865: PUSH
7866: LD_INT 34
7868: PUSH
7869: LD_INT 36
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 101
7907: PUSH
7908: LD_INT 102
7910: PUSH
7911: LD_INT 103
7913: PUSH
7914: LD_INT 104
7916: PUSH
7917: LD_INT 105
7919: PUSH
7920: LD_INT 106
7922: PUSH
7923: LD_INT 107
7925: PUSH
7926: LD_INT 108
7928: PUSH
7929: LD_INT 109
7931: PUSH
7932: LD_INT 110
7934: PUSH
7935: LD_INT 111
7937: PUSH
7938: LD_INT 112
7940: PUSH
7941: LD_INT 114
7943: PUSH
7944: LD_INT 116
7946: PUSH
7947: LD_INT 117
7949: PUSH
7950: LD_INT 118
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: ST_TO_ADDR
7975: GO 9658
7977: LD_INT 12
7979: DOUBLE
7980: EQUAL
7981: IFTRUE 7985
7983: GO 8205
7985: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7986: LD_ADDR_VAR 0 1
7990: PUSH
7991: LD_INT 1
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: LD_INT 3
7999: PUSH
8000: LD_INT 4
8002: PUSH
8003: LD_INT 5
8005: PUSH
8006: LD_INT 6
8008: PUSH
8009: LD_INT 7
8011: PUSH
8012: LD_INT 8
8014: PUSH
8015: LD_INT 9
8017: PUSH
8018: LD_INT 10
8020: PUSH
8021: LD_INT 11
8023: PUSH
8024: LD_INT 12
8026: PUSH
8027: LD_INT 13
8029: PUSH
8030: LD_INT 14
8032: PUSH
8033: LD_INT 15
8035: PUSH
8036: LD_INT 16
8038: PUSH
8039: LD_INT 17
8041: PUSH
8042: LD_INT 18
8044: PUSH
8045: LD_INT 19
8047: PUSH
8048: LD_INT 20
8050: PUSH
8051: LD_INT 21
8053: PUSH
8054: LD_INT 22
8056: PUSH
8057: LD_INT 23
8059: PUSH
8060: LD_INT 24
8062: PUSH
8063: LD_INT 25
8065: PUSH
8066: LD_INT 26
8068: PUSH
8069: LD_INT 27
8071: PUSH
8072: LD_INT 28
8074: PUSH
8075: LD_INT 30
8077: PUSH
8078: LD_INT 31
8080: PUSH
8081: LD_INT 32
8083: PUSH
8084: LD_INT 33
8086: PUSH
8087: LD_INT 34
8089: PUSH
8090: LD_INT 36
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 101
8131: PUSH
8132: LD_INT 102
8134: PUSH
8135: LD_INT 103
8137: PUSH
8138: LD_INT 104
8140: PUSH
8141: LD_INT 105
8143: PUSH
8144: LD_INT 106
8146: PUSH
8147: LD_INT 107
8149: PUSH
8150: LD_INT 108
8152: PUSH
8153: LD_INT 109
8155: PUSH
8156: LD_INT 110
8158: PUSH
8159: LD_INT 111
8161: PUSH
8162: LD_INT 112
8164: PUSH
8165: LD_INT 113
8167: PUSH
8168: LD_INT 114
8170: PUSH
8171: LD_INT 116
8173: PUSH
8174: LD_INT 117
8176: PUSH
8177: LD_INT 118
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: ST_TO_ADDR
8203: GO 9658
8205: LD_INT 13
8207: DOUBLE
8208: EQUAL
8209: IFTRUE 8213
8211: GO 8421
8213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: LD_INT 1
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: LD_INT 3
8227: PUSH
8228: LD_INT 4
8230: PUSH
8231: LD_INT 5
8233: PUSH
8234: LD_INT 8
8236: PUSH
8237: LD_INT 9
8239: PUSH
8240: LD_INT 10
8242: PUSH
8243: LD_INT 11
8245: PUSH
8246: LD_INT 12
8248: PUSH
8249: LD_INT 14
8251: PUSH
8252: LD_INT 15
8254: PUSH
8255: LD_INT 16
8257: PUSH
8258: LD_INT 17
8260: PUSH
8261: LD_INT 18
8263: PUSH
8264: LD_INT 19
8266: PUSH
8267: LD_INT 20
8269: PUSH
8270: LD_INT 21
8272: PUSH
8273: LD_INT 22
8275: PUSH
8276: LD_INT 23
8278: PUSH
8279: LD_INT 24
8281: PUSH
8282: LD_INT 25
8284: PUSH
8285: LD_INT 26
8287: PUSH
8288: LD_INT 27
8290: PUSH
8291: LD_INT 28
8293: PUSH
8294: LD_INT 30
8296: PUSH
8297: LD_INT 31
8299: PUSH
8300: LD_INT 32
8302: PUSH
8303: LD_INT 33
8305: PUSH
8306: LD_INT 34
8308: PUSH
8309: LD_INT 36
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 101
8347: PUSH
8348: LD_INT 102
8350: PUSH
8351: LD_INT 103
8353: PUSH
8354: LD_INT 104
8356: PUSH
8357: LD_INT 105
8359: PUSH
8360: LD_INT 106
8362: PUSH
8363: LD_INT 107
8365: PUSH
8366: LD_INT 108
8368: PUSH
8369: LD_INT 109
8371: PUSH
8372: LD_INT 110
8374: PUSH
8375: LD_INT 111
8377: PUSH
8378: LD_INT 112
8380: PUSH
8381: LD_INT 113
8383: PUSH
8384: LD_INT 114
8386: PUSH
8387: LD_INT 116
8389: PUSH
8390: LD_INT 117
8392: PUSH
8393: LD_INT 118
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: ST_TO_ADDR
8419: GO 9658
8421: LD_INT 14
8423: DOUBLE
8424: EQUAL
8425: IFTRUE 8429
8427: GO 8653
8429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 3
8443: PUSH
8444: LD_INT 4
8446: PUSH
8447: LD_INT 5
8449: PUSH
8450: LD_INT 6
8452: PUSH
8453: LD_INT 7
8455: PUSH
8456: LD_INT 8
8458: PUSH
8459: LD_INT 9
8461: PUSH
8462: LD_INT 10
8464: PUSH
8465: LD_INT 11
8467: PUSH
8468: LD_INT 12
8470: PUSH
8471: LD_INT 13
8473: PUSH
8474: LD_INT 14
8476: PUSH
8477: LD_INT 15
8479: PUSH
8480: LD_INT 16
8482: PUSH
8483: LD_INT 17
8485: PUSH
8486: LD_INT 18
8488: PUSH
8489: LD_INT 19
8491: PUSH
8492: LD_INT 20
8494: PUSH
8495: LD_INT 21
8497: PUSH
8498: LD_INT 22
8500: PUSH
8501: LD_INT 23
8503: PUSH
8504: LD_INT 24
8506: PUSH
8507: LD_INT 25
8509: PUSH
8510: LD_INT 26
8512: PUSH
8513: LD_INT 27
8515: PUSH
8516: LD_INT 28
8518: PUSH
8519: LD_INT 29
8521: PUSH
8522: LD_INT 30
8524: PUSH
8525: LD_INT 31
8527: PUSH
8528: LD_INT 32
8530: PUSH
8531: LD_INT 33
8533: PUSH
8534: LD_INT 34
8536: PUSH
8537: LD_INT 36
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 101
8579: PUSH
8580: LD_INT 102
8582: PUSH
8583: LD_INT 103
8585: PUSH
8586: LD_INT 104
8588: PUSH
8589: LD_INT 105
8591: PUSH
8592: LD_INT 106
8594: PUSH
8595: LD_INT 107
8597: PUSH
8598: LD_INT 108
8600: PUSH
8601: LD_INT 109
8603: PUSH
8604: LD_INT 110
8606: PUSH
8607: LD_INT 111
8609: PUSH
8610: LD_INT 112
8612: PUSH
8613: LD_INT 113
8615: PUSH
8616: LD_INT 114
8618: PUSH
8619: LD_INT 116
8621: PUSH
8622: LD_INT 117
8624: PUSH
8625: LD_INT 118
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: ST_TO_ADDR
8651: GO 9658
8653: LD_INT 15
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8885
8661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8662: LD_ADDR_VAR 0 1
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: LD_INT 3
8675: PUSH
8676: LD_INT 4
8678: PUSH
8679: LD_INT 5
8681: PUSH
8682: LD_INT 6
8684: PUSH
8685: LD_INT 7
8687: PUSH
8688: LD_INT 8
8690: PUSH
8691: LD_INT 9
8693: PUSH
8694: LD_INT 10
8696: PUSH
8697: LD_INT 11
8699: PUSH
8700: LD_INT 12
8702: PUSH
8703: LD_INT 13
8705: PUSH
8706: LD_INT 14
8708: PUSH
8709: LD_INT 15
8711: PUSH
8712: LD_INT 16
8714: PUSH
8715: LD_INT 17
8717: PUSH
8718: LD_INT 18
8720: PUSH
8721: LD_INT 19
8723: PUSH
8724: LD_INT 20
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 22
8732: PUSH
8733: LD_INT 23
8735: PUSH
8736: LD_INT 24
8738: PUSH
8739: LD_INT 25
8741: PUSH
8742: LD_INT 26
8744: PUSH
8745: LD_INT 27
8747: PUSH
8748: LD_INT 28
8750: PUSH
8751: LD_INT 29
8753: PUSH
8754: LD_INT 30
8756: PUSH
8757: LD_INT 31
8759: PUSH
8760: LD_INT 32
8762: PUSH
8763: LD_INT 33
8765: PUSH
8766: LD_INT 34
8768: PUSH
8769: LD_INT 36
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 101
8811: PUSH
8812: LD_INT 102
8814: PUSH
8815: LD_INT 103
8817: PUSH
8818: LD_INT 104
8820: PUSH
8821: LD_INT 105
8823: PUSH
8824: LD_INT 106
8826: PUSH
8827: LD_INT 107
8829: PUSH
8830: LD_INT 108
8832: PUSH
8833: LD_INT 109
8835: PUSH
8836: LD_INT 110
8838: PUSH
8839: LD_INT 111
8841: PUSH
8842: LD_INT 112
8844: PUSH
8845: LD_INT 113
8847: PUSH
8848: LD_INT 114
8850: PUSH
8851: LD_INT 116
8853: PUSH
8854: LD_INT 117
8856: PUSH
8857: LD_INT 118
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: ST_TO_ADDR
8883: GO 9658
8885: LD_INT 16
8887: DOUBLE
8888: EQUAL
8889: IFTRUE 8893
8891: GO 9029
8893: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8894: LD_ADDR_VAR 0 1
8898: PUSH
8899: LD_INT 2
8901: PUSH
8902: LD_INT 4
8904: PUSH
8905: LD_INT 5
8907: PUSH
8908: LD_INT 7
8910: PUSH
8911: LD_INT 11
8913: PUSH
8914: LD_INT 12
8916: PUSH
8917: LD_INT 15
8919: PUSH
8920: LD_INT 16
8922: PUSH
8923: LD_INT 20
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 22
8931: PUSH
8932: LD_INT 23
8934: PUSH
8935: LD_INT 25
8937: PUSH
8938: LD_INT 26
8940: PUSH
8941: LD_INT 30
8943: PUSH
8944: LD_INT 31
8946: PUSH
8947: LD_INT 32
8949: PUSH
8950: LD_INT 33
8952: PUSH
8953: LD_INT 34
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 101
8979: PUSH
8980: LD_INT 102
8982: PUSH
8983: LD_INT 103
8985: PUSH
8986: LD_INT 106
8988: PUSH
8989: LD_INT 108
8991: PUSH
8992: LD_INT 112
8994: PUSH
8995: LD_INT 113
8997: PUSH
8998: LD_INT 114
9000: PUSH
9001: LD_INT 116
9003: PUSH
9004: LD_INT 117
9006: PUSH
9007: LD_INT 118
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: ST_TO_ADDR
9027: GO 9658
9029: LD_INT 17
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9261
9037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9038: LD_ADDR_VAR 0 1
9042: PUSH
9043: LD_INT 1
9045: PUSH
9046: LD_INT 2
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: LD_INT 4
9054: PUSH
9055: LD_INT 5
9057: PUSH
9058: LD_INT 6
9060: PUSH
9061: LD_INT 7
9063: PUSH
9064: LD_INT 8
9066: PUSH
9067: LD_INT 9
9069: PUSH
9070: LD_INT 10
9072: PUSH
9073: LD_INT 11
9075: PUSH
9076: LD_INT 12
9078: PUSH
9079: LD_INT 13
9081: PUSH
9082: LD_INT 14
9084: PUSH
9085: LD_INT 15
9087: PUSH
9088: LD_INT 16
9090: PUSH
9091: LD_INT 17
9093: PUSH
9094: LD_INT 18
9096: PUSH
9097: LD_INT 19
9099: PUSH
9100: LD_INT 20
9102: PUSH
9103: LD_INT 21
9105: PUSH
9106: LD_INT 22
9108: PUSH
9109: LD_INT 23
9111: PUSH
9112: LD_INT 24
9114: PUSH
9115: LD_INT 25
9117: PUSH
9118: LD_INT 26
9120: PUSH
9121: LD_INT 27
9123: PUSH
9124: LD_INT 28
9126: PUSH
9127: LD_INT 29
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 31
9135: PUSH
9136: LD_INT 32
9138: PUSH
9139: LD_INT 33
9141: PUSH
9142: LD_INT 34
9144: PUSH
9145: LD_INT 36
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 101
9187: PUSH
9188: LD_INT 102
9190: PUSH
9191: LD_INT 103
9193: PUSH
9194: LD_INT 104
9196: PUSH
9197: LD_INT 105
9199: PUSH
9200: LD_INT 106
9202: PUSH
9203: LD_INT 107
9205: PUSH
9206: LD_INT 108
9208: PUSH
9209: LD_INT 109
9211: PUSH
9212: LD_INT 110
9214: PUSH
9215: LD_INT 111
9217: PUSH
9218: LD_INT 112
9220: PUSH
9221: LD_INT 113
9223: PUSH
9224: LD_INT 114
9226: PUSH
9227: LD_INT 116
9229: PUSH
9230: LD_INT 117
9232: PUSH
9233: LD_INT 118
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: ST_TO_ADDR
9259: GO 9658
9261: LD_INT 18
9263: DOUBLE
9264: EQUAL
9265: IFTRUE 9269
9267: GO 9417
9269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9270: LD_ADDR_VAR 0 1
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_INT 4
9280: PUSH
9281: LD_INT 5
9283: PUSH
9284: LD_INT 7
9286: PUSH
9287: LD_INT 11
9289: PUSH
9290: LD_INT 12
9292: PUSH
9293: LD_INT 15
9295: PUSH
9296: LD_INT 16
9298: PUSH
9299: LD_INT 20
9301: PUSH
9302: LD_INT 21
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_INT 23
9310: PUSH
9311: LD_INT 25
9313: PUSH
9314: LD_INT 26
9316: PUSH
9317: LD_INT 30
9319: PUSH
9320: LD_INT 31
9322: PUSH
9323: LD_INT 32
9325: PUSH
9326: LD_INT 33
9328: PUSH
9329: LD_INT 34
9331: PUSH
9332: LD_INT 35
9334: PUSH
9335: LD_INT 36
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 101
9363: PUSH
9364: LD_INT 102
9366: PUSH
9367: LD_INT 103
9369: PUSH
9370: LD_INT 106
9372: PUSH
9373: LD_INT 108
9375: PUSH
9376: LD_INT 112
9378: PUSH
9379: LD_INT 113
9381: PUSH
9382: LD_INT 114
9384: PUSH
9385: LD_INT 115
9387: PUSH
9388: LD_INT 116
9390: PUSH
9391: LD_INT 117
9393: PUSH
9394: LD_INT 118
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: ST_TO_ADDR
9415: GO 9658
9417: LD_INT 19
9419: DOUBLE
9420: EQUAL
9421: IFTRUE 9425
9423: GO 9657
9425: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9426: LD_ADDR_VAR 0 1
9430: PUSH
9431: LD_INT 1
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: LD_INT 3
9439: PUSH
9440: LD_INT 4
9442: PUSH
9443: LD_INT 5
9445: PUSH
9446: LD_INT 6
9448: PUSH
9449: LD_INT 7
9451: PUSH
9452: LD_INT 8
9454: PUSH
9455: LD_INT 9
9457: PUSH
9458: LD_INT 10
9460: PUSH
9461: LD_INT 11
9463: PUSH
9464: LD_INT 12
9466: PUSH
9467: LD_INT 13
9469: PUSH
9470: LD_INT 14
9472: PUSH
9473: LD_INT 15
9475: PUSH
9476: LD_INT 16
9478: PUSH
9479: LD_INT 17
9481: PUSH
9482: LD_INT 18
9484: PUSH
9485: LD_INT 19
9487: PUSH
9488: LD_INT 20
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 22
9496: PUSH
9497: LD_INT 23
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: LD_INT 25
9505: PUSH
9506: LD_INT 26
9508: PUSH
9509: LD_INT 27
9511: PUSH
9512: LD_INT 28
9514: PUSH
9515: LD_INT 29
9517: PUSH
9518: LD_INT 30
9520: PUSH
9521: LD_INT 31
9523: PUSH
9524: LD_INT 32
9526: PUSH
9527: LD_INT 33
9529: PUSH
9530: LD_INT 34
9532: PUSH
9533: LD_INT 35
9535: PUSH
9536: LD_INT 36
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 101
9579: PUSH
9580: LD_INT 102
9582: PUSH
9583: LD_INT 103
9585: PUSH
9586: LD_INT 104
9588: PUSH
9589: LD_INT 105
9591: PUSH
9592: LD_INT 106
9594: PUSH
9595: LD_INT 107
9597: PUSH
9598: LD_INT 108
9600: PUSH
9601: LD_INT 109
9603: PUSH
9604: LD_INT 110
9606: PUSH
9607: LD_INT 111
9609: PUSH
9610: LD_INT 112
9612: PUSH
9613: LD_INT 113
9615: PUSH
9616: LD_INT 114
9618: PUSH
9619: LD_INT 115
9621: PUSH
9622: LD_INT 116
9624: PUSH
9625: LD_INT 117
9627: PUSH
9628: LD_INT 118
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: ST_TO_ADDR
9655: GO 9658
9657: POP
// end else
9658: GO 9889
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9660: LD_ADDR_VAR 0 1
9664: PUSH
9665: LD_INT 1
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: LD_INT 4
9676: PUSH
9677: LD_INT 5
9679: PUSH
9680: LD_INT 6
9682: PUSH
9683: LD_INT 7
9685: PUSH
9686: LD_INT 8
9688: PUSH
9689: LD_INT 9
9691: PUSH
9692: LD_INT 10
9694: PUSH
9695: LD_INT 11
9697: PUSH
9698: LD_INT 12
9700: PUSH
9701: LD_INT 13
9703: PUSH
9704: LD_INT 14
9706: PUSH
9707: LD_INT 15
9709: PUSH
9710: LD_INT 16
9712: PUSH
9713: LD_INT 17
9715: PUSH
9716: LD_INT 18
9718: PUSH
9719: LD_INT 19
9721: PUSH
9722: LD_INT 20
9724: PUSH
9725: LD_INT 21
9727: PUSH
9728: LD_INT 22
9730: PUSH
9731: LD_INT 23
9733: PUSH
9734: LD_INT 24
9736: PUSH
9737: LD_INT 25
9739: PUSH
9740: LD_INT 26
9742: PUSH
9743: LD_INT 27
9745: PUSH
9746: LD_INT 28
9748: PUSH
9749: LD_INT 29
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: LD_INT 31
9757: PUSH
9758: LD_INT 32
9760: PUSH
9761: LD_INT 33
9763: PUSH
9764: LD_INT 34
9766: PUSH
9767: LD_INT 35
9769: PUSH
9770: LD_INT 36
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 101
9813: PUSH
9814: LD_INT 102
9816: PUSH
9817: LD_INT 103
9819: PUSH
9820: LD_INT 104
9822: PUSH
9823: LD_INT 105
9825: PUSH
9826: LD_INT 106
9828: PUSH
9829: LD_INT 107
9831: PUSH
9832: LD_INT 108
9834: PUSH
9835: LD_INT 109
9837: PUSH
9838: LD_INT 110
9840: PUSH
9841: LD_INT 111
9843: PUSH
9844: LD_INT 112
9846: PUSH
9847: LD_INT 113
9849: PUSH
9850: LD_INT 114
9852: PUSH
9853: LD_INT 115
9855: PUSH
9856: LD_INT 116
9858: PUSH
9859: LD_INT 117
9861: PUSH
9862: LD_INT 118
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: ST_TO_ADDR
// if result then
9889: LD_VAR 0 1
9893: IFFALSE 10182
// begin normal :=  ;
9895: LD_ADDR_VAR 0 3
9899: PUSH
9900: LD_STRING 
9902: ST_TO_ADDR
// hardcore :=  ;
9903: LD_ADDR_VAR 0 4
9907: PUSH
9908: LD_STRING 
9910: ST_TO_ADDR
// for i = 1 to normalCounter do
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: DOUBLE
9917: LD_INT 1
9919: DEC
9920: ST_TO_ADDR
9921: LD_EXP 27
9925: PUSH
9926: FOR_TO
9927: IFFALSE 10028
// begin tmp := 0 ;
9929: LD_ADDR_VAR 0 2
9933: PUSH
9934: LD_STRING 0
9936: ST_TO_ADDR
// if result [ 1 ] then
9937: LD_VAR 0 1
9941: PUSH
9942: LD_INT 1
9944: ARRAY
9945: IFFALSE 10010
// if result [ 1 ] [ 1 ] = i then
9947: LD_VAR 0 1
9951: PUSH
9952: LD_INT 1
9954: ARRAY
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PUSH
9960: LD_VAR 0 5
9964: EQUAL
9965: IFFALSE 10010
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9967: LD_ADDR_VAR 0 1
9971: PUSH
9972: LD_VAR 0 1
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: LD_VAR 0 1
9984: PUSH
9985: LD_INT 1
9987: ARRAY
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: CALL_OW 3
9996: PPUSH
9997: CALL_OW 1
10001: ST_TO_ADDR
// tmp := 1 ;
10002: LD_ADDR_VAR 0 2
10006: PUSH
10007: LD_STRING 1
10009: ST_TO_ADDR
// end ; normal := normal & tmp ;
10010: LD_ADDR_VAR 0 3
10014: PUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_VAR 0 2
10024: STR
10025: ST_TO_ADDR
// end ;
10026: GO 9926
10028: POP
10029: POP
// for i = 1 to hardcoreCounter do
10030: LD_ADDR_VAR 0 5
10034: PUSH
10035: DOUBLE
10036: LD_INT 1
10038: DEC
10039: ST_TO_ADDR
10040: LD_EXP 28
10044: PUSH
10045: FOR_TO
10046: IFFALSE 10151
// begin tmp := 0 ;
10048: LD_ADDR_VAR 0 2
10052: PUSH
10053: LD_STRING 0
10055: ST_TO_ADDR
// if result [ 2 ] then
10056: LD_VAR 0 1
10060: PUSH
10061: LD_INT 2
10063: ARRAY
10064: IFFALSE 10133
// if result [ 2 ] [ 1 ] = 100 + i then
10066: LD_VAR 0 1
10070: PUSH
10071: LD_INT 2
10073: ARRAY
10074: PUSH
10075: LD_INT 1
10077: ARRAY
10078: PUSH
10079: LD_INT 100
10081: PUSH
10082: LD_VAR 0 5
10086: PLUS
10087: EQUAL
10088: IFFALSE 10133
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10090: LD_ADDR_VAR 0 1
10094: PUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 2
10102: PPUSH
10103: LD_VAR 0 1
10107: PUSH
10108: LD_INT 2
10110: ARRAY
10111: PPUSH
10112: LD_INT 1
10114: PPUSH
10115: CALL_OW 3
10119: PPUSH
10120: CALL_OW 1
10124: ST_TO_ADDR
// tmp := 1 ;
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_STRING 1
10132: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10133: LD_ADDR_VAR 0 4
10137: PUSH
10138: LD_VAR 0 4
10142: PUSH
10143: LD_VAR 0 2
10147: STR
10148: ST_TO_ADDR
// end ;
10149: GO 10045
10151: POP
10152: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10153: LD_STRING getStreamItemsFromMission("
10155: PUSH
10156: LD_VAR 0 3
10160: STR
10161: PUSH
10162: LD_STRING ","
10164: STR
10165: PUSH
10166: LD_VAR 0 4
10170: STR
10171: PUSH
10172: LD_STRING ")
10174: STR
10175: PPUSH
10176: CALL_OW 559
// end else
10180: GO 10189
// ToLua ( getStreamItemsFromMission("","") ) ;
10182: LD_STRING getStreamItemsFromMission("","")
10184: PPUSH
10185: CALL_OW 559
// end ;
10189: LD_VAR 0 1
10193: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10194: LD_EXP 26
10198: PUSH
10199: LD_EXP 31
10203: AND
10204: IFFALSE 10328
10206: GO 10208
10208: DISABLE
10209: LD_INT 0
10211: PPUSH
10212: PPUSH
// begin enable ;
10213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10214: LD_ADDR_VAR 0 2
10218: PUSH
10219: LD_INT 22
10221: PUSH
10222: LD_OWVAR 2
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 2
10233: PUSH
10234: LD_INT 34
10236: PUSH
10237: LD_INT 7
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 45
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 28
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 34
10266: PUSH
10267: LD_INT 47
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: ST_TO_ADDR
// if not tmp then
10290: LD_VAR 0 2
10294: NOT
10295: IFFALSE 10299
// exit ;
10297: GO 10328
// for i in tmp do
10299: LD_ADDR_VAR 0 1
10303: PUSH
10304: LD_VAR 0 2
10308: PUSH
10309: FOR_IN
10310: IFFALSE 10326
// begin SetLives ( i , 0 ) ;
10312: LD_VAR 0 1
10316: PPUSH
10317: LD_INT 0
10319: PPUSH
10320: CALL_OW 234
// end ;
10324: GO 10309
10326: POP
10327: POP
// end ;
10328: PPOPN 2
10330: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10331: LD_EXP 26
10335: PUSH
10336: LD_EXP 32
10340: AND
10341: IFFALSE 10425
10343: GO 10345
10345: DISABLE
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
// begin enable ;
10350: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_OWVAR 2
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 32
10370: PUSH
10371: LD_INT 3
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PPUSH
10382: CALL_OW 69
10386: ST_TO_ADDR
// if not tmp then
10387: LD_VAR 0 2
10391: NOT
10392: IFFALSE 10396
// exit ;
10394: GO 10425
// for i in tmp do
10396: LD_ADDR_VAR 0 1
10400: PUSH
10401: LD_VAR 0 2
10405: PUSH
10406: FOR_IN
10407: IFFALSE 10423
// begin SetLives ( i , 0 ) ;
10409: LD_VAR 0 1
10413: PPUSH
10414: LD_INT 0
10416: PPUSH
10417: CALL_OW 234
// end ;
10421: GO 10406
10423: POP
10424: POP
// end ;
10425: PPOPN 2
10427: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10428: LD_EXP 26
10432: PUSH
10433: LD_EXP 29
10437: AND
10438: IFFALSE 10531
10440: GO 10442
10442: DISABLE
10443: LD_INT 0
10445: PPUSH
// begin enable ;
10446: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10447: LD_ADDR_VAR 0 1
10451: PUSH
10452: LD_INT 22
10454: PUSH
10455: LD_OWVAR 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 2
10466: PUSH
10467: LD_INT 25
10469: PUSH
10470: LD_INT 5
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 25
10479: PUSH
10480: LD_INT 9
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 25
10489: PUSH
10490: LD_INT 8
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 69
10511: PUSH
10512: FOR_IN
10513: IFFALSE 10529
// begin SetClass ( i , 1 ) ;
10515: LD_VAR 0 1
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 336
// end ;
10527: GO 10512
10529: POP
10530: POP
// end ;
10531: PPOPN 1
10533: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10534: LD_EXP 26
10538: PUSH
10539: LD_EXP 30
10543: AND
10544: PUSH
10545: LD_OWVAR 65
10549: PUSH
10550: LD_INT 7
10552: LESS
10553: AND
10554: IFFALSE 10568
10556: GO 10558
10558: DISABLE
// begin enable ;
10559: ENABLE
// game_speed := 7 ;
10560: LD_ADDR_OWVAR 65
10564: PUSH
10565: LD_INT 7
10567: ST_TO_ADDR
// end ;
10568: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10569: LD_EXP 26
10573: PUSH
10574: LD_EXP 33
10578: AND
10579: IFFALSE 10781
10581: GO 10583
10583: DISABLE
10584: LD_INT 0
10586: PPUSH
10587: PPUSH
10588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10589: LD_ADDR_VAR 0 3
10593: PUSH
10594: LD_INT 81
10596: PUSH
10597: LD_OWVAR 2
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: LD_INT 21
10608: PUSH
10609: LD_INT 1
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: ST_TO_ADDR
// if not tmp then
10625: LD_VAR 0 3
10629: NOT
10630: IFFALSE 10634
// exit ;
10632: GO 10781
// if tmp > 5 then
10634: LD_VAR 0 3
10638: PUSH
10639: LD_INT 5
10641: GREATER
10642: IFFALSE 10654
// k := 5 else
10644: LD_ADDR_VAR 0 2
10648: PUSH
10649: LD_INT 5
10651: ST_TO_ADDR
10652: GO 10664
// k := tmp ;
10654: LD_ADDR_VAR 0 2
10658: PUSH
10659: LD_VAR 0 3
10663: ST_TO_ADDR
// for i := 1 to k do
10664: LD_ADDR_VAR 0 1
10668: PUSH
10669: DOUBLE
10670: LD_INT 1
10672: DEC
10673: ST_TO_ADDR
10674: LD_VAR 0 2
10678: PUSH
10679: FOR_TO
10680: IFFALSE 10779
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10682: LD_VAR 0 3
10686: PUSH
10687: LD_VAR 0 1
10691: ARRAY
10692: PPUSH
10693: LD_VAR 0 1
10697: PUSH
10698: LD_INT 4
10700: MOD
10701: PUSH
10702: LD_INT 1
10704: PLUS
10705: PPUSH
10706: CALL_OW 259
10710: PUSH
10711: LD_INT 10
10713: LESS
10714: IFFALSE 10777
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10716: LD_VAR 0 3
10720: PUSH
10721: LD_VAR 0 1
10725: ARRAY
10726: PPUSH
10727: LD_VAR 0 1
10731: PUSH
10732: LD_INT 4
10734: MOD
10735: PUSH
10736: LD_INT 1
10738: PLUS
10739: PPUSH
10740: LD_VAR 0 3
10744: PUSH
10745: LD_VAR 0 1
10749: ARRAY
10750: PPUSH
10751: LD_VAR 0 1
10755: PUSH
10756: LD_INT 4
10758: MOD
10759: PUSH
10760: LD_INT 1
10762: PLUS
10763: PPUSH
10764: CALL_OW 259
10768: PUSH
10769: LD_INT 1
10771: PLUS
10772: PPUSH
10773: CALL_OW 237
10777: GO 10679
10779: POP
10780: POP
// end ;
10781: PPOPN 3
10783: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10784: LD_EXP 26
10788: PUSH
10789: LD_EXP 34
10793: AND
10794: IFFALSE 10814
10796: GO 10798
10798: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10799: LD_INT 4
10801: PPUSH
10802: LD_OWVAR 2
10806: PPUSH
10807: LD_INT 0
10809: PPUSH
10810: CALL_OW 324
10814: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10815: LD_EXP 26
10819: PUSH
10820: LD_EXP 63
10824: AND
10825: IFFALSE 10845
10827: GO 10829
10829: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10830: LD_INT 19
10832: PPUSH
10833: LD_OWVAR 2
10837: PPUSH
10838: LD_INT 0
10840: PPUSH
10841: CALL_OW 324
10845: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10846: LD_EXP 26
10850: PUSH
10851: LD_EXP 35
10855: AND
10856: IFFALSE 10958
10858: GO 10860
10860: DISABLE
10861: LD_INT 0
10863: PPUSH
10864: PPUSH
// begin enable ;
10865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10866: LD_ADDR_VAR 0 2
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_OWVAR 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 34
10888: PUSH
10889: LD_INT 11
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 34
10898: PUSH
10899: LD_INT 30
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 69
10919: ST_TO_ADDR
// if not tmp then
10920: LD_VAR 0 2
10924: NOT
10925: IFFALSE 10929
// exit ;
10927: GO 10958
// for i in tmp do
10929: LD_ADDR_VAR 0 1
10933: PUSH
10934: LD_VAR 0 2
10938: PUSH
10939: FOR_IN
10940: IFFALSE 10956
// begin SetLives ( i , 0 ) ;
10942: LD_VAR 0 1
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 234
// end ;
10954: GO 10939
10956: POP
10957: POP
// end ;
10958: PPOPN 2
10960: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10961: LD_EXP 26
10965: PUSH
10966: LD_EXP 36
10970: AND
10971: IFFALSE 10991
10973: GO 10975
10975: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10976: LD_INT 32
10978: PPUSH
10979: LD_OWVAR 2
10983: PPUSH
10984: LD_INT 0
10986: PPUSH
10987: CALL_OW 324
10991: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10992: LD_EXP 26
10996: PUSH
10997: LD_EXP 37
11001: AND
11002: IFFALSE 11183
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
11010: PPUSH
11011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11012: LD_ADDR_VAR 0 2
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_OWVAR 2
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 33
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 69
11047: ST_TO_ADDR
// if not tmp then
11048: LD_VAR 0 2
11052: NOT
11053: IFFALSE 11057
// exit ;
11055: GO 11183
// side := 0 ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: LD_INT 0
11064: ST_TO_ADDR
// for i := 1 to 8 do
11065: LD_ADDR_VAR 0 1
11069: PUSH
11070: DOUBLE
11071: LD_INT 1
11073: DEC
11074: ST_TO_ADDR
11075: LD_INT 8
11077: PUSH
11078: FOR_TO
11079: IFFALSE 11127
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11081: LD_OWVAR 2
11085: PUSH
11086: LD_VAR 0 1
11090: NONEQUAL
11091: PUSH
11092: LD_OWVAR 2
11096: PPUSH
11097: LD_VAR 0 1
11101: PPUSH
11102: CALL_OW 81
11106: PUSH
11107: LD_INT 2
11109: EQUAL
11110: AND
11111: IFFALSE 11125
// begin side := i ;
11113: LD_ADDR_VAR 0 3
11117: PUSH
11118: LD_VAR 0 1
11122: ST_TO_ADDR
// break ;
11123: GO 11127
// end ;
11125: GO 11078
11127: POP
11128: POP
// if not side then
11129: LD_VAR 0 3
11133: NOT
11134: IFFALSE 11138
// exit ;
11136: GO 11183
// for i := 1 to tmp do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: DOUBLE
11144: LD_INT 1
11146: DEC
11147: ST_TO_ADDR
11148: LD_VAR 0 2
11152: PUSH
11153: FOR_TO
11154: IFFALSE 11181
// if Prob ( 60 ) then
11156: LD_INT 60
11158: PPUSH
11159: CALL_OW 13
11163: IFFALSE 11179
// SetSide ( i , side ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: LD_VAR 0 3
11174: PPUSH
11175: CALL_OW 235
11179: GO 11153
11181: POP
11182: POP
// end ;
11183: PPOPN 3
11185: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11186: LD_EXP 26
11190: PUSH
11191: LD_EXP 39
11195: AND
11196: IFFALSE 11315
11198: GO 11200
11200: DISABLE
11201: LD_INT 0
11203: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_INT 22
11211: PUSH
11212: LD_OWVAR 2
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 21
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: LD_INT 23
11236: PUSH
11237: LD_INT 0
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: PPUSH
11253: CALL_OW 69
11257: PUSH
11258: FOR_IN
11259: IFFALSE 11313
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11261: LD_VAR 0 1
11265: PPUSH
11266: CALL_OW 257
11270: PUSH
11271: LD_INT 1
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: LD_INT 3
11279: PUSH
11280: LD_INT 4
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: IN
11289: IFFALSE 11311
// SetClass ( un , rand ( 1 , 4 ) ) ;
11291: LD_VAR 0 1
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: LD_INT 4
11301: PPUSH
11302: CALL_OW 12
11306: PPUSH
11307: CALL_OW 336
11311: GO 11258
11313: POP
11314: POP
// end ;
11315: PPOPN 1
11317: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11318: LD_EXP 26
11322: PUSH
11323: LD_EXP 38
11327: AND
11328: IFFALSE 11407
11330: GO 11332
11332: DISABLE
11333: LD_INT 0
11335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11336: LD_ADDR_VAR 0 1
11340: PUSH
11341: LD_INT 22
11343: PUSH
11344: LD_OWVAR 2
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PPUSH
11367: CALL_OW 69
11371: ST_TO_ADDR
// if not tmp then
11372: LD_VAR 0 1
11376: NOT
11377: IFFALSE 11381
// exit ;
11379: GO 11407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11381: LD_VAR 0 1
11385: PUSH
11386: LD_INT 1
11388: PPUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 12
11398: ARRAY
11399: PPUSH
11400: LD_INT 100
11402: PPUSH
11403: CALL_OW 234
// end ;
11407: PPOPN 1
11409: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11410: LD_EXP 26
11414: PUSH
11415: LD_EXP 40
11419: AND
11420: IFFALSE 11518
11422: GO 11424
11424: DISABLE
11425: LD_INT 0
11427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11428: LD_ADDR_VAR 0 1
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_OWVAR 2
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 21
11447: PUSH
11448: LD_INT 1
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: ST_TO_ADDR
// if not tmp then
11464: LD_VAR 0 1
11468: NOT
11469: IFFALSE 11473
// exit ;
11471: GO 11518
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11473: LD_VAR 0 1
11477: PUSH
11478: LD_INT 1
11480: PPUSH
11481: LD_VAR 0 1
11485: PPUSH
11486: CALL_OW 12
11490: ARRAY
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_INT 4
11497: PPUSH
11498: CALL_OW 12
11502: PPUSH
11503: LD_INT 3000
11505: PPUSH
11506: LD_INT 9000
11508: PPUSH
11509: CALL_OW 12
11513: PPUSH
11514: CALL_OW 492
// end ;
11518: PPOPN 1
11520: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11521: LD_EXP 26
11525: PUSH
11526: LD_EXP 41
11530: AND
11531: IFFALSE 11551
11533: GO 11535
11535: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11536: LD_INT 1
11538: PPUSH
11539: LD_OWVAR 2
11543: PPUSH
11544: LD_INT 0
11546: PPUSH
11547: CALL_OW 324
11551: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11552: LD_EXP 26
11556: PUSH
11557: LD_EXP 42
11561: AND
11562: IFFALSE 11645
11564: GO 11566
11566: DISABLE
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11571: LD_ADDR_VAR 0 2
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_OWVAR 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 69
11606: ST_TO_ADDR
// if not tmp then
11607: LD_VAR 0 2
11611: NOT
11612: IFFALSE 11616
// exit ;
11614: GO 11645
// for i in tmp do
11616: LD_ADDR_VAR 0 1
11620: PUSH
11621: LD_VAR 0 2
11625: PUSH
11626: FOR_IN
11627: IFFALSE 11643
// SetBLevel ( i , 10 ) ;
11629: LD_VAR 0 1
11633: PPUSH
11634: LD_INT 10
11636: PPUSH
11637: CALL_OW 241
11641: GO 11626
11643: POP
11644: POP
// end ;
11645: PPOPN 2
11647: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11648: LD_EXP 26
11652: PUSH
11653: LD_EXP 43
11657: AND
11658: IFFALSE 11769
11660: GO 11662
11662: DISABLE
11663: LD_INT 0
11665: PPUSH
11666: PPUSH
11667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11668: LD_ADDR_VAR 0 3
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_OWVAR 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 25
11687: PUSH
11688: LD_INT 1
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PPUSH
11699: CALL_OW 69
11703: ST_TO_ADDR
// if not tmp then
11704: LD_VAR 0 3
11708: NOT
11709: IFFALSE 11713
// exit ;
11711: GO 11769
// un := tmp [ rand ( 1 , tmp ) ] ;
11713: LD_ADDR_VAR 0 2
11717: PUSH
11718: LD_VAR 0 3
11722: PUSH
11723: LD_INT 1
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: CALL_OW 12
11735: ARRAY
11736: ST_TO_ADDR
// if Crawls ( un ) then
11737: LD_VAR 0 2
11741: PPUSH
11742: CALL_OW 318
11746: IFFALSE 11757
// ComWalk ( un ) ;
11748: LD_VAR 0 2
11752: PPUSH
11753: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11757: LD_VAR 0 2
11761: PPUSH
11762: LD_INT 5
11764: PPUSH
11765: CALL_OW 336
// end ;
11769: PPOPN 3
11771: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11772: LD_EXP 26
11776: PUSH
11777: LD_EXP 44
11781: AND
11782: PUSH
11783: LD_OWVAR 67
11787: PUSH
11788: LD_INT 4
11790: LESS
11791: AND
11792: IFFALSE 11811
11794: GO 11796
11796: DISABLE
// begin Difficulty := Difficulty + 1 ;
11797: LD_ADDR_OWVAR 67
11801: PUSH
11802: LD_OWVAR 67
11806: PUSH
11807: LD_INT 1
11809: PLUS
11810: ST_TO_ADDR
// end ;
11811: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11812: LD_EXP 26
11816: PUSH
11817: LD_EXP 45
11821: AND
11822: IFFALSE 11925
11824: GO 11826
11826: DISABLE
11827: LD_INT 0
11829: PPUSH
// begin for i := 1 to 5 do
11830: LD_ADDR_VAR 0 1
11834: PUSH
11835: DOUBLE
11836: LD_INT 1
11838: DEC
11839: ST_TO_ADDR
11840: LD_INT 5
11842: PUSH
11843: FOR_TO
11844: IFFALSE 11923
// begin uc_nation := nation_nature ;
11846: LD_ADDR_OWVAR 21
11850: PUSH
11851: LD_INT 0
11853: ST_TO_ADDR
// uc_side := 0 ;
11854: LD_ADDR_OWVAR 20
11858: PUSH
11859: LD_INT 0
11861: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11862: LD_ADDR_OWVAR 29
11866: PUSH
11867: LD_INT 12
11869: PUSH
11870: LD_INT 12
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: ST_TO_ADDR
// hc_agressivity := 20 ;
11877: LD_ADDR_OWVAR 35
11881: PUSH
11882: LD_INT 20
11884: ST_TO_ADDR
// hc_class := class_tiger ;
11885: LD_ADDR_OWVAR 28
11889: PUSH
11890: LD_INT 14
11892: ST_TO_ADDR
// hc_gallery :=  ;
11893: LD_ADDR_OWVAR 33
11897: PUSH
11898: LD_STRING 
11900: ST_TO_ADDR
// hc_name :=  ;
11901: LD_ADDR_OWVAR 26
11905: PUSH
11906: LD_STRING 
11908: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11909: CALL_OW 44
11913: PPUSH
11914: LD_INT 0
11916: PPUSH
11917: CALL_OW 51
// end ;
11921: GO 11843
11923: POP
11924: POP
// end ;
11925: PPOPN 1
11927: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11928: LD_EXP 26
11932: PUSH
11933: LD_EXP 46
11937: AND
11938: IFFALSE 11947
11940: GO 11942
11942: DISABLE
// StreamSibBomb ;
11943: CALL 11948 0 0
11947: END
// export function StreamSibBomb ; var i , x , y ; begin
11948: LD_INT 0
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
// result := false ;
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: LD_INT 0
11961: ST_TO_ADDR
// for i := 1 to 16 do
11962: LD_ADDR_VAR 0 2
11966: PUSH
11967: DOUBLE
11968: LD_INT 1
11970: DEC
11971: ST_TO_ADDR
11972: LD_INT 16
11974: PUSH
11975: FOR_TO
11976: IFFALSE 12175
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11978: LD_ADDR_VAR 0 3
11982: PUSH
11983: LD_INT 10
11985: PUSH
11986: LD_INT 20
11988: PUSH
11989: LD_INT 30
11991: PUSH
11992: LD_INT 40
11994: PUSH
11995: LD_INT 50
11997: PUSH
11998: LD_INT 60
12000: PUSH
12001: LD_INT 70
12003: PUSH
12004: LD_INT 80
12006: PUSH
12007: LD_INT 90
12009: PUSH
12010: LD_INT 100
12012: PUSH
12013: LD_INT 110
12015: PUSH
12016: LD_INT 120
12018: PUSH
12019: LD_INT 130
12021: PUSH
12022: LD_INT 140
12024: PUSH
12025: LD_INT 150
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 1
12047: PPUSH
12048: LD_INT 15
12050: PPUSH
12051: CALL_OW 12
12055: ARRAY
12056: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12057: LD_ADDR_VAR 0 4
12061: PUSH
12062: LD_INT 10
12064: PUSH
12065: LD_INT 20
12067: PUSH
12068: LD_INT 30
12070: PUSH
12071: LD_INT 40
12073: PUSH
12074: LD_INT 50
12076: PUSH
12077: LD_INT 60
12079: PUSH
12080: LD_INT 70
12082: PUSH
12083: LD_INT 80
12085: PUSH
12086: LD_INT 90
12088: PUSH
12089: LD_INT 100
12091: PUSH
12092: LD_INT 110
12094: PUSH
12095: LD_INT 120
12097: PUSH
12098: LD_INT 130
12100: PUSH
12101: LD_INT 140
12103: PUSH
12104: LD_INT 150
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 1
12126: PPUSH
12127: LD_INT 15
12129: PPUSH
12130: CALL_OW 12
12134: ARRAY
12135: ST_TO_ADDR
// if ValidHex ( x , y ) then
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_VAR 0 4
12145: PPUSH
12146: CALL_OW 488
12150: IFFALSE 12173
// begin result := [ x , y ] ;
12152: LD_ADDR_VAR 0 1
12156: PUSH
12157: LD_VAR 0 3
12161: PUSH
12162: LD_VAR 0 4
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: ST_TO_ADDR
// break ;
12171: GO 12175
// end ; end ;
12173: GO 11975
12175: POP
12176: POP
// if result then
12177: LD_VAR 0 1
12181: IFFALSE 12241
// begin ToLua ( playSibBomb() ) ;
12183: LD_STRING playSibBomb()
12185: PPUSH
12186: CALL_OW 559
// wait ( 0 0$14 ) ;
12190: LD_INT 490
12192: PPUSH
12193: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12197: LD_VAR 0 1
12201: PUSH
12202: LD_INT 1
12204: ARRAY
12205: PPUSH
12206: LD_VAR 0 1
12210: PUSH
12211: LD_INT 2
12213: ARRAY
12214: PPUSH
12215: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12219: LD_VAR 0 1
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: LD_VAR 0 1
12232: PUSH
12233: LD_INT 2
12235: ARRAY
12236: PPUSH
12237: CALL_OW 429
// end ; end ;
12241: LD_VAR 0 1
12245: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12246: LD_EXP 26
12250: PUSH
12251: LD_EXP 48
12255: AND
12256: IFFALSE 12268
12258: GO 12260
12260: DISABLE
// YouLost (  ) ;
12261: LD_STRING 
12263: PPUSH
12264: CALL_OW 104
12268: END
// every 0 0$1 trigger StreamModeActive and sFog do
12269: LD_EXP 26
12273: PUSH
12274: LD_EXP 47
12278: AND
12279: IFFALSE 12293
12281: GO 12283
12283: DISABLE
// FogOff ( your_side ) ;
12284: LD_OWVAR 2
12288: PPUSH
12289: CALL_OW 344
12293: END
// every 0 0$1 trigger StreamModeActive and sSun do
12294: LD_EXP 26
12298: PUSH
12299: LD_EXP 49
12303: AND
12304: IFFALSE 12332
12306: GO 12308
12308: DISABLE
// begin solar_recharge_percent := 0 ;
12309: LD_ADDR_OWVAR 79
12313: PUSH
12314: LD_INT 0
12316: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12317: LD_INT 10500
12319: PPUSH
12320: CALL_OW 67
// solar_recharge_percent := 100 ;
12324: LD_ADDR_OWVAR 79
12328: PUSH
12329: LD_INT 100
12331: ST_TO_ADDR
// end ;
12332: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12333: LD_EXP 26
12337: PUSH
12338: LD_EXP 50
12342: AND
12343: IFFALSE 12582
12345: GO 12347
12347: DISABLE
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
12352: PPUSH
// begin tmp := [ ] ;
12353: LD_ADDR_VAR 0 3
12357: PUSH
12358: EMPTY
12359: ST_TO_ADDR
// for i := 1 to 6 do
12360: LD_ADDR_VAR 0 1
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_INT 6
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12479
// begin uc_nation := nation_nature ;
12376: LD_ADDR_OWVAR 21
12380: PUSH
12381: LD_INT 0
12383: ST_TO_ADDR
// uc_side := 0 ;
12384: LD_ADDR_OWVAR 20
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12392: LD_ADDR_OWVAR 29
12396: PUSH
12397: LD_INT 12
12399: PUSH
12400: LD_INT 12
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: ST_TO_ADDR
// hc_agressivity := 20 ;
12407: LD_ADDR_OWVAR 35
12411: PUSH
12412: LD_INT 20
12414: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12415: LD_ADDR_OWVAR 28
12419: PUSH
12420: LD_INT 17
12422: ST_TO_ADDR
// hc_gallery :=  ;
12423: LD_ADDR_OWVAR 33
12427: PUSH
12428: LD_STRING 
12430: ST_TO_ADDR
// hc_name :=  ;
12431: LD_ADDR_OWVAR 26
12435: PUSH
12436: LD_STRING 
12438: ST_TO_ADDR
// un := CreateHuman ;
12439: LD_ADDR_VAR 0 2
12443: PUSH
12444: CALL_OW 44
12448: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12449: LD_VAR 0 2
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 51
// tmp := tmp ^ un ;
12461: LD_ADDR_VAR 0 3
12465: PUSH
12466: LD_VAR 0 3
12470: PUSH
12471: LD_VAR 0 2
12475: ADD
12476: ST_TO_ADDR
// end ;
12477: GO 12373
12479: POP
12480: POP
// repeat wait ( 0 0$1 ) ;
12481: LD_INT 35
12483: PPUSH
12484: CALL_OW 67
// for un in tmp do
12488: LD_ADDR_VAR 0 2
12492: PUSH
12493: LD_VAR 0 3
12497: PUSH
12498: FOR_IN
12499: IFFALSE 12573
// begin if IsDead ( un ) then
12501: LD_VAR 0 2
12505: PPUSH
12506: CALL_OW 301
12510: IFFALSE 12530
// begin tmp := tmp diff un ;
12512: LD_ADDR_VAR 0 3
12516: PUSH
12517: LD_VAR 0 3
12521: PUSH
12522: LD_VAR 0 2
12526: DIFF
12527: ST_TO_ADDR
// continue ;
12528: GO 12498
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12530: LD_VAR 0 2
12534: PPUSH
12535: LD_INT 3
12537: PUSH
12538: LD_INT 22
12540: PUSH
12541: LD_INT 0
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: PPUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: CALL_OW 74
12566: PPUSH
12567: CALL_OW 115
// end ;
12571: GO 12498
12573: POP
12574: POP
// until not tmp ;
12575: LD_VAR 0 3
12579: NOT
12580: IFFALSE 12481
// end ;
12582: PPOPN 3
12584: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12585: LD_EXP 26
12589: PUSH
12590: LD_EXP 51
12594: AND
12595: IFFALSE 12649
12597: GO 12599
12599: DISABLE
// begin ToLua ( displayTroll(); ) ;
12600: LD_STRING displayTroll();
12602: PPUSH
12603: CALL_OW 559
// wait ( 3 3$00 ) ;
12607: LD_INT 6300
12609: PPUSH
12610: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12614: LD_STRING hideTroll();
12616: PPUSH
12617: CALL_OW 559
// wait ( 1 1$00 ) ;
12621: LD_INT 2100
12623: PPUSH
12624: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12628: LD_STRING displayTroll();
12630: PPUSH
12631: CALL_OW 559
// wait ( 1 1$00 ) ;
12635: LD_INT 2100
12637: PPUSH
12638: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12642: LD_STRING hideTroll();
12644: PPUSH
12645: CALL_OW 559
// end ;
12649: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12650: LD_EXP 26
12654: PUSH
12655: LD_EXP 52
12659: AND
12660: IFFALSE 12723
12662: GO 12664
12664: DISABLE
12665: LD_INT 0
12667: PPUSH
// begin p := 0 ;
12668: LD_ADDR_VAR 0 1
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// repeat game_speed := 1 ;
12676: LD_ADDR_OWVAR 65
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12684: LD_INT 35
12686: PPUSH
12687: CALL_OW 67
// p := p + 1 ;
12691: LD_ADDR_VAR 0 1
12695: PUSH
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 1
12703: PLUS
12704: ST_TO_ADDR
// until p >= 60 ;
12705: LD_VAR 0 1
12709: PUSH
12710: LD_INT 60
12712: GREATEREQUAL
12713: IFFALSE 12676
// game_speed := 4 ;
12715: LD_ADDR_OWVAR 65
12719: PUSH
12720: LD_INT 4
12722: ST_TO_ADDR
// end ;
12723: PPOPN 1
12725: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12726: LD_EXP 26
12730: PUSH
12731: LD_EXP 53
12735: AND
12736: IFFALSE 12882
12738: GO 12740
12740: DISABLE
12741: LD_INT 0
12743: PPUSH
12744: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_OWVAR 2
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: LD_INT 30
12767: PUSH
12768: LD_INT 0
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 30
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PPUSH
12794: CALL_OW 69
12798: ST_TO_ADDR
// if not depot then
12799: LD_VAR 0 1
12803: NOT
12804: IFFALSE 12808
// exit ;
12806: GO 12882
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12808: LD_ADDR_VAR 0 2
12812: PUSH
12813: LD_VAR 0 1
12817: PUSH
12818: LD_INT 1
12820: PPUSH
12821: LD_VAR 0 1
12825: PPUSH
12826: CALL_OW 12
12830: ARRAY
12831: PPUSH
12832: CALL_OW 274
12836: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12837: LD_VAR 0 2
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: LD_INT 0
12847: PPUSH
12848: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12852: LD_VAR 0 2
12856: PPUSH
12857: LD_INT 2
12859: PPUSH
12860: LD_INT 0
12862: PPUSH
12863: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12867: LD_VAR 0 2
12871: PPUSH
12872: LD_INT 3
12874: PPUSH
12875: LD_INT 0
12877: PPUSH
12878: CALL_OW 277
// end ;
12882: PPOPN 2
12884: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12885: LD_EXP 26
12889: PUSH
12890: LD_EXP 54
12894: AND
12895: IFFALSE 12992
12897: GO 12899
12899: DISABLE
12900: LD_INT 0
12902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12903: LD_ADDR_VAR 0 1
12907: PUSH
12908: LD_INT 22
12910: PUSH
12911: LD_OWVAR 2
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 21
12922: PUSH
12923: LD_INT 1
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: LD_INT 23
12935: PUSH
12936: LD_INT 0
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: ST_TO_ADDR
// if not tmp then
12957: LD_VAR 0 1
12961: NOT
12962: IFFALSE 12966
// exit ;
12964: GO 12992
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12966: LD_VAR 0 1
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: LD_VAR 0 1
12978: PPUSH
12979: CALL_OW 12
12983: ARRAY
12984: PPUSH
12985: LD_INT 200
12987: PPUSH
12988: CALL_OW 234
// end ;
12992: PPOPN 1
12994: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12995: LD_EXP 26
12999: PUSH
13000: LD_EXP 55
13004: AND
13005: IFFALSE 13084
13007: GO 13009
13009: DISABLE
13010: LD_INT 0
13012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13013: LD_ADDR_VAR 0 1
13017: PUSH
13018: LD_INT 22
13020: PUSH
13021: LD_OWVAR 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 21
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PPUSH
13044: CALL_OW 69
13048: ST_TO_ADDR
// if not tmp then
13049: LD_VAR 0 1
13053: NOT
13054: IFFALSE 13058
// exit ;
13056: GO 13084
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13058: LD_VAR 0 1
13062: PUSH
13063: LD_INT 1
13065: PPUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 12
13075: ARRAY
13076: PPUSH
13077: LD_INT 60
13079: PPUSH
13080: CALL_OW 234
// end ;
13084: PPOPN 1
13086: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13087: LD_EXP 26
13091: PUSH
13092: LD_EXP 56
13096: AND
13097: IFFALSE 13196
13099: GO 13101
13101: DISABLE
13102: LD_INT 0
13104: PPUSH
13105: PPUSH
// begin enable ;
13106: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13107: LD_ADDR_VAR 0 1
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_OWVAR 2
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 61
13126: PUSH
13127: EMPTY
13128: LIST
13129: PUSH
13130: LD_INT 33
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: PPUSH
13145: CALL_OW 69
13149: ST_TO_ADDR
// if not tmp then
13150: LD_VAR 0 1
13154: NOT
13155: IFFALSE 13159
// exit ;
13157: GO 13196
// for i in tmp do
13159: LD_ADDR_VAR 0 2
13163: PUSH
13164: LD_VAR 0 1
13168: PUSH
13169: FOR_IN
13170: IFFALSE 13194
// if IsControledBy ( i ) then
13172: LD_VAR 0 2
13176: PPUSH
13177: CALL_OW 312
13181: IFFALSE 13192
// ComUnlink ( i ) ;
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 136
13192: GO 13169
13194: POP
13195: POP
// end ;
13196: PPOPN 2
13198: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13199: LD_EXP 26
13203: PUSH
13204: LD_EXP 57
13208: AND
13209: IFFALSE 13349
13211: GO 13213
13213: DISABLE
13214: LD_INT 0
13216: PPUSH
13217: PPUSH
// begin ToLua ( displayPowell(); ) ;
13218: LD_STRING displayPowell();
13220: PPUSH
13221: CALL_OW 559
// uc_side := 0 ;
13225: LD_ADDR_OWVAR 20
13229: PUSH
13230: LD_INT 0
13232: ST_TO_ADDR
// uc_nation := 2 ;
13233: LD_ADDR_OWVAR 21
13237: PUSH
13238: LD_INT 2
13240: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13241: LD_ADDR_OWVAR 37
13245: PUSH
13246: LD_INT 14
13248: ST_TO_ADDR
// vc_engine := engine_siberite ;
13249: LD_ADDR_OWVAR 39
13253: PUSH
13254: LD_INT 3
13256: ST_TO_ADDR
// vc_control := control_apeman ;
13257: LD_ADDR_OWVAR 38
13261: PUSH
13262: LD_INT 5
13264: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13265: LD_ADDR_OWVAR 40
13269: PUSH
13270: LD_INT 29
13272: ST_TO_ADDR
// un := CreateVehicle ;
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: CALL_OW 45
13282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13283: LD_VAR 0 2
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13295: LD_INT 35
13297: PPUSH
13298: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13302: LD_VAR 0 2
13306: PPUSH
13307: LD_INT 22
13309: PUSH
13310: LD_OWVAR 2
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 69
13323: PPUSH
13324: LD_VAR 0 2
13328: PPUSH
13329: CALL_OW 74
13333: PPUSH
13334: CALL_OW 115
// until IsDead ( un ) ;
13338: LD_VAR 0 2
13342: PPUSH
13343: CALL_OW 301
13347: IFFALSE 13295
// end ;
13349: PPOPN 2
13351: END
// every 0 0$1 trigger StreamModeActive and sStu do
13352: LD_EXP 26
13356: PUSH
13357: LD_EXP 65
13361: AND
13362: IFFALSE 13378
13364: GO 13366
13366: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13367: LD_STRING displayStucuk();
13369: PPUSH
13370: CALL_OW 559
// ResetFog ;
13374: CALL_OW 335
// end ;
13378: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13379: LD_EXP 26
13383: PUSH
13384: LD_EXP 58
13388: AND
13389: IFFALSE 13530
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
13397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_INT 22
13405: PUSH
13406: LD_OWVAR 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 69
13433: ST_TO_ADDR
// if not tmp then
13434: LD_VAR 0 2
13438: NOT
13439: IFFALSE 13443
// exit ;
13441: GO 13530
// un := tmp [ rand ( 1 , tmp ) ] ;
13443: LD_ADDR_VAR 0 1
13447: PUSH
13448: LD_VAR 0 2
13452: PUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 2
13460: PPUSH
13461: CALL_OW 12
13465: ARRAY
13466: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13467: LD_VAR 0 1
13471: PPUSH
13472: LD_INT 0
13474: PPUSH
13475: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13479: LD_VAR 0 1
13483: PPUSH
13484: LD_OWVAR 3
13488: PUSH
13489: LD_VAR 0 1
13493: DIFF
13494: PPUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 74
13504: PPUSH
13505: CALL_OW 115
// wait ( 0 0$20 ) ;
13509: LD_INT 700
13511: PPUSH
13512: CALL_OW 67
// SetSide ( un , your_side ) ;
13516: LD_VAR 0 1
13520: PPUSH
13521: LD_OWVAR 2
13525: PPUSH
13526: CALL_OW 235
// end ;
13530: PPOPN 2
13532: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13533: LD_EXP 26
13537: PUSH
13538: LD_EXP 59
13542: AND
13543: IFFALSE 13649
13545: GO 13547
13547: DISABLE
13548: LD_INT 0
13550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13551: LD_ADDR_VAR 0 1
13555: PUSH
13556: LD_INT 22
13558: PUSH
13559: LD_OWVAR 2
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 0
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 30
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 69
13604: ST_TO_ADDR
// if not depot then
13605: LD_VAR 0 1
13609: NOT
13610: IFFALSE 13614
// exit ;
13612: GO 13649
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13614: LD_VAR 0 1
13618: PUSH
13619: LD_INT 1
13621: ARRAY
13622: PPUSH
13623: CALL_OW 250
13627: PPUSH
13628: LD_VAR 0 1
13632: PUSH
13633: LD_INT 1
13635: ARRAY
13636: PPUSH
13637: CALL_OW 251
13641: PPUSH
13642: LD_INT 70
13644: PPUSH
13645: CALL_OW 495
// end ;
13649: PPOPN 1
13651: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13652: LD_EXP 26
13656: PUSH
13657: LD_EXP 60
13661: AND
13662: IFFALSE 13873
13664: GO 13666
13666: DISABLE
13667: LD_INT 0
13669: PPUSH
13670: PPUSH
13671: PPUSH
13672: PPUSH
13673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13674: LD_ADDR_VAR 0 5
13678: PUSH
13679: LD_INT 22
13681: PUSH
13682: LD_OWVAR 2
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 21
13693: PUSH
13694: LD_INT 1
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 69
13709: ST_TO_ADDR
// if not tmp then
13710: LD_VAR 0 5
13714: NOT
13715: IFFALSE 13719
// exit ;
13717: GO 13873
// for i in tmp do
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_VAR 0 5
13728: PUSH
13729: FOR_IN
13730: IFFALSE 13871
// begin d := rand ( 0 , 5 ) ;
13732: LD_ADDR_VAR 0 4
13736: PUSH
13737: LD_INT 0
13739: PPUSH
13740: LD_INT 5
13742: PPUSH
13743: CALL_OW 12
13747: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_VAR 0 1
13757: PPUSH
13758: CALL_OW 250
13762: PPUSH
13763: LD_VAR 0 4
13767: PPUSH
13768: LD_INT 3
13770: PPUSH
13771: LD_INT 12
13773: PPUSH
13774: CALL_OW 12
13778: PPUSH
13779: CALL_OW 272
13783: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_VAR 0 1
13793: PPUSH
13794: CALL_OW 251
13798: PPUSH
13799: LD_VAR 0 4
13803: PPUSH
13804: LD_INT 3
13806: PPUSH
13807: LD_INT 12
13809: PPUSH
13810: CALL_OW 12
13814: PPUSH
13815: CALL_OW 273
13819: ST_TO_ADDR
// if ValidHex ( x , y ) then
13820: LD_VAR 0 2
13824: PPUSH
13825: LD_VAR 0 3
13829: PPUSH
13830: CALL_OW 488
13834: IFFALSE 13869
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13836: LD_VAR 0 1
13840: PPUSH
13841: LD_VAR 0 2
13845: PPUSH
13846: LD_VAR 0 3
13850: PPUSH
13851: LD_INT 3
13853: PPUSH
13854: LD_INT 6
13856: PPUSH
13857: CALL_OW 12
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 483
// end ;
13869: GO 13729
13871: POP
13872: POP
// end ;
13873: PPOPN 5
13875: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13876: LD_EXP 26
13880: PUSH
13881: LD_EXP 61
13885: AND
13886: IFFALSE 13980
13888: GO 13890
13890: DISABLE
13891: LD_INT 0
13893: PPUSH
13894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_INT 22
13902: PUSH
13903: LD_OWVAR 2
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: LD_INT 32
13914: PUSH
13915: LD_INT 1
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 21
13924: PUSH
13925: LD_INT 2
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: PPUSH
13937: CALL_OW 69
13941: ST_TO_ADDR
// if not tmp then
13942: LD_VAR 0 2
13946: NOT
13947: IFFALSE 13951
// exit ;
13949: GO 13980
// for i in tmp do
13951: LD_ADDR_VAR 0 1
13955: PUSH
13956: LD_VAR 0 2
13960: PUSH
13961: FOR_IN
13962: IFFALSE 13978
// SetFuel ( i , 0 ) ;
13964: LD_VAR 0 1
13968: PPUSH
13969: LD_INT 0
13971: PPUSH
13972: CALL_OW 240
13976: GO 13961
13978: POP
13979: POP
// end ;
13980: PPOPN 2
13982: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13983: LD_EXP 26
13987: PUSH
13988: LD_EXP 62
13992: AND
13993: IFFALSE 14059
13995: GO 13997
13997: DISABLE
13998: LD_INT 0
14000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14001: LD_ADDR_VAR 0 1
14005: PUSH
14006: LD_INT 22
14008: PUSH
14009: LD_OWVAR 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 29
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PPUSH
14032: CALL_OW 69
14036: ST_TO_ADDR
// if not tmp then
14037: LD_VAR 0 1
14041: NOT
14042: IFFALSE 14046
// exit ;
14044: GO 14059
// DestroyUnit ( tmp [ 1 ] ) ;
14046: LD_VAR 0 1
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: PPUSH
14055: CALL_OW 65
// end ;
14059: PPOPN 1
14061: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14062: LD_EXP 26
14066: PUSH
14067: LD_EXP 64
14071: AND
14072: IFFALSE 14201
14074: GO 14076
14076: DISABLE
14077: LD_INT 0
14079: PPUSH
// begin uc_side := 0 ;
14080: LD_ADDR_OWVAR 20
14084: PUSH
14085: LD_INT 0
14087: ST_TO_ADDR
// uc_nation := nation_arabian ;
14088: LD_ADDR_OWVAR 21
14092: PUSH
14093: LD_INT 2
14095: ST_TO_ADDR
// hc_gallery :=  ;
14096: LD_ADDR_OWVAR 33
14100: PUSH
14101: LD_STRING 
14103: ST_TO_ADDR
// hc_name :=  ;
14104: LD_ADDR_OWVAR 26
14108: PUSH
14109: LD_STRING 
14111: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14112: LD_INT 1
14114: PPUSH
14115: LD_INT 11
14117: PPUSH
14118: LD_INT 10
14120: PPUSH
14121: CALL_OW 380
// un := CreateHuman ;
14125: LD_ADDR_VAR 0 1
14129: PUSH
14130: CALL_OW 44
14134: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14135: LD_VAR 0 1
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14147: LD_INT 35
14149: PPUSH
14150: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14154: LD_VAR 0 1
14158: PPUSH
14159: LD_INT 22
14161: PUSH
14162: LD_OWVAR 2
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PPUSH
14171: CALL_OW 69
14175: PPUSH
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 74
14185: PPUSH
14186: CALL_OW 115
// until IsDead ( un ) ;
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 301
14199: IFFALSE 14147
// end ;
14201: PPOPN 1
14203: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14204: LD_EXP 26
14208: PUSH
14209: LD_EXP 66
14213: AND
14214: IFFALSE 14226
14216: GO 14218
14218: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14219: LD_STRING earthquake(getX(game), 0, 32)
14221: PPUSH
14222: CALL_OW 559
14226: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14227: LD_EXP 26
14231: PUSH
14232: LD_EXP 67
14236: AND
14237: IFFALSE 14328
14239: GO 14241
14241: DISABLE
14242: LD_INT 0
14244: PPUSH
// begin enable ;
14245: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14246: LD_ADDR_VAR 0 1
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_OWVAR 2
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 21
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 33
14275: PUSH
14276: LD_INT 3
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: PPUSH
14288: CALL_OW 69
14292: ST_TO_ADDR
// if not tmp then
14293: LD_VAR 0 1
14297: NOT
14298: IFFALSE 14302
// exit ;
14300: GO 14328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14302: LD_VAR 0 1
14306: PUSH
14307: LD_INT 1
14309: PPUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 12
14319: ARRAY
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: CALL_OW 234
// end ;
14328: PPOPN 1
14330: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14331: LD_EXP 26
14335: PUSH
14336: LD_EXP 68
14340: AND
14341: IFFALSE 14482
14343: GO 14345
14345: DISABLE
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
14350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14351: LD_ADDR_VAR 0 3
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_OWVAR 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: ST_TO_ADDR
// if not tmp then
14387: LD_VAR 0 3
14391: NOT
14392: IFFALSE 14396
// exit ;
14394: GO 14482
// un := tmp [ rand ( 1 , tmp ) ] ;
14396: LD_ADDR_VAR 0 2
14400: PUSH
14401: LD_VAR 0 3
14405: PUSH
14406: LD_INT 1
14408: PPUSH
14409: LD_VAR 0 3
14413: PPUSH
14414: CALL_OW 12
14418: ARRAY
14419: ST_TO_ADDR
// if Crawls ( un ) then
14420: LD_VAR 0 2
14424: PPUSH
14425: CALL_OW 318
14429: IFFALSE 14440
// ComWalk ( un ) ;
14431: LD_VAR 0 2
14435: PPUSH
14436: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14440: LD_VAR 0 2
14444: PPUSH
14445: LD_INT 9
14447: PPUSH
14448: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14452: LD_INT 28
14454: PPUSH
14455: LD_OWVAR 2
14459: PPUSH
14460: LD_INT 2
14462: PPUSH
14463: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14467: LD_INT 29
14469: PPUSH
14470: LD_OWVAR 2
14474: PPUSH
14475: LD_INT 2
14477: PPUSH
14478: CALL_OW 322
// end ;
14482: PPOPN 3
14484: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14485: LD_EXP 26
14489: PUSH
14490: LD_EXP 69
14494: AND
14495: IFFALSE 14606
14497: GO 14499
14499: DISABLE
14500: LD_INT 0
14502: PPUSH
14503: PPUSH
14504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14505: LD_ADDR_VAR 0 3
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_OWVAR 2
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 25
14524: PUSH
14525: LD_INT 1
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: ST_TO_ADDR
// if not tmp then
14541: LD_VAR 0 3
14545: NOT
14546: IFFALSE 14550
// exit ;
14548: GO 14606
// un := tmp [ rand ( 1 , tmp ) ] ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_VAR 0 3
14559: PUSH
14560: LD_INT 1
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: CALL_OW 12
14572: ARRAY
14573: ST_TO_ADDR
// if Crawls ( un ) then
14574: LD_VAR 0 2
14578: PPUSH
14579: CALL_OW 318
14583: IFFALSE 14594
// ComWalk ( un ) ;
14585: LD_VAR 0 2
14589: PPUSH
14590: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14594: LD_VAR 0 2
14598: PPUSH
14599: LD_INT 8
14601: PPUSH
14602: CALL_OW 336
// end ;
14606: PPOPN 3
14608: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14609: LD_EXP 26
14613: PUSH
14614: LD_EXP 70
14618: AND
14619: IFFALSE 14763
14621: GO 14623
14623: DISABLE
14624: LD_INT 0
14626: PPUSH
14627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: LD_INT 22
14635: PUSH
14636: LD_OWVAR 2
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 21
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 2
14657: PUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 12
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 34
14670: PUSH
14671: LD_INT 51
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 34
14680: PUSH
14681: LD_INT 32
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: ST_TO_ADDR
// if not tmp then
14704: LD_VAR 0 2
14708: NOT
14709: IFFALSE 14713
// exit ;
14711: GO 14763
// for i in tmp do
14713: LD_ADDR_VAR 0 1
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: FOR_IN
14724: IFFALSE 14761
// if GetCargo ( i , mat_artifact ) = 0 then
14726: LD_VAR 0 1
14730: PPUSH
14731: LD_INT 4
14733: PPUSH
14734: CALL_OW 289
14738: PUSH
14739: LD_INT 0
14741: EQUAL
14742: IFFALSE 14759
// SetCargo ( i , mat_siberit , 100 ) ;
14744: LD_VAR 0 1
14748: PPUSH
14749: LD_INT 3
14751: PPUSH
14752: LD_INT 100
14754: PPUSH
14755: CALL_OW 290
14759: GO 14723
14761: POP
14762: POP
// end ;
14763: PPOPN 2
14765: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14766: LD_EXP 26
14770: PUSH
14771: LD_EXP 71
14775: AND
14776: IFFALSE 14959
14778: GO 14780
14780: DISABLE
14781: LD_INT 0
14783: PPUSH
14784: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14785: LD_ADDR_VAR 0 2
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_OWVAR 2
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PPUSH
14802: CALL_OW 69
14806: ST_TO_ADDR
// if not tmp then
14807: LD_VAR 0 2
14811: NOT
14812: IFFALSE 14816
// exit ;
14814: GO 14959
// for i := 1 to 2 do
14816: LD_ADDR_VAR 0 1
14820: PUSH
14821: DOUBLE
14822: LD_INT 1
14824: DEC
14825: ST_TO_ADDR
14826: LD_INT 2
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14957
// begin uc_side := your_side ;
14832: LD_ADDR_OWVAR 20
14836: PUSH
14837: LD_OWVAR 2
14841: ST_TO_ADDR
// uc_nation := nation_american ;
14842: LD_ADDR_OWVAR 21
14846: PUSH
14847: LD_INT 1
14849: ST_TO_ADDR
// vc_chassis := us_morphling ;
14850: LD_ADDR_OWVAR 37
14854: PUSH
14855: LD_INT 5
14857: ST_TO_ADDR
// vc_engine := engine_siberite ;
14858: LD_ADDR_OWVAR 39
14862: PUSH
14863: LD_INT 3
14865: ST_TO_ADDR
// vc_control := control_computer ;
14866: LD_ADDR_OWVAR 38
14870: PUSH
14871: LD_INT 3
14873: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14874: LD_ADDR_OWVAR 40
14878: PUSH
14879: LD_INT 10
14881: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14882: LD_VAR 0 2
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PPUSH
14891: CALL_OW 310
14895: NOT
14896: IFFALSE 14943
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14898: CALL_OW 45
14902: PPUSH
14903: LD_VAR 0 2
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: CALL_OW 250
14916: PPUSH
14917: LD_VAR 0 2
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PPUSH
14926: CALL_OW 251
14930: PPUSH
14931: LD_INT 12
14933: PPUSH
14934: LD_INT 1
14936: PPUSH
14937: CALL_OW 50
14941: GO 14955
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14943: CALL_OW 45
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 51
// end ;
14955: GO 14829
14957: POP
14958: POP
// end ;
14959: PPOPN 2
14961: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14962: LD_EXP 26
14966: PUSH
14967: LD_EXP 72
14971: AND
14972: IFFALSE 15194
14974: GO 14976
14976: DISABLE
14977: LD_INT 0
14979: PPUSH
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
14984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14985: LD_ADDR_VAR 0 6
14989: PUSH
14990: LD_INT 22
14992: PUSH
14993: LD_OWVAR 2
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 21
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 3
15014: PUSH
15015: LD_INT 23
15017: PUSH
15018: LD_INT 0
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: LIST
15033: PPUSH
15034: CALL_OW 69
15038: ST_TO_ADDR
// if not tmp then
15039: LD_VAR 0 6
15043: NOT
15044: IFFALSE 15048
// exit ;
15046: GO 15194
// s1 := rand ( 1 , 4 ) ;
15048: LD_ADDR_VAR 0 2
15052: PUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_INT 4
15058: PPUSH
15059: CALL_OW 12
15063: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15064: LD_ADDR_VAR 0 4
15068: PUSH
15069: LD_VAR 0 6
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PPUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 259
15087: ST_TO_ADDR
// if s1 = 1 then
15088: LD_VAR 0 2
15092: PUSH
15093: LD_INT 1
15095: EQUAL
15096: IFFALSE 15116
// s2 := rand ( 2 , 4 ) else
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: LD_INT 2
15105: PPUSH
15106: LD_INT 4
15108: PPUSH
15109: CALL_OW 12
15113: ST_TO_ADDR
15114: GO 15124
// s2 := 1 ;
15116: LD_ADDR_VAR 0 3
15120: PUSH
15121: LD_INT 1
15123: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15124: LD_ADDR_VAR 0 5
15128: PUSH
15129: LD_VAR 0 6
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PPUSH
15138: LD_VAR 0 3
15142: PPUSH
15143: CALL_OW 259
15147: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15148: LD_VAR 0 6
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 2
15161: PPUSH
15162: LD_VAR 0 5
15166: PPUSH
15167: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15171: LD_VAR 0 6
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PPUSH
15180: LD_VAR 0 3
15184: PPUSH
15185: LD_VAR 0 4
15189: PPUSH
15190: CALL_OW 237
// end ;
15194: PPOPN 6
15196: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15197: LD_EXP 26
15201: PUSH
15202: LD_EXP 73
15206: AND
15207: IFFALSE 15286
15209: GO 15211
15211: DISABLE
15212: LD_INT 0
15214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15215: LD_ADDR_VAR 0 1
15219: PUSH
15220: LD_INT 22
15222: PUSH
15223: LD_OWVAR 2
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 69
15250: ST_TO_ADDR
// if not tmp then
15251: LD_VAR 0 1
15255: NOT
15256: IFFALSE 15260
// exit ;
15258: GO 15286
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15260: LD_VAR 0 1
15264: PUSH
15265: LD_INT 1
15267: PPUSH
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 12
15277: ARRAY
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: CALL_OW 234
// end ;
15286: PPOPN 1
15288: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15289: LD_EXP 26
15293: PUSH
15294: LD_EXP 74
15298: AND
15299: IFFALSE 15411
15301: GO 15303
15303: DISABLE
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15308: LD_ADDR_VAR 0 2
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_OWVAR 2
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 2
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 27
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 30
15340: PUSH
15341: LD_INT 26
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 30
15350: PUSH
15351: LD_INT 28
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PPUSH
15368: CALL_OW 69
15372: ST_TO_ADDR
// if not tmp then
15373: LD_VAR 0 2
15377: NOT
15378: IFFALSE 15382
// exit ;
15380: GO 15411
// for i in tmp do
15382: LD_ADDR_VAR 0 1
15386: PUSH
15387: LD_VAR 0 2
15391: PUSH
15392: FOR_IN
15393: IFFALSE 15409
// SetLives ( i , 1 ) ;
15395: LD_VAR 0 1
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 234
15407: GO 15392
15409: POP
15410: POP
// end ;
15411: PPOPN 2
15413: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15414: LD_EXP 26
15418: PUSH
15419: LD_EXP 75
15423: AND
15424: IFFALSE 15711
15426: GO 15428
15428: DISABLE
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
15433: PPUSH
// begin i := rand ( 1 , 7 ) ;
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 1
15441: PPUSH
15442: LD_INT 7
15444: PPUSH
15445: CALL_OW 12
15449: ST_TO_ADDR
// case i of 1 :
15450: LD_VAR 0 1
15454: PUSH
15455: LD_INT 1
15457: DOUBLE
15458: EQUAL
15459: IFTRUE 15463
15461: GO 15473
15463: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15464: LD_STRING earthquake(getX(game), 0, 32)
15466: PPUSH
15467: CALL_OW 559
15471: GO 15711
15473: LD_INT 2
15475: DOUBLE
15476: EQUAL
15477: IFTRUE 15481
15479: GO 15495
15481: POP
// begin ToLua ( displayStucuk(); ) ;
15482: LD_STRING displayStucuk();
15484: PPUSH
15485: CALL_OW 559
// ResetFog ;
15489: CALL_OW 335
// end ; 3 :
15493: GO 15711
15495: LD_INT 3
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15503
15501: GO 15607
15503: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: LD_INT 22
15511: PUSH
15512: LD_OWVAR 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 25
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 69
15539: ST_TO_ADDR
// if not tmp then
15540: LD_VAR 0 2
15544: NOT
15545: IFFALSE 15549
// exit ;
15547: GO 15711
// un := tmp [ rand ( 1 , tmp ) ] ;
15549: LD_ADDR_VAR 0 3
15553: PUSH
15554: LD_VAR 0 2
15558: PUSH
15559: LD_INT 1
15561: PPUSH
15562: LD_VAR 0 2
15566: PPUSH
15567: CALL_OW 12
15571: ARRAY
15572: ST_TO_ADDR
// if Crawls ( un ) then
15573: LD_VAR 0 3
15577: PPUSH
15578: CALL_OW 318
15582: IFFALSE 15593
// ComWalk ( un ) ;
15584: LD_VAR 0 3
15588: PPUSH
15589: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15593: LD_VAR 0 3
15597: PPUSH
15598: LD_INT 8
15600: PPUSH
15601: CALL_OW 336
// end ; 4 :
15605: GO 15711
15607: LD_INT 4
15609: DOUBLE
15610: EQUAL
15611: IFTRUE 15615
15613: GO 15689
15615: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15616: LD_ADDR_VAR 0 2
15620: PUSH
15621: LD_INT 22
15623: PUSH
15624: LD_OWVAR 2
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 30
15635: PUSH
15636: LD_INT 29
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: ST_TO_ADDR
// if not tmp then
15652: LD_VAR 0 2
15656: NOT
15657: IFFALSE 15661
// exit ;
15659: GO 15711
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15661: LD_VAR 0 2
15665: PUSH
15666: LD_INT 1
15668: ARRAY
15669: PPUSH
15670: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15674: LD_VAR 0 2
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: CALL_OW 65
// end ; 5 .. 7 :
15687: GO 15711
15689: LD_INT 5
15691: DOUBLE
15692: GREATEREQUAL
15693: IFFALSE 15701
15695: LD_INT 7
15697: DOUBLE
15698: LESSEQUAL
15699: IFTRUE 15703
15701: GO 15710
15703: POP
// StreamSibBomb ; end ;
15704: CALL 11948 0 0
15708: GO 15711
15710: POP
// end ;
15711: PPOPN 3
15713: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15714: LD_EXP 26
15718: PUSH
15719: LD_EXP 76
15723: AND
15724: IFFALSE 15880
15726: GO 15728
15728: DISABLE
15729: LD_INT 0
15731: PPUSH
15732: PPUSH
15733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_INT 81
15741: PUSH
15742: LD_OWVAR 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 2
15753: PUSH
15754: LD_INT 21
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 21
15766: PUSH
15767: LD_INT 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: ST_TO_ADDR
// if not tmp then
15788: LD_VAR 0 2
15792: NOT
15793: IFFALSE 15797
// exit ;
15795: GO 15880
// p := 0 ;
15797: LD_ADDR_VAR 0 3
15801: PUSH
15802: LD_INT 0
15804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15805: LD_INT 35
15807: PPUSH
15808: CALL_OW 67
// p := p + 1 ;
15812: LD_ADDR_VAR 0 3
15816: PUSH
15817: LD_VAR 0 3
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// for i in tmp do
15826: LD_ADDR_VAR 0 1
15830: PUSH
15831: LD_VAR 0 2
15835: PUSH
15836: FOR_IN
15837: IFFALSE 15868
// if GetLives ( i ) < 1000 then
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 256
15848: PUSH
15849: LD_INT 1000
15851: LESS
15852: IFFALSE 15866
// SetLives ( i , 1000 ) ;
15854: LD_VAR 0 1
15858: PPUSH
15859: LD_INT 1000
15861: PPUSH
15862: CALL_OW 234
15866: GO 15836
15868: POP
15869: POP
// until p > 20 ;
15870: LD_VAR 0 3
15874: PUSH
15875: LD_INT 20
15877: GREATER
15878: IFFALSE 15805
// end ;
15880: PPOPN 3
15882: END
// every 0 0$1 trigger StreamModeActive and sTime do
15883: LD_EXP 26
15887: PUSH
15888: LD_EXP 77
15892: AND
15893: IFFALSE 15928
15895: GO 15897
15897: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15898: LD_INT 28
15900: PPUSH
15901: LD_OWVAR 2
15905: PPUSH
15906: LD_INT 2
15908: PPUSH
15909: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15913: LD_INT 30
15915: PPUSH
15916: LD_OWVAR 2
15920: PPUSH
15921: LD_INT 2
15923: PPUSH
15924: CALL_OW 322
// end ;
15928: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15929: LD_EXP 26
15933: PUSH
15934: LD_EXP 78
15938: AND
15939: IFFALSE 16060
15941: GO 15943
15943: DISABLE
15944: LD_INT 0
15946: PPUSH
15947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15948: LD_ADDR_VAR 0 2
15952: PUSH
15953: LD_INT 22
15955: PUSH
15956: LD_OWVAR 2
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 21
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 23
15980: PUSH
15981: LD_INT 0
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if not tmp then
16002: LD_VAR 0 2
16006: NOT
16007: IFFALSE 16011
// exit ;
16009: GO 16060
// for i in tmp do
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_VAR 0 2
16020: PUSH
16021: FOR_IN
16022: IFFALSE 16058
// begin if Crawls ( i ) then
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 318
16033: IFFALSE 16044
// ComWalk ( i ) ;
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 138
// SetClass ( i , 2 ) ;
16044: LD_VAR 0 1
16048: PPUSH
16049: LD_INT 2
16051: PPUSH
16052: CALL_OW 336
// end ;
16056: GO 16021
16058: POP
16059: POP
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16063: LD_EXP 26
16067: PUSH
16068: LD_EXP 79
16072: AND
16073: IFFALSE 16361
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16083: LD_OWVAR 2
16087: PPUSH
16088: LD_INT 9
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16101: LD_INT 9
16103: PPUSH
16104: LD_OWVAR 2
16108: PPUSH
16109: CALL_OW 343
// uc_side := 9 ;
16113: LD_ADDR_OWVAR 20
16117: PUSH
16118: LD_INT 9
16120: ST_TO_ADDR
// uc_nation := 2 ;
16121: LD_ADDR_OWVAR 21
16125: PUSH
16126: LD_INT 2
16128: ST_TO_ADDR
// hc_name := Dark Warrior ;
16129: LD_ADDR_OWVAR 26
16133: PUSH
16134: LD_STRING Dark Warrior
16136: ST_TO_ADDR
// hc_gallery :=  ;
16137: LD_ADDR_OWVAR 33
16141: PUSH
16142: LD_STRING 
16144: ST_TO_ADDR
// hc_noskilllimit := true ;
16145: LD_ADDR_OWVAR 76
16149: PUSH
16150: LD_INT 1
16152: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16153: LD_ADDR_OWVAR 31
16157: PUSH
16158: LD_INT 30
16160: PUSH
16161: LD_INT 30
16163: PUSH
16164: LD_INT 30
16166: PUSH
16167: LD_INT 30
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: ST_TO_ADDR
// un := CreateHuman ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: CALL_OW 44
16185: ST_TO_ADDR
// hc_noskilllimit := false ;
16186: LD_ADDR_OWVAR 76
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16194: LD_VAR 0 3
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 51
// ToLua ( playRanger() ) ;
16206: LD_STRING playRanger()
16208: PPUSH
16209: CALL_OW 559
// p := 0 ;
16213: LD_ADDR_VAR 0 2
16217: PUSH
16218: LD_INT 0
16220: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16221: LD_INT 35
16223: PPUSH
16224: CALL_OW 67
// p := p + 1 ;
16228: LD_ADDR_VAR 0 2
16232: PUSH
16233: LD_VAR 0 2
16237: PUSH
16238: LD_INT 1
16240: PLUS
16241: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16242: LD_VAR 0 3
16246: PPUSH
16247: CALL_OW 256
16251: PUSH
16252: LD_INT 1000
16254: LESS
16255: IFFALSE 16269
// SetLives ( un , 1000 ) ;
16257: LD_VAR 0 3
16261: PPUSH
16262: LD_INT 1000
16264: PPUSH
16265: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16269: LD_VAR 0 3
16273: PPUSH
16274: LD_INT 81
16276: PUSH
16277: LD_OWVAR 2
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 91
16288: PUSH
16289: LD_VAR 0 3
16293: PUSH
16294: LD_INT 30
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PPUSH
16306: CALL_OW 69
16310: PPUSH
16311: LD_VAR 0 3
16315: PPUSH
16316: CALL_OW 74
16320: PPUSH
16321: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16325: LD_VAR 0 2
16329: PUSH
16330: LD_INT 80
16332: GREATER
16333: PUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: CALL_OW 301
16343: OR
16344: IFFALSE 16221
// if un then
16346: LD_VAR 0 3
16350: IFFALSE 16361
// RemoveUnit ( un ) ;
16352: LD_VAR 0 3
16356: PPUSH
16357: CALL_OW 64
// end ;
16361: PPOPN 3
16363: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16364: LD_EXP 80
16368: IFFALSE 16484
16370: GO 16372
16372: DISABLE
16373: LD_INT 0
16375: PPUSH
16376: PPUSH
16377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16378: LD_ADDR_VAR 0 2
16382: PUSH
16383: LD_INT 81
16385: PUSH
16386: LD_OWVAR 2
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 21
16397: PUSH
16398: LD_INT 1
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PPUSH
16409: CALL_OW 69
16413: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16414: LD_STRING playComputer()
16416: PPUSH
16417: CALL_OW 559
// if not tmp then
16421: LD_VAR 0 2
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 16484
// for i in tmp do
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_VAR 0 2
16439: PUSH
16440: FOR_IN
16441: IFFALSE 16482
// for j := 1 to 4 do
16443: LD_ADDR_VAR 0 3
16447: PUSH
16448: DOUBLE
16449: LD_INT 1
16451: DEC
16452: ST_TO_ADDR
16453: LD_INT 4
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16478
// SetSkill ( i , j , 10 ) ;
16459: LD_VAR 0 1
16463: PPUSH
16464: LD_VAR 0 3
16468: PPUSH
16469: LD_INT 10
16471: PPUSH
16472: CALL_OW 237
16476: GO 16456
16478: POP
16479: POP
16480: GO 16440
16482: POP
16483: POP
// end ;
16484: PPOPN 3
16486: END
// every 0 0$1 trigger s30 do var i , tmp ;
16487: LD_EXP 81
16491: IFFALSE 16560
16493: GO 16495
16495: DISABLE
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16500: LD_ADDR_VAR 0 2
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_OWVAR 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PPUSH
16517: CALL_OW 69
16521: ST_TO_ADDR
// if not tmp then
16522: LD_VAR 0 2
16526: NOT
16527: IFFALSE 16531
// exit ;
16529: GO 16560
// for i in tmp do
16531: LD_ADDR_VAR 0 1
16535: PUSH
16536: LD_VAR 0 2
16540: PUSH
16541: FOR_IN
16542: IFFALSE 16558
// SetLives ( i , 300 ) ;
16544: LD_VAR 0 1
16548: PPUSH
16549: LD_INT 300
16551: PPUSH
16552: CALL_OW 234
16556: GO 16541
16558: POP
16559: POP
// end ;
16560: PPOPN 2
16562: END
// every 0 0$1 trigger s60 do var i , tmp ;
16563: LD_EXP 82
16567: IFFALSE 16636
16569: GO 16571
16571: DISABLE
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PPUSH
16593: CALL_OW 69
16597: ST_TO_ADDR
// if not tmp then
16598: LD_VAR 0 2
16602: NOT
16603: IFFALSE 16607
// exit ;
16605: GO 16636
// for i in tmp do
16607: LD_ADDR_VAR 0 1
16611: PUSH
16612: LD_VAR 0 2
16616: PUSH
16617: FOR_IN
16618: IFFALSE 16634
// SetLives ( i , 600 ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: LD_INT 600
16627: PPUSH
16628: CALL_OW 234
16632: GO 16617
16634: POP
16635: POP
// end ;
16636: PPOPN 2
16638: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16639: LD_INT 0
16641: PPUSH
// case cmd of 301 :
16642: LD_VAR 0 1
16646: PUSH
16647: LD_INT 301
16649: DOUBLE
16650: EQUAL
16651: IFTRUE 16655
16653: GO 16687
16655: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16656: LD_VAR 0 6
16660: PPUSH
16661: LD_VAR 0 7
16665: PPUSH
16666: LD_VAR 0 8
16670: PPUSH
16671: LD_VAR 0 4
16675: PPUSH
16676: LD_VAR 0 5
16680: PPUSH
16681: CALL 17888 0 5
16685: GO 16808
16687: LD_INT 302
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16732
16695: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16696: LD_VAR 0 6
16700: PPUSH
16701: LD_VAR 0 7
16705: PPUSH
16706: LD_VAR 0 8
16710: PPUSH
16711: LD_VAR 0 9
16715: PPUSH
16716: LD_VAR 0 4
16720: PPUSH
16721: LD_VAR 0 5
16725: PPUSH
16726: CALL 17979 0 6
16730: GO 16808
16732: LD_INT 303
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16777
16740: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16741: LD_VAR 0 6
16745: PPUSH
16746: LD_VAR 0 7
16750: PPUSH
16751: LD_VAR 0 8
16755: PPUSH
16756: LD_VAR 0 9
16760: PPUSH
16761: LD_VAR 0 4
16765: PPUSH
16766: LD_VAR 0 5
16770: PPUSH
16771: CALL 16813 0 6
16775: GO 16808
16777: LD_INT 304
16779: DOUBLE
16780: EQUAL
16781: IFTRUE 16785
16783: GO 16807
16785: POP
// hHackTeleport ( unit , x , y ) ; end ;
16786: LD_VAR 0 2
16790: PPUSH
16791: LD_VAR 0 4
16795: PPUSH
16796: LD_VAR 0 5
16800: PPUSH
16801: CALL 18572 0 3
16805: GO 16808
16807: POP
// end ;
16808: LD_VAR 0 12
16812: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16817: LD_VAR 0 1
16821: PUSH
16822: LD_INT 1
16824: LESS
16825: PUSH
16826: LD_VAR 0 1
16830: PUSH
16831: LD_INT 3
16833: GREATER
16834: OR
16835: PUSH
16836: LD_VAR 0 5
16840: PPUSH
16841: LD_VAR 0 6
16845: PPUSH
16846: CALL_OW 428
16850: OR
16851: IFFALSE 16855
// exit ;
16853: GO 17575
// uc_side := your_side ;
16855: LD_ADDR_OWVAR 20
16859: PUSH
16860: LD_OWVAR 2
16864: ST_TO_ADDR
// uc_nation := nation ;
16865: LD_ADDR_OWVAR 21
16869: PUSH
16870: LD_VAR 0 1
16874: ST_TO_ADDR
// bc_level = 1 ;
16875: LD_ADDR_OWVAR 43
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// case btype of 1 :
16883: LD_VAR 0 2
16887: PUSH
16888: LD_INT 1
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 16907
16896: POP
// bc_type := b_depot ; 2 :
16897: LD_ADDR_OWVAR 42
16901: PUSH
16902: LD_INT 0
16904: ST_TO_ADDR
16905: GO 17519
16907: LD_INT 2
16909: DOUBLE
16910: EQUAL
16911: IFTRUE 16915
16913: GO 16926
16915: POP
// bc_type := b_warehouse ; 3 :
16916: LD_ADDR_OWVAR 42
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
16924: GO 17519
16926: LD_INT 3
16928: DOUBLE
16929: EQUAL
16930: IFTRUE 16934
16932: GO 16945
16934: POP
// bc_type := b_lab ; 4 .. 9 :
16935: LD_ADDR_OWVAR 42
16939: PUSH
16940: LD_INT 6
16942: ST_TO_ADDR
16943: GO 17519
16945: LD_INT 4
16947: DOUBLE
16948: GREATEREQUAL
16949: IFFALSE 16957
16951: LD_INT 9
16953: DOUBLE
16954: LESSEQUAL
16955: IFTRUE 16959
16957: GO 17011
16959: POP
// begin bc_type := b_lab_half ;
16960: LD_ADDR_OWVAR 42
16964: PUSH
16965: LD_INT 7
16967: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16968: LD_ADDR_OWVAR 44
16972: PUSH
16973: LD_INT 10
16975: PUSH
16976: LD_INT 11
16978: PUSH
16979: LD_INT 12
16981: PUSH
16982: LD_INT 15
16984: PUSH
16985: LD_INT 14
16987: PUSH
16988: LD_INT 13
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: PUSH
16999: LD_VAR 0 2
17003: PUSH
17004: LD_INT 3
17006: MINUS
17007: ARRAY
17008: ST_TO_ADDR
// end ; 10 .. 13 :
17009: GO 17519
17011: LD_INT 10
17013: DOUBLE
17014: GREATEREQUAL
17015: IFFALSE 17023
17017: LD_INT 13
17019: DOUBLE
17020: LESSEQUAL
17021: IFTRUE 17025
17023: GO 17102
17025: POP
// begin bc_type := b_lab_full ;
17026: LD_ADDR_OWVAR 42
17030: PUSH
17031: LD_INT 8
17033: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17034: LD_ADDR_OWVAR 44
17038: PUSH
17039: LD_INT 10
17041: PUSH
17042: LD_INT 12
17044: PUSH
17045: LD_INT 14
17047: PUSH
17048: LD_INT 13
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: PUSH
17057: LD_VAR 0 2
17061: PUSH
17062: LD_INT 9
17064: MINUS
17065: ARRAY
17066: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17067: LD_ADDR_OWVAR 45
17071: PUSH
17072: LD_INT 11
17074: PUSH
17075: LD_INT 15
17077: PUSH
17078: LD_INT 12
17080: PUSH
17081: LD_INT 15
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: LD_VAR 0 2
17094: PUSH
17095: LD_INT 9
17097: MINUS
17098: ARRAY
17099: ST_TO_ADDR
// end ; 14 :
17100: GO 17519
17102: LD_INT 14
17104: DOUBLE
17105: EQUAL
17106: IFTRUE 17110
17108: GO 17121
17110: POP
// bc_type := b_workshop ; 15 :
17111: LD_ADDR_OWVAR 42
17115: PUSH
17116: LD_INT 2
17118: ST_TO_ADDR
17119: GO 17519
17121: LD_INT 15
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17140
17129: POP
// bc_type := b_factory ; 16 :
17130: LD_ADDR_OWVAR 42
17134: PUSH
17135: LD_INT 3
17137: ST_TO_ADDR
17138: GO 17519
17140: LD_INT 16
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17159
17148: POP
// bc_type := b_ext_gun ; 17 :
17149: LD_ADDR_OWVAR 42
17153: PUSH
17154: LD_INT 17
17156: ST_TO_ADDR
17157: GO 17519
17159: LD_INT 17
17161: DOUBLE
17162: EQUAL
17163: IFTRUE 17167
17165: GO 17195
17167: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17168: LD_ADDR_OWVAR 42
17172: PUSH
17173: LD_INT 19
17175: PUSH
17176: LD_INT 23
17178: PUSH
17179: LD_INT 19
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: PUSH
17187: LD_VAR 0 1
17191: ARRAY
17192: ST_TO_ADDR
17193: GO 17519
17195: LD_INT 18
17197: DOUBLE
17198: EQUAL
17199: IFTRUE 17203
17201: GO 17214
17203: POP
// bc_type := b_ext_radar ; 19 :
17204: LD_ADDR_OWVAR 42
17208: PUSH
17209: LD_INT 20
17211: ST_TO_ADDR
17212: GO 17519
17214: LD_INT 19
17216: DOUBLE
17217: EQUAL
17218: IFTRUE 17222
17220: GO 17233
17222: POP
// bc_type := b_ext_radio ; 20 :
17223: LD_ADDR_OWVAR 42
17227: PUSH
17228: LD_INT 22
17230: ST_TO_ADDR
17231: GO 17519
17233: LD_INT 20
17235: DOUBLE
17236: EQUAL
17237: IFTRUE 17241
17239: GO 17252
17241: POP
// bc_type := b_ext_siberium ; 21 :
17242: LD_ADDR_OWVAR 42
17246: PUSH
17247: LD_INT 21
17249: ST_TO_ADDR
17250: GO 17519
17252: LD_INT 21
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17260
17258: GO 17271
17260: POP
// bc_type := b_ext_computer ; 22 :
17261: LD_ADDR_OWVAR 42
17265: PUSH
17266: LD_INT 24
17268: ST_TO_ADDR
17269: GO 17519
17271: LD_INT 22
17273: DOUBLE
17274: EQUAL
17275: IFTRUE 17279
17277: GO 17290
17279: POP
// bc_type := b_ext_track ; 23 :
17280: LD_ADDR_OWVAR 42
17284: PUSH
17285: LD_INT 16
17287: ST_TO_ADDR
17288: GO 17519
17290: LD_INT 23
17292: DOUBLE
17293: EQUAL
17294: IFTRUE 17298
17296: GO 17309
17298: POP
// bc_type := b_ext_laser ; 24 :
17299: LD_ADDR_OWVAR 42
17303: PUSH
17304: LD_INT 25
17306: ST_TO_ADDR
17307: GO 17519
17309: LD_INT 24
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17328
17317: POP
// bc_type := b_control_tower ; 25 :
17318: LD_ADDR_OWVAR 42
17322: PUSH
17323: LD_INT 36
17325: ST_TO_ADDR
17326: GO 17519
17328: LD_INT 25
17330: DOUBLE
17331: EQUAL
17332: IFTRUE 17336
17334: GO 17347
17336: POP
// bc_type := b_breastwork ; 26 :
17337: LD_ADDR_OWVAR 42
17341: PUSH
17342: LD_INT 31
17344: ST_TO_ADDR
17345: GO 17519
17347: LD_INT 26
17349: DOUBLE
17350: EQUAL
17351: IFTRUE 17355
17353: GO 17366
17355: POP
// bc_type := b_bunker ; 27 :
17356: LD_ADDR_OWVAR 42
17360: PUSH
17361: LD_INT 32
17363: ST_TO_ADDR
17364: GO 17519
17366: LD_INT 27
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17374
17372: GO 17385
17374: POP
// bc_type := b_turret ; 28 :
17375: LD_ADDR_OWVAR 42
17379: PUSH
17380: LD_INT 33
17382: ST_TO_ADDR
17383: GO 17519
17385: LD_INT 28
17387: DOUBLE
17388: EQUAL
17389: IFTRUE 17393
17391: GO 17404
17393: POP
// bc_type := b_armoury ; 29 :
17394: LD_ADDR_OWVAR 42
17398: PUSH
17399: LD_INT 4
17401: ST_TO_ADDR
17402: GO 17519
17404: LD_INT 29
17406: DOUBLE
17407: EQUAL
17408: IFTRUE 17412
17410: GO 17423
17412: POP
// bc_type := b_barracks ; 30 :
17413: LD_ADDR_OWVAR 42
17417: PUSH
17418: LD_INT 5
17420: ST_TO_ADDR
17421: GO 17519
17423: LD_INT 30
17425: DOUBLE
17426: EQUAL
17427: IFTRUE 17431
17429: GO 17442
17431: POP
// bc_type := b_solar_power ; 31 :
17432: LD_ADDR_OWVAR 42
17436: PUSH
17437: LD_INT 27
17439: ST_TO_ADDR
17440: GO 17519
17442: LD_INT 31
17444: DOUBLE
17445: EQUAL
17446: IFTRUE 17450
17448: GO 17461
17450: POP
// bc_type := b_oil_power ; 32 :
17451: LD_ADDR_OWVAR 42
17455: PUSH
17456: LD_INT 26
17458: ST_TO_ADDR
17459: GO 17519
17461: LD_INT 32
17463: DOUBLE
17464: EQUAL
17465: IFTRUE 17469
17467: GO 17480
17469: POP
// bc_type := b_siberite_power ; 33 :
17470: LD_ADDR_OWVAR 42
17474: PUSH
17475: LD_INT 28
17477: ST_TO_ADDR
17478: GO 17519
17480: LD_INT 33
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17499
17488: POP
// bc_type := b_oil_mine ; 34 :
17489: LD_ADDR_OWVAR 42
17493: PUSH
17494: LD_INT 29
17496: ST_TO_ADDR
17497: GO 17519
17499: LD_INT 34
17501: DOUBLE
17502: EQUAL
17503: IFTRUE 17507
17505: GO 17518
17507: POP
// bc_type := b_siberite_mine ; end ;
17508: LD_ADDR_OWVAR 42
17512: PUSH
17513: LD_INT 30
17515: ST_TO_ADDR
17516: GO 17519
17518: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17519: LD_ADDR_VAR 0 8
17523: PUSH
17524: LD_VAR 0 5
17528: PPUSH
17529: LD_VAR 0 6
17533: PPUSH
17534: LD_VAR 0 3
17538: PPUSH
17539: CALL_OW 47
17543: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17544: LD_OWVAR 42
17548: PUSH
17549: LD_INT 32
17551: PUSH
17552: LD_INT 33
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: IN
17559: IFFALSE 17575
// PlaceWeaponTurret ( b , weapon ) ;
17561: LD_VAR 0 8
17565: PPUSH
17566: LD_VAR 0 4
17570: PPUSH
17571: CALL_OW 431
// end ;
17575: LD_VAR 0 7
17579: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17580: LD_INT 0
17582: PPUSH
17583: PPUSH
17584: PPUSH
17585: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17586: LD_ADDR_VAR 0 4
17590: PUSH
17591: LD_INT 22
17593: PUSH
17594: LD_OWVAR 2
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: LD_INT 30
17608: PUSH
17609: LD_INT 0
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 30
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if not tmp then
17640: LD_VAR 0 4
17644: NOT
17645: IFFALSE 17649
// exit ;
17647: GO 17708
// for i in tmp do
17649: LD_ADDR_VAR 0 2
17653: PUSH
17654: LD_VAR 0 4
17658: PUSH
17659: FOR_IN
17660: IFFALSE 17706
// for j = 1 to 3 do
17662: LD_ADDR_VAR 0 3
17666: PUSH
17667: DOUBLE
17668: LD_INT 1
17670: DEC
17671: ST_TO_ADDR
17672: LD_INT 3
17674: PUSH
17675: FOR_TO
17676: IFFALSE 17702
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: CALL_OW 274
17687: PPUSH
17688: LD_VAR 0 3
17692: PPUSH
17693: LD_INT 99999
17695: PPUSH
17696: CALL_OW 277
17700: GO 17675
17702: POP
17703: POP
17704: GO 17659
17706: POP
17707: POP
// end ;
17708: LD_VAR 0 1
17712: RET
// export function hHackSetLevel10 ; var i , j ; begin
17713: LD_INT 0
17715: PPUSH
17716: PPUSH
17717: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_INT 21
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: PUSH
17738: FOR_IN
17739: IFFALSE 17791
// if IsSelected ( i ) then
17741: LD_VAR 0 2
17745: PPUSH
17746: CALL_OW 306
17750: IFFALSE 17789
// begin for j := 1 to 4 do
17752: LD_ADDR_VAR 0 3
17756: PUSH
17757: DOUBLE
17758: LD_INT 1
17760: DEC
17761: ST_TO_ADDR
17762: LD_INT 4
17764: PUSH
17765: FOR_TO
17766: IFFALSE 17787
// SetSkill ( i , j , 10 ) ;
17768: LD_VAR 0 2
17772: PPUSH
17773: LD_VAR 0 3
17777: PPUSH
17778: LD_INT 10
17780: PPUSH
17781: CALL_OW 237
17785: GO 17765
17787: POP
17788: POP
// end ;
17789: GO 17738
17791: POP
17792: POP
// end ;
17793: LD_VAR 0 1
17797: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17798: LD_INT 0
17800: PPUSH
17801: PPUSH
17802: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17803: LD_ADDR_VAR 0 2
17807: PUSH
17808: LD_INT 22
17810: PUSH
17811: LD_OWVAR 2
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 21
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PPUSH
17834: CALL_OW 69
17838: PUSH
17839: FOR_IN
17840: IFFALSE 17881
// begin for j := 1 to 4 do
17842: LD_ADDR_VAR 0 3
17846: PUSH
17847: DOUBLE
17848: LD_INT 1
17850: DEC
17851: ST_TO_ADDR
17852: LD_INT 4
17854: PUSH
17855: FOR_TO
17856: IFFALSE 17877
// SetSkill ( i , j , 10 ) ;
17858: LD_VAR 0 2
17862: PPUSH
17863: LD_VAR 0 3
17867: PPUSH
17868: LD_INT 10
17870: PPUSH
17871: CALL_OW 237
17875: GO 17855
17877: POP
17878: POP
// end ;
17879: GO 17839
17881: POP
17882: POP
// end ;
17883: LD_VAR 0 1
17887: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17888: LD_INT 0
17890: PPUSH
// uc_side := your_side ;
17891: LD_ADDR_OWVAR 20
17895: PUSH
17896: LD_OWVAR 2
17900: ST_TO_ADDR
// uc_nation := nation ;
17901: LD_ADDR_OWVAR 21
17905: PUSH
17906: LD_VAR 0 1
17910: ST_TO_ADDR
// InitHc ;
17911: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17915: LD_INT 0
17917: PPUSH
17918: LD_VAR 0 2
17922: PPUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17932: LD_VAR 0 4
17936: PPUSH
17937: LD_VAR 0 5
17941: PPUSH
17942: CALL_OW 428
17946: PUSH
17947: LD_INT 0
17949: EQUAL
17950: IFFALSE 17974
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17952: CALL_OW 44
17956: PPUSH
17957: LD_VAR 0 4
17961: PPUSH
17962: LD_VAR 0 5
17966: PPUSH
17967: LD_INT 1
17969: PPUSH
17970: CALL_OW 48
// end ;
17974: LD_VAR 0 6
17978: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17979: LD_INT 0
17981: PPUSH
17982: PPUSH
// uc_side := your_side ;
17983: LD_ADDR_OWVAR 20
17987: PUSH
17988: LD_OWVAR 2
17992: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17993: LD_VAR 0 1
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: LD_INT 4
18009: PUSH
18010: LD_INT 5
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: IN
18020: IFFALSE 18032
// uc_nation := nation_american else
18022: LD_ADDR_OWVAR 21
18026: PUSH
18027: LD_INT 1
18029: ST_TO_ADDR
18030: GO 18075
// if chassis in [ 11 , 12 , 13 , 14 ] then
18032: LD_VAR 0 1
18036: PUSH
18037: LD_INT 11
18039: PUSH
18040: LD_INT 12
18042: PUSH
18043: LD_INT 13
18045: PUSH
18046: LD_INT 14
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: IN
18055: IFFALSE 18067
// uc_nation := nation_arabian else
18057: LD_ADDR_OWVAR 21
18061: PUSH
18062: LD_INT 2
18064: ST_TO_ADDR
18065: GO 18075
// uc_nation := nation_russian ;
18067: LD_ADDR_OWVAR 21
18071: PUSH
18072: LD_INT 3
18074: ST_TO_ADDR
// vc_chassis := chassis ;
18075: LD_ADDR_OWVAR 37
18079: PUSH
18080: LD_VAR 0 1
18084: ST_TO_ADDR
// vc_engine := engine ;
18085: LD_ADDR_OWVAR 39
18089: PUSH
18090: LD_VAR 0 2
18094: ST_TO_ADDR
// vc_control := control ;
18095: LD_ADDR_OWVAR 38
18099: PUSH
18100: LD_VAR 0 3
18104: ST_TO_ADDR
// vc_weapon := weapon ;
18105: LD_ADDR_OWVAR 40
18109: PUSH
18110: LD_VAR 0 4
18114: ST_TO_ADDR
// un := CreateVehicle ;
18115: LD_ADDR_VAR 0 8
18119: PUSH
18120: CALL_OW 45
18124: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18125: LD_VAR 0 8
18129: PPUSH
18130: LD_INT 0
18132: PPUSH
18133: LD_INT 5
18135: PPUSH
18136: CALL_OW 12
18140: PPUSH
18141: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18145: LD_VAR 0 8
18149: PPUSH
18150: LD_VAR 0 5
18154: PPUSH
18155: LD_VAR 0 6
18159: PPUSH
18160: LD_INT 1
18162: PPUSH
18163: CALL_OW 48
// end ;
18167: LD_VAR 0 7
18171: RET
// export hInvincible ; every 1 do
18172: GO 18174
18174: DISABLE
// hInvincible := [ ] ;
18175: LD_ADDR_EXP 83
18179: PUSH
18180: EMPTY
18181: ST_TO_ADDR
18182: END
// every 10 do var i ;
18183: GO 18185
18185: DISABLE
18186: LD_INT 0
18188: PPUSH
// begin enable ;
18189: ENABLE
// if not hInvincible then
18190: LD_EXP 83
18194: NOT
18195: IFFALSE 18199
// exit ;
18197: GO 18243
// for i in hInvincible do
18199: LD_ADDR_VAR 0 1
18203: PUSH
18204: LD_EXP 83
18208: PUSH
18209: FOR_IN
18210: IFFALSE 18241
// if GetLives ( i ) < 1000 then
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 256
18221: PUSH
18222: LD_INT 1000
18224: LESS
18225: IFFALSE 18239
// SetLives ( i , 1000 ) ;
18227: LD_VAR 0 1
18231: PPUSH
18232: LD_INT 1000
18234: PPUSH
18235: CALL_OW 234
18239: GO 18209
18241: POP
18242: POP
// end ;
18243: PPOPN 1
18245: END
// export function hHackInvincible ; var i ; begin
18246: LD_INT 0
18248: PPUSH
18249: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18250: LD_ADDR_VAR 0 2
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: LD_INT 21
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 21
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: PPUSH
18283: CALL_OW 69
18287: PUSH
18288: FOR_IN
18289: IFFALSE 18350
// if IsSelected ( i ) then
18291: LD_VAR 0 2
18295: PPUSH
18296: CALL_OW 306
18300: IFFALSE 18348
// begin if i in hInvincible then
18302: LD_VAR 0 2
18306: PUSH
18307: LD_EXP 83
18311: IN
18312: IFFALSE 18332
// hInvincible := hInvincible diff i else
18314: LD_ADDR_EXP 83
18318: PUSH
18319: LD_EXP 83
18323: PUSH
18324: LD_VAR 0 2
18328: DIFF
18329: ST_TO_ADDR
18330: GO 18348
// hInvincible := hInvincible union i ;
18332: LD_ADDR_EXP 83
18336: PUSH
18337: LD_EXP 83
18341: PUSH
18342: LD_VAR 0 2
18346: UNION
18347: ST_TO_ADDR
// end ;
18348: GO 18288
18350: POP
18351: POP
// end ;
18352: LD_VAR 0 1
18356: RET
// export function hHackInvisible ; var i , j ; begin
18357: LD_INT 0
18359: PPUSH
18360: PPUSH
18361: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18362: LD_ADDR_VAR 0 2
18366: PUSH
18367: LD_INT 21
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: PUSH
18382: FOR_IN
18383: IFFALSE 18407
// if IsSelected ( i ) then
18385: LD_VAR 0 2
18389: PPUSH
18390: CALL_OW 306
18394: IFFALSE 18405
// ComForceInvisible ( i ) ;
18396: LD_VAR 0 2
18400: PPUSH
18401: CALL_OW 496
18405: GO 18382
18407: POP
18408: POP
// end ;
18409: LD_VAR 0 1
18413: RET
// export function hHackChangeYourSide ; begin
18414: LD_INT 0
18416: PPUSH
// if your_side = 8 then
18417: LD_OWVAR 2
18421: PUSH
18422: LD_INT 8
18424: EQUAL
18425: IFFALSE 18437
// your_side := 0 else
18427: LD_ADDR_OWVAR 2
18431: PUSH
18432: LD_INT 0
18434: ST_TO_ADDR
18435: GO 18451
// your_side := your_side + 1 ;
18437: LD_ADDR_OWVAR 2
18441: PUSH
18442: LD_OWVAR 2
18446: PUSH
18447: LD_INT 1
18449: PLUS
18450: ST_TO_ADDR
// end ;
18451: LD_VAR 0 1
18455: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
// for i in all_units do
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: LD_OWVAR 3
18470: PUSH
18471: FOR_IN
18472: IFFALSE 18550
// if IsSelected ( i ) then
18474: LD_VAR 0 2
18478: PPUSH
18479: CALL_OW 306
18483: IFFALSE 18548
// begin j := GetSide ( i ) ;
18485: LD_ADDR_VAR 0 3
18489: PUSH
18490: LD_VAR 0 2
18494: PPUSH
18495: CALL_OW 255
18499: ST_TO_ADDR
// if j = 8 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 8
18507: EQUAL
18508: IFFALSE 18520
// j := 0 else
18510: LD_ADDR_VAR 0 3
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
18518: GO 18534
// j := j + 1 ;
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: LD_VAR 0 3
18529: PUSH
18530: LD_INT 1
18532: PLUS
18533: ST_TO_ADDR
// SetSide ( i , j ) ;
18534: LD_VAR 0 2
18538: PPUSH
18539: LD_VAR 0 3
18543: PPUSH
18544: CALL_OW 235
// end ;
18548: GO 18471
18550: POP
18551: POP
// end ;
18552: LD_VAR 0 1
18556: RET
// export function hHackFog ; begin
18557: LD_INT 0
18559: PPUSH
// FogOff ( true ) ;
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 344
// end ;
18567: LD_VAR 0 1
18571: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18572: LD_INT 0
18574: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_VAR 0 2
18584: PPUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: LD_INT 1
18592: PPUSH
18593: LD_INT 1
18595: PPUSH
18596: CALL_OW 483
// CenterOnXY ( x , y ) ;
18600: LD_VAR 0 2
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: CALL_OW 84
// end ; end_of_file
18614: LD_VAR 0 4
18618: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18619: LD_INT 0
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 264
18634: PUSH
18635: LD_EXP 11
18639: EQUAL
18640: IFFALSE 18712
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18642: LD_INT 68
18644: PPUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 255
18654: PPUSH
18655: CALL_OW 321
18659: PUSH
18660: LD_INT 2
18662: EQUAL
18663: IFFALSE 18675
// eff := 70 else
18665: LD_ADDR_VAR 0 4
18669: PUSH
18670: LD_INT 70
18672: ST_TO_ADDR
18673: GO 18683
// eff := 30 ;
18675: LD_ADDR_VAR 0 4
18679: PUSH
18680: LD_INT 30
18682: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 250
18692: PPUSH
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 251
18702: PPUSH
18703: LD_VAR 0 4
18707: PPUSH
18708: CALL_OW 495
// end ; end ;
18712: LD_VAR 0 2
18716: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18717: LD_INT 0
18719: PPUSH
// end ;
18720: LD_VAR 0 4
18724: RET
// export function SOS_Command ( cmd ) ; begin
18725: LD_INT 0
18727: PPUSH
// end ;
18728: LD_VAR 0 2
18732: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18733: LD_INT 0
18735: PPUSH
// end ;
18736: LD_VAR 0 6
18740: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18741: LD_INT 0
18743: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18744: LD_VAR 0 1
18748: PUSH
18749: LD_INT 250
18751: EQUAL
18752: PUSH
18753: LD_VAR 0 2
18757: PPUSH
18758: CALL_OW 264
18762: PUSH
18763: LD_EXP 14
18767: EQUAL
18768: AND
18769: IFFALSE 18790
// MinerPlaceMine ( unit , x , y ) ;
18771: LD_VAR 0 2
18775: PPUSH
18776: LD_VAR 0 4
18780: PPUSH
18781: LD_VAR 0 5
18785: PPUSH
18786: CALL 21139 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18790: LD_VAR 0 1
18794: PUSH
18795: LD_INT 251
18797: EQUAL
18798: PUSH
18799: LD_VAR 0 2
18803: PPUSH
18804: CALL_OW 264
18808: PUSH
18809: LD_EXP 14
18813: EQUAL
18814: AND
18815: IFFALSE 18836
// MinerDetonateMine ( unit , x , y ) ;
18817: LD_VAR 0 2
18821: PPUSH
18822: LD_VAR 0 4
18826: PPUSH
18827: LD_VAR 0 5
18831: PPUSH
18832: CALL 21416 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18836: LD_VAR 0 1
18840: PUSH
18841: LD_INT 252
18843: EQUAL
18844: PUSH
18845: LD_VAR 0 2
18849: PPUSH
18850: CALL_OW 264
18854: PUSH
18855: LD_EXP 14
18859: EQUAL
18860: AND
18861: IFFALSE 18882
// MinerCreateMinefield ( unit , x , y ) ;
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_VAR 0 4
18872: PPUSH
18873: LD_VAR 0 5
18877: PPUSH
18878: CALL 21833 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18882: LD_VAR 0 1
18886: PUSH
18887: LD_INT 253
18889: EQUAL
18890: PUSH
18891: LD_VAR 0 2
18895: PPUSH
18896: CALL_OW 257
18900: PUSH
18901: LD_INT 5
18903: EQUAL
18904: AND
18905: IFFALSE 18926
// ComBinocular ( unit , x , y ) ;
18907: LD_VAR 0 2
18911: PPUSH
18912: LD_VAR 0 4
18916: PPUSH
18917: LD_VAR 0 5
18921: PPUSH
18922: CALL 22204 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18926: LD_VAR 0 1
18930: PUSH
18931: LD_INT 254
18933: EQUAL
18934: PUSH
18935: LD_VAR 0 2
18939: PPUSH
18940: CALL_OW 264
18944: PUSH
18945: LD_EXP 9
18949: EQUAL
18950: AND
18951: PUSH
18952: LD_VAR 0 3
18956: PPUSH
18957: CALL_OW 263
18961: PUSH
18962: LD_INT 3
18964: EQUAL
18965: AND
18966: IFFALSE 18982
// HackDestroyVehicle ( unit , selectedUnit ) ;
18968: LD_VAR 0 2
18972: PPUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: CALL 20499 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18982: LD_VAR 0 1
18986: PUSH
18987: LD_INT 255
18989: EQUAL
18990: PUSH
18991: LD_VAR 0 2
18995: PPUSH
18996: CALL_OW 264
19000: PUSH
19001: LD_INT 14
19003: PUSH
19004: LD_INT 53
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: IN
19011: AND
19012: PUSH
19013: LD_VAR 0 4
19017: PPUSH
19018: LD_VAR 0 5
19022: PPUSH
19023: CALL_OW 488
19027: AND
19028: IFFALSE 19052
// CutTreeXYR ( unit , x , y , 12 ) ;
19030: LD_VAR 0 2
19034: PPUSH
19035: LD_VAR 0 4
19039: PPUSH
19040: LD_VAR 0 5
19044: PPUSH
19045: LD_INT 12
19047: PPUSH
19048: CALL 19065 0 4
// end ;
19052: LD_VAR 0 6
19056: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
19057: LD_INT 0
19059: PPUSH
// end ;
19060: LD_VAR 0 4
19064: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
19071: PPUSH
19072: PPUSH
19073: PPUSH
19074: PPUSH
19075: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19076: LD_VAR 0 1
19080: NOT
19081: PUSH
19082: LD_VAR 0 2
19086: PPUSH
19087: LD_VAR 0 3
19091: PPUSH
19092: CALL_OW 488
19096: NOT
19097: OR
19098: PUSH
19099: LD_VAR 0 4
19103: NOT
19104: OR
19105: IFFALSE 19109
// exit ;
19107: GO 19449
// list := [ ] ;
19109: LD_ADDR_VAR 0 13
19113: PUSH
19114: EMPTY
19115: ST_TO_ADDR
// if x - r < 0 then
19116: LD_VAR 0 2
19120: PUSH
19121: LD_VAR 0 4
19125: MINUS
19126: PUSH
19127: LD_INT 0
19129: LESS
19130: IFFALSE 19142
// min_x := 0 else
19132: LD_ADDR_VAR 0 7
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
19140: GO 19158
// min_x := x - r ;
19142: LD_ADDR_VAR 0 7
19146: PUSH
19147: LD_VAR 0 2
19151: PUSH
19152: LD_VAR 0 4
19156: MINUS
19157: ST_TO_ADDR
// if y - r < 0 then
19158: LD_VAR 0 3
19162: PUSH
19163: LD_VAR 0 4
19167: MINUS
19168: PUSH
19169: LD_INT 0
19171: LESS
19172: IFFALSE 19184
// min_y := 0 else
19174: LD_ADDR_VAR 0 8
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
19182: GO 19200
// min_y := y - r ;
19184: LD_ADDR_VAR 0 8
19188: PUSH
19189: LD_VAR 0 3
19193: PUSH
19194: LD_VAR 0 4
19198: MINUS
19199: ST_TO_ADDR
// max_x := x + r ;
19200: LD_ADDR_VAR 0 9
19204: PUSH
19205: LD_VAR 0 2
19209: PUSH
19210: LD_VAR 0 4
19214: PLUS
19215: ST_TO_ADDR
// max_y := y + r ;
19216: LD_ADDR_VAR 0 10
19220: PUSH
19221: LD_VAR 0 3
19225: PUSH
19226: LD_VAR 0 4
19230: PLUS
19231: ST_TO_ADDR
// for _x = min_x to max_x do
19232: LD_ADDR_VAR 0 11
19236: PUSH
19237: DOUBLE
19238: LD_VAR 0 7
19242: DEC
19243: ST_TO_ADDR
19244: LD_VAR 0 9
19248: PUSH
19249: FOR_TO
19250: IFFALSE 19367
// for _y = min_y to max_y do
19252: LD_ADDR_VAR 0 12
19256: PUSH
19257: DOUBLE
19258: LD_VAR 0 8
19262: DEC
19263: ST_TO_ADDR
19264: LD_VAR 0 10
19268: PUSH
19269: FOR_TO
19270: IFFALSE 19363
// begin if not ValidHex ( _x , _y ) then
19272: LD_VAR 0 11
19276: PPUSH
19277: LD_VAR 0 12
19281: PPUSH
19282: CALL_OW 488
19286: NOT
19287: IFFALSE 19291
// continue ;
19289: GO 19269
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19291: LD_VAR 0 11
19295: PPUSH
19296: LD_VAR 0 12
19300: PPUSH
19301: CALL_OW 351
19305: PUSH
19306: LD_VAR 0 11
19310: PPUSH
19311: LD_VAR 0 12
19315: PPUSH
19316: CALL_OW 554
19320: AND
19321: IFFALSE 19361
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19323: LD_ADDR_VAR 0 13
19327: PUSH
19328: LD_VAR 0 13
19332: PPUSH
19333: LD_VAR 0 13
19337: PUSH
19338: LD_INT 1
19340: PLUS
19341: PPUSH
19342: LD_VAR 0 11
19346: PUSH
19347: LD_VAR 0 12
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PPUSH
19356: CALL_OW 2
19360: ST_TO_ADDR
// end ;
19361: GO 19269
19363: POP
19364: POP
19365: GO 19249
19367: POP
19368: POP
// if not list then
19369: LD_VAR 0 13
19373: NOT
19374: IFFALSE 19378
// exit ;
19376: GO 19449
// for i in list do
19378: LD_ADDR_VAR 0 6
19382: PUSH
19383: LD_VAR 0 13
19387: PUSH
19388: FOR_IN
19389: IFFALSE 19447
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19391: LD_VAR 0 1
19395: PPUSH
19396: LD_STRING M
19398: PUSH
19399: LD_VAR 0 6
19403: PUSH
19404: LD_INT 1
19406: ARRAY
19407: PUSH
19408: LD_VAR 0 6
19412: PUSH
19413: LD_INT 2
19415: ARRAY
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: PPUSH
19441: CALL_OW 447
19445: GO 19388
19447: POP
19448: POP
// end ;
19449: LD_VAR 0 5
19453: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19454: LD_EXP 86
19458: NOT
19459: IFFALSE 19509
19461: GO 19463
19463: DISABLE
// begin initHack := true ;
19464: LD_ADDR_EXP 86
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// hackTanks := [ ] ;
19472: LD_ADDR_EXP 87
19476: PUSH
19477: EMPTY
19478: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19479: LD_ADDR_EXP 88
19483: PUSH
19484: EMPTY
19485: ST_TO_ADDR
// hackLimit := 3 ;
19486: LD_ADDR_EXP 89
19490: PUSH
19491: LD_INT 3
19493: ST_TO_ADDR
// hackDist := 12 ;
19494: LD_ADDR_EXP 90
19498: PUSH
19499: LD_INT 12
19501: ST_TO_ADDR
// hackCounter := [ ] ;
19502: LD_ADDR_EXP 91
19506: PUSH
19507: EMPTY
19508: ST_TO_ADDR
// end ;
19509: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19510: LD_EXP 86
19514: PUSH
19515: LD_INT 34
19517: PUSH
19518: LD_EXP 9
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: AND
19532: IFFALSE 19787
19534: GO 19536
19536: DISABLE
19537: LD_INT 0
19539: PPUSH
19540: PPUSH
// begin enable ;
19541: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19542: LD_ADDR_VAR 0 1
19546: PUSH
19547: LD_INT 34
19549: PUSH
19550: LD_EXP 9
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PPUSH
19559: CALL_OW 69
19563: PUSH
19564: FOR_IN
19565: IFFALSE 19785
// begin if not i in hackTanks then
19567: LD_VAR 0 1
19571: PUSH
19572: LD_EXP 87
19576: IN
19577: NOT
19578: IFFALSE 19661
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19580: LD_ADDR_EXP 87
19584: PUSH
19585: LD_EXP 87
19589: PPUSH
19590: LD_EXP 87
19594: PUSH
19595: LD_INT 1
19597: PLUS
19598: PPUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 1
19608: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19609: LD_ADDR_EXP 88
19613: PUSH
19614: LD_EXP 88
19618: PPUSH
19619: LD_EXP 88
19623: PUSH
19624: LD_INT 1
19626: PLUS
19627: PPUSH
19628: EMPTY
19629: PPUSH
19630: CALL_OW 1
19634: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19635: LD_ADDR_EXP 91
19639: PUSH
19640: LD_EXP 91
19644: PPUSH
19645: LD_EXP 91
19649: PUSH
19650: LD_INT 1
19652: PLUS
19653: PPUSH
19654: EMPTY
19655: PPUSH
19656: CALL_OW 1
19660: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 302
19670: NOT
19671: IFFALSE 19684
// begin HackUnlinkAll ( i ) ;
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL 19790 0 1
// continue ;
19682: GO 19564
// end ; HackCheckCapturedStatus ( i ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL 20233 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19693: LD_ADDR_VAR 0 2
19697: PUSH
19698: LD_INT 81
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 255
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 33
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 91
19727: PUSH
19728: LD_VAR 0 1
19732: PUSH
19733: LD_EXP 90
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 50
19745: PUSH
19746: EMPTY
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: PPUSH
19755: CALL_OW 69
19759: ST_TO_ADDR
// if not tmp then
19760: LD_VAR 0 2
19764: NOT
19765: IFFALSE 19769
// continue ;
19767: GO 19564
// HackLink ( i , tmp ) ;
19769: LD_VAR 0 1
19773: PPUSH
19774: LD_VAR 0 2
19778: PPUSH
19779: CALL 19926 0 2
// end ;
19783: GO 19564
19785: POP
19786: POP
// end ;
19787: PPOPN 2
19789: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19790: LD_INT 0
19792: PPUSH
19793: PPUSH
19794: PPUSH
// if not hack in hackTanks then
19795: LD_VAR 0 1
19799: PUSH
19800: LD_EXP 87
19804: IN
19805: NOT
19806: IFFALSE 19810
// exit ;
19808: GO 19921
// index := GetElementIndex ( hackTanks , hack ) ;
19810: LD_ADDR_VAR 0 4
19814: PUSH
19815: LD_EXP 87
19819: PPUSH
19820: LD_VAR 0 1
19824: PPUSH
19825: CALL 27395 0 2
19829: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19830: LD_EXP 88
19834: PUSH
19835: LD_VAR 0 4
19839: ARRAY
19840: IFFALSE 19921
// begin for i in hackTanksCaptured [ index ] do
19842: LD_ADDR_VAR 0 3
19846: PUSH
19847: LD_EXP 88
19851: PUSH
19852: LD_VAR 0 4
19856: ARRAY
19857: PUSH
19858: FOR_IN
19859: IFFALSE 19885
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 1
19868: ARRAY
19869: PPUSH
19870: LD_VAR 0 3
19874: PUSH
19875: LD_INT 2
19877: ARRAY
19878: PPUSH
19879: CALL_OW 235
19883: GO 19858
19885: POP
19886: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19887: LD_ADDR_EXP 88
19891: PUSH
19892: LD_EXP 88
19896: PPUSH
19897: LD_VAR 0 4
19901: PPUSH
19902: EMPTY
19903: PPUSH
19904: CALL_OW 1
19908: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_INT 0
19916: PPUSH
19917: CALL_OW 505
// end ; end ;
19921: LD_VAR 0 2
19925: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19926: LD_INT 0
19928: PPUSH
19929: PPUSH
19930: PPUSH
// if not hack in hackTanks or not vehicles then
19931: LD_VAR 0 1
19935: PUSH
19936: LD_EXP 87
19940: IN
19941: NOT
19942: PUSH
19943: LD_VAR 0 2
19947: NOT
19948: OR
19949: IFFALSE 19953
// exit ;
19951: GO 20228
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19953: LD_ADDR_VAR 0 2
19957: PUSH
19958: LD_VAR 0 1
19962: PPUSH
19963: LD_VAR 0 2
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: LD_INT 1
19973: PPUSH
19974: CALL 28045 0 4
19978: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19979: LD_ADDR_VAR 0 5
19983: PUSH
19984: LD_EXP 87
19988: PPUSH
19989: LD_VAR 0 1
19993: PPUSH
19994: CALL 27395 0 2
19998: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19999: LD_EXP 88
20003: PUSH
20004: LD_VAR 0 5
20008: ARRAY
20009: PUSH
20010: LD_EXP 89
20014: LESS
20015: IFFALSE 20204
// begin for i := 1 to vehicles do
20017: LD_ADDR_VAR 0 4
20021: PUSH
20022: DOUBLE
20023: LD_INT 1
20025: DEC
20026: ST_TO_ADDR
20027: LD_VAR 0 2
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20202
// begin if hackTanksCaptured [ index ] = hackLimit then
20035: LD_EXP 88
20039: PUSH
20040: LD_VAR 0 5
20044: ARRAY
20045: PUSH
20046: LD_EXP 89
20050: EQUAL
20051: IFFALSE 20055
// break ;
20053: GO 20202
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20055: LD_ADDR_EXP 91
20059: PUSH
20060: LD_EXP 91
20064: PPUSH
20065: LD_VAR 0 5
20069: PPUSH
20070: LD_EXP 91
20074: PUSH
20075: LD_VAR 0 5
20079: ARRAY
20080: PUSH
20081: LD_INT 1
20083: PLUS
20084: PPUSH
20085: CALL_OW 1
20089: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20090: LD_ADDR_EXP 88
20094: PUSH
20095: LD_EXP 88
20099: PPUSH
20100: LD_VAR 0 5
20104: PUSH
20105: LD_EXP 88
20109: PUSH
20110: LD_VAR 0 5
20114: ARRAY
20115: PUSH
20116: LD_INT 1
20118: PLUS
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PPUSH
20124: LD_VAR 0 2
20128: PUSH
20129: LD_VAR 0 4
20133: ARRAY
20134: PUSH
20135: LD_VAR 0 2
20139: PUSH
20140: LD_VAR 0 4
20144: ARRAY
20145: PPUSH
20146: CALL_OW 255
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PPUSH
20155: CALL 27610 0 3
20159: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20160: LD_VAR 0 2
20164: PUSH
20165: LD_VAR 0 4
20169: ARRAY
20170: PPUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 255
20180: PPUSH
20181: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20185: LD_VAR 0 2
20189: PUSH
20190: LD_VAR 0 4
20194: ARRAY
20195: PPUSH
20196: CALL_OW 141
// end ;
20200: GO 20032
20202: POP
20203: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20204: LD_VAR 0 1
20208: PPUSH
20209: LD_EXP 88
20213: PUSH
20214: LD_VAR 0 5
20218: ARRAY
20219: PUSH
20220: LD_INT 0
20222: PLUS
20223: PPUSH
20224: CALL_OW 505
// end ;
20228: LD_VAR 0 3
20232: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20233: LD_INT 0
20235: PPUSH
20236: PPUSH
20237: PPUSH
20238: PPUSH
// if not hack in hackTanks then
20239: LD_VAR 0 1
20243: PUSH
20244: LD_EXP 87
20248: IN
20249: NOT
20250: IFFALSE 20254
// exit ;
20252: GO 20494
// index := GetElementIndex ( hackTanks , hack ) ;
20254: LD_ADDR_VAR 0 4
20258: PUSH
20259: LD_EXP 87
20263: PPUSH
20264: LD_VAR 0 1
20268: PPUSH
20269: CALL 27395 0 2
20273: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20274: LD_ADDR_VAR 0 3
20278: PUSH
20279: DOUBLE
20280: LD_EXP 88
20284: PUSH
20285: LD_VAR 0 4
20289: ARRAY
20290: INC
20291: ST_TO_ADDR
20292: LD_INT 1
20294: PUSH
20295: FOR_DOWNTO
20296: IFFALSE 20468
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20298: LD_ADDR_VAR 0 5
20302: PUSH
20303: LD_EXP 88
20307: PUSH
20308: LD_VAR 0 4
20312: ARRAY
20313: PUSH
20314: LD_VAR 0 3
20318: ARRAY
20319: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20320: LD_VAR 0 5
20324: PUSH
20325: LD_INT 1
20327: ARRAY
20328: PPUSH
20329: CALL_OW 302
20333: NOT
20334: PUSH
20335: LD_VAR 0 5
20339: PUSH
20340: LD_INT 1
20342: ARRAY
20343: PPUSH
20344: CALL_OW 255
20348: PUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 255
20358: NONEQUAL
20359: OR
20360: IFFALSE 20466
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20362: LD_VAR 0 5
20366: PUSH
20367: LD_INT 1
20369: ARRAY
20370: PPUSH
20371: CALL_OW 305
20375: PUSH
20376: LD_VAR 0 5
20380: PUSH
20381: LD_INT 1
20383: ARRAY
20384: PPUSH
20385: CALL_OW 255
20389: PUSH
20390: LD_VAR 0 1
20394: PPUSH
20395: CALL_OW 255
20399: EQUAL
20400: AND
20401: IFFALSE 20425
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20403: LD_VAR 0 5
20407: PUSH
20408: LD_INT 1
20410: ARRAY
20411: PPUSH
20412: LD_VAR 0 5
20416: PUSH
20417: LD_INT 2
20419: ARRAY
20420: PPUSH
20421: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20425: LD_ADDR_EXP 88
20429: PUSH
20430: LD_EXP 88
20434: PPUSH
20435: LD_VAR 0 4
20439: PPUSH
20440: LD_EXP 88
20444: PUSH
20445: LD_VAR 0 4
20449: ARRAY
20450: PPUSH
20451: LD_VAR 0 3
20455: PPUSH
20456: CALL_OW 3
20460: PPUSH
20461: CALL_OW 1
20465: ST_TO_ADDR
// end ; end ;
20466: GO 20295
20468: POP
20469: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20470: LD_VAR 0 1
20474: PPUSH
20475: LD_EXP 88
20479: PUSH
20480: LD_VAR 0 4
20484: ARRAY
20485: PUSH
20486: LD_INT 0
20488: PLUS
20489: PPUSH
20490: CALL_OW 505
// end ;
20494: LD_VAR 0 2
20498: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20499: LD_INT 0
20501: PPUSH
20502: PPUSH
20503: PPUSH
20504: PPUSH
// if not hack in hackTanks then
20505: LD_VAR 0 1
20509: PUSH
20510: LD_EXP 87
20514: IN
20515: NOT
20516: IFFALSE 20520
// exit ;
20518: GO 20605
// index := GetElementIndex ( hackTanks , hack ) ;
20520: LD_ADDR_VAR 0 5
20524: PUSH
20525: LD_EXP 87
20529: PPUSH
20530: LD_VAR 0 1
20534: PPUSH
20535: CALL 27395 0 2
20539: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20540: LD_ADDR_VAR 0 4
20544: PUSH
20545: DOUBLE
20546: LD_INT 1
20548: DEC
20549: ST_TO_ADDR
20550: LD_EXP 88
20554: PUSH
20555: LD_VAR 0 5
20559: ARRAY
20560: PUSH
20561: FOR_TO
20562: IFFALSE 20603
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20564: LD_EXP 88
20568: PUSH
20569: LD_VAR 0 5
20573: ARRAY
20574: PUSH
20575: LD_VAR 0 4
20579: ARRAY
20580: PUSH
20581: LD_INT 1
20583: ARRAY
20584: PUSH
20585: LD_VAR 0 2
20589: EQUAL
20590: IFFALSE 20601
// KillUnit ( vehicle ) ;
20592: LD_VAR 0 2
20596: PPUSH
20597: CALL_OW 66
20601: GO 20561
20603: POP
20604: POP
// end ;
20605: LD_VAR 0 3
20609: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20610: LD_EXP 92
20614: NOT
20615: IFFALSE 20650
20617: GO 20619
20619: DISABLE
// begin initMiner := true ;
20620: LD_ADDR_EXP 92
20624: PUSH
20625: LD_INT 1
20627: ST_TO_ADDR
// minersList := [ ] ;
20628: LD_ADDR_EXP 93
20632: PUSH
20633: EMPTY
20634: ST_TO_ADDR
// minerMinesList := [ ] ;
20635: LD_ADDR_EXP 94
20639: PUSH
20640: EMPTY
20641: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20642: LD_ADDR_EXP 95
20646: PUSH
20647: LD_INT 5
20649: ST_TO_ADDR
// end ;
20650: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20651: LD_EXP 92
20655: PUSH
20656: LD_INT 34
20658: PUSH
20659: LD_EXP 14
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PPUSH
20668: CALL_OW 69
20672: AND
20673: IFFALSE 21136
20675: GO 20677
20677: DISABLE
20678: LD_INT 0
20680: PPUSH
20681: PPUSH
20682: PPUSH
20683: PPUSH
// begin enable ;
20684: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20685: LD_ADDR_VAR 0 1
20689: PUSH
20690: LD_INT 34
20692: PUSH
20693: LD_EXP 14
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PPUSH
20702: CALL_OW 69
20706: PUSH
20707: FOR_IN
20708: IFFALSE 20780
// begin if not i in minersList then
20710: LD_VAR 0 1
20714: PUSH
20715: LD_EXP 93
20719: IN
20720: NOT
20721: IFFALSE 20778
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20723: LD_ADDR_EXP 93
20727: PUSH
20728: LD_EXP 93
20732: PPUSH
20733: LD_EXP 93
20737: PUSH
20738: LD_INT 1
20740: PLUS
20741: PPUSH
20742: LD_VAR 0 1
20746: PPUSH
20747: CALL_OW 1
20751: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20752: LD_ADDR_EXP 94
20756: PUSH
20757: LD_EXP 94
20761: PPUSH
20762: LD_EXP 94
20766: PUSH
20767: LD_INT 1
20769: PLUS
20770: PPUSH
20771: EMPTY
20772: PPUSH
20773: CALL_OW 1
20777: ST_TO_ADDR
// end end ;
20778: GO 20707
20780: POP
20781: POP
// for i := minerMinesList downto 1 do
20782: LD_ADDR_VAR 0 1
20786: PUSH
20787: DOUBLE
20788: LD_EXP 94
20792: INC
20793: ST_TO_ADDR
20794: LD_INT 1
20796: PUSH
20797: FOR_DOWNTO
20798: IFFALSE 21134
// begin if IsLive ( minersList [ i ] ) then
20800: LD_EXP 93
20804: PUSH
20805: LD_VAR 0 1
20809: ARRAY
20810: PPUSH
20811: CALL_OW 300
20815: IFFALSE 20843
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20817: LD_EXP 93
20821: PUSH
20822: LD_VAR 0 1
20826: ARRAY
20827: PPUSH
20828: LD_EXP 94
20832: PUSH
20833: LD_VAR 0 1
20837: ARRAY
20838: PPUSH
20839: CALL_OW 505
// if not minerMinesList [ i ] then
20843: LD_EXP 94
20847: PUSH
20848: LD_VAR 0 1
20852: ARRAY
20853: NOT
20854: IFFALSE 20858
// continue ;
20856: GO 20797
// for j := minerMinesList [ i ] downto 1 do
20858: LD_ADDR_VAR 0 2
20862: PUSH
20863: DOUBLE
20864: LD_EXP 94
20868: PUSH
20869: LD_VAR 0 1
20873: ARRAY
20874: INC
20875: ST_TO_ADDR
20876: LD_INT 1
20878: PUSH
20879: FOR_DOWNTO
20880: IFFALSE 21130
// begin side := GetSide ( minersList [ i ] ) ;
20882: LD_ADDR_VAR 0 3
20886: PUSH
20887: LD_EXP 93
20891: PUSH
20892: LD_VAR 0 1
20896: ARRAY
20897: PPUSH
20898: CALL_OW 255
20902: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20903: LD_ADDR_VAR 0 4
20907: PUSH
20908: LD_EXP 94
20912: PUSH
20913: LD_VAR 0 1
20917: ARRAY
20918: PUSH
20919: LD_VAR 0 2
20923: ARRAY
20924: PUSH
20925: LD_INT 1
20927: ARRAY
20928: PPUSH
20929: LD_EXP 94
20933: PUSH
20934: LD_VAR 0 1
20938: ARRAY
20939: PUSH
20940: LD_VAR 0 2
20944: ARRAY
20945: PUSH
20946: LD_INT 2
20948: ARRAY
20949: PPUSH
20950: CALL_OW 428
20954: ST_TO_ADDR
// if not tmp then
20955: LD_VAR 0 4
20959: NOT
20960: IFFALSE 20964
// continue ;
20962: GO 20879
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20964: LD_VAR 0 4
20968: PUSH
20969: LD_INT 81
20971: PUSH
20972: LD_VAR 0 3
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: IN
20986: PUSH
20987: LD_EXP 94
20991: PUSH
20992: LD_VAR 0 1
20996: ARRAY
20997: PUSH
20998: LD_VAR 0 2
21002: ARRAY
21003: PUSH
21004: LD_INT 1
21006: ARRAY
21007: PPUSH
21008: LD_EXP 94
21012: PUSH
21013: LD_VAR 0 1
21017: ARRAY
21018: PUSH
21019: LD_VAR 0 2
21023: ARRAY
21024: PUSH
21025: LD_INT 2
21027: ARRAY
21028: PPUSH
21029: CALL_OW 458
21033: AND
21034: IFFALSE 21128
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21036: LD_EXP 94
21040: PUSH
21041: LD_VAR 0 1
21045: ARRAY
21046: PUSH
21047: LD_VAR 0 2
21051: ARRAY
21052: PUSH
21053: LD_INT 1
21055: ARRAY
21056: PPUSH
21057: LD_EXP 94
21061: PUSH
21062: LD_VAR 0 1
21066: ARRAY
21067: PUSH
21068: LD_VAR 0 2
21072: ARRAY
21073: PUSH
21074: LD_INT 2
21076: ARRAY
21077: PPUSH
21078: LD_VAR 0 3
21082: PPUSH
21083: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21087: LD_ADDR_EXP 94
21091: PUSH
21092: LD_EXP 94
21096: PPUSH
21097: LD_VAR 0 1
21101: PPUSH
21102: LD_EXP 94
21106: PUSH
21107: LD_VAR 0 1
21111: ARRAY
21112: PPUSH
21113: LD_VAR 0 2
21117: PPUSH
21118: CALL_OW 3
21122: PPUSH
21123: CALL_OW 1
21127: ST_TO_ADDR
// end ; end ;
21128: GO 20879
21130: POP
21131: POP
// end ;
21132: GO 20797
21134: POP
21135: POP
// end ;
21136: PPOPN 4
21138: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21139: LD_INT 0
21141: PPUSH
21142: PPUSH
// result := false ;
21143: LD_ADDR_VAR 0 4
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21151: LD_VAR 0 1
21155: PPUSH
21156: CALL_OW 264
21160: PUSH
21161: LD_EXP 14
21165: EQUAL
21166: NOT
21167: IFFALSE 21171
// exit ;
21169: GO 21411
// index := GetElementIndex ( minersList , unit ) ;
21171: LD_ADDR_VAR 0 5
21175: PUSH
21176: LD_EXP 93
21180: PPUSH
21181: LD_VAR 0 1
21185: PPUSH
21186: CALL 27395 0 2
21190: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21191: LD_EXP 94
21195: PUSH
21196: LD_VAR 0 5
21200: ARRAY
21201: PUSH
21202: LD_EXP 95
21206: GREATEREQUAL
21207: IFFALSE 21211
// exit ;
21209: GO 21411
// ComMoveXY ( unit , x , y ) ;
21211: LD_VAR 0 1
21215: PPUSH
21216: LD_VAR 0 2
21220: PPUSH
21221: LD_VAR 0 3
21225: PPUSH
21226: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21230: LD_INT 35
21232: PPUSH
21233: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21237: LD_VAR 0 1
21241: PPUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: LD_VAR 0 3
21251: PPUSH
21252: CALL 58167 0 3
21256: NOT
21257: PUSH
21258: LD_VAR 0 1
21262: PPUSH
21263: CALL_OW 314
21267: AND
21268: IFFALSE 21272
// exit ;
21270: GO 21411
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_VAR 0 3
21281: PPUSH
21282: CALL_OW 428
21286: PUSH
21287: LD_VAR 0 1
21291: EQUAL
21292: PUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 314
21302: NOT
21303: AND
21304: IFFALSE 21230
// PlaySoundXY ( x , y , PlantMine ) ;
21306: LD_VAR 0 2
21310: PPUSH
21311: LD_VAR 0 3
21315: PPUSH
21316: LD_STRING PlantMine
21318: PPUSH
21319: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21323: LD_VAR 0 2
21327: PPUSH
21328: LD_VAR 0 3
21332: PPUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 255
21342: PPUSH
21343: LD_INT 0
21345: PPUSH
21346: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21350: LD_ADDR_EXP 94
21354: PUSH
21355: LD_EXP 94
21359: PPUSH
21360: LD_VAR 0 5
21364: PUSH
21365: LD_EXP 94
21369: PUSH
21370: LD_VAR 0 5
21374: ARRAY
21375: PUSH
21376: LD_INT 1
21378: PLUS
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PPUSH
21384: LD_VAR 0 2
21388: PUSH
21389: LD_VAR 0 3
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PPUSH
21398: CALL 27610 0 3
21402: ST_TO_ADDR
// result := true ;
21403: LD_ADDR_VAR 0 4
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// end ;
21411: LD_VAR 0 4
21415: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21416: LD_INT 0
21418: PPUSH
21419: PPUSH
21420: PPUSH
// if not unit in minersList then
21421: LD_VAR 0 1
21425: PUSH
21426: LD_EXP 93
21430: IN
21431: NOT
21432: IFFALSE 21436
// exit ;
21434: GO 21828
// index := GetElementIndex ( minersList , unit ) ;
21436: LD_ADDR_VAR 0 6
21440: PUSH
21441: LD_EXP 93
21445: PPUSH
21446: LD_VAR 0 1
21450: PPUSH
21451: CALL 27395 0 2
21455: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21456: LD_ADDR_VAR 0 5
21460: PUSH
21461: DOUBLE
21462: LD_EXP 94
21466: PUSH
21467: LD_VAR 0 6
21471: ARRAY
21472: INC
21473: ST_TO_ADDR
21474: LD_INT 1
21476: PUSH
21477: FOR_DOWNTO
21478: IFFALSE 21639
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21480: LD_EXP 94
21484: PUSH
21485: LD_VAR 0 6
21489: ARRAY
21490: PUSH
21491: LD_VAR 0 5
21495: ARRAY
21496: PUSH
21497: LD_INT 1
21499: ARRAY
21500: PUSH
21501: LD_VAR 0 2
21505: EQUAL
21506: PUSH
21507: LD_EXP 94
21511: PUSH
21512: LD_VAR 0 6
21516: ARRAY
21517: PUSH
21518: LD_VAR 0 5
21522: ARRAY
21523: PUSH
21524: LD_INT 2
21526: ARRAY
21527: PUSH
21528: LD_VAR 0 3
21532: EQUAL
21533: AND
21534: IFFALSE 21637
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21536: LD_EXP 94
21540: PUSH
21541: LD_VAR 0 6
21545: ARRAY
21546: PUSH
21547: LD_VAR 0 5
21551: ARRAY
21552: PUSH
21553: LD_INT 1
21555: ARRAY
21556: PPUSH
21557: LD_EXP 94
21561: PUSH
21562: LD_VAR 0 6
21566: ARRAY
21567: PUSH
21568: LD_VAR 0 5
21572: ARRAY
21573: PUSH
21574: LD_INT 2
21576: ARRAY
21577: PPUSH
21578: LD_VAR 0 1
21582: PPUSH
21583: CALL_OW 255
21587: PPUSH
21588: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21592: LD_ADDR_EXP 94
21596: PUSH
21597: LD_EXP 94
21601: PPUSH
21602: LD_VAR 0 6
21606: PPUSH
21607: LD_EXP 94
21611: PUSH
21612: LD_VAR 0 6
21616: ARRAY
21617: PPUSH
21618: LD_VAR 0 5
21622: PPUSH
21623: CALL_OW 3
21627: PPUSH
21628: CALL_OW 1
21632: ST_TO_ADDR
// exit ;
21633: POP
21634: POP
21635: GO 21828
// end ; end ;
21637: GO 21477
21639: POP
21640: POP
// for i := minerMinesList [ index ] downto 1 do
21641: LD_ADDR_VAR 0 5
21645: PUSH
21646: DOUBLE
21647: LD_EXP 94
21651: PUSH
21652: LD_VAR 0 6
21656: ARRAY
21657: INC
21658: ST_TO_ADDR
21659: LD_INT 1
21661: PUSH
21662: FOR_DOWNTO
21663: IFFALSE 21826
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21665: LD_EXP 94
21669: PUSH
21670: LD_VAR 0 6
21674: ARRAY
21675: PUSH
21676: LD_VAR 0 5
21680: ARRAY
21681: PUSH
21682: LD_INT 1
21684: ARRAY
21685: PPUSH
21686: LD_EXP 94
21690: PUSH
21691: LD_VAR 0 6
21695: ARRAY
21696: PUSH
21697: LD_VAR 0 5
21701: ARRAY
21702: PUSH
21703: LD_INT 2
21705: ARRAY
21706: PPUSH
21707: LD_VAR 0 2
21711: PPUSH
21712: LD_VAR 0 3
21716: PPUSH
21717: CALL_OW 298
21721: PUSH
21722: LD_INT 6
21724: LESS
21725: IFFALSE 21824
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21727: LD_EXP 94
21731: PUSH
21732: LD_VAR 0 6
21736: ARRAY
21737: PUSH
21738: LD_VAR 0 5
21742: ARRAY
21743: PUSH
21744: LD_INT 1
21746: ARRAY
21747: PPUSH
21748: LD_EXP 94
21752: PUSH
21753: LD_VAR 0 6
21757: ARRAY
21758: PUSH
21759: LD_VAR 0 5
21763: ARRAY
21764: PUSH
21765: LD_INT 2
21767: ARRAY
21768: PPUSH
21769: LD_VAR 0 1
21773: PPUSH
21774: CALL_OW 255
21778: PPUSH
21779: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21783: LD_ADDR_EXP 94
21787: PUSH
21788: LD_EXP 94
21792: PPUSH
21793: LD_VAR 0 6
21797: PPUSH
21798: LD_EXP 94
21802: PUSH
21803: LD_VAR 0 6
21807: ARRAY
21808: PPUSH
21809: LD_VAR 0 5
21813: PPUSH
21814: CALL_OW 3
21818: PPUSH
21819: CALL_OW 1
21823: ST_TO_ADDR
// end ; end ;
21824: GO 21662
21826: POP
21827: POP
// end ;
21828: LD_VAR 0 4
21832: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
21842: PPUSH
21843: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21844: LD_VAR 0 1
21848: PPUSH
21849: CALL_OW 264
21853: PUSH
21854: LD_EXP 14
21858: EQUAL
21859: NOT
21860: PUSH
21861: LD_VAR 0 1
21865: PUSH
21866: LD_EXP 93
21870: IN
21871: NOT
21872: OR
21873: IFFALSE 21877
// exit ;
21875: GO 22199
// index := GetElementIndex ( minersList , unit ) ;
21877: LD_ADDR_VAR 0 6
21881: PUSH
21882: LD_EXP 93
21886: PPUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL 27395 0 2
21896: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21897: LD_ADDR_VAR 0 8
21901: PUSH
21902: LD_EXP 95
21906: PUSH
21907: LD_EXP 94
21911: PUSH
21912: LD_VAR 0 6
21916: ARRAY
21917: MINUS
21918: ST_TO_ADDR
// if not minesFreeAmount then
21919: LD_VAR 0 8
21923: NOT
21924: IFFALSE 21928
// exit ;
21926: GO 22199
// tmp := [ ] ;
21928: LD_ADDR_VAR 0 7
21932: PUSH
21933: EMPTY
21934: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21935: LD_ADDR_VAR 0 5
21939: PUSH
21940: DOUBLE
21941: LD_INT 1
21943: DEC
21944: ST_TO_ADDR
21945: LD_VAR 0 8
21949: PUSH
21950: FOR_TO
21951: IFFALSE 22146
// begin _d := rand ( 0 , 5 ) ;
21953: LD_ADDR_VAR 0 11
21957: PUSH
21958: LD_INT 0
21960: PPUSH
21961: LD_INT 5
21963: PPUSH
21964: CALL_OW 12
21968: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21969: LD_ADDR_VAR 0 12
21973: PUSH
21974: LD_INT 2
21976: PPUSH
21977: LD_INT 6
21979: PPUSH
21980: CALL_OW 12
21984: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21985: LD_ADDR_VAR 0 9
21989: PUSH
21990: LD_VAR 0 2
21994: PPUSH
21995: LD_VAR 0 11
21999: PPUSH
22000: LD_VAR 0 12
22004: PPUSH
22005: CALL_OW 272
22009: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22010: LD_ADDR_VAR 0 10
22014: PUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: LD_VAR 0 11
22024: PPUSH
22025: LD_VAR 0 12
22029: PPUSH
22030: CALL_OW 273
22034: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22035: LD_VAR 0 9
22039: PPUSH
22040: LD_VAR 0 10
22044: PPUSH
22045: CALL_OW 488
22049: PUSH
22050: LD_VAR 0 9
22054: PUSH
22055: LD_VAR 0 10
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_VAR 0 7
22068: IN
22069: NOT
22070: AND
22071: PUSH
22072: LD_VAR 0 9
22076: PPUSH
22077: LD_VAR 0 10
22081: PPUSH
22082: CALL_OW 458
22086: NOT
22087: AND
22088: IFFALSE 22130
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22090: LD_ADDR_VAR 0 7
22094: PUSH
22095: LD_VAR 0 7
22099: PPUSH
22100: LD_VAR 0 7
22104: PUSH
22105: LD_INT 1
22107: PLUS
22108: PPUSH
22109: LD_VAR 0 9
22113: PUSH
22114: LD_VAR 0 10
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 1
22127: ST_TO_ADDR
22128: GO 22144
// i := i - 1 ;
22130: LD_ADDR_VAR 0 5
22134: PUSH
22135: LD_VAR 0 5
22139: PUSH
22140: LD_INT 1
22142: MINUS
22143: ST_TO_ADDR
// end ;
22144: GO 21950
22146: POP
22147: POP
// for i in tmp do
22148: LD_ADDR_VAR 0 5
22152: PUSH
22153: LD_VAR 0 7
22157: PUSH
22158: FOR_IN
22159: IFFALSE 22197
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22161: LD_VAR 0 1
22165: PPUSH
22166: LD_VAR 0 5
22170: PUSH
22171: LD_INT 1
22173: ARRAY
22174: PPUSH
22175: LD_VAR 0 5
22179: PUSH
22180: LD_INT 2
22182: ARRAY
22183: PPUSH
22184: CALL 21139 0 3
22188: NOT
22189: IFFALSE 22195
// exit ;
22191: POP
22192: POP
22193: GO 22199
22195: GO 22158
22197: POP
22198: POP
// end ;
22199: LD_VAR 0 4
22203: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
22208: PPUSH
22209: PPUSH
22210: PPUSH
22211: PPUSH
22212: PPUSH
// if not GetClass ( unit ) = class_sniper then
22213: LD_VAR 0 1
22217: PPUSH
22218: CALL_OW 257
22222: PUSH
22223: LD_INT 5
22225: EQUAL
22226: NOT
22227: IFFALSE 22231
// exit ;
22229: GO 22619
// dist := 8 ;
22231: LD_ADDR_VAR 0 5
22235: PUSH
22236: LD_INT 8
22238: ST_TO_ADDR
// viewRange := 12 ;
22239: LD_ADDR_VAR 0 7
22243: PUSH
22244: LD_INT 12
22246: ST_TO_ADDR
// side := GetSide ( unit ) ;
22247: LD_ADDR_VAR 0 6
22251: PUSH
22252: LD_VAR 0 1
22256: PPUSH
22257: CALL_OW 255
22261: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22262: LD_INT 61
22264: PPUSH
22265: LD_VAR 0 6
22269: PPUSH
22270: CALL_OW 321
22274: PUSH
22275: LD_INT 2
22277: EQUAL
22278: IFFALSE 22288
// viewRange := 16 ;
22280: LD_ADDR_VAR 0 7
22284: PUSH
22285: LD_INT 16
22287: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_VAR 0 2
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: CALL_OW 297
22307: PUSH
22308: LD_VAR 0 5
22312: GREATER
22313: IFFALSE 22392
// begin ComMoveXY ( unit , x , y ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: LD_VAR 0 2
22324: PPUSH
22325: LD_VAR 0 3
22329: PPUSH
22330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22334: LD_INT 35
22336: PPUSH
22337: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22341: LD_VAR 0 1
22345: PPUSH
22346: LD_VAR 0 2
22350: PPUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: CALL 58167 0 3
22360: NOT
22361: IFFALSE 22365
// exit ;
22363: GO 22619
// until GetDistUnitXY ( unit , x , y ) < dist ;
22365: LD_VAR 0 1
22369: PPUSH
22370: LD_VAR 0 2
22374: PPUSH
22375: LD_VAR 0 3
22379: PPUSH
22380: CALL_OW 297
22384: PUSH
22385: LD_VAR 0 5
22389: LESS
22390: IFFALSE 22334
// end ; ComTurnXY ( unit , x , y ) ;
22392: LD_VAR 0 1
22396: PPUSH
22397: LD_VAR 0 2
22401: PPUSH
22402: LD_VAR 0 3
22406: PPUSH
22407: CALL_OW 118
// wait ( 5 ) ;
22411: LD_INT 5
22413: PPUSH
22414: CALL_OW 67
// _d := GetDir ( unit ) ;
22418: LD_ADDR_VAR 0 10
22422: PUSH
22423: LD_VAR 0 1
22427: PPUSH
22428: CALL_OW 254
22432: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22433: LD_ADDR_VAR 0 8
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 250
22447: PPUSH
22448: LD_VAR 0 10
22452: PPUSH
22453: LD_VAR 0 5
22457: PPUSH
22458: CALL_OW 272
22462: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22463: LD_ADDR_VAR 0 9
22467: PUSH
22468: LD_VAR 0 1
22472: PPUSH
22473: CALL_OW 251
22477: PPUSH
22478: LD_VAR 0 10
22482: PPUSH
22483: LD_VAR 0 5
22487: PPUSH
22488: CALL_OW 273
22492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22493: LD_VAR 0 8
22497: PPUSH
22498: LD_VAR 0 9
22502: PPUSH
22503: CALL_OW 488
22507: NOT
22508: IFFALSE 22512
// exit ;
22510: GO 22619
// ComAnimCustom ( unit , 1 ) ;
22512: LD_VAR 0 1
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22524: LD_VAR 0 8
22528: PPUSH
22529: LD_VAR 0 9
22533: PPUSH
22534: LD_VAR 0 6
22538: PPUSH
22539: LD_VAR 0 7
22543: PPUSH
22544: CALL_OW 330
// repeat wait ( 1 ) ;
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22555: LD_VAR 0 1
22559: PPUSH
22560: CALL_OW 316
22564: PUSH
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL_OW 314
22574: OR
22575: PUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: CALL_OW 302
22585: NOT
22586: OR
22587: PUSH
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 301
22597: OR
22598: IFFALSE 22548
// RemoveSeeing ( _x , _y , side ) ;
22600: LD_VAR 0 8
22604: PPUSH
22605: LD_VAR 0 9
22609: PPUSH
22610: LD_VAR 0 6
22614: PPUSH
22615: CALL_OW 331
// end ; end_of_file
22619: LD_VAR 0 4
22623: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22624: LD_INT 0
22626: PPUSH
22627: PPUSH
// if exist_mode then
22628: LD_VAR 0 2
22632: IFFALSE 22657
// unit := CreateCharacter ( prefix & ident ) else
22634: LD_ADDR_VAR 0 5
22638: PUSH
22639: LD_VAR 0 3
22643: PUSH
22644: LD_VAR 0 1
22648: STR
22649: PPUSH
22650: CALL_OW 34
22654: ST_TO_ADDR
22655: GO 22672
// unit := NewCharacter ( ident ) ;
22657: LD_ADDR_VAR 0 5
22661: PUSH
22662: LD_VAR 0 1
22666: PPUSH
22667: CALL_OW 25
22671: ST_TO_ADDR
// result := unit ;
22672: LD_ADDR_VAR 0 4
22676: PUSH
22677: LD_VAR 0 5
22681: ST_TO_ADDR
// end ;
22682: LD_VAR 0 4
22686: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22687: LD_INT 0
22689: PPUSH
22690: PPUSH
// if not side or not nation then
22691: LD_VAR 0 1
22695: NOT
22696: PUSH
22697: LD_VAR 0 2
22701: NOT
22702: OR
22703: IFFALSE 22707
// exit ;
22705: GO 23475
// case nation of nation_american :
22707: LD_VAR 0 2
22711: PUSH
22712: LD_INT 1
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 22934
22720: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22721: LD_ADDR_VAR 0 4
22725: PUSH
22726: LD_INT 35
22728: PUSH
22729: LD_INT 45
22731: PUSH
22732: LD_INT 46
22734: PUSH
22735: LD_INT 47
22737: PUSH
22738: LD_INT 82
22740: PUSH
22741: LD_INT 83
22743: PUSH
22744: LD_INT 84
22746: PUSH
22747: LD_INT 85
22749: PUSH
22750: LD_INT 86
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 6
22761: PUSH
22762: LD_INT 15
22764: PUSH
22765: LD_INT 16
22767: PUSH
22768: LD_INT 7
22770: PUSH
22771: LD_INT 12
22773: PUSH
22774: LD_INT 13
22776: PUSH
22777: LD_INT 10
22779: PUSH
22780: LD_INT 14
22782: PUSH
22783: LD_INT 20
22785: PUSH
22786: LD_INT 21
22788: PUSH
22789: LD_INT 22
22791: PUSH
22792: LD_INT 25
22794: PUSH
22795: LD_INT 32
22797: PUSH
22798: LD_INT 27
22800: PUSH
22801: LD_INT 36
22803: PUSH
22804: LD_INT 69
22806: PUSH
22807: LD_INT 39
22809: PUSH
22810: LD_INT 34
22812: PUSH
22813: LD_INT 40
22815: PUSH
22816: LD_INT 48
22818: PUSH
22819: LD_INT 49
22821: PUSH
22822: LD_INT 50
22824: PUSH
22825: LD_INT 51
22827: PUSH
22828: LD_INT 52
22830: PUSH
22831: LD_INT 53
22833: PUSH
22834: LD_INT 54
22836: PUSH
22837: LD_INT 55
22839: PUSH
22840: LD_INT 56
22842: PUSH
22843: LD_INT 57
22845: PUSH
22846: LD_INT 58
22848: PUSH
22849: LD_INT 59
22851: PUSH
22852: LD_INT 60
22854: PUSH
22855: LD_INT 61
22857: PUSH
22858: LD_INT 62
22860: PUSH
22861: LD_INT 80
22863: PUSH
22864: LD_INT 82
22866: PUSH
22867: LD_INT 83
22869: PUSH
22870: LD_INT 84
22872: PUSH
22873: LD_INT 85
22875: PUSH
22876: LD_INT 86
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
22932: GO 23399
22934: LD_INT 2
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 23168
22942: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22943: LD_ADDR_VAR 0 4
22947: PUSH
22948: LD_INT 35
22950: PUSH
22951: LD_INT 45
22953: PUSH
22954: LD_INT 46
22956: PUSH
22957: LD_INT 47
22959: PUSH
22960: LD_INT 82
22962: PUSH
22963: LD_INT 83
22965: PUSH
22966: LD_INT 84
22968: PUSH
22969: LD_INT 85
22971: PUSH
22972: LD_INT 87
22974: PUSH
22975: LD_INT 70
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 11
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: LD_INT 4
22989: PUSH
22990: LD_INT 5
22992: PUSH
22993: LD_INT 6
22995: PUSH
22996: LD_INT 15
22998: PUSH
22999: LD_INT 18
23001: PUSH
23002: LD_INT 7
23004: PUSH
23005: LD_INT 17
23007: PUSH
23008: LD_INT 8
23010: PUSH
23011: LD_INT 20
23013: PUSH
23014: LD_INT 21
23016: PUSH
23017: LD_INT 22
23019: PUSH
23020: LD_INT 72
23022: PUSH
23023: LD_INT 26
23025: PUSH
23026: LD_INT 69
23028: PUSH
23029: LD_INT 39
23031: PUSH
23032: LD_INT 40
23034: PUSH
23035: LD_INT 41
23037: PUSH
23038: LD_INT 42
23040: PUSH
23041: LD_INT 43
23043: PUSH
23044: LD_INT 48
23046: PUSH
23047: LD_INT 49
23049: PUSH
23050: LD_INT 50
23052: PUSH
23053: LD_INT 51
23055: PUSH
23056: LD_INT 52
23058: PUSH
23059: LD_INT 53
23061: PUSH
23062: LD_INT 54
23064: PUSH
23065: LD_INT 55
23067: PUSH
23068: LD_INT 56
23070: PUSH
23071: LD_INT 60
23073: PUSH
23074: LD_INT 61
23076: PUSH
23077: LD_INT 62
23079: PUSH
23080: LD_INT 66
23082: PUSH
23083: LD_INT 67
23085: PUSH
23086: LD_INT 68
23088: PUSH
23089: LD_INT 81
23091: PUSH
23092: LD_INT 82
23094: PUSH
23095: LD_INT 83
23097: PUSH
23098: LD_INT 84
23100: PUSH
23101: LD_INT 85
23103: PUSH
23104: LD_INT 87
23106: PUSH
23107: LD_INT 88
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
23166: GO 23399
23168: LD_INT 3
23170: DOUBLE
23171: EQUAL
23172: IFTRUE 23176
23174: GO 23398
23176: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23177: LD_ADDR_VAR 0 4
23181: PUSH
23182: LD_INT 46
23184: PUSH
23185: LD_INT 47
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 82
23196: PUSH
23197: LD_INT 83
23199: PUSH
23200: LD_INT 84
23202: PUSH
23203: LD_INT 85
23205: PUSH
23206: LD_INT 86
23208: PUSH
23209: LD_INT 11
23211: PUSH
23212: LD_INT 9
23214: PUSH
23215: LD_INT 20
23217: PUSH
23218: LD_INT 19
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 24
23226: PUSH
23227: LD_INT 22
23229: PUSH
23230: LD_INT 25
23232: PUSH
23233: LD_INT 28
23235: PUSH
23236: LD_INT 29
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 31
23244: PUSH
23245: LD_INT 37
23247: PUSH
23248: LD_INT 38
23250: PUSH
23251: LD_INT 32
23253: PUSH
23254: LD_INT 27
23256: PUSH
23257: LD_INT 33
23259: PUSH
23260: LD_INT 69
23262: PUSH
23263: LD_INT 39
23265: PUSH
23266: LD_INT 34
23268: PUSH
23269: LD_INT 40
23271: PUSH
23272: LD_INT 71
23274: PUSH
23275: LD_INT 23
23277: PUSH
23278: LD_INT 44
23280: PUSH
23281: LD_INT 48
23283: PUSH
23284: LD_INT 49
23286: PUSH
23287: LD_INT 50
23289: PUSH
23290: LD_INT 51
23292: PUSH
23293: LD_INT 52
23295: PUSH
23296: LD_INT 53
23298: PUSH
23299: LD_INT 54
23301: PUSH
23302: LD_INT 55
23304: PUSH
23305: LD_INT 56
23307: PUSH
23308: LD_INT 57
23310: PUSH
23311: LD_INT 58
23313: PUSH
23314: LD_INT 59
23316: PUSH
23317: LD_INT 63
23319: PUSH
23320: LD_INT 64
23322: PUSH
23323: LD_INT 65
23325: PUSH
23326: LD_INT 82
23328: PUSH
23329: LD_INT 83
23331: PUSH
23332: LD_INT 84
23334: PUSH
23335: LD_INT 85
23337: PUSH
23338: LD_INT 86
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
23396: GO 23399
23398: POP
// if state > - 1 and state < 3 then
23399: LD_VAR 0 3
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: GREATER
23408: PUSH
23409: LD_VAR 0 3
23413: PUSH
23414: LD_INT 3
23416: LESS
23417: AND
23418: IFFALSE 23475
// for i in result do
23420: LD_ADDR_VAR 0 5
23424: PUSH
23425: LD_VAR 0 4
23429: PUSH
23430: FOR_IN
23431: IFFALSE 23473
// if GetTech ( i , side ) <> state then
23433: LD_VAR 0 5
23437: PPUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 321
23447: PUSH
23448: LD_VAR 0 3
23452: NONEQUAL
23453: IFFALSE 23471
// result := result diff i ;
23455: LD_ADDR_VAR 0 4
23459: PUSH
23460: LD_VAR 0 4
23464: PUSH
23465: LD_VAR 0 5
23469: DIFF
23470: ST_TO_ADDR
23471: GO 23430
23473: POP
23474: POP
// end ;
23475: LD_VAR 0 4
23479: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23480: LD_INT 0
23482: PPUSH
23483: PPUSH
23484: PPUSH
// result := true ;
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 1
23492: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23493: LD_ADDR_VAR 0 5
23497: PUSH
23498: LD_VAR 0 2
23502: PPUSH
23503: CALL_OW 480
23507: ST_TO_ADDR
// if not tmp then
23508: LD_VAR 0 5
23512: NOT
23513: IFFALSE 23517
// exit ;
23515: GO 23566
// for i in tmp do
23517: LD_ADDR_VAR 0 4
23521: PUSH
23522: LD_VAR 0 5
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23564
// if GetTech ( i , side ) <> state_researched then
23530: LD_VAR 0 4
23534: PPUSH
23535: LD_VAR 0 1
23539: PPUSH
23540: CALL_OW 321
23544: PUSH
23545: LD_INT 2
23547: NONEQUAL
23548: IFFALSE 23562
// begin result := false ;
23550: LD_ADDR_VAR 0 3
23554: PUSH
23555: LD_INT 0
23557: ST_TO_ADDR
// exit ;
23558: POP
23559: POP
23560: GO 23566
// end ;
23562: GO 23527
23564: POP
23565: POP
// end ;
23566: LD_VAR 0 3
23570: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23571: LD_INT 0
23573: PPUSH
23574: PPUSH
23575: PPUSH
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23586: LD_VAR 0 1
23590: NOT
23591: PUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 257
23601: PUSH
23602: LD_INT 9
23604: NONEQUAL
23605: OR
23606: IFFALSE 23610
// exit ;
23608: GO 24183
// side := GetSide ( unit ) ;
23610: LD_ADDR_VAR 0 9
23614: PUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 255
23624: ST_TO_ADDR
// tech_space := tech_spacanom ;
23625: LD_ADDR_VAR 0 12
23629: PUSH
23630: LD_INT 29
23632: ST_TO_ADDR
// tech_time := tech_taurad ;
23633: LD_ADDR_VAR 0 13
23637: PUSH
23638: LD_INT 28
23640: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23641: LD_ADDR_VAR 0 11
23645: PUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: CALL_OW 310
23655: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23656: LD_VAR 0 11
23660: PPUSH
23661: CALL_OW 247
23665: PUSH
23666: LD_INT 2
23668: EQUAL
23669: IFFALSE 23673
// exit ;
23671: GO 24183
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23673: LD_ADDR_VAR 0 8
23677: PUSH
23678: LD_INT 81
23680: PUSH
23681: LD_VAR 0 9
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 3
23692: PUSH
23693: LD_INT 21
23695: PUSH
23696: LD_INT 3
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: CALL_OW 69
23715: ST_TO_ADDR
// if not tmp then
23716: LD_VAR 0 8
23720: NOT
23721: IFFALSE 23725
// exit ;
23723: GO 24183
// if in_unit then
23725: LD_VAR 0 11
23729: IFFALSE 23753
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23731: LD_ADDR_VAR 0 10
23735: PUSH
23736: LD_VAR 0 8
23740: PPUSH
23741: LD_VAR 0 11
23745: PPUSH
23746: CALL_OW 74
23750: ST_TO_ADDR
23751: GO 23773
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23753: LD_ADDR_VAR 0 10
23757: PUSH
23758: LD_VAR 0 8
23762: PPUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL_OW 74
23772: ST_TO_ADDR
// if not enemy then
23773: LD_VAR 0 10
23777: NOT
23778: IFFALSE 23782
// exit ;
23780: GO 24183
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23782: LD_VAR 0 11
23786: PUSH
23787: LD_VAR 0 11
23791: PPUSH
23792: LD_VAR 0 10
23796: PPUSH
23797: CALL_OW 296
23801: PUSH
23802: LD_INT 13
23804: GREATER
23805: AND
23806: PUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: LD_VAR 0 10
23816: PPUSH
23817: CALL_OW 296
23821: PUSH
23822: LD_INT 12
23824: GREATER
23825: OR
23826: IFFALSE 23830
// exit ;
23828: GO 24183
// missile := [ 1 ] ;
23830: LD_ADDR_VAR 0 14
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23841: LD_VAR 0 9
23845: PPUSH
23846: LD_VAR 0 12
23850: PPUSH
23851: CALL_OW 325
23855: IFFALSE 23884
// missile := Insert ( missile , missile + 1 , 2 ) ;
23857: LD_ADDR_VAR 0 14
23861: PUSH
23862: LD_VAR 0 14
23866: PPUSH
23867: LD_VAR 0 14
23871: PUSH
23872: LD_INT 1
23874: PLUS
23875: PPUSH
23876: LD_INT 2
23878: PPUSH
23879: CALL_OW 2
23883: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23884: LD_VAR 0 9
23888: PPUSH
23889: LD_VAR 0 13
23893: PPUSH
23894: CALL_OW 325
23898: PUSH
23899: LD_VAR 0 10
23903: PPUSH
23904: CALL_OW 255
23908: PPUSH
23909: LD_VAR 0 13
23913: PPUSH
23914: CALL_OW 325
23918: NOT
23919: AND
23920: IFFALSE 23949
// missile := Insert ( missile , missile + 1 , 3 ) ;
23922: LD_ADDR_VAR 0 14
23926: PUSH
23927: LD_VAR 0 14
23931: PPUSH
23932: LD_VAR 0 14
23936: PUSH
23937: LD_INT 1
23939: PLUS
23940: PPUSH
23941: LD_INT 3
23943: PPUSH
23944: CALL_OW 2
23948: ST_TO_ADDR
// if missile < 2 then
23949: LD_VAR 0 14
23953: PUSH
23954: LD_INT 2
23956: LESS
23957: IFFALSE 23961
// exit ;
23959: GO 24183
// x := GetX ( enemy ) ;
23961: LD_ADDR_VAR 0 4
23965: PUSH
23966: LD_VAR 0 10
23970: PPUSH
23971: CALL_OW 250
23975: ST_TO_ADDR
// y := GetY ( enemy ) ;
23976: LD_ADDR_VAR 0 5
23980: PUSH
23981: LD_VAR 0 10
23985: PPUSH
23986: CALL_OW 251
23990: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23991: LD_ADDR_VAR 0 6
23995: PUSH
23996: LD_VAR 0 4
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PPUSH
24005: LD_INT 1
24007: PPUSH
24008: CALL_OW 12
24012: PLUS
24013: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24014: LD_ADDR_VAR 0 7
24018: PUSH
24019: LD_VAR 0 5
24023: PUSH
24024: LD_INT 1
24026: NEG
24027: PPUSH
24028: LD_INT 1
24030: PPUSH
24031: CALL_OW 12
24035: PLUS
24036: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24037: LD_VAR 0 6
24041: PPUSH
24042: LD_VAR 0 7
24046: PPUSH
24047: CALL_OW 488
24051: NOT
24052: IFFALSE 24074
// begin _x := x ;
24054: LD_ADDR_VAR 0 6
24058: PUSH
24059: LD_VAR 0 4
24063: ST_TO_ADDR
// _y := y ;
24064: LD_ADDR_VAR 0 7
24068: PUSH
24069: LD_VAR 0 5
24073: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24074: LD_ADDR_VAR 0 3
24078: PUSH
24079: LD_INT 1
24081: PPUSH
24082: LD_VAR 0 14
24086: PPUSH
24087: CALL_OW 12
24091: ST_TO_ADDR
// case i of 1 :
24092: LD_VAR 0 3
24096: PUSH
24097: LD_INT 1
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24122
24105: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24106: LD_VAR 0 1
24110: PPUSH
24111: LD_VAR 0 10
24115: PPUSH
24116: CALL_OW 115
24120: GO 24183
24122: LD_INT 2
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24152
24130: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24131: LD_VAR 0 1
24135: PPUSH
24136: LD_VAR 0 6
24140: PPUSH
24141: LD_VAR 0 7
24145: PPUSH
24146: CALL_OW 153
24150: GO 24183
24152: LD_INT 3
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24182
24160: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24161: LD_VAR 0 1
24165: PPUSH
24166: LD_VAR 0 6
24170: PPUSH
24171: LD_VAR 0 7
24175: PPUSH
24176: CALL_OW 154
24180: GO 24183
24182: POP
// end ;
24183: LD_VAR 0 2
24187: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24188: LD_INT 0
24190: PPUSH
24191: PPUSH
24192: PPUSH
24193: PPUSH
24194: PPUSH
24195: PPUSH
// if not unit or not building then
24196: LD_VAR 0 1
24200: NOT
24201: PUSH
24202: LD_VAR 0 2
24206: NOT
24207: OR
24208: IFFALSE 24212
// exit ;
24210: GO 24370
// x := GetX ( building ) ;
24212: LD_ADDR_VAR 0 5
24216: PUSH
24217: LD_VAR 0 2
24221: PPUSH
24222: CALL_OW 250
24226: ST_TO_ADDR
// y := GetY ( building ) ;
24227: LD_ADDR_VAR 0 6
24231: PUSH
24232: LD_VAR 0 2
24236: PPUSH
24237: CALL_OW 251
24241: ST_TO_ADDR
// for i = 0 to 5 do
24242: LD_ADDR_VAR 0 4
24246: PUSH
24247: DOUBLE
24248: LD_INT 0
24250: DEC
24251: ST_TO_ADDR
24252: LD_INT 5
24254: PUSH
24255: FOR_TO
24256: IFFALSE 24368
// begin _x := ShiftX ( x , i , 3 ) ;
24258: LD_ADDR_VAR 0 7
24262: PUSH
24263: LD_VAR 0 5
24267: PPUSH
24268: LD_VAR 0 4
24272: PPUSH
24273: LD_INT 3
24275: PPUSH
24276: CALL_OW 272
24280: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24281: LD_ADDR_VAR 0 8
24285: PUSH
24286: LD_VAR 0 6
24290: PPUSH
24291: LD_VAR 0 4
24295: PPUSH
24296: LD_INT 3
24298: PPUSH
24299: CALL_OW 273
24303: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24304: LD_VAR 0 7
24308: PPUSH
24309: LD_VAR 0 8
24313: PPUSH
24314: CALL_OW 488
24318: NOT
24319: IFFALSE 24323
// continue ;
24321: GO 24255
// if HexInfo ( _x , _y ) = 0 then
24323: LD_VAR 0 7
24327: PPUSH
24328: LD_VAR 0 8
24332: PPUSH
24333: CALL_OW 428
24337: PUSH
24338: LD_INT 0
24340: EQUAL
24341: IFFALSE 24366
// begin ComMoveXY ( unit , _x , _y ) ;
24343: LD_VAR 0 1
24347: PPUSH
24348: LD_VAR 0 7
24352: PPUSH
24353: LD_VAR 0 8
24357: PPUSH
24358: CALL_OW 111
// exit ;
24362: POP
24363: POP
24364: GO 24370
// end ; end ;
24366: GO 24255
24368: POP
24369: POP
// end ;
24370: LD_VAR 0 3
24374: RET
// export function ScanBase ( side , base_area ) ; begin
24375: LD_INT 0
24377: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24378: LD_ADDR_VAR 0 3
24382: PUSH
24383: LD_VAR 0 2
24387: PPUSH
24388: LD_INT 81
24390: PUSH
24391: LD_VAR 0 1
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PPUSH
24400: CALL_OW 70
24404: ST_TO_ADDR
// end ;
24405: LD_VAR 0 3
24409: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24410: LD_INT 0
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
// result := false ;
24416: LD_ADDR_VAR 0 2
24420: PUSH
24421: LD_INT 0
24423: ST_TO_ADDR
// side := GetSide ( unit ) ;
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 255
24438: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24439: LD_ADDR_VAR 0 4
24443: PUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 248
24453: ST_TO_ADDR
// case nat of 1 :
24454: LD_VAR 0 4
24458: PUSH
24459: LD_INT 1
24461: DOUBLE
24462: EQUAL
24463: IFTRUE 24467
24465: GO 24478
24467: POP
// tech := tech_lassight ; 2 :
24468: LD_ADDR_VAR 0 5
24472: PUSH
24473: LD_INT 12
24475: ST_TO_ADDR
24476: GO 24517
24478: LD_INT 2
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24497
24486: POP
// tech := tech_mortar ; 3 :
24487: LD_ADDR_VAR 0 5
24491: PUSH
24492: LD_INT 41
24494: ST_TO_ADDR
24495: GO 24517
24497: LD_INT 3
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24516
24505: POP
// tech := tech_bazooka ; end ;
24506: LD_ADDR_VAR 0 5
24510: PUSH
24511: LD_INT 44
24513: ST_TO_ADDR
24514: GO 24517
24516: POP
// if Researched ( side , tech ) then
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_VAR 0 5
24526: PPUSH
24527: CALL_OW 325
24531: IFFALSE 24558
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24533: LD_ADDR_VAR 0 2
24537: PUSH
24538: LD_INT 5
24540: PUSH
24541: LD_INT 8
24543: PUSH
24544: LD_INT 9
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: PUSH
24552: LD_VAR 0 4
24556: ARRAY
24557: ST_TO_ADDR
// end ;
24558: LD_VAR 0 2
24562: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24563: LD_INT 0
24565: PPUSH
24566: PPUSH
24567: PPUSH
// if not mines then
24568: LD_VAR 0 2
24572: NOT
24573: IFFALSE 24577
// exit ;
24575: GO 24721
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24577: LD_ADDR_VAR 0 5
24581: PUSH
24582: LD_INT 81
24584: PUSH
24585: LD_VAR 0 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: LD_INT 21
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PPUSH
24615: CALL_OW 69
24619: ST_TO_ADDR
// for i in mines do
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_VAR 0 2
24629: PUSH
24630: FOR_IN
24631: IFFALSE 24719
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24633: LD_VAR 0 4
24637: PUSH
24638: LD_INT 1
24640: ARRAY
24641: PPUSH
24642: LD_VAR 0 4
24646: PUSH
24647: LD_INT 2
24649: ARRAY
24650: PPUSH
24651: CALL_OW 458
24655: NOT
24656: IFFALSE 24660
// continue ;
24658: GO 24630
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24660: LD_VAR 0 4
24664: PUSH
24665: LD_INT 1
24667: ARRAY
24668: PPUSH
24669: LD_VAR 0 4
24673: PUSH
24674: LD_INT 2
24676: ARRAY
24677: PPUSH
24678: CALL_OW 428
24682: PUSH
24683: LD_VAR 0 5
24687: IN
24688: IFFALSE 24717
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24690: LD_VAR 0 4
24694: PUSH
24695: LD_INT 1
24697: ARRAY
24698: PPUSH
24699: LD_VAR 0 4
24703: PUSH
24704: LD_INT 2
24706: ARRAY
24707: PPUSH
24708: LD_VAR 0 1
24712: PPUSH
24713: CALL_OW 456
// end ;
24717: GO 24630
24719: POP
24720: POP
// end ;
24721: LD_VAR 0 3
24725: RET
// export function Count ( array ) ; var i ; begin
24726: LD_INT 0
24728: PPUSH
24729: PPUSH
// result := 0 ;
24730: LD_ADDR_VAR 0 2
24734: PUSH
24735: LD_INT 0
24737: ST_TO_ADDR
// for i in array do
24738: LD_ADDR_VAR 0 3
24742: PUSH
24743: LD_VAR 0 1
24747: PUSH
24748: FOR_IN
24749: IFFALSE 24773
// if i then
24751: LD_VAR 0 3
24755: IFFALSE 24771
// result := result + 1 ;
24757: LD_ADDR_VAR 0 2
24761: PUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_INT 1
24769: PLUS
24770: ST_TO_ADDR
24771: GO 24748
24773: POP
24774: POP
// end ;
24775: LD_VAR 0 2
24779: RET
// export function IsEmpty ( building ) ; begin
24780: LD_INT 0
24782: PPUSH
// if not building then
24783: LD_VAR 0 1
24787: NOT
24788: IFFALSE 24792
// exit ;
24790: GO 24835
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24792: LD_ADDR_VAR 0 2
24796: PUSH
24797: LD_VAR 0 1
24801: PUSH
24802: LD_INT 22
24804: PUSH
24805: LD_VAR 0 1
24809: PPUSH
24810: CALL_OW 255
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 58
24821: PUSH
24822: EMPTY
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PPUSH
24829: CALL_OW 69
24833: IN
24834: ST_TO_ADDR
// end ;
24835: LD_VAR 0 2
24839: RET
// export function IsNotFull ( building ) ; begin
24840: LD_INT 0
24842: PPUSH
// if not building then
24843: LD_VAR 0 1
24847: NOT
24848: IFFALSE 24852
// exit ;
24850: GO 24871
// result := UnitsInside ( building ) < 6 ;
24852: LD_ADDR_VAR 0 2
24856: PUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 313
24866: PUSH
24867: LD_INT 6
24869: LESS
24870: ST_TO_ADDR
// end ;
24871: LD_VAR 0 2
24875: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
// tmp := [ ] ;
24882: LD_ADDR_VAR 0 3
24886: PUSH
24887: EMPTY
24888: ST_TO_ADDR
// list := [ ] ;
24889: LD_ADDR_VAR 0 5
24893: PUSH
24894: EMPTY
24895: ST_TO_ADDR
// for i = 16 to 25 do
24896: LD_ADDR_VAR 0 4
24900: PUSH
24901: DOUBLE
24902: LD_INT 16
24904: DEC
24905: ST_TO_ADDR
24906: LD_INT 25
24908: PUSH
24909: FOR_TO
24910: IFFALSE 24983
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_VAR 0 3
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 255
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 91
24941: PUSH
24942: LD_VAR 0 1
24946: PUSH
24947: LD_INT 6
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 30
24957: PUSH
24958: LD_VAR 0 4
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: LIST
24971: PUSH
24972: EMPTY
24973: LIST
24974: PPUSH
24975: CALL_OW 69
24979: ADD
24980: ST_TO_ADDR
24981: GO 24909
24983: POP
24984: POP
// for i = 1 to tmp do
24985: LD_ADDR_VAR 0 4
24989: PUSH
24990: DOUBLE
24991: LD_INT 1
24993: DEC
24994: ST_TO_ADDR
24995: LD_VAR 0 3
24999: PUSH
25000: FOR_TO
25001: IFFALSE 25089
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25003: LD_ADDR_VAR 0 5
25007: PUSH
25008: LD_VAR 0 5
25012: PUSH
25013: LD_VAR 0 3
25017: PUSH
25018: LD_VAR 0 4
25022: ARRAY
25023: PPUSH
25024: CALL_OW 266
25028: PUSH
25029: LD_VAR 0 3
25033: PUSH
25034: LD_VAR 0 4
25038: ARRAY
25039: PPUSH
25040: CALL_OW 250
25044: PUSH
25045: LD_VAR 0 3
25049: PUSH
25050: LD_VAR 0 4
25054: ARRAY
25055: PPUSH
25056: CALL_OW 251
25060: PUSH
25061: LD_VAR 0 3
25065: PUSH
25066: LD_VAR 0 4
25070: ARRAY
25071: PPUSH
25072: CALL_OW 254
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: PUSH
25083: EMPTY
25084: LIST
25085: ADD
25086: ST_TO_ADDR
25087: GO 25000
25089: POP
25090: POP
// result := list ;
25091: LD_ADDR_VAR 0 2
25095: PUSH
25096: LD_VAR 0 5
25100: ST_TO_ADDR
// end ;
25101: LD_VAR 0 2
25105: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
// if not factory then
25115: LD_VAR 0 1
25119: NOT
25120: IFFALSE 25124
// exit ;
25122: GO 25717
// if control = control_apeman then
25124: LD_VAR 0 4
25128: PUSH
25129: LD_INT 5
25131: EQUAL
25132: IFFALSE 25241
// begin tmp := UnitsInside ( factory ) ;
25134: LD_ADDR_VAR 0 8
25138: PUSH
25139: LD_VAR 0 1
25143: PPUSH
25144: CALL_OW 313
25148: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25149: LD_VAR 0 8
25153: PPUSH
25154: LD_INT 25
25156: PUSH
25157: LD_INT 12
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PPUSH
25164: CALL_OW 72
25168: NOT
25169: IFFALSE 25179
// control := control_manual ;
25171: LD_ADDR_VAR 0 4
25175: PUSH
25176: LD_INT 1
25178: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25179: LD_ADDR_VAR 0 8
25183: PUSH
25184: LD_VAR 0 1
25188: PPUSH
25189: CALL 24876 0 1
25193: ST_TO_ADDR
// if tmp then
25194: LD_VAR 0 8
25198: IFFALSE 25241
// begin for i in tmp do
25200: LD_ADDR_VAR 0 7
25204: PUSH
25205: LD_VAR 0 8
25209: PUSH
25210: FOR_IN
25211: IFFALSE 25239
// if i [ 1 ] = b_ext_radio then
25213: LD_VAR 0 7
25217: PUSH
25218: LD_INT 1
25220: ARRAY
25221: PUSH
25222: LD_INT 22
25224: EQUAL
25225: IFFALSE 25237
// begin control := control_remote ;
25227: LD_ADDR_VAR 0 4
25231: PUSH
25232: LD_INT 2
25234: ST_TO_ADDR
// break ;
25235: GO 25239
// end ;
25237: GO 25210
25239: POP
25240: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25241: LD_VAR 0 1
25245: PPUSH
25246: LD_VAR 0 2
25250: PPUSH
25251: LD_VAR 0 3
25255: PPUSH
25256: LD_VAR 0 4
25260: PPUSH
25261: LD_VAR 0 5
25265: PPUSH
25266: CALL_OW 448
25270: IFFALSE 25305
// begin result := [ chassis , engine , control , weapon ] ;
25272: LD_ADDR_VAR 0 6
25276: PUSH
25277: LD_VAR 0 2
25281: PUSH
25282: LD_VAR 0 3
25286: PUSH
25287: LD_VAR 0 4
25291: PUSH
25292: LD_VAR 0 5
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
// exit ;
25303: GO 25717
// end ; _chassis := AvailableChassisList ( factory ) ;
25305: LD_ADDR_VAR 0 9
25309: PUSH
25310: LD_VAR 0 1
25314: PPUSH
25315: CALL_OW 475
25319: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25320: LD_ADDR_VAR 0 11
25324: PUSH
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 476
25334: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25335: LD_ADDR_VAR 0 12
25339: PUSH
25340: LD_VAR 0 1
25344: PPUSH
25345: CALL_OW 477
25349: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25350: LD_ADDR_VAR 0 10
25354: PUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 478
25364: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25365: LD_VAR 0 9
25369: NOT
25370: PUSH
25371: LD_VAR 0 11
25375: NOT
25376: OR
25377: PUSH
25378: LD_VAR 0 12
25382: NOT
25383: OR
25384: PUSH
25385: LD_VAR 0 10
25389: NOT
25390: OR
25391: IFFALSE 25426
// begin result := [ chassis , engine , control , weapon ] ;
25393: LD_ADDR_VAR 0 6
25397: PUSH
25398: LD_VAR 0 2
25402: PUSH
25403: LD_VAR 0 3
25407: PUSH
25408: LD_VAR 0 4
25412: PUSH
25413: LD_VAR 0 5
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: ST_TO_ADDR
// exit ;
25424: GO 25717
// end ; if not chassis in _chassis then
25426: LD_VAR 0 2
25430: PUSH
25431: LD_VAR 0 9
25435: IN
25436: NOT
25437: IFFALSE 25463
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25439: LD_ADDR_VAR 0 2
25443: PUSH
25444: LD_VAR 0 9
25448: PUSH
25449: LD_INT 1
25451: PPUSH
25452: LD_VAR 0 9
25456: PPUSH
25457: CALL_OW 12
25461: ARRAY
25462: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25463: LD_VAR 0 2
25467: PPUSH
25468: LD_VAR 0 3
25472: PPUSH
25473: CALL 25722 0 2
25477: NOT
25478: IFFALSE 25537
// repeat engine := _engine [ 1 ] ;
25480: LD_ADDR_VAR 0 3
25484: PUSH
25485: LD_VAR 0 11
25489: PUSH
25490: LD_INT 1
25492: ARRAY
25493: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25494: LD_ADDR_VAR 0 11
25498: PUSH
25499: LD_VAR 0 11
25503: PPUSH
25504: LD_INT 1
25506: PPUSH
25507: CALL_OW 3
25511: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25512: LD_VAR 0 2
25516: PPUSH
25517: LD_VAR 0 3
25521: PPUSH
25522: CALL 25722 0 2
25526: PUSH
25527: LD_VAR 0 11
25531: PUSH
25532: EMPTY
25533: EQUAL
25534: OR
25535: IFFALSE 25480
// if not control in _control then
25537: LD_VAR 0 4
25541: PUSH
25542: LD_VAR 0 12
25546: IN
25547: NOT
25548: IFFALSE 25574
// control := _control [ rand ( 1 , _control ) ] ;
25550: LD_ADDR_VAR 0 4
25554: PUSH
25555: LD_VAR 0 12
25559: PUSH
25560: LD_INT 1
25562: PPUSH
25563: LD_VAR 0 12
25567: PPUSH
25568: CALL_OW 12
25572: ARRAY
25573: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25574: LD_VAR 0 2
25578: PPUSH
25579: LD_VAR 0 5
25583: PPUSH
25584: CALL 25942 0 2
25588: NOT
25589: IFFALSE 25648
// repeat weapon := _weapon [ 1 ] ;
25591: LD_ADDR_VAR 0 5
25595: PUSH
25596: LD_VAR 0 10
25600: PUSH
25601: LD_INT 1
25603: ARRAY
25604: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25605: LD_ADDR_VAR 0 10
25609: PUSH
25610: LD_VAR 0 10
25614: PPUSH
25615: LD_INT 1
25617: PPUSH
25618: CALL_OW 3
25622: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25623: LD_VAR 0 2
25627: PPUSH
25628: LD_VAR 0 5
25632: PPUSH
25633: CALL 25942 0 2
25637: PUSH
25638: LD_VAR 0 10
25642: PUSH
25643: EMPTY
25644: EQUAL
25645: OR
25646: IFFALSE 25591
// result := [ ] ;
25648: LD_ADDR_VAR 0 6
25652: PUSH
25653: EMPTY
25654: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25655: LD_VAR 0 1
25659: PPUSH
25660: LD_VAR 0 2
25664: PPUSH
25665: LD_VAR 0 3
25669: PPUSH
25670: LD_VAR 0 4
25674: PPUSH
25675: LD_VAR 0 5
25679: PPUSH
25680: CALL_OW 448
25684: IFFALSE 25717
// result := [ chassis , engine , control , weapon ] ;
25686: LD_ADDR_VAR 0 6
25690: PUSH
25691: LD_VAR 0 2
25695: PUSH
25696: LD_VAR 0 3
25700: PUSH
25701: LD_VAR 0 4
25705: PUSH
25706: LD_VAR 0 5
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
// end ;
25717: LD_VAR 0 6
25721: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25722: LD_INT 0
25724: PPUSH
// if not chassis or not engine then
25725: LD_VAR 0 1
25729: NOT
25730: PUSH
25731: LD_VAR 0 2
25735: NOT
25736: OR
25737: IFFALSE 25741
// exit ;
25739: GO 25937
// case engine of engine_solar :
25741: LD_VAR 0 2
25745: PUSH
25746: LD_INT 2
25748: DOUBLE
25749: EQUAL
25750: IFTRUE 25754
25752: GO 25792
25754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25755: LD_ADDR_VAR 0 3
25759: PUSH
25760: LD_INT 11
25762: PUSH
25763: LD_INT 12
25765: PUSH
25766: LD_INT 13
25768: PUSH
25769: LD_INT 14
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: ST_TO_ADDR
25790: GO 25921
25792: LD_INT 1
25794: DOUBLE
25795: EQUAL
25796: IFTRUE 25800
25798: GO 25862
25800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25801: LD_ADDR_VAR 0 3
25805: PUSH
25806: LD_INT 11
25808: PUSH
25809: LD_INT 12
25811: PUSH
25812: LD_INT 13
25814: PUSH
25815: LD_INT 14
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 2
25823: PUSH
25824: LD_INT 3
25826: PUSH
25827: LD_INT 4
25829: PUSH
25830: LD_INT 5
25832: PUSH
25833: LD_INT 21
25835: PUSH
25836: LD_INT 23
25838: PUSH
25839: LD_INT 22
25841: PUSH
25842: LD_INT 24
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: ST_TO_ADDR
25860: GO 25921
25862: LD_INT 3
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25920
25870: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: LD_INT 13
25878: PUSH
25879: LD_INT 14
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 3
25887: PUSH
25888: LD_INT 4
25890: PUSH
25891: LD_INT 5
25893: PUSH
25894: LD_INT 21
25896: PUSH
25897: LD_INT 22
25899: PUSH
25900: LD_INT 23
25902: PUSH
25903: LD_INT 24
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: ST_TO_ADDR
25918: GO 25921
25920: POP
// result := ( chassis in result ) ;
25921: LD_ADDR_VAR 0 3
25925: PUSH
25926: LD_VAR 0 1
25930: PUSH
25931: LD_VAR 0 3
25935: IN
25936: ST_TO_ADDR
// end ;
25937: LD_VAR 0 3
25941: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25942: LD_INT 0
25944: PPUSH
// if not chassis or not weapon then
25945: LD_VAR 0 1
25949: NOT
25950: PUSH
25951: LD_VAR 0 2
25955: NOT
25956: OR
25957: IFFALSE 25961
// exit ;
25959: GO 27023
// case weapon of us_machine_gun :
25961: LD_VAR 0 2
25965: PUSH
25966: LD_INT 2
25968: DOUBLE
25969: EQUAL
25970: IFTRUE 25974
25972: GO 26004
25974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 3
25988: PUSH
25989: LD_INT 4
25991: PUSH
25992: LD_INT 5
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: ST_TO_ADDR
26002: GO 27007
26004: LD_INT 3
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 26042
26012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26013: LD_ADDR_VAR 0 3
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 2
26023: PUSH
26024: LD_INT 3
26026: PUSH
26027: LD_INT 4
26029: PUSH
26030: LD_INT 5
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: ST_TO_ADDR
26040: GO 27007
26042: LD_INT 11
26044: DOUBLE
26045: EQUAL
26046: IFTRUE 26050
26048: GO 26080
26050: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26051: LD_ADDR_VAR 0 3
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 3
26064: PUSH
26065: LD_INT 4
26067: PUSH
26068: LD_INT 5
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
26078: GO 27007
26080: LD_INT 4
26082: DOUBLE
26083: EQUAL
26084: IFTRUE 26088
26086: GO 26114
26088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_INT 2
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: LD_INT 4
26102: PUSH
26103: LD_INT 5
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
26112: GO 27007
26114: LD_INT 5
26116: DOUBLE
26117: EQUAL
26118: IFTRUE 26122
26120: GO 26148
26122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26123: LD_ADDR_VAR 0 3
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 3
26133: PUSH
26134: LD_INT 4
26136: PUSH
26137: LD_INT 5
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: ST_TO_ADDR
26146: GO 27007
26148: LD_INT 9
26150: DOUBLE
26151: EQUAL
26152: IFTRUE 26156
26154: GO 26182
26156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26157: LD_ADDR_VAR 0 3
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: LD_INT 3
26167: PUSH
26168: LD_INT 4
26170: PUSH
26171: LD_INT 5
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
26180: GO 27007
26182: LD_INT 7
26184: DOUBLE
26185: EQUAL
26186: IFTRUE 26190
26188: GO 26216
26190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: LD_INT 4
26204: PUSH
26205: LD_INT 5
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: ST_TO_ADDR
26214: GO 27007
26216: LD_INT 12
26218: DOUBLE
26219: EQUAL
26220: IFTRUE 26224
26222: GO 26250
26224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26225: LD_ADDR_VAR 0 3
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 3
26235: PUSH
26236: LD_INT 4
26238: PUSH
26239: LD_INT 5
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
26248: GO 27007
26250: LD_INT 13
26252: DOUBLE
26253: EQUAL
26254: IFTRUE 26258
26256: GO 26284
26258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26259: LD_ADDR_VAR 0 3
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: LD_INT 4
26272: PUSH
26273: LD_INT 5
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: ST_TO_ADDR
26282: GO 27007
26284: LD_INT 14
26286: DOUBLE
26287: EQUAL
26288: IFTRUE 26292
26290: GO 26310
26292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26293: LD_ADDR_VAR 0 3
26297: PUSH
26298: LD_INT 4
26300: PUSH
26301: LD_INT 5
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: ST_TO_ADDR
26308: GO 27007
26310: LD_INT 6
26312: DOUBLE
26313: EQUAL
26314: IFTRUE 26318
26316: GO 26336
26318: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_INT 4
26326: PUSH
26327: LD_INT 5
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: ST_TO_ADDR
26334: GO 27007
26336: LD_INT 10
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26362
26344: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26345: LD_ADDR_VAR 0 3
26349: PUSH
26350: LD_INT 4
26352: PUSH
26353: LD_INT 5
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: ST_TO_ADDR
26360: GO 27007
26362: LD_INT 22
26364: DOUBLE
26365: EQUAL
26366: IFTRUE 26370
26368: GO 26396
26370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26371: LD_ADDR_VAR 0 3
26375: PUSH
26376: LD_INT 11
26378: PUSH
26379: LD_INT 12
26381: PUSH
26382: LD_INT 13
26384: PUSH
26385: LD_INT 14
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: ST_TO_ADDR
26394: GO 27007
26396: LD_INT 23
26398: DOUBLE
26399: EQUAL
26400: IFTRUE 26404
26402: GO 26430
26404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26405: LD_ADDR_VAR 0 3
26409: PUSH
26410: LD_INT 11
26412: PUSH
26413: LD_INT 12
26415: PUSH
26416: LD_INT 13
26418: PUSH
26419: LD_INT 14
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
26428: GO 27007
26430: LD_INT 24
26432: DOUBLE
26433: EQUAL
26434: IFTRUE 26438
26436: GO 26464
26438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26439: LD_ADDR_VAR 0 3
26443: PUSH
26444: LD_INT 11
26446: PUSH
26447: LD_INT 12
26449: PUSH
26450: LD_INT 13
26452: PUSH
26453: LD_INT 14
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
26462: GO 27007
26464: LD_INT 30
26466: DOUBLE
26467: EQUAL
26468: IFTRUE 26472
26470: GO 26498
26472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26473: LD_ADDR_VAR 0 3
26477: PUSH
26478: LD_INT 11
26480: PUSH
26481: LD_INT 12
26483: PUSH
26484: LD_INT 13
26486: PUSH
26487: LD_INT 14
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
26496: GO 27007
26498: LD_INT 25
26500: DOUBLE
26501: EQUAL
26502: IFTRUE 26506
26504: GO 26524
26506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26507: LD_ADDR_VAR 0 3
26511: PUSH
26512: LD_INT 13
26514: PUSH
26515: LD_INT 14
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: ST_TO_ADDR
26522: GO 27007
26524: LD_INT 27
26526: DOUBLE
26527: EQUAL
26528: IFTRUE 26532
26530: GO 26550
26532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26533: LD_ADDR_VAR 0 3
26537: PUSH
26538: LD_INT 13
26540: PUSH
26541: LD_INT 14
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: ST_TO_ADDR
26548: GO 27007
26550: LD_EXP 12
26554: DOUBLE
26555: EQUAL
26556: IFTRUE 26560
26558: GO 26586
26560: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_INT 11
26568: PUSH
26569: LD_INT 12
26571: PUSH
26572: LD_INT 13
26574: PUSH
26575: LD_INT 14
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: ST_TO_ADDR
26584: GO 27007
26586: LD_INT 28
26588: DOUBLE
26589: EQUAL
26590: IFTRUE 26594
26592: GO 26612
26594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26595: LD_ADDR_VAR 0 3
26599: PUSH
26600: LD_INT 13
26602: PUSH
26603: LD_INT 14
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: ST_TO_ADDR
26610: GO 27007
26612: LD_INT 29
26614: DOUBLE
26615: EQUAL
26616: IFTRUE 26620
26618: GO 26638
26620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 13
26628: PUSH
26629: LD_INT 14
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: ST_TO_ADDR
26636: GO 27007
26638: LD_INT 31
26640: DOUBLE
26641: EQUAL
26642: IFTRUE 26646
26644: GO 26664
26646: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26647: LD_ADDR_VAR 0 3
26651: PUSH
26652: LD_INT 13
26654: PUSH
26655: LD_INT 14
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: ST_TO_ADDR
26662: GO 27007
26664: LD_INT 26
26666: DOUBLE
26667: EQUAL
26668: IFTRUE 26672
26670: GO 26690
26672: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26673: LD_ADDR_VAR 0 3
26677: PUSH
26678: LD_INT 13
26680: PUSH
26681: LD_INT 14
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: ST_TO_ADDR
26688: GO 27007
26690: LD_INT 42
26692: DOUBLE
26693: EQUAL
26694: IFTRUE 26698
26696: GO 26724
26698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26699: LD_ADDR_VAR 0 3
26703: PUSH
26704: LD_INT 21
26706: PUSH
26707: LD_INT 22
26709: PUSH
26710: LD_INT 23
26712: PUSH
26713: LD_INT 24
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: ST_TO_ADDR
26722: GO 27007
26724: LD_INT 43
26726: DOUBLE
26727: EQUAL
26728: IFTRUE 26732
26730: GO 26758
26732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 22
26743: PUSH
26744: LD_INT 23
26746: PUSH
26747: LD_INT 24
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
26756: GO 27007
26758: LD_INT 44
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 26792
26766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: LD_INT 21
26774: PUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 23
26780: PUSH
26781: LD_INT 24
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
26790: GO 27007
26792: LD_INT 45
26794: DOUBLE
26795: EQUAL
26796: IFTRUE 26800
26798: GO 26826
26800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26801: LD_ADDR_VAR 0 3
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_INT 23
26814: PUSH
26815: LD_INT 24
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: ST_TO_ADDR
26824: GO 27007
26826: LD_INT 49
26828: DOUBLE
26829: EQUAL
26830: IFTRUE 26834
26832: GO 26860
26834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26835: LD_ADDR_VAR 0 3
26839: PUSH
26840: LD_INT 21
26842: PUSH
26843: LD_INT 22
26845: PUSH
26846: LD_INT 23
26848: PUSH
26849: LD_INT 24
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
26858: GO 27007
26860: LD_INT 51
26862: DOUBLE
26863: EQUAL
26864: IFTRUE 26868
26866: GO 26894
26868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26869: LD_ADDR_VAR 0 3
26873: PUSH
26874: LD_INT 21
26876: PUSH
26877: LD_INT 22
26879: PUSH
26880: LD_INT 23
26882: PUSH
26883: LD_INT 24
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: ST_TO_ADDR
26892: GO 27007
26894: LD_INT 52
26896: DOUBLE
26897: EQUAL
26898: IFTRUE 26902
26900: GO 26928
26902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26903: LD_ADDR_VAR 0 3
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 22
26913: PUSH
26914: LD_INT 23
26916: PUSH
26917: LD_INT 24
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
26926: GO 27007
26928: LD_INT 53
26930: DOUBLE
26931: EQUAL
26932: IFTRUE 26936
26934: GO 26954
26936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26937: LD_ADDR_VAR 0 3
26941: PUSH
26942: LD_INT 23
26944: PUSH
26945: LD_INT 24
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: ST_TO_ADDR
26952: GO 27007
26954: LD_INT 46
26956: DOUBLE
26957: EQUAL
26958: IFTRUE 26962
26960: GO 26980
26962: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_INT 23
26970: PUSH
26971: LD_INT 24
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: ST_TO_ADDR
26978: GO 27007
26980: LD_INT 47
26982: DOUBLE
26983: EQUAL
26984: IFTRUE 26988
26986: GO 27006
26988: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26989: LD_ADDR_VAR 0 3
26993: PUSH
26994: LD_INT 23
26996: PUSH
26997: LD_INT 24
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: ST_TO_ADDR
27004: GO 27007
27006: POP
// result := ( chassis in result ) ;
27007: LD_ADDR_VAR 0 3
27011: PUSH
27012: LD_VAR 0 1
27016: PUSH
27017: LD_VAR 0 3
27021: IN
27022: ST_TO_ADDR
// end ;
27023: LD_VAR 0 3
27027: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27028: LD_INT 0
27030: PPUSH
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
27035: PPUSH
27036: PPUSH
// result := array ;
27037: LD_ADDR_VAR 0 5
27041: PUSH
27042: LD_VAR 0 1
27046: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27047: LD_VAR 0 1
27051: NOT
27052: PUSH
27053: LD_VAR 0 2
27057: NOT
27058: OR
27059: PUSH
27060: LD_VAR 0 3
27064: NOT
27065: OR
27066: PUSH
27067: LD_VAR 0 2
27071: PUSH
27072: LD_VAR 0 1
27076: GREATER
27077: OR
27078: PUSH
27079: LD_VAR 0 3
27083: PUSH
27084: LD_VAR 0 1
27088: GREATER
27089: OR
27090: IFFALSE 27094
// exit ;
27092: GO 27390
// if direction then
27094: LD_VAR 0 4
27098: IFFALSE 27162
// begin d := 1 ;
27100: LD_ADDR_VAR 0 9
27104: PUSH
27105: LD_INT 1
27107: ST_TO_ADDR
// if i_from > i_to then
27108: LD_VAR 0 2
27112: PUSH
27113: LD_VAR 0 3
27117: GREATER
27118: IFFALSE 27144
// length := ( array - i_from ) + i_to else
27120: LD_ADDR_VAR 0 11
27124: PUSH
27125: LD_VAR 0 1
27129: PUSH
27130: LD_VAR 0 2
27134: MINUS
27135: PUSH
27136: LD_VAR 0 3
27140: PLUS
27141: ST_TO_ADDR
27142: GO 27160
// length := i_to - i_from ;
27144: LD_ADDR_VAR 0 11
27148: PUSH
27149: LD_VAR 0 3
27153: PUSH
27154: LD_VAR 0 2
27158: MINUS
27159: ST_TO_ADDR
// end else
27160: GO 27223
// begin d := - 1 ;
27162: LD_ADDR_VAR 0 9
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: ST_TO_ADDR
// if i_from > i_to then
27171: LD_VAR 0 2
27175: PUSH
27176: LD_VAR 0 3
27180: GREATER
27181: IFFALSE 27201
// length := i_from - i_to else
27183: LD_ADDR_VAR 0 11
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: LD_VAR 0 3
27197: MINUS
27198: ST_TO_ADDR
27199: GO 27223
// length := ( array - i_to ) + i_from ;
27201: LD_ADDR_VAR 0 11
27205: PUSH
27206: LD_VAR 0 1
27210: PUSH
27211: LD_VAR 0 3
27215: MINUS
27216: PUSH
27217: LD_VAR 0 2
27221: PLUS
27222: ST_TO_ADDR
// end ; if not length then
27223: LD_VAR 0 11
27227: NOT
27228: IFFALSE 27232
// exit ;
27230: GO 27390
// tmp := array ;
27232: LD_ADDR_VAR 0 10
27236: PUSH
27237: LD_VAR 0 1
27241: ST_TO_ADDR
// for i = 1 to length do
27242: LD_ADDR_VAR 0 6
27246: PUSH
27247: DOUBLE
27248: LD_INT 1
27250: DEC
27251: ST_TO_ADDR
27252: LD_VAR 0 11
27256: PUSH
27257: FOR_TO
27258: IFFALSE 27378
// begin for j = 1 to array do
27260: LD_ADDR_VAR 0 7
27264: PUSH
27265: DOUBLE
27266: LD_INT 1
27268: DEC
27269: ST_TO_ADDR
27270: LD_VAR 0 1
27274: PUSH
27275: FOR_TO
27276: IFFALSE 27364
// begin k := j + d ;
27278: LD_ADDR_VAR 0 8
27282: PUSH
27283: LD_VAR 0 7
27287: PUSH
27288: LD_VAR 0 9
27292: PLUS
27293: ST_TO_ADDR
// if k > array then
27294: LD_VAR 0 8
27298: PUSH
27299: LD_VAR 0 1
27303: GREATER
27304: IFFALSE 27314
// k := 1 ;
27306: LD_ADDR_VAR 0 8
27310: PUSH
27311: LD_INT 1
27313: ST_TO_ADDR
// if not k then
27314: LD_VAR 0 8
27318: NOT
27319: IFFALSE 27331
// k := array ;
27321: LD_ADDR_VAR 0 8
27325: PUSH
27326: LD_VAR 0 1
27330: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27331: LD_ADDR_VAR 0 10
27335: PUSH
27336: LD_VAR 0 10
27340: PPUSH
27341: LD_VAR 0 8
27345: PPUSH
27346: LD_VAR 0 1
27350: PUSH
27351: LD_VAR 0 7
27355: ARRAY
27356: PPUSH
27357: CALL_OW 1
27361: ST_TO_ADDR
// end ;
27362: GO 27275
27364: POP
27365: POP
// array := tmp ;
27366: LD_ADDR_VAR 0 1
27370: PUSH
27371: LD_VAR 0 10
27375: ST_TO_ADDR
// end ;
27376: GO 27257
27378: POP
27379: POP
// result := array ;
27380: LD_ADDR_VAR 0 5
27384: PUSH
27385: LD_VAR 0 1
27389: ST_TO_ADDR
// end ;
27390: LD_VAR 0 5
27394: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27395: LD_INT 0
27397: PPUSH
27398: PPUSH
// result := 0 ;
27399: LD_ADDR_VAR 0 3
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// if not array or not value in array then
27407: LD_VAR 0 1
27411: NOT
27412: PUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_VAR 0 1
27422: IN
27423: NOT
27424: OR
27425: IFFALSE 27429
// exit ;
27427: GO 27483
// for i = 1 to array do
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: DOUBLE
27435: LD_INT 1
27437: DEC
27438: ST_TO_ADDR
27439: LD_VAR 0 1
27443: PUSH
27444: FOR_TO
27445: IFFALSE 27481
// if value = array [ i ] then
27447: LD_VAR 0 2
27451: PUSH
27452: LD_VAR 0 1
27456: PUSH
27457: LD_VAR 0 4
27461: ARRAY
27462: EQUAL
27463: IFFALSE 27479
// begin result := i ;
27465: LD_ADDR_VAR 0 3
27469: PUSH
27470: LD_VAR 0 4
27474: ST_TO_ADDR
// exit ;
27475: POP
27476: POP
27477: GO 27483
// end ;
27479: GO 27444
27481: POP
27482: POP
// end ;
27483: LD_VAR 0 3
27487: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27488: LD_INT 0
27490: PPUSH
// vc_chassis := chassis ;
27491: LD_ADDR_OWVAR 37
27495: PUSH
27496: LD_VAR 0 1
27500: ST_TO_ADDR
// vc_engine := engine ;
27501: LD_ADDR_OWVAR 39
27505: PUSH
27506: LD_VAR 0 2
27510: ST_TO_ADDR
// vc_control := control ;
27511: LD_ADDR_OWVAR 38
27515: PUSH
27516: LD_VAR 0 3
27520: ST_TO_ADDR
// vc_weapon := weapon ;
27521: LD_ADDR_OWVAR 40
27525: PUSH
27526: LD_VAR 0 4
27530: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27531: LD_ADDR_OWVAR 41
27535: PUSH
27536: LD_VAR 0 5
27540: ST_TO_ADDR
// end ;
27541: LD_VAR 0 6
27545: RET
// export function WantPlant ( unit ) ; var task ; begin
27546: LD_INT 0
27548: PPUSH
27549: PPUSH
// result := false ;
27550: LD_ADDR_VAR 0 2
27554: PUSH
27555: LD_INT 0
27557: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: CALL_OW 437
27572: ST_TO_ADDR
// if task then
27573: LD_VAR 0 3
27577: IFFALSE 27605
// if task [ 1 ] [ 1 ] = p then
27579: LD_VAR 0 3
27583: PUSH
27584: LD_INT 1
27586: ARRAY
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PUSH
27592: LD_STRING p
27594: EQUAL
27595: IFFALSE 27605
// result := true ;
27597: LD_ADDR_VAR 0 2
27601: PUSH
27602: LD_INT 1
27604: ST_TO_ADDR
// end ;
27605: LD_VAR 0 2
27609: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27610: LD_INT 0
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// if pos < 1 then
27616: LD_VAR 0 2
27620: PUSH
27621: LD_INT 1
27623: LESS
27624: IFFALSE 27628
// exit ;
27626: GO 27931
// if pos = 1 then
27628: LD_VAR 0 2
27632: PUSH
27633: LD_INT 1
27635: EQUAL
27636: IFFALSE 27669
// result := Replace ( arr , pos [ 1 ] , value ) else
27638: LD_ADDR_VAR 0 4
27642: PUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: LD_VAR 0 2
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: PPUSH
27657: LD_VAR 0 3
27661: PPUSH
27662: CALL_OW 1
27666: ST_TO_ADDR
27667: GO 27931
// begin tmp := arr ;
27669: LD_ADDR_VAR 0 6
27673: PUSH
27674: LD_VAR 0 1
27678: ST_TO_ADDR
// s_arr := [ tmp ] ;
27679: LD_ADDR_VAR 0 7
27683: PUSH
27684: LD_VAR 0 6
27688: PUSH
27689: EMPTY
27690: LIST
27691: ST_TO_ADDR
// for i = 1 to pos - 1 do
27692: LD_ADDR_VAR 0 5
27696: PUSH
27697: DOUBLE
27698: LD_INT 1
27700: DEC
27701: ST_TO_ADDR
27702: LD_VAR 0 2
27706: PUSH
27707: LD_INT 1
27709: MINUS
27710: PUSH
27711: FOR_TO
27712: IFFALSE 27757
// begin tmp := tmp [ pos [ i ] ] ;
27714: LD_ADDR_VAR 0 6
27718: PUSH
27719: LD_VAR 0 6
27723: PUSH
27724: LD_VAR 0 2
27728: PUSH
27729: LD_VAR 0 5
27733: ARRAY
27734: ARRAY
27735: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27736: LD_ADDR_VAR 0 7
27740: PUSH
27741: LD_VAR 0 7
27745: PUSH
27746: LD_VAR 0 6
27750: PUSH
27751: EMPTY
27752: LIST
27753: ADD
27754: ST_TO_ADDR
// end ;
27755: GO 27711
27757: POP
27758: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27759: LD_ADDR_VAR 0 6
27763: PUSH
27764: LD_VAR 0 6
27768: PPUSH
27769: LD_VAR 0 2
27773: PUSH
27774: LD_VAR 0 2
27778: ARRAY
27779: PPUSH
27780: LD_VAR 0 3
27784: PPUSH
27785: CALL_OW 1
27789: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27790: LD_ADDR_VAR 0 7
27794: PUSH
27795: LD_VAR 0 7
27799: PPUSH
27800: LD_VAR 0 7
27804: PPUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 1
27814: ST_TO_ADDR
// for i = s_arr downto 2 do
27815: LD_ADDR_VAR 0 5
27819: PUSH
27820: DOUBLE
27821: LD_VAR 0 7
27825: INC
27826: ST_TO_ADDR
27827: LD_INT 2
27829: PUSH
27830: FOR_DOWNTO
27831: IFFALSE 27915
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27833: LD_ADDR_VAR 0 6
27837: PUSH
27838: LD_VAR 0 7
27842: PUSH
27843: LD_VAR 0 5
27847: PUSH
27848: LD_INT 1
27850: MINUS
27851: ARRAY
27852: PPUSH
27853: LD_VAR 0 2
27857: PUSH
27858: LD_VAR 0 5
27862: PUSH
27863: LD_INT 1
27865: MINUS
27866: ARRAY
27867: PPUSH
27868: LD_VAR 0 7
27872: PUSH
27873: LD_VAR 0 5
27877: ARRAY
27878: PPUSH
27879: CALL_OW 1
27883: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27884: LD_ADDR_VAR 0 7
27888: PUSH
27889: LD_VAR 0 7
27893: PPUSH
27894: LD_VAR 0 5
27898: PUSH
27899: LD_INT 1
27901: MINUS
27902: PPUSH
27903: LD_VAR 0 6
27907: PPUSH
27908: CALL_OW 1
27912: ST_TO_ADDR
// end ;
27913: GO 27830
27915: POP
27916: POP
// result := s_arr [ 1 ] ;
27917: LD_ADDR_VAR 0 4
27921: PUSH
27922: LD_VAR 0 7
27926: PUSH
27927: LD_INT 1
27929: ARRAY
27930: ST_TO_ADDR
// end ; end ;
27931: LD_VAR 0 4
27935: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27936: LD_INT 0
27938: PPUSH
27939: PPUSH
// if not list then
27940: LD_VAR 0 1
27944: NOT
27945: IFFALSE 27949
// exit ;
27947: GO 28040
// i := list [ pos1 ] ;
27949: LD_ADDR_VAR 0 5
27953: PUSH
27954: LD_VAR 0 1
27958: PUSH
27959: LD_VAR 0 2
27963: ARRAY
27964: ST_TO_ADDR
// if not i then
27965: LD_VAR 0 5
27969: NOT
27970: IFFALSE 27974
// exit ;
27972: GO 28040
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27974: LD_ADDR_VAR 0 1
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: LD_VAR 0 2
27988: PPUSH
27989: LD_VAR 0 1
27993: PUSH
27994: LD_VAR 0 3
27998: ARRAY
27999: PPUSH
28000: CALL_OW 1
28004: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28005: LD_ADDR_VAR 0 1
28009: PUSH
28010: LD_VAR 0 1
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: LD_VAR 0 5
28024: PPUSH
28025: CALL_OW 1
28029: ST_TO_ADDR
// result := list ;
28030: LD_ADDR_VAR 0 4
28034: PUSH
28035: LD_VAR 0 1
28039: ST_TO_ADDR
// end ;
28040: LD_VAR 0 4
28044: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28045: LD_INT 0
28047: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28048: LD_ADDR_VAR 0 5
28052: PUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 250
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 251
28072: PPUSH
28073: LD_VAR 0 2
28077: PPUSH
28078: LD_VAR 0 3
28082: PPUSH
28083: LD_VAR 0 4
28087: PPUSH
28088: CALL 28098 0 5
28092: ST_TO_ADDR
// end ;
28093: LD_VAR 0 5
28097: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28098: LD_INT 0
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
// if not list then
28104: LD_VAR 0 3
28108: NOT
28109: IFFALSE 28113
// exit ;
28111: GO 28501
// result := [ ] ;
28113: LD_ADDR_VAR 0 6
28117: PUSH
28118: EMPTY
28119: ST_TO_ADDR
// for i in list do
28120: LD_ADDR_VAR 0 7
28124: PUSH
28125: LD_VAR 0 3
28129: PUSH
28130: FOR_IN
28131: IFFALSE 28333
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: LD_VAR 0 7
28142: PPUSH
28143: LD_VAR 0 1
28147: PPUSH
28148: LD_VAR 0 2
28152: PPUSH
28153: CALL_OW 297
28157: ST_TO_ADDR
// if not result then
28158: LD_VAR 0 6
28162: NOT
28163: IFFALSE 28189
// result := [ [ i , tmp ] ] else
28165: LD_ADDR_VAR 0 6
28169: PUSH
28170: LD_VAR 0 7
28174: PUSH
28175: LD_VAR 0 9
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: EMPTY
28185: LIST
28186: ST_TO_ADDR
28187: GO 28331
// begin if result [ result ] [ 2 ] < tmp then
28189: LD_VAR 0 6
28193: PUSH
28194: LD_VAR 0 6
28198: ARRAY
28199: PUSH
28200: LD_INT 2
28202: ARRAY
28203: PUSH
28204: LD_VAR 0 9
28208: LESS
28209: IFFALSE 28251
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28211: LD_ADDR_VAR 0 6
28215: PUSH
28216: LD_VAR 0 6
28220: PPUSH
28221: LD_VAR 0 6
28225: PUSH
28226: LD_INT 1
28228: PLUS
28229: PPUSH
28230: LD_VAR 0 7
28234: PUSH
28235: LD_VAR 0 9
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PPUSH
28244: CALL_OW 2
28248: ST_TO_ADDR
28249: GO 28331
// for j = 1 to result do
28251: LD_ADDR_VAR 0 8
28255: PUSH
28256: DOUBLE
28257: LD_INT 1
28259: DEC
28260: ST_TO_ADDR
28261: LD_VAR 0 6
28265: PUSH
28266: FOR_TO
28267: IFFALSE 28329
// begin if tmp < result [ j ] [ 2 ] then
28269: LD_VAR 0 9
28273: PUSH
28274: LD_VAR 0 6
28278: PUSH
28279: LD_VAR 0 8
28283: ARRAY
28284: PUSH
28285: LD_INT 2
28287: ARRAY
28288: LESS
28289: IFFALSE 28327
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28291: LD_ADDR_VAR 0 6
28295: PUSH
28296: LD_VAR 0 6
28300: PPUSH
28301: LD_VAR 0 8
28305: PPUSH
28306: LD_VAR 0 7
28310: PUSH
28311: LD_VAR 0 9
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PPUSH
28320: CALL_OW 2
28324: ST_TO_ADDR
// break ;
28325: GO 28329
// end ; end ;
28327: GO 28266
28329: POP
28330: POP
// end ; end ;
28331: GO 28130
28333: POP
28334: POP
// if result and not asc then
28335: LD_VAR 0 6
28339: PUSH
28340: LD_VAR 0 4
28344: NOT
28345: AND
28346: IFFALSE 28421
// begin tmp := result ;
28348: LD_ADDR_VAR 0 9
28352: PUSH
28353: LD_VAR 0 6
28357: ST_TO_ADDR
// for i = tmp downto 1 do
28358: LD_ADDR_VAR 0 7
28362: PUSH
28363: DOUBLE
28364: LD_VAR 0 9
28368: INC
28369: ST_TO_ADDR
28370: LD_INT 1
28372: PUSH
28373: FOR_DOWNTO
28374: IFFALSE 28419
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28376: LD_ADDR_VAR 0 6
28380: PUSH
28381: LD_VAR 0 6
28385: PPUSH
28386: LD_VAR 0 9
28390: PUSH
28391: LD_VAR 0 7
28395: MINUS
28396: PUSH
28397: LD_INT 1
28399: PLUS
28400: PPUSH
28401: LD_VAR 0 9
28405: PUSH
28406: LD_VAR 0 7
28410: ARRAY
28411: PPUSH
28412: CALL_OW 1
28416: ST_TO_ADDR
28417: GO 28373
28419: POP
28420: POP
// end ; tmp := [ ] ;
28421: LD_ADDR_VAR 0 9
28425: PUSH
28426: EMPTY
28427: ST_TO_ADDR
// if mode then
28428: LD_VAR 0 5
28432: IFFALSE 28501
// begin for i = 1 to result do
28434: LD_ADDR_VAR 0 7
28438: PUSH
28439: DOUBLE
28440: LD_INT 1
28442: DEC
28443: ST_TO_ADDR
28444: LD_VAR 0 6
28448: PUSH
28449: FOR_TO
28450: IFFALSE 28489
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28452: LD_ADDR_VAR 0 9
28456: PUSH
28457: LD_VAR 0 9
28461: PPUSH
28462: LD_VAR 0 7
28466: PPUSH
28467: LD_VAR 0 6
28471: PUSH
28472: LD_VAR 0 7
28476: ARRAY
28477: PUSH
28478: LD_INT 1
28480: ARRAY
28481: PPUSH
28482: CALL_OW 1
28486: ST_TO_ADDR
28487: GO 28449
28489: POP
28490: POP
// result := tmp ;
28491: LD_ADDR_VAR 0 6
28495: PUSH
28496: LD_VAR 0 9
28500: ST_TO_ADDR
// end ; end ;
28501: LD_VAR 0 6
28505: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28506: LD_INT 0
28508: PPUSH
28509: PPUSH
28510: PPUSH
28511: PPUSH
28512: PPUSH
28513: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28514: LD_ADDR_VAR 0 5
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: ST_TO_ADDR
// if not x or not y then
28536: LD_VAR 0 2
28540: NOT
28541: PUSH
28542: LD_VAR 0 3
28546: NOT
28547: OR
28548: IFFALSE 28552
// exit ;
28550: GO 30204
// if not range then
28552: LD_VAR 0 4
28556: NOT
28557: IFFALSE 28567
// range := 10 ;
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: LD_INT 10
28566: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28567: LD_ADDR_VAR 0 8
28571: PUSH
28572: LD_INT 81
28574: PUSH
28575: LD_VAR 0 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 92
28586: PUSH
28587: LD_VAR 0 2
28591: PUSH
28592: LD_VAR 0 3
28596: PUSH
28597: LD_VAR 0 4
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 3
28610: PUSH
28611: LD_INT 21
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: PPUSH
28630: CALL_OW 69
28634: ST_TO_ADDR
// if not tmp then
28635: LD_VAR 0 8
28639: NOT
28640: IFFALSE 28644
// exit ;
28642: GO 30204
// for i in tmp do
28644: LD_ADDR_VAR 0 6
28648: PUSH
28649: LD_VAR 0 8
28653: PUSH
28654: FOR_IN
28655: IFFALSE 30179
// begin points := [ 0 , 0 , 0 ] ;
28657: LD_ADDR_VAR 0 9
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: ST_TO_ADDR
// bpoints := 1 ;
28676: LD_ADDR_VAR 0 10
28680: PUSH
28681: LD_INT 1
28683: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28684: LD_VAR 0 6
28688: PPUSH
28689: CALL_OW 247
28693: PUSH
28694: LD_INT 1
28696: DOUBLE
28697: EQUAL
28698: IFTRUE 28702
28700: GO 29280
28702: POP
// begin if GetClass ( i ) = 1 then
28703: LD_VAR 0 6
28707: PPUSH
28708: CALL_OW 257
28712: PUSH
28713: LD_INT 1
28715: EQUAL
28716: IFFALSE 28737
// points := [ 10 , 5 , 3 ] ;
28718: LD_ADDR_VAR 0 9
28722: PUSH
28723: LD_INT 10
28725: PUSH
28726: LD_INT 5
28728: PUSH
28729: LD_INT 3
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28737: LD_VAR 0 6
28741: PPUSH
28742: CALL_OW 257
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 3
28752: PUSH
28753: LD_INT 4
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: IN
28761: IFFALSE 28782
// points := [ 3 , 2 , 1 ] ;
28763: LD_ADDR_VAR 0 9
28767: PUSH
28768: LD_INT 3
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28782: LD_VAR 0 6
28786: PPUSH
28787: CALL_OW 257
28791: PUSH
28792: LD_INT 5
28794: EQUAL
28795: IFFALSE 28816
// points := [ 130 , 5 , 2 ] ;
28797: LD_ADDR_VAR 0 9
28801: PUSH
28802: LD_INT 130
28804: PUSH
28805: LD_INT 5
28807: PUSH
28808: LD_INT 2
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28816: LD_VAR 0 6
28820: PPUSH
28821: CALL_OW 257
28825: PUSH
28826: LD_INT 8
28828: EQUAL
28829: IFFALSE 28850
// points := [ 35 , 35 , 30 ] ;
28831: LD_ADDR_VAR 0 9
28835: PUSH
28836: LD_INT 35
28838: PUSH
28839: LD_INT 35
28841: PUSH
28842: LD_INT 30
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28850: LD_VAR 0 6
28854: PPUSH
28855: CALL_OW 257
28859: PUSH
28860: LD_INT 9
28862: EQUAL
28863: IFFALSE 28884
// points := [ 20 , 55 , 40 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 20
28872: PUSH
28873: LD_INT 55
28875: PUSH
28876: LD_INT 40
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28884: LD_VAR 0 6
28888: PPUSH
28889: CALL_OW 257
28893: PUSH
28894: LD_INT 12
28896: PUSH
28897: LD_INT 16
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: IN
28904: IFFALSE 28925
// points := [ 5 , 3 , 2 ] ;
28906: LD_ADDR_VAR 0 9
28910: PUSH
28911: LD_INT 5
28913: PUSH
28914: LD_INT 3
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28925: LD_VAR 0 6
28929: PPUSH
28930: CALL_OW 257
28934: PUSH
28935: LD_INT 17
28937: EQUAL
28938: IFFALSE 28959
// points := [ 100 , 50 , 75 ] ;
28940: LD_ADDR_VAR 0 9
28944: PUSH
28945: LD_INT 100
28947: PUSH
28948: LD_INT 50
28950: PUSH
28951: LD_INT 75
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28959: LD_VAR 0 6
28963: PPUSH
28964: CALL_OW 257
28968: PUSH
28969: LD_INT 15
28971: EQUAL
28972: IFFALSE 28993
// points := [ 10 , 5 , 3 ] ;
28974: LD_ADDR_VAR 0 9
28978: PUSH
28979: LD_INT 10
28981: PUSH
28982: LD_INT 5
28984: PUSH
28985: LD_INT 3
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28993: LD_VAR 0 6
28997: PPUSH
28998: CALL_OW 257
29002: PUSH
29003: LD_INT 14
29005: EQUAL
29006: IFFALSE 29027
// points := [ 10 , 0 , 0 ] ;
29008: LD_ADDR_VAR 0 9
29012: PUSH
29013: LD_INT 10
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29027: LD_VAR 0 6
29031: PPUSH
29032: CALL_OW 257
29036: PUSH
29037: LD_INT 11
29039: EQUAL
29040: IFFALSE 29061
// points := [ 30 , 10 , 5 ] ;
29042: LD_ADDR_VAR 0 9
29046: PUSH
29047: LD_INT 30
29049: PUSH
29050: LD_INT 10
29052: PUSH
29053: LD_INT 5
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: LIST
29060: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29061: LD_VAR 0 1
29065: PPUSH
29066: LD_INT 5
29068: PPUSH
29069: CALL_OW 321
29073: PUSH
29074: LD_INT 2
29076: EQUAL
29077: IFFALSE 29094
// bpoints := bpoints * 1.8 ;
29079: LD_ADDR_VAR 0 10
29083: PUSH
29084: LD_VAR 0 10
29088: PUSH
29089: LD_REAL  1.80000000000000E+0000
29092: MUL
29093: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29094: LD_VAR 0 6
29098: PPUSH
29099: CALL_OW 257
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 4
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: IN
29122: PUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: LD_INT 51
29130: PPUSH
29131: CALL_OW 321
29135: PUSH
29136: LD_INT 2
29138: EQUAL
29139: AND
29140: IFFALSE 29157
// bpoints := bpoints * 1.2 ;
29142: LD_ADDR_VAR 0 10
29146: PUSH
29147: LD_VAR 0 10
29151: PUSH
29152: LD_REAL  1.20000000000000E+0000
29155: MUL
29156: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29157: LD_VAR 0 6
29161: PPUSH
29162: CALL_OW 257
29166: PUSH
29167: LD_INT 5
29169: PUSH
29170: LD_INT 7
29172: PUSH
29173: LD_INT 9
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: LIST
29180: IN
29181: PUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: LD_INT 52
29189: PPUSH
29190: CALL_OW 321
29194: PUSH
29195: LD_INT 2
29197: EQUAL
29198: AND
29199: IFFALSE 29216
// bpoints := bpoints * 1.5 ;
29201: LD_ADDR_VAR 0 10
29205: PUSH
29206: LD_VAR 0 10
29210: PUSH
29211: LD_REAL  1.50000000000000E+0000
29214: MUL
29215: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29216: LD_VAR 0 1
29220: PPUSH
29221: LD_INT 66
29223: PPUSH
29224: CALL_OW 321
29228: PUSH
29229: LD_INT 2
29231: EQUAL
29232: IFFALSE 29249
// bpoints := bpoints * 1.1 ;
29234: LD_ADDR_VAR 0 10
29238: PUSH
29239: LD_VAR 0 10
29243: PUSH
29244: LD_REAL  1.10000000000000E+0000
29247: MUL
29248: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29249: LD_ADDR_VAR 0 10
29253: PUSH
29254: LD_VAR 0 10
29258: PUSH
29259: LD_VAR 0 6
29263: PPUSH
29264: LD_INT 1
29266: PPUSH
29267: CALL_OW 259
29271: PUSH
29272: LD_REAL  1.15000000000000E+0000
29275: MUL
29276: MUL
29277: ST_TO_ADDR
// end ; unit_vehicle :
29278: GO 30108
29280: LD_INT 2
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 30096
29288: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29289: LD_VAR 0 6
29293: PPUSH
29294: CALL_OW 264
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 42
29304: PUSH
29305: LD_INT 24
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: IN
29313: IFFALSE 29334
// points := [ 25 , 5 , 3 ] ;
29315: LD_ADDR_VAR 0 9
29319: PUSH
29320: LD_INT 25
29322: PUSH
29323: LD_INT 5
29325: PUSH
29326: LD_INT 3
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29334: LD_VAR 0 6
29338: PPUSH
29339: CALL_OW 264
29343: PUSH
29344: LD_INT 4
29346: PUSH
29347: LD_INT 43
29349: PUSH
29350: LD_INT 25
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: IN
29358: IFFALSE 29379
// points := [ 40 , 15 , 5 ] ;
29360: LD_ADDR_VAR 0 9
29364: PUSH
29365: LD_INT 40
29367: PUSH
29368: LD_INT 15
29370: PUSH
29371: LD_INT 5
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29379: LD_VAR 0 6
29383: PPUSH
29384: CALL_OW 264
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 23
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: IN
29399: IFFALSE 29420
// points := [ 7 , 25 , 8 ] ;
29401: LD_ADDR_VAR 0 9
29405: PUSH
29406: LD_INT 7
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 8
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29420: LD_VAR 0 6
29424: PPUSH
29425: CALL_OW 264
29429: PUSH
29430: LD_INT 5
29432: PUSH
29433: LD_INT 27
29435: PUSH
29436: LD_INT 44
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: IN
29444: IFFALSE 29465
// points := [ 14 , 50 , 16 ] ;
29446: LD_ADDR_VAR 0 9
29450: PUSH
29451: LD_INT 14
29453: PUSH
29454: LD_INT 50
29456: PUSH
29457: LD_INT 16
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29465: LD_VAR 0 6
29469: PPUSH
29470: CALL_OW 264
29474: PUSH
29475: LD_INT 6
29477: PUSH
29478: LD_INT 46
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: IN
29485: IFFALSE 29506
// points := [ 32 , 120 , 70 ] ;
29487: LD_ADDR_VAR 0 9
29491: PUSH
29492: LD_INT 32
29494: PUSH
29495: LD_INT 120
29497: PUSH
29498: LD_INT 70
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29506: LD_VAR 0 6
29510: PPUSH
29511: CALL_OW 264
29515: PUSH
29516: LD_INT 7
29518: PUSH
29519: LD_INT 28
29521: PUSH
29522: LD_INT 45
29524: PUSH
29525: LD_EXP 12
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: IN
29536: IFFALSE 29557
// points := [ 35 , 20 , 45 ] ;
29538: LD_ADDR_VAR 0 9
29542: PUSH
29543: LD_INT 35
29545: PUSH
29546: LD_INT 20
29548: PUSH
29549: LD_INT 45
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29557: LD_VAR 0 6
29561: PPUSH
29562: CALL_OW 264
29566: PUSH
29567: LD_INT 47
29569: PUSH
29570: EMPTY
29571: LIST
29572: IN
29573: IFFALSE 29594
// points := [ 67 , 45 , 75 ] ;
29575: LD_ADDR_VAR 0 9
29579: PUSH
29580: LD_INT 67
29582: PUSH
29583: LD_INT 45
29585: PUSH
29586: LD_INT 75
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: LIST
29593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29594: LD_VAR 0 6
29598: PPUSH
29599: CALL_OW 264
29603: PUSH
29604: LD_INT 26
29606: PUSH
29607: EMPTY
29608: LIST
29609: IN
29610: IFFALSE 29631
// points := [ 120 , 30 , 80 ] ;
29612: LD_ADDR_VAR 0 9
29616: PUSH
29617: LD_INT 120
29619: PUSH
29620: LD_INT 30
29622: PUSH
29623: LD_INT 80
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29631: LD_VAR 0 6
29635: PPUSH
29636: CALL_OW 264
29640: PUSH
29641: LD_INT 22
29643: PUSH
29644: EMPTY
29645: LIST
29646: IN
29647: IFFALSE 29668
// points := [ 40 , 1 , 1 ] ;
29649: LD_ADDR_VAR 0 9
29653: PUSH
29654: LD_INT 40
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29668: LD_VAR 0 6
29672: PPUSH
29673: CALL_OW 264
29677: PUSH
29678: LD_INT 29
29680: PUSH
29681: EMPTY
29682: LIST
29683: IN
29684: IFFALSE 29705
// points := [ 70 , 200 , 400 ] ;
29686: LD_ADDR_VAR 0 9
29690: PUSH
29691: LD_INT 70
29693: PUSH
29694: LD_INT 200
29696: PUSH
29697: LD_INT 400
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29705: LD_VAR 0 6
29709: PPUSH
29710: CALL_OW 264
29714: PUSH
29715: LD_INT 14
29717: PUSH
29718: LD_INT 53
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: IN
29725: IFFALSE 29746
// points := [ 40 , 10 , 20 ] ;
29727: LD_ADDR_VAR 0 9
29731: PUSH
29732: LD_INT 40
29734: PUSH
29735: LD_INT 10
29737: PUSH
29738: LD_INT 20
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29746: LD_VAR 0 6
29750: PPUSH
29751: CALL_OW 264
29755: PUSH
29756: LD_INT 9
29758: PUSH
29759: EMPTY
29760: LIST
29761: IN
29762: IFFALSE 29783
// points := [ 5 , 70 , 20 ] ;
29764: LD_ADDR_VAR 0 9
29768: PUSH
29769: LD_INT 5
29771: PUSH
29772: LD_INT 70
29774: PUSH
29775: LD_INT 20
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29783: LD_VAR 0 6
29787: PPUSH
29788: CALL_OW 264
29792: PUSH
29793: LD_INT 10
29795: PUSH
29796: EMPTY
29797: LIST
29798: IN
29799: IFFALSE 29820
// points := [ 35 , 110 , 70 ] ;
29801: LD_ADDR_VAR 0 9
29805: PUSH
29806: LD_INT 35
29808: PUSH
29809: LD_INT 110
29811: PUSH
29812: LD_INT 70
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29820: LD_VAR 0 6
29824: PPUSH
29825: CALL_OW 265
29829: PUSH
29830: LD_INT 25
29832: EQUAL
29833: IFFALSE 29854
// points := [ 80 , 65 , 100 ] ;
29835: LD_ADDR_VAR 0 9
29839: PUSH
29840: LD_INT 80
29842: PUSH
29843: LD_INT 65
29845: PUSH
29846: LD_INT 100
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29854: LD_VAR 0 6
29858: PPUSH
29859: CALL_OW 263
29863: PUSH
29864: LD_INT 1
29866: EQUAL
29867: IFFALSE 29902
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29869: LD_ADDR_VAR 0 10
29873: PUSH
29874: LD_VAR 0 10
29878: PUSH
29879: LD_VAR 0 6
29883: PPUSH
29884: CALL_OW 311
29888: PPUSH
29889: LD_INT 3
29891: PPUSH
29892: CALL_OW 259
29896: PUSH
29897: LD_INT 4
29899: MUL
29900: MUL
29901: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29902: LD_VAR 0 6
29906: PPUSH
29907: CALL_OW 263
29911: PUSH
29912: LD_INT 2
29914: EQUAL
29915: IFFALSE 29966
// begin j := IsControledBy ( i ) ;
29917: LD_ADDR_VAR 0 7
29921: PUSH
29922: LD_VAR 0 6
29926: PPUSH
29927: CALL_OW 312
29931: ST_TO_ADDR
// if j then
29932: LD_VAR 0 7
29936: IFFALSE 29966
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29938: LD_ADDR_VAR 0 10
29942: PUSH
29943: LD_VAR 0 10
29947: PUSH
29948: LD_VAR 0 7
29952: PPUSH
29953: LD_INT 3
29955: PPUSH
29956: CALL_OW 259
29960: PUSH
29961: LD_INT 3
29963: MUL
29964: MUL
29965: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29966: LD_VAR 0 6
29970: PPUSH
29971: CALL_OW 264
29975: PUSH
29976: LD_INT 5
29978: PUSH
29979: LD_INT 6
29981: PUSH
29982: LD_INT 46
29984: PUSH
29985: LD_INT 44
29987: PUSH
29988: LD_INT 47
29990: PUSH
29991: LD_INT 45
29993: PUSH
29994: LD_INT 28
29996: PUSH
29997: LD_INT 7
29999: PUSH
30000: LD_INT 27
30002: PUSH
30003: LD_INT 29
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: IN
30018: PUSH
30019: LD_VAR 0 1
30023: PPUSH
30024: LD_INT 52
30026: PPUSH
30027: CALL_OW 321
30031: PUSH
30032: LD_INT 2
30034: EQUAL
30035: AND
30036: IFFALSE 30053
// bpoints := bpoints * 1.2 ;
30038: LD_ADDR_VAR 0 10
30042: PUSH
30043: LD_VAR 0 10
30047: PUSH
30048: LD_REAL  1.20000000000000E+0000
30051: MUL
30052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30053: LD_VAR 0 6
30057: PPUSH
30058: CALL_OW 264
30062: PUSH
30063: LD_INT 6
30065: PUSH
30066: LD_INT 46
30068: PUSH
30069: LD_INT 47
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: IN
30077: IFFALSE 30094
// bpoints := bpoints * 1.2 ;
30079: LD_ADDR_VAR 0 10
30083: PUSH
30084: LD_VAR 0 10
30088: PUSH
30089: LD_REAL  1.20000000000000E+0000
30092: MUL
30093: ST_TO_ADDR
// end ; unit_building :
30094: GO 30108
30096: LD_INT 3
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30107
30104: POP
// ; end ;
30105: GO 30108
30107: POP
// for j = 1 to 3 do
30108: LD_ADDR_VAR 0 7
30112: PUSH
30113: DOUBLE
30114: LD_INT 1
30116: DEC
30117: ST_TO_ADDR
30118: LD_INT 3
30120: PUSH
30121: FOR_TO
30122: IFFALSE 30175
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30124: LD_ADDR_VAR 0 5
30128: PUSH
30129: LD_VAR 0 5
30133: PPUSH
30134: LD_VAR 0 7
30138: PPUSH
30139: LD_VAR 0 5
30143: PUSH
30144: LD_VAR 0 7
30148: ARRAY
30149: PUSH
30150: LD_VAR 0 9
30154: PUSH
30155: LD_VAR 0 7
30159: ARRAY
30160: PUSH
30161: LD_VAR 0 10
30165: MUL
30166: PLUS
30167: PPUSH
30168: CALL_OW 1
30172: ST_TO_ADDR
30173: GO 30121
30175: POP
30176: POP
// end ;
30177: GO 28654
30179: POP
30180: POP
// result := Replace ( result , 4 , tmp ) ;
30181: LD_ADDR_VAR 0 5
30185: PUSH
30186: LD_VAR 0 5
30190: PPUSH
30191: LD_INT 4
30193: PPUSH
30194: LD_VAR 0 8
30198: PPUSH
30199: CALL_OW 1
30203: ST_TO_ADDR
// end ;
30204: LD_VAR 0 5
30208: RET
// export function DangerAtRange ( unit , range ) ; begin
30209: LD_INT 0
30211: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30212: LD_ADDR_VAR 0 3
30216: PUSH
30217: LD_VAR 0 1
30221: PPUSH
30222: CALL_OW 255
30226: PPUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 250
30236: PPUSH
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 251
30246: PPUSH
30247: LD_VAR 0 2
30251: PPUSH
30252: CALL 28506 0 4
30256: ST_TO_ADDR
// end ;
30257: LD_VAR 0 3
30261: RET
// export function DangerInArea ( side , area ) ; begin
30262: LD_INT 0
30264: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30265: LD_ADDR_VAR 0 3
30269: PUSH
30270: LD_VAR 0 2
30274: PPUSH
30275: LD_INT 81
30277: PUSH
30278: LD_VAR 0 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 70
30291: ST_TO_ADDR
// end ;
30292: LD_VAR 0 3
30296: RET
// export function IsExtension ( b ) ; begin
30297: LD_INT 0
30299: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30300: LD_ADDR_VAR 0 2
30304: PUSH
30305: LD_VAR 0 1
30309: PUSH
30310: LD_INT 23
30312: PUSH
30313: LD_INT 20
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 17
30321: PUSH
30322: LD_INT 24
30324: PUSH
30325: LD_INT 21
30327: PUSH
30328: LD_INT 19
30330: PUSH
30331: LD_INT 16
30333: PUSH
30334: LD_INT 25
30336: PUSH
30337: LD_INT 18
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: IN
30352: ST_TO_ADDR
// end ;
30353: LD_VAR 0 2
30357: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30358: LD_INT 0
30360: PPUSH
30361: PPUSH
30362: PPUSH
// result := [ ] ;
30363: LD_ADDR_VAR 0 4
30367: PUSH
30368: EMPTY
30369: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30370: LD_ADDR_VAR 0 5
30374: PUSH
30375: LD_VAR 0 2
30379: PPUSH
30380: LD_INT 21
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 70
30394: ST_TO_ADDR
// if not tmp then
30395: LD_VAR 0 5
30399: NOT
30400: IFFALSE 30404
// exit ;
30402: GO 30468
// if checkLink then
30404: LD_VAR 0 3
30408: IFFALSE 30458
// begin for i in tmp do
30410: LD_ADDR_VAR 0 6
30414: PUSH
30415: LD_VAR 0 5
30419: PUSH
30420: FOR_IN
30421: IFFALSE 30456
// if GetBase ( i ) <> base then
30423: LD_VAR 0 6
30427: PPUSH
30428: CALL_OW 274
30432: PUSH
30433: LD_VAR 0 1
30437: NONEQUAL
30438: IFFALSE 30454
// ComLinkToBase ( base , i ) ;
30440: LD_VAR 0 1
30444: PPUSH
30445: LD_VAR 0 6
30449: PPUSH
30450: CALL_OW 169
30454: GO 30420
30456: POP
30457: POP
// end ; result := tmp ;
30458: LD_ADDR_VAR 0 4
30462: PUSH
30463: LD_VAR 0 5
30467: ST_TO_ADDR
// end ;
30468: LD_VAR 0 4
30472: RET
// export function ComComplete ( units , b ) ; var i ; begin
30473: LD_INT 0
30475: PPUSH
30476: PPUSH
// if not units then
30477: LD_VAR 0 1
30481: NOT
30482: IFFALSE 30486
// exit ;
30484: GO 30576
// for i in units do
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: LD_VAR 0 1
30495: PUSH
30496: FOR_IN
30497: IFFALSE 30574
// if BuildingStatus ( b ) = bs_build then
30499: LD_VAR 0 2
30503: PPUSH
30504: CALL_OW 461
30508: PUSH
30509: LD_INT 1
30511: EQUAL
30512: IFFALSE 30572
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30514: LD_VAR 0 4
30518: PPUSH
30519: LD_STRING h
30521: PUSH
30522: LD_VAR 0 2
30526: PPUSH
30527: CALL_OW 250
30531: PUSH
30532: LD_VAR 0 2
30536: PPUSH
30537: CALL_OW 251
30541: PUSH
30542: LD_VAR 0 2
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: PUSH
30565: EMPTY
30566: LIST
30567: PPUSH
30568: CALL_OW 446
30572: GO 30496
30574: POP
30575: POP
// end ;
30576: LD_VAR 0 3
30580: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
30587: PPUSH
30588: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30589: LD_VAR 0 1
30593: NOT
30594: PUSH
30595: LD_VAR 0 1
30599: PPUSH
30600: CALL_OW 263
30604: PUSH
30605: LD_INT 2
30607: NONEQUAL
30608: OR
30609: IFFALSE 30613
// exit ;
30611: GO 30929
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30613: LD_ADDR_VAR 0 6
30617: PUSH
30618: LD_INT 22
30620: PUSH
30621: LD_VAR 0 1
30625: PPUSH
30626: CALL_OW 255
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 30
30640: PUSH
30641: LD_INT 36
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 34
30650: PUSH
30651: LD_INT 31
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: LIST
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PPUSH
30667: CALL_OW 69
30671: ST_TO_ADDR
// if not tmp then
30672: LD_VAR 0 6
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 30929
// result := [ ] ;
30681: LD_ADDR_VAR 0 2
30685: PUSH
30686: EMPTY
30687: ST_TO_ADDR
// for i in tmp do
30688: LD_ADDR_VAR 0 3
30692: PUSH
30693: LD_VAR 0 6
30697: PUSH
30698: FOR_IN
30699: IFFALSE 30770
// begin t := UnitsInside ( i ) ;
30701: LD_ADDR_VAR 0 4
30705: PUSH
30706: LD_VAR 0 3
30710: PPUSH
30711: CALL_OW 313
30715: ST_TO_ADDR
// if t then
30716: LD_VAR 0 4
30720: IFFALSE 30768
// for j in t do
30722: LD_ADDR_VAR 0 7
30726: PUSH
30727: LD_VAR 0 4
30731: PUSH
30732: FOR_IN
30733: IFFALSE 30766
// result := Replace ( result , result + 1 , j ) ;
30735: LD_ADDR_VAR 0 2
30739: PUSH
30740: LD_VAR 0 2
30744: PPUSH
30745: LD_VAR 0 2
30749: PUSH
30750: LD_INT 1
30752: PLUS
30753: PPUSH
30754: LD_VAR 0 7
30758: PPUSH
30759: CALL_OW 1
30763: ST_TO_ADDR
30764: GO 30732
30766: POP
30767: POP
// end ;
30768: GO 30698
30770: POP
30771: POP
// if not result then
30772: LD_VAR 0 2
30776: NOT
30777: IFFALSE 30781
// exit ;
30779: GO 30929
// mech := result [ 1 ] ;
30781: LD_ADDR_VAR 0 5
30785: PUSH
30786: LD_VAR 0 2
30790: PUSH
30791: LD_INT 1
30793: ARRAY
30794: ST_TO_ADDR
// if result > 1 then
30795: LD_VAR 0 2
30799: PUSH
30800: LD_INT 1
30802: GREATER
30803: IFFALSE 30915
// begin for i = 2 to result do
30805: LD_ADDR_VAR 0 3
30809: PUSH
30810: DOUBLE
30811: LD_INT 2
30813: DEC
30814: ST_TO_ADDR
30815: LD_VAR 0 2
30819: PUSH
30820: FOR_TO
30821: IFFALSE 30913
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30823: LD_ADDR_VAR 0 4
30827: PUSH
30828: LD_VAR 0 2
30832: PUSH
30833: LD_VAR 0 3
30837: ARRAY
30838: PPUSH
30839: LD_INT 3
30841: PPUSH
30842: CALL_OW 259
30846: PUSH
30847: LD_VAR 0 2
30851: PUSH
30852: LD_VAR 0 3
30856: ARRAY
30857: PPUSH
30858: CALL_OW 432
30862: MINUS
30863: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30864: LD_VAR 0 4
30868: PUSH
30869: LD_VAR 0 5
30873: PPUSH
30874: LD_INT 3
30876: PPUSH
30877: CALL_OW 259
30881: PUSH
30882: LD_VAR 0 5
30886: PPUSH
30887: CALL_OW 432
30891: MINUS
30892: GREATEREQUAL
30893: IFFALSE 30911
// mech := result [ i ] ;
30895: LD_ADDR_VAR 0 5
30899: PUSH
30900: LD_VAR 0 2
30904: PUSH
30905: LD_VAR 0 3
30909: ARRAY
30910: ST_TO_ADDR
// end ;
30911: GO 30820
30913: POP
30914: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30915: LD_VAR 0 1
30919: PPUSH
30920: LD_VAR 0 5
30924: PPUSH
30925: CALL_OW 135
// end ;
30929: LD_VAR 0 2
30933: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30934: LD_INT 0
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
30940: PPUSH
30941: PPUSH
30942: PPUSH
30943: PPUSH
30944: PPUSH
30945: PPUSH
30946: PPUSH
30947: PPUSH
30948: PPUSH
// result := [ ] ;
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: EMPTY
30955: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 266
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: IN
30976: NOT
30977: IFFALSE 30981
// exit ;
30979: GO 32615
// if name then
30981: LD_VAR 0 3
30985: IFFALSE 31001
// SetBName ( base_dep , name ) ;
30987: LD_VAR 0 1
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL_OW 500
// base := GetBase ( base_dep ) ;
31001: LD_ADDR_VAR 0 15
31005: PUSH
31006: LD_VAR 0 1
31010: PPUSH
31011: CALL_OW 274
31015: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31016: LD_ADDR_VAR 0 16
31020: PUSH
31021: LD_VAR 0 1
31025: PPUSH
31026: CALL_OW 255
31030: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31031: LD_ADDR_VAR 0 17
31035: PUSH
31036: LD_VAR 0 1
31040: PPUSH
31041: CALL_OW 248
31045: ST_TO_ADDR
// if sources then
31046: LD_VAR 0 5
31050: IFFALSE 31097
// for i = 1 to 3 do
31052: LD_ADDR_VAR 0 8
31056: PUSH
31057: DOUBLE
31058: LD_INT 1
31060: DEC
31061: ST_TO_ADDR
31062: LD_INT 3
31064: PUSH
31065: FOR_TO
31066: IFFALSE 31095
// AddResourceType ( base , i , sources [ i ] ) ;
31068: LD_VAR 0 15
31072: PPUSH
31073: LD_VAR 0 8
31077: PPUSH
31078: LD_VAR 0 5
31082: PUSH
31083: LD_VAR 0 8
31087: ARRAY
31088: PPUSH
31089: CALL_OW 276
31093: GO 31065
31095: POP
31096: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31097: LD_ADDR_VAR 0 18
31101: PUSH
31102: LD_VAR 0 15
31106: PPUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_INT 1
31114: PPUSH
31115: CALL 30358 0 3
31119: ST_TO_ADDR
// InitHc ;
31120: CALL_OW 19
// InitUc ;
31124: CALL_OW 18
// uc_side := side ;
31128: LD_ADDR_OWVAR 20
31132: PUSH
31133: LD_VAR 0 16
31137: ST_TO_ADDR
// uc_nation := nation ;
31138: LD_ADDR_OWVAR 21
31142: PUSH
31143: LD_VAR 0 17
31147: ST_TO_ADDR
// if buildings then
31148: LD_VAR 0 18
31152: IFFALSE 32474
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31154: LD_ADDR_VAR 0 19
31158: PUSH
31159: LD_VAR 0 18
31163: PPUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 30
31169: PUSH
31170: LD_INT 29
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 30
31179: PUSH
31180: LD_INT 30
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: PPUSH
31192: CALL_OW 72
31196: ST_TO_ADDR
// if tmp then
31197: LD_VAR 0 19
31201: IFFALSE 31249
// for i in tmp do
31203: LD_ADDR_VAR 0 8
31207: PUSH
31208: LD_VAR 0 19
31212: PUSH
31213: FOR_IN
31214: IFFALSE 31247
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31216: LD_VAR 0 8
31220: PPUSH
31221: CALL_OW 250
31225: PPUSH
31226: LD_VAR 0 8
31230: PPUSH
31231: CALL_OW 251
31235: PPUSH
31236: LD_VAR 0 16
31240: PPUSH
31241: CALL_OW 441
31245: GO 31213
31247: POP
31248: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31249: LD_VAR 0 18
31253: PPUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 30
31259: PUSH
31260: LD_INT 32
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 30
31269: PUSH
31270: LD_INT 33
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: PPUSH
31282: CALL_OW 72
31286: IFFALSE 31374
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31288: LD_ADDR_VAR 0 8
31292: PUSH
31293: LD_VAR 0 18
31297: PPUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 30
31303: PUSH
31304: LD_INT 32
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 30
31313: PUSH
31314: LD_INT 33
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: PPUSH
31326: CALL_OW 72
31330: PUSH
31331: FOR_IN
31332: IFFALSE 31372
// begin if not GetBWeapon ( i ) then
31334: LD_VAR 0 8
31338: PPUSH
31339: CALL_OW 269
31343: NOT
31344: IFFALSE 31370
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31346: LD_VAR 0 8
31350: PPUSH
31351: LD_VAR 0 8
31355: PPUSH
31356: LD_VAR 0 2
31360: PPUSH
31361: CALL 32620 0 2
31365: PPUSH
31366: CALL_OW 431
// end ;
31370: GO 31331
31372: POP
31373: POP
// end ; for i = 1 to personel do
31374: LD_ADDR_VAR 0 8
31378: PUSH
31379: DOUBLE
31380: LD_INT 1
31382: DEC
31383: ST_TO_ADDR
31384: LD_VAR 0 6
31388: PUSH
31389: FOR_TO
31390: IFFALSE 32454
// begin if i > 4 then
31392: LD_VAR 0 8
31396: PUSH
31397: LD_INT 4
31399: GREATER
31400: IFFALSE 31404
// break ;
31402: GO 32454
// case i of 1 :
31404: LD_VAR 0 8
31408: PUSH
31409: LD_INT 1
31411: DOUBLE
31412: EQUAL
31413: IFTRUE 31417
31415: GO 31497
31417: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31418: LD_ADDR_VAR 0 12
31422: PUSH
31423: LD_VAR 0 18
31427: PPUSH
31428: LD_INT 22
31430: PUSH
31431: LD_VAR 0 16
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 58
31442: PUSH
31443: EMPTY
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 30
31451: PUSH
31452: LD_INT 32
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 30
31461: PUSH
31462: LD_INT 4
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 30
31471: PUSH
31472: LD_INT 5
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: PPUSH
31490: CALL_OW 72
31494: ST_TO_ADDR
31495: GO 31719
31497: LD_INT 2
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31567
31505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31506: LD_ADDR_VAR 0 12
31510: PUSH
31511: LD_VAR 0 18
31515: PPUSH
31516: LD_INT 22
31518: PUSH
31519: LD_VAR 0 16
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 2
31530: PUSH
31531: LD_INT 30
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 30
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PPUSH
31560: CALL_OW 72
31564: ST_TO_ADDR
31565: GO 31719
31567: LD_INT 3
31569: DOUBLE
31570: EQUAL
31571: IFTRUE 31575
31573: GO 31637
31575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31576: LD_ADDR_VAR 0 12
31580: PUSH
31581: LD_VAR 0 18
31585: PPUSH
31586: LD_INT 22
31588: PUSH
31589: LD_VAR 0 16
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: LD_INT 2
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 30
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PPUSH
31630: CALL_OW 72
31634: ST_TO_ADDR
31635: GO 31719
31637: LD_INT 4
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31718
31645: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31646: LD_ADDR_VAR 0 12
31650: PUSH
31651: LD_VAR 0 18
31655: PPUSH
31656: LD_INT 22
31658: PUSH
31659: LD_VAR 0 16
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: LD_INT 30
31673: PUSH
31674: LD_INT 6
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 30
31683: PUSH
31684: LD_INT 7
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 30
31693: PUSH
31694: LD_INT 8
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PPUSH
31711: CALL_OW 72
31715: ST_TO_ADDR
31716: GO 31719
31718: POP
// if i = 1 then
31719: LD_VAR 0 8
31723: PUSH
31724: LD_INT 1
31726: EQUAL
31727: IFFALSE 31838
// begin tmp := [ ] ;
31729: LD_ADDR_VAR 0 19
31733: PUSH
31734: EMPTY
31735: ST_TO_ADDR
// for j in f do
31736: LD_ADDR_VAR 0 9
31740: PUSH
31741: LD_VAR 0 12
31745: PUSH
31746: FOR_IN
31747: IFFALSE 31820
// if GetBType ( j ) = b_bunker then
31749: LD_VAR 0 9
31753: PPUSH
31754: CALL_OW 266
31758: PUSH
31759: LD_INT 32
31761: EQUAL
31762: IFFALSE 31789
// tmp := Insert ( tmp , 1 , j ) else
31764: LD_ADDR_VAR 0 19
31768: PUSH
31769: LD_VAR 0 19
31773: PPUSH
31774: LD_INT 1
31776: PPUSH
31777: LD_VAR 0 9
31781: PPUSH
31782: CALL_OW 2
31786: ST_TO_ADDR
31787: GO 31818
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31789: LD_ADDR_VAR 0 19
31793: PUSH
31794: LD_VAR 0 19
31798: PPUSH
31799: LD_VAR 0 19
31803: PUSH
31804: LD_INT 1
31806: PLUS
31807: PPUSH
31808: LD_VAR 0 9
31812: PPUSH
31813: CALL_OW 2
31817: ST_TO_ADDR
31818: GO 31746
31820: POP
31821: POP
// if tmp then
31822: LD_VAR 0 19
31826: IFFALSE 31838
// f := tmp ;
31828: LD_ADDR_VAR 0 12
31832: PUSH
31833: LD_VAR 0 19
31837: ST_TO_ADDR
// end ; x := personel [ i ] ;
31838: LD_ADDR_VAR 0 13
31842: PUSH
31843: LD_VAR 0 6
31847: PUSH
31848: LD_VAR 0 8
31852: ARRAY
31853: ST_TO_ADDR
// if x = - 1 then
31854: LD_VAR 0 13
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: EQUAL
31863: IFFALSE 32072
// begin for j in f do
31865: LD_ADDR_VAR 0 9
31869: PUSH
31870: LD_VAR 0 12
31874: PUSH
31875: FOR_IN
31876: IFFALSE 32068
// repeat InitHc ;
31878: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31882: LD_VAR 0 9
31886: PPUSH
31887: CALL_OW 266
31891: PUSH
31892: LD_INT 5
31894: EQUAL
31895: IFFALSE 31965
// begin if UnitsInside ( j ) < 3 then
31897: LD_VAR 0 9
31901: PPUSH
31902: CALL_OW 313
31906: PUSH
31907: LD_INT 3
31909: LESS
31910: IFFALSE 31946
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31912: LD_INT 0
31914: PPUSH
31915: LD_INT 5
31917: PUSH
31918: LD_INT 8
31920: PUSH
31921: LD_INT 9
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: PUSH
31929: LD_VAR 0 17
31933: ARRAY
31934: PPUSH
31935: LD_VAR 0 4
31939: PPUSH
31940: CALL_OW 380
31944: GO 31963
// PrepareHuman ( false , i , skill ) ;
31946: LD_INT 0
31948: PPUSH
31949: LD_VAR 0 8
31953: PPUSH
31954: LD_VAR 0 4
31958: PPUSH
31959: CALL_OW 380
// end else
31963: GO 31982
// PrepareHuman ( false , i , skill ) ;
31965: LD_INT 0
31967: PPUSH
31968: LD_VAR 0 8
31972: PPUSH
31973: LD_VAR 0 4
31977: PPUSH
31978: CALL_OW 380
// un := CreateHuman ;
31982: LD_ADDR_VAR 0 14
31986: PUSH
31987: CALL_OW 44
31991: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31992: LD_ADDR_VAR 0 7
31996: PUSH
31997: LD_VAR 0 7
32001: PPUSH
32002: LD_INT 1
32004: PPUSH
32005: LD_VAR 0 14
32009: PPUSH
32010: CALL_OW 2
32014: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32015: LD_VAR 0 14
32019: PPUSH
32020: LD_VAR 0 9
32024: PPUSH
32025: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32029: LD_VAR 0 9
32033: PPUSH
32034: CALL_OW 313
32038: PUSH
32039: LD_INT 6
32041: EQUAL
32042: PUSH
32043: LD_VAR 0 9
32047: PPUSH
32048: CALL_OW 266
32052: PUSH
32053: LD_INT 32
32055: PUSH
32056: LD_INT 31
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: IN
32063: OR
32064: IFFALSE 31878
32066: GO 31875
32068: POP
32069: POP
// end else
32070: GO 32452
// for j = 1 to x do
32072: LD_ADDR_VAR 0 9
32076: PUSH
32077: DOUBLE
32078: LD_INT 1
32080: DEC
32081: ST_TO_ADDR
32082: LD_VAR 0 13
32086: PUSH
32087: FOR_TO
32088: IFFALSE 32450
// begin InitHc ;
32090: CALL_OW 19
// if not f then
32094: LD_VAR 0 12
32098: NOT
32099: IFFALSE 32188
// begin PrepareHuman ( false , i , skill ) ;
32101: LD_INT 0
32103: PPUSH
32104: LD_VAR 0 8
32108: PPUSH
32109: LD_VAR 0 4
32113: PPUSH
32114: CALL_OW 380
// un := CreateHuman ;
32118: LD_ADDR_VAR 0 14
32122: PUSH
32123: CALL_OW 44
32127: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32128: LD_ADDR_VAR 0 7
32132: PUSH
32133: LD_VAR 0 7
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: LD_VAR 0 14
32145: PPUSH
32146: CALL_OW 2
32150: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32151: LD_VAR 0 14
32155: PPUSH
32156: LD_VAR 0 1
32160: PPUSH
32161: CALL_OW 250
32165: PPUSH
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 251
32175: PPUSH
32176: LD_INT 10
32178: PPUSH
32179: LD_INT 0
32181: PPUSH
32182: CALL_OW 50
// continue ;
32186: GO 32087
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32188: LD_VAR 0 12
32192: PUSH
32193: LD_INT 1
32195: ARRAY
32196: PPUSH
32197: CALL_OW 313
32201: PUSH
32202: LD_VAR 0 12
32206: PUSH
32207: LD_INT 1
32209: ARRAY
32210: PPUSH
32211: CALL_OW 266
32215: PUSH
32216: LD_INT 32
32218: PUSH
32219: LD_INT 31
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: IN
32226: AND
32227: PUSH
32228: LD_VAR 0 12
32232: PUSH
32233: LD_INT 1
32235: ARRAY
32236: PPUSH
32237: CALL_OW 313
32241: PUSH
32242: LD_INT 6
32244: EQUAL
32245: OR
32246: IFFALSE 32266
// f := Delete ( f , 1 ) ;
32248: LD_ADDR_VAR 0 12
32252: PUSH
32253: LD_VAR 0 12
32257: PPUSH
32258: LD_INT 1
32260: PPUSH
32261: CALL_OW 3
32265: ST_TO_ADDR
// if not f then
32266: LD_VAR 0 12
32270: NOT
32271: IFFALSE 32289
// begin x := x + 2 ;
32273: LD_ADDR_VAR 0 13
32277: PUSH
32278: LD_VAR 0 13
32282: PUSH
32283: LD_INT 2
32285: PLUS
32286: ST_TO_ADDR
// continue ;
32287: GO 32087
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32289: LD_VAR 0 12
32293: PUSH
32294: LD_INT 1
32296: ARRAY
32297: PPUSH
32298: CALL_OW 266
32302: PUSH
32303: LD_INT 5
32305: EQUAL
32306: IFFALSE 32380
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32308: LD_VAR 0 12
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: PPUSH
32317: CALL_OW 313
32321: PUSH
32322: LD_INT 3
32324: LESS
32325: IFFALSE 32361
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32327: LD_INT 0
32329: PPUSH
32330: LD_INT 5
32332: PUSH
32333: LD_INT 8
32335: PUSH
32336: LD_INT 9
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PUSH
32344: LD_VAR 0 17
32348: ARRAY
32349: PPUSH
32350: LD_VAR 0 4
32354: PPUSH
32355: CALL_OW 380
32359: GO 32378
// PrepareHuman ( false , i , skill ) ;
32361: LD_INT 0
32363: PPUSH
32364: LD_VAR 0 8
32368: PPUSH
32369: LD_VAR 0 4
32373: PPUSH
32374: CALL_OW 380
// end else
32378: GO 32397
// PrepareHuman ( false , i , skill ) ;
32380: LD_INT 0
32382: PPUSH
32383: LD_VAR 0 8
32387: PPUSH
32388: LD_VAR 0 4
32392: PPUSH
32393: CALL_OW 380
// un := CreateHuman ;
32397: LD_ADDR_VAR 0 14
32401: PUSH
32402: CALL_OW 44
32406: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32407: LD_ADDR_VAR 0 7
32411: PUSH
32412: LD_VAR 0 7
32416: PPUSH
32417: LD_INT 1
32419: PPUSH
32420: LD_VAR 0 14
32424: PPUSH
32425: CALL_OW 2
32429: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32430: LD_VAR 0 14
32434: PPUSH
32435: LD_VAR 0 12
32439: PUSH
32440: LD_INT 1
32442: ARRAY
32443: PPUSH
32444: CALL_OW 52
// end ;
32448: GO 32087
32450: POP
32451: POP
// end ;
32452: GO 31389
32454: POP
32455: POP
// result := result ^ buildings ;
32456: LD_ADDR_VAR 0 7
32460: PUSH
32461: LD_VAR 0 7
32465: PUSH
32466: LD_VAR 0 18
32470: ADD
32471: ST_TO_ADDR
// end else
32472: GO 32615
// begin for i = 1 to personel do
32474: LD_ADDR_VAR 0 8
32478: PUSH
32479: DOUBLE
32480: LD_INT 1
32482: DEC
32483: ST_TO_ADDR
32484: LD_VAR 0 6
32488: PUSH
32489: FOR_TO
32490: IFFALSE 32613
// begin if i > 4 then
32492: LD_VAR 0 8
32496: PUSH
32497: LD_INT 4
32499: GREATER
32500: IFFALSE 32504
// break ;
32502: GO 32613
// x := personel [ i ] ;
32504: LD_ADDR_VAR 0 13
32508: PUSH
32509: LD_VAR 0 6
32513: PUSH
32514: LD_VAR 0 8
32518: ARRAY
32519: ST_TO_ADDR
// if x = - 1 then
32520: LD_VAR 0 13
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: EQUAL
32529: IFFALSE 32533
// continue ;
32531: GO 32489
// PrepareHuman ( false , i , skill ) ;
32533: LD_INT 0
32535: PPUSH
32536: LD_VAR 0 8
32540: PPUSH
32541: LD_VAR 0 4
32545: PPUSH
32546: CALL_OW 380
// un := CreateHuman ;
32550: LD_ADDR_VAR 0 14
32554: PUSH
32555: CALL_OW 44
32559: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32560: LD_VAR 0 14
32564: PPUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 250
32574: PPUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 251
32584: PPUSH
32585: LD_INT 10
32587: PPUSH
32588: LD_INT 0
32590: PPUSH
32591: CALL_OW 50
// result := result ^ un ;
32595: LD_ADDR_VAR 0 7
32599: PUSH
32600: LD_VAR 0 7
32604: PUSH
32605: LD_VAR 0 14
32609: ADD
32610: ST_TO_ADDR
// end ;
32611: GO 32489
32613: POP
32614: POP
// end ; end ;
32615: LD_VAR 0 7
32619: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32620: LD_INT 0
32622: PPUSH
32623: PPUSH
32624: PPUSH
32625: PPUSH
32626: PPUSH
32627: PPUSH
32628: PPUSH
32629: PPUSH
32630: PPUSH
32631: PPUSH
32632: PPUSH
32633: PPUSH
32634: PPUSH
32635: PPUSH
32636: PPUSH
32637: PPUSH
// result := false ;
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 0
32645: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32646: LD_VAR 0 1
32650: NOT
32651: PUSH
32652: LD_VAR 0 1
32656: PPUSH
32657: CALL_OW 266
32661: PUSH
32662: LD_INT 32
32664: PUSH
32665: LD_INT 33
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: IN
32672: NOT
32673: OR
32674: IFFALSE 32678
// exit ;
32676: GO 33787
// nat := GetNation ( tower ) ;
32678: LD_ADDR_VAR 0 12
32682: PUSH
32683: LD_VAR 0 1
32687: PPUSH
32688: CALL_OW 248
32692: ST_TO_ADDR
// side := GetSide ( tower ) ;
32693: LD_ADDR_VAR 0 16
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 255
32707: ST_TO_ADDR
// x := GetX ( tower ) ;
32708: LD_ADDR_VAR 0 10
32712: PUSH
32713: LD_VAR 0 1
32717: PPUSH
32718: CALL_OW 250
32722: ST_TO_ADDR
// y := GetY ( tower ) ;
32723: LD_ADDR_VAR 0 11
32727: PUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: CALL_OW 251
32737: ST_TO_ADDR
// if not x or not y then
32738: LD_VAR 0 10
32742: NOT
32743: PUSH
32744: LD_VAR 0 11
32748: NOT
32749: OR
32750: IFFALSE 32754
// exit ;
32752: GO 33787
// weapon := 0 ;
32754: LD_ADDR_VAR 0 18
32758: PUSH
32759: LD_INT 0
32761: ST_TO_ADDR
// fac_list := [ ] ;
32762: LD_ADDR_VAR 0 17
32766: PUSH
32767: EMPTY
32768: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32769: LD_ADDR_VAR 0 6
32773: PUSH
32774: LD_VAR 0 1
32778: PPUSH
32779: CALL_OW 274
32783: PPUSH
32784: LD_VAR 0 2
32788: PPUSH
32789: LD_INT 0
32791: PPUSH
32792: CALL 30358 0 3
32796: PPUSH
32797: LD_INT 30
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PPUSH
32807: CALL_OW 72
32811: ST_TO_ADDR
// if not factories then
32812: LD_VAR 0 6
32816: NOT
32817: IFFALSE 32821
// exit ;
32819: GO 33787
// for i in factories do
32821: LD_ADDR_VAR 0 8
32825: PUSH
32826: LD_VAR 0 6
32830: PUSH
32831: FOR_IN
32832: IFFALSE 32857
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32834: LD_ADDR_VAR 0 17
32838: PUSH
32839: LD_VAR 0 17
32843: PUSH
32844: LD_VAR 0 8
32848: PPUSH
32849: CALL_OW 478
32853: UNION
32854: ST_TO_ADDR
32855: GO 32831
32857: POP
32858: POP
// if not fac_list then
32859: LD_VAR 0 17
32863: NOT
32864: IFFALSE 32868
// exit ;
32866: GO 33787
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32868: LD_ADDR_VAR 0 5
32872: PUSH
32873: LD_INT 4
32875: PUSH
32876: LD_INT 5
32878: PUSH
32879: LD_INT 9
32881: PUSH
32882: LD_INT 10
32884: PUSH
32885: LD_INT 6
32887: PUSH
32888: LD_INT 7
32890: PUSH
32891: LD_INT 11
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 27
32905: PUSH
32906: LD_INT 28
32908: PUSH
32909: LD_INT 26
32911: PUSH
32912: LD_INT 30
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 43
32923: PUSH
32924: LD_INT 44
32926: PUSH
32927: LD_INT 46
32929: PUSH
32930: LD_INT 45
32932: PUSH
32933: LD_INT 47
32935: PUSH
32936: LD_INT 49
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: LD_VAR 0 12
32956: ARRAY
32957: ST_TO_ADDR
// list := list isect fac_list ;
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: LD_VAR 0 5
32967: PUSH
32968: LD_VAR 0 17
32972: ISECT
32973: ST_TO_ADDR
// if not list then
32974: LD_VAR 0 5
32978: NOT
32979: IFFALSE 32983
// exit ;
32981: GO 33787
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32983: LD_VAR 0 12
32987: PUSH
32988: LD_INT 3
32990: EQUAL
32991: PUSH
32992: LD_INT 49
32994: PUSH
32995: LD_VAR 0 5
32999: IN
33000: AND
33001: PUSH
33002: LD_INT 31
33004: PPUSH
33005: LD_VAR 0 16
33009: PPUSH
33010: CALL_OW 321
33014: PUSH
33015: LD_INT 2
33017: EQUAL
33018: AND
33019: IFFALSE 33079
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33021: LD_INT 22
33023: PUSH
33024: LD_VAR 0 16
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 35
33035: PUSH
33036: LD_INT 49
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 91
33045: PUSH
33046: LD_VAR 0 1
33050: PUSH
33051: LD_INT 10
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: PPUSH
33064: CALL_OW 69
33068: NOT
33069: IFFALSE 33079
// weapon := ru_time_lapser ;
33071: LD_ADDR_VAR 0 18
33075: PUSH
33076: LD_INT 49
33078: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33079: LD_VAR 0 12
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: IN
33094: PUSH
33095: LD_INT 11
33097: PUSH
33098: LD_VAR 0 5
33102: IN
33103: PUSH
33104: LD_INT 30
33106: PUSH
33107: LD_VAR 0 5
33111: IN
33112: OR
33113: AND
33114: PUSH
33115: LD_INT 6
33117: PPUSH
33118: LD_VAR 0 16
33122: PPUSH
33123: CALL_OW 321
33127: PUSH
33128: LD_INT 2
33130: EQUAL
33131: AND
33132: IFFALSE 33297
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33134: LD_INT 22
33136: PUSH
33137: LD_VAR 0 16
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 35
33151: PUSH
33152: LD_INT 11
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 35
33161: PUSH
33162: LD_INT 30
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 91
33176: PUSH
33177: LD_VAR 0 1
33181: PUSH
33182: LD_INT 18
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: PPUSH
33195: CALL_OW 69
33199: NOT
33200: PUSH
33201: LD_INT 22
33203: PUSH
33204: LD_VAR 0 16
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: LD_INT 30
33218: PUSH
33219: LD_INT 32
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 30
33228: PUSH
33229: LD_INT 33
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 91
33243: PUSH
33244: LD_VAR 0 1
33248: PUSH
33249: LD_INT 12
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: PPUSH
33265: CALL_OW 69
33269: PUSH
33270: LD_INT 2
33272: GREATER
33273: AND
33274: IFFALSE 33297
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33276: LD_ADDR_VAR 0 18
33280: PUSH
33281: LD_INT 11
33283: PUSH
33284: LD_INT 30
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_VAR 0 12
33295: ARRAY
33296: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33297: LD_VAR 0 18
33301: NOT
33302: PUSH
33303: LD_INT 40
33305: PPUSH
33306: LD_VAR 0 16
33310: PPUSH
33311: CALL_OW 321
33315: PUSH
33316: LD_INT 2
33318: EQUAL
33319: AND
33320: PUSH
33321: LD_INT 7
33323: PUSH
33324: LD_VAR 0 5
33328: IN
33329: PUSH
33330: LD_INT 28
33332: PUSH
33333: LD_VAR 0 5
33337: IN
33338: OR
33339: PUSH
33340: LD_INT 45
33342: PUSH
33343: LD_VAR 0 5
33347: IN
33348: OR
33349: AND
33350: IFFALSE 33604
// begin hex := GetHexInfo ( x , y ) ;
33352: LD_ADDR_VAR 0 4
33356: PUSH
33357: LD_VAR 0 10
33361: PPUSH
33362: LD_VAR 0 11
33366: PPUSH
33367: CALL_OW 546
33371: ST_TO_ADDR
// if hex [ 1 ] then
33372: LD_VAR 0 4
33376: PUSH
33377: LD_INT 1
33379: ARRAY
33380: IFFALSE 33384
// exit ;
33382: GO 33787
// height := hex [ 2 ] ;
33384: LD_ADDR_VAR 0 15
33388: PUSH
33389: LD_VAR 0 4
33393: PUSH
33394: LD_INT 2
33396: ARRAY
33397: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33398: LD_ADDR_VAR 0 14
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: LD_INT 5
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: ST_TO_ADDR
// for i in tmp do
33421: LD_ADDR_VAR 0 8
33425: PUSH
33426: LD_VAR 0 14
33430: PUSH
33431: FOR_IN
33432: IFFALSE 33602
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: LD_VAR 0 10
33443: PPUSH
33444: LD_VAR 0 8
33448: PPUSH
33449: LD_INT 5
33451: PPUSH
33452: CALL_OW 272
33456: PUSH
33457: LD_VAR 0 11
33461: PPUSH
33462: LD_VAR 0 8
33466: PPUSH
33467: LD_INT 5
33469: PPUSH
33470: CALL_OW 273
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33479: LD_VAR 0 9
33483: PUSH
33484: LD_INT 1
33486: ARRAY
33487: PPUSH
33488: LD_VAR 0 9
33492: PUSH
33493: LD_INT 2
33495: ARRAY
33496: PPUSH
33497: CALL_OW 488
33501: IFFALSE 33600
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33503: LD_ADDR_VAR 0 4
33507: PUSH
33508: LD_VAR 0 9
33512: PUSH
33513: LD_INT 1
33515: ARRAY
33516: PPUSH
33517: LD_VAR 0 9
33521: PUSH
33522: LD_INT 2
33524: ARRAY
33525: PPUSH
33526: CALL_OW 546
33530: ST_TO_ADDR
// if hex [ 1 ] then
33531: LD_VAR 0 4
33535: PUSH
33536: LD_INT 1
33538: ARRAY
33539: IFFALSE 33543
// continue ;
33541: GO 33431
// h := hex [ 2 ] ;
33543: LD_ADDR_VAR 0 13
33547: PUSH
33548: LD_VAR 0 4
33552: PUSH
33553: LD_INT 2
33555: ARRAY
33556: ST_TO_ADDR
// if h + 7 < height then
33557: LD_VAR 0 13
33561: PUSH
33562: LD_INT 7
33564: PLUS
33565: PUSH
33566: LD_VAR 0 15
33570: LESS
33571: IFFALSE 33600
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33573: LD_ADDR_VAR 0 18
33577: PUSH
33578: LD_INT 7
33580: PUSH
33581: LD_INT 28
33583: PUSH
33584: LD_INT 45
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: LD_VAR 0 12
33596: ARRAY
33597: ST_TO_ADDR
// break ;
33598: GO 33602
// end ; end ; end ;
33600: GO 33431
33602: POP
33603: POP
// end ; if not weapon then
33604: LD_VAR 0 18
33608: NOT
33609: IFFALSE 33669
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33611: LD_ADDR_VAR 0 5
33615: PUSH
33616: LD_VAR 0 5
33620: PUSH
33621: LD_INT 11
33623: PUSH
33624: LD_INT 30
33626: PUSH
33627: LD_INT 49
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: DIFF
33635: ST_TO_ADDR
// if not list then
33636: LD_VAR 0 5
33640: NOT
33641: IFFALSE 33645
// exit ;
33643: GO 33787
// weapon := list [ rand ( 1 , list ) ] ;
33645: LD_ADDR_VAR 0 18
33649: PUSH
33650: LD_VAR 0 5
33654: PUSH
33655: LD_INT 1
33657: PPUSH
33658: LD_VAR 0 5
33662: PPUSH
33663: CALL_OW 12
33667: ARRAY
33668: ST_TO_ADDR
// end ; if weapon then
33669: LD_VAR 0 18
33673: IFFALSE 33787
// begin tmp := CostOfWeapon ( weapon ) ;
33675: LD_ADDR_VAR 0 14
33679: PUSH
33680: LD_VAR 0 18
33684: PPUSH
33685: CALL_OW 451
33689: ST_TO_ADDR
// j := GetBase ( tower ) ;
33690: LD_ADDR_VAR 0 9
33694: PUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 274
33704: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33705: LD_VAR 0 9
33709: PPUSH
33710: LD_INT 1
33712: PPUSH
33713: CALL_OW 275
33717: PUSH
33718: LD_VAR 0 14
33722: PUSH
33723: LD_INT 1
33725: ARRAY
33726: GREATEREQUAL
33727: PUSH
33728: LD_VAR 0 9
33732: PPUSH
33733: LD_INT 2
33735: PPUSH
33736: CALL_OW 275
33740: PUSH
33741: LD_VAR 0 14
33745: PUSH
33746: LD_INT 2
33748: ARRAY
33749: GREATEREQUAL
33750: AND
33751: PUSH
33752: LD_VAR 0 9
33756: PPUSH
33757: LD_INT 3
33759: PPUSH
33760: CALL_OW 275
33764: PUSH
33765: LD_VAR 0 14
33769: PUSH
33770: LD_INT 3
33772: ARRAY
33773: GREATEREQUAL
33774: AND
33775: IFFALSE 33787
// result := weapon ;
33777: LD_ADDR_VAR 0 3
33781: PUSH
33782: LD_VAR 0 18
33786: ST_TO_ADDR
// end ; end ;
33787: LD_VAR 0 3
33791: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33792: LD_INT 0
33794: PPUSH
33795: PPUSH
// result := true ;
33796: LD_ADDR_VAR 0 3
33800: PUSH
33801: LD_INT 1
33803: ST_TO_ADDR
// if array1 = array2 then
33804: LD_VAR 0 1
33808: PUSH
33809: LD_VAR 0 2
33813: EQUAL
33814: IFFALSE 33874
// begin for i = 1 to array1 do
33816: LD_ADDR_VAR 0 4
33820: PUSH
33821: DOUBLE
33822: LD_INT 1
33824: DEC
33825: ST_TO_ADDR
33826: LD_VAR 0 1
33830: PUSH
33831: FOR_TO
33832: IFFALSE 33870
// if array1 [ i ] <> array2 [ i ] then
33834: LD_VAR 0 1
33838: PUSH
33839: LD_VAR 0 4
33843: ARRAY
33844: PUSH
33845: LD_VAR 0 2
33849: PUSH
33850: LD_VAR 0 4
33854: ARRAY
33855: NONEQUAL
33856: IFFALSE 33868
// begin result := false ;
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 0
33865: ST_TO_ADDR
// break ;
33866: GO 33870
// end ;
33868: GO 33831
33870: POP
33871: POP
// end else
33872: GO 33882
// result := false ;
33874: LD_ADDR_VAR 0 3
33878: PUSH
33879: LD_INT 0
33881: ST_TO_ADDR
// end ;
33882: LD_VAR 0 3
33886: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33887: LD_INT 0
33889: PPUSH
33890: PPUSH
// if not array1 or not array2 then
33891: LD_VAR 0 1
33895: NOT
33896: PUSH
33897: LD_VAR 0 2
33901: NOT
33902: OR
33903: IFFALSE 33907
// exit ;
33905: GO 33971
// result := true ;
33907: LD_ADDR_VAR 0 3
33911: PUSH
33912: LD_INT 1
33914: ST_TO_ADDR
// for i = 1 to array1 do
33915: LD_ADDR_VAR 0 4
33919: PUSH
33920: DOUBLE
33921: LD_INT 1
33923: DEC
33924: ST_TO_ADDR
33925: LD_VAR 0 1
33929: PUSH
33930: FOR_TO
33931: IFFALSE 33969
// if array1 [ i ] <> array2 [ i ] then
33933: LD_VAR 0 1
33937: PUSH
33938: LD_VAR 0 4
33942: ARRAY
33943: PUSH
33944: LD_VAR 0 2
33948: PUSH
33949: LD_VAR 0 4
33953: ARRAY
33954: NONEQUAL
33955: IFFALSE 33967
// begin result := false ;
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_INT 0
33964: ST_TO_ADDR
// break ;
33965: GO 33969
// end ;
33967: GO 33930
33969: POP
33970: POP
// end ;
33971: LD_VAR 0 3
33975: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
// pom := GetBase ( fac ) ;
33981: LD_ADDR_VAR 0 5
33985: PUSH
33986: LD_VAR 0 1
33990: PPUSH
33991: CALL_OW 274
33995: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33996: LD_ADDR_VAR 0 4
34000: PUSH
34001: LD_VAR 0 2
34005: PUSH
34006: LD_INT 1
34008: ARRAY
34009: PPUSH
34010: LD_VAR 0 2
34014: PUSH
34015: LD_INT 2
34017: ARRAY
34018: PPUSH
34019: LD_VAR 0 2
34023: PUSH
34024: LD_INT 3
34026: ARRAY
34027: PPUSH
34028: LD_VAR 0 2
34032: PUSH
34033: LD_INT 4
34035: ARRAY
34036: PPUSH
34037: CALL_OW 449
34041: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34042: LD_ADDR_VAR 0 3
34046: PUSH
34047: LD_VAR 0 5
34051: PPUSH
34052: LD_INT 1
34054: PPUSH
34055: CALL_OW 275
34059: PUSH
34060: LD_VAR 0 4
34064: PUSH
34065: LD_INT 1
34067: ARRAY
34068: GREATEREQUAL
34069: PUSH
34070: LD_VAR 0 5
34074: PPUSH
34075: LD_INT 2
34077: PPUSH
34078: CALL_OW 275
34082: PUSH
34083: LD_VAR 0 4
34087: PUSH
34088: LD_INT 2
34090: ARRAY
34091: GREATEREQUAL
34092: AND
34093: PUSH
34094: LD_VAR 0 5
34098: PPUSH
34099: LD_INT 3
34101: PPUSH
34102: CALL_OW 275
34106: PUSH
34107: LD_VAR 0 4
34111: PUSH
34112: LD_INT 3
34114: ARRAY
34115: GREATEREQUAL
34116: AND
34117: ST_TO_ADDR
// end ;
34118: LD_VAR 0 3
34122: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
34127: PPUSH
34128: PPUSH
// pom := GetBase ( building ) ;
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_VAR 0 1
34138: PPUSH
34139: CALL_OW 274
34143: ST_TO_ADDR
// if not pom then
34144: LD_VAR 0 3
34148: NOT
34149: IFFALSE 34153
// exit ;
34151: GO 34323
// btype := GetBType ( building ) ;
34153: LD_ADDR_VAR 0 5
34157: PUSH
34158: LD_VAR 0 1
34162: PPUSH
34163: CALL_OW 266
34167: ST_TO_ADDR
// if btype = b_armoury then
34168: LD_VAR 0 5
34172: PUSH
34173: LD_INT 4
34175: EQUAL
34176: IFFALSE 34186
// btype := b_barracks ;
34178: LD_ADDR_VAR 0 5
34182: PUSH
34183: LD_INT 5
34185: ST_TO_ADDR
// if btype = b_depot then
34186: LD_VAR 0 5
34190: PUSH
34191: LD_INT 0
34193: EQUAL
34194: IFFALSE 34204
// btype := b_warehouse ;
34196: LD_ADDR_VAR 0 5
34200: PUSH
34201: LD_INT 1
34203: ST_TO_ADDR
// if btype = b_workshop then
34204: LD_VAR 0 5
34208: PUSH
34209: LD_INT 2
34211: EQUAL
34212: IFFALSE 34222
// btype := b_factory ;
34214: LD_ADDR_VAR 0 5
34218: PUSH
34219: LD_INT 3
34221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34222: LD_ADDR_VAR 0 4
34226: PUSH
34227: LD_VAR 0 5
34231: PPUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 248
34241: PPUSH
34242: CALL_OW 450
34246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34247: LD_ADDR_VAR 0 2
34251: PUSH
34252: LD_VAR 0 3
34256: PPUSH
34257: LD_INT 1
34259: PPUSH
34260: CALL_OW 275
34264: PUSH
34265: LD_VAR 0 4
34269: PUSH
34270: LD_INT 1
34272: ARRAY
34273: GREATEREQUAL
34274: PUSH
34275: LD_VAR 0 3
34279: PPUSH
34280: LD_INT 2
34282: PPUSH
34283: CALL_OW 275
34287: PUSH
34288: LD_VAR 0 4
34292: PUSH
34293: LD_INT 2
34295: ARRAY
34296: GREATEREQUAL
34297: AND
34298: PUSH
34299: LD_VAR 0 3
34303: PPUSH
34304: LD_INT 3
34306: PPUSH
34307: CALL_OW 275
34311: PUSH
34312: LD_VAR 0 4
34316: PUSH
34317: LD_INT 3
34319: ARRAY
34320: GREATEREQUAL
34321: AND
34322: ST_TO_ADDR
// end ;
34323: LD_VAR 0 2
34327: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34328: LD_INT 0
34330: PPUSH
34331: PPUSH
34332: PPUSH
// pom := GetBase ( building ) ;
34333: LD_ADDR_VAR 0 4
34337: PUSH
34338: LD_VAR 0 1
34342: PPUSH
34343: CALL_OW 274
34347: ST_TO_ADDR
// if not pom then
34348: LD_VAR 0 4
34352: NOT
34353: IFFALSE 34357
// exit ;
34355: GO 34458
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34357: LD_ADDR_VAR 0 5
34361: PUSH
34362: LD_VAR 0 2
34366: PPUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 248
34376: PPUSH
34377: CALL_OW 450
34381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34382: LD_ADDR_VAR 0 3
34386: PUSH
34387: LD_VAR 0 4
34391: PPUSH
34392: LD_INT 1
34394: PPUSH
34395: CALL_OW 275
34399: PUSH
34400: LD_VAR 0 5
34404: PUSH
34405: LD_INT 1
34407: ARRAY
34408: GREATEREQUAL
34409: PUSH
34410: LD_VAR 0 4
34414: PPUSH
34415: LD_INT 2
34417: PPUSH
34418: CALL_OW 275
34422: PUSH
34423: LD_VAR 0 5
34427: PUSH
34428: LD_INT 2
34430: ARRAY
34431: GREATEREQUAL
34432: AND
34433: PUSH
34434: LD_VAR 0 4
34438: PPUSH
34439: LD_INT 3
34441: PPUSH
34442: CALL_OW 275
34446: PUSH
34447: LD_VAR 0 5
34451: PUSH
34452: LD_INT 3
34454: ARRAY
34455: GREATEREQUAL
34456: AND
34457: ST_TO_ADDR
// end ;
34458: LD_VAR 0 3
34462: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34463: LD_INT 0
34465: PPUSH
34466: PPUSH
34467: PPUSH
34468: PPUSH
34469: PPUSH
34470: PPUSH
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
// result := false ;
34476: LD_ADDR_VAR 0 8
34480: PUSH
34481: LD_INT 0
34483: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34484: LD_VAR 0 5
34488: NOT
34489: PUSH
34490: LD_VAR 0 1
34494: NOT
34495: OR
34496: PUSH
34497: LD_VAR 0 2
34501: NOT
34502: OR
34503: PUSH
34504: LD_VAR 0 3
34508: NOT
34509: OR
34510: IFFALSE 34514
// exit ;
34512: GO 35328
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34514: LD_ADDR_VAR 0 14
34518: PUSH
34519: LD_VAR 0 1
34523: PPUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: LD_VAR 0 3
34533: PPUSH
34534: LD_VAR 0 4
34538: PPUSH
34539: LD_VAR 0 5
34543: PUSH
34544: LD_INT 1
34546: ARRAY
34547: PPUSH
34548: CALL_OW 248
34552: PPUSH
34553: LD_INT 0
34555: PPUSH
34556: CALL 36565 0 6
34560: ST_TO_ADDR
// if not hexes then
34561: LD_VAR 0 14
34565: NOT
34566: IFFALSE 34570
// exit ;
34568: GO 35328
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34570: LD_ADDR_VAR 0 17
34574: PUSH
34575: LD_VAR 0 5
34579: PPUSH
34580: LD_INT 22
34582: PUSH
34583: LD_VAR 0 13
34587: PPUSH
34588: CALL_OW 255
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 30
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 30
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PPUSH
34629: CALL_OW 72
34633: ST_TO_ADDR
// for i = 1 to hexes do
34634: LD_ADDR_VAR 0 9
34638: PUSH
34639: DOUBLE
34640: LD_INT 1
34642: DEC
34643: ST_TO_ADDR
34644: LD_VAR 0 14
34648: PUSH
34649: FOR_TO
34650: IFFALSE 35326
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34652: LD_ADDR_VAR 0 13
34656: PUSH
34657: LD_VAR 0 14
34661: PUSH
34662: LD_VAR 0 9
34666: ARRAY
34667: PUSH
34668: LD_INT 1
34670: ARRAY
34671: PPUSH
34672: LD_VAR 0 14
34676: PUSH
34677: LD_VAR 0 9
34681: ARRAY
34682: PUSH
34683: LD_INT 2
34685: ARRAY
34686: PPUSH
34687: CALL_OW 428
34691: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34692: LD_VAR 0 14
34696: PUSH
34697: LD_VAR 0 9
34701: ARRAY
34702: PUSH
34703: LD_INT 1
34705: ARRAY
34706: PPUSH
34707: LD_VAR 0 14
34711: PUSH
34712: LD_VAR 0 9
34716: ARRAY
34717: PUSH
34718: LD_INT 2
34720: ARRAY
34721: PPUSH
34722: CALL_OW 351
34726: PUSH
34727: LD_VAR 0 14
34731: PUSH
34732: LD_VAR 0 9
34736: ARRAY
34737: PUSH
34738: LD_INT 1
34740: ARRAY
34741: PPUSH
34742: LD_VAR 0 14
34746: PUSH
34747: LD_VAR 0 9
34751: ARRAY
34752: PUSH
34753: LD_INT 2
34755: ARRAY
34756: PPUSH
34757: CALL_OW 488
34761: NOT
34762: OR
34763: PUSH
34764: LD_VAR 0 13
34768: PPUSH
34769: CALL_OW 247
34773: PUSH
34774: LD_INT 3
34776: EQUAL
34777: OR
34778: IFFALSE 34784
// exit ;
34780: POP
34781: POP
34782: GO 35328
// if not tmp then
34784: LD_VAR 0 13
34788: NOT
34789: IFFALSE 34793
// continue ;
34791: GO 34649
// result := true ;
34793: LD_ADDR_VAR 0 8
34797: PUSH
34798: LD_INT 1
34800: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34801: LD_VAR 0 6
34805: PUSH
34806: LD_VAR 0 13
34810: PPUSH
34811: CALL_OW 247
34815: PUSH
34816: LD_INT 2
34818: EQUAL
34819: AND
34820: PUSH
34821: LD_VAR 0 13
34825: PPUSH
34826: CALL_OW 263
34830: PUSH
34831: LD_INT 1
34833: EQUAL
34834: AND
34835: IFFALSE 34999
// begin if IsDrivenBy ( tmp ) then
34837: LD_VAR 0 13
34841: PPUSH
34842: CALL_OW 311
34846: IFFALSE 34850
// continue ;
34848: GO 34649
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34850: LD_VAR 0 6
34854: PPUSH
34855: LD_INT 3
34857: PUSH
34858: LD_INT 60
34860: PUSH
34861: EMPTY
34862: LIST
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: LD_INT 55
34873: PUSH
34874: EMPTY
34875: LIST
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL_OW 72
34889: IFFALSE 34997
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34891: LD_ADDR_VAR 0 18
34895: PUSH
34896: LD_VAR 0 6
34900: PPUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 60
34906: PUSH
34907: EMPTY
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 3
34916: PUSH
34917: LD_INT 55
34919: PUSH
34920: EMPTY
34921: LIST
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PPUSH
34931: CALL_OW 72
34935: PUSH
34936: LD_INT 1
34938: ARRAY
34939: ST_TO_ADDR
// if IsInUnit ( driver ) then
34940: LD_VAR 0 18
34944: PPUSH
34945: CALL_OW 310
34949: IFFALSE 34960
// ComExit ( driver ) ;
34951: LD_VAR 0 18
34955: PPUSH
34956: CALL 59749 0 1
// AddComEnterUnit ( driver , tmp ) ;
34960: LD_VAR 0 18
34964: PPUSH
34965: LD_VAR 0 13
34969: PPUSH
34970: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34974: LD_VAR 0 18
34978: PPUSH
34979: LD_VAR 0 7
34983: PPUSH
34984: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34988: LD_VAR 0 18
34992: PPUSH
34993: CALL_OW 181
// end ; continue ;
34997: GO 34649
// end ; if not cleaners or not tmp in cleaners then
34999: LD_VAR 0 6
35003: NOT
35004: PUSH
35005: LD_VAR 0 13
35009: PUSH
35010: LD_VAR 0 6
35014: IN
35015: NOT
35016: OR
35017: IFFALSE 35324
// begin if dep then
35019: LD_VAR 0 17
35023: IFFALSE 35159
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35025: LD_ADDR_VAR 0 16
35029: PUSH
35030: LD_VAR 0 17
35034: PUSH
35035: LD_INT 1
35037: ARRAY
35038: PPUSH
35039: CALL_OW 250
35043: PPUSH
35044: LD_VAR 0 17
35048: PUSH
35049: LD_INT 1
35051: ARRAY
35052: PPUSH
35053: CALL_OW 254
35057: PPUSH
35058: LD_INT 5
35060: PPUSH
35061: CALL_OW 272
35065: PUSH
35066: LD_VAR 0 17
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: PPUSH
35075: CALL_OW 251
35079: PPUSH
35080: LD_VAR 0 17
35084: PUSH
35085: LD_INT 1
35087: ARRAY
35088: PPUSH
35089: CALL_OW 254
35093: PPUSH
35094: LD_INT 5
35096: PPUSH
35097: CALL_OW 273
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35106: LD_VAR 0 16
35110: PUSH
35111: LD_INT 1
35113: ARRAY
35114: PPUSH
35115: LD_VAR 0 16
35119: PUSH
35120: LD_INT 2
35122: ARRAY
35123: PPUSH
35124: CALL_OW 488
35128: IFFALSE 35159
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35130: LD_VAR 0 13
35134: PPUSH
35135: LD_VAR 0 16
35139: PUSH
35140: LD_INT 1
35142: ARRAY
35143: PPUSH
35144: LD_VAR 0 16
35148: PUSH
35149: LD_INT 2
35151: ARRAY
35152: PPUSH
35153: CALL_OW 111
// continue ;
35157: GO 34649
// end ; end ; r := GetDir ( tmp ) ;
35159: LD_ADDR_VAR 0 15
35163: PUSH
35164: LD_VAR 0 13
35168: PPUSH
35169: CALL_OW 254
35173: ST_TO_ADDR
// if r = 5 then
35174: LD_VAR 0 15
35178: PUSH
35179: LD_INT 5
35181: EQUAL
35182: IFFALSE 35192
// r := 0 ;
35184: LD_ADDR_VAR 0 15
35188: PUSH
35189: LD_INT 0
35191: ST_TO_ADDR
// for j = r to 5 do
35192: LD_ADDR_VAR 0 10
35196: PUSH
35197: DOUBLE
35198: LD_VAR 0 15
35202: DEC
35203: ST_TO_ADDR
35204: LD_INT 5
35206: PUSH
35207: FOR_TO
35208: IFFALSE 35322
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35210: LD_ADDR_VAR 0 11
35214: PUSH
35215: LD_VAR 0 13
35219: PPUSH
35220: CALL_OW 250
35224: PPUSH
35225: LD_VAR 0 10
35229: PPUSH
35230: LD_INT 2
35232: PPUSH
35233: CALL_OW 272
35237: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35238: LD_ADDR_VAR 0 12
35242: PUSH
35243: LD_VAR 0 13
35247: PPUSH
35248: CALL_OW 251
35252: PPUSH
35253: LD_VAR 0 10
35257: PPUSH
35258: LD_INT 2
35260: PPUSH
35261: CALL_OW 273
35265: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35266: LD_VAR 0 11
35270: PPUSH
35271: LD_VAR 0 12
35275: PPUSH
35276: CALL_OW 488
35280: PUSH
35281: LD_VAR 0 11
35285: PPUSH
35286: LD_VAR 0 12
35290: PPUSH
35291: CALL_OW 428
35295: NOT
35296: AND
35297: IFFALSE 35320
// begin ComMoveXY ( tmp , _x , _y ) ;
35299: LD_VAR 0 13
35303: PPUSH
35304: LD_VAR 0 11
35308: PPUSH
35309: LD_VAR 0 12
35313: PPUSH
35314: CALL_OW 111
// break ;
35318: GO 35322
// end ; end ;
35320: GO 35207
35322: POP
35323: POP
// end ; end ;
35324: GO 34649
35326: POP
35327: POP
// end ;
35328: LD_VAR 0 8
35332: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35333: LD_INT 0
35335: PPUSH
// result := true ;
35336: LD_ADDR_VAR 0 3
35340: PUSH
35341: LD_INT 1
35343: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35344: LD_VAR 0 2
35348: PUSH
35349: LD_INT 24
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35363
35355: LD_INT 33
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35363
35361: GO 35388
35363: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_INT 32
35371: PPUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL_OW 321
35381: PUSH
35382: LD_INT 2
35384: EQUAL
35385: ST_TO_ADDR
35386: GO 35708
35388: LD_INT 20
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35421
35396: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 6
35404: PPUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: CALL_OW 321
35414: PUSH
35415: LD_INT 2
35417: EQUAL
35418: ST_TO_ADDR
35419: GO 35708
35421: LD_INT 22
35423: DOUBLE
35424: EQUAL
35425: IFTRUE 35435
35427: LD_INT 36
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35460
35435: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35436: LD_ADDR_VAR 0 3
35440: PUSH
35441: LD_INT 15
35443: PPUSH
35444: LD_VAR 0 1
35448: PPUSH
35449: CALL_OW 321
35453: PUSH
35454: LD_INT 2
35456: EQUAL
35457: ST_TO_ADDR
35458: GO 35708
35460: LD_INT 30
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35493
35468: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35469: LD_ADDR_VAR 0 3
35473: PUSH
35474: LD_INT 20
35476: PPUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 321
35486: PUSH
35487: LD_INT 2
35489: EQUAL
35490: ST_TO_ADDR
35491: GO 35708
35493: LD_INT 28
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35507
35499: LD_INT 21
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35507
35505: GO 35532
35507: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35508: LD_ADDR_VAR 0 3
35512: PUSH
35513: LD_INT 21
35515: PPUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 321
35525: PUSH
35526: LD_INT 2
35528: EQUAL
35529: ST_TO_ADDR
35530: GO 35708
35532: LD_INT 16
35534: DOUBLE
35535: EQUAL
35536: IFTRUE 35540
35538: GO 35567
35540: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35541: LD_ADDR_VAR 0 3
35545: PUSH
35546: LD_EXP 19
35550: PPUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 321
35560: PUSH
35561: LD_INT 2
35563: EQUAL
35564: ST_TO_ADDR
35565: GO 35708
35567: LD_INT 19
35569: DOUBLE
35570: EQUAL
35571: IFTRUE 35581
35573: LD_INT 23
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 35608
35581: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35582: LD_ADDR_VAR 0 3
35586: PUSH
35587: LD_EXP 18
35591: PPUSH
35592: LD_VAR 0 1
35596: PPUSH
35597: CALL_OW 321
35601: PUSH
35602: LD_INT 2
35604: EQUAL
35605: ST_TO_ADDR
35606: GO 35708
35608: LD_INT 17
35610: DOUBLE
35611: EQUAL
35612: IFTRUE 35616
35614: GO 35641
35616: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35617: LD_ADDR_VAR 0 3
35621: PUSH
35622: LD_INT 39
35624: PPUSH
35625: LD_VAR 0 1
35629: PPUSH
35630: CALL_OW 321
35634: PUSH
35635: LD_INT 2
35637: EQUAL
35638: ST_TO_ADDR
35639: GO 35708
35641: LD_INT 18
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35649
35647: GO 35674
35649: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_INT 40
35657: PPUSH
35658: LD_VAR 0 1
35662: PPUSH
35663: CALL_OW 321
35667: PUSH
35668: LD_INT 2
35670: EQUAL
35671: ST_TO_ADDR
35672: GO 35708
35674: LD_INT 27
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35682
35680: GO 35707
35682: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35683: LD_ADDR_VAR 0 3
35687: PUSH
35688: LD_INT 35
35690: PPUSH
35691: LD_VAR 0 1
35695: PPUSH
35696: CALL_OW 321
35700: PUSH
35701: LD_INT 2
35703: EQUAL
35704: ST_TO_ADDR
35705: GO 35708
35707: POP
// end ;
35708: LD_VAR 0 3
35712: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35713: LD_INT 0
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
// result := false ;
35726: LD_ADDR_VAR 0 6
35730: PUSH
35731: LD_INT 0
35733: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35734: LD_VAR 0 1
35738: NOT
35739: PUSH
35740: LD_VAR 0 1
35744: PPUSH
35745: CALL_OW 266
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: IN
35760: NOT
35761: OR
35762: PUSH
35763: LD_VAR 0 2
35767: NOT
35768: OR
35769: PUSH
35770: LD_VAR 0 5
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 2
35783: PUSH
35784: LD_INT 3
35786: PUSH
35787: LD_INT 4
35789: PUSH
35790: LD_INT 5
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: IN
35801: NOT
35802: OR
35803: PUSH
35804: LD_VAR 0 3
35808: PPUSH
35809: LD_VAR 0 4
35813: PPUSH
35814: CALL_OW 488
35818: NOT
35819: OR
35820: IFFALSE 35824
// exit ;
35822: GO 36560
// side := GetSide ( depot ) ;
35824: LD_ADDR_VAR 0 9
35828: PUSH
35829: LD_VAR 0 1
35833: PPUSH
35834: CALL_OW 255
35838: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35839: LD_VAR 0 9
35843: PPUSH
35844: LD_VAR 0 2
35848: PPUSH
35849: CALL 35333 0 2
35853: NOT
35854: IFFALSE 35858
// exit ;
35856: GO 36560
// pom := GetBase ( depot ) ;
35858: LD_ADDR_VAR 0 10
35862: PUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 274
35872: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35873: LD_ADDR_VAR 0 11
35877: PUSH
35878: LD_VAR 0 2
35882: PPUSH
35883: LD_VAR 0 1
35887: PPUSH
35888: CALL_OW 248
35892: PPUSH
35893: CALL_OW 450
35897: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35898: LD_VAR 0 10
35902: PPUSH
35903: LD_INT 1
35905: PPUSH
35906: CALL_OW 275
35910: PUSH
35911: LD_VAR 0 11
35915: PUSH
35916: LD_INT 1
35918: ARRAY
35919: GREATEREQUAL
35920: PUSH
35921: LD_VAR 0 10
35925: PPUSH
35926: LD_INT 2
35928: PPUSH
35929: CALL_OW 275
35933: PUSH
35934: LD_VAR 0 11
35938: PUSH
35939: LD_INT 2
35941: ARRAY
35942: GREATEREQUAL
35943: AND
35944: PUSH
35945: LD_VAR 0 10
35949: PPUSH
35950: LD_INT 3
35952: PPUSH
35953: CALL_OW 275
35957: PUSH
35958: LD_VAR 0 11
35962: PUSH
35963: LD_INT 3
35965: ARRAY
35966: GREATEREQUAL
35967: AND
35968: NOT
35969: IFFALSE 35973
// exit ;
35971: GO 36560
// if GetBType ( depot ) = b_depot then
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 266
35982: PUSH
35983: LD_INT 0
35985: EQUAL
35986: IFFALSE 35998
// dist := 28 else
35988: LD_ADDR_VAR 0 14
35992: PUSH
35993: LD_INT 28
35995: ST_TO_ADDR
35996: GO 36006
// dist := 36 ;
35998: LD_ADDR_VAR 0 14
36002: PUSH
36003: LD_INT 36
36005: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36006: LD_VAR 0 1
36010: PPUSH
36011: LD_VAR 0 3
36015: PPUSH
36016: LD_VAR 0 4
36020: PPUSH
36021: CALL_OW 297
36025: PUSH
36026: LD_VAR 0 14
36030: GREATER
36031: IFFALSE 36035
// exit ;
36033: GO 36560
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36035: LD_ADDR_VAR 0 12
36039: PUSH
36040: LD_VAR 0 2
36044: PPUSH
36045: LD_VAR 0 3
36049: PPUSH
36050: LD_VAR 0 4
36054: PPUSH
36055: LD_VAR 0 5
36059: PPUSH
36060: LD_VAR 0 1
36064: PPUSH
36065: CALL_OW 248
36069: PPUSH
36070: LD_INT 0
36072: PPUSH
36073: CALL 36565 0 6
36077: ST_TO_ADDR
// if not hexes then
36078: LD_VAR 0 12
36082: NOT
36083: IFFALSE 36087
// exit ;
36085: GO 36560
// hex := GetHexInfo ( x , y ) ;
36087: LD_ADDR_VAR 0 15
36091: PUSH
36092: LD_VAR 0 3
36096: PPUSH
36097: LD_VAR 0 4
36101: PPUSH
36102: CALL_OW 546
36106: ST_TO_ADDR
// if hex [ 1 ] then
36107: LD_VAR 0 15
36111: PUSH
36112: LD_INT 1
36114: ARRAY
36115: IFFALSE 36119
// exit ;
36117: GO 36560
// height := hex [ 2 ] ;
36119: LD_ADDR_VAR 0 13
36123: PUSH
36124: LD_VAR 0 15
36128: PUSH
36129: LD_INT 2
36131: ARRAY
36132: ST_TO_ADDR
// for i = 1 to hexes do
36133: LD_ADDR_VAR 0 7
36137: PUSH
36138: DOUBLE
36139: LD_INT 1
36141: DEC
36142: ST_TO_ADDR
36143: LD_VAR 0 12
36147: PUSH
36148: FOR_TO
36149: IFFALSE 36479
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36151: LD_VAR 0 12
36155: PUSH
36156: LD_VAR 0 7
36160: ARRAY
36161: PUSH
36162: LD_INT 1
36164: ARRAY
36165: PPUSH
36166: LD_VAR 0 12
36170: PUSH
36171: LD_VAR 0 7
36175: ARRAY
36176: PUSH
36177: LD_INT 2
36179: ARRAY
36180: PPUSH
36181: CALL_OW 488
36185: NOT
36186: PUSH
36187: LD_VAR 0 12
36191: PUSH
36192: LD_VAR 0 7
36196: ARRAY
36197: PUSH
36198: LD_INT 1
36200: ARRAY
36201: PPUSH
36202: LD_VAR 0 12
36206: PUSH
36207: LD_VAR 0 7
36211: ARRAY
36212: PUSH
36213: LD_INT 2
36215: ARRAY
36216: PPUSH
36217: CALL_OW 428
36221: PUSH
36222: LD_INT 0
36224: GREATER
36225: OR
36226: PUSH
36227: LD_VAR 0 12
36231: PUSH
36232: LD_VAR 0 7
36236: ARRAY
36237: PUSH
36238: LD_INT 1
36240: ARRAY
36241: PPUSH
36242: LD_VAR 0 12
36246: PUSH
36247: LD_VAR 0 7
36251: ARRAY
36252: PUSH
36253: LD_INT 2
36255: ARRAY
36256: PPUSH
36257: CALL_OW 351
36261: OR
36262: IFFALSE 36268
// exit ;
36264: POP
36265: POP
36266: GO 36560
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36268: LD_ADDR_VAR 0 8
36272: PUSH
36273: LD_VAR 0 12
36277: PUSH
36278: LD_VAR 0 7
36282: ARRAY
36283: PUSH
36284: LD_INT 1
36286: ARRAY
36287: PPUSH
36288: LD_VAR 0 12
36292: PUSH
36293: LD_VAR 0 7
36297: ARRAY
36298: PUSH
36299: LD_INT 2
36301: ARRAY
36302: PPUSH
36303: CALL_OW 546
36307: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36308: LD_VAR 0 8
36312: PUSH
36313: LD_INT 1
36315: ARRAY
36316: PUSH
36317: LD_VAR 0 8
36321: PUSH
36322: LD_INT 2
36324: ARRAY
36325: PUSH
36326: LD_VAR 0 13
36330: PUSH
36331: LD_INT 2
36333: PLUS
36334: GREATER
36335: OR
36336: PUSH
36337: LD_VAR 0 8
36341: PUSH
36342: LD_INT 2
36344: ARRAY
36345: PUSH
36346: LD_VAR 0 13
36350: PUSH
36351: LD_INT 2
36353: MINUS
36354: LESS
36355: OR
36356: PUSH
36357: LD_VAR 0 8
36361: PUSH
36362: LD_INT 3
36364: ARRAY
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 8
36371: PUSH
36372: LD_INT 9
36374: PUSH
36375: LD_INT 10
36377: PUSH
36378: LD_INT 11
36380: PUSH
36381: LD_INT 12
36383: PUSH
36384: LD_INT 13
36386: PUSH
36387: LD_INT 16
36389: PUSH
36390: LD_INT 17
36392: PUSH
36393: LD_INT 18
36395: PUSH
36396: LD_INT 19
36398: PUSH
36399: LD_INT 20
36401: PUSH
36402: LD_INT 21
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: IN
36420: NOT
36421: OR
36422: PUSH
36423: LD_VAR 0 8
36427: PUSH
36428: LD_INT 5
36430: ARRAY
36431: NOT
36432: OR
36433: PUSH
36434: LD_VAR 0 8
36438: PUSH
36439: LD_INT 6
36441: ARRAY
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: LD_INT 7
36451: PUSH
36452: LD_INT 9
36454: PUSH
36455: LD_INT 10
36457: PUSH
36458: LD_INT 11
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: IN
36469: NOT
36470: OR
36471: IFFALSE 36477
// exit ;
36473: POP
36474: POP
36475: GO 36560
// end ;
36477: GO 36148
36479: POP
36480: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36481: LD_VAR 0 9
36485: PPUSH
36486: LD_VAR 0 3
36490: PPUSH
36491: LD_VAR 0 4
36495: PPUSH
36496: LD_INT 20
36498: PPUSH
36499: CALL 28506 0 4
36503: PUSH
36504: LD_INT 4
36506: ARRAY
36507: IFFALSE 36511
// exit ;
36509: GO 36560
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36511: LD_VAR 0 2
36515: PUSH
36516: LD_INT 29
36518: PUSH
36519: LD_INT 30
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: IN
36526: PUSH
36527: LD_VAR 0 3
36531: PPUSH
36532: LD_VAR 0 4
36536: PPUSH
36537: LD_VAR 0 9
36541: PPUSH
36542: CALL_OW 440
36546: NOT
36547: AND
36548: IFFALSE 36552
// exit ;
36550: GO 36560
// result := true ;
36552: LD_ADDR_VAR 0 6
36556: PUSH
36557: LD_INT 1
36559: ST_TO_ADDR
// end ;
36560: LD_VAR 0 6
36564: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36565: LD_INT 0
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
36577: PPUSH
36578: PPUSH
36579: PPUSH
36580: PPUSH
36581: PPUSH
36582: PPUSH
36583: PPUSH
36584: PPUSH
36585: PPUSH
36586: PPUSH
36587: PPUSH
36588: PPUSH
36589: PPUSH
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
36594: PPUSH
36595: PPUSH
36596: PPUSH
36597: PPUSH
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
36604: PPUSH
36605: PPUSH
36606: PPUSH
36607: PPUSH
36608: PPUSH
36609: PPUSH
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
36621: PPUSH
36622: PPUSH
36623: PPUSH
36624: PPUSH
// result = [ ] ;
36625: LD_ADDR_VAR 0 7
36629: PUSH
36630: EMPTY
36631: ST_TO_ADDR
// temp_list = [ ] ;
36632: LD_ADDR_VAR 0 9
36636: PUSH
36637: EMPTY
36638: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36639: LD_VAR 0 4
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: LD_INT 2
36652: PUSH
36653: LD_INT 3
36655: PUSH
36656: LD_INT 4
36658: PUSH
36659: LD_INT 5
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: IN
36670: NOT
36671: PUSH
36672: LD_VAR 0 1
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: IN
36687: PUSH
36688: LD_VAR 0 5
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: LD_INT 3
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: IN
36707: NOT
36708: AND
36709: OR
36710: IFFALSE 36714
// exit ;
36712: GO 55105
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36714: LD_VAR 0 1
36718: PUSH
36719: LD_INT 6
36721: PUSH
36722: LD_INT 7
36724: PUSH
36725: LD_INT 8
36727: PUSH
36728: LD_INT 13
36730: PUSH
36731: LD_INT 12
36733: PUSH
36734: LD_INT 15
36736: PUSH
36737: LD_INT 11
36739: PUSH
36740: LD_INT 14
36742: PUSH
36743: LD_INT 10
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: IN
36757: IFFALSE 36767
// btype = b_lab ;
36759: LD_ADDR_VAR 0 1
36763: PUSH
36764: LD_INT 6
36766: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36767: LD_VAR 0 6
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: IN
36786: NOT
36787: PUSH
36788: LD_VAR 0 1
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: LD_INT 6
36807: PUSH
36808: LD_INT 36
36810: PUSH
36811: LD_INT 4
36813: PUSH
36814: LD_INT 5
36816: PUSH
36817: LD_INT 31
36819: PUSH
36820: LD_INT 32
36822: PUSH
36823: LD_INT 33
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: IN
36839: NOT
36840: PUSH
36841: LD_VAR 0 6
36845: PUSH
36846: LD_INT 1
36848: EQUAL
36849: AND
36850: OR
36851: PUSH
36852: LD_VAR 0 1
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: IN
36867: NOT
36868: PUSH
36869: LD_VAR 0 6
36873: PUSH
36874: LD_INT 2
36876: EQUAL
36877: AND
36878: OR
36879: IFFALSE 36889
// mode = 0 ;
36881: LD_ADDR_VAR 0 6
36885: PUSH
36886: LD_INT 0
36888: ST_TO_ADDR
// case mode of 0 :
36889: LD_VAR 0 6
36893: PUSH
36894: LD_INT 0
36896: DOUBLE
36897: EQUAL
36898: IFTRUE 36902
36900: GO 48355
36902: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36903: LD_ADDR_VAR 0 11
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37096: LD_ADDR_VAR 0 12
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 3
37253: NEG
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 3
37264: NEG
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37292: LD_ADDR_VAR 0 13
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 1
37361: NEG
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: LD_INT 2
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: LD_INT 3
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: LD_INT 3
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37491: LD_ADDR_VAR 0 14
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 3
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 3
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 2
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37687: LD_ADDR_VAR 0 15
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 3
37854: PUSH
37855: LD_INT 1
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37880: LD_ADDR_VAR 0 16
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: NEG
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 3
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 3
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38073: LD_ADDR_VAR 0 17
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 2
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38303: LD_ADDR_VAR 0 18
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38533: LD_ADDR_VAR 0 19
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38763: LD_ADDR_VAR 0 20
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: LD_INT 2
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38993: LD_ADDR_VAR 0 21
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39223: LD_ADDR_VAR 0 22
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39453: LD_ADDR_VAR 0 23
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39733: LD_ADDR_VAR 0 24
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40009: LD_ADDR_VAR 0 25
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 2
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 3
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 3
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40283: LD_ADDR_VAR 0 26
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: NEG
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 2
40482: NEG
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 3
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40559: LD_ADDR_VAR 0 27
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 2
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: NEG
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40839: LD_ADDR_VAR 0 28
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: LD_INT 3
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 3
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 3
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41121: LD_ADDR_VAR 0 29
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: LD_INT 2
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 3
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: NEG
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41400: LD_ADDR_VAR 0 30
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: LD_INT 3
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 3
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41678: LD_ADDR_VAR 0 31
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41956: LD_ADDR_VAR 0 32
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: LD_INT 3
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42234: LD_ADDR_VAR 0 33
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: NEG
42425: PUSH
42426: LD_INT 3
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: LD_INT 3
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42513: LD_ADDR_VAR 0 34
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 3
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42793: LD_ADDR_VAR 0 35
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42905: LD_ADDR_VAR 0 36
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43017: LD_ADDR_VAR 0 37
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43129: LD_ADDR_VAR 0 38
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43241: LD_ADDR_VAR 0 39
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43353: LD_ADDR_VAR 0 40
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43465: LD_ADDR_VAR 0 41
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 3
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 3
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 3
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 3
43739: NEG
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 3
43762: NEG
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: LD_INT 3
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43815: LD_ADDR_VAR 0 42
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 2
44005: NEG
44006: PUSH
44007: LD_INT 3
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 3
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 3
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 3
44124: NEG
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44165: LD_ADDR_VAR 0 43
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 2
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 3
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 3
44461: NEG
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44513: LD_ADDR_VAR 0 44
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 2
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 3
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 3
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: LD_INT 3
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44863: LD_ADDR_VAR 0 45
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 3
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 3
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 3
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 3
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: LD_INT 3
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45213: LD_ADDR_VAR 0 46
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: NEG
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: LD_INT 3
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 3
45520: NEG
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45561: LD_ADDR_VAR 0 47
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45712: LD_ADDR_VAR 0 48
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45859: LD_ADDR_VAR 0 49
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46003: LD_ADDR_VAR 0 50
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46147: LD_ADDR_VAR 0 51
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46294: LD_ADDR_VAR 0 52
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46445: LD_ADDR_VAR 0 53
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46675: LD_ADDR_VAR 0 54
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46905: LD_ADDR_VAR 0 55
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47135: LD_ADDR_VAR 0 56
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47365: LD_ADDR_VAR 0 57
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47595: LD_ADDR_VAR 0 58
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47825: LD_ADDR_VAR 0 59
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47913: LD_ADDR_VAR 0 60
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48001: LD_ADDR_VAR 0 61
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48089: LD_ADDR_VAR 0 62
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 0
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48177: LD_ADDR_VAR 0 63
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48265: LD_ADDR_VAR 0 64
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// end ; 1 :
48353: GO 54250
48355: LD_INT 1
48357: DOUBLE
48358: EQUAL
48359: IFTRUE 48363
48361: GO 50986
48363: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48364: LD_ADDR_VAR 0 11
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48408: LD_ADDR_VAR 0 12
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48449: LD_ADDR_VAR 0 13
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: LD_INT 3
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48489: LD_ADDR_VAR 0 14
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48530: LD_ADDR_VAR 0 15
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 3
48548: NEG
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48574: LD_ADDR_VAR 0 16
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48620: LD_ADDR_VAR 0 17
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48664: LD_ADDR_VAR 0 18
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: LIST
48704: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48705: LD_ADDR_VAR 0 19
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: LIST
48744: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48745: LD_ADDR_VAR 0 20
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 0
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: LIST
48785: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48786: LD_ADDR_VAR 0 21
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 3
48804: NEG
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48830: LD_ADDR_VAR 0 22
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48876: LD_ADDR_VAR 0 23
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 4
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: LIST
48919: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48920: LD_ADDR_VAR 0 24
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 4
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48961: LD_ADDR_VAR 0 25
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 4
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 4
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49001: LD_ADDR_VAR 0 26
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 3
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49042: LD_ADDR_VAR 0 27
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 4
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49086: LD_ADDR_VAR 0 28
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: LD_INT 4
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 4
49117: NEG
49118: PUSH
49119: LD_INT 3
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49132: LD_ADDR_VAR 0 29
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 4
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 4
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 5
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 5
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 4
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 6
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 6
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 5
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49287: LD_ADDR_VAR 0 30
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 3
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 4
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 4
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 4
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 5
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 5
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 5
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 6
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 6
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49430: LD_ADDR_VAR 0 31
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 4
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: LD_INT 4
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: LD_INT 4
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 5
49497: PUSH
49498: LD_INT 4
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 5
49507: PUSH
49508: LD_INT 5
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 4
49517: PUSH
49518: LD_INT 5
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 6
49527: PUSH
49528: LD_INT 5
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 6
49537: PUSH
49538: LD_INT 6
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 5
49547: PUSH
49548: LD_INT 6
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49569: LD_ADDR_VAR 0 32
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 4
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 4
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 5
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 5
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 4
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 6
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 6
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 5
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49712: LD_ADDR_VAR 0 33
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 3
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 3
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 4
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 4
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 5
49798: NEG
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 5
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 5
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 6
49832: NEG
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 6
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49867: LD_ADDR_VAR 0 34
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: NEG
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: LD_INT 4
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 4
49922: NEG
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 4
49934: NEG
49935: PUSH
49936: LD_INT 4
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 4
49946: NEG
49947: PUSH
49948: LD_INT 5
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 5
49958: NEG
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: NEG
49971: PUSH
49972: LD_INT 5
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 5
49982: NEG
49983: PUSH
49984: LD_INT 6
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 6
49994: NEG
49995: PUSH
49996: LD_INT 5
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 6
50006: NEG
50007: PUSH
50008: LD_INT 6
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50030: LD_ADDR_VAR 0 41
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50074: LD_ADDR_VAR 0 42
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50115: LD_ADDR_VAR 0 43
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: LIST
50154: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50155: LD_ADDR_VAR 0 44
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: LIST
50195: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50196: LD_ADDR_VAR 0 45
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50240: LD_ADDR_VAR 0 46
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: NEG
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50286: LD_ADDR_VAR 0 47
50290: PUSH
50291: LD_INT 2
50293: NEG
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50319: LD_ADDR_VAR 0 48
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50350: LD_ADDR_VAR 0 49
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50379: LD_ADDR_VAR 0 50
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 3
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50408: LD_ADDR_VAR 0 51
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50439: LD_ADDR_VAR 0 52
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50472: LD_ADDR_VAR 0 53
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50516: LD_ADDR_VAR 0 54
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50557: LD_ADDR_VAR 0 55
50561: PUSH
50562: LD_INT 3
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: LIST
50596: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50597: LD_ADDR_VAR 0 56
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50638: LD_ADDR_VAR 0 57
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50682: LD_ADDR_VAR 0 58
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 3
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 2
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50728: LD_ADDR_VAR 0 59
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50772: LD_ADDR_VAR 0 60
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50813: LD_ADDR_VAR 0 61
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50853: LD_ADDR_VAR 0 62
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50894: LD_ADDR_VAR 0 63
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50938: LD_ADDR_VAR 0 64
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: LIST
50983: ST_TO_ADDR
// end ; 2 :
50984: GO 54250
50986: LD_INT 2
50988: DOUBLE
50989: EQUAL
50990: IFTRUE 50994
50992: GO 54249
50994: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50995: LD_ADDR_VAR 0 29
50999: PUSH
51000: LD_INT 4
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 5
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 5
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 5
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 4
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: PUSH
51126: LD_INT 4
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: LD_INT 4
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 4
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 4
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: PUSH
51206: LD_INT 4
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 5
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 5
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 4
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: LD_INT 5
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 4
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 4
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 4
51380: NEG
51381: PUSH
51382: LD_INT 4
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 4
51392: NEG
51393: PUSH
51394: LD_INT 5
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: LD_INT 4
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 3
51416: NEG
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 4
51428: NEG
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 5
51440: NEG
51441: PUSH
51442: LD_INT 4
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: LD_INT 5
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: LD_INT 5
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 5
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51533: LD_ADDR_VAR 0 30
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 4
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 5
51560: PUSH
51561: LD_INT 4
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 5
51570: PUSH
51571: LD_INT 5
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 4
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: LD_INT 4
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 5
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: LD_INT 5
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 3
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 4
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 4
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 4
51723: NEG
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 4
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: NEG
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 4
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 5
51779: NEG
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 5
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 5
51802: NEG
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: NEG
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: LD_INT 4
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 3
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 4
51885: NEG
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 4
51897: NEG
51898: PUSH
51899: LD_INT 4
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 4
51921: NEG
51922: PUSH
51923: LD_INT 2
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: LD_INT 4
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 5
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 4
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 3
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 3
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 5
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 5
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52080: LD_ADDR_VAR 0 31
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 3
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: LD_INT 5
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 5
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 4
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 5
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 4
52236: NEG
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 4
52247: NEG
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 4
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 4
52282: NEG
52283: PUSH
52284: LD_INT 4
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: NEG
52295: PUSH
52296: LD_INT 5
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 4
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 3
52318: NEG
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 4
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 5
52342: NEG
52343: PUSH
52344: LD_INT 4
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 5
52354: NEG
52355: PUSH
52356: LD_INT 5
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: LD_INT 5
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 5
52378: NEG
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 3
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 4
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 3
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 4
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 4
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 4
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 4
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 5
52513: PUSH
52514: LD_INT 0
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 5
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 4
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 5
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52630: LD_ADDR_VAR 0 32
52634: PUSH
52635: LD_INT 4
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 4
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 4
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 5
52693: NEG
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 5
52704: NEG
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 5
52716: NEG
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: LD_INT 3
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: LD_INT 4
52755: NEG
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 2
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 4
52799: NEG
52800: PUSH
52801: LD_INT 3
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 4
52811: NEG
52812: PUSH
52813: LD_INT 4
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 4
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 4
52835: NEG
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 4
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 5
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 4
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 3
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 4
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 5
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 3
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 5
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 3
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 4
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 4
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 2
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 4
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 4
53042: PUSH
53043: LD_INT 4
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 4
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 5
53062: PUSH
53063: LD_INT 4
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 5
53072: PUSH
53073: LD_INT 5
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 4
53082: PUSH
53083: LD_INT 5
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 4
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 5
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 3
53122: PUSH
53123: LD_INT 5
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53177: LD_ADDR_VAR 0 33
53181: PUSH
53182: LD_INT 4
53184: NEG
53185: PUSH
53186: LD_INT 4
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 4
53196: NEG
53197: PUSH
53198: LD_INT 5
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: LD_INT 4
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 3
53220: NEG
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 4
53232: NEG
53233: PUSH
53234: LD_INT 3
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 5
53244: NEG
53245: PUSH
53246: LD_INT 4
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 5
53256: NEG
53257: PUSH
53258: LD_INT 5
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: LD_INT 5
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 5
53280: NEG
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 4
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: NEG
53360: PUSH
53361: LD_INT 4
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 4
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 4
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 5
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 5
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 4
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 5
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 4
53507: PUSH
53508: LD_INT 3
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: LD_INT 4
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: PUSH
53528: LD_INT 4
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 4
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 4
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 4
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: LD_INT 3
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 4
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 5
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 5
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 4
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 5
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53715: LD_ADDR_VAR 0 34
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: LD_INT 4
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 5
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 4
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 4
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 5
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: LD_INT 5
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 4
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 3
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 4
53917: PUSH
53918: LD_INT 4
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 4
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 5
53937: PUSH
53938: LD_INT 4
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 5
53947: PUSH
53948: LD_INT 5
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 4
53957: PUSH
53958: LD_INT 5
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 4
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 5
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 5
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 3
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 4
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 4
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: PUSH
54080: LD_INT 4
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 4
54100: NEG
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 4
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 3
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 4
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 5
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 5
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 5
54179: NEG
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// end ; end ;
54247: GO 54250
54249: POP
// case btype of b_depot , b_warehouse :
54250: LD_VAR 0 1
54254: PUSH
54255: LD_INT 0
54257: DOUBLE
54258: EQUAL
54259: IFTRUE 54269
54261: LD_INT 1
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54269
54267: GO 54470
54269: POP
// case nation of nation_american :
54270: LD_VAR 0 5
54274: PUSH
54275: LD_INT 1
54277: DOUBLE
54278: EQUAL
54279: IFTRUE 54283
54281: GO 54339
54283: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54284: LD_ADDR_VAR 0 9
54288: PUSH
54289: LD_VAR 0 11
54293: PUSH
54294: LD_VAR 0 12
54298: PUSH
54299: LD_VAR 0 13
54303: PUSH
54304: LD_VAR 0 14
54308: PUSH
54309: LD_VAR 0 15
54313: PUSH
54314: LD_VAR 0 16
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: PUSH
54327: LD_VAR 0 4
54331: PUSH
54332: LD_INT 1
54334: PLUS
54335: ARRAY
54336: ST_TO_ADDR
54337: GO 54468
54339: LD_INT 2
54341: DOUBLE
54342: EQUAL
54343: IFTRUE 54347
54345: GO 54403
54347: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54348: LD_ADDR_VAR 0 9
54352: PUSH
54353: LD_VAR 0 17
54357: PUSH
54358: LD_VAR 0 18
54362: PUSH
54363: LD_VAR 0 19
54367: PUSH
54368: LD_VAR 0 20
54372: PUSH
54373: LD_VAR 0 21
54377: PUSH
54378: LD_VAR 0 22
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: PUSH
54391: LD_VAR 0 4
54395: PUSH
54396: LD_INT 1
54398: PLUS
54399: ARRAY
54400: ST_TO_ADDR
54401: GO 54468
54403: LD_INT 3
54405: DOUBLE
54406: EQUAL
54407: IFTRUE 54411
54409: GO 54467
54411: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54412: LD_ADDR_VAR 0 9
54416: PUSH
54417: LD_VAR 0 23
54421: PUSH
54422: LD_VAR 0 24
54426: PUSH
54427: LD_VAR 0 25
54431: PUSH
54432: LD_VAR 0 26
54436: PUSH
54437: LD_VAR 0 27
54441: PUSH
54442: LD_VAR 0 28
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: PUSH
54455: LD_VAR 0 4
54459: PUSH
54460: LD_INT 1
54462: PLUS
54463: ARRAY
54464: ST_TO_ADDR
54465: GO 54468
54467: POP
54468: GO 55023
54470: LD_INT 2
54472: DOUBLE
54473: EQUAL
54474: IFTRUE 54484
54476: LD_INT 3
54478: DOUBLE
54479: EQUAL
54480: IFTRUE 54484
54482: GO 54540
54484: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54485: LD_ADDR_VAR 0 9
54489: PUSH
54490: LD_VAR 0 29
54494: PUSH
54495: LD_VAR 0 30
54499: PUSH
54500: LD_VAR 0 31
54504: PUSH
54505: LD_VAR 0 32
54509: PUSH
54510: LD_VAR 0 33
54514: PUSH
54515: LD_VAR 0 34
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: PUSH
54528: LD_VAR 0 4
54532: PUSH
54533: LD_INT 1
54535: PLUS
54536: ARRAY
54537: ST_TO_ADDR
54538: GO 55023
54540: LD_INT 16
54542: DOUBLE
54543: EQUAL
54544: IFTRUE 54602
54546: LD_INT 17
54548: DOUBLE
54549: EQUAL
54550: IFTRUE 54602
54552: LD_INT 18
54554: DOUBLE
54555: EQUAL
54556: IFTRUE 54602
54558: LD_INT 19
54560: DOUBLE
54561: EQUAL
54562: IFTRUE 54602
54564: LD_INT 22
54566: DOUBLE
54567: EQUAL
54568: IFTRUE 54602
54570: LD_INT 20
54572: DOUBLE
54573: EQUAL
54574: IFTRUE 54602
54576: LD_INT 21
54578: DOUBLE
54579: EQUAL
54580: IFTRUE 54602
54582: LD_INT 23
54584: DOUBLE
54585: EQUAL
54586: IFTRUE 54602
54588: LD_INT 24
54590: DOUBLE
54591: EQUAL
54592: IFTRUE 54602
54594: LD_INT 25
54596: DOUBLE
54597: EQUAL
54598: IFTRUE 54602
54600: GO 54658
54602: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54603: LD_ADDR_VAR 0 9
54607: PUSH
54608: LD_VAR 0 35
54612: PUSH
54613: LD_VAR 0 36
54617: PUSH
54618: LD_VAR 0 37
54622: PUSH
54623: LD_VAR 0 38
54627: PUSH
54628: LD_VAR 0 39
54632: PUSH
54633: LD_VAR 0 40
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: PUSH
54646: LD_VAR 0 4
54650: PUSH
54651: LD_INT 1
54653: PLUS
54654: ARRAY
54655: ST_TO_ADDR
54656: GO 55023
54658: LD_INT 6
54660: DOUBLE
54661: EQUAL
54662: IFTRUE 54714
54664: LD_INT 7
54666: DOUBLE
54667: EQUAL
54668: IFTRUE 54714
54670: LD_INT 8
54672: DOUBLE
54673: EQUAL
54674: IFTRUE 54714
54676: LD_INT 13
54678: DOUBLE
54679: EQUAL
54680: IFTRUE 54714
54682: LD_INT 12
54684: DOUBLE
54685: EQUAL
54686: IFTRUE 54714
54688: LD_INT 15
54690: DOUBLE
54691: EQUAL
54692: IFTRUE 54714
54694: LD_INT 11
54696: DOUBLE
54697: EQUAL
54698: IFTRUE 54714
54700: LD_INT 14
54702: DOUBLE
54703: EQUAL
54704: IFTRUE 54714
54706: LD_INT 10
54708: DOUBLE
54709: EQUAL
54710: IFTRUE 54714
54712: GO 54770
54714: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54715: LD_ADDR_VAR 0 9
54719: PUSH
54720: LD_VAR 0 41
54724: PUSH
54725: LD_VAR 0 42
54729: PUSH
54730: LD_VAR 0 43
54734: PUSH
54735: LD_VAR 0 44
54739: PUSH
54740: LD_VAR 0 45
54744: PUSH
54745: LD_VAR 0 46
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: PUSH
54758: LD_VAR 0 4
54762: PUSH
54763: LD_INT 1
54765: PLUS
54766: ARRAY
54767: ST_TO_ADDR
54768: GO 55023
54770: LD_INT 36
54772: DOUBLE
54773: EQUAL
54774: IFTRUE 54778
54776: GO 54834
54778: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54779: LD_ADDR_VAR 0 9
54783: PUSH
54784: LD_VAR 0 47
54788: PUSH
54789: LD_VAR 0 48
54793: PUSH
54794: LD_VAR 0 49
54798: PUSH
54799: LD_VAR 0 50
54803: PUSH
54804: LD_VAR 0 51
54808: PUSH
54809: LD_VAR 0 52
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: PUSH
54822: LD_VAR 0 4
54826: PUSH
54827: LD_INT 1
54829: PLUS
54830: ARRAY
54831: ST_TO_ADDR
54832: GO 55023
54834: LD_INT 4
54836: DOUBLE
54837: EQUAL
54838: IFTRUE 54860
54840: LD_INT 5
54842: DOUBLE
54843: EQUAL
54844: IFTRUE 54860
54846: LD_INT 34
54848: DOUBLE
54849: EQUAL
54850: IFTRUE 54860
54852: LD_INT 37
54854: DOUBLE
54855: EQUAL
54856: IFTRUE 54860
54858: GO 54916
54860: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54861: LD_ADDR_VAR 0 9
54865: PUSH
54866: LD_VAR 0 53
54870: PUSH
54871: LD_VAR 0 54
54875: PUSH
54876: LD_VAR 0 55
54880: PUSH
54881: LD_VAR 0 56
54885: PUSH
54886: LD_VAR 0 57
54890: PUSH
54891: LD_VAR 0 58
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: PUSH
54904: LD_VAR 0 4
54908: PUSH
54909: LD_INT 1
54911: PLUS
54912: ARRAY
54913: ST_TO_ADDR
54914: GO 55023
54916: LD_INT 31
54918: DOUBLE
54919: EQUAL
54920: IFTRUE 54966
54922: LD_INT 32
54924: DOUBLE
54925: EQUAL
54926: IFTRUE 54966
54928: LD_INT 33
54930: DOUBLE
54931: EQUAL
54932: IFTRUE 54966
54934: LD_INT 27
54936: DOUBLE
54937: EQUAL
54938: IFTRUE 54966
54940: LD_INT 26
54942: DOUBLE
54943: EQUAL
54944: IFTRUE 54966
54946: LD_INT 28
54948: DOUBLE
54949: EQUAL
54950: IFTRUE 54966
54952: LD_INT 29
54954: DOUBLE
54955: EQUAL
54956: IFTRUE 54966
54958: LD_INT 30
54960: DOUBLE
54961: EQUAL
54962: IFTRUE 54966
54964: GO 55022
54966: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54967: LD_ADDR_VAR 0 9
54971: PUSH
54972: LD_VAR 0 59
54976: PUSH
54977: LD_VAR 0 60
54981: PUSH
54982: LD_VAR 0 61
54986: PUSH
54987: LD_VAR 0 62
54991: PUSH
54992: LD_VAR 0 63
54996: PUSH
54997: LD_VAR 0 64
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: PUSH
55010: LD_VAR 0 4
55014: PUSH
55015: LD_INT 1
55017: PLUS
55018: ARRAY
55019: ST_TO_ADDR
55020: GO 55023
55022: POP
// temp_list2 = [ ] ;
55023: LD_ADDR_VAR 0 10
55027: PUSH
55028: EMPTY
55029: ST_TO_ADDR
// for i in temp_list do
55030: LD_ADDR_VAR 0 8
55034: PUSH
55035: LD_VAR 0 9
55039: PUSH
55040: FOR_IN
55041: IFFALSE 55093
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55043: LD_ADDR_VAR 0 10
55047: PUSH
55048: LD_VAR 0 10
55052: PUSH
55053: LD_VAR 0 8
55057: PUSH
55058: LD_INT 1
55060: ARRAY
55061: PUSH
55062: LD_VAR 0 2
55066: PLUS
55067: PUSH
55068: LD_VAR 0 8
55072: PUSH
55073: LD_INT 2
55075: ARRAY
55076: PUSH
55077: LD_VAR 0 3
55081: PLUS
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: EMPTY
55088: LIST
55089: ADD
55090: ST_TO_ADDR
55091: GO 55040
55093: POP
55094: POP
// result = temp_list2 ;
55095: LD_ADDR_VAR 0 7
55099: PUSH
55100: LD_VAR 0 10
55104: ST_TO_ADDR
// end ;
55105: LD_VAR 0 7
55109: RET
// export function EnemyInRange ( unit , dist ) ; begin
55110: LD_INT 0
55112: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55113: LD_ADDR_VAR 0 3
55117: PUSH
55118: LD_VAR 0 1
55122: PPUSH
55123: CALL_OW 255
55127: PPUSH
55128: LD_VAR 0 1
55132: PPUSH
55133: CALL_OW 250
55137: PPUSH
55138: LD_VAR 0 1
55142: PPUSH
55143: CALL_OW 251
55147: PPUSH
55148: LD_VAR 0 2
55152: PPUSH
55153: CALL 28506 0 4
55157: PUSH
55158: LD_INT 4
55160: ARRAY
55161: ST_TO_ADDR
// end ;
55162: LD_VAR 0 3
55166: RET
// export function PlayerSeeMe ( unit ) ; begin
55167: LD_INT 0
55169: PPUSH
// result := See ( your_side , unit ) ;
55170: LD_ADDR_VAR 0 2
55174: PUSH
55175: LD_OWVAR 2
55179: PPUSH
55180: LD_VAR 0 1
55184: PPUSH
55185: CALL_OW 292
55189: ST_TO_ADDR
// end ;
55190: LD_VAR 0 2
55194: RET
// export function ReverseDir ( unit ) ; begin
55195: LD_INT 0
55197: PPUSH
// if not unit then
55198: LD_VAR 0 1
55202: NOT
55203: IFFALSE 55207
// exit ;
55205: GO 55230
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55207: LD_ADDR_VAR 0 2
55211: PUSH
55212: LD_VAR 0 1
55216: PPUSH
55217: CALL_OW 254
55221: PUSH
55222: LD_INT 3
55224: PLUS
55225: PUSH
55226: LD_INT 6
55228: MOD
55229: ST_TO_ADDR
// end ;
55230: LD_VAR 0 2
55234: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
// if not hexes then
55242: LD_VAR 0 2
55246: NOT
55247: IFFALSE 55251
// exit ;
55249: GO 55399
// dist := 9999 ;
55251: LD_ADDR_VAR 0 5
55255: PUSH
55256: LD_INT 9999
55258: ST_TO_ADDR
// for i = 1 to hexes do
55259: LD_ADDR_VAR 0 4
55263: PUSH
55264: DOUBLE
55265: LD_INT 1
55267: DEC
55268: ST_TO_ADDR
55269: LD_VAR 0 2
55273: PUSH
55274: FOR_TO
55275: IFFALSE 55387
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55277: LD_VAR 0 1
55281: PPUSH
55282: LD_VAR 0 2
55286: PUSH
55287: LD_VAR 0 4
55291: ARRAY
55292: PUSH
55293: LD_INT 1
55295: ARRAY
55296: PPUSH
55297: LD_VAR 0 2
55301: PUSH
55302: LD_VAR 0 4
55306: ARRAY
55307: PUSH
55308: LD_INT 2
55310: ARRAY
55311: PPUSH
55312: CALL_OW 297
55316: PUSH
55317: LD_VAR 0 5
55321: LESS
55322: IFFALSE 55385
// begin hex := hexes [ i ] ;
55324: LD_ADDR_VAR 0 7
55328: PUSH
55329: LD_VAR 0 2
55333: PUSH
55334: LD_VAR 0 4
55338: ARRAY
55339: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55340: LD_ADDR_VAR 0 5
55344: PUSH
55345: LD_VAR 0 1
55349: PPUSH
55350: LD_VAR 0 2
55354: PUSH
55355: LD_VAR 0 4
55359: ARRAY
55360: PUSH
55361: LD_INT 1
55363: ARRAY
55364: PPUSH
55365: LD_VAR 0 2
55369: PUSH
55370: LD_VAR 0 4
55374: ARRAY
55375: PUSH
55376: LD_INT 2
55378: ARRAY
55379: PPUSH
55380: CALL_OW 297
55384: ST_TO_ADDR
// end ; end ;
55385: GO 55274
55387: POP
55388: POP
// result := hex ;
55389: LD_ADDR_VAR 0 3
55393: PUSH
55394: LD_VAR 0 7
55398: ST_TO_ADDR
// end ;
55399: LD_VAR 0 3
55403: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55404: LD_INT 0
55406: PPUSH
55407: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55408: LD_VAR 0 1
55412: NOT
55413: PUSH
55414: LD_VAR 0 1
55418: PUSH
55419: LD_INT 21
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 23
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PPUSH
55443: CALL_OW 69
55447: IN
55448: NOT
55449: OR
55450: IFFALSE 55454
// exit ;
55452: GO 55501
// for i = 1 to 3 do
55454: LD_ADDR_VAR 0 3
55458: PUSH
55459: DOUBLE
55460: LD_INT 1
55462: DEC
55463: ST_TO_ADDR
55464: LD_INT 3
55466: PUSH
55467: FOR_TO
55468: IFFALSE 55499
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55470: LD_VAR 0 1
55474: PPUSH
55475: CALL_OW 250
55479: PPUSH
55480: LD_VAR 0 1
55484: PPUSH
55485: CALL_OW 251
55489: PPUSH
55490: LD_INT 1
55492: PPUSH
55493: CALL_OW 453
55497: GO 55467
55499: POP
55500: POP
// end ;
55501: LD_VAR 0 2
55505: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55506: LD_INT 0
55508: PPUSH
55509: PPUSH
55510: PPUSH
55511: PPUSH
55512: PPUSH
55513: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55514: LD_VAR 0 1
55518: NOT
55519: PUSH
55520: LD_VAR 0 2
55524: NOT
55525: OR
55526: PUSH
55527: LD_VAR 0 1
55531: PPUSH
55532: CALL_OW 314
55536: OR
55537: IFFALSE 55541
// exit ;
55539: GO 55982
// x := GetX ( enemy_unit ) ;
55541: LD_ADDR_VAR 0 7
55545: PUSH
55546: LD_VAR 0 2
55550: PPUSH
55551: CALL_OW 250
55555: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55556: LD_ADDR_VAR 0 8
55560: PUSH
55561: LD_VAR 0 2
55565: PPUSH
55566: CALL_OW 251
55570: ST_TO_ADDR
// if not x or not y then
55571: LD_VAR 0 7
55575: NOT
55576: PUSH
55577: LD_VAR 0 8
55581: NOT
55582: OR
55583: IFFALSE 55587
// exit ;
55585: GO 55982
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55587: LD_ADDR_VAR 0 6
55591: PUSH
55592: LD_VAR 0 7
55596: PPUSH
55597: LD_INT 0
55599: PPUSH
55600: LD_INT 4
55602: PPUSH
55603: CALL_OW 272
55607: PUSH
55608: LD_VAR 0 8
55612: PPUSH
55613: LD_INT 0
55615: PPUSH
55616: LD_INT 4
55618: PPUSH
55619: CALL_OW 273
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_VAR 0 7
55632: PPUSH
55633: LD_INT 1
55635: PPUSH
55636: LD_INT 4
55638: PPUSH
55639: CALL_OW 272
55643: PUSH
55644: LD_VAR 0 8
55648: PPUSH
55649: LD_INT 1
55651: PPUSH
55652: LD_INT 4
55654: PPUSH
55655: CALL_OW 273
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_VAR 0 7
55668: PPUSH
55669: LD_INT 2
55671: PPUSH
55672: LD_INT 4
55674: PPUSH
55675: CALL_OW 272
55679: PUSH
55680: LD_VAR 0 8
55684: PPUSH
55685: LD_INT 2
55687: PPUSH
55688: LD_INT 4
55690: PPUSH
55691: CALL_OW 273
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_VAR 0 7
55704: PPUSH
55705: LD_INT 3
55707: PPUSH
55708: LD_INT 4
55710: PPUSH
55711: CALL_OW 272
55715: PUSH
55716: LD_VAR 0 8
55720: PPUSH
55721: LD_INT 3
55723: PPUSH
55724: LD_INT 4
55726: PPUSH
55727: CALL_OW 273
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_VAR 0 7
55740: PPUSH
55741: LD_INT 4
55743: PPUSH
55744: LD_INT 4
55746: PPUSH
55747: CALL_OW 272
55751: PUSH
55752: LD_VAR 0 8
55756: PPUSH
55757: LD_INT 4
55759: PPUSH
55760: LD_INT 4
55762: PPUSH
55763: CALL_OW 273
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_VAR 0 7
55776: PPUSH
55777: LD_INT 5
55779: PPUSH
55780: LD_INT 4
55782: PPUSH
55783: CALL_OW 272
55787: PUSH
55788: LD_VAR 0 8
55792: PPUSH
55793: LD_INT 5
55795: PPUSH
55796: LD_INT 4
55798: PPUSH
55799: CALL_OW 273
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// for i = tmp downto 1 do
55816: LD_ADDR_VAR 0 4
55820: PUSH
55821: DOUBLE
55822: LD_VAR 0 6
55826: INC
55827: ST_TO_ADDR
55828: LD_INT 1
55830: PUSH
55831: FOR_DOWNTO
55832: IFFALSE 55933
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55834: LD_VAR 0 6
55838: PUSH
55839: LD_VAR 0 4
55843: ARRAY
55844: PUSH
55845: LD_INT 1
55847: ARRAY
55848: PPUSH
55849: LD_VAR 0 6
55853: PUSH
55854: LD_VAR 0 4
55858: ARRAY
55859: PUSH
55860: LD_INT 2
55862: ARRAY
55863: PPUSH
55864: CALL_OW 488
55868: NOT
55869: PUSH
55870: LD_VAR 0 6
55874: PUSH
55875: LD_VAR 0 4
55879: ARRAY
55880: PUSH
55881: LD_INT 1
55883: ARRAY
55884: PPUSH
55885: LD_VAR 0 6
55889: PUSH
55890: LD_VAR 0 4
55894: ARRAY
55895: PUSH
55896: LD_INT 2
55898: ARRAY
55899: PPUSH
55900: CALL_OW 428
55904: PUSH
55905: LD_INT 0
55907: NONEQUAL
55908: OR
55909: IFFALSE 55931
// tmp := Delete ( tmp , i ) ;
55911: LD_ADDR_VAR 0 6
55915: PUSH
55916: LD_VAR 0 6
55920: PPUSH
55921: LD_VAR 0 4
55925: PPUSH
55926: CALL_OW 3
55930: ST_TO_ADDR
55931: GO 55831
55933: POP
55934: POP
// j := GetClosestHex ( unit , tmp ) ;
55935: LD_ADDR_VAR 0 5
55939: PUSH
55940: LD_VAR 0 1
55944: PPUSH
55945: LD_VAR 0 6
55949: PPUSH
55950: CALL 55235 0 2
55954: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55955: LD_VAR 0 1
55959: PPUSH
55960: LD_VAR 0 5
55964: PUSH
55965: LD_INT 1
55967: ARRAY
55968: PPUSH
55969: LD_VAR 0 5
55973: PUSH
55974: LD_INT 2
55976: ARRAY
55977: PPUSH
55978: CALL_OW 111
// end ;
55982: LD_VAR 0 3
55986: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55987: LD_INT 0
55989: PPUSH
55990: PPUSH
55991: PPUSH
// uc_side = 0 ;
55992: LD_ADDR_OWVAR 20
55996: PUSH
55997: LD_INT 0
55999: ST_TO_ADDR
// uc_nation = 0 ;
56000: LD_ADDR_OWVAR 21
56004: PUSH
56005: LD_INT 0
56007: ST_TO_ADDR
// InitHc_All ( ) ;
56008: CALL_OW 584
// InitVc ;
56012: CALL_OW 20
// if mastodonts then
56016: LD_VAR 0 6
56020: IFFALSE 56087
// for i = 1 to mastodonts do
56022: LD_ADDR_VAR 0 11
56026: PUSH
56027: DOUBLE
56028: LD_INT 1
56030: DEC
56031: ST_TO_ADDR
56032: LD_VAR 0 6
56036: PUSH
56037: FOR_TO
56038: IFFALSE 56085
// begin vc_chassis := 31 ;
56040: LD_ADDR_OWVAR 37
56044: PUSH
56045: LD_INT 31
56047: ST_TO_ADDR
// vc_control := control_rider ;
56048: LD_ADDR_OWVAR 38
56052: PUSH
56053: LD_INT 4
56055: ST_TO_ADDR
// animal := CreateVehicle ;
56056: LD_ADDR_VAR 0 12
56060: PUSH
56061: CALL_OW 45
56065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56066: LD_VAR 0 12
56070: PPUSH
56071: LD_VAR 0 8
56075: PPUSH
56076: LD_INT 0
56078: PPUSH
56079: CALL 58275 0 3
// end ;
56083: GO 56037
56085: POP
56086: POP
// if horses then
56087: LD_VAR 0 5
56091: IFFALSE 56158
// for i = 1 to horses do
56093: LD_ADDR_VAR 0 11
56097: PUSH
56098: DOUBLE
56099: LD_INT 1
56101: DEC
56102: ST_TO_ADDR
56103: LD_VAR 0 5
56107: PUSH
56108: FOR_TO
56109: IFFALSE 56156
// begin hc_class := 21 ;
56111: LD_ADDR_OWVAR 28
56115: PUSH
56116: LD_INT 21
56118: ST_TO_ADDR
// hc_gallery :=  ;
56119: LD_ADDR_OWVAR 33
56123: PUSH
56124: LD_STRING 
56126: ST_TO_ADDR
// animal := CreateHuman ;
56127: LD_ADDR_VAR 0 12
56131: PUSH
56132: CALL_OW 44
56136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56137: LD_VAR 0 12
56141: PPUSH
56142: LD_VAR 0 8
56146: PPUSH
56147: LD_INT 0
56149: PPUSH
56150: CALL 58275 0 3
// end ;
56154: GO 56108
56156: POP
56157: POP
// if birds then
56158: LD_VAR 0 1
56162: IFFALSE 56229
// for i = 1 to birds do
56164: LD_ADDR_VAR 0 11
56168: PUSH
56169: DOUBLE
56170: LD_INT 1
56172: DEC
56173: ST_TO_ADDR
56174: LD_VAR 0 1
56178: PUSH
56179: FOR_TO
56180: IFFALSE 56227
// begin hc_class = 18 ;
56182: LD_ADDR_OWVAR 28
56186: PUSH
56187: LD_INT 18
56189: ST_TO_ADDR
// hc_gallery =  ;
56190: LD_ADDR_OWVAR 33
56194: PUSH
56195: LD_STRING 
56197: ST_TO_ADDR
// animal := CreateHuman ;
56198: LD_ADDR_VAR 0 12
56202: PUSH
56203: CALL_OW 44
56207: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56208: LD_VAR 0 12
56212: PPUSH
56213: LD_VAR 0 8
56217: PPUSH
56218: LD_INT 0
56220: PPUSH
56221: CALL 58275 0 3
// end ;
56225: GO 56179
56227: POP
56228: POP
// if tigers then
56229: LD_VAR 0 2
56233: IFFALSE 56317
// for i = 1 to tigers do
56235: LD_ADDR_VAR 0 11
56239: PUSH
56240: DOUBLE
56241: LD_INT 1
56243: DEC
56244: ST_TO_ADDR
56245: LD_VAR 0 2
56249: PUSH
56250: FOR_TO
56251: IFFALSE 56315
// begin hc_class = class_tiger ;
56253: LD_ADDR_OWVAR 28
56257: PUSH
56258: LD_INT 14
56260: ST_TO_ADDR
// hc_gallery =  ;
56261: LD_ADDR_OWVAR 33
56265: PUSH
56266: LD_STRING 
56268: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56269: LD_ADDR_OWVAR 35
56273: PUSH
56274: LD_INT 7
56276: NEG
56277: PPUSH
56278: LD_INT 7
56280: PPUSH
56281: CALL_OW 12
56285: ST_TO_ADDR
// animal := CreateHuman ;
56286: LD_ADDR_VAR 0 12
56290: PUSH
56291: CALL_OW 44
56295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56296: LD_VAR 0 12
56300: PPUSH
56301: LD_VAR 0 8
56305: PPUSH
56306: LD_INT 0
56308: PPUSH
56309: CALL 58275 0 3
// end ;
56313: GO 56250
56315: POP
56316: POP
// if apemans then
56317: LD_VAR 0 3
56321: IFFALSE 56444
// for i = 1 to apemans do
56323: LD_ADDR_VAR 0 11
56327: PUSH
56328: DOUBLE
56329: LD_INT 1
56331: DEC
56332: ST_TO_ADDR
56333: LD_VAR 0 3
56337: PUSH
56338: FOR_TO
56339: IFFALSE 56442
// begin hc_class = class_apeman ;
56341: LD_ADDR_OWVAR 28
56345: PUSH
56346: LD_INT 12
56348: ST_TO_ADDR
// hc_gallery =  ;
56349: LD_ADDR_OWVAR 33
56353: PUSH
56354: LD_STRING 
56356: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56357: LD_ADDR_OWVAR 35
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PPUSH
56366: LD_INT 2
56368: PPUSH
56369: CALL_OW 12
56373: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56374: LD_ADDR_OWVAR 31
56378: PUSH
56379: LD_INT 1
56381: PPUSH
56382: LD_INT 3
56384: PPUSH
56385: CALL_OW 12
56389: PUSH
56390: LD_INT 1
56392: PPUSH
56393: LD_INT 3
56395: PPUSH
56396: CALL_OW 12
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: ST_TO_ADDR
// animal := CreateHuman ;
56413: LD_ADDR_VAR 0 12
56417: PUSH
56418: CALL_OW 44
56422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56423: LD_VAR 0 12
56427: PPUSH
56428: LD_VAR 0 8
56432: PPUSH
56433: LD_INT 0
56435: PPUSH
56436: CALL 58275 0 3
// end ;
56440: GO 56338
56442: POP
56443: POP
// if enchidnas then
56444: LD_VAR 0 4
56448: IFFALSE 56515
// for i = 1 to enchidnas do
56450: LD_ADDR_VAR 0 11
56454: PUSH
56455: DOUBLE
56456: LD_INT 1
56458: DEC
56459: ST_TO_ADDR
56460: LD_VAR 0 4
56464: PUSH
56465: FOR_TO
56466: IFFALSE 56513
// begin hc_class = 13 ;
56468: LD_ADDR_OWVAR 28
56472: PUSH
56473: LD_INT 13
56475: ST_TO_ADDR
// hc_gallery =  ;
56476: LD_ADDR_OWVAR 33
56480: PUSH
56481: LD_STRING 
56483: ST_TO_ADDR
// animal := CreateHuman ;
56484: LD_ADDR_VAR 0 12
56488: PUSH
56489: CALL_OW 44
56493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56494: LD_VAR 0 12
56498: PPUSH
56499: LD_VAR 0 8
56503: PPUSH
56504: LD_INT 0
56506: PPUSH
56507: CALL 58275 0 3
// end ;
56511: GO 56465
56513: POP
56514: POP
// if fishes then
56515: LD_VAR 0 7
56519: IFFALSE 56586
// for i = 1 to fishes do
56521: LD_ADDR_VAR 0 11
56525: PUSH
56526: DOUBLE
56527: LD_INT 1
56529: DEC
56530: ST_TO_ADDR
56531: LD_VAR 0 7
56535: PUSH
56536: FOR_TO
56537: IFFALSE 56584
// begin hc_class = 20 ;
56539: LD_ADDR_OWVAR 28
56543: PUSH
56544: LD_INT 20
56546: ST_TO_ADDR
// hc_gallery =  ;
56547: LD_ADDR_OWVAR 33
56551: PUSH
56552: LD_STRING 
56554: ST_TO_ADDR
// animal := CreateHuman ;
56555: LD_ADDR_VAR 0 12
56559: PUSH
56560: CALL_OW 44
56564: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56565: LD_VAR 0 12
56569: PPUSH
56570: LD_VAR 0 9
56574: PPUSH
56575: LD_INT 0
56577: PPUSH
56578: CALL 58275 0 3
// end ;
56582: GO 56536
56584: POP
56585: POP
// end ;
56586: LD_VAR 0 10
56590: RET
// export function WantHeal ( sci , unit ) ; begin
56591: LD_INT 0
56593: PPUSH
// if GetTaskList ( sci ) > 0 then
56594: LD_VAR 0 1
56598: PPUSH
56599: CALL_OW 437
56603: PUSH
56604: LD_INT 0
56606: GREATER
56607: IFFALSE 56677
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56609: LD_VAR 0 1
56613: PPUSH
56614: CALL_OW 437
56618: PUSH
56619: LD_INT 1
56621: ARRAY
56622: PUSH
56623: LD_INT 1
56625: ARRAY
56626: PUSH
56627: LD_STRING l
56629: EQUAL
56630: PUSH
56631: LD_VAR 0 1
56635: PPUSH
56636: CALL_OW 437
56640: PUSH
56641: LD_INT 1
56643: ARRAY
56644: PUSH
56645: LD_INT 4
56647: ARRAY
56648: PUSH
56649: LD_VAR 0 2
56653: EQUAL
56654: AND
56655: IFFALSE 56667
// result := true else
56657: LD_ADDR_VAR 0 3
56661: PUSH
56662: LD_INT 1
56664: ST_TO_ADDR
56665: GO 56675
// result := false ;
56667: LD_ADDR_VAR 0 3
56671: PUSH
56672: LD_INT 0
56674: ST_TO_ADDR
// end else
56675: GO 56685
// result := false ;
56677: LD_ADDR_VAR 0 3
56681: PUSH
56682: LD_INT 0
56684: ST_TO_ADDR
// end ;
56685: LD_VAR 0 3
56689: RET
// export function HealTarget ( sci ) ; begin
56690: LD_INT 0
56692: PPUSH
// if not sci then
56693: LD_VAR 0 1
56697: NOT
56698: IFFALSE 56702
// exit ;
56700: GO 56767
// result := 0 ;
56702: LD_ADDR_VAR 0 2
56706: PUSH
56707: LD_INT 0
56709: ST_TO_ADDR
// if GetTaskList ( sci ) then
56710: LD_VAR 0 1
56714: PPUSH
56715: CALL_OW 437
56719: IFFALSE 56767
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56721: LD_VAR 0 1
56725: PPUSH
56726: CALL_OW 437
56730: PUSH
56731: LD_INT 1
56733: ARRAY
56734: PUSH
56735: LD_INT 1
56737: ARRAY
56738: PUSH
56739: LD_STRING l
56741: EQUAL
56742: IFFALSE 56767
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56744: LD_ADDR_VAR 0 2
56748: PUSH
56749: LD_VAR 0 1
56753: PPUSH
56754: CALL_OW 437
56758: PUSH
56759: LD_INT 1
56761: ARRAY
56762: PUSH
56763: LD_INT 4
56765: ARRAY
56766: ST_TO_ADDR
// end ;
56767: LD_VAR 0 2
56771: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56772: LD_INT 0
56774: PPUSH
56775: PPUSH
56776: PPUSH
56777: PPUSH
// if not base_units then
56778: LD_VAR 0 1
56782: NOT
56783: IFFALSE 56787
// exit ;
56785: GO 56874
// result := false ;
56787: LD_ADDR_VAR 0 2
56791: PUSH
56792: LD_INT 0
56794: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56795: LD_ADDR_VAR 0 5
56799: PUSH
56800: LD_VAR 0 1
56804: PPUSH
56805: LD_INT 21
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PPUSH
56815: CALL_OW 72
56819: ST_TO_ADDR
// if not tmp then
56820: LD_VAR 0 5
56824: NOT
56825: IFFALSE 56829
// exit ;
56827: GO 56874
// for i in tmp do
56829: LD_ADDR_VAR 0 3
56833: PUSH
56834: LD_VAR 0 5
56838: PUSH
56839: FOR_IN
56840: IFFALSE 56872
// begin result := EnemyInRange ( i , 22 ) ;
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_VAR 0 3
56851: PPUSH
56852: LD_INT 22
56854: PPUSH
56855: CALL 55110 0 2
56859: ST_TO_ADDR
// if result then
56860: LD_VAR 0 2
56864: IFFALSE 56870
// exit ;
56866: POP
56867: POP
56868: GO 56874
// end ;
56870: GO 56839
56872: POP
56873: POP
// end ;
56874: LD_VAR 0 2
56878: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56879: LD_INT 0
56881: PPUSH
56882: PPUSH
// if not units then
56883: LD_VAR 0 1
56887: NOT
56888: IFFALSE 56892
// exit ;
56890: GO 56962
// result := [ ] ;
56892: LD_ADDR_VAR 0 3
56896: PUSH
56897: EMPTY
56898: ST_TO_ADDR
// for i in units do
56899: LD_ADDR_VAR 0 4
56903: PUSH
56904: LD_VAR 0 1
56908: PUSH
56909: FOR_IN
56910: IFFALSE 56960
// if GetTag ( i ) = tag then
56912: LD_VAR 0 4
56916: PPUSH
56917: CALL_OW 110
56921: PUSH
56922: LD_VAR 0 2
56926: EQUAL
56927: IFFALSE 56958
// result := Replace ( result , result + 1 , i ) ;
56929: LD_ADDR_VAR 0 3
56933: PUSH
56934: LD_VAR 0 3
56938: PPUSH
56939: LD_VAR 0 3
56943: PUSH
56944: LD_INT 1
56946: PLUS
56947: PPUSH
56948: LD_VAR 0 4
56952: PPUSH
56953: CALL_OW 1
56957: ST_TO_ADDR
56958: GO 56909
56960: POP
56961: POP
// end ;
56962: LD_VAR 0 3
56966: RET
// export function IsDriver ( un ) ; begin
56967: LD_INT 0
56969: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56970: LD_ADDR_VAR 0 2
56974: PUSH
56975: LD_VAR 0 1
56979: PUSH
56980: LD_INT 55
56982: PUSH
56983: EMPTY
56984: LIST
56985: PPUSH
56986: CALL_OW 69
56990: IN
56991: ST_TO_ADDR
// end ;
56992: LD_VAR 0 2
56996: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56997: LD_INT 0
56999: PPUSH
57000: PPUSH
// list := [ ] ;
57001: LD_ADDR_VAR 0 5
57005: PUSH
57006: EMPTY
57007: ST_TO_ADDR
// case d of 0 :
57008: LD_VAR 0 3
57012: PUSH
57013: LD_INT 0
57015: DOUBLE
57016: EQUAL
57017: IFTRUE 57021
57019: GO 57154
57021: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57022: LD_ADDR_VAR 0 5
57026: PUSH
57027: LD_VAR 0 1
57031: PUSH
57032: LD_INT 4
57034: MINUS
57035: PUSH
57036: LD_VAR 0 2
57040: PUSH
57041: LD_INT 4
57043: MINUS
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: PUSH
57053: LD_VAR 0 1
57057: PUSH
57058: LD_INT 3
57060: MINUS
57061: PUSH
57062: LD_VAR 0 2
57066: PUSH
57067: LD_INT 1
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: PUSH
57075: LD_VAR 0 1
57079: PUSH
57080: LD_INT 4
57082: PLUS
57083: PUSH
57084: LD_VAR 0 2
57088: PUSH
57089: LD_INT 4
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: PUSH
57097: LD_VAR 0 1
57101: PUSH
57102: LD_INT 3
57104: PLUS
57105: PUSH
57106: LD_VAR 0 2
57110: PUSH
57111: LD_INT 3
57113: PLUS
57114: PUSH
57115: LD_INT 5
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: PUSH
57123: LD_VAR 0 1
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: LD_INT 4
57135: PLUS
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// end ; 1 :
57152: GO 57852
57154: LD_INT 1
57156: DOUBLE
57157: EQUAL
57158: IFTRUE 57162
57160: GO 57295
57162: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57163: LD_ADDR_VAR 0 5
57167: PUSH
57168: LD_VAR 0 1
57172: PUSH
57173: LD_VAR 0 2
57177: PUSH
57178: LD_INT 4
57180: MINUS
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: PUSH
57190: LD_VAR 0 1
57194: PUSH
57195: LD_INT 3
57197: MINUS
57198: PUSH
57199: LD_VAR 0 2
57203: PUSH
57204: LD_INT 3
57206: MINUS
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: PUSH
57216: LD_VAR 0 1
57220: PUSH
57221: LD_INT 4
57223: MINUS
57224: PUSH
57225: LD_VAR 0 2
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: PUSH
57238: LD_VAR 0 1
57242: PUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_INT 3
57250: PLUS
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: LD_INT 4
57267: PLUS
57268: PUSH
57269: LD_VAR 0 2
57273: PUSH
57274: LD_INT 4
57276: PLUS
57277: PUSH
57278: LD_INT 5
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: ST_TO_ADDR
// end ; 2 :
57293: GO 57852
57295: LD_INT 2
57297: DOUBLE
57298: EQUAL
57299: IFTRUE 57303
57301: GO 57432
57303: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57304: LD_ADDR_VAR 0 5
57308: PUSH
57309: LD_VAR 0 1
57313: PUSH
57314: LD_VAR 0 2
57318: PUSH
57319: LD_INT 3
57321: MINUS
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: PUSH
57331: LD_VAR 0 1
57335: PUSH
57336: LD_INT 4
57338: PLUS
57339: PUSH
57340: LD_VAR 0 2
57344: PUSH
57345: LD_INT 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: PUSH
57353: LD_VAR 0 1
57357: PUSH
57358: LD_VAR 0 2
57362: PUSH
57363: LD_INT 4
57365: PLUS
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: PUSH
57375: LD_VAR 0 1
57379: PUSH
57380: LD_INT 3
57382: MINUS
57383: PUSH
57384: LD_VAR 0 2
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: PUSH
57397: LD_VAR 0 1
57401: PUSH
57402: LD_INT 4
57404: MINUS
57405: PUSH
57406: LD_VAR 0 2
57410: PUSH
57411: LD_INT 4
57413: MINUS
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: ST_TO_ADDR
// end ; 3 :
57430: GO 57852
57432: LD_INT 3
57434: DOUBLE
57435: EQUAL
57436: IFTRUE 57440
57438: GO 57573
57440: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57441: LD_ADDR_VAR 0 5
57445: PUSH
57446: LD_VAR 0 1
57450: PUSH
57451: LD_INT 3
57453: PLUS
57454: PUSH
57455: LD_VAR 0 2
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: PUSH
57468: LD_VAR 0 1
57472: PUSH
57473: LD_INT 4
57475: PLUS
57476: PUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_INT 4
57484: PLUS
57485: PUSH
57486: LD_INT 5
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: PUSH
57494: LD_VAR 0 1
57498: PUSH
57499: LD_INT 4
57501: MINUS
57502: PUSH
57503: LD_VAR 0 2
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: LIST
57515: PUSH
57516: LD_VAR 0 1
57520: PUSH
57521: LD_VAR 0 2
57525: PUSH
57526: LD_INT 4
57528: MINUS
57529: PUSH
57530: LD_INT 3
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: PUSH
57538: LD_VAR 0 1
57542: PUSH
57543: LD_INT 3
57545: MINUS
57546: PUSH
57547: LD_VAR 0 2
57551: PUSH
57552: LD_INT 3
57554: MINUS
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// end ; 4 :
57571: GO 57852
57573: LD_INT 4
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57581
57579: GO 57714
57581: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57582: LD_ADDR_VAR 0 5
57586: PUSH
57587: LD_VAR 0 1
57591: PUSH
57592: LD_VAR 0 2
57596: PUSH
57597: LD_INT 4
57599: PLUS
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PUSH
57609: LD_VAR 0 1
57613: PUSH
57614: LD_INT 3
57616: PLUS
57617: PUSH
57618: LD_VAR 0 2
57622: PUSH
57623: LD_INT 3
57625: PLUS
57626: PUSH
57627: LD_INT 5
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: PUSH
57635: LD_VAR 0 1
57639: PUSH
57640: LD_INT 4
57642: PLUS
57643: PUSH
57644: LD_VAR 0 2
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: PUSH
57657: LD_VAR 0 1
57661: PUSH
57662: LD_VAR 0 2
57666: PUSH
57667: LD_INT 3
57669: MINUS
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_VAR 0 1
57683: PUSH
57684: LD_INT 4
57686: MINUS
57687: PUSH
57688: LD_VAR 0 2
57692: PUSH
57693: LD_INT 4
57695: MINUS
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// end ; 5 :
57712: GO 57852
57714: LD_INT 5
57716: DOUBLE
57717: EQUAL
57718: IFTRUE 57722
57720: GO 57851
57722: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57723: LD_ADDR_VAR 0 5
57727: PUSH
57728: LD_VAR 0 1
57732: PUSH
57733: LD_INT 4
57735: MINUS
57736: PUSH
57737: LD_VAR 0 2
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: PUSH
57750: LD_VAR 0 1
57754: PUSH
57755: LD_VAR 0 2
57759: PUSH
57760: LD_INT 4
57762: MINUS
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: PUSH
57772: LD_VAR 0 1
57776: PUSH
57777: LD_INT 4
57779: PLUS
57780: PUSH
57781: LD_VAR 0 2
57785: PUSH
57786: LD_INT 4
57788: PLUS
57789: PUSH
57790: LD_INT 5
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: LIST
57797: PUSH
57798: LD_VAR 0 1
57802: PUSH
57803: LD_INT 3
57805: PLUS
57806: PUSH
57807: LD_VAR 0 2
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: LD_VAR 0 2
57829: PUSH
57830: LD_INT 3
57832: PLUS
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// end ; end ;
57849: GO 57852
57851: POP
// result := list ;
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: LD_VAR 0 5
57861: ST_TO_ADDR
// end ;
57862: LD_VAR 0 4
57866: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57867: LD_INT 0
57869: PPUSH
57870: PPUSH
57871: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57872: LD_VAR 0 1
57876: NOT
57877: PUSH
57878: LD_VAR 0 2
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: IN
57901: NOT
57902: OR
57903: IFFALSE 57907
// exit ;
57905: GO 57999
// tmp := [ ] ;
57907: LD_ADDR_VAR 0 5
57911: PUSH
57912: EMPTY
57913: ST_TO_ADDR
// for i in units do
57914: LD_ADDR_VAR 0 4
57918: PUSH
57919: LD_VAR 0 1
57923: PUSH
57924: FOR_IN
57925: IFFALSE 57968
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57927: LD_ADDR_VAR 0 5
57931: PUSH
57932: LD_VAR 0 5
57936: PPUSH
57937: LD_VAR 0 5
57941: PUSH
57942: LD_INT 1
57944: PLUS
57945: PPUSH
57946: LD_VAR 0 4
57950: PPUSH
57951: LD_VAR 0 2
57955: PPUSH
57956: CALL_OW 259
57960: PPUSH
57961: CALL_OW 2
57965: ST_TO_ADDR
57966: GO 57924
57968: POP
57969: POP
// if not tmp then
57970: LD_VAR 0 5
57974: NOT
57975: IFFALSE 57979
// exit ;
57977: GO 57999
// result := SortListByListDesc ( units , tmp ) ;
57979: LD_ADDR_VAR 0 3
57983: PUSH
57984: LD_VAR 0 1
57988: PPUSH
57989: LD_VAR 0 5
57993: PPUSH
57994: CALL_OW 77
57998: ST_TO_ADDR
// end ;
57999: LD_VAR 0 3
58003: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58004: LD_INT 0
58006: PPUSH
58007: PPUSH
58008: PPUSH
// result := false ;
58009: LD_ADDR_VAR 0 3
58013: PUSH
58014: LD_INT 0
58016: ST_TO_ADDR
// x := GetX ( building ) ;
58017: LD_ADDR_VAR 0 4
58021: PUSH
58022: LD_VAR 0 2
58026: PPUSH
58027: CALL_OW 250
58031: ST_TO_ADDR
// y := GetY ( building ) ;
58032: LD_ADDR_VAR 0 5
58036: PUSH
58037: LD_VAR 0 2
58041: PPUSH
58042: CALL_OW 251
58046: ST_TO_ADDR
// if not building or not x or not y then
58047: LD_VAR 0 2
58051: NOT
58052: PUSH
58053: LD_VAR 0 4
58057: NOT
58058: OR
58059: PUSH
58060: LD_VAR 0 5
58064: NOT
58065: OR
58066: IFFALSE 58070
// exit ;
58068: GO 58162
// if GetTaskList ( unit ) then
58070: LD_VAR 0 1
58074: PPUSH
58075: CALL_OW 437
58079: IFFALSE 58162
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58081: LD_STRING e
58083: PUSH
58084: LD_VAR 0 1
58088: PPUSH
58089: CALL_OW 437
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PUSH
58098: LD_INT 1
58100: ARRAY
58101: EQUAL
58102: PUSH
58103: LD_VAR 0 4
58107: PUSH
58108: LD_VAR 0 1
58112: PPUSH
58113: CALL_OW 437
58117: PUSH
58118: LD_INT 1
58120: ARRAY
58121: PUSH
58122: LD_INT 2
58124: ARRAY
58125: EQUAL
58126: AND
58127: PUSH
58128: LD_VAR 0 5
58132: PUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 437
58142: PUSH
58143: LD_INT 1
58145: ARRAY
58146: PUSH
58147: LD_INT 3
58149: ARRAY
58150: EQUAL
58151: AND
58152: IFFALSE 58162
// result := true end ;
58154: LD_ADDR_VAR 0 3
58158: PUSH
58159: LD_INT 1
58161: ST_TO_ADDR
// end ;
58162: LD_VAR 0 3
58166: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58167: LD_INT 0
58169: PPUSH
// result := false ;
58170: LD_ADDR_VAR 0 4
58174: PUSH
58175: LD_INT 0
58177: ST_TO_ADDR
// if GetTaskList ( unit ) then
58178: LD_VAR 0 1
58182: PPUSH
58183: CALL_OW 437
58187: IFFALSE 58270
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58189: LD_STRING M
58191: PUSH
58192: LD_VAR 0 1
58196: PPUSH
58197: CALL_OW 437
58201: PUSH
58202: LD_INT 1
58204: ARRAY
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: EQUAL
58210: PUSH
58211: LD_VAR 0 2
58215: PUSH
58216: LD_VAR 0 1
58220: PPUSH
58221: CALL_OW 437
58225: PUSH
58226: LD_INT 1
58228: ARRAY
58229: PUSH
58230: LD_INT 2
58232: ARRAY
58233: EQUAL
58234: AND
58235: PUSH
58236: LD_VAR 0 3
58240: PUSH
58241: LD_VAR 0 1
58245: PPUSH
58246: CALL_OW 437
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PUSH
58255: LD_INT 3
58257: ARRAY
58258: EQUAL
58259: AND
58260: IFFALSE 58270
// result := true ;
58262: LD_ADDR_VAR 0 4
58266: PUSH
58267: LD_INT 1
58269: ST_TO_ADDR
// end ; end ;
58270: LD_VAR 0 4
58274: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58275: LD_INT 0
58277: PPUSH
58278: PPUSH
58279: PPUSH
58280: PPUSH
// if not unit or not area then
58281: LD_VAR 0 1
58285: NOT
58286: PUSH
58287: LD_VAR 0 2
58291: NOT
58292: OR
58293: IFFALSE 58297
// exit ;
58295: GO 58461
// tmp := AreaToList ( area , i ) ;
58297: LD_ADDR_VAR 0 6
58301: PUSH
58302: LD_VAR 0 2
58306: PPUSH
58307: LD_VAR 0 5
58311: PPUSH
58312: CALL_OW 517
58316: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58317: LD_ADDR_VAR 0 5
58321: PUSH
58322: DOUBLE
58323: LD_INT 1
58325: DEC
58326: ST_TO_ADDR
58327: LD_VAR 0 6
58331: PUSH
58332: LD_INT 1
58334: ARRAY
58335: PUSH
58336: FOR_TO
58337: IFFALSE 58459
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58339: LD_ADDR_VAR 0 7
58343: PUSH
58344: LD_VAR 0 6
58348: PUSH
58349: LD_INT 1
58351: ARRAY
58352: PUSH
58353: LD_VAR 0 5
58357: ARRAY
58358: PUSH
58359: LD_VAR 0 6
58363: PUSH
58364: LD_INT 2
58366: ARRAY
58367: PUSH
58368: LD_VAR 0 5
58372: ARRAY
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58378: LD_VAR 0 7
58382: PUSH
58383: LD_INT 1
58385: ARRAY
58386: PPUSH
58387: LD_VAR 0 7
58391: PUSH
58392: LD_INT 2
58394: ARRAY
58395: PPUSH
58396: CALL_OW 428
58400: PUSH
58401: LD_INT 0
58403: EQUAL
58404: IFFALSE 58457
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58406: LD_VAR 0 1
58410: PPUSH
58411: LD_VAR 0 7
58415: PUSH
58416: LD_INT 1
58418: ARRAY
58419: PPUSH
58420: LD_VAR 0 7
58424: PUSH
58425: LD_INT 2
58427: ARRAY
58428: PPUSH
58429: LD_VAR 0 3
58433: PPUSH
58434: CALL_OW 48
// result := IsPlaced ( unit ) ;
58438: LD_ADDR_VAR 0 4
58442: PUSH
58443: LD_VAR 0 1
58447: PPUSH
58448: CALL_OW 305
58452: ST_TO_ADDR
// exit ;
58453: POP
58454: POP
58455: GO 58461
// end ; end ;
58457: GO 58336
58459: POP
58460: POP
// end ;
58461: LD_VAR 0 4
58465: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58466: LD_INT 0
58468: PPUSH
58469: PPUSH
58470: PPUSH
// if not side or side > 8 then
58471: LD_VAR 0 1
58475: NOT
58476: PUSH
58477: LD_VAR 0 1
58481: PUSH
58482: LD_INT 8
58484: GREATER
58485: OR
58486: IFFALSE 58490
// exit ;
58488: GO 58677
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58490: LD_ADDR_VAR 0 4
58494: PUSH
58495: LD_INT 22
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 21
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PPUSH
58521: CALL_OW 69
58525: ST_TO_ADDR
// if not tmp then
58526: LD_VAR 0 4
58530: NOT
58531: IFFALSE 58535
// exit ;
58533: GO 58677
// enable_addtolog := true ;
58535: LD_ADDR_OWVAR 81
58539: PUSH
58540: LD_INT 1
58542: ST_TO_ADDR
// AddToLog ( [ ) ;
58543: LD_STRING [
58545: PPUSH
58546: CALL_OW 561
// for i in tmp do
58550: LD_ADDR_VAR 0 3
58554: PUSH
58555: LD_VAR 0 4
58559: PUSH
58560: FOR_IN
58561: IFFALSE 58668
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58563: LD_STRING [
58565: PUSH
58566: LD_VAR 0 3
58570: PPUSH
58571: CALL_OW 266
58575: STR
58576: PUSH
58577: LD_STRING , 
58579: STR
58580: PUSH
58581: LD_VAR 0 3
58585: PPUSH
58586: CALL_OW 250
58590: STR
58591: PUSH
58592: LD_STRING , 
58594: STR
58595: PUSH
58596: LD_VAR 0 3
58600: PPUSH
58601: CALL_OW 251
58605: STR
58606: PUSH
58607: LD_STRING , 
58609: STR
58610: PUSH
58611: LD_VAR 0 3
58615: PPUSH
58616: CALL_OW 254
58620: STR
58621: PUSH
58622: LD_STRING , 
58624: STR
58625: PUSH
58626: LD_VAR 0 3
58630: PPUSH
58631: LD_INT 1
58633: PPUSH
58634: CALL_OW 268
58638: STR
58639: PUSH
58640: LD_STRING , 
58642: STR
58643: PUSH
58644: LD_VAR 0 3
58648: PPUSH
58649: LD_INT 2
58651: PPUSH
58652: CALL_OW 268
58656: STR
58657: PUSH
58658: LD_STRING ],
58660: STR
58661: PPUSH
58662: CALL_OW 561
// end ;
58666: GO 58560
58668: POP
58669: POP
// AddToLog ( ]; ) ;
58670: LD_STRING ];
58672: PPUSH
58673: CALL_OW 561
// end ;
58677: LD_VAR 0 2
58681: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58682: LD_INT 0
58684: PPUSH
58685: PPUSH
58686: PPUSH
58687: PPUSH
58688: PPUSH
// if not area or not rate or not max then
58689: LD_VAR 0 1
58693: NOT
58694: PUSH
58695: LD_VAR 0 2
58699: NOT
58700: OR
58701: PUSH
58702: LD_VAR 0 4
58706: NOT
58707: OR
58708: IFFALSE 58712
// exit ;
58710: GO 58904
// while 1 do
58712: LD_INT 1
58714: IFFALSE 58904
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58716: LD_ADDR_VAR 0 9
58720: PUSH
58721: LD_VAR 0 1
58725: PPUSH
58726: LD_INT 1
58728: PPUSH
58729: CALL_OW 287
58733: PUSH
58734: LD_INT 10
58736: MUL
58737: ST_TO_ADDR
// r := rate / 10 ;
58738: LD_ADDR_VAR 0 7
58742: PUSH
58743: LD_VAR 0 2
58747: PUSH
58748: LD_INT 10
58750: DIVREAL
58751: ST_TO_ADDR
// time := 1 1$00 ;
58752: LD_ADDR_VAR 0 8
58756: PUSH
58757: LD_INT 2100
58759: ST_TO_ADDR
// if amount < min then
58760: LD_VAR 0 9
58764: PUSH
58765: LD_VAR 0 3
58769: LESS
58770: IFFALSE 58788
// r := r * 2 else
58772: LD_ADDR_VAR 0 7
58776: PUSH
58777: LD_VAR 0 7
58781: PUSH
58782: LD_INT 2
58784: MUL
58785: ST_TO_ADDR
58786: GO 58814
// if amount > max then
58788: LD_VAR 0 9
58792: PUSH
58793: LD_VAR 0 4
58797: GREATER
58798: IFFALSE 58814
// r := r / 2 ;
58800: LD_ADDR_VAR 0 7
58804: PUSH
58805: LD_VAR 0 7
58809: PUSH
58810: LD_INT 2
58812: DIVREAL
58813: ST_TO_ADDR
// time := time / r ;
58814: LD_ADDR_VAR 0 8
58818: PUSH
58819: LD_VAR 0 8
58823: PUSH
58824: LD_VAR 0 7
58828: DIVREAL
58829: ST_TO_ADDR
// if time < 0 then
58830: LD_VAR 0 8
58834: PUSH
58835: LD_INT 0
58837: LESS
58838: IFFALSE 58855
// time := time * - 1 ;
58840: LD_ADDR_VAR 0 8
58844: PUSH
58845: LD_VAR 0 8
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: MUL
58854: ST_TO_ADDR
// wait ( time ) ;
58855: LD_VAR 0 8
58859: PPUSH
58860: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58864: LD_INT 35
58866: PPUSH
58867: LD_INT 875
58869: PPUSH
58870: CALL_OW 12
58874: PPUSH
58875: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58879: LD_INT 1
58881: PPUSH
58882: LD_INT 5
58884: PPUSH
58885: CALL_OW 12
58889: PPUSH
58890: LD_VAR 0 1
58894: PPUSH
58895: LD_INT 1
58897: PPUSH
58898: CALL_OW 55
// end ;
58902: GO 58712
// end ;
58904: LD_VAR 0 5
58908: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58909: LD_INT 0
58911: PPUSH
58912: PPUSH
58913: PPUSH
58914: PPUSH
58915: PPUSH
58916: PPUSH
58917: PPUSH
58918: PPUSH
// if not turrets or not factories then
58919: LD_VAR 0 1
58923: NOT
58924: PUSH
58925: LD_VAR 0 2
58929: NOT
58930: OR
58931: IFFALSE 58935
// exit ;
58933: GO 59242
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58935: LD_ADDR_VAR 0 10
58939: PUSH
58940: LD_INT 5
58942: PUSH
58943: LD_INT 6
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 2
58952: PUSH
58953: LD_INT 4
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: PUSH
58963: LD_INT 5
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 24
58977: PUSH
58978: LD_INT 25
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 23
58987: PUSH
58988: LD_INT 27
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 42
59001: PUSH
59002: LD_INT 43
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 44
59011: PUSH
59012: LD_INT 46
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 45
59021: PUSH
59022: LD_INT 47
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: ST_TO_ADDR
// result := [ ] ;
59039: LD_ADDR_VAR 0 3
59043: PUSH
59044: EMPTY
59045: ST_TO_ADDR
// for i in turrets do
59046: LD_ADDR_VAR 0 4
59050: PUSH
59051: LD_VAR 0 1
59055: PUSH
59056: FOR_IN
59057: IFFALSE 59240
// begin nat := GetNation ( i ) ;
59059: LD_ADDR_VAR 0 7
59063: PUSH
59064: LD_VAR 0 4
59068: PPUSH
59069: CALL_OW 248
59073: ST_TO_ADDR
// weapon := 0 ;
59074: LD_ADDR_VAR 0 8
59078: PUSH
59079: LD_INT 0
59081: ST_TO_ADDR
// if not nat then
59082: LD_VAR 0 7
59086: NOT
59087: IFFALSE 59091
// continue ;
59089: GO 59056
// for j in list [ nat ] do
59091: LD_ADDR_VAR 0 5
59095: PUSH
59096: LD_VAR 0 10
59100: PUSH
59101: LD_VAR 0 7
59105: ARRAY
59106: PUSH
59107: FOR_IN
59108: IFFALSE 59149
// if GetBWeapon ( i ) = j [ 1 ] then
59110: LD_VAR 0 4
59114: PPUSH
59115: CALL_OW 269
59119: PUSH
59120: LD_VAR 0 5
59124: PUSH
59125: LD_INT 1
59127: ARRAY
59128: EQUAL
59129: IFFALSE 59147
// begin weapon := j [ 2 ] ;
59131: LD_ADDR_VAR 0 8
59135: PUSH
59136: LD_VAR 0 5
59140: PUSH
59141: LD_INT 2
59143: ARRAY
59144: ST_TO_ADDR
// break ;
59145: GO 59149
// end ;
59147: GO 59107
59149: POP
59150: POP
// if not weapon then
59151: LD_VAR 0 8
59155: NOT
59156: IFFALSE 59160
// continue ;
59158: GO 59056
// for k in factories do
59160: LD_ADDR_VAR 0 6
59164: PUSH
59165: LD_VAR 0 2
59169: PUSH
59170: FOR_IN
59171: IFFALSE 59236
// begin weapons := AvailableWeaponList ( k ) ;
59173: LD_ADDR_VAR 0 9
59177: PUSH
59178: LD_VAR 0 6
59182: PPUSH
59183: CALL_OW 478
59187: ST_TO_ADDR
// if not weapons then
59188: LD_VAR 0 9
59192: NOT
59193: IFFALSE 59197
// continue ;
59195: GO 59170
// if weapon in weapons then
59197: LD_VAR 0 8
59201: PUSH
59202: LD_VAR 0 9
59206: IN
59207: IFFALSE 59234
// begin result := [ i , weapon ] ;
59209: LD_ADDR_VAR 0 3
59213: PUSH
59214: LD_VAR 0 4
59218: PUSH
59219: LD_VAR 0 8
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: ST_TO_ADDR
// exit ;
59228: POP
59229: POP
59230: POP
59231: POP
59232: GO 59242
// end ; end ;
59234: GO 59170
59236: POP
59237: POP
// end ;
59238: GO 59056
59240: POP
59241: POP
// end ;
59242: LD_VAR 0 3
59246: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59247: LD_INT 0
59249: PPUSH
// if not side or side > 8 then
59250: LD_VAR 0 3
59254: NOT
59255: PUSH
59256: LD_VAR 0 3
59260: PUSH
59261: LD_INT 8
59263: GREATER
59264: OR
59265: IFFALSE 59269
// exit ;
59267: GO 59328
// if not range then
59269: LD_VAR 0 4
59273: NOT
59274: IFFALSE 59285
// range := - 12 ;
59276: LD_ADDR_VAR 0 4
59280: PUSH
59281: LD_INT 12
59283: NEG
59284: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59285: LD_VAR 0 1
59289: PPUSH
59290: LD_VAR 0 2
59294: PPUSH
59295: LD_VAR 0 3
59299: PPUSH
59300: LD_VAR 0 4
59304: PPUSH
59305: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59309: LD_VAR 0 1
59313: PPUSH
59314: LD_VAR 0 2
59318: PPUSH
59319: LD_VAR 0 3
59323: PPUSH
59324: CALL_OW 331
// end ;
59328: LD_VAR 0 5
59332: RET
// export function Video ( mode ) ; begin
59333: LD_INT 0
59335: PPUSH
// ingame_video = mode ;
59336: LD_ADDR_OWVAR 52
59340: PUSH
59341: LD_VAR 0 1
59345: ST_TO_ADDR
// interface_hidden = mode ;
59346: LD_ADDR_OWVAR 54
59350: PUSH
59351: LD_VAR 0 1
59355: ST_TO_ADDR
// end ;
59356: LD_VAR 0 2
59360: RET
// export function Join ( array , element ) ; begin
59361: LD_INT 0
59363: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59364: LD_ADDR_VAR 0 3
59368: PUSH
59369: LD_VAR 0 1
59373: PPUSH
59374: LD_VAR 0 1
59378: PUSH
59379: LD_INT 1
59381: PLUS
59382: PPUSH
59383: LD_VAR 0 2
59387: PPUSH
59388: CALL_OW 1
59392: ST_TO_ADDR
// end ;
59393: LD_VAR 0 3
59397: RET
// export function JoinUnion ( array , element ) ; begin
59398: LD_INT 0
59400: PPUSH
// result := array union element ;
59401: LD_ADDR_VAR 0 3
59405: PUSH
59406: LD_VAR 0 1
59410: PUSH
59411: LD_VAR 0 2
59415: UNION
59416: ST_TO_ADDR
// end ;
59417: LD_VAR 0 3
59421: RET
// export function GetBehemoths ( side ) ; begin
59422: LD_INT 0
59424: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59425: LD_ADDR_VAR 0 2
59429: PUSH
59430: LD_INT 22
59432: PUSH
59433: LD_VAR 0 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 31
59444: PUSH
59445: LD_INT 25
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PPUSH
59456: CALL_OW 69
59460: ST_TO_ADDR
// end ;
59461: LD_VAR 0 2
59465: RET
// export function Shuffle ( array ) ; var i , index ; begin
59466: LD_INT 0
59468: PPUSH
59469: PPUSH
59470: PPUSH
// result := [ ] ;
59471: LD_ADDR_VAR 0 2
59475: PUSH
59476: EMPTY
59477: ST_TO_ADDR
// if not array then
59478: LD_VAR 0 1
59482: NOT
59483: IFFALSE 59487
// exit ;
59485: GO 59586
// Randomize ;
59487: CALL_OW 10
// for i = array downto 1 do
59491: LD_ADDR_VAR 0 3
59495: PUSH
59496: DOUBLE
59497: LD_VAR 0 1
59501: INC
59502: ST_TO_ADDR
59503: LD_INT 1
59505: PUSH
59506: FOR_DOWNTO
59507: IFFALSE 59584
// begin index := rand ( 1 , array ) ;
59509: LD_ADDR_VAR 0 4
59513: PUSH
59514: LD_INT 1
59516: PPUSH
59517: LD_VAR 0 1
59521: PPUSH
59522: CALL_OW 12
59526: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59527: LD_ADDR_VAR 0 2
59531: PUSH
59532: LD_VAR 0 2
59536: PPUSH
59537: LD_VAR 0 2
59541: PUSH
59542: LD_INT 1
59544: PLUS
59545: PPUSH
59546: LD_VAR 0 1
59550: PUSH
59551: LD_VAR 0 4
59555: ARRAY
59556: PPUSH
59557: CALL_OW 2
59561: ST_TO_ADDR
// array := Delete ( array , index ) ;
59562: LD_ADDR_VAR 0 1
59566: PUSH
59567: LD_VAR 0 1
59571: PPUSH
59572: LD_VAR 0 4
59576: PPUSH
59577: CALL_OW 3
59581: ST_TO_ADDR
// end ;
59582: GO 59506
59584: POP
59585: POP
// end ;
59586: LD_VAR 0 2
59590: RET
// export function GetBaseMaterials ( base ) ; begin
59591: LD_INT 0
59593: PPUSH
// result := [ 0 , 0 , 0 ] ;
59594: LD_ADDR_VAR 0 2
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: LD_INT 0
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: ST_TO_ADDR
// if not base then
59613: LD_VAR 0 1
59617: NOT
59618: IFFALSE 59622
// exit ;
59620: GO 59671
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59622: LD_ADDR_VAR 0 2
59626: PUSH
59627: LD_VAR 0 1
59631: PPUSH
59632: LD_INT 1
59634: PPUSH
59635: CALL_OW 275
59639: PUSH
59640: LD_VAR 0 1
59644: PPUSH
59645: LD_INT 2
59647: PPUSH
59648: CALL_OW 275
59652: PUSH
59653: LD_VAR 0 1
59657: PPUSH
59658: LD_INT 3
59660: PPUSH
59661: CALL_OW 275
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// end ;
59671: LD_VAR 0 2
59675: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59676: LD_INT 0
59678: PPUSH
59679: PPUSH
// result := array ;
59680: LD_ADDR_VAR 0 3
59684: PUSH
59685: LD_VAR 0 1
59689: ST_TO_ADDR
// if size > 0 then
59690: LD_VAR 0 2
59694: PUSH
59695: LD_INT 0
59697: GREATER
59698: IFFALSE 59744
// for i := array downto size do
59700: LD_ADDR_VAR 0 4
59704: PUSH
59705: DOUBLE
59706: LD_VAR 0 1
59710: INC
59711: ST_TO_ADDR
59712: LD_VAR 0 2
59716: PUSH
59717: FOR_DOWNTO
59718: IFFALSE 59742
// result := Delete ( result , result ) ;
59720: LD_ADDR_VAR 0 3
59724: PUSH
59725: LD_VAR 0 3
59729: PPUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 3
59739: ST_TO_ADDR
59740: GO 59717
59742: POP
59743: POP
// end ;
59744: LD_VAR 0 3
59748: RET
// export function ComExit ( unit ) ; var tmp ; begin
59749: LD_INT 0
59751: PPUSH
59752: PPUSH
// if not IsInUnit ( unit ) then
59753: LD_VAR 0 1
59757: PPUSH
59758: CALL_OW 310
59762: NOT
59763: IFFALSE 59767
// exit ;
59765: GO 59827
// tmp := IsInUnit ( unit ) ;
59767: LD_ADDR_VAR 0 3
59771: PUSH
59772: LD_VAR 0 1
59776: PPUSH
59777: CALL_OW 310
59781: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59782: LD_VAR 0 3
59786: PPUSH
59787: CALL_OW 247
59791: PUSH
59792: LD_INT 2
59794: EQUAL
59795: IFFALSE 59808
// ComExitVehicle ( unit ) else
59797: LD_VAR 0 1
59801: PPUSH
59802: CALL_OW 121
59806: GO 59817
// ComExitBuilding ( unit ) ;
59808: LD_VAR 0 1
59812: PPUSH
59813: CALL_OW 122
// result := tmp ;
59817: LD_ADDR_VAR 0 2
59821: PUSH
59822: LD_VAR 0 3
59826: ST_TO_ADDR
// end ;
59827: LD_VAR 0 2
59831: RET
// export function ComExitAll ( units ) ; var i ; begin
59832: LD_INT 0
59834: PPUSH
59835: PPUSH
// if not units then
59836: LD_VAR 0 1
59840: NOT
59841: IFFALSE 59845
// exit ;
59843: GO 59871
// for i in units do
59845: LD_ADDR_VAR 0 3
59849: PUSH
59850: LD_VAR 0 1
59854: PUSH
59855: FOR_IN
59856: IFFALSE 59869
// ComExit ( i ) ;
59858: LD_VAR 0 3
59862: PPUSH
59863: CALL 59749 0 1
59867: GO 59855
59869: POP
59870: POP
// end ;
59871: LD_VAR 0 2
59875: RET
// export function ResetHc ; begin
59876: LD_INT 0
59878: PPUSH
// InitHc ;
59879: CALL_OW 19
// hc_importance := 0 ;
59883: LD_ADDR_OWVAR 32
59887: PUSH
59888: LD_INT 0
59890: ST_TO_ADDR
// end ;
59891: LD_VAR 0 1
59895: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59896: LD_INT 0
59898: PPUSH
59899: PPUSH
59900: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59901: LD_ADDR_VAR 0 6
59905: PUSH
59906: LD_VAR 0 1
59910: PUSH
59911: LD_VAR 0 3
59915: PLUS
59916: PUSH
59917: LD_INT 2
59919: DIV
59920: ST_TO_ADDR
// if _x < 0 then
59921: LD_VAR 0 6
59925: PUSH
59926: LD_INT 0
59928: LESS
59929: IFFALSE 59946
// _x := _x * - 1 ;
59931: LD_ADDR_VAR 0 6
59935: PUSH
59936: LD_VAR 0 6
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: MUL
59945: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59946: LD_ADDR_VAR 0 7
59950: PUSH
59951: LD_VAR 0 2
59955: PUSH
59956: LD_VAR 0 4
59960: PLUS
59961: PUSH
59962: LD_INT 2
59964: DIV
59965: ST_TO_ADDR
// if _y < 0 then
59966: LD_VAR 0 7
59970: PUSH
59971: LD_INT 0
59973: LESS
59974: IFFALSE 59991
// _y := _y * - 1 ;
59976: LD_ADDR_VAR 0 7
59980: PUSH
59981: LD_VAR 0 7
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: MUL
59990: ST_TO_ADDR
// result := [ _x , _y ] ;
59991: LD_ADDR_VAR 0 5
59995: PUSH
59996: LD_VAR 0 6
60000: PUSH
60001: LD_VAR 0 7
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: ST_TO_ADDR
// end ;
60010: LD_VAR 0 5
60014: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60015: LD_INT 0
60017: PPUSH
60018: PPUSH
60019: PPUSH
60020: PPUSH
// task := GetTaskList ( unit ) ;
60021: LD_ADDR_VAR 0 7
60025: PUSH
60026: LD_VAR 0 1
60030: PPUSH
60031: CALL_OW 437
60035: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60036: LD_VAR 0 7
60040: NOT
60041: PUSH
60042: LD_VAR 0 1
60046: PPUSH
60047: LD_VAR 0 2
60051: PPUSH
60052: CALL_OW 308
60056: NOT
60057: AND
60058: IFFALSE 60062
// exit ;
60060: GO 60180
// if IsInArea ( unit , area ) then
60062: LD_VAR 0 1
60066: PPUSH
60067: LD_VAR 0 2
60071: PPUSH
60072: CALL_OW 308
60076: IFFALSE 60094
// begin ComMoveToArea ( unit , goAway ) ;
60078: LD_VAR 0 1
60082: PPUSH
60083: LD_VAR 0 3
60087: PPUSH
60088: CALL_OW 113
// exit ;
60092: GO 60180
// end ; if task [ 1 ] [ 1 ] <> M then
60094: LD_VAR 0 7
60098: PUSH
60099: LD_INT 1
60101: ARRAY
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PUSH
60107: LD_STRING M
60109: NONEQUAL
60110: IFFALSE 60114
// exit ;
60112: GO 60180
// x := task [ 1 ] [ 2 ] ;
60114: LD_ADDR_VAR 0 5
60118: PUSH
60119: LD_VAR 0 7
60123: PUSH
60124: LD_INT 1
60126: ARRAY
60127: PUSH
60128: LD_INT 2
60130: ARRAY
60131: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60132: LD_ADDR_VAR 0 6
60136: PUSH
60137: LD_VAR 0 7
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PUSH
60146: LD_INT 3
60148: ARRAY
60149: ST_TO_ADDR
// if InArea ( x , y , area ) then
60150: LD_VAR 0 5
60154: PPUSH
60155: LD_VAR 0 6
60159: PPUSH
60160: LD_VAR 0 2
60164: PPUSH
60165: CALL_OW 309
60169: IFFALSE 60180
// ComStop ( unit ) ;
60171: LD_VAR 0 1
60175: PPUSH
60176: CALL_OW 141
// end ;
60180: LD_VAR 0 4
60184: RET
// export function Abs ( value ) ; begin
60185: LD_INT 0
60187: PPUSH
// result := value ;
60188: LD_ADDR_VAR 0 2
60192: PUSH
60193: LD_VAR 0 1
60197: ST_TO_ADDR
// if value < 0 then
60198: LD_VAR 0 1
60202: PUSH
60203: LD_INT 0
60205: LESS
60206: IFFALSE 60223
// result := value * - 1 ;
60208: LD_ADDR_VAR 0 2
60212: PUSH
60213: LD_VAR 0 1
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: MUL
60222: ST_TO_ADDR
// end ;
60223: LD_VAR 0 2
60227: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60228: LD_INT 0
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
60234: PPUSH
60235: PPUSH
60236: PPUSH
60237: PPUSH
// if not unit or not building then
60238: LD_VAR 0 1
60242: NOT
60243: PUSH
60244: LD_VAR 0 2
60248: NOT
60249: OR
60250: IFFALSE 60254
// exit ;
60252: GO 60480
// x := GetX ( building ) ;
60254: LD_ADDR_VAR 0 4
60258: PUSH
60259: LD_VAR 0 2
60263: PPUSH
60264: CALL_OW 250
60268: ST_TO_ADDR
// y := GetY ( building ) ;
60269: LD_ADDR_VAR 0 6
60273: PUSH
60274: LD_VAR 0 2
60278: PPUSH
60279: CALL_OW 251
60283: ST_TO_ADDR
// d := GetDir ( building ) ;
60284: LD_ADDR_VAR 0 8
60288: PUSH
60289: LD_VAR 0 2
60293: PPUSH
60294: CALL_OW 254
60298: ST_TO_ADDR
// r := 4 ;
60299: LD_ADDR_VAR 0 9
60303: PUSH
60304: LD_INT 4
60306: ST_TO_ADDR
// for i := 1 to 5 do
60307: LD_ADDR_VAR 0 10
60311: PUSH
60312: DOUBLE
60313: LD_INT 1
60315: DEC
60316: ST_TO_ADDR
60317: LD_INT 5
60319: PUSH
60320: FOR_TO
60321: IFFALSE 60478
// begin _x := ShiftX ( x , d , r + i ) ;
60323: LD_ADDR_VAR 0 5
60327: PUSH
60328: LD_VAR 0 4
60332: PPUSH
60333: LD_VAR 0 8
60337: PPUSH
60338: LD_VAR 0 9
60342: PUSH
60343: LD_VAR 0 10
60347: PLUS
60348: PPUSH
60349: CALL_OW 272
60353: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60354: LD_ADDR_VAR 0 7
60358: PUSH
60359: LD_VAR 0 6
60363: PPUSH
60364: LD_VAR 0 8
60368: PPUSH
60369: LD_VAR 0 9
60373: PUSH
60374: LD_VAR 0 10
60378: PLUS
60379: PPUSH
60380: CALL_OW 273
60384: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60385: LD_VAR 0 5
60389: PPUSH
60390: LD_VAR 0 7
60394: PPUSH
60395: CALL_OW 488
60399: PUSH
60400: LD_VAR 0 5
60404: PPUSH
60405: LD_VAR 0 7
60409: PPUSH
60410: CALL_OW 428
60414: PPUSH
60415: CALL_OW 247
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: LD_INT 2
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: IN
60430: NOT
60431: AND
60432: IFFALSE 60476
// begin ComMoveXY ( unit , _x , _y ) ;
60434: LD_VAR 0 1
60438: PPUSH
60439: LD_VAR 0 5
60443: PPUSH
60444: LD_VAR 0 7
60448: PPUSH
60449: CALL_OW 111
// result := [ _x , _y ] ;
60453: LD_ADDR_VAR 0 3
60457: PUSH
60458: LD_VAR 0 5
60462: PUSH
60463: LD_VAR 0 7
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// exit ;
60472: POP
60473: POP
60474: GO 60480
// end ; end ;
60476: GO 60320
60478: POP
60479: POP
// end ;
60480: LD_VAR 0 3
60484: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60485: LD_INT 0
60487: PPUSH
60488: PPUSH
60489: PPUSH
// result := 0 ;
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: LD_INT 0
60497: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60498: LD_VAR 0 1
60502: PUSH
60503: LD_INT 0
60505: LESS
60506: PUSH
60507: LD_VAR 0 1
60511: PUSH
60512: LD_INT 8
60514: GREATER
60515: OR
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_INT 0
60524: LESS
60525: OR
60526: PUSH
60527: LD_VAR 0 2
60531: PUSH
60532: LD_INT 8
60534: GREATER
60535: OR
60536: IFFALSE 60540
// exit ;
60538: GO 60615
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60540: LD_ADDR_VAR 0 4
60544: PUSH
60545: LD_INT 22
60547: PUSH
60548: LD_VAR 0 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PPUSH
60557: CALL_OW 69
60561: PUSH
60562: FOR_IN
60563: IFFALSE 60613
// begin un := UnitShoot ( i ) ;
60565: LD_ADDR_VAR 0 5
60569: PUSH
60570: LD_VAR 0 4
60574: PPUSH
60575: CALL_OW 504
60579: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60580: LD_VAR 0 5
60584: PPUSH
60585: CALL_OW 255
60589: PUSH
60590: LD_VAR 0 1
60594: EQUAL
60595: IFFALSE 60611
// begin result := un ;
60597: LD_ADDR_VAR 0 3
60601: PUSH
60602: LD_VAR 0 5
60606: ST_TO_ADDR
// exit ;
60607: POP
60608: POP
60609: GO 60615
// end ; end ;
60611: GO 60562
60613: POP
60614: POP
// end ;
60615: LD_VAR 0 3
60619: RET
// export function GetCargoBay ( units ) ; begin
60620: LD_INT 0
60622: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60623: LD_ADDR_VAR 0 2
60627: PUSH
60628: LD_VAR 0 1
60632: PPUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 34
60638: PUSH
60639: LD_INT 12
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 34
60648: PUSH
60649: LD_INT 51
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 34
60658: PUSH
60659: LD_INT 32
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 34
60668: PUSH
60669: LD_EXP 8
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: PPUSH
60685: CALL_OW 72
60689: ST_TO_ADDR
// end ;
60690: LD_VAR 0 2
60694: RET
// export function Negate ( value ) ; begin
60695: LD_INT 0
60697: PPUSH
// result := not value ;
60698: LD_ADDR_VAR 0 2
60702: PUSH
60703: LD_VAR 0 1
60707: NOT
60708: ST_TO_ADDR
// end ;
60709: LD_VAR 0 2
60713: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
60714: LD_INT 0
60716: PPUSH
// if x1 = x2 then
60717: LD_VAR 0 1
60721: PUSH
60722: LD_VAR 0 3
60726: EQUAL
60727: IFFALSE 60761
// begin if y1 > y2 then
60729: LD_VAR 0 2
60733: PUSH
60734: LD_VAR 0 4
60738: GREATER
60739: IFFALSE 60751
// result := 0 else
60741: LD_ADDR_VAR 0 5
60745: PUSH
60746: LD_INT 0
60748: ST_TO_ADDR
60749: GO 60759
// result := 3 ;
60751: LD_ADDR_VAR 0 5
60755: PUSH
60756: LD_INT 3
60758: ST_TO_ADDR
// exit ;
60759: GO 60847
// end ; if y1 = y2 then
60761: LD_VAR 0 2
60765: PUSH
60766: LD_VAR 0 4
60770: EQUAL
60771: IFFALSE 60805
// begin if x1 > x2 then
60773: LD_VAR 0 1
60777: PUSH
60778: LD_VAR 0 3
60782: GREATER
60783: IFFALSE 60795
// result := 1 else
60785: LD_ADDR_VAR 0 5
60789: PUSH
60790: LD_INT 1
60792: ST_TO_ADDR
60793: GO 60803
// result := 4 ;
60795: LD_ADDR_VAR 0 5
60799: PUSH
60800: LD_INT 4
60802: ST_TO_ADDR
// exit ;
60803: GO 60847
// end ; if x1 > x2 and y1 > y2 then
60805: LD_VAR 0 1
60809: PUSH
60810: LD_VAR 0 3
60814: GREATER
60815: PUSH
60816: LD_VAR 0 2
60820: PUSH
60821: LD_VAR 0 4
60825: GREATER
60826: AND
60827: IFFALSE 60839
// result := 2 else
60829: LD_ADDR_VAR 0 5
60833: PUSH
60834: LD_INT 2
60836: ST_TO_ADDR
60837: GO 60847
// result := 5 ;
60839: LD_ADDR_VAR 0 5
60843: PUSH
60844: LD_INT 5
60846: ST_TO_ADDR
// end ;
60847: LD_VAR 0 5
60851: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60852: LD_INT 0
60854: PPUSH
60855: PPUSH
// if not driver or not IsInUnit ( driver ) then
60856: LD_VAR 0 1
60860: NOT
60861: PUSH
60862: LD_VAR 0 1
60866: PPUSH
60867: CALL_OW 310
60871: NOT
60872: OR
60873: IFFALSE 60877
// exit ;
60875: GO 60967
// vehicle := IsInUnit ( driver ) ;
60877: LD_ADDR_VAR 0 3
60881: PUSH
60882: LD_VAR 0 1
60886: PPUSH
60887: CALL_OW 310
60891: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60892: LD_VAR 0 1
60896: PPUSH
60897: LD_STRING \
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 0
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: PUSH
60927: LD_STRING E
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_VAR 0 3
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PPUSH
60963: CALL_OW 446
// end ;
60967: LD_VAR 0 2
60971: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60972: LD_INT 0
60974: PPUSH
60975: PPUSH
// if not driver or not IsInUnit ( driver ) then
60976: LD_VAR 0 1
60980: NOT
60981: PUSH
60982: LD_VAR 0 1
60986: PPUSH
60987: CALL_OW 310
60991: NOT
60992: OR
60993: IFFALSE 60997
// exit ;
60995: GO 61087
// vehicle := IsInUnit ( driver ) ;
60997: LD_ADDR_VAR 0 3
61001: PUSH
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL_OW 310
61011: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61012: LD_VAR 0 1
61016: PPUSH
61017: LD_STRING \
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: PUSH
61047: LD_STRING E
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_VAR 0 3
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PPUSH
61083: CALL_OW 447
// end ;
61087: LD_VAR 0 2
61091: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61092: LD_INT 0
61094: PPUSH
61095: PPUSH
61096: PPUSH
// tmp := [ ] ;
61097: LD_ADDR_VAR 0 5
61101: PUSH
61102: EMPTY
61103: ST_TO_ADDR
// for i in units do
61104: LD_ADDR_VAR 0 4
61108: PUSH
61109: LD_VAR 0 1
61113: PUSH
61114: FOR_IN
61115: IFFALSE 61153
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61117: LD_ADDR_VAR 0 5
61121: PUSH
61122: LD_VAR 0 5
61126: PPUSH
61127: LD_VAR 0 5
61131: PUSH
61132: LD_INT 1
61134: PLUS
61135: PPUSH
61136: LD_VAR 0 4
61140: PPUSH
61141: CALL_OW 256
61145: PPUSH
61146: CALL_OW 2
61150: ST_TO_ADDR
61151: GO 61114
61153: POP
61154: POP
// if not tmp then
61155: LD_VAR 0 5
61159: NOT
61160: IFFALSE 61164
// exit ;
61162: GO 61212
// if asc then
61164: LD_VAR 0 2
61168: IFFALSE 61192
// result := SortListByListAsc ( units , tmp ) else
61170: LD_ADDR_VAR 0 3
61174: PUSH
61175: LD_VAR 0 1
61179: PPUSH
61180: LD_VAR 0 5
61184: PPUSH
61185: CALL_OW 76
61189: ST_TO_ADDR
61190: GO 61212
// result := SortListByListDesc ( units , tmp ) ;
61192: LD_ADDR_VAR 0 3
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_VAR 0 5
61206: PPUSH
61207: CALL_OW 77
61211: ST_TO_ADDR
// end ;
61212: LD_VAR 0 3
61216: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61217: LD_INT 0
61219: PPUSH
61220: PPUSH
// task := GetTaskList ( mech ) ;
61221: LD_ADDR_VAR 0 4
61225: PUSH
61226: LD_VAR 0 1
61230: PPUSH
61231: CALL_OW 437
61235: ST_TO_ADDR
// if not task then
61236: LD_VAR 0 4
61240: NOT
61241: IFFALSE 61245
// exit ;
61243: GO 61287
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61245: LD_ADDR_VAR 0 3
61249: PUSH
61250: LD_VAR 0 4
61254: PUSH
61255: LD_INT 1
61257: ARRAY
61258: PUSH
61259: LD_INT 1
61261: ARRAY
61262: PUSH
61263: LD_STRING r
61265: EQUAL
61266: PUSH
61267: LD_VAR 0 4
61271: PUSH
61272: LD_INT 1
61274: ARRAY
61275: PUSH
61276: LD_INT 4
61278: ARRAY
61279: PUSH
61280: LD_VAR 0 2
61284: EQUAL
61285: AND
61286: ST_TO_ADDR
// end ;
61287: LD_VAR 0 3
61291: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61292: LD_INT 0
61294: PPUSH
// SetDir ( unit , d ) ;
61295: LD_VAR 0 1
61299: PPUSH
61300: LD_VAR 0 4
61304: PPUSH
61305: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61309: LD_VAR 0 1
61313: PPUSH
61314: LD_VAR 0 2
61318: PPUSH
61319: LD_VAR 0 3
61323: PPUSH
61324: LD_VAR 0 5
61328: PPUSH
61329: CALL_OW 48
// end ;
61333: LD_VAR 0 6
61337: RET
// export function ToNaturalNumber ( number ) ; begin
61338: LD_INT 0
61340: PPUSH
// result := number div 1 ;
61341: LD_ADDR_VAR 0 2
61345: PUSH
61346: LD_VAR 0 1
61350: PUSH
61351: LD_INT 1
61353: DIV
61354: ST_TO_ADDR
// if number < 0 then
61355: LD_VAR 0 1
61359: PUSH
61360: LD_INT 0
61362: LESS
61363: IFFALSE 61373
// result := 0 ;
61365: LD_ADDR_VAR 0 2
61369: PUSH
61370: LD_INT 0
61372: ST_TO_ADDR
// end ;
61373: LD_VAR 0 2
61377: RET
// export function SortByClass ( units , class ) ; var un ; begin
61378: LD_INT 0
61380: PPUSH
61381: PPUSH
// if not units or not class then
61382: LD_VAR 0 1
61386: NOT
61387: PUSH
61388: LD_VAR 0 2
61392: NOT
61393: OR
61394: IFFALSE 61398
// exit ;
61396: GO 61493
// result := [ ] ;
61398: LD_ADDR_VAR 0 3
61402: PUSH
61403: EMPTY
61404: ST_TO_ADDR
// for un in units do
61405: LD_ADDR_VAR 0 4
61409: PUSH
61410: LD_VAR 0 1
61414: PUSH
61415: FOR_IN
61416: IFFALSE 61491
// if GetClass ( un ) = class then
61418: LD_VAR 0 4
61422: PPUSH
61423: CALL_OW 257
61427: PUSH
61428: LD_VAR 0 2
61432: EQUAL
61433: IFFALSE 61460
// result := Insert ( result , 1 , un ) else
61435: LD_ADDR_VAR 0 3
61439: PUSH
61440: LD_VAR 0 3
61444: PPUSH
61445: LD_INT 1
61447: PPUSH
61448: LD_VAR 0 4
61452: PPUSH
61453: CALL_OW 2
61457: ST_TO_ADDR
61458: GO 61489
// result := Replace ( result , result + 1 , un ) ;
61460: LD_ADDR_VAR 0 3
61464: PUSH
61465: LD_VAR 0 3
61469: PPUSH
61470: LD_VAR 0 3
61474: PUSH
61475: LD_INT 1
61477: PLUS
61478: PPUSH
61479: LD_VAR 0 4
61483: PPUSH
61484: CALL_OW 1
61488: ST_TO_ADDR
61489: GO 61415
61491: POP
61492: POP
// end ;
61493: LD_VAR 0 3
61497: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61498: LD_INT 0
61500: PPUSH
61501: PPUSH
61502: PPUSH
61503: PPUSH
61504: PPUSH
61505: PPUSH
61506: PPUSH
// result := [ ] ;
61507: LD_ADDR_VAR 0 4
61511: PUSH
61512: EMPTY
61513: ST_TO_ADDR
// if x - r < 0 then
61514: LD_VAR 0 1
61518: PUSH
61519: LD_VAR 0 3
61523: MINUS
61524: PUSH
61525: LD_INT 0
61527: LESS
61528: IFFALSE 61540
// min_x := 0 else
61530: LD_ADDR_VAR 0 8
61534: PUSH
61535: LD_INT 0
61537: ST_TO_ADDR
61538: GO 61556
// min_x := x - r ;
61540: LD_ADDR_VAR 0 8
61544: PUSH
61545: LD_VAR 0 1
61549: PUSH
61550: LD_VAR 0 3
61554: MINUS
61555: ST_TO_ADDR
// if y - r < 0 then
61556: LD_VAR 0 2
61560: PUSH
61561: LD_VAR 0 3
61565: MINUS
61566: PUSH
61567: LD_INT 0
61569: LESS
61570: IFFALSE 61582
// min_y := 0 else
61572: LD_ADDR_VAR 0 7
61576: PUSH
61577: LD_INT 0
61579: ST_TO_ADDR
61580: GO 61598
// min_y := y - r ;
61582: LD_ADDR_VAR 0 7
61586: PUSH
61587: LD_VAR 0 2
61591: PUSH
61592: LD_VAR 0 3
61596: MINUS
61597: ST_TO_ADDR
// max_x := x + r ;
61598: LD_ADDR_VAR 0 9
61602: PUSH
61603: LD_VAR 0 1
61607: PUSH
61608: LD_VAR 0 3
61612: PLUS
61613: ST_TO_ADDR
// max_y := y + r ;
61614: LD_ADDR_VAR 0 10
61618: PUSH
61619: LD_VAR 0 2
61623: PUSH
61624: LD_VAR 0 3
61628: PLUS
61629: ST_TO_ADDR
// for _x = min_x to max_x do
61630: LD_ADDR_VAR 0 5
61634: PUSH
61635: DOUBLE
61636: LD_VAR 0 8
61640: DEC
61641: ST_TO_ADDR
61642: LD_VAR 0 9
61646: PUSH
61647: FOR_TO
61648: IFFALSE 61749
// for _y = min_y to max_y do
61650: LD_ADDR_VAR 0 6
61654: PUSH
61655: DOUBLE
61656: LD_VAR 0 7
61660: DEC
61661: ST_TO_ADDR
61662: LD_VAR 0 10
61666: PUSH
61667: FOR_TO
61668: IFFALSE 61745
// begin if not ValidHex ( _x , _y ) then
61670: LD_VAR 0 5
61674: PPUSH
61675: LD_VAR 0 6
61679: PPUSH
61680: CALL_OW 488
61684: NOT
61685: IFFALSE 61689
// continue ;
61687: GO 61667
// if GetResourceTypeXY ( _x , _y ) then
61689: LD_VAR 0 5
61693: PPUSH
61694: LD_VAR 0 6
61698: PPUSH
61699: CALL_OW 283
61703: IFFALSE 61743
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61705: LD_ADDR_VAR 0 4
61709: PUSH
61710: LD_VAR 0 4
61714: PPUSH
61715: LD_VAR 0 4
61719: PUSH
61720: LD_INT 1
61722: PLUS
61723: PPUSH
61724: LD_VAR 0 5
61728: PUSH
61729: LD_VAR 0 6
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PPUSH
61738: CALL_OW 1
61742: ST_TO_ADDR
// end ;
61743: GO 61667
61745: POP
61746: POP
61747: GO 61647
61749: POP
61750: POP
// end ;
61751: LD_VAR 0 4
61755: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
61760: PPUSH
61761: PPUSH
61762: PPUSH
61763: PPUSH
// if not units then
61764: LD_VAR 0 1
61768: NOT
61769: IFFALSE 61773
// exit ;
61771: GO 62174
// result := UnitFilter ( units , [ f_ok ] ) ;
61773: LD_ADDR_VAR 0 3
61777: PUSH
61778: LD_VAR 0 1
61782: PPUSH
61783: LD_INT 50
61785: PUSH
61786: EMPTY
61787: LIST
61788: PPUSH
61789: CALL_OW 72
61793: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61794: LD_ADDR_VAR 0 7
61798: PUSH
61799: LD_VAR 0 1
61803: PUSH
61804: LD_INT 1
61806: ARRAY
61807: PPUSH
61808: CALL_OW 255
61812: ST_TO_ADDR
// if not result then
61813: LD_VAR 0 3
61817: NOT
61818: IFFALSE 61822
// exit ;
61820: GO 62174
// for i in result do
61822: LD_ADDR_VAR 0 4
61826: PUSH
61827: LD_VAR 0 3
61831: PUSH
61832: FOR_IN
61833: IFFALSE 62172
// begin tag := GetTag ( i ) + 1 ;
61835: LD_ADDR_VAR 0 8
61839: PUSH
61840: LD_VAR 0 4
61844: PPUSH
61845: CALL_OW 110
61849: PUSH
61850: LD_INT 1
61852: PLUS
61853: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61854: LD_ADDR_VAR 0 6
61858: PUSH
61859: LD_VAR 0 4
61863: PPUSH
61864: CALL_OW 250
61868: PPUSH
61869: LD_VAR 0 4
61873: PPUSH
61874: CALL_OW 251
61878: PPUSH
61879: LD_INT 6
61881: PPUSH
61882: CALL 61498 0 3
61886: ST_TO_ADDR
// if cr then
61887: LD_VAR 0 6
61891: IFFALSE 61930
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61893: LD_VAR 0 4
61897: PPUSH
61898: LD_VAR 0 6
61902: PUSH
61903: LD_INT 1
61905: ARRAY
61906: PUSH
61907: LD_INT 1
61909: ARRAY
61910: PPUSH
61911: LD_VAR 0 6
61915: PUSH
61916: LD_INT 1
61918: ARRAY
61919: PUSH
61920: LD_INT 2
61922: ARRAY
61923: PPUSH
61924: CALL_OW 116
61928: GO 62170
// if path > tag then
61930: LD_VAR 0 2
61934: PUSH
61935: LD_VAR 0 8
61939: GREATER
61940: IFFALSE 62118
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
61942: LD_ADDR_VAR 0 5
61946: PUSH
61947: LD_INT 81
61949: PUSH
61950: LD_VAR 0 7
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 91
61961: PUSH
61962: LD_VAR 0 4
61966: PUSH
61967: LD_INT 12
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PPUSH
61979: CALL_OW 69
61983: ST_TO_ADDR
// if enemy then
61984: LD_VAR 0 5
61988: IFFALSE 62016
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61990: LD_VAR 0 4
61994: PPUSH
61995: LD_VAR 0 5
61999: PPUSH
62000: LD_VAR 0 4
62004: PPUSH
62005: CALL_OW 74
62009: PPUSH
62010: CALL_OW 115
62014: GO 62116
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62016: LD_VAR 0 4
62020: PPUSH
62021: LD_VAR 0 2
62025: PUSH
62026: LD_VAR 0 8
62030: ARRAY
62031: PUSH
62032: LD_INT 1
62034: ARRAY
62035: PPUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_VAR 0 8
62045: ARRAY
62046: PUSH
62047: LD_INT 2
62049: ARRAY
62050: PPUSH
62051: CALL_OW 297
62055: PUSH
62056: LD_INT 6
62058: GREATER
62059: IFFALSE 62102
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62061: LD_VAR 0 4
62065: PPUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_VAR 0 8
62075: ARRAY
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PPUSH
62081: LD_VAR 0 2
62085: PUSH
62086: LD_VAR 0 8
62090: ARRAY
62091: PUSH
62092: LD_INT 2
62094: ARRAY
62095: PPUSH
62096: CALL_OW 114
62100: GO 62116
// SetTag ( i , tag ) ;
62102: LD_VAR 0 4
62106: PPUSH
62107: LD_VAR 0 8
62111: PPUSH
62112: CALL_OW 109
// end else
62116: GO 62170
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62118: LD_ADDR_VAR 0 5
62122: PUSH
62123: LD_INT 81
62125: PUSH
62126: LD_VAR 0 7
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PPUSH
62135: CALL_OW 69
62139: ST_TO_ADDR
// if enemy then
62140: LD_VAR 0 5
62144: IFFALSE 62170
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62146: LD_VAR 0 4
62150: PPUSH
62151: LD_VAR 0 5
62155: PPUSH
62156: LD_VAR 0 4
62160: PPUSH
62161: CALL_OW 74
62165: PPUSH
62166: CALL_OW 115
// end ; end ;
62170: GO 61832
62172: POP
62173: POP
// end ; end_of_file
62174: LD_VAR 0 3
62178: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62179: LD_VAR 0 1
62183: PUSH
62184: LD_INT 200
62186: DOUBLE
62187: GREATEREQUAL
62188: IFFALSE 62196
62190: LD_INT 299
62192: DOUBLE
62193: LESSEQUAL
62194: IFTRUE 62198
62196: GO 62230
62198: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62199: LD_VAR 0 1
62203: PPUSH
62204: LD_VAR 0 2
62208: PPUSH
62209: LD_VAR 0 3
62213: PPUSH
62214: LD_VAR 0 4
62218: PPUSH
62219: LD_VAR 0 5
62223: PPUSH
62224: CALL 18741 0 5
62228: GO 62307
62230: LD_INT 300
62232: DOUBLE
62233: GREATEREQUAL
62234: IFFALSE 62242
62236: LD_INT 399
62238: DOUBLE
62239: LESSEQUAL
62240: IFTRUE 62244
62242: GO 62306
62244: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62245: LD_VAR 0 1
62249: PPUSH
62250: LD_VAR 0 2
62254: PPUSH
62255: LD_VAR 0 3
62259: PPUSH
62260: LD_VAR 0 4
62264: PPUSH
62265: LD_VAR 0 5
62269: PPUSH
62270: LD_VAR 0 6
62274: PPUSH
62275: LD_VAR 0 7
62279: PPUSH
62280: LD_VAR 0 8
62284: PPUSH
62285: LD_VAR 0 9
62289: PPUSH
62290: LD_VAR 0 10
62294: PPUSH
62295: LD_VAR 0 11
62299: PPUSH
62300: CALL 16639 0 11
62304: GO 62307
62306: POP
// end ;
62307: PPOPN 11
62309: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62310: LD_VAR 0 1
62314: PPUSH
62315: LD_VAR 0 2
62319: PPUSH
62320: LD_VAR 0 3
62324: PPUSH
62325: LD_VAR 0 4
62329: PPUSH
62330: LD_VAR 0 5
62334: PPUSH
62335: CALL 18733 0 5
// end ; end_of_file
62339: PPOPN 5
62341: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62342: LD_VAR 0 1
62346: PPUSH
62347: LD_VAR 0 2
62351: PPUSH
62352: LD_VAR 0 3
62356: PPUSH
62357: LD_VAR 0 4
62361: PPUSH
62362: LD_VAR 0 5
62366: PPUSH
62367: LD_VAR 0 6
62371: PPUSH
62372: CALL 4834 0 6
// end ;
62376: PPOPN 6
62378: END
