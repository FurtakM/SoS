// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PrepareBase ;
  34: CALL 580 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// case Query ( QDiff ) of 1 :
  63: LD_STRING QDiff
  65: PPUSH
  66: CALL_OW 97
  70: PUSH
  71: LD_INT 1
  73: DOUBLE
  74: EQUAL
  75: IFTRUE 79
  77: GO 90
  79: POP
// Difficulty := 1 ; 2 :
  80: LD_ADDR_OWVAR 67
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
  88: GO 129
  90: LD_INT 2
  92: DOUBLE
  93: EQUAL
  94: IFTRUE 98
  96: GO 109
  98: POP
// Difficulty := 2 ; 3 :
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
 107: GO 129
 109: LD_INT 3
 111: DOUBLE
 112: EQUAL
 113: IFTRUE 117
 115: GO 128
 117: POP
// Difficulty := 3 ; end ;
 118: LD_ADDR_OWVAR 67
 122: PUSH
 123: LD_INT 3
 125: ST_TO_ADDR
 126: GO 129
 128: POP
// case Query ( QStart ) of 1 :
 129: LD_STRING QStart
 131: PPUSH
 132: CALL_OW 97
 136: PUSH
 137: LD_INT 1
 139: DOUBLE
 140: EQUAL
 141: IFTRUE 145
 143: GO 148
 145: POP
// ; end ;
 146: GO 149
 148: POP
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
 149: LD_INT 1
 151: PPUSH
 152: CALL_OW 274
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: LD_INT 6000
 162: PUSH
 163: LD_INT 4500
 165: PUSH
 166: LD_INT 3000
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: LIST
 173: PUSH
 174: LD_OWVAR 67
 178: ARRAY
 179: PPUSH
 180: CALL_OW 277
// InGameOn ;
 184: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 188: LD_INT 1
 190: PPUSH
 191: CALL_OW 87
// Say ( com , DJack1 ) ;
 195: LD_EXP 1
 199: PPUSH
 200: LD_STRING DJack1
 202: PPUSH
 203: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 207: LD_EXP 3
 211: PPUSH
 212: LD_STRING DUn1
 214: PPUSH
 215: CALL_OW 88
// Say ( com , DJack2 ) ;
 219: LD_EXP 1
 223: PPUSH
 224: LD_STRING DJack2
 226: PPUSH
 227: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 231: LD_EXP 3
 235: PPUSH
 236: LD_STRING DUn2
 238: PPUSH
 239: CALL_OW 88
// Say ( com , DJack3 ) ;
 243: LD_EXP 1
 247: PPUSH
 248: LD_STRING DJack3
 250: PPUSH
 251: CALL_OW 88
// uc_side := 7 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 7
 262: ST_TO_ADDR
// uc_nation := 1 ;
 263: LD_ADDR_OWVAR 21
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 271: LD_INT 1
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: LD_INT 0
 279: PPUSH
 280: CALL_OW 380
// hc_name :=  ;
 284: LD_ADDR_OWVAR 26
 288: PUSH
 289: LD_STRING 
 291: ST_TO_ADDR
// un := CreateHuman ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: CALL_OW 44
 301: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 302: LD_INT 105
 304: PPUSH
 305: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 309: LD_VAR 0 2
 313: PPUSH
 314: LD_STRING DRadio1
 316: PPUSH
 317: CALL_OW 94
// Say ( com , DJack4 ) ;
 321: LD_EXP 1
 325: PPUSH
 326: LD_STRING DJack4
 328: PPUSH
 329: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 333: LD_VAR 0 2
 337: PPUSH
 338: LD_STRING DRadio2
 340: PPUSH
 341: CALL_OW 94
// Wait ( 0 0$01 ) ;
 345: LD_INT 35
 347: PPUSH
 348: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 352: LD_EXP 2
 356: PPUSH
 357: LD_STRING DDoc1
 359: PPUSH
 360: CALL_OW 94
// Say ( com , DJack5 ) ;
 364: LD_EXP 1
 368: PPUSH
 369: LD_STRING DJack5
 371: PPUSH
 372: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 376: LD_EXP 2
 380: PPUSH
 381: LD_STRING DDoc2
 383: PPUSH
 384: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 388: LD_VAR 0 2
 392: PPUSH
 393: LD_STRING DRadio3
 395: PPUSH
 396: CALL_OW 94
// Say ( com , DJack6 ) ;
 400: LD_EXP 1
 404: PPUSH
 405: LD_STRING DJack6
 407: PPUSH
 408: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 412: LD_ADDR_VAR 0 3
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 7
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 21
 429: PUSH
 430: LD_INT 1
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PPUSH
 441: CALL_OW 69
 445: ST_TO_ADDR
// for i = 2 to f do
 446: LD_ADDR_VAR 0 4
 450: PUSH
 451: DOUBLE
 452: LD_INT 2
 454: DEC
 455: ST_TO_ADDR
 456: LD_VAR 0 3
 460: PUSH
 461: FOR_TO
 462: IFFALSE 519
// begin ComExitBuilding ( f [ i ] ) ;
 464: LD_VAR 0 3
 468: PUSH
 469: LD_VAR 0 4
 473: ARRAY
 474: PPUSH
 475: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 479: LD_VAR 0 3
 483: PUSH
 484: LD_VAR 0 4
 488: ARRAY
 489: PPUSH
 490: LD_INT 7
 492: PPUSH
 493: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 497: LD_VAR 0 3
 501: PUSH
 502: LD_VAR 0 4
 506: ARRAY
 507: PPUSH
 508: LD_EXP 1
 512: PPUSH
 513: CALL_OW 179
// end ;
 517: GO 461
 519: POP
 520: POP
// ComExitBuilding ( com ) ;
 521: LD_EXP 1
 525: PPUSH
 526: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 530: LD_EXP 1
 534: PPUSH
 535: LD_INT 45
 537: PPUSH
 538: LD_INT 32
 540: PPUSH
 541: CALL_OW 178
// Wait ( 0 0$03 ) ;
 545: LD_INT 105
 547: PPUSH
 548: CALL_OW 67
// Say ( com , DJack7 ) ;
 552: LD_EXP 1
 556: PPUSH
 557: LD_STRING DJack7
 559: PPUSH
 560: CALL_OW 88
// InGameOff ;
 564: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 568: LD_STRING TDef
 570: PPUSH
 571: CALL_OW 337
// end ; end_of_file
 575: LD_VAR 0 1
 579: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 580: LD_INT 0
 582: PPUSH
 583: PPUSH
 584: PPUSH
 585: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 586: LD_INT 30
 588: PPUSH
 589: LD_INT 14
 591: PPUSH
 592: LD_INT 7
 594: PPUSH
 595: LD_INT 20
 597: PPUSH
 598: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 602: LD_INT 49
 604: PPUSH
 605: LD_INT 17
 607: PPUSH
 608: LD_INT 7
 610: PPUSH
 611: LD_INT 20
 613: PPUSH
 614: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 618: LD_INT 35
 620: PPUSH
 621: LD_INT 46
 623: PPUSH
 624: LD_INT 7
 626: PPUSH
 627: LD_INT 20
 629: PPUSH
 630: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 634: LD_INT 70
 636: PPUSH
 637: LD_INT 39
 639: PPUSH
 640: LD_INT 7
 642: PPUSH
 643: LD_INT 20
 645: PPUSH
 646: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 650: LD_INT 30
 652: PPUSH
 653: LD_INT 14
 655: PPUSH
 656: LD_INT 7
 658: PPUSH
 659: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 663: LD_INT 49
 665: PPUSH
 666: LD_INT 17
 668: PPUSH
 669: LD_INT 7
 671: PPUSH
 672: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 676: LD_INT 35
 678: PPUSH
 679: LD_INT 46
 681: PPUSH
 682: LD_INT 7
 684: PPUSH
 685: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 689: LD_INT 70
 691: PPUSH
 692: LD_INT 39
 694: PPUSH
 695: LD_INT 7
 697: PPUSH
 698: CALL_OW 331
// uc_side := 7 ;
 702: LD_ADDR_OWVAR 20
 706: PUSH
 707: LD_INT 7
 709: ST_TO_ADDR
// uc_nation := 1 ;
 710: LD_ADDR_OWVAR 21
 714: PUSH
 715: LD_INT 1
 717: ST_TO_ADDR
// if Difficulty < 3 then
 718: LD_OWVAR 67
 722: PUSH
 723: LD_INT 3
 725: LESS
 726: IFFALSE 827
// begin for i = 1 to 2 do
 728: LD_ADDR_VAR 0 2
 732: PUSH
 733: DOUBLE
 734: LD_INT 1
 736: DEC
 737: ST_TO_ADDR
 738: LD_INT 2
 740: PUSH
 741: FOR_TO
 742: IFFALSE 823
// begin vc_chassis := us_heavy_tracked ;
 744: LD_ADDR_OWVAR 37
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// vc_engine := 3 ;
 752: LD_ADDR_OWVAR 39
 756: PUSH
 757: LD_INT 3
 759: ST_TO_ADDR
// vc_control := control_computer ;
 760: LD_ADDR_OWVAR 38
 764: PUSH
 765: LD_INT 3
 767: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 768: LD_ADDR_OWVAR 40
 772: PUSH
 773: LD_INT 10
 775: ST_TO_ADDR
// un := CreateVehicle ;
 776: LD_ADDR_VAR 0 3
 780: PUSH
 781: CALL_OW 45
 785: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 786: LD_VAR 0 3
 790: PPUSH
 791: LD_INT 0
 793: PPUSH
 794: LD_INT 5
 796: PPUSH
 797: CALL_OW 12
 801: PPUSH
 802: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 806: LD_VAR 0 3
 810: PPUSH
 811: LD_INT 6
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: CALL_OW 49
// end ;
 821: GO 741
 823: POP
 824: POP
// end else
 825: GO 916
// begin vc_chassis := us_medium_tracked ;
 827: LD_ADDR_OWVAR 37
 831: PUSH
 832: LD_INT 3
 834: ST_TO_ADDR
// vc_engine := engine_combustion ;
 835: LD_ADDR_OWVAR 39
 839: PUSH
 840: LD_INT 1
 842: ST_TO_ADDR
// vc_control := control_manual ;
 843: LD_ADDR_OWVAR 38
 847: PUSH
 848: LD_INT 1
 850: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 851: LD_ADDR_OWVAR 40
 855: PUSH
 856: LD_INT 4
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 3
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 3
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// SetFuel ( un , 75 ) ;
 889: LD_VAR 0 3
 893: PPUSH
 894: LD_INT 75
 896: PPUSH
 897: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 901: LD_VAR 0 3
 905: PPUSH
 906: LD_INT 6
 908: PPUSH
 909: LD_INT 0
 911: PPUSH
 912: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 916: LD_ADDR_VAR 0 4
 920: PUSH
 921: LD_INT 8
 923: PUSH
 924: LD_INT 7
 926: PUSH
 927: LD_INT 6
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: LIST
 934: PUSH
 935: LD_OWVAR 67
 939: ARRAY
 940: ST_TO_ADDR
// hc_importance := 100 ;
 941: LD_ADDR_OWVAR 32
 945: PUSH
 946: LD_INT 100
 948: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 949: LD_INT 1
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: LD_VAR 0 4
 959: PPUSH
 960: CALL_OW 380
// hc_name := Jack Collins ;
 964: LD_ADDR_OWVAR 26
 968: PUSH
 969: LD_STRING Jack Collins
 971: ST_TO_ADDR
// com := CreateHuman ;
 972: LD_ADDR_EXP 1
 976: PUSH
 977: CALL_OW 44
 981: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 982: LD_EXP 1
 986: PPUSH
 987: LD_INT 1
 989: PPUSH
 990: CALL_OW 52
// hc_importance := 0 ;
 994: LD_ADDR_OWVAR 32
 998: PUSH
 999: LD_INT 0
1001: ST_TO_ADDR
// hc_gallery :=  ;
1002: LD_ADDR_OWVAR 33
1006: PUSH
1007: LD_STRING 
1009: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1010: LD_INT 1
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_VAR 0 4
1020: PPUSH
1021: CALL_OW 380
// hc_name := Thomas Jackson ;
1025: LD_ADDR_OWVAR 26
1029: PUSH
1030: LD_STRING Thomas Jackson
1032: ST_TO_ADDR
// k1 := CreateHuman ;
1033: LD_ADDR_EXP 3
1037: PUSH
1038: CALL_OW 44
1042: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1043: LD_EXP 3
1047: PPUSH
1048: LD_INT 1
1050: PPUSH
1051: CALL_OW 52
// hc_name :=  ;
1055: LD_ADDR_OWVAR 26
1059: PUSH
1060: LD_STRING 
1062: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1063: LD_ADDR_VAR 0 2
1067: PUSH
1068: DOUBLE
1069: LD_INT 1
1071: DEC
1072: ST_TO_ADDR
1073: LD_INT 9
1075: PUSH
1076: LD_INT 8
1078: PUSH
1079: LD_INT 7
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: PUSH
1087: LD_OWVAR 67
1091: ARRAY
1092: PUSH
1093: FOR_TO
1094: IFFALSE 1265
// begin Randomize ;
1096: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1100: LD_ADDR_OWVAR 21
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 3
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 1
1117: PPUSH
1118: LD_INT 2
1120: PPUSH
1121: CALL_OW 12
1125: ARRAY
1126: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 4
1135: PPUSH
1136: CALL_OW 12
1140: PPUSH
1141: LD_VAR 0 4
1145: PPUSH
1146: CALL_OW 380
// un := CreateHuman ;
1150: LD_ADDR_VAR 0 3
1154: PUSH
1155: CALL_OW 44
1159: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 257
1169: PUSH
1170: LD_INT 1
1172: DOUBLE
1173: EQUAL
1174: IFTRUE 1178
1176: GO 1193
1178: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1179: LD_VAR 0 3
1183: PPUSH
1184: LD_INT 21
1186: PPUSH
1187: CALL_OW 52
1191: GO 1263
1193: LD_INT 2
1195: DOUBLE
1196: EQUAL
1197: IFTRUE 1201
1199: GO 1216
1201: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1202: LD_VAR 0 3
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: CALL_OW 52
1214: GO 1263
1216: LD_INT 3
1218: DOUBLE
1219: EQUAL
1220: IFTRUE 1224
1222: GO 1239
1224: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_INT 38
1232: PPUSH
1233: CALL_OW 52
1237: GO 1263
1239: LD_INT 4
1241: DOUBLE
1242: EQUAL
1243: IFTRUE 1247
1245: GO 1262
1247: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1248: LD_VAR 0 3
1252: PPUSH
1253: LD_INT 36
1255: PPUSH
1256: CALL_OW 52
1260: GO 1263
1262: POP
// end ;
1263: GO 1093
1265: POP
1266: POP
// uc_side := 2 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 2
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// hc_name := _ ;
1283: LD_ADDR_OWVAR 26
1287: PUSH
1288: LD_STRING _
1290: ST_TO_ADDR
// hc_gallery :=  ;
1291: LD_ADDR_OWVAR 33
1295: PUSH
1296: LD_STRING 
1298: ST_TO_ADDR
// hc_class := 4 ;
1299: LD_ADDR_OWVAR 28
1303: PUSH
1304: LD_INT 4
1306: ST_TO_ADDR
// hc_sex := sex_male ;
1307: LD_ADDR_OWVAR 27
1311: PUSH
1312: LD_INT 1
1314: ST_TO_ADDR
// doc := CreateHuman ;
1315: LD_ADDR_EXP 2
1319: PUSH
1320: CALL_OW 44
1324: ST_TO_ADDR
// end ; end_of_file
1325: LD_VAR 0 1
1329: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1330: LD_INT 0
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
// uc_side := 2 ;
1336: LD_ADDR_OWVAR 20
1340: PUSH
1341: LD_INT 2
1343: ST_TO_ADDR
// uc_nation := 2 ;
1344: LD_ADDR_OWVAR 21
1348: PUSH
1349: LD_INT 2
1351: ST_TO_ADDR
// tmp := [ ] ;
1352: LD_ADDR_VAR 0 5
1356: PUSH
1357: EMPTY
1358: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1359: LD_ADDR_OWVAR 31
1363: PUSH
1364: LD_INT 3
1366: PUSH
1367: LD_INT 6
1369: PUSH
1370: LD_INT 10
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_OWVAR 67
1382: ARRAY
1383: PUSH
1384: LD_INT 3
1386: PUSH
1387: LD_INT 6
1389: PUSH
1390: LD_INT 10
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: PUSH
1398: LD_OWVAR 67
1402: ARRAY
1403: PUSH
1404: LD_INT 3
1406: PUSH
1407: LD_INT 6
1409: PUSH
1410: LD_INT 10
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_OWVAR 67
1422: ARRAY
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 6
1429: PUSH
1430: LD_INT 10
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: PUSH
1438: LD_OWVAR 67
1442: ARRAY
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1450: LD_INT 4
1452: PPUSH
1453: LD_INT 22
1455: PUSH
1456: LD_INT 7
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 70
1467: IFFALSE 1508
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1469: LD_ADDR_VAR 0 3
1473: PUSH
1474: LD_INT 4
1476: PPUSH
1477: LD_INT 22
1479: PUSH
1480: LD_INT 7
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: PPUSH
1487: CALL_OW 70
1491: PUSH
1492: FOR_IN
1493: IFFALSE 1506
// RemoveUnit ( i ) ;
1495: LD_VAR 0 3
1499: PPUSH
1500: CALL_OW 64
1504: GO 1492
1506: POP
1507: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1508: LD_INT 5
1510: PPUSH
1511: LD_INT 22
1513: PUSH
1514: LD_INT 7
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PPUSH
1521: CALL_OW 70
1525: IFFALSE 1566
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1527: LD_ADDR_VAR 0 3
1531: PUSH
1532: LD_INT 5
1534: PPUSH
1535: LD_INT 22
1537: PUSH
1538: LD_INT 7
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 70
1549: PUSH
1550: FOR_IN
1551: IFFALSE 1564
// RemoveUnit ( i ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: CALL_OW 64
1562: GO 1550
1564: POP
1565: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1566: LD_INT 1
1568: PPUSH
1569: LD_INT 22
1571: PUSH
1572: LD_INT 7
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 70
1583: IFFALSE 1624
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 7
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 70
1607: PUSH
1608: FOR_IN
1609: IFFALSE 1622
// RemoveUnit ( i ) ;
1611: LD_VAR 0 3
1615: PPUSH
1616: CALL_OW 64
1620: GO 1608
1622: POP
1623: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1624: LD_INT 2
1626: PPUSH
1627: LD_INT 22
1629: PUSH
1630: LD_INT 7
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PPUSH
1637: CALL_OW 70
1641: IFFALSE 1682
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1643: LD_ADDR_VAR 0 3
1647: PUSH
1648: LD_INT 2
1650: PPUSH
1651: LD_INT 22
1653: PUSH
1654: LD_INT 7
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: PPUSH
1661: CALL_OW 70
1665: PUSH
1666: FOR_IN
1667: IFFALSE 1680
// RemoveUnit ( i ) ;
1669: LD_VAR 0 3
1673: PPUSH
1674: CALL_OW 64
1678: GO 1666
1680: POP
1681: POP
// case num of 1 :
1682: LD_VAR 0 1
1686: PUSH
1687: LD_INT 1
1689: DOUBLE
1690: EQUAL
1691: IFTRUE 1695
1693: GO 1948
1695: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: DOUBLE
1702: LD_INT 1
1704: DEC
1705: ST_TO_ADDR
1706: LD_INT 5
1708: PUSH
1709: LD_INT 6
1711: PUSH
1712: LD_INT 6
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1819
// begin uc_nation := 0 ;
1729: LD_ADDR_OWVAR 21
1733: PUSH
1734: LD_INT 0
1736: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1737: LD_ADDR_OWVAR 28
1741: PUSH
1742: LD_INT 15
1744: ST_TO_ADDR
// hc_gallery :=  ;
1745: LD_ADDR_OWVAR 33
1749: PUSH
1750: LD_STRING 
1752: ST_TO_ADDR
// hc_name :=  ;
1753: LD_ADDR_OWVAR 26
1757: PUSH
1758: LD_STRING 
1760: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1761: LD_ADDR_OWVAR 29
1765: PUSH
1766: LD_INT 16
1768: PUSH
1769: LD_INT 12
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// un := CreateHuman ;
1776: LD_ADDR_VAR 0 4
1780: PUSH
1781: CALL_OW 44
1785: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1786: LD_VAR 0 4
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL_OW 49
// tmp := tmp ^ un ;
1801: LD_ADDR_VAR 0 5
1805: PUSH
1806: LD_VAR 0 5
1810: PUSH
1811: LD_VAR 0 4
1815: ADD
1816: ST_TO_ADDR
// end ;
1817: GO 1726
1819: POP
1820: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1821: LD_ADDR_VAR 0 3
1825: PUSH
1826: DOUBLE
1827: LD_INT 1
1829: DEC
1830: ST_TO_ADDR
1831: LD_INT 4
1833: PUSH
1834: LD_INT 5
1836: PUSH
1837: LD_INT 5
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_OWVAR 67
1849: ARRAY
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1944
// begin uc_nation := 0 ;
1854: LD_ADDR_OWVAR 21
1858: PUSH
1859: LD_INT 0
1861: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1862: LD_ADDR_OWVAR 28
1866: PUSH
1867: LD_INT 15
1869: ST_TO_ADDR
// hc_gallery :=  ;
1870: LD_ADDR_OWVAR 33
1874: PUSH
1875: LD_STRING 
1877: ST_TO_ADDR
// hc_name :=  ;
1878: LD_ADDR_OWVAR 26
1882: PUSH
1883: LD_STRING 
1885: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1886: LD_ADDR_OWVAR 29
1890: PUSH
1891: LD_INT 16
1893: PUSH
1894: LD_INT 12
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: ST_TO_ADDR
// un := CreateHuman ;
1901: LD_ADDR_VAR 0 4
1905: PUSH
1906: CALL_OW 44
1910: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1911: LD_VAR 0 4
1915: PPUSH
1916: LD_INT 5
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: CALL_OW 49
// tmp := tmp ^ un ;
1926: LD_ADDR_VAR 0 5
1930: PUSH
1931: LD_VAR 0 5
1935: PUSH
1936: LD_VAR 0 4
1940: ADD
1941: ST_TO_ADDR
// end ;
1942: GO 1851
1944: POP
1945: POP
// end ; 2 :
1946: GO 2726
1948: LD_INT 2
1950: DOUBLE
1951: EQUAL
1952: IFTRUE 1956
1954: GO 2084
1956: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: DOUBLE
1963: LD_INT 1
1965: DEC
1966: ST_TO_ADDR
1967: LD_INT 3
1969: PUSH
1970: LD_INT 4
1972: PUSH
1973: LD_INT 5
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_OWVAR 67
1985: ARRAY
1986: PUSH
1987: FOR_TO
1988: IFFALSE 2080
// begin uc_nation := 0 ;
1990: LD_ADDR_OWVAR 21
1994: PUSH
1995: LD_INT 0
1997: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1998: LD_ADDR_OWVAR 28
2002: PUSH
2003: LD_INT 17
2005: ST_TO_ADDR
// hc_gallery :=  ;
2006: LD_ADDR_OWVAR 33
2010: PUSH
2011: LD_STRING 
2013: ST_TO_ADDR
// hc_name :=  ;
2014: LD_ADDR_OWVAR 26
2018: PUSH
2019: LD_STRING 
2021: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2022: LD_ADDR_OWVAR 29
2026: PUSH
2027: LD_INT 22
2029: PUSH
2030: LD_INT 12
2032: PUSH
2033: EMPTY
2034: LIST
2035: LIST
2036: ST_TO_ADDR
// un := CreateHuman ;
2037: LD_ADDR_VAR 0 4
2041: PUSH
2042: CALL_OW 44
2046: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2047: LD_VAR 0 4
2051: PPUSH
2052: LD_INT 3
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// tmp := tmp ^ un ;
2062: LD_ADDR_VAR 0 5
2066: PUSH
2067: LD_VAR 0 5
2071: PUSH
2072: LD_VAR 0 4
2076: ADD
2077: ST_TO_ADDR
// end ;
2078: GO 1987
2080: POP
2081: POP
// end ; 3 :
2082: GO 2726
2084: LD_INT 3
2086: DOUBLE
2087: EQUAL
2088: IFTRUE 2092
2090: GO 2252
2092: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 4
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 6
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: LIST
2116: PUSH
2117: LD_OWVAR 67
2121: ARRAY
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2248
// begin uc_nation := 2 ;
2126: LD_ADDR_OWVAR 21
2130: PUSH
2131: LD_INT 2
2133: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2134: LD_ADDR_OWVAR 37
2138: PUSH
2139: LD_INT 14
2141: ST_TO_ADDR
// vc_engine := 3 ;
2142: LD_ADDR_OWVAR 39
2146: PUSH
2147: LD_INT 3
2149: ST_TO_ADDR
// vc_control := control_apeman ;
2150: LD_ADDR_OWVAR 38
2154: PUSH
2155: LD_INT 5
2157: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2158: LD_ADDR_OWVAR 40
2162: PUSH
2163: LD_INT 27
2165: PUSH
2166: LD_INT 28
2168: PUSH
2169: LD_INT 29
2171: PUSH
2172: LD_INT 91
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 1
2183: PPUSH
2184: LD_INT 4
2186: PPUSH
2187: CALL_OW 12
2191: ARRAY
2192: ST_TO_ADDR
// un := CreateVehicle ;
2193: LD_ADDR_VAR 0 4
2197: PUSH
2198: CALL_OW 45
2202: ST_TO_ADDR
// tmp := tmp ^ un ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 4
2217: ADD
2218: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2219: LD_VAR 0 4
2223: PPUSH
2224: LD_INT 0
2226: PPUSH
2227: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2231: LD_VAR 0 4
2235: PPUSH
2236: LD_INT 2
2238: PPUSH
2239: LD_INT 0
2241: PPUSH
2242: CALL_OW 49
// end ;
2246: GO 2123
2248: POP
2249: POP
// end ; 4 :
2250: GO 2726
2252: LD_INT 4
2254: DOUBLE
2255: EQUAL
2256: IFTRUE 2260
2258: GO 2428
2260: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: DOUBLE
2267: LD_INT 1
2269: DEC
2270: ST_TO_ADDR
2271: LD_INT 3
2273: PPUSH
2274: LD_INT 4
2276: PUSH
2277: LD_INT 5
2279: PUSH
2280: LD_INT 6
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: LD_OWVAR 67
2292: ARRAY
2293: PPUSH
2294: CALL_OW 12
2298: PUSH
2299: FOR_TO
2300: IFFALSE 2424
// begin uc_nation := 2 ;
2302: LD_ADDR_OWVAR 21
2306: PUSH
2307: LD_INT 2
2309: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2310: LD_ADDR_OWVAR 37
2314: PUSH
2315: LD_INT 14
2317: ST_TO_ADDR
// vc_engine := 3 ;
2318: LD_ADDR_OWVAR 39
2322: PUSH
2323: LD_INT 3
2325: ST_TO_ADDR
// vc_control := control_apeman ;
2326: LD_ADDR_OWVAR 38
2330: PUSH
2331: LD_INT 5
2333: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2334: LD_ADDR_OWVAR 40
2338: PUSH
2339: LD_INT 27
2341: PUSH
2342: LD_INT 28
2344: PUSH
2345: LD_INT 29
2347: PUSH
2348: LD_INT 91
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL_OW 12
2367: ARRAY
2368: ST_TO_ADDR
// un := CreateVehicle ;
2369: LD_ADDR_VAR 0 4
2373: PUSH
2374: CALL_OW 45
2378: ST_TO_ADDR
// tmp := tmp ^ un ;
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_VAR 0 5
2388: PUSH
2389: LD_VAR 0 4
2393: ADD
2394: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2395: LD_VAR 0 4
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2407: LD_VAR 0 4
2411: PPUSH
2412: LD_INT 1
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: CALL_OW 49
// end ;
2422: GO 2299
2424: POP
2425: POP
// end ; 5 :
2426: GO 2726
2428: LD_INT 5
2430: DOUBLE
2431: EQUAL
2432: IFTRUE 2436
2434: GO 2596
2436: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2437: LD_ADDR_VAR 0 3
2441: PUSH
2442: DOUBLE
2443: LD_INT 1
2445: DEC
2446: ST_TO_ADDR
2447: LD_INT 3
2449: PUSH
2450: LD_INT 4
2452: PUSH
2453: LD_INT 4
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_OWVAR 67
2465: ARRAY
2466: PUSH
2467: FOR_TO
2468: IFFALSE 2592
// begin uc_nation := 2 ;
2470: LD_ADDR_OWVAR 21
2474: PUSH
2475: LD_INT 2
2477: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2478: LD_ADDR_OWVAR 37
2482: PUSH
2483: LD_INT 14
2485: ST_TO_ADDR
// vc_engine := 3 ;
2486: LD_ADDR_OWVAR 39
2490: PUSH
2491: LD_INT 3
2493: ST_TO_ADDR
// vc_control := control_apeman ;
2494: LD_ADDR_OWVAR 38
2498: PUSH
2499: LD_INT 5
2501: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2502: LD_ADDR_OWVAR 40
2506: PUSH
2507: LD_INT 27
2509: PUSH
2510: LD_INT 28
2512: PUSH
2513: LD_INT 29
2515: PUSH
2516: LD_INT 91
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 1
2527: PPUSH
2528: LD_INT 4
2530: PPUSH
2531: CALL_OW 12
2535: ARRAY
2536: ST_TO_ADDR
// un := CreateVehicle ;
2537: LD_ADDR_VAR 0 4
2541: PUSH
2542: CALL_OW 45
2546: ST_TO_ADDR
// tmp := tmp ^ un ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_VAR 0 5
2556: PUSH
2557: LD_VAR 0 4
2561: ADD
2562: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2563: LD_VAR 0 4
2567: PPUSH
2568: LD_INT 4
2570: PPUSH
2571: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2575: LD_VAR 0 4
2579: PPUSH
2580: LD_INT 5
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 49
// end ;
2590: GO 2467
2592: POP
2593: POP
// end ; 6 :
2594: GO 2726
2596: LD_INT 6
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2725
2604: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: DOUBLE
2611: LD_INT 1
2613: DEC
2614: ST_TO_ADDR
2615: LD_INT 2
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: LD_INT 4
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: PUSH
2629: LD_OWVAR 67
2633: ARRAY
2634: PUSH
2635: FOR_TO
2636: IFFALSE 2721
// begin uc_nation := 2 ;
2638: LD_ADDR_OWVAR 21
2642: PUSH
2643: LD_INT 2
2645: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2646: LD_ADDR_OWVAR 37
2650: PUSH
2651: LD_INT 11
2653: ST_TO_ADDR
// vc_engine := engine_combustion ;
2654: LD_ADDR_OWVAR 39
2658: PUSH
2659: LD_INT 1
2661: ST_TO_ADDR
// vc_control := control_apeman ;
2662: LD_ADDR_OWVAR 38
2666: PUSH
2667: LD_INT 5
2669: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2670: LD_ADDR_OWVAR 40
2674: PUSH
2675: LD_INT 24
2677: ST_TO_ADDR
// un := CreateVehicle ;
2678: LD_ADDR_VAR 0 4
2682: PUSH
2683: CALL_OW 45
2687: ST_TO_ADDR
// tmp := tmp ^ un ;
2688: LD_ADDR_VAR 0 5
2692: PUSH
2693: LD_VAR 0 5
2697: PUSH
2698: LD_VAR 0 4
2702: ADD
2703: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2704: LD_VAR 0 4
2708: PPUSH
2709: LD_INT 8
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
// end ;
2719: GO 2635
2721: POP
2722: POP
// end ; end ;
2723: GO 2726
2725: POP
// result := tmp ;
2726: LD_ADDR_VAR 0 2
2730: PUSH
2731: LD_VAR 0 5
2735: ST_TO_ADDR
// end ;
2736: LD_VAR 0 2
2740: RET
// export function ComitSib ; var un ; begin
2741: LD_INT 0
2743: PPUSH
2744: PPUSH
// uc_side := 2 ;
2745: LD_ADDR_OWVAR 20
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// uc_nation := 2 ;
2753: LD_ADDR_OWVAR 21
2757: PUSH
2758: LD_INT 2
2760: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2761: LD_INT 0
2763: PPUSH
2764: LD_INT 4
2766: PPUSH
2767: LD_INT 7
2769: PPUSH
2770: CALL_OW 380
// un := CreateHuman ;
2774: LD_ADDR_VAR 0 2
2778: PUSH
2779: CALL_OW 44
2783: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2799: LD_VAR 0 2
2803: PPUSH
2804: LD_INT 63
2806: PPUSH
2807: LD_INT 37
2809: PPUSH
2810: CALL_OW 158
// end ;
2814: LD_VAR 0 1
2818: RET
// export function DSay ; var i ; begin
2819: LD_INT 0
2821: PPUSH
2822: PPUSH
// Randomize ;
2823: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2827: LD_ADDR_VAR 0 2
2831: PUSH
2832: LD_INT 1
2834: PPUSH
2835: LD_INT 8
2837: PPUSH
2838: CALL_OW 12
2842: ST_TO_ADDR
// case i of 1 :
2843: LD_VAR 0 2
2847: PUSH
2848: LD_INT 1
2850: DOUBLE
2851: EQUAL
2852: IFTRUE 2856
2854: GO 2871
2856: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2857: LD_EXP 2
2861: PPUSH
2862: LD_STRING DDocA1
2864: PPUSH
2865: CALL_OW 94
2869: GO 3033
2871: LD_INT 2
2873: DOUBLE
2874: EQUAL
2875: IFTRUE 2879
2877: GO 2894
2879: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2880: LD_EXP 2
2884: PPUSH
2885: LD_STRING DDocA2
2887: PPUSH
2888: CALL_OW 94
2892: GO 3033
2894: LD_INT 3
2896: DOUBLE
2897: EQUAL
2898: IFTRUE 2902
2900: GO 2917
2902: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2903: LD_EXP 2
2907: PPUSH
2908: LD_STRING DDocA3
2910: PPUSH
2911: CALL_OW 94
2915: GO 3033
2917: LD_INT 4
2919: DOUBLE
2920: EQUAL
2921: IFTRUE 2925
2923: GO 2940
2925: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2926: LD_EXP 2
2930: PPUSH
2931: LD_STRING DDocA4
2933: PPUSH
2934: CALL_OW 94
2938: GO 3033
2940: LD_INT 5
2942: DOUBLE
2943: EQUAL
2944: IFTRUE 2948
2946: GO 2963
2948: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2949: LD_EXP 2
2953: PPUSH
2954: LD_STRING DDocA5
2956: PPUSH
2957: CALL_OW 94
2961: GO 3033
2963: LD_INT 6
2965: DOUBLE
2966: EQUAL
2967: IFTRUE 2971
2969: GO 2986
2971: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2972: LD_EXP 2
2976: PPUSH
2977: LD_STRING DDocA6
2979: PPUSH
2980: CALL_OW 94
2984: GO 3033
2986: LD_INT 7
2988: DOUBLE
2989: EQUAL
2990: IFTRUE 2994
2992: GO 3009
2994: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2995: LD_EXP 2
2999: PPUSH
3000: LD_STRING DDocA7
3002: PPUSH
3003: CALL_OW 94
3007: GO 3033
3009: LD_INT 8
3011: DOUBLE
3012: EQUAL
3013: IFTRUE 3017
3015: GO 3032
3017: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3018: LD_EXP 2
3022: PPUSH
3023: LD_STRING DDocA8
3025: PPUSH
3026: CALL_OW 94
3030: GO 3033
3032: POP
// end ; end_of_file
3033: LD_VAR 0 1
3037: RET
// every 0 0$01 do
3038: GO 3040
3040: DISABLE
// begin display_strings := [ #tick , tick ] ;
3041: LD_ADDR_OWVAR 47
3045: PUSH
3046: LD_STRING #tick
3048: PUSH
3049: LD_OWVAR 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: ST_TO_ADDR
// enable ;
3058: ENABLE
// end ;
3059: END
// export pom , hover , attackN ; every 1 do
3060: GO 3062
3062: DISABLE
// begin pom := [ ] ;
3063: LD_ADDR_EXP 4
3067: PUSH
3068: EMPTY
3069: ST_TO_ADDR
// hover := [ ] ;
3070: LD_ADDR_EXP 5
3074: PUSH
3075: EMPTY
3076: ST_TO_ADDR
// attackN := 0 ;
3077: LD_ADDR_EXP 6
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3086: LD_EXP 4
3090: IFFALSE 3512
3092: GO 3094
3094: DISABLE
3095: LD_INT 0
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: LD_INT 22
3109: PUSH
3110: LD_INT 7
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PPUSH
3117: CALL_OW 69
3121: ST_TO_ADDR
// for i = 1 to pom do
3122: LD_ADDR_VAR 0 1
3126: PUSH
3127: DOUBLE
3128: LD_INT 1
3130: DEC
3131: ST_TO_ADDR
3132: LD_EXP 4
3136: PUSH
3137: FOR_TO
3138: IFFALSE 3196
// if not HasTask ( pom [ i ] ) then
3140: LD_EXP 4
3144: PUSH
3145: LD_VAR 0 1
3149: ARRAY
3150: PPUSH
3151: CALL_OW 314
3155: NOT
3156: IFFALSE 3194
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3158: LD_EXP 4
3162: PUSH
3163: LD_VAR 0 1
3167: ARRAY
3168: PPUSH
3169: LD_VAR 0 2
3173: PPUSH
3174: LD_EXP 4
3178: PUSH
3179: LD_VAR 0 1
3183: ARRAY
3184: PPUSH
3185: CALL_OW 74
3189: PPUSH
3190: CALL_OW 115
3194: GO 3137
3196: POP
3197: POP
// if hover then
3198: LD_EXP 5
3202: IFFALSE 3512
// begin for i = 1 to hover do
3204: LD_ADDR_VAR 0 1
3208: PUSH
3209: DOUBLE
3210: LD_INT 1
3212: DEC
3213: ST_TO_ADDR
3214: LD_EXP 5
3218: PUSH
3219: FOR_TO
3220: IFFALSE 3510
// begin if GetLives ( hover [ i ] ) < 250 then
3222: LD_EXP 5
3226: PUSH
3227: LD_VAR 0 1
3231: ARRAY
3232: PPUSH
3233: CALL_OW 256
3237: PUSH
3238: LD_INT 250
3240: LESS
3241: IFFALSE 3308
// begin for z = 1 to 1 + Difficulty do
3243: LD_ADDR_VAR 0 3
3247: PUSH
3248: DOUBLE
3249: LD_INT 1
3251: DEC
3252: ST_TO_ADDR
3253: LD_INT 1
3255: PUSH
3256: LD_OWVAR 67
3260: PLUS
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3306
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3265: LD_EXP 5
3269: PUSH
3270: LD_VAR 0 1
3274: ARRAY
3275: PPUSH
3276: CALL_OW 250
3280: PPUSH
3281: LD_EXP 5
3285: PUSH
3286: LD_VAR 0 1
3290: ARRAY
3291: PPUSH
3292: CALL_OW 251
3296: PPUSH
3297: LD_INT 10
3299: PPUSH
3300: CALL_OW 453
3304: GO 3262
3306: POP
3307: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3308: LD_VAR 0 2
3312: PPUSH
3313: LD_INT 25
3315: PUSH
3316: LD_INT 2
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: LD_INT 54
3328: PUSH
3329: EMPTY
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PPUSH
3340: CALL_OW 72
3344: PUSH
3345: LD_INT 0
3347: GREATER
3348: IFFALSE 3430
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3350: LD_ADDR_VAR 0 4
3354: PUSH
3355: LD_VAR 0 2
3359: PPUSH
3360: LD_INT 25
3362: PUSH
3363: LD_INT 2
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 3
3372: PUSH
3373: LD_INT 54
3375: PUSH
3376: EMPTY
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PPUSH
3387: CALL_OW 72
3391: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3392: LD_EXP 5
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_EXP 5
3412: PUSH
3413: LD_VAR 0 1
3417: ARRAY
3418: PPUSH
3419: CALL_OW 74
3423: PPUSH
3424: CALL_OW 115
// end else
3428: GO 3508
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_VAR 0 2
3439: PPUSH
3440: LD_INT 21
3442: PUSH
3443: LD_INT 1
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: LD_INT 3
3452: PUSH
3453: LD_INT 54
3455: PUSH
3456: EMPTY
3457: LIST
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PPUSH
3467: CALL_OW 72
3471: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3472: LD_EXP 5
3476: PUSH
3477: LD_VAR 0 1
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 4
3487: PPUSH
3488: LD_EXP 5
3492: PUSH
3493: LD_VAR 0 1
3497: ARRAY
3498: PPUSH
3499: CALL_OW 74
3503: PPUSH
3504: CALL_OW 115
// end ; end ;
3508: GO 3219
3510: POP
3511: POP
// end ; end ;
3512: PPOPN 4
3514: END
// every 3 3$10 do var i , un ;
3515: GO 3517
3517: DISABLE
3518: LD_INT 0
3520: PPUSH
3521: PPUSH
// begin uc_side := 7 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 7
3529: ST_TO_ADDR
// uc_nation := 1 ;
3530: LD_ADDR_OWVAR 21
3534: PUSH
3535: LD_INT 1
3537: ST_TO_ADDR
// for i = 1 to 2 do
3538: LD_ADDR_VAR 0 1
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3717
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3554: LD_INT 1
3556: PPUSH
3557: LD_INT 5
3559: PPUSH
3560: LD_INT 7
3562: PUSH
3563: LD_INT 6
3565: PUSH
3566: LD_INT 6
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: LIST
3573: PUSH
3574: LD_OWVAR 67
3578: ARRAY
3579: PPUSH
3580: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3584: LD_ADDR_OWVAR 37
3588: PUSH
3589: LD_INT 1
3591: ST_TO_ADDR
// vc_engine := engine_combustion ;
3592: LD_ADDR_OWVAR 39
3596: PUSH
3597: LD_INT 1
3599: ST_TO_ADDR
// vc_control := control_manual ;
3600: LD_ADDR_OWVAR 38
3604: PUSH
3605: LD_INT 1
3607: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3608: LD_ADDR_OWVAR 41
3612: PUSH
3613: LD_INT 66
3615: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3616: LD_ADDR_OWVAR 40
3620: PUSH
3621: LD_INT 2
3623: ST_TO_ADDR
// un := CreateVehicle ;
3624: LD_ADDR_VAR 0 2
3628: PUSH
3629: CALL_OW 45
3633: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3646: LD_VAR 0 2
3650: PPUSH
3651: LD_INT 48
3653: PPUSH
3654: LD_INT 3
3656: PPUSH
3657: LD_INT 0
3659: PPUSH
3660: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3664: CALL_OW 44
3668: PPUSH
3669: LD_VAR 0 2
3673: PPUSH
3674: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3678: LD_VAR 0 2
3682: PPUSH
3683: LD_INT 49
3685: PPUSH
3686: LD_INT 17
3688: PPUSH
3689: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3693: LD_VAR 0 2
3697: PPUSH
3698: LD_INT 48
3700: PPUSH
3701: LD_INT 36
3703: PPUSH
3704: CALL_OW 171
// Wait ( 0 0$02 ) ;
3708: LD_INT 70
3710: PPUSH
3711: CALL_OW 67
// end ;
3715: GO 3551
3717: POP
3718: POP
// end ;
3719: PPOPN 2
3721: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3722: LD_EXP 6
3726: PUSH
3727: LD_INT 10
3729: PUSH
3730: LD_INT 12
3732: PUSH
3733: LD_INT 14
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: LESS
3747: IFFALSE 4449
3749: GO 3751
3751: DISABLE
3752: LD_INT 0
3754: PPUSH
3755: PPUSH
// begin enable ;
3756: ENABLE
// Randomize ;
3757: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3761: LD_INT 35
3763: PPUSH
3764: LD_INT 6265
3766: PPUSH
3767: CALL_OW 12
3771: PPUSH
3772: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3776: LD_EXP 6
3780: PUSH
3781: LD_INT 4
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 5
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_OWVAR 67
3799: ARRAY
3800: LESS
3801: IFFALSE 3821
// c := Rand ( 1 , 2 ) else
3803: LD_ADDR_VAR 0 1
3807: PUSH
3808: LD_INT 1
3810: PPUSH
3811: LD_INT 2
3813: PPUSH
3814: CALL_OW 12
3818: ST_TO_ADDR
3819: GO 3837
// c := Rand ( 1 , 3 ) ;
3821: LD_ADDR_VAR 0 1
3825: PUSH
3826: LD_INT 1
3828: PPUSH
3829: LD_INT 3
3831: PPUSH
3832: CALL_OW 12
3836: ST_TO_ADDR
// if attackN = 0 then
3837: LD_EXP 6
3841: PUSH
3842: LD_INT 0
3844: EQUAL
3845: IFFALSE 3861
// Say ( com , DJackAttack ) else
3847: LD_EXP 1
3851: PPUSH
3852: LD_STRING DJackAttack
3854: PPUSH
3855: CALL_OW 88
3859: GO 3865
// DSay ;
3861: CALL 2819 0 0
// case c of 1 :
3865: LD_VAR 0 1
3869: PUSH
3870: LD_INT 1
3872: DOUBLE
3873: EQUAL
3874: IFTRUE 3878
3876: GO 4060
3878: POP
// begin pom := pom ^ Attack ( 1 ) ;
3879: LD_ADDR_EXP 4
3883: PUSH
3884: LD_EXP 4
3888: PUSH
3889: LD_INT 1
3891: PPUSH
3892: CALL 1330 0 1
3896: ADD
3897: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3898: LD_INT 420
3900: PPUSH
3901: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3905: LD_ADDR_EXP 4
3909: PUSH
3910: LD_EXP 4
3914: PUSH
3915: LD_INT 3
3917: PPUSH
3918: CALL 1330 0 1
3922: ADD
3923: ST_TO_ADDR
// if Difficulty > 2 then
3924: LD_OWVAR 67
3928: PUSH
3929: LD_INT 2
3931: GREATER
3932: IFFALSE 3960
// begin Wait ( 0 0$46 ) ;
3934: LD_INT 1610
3936: PPUSH
3937: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3941: LD_ADDR_EXP 4
3945: PUSH
3946: LD_EXP 4
3950: PUSH
3951: LD_INT 4
3953: PPUSH
3954: CALL 1330 0 1
3958: ADD
3959: ST_TO_ADDR
// end ; if attackN > 4 then
3960: LD_EXP 6
3964: PUSH
3965: LD_INT 4
3967: GREATER
3968: IFFALSE 3996
// begin Wait ( 0 0$12 ) ;
3970: LD_INT 420
3972: PPUSH
3973: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3977: LD_ADDR_EXP 4
3981: PUSH
3982: LD_EXP 4
3986: PUSH
3987: LD_INT 3
3989: PPUSH
3990: CALL 1330 0 1
3994: ADD
3995: ST_TO_ADDR
// end ; if attackN > 8 then
3996: LD_EXP 6
4000: PUSH
4001: LD_INT 8
4003: GREATER
4004: IFFALSE 4058
// begin Wait ( 0 0$12 ) ;
4006: LD_INT 420
4008: PPUSH
4009: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_INT 0
4020: PPUSH
4021: LD_INT 100
4023: PPUSH
4024: CALL_OW 12
4028: ST_TO_ADDR
// if l < 45 then
4029: LD_VAR 0 2
4033: PUSH
4034: LD_INT 45
4036: LESS
4037: IFFALSE 4058
// pom := pom ^ Attack ( 2 ) ;
4039: LD_ADDR_EXP 4
4043: PUSH
4044: LD_EXP 4
4048: PUSH
4049: LD_INT 2
4051: PPUSH
4052: CALL 1330 0 1
4056: ADD
4057: ST_TO_ADDR
// end ; end ; 2 :
4058: GO 4347
4060: LD_INT 2
4062: DOUBLE
4063: EQUAL
4064: IFTRUE 4068
4066: GO 4216
4068: POP
// begin pom := pom ^ Attack ( 2 ) ;
4069: LD_ADDR_EXP 4
4073: PUSH
4074: LD_EXP 4
4078: PUSH
4079: LD_INT 2
4081: PPUSH
4082: CALL 1330 0 1
4086: ADD
4087: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4088: LD_ADDR_EXP 4
4092: PUSH
4093: LD_EXP 4
4097: PUSH
4098: LD_INT 3
4100: PPUSH
4101: CALL 1330 0 1
4105: ADD
4106: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4107: LD_OWVAR 67
4111: PUSH
4112: LD_INT 1
4114: GREATER
4115: PUSH
4116: LD_INT 63
4118: PPUSH
4119: LD_INT 37
4121: PPUSH
4122: CALL_OW 428
4126: PPUSH
4127: CALL_OW 266
4131: PUSH
4132: LD_INT 30
4134: EQUAL
4135: AND
4136: IFFALSE 4142
// ComitSib ;
4138: CALL 2741 0 0
// if Difficulty > 2 then
4142: LD_OWVAR 67
4146: PUSH
4147: LD_INT 2
4149: GREATER
4150: IFFALSE 4178
// begin Wait ( 0 0$25 ) ;
4152: LD_INT 875
4154: PPUSH
4155: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4159: LD_ADDR_EXP 4
4163: PUSH
4164: LD_EXP 4
4168: PUSH
4169: LD_INT 4
4171: PPUSH
4172: CALL 1330 0 1
4176: ADD
4177: ST_TO_ADDR
// end ; if attackN > 7 then
4178: LD_EXP 6
4182: PUSH
4183: LD_INT 7
4185: GREATER
4186: IFFALSE 4214
// begin Wait ( 0 0$15 ) ;
4188: LD_INT 525
4190: PPUSH
4191: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4195: LD_ADDR_EXP 4
4199: PUSH
4200: LD_EXP 4
4204: PUSH
4205: LD_INT 2
4207: PPUSH
4208: CALL 1330 0 1
4212: ADD
4213: ST_TO_ADDR
// end ; end ; 3 :
4214: GO 4347
4216: LD_INT 3
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4346
4224: POP
// begin pom := pom ^ Attack ( 1 ) ;
4225: LD_ADDR_EXP 4
4229: PUSH
4230: LD_EXP 4
4234: PUSH
4235: LD_INT 1
4237: PPUSH
4238: CALL 1330 0 1
4242: ADD
4243: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4244: LD_INT 70
4246: PPUSH
4247: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4251: LD_ADDR_EXP 4
4255: PUSH
4256: LD_EXP 4
4260: PUSH
4261: LD_INT 2
4263: PPUSH
4264: CALL 1330 0 1
4268: ADD
4269: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4270: LD_INT 2100
4272: PPUSH
4273: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4277: LD_ADDR_EXP 4
4281: PUSH
4282: LD_EXP 4
4286: PUSH
4287: LD_INT 3
4289: PPUSH
4290: CALL 1330 0 1
4294: ADD
4295: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4296: LD_ADDR_EXP 4
4300: PUSH
4301: LD_EXP 4
4305: PUSH
4306: LD_INT 5
4308: PPUSH
4309: CALL 1330 0 1
4313: ADD
4314: ST_TO_ADDR
// if attackN > 10 then
4315: LD_EXP 6
4319: PUSH
4320: LD_INT 10
4322: GREATER
4323: IFFALSE 4344
// pom := pom ^ Attack ( 2 ) ;
4325: LD_ADDR_EXP 4
4329: PUSH
4330: LD_EXP 4
4334: PUSH
4335: LD_INT 2
4337: PPUSH
4338: CALL 1330 0 1
4342: ADD
4343: ST_TO_ADDR
// end ; end ;
4344: GO 4347
4346: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4347: LD_OWVAR 67
4351: PUSH
4352: LD_INT 1
4354: GREATER
4355: PUSH
4356: LD_EXP 6
4360: PUSH
4361: LD_INT 4
4363: MOD
4364: PUSH
4365: LD_INT 0
4367: EQUAL
4368: AND
4369: IFFALSE 4435
// begin Wait ( 1 1$45 ) ;
4371: LD_INT 3675
4373: PPUSH
4374: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4378: LD_ADDR_EXP 4
4382: PUSH
4383: LD_EXP 4
4387: PUSH
4388: LD_INT 3
4390: PPUSH
4391: CALL 1330 0 1
4395: ADD
4396: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4397: LD_ADDR_EXP 4
4401: PUSH
4402: LD_EXP 4
4406: PUSH
4407: LD_INT 4
4409: PPUSH
4410: CALL 1330 0 1
4414: ADD
4415: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4416: LD_ADDR_EXP 5
4420: PUSH
4421: LD_EXP 5
4425: PUSH
4426: LD_INT 6
4428: PPUSH
4429: CALL 1330 0 1
4433: ADD
4434: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4435: LD_ADDR_EXP 6
4439: PUSH
4440: LD_EXP 6
4444: PUSH
4445: LD_INT 1
4447: PLUS
4448: ST_TO_ADDR
// end ;
4449: PPOPN 2
4451: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4452: LD_EXP 6
4456: PUSH
4457: LD_INT 10
4459: PUSH
4460: LD_INT 12
4462: PUSH
4463: LD_INT 14
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: PUSH
4471: LD_OWVAR 67
4475: ARRAY
4476: GREATEREQUAL
4477: PUSH
4478: LD_INT 22
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_INT 0
4495: EQUAL
4496: AND
4497: IFFALSE 4545
4499: GO 4501
4501: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4502: LD_EXP 2
4506: PPUSH
4507: LD_STRING DDocEnd
4509: PPUSH
4510: CALL_OW 94
// Wait ( 0 0$03 ) ;
4514: LD_INT 105
4516: PPUSH
4517: CALL_OW 67
// case Query ( QWin ) of 1 :
4521: LD_STRING QWin
4523: PPUSH
4524: CALL_OW 97
4528: PUSH
4529: LD_INT 1
4531: DOUBLE
4532: EQUAL
4533: IFTRUE 4537
4535: GO 4540
4537: POP
// ; end ;
4538: GO 4541
4540: POP
// YouWin ;
4541: CALL_OW 103
// end ; end_of_file
4545: END
// on UnitDestroyed ( un ) do begin if un = brave or un = com then
4546: LD_VAR 0 1
4550: PUSH
4551: LD_INT 1
4553: EQUAL
4554: PUSH
4555: LD_VAR 0 1
4559: PUSH
4560: LD_EXP 1
4564: EQUAL
4565: OR
4566: IFFALSE 4587
// begin SayRadio ( doc , DDocWin ) ;
4568: LD_EXP 2
4572: PPUSH
4573: LD_STRING DDocWin
4575: PPUSH
4576: CALL_OW 94
// YouLost (  ) ;
4580: LD_STRING 
4582: PPUSH
4583: CALL_OW 104
// end ; if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
4587: LD_VAR 0 1
4591: PUSH
4592: LD_INT 34
4594: PUSH
4595: LD_INT 91
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: IN
4607: IFFALSE 4652
// begin if Rand ( 1 , 100 ) <= 70 then
4609: LD_INT 1
4611: PPUSH
4612: LD_INT 100
4614: PPUSH
4615: CALL_OW 12
4619: PUSH
4620: LD_INT 70
4622: LESSEQUAL
4623: IFFALSE 4652
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
4625: LD_VAR 0 1
4629: PPUSH
4630: CALL_OW 250
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 251
4644: PPUSH
4645: LD_INT 10
4647: PPUSH
4648: CALL_OW 495
// end ; end ;
4652: PPOPN 1
4654: END
