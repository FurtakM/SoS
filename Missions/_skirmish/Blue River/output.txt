// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// export pom , hover , attackN ; every 1 do
3063: GO 3065
3065: DISABLE
// begin pom := [ ] ;
3066: LD_ADDR_EXP 4
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// hover := [ ] ;
3073: LD_ADDR_EXP 5
3077: PUSH
3078: EMPTY
3079: ST_TO_ADDR
// attackN := 0 ;
3080: LD_ADDR_EXP 6
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// end ;
3088: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3089: LD_EXP 4
3093: IFFALSE 3515
3095: GO 3097
3097: DISABLE
3098: LD_INT 0
3100: PPUSH
3101: PPUSH
3102: PPUSH
3103: PPUSH
// begin enable ;
3104: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 7
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 69
3124: ST_TO_ADDR
// for i = 1 to pom do
3125: LD_ADDR_VAR 0 1
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_EXP 4
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3199
// if not HasTask ( pom [ i ] ) then
3143: LD_EXP 4
3147: PUSH
3148: LD_VAR 0 1
3152: ARRAY
3153: PPUSH
3154: CALL_OW 314
3158: NOT
3159: IFFALSE 3197
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3161: LD_EXP 4
3165: PUSH
3166: LD_VAR 0 1
3170: ARRAY
3171: PPUSH
3172: LD_VAR 0 2
3176: PPUSH
3177: LD_EXP 4
3181: PUSH
3182: LD_VAR 0 1
3186: ARRAY
3187: PPUSH
3188: CALL_OW 74
3192: PPUSH
3193: CALL_OW 115
3197: GO 3140
3199: POP
3200: POP
// if hover then
3201: LD_EXP 5
3205: IFFALSE 3515
// begin for i = 1 to hover do
3207: LD_ADDR_VAR 0 1
3211: PUSH
3212: DOUBLE
3213: LD_INT 1
3215: DEC
3216: ST_TO_ADDR
3217: LD_EXP 5
3221: PUSH
3222: FOR_TO
3223: IFFALSE 3513
// begin if GetLives ( hover [ i ] ) < 250 then
3225: LD_EXP 5
3229: PUSH
3230: LD_VAR 0 1
3234: ARRAY
3235: PPUSH
3236: CALL_OW 256
3240: PUSH
3241: LD_INT 250
3243: LESS
3244: IFFALSE 3311
// begin for z = 1 to 1 + Difficulty do
3246: LD_ADDR_VAR 0 3
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_INT 1
3258: PUSH
3259: LD_OWVAR 67
3263: PLUS
3264: PUSH
3265: FOR_TO
3266: IFFALSE 3309
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3268: LD_EXP 5
3272: PUSH
3273: LD_VAR 0 1
3277: ARRAY
3278: PPUSH
3279: CALL_OW 250
3283: PPUSH
3284: LD_EXP 5
3288: PUSH
3289: LD_VAR 0 1
3293: ARRAY
3294: PPUSH
3295: CALL_OW 251
3299: PPUSH
3300: LD_INT 10
3302: PPUSH
3303: CALL_OW 453
3307: GO 3265
3309: POP
3310: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3311: LD_VAR 0 2
3315: PPUSH
3316: LD_INT 25
3318: PUSH
3319: LD_INT 2
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: LD_INT 3
3328: PUSH
3329: LD_INT 54
3331: PUSH
3332: EMPTY
3333: LIST
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 72
3347: PUSH
3348: LD_INT 0
3350: GREATER
3351: IFFALSE 3433
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3353: LD_ADDR_VAR 0 4
3357: PUSH
3358: LD_VAR 0 2
3362: PPUSH
3363: LD_INT 25
3365: PUSH
3366: LD_INT 2
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: LD_INT 3
3375: PUSH
3376: LD_INT 54
3378: PUSH
3379: EMPTY
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PPUSH
3390: CALL_OW 72
3394: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3395: LD_EXP 5
3399: PUSH
3400: LD_VAR 0 1
3404: ARRAY
3405: PPUSH
3406: LD_VAR 0 4
3410: PPUSH
3411: LD_EXP 5
3415: PUSH
3416: LD_VAR 0 1
3420: ARRAY
3421: PPUSH
3422: CALL_OW 74
3426: PPUSH
3427: CALL_OW 115
// end else
3431: GO 3511
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3433: LD_ADDR_VAR 0 4
3437: PUSH
3438: LD_VAR 0 2
3442: PPUSH
3443: LD_INT 21
3445: PUSH
3446: LD_INT 1
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 3
3455: PUSH
3456: LD_INT 54
3458: PUSH
3459: EMPTY
3460: LIST
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PPUSH
3470: CALL_OW 72
3474: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3475: LD_EXP 5
3479: PUSH
3480: LD_VAR 0 1
3484: ARRAY
3485: PPUSH
3486: LD_VAR 0 4
3490: PPUSH
3491: LD_EXP 5
3495: PUSH
3496: LD_VAR 0 1
3500: ARRAY
3501: PPUSH
3502: CALL_OW 74
3506: PPUSH
3507: CALL_OW 115
// end ; end ;
3511: GO 3222
3513: POP
3514: POP
// end ; end ;
3515: PPOPN 4
3517: END
// every 3 3$10 do var i , un ;
3518: GO 3520
3520: DISABLE
3521: LD_INT 0
3523: PPUSH
3524: PPUSH
// begin uc_side := 7 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 7
3532: ST_TO_ADDR
// uc_nation := 1 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 1
3540: ST_TO_ADDR
// for i = 1 to 2 do
3541: LD_ADDR_VAR 0 1
3545: PUSH
3546: DOUBLE
3547: LD_INT 1
3549: DEC
3550: ST_TO_ADDR
3551: LD_INT 2
3553: PUSH
3554: FOR_TO
3555: IFFALSE 3720
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 5
3562: PPUSH
3563: LD_INT 7
3565: PUSH
3566: LD_INT 6
3568: PUSH
3569: LD_INT 6
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_OWVAR 67
3581: ARRAY
3582: PPUSH
3583: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3587: LD_ADDR_OWVAR 37
3591: PUSH
3592: LD_INT 1
3594: ST_TO_ADDR
// vc_engine := engine_combustion ;
3595: LD_ADDR_OWVAR 39
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// vc_control := control_manual ;
3603: LD_ADDR_OWVAR 38
3607: PUSH
3608: LD_INT 1
3610: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3611: LD_ADDR_OWVAR 41
3615: PUSH
3616: LD_INT 66
3618: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3619: LD_ADDR_OWVAR 40
3623: PUSH
3624: LD_INT 2
3626: ST_TO_ADDR
// un := CreateVehicle ;
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: CALL_OW 45
3636: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3637: LD_VAR 0 2
3641: PPUSH
3642: LD_INT 3
3644: PPUSH
3645: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3649: LD_VAR 0 2
3653: PPUSH
3654: LD_INT 48
3656: PPUSH
3657: LD_INT 3
3659: PPUSH
3660: LD_INT 0
3662: PPUSH
3663: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3667: CALL_OW 44
3671: PPUSH
3672: LD_VAR 0 2
3676: PPUSH
3677: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3681: LD_VAR 0 2
3685: PPUSH
3686: LD_INT 49
3688: PPUSH
3689: LD_INT 17
3691: PPUSH
3692: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 48
3703: PPUSH
3704: LD_INT 36
3706: PPUSH
3707: CALL_OW 171
// Wait ( 0 0$02 ) ;
3711: LD_INT 70
3713: PPUSH
3714: CALL_OW 67
// end ;
3718: GO 3554
3720: POP
3721: POP
// end ;
3722: PPOPN 2
3724: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3725: LD_EXP 6
3729: PUSH
3730: LD_INT 10
3732: PUSH
3733: LD_INT 12
3735: PUSH
3736: LD_INT 14
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: LESS
3750: IFFALSE 4452
3752: GO 3754
3754: DISABLE
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
// begin enable ;
3759: ENABLE
// Randomize ;
3760: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3764: LD_INT 35
3766: PPUSH
3767: LD_INT 6265
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3779: LD_EXP 6
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 4
3789: PUSH
3790: LD_INT 5
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_OWVAR 67
3802: ARRAY
3803: LESS
3804: IFFALSE 3824
// c := Rand ( 1 , 2 ) else
3806: LD_ADDR_VAR 0 1
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
3822: GO 3840
// c := Rand ( 1 , 3 ) ;
3824: LD_ADDR_VAR 0 1
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 3
3834: PPUSH
3835: CALL_OW 12
3839: ST_TO_ADDR
// if attackN = 0 then
3840: LD_EXP 6
3844: PUSH
3845: LD_INT 0
3847: EQUAL
3848: IFFALSE 3864
// Say ( com , DJackAttack ) else
3850: LD_EXP 1
3854: PPUSH
3855: LD_STRING DJackAttack
3857: PPUSH
3858: CALL_OW 88
3862: GO 3868
// DSay ;
3864: CALL 2844 0 0
// case c of 1 :
3868: LD_VAR 0 1
3872: PUSH
3873: LD_INT 1
3875: DOUBLE
3876: EQUAL
3877: IFTRUE 3881
3879: GO 4063
3881: POP
// begin pom := pom ^ Attack ( 1 ) ;
3882: LD_ADDR_EXP 4
3886: PUSH
3887: LD_EXP 4
3891: PUSH
3892: LD_INT 1
3894: PPUSH
3895: CALL 1355 0 1
3899: ADD
3900: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3901: LD_INT 420
3903: PPUSH
3904: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 2 then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 2
3934: GREATER
3935: IFFALSE 3963
// begin Wait ( 0 0$46 ) ;
3937: LD_INT 1610
3939: PPUSH
3940: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3944: LD_ADDR_EXP 4
3948: PUSH
3949: LD_EXP 4
3953: PUSH
3954: LD_INT 4
3956: PPUSH
3957: CALL 1355 0 1
3961: ADD
3962: ST_TO_ADDR
// end ; if attackN > 4 then
3963: LD_EXP 6
3967: PUSH
3968: LD_INT 4
3970: GREATER
3971: IFFALSE 3999
// begin Wait ( 0 0$12 ) ;
3973: LD_INT 420
3975: PPUSH
3976: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3980: LD_ADDR_EXP 4
3984: PUSH
3985: LD_EXP 4
3989: PUSH
3990: LD_INT 3
3992: PPUSH
3993: CALL 1355 0 1
3997: ADD
3998: ST_TO_ADDR
// end ; if attackN > 8 then
3999: LD_EXP 6
4003: PUSH
4004: LD_INT 8
4006: GREATER
4007: IFFALSE 4061
// begin Wait ( 0 0$12 ) ;
4009: LD_INT 420
4011: PPUSH
4012: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_INT 0
4023: PPUSH
4024: LD_INT 100
4026: PPUSH
4027: CALL_OW 12
4031: ST_TO_ADDR
// if l < 45 then
4032: LD_VAR 0 2
4036: PUSH
4037: LD_INT 45
4039: LESS
4040: IFFALSE 4061
// pom := pom ^ Attack ( 2 ) ;
4042: LD_ADDR_EXP 4
4046: PUSH
4047: LD_EXP 4
4051: PUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL 1355 0 1
4059: ADD
4060: ST_TO_ADDR
// end ; end ; 2 :
4061: GO 4350
4063: LD_INT 2
4065: DOUBLE
4066: EQUAL
4067: IFTRUE 4071
4069: GO 4219
4071: POP
// begin pom := pom ^ Attack ( 2 ) ;
4072: LD_ADDR_EXP 4
4076: PUSH
4077: LD_EXP 4
4081: PUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL 1355 0 1
4089: ADD
4090: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4091: LD_ADDR_EXP 4
4095: PUSH
4096: LD_EXP 4
4100: PUSH
4101: LD_INT 3
4103: PPUSH
4104: CALL 1355 0 1
4108: ADD
4109: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4110: LD_OWVAR 67
4114: PUSH
4115: LD_INT 1
4117: GREATER
4118: PUSH
4119: LD_INT 63
4121: PPUSH
4122: LD_INT 37
4124: PPUSH
4125: CALL_OW 428
4129: PPUSH
4130: CALL_OW 266
4134: PUSH
4135: LD_INT 30
4137: EQUAL
4138: AND
4139: IFFALSE 4145
// ComitSib ;
4141: CALL 2766 0 0
// if Difficulty > 2 then
4145: LD_OWVAR 67
4149: PUSH
4150: LD_INT 2
4152: GREATER
4153: IFFALSE 4181
// begin Wait ( 0 0$25 ) ;
4155: LD_INT 875
4157: PPUSH
4158: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4162: LD_ADDR_EXP 4
4166: PUSH
4167: LD_EXP 4
4171: PUSH
4172: LD_INT 4
4174: PPUSH
4175: CALL 1355 0 1
4179: ADD
4180: ST_TO_ADDR
// end ; if attackN > 7 then
4181: LD_EXP 6
4185: PUSH
4186: LD_INT 7
4188: GREATER
4189: IFFALSE 4217
// begin Wait ( 0 0$15 ) ;
4191: LD_INT 525
4193: PPUSH
4194: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4198: LD_ADDR_EXP 4
4202: PUSH
4203: LD_EXP 4
4207: PUSH
4208: LD_INT 2
4210: PPUSH
4211: CALL 1355 0 1
4215: ADD
4216: ST_TO_ADDR
// end ; end ; 3 :
4217: GO 4350
4219: LD_INT 3
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4349
4227: POP
// begin pom := pom ^ Attack ( 1 ) ;
4228: LD_ADDR_EXP 4
4232: PUSH
4233: LD_EXP 4
4237: PUSH
4238: LD_INT 1
4240: PPUSH
4241: CALL 1355 0 1
4245: ADD
4246: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4247: LD_INT 70
4249: PPUSH
4250: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4254: LD_ADDR_EXP 4
4258: PUSH
4259: LD_EXP 4
4263: PUSH
4264: LD_INT 2
4266: PPUSH
4267: CALL 1355 0 1
4271: ADD
4272: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4273: LD_INT 2100
4275: PPUSH
4276: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4280: LD_ADDR_EXP 4
4284: PUSH
4285: LD_EXP 4
4289: PUSH
4290: LD_INT 3
4292: PPUSH
4293: CALL 1355 0 1
4297: ADD
4298: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4299: LD_ADDR_EXP 4
4303: PUSH
4304: LD_EXP 4
4308: PUSH
4309: LD_INT 5
4311: PPUSH
4312: CALL 1355 0 1
4316: ADD
4317: ST_TO_ADDR
// if attackN > 10 then
4318: LD_EXP 6
4322: PUSH
4323: LD_INT 10
4325: GREATER
4326: IFFALSE 4347
// pom := pom ^ Attack ( 2 ) ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_EXP 4
4337: PUSH
4338: LD_INT 2
4340: PPUSH
4341: CALL 1355 0 1
4345: ADD
4346: ST_TO_ADDR
// end ; end ;
4347: GO 4350
4349: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4350: LD_OWVAR 67
4354: PUSH
4355: LD_INT 1
4357: GREATER
4358: PUSH
4359: LD_EXP 6
4363: PUSH
4364: LD_INT 4
4366: MOD
4367: PUSH
4368: LD_INT 0
4370: EQUAL
4371: AND
4372: IFFALSE 4438
// begin Wait ( 1 1$45 ) ;
4374: LD_INT 3675
4376: PPUSH
4377: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4381: LD_ADDR_EXP 4
4385: PUSH
4386: LD_EXP 4
4390: PUSH
4391: LD_INT 3
4393: PPUSH
4394: CALL 1355 0 1
4398: ADD
4399: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4400: LD_ADDR_EXP 4
4404: PUSH
4405: LD_EXP 4
4409: PUSH
4410: LD_INT 4
4412: PPUSH
4413: CALL 1355 0 1
4417: ADD
4418: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4419: LD_ADDR_EXP 5
4423: PUSH
4424: LD_EXP 5
4428: PUSH
4429: LD_INT 6
4431: PPUSH
4432: CALL 1355 0 1
4436: ADD
4437: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4438: LD_ADDR_EXP 6
4442: PUSH
4443: LD_EXP 6
4447: PUSH
4448: LD_INT 1
4450: PLUS
4451: ST_TO_ADDR
// end ;
4452: PPOPN 2
4454: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4455: LD_EXP 6
4459: PUSH
4460: LD_INT 10
4462: PUSH
4463: LD_INT 12
4465: PUSH
4466: LD_INT 14
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: PUSH
4474: LD_OWVAR 67
4478: ARRAY
4479: GREATEREQUAL
4480: PUSH
4481: LD_INT 22
4483: PUSH
4484: LD_INT 2
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PPUSH
4491: CALL_OW 69
4495: PUSH
4496: LD_INT 0
4498: EQUAL
4499: AND
4500: IFFALSE 4556
4502: GO 4504
4504: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4505: LD_EXP 2
4509: PPUSH
4510: LD_STRING DDocEnd
4512: PPUSH
4513: CALL_OW 94
// Wait ( 0 0$03 ) ;
4517: LD_INT 105
4519: PPUSH
4520: CALL_OW 67
// case Query ( QWin ) of 1 :
4524: LD_STRING QWin
4526: PPUSH
4527: CALL_OW 97
4531: PUSH
4532: LD_INT 1
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4543
4540: POP
// ; end ;
4541: GO 4544
4543: POP
// music_nat := 5 ;
4544: LD_ADDR_OWVAR 71
4548: PUSH
4549: LD_INT 5
4551: ST_TO_ADDR
// YouWin ;
4552: CALL_OW 103
// end ; end_of_file
4556: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4557: LD_VAR 0 1
4561: PPUSH
4562: CALL 19171 0 1
// if un = brave or un = com then
4566: LD_VAR 0 1
4570: PUSH
4571: LD_INT 1
4573: EQUAL
4574: PUSH
4575: LD_VAR 0 1
4579: PUSH
4580: LD_EXP 1
4584: EQUAL
4585: OR
4586: IFFALSE 4607
// begin SayRadio ( doc , DDocWin ) ;
4588: LD_EXP 2
4592: PPUSH
4593: LD_STRING DDocWin
4595: PPUSH
4596: CALL_OW 94
// YouLost (  ) ;
4600: LD_STRING 
4602: PPUSH
4603: CALL_OW 104
// end ; end ;
4607: PPOPN 1
4609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_VAR 0 2
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: CALL 19269 0 3
// end ;
4629: PPOPN 3
4631: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: CALL 19277 0 1
// end ;
4641: PPOPN 1
4643: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4644: LD_VAR 0 1
4648: PPUSH
4649: LD_VAR 0 2
4653: PPUSH
4654: CALL 19293 0 2
// end ; end_of_file
4658: PPOPN 2
4660: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4661: LD_INT 0
4663: PPUSH
// ar_miner := 81 ;
4664: LD_ADDR_EXP 14
4668: PUSH
4669: LD_INT 81
4671: ST_TO_ADDR
// ar_crane := 88 ;
4672: LD_ADDR_EXP 13
4676: PUSH
4677: LD_INT 88
4679: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4680: LD_ADDR_EXP 8
4684: PUSH
4685: LD_INT 89
4687: ST_TO_ADDR
// us_hack := 99 ;
4688: LD_ADDR_EXP 9
4692: PUSH
4693: LD_INT 99
4695: ST_TO_ADDR
// us_artillery := 97 ;
4696: LD_ADDR_EXP 10
4700: PUSH
4701: LD_INT 97
4703: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4704: LD_ADDR_EXP 11
4708: PUSH
4709: LD_INT 91
4711: ST_TO_ADDR
// ar_mortar := 92 ;
4712: LD_ADDR_EXP 12
4716: PUSH
4717: LD_INT 92
4719: ST_TO_ADDR
// ru_flamethrower := 93 ;
4720: LD_ADDR_EXP 15
4724: PUSH
4725: LD_INT 93
4727: ST_TO_ADDR
// ru_radar := 98 ;
4728: LD_ADDR_EXP 7
4732: PUSH
4733: LD_INT 98
4735: ST_TO_ADDR
// tech_Artillery := 80 ;
4736: LD_ADDR_EXP 16
4740: PUSH
4741: LD_INT 80
4743: ST_TO_ADDR
// tech_RadMat := 81 ;
4744: LD_ADDR_EXP 17
4748: PUSH
4749: LD_INT 81
4751: ST_TO_ADDR
// tech_BasicTools := 82 ;
4752: LD_ADDR_EXP 18
4756: PUSH
4757: LD_INT 82
4759: ST_TO_ADDR
// tech_Cargo := 83 ;
4760: LD_ADDR_EXP 19
4764: PUSH
4765: LD_INT 83
4767: ST_TO_ADDR
// tech_Track := 84 ;
4768: LD_ADDR_EXP 20
4772: PUSH
4773: LD_INT 84
4775: ST_TO_ADDR
// tech_Crane := 85 ;
4776: LD_ADDR_EXP 21
4780: PUSH
4781: LD_INT 85
4783: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4784: LD_ADDR_EXP 22
4788: PUSH
4789: LD_INT 86
4791: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4792: LD_ADDR_EXP 23
4796: PUSH
4797: LD_INT 87
4799: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4800: LD_ADDR_EXP 24
4804: PUSH
4805: LD_INT 88
4807: ST_TO_ADDR
// class_mastodont := 31 ;
4808: LD_ADDR_EXP 25
4812: PUSH
4813: LD_INT 31
4815: ST_TO_ADDR
// class_horse := 21 ;
4816: LD_ADDR_EXP 26
4820: PUSH
4821: LD_INT 21
4823: ST_TO_ADDR
// end ;
4824: LD_VAR 0 1
4828: RET
// every 1 do
4829: GO 4831
4831: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4832: CALL 4661 0 0
4836: END
// every 0 0$1 do
4837: GO 4839
4839: DISABLE
// begin enable ;
4840: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4841: LD_STRING updateTimer(
4843: PUSH
4844: LD_OWVAR 1
4848: STR
4849: PUSH
4850: LD_STRING );
4852: STR
4853: PPUSH
4854: CALL_OW 559
// end ;
4858: END
// export function SOS_MapStart ( ) ; begin
4859: LD_INT 0
4861: PPUSH
// if streamModeActive then
4862: LD_EXP 27
4866: IFFALSE 4875
// DefineStreamItems ( true ) ;
4868: LD_INT 1
4870: PPUSH
4871: CALL 6525 0 1
// UpdateFactoryWaypoints ( ) ;
4875: CALL 20109 0 0
// end ;
4879: LD_VAR 0 1
4883: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4884: LD_INT 0
4886: PPUSH
// if p2 = 100 then
4887: LD_VAR 0 2
4891: PUSH
4892: LD_INT 100
4894: EQUAL
4895: IFFALSE 5898
// begin if not StreamModeActive then
4897: LD_EXP 27
4901: NOT
4902: IFFALSE 4912
// StreamModeActive := true ;
4904: LD_ADDR_EXP 27
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// if p3 = 0 then
4912: LD_VAR 0 3
4916: PUSH
4917: LD_INT 0
4919: EQUAL
4920: IFFALSE 4926
// InitStreamMode ;
4922: CALL 6061 0 0
// if p3 = 1 then
4926: LD_VAR 0 3
4930: PUSH
4931: LD_INT 1
4933: EQUAL
4934: IFFALSE 4944
// sRocket := true ;
4936: LD_ADDR_EXP 32
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// if p3 = 2 then
4944: LD_VAR 0 3
4948: PUSH
4949: LD_INT 2
4951: EQUAL
4952: IFFALSE 4962
// sSpeed := true ;
4954: LD_ADDR_EXP 31
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// if p3 = 3 then
4962: LD_VAR 0 3
4966: PUSH
4967: LD_INT 3
4969: EQUAL
4970: IFFALSE 4980
// sEngine := true ;
4972: LD_ADDR_EXP 33
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// if p3 = 4 then
4980: LD_VAR 0 3
4984: PUSH
4985: LD_INT 4
4987: EQUAL
4988: IFFALSE 4998
// sSpec := true ;
4990: LD_ADDR_EXP 30
4994: PUSH
4995: LD_INT 1
4997: ST_TO_ADDR
// if p3 = 5 then
4998: LD_VAR 0 3
5002: PUSH
5003: LD_INT 5
5005: EQUAL
5006: IFFALSE 5016
// sLevel := true ;
5008: LD_ADDR_EXP 34
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// if p3 = 6 then
5016: LD_VAR 0 3
5020: PUSH
5021: LD_INT 6
5023: EQUAL
5024: IFFALSE 5034
// sArmoury := true ;
5026: LD_ADDR_EXP 35
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// if p3 = 7 then
5034: LD_VAR 0 3
5038: PUSH
5039: LD_INT 7
5041: EQUAL
5042: IFFALSE 5052
// sRadar := true ;
5044: LD_ADDR_EXP 36
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// if p3 = 8 then
5052: LD_VAR 0 3
5056: PUSH
5057: LD_INT 8
5059: EQUAL
5060: IFFALSE 5070
// sBunker := true ;
5062: LD_ADDR_EXP 37
5066: PUSH
5067: LD_INT 1
5069: ST_TO_ADDR
// if p3 = 9 then
5070: LD_VAR 0 3
5074: PUSH
5075: LD_INT 9
5077: EQUAL
5078: IFFALSE 5088
// sHack := true ;
5080: LD_ADDR_EXP 38
5084: PUSH
5085: LD_INT 1
5087: ST_TO_ADDR
// if p3 = 10 then
5088: LD_VAR 0 3
5092: PUSH
5093: LD_INT 10
5095: EQUAL
5096: IFFALSE 5106
// sFire := true ;
5098: LD_ADDR_EXP 39
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// if p3 = 11 then
5106: LD_VAR 0 3
5110: PUSH
5111: LD_INT 11
5113: EQUAL
5114: IFFALSE 5124
// sRefresh := true ;
5116: LD_ADDR_EXP 40
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if p3 = 12 then
5124: LD_VAR 0 3
5128: PUSH
5129: LD_INT 12
5131: EQUAL
5132: IFFALSE 5142
// sExp := true ;
5134: LD_ADDR_EXP 41
5138: PUSH
5139: LD_INT 1
5141: ST_TO_ADDR
// if p3 = 13 then
5142: LD_VAR 0 3
5146: PUSH
5147: LD_INT 13
5149: EQUAL
5150: IFFALSE 5160
// sDepot := true ;
5152: LD_ADDR_EXP 42
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// if p3 = 14 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 14
5167: EQUAL
5168: IFFALSE 5178
// sFlag := true ;
5170: LD_ADDR_EXP 43
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 15 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 15
5185: EQUAL
5186: IFFALSE 5196
// sKamikadze := true ;
5188: LD_ADDR_EXP 51
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 16 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 16
5203: EQUAL
5204: IFFALSE 5214
// sTroll := true ;
5206: LD_ADDR_EXP 52
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 17 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 17
5221: EQUAL
5222: IFFALSE 5232
// sSlow := true ;
5224: LD_ADDR_EXP 53
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 18 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 18
5239: EQUAL
5240: IFFALSE 5250
// sLack := true ;
5242: LD_ADDR_EXP 54
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// if p3 = 19 then
5250: LD_VAR 0 3
5254: PUSH
5255: LD_INT 19
5257: EQUAL
5258: IFFALSE 5268
// sTank := true ;
5260: LD_ADDR_EXP 56
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if p3 = 20 then
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 20
5275: EQUAL
5276: IFFALSE 5286
// sRemote := true ;
5278: LD_ADDR_EXP 57
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// if p3 = 21 then
5286: LD_VAR 0 3
5290: PUSH
5291: LD_INT 21
5293: EQUAL
5294: IFFALSE 5304
// sPowell := true ;
5296: LD_ADDR_EXP 58
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if p3 = 22 then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 22
5311: EQUAL
5312: IFFALSE 5322
// sTeleport := true ;
5314: LD_ADDR_EXP 61
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// if p3 = 23 then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 23
5329: EQUAL
5330: IFFALSE 5340
// sOilTower := true ;
5332: LD_ADDR_EXP 63
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// if p3 = 24 then
5340: LD_VAR 0 3
5344: PUSH
5345: LD_INT 24
5347: EQUAL
5348: IFFALSE 5358
// sShovel := true ;
5350: LD_ADDR_EXP 64
5354: PUSH
5355: LD_INT 1
5357: ST_TO_ADDR
// if p3 = 25 then
5358: LD_VAR 0 3
5362: PUSH
5363: LD_INT 25
5365: EQUAL
5366: IFFALSE 5376
// sSheik := true ;
5368: LD_ADDR_EXP 65
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// if p3 = 26 then
5376: LD_VAR 0 3
5380: PUSH
5381: LD_INT 26
5383: EQUAL
5384: IFFALSE 5394
// sEarthquake := true ;
5386: LD_ADDR_EXP 67
5390: PUSH
5391: LD_INT 1
5393: ST_TO_ADDR
// if p3 = 27 then
5394: LD_VAR 0 3
5398: PUSH
5399: LD_INT 27
5401: EQUAL
5402: IFFALSE 5412
// sAI := true ;
5404: LD_ADDR_EXP 68
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// if p3 = 28 then
5412: LD_VAR 0 3
5416: PUSH
5417: LD_INT 28
5419: EQUAL
5420: IFFALSE 5430
// sCargo := true ;
5422: LD_ADDR_EXP 71
5426: PUSH
5427: LD_INT 1
5429: ST_TO_ADDR
// if p3 = 29 then
5430: LD_VAR 0 3
5434: PUSH
5435: LD_INT 29
5437: EQUAL
5438: IFFALSE 5448
// sDLaser := true ;
5440: LD_ADDR_EXP 72
5444: PUSH
5445: LD_INT 1
5447: ST_TO_ADDR
// if p3 = 30 then
5448: LD_VAR 0 3
5452: PUSH
5453: LD_INT 30
5455: EQUAL
5456: IFFALSE 5466
// sExchange := true ;
5458: LD_ADDR_EXP 73
5462: PUSH
5463: LD_INT 1
5465: ST_TO_ADDR
// if p3 = 31 then
5466: LD_VAR 0 3
5470: PUSH
5471: LD_INT 31
5473: EQUAL
5474: IFFALSE 5484
// sFac := true ;
5476: LD_ADDR_EXP 74
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// if p3 = 32 then
5484: LD_VAR 0 3
5488: PUSH
5489: LD_INT 32
5491: EQUAL
5492: IFFALSE 5502
// sPower := true ;
5494: LD_ADDR_EXP 75
5498: PUSH
5499: LD_INT 1
5501: ST_TO_ADDR
// if p3 = 33 then
5502: LD_VAR 0 3
5506: PUSH
5507: LD_INT 33
5509: EQUAL
5510: IFFALSE 5520
// sRandom := true ;
5512: LD_ADDR_EXP 76
5516: PUSH
5517: LD_INT 1
5519: ST_TO_ADDR
// if p3 = 34 then
5520: LD_VAR 0 3
5524: PUSH
5525: LD_INT 34
5527: EQUAL
5528: IFFALSE 5538
// sShield := true ;
5530: LD_ADDR_EXP 77
5534: PUSH
5535: LD_INT 1
5537: ST_TO_ADDR
// if p3 = 35 then
5538: LD_VAR 0 3
5542: PUSH
5543: LD_INT 35
5545: EQUAL
5546: IFFALSE 5556
// sTime := true ;
5548: LD_ADDR_EXP 78
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// if p3 = 36 then
5556: LD_VAR 0 3
5560: PUSH
5561: LD_INT 36
5563: EQUAL
5564: IFFALSE 5574
// sTools := true ;
5566: LD_ADDR_EXP 79
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// if p3 = 101 then
5574: LD_VAR 0 3
5578: PUSH
5579: LD_INT 101
5581: EQUAL
5582: IFFALSE 5592
// sSold := true ;
5584: LD_ADDR_EXP 44
5588: PUSH
5589: LD_INT 1
5591: ST_TO_ADDR
// if p3 = 102 then
5592: LD_VAR 0 3
5596: PUSH
5597: LD_INT 102
5599: EQUAL
5600: IFFALSE 5610
// sDiff := true ;
5602: LD_ADDR_EXP 45
5606: PUSH
5607: LD_INT 1
5609: ST_TO_ADDR
// if p3 = 103 then
5610: LD_VAR 0 3
5614: PUSH
5615: LD_INT 103
5617: EQUAL
5618: IFFALSE 5628
// sFog := true ;
5620: LD_ADDR_EXP 48
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// if p3 = 104 then
5628: LD_VAR 0 3
5632: PUSH
5633: LD_INT 104
5635: EQUAL
5636: IFFALSE 5646
// sReset := true ;
5638: LD_ADDR_EXP 49
5642: PUSH
5643: LD_INT 1
5645: ST_TO_ADDR
// if p3 = 105 then
5646: LD_VAR 0 3
5650: PUSH
5651: LD_INT 105
5653: EQUAL
5654: IFFALSE 5664
// sSun := true ;
5656: LD_ADDR_EXP 50
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// if p3 = 106 then
5664: LD_VAR 0 3
5668: PUSH
5669: LD_INT 106
5671: EQUAL
5672: IFFALSE 5682
// sTiger := true ;
5674: LD_ADDR_EXP 46
5678: PUSH
5679: LD_INT 1
5681: ST_TO_ADDR
// if p3 = 107 then
5682: LD_VAR 0 3
5686: PUSH
5687: LD_INT 107
5689: EQUAL
5690: IFFALSE 5700
// sBomb := true ;
5692: LD_ADDR_EXP 47
5696: PUSH
5697: LD_INT 1
5699: ST_TO_ADDR
// if p3 = 108 then
5700: LD_VAR 0 3
5704: PUSH
5705: LD_INT 108
5707: EQUAL
5708: IFFALSE 5718
// sWound := true ;
5710: LD_ADDR_EXP 55
5714: PUSH
5715: LD_INT 1
5717: ST_TO_ADDR
// if p3 = 109 then
5718: LD_VAR 0 3
5722: PUSH
5723: LD_INT 109
5725: EQUAL
5726: IFFALSE 5736
// sBetray := true ;
5728: LD_ADDR_EXP 59
5732: PUSH
5733: LD_INT 1
5735: ST_TO_ADDR
// if p3 = 110 then
5736: LD_VAR 0 3
5740: PUSH
5741: LD_INT 110
5743: EQUAL
5744: IFFALSE 5754
// sContamin := true ;
5746: LD_ADDR_EXP 60
5750: PUSH
5751: LD_INT 1
5753: ST_TO_ADDR
// if p3 = 111 then
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 111
5761: EQUAL
5762: IFFALSE 5772
// sOil := true ;
5764: LD_ADDR_EXP 62
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// if p3 = 112 then
5772: LD_VAR 0 3
5776: PUSH
5777: LD_INT 112
5779: EQUAL
5780: IFFALSE 5790
// sStu := true ;
5782: LD_ADDR_EXP 66
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// if p3 = 113 then
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 113
5797: EQUAL
5798: IFFALSE 5808
// sBazooka := true ;
5800: LD_ADDR_EXP 69
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// if p3 = 114 then
5808: LD_VAR 0 3
5812: PUSH
5813: LD_INT 114
5815: EQUAL
5816: IFFALSE 5826
// sMortar := true ;
5818: LD_ADDR_EXP 70
5822: PUSH
5823: LD_INT 1
5825: ST_TO_ADDR
// if p3 = 115 then
5826: LD_VAR 0 3
5830: PUSH
5831: LD_INT 115
5833: EQUAL
5834: IFFALSE 5844
// sRanger := true ;
5836: LD_ADDR_EXP 80
5840: PUSH
5841: LD_INT 1
5843: ST_TO_ADDR
// if p3 = 116 then
5844: LD_VAR 0 3
5848: PUSH
5849: LD_INT 116
5851: EQUAL
5852: IFFALSE 5862
// sComputer := true ;
5854: LD_ADDR_EXP 81
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// if p3 = 117 then
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 117
5869: EQUAL
5870: IFFALSE 5880
// s30 := true ;
5872: LD_ADDR_EXP 82
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// if p3 = 118 then
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 118
5887: EQUAL
5888: IFFALSE 5898
// s60 := true ;
5890: LD_ADDR_EXP 83
5894: PUSH
5895: LD_INT 1
5897: ST_TO_ADDR
// end ; if p2 = 101 then
5898: LD_VAR 0 2
5902: PUSH
5903: LD_INT 101
5905: EQUAL
5906: IFFALSE 6034
// begin case p3 of 1 :
5908: LD_VAR 0 3
5912: PUSH
5913: LD_INT 1
5915: DOUBLE
5916: EQUAL
5917: IFTRUE 5921
5919: GO 5928
5921: POP
// hHackUnlimitedResources ; 2 :
5922: CALL 18132 0 0
5926: GO 6034
5928: LD_INT 2
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 5943
5936: POP
// hHackSetLevel10 ; 3 :
5937: CALL 18265 0 0
5941: GO 6034
5943: LD_INT 3
5945: DOUBLE
5946: EQUAL
5947: IFTRUE 5951
5949: GO 5958
5951: POP
// hHackSetLevel10YourUnits ; 4 :
5952: CALL 18350 0 0
5956: GO 6034
5958: LD_INT 4
5960: DOUBLE
5961: EQUAL
5962: IFTRUE 5966
5964: GO 5973
5966: POP
// hHackInvincible ; 5 :
5967: CALL 18798 0 0
5971: GO 6034
5973: LD_INT 5
5975: DOUBLE
5976: EQUAL
5977: IFTRUE 5981
5979: GO 5988
5981: POP
// hHackInvisible ; 6 :
5982: CALL 18909 0 0
5986: GO 6034
5988: LD_INT 6
5990: DOUBLE
5991: EQUAL
5992: IFTRUE 5996
5994: GO 6003
5996: POP
// hHackChangeYourSide ; 7 :
5997: CALL 18966 0 0
6001: GO 6034
6003: LD_INT 7
6005: DOUBLE
6006: EQUAL
6007: IFTRUE 6011
6009: GO 6018
6011: POP
// hHackChangeUnitSide ; 8 :
6012: CALL 19008 0 0
6016: GO 6034
6018: LD_INT 8
6020: DOUBLE
6021: EQUAL
6022: IFTRUE 6026
6024: GO 6033
6026: POP
// hHackFog ; end ;
6027: CALL 19109 0 0
6031: GO 6034
6033: POP
// end ; end ;
6034: LD_VAR 0 7
6038: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6039: GO 6041
6041: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6042: LD_STRING initStreamRollete();
6044: PPUSH
6045: CALL_OW 559
// InitStreamMode ;
6049: CALL 6061 0 0
// DefineStreamItems ( false ) ;
6053: LD_INT 0
6055: PPUSH
6056: CALL 6525 0 1
// end ;
6060: END
// function InitStreamMode ; begin
6061: LD_INT 0
6063: PPUSH
// streamModeActive := false ;
6064: LD_ADDR_EXP 27
6068: PUSH
6069: LD_INT 0
6071: ST_TO_ADDR
// normalCounter := 36 ;
6072: LD_ADDR_EXP 28
6076: PUSH
6077: LD_INT 36
6079: ST_TO_ADDR
// hardcoreCounter := 18 ;
6080: LD_ADDR_EXP 29
6084: PUSH
6085: LD_INT 18
6087: ST_TO_ADDR
// sRocket := false ;
6088: LD_ADDR_EXP 32
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// sSpeed := false ;
6096: LD_ADDR_EXP 31
6100: PUSH
6101: LD_INT 0
6103: ST_TO_ADDR
// sEngine := false ;
6104: LD_ADDR_EXP 33
6108: PUSH
6109: LD_INT 0
6111: ST_TO_ADDR
// sSpec := false ;
6112: LD_ADDR_EXP 30
6116: PUSH
6117: LD_INT 0
6119: ST_TO_ADDR
// sLevel := false ;
6120: LD_ADDR_EXP 34
6124: PUSH
6125: LD_INT 0
6127: ST_TO_ADDR
// sArmoury := false ;
6128: LD_ADDR_EXP 35
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// sRadar := false ;
6136: LD_ADDR_EXP 36
6140: PUSH
6141: LD_INT 0
6143: ST_TO_ADDR
// sBunker := false ;
6144: LD_ADDR_EXP 37
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// sHack := false ;
6152: LD_ADDR_EXP 38
6156: PUSH
6157: LD_INT 0
6159: ST_TO_ADDR
// sFire := false ;
6160: LD_ADDR_EXP 39
6164: PUSH
6165: LD_INT 0
6167: ST_TO_ADDR
// sRefresh := false ;
6168: LD_ADDR_EXP 40
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// sExp := false ;
6176: LD_ADDR_EXP 41
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// sDepot := false ;
6184: LD_ADDR_EXP 42
6188: PUSH
6189: LD_INT 0
6191: ST_TO_ADDR
// sFlag := false ;
6192: LD_ADDR_EXP 43
6196: PUSH
6197: LD_INT 0
6199: ST_TO_ADDR
// sKamikadze := false ;
6200: LD_ADDR_EXP 51
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// sTroll := false ;
6208: LD_ADDR_EXP 52
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// sSlow := false ;
6216: LD_ADDR_EXP 53
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// sLack := false ;
6224: LD_ADDR_EXP 54
6228: PUSH
6229: LD_INT 0
6231: ST_TO_ADDR
// sTank := false ;
6232: LD_ADDR_EXP 56
6236: PUSH
6237: LD_INT 0
6239: ST_TO_ADDR
// sRemote := false ;
6240: LD_ADDR_EXP 57
6244: PUSH
6245: LD_INT 0
6247: ST_TO_ADDR
// sPowell := false ;
6248: LD_ADDR_EXP 58
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// sTeleport := false ;
6256: LD_ADDR_EXP 61
6260: PUSH
6261: LD_INT 0
6263: ST_TO_ADDR
// sOilTower := false ;
6264: LD_ADDR_EXP 63
6268: PUSH
6269: LD_INT 0
6271: ST_TO_ADDR
// sShovel := false ;
6272: LD_ADDR_EXP 64
6276: PUSH
6277: LD_INT 0
6279: ST_TO_ADDR
// sSheik := false ;
6280: LD_ADDR_EXP 65
6284: PUSH
6285: LD_INT 0
6287: ST_TO_ADDR
// sEarthquake := false ;
6288: LD_ADDR_EXP 67
6292: PUSH
6293: LD_INT 0
6295: ST_TO_ADDR
// sAI := false ;
6296: LD_ADDR_EXP 68
6300: PUSH
6301: LD_INT 0
6303: ST_TO_ADDR
// sCargo := false ;
6304: LD_ADDR_EXP 71
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// sDLaser := false ;
6312: LD_ADDR_EXP 72
6316: PUSH
6317: LD_INT 0
6319: ST_TO_ADDR
// sExchange := false ;
6320: LD_ADDR_EXP 73
6324: PUSH
6325: LD_INT 0
6327: ST_TO_ADDR
// sFac := false ;
6328: LD_ADDR_EXP 74
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// sPower := false ;
6336: LD_ADDR_EXP 75
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// sRandom := false ;
6344: LD_ADDR_EXP 76
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// sShield := false ;
6352: LD_ADDR_EXP 77
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// sTime := false ;
6360: LD_ADDR_EXP 78
6364: PUSH
6365: LD_INT 0
6367: ST_TO_ADDR
// sTools := false ;
6368: LD_ADDR_EXP 79
6372: PUSH
6373: LD_INT 0
6375: ST_TO_ADDR
// sSold := false ;
6376: LD_ADDR_EXP 44
6380: PUSH
6381: LD_INT 0
6383: ST_TO_ADDR
// sDiff := false ;
6384: LD_ADDR_EXP 45
6388: PUSH
6389: LD_INT 0
6391: ST_TO_ADDR
// sFog := false ;
6392: LD_ADDR_EXP 48
6396: PUSH
6397: LD_INT 0
6399: ST_TO_ADDR
// sReset := false ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_INT 0
6407: ST_TO_ADDR
// sSun := false ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// sTiger := false ;
6416: LD_ADDR_EXP 46
6420: PUSH
6421: LD_INT 0
6423: ST_TO_ADDR
// sBomb := false ;
6424: LD_ADDR_EXP 47
6428: PUSH
6429: LD_INT 0
6431: ST_TO_ADDR
// sWound := false ;
6432: LD_ADDR_EXP 55
6436: PUSH
6437: LD_INT 0
6439: ST_TO_ADDR
// sBetray := false ;
6440: LD_ADDR_EXP 59
6444: PUSH
6445: LD_INT 0
6447: ST_TO_ADDR
// sContamin := false ;
6448: LD_ADDR_EXP 60
6452: PUSH
6453: LD_INT 0
6455: ST_TO_ADDR
// sOil := false ;
6456: LD_ADDR_EXP 62
6460: PUSH
6461: LD_INT 0
6463: ST_TO_ADDR
// sStu := false ;
6464: LD_ADDR_EXP 66
6468: PUSH
6469: LD_INT 0
6471: ST_TO_ADDR
// sBazooka := false ;
6472: LD_ADDR_EXP 69
6476: PUSH
6477: LD_INT 0
6479: ST_TO_ADDR
// sMortar := false ;
6480: LD_ADDR_EXP 70
6484: PUSH
6485: LD_INT 0
6487: ST_TO_ADDR
// sRanger := false ;
6488: LD_ADDR_EXP 80
6492: PUSH
6493: LD_INT 0
6495: ST_TO_ADDR
// sComputer := false ;
6496: LD_ADDR_EXP 81
6500: PUSH
6501: LD_INT 0
6503: ST_TO_ADDR
// s30 := false ;
6504: LD_ADDR_EXP 82
6508: PUSH
6509: LD_INT 0
6511: ST_TO_ADDR
// s60 := false ;
6512: LD_ADDR_EXP 83
6516: PUSH
6517: LD_INT 0
6519: ST_TO_ADDR
// end ;
6520: LD_VAR 0 1
6524: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6525: LD_INT 0
6527: PPUSH
6528: PPUSH
6529: PPUSH
6530: PPUSH
6531: PPUSH
6532: PPUSH
6533: PPUSH
// result := [ ] ;
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: EMPTY
6540: ST_TO_ADDR
// if campaign_id = 1 then
6541: LD_OWVAR 69
6545: PUSH
6546: LD_INT 1
6548: EQUAL
6549: IFFALSE 9715
// begin case mission_number of 1 :
6551: LD_OWVAR 70
6555: PUSH
6556: LD_INT 1
6558: DOUBLE
6559: EQUAL
6560: IFTRUE 6564
6562: GO 6640
6564: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6565: LD_ADDR_VAR 0 2
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 4
6575: PUSH
6576: LD_INT 11
6578: PUSH
6579: LD_INT 12
6581: PUSH
6582: LD_INT 15
6584: PUSH
6585: LD_INT 16
6587: PUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 23
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 101
6610: PUSH
6611: LD_INT 102
6613: PUSH
6614: LD_INT 106
6616: PUSH
6617: LD_INT 116
6619: PUSH
6620: LD_INT 117
6622: PUSH
6623: LD_INT 118
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: ST_TO_ADDR
6638: GO 9713
6640: LD_INT 2
6642: DOUBLE
6643: EQUAL
6644: IFTRUE 6648
6646: GO 6732
6648: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6649: LD_ADDR_VAR 0 2
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: LD_INT 4
6659: PUSH
6660: LD_INT 11
6662: PUSH
6663: LD_INT 12
6665: PUSH
6666: LD_INT 15
6668: PUSH
6669: LD_INT 16
6671: PUSH
6672: LD_INT 22
6674: PUSH
6675: LD_INT 23
6677: PUSH
6678: LD_INT 26
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 101
6694: PUSH
6695: LD_INT 102
6697: PUSH
6698: LD_INT 105
6700: PUSH
6701: LD_INT 106
6703: PUSH
6704: LD_INT 108
6706: PUSH
6707: LD_INT 116
6709: PUSH
6710: LD_INT 117
6712: PUSH
6713: LD_INT 118
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: ST_TO_ADDR
6730: GO 9713
6732: LD_INT 3
6734: DOUBLE
6735: EQUAL
6736: IFTRUE 6740
6738: GO 6828
6740: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6741: LD_ADDR_VAR 0 2
6745: PUSH
6746: LD_INT 2
6748: PUSH
6749: LD_INT 4
6751: PUSH
6752: LD_INT 5
6754: PUSH
6755: LD_INT 11
6757: PUSH
6758: LD_INT 12
6760: PUSH
6761: LD_INT 15
6763: PUSH
6764: LD_INT 16
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_INT 26
6772: PUSH
6773: LD_INT 36
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 101
6790: PUSH
6791: LD_INT 102
6793: PUSH
6794: LD_INT 105
6796: PUSH
6797: LD_INT 106
6799: PUSH
6800: LD_INT 108
6802: PUSH
6803: LD_INT 116
6805: PUSH
6806: LD_INT 117
6808: PUSH
6809: LD_INT 118
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: ST_TO_ADDR
6826: GO 9713
6828: LD_INT 4
6830: DOUBLE
6831: EQUAL
6832: IFTRUE 6836
6834: GO 6932
6836: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: LD_INT 4
6847: PUSH
6848: LD_INT 5
6850: PUSH
6851: LD_INT 8
6853: PUSH
6854: LD_INT 11
6856: PUSH
6857: LD_INT 12
6859: PUSH
6860: LD_INT 15
6862: PUSH
6863: LD_INT 16
6865: PUSH
6866: LD_INT 22
6868: PUSH
6869: LD_INT 23
6871: PUSH
6872: LD_INT 26
6874: PUSH
6875: LD_INT 36
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 101
6894: PUSH
6895: LD_INT 102
6897: PUSH
6898: LD_INT 105
6900: PUSH
6901: LD_INT 106
6903: PUSH
6904: LD_INT 108
6906: PUSH
6907: LD_INT 116
6909: PUSH
6910: LD_INT 117
6912: PUSH
6913: LD_INT 118
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 9713
6932: LD_INT 5
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 7052
6940: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6941: LD_ADDR_VAR 0 2
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: LD_INT 4
6951: PUSH
6952: LD_INT 5
6954: PUSH
6955: LD_INT 6
6957: PUSH
6958: LD_INT 8
6960: PUSH
6961: LD_INT 11
6963: PUSH
6964: LD_INT 12
6966: PUSH
6967: LD_INT 15
6969: PUSH
6970: LD_INT 16
6972: PUSH
6973: LD_INT 22
6975: PUSH
6976: LD_INT 23
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 26
6984: PUSH
6985: LD_INT 36
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 101
7006: PUSH
7007: LD_INT 102
7009: PUSH
7010: LD_INT 105
7012: PUSH
7013: LD_INT 106
7015: PUSH
7016: LD_INT 108
7018: PUSH
7019: LD_INT 109
7021: PUSH
7022: LD_INT 112
7024: PUSH
7025: LD_INT 116
7027: PUSH
7028: LD_INT 117
7030: PUSH
7031: LD_INT 118
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 9713
7052: LD_INT 6
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7192
7060: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7061: LD_ADDR_VAR 0 2
7065: PUSH
7066: LD_INT 2
7068: PUSH
7069: LD_INT 4
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: LD_INT 6
7077: PUSH
7078: LD_INT 8
7080: PUSH
7081: LD_INT 11
7083: PUSH
7084: LD_INT 12
7086: PUSH
7087: LD_INT 15
7089: PUSH
7090: LD_INT 16
7092: PUSH
7093: LD_INT 20
7095: PUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 22
7101: PUSH
7102: LD_INT 23
7104: PUSH
7105: LD_INT 25
7107: PUSH
7108: LD_INT 26
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 31
7116: PUSH
7117: LD_INT 32
7119: PUSH
7120: LD_INT 36
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 101
7146: PUSH
7147: LD_INT 102
7149: PUSH
7150: LD_INT 105
7152: PUSH
7153: LD_INT 106
7155: PUSH
7156: LD_INT 108
7158: PUSH
7159: LD_INT 109
7161: PUSH
7162: LD_INT 112
7164: PUSH
7165: LD_INT 116
7167: PUSH
7168: LD_INT 117
7170: PUSH
7171: LD_INT 118
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: ST_TO_ADDR
7190: GO 9713
7192: LD_INT 7
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7312
7200: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7201: LD_ADDR_VAR 0 2
7205: PUSH
7206: LD_INT 2
7208: PUSH
7209: LD_INT 4
7211: PUSH
7212: LD_INT 5
7214: PUSH
7215: LD_INT 7
7217: PUSH
7218: LD_INT 11
7220: PUSH
7221: LD_INT 12
7223: PUSH
7224: LD_INT 15
7226: PUSH
7227: LD_INT 16
7229: PUSH
7230: LD_INT 20
7232: PUSH
7233: LD_INT 21
7235: PUSH
7236: LD_INT 22
7238: PUSH
7239: LD_INT 23
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 26
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 101
7266: PUSH
7267: LD_INT 102
7269: PUSH
7270: LD_INT 103
7272: PUSH
7273: LD_INT 105
7275: PUSH
7276: LD_INT 106
7278: PUSH
7279: LD_INT 108
7281: PUSH
7282: LD_INT 112
7284: PUSH
7285: LD_INT 116
7287: PUSH
7288: LD_INT 117
7290: PUSH
7291: LD_INT 118
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: ST_TO_ADDR
7310: GO 9713
7312: LD_INT 8
7314: DOUBLE
7315: EQUAL
7316: IFTRUE 7320
7318: GO 7460
7320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_INT 2
7328: PUSH
7329: LD_INT 4
7331: PUSH
7332: LD_INT 5
7334: PUSH
7335: LD_INT 6
7337: PUSH
7338: LD_INT 7
7340: PUSH
7341: LD_INT 8
7343: PUSH
7344: LD_INT 11
7346: PUSH
7347: LD_INT 12
7349: PUSH
7350: LD_INT 15
7352: PUSH
7353: LD_INT 16
7355: PUSH
7356: LD_INT 20
7358: PUSH
7359: LD_INT 21
7361: PUSH
7362: LD_INT 22
7364: PUSH
7365: LD_INT 23
7367: PUSH
7368: LD_INT 25
7370: PUSH
7371: LD_INT 26
7373: PUSH
7374: LD_INT 30
7376: PUSH
7377: LD_INT 31
7379: PUSH
7380: LD_INT 32
7382: PUSH
7383: LD_INT 36
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 101
7410: PUSH
7411: LD_INT 102
7413: PUSH
7414: LD_INT 103
7416: PUSH
7417: LD_INT 105
7419: PUSH
7420: LD_INT 106
7422: PUSH
7423: LD_INT 108
7425: PUSH
7426: LD_INT 109
7428: PUSH
7429: LD_INT 112
7431: PUSH
7432: LD_INT 116
7434: PUSH
7435: LD_INT 117
7437: PUSH
7438: LD_INT 118
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 9713
7460: LD_INT 9
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7616
7468: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7469: LD_ADDR_VAR 0 2
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 4
7479: PUSH
7480: LD_INT 5
7482: PUSH
7483: LD_INT 6
7485: PUSH
7486: LD_INT 7
7488: PUSH
7489: LD_INT 8
7491: PUSH
7492: LD_INT 11
7494: PUSH
7495: LD_INT 12
7497: PUSH
7498: LD_INT 15
7500: PUSH
7501: LD_INT 16
7503: PUSH
7504: LD_INT 20
7506: PUSH
7507: LD_INT 21
7509: PUSH
7510: LD_INT 22
7512: PUSH
7513: LD_INT 23
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 26
7521: PUSH
7522: LD_INT 28
7524: PUSH
7525: LD_INT 30
7527: PUSH
7528: LD_INT 31
7530: PUSH
7531: LD_INT 32
7533: PUSH
7534: LD_INT 36
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: LD_INT 101
7562: PUSH
7563: LD_INT 102
7565: PUSH
7566: LD_INT 103
7568: PUSH
7569: LD_INT 105
7571: PUSH
7572: LD_INT 106
7574: PUSH
7575: LD_INT 108
7577: PUSH
7578: LD_INT 109
7580: PUSH
7581: LD_INT 112
7583: PUSH
7584: LD_INT 114
7586: PUSH
7587: LD_INT 116
7589: PUSH
7590: LD_INT 117
7592: PUSH
7593: LD_INT 118
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: ST_TO_ADDR
7614: GO 9713
7616: LD_INT 10
7618: DOUBLE
7619: EQUAL
7620: IFTRUE 7624
7622: GO 7820
7624: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7625: LD_ADDR_VAR 0 2
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: LD_INT 4
7635: PUSH
7636: LD_INT 5
7638: PUSH
7639: LD_INT 6
7641: PUSH
7642: LD_INT 7
7644: PUSH
7645: LD_INT 8
7647: PUSH
7648: LD_INT 9
7650: PUSH
7651: LD_INT 10
7653: PUSH
7654: LD_INT 11
7656: PUSH
7657: LD_INT 12
7659: PUSH
7660: LD_INT 13
7662: PUSH
7663: LD_INT 14
7665: PUSH
7666: LD_INT 15
7668: PUSH
7669: LD_INT 16
7671: PUSH
7672: LD_INT 17
7674: PUSH
7675: LD_INT 18
7677: PUSH
7678: LD_INT 19
7680: PUSH
7681: LD_INT 20
7683: PUSH
7684: LD_INT 21
7686: PUSH
7687: LD_INT 22
7689: PUSH
7690: LD_INT 23
7692: PUSH
7693: LD_INT 24
7695: PUSH
7696: LD_INT 25
7698: PUSH
7699: LD_INT 26
7701: PUSH
7702: LD_INT 28
7704: PUSH
7705: LD_INT 30
7707: PUSH
7708: LD_INT 31
7710: PUSH
7711: LD_INT 32
7713: PUSH
7714: LD_INT 36
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 101
7750: PUSH
7751: LD_INT 102
7753: PUSH
7754: LD_INT 103
7756: PUSH
7757: LD_INT 104
7759: PUSH
7760: LD_INT 105
7762: PUSH
7763: LD_INT 106
7765: PUSH
7766: LD_INT 107
7768: PUSH
7769: LD_INT 108
7771: PUSH
7772: LD_INT 109
7774: PUSH
7775: LD_INT 110
7777: PUSH
7778: LD_INT 111
7780: PUSH
7781: LD_INT 112
7783: PUSH
7784: LD_INT 114
7786: PUSH
7787: LD_INT 116
7789: PUSH
7790: LD_INT 117
7792: PUSH
7793: LD_INT 118
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: ST_TO_ADDR
7818: GO 9713
7820: LD_INT 11
7822: DOUBLE
7823: EQUAL
7824: IFTRUE 7828
7826: GO 8032
7828: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7829: LD_ADDR_VAR 0 2
7833: PUSH
7834: LD_INT 2
7836: PUSH
7837: LD_INT 3
7839: PUSH
7840: LD_INT 4
7842: PUSH
7843: LD_INT 5
7845: PUSH
7846: LD_INT 6
7848: PUSH
7849: LD_INT 7
7851: PUSH
7852: LD_INT 8
7854: PUSH
7855: LD_INT 9
7857: PUSH
7858: LD_INT 10
7860: PUSH
7861: LD_INT 11
7863: PUSH
7864: LD_INT 12
7866: PUSH
7867: LD_INT 13
7869: PUSH
7870: LD_INT 14
7872: PUSH
7873: LD_INT 15
7875: PUSH
7876: LD_INT 16
7878: PUSH
7879: LD_INT 17
7881: PUSH
7882: LD_INT 18
7884: PUSH
7885: LD_INT 19
7887: PUSH
7888: LD_INT 20
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_INT 23
7899: PUSH
7900: LD_INT 24
7902: PUSH
7903: LD_INT 25
7905: PUSH
7906: LD_INT 26
7908: PUSH
7909: LD_INT 28
7911: PUSH
7912: LD_INT 30
7914: PUSH
7915: LD_INT 31
7917: PUSH
7918: LD_INT 32
7920: PUSH
7921: LD_INT 34
7923: PUSH
7924: LD_INT 36
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 101
7962: PUSH
7963: LD_INT 102
7965: PUSH
7966: LD_INT 103
7968: PUSH
7969: LD_INT 104
7971: PUSH
7972: LD_INT 105
7974: PUSH
7975: LD_INT 106
7977: PUSH
7978: LD_INT 107
7980: PUSH
7981: LD_INT 108
7983: PUSH
7984: LD_INT 109
7986: PUSH
7987: LD_INT 110
7989: PUSH
7990: LD_INT 111
7992: PUSH
7993: LD_INT 112
7995: PUSH
7996: LD_INT 114
7998: PUSH
7999: LD_INT 116
8001: PUSH
8002: LD_INT 117
8004: PUSH
8005: LD_INT 118
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: ST_TO_ADDR
8030: GO 9713
8032: LD_INT 12
8034: DOUBLE
8035: EQUAL
8036: IFTRUE 8040
8038: GO 8260
8040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8041: LD_ADDR_VAR 0 2
8045: PUSH
8046: LD_INT 1
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: LD_INT 4
8057: PUSH
8058: LD_INT 5
8060: PUSH
8061: LD_INT 6
8063: PUSH
8064: LD_INT 7
8066: PUSH
8067: LD_INT 8
8069: PUSH
8070: LD_INT 9
8072: PUSH
8073: LD_INT 10
8075: PUSH
8076: LD_INT 11
8078: PUSH
8079: LD_INT 12
8081: PUSH
8082: LD_INT 13
8084: PUSH
8085: LD_INT 14
8087: PUSH
8088: LD_INT 15
8090: PUSH
8091: LD_INT 16
8093: PUSH
8094: LD_INT 17
8096: PUSH
8097: LD_INT 18
8099: PUSH
8100: LD_INT 19
8102: PUSH
8103: LD_INT 20
8105: PUSH
8106: LD_INT 21
8108: PUSH
8109: LD_INT 22
8111: PUSH
8112: LD_INT 23
8114: PUSH
8115: LD_INT 24
8117: PUSH
8118: LD_INT 25
8120: PUSH
8121: LD_INT 26
8123: PUSH
8124: LD_INT 27
8126: PUSH
8127: LD_INT 28
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 31
8135: PUSH
8136: LD_INT 32
8138: PUSH
8139: LD_INT 33
8141: PUSH
8142: LD_INT 34
8144: PUSH
8145: LD_INT 36
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 101
8186: PUSH
8187: LD_INT 102
8189: PUSH
8190: LD_INT 103
8192: PUSH
8193: LD_INT 104
8195: PUSH
8196: LD_INT 105
8198: PUSH
8199: LD_INT 106
8201: PUSH
8202: LD_INT 107
8204: PUSH
8205: LD_INT 108
8207: PUSH
8208: LD_INT 109
8210: PUSH
8211: LD_INT 110
8213: PUSH
8214: LD_INT 111
8216: PUSH
8217: LD_INT 112
8219: PUSH
8220: LD_INT 113
8222: PUSH
8223: LD_INT 114
8225: PUSH
8226: LD_INT 116
8228: PUSH
8229: LD_INT 117
8231: PUSH
8232: LD_INT 118
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: ST_TO_ADDR
8258: GO 9713
8260: LD_INT 13
8262: DOUBLE
8263: EQUAL
8264: IFTRUE 8268
8266: GO 8476
8268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8269: LD_ADDR_VAR 0 2
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: LD_INT 2
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: LD_INT 4
8285: PUSH
8286: LD_INT 5
8288: PUSH
8289: LD_INT 8
8291: PUSH
8292: LD_INT 9
8294: PUSH
8295: LD_INT 10
8297: PUSH
8298: LD_INT 11
8300: PUSH
8301: LD_INT 12
8303: PUSH
8304: LD_INT 14
8306: PUSH
8307: LD_INT 15
8309: PUSH
8310: LD_INT 16
8312: PUSH
8313: LD_INT 17
8315: PUSH
8316: LD_INT 18
8318: PUSH
8319: LD_INT 19
8321: PUSH
8322: LD_INT 20
8324: PUSH
8325: LD_INT 21
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 23
8333: PUSH
8334: LD_INT 24
8336: PUSH
8337: LD_INT 25
8339: PUSH
8340: LD_INT 26
8342: PUSH
8343: LD_INT 27
8345: PUSH
8346: LD_INT 28
8348: PUSH
8349: LD_INT 30
8351: PUSH
8352: LD_INT 31
8354: PUSH
8355: LD_INT 32
8357: PUSH
8358: LD_INT 33
8360: PUSH
8361: LD_INT 34
8363: PUSH
8364: LD_INT 36
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 101
8402: PUSH
8403: LD_INT 102
8405: PUSH
8406: LD_INT 103
8408: PUSH
8409: LD_INT 104
8411: PUSH
8412: LD_INT 105
8414: PUSH
8415: LD_INT 106
8417: PUSH
8418: LD_INT 107
8420: PUSH
8421: LD_INT 108
8423: PUSH
8424: LD_INT 109
8426: PUSH
8427: LD_INT 110
8429: PUSH
8430: LD_INT 111
8432: PUSH
8433: LD_INT 112
8435: PUSH
8436: LD_INT 113
8438: PUSH
8439: LD_INT 114
8441: PUSH
8442: LD_INT 116
8444: PUSH
8445: LD_INT 117
8447: PUSH
8448: LD_INT 118
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: ST_TO_ADDR
8474: GO 9713
8476: LD_INT 14
8478: DOUBLE
8479: EQUAL
8480: IFTRUE 8484
8482: GO 8708
8484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8485: LD_ADDR_VAR 0 2
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: LD_INT 2
8495: PUSH
8496: LD_INT 3
8498: PUSH
8499: LD_INT 4
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: LD_INT 6
8507: PUSH
8508: LD_INT 7
8510: PUSH
8511: LD_INT 8
8513: PUSH
8514: LD_INT 9
8516: PUSH
8517: LD_INT 10
8519: PUSH
8520: LD_INT 11
8522: PUSH
8523: LD_INT 12
8525: PUSH
8526: LD_INT 13
8528: PUSH
8529: LD_INT 14
8531: PUSH
8532: LD_INT 15
8534: PUSH
8535: LD_INT 16
8537: PUSH
8538: LD_INT 17
8540: PUSH
8541: LD_INT 18
8543: PUSH
8544: LD_INT 19
8546: PUSH
8547: LD_INT 20
8549: PUSH
8550: LD_INT 21
8552: PUSH
8553: LD_INT 22
8555: PUSH
8556: LD_INT 23
8558: PUSH
8559: LD_INT 24
8561: PUSH
8562: LD_INT 25
8564: PUSH
8565: LD_INT 26
8567: PUSH
8568: LD_INT 27
8570: PUSH
8571: LD_INT 28
8573: PUSH
8574: LD_INT 29
8576: PUSH
8577: LD_INT 30
8579: PUSH
8580: LD_INT 31
8582: PUSH
8583: LD_INT 32
8585: PUSH
8586: LD_INT 33
8588: PUSH
8589: LD_INT 34
8591: PUSH
8592: LD_INT 36
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 101
8634: PUSH
8635: LD_INT 102
8637: PUSH
8638: LD_INT 103
8640: PUSH
8641: LD_INT 104
8643: PUSH
8644: LD_INT 105
8646: PUSH
8647: LD_INT 106
8649: PUSH
8650: LD_INT 107
8652: PUSH
8653: LD_INT 108
8655: PUSH
8656: LD_INT 109
8658: PUSH
8659: LD_INT 110
8661: PUSH
8662: LD_INT 111
8664: PUSH
8665: LD_INT 112
8667: PUSH
8668: LD_INT 113
8670: PUSH
8671: LD_INT 114
8673: PUSH
8674: LD_INT 116
8676: PUSH
8677: LD_INT 117
8679: PUSH
8680: LD_INT 118
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: ST_TO_ADDR
8706: GO 9713
8708: LD_INT 15
8710: DOUBLE
8711: EQUAL
8712: IFTRUE 8716
8714: GO 8940
8716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8717: LD_ADDR_VAR 0 2
8721: PUSH
8722: LD_INT 1
8724: PUSH
8725: LD_INT 2
8727: PUSH
8728: LD_INT 3
8730: PUSH
8731: LD_INT 4
8733: PUSH
8734: LD_INT 5
8736: PUSH
8737: LD_INT 6
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 8
8745: PUSH
8746: LD_INT 9
8748: PUSH
8749: LD_INT 10
8751: PUSH
8752: LD_INT 11
8754: PUSH
8755: LD_INT 12
8757: PUSH
8758: LD_INT 13
8760: PUSH
8761: LD_INT 14
8763: PUSH
8764: LD_INT 15
8766: PUSH
8767: LD_INT 16
8769: PUSH
8770: LD_INT 17
8772: PUSH
8773: LD_INT 18
8775: PUSH
8776: LD_INT 19
8778: PUSH
8779: LD_INT 20
8781: PUSH
8782: LD_INT 21
8784: PUSH
8785: LD_INT 22
8787: PUSH
8788: LD_INT 23
8790: PUSH
8791: LD_INT 24
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 26
8799: PUSH
8800: LD_INT 27
8802: PUSH
8803: LD_INT 28
8805: PUSH
8806: LD_INT 29
8808: PUSH
8809: LD_INT 30
8811: PUSH
8812: LD_INT 31
8814: PUSH
8815: LD_INT 32
8817: PUSH
8818: LD_INT 33
8820: PUSH
8821: LD_INT 34
8823: PUSH
8824: LD_INT 36
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 101
8866: PUSH
8867: LD_INT 102
8869: PUSH
8870: LD_INT 103
8872: PUSH
8873: LD_INT 104
8875: PUSH
8876: LD_INT 105
8878: PUSH
8879: LD_INT 106
8881: PUSH
8882: LD_INT 107
8884: PUSH
8885: LD_INT 108
8887: PUSH
8888: LD_INT 109
8890: PUSH
8891: LD_INT 110
8893: PUSH
8894: LD_INT 111
8896: PUSH
8897: LD_INT 112
8899: PUSH
8900: LD_INT 113
8902: PUSH
8903: LD_INT 114
8905: PUSH
8906: LD_INT 116
8908: PUSH
8909: LD_INT 117
8911: PUSH
8912: LD_INT 118
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: ST_TO_ADDR
8938: GO 9713
8940: LD_INT 16
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 9084
8948: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 4
8959: PUSH
8960: LD_INT 5
8962: PUSH
8963: LD_INT 7
8965: PUSH
8966: LD_INT 11
8968: PUSH
8969: LD_INT 12
8971: PUSH
8972: LD_INT 15
8974: PUSH
8975: LD_INT 16
8977: PUSH
8978: LD_INT 20
8980: PUSH
8981: LD_INT 21
8983: PUSH
8984: LD_INT 22
8986: PUSH
8987: LD_INT 23
8989: PUSH
8990: LD_INT 25
8992: PUSH
8993: LD_INT 26
8995: PUSH
8996: LD_INT 30
8998: PUSH
8999: LD_INT 31
9001: PUSH
9002: LD_INT 32
9004: PUSH
9005: LD_INT 33
9007: PUSH
9008: LD_INT 34
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 101
9034: PUSH
9035: LD_INT 102
9037: PUSH
9038: LD_INT 103
9040: PUSH
9041: LD_INT 106
9043: PUSH
9044: LD_INT 108
9046: PUSH
9047: LD_INT 112
9049: PUSH
9050: LD_INT 113
9052: PUSH
9053: LD_INT 114
9055: PUSH
9056: LD_INT 116
9058: PUSH
9059: LD_INT 117
9061: PUSH
9062: LD_INT 118
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: ST_TO_ADDR
9082: GO 9713
9084: LD_INT 17
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9316
9092: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 1
9100: PUSH
9101: LD_INT 2
9103: PUSH
9104: LD_INT 3
9106: PUSH
9107: LD_INT 4
9109: PUSH
9110: LD_INT 5
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: LD_INT 7
9118: PUSH
9119: LD_INT 8
9121: PUSH
9122: LD_INT 9
9124: PUSH
9125: LD_INT 10
9127: PUSH
9128: LD_INT 11
9130: PUSH
9131: LD_INT 12
9133: PUSH
9134: LD_INT 13
9136: PUSH
9137: LD_INT 14
9139: PUSH
9140: LD_INT 15
9142: PUSH
9143: LD_INT 16
9145: PUSH
9146: LD_INT 17
9148: PUSH
9149: LD_INT 18
9151: PUSH
9152: LD_INT 19
9154: PUSH
9155: LD_INT 20
9157: PUSH
9158: LD_INT 21
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: LD_INT 23
9166: PUSH
9167: LD_INT 24
9169: PUSH
9170: LD_INT 25
9172: PUSH
9173: LD_INT 26
9175: PUSH
9176: LD_INT 27
9178: PUSH
9179: LD_INT 28
9181: PUSH
9182: LD_INT 29
9184: PUSH
9185: LD_INT 30
9187: PUSH
9188: LD_INT 31
9190: PUSH
9191: LD_INT 32
9193: PUSH
9194: LD_INT 33
9196: PUSH
9197: LD_INT 34
9199: PUSH
9200: LD_INT 36
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 101
9242: PUSH
9243: LD_INT 102
9245: PUSH
9246: LD_INT 103
9248: PUSH
9249: LD_INT 104
9251: PUSH
9252: LD_INT 105
9254: PUSH
9255: LD_INT 106
9257: PUSH
9258: LD_INT 107
9260: PUSH
9261: LD_INT 108
9263: PUSH
9264: LD_INT 109
9266: PUSH
9267: LD_INT 110
9269: PUSH
9270: LD_INT 111
9272: PUSH
9273: LD_INT 112
9275: PUSH
9276: LD_INT 113
9278: PUSH
9279: LD_INT 114
9281: PUSH
9282: LD_INT 116
9284: PUSH
9285: LD_INT 117
9287: PUSH
9288: LD_INT 118
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: ST_TO_ADDR
9314: GO 9713
9316: LD_INT 18
9318: DOUBLE
9319: EQUAL
9320: IFTRUE 9324
9322: GO 9472
9324: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9325: LD_ADDR_VAR 0 2
9329: PUSH
9330: LD_INT 2
9332: PUSH
9333: LD_INT 4
9335: PUSH
9336: LD_INT 5
9338: PUSH
9339: LD_INT 7
9341: PUSH
9342: LD_INT 11
9344: PUSH
9345: LD_INT 12
9347: PUSH
9348: LD_INT 15
9350: PUSH
9351: LD_INT 16
9353: PUSH
9354: LD_INT 20
9356: PUSH
9357: LD_INT 21
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 23
9365: PUSH
9366: LD_INT 25
9368: PUSH
9369: LD_INT 26
9371: PUSH
9372: LD_INT 30
9374: PUSH
9375: LD_INT 31
9377: PUSH
9378: LD_INT 32
9380: PUSH
9381: LD_INT 33
9383: PUSH
9384: LD_INT 34
9386: PUSH
9387: LD_INT 35
9389: PUSH
9390: LD_INT 36
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 101
9418: PUSH
9419: LD_INT 102
9421: PUSH
9422: LD_INT 103
9424: PUSH
9425: LD_INT 106
9427: PUSH
9428: LD_INT 108
9430: PUSH
9431: LD_INT 112
9433: PUSH
9434: LD_INT 113
9436: PUSH
9437: LD_INT 114
9439: PUSH
9440: LD_INT 115
9442: PUSH
9443: LD_INT 116
9445: PUSH
9446: LD_INT 117
9448: PUSH
9449: LD_INT 118
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: ST_TO_ADDR
9470: GO 9713
9472: LD_INT 19
9474: DOUBLE
9475: EQUAL
9476: IFTRUE 9480
9478: GO 9712
9480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9481: LD_ADDR_VAR 0 2
9485: PUSH
9486: LD_INT 1
9488: PUSH
9489: LD_INT 2
9491: PUSH
9492: LD_INT 3
9494: PUSH
9495: LD_INT 4
9497: PUSH
9498: LD_INT 5
9500: PUSH
9501: LD_INT 6
9503: PUSH
9504: LD_INT 7
9506: PUSH
9507: LD_INT 8
9509: PUSH
9510: LD_INT 9
9512: PUSH
9513: LD_INT 10
9515: PUSH
9516: LD_INT 11
9518: PUSH
9519: LD_INT 12
9521: PUSH
9522: LD_INT 13
9524: PUSH
9525: LD_INT 14
9527: PUSH
9528: LD_INT 15
9530: PUSH
9531: LD_INT 16
9533: PUSH
9534: LD_INT 17
9536: PUSH
9537: LD_INT 18
9539: PUSH
9540: LD_INT 19
9542: PUSH
9543: LD_INT 20
9545: PUSH
9546: LD_INT 21
9548: PUSH
9549: LD_INT 22
9551: PUSH
9552: LD_INT 23
9554: PUSH
9555: LD_INT 24
9557: PUSH
9558: LD_INT 25
9560: PUSH
9561: LD_INT 26
9563: PUSH
9564: LD_INT 27
9566: PUSH
9567: LD_INT 28
9569: PUSH
9570: LD_INT 29
9572: PUSH
9573: LD_INT 30
9575: PUSH
9576: LD_INT 31
9578: PUSH
9579: LD_INT 32
9581: PUSH
9582: LD_INT 33
9584: PUSH
9585: LD_INT 34
9587: PUSH
9588: LD_INT 35
9590: PUSH
9591: LD_INT 36
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 101
9634: PUSH
9635: LD_INT 102
9637: PUSH
9638: LD_INT 103
9640: PUSH
9641: LD_INT 104
9643: PUSH
9644: LD_INT 105
9646: PUSH
9647: LD_INT 106
9649: PUSH
9650: LD_INT 107
9652: PUSH
9653: LD_INT 108
9655: PUSH
9656: LD_INT 109
9658: PUSH
9659: LD_INT 110
9661: PUSH
9662: LD_INT 111
9664: PUSH
9665: LD_INT 112
9667: PUSH
9668: LD_INT 113
9670: PUSH
9671: LD_INT 114
9673: PUSH
9674: LD_INT 115
9676: PUSH
9677: LD_INT 116
9679: PUSH
9680: LD_INT 117
9682: PUSH
9683: LD_INT 118
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: ST_TO_ADDR
9710: GO 9713
9712: POP
// end else
9713: GO 9944
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9715: LD_ADDR_VAR 0 2
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: LD_INT 2
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: LD_INT 4
9731: PUSH
9732: LD_INT 5
9734: PUSH
9735: LD_INT 6
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: LD_INT 8
9743: PUSH
9744: LD_INT 9
9746: PUSH
9747: LD_INT 10
9749: PUSH
9750: LD_INT 11
9752: PUSH
9753: LD_INT 12
9755: PUSH
9756: LD_INT 13
9758: PUSH
9759: LD_INT 14
9761: PUSH
9762: LD_INT 15
9764: PUSH
9765: LD_INT 16
9767: PUSH
9768: LD_INT 17
9770: PUSH
9771: LD_INT 18
9773: PUSH
9774: LD_INT 19
9776: PUSH
9777: LD_INT 20
9779: PUSH
9780: LD_INT 21
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 23
9788: PUSH
9789: LD_INT 24
9791: PUSH
9792: LD_INT 25
9794: PUSH
9795: LD_INT 26
9797: PUSH
9798: LD_INT 27
9800: PUSH
9801: LD_INT 28
9803: PUSH
9804: LD_INT 29
9806: PUSH
9807: LD_INT 30
9809: PUSH
9810: LD_INT 31
9812: PUSH
9813: LD_INT 32
9815: PUSH
9816: LD_INT 33
9818: PUSH
9819: LD_INT 34
9821: PUSH
9822: LD_INT 35
9824: PUSH
9825: LD_INT 36
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 101
9868: PUSH
9869: LD_INT 102
9871: PUSH
9872: LD_INT 103
9874: PUSH
9875: LD_INT 104
9877: PUSH
9878: LD_INT 105
9880: PUSH
9881: LD_INT 106
9883: PUSH
9884: LD_INT 107
9886: PUSH
9887: LD_INT 108
9889: PUSH
9890: LD_INT 109
9892: PUSH
9893: LD_INT 110
9895: PUSH
9896: LD_INT 111
9898: PUSH
9899: LD_INT 112
9901: PUSH
9902: LD_INT 113
9904: PUSH
9905: LD_INT 114
9907: PUSH
9908: LD_INT 115
9910: PUSH
9911: LD_INT 116
9913: PUSH
9914: LD_INT 117
9916: PUSH
9917: LD_INT 118
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: ST_TO_ADDR
// if result then
9944: LD_VAR 0 2
9948: IFFALSE 10734
// begin normal :=  ;
9950: LD_ADDR_VAR 0 5
9954: PUSH
9955: LD_STRING 
9957: ST_TO_ADDR
// hardcore :=  ;
9958: LD_ADDR_VAR 0 6
9962: PUSH
9963: LD_STRING 
9965: ST_TO_ADDR
// active :=  ;
9966: LD_ADDR_VAR 0 7
9970: PUSH
9971: LD_STRING 
9973: ST_TO_ADDR
// for i = 1 to normalCounter do
9974: LD_ADDR_VAR 0 8
9978: PUSH
9979: DOUBLE
9980: LD_INT 1
9982: DEC
9983: ST_TO_ADDR
9984: LD_EXP 28
9988: PUSH
9989: FOR_TO
9990: IFFALSE 10091
// begin tmp := 0 ;
9992: LD_ADDR_VAR 0 3
9996: PUSH
9997: LD_STRING 0
9999: ST_TO_ADDR
// if result [ 1 ] then
10000: LD_VAR 0 2
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: IFFALSE 10073
// if result [ 1 ] [ 1 ] = i then
10010: LD_VAR 0 2
10014: PUSH
10015: LD_INT 1
10017: ARRAY
10018: PUSH
10019: LD_INT 1
10021: ARRAY
10022: PUSH
10023: LD_VAR 0 8
10027: EQUAL
10028: IFFALSE 10073
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_VAR 0 2
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: LD_VAR 0 2
10047: PUSH
10048: LD_INT 1
10050: ARRAY
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 3
10059: PPUSH
10060: CALL_OW 1
10064: ST_TO_ADDR
// tmp := 1 ;
10065: LD_ADDR_VAR 0 3
10069: PUSH
10070: LD_STRING 1
10072: ST_TO_ADDR
// end ; normal := normal & tmp ;
10073: LD_ADDR_VAR 0 5
10077: PUSH
10078: LD_VAR 0 5
10082: PUSH
10083: LD_VAR 0 3
10087: STR
10088: ST_TO_ADDR
// end ;
10089: GO 9989
10091: POP
10092: POP
// for i = 1 to hardcoreCounter do
10093: LD_ADDR_VAR 0 8
10097: PUSH
10098: DOUBLE
10099: LD_INT 1
10101: DEC
10102: ST_TO_ADDR
10103: LD_EXP 29
10107: PUSH
10108: FOR_TO
10109: IFFALSE 10214
// begin tmp := 0 ;
10111: LD_ADDR_VAR 0 3
10115: PUSH
10116: LD_STRING 0
10118: ST_TO_ADDR
// if result [ 2 ] then
10119: LD_VAR 0 2
10123: PUSH
10124: LD_INT 2
10126: ARRAY
10127: IFFALSE 10196
// if result [ 2 ] [ 1 ] = 100 + i then
10129: LD_VAR 0 2
10133: PUSH
10134: LD_INT 2
10136: ARRAY
10137: PUSH
10138: LD_INT 1
10140: ARRAY
10141: PUSH
10142: LD_INT 100
10144: PUSH
10145: LD_VAR 0 8
10149: PLUS
10150: EQUAL
10151: IFFALSE 10196
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10153: LD_ADDR_VAR 0 2
10157: PUSH
10158: LD_VAR 0 2
10162: PPUSH
10163: LD_INT 2
10165: PPUSH
10166: LD_VAR 0 2
10170: PUSH
10171: LD_INT 2
10173: ARRAY
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 3
10182: PPUSH
10183: CALL_OW 1
10187: ST_TO_ADDR
// tmp := 1 ;
10188: LD_ADDR_VAR 0 3
10192: PUSH
10193: LD_STRING 1
10195: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10196: LD_ADDR_VAR 0 6
10200: PUSH
10201: LD_VAR 0 6
10205: PUSH
10206: LD_VAR 0 3
10210: STR
10211: ST_TO_ADDR
// end ;
10212: GO 10108
10214: POP
10215: POP
// if isGameLoad then
10216: LD_VAR 0 1
10220: IFFALSE 10695
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10222: LD_ADDR_VAR 0 4
10226: PUSH
10227: LD_EXP 32
10231: PUSH
10232: LD_EXP 31
10236: PUSH
10237: LD_EXP 33
10241: PUSH
10242: LD_EXP 30
10246: PUSH
10247: LD_EXP 34
10251: PUSH
10252: LD_EXP 35
10256: PUSH
10257: LD_EXP 36
10261: PUSH
10262: LD_EXP 37
10266: PUSH
10267: LD_EXP 38
10271: PUSH
10272: LD_EXP 39
10276: PUSH
10277: LD_EXP 40
10281: PUSH
10282: LD_EXP 41
10286: PUSH
10287: LD_EXP 42
10291: PUSH
10292: LD_EXP 43
10296: PUSH
10297: LD_EXP 51
10301: PUSH
10302: LD_EXP 52
10306: PUSH
10307: LD_EXP 53
10311: PUSH
10312: LD_EXP 54
10316: PUSH
10317: LD_EXP 56
10321: PUSH
10322: LD_EXP 57
10326: PUSH
10327: LD_EXP 58
10331: PUSH
10332: LD_EXP 61
10336: PUSH
10337: LD_EXP 63
10341: PUSH
10342: LD_EXP 64
10346: PUSH
10347: LD_EXP 65
10351: PUSH
10352: LD_EXP 67
10356: PUSH
10357: LD_EXP 68
10361: PUSH
10362: LD_EXP 71
10366: PUSH
10367: LD_EXP 72
10371: PUSH
10372: LD_EXP 73
10376: PUSH
10377: LD_EXP 74
10381: PUSH
10382: LD_EXP 75
10386: PUSH
10387: LD_EXP 76
10391: PUSH
10392: LD_EXP 77
10396: PUSH
10397: LD_EXP 78
10401: PUSH
10402: LD_EXP 79
10406: PUSH
10407: LD_EXP 44
10411: PUSH
10412: LD_EXP 45
10416: PUSH
10417: LD_EXP 48
10421: PUSH
10422: LD_EXP 49
10426: PUSH
10427: LD_EXP 50
10431: PUSH
10432: LD_EXP 46
10436: PUSH
10437: LD_EXP 47
10441: PUSH
10442: LD_EXP 55
10446: PUSH
10447: LD_EXP 59
10451: PUSH
10452: LD_EXP 60
10456: PUSH
10457: LD_EXP 62
10461: PUSH
10462: LD_EXP 66
10466: PUSH
10467: LD_EXP 69
10471: PUSH
10472: LD_EXP 70
10476: PUSH
10477: LD_EXP 80
10481: PUSH
10482: LD_EXP 81
10486: PUSH
10487: LD_EXP 82
10491: PUSH
10492: LD_EXP 83
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: ST_TO_ADDR
// tmp :=  ;
10553: LD_ADDR_VAR 0 3
10557: PUSH
10558: LD_STRING 
10560: ST_TO_ADDR
// for i = 1 to normalCounter do
10561: LD_ADDR_VAR 0 8
10565: PUSH
10566: DOUBLE
10567: LD_INT 1
10569: DEC
10570: ST_TO_ADDR
10571: LD_EXP 28
10575: PUSH
10576: FOR_TO
10577: IFFALSE 10613
// begin if flags [ i ] then
10579: LD_VAR 0 4
10583: PUSH
10584: LD_VAR 0 8
10588: ARRAY
10589: IFFALSE 10611
// tmp := tmp & i & ; ;
10591: LD_ADDR_VAR 0 3
10595: PUSH
10596: LD_VAR 0 3
10600: PUSH
10601: LD_VAR 0 8
10605: STR
10606: PUSH
10607: LD_STRING ;
10609: STR
10610: ST_TO_ADDR
// end ;
10611: GO 10576
10613: POP
10614: POP
// for i = 1 to hardcoreCounter do
10615: LD_ADDR_VAR 0 8
10619: PUSH
10620: DOUBLE
10621: LD_INT 1
10623: DEC
10624: ST_TO_ADDR
10625: LD_EXP 29
10629: PUSH
10630: FOR_TO
10631: IFFALSE 10677
// begin if flags [ normalCounter + i ] then
10633: LD_VAR 0 4
10637: PUSH
10638: LD_EXP 28
10642: PUSH
10643: LD_VAR 0 8
10647: PLUS
10648: ARRAY
10649: IFFALSE 10675
// tmp := tmp & ( 100 + i ) & ; ;
10651: LD_ADDR_VAR 0 3
10655: PUSH
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 100
10663: PUSH
10664: LD_VAR 0 8
10668: PLUS
10669: STR
10670: PUSH
10671: LD_STRING ;
10673: STR
10674: ST_TO_ADDR
// end ;
10675: GO 10630
10677: POP
10678: POP
// if tmp then
10679: LD_VAR 0 3
10683: IFFALSE 10695
// active := tmp ;
10685: LD_ADDR_VAR 0 7
10689: PUSH
10690: LD_VAR 0 3
10694: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10695: LD_STRING getStreamItemsFromMission("
10697: PUSH
10698: LD_VAR 0 5
10702: STR
10703: PUSH
10704: LD_STRING ","
10706: STR
10707: PUSH
10708: LD_VAR 0 6
10712: STR
10713: PUSH
10714: LD_STRING ","
10716: STR
10717: PUSH
10718: LD_VAR 0 7
10722: STR
10723: PUSH
10724: LD_STRING ")
10726: STR
10727: PPUSH
10728: CALL_OW 559
// end else
10732: GO 10741
// ToLua ( getStreamItemsFromMission("","","") ) ;
10734: LD_STRING getStreamItemsFromMission("","","")
10736: PPUSH
10737: CALL_OW 559
// end ;
10741: LD_VAR 0 2
10745: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10746: LD_EXP 27
10750: PUSH
10751: LD_EXP 32
10755: AND
10756: IFFALSE 10880
10758: GO 10760
10760: DISABLE
10761: LD_INT 0
10763: PPUSH
10764: PPUSH
// begin enable ;
10765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 22
10773: PUSH
10774: LD_OWVAR 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 34
10788: PUSH
10789: LD_INT 7
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 34
10798: PUSH
10799: LD_INT 45
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 34
10808: PUSH
10809: LD_INT 28
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 34
10818: PUSH
10819: LD_INT 47
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL_OW 69
10841: ST_TO_ADDR
// if not tmp then
10842: LD_VAR 0 2
10846: NOT
10847: IFFALSE 10851
// exit ;
10849: GO 10880
// for i in tmp do
10851: LD_ADDR_VAR 0 1
10855: PUSH
10856: LD_VAR 0 2
10860: PUSH
10861: FOR_IN
10862: IFFALSE 10878
// begin SetLives ( i , 0 ) ;
10864: LD_VAR 0 1
10868: PPUSH
10869: LD_INT 0
10871: PPUSH
10872: CALL_OW 234
// end ;
10876: GO 10861
10878: POP
10879: POP
// end ;
10880: PPOPN 2
10882: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10883: LD_EXP 27
10887: PUSH
10888: LD_EXP 33
10892: AND
10893: IFFALSE 10977
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
10901: PPUSH
// begin enable ;
10902: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10903: LD_ADDR_VAR 0 2
10907: PUSH
10908: LD_INT 22
10910: PUSH
10911: LD_OWVAR 2
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 32
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 69
10938: ST_TO_ADDR
// if not tmp then
10939: LD_VAR 0 2
10943: NOT
10944: IFFALSE 10948
// exit ;
10946: GO 10977
// for i in tmp do
10948: LD_ADDR_VAR 0 1
10952: PUSH
10953: LD_VAR 0 2
10957: PUSH
10958: FOR_IN
10959: IFFALSE 10975
// begin SetLives ( i , 0 ) ;
10961: LD_VAR 0 1
10965: PPUSH
10966: LD_INT 0
10968: PPUSH
10969: CALL_OW 234
// end ;
10973: GO 10958
10975: POP
10976: POP
// end ;
10977: PPOPN 2
10979: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10980: LD_EXP 27
10984: PUSH
10985: LD_EXP 30
10989: AND
10990: IFFALSE 11083
10992: GO 10994
10994: DISABLE
10995: LD_INT 0
10997: PPUSH
// begin enable ;
10998: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10999: LD_ADDR_VAR 0 1
11003: PUSH
11004: LD_INT 22
11006: PUSH
11007: LD_OWVAR 2
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_INT 25
11021: PUSH
11022: LD_INT 5
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 25
11031: PUSH
11032: LD_INT 9
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 25
11041: PUSH
11042: LD_INT 8
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PPUSH
11059: CALL_OW 69
11063: PUSH
11064: FOR_IN
11065: IFFALSE 11081
// begin SetClass ( i , 1 ) ;
11067: LD_VAR 0 1
11071: PPUSH
11072: LD_INT 1
11074: PPUSH
11075: CALL_OW 336
// end ;
11079: GO 11064
11081: POP
11082: POP
// end ;
11083: PPOPN 1
11085: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11086: LD_EXP 27
11090: PUSH
11091: LD_EXP 31
11095: AND
11096: PUSH
11097: LD_OWVAR 65
11101: PUSH
11102: LD_INT 7
11104: LESS
11105: AND
11106: IFFALSE 11120
11108: GO 11110
11110: DISABLE
// begin enable ;
11111: ENABLE
// game_speed := 7 ;
11112: LD_ADDR_OWVAR 65
11116: PUSH
11117: LD_INT 7
11119: ST_TO_ADDR
// end ;
11120: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11121: LD_EXP 27
11125: PUSH
11126: LD_EXP 34
11130: AND
11131: IFFALSE 11333
11133: GO 11135
11135: DISABLE
11136: LD_INT 0
11138: PPUSH
11139: PPUSH
11140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11141: LD_ADDR_VAR 0 3
11145: PUSH
11146: LD_INT 81
11148: PUSH
11149: LD_OWVAR 2
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 21
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 69
11176: ST_TO_ADDR
// if not tmp then
11177: LD_VAR 0 3
11181: NOT
11182: IFFALSE 11186
// exit ;
11184: GO 11333
// if tmp > 5 then
11186: LD_VAR 0 3
11190: PUSH
11191: LD_INT 5
11193: GREATER
11194: IFFALSE 11206
// k := 5 else
11196: LD_ADDR_VAR 0 2
11200: PUSH
11201: LD_INT 5
11203: ST_TO_ADDR
11204: GO 11216
// k := tmp ;
11206: LD_ADDR_VAR 0 2
11210: PUSH
11211: LD_VAR 0 3
11215: ST_TO_ADDR
// for i := 1 to k do
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: DOUBLE
11222: LD_INT 1
11224: DEC
11225: ST_TO_ADDR
11226: LD_VAR 0 2
11230: PUSH
11231: FOR_TO
11232: IFFALSE 11331
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11234: LD_VAR 0 3
11238: PUSH
11239: LD_VAR 0 1
11243: ARRAY
11244: PPUSH
11245: LD_VAR 0 1
11249: PUSH
11250: LD_INT 4
11252: MOD
11253: PUSH
11254: LD_INT 1
11256: PLUS
11257: PPUSH
11258: CALL_OW 259
11262: PUSH
11263: LD_INT 10
11265: LESS
11266: IFFALSE 11329
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11268: LD_VAR 0 3
11272: PUSH
11273: LD_VAR 0 1
11277: ARRAY
11278: PPUSH
11279: LD_VAR 0 1
11283: PUSH
11284: LD_INT 4
11286: MOD
11287: PUSH
11288: LD_INT 1
11290: PLUS
11291: PPUSH
11292: LD_VAR 0 3
11296: PUSH
11297: LD_VAR 0 1
11301: ARRAY
11302: PPUSH
11303: LD_VAR 0 1
11307: PUSH
11308: LD_INT 4
11310: MOD
11311: PUSH
11312: LD_INT 1
11314: PLUS
11315: PPUSH
11316: CALL_OW 259
11320: PUSH
11321: LD_INT 1
11323: PLUS
11324: PPUSH
11325: CALL_OW 237
11329: GO 11231
11331: POP
11332: POP
// end ;
11333: PPOPN 3
11335: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11336: LD_EXP 27
11340: PUSH
11341: LD_EXP 35
11345: AND
11346: IFFALSE 11366
11348: GO 11350
11350: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11351: LD_INT 4
11353: PPUSH
11354: LD_OWVAR 2
11358: PPUSH
11359: LD_INT 0
11361: PPUSH
11362: CALL_OW 324
11366: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11367: LD_EXP 27
11371: PUSH
11372: LD_EXP 64
11376: AND
11377: IFFALSE 11397
11379: GO 11381
11381: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11382: LD_INT 19
11384: PPUSH
11385: LD_OWVAR 2
11389: PPUSH
11390: LD_INT 0
11392: PPUSH
11393: CALL_OW 324
11397: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11398: LD_EXP 27
11402: PUSH
11403: LD_EXP 36
11407: AND
11408: IFFALSE 11510
11410: GO 11412
11412: DISABLE
11413: LD_INT 0
11415: PPUSH
11416: PPUSH
// begin enable ;
11417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11418: LD_ADDR_VAR 0 2
11422: PUSH
11423: LD_INT 22
11425: PUSH
11426: LD_OWVAR 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 34
11440: PUSH
11441: LD_INT 11
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 34
11450: PUSH
11451: LD_INT 30
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 69
11471: ST_TO_ADDR
// if not tmp then
11472: LD_VAR 0 2
11476: NOT
11477: IFFALSE 11481
// exit ;
11479: GO 11510
// for i in tmp do
11481: LD_ADDR_VAR 0 1
11485: PUSH
11486: LD_VAR 0 2
11490: PUSH
11491: FOR_IN
11492: IFFALSE 11508
// begin SetLives ( i , 0 ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_INT 0
11501: PPUSH
11502: CALL_OW 234
// end ;
11506: GO 11491
11508: POP
11509: POP
// end ;
11510: PPOPN 2
11512: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11513: LD_EXP 27
11517: PUSH
11518: LD_EXP 37
11522: AND
11523: IFFALSE 11543
11525: GO 11527
11527: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11528: LD_INT 32
11530: PPUSH
11531: LD_OWVAR 2
11535: PPUSH
11536: LD_INT 0
11538: PPUSH
11539: CALL_OW 324
11543: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11544: LD_EXP 27
11548: PUSH
11549: LD_EXP 38
11553: AND
11554: IFFALSE 11735
11556: GO 11558
11558: DISABLE
11559: LD_INT 0
11561: PPUSH
11562: PPUSH
11563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_INT 22
11571: PUSH
11572: LD_OWVAR 2
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PPUSH
11595: CALL_OW 69
11599: ST_TO_ADDR
// if not tmp then
11600: LD_VAR 0 2
11604: NOT
11605: IFFALSE 11609
// exit ;
11607: GO 11735
// side := 0 ;
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_INT 0
11616: ST_TO_ADDR
// for i := 1 to 8 do
11617: LD_ADDR_VAR 0 1
11621: PUSH
11622: DOUBLE
11623: LD_INT 1
11625: DEC
11626: ST_TO_ADDR
11627: LD_INT 8
11629: PUSH
11630: FOR_TO
11631: IFFALSE 11679
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11633: LD_OWVAR 2
11637: PUSH
11638: LD_VAR 0 1
11642: NONEQUAL
11643: PUSH
11644: LD_OWVAR 2
11648: PPUSH
11649: LD_VAR 0 1
11653: PPUSH
11654: CALL_OW 81
11658: PUSH
11659: LD_INT 2
11661: EQUAL
11662: AND
11663: IFFALSE 11677
// begin side := i ;
11665: LD_ADDR_VAR 0 3
11669: PUSH
11670: LD_VAR 0 1
11674: ST_TO_ADDR
// break ;
11675: GO 11679
// end ;
11677: GO 11630
11679: POP
11680: POP
// if not side then
11681: LD_VAR 0 3
11685: NOT
11686: IFFALSE 11690
// exit ;
11688: GO 11735
// for i := 1 to tmp do
11690: LD_ADDR_VAR 0 1
11694: PUSH
11695: DOUBLE
11696: LD_INT 1
11698: DEC
11699: ST_TO_ADDR
11700: LD_VAR 0 2
11704: PUSH
11705: FOR_TO
11706: IFFALSE 11733
// if Prob ( 60 ) then
11708: LD_INT 60
11710: PPUSH
11711: CALL_OW 13
11715: IFFALSE 11731
// SetSide ( i , side ) ;
11717: LD_VAR 0 1
11721: PPUSH
11722: LD_VAR 0 3
11726: PPUSH
11727: CALL_OW 235
11731: GO 11705
11733: POP
11734: POP
// end ;
11735: PPOPN 3
11737: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11738: LD_EXP 27
11742: PUSH
11743: LD_EXP 40
11747: AND
11748: IFFALSE 11867
11750: GO 11752
11752: DISABLE
11753: LD_INT 0
11755: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11756: LD_ADDR_VAR 0 1
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_OWVAR 2
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 21
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 3
11785: PUSH
11786: LD_INT 23
11788: PUSH
11789: LD_INT 0
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 69
11809: PUSH
11810: FOR_IN
11811: IFFALSE 11865
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 257
11822: PUSH
11823: LD_INT 1
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: LD_INT 3
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: IN
11841: IFFALSE 11863
// SetClass ( un , rand ( 1 , 4 ) ) ;
11843: LD_VAR 0 1
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: LD_INT 4
11853: PPUSH
11854: CALL_OW 12
11858: PPUSH
11859: CALL_OW 336
11863: GO 11810
11865: POP
11866: POP
// end ;
11867: PPOPN 1
11869: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11870: LD_EXP 27
11874: PUSH
11875: LD_EXP 39
11879: AND
11880: IFFALSE 11959
11882: GO 11884
11884: DISABLE
11885: LD_INT 0
11887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11888: LD_ADDR_VAR 0 1
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: LD_OWVAR 2
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 21
11907: PUSH
11908: LD_INT 3
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: ST_TO_ADDR
// if not tmp then
11924: LD_VAR 0 1
11928: NOT
11929: IFFALSE 11933
// exit ;
11931: GO 11959
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11933: LD_VAR 0 1
11937: PUSH
11938: LD_INT 1
11940: PPUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 12
11950: ARRAY
11951: PPUSH
11952: LD_INT 100
11954: PPUSH
11955: CALL_OW 234
// end ;
11959: PPOPN 1
11961: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11962: LD_EXP 27
11966: PUSH
11967: LD_EXP 41
11971: AND
11972: IFFALSE 12070
11974: GO 11976
11976: DISABLE
11977: LD_INT 0
11979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11980: LD_ADDR_VAR 0 1
11984: PUSH
11985: LD_INT 22
11987: PUSH
11988: LD_OWVAR 2
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 21
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PPUSH
12011: CALL_OW 69
12015: ST_TO_ADDR
// if not tmp then
12016: LD_VAR 0 1
12020: NOT
12021: IFFALSE 12025
// exit ;
12023: GO 12070
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: PPUSH
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 12
12042: ARRAY
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: LD_INT 4
12049: PPUSH
12050: CALL_OW 12
12054: PPUSH
12055: LD_INT 3000
12057: PPUSH
12058: LD_INT 9000
12060: PPUSH
12061: CALL_OW 12
12065: PPUSH
12066: CALL_OW 492
// end ;
12070: PPOPN 1
12072: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12073: LD_EXP 27
12077: PUSH
12078: LD_EXP 42
12082: AND
12083: IFFALSE 12103
12085: GO 12087
12087: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12088: LD_INT 1
12090: PPUSH
12091: LD_OWVAR 2
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 324
12103: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12104: LD_EXP 27
12108: PUSH
12109: LD_EXP 43
12113: AND
12114: IFFALSE 12197
12116: GO 12118
12118: DISABLE
12119: LD_INT 0
12121: PPUSH
12122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: LD_INT 22
12130: PUSH
12131: LD_OWVAR 2
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: ST_TO_ADDR
// if not tmp then
12159: LD_VAR 0 2
12163: NOT
12164: IFFALSE 12168
// exit ;
12166: GO 12197
// for i in tmp do
12168: LD_ADDR_VAR 0 1
12172: PUSH
12173: LD_VAR 0 2
12177: PUSH
12178: FOR_IN
12179: IFFALSE 12195
// SetBLevel ( i , 10 ) ;
12181: LD_VAR 0 1
12185: PPUSH
12186: LD_INT 10
12188: PPUSH
12189: CALL_OW 241
12193: GO 12178
12195: POP
12196: POP
// end ;
12197: PPOPN 2
12199: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12200: LD_EXP 27
12204: PUSH
12205: LD_EXP 44
12209: AND
12210: IFFALSE 12321
12212: GO 12214
12214: DISABLE
12215: LD_INT 0
12217: PPUSH
12218: PPUSH
12219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12220: LD_ADDR_VAR 0 3
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_OWVAR 2
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 25
12239: PUSH
12240: LD_INT 1
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 69
12255: ST_TO_ADDR
// if not tmp then
12256: LD_VAR 0 3
12260: NOT
12261: IFFALSE 12265
// exit ;
12263: GO 12321
// un := tmp [ rand ( 1 , tmp ) ] ;
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_VAR 0 3
12274: PUSH
12275: LD_INT 1
12277: PPUSH
12278: LD_VAR 0 3
12282: PPUSH
12283: CALL_OW 12
12287: ARRAY
12288: ST_TO_ADDR
// if Crawls ( un ) then
12289: LD_VAR 0 2
12293: PPUSH
12294: CALL_OW 318
12298: IFFALSE 12309
// ComWalk ( un ) ;
12300: LD_VAR 0 2
12304: PPUSH
12305: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12309: LD_VAR 0 2
12313: PPUSH
12314: LD_INT 5
12316: PPUSH
12317: CALL_OW 336
// end ;
12321: PPOPN 3
12323: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12324: LD_EXP 27
12328: PUSH
12329: LD_EXP 45
12333: AND
12334: PUSH
12335: LD_OWVAR 67
12339: PUSH
12340: LD_INT 4
12342: LESS
12343: AND
12344: IFFALSE 12363
12346: GO 12348
12348: DISABLE
// begin Difficulty := Difficulty + 1 ;
12349: LD_ADDR_OWVAR 67
12353: PUSH
12354: LD_OWVAR 67
12358: PUSH
12359: LD_INT 1
12361: PLUS
12362: ST_TO_ADDR
// end ;
12363: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12364: LD_EXP 27
12368: PUSH
12369: LD_EXP 46
12373: AND
12374: IFFALSE 12477
12376: GO 12378
12378: DISABLE
12379: LD_INT 0
12381: PPUSH
// begin for i := 1 to 5 do
12382: LD_ADDR_VAR 0 1
12386: PUSH
12387: DOUBLE
12388: LD_INT 1
12390: DEC
12391: ST_TO_ADDR
12392: LD_INT 5
12394: PUSH
12395: FOR_TO
12396: IFFALSE 12475
// begin uc_nation := nation_nature ;
12398: LD_ADDR_OWVAR 21
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// uc_side := 0 ;
12406: LD_ADDR_OWVAR 20
12410: PUSH
12411: LD_INT 0
12413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12414: LD_ADDR_OWVAR 29
12418: PUSH
12419: LD_INT 12
12421: PUSH
12422: LD_INT 12
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: ST_TO_ADDR
// hc_agressivity := 20 ;
12429: LD_ADDR_OWVAR 35
12433: PUSH
12434: LD_INT 20
12436: ST_TO_ADDR
// hc_class := class_tiger ;
12437: LD_ADDR_OWVAR 28
12441: PUSH
12442: LD_INT 14
12444: ST_TO_ADDR
// hc_gallery :=  ;
12445: LD_ADDR_OWVAR 33
12449: PUSH
12450: LD_STRING 
12452: ST_TO_ADDR
// hc_name :=  ;
12453: LD_ADDR_OWVAR 26
12457: PUSH
12458: LD_STRING 
12460: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12461: CALL_OW 44
12465: PPUSH
12466: LD_INT 0
12468: PPUSH
12469: CALL_OW 51
// end ;
12473: GO 12395
12475: POP
12476: POP
// end ;
12477: PPOPN 1
12479: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12480: LD_EXP 27
12484: PUSH
12485: LD_EXP 47
12489: AND
12490: IFFALSE 12499
12492: GO 12494
12494: DISABLE
// StreamSibBomb ;
12495: CALL 12500 0 0
12499: END
// export function StreamSibBomb ; var i , x , y ; begin
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
// result := false ;
12506: LD_ADDR_VAR 0 1
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// for i := 1 to 16 do
12514: LD_ADDR_VAR 0 2
12518: PUSH
12519: DOUBLE
12520: LD_INT 1
12522: DEC
12523: ST_TO_ADDR
12524: LD_INT 16
12526: PUSH
12527: FOR_TO
12528: IFFALSE 12727
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 10
12537: PUSH
12538: LD_INT 20
12540: PUSH
12541: LD_INT 30
12543: PUSH
12544: LD_INT 40
12546: PUSH
12547: LD_INT 50
12549: PUSH
12550: LD_INT 60
12552: PUSH
12553: LD_INT 70
12555: PUSH
12556: LD_INT 80
12558: PUSH
12559: LD_INT 90
12561: PUSH
12562: LD_INT 100
12564: PUSH
12565: LD_INT 110
12567: PUSH
12568: LD_INT 120
12570: PUSH
12571: LD_INT 130
12573: PUSH
12574: LD_INT 140
12576: PUSH
12577: LD_INT 150
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 1
12599: PPUSH
12600: LD_INT 15
12602: PPUSH
12603: CALL_OW 12
12607: ARRAY
12608: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12609: LD_ADDR_VAR 0 4
12613: PUSH
12614: LD_INT 10
12616: PUSH
12617: LD_INT 20
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 40
12625: PUSH
12626: LD_INT 50
12628: PUSH
12629: LD_INT 60
12631: PUSH
12632: LD_INT 70
12634: PUSH
12635: LD_INT 80
12637: PUSH
12638: LD_INT 90
12640: PUSH
12641: LD_INT 100
12643: PUSH
12644: LD_INT 110
12646: PUSH
12647: LD_INT 120
12649: PUSH
12650: LD_INT 130
12652: PUSH
12653: LD_INT 140
12655: PUSH
12656: LD_INT 150
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 1
12678: PPUSH
12679: LD_INT 15
12681: PPUSH
12682: CALL_OW 12
12686: ARRAY
12687: ST_TO_ADDR
// if ValidHex ( x , y ) then
12688: LD_VAR 0 3
12692: PPUSH
12693: LD_VAR 0 4
12697: PPUSH
12698: CALL_OW 488
12702: IFFALSE 12725
// begin result := [ x , y ] ;
12704: LD_ADDR_VAR 0 1
12708: PUSH
12709: LD_VAR 0 3
12713: PUSH
12714: LD_VAR 0 4
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: ST_TO_ADDR
// break ;
12723: GO 12727
// end ; end ;
12725: GO 12527
12727: POP
12728: POP
// if result then
12729: LD_VAR 0 1
12733: IFFALSE 12793
// begin ToLua ( playSibBomb() ) ;
12735: LD_STRING playSibBomb()
12737: PPUSH
12738: CALL_OW 559
// wait ( 0 0$14 ) ;
12742: LD_INT 490
12744: PPUSH
12745: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 1
12756: ARRAY
12757: PPUSH
12758: LD_VAR 0 1
12762: PUSH
12763: LD_INT 2
12765: ARRAY
12766: PPUSH
12767: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12771: LD_VAR 0 1
12775: PUSH
12776: LD_INT 1
12778: ARRAY
12779: PPUSH
12780: LD_VAR 0 1
12784: PUSH
12785: LD_INT 2
12787: ARRAY
12788: PPUSH
12789: CALL_OW 429
// end ; end ;
12793: LD_VAR 0 1
12797: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12798: LD_EXP 27
12802: PUSH
12803: LD_EXP 49
12807: AND
12808: IFFALSE 12820
12810: GO 12812
12812: DISABLE
// YouLost (  ) ;
12813: LD_STRING 
12815: PPUSH
12816: CALL_OW 104
12820: END
// every 0 0$1 trigger StreamModeActive and sFog do
12821: LD_EXP 27
12825: PUSH
12826: LD_EXP 48
12830: AND
12831: IFFALSE 12845
12833: GO 12835
12835: DISABLE
// FogOff ( your_side ) ;
12836: LD_OWVAR 2
12840: PPUSH
12841: CALL_OW 344
12845: END
// every 0 0$1 trigger StreamModeActive and sSun do
12846: LD_EXP 27
12850: PUSH
12851: LD_EXP 50
12855: AND
12856: IFFALSE 12884
12858: GO 12860
12860: DISABLE
// begin solar_recharge_percent := 0 ;
12861: LD_ADDR_OWVAR 79
12865: PUSH
12866: LD_INT 0
12868: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12869: LD_INT 10500
12871: PPUSH
12872: CALL_OW 67
// solar_recharge_percent := 100 ;
12876: LD_ADDR_OWVAR 79
12880: PUSH
12881: LD_INT 100
12883: ST_TO_ADDR
// end ;
12884: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12885: LD_EXP 27
12889: PUSH
12890: LD_EXP 51
12894: AND
12895: IFFALSE 13134
12897: GO 12899
12899: DISABLE
12900: LD_INT 0
12902: PPUSH
12903: PPUSH
12904: PPUSH
// begin tmp := [ ] ;
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: EMPTY
12911: ST_TO_ADDR
// for i := 1 to 6 do
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: DOUBLE
12918: LD_INT 1
12920: DEC
12921: ST_TO_ADDR
12922: LD_INT 6
12924: PUSH
12925: FOR_TO
12926: IFFALSE 13031
// begin uc_nation := nation_nature ;
12928: LD_ADDR_OWVAR 21
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// uc_side := 0 ;
12936: LD_ADDR_OWVAR 20
12940: PUSH
12941: LD_INT 0
12943: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12944: LD_ADDR_OWVAR 29
12948: PUSH
12949: LD_INT 12
12951: PUSH
12952: LD_INT 12
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
// hc_agressivity := 20 ;
12959: LD_ADDR_OWVAR 35
12963: PUSH
12964: LD_INT 20
12966: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12967: LD_ADDR_OWVAR 28
12971: PUSH
12972: LD_INT 17
12974: ST_TO_ADDR
// hc_gallery :=  ;
12975: LD_ADDR_OWVAR 33
12979: PUSH
12980: LD_STRING 
12982: ST_TO_ADDR
// hc_name :=  ;
12983: LD_ADDR_OWVAR 26
12987: PUSH
12988: LD_STRING 
12990: ST_TO_ADDR
// un := CreateHuman ;
12991: LD_ADDR_VAR 0 2
12995: PUSH
12996: CALL_OW 44
13000: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13001: LD_VAR 0 2
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: CALL_OW 51
// tmp := tmp ^ un ;
13013: LD_ADDR_VAR 0 3
13017: PUSH
13018: LD_VAR 0 3
13022: PUSH
13023: LD_VAR 0 2
13027: ADD
13028: ST_TO_ADDR
// end ;
13029: GO 12925
13031: POP
13032: POP
// repeat wait ( 0 0$1 ) ;
13033: LD_INT 35
13035: PPUSH
13036: CALL_OW 67
// for un in tmp do
13040: LD_ADDR_VAR 0 2
13044: PUSH
13045: LD_VAR 0 3
13049: PUSH
13050: FOR_IN
13051: IFFALSE 13125
// begin if IsDead ( un ) then
13053: LD_VAR 0 2
13057: PPUSH
13058: CALL_OW 301
13062: IFFALSE 13082
// begin tmp := tmp diff un ;
13064: LD_ADDR_VAR 0 3
13068: PUSH
13069: LD_VAR 0 3
13073: PUSH
13074: LD_VAR 0 2
13078: DIFF
13079: ST_TO_ADDR
// continue ;
13080: GO 13050
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13082: LD_VAR 0 2
13086: PPUSH
13087: LD_INT 3
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: LD_INT 0
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: PPUSH
13109: LD_VAR 0 2
13113: PPUSH
13114: CALL_OW 74
13118: PPUSH
13119: CALL_OW 115
// end ;
13123: GO 13050
13125: POP
13126: POP
// until not tmp ;
13127: LD_VAR 0 3
13131: NOT
13132: IFFALSE 13033
// end ;
13134: PPOPN 3
13136: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13137: LD_EXP 27
13141: PUSH
13142: LD_EXP 52
13146: AND
13147: IFFALSE 13201
13149: GO 13151
13151: DISABLE
// begin ToLua ( displayTroll(); ) ;
13152: LD_STRING displayTroll();
13154: PPUSH
13155: CALL_OW 559
// wait ( 3 3$00 ) ;
13159: LD_INT 6300
13161: PPUSH
13162: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13166: LD_STRING hideTroll();
13168: PPUSH
13169: CALL_OW 559
// wait ( 1 1$00 ) ;
13173: LD_INT 2100
13175: PPUSH
13176: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13180: LD_STRING displayTroll();
13182: PPUSH
13183: CALL_OW 559
// wait ( 1 1$00 ) ;
13187: LD_INT 2100
13189: PPUSH
13190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13194: LD_STRING hideTroll();
13196: PPUSH
13197: CALL_OW 559
// end ;
13201: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13202: LD_EXP 27
13206: PUSH
13207: LD_EXP 53
13211: AND
13212: IFFALSE 13275
13214: GO 13216
13216: DISABLE
13217: LD_INT 0
13219: PPUSH
// begin p := 0 ;
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// repeat game_speed := 1 ;
13228: LD_ADDR_OWVAR 65
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13236: LD_INT 35
13238: PPUSH
13239: CALL_OW 67
// p := p + 1 ;
13243: LD_ADDR_VAR 0 1
13247: PUSH
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 1
13255: PLUS
13256: ST_TO_ADDR
// until p >= 60 ;
13257: LD_VAR 0 1
13261: PUSH
13262: LD_INT 60
13264: GREATEREQUAL
13265: IFFALSE 13228
// game_speed := 4 ;
13267: LD_ADDR_OWVAR 65
13271: PUSH
13272: LD_INT 4
13274: ST_TO_ADDR
// end ;
13275: PPOPN 1
13277: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13278: LD_EXP 27
13282: PUSH
13283: LD_EXP 54
13287: AND
13288: IFFALSE 13434
13290: GO 13292
13292: DISABLE
13293: LD_INT 0
13295: PPUSH
13296: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13297: LD_ADDR_VAR 0 1
13301: PUSH
13302: LD_INT 22
13304: PUSH
13305: LD_OWVAR 2
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 2
13316: PUSH
13317: LD_INT 30
13319: PUSH
13320: LD_INT 0
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 30
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: ST_TO_ADDR
// if not depot then
13351: LD_VAR 0 1
13355: NOT
13356: IFFALSE 13360
// exit ;
13358: GO 13434
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13360: LD_ADDR_VAR 0 2
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: LD_INT 1
13372: PPUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 12
13382: ARRAY
13383: PPUSH
13384: CALL_OW 274
13388: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13389: LD_VAR 0 2
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_INT 0
13399: PPUSH
13400: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13404: LD_VAR 0 2
13408: PPUSH
13409: LD_INT 2
13411: PPUSH
13412: LD_INT 0
13414: PPUSH
13415: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13419: LD_VAR 0 2
13423: PPUSH
13424: LD_INT 3
13426: PPUSH
13427: LD_INT 0
13429: PPUSH
13430: CALL_OW 277
// end ;
13434: PPOPN 2
13436: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13437: LD_EXP 27
13441: PUSH
13442: LD_EXP 55
13446: AND
13447: IFFALSE 13544
13449: GO 13451
13451: DISABLE
13452: LD_INT 0
13454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13455: LD_ADDR_VAR 0 1
13459: PUSH
13460: LD_INT 22
13462: PUSH
13463: LD_OWVAR 2
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: LD_INT 21
13474: PUSH
13475: LD_INT 1
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 3
13484: PUSH
13485: LD_INT 23
13487: PUSH
13488: LD_INT 0
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: LIST
13503: PPUSH
13504: CALL_OW 69
13508: ST_TO_ADDR
// if not tmp then
13509: LD_VAR 0 1
13513: NOT
13514: IFFALSE 13518
// exit ;
13516: GO 13544
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13518: LD_VAR 0 1
13522: PUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 12
13535: ARRAY
13536: PPUSH
13537: LD_INT 200
13539: PPUSH
13540: CALL_OW 234
// end ;
13544: PPOPN 1
13546: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13547: LD_EXP 27
13551: PUSH
13552: LD_EXP 56
13556: AND
13557: IFFALSE 13636
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13565: LD_ADDR_VAR 0 1
13569: PUSH
13570: LD_INT 22
13572: PUSH
13573: LD_OWVAR 2
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 21
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 69
13600: ST_TO_ADDR
// if not tmp then
13601: LD_VAR 0 1
13605: NOT
13606: IFFALSE 13610
// exit ;
13608: GO 13636
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13610: LD_VAR 0 1
13614: PUSH
13615: LD_INT 1
13617: PPUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 12
13627: ARRAY
13628: PPUSH
13629: LD_INT 60
13631: PPUSH
13632: CALL_OW 234
// end ;
13636: PPOPN 1
13638: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13639: LD_EXP 27
13643: PUSH
13644: LD_EXP 57
13648: AND
13649: IFFALSE 13748
13651: GO 13653
13653: DISABLE
13654: LD_INT 0
13656: PPUSH
13657: PPUSH
// begin enable ;
13658: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13659: LD_ADDR_VAR 0 1
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_OWVAR 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 61
13678: PUSH
13679: EMPTY
13680: LIST
13681: PUSH
13682: LD_INT 33
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: ST_TO_ADDR
// if not tmp then
13702: LD_VAR 0 1
13706: NOT
13707: IFFALSE 13711
// exit ;
13709: GO 13748
// for i in tmp do
13711: LD_ADDR_VAR 0 2
13715: PUSH
13716: LD_VAR 0 1
13720: PUSH
13721: FOR_IN
13722: IFFALSE 13746
// if IsControledBy ( i ) then
13724: LD_VAR 0 2
13728: PPUSH
13729: CALL_OW 312
13733: IFFALSE 13744
// ComUnlink ( i ) ;
13735: LD_VAR 0 2
13739: PPUSH
13740: CALL_OW 136
13744: GO 13721
13746: POP
13747: POP
// end ;
13748: PPOPN 2
13750: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13751: LD_EXP 27
13755: PUSH
13756: LD_EXP 58
13760: AND
13761: IFFALSE 13901
13763: GO 13765
13765: DISABLE
13766: LD_INT 0
13768: PPUSH
13769: PPUSH
// begin ToLua ( displayPowell(); ) ;
13770: LD_STRING displayPowell();
13772: PPUSH
13773: CALL_OW 559
// uc_side := 0 ;
13777: LD_ADDR_OWVAR 20
13781: PUSH
13782: LD_INT 0
13784: ST_TO_ADDR
// uc_nation := 2 ;
13785: LD_ADDR_OWVAR 21
13789: PUSH
13790: LD_INT 2
13792: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13793: LD_ADDR_OWVAR 37
13797: PUSH
13798: LD_INT 14
13800: ST_TO_ADDR
// vc_engine := engine_siberite ;
13801: LD_ADDR_OWVAR 39
13805: PUSH
13806: LD_INT 3
13808: ST_TO_ADDR
// vc_control := control_apeman ;
13809: LD_ADDR_OWVAR 38
13813: PUSH
13814: LD_INT 5
13816: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13817: LD_ADDR_OWVAR 40
13821: PUSH
13822: LD_INT 29
13824: ST_TO_ADDR
// un := CreateVehicle ;
13825: LD_ADDR_VAR 0 2
13829: PUSH
13830: CALL_OW 45
13834: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13835: LD_VAR 0 2
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13847: LD_INT 35
13849: PPUSH
13850: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13854: LD_VAR 0 2
13858: PPUSH
13859: LD_INT 22
13861: PUSH
13862: LD_OWVAR 2
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 69
13875: PPUSH
13876: LD_VAR 0 2
13880: PPUSH
13881: CALL_OW 74
13885: PPUSH
13886: CALL_OW 115
// until IsDead ( un ) ;
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL_OW 301
13899: IFFALSE 13847
// end ;
13901: PPOPN 2
13903: END
// every 0 0$1 trigger StreamModeActive and sStu do
13904: LD_EXP 27
13908: PUSH
13909: LD_EXP 66
13913: AND
13914: IFFALSE 13930
13916: GO 13918
13918: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13919: LD_STRING displayStucuk();
13921: PPUSH
13922: CALL_OW 559
// ResetFog ;
13926: CALL_OW 335
// end ;
13930: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13931: LD_EXP 27
13935: PUSH
13936: LD_EXP 59
13940: AND
13941: IFFALSE 14082
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_INT 22
13957: PUSH
13958: LD_OWVAR 2
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 21
13969: PUSH
13970: LD_INT 1
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PPUSH
13981: CALL_OW 69
13985: ST_TO_ADDR
// if not tmp then
13986: LD_VAR 0 2
13990: NOT
13991: IFFALSE 13995
// exit ;
13993: GO 14082
// un := tmp [ rand ( 1 , tmp ) ] ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_VAR 0 2
14004: PUSH
14005: LD_INT 1
14007: PPUSH
14008: LD_VAR 0 2
14012: PPUSH
14013: CALL_OW 12
14017: ARRAY
14018: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14019: LD_VAR 0 1
14023: PPUSH
14024: LD_INT 0
14026: PPUSH
14027: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14031: LD_VAR 0 1
14035: PPUSH
14036: LD_OWVAR 3
14040: PUSH
14041: LD_VAR 0 1
14045: DIFF
14046: PPUSH
14047: LD_VAR 0 1
14051: PPUSH
14052: CALL_OW 74
14056: PPUSH
14057: CALL_OW 115
// wait ( 0 0$20 ) ;
14061: LD_INT 700
14063: PPUSH
14064: CALL_OW 67
// SetSide ( un , your_side ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_OWVAR 2
14077: PPUSH
14078: CALL_OW 235
// end ;
14082: PPOPN 2
14084: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14085: LD_EXP 27
14089: PUSH
14090: LD_EXP 60
14094: AND
14095: IFFALSE 14201
14097: GO 14099
14099: DISABLE
14100: LD_INT 0
14102: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: LD_INT 22
14110: PUSH
14111: LD_OWVAR 2
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 2
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: LD_INT 0
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 30
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: ST_TO_ADDR
// if not depot then
14157: LD_VAR 0 1
14161: NOT
14162: IFFALSE 14166
// exit ;
14164: GO 14201
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14166: LD_VAR 0 1
14170: PUSH
14171: LD_INT 1
14173: ARRAY
14174: PPUSH
14175: CALL_OW 250
14179: PPUSH
14180: LD_VAR 0 1
14184: PUSH
14185: LD_INT 1
14187: ARRAY
14188: PPUSH
14189: CALL_OW 251
14193: PPUSH
14194: LD_INT 70
14196: PPUSH
14197: CALL_OW 495
// end ;
14201: PPOPN 1
14203: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14204: LD_EXP 27
14208: PUSH
14209: LD_EXP 61
14213: AND
14214: IFFALSE 14425
14216: GO 14218
14218: DISABLE
14219: LD_INT 0
14221: PPUSH
14222: PPUSH
14223: PPUSH
14224: PPUSH
14225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14226: LD_ADDR_VAR 0 5
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_OWVAR 2
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PPUSH
14257: CALL_OW 69
14261: ST_TO_ADDR
// if not tmp then
14262: LD_VAR 0 5
14266: NOT
14267: IFFALSE 14271
// exit ;
14269: GO 14425
// for i in tmp do
14271: LD_ADDR_VAR 0 1
14275: PUSH
14276: LD_VAR 0 5
14280: PUSH
14281: FOR_IN
14282: IFFALSE 14423
// begin d := rand ( 0 , 5 ) ;
14284: LD_ADDR_VAR 0 4
14288: PUSH
14289: LD_INT 0
14291: PPUSH
14292: LD_INT 5
14294: PPUSH
14295: CALL_OW 12
14299: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14300: LD_ADDR_VAR 0 2
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 250
14314: PPUSH
14315: LD_VAR 0 4
14319: PPUSH
14320: LD_INT 3
14322: PPUSH
14323: LD_INT 12
14325: PPUSH
14326: CALL_OW 12
14330: PPUSH
14331: CALL_OW 272
14335: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 251
14350: PPUSH
14351: LD_VAR 0 4
14355: PPUSH
14356: LD_INT 3
14358: PPUSH
14359: LD_INT 12
14361: PPUSH
14362: CALL_OW 12
14366: PPUSH
14367: CALL_OW 273
14371: ST_TO_ADDR
// if ValidHex ( x , y ) then
14372: LD_VAR 0 2
14376: PPUSH
14377: LD_VAR 0 3
14381: PPUSH
14382: CALL_OW 488
14386: IFFALSE 14421
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14388: LD_VAR 0 1
14392: PPUSH
14393: LD_VAR 0 2
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 3
14405: PPUSH
14406: LD_INT 6
14408: PPUSH
14409: CALL_OW 12
14413: PPUSH
14414: LD_INT 1
14416: PPUSH
14417: CALL_OW 483
// end ;
14421: GO 14281
14423: POP
14424: POP
// end ;
14425: PPOPN 5
14427: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14428: LD_EXP 27
14432: PUSH
14433: LD_EXP 62
14437: AND
14438: IFFALSE 14532
14440: GO 14442
14442: DISABLE
14443: LD_INT 0
14445: PPUSH
14446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14447: LD_ADDR_VAR 0 2
14451: PUSH
14452: LD_INT 22
14454: PUSH
14455: LD_OWVAR 2
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 32
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 21
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 69
14493: ST_TO_ADDR
// if not tmp then
14494: LD_VAR 0 2
14498: NOT
14499: IFFALSE 14503
// exit ;
14501: GO 14532
// for i in tmp do
14503: LD_ADDR_VAR 0 1
14507: PUSH
14508: LD_VAR 0 2
14512: PUSH
14513: FOR_IN
14514: IFFALSE 14530
// SetFuel ( i , 0 ) ;
14516: LD_VAR 0 1
14520: PPUSH
14521: LD_INT 0
14523: PPUSH
14524: CALL_OW 240
14528: GO 14513
14530: POP
14531: POP
// end ;
14532: PPOPN 2
14534: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14535: LD_EXP 27
14539: PUSH
14540: LD_EXP 63
14544: AND
14545: IFFALSE 14611
14547: GO 14549
14549: DISABLE
14550: LD_INT 0
14552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14553: LD_ADDR_VAR 0 1
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_OWVAR 2
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 29
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: ST_TO_ADDR
// if not tmp then
14589: LD_VAR 0 1
14593: NOT
14594: IFFALSE 14598
// exit ;
14596: GO 14611
// DestroyUnit ( tmp [ 1 ] ) ;
14598: LD_VAR 0 1
14602: PUSH
14603: LD_INT 1
14605: ARRAY
14606: PPUSH
14607: CALL_OW 65
// end ;
14611: PPOPN 1
14613: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14614: LD_EXP 27
14618: PUSH
14619: LD_EXP 65
14623: AND
14624: IFFALSE 14753
14626: GO 14628
14628: DISABLE
14629: LD_INT 0
14631: PPUSH
// begin uc_side := 0 ;
14632: LD_ADDR_OWVAR 20
14636: PUSH
14637: LD_INT 0
14639: ST_TO_ADDR
// uc_nation := nation_arabian ;
14640: LD_ADDR_OWVAR 21
14644: PUSH
14645: LD_INT 2
14647: ST_TO_ADDR
// hc_gallery :=  ;
14648: LD_ADDR_OWVAR 33
14652: PUSH
14653: LD_STRING 
14655: ST_TO_ADDR
// hc_name :=  ;
14656: LD_ADDR_OWVAR 26
14660: PUSH
14661: LD_STRING 
14663: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14664: LD_INT 1
14666: PPUSH
14667: LD_INT 11
14669: PPUSH
14670: LD_INT 10
14672: PPUSH
14673: CALL_OW 380
// un := CreateHuman ;
14677: LD_ADDR_VAR 0 1
14681: PUSH
14682: CALL_OW 44
14686: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14687: LD_VAR 0 1
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14699: LD_INT 35
14701: PPUSH
14702: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14706: LD_VAR 0 1
14710: PPUSH
14711: LD_INT 22
14713: PUSH
14714: LD_OWVAR 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 69
14727: PPUSH
14728: LD_VAR 0 1
14732: PPUSH
14733: CALL_OW 74
14737: PPUSH
14738: CALL_OW 115
// until IsDead ( un ) ;
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 301
14751: IFFALSE 14699
// end ;
14753: PPOPN 1
14755: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14756: LD_EXP 27
14760: PUSH
14761: LD_EXP 67
14765: AND
14766: IFFALSE 14778
14768: GO 14770
14770: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14771: LD_STRING earthquake(getX(game), 0, 32)
14773: PPUSH
14774: CALL_OW 559
14778: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14779: LD_EXP 27
14783: PUSH
14784: LD_EXP 68
14788: AND
14789: IFFALSE 14880
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
// begin enable ;
14797: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_INT 22
14805: PUSH
14806: LD_OWVAR 2
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 21
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 33
14827: PUSH
14828: LD_INT 3
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 1
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 14880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14854: LD_VAR 0 1
14858: PUSH
14859: LD_INT 1
14861: PPUSH
14862: LD_VAR 0 1
14866: PPUSH
14867: CALL_OW 12
14871: ARRAY
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: CALL_OW 234
// end ;
14880: PPOPN 1
14882: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14883: LD_EXP 27
14887: PUSH
14888: LD_EXP 69
14892: AND
14893: IFFALSE 15034
14895: GO 14897
14897: DISABLE
14898: LD_INT 0
14900: PPUSH
14901: PPUSH
14902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14903: LD_ADDR_VAR 0 3
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_OWVAR 2
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 25
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PPUSH
14934: CALL_OW 69
14938: ST_TO_ADDR
// if not tmp then
14939: LD_VAR 0 3
14943: NOT
14944: IFFALSE 14948
// exit ;
14946: GO 15034
// un := tmp [ rand ( 1 , tmp ) ] ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_VAR 0 3
14957: PUSH
14958: LD_INT 1
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: CALL_OW 12
14970: ARRAY
14971: ST_TO_ADDR
// if Crawls ( un ) then
14972: LD_VAR 0 2
14976: PPUSH
14977: CALL_OW 318
14981: IFFALSE 14992
// ComWalk ( un ) ;
14983: LD_VAR 0 2
14987: PPUSH
14988: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14992: LD_VAR 0 2
14996: PPUSH
14997: LD_INT 9
14999: PPUSH
15000: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15004: LD_INT 28
15006: PPUSH
15007: LD_OWVAR 2
15011: PPUSH
15012: LD_INT 2
15014: PPUSH
15015: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15019: LD_INT 29
15021: PPUSH
15022: LD_OWVAR 2
15026: PPUSH
15027: LD_INT 2
15029: PPUSH
15030: CALL_OW 322
// end ;
15034: PPOPN 3
15036: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15037: LD_EXP 27
15041: PUSH
15042: LD_EXP 70
15046: AND
15047: IFFALSE 15158
15049: GO 15051
15051: DISABLE
15052: LD_INT 0
15054: PPUSH
15055: PPUSH
15056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_INT 22
15064: PUSH
15065: LD_OWVAR 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 1
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 69
15092: ST_TO_ADDR
// if not tmp then
15093: LD_VAR 0 3
15097: NOT
15098: IFFALSE 15102
// exit ;
15100: GO 15158
// un := tmp [ rand ( 1 , tmp ) ] ;
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_VAR 0 3
15111: PUSH
15112: LD_INT 1
15114: PPUSH
15115: LD_VAR 0 3
15119: PPUSH
15120: CALL_OW 12
15124: ARRAY
15125: ST_TO_ADDR
// if Crawls ( un ) then
15126: LD_VAR 0 2
15130: PPUSH
15131: CALL_OW 318
15135: IFFALSE 15146
// ComWalk ( un ) ;
15137: LD_VAR 0 2
15141: PPUSH
15142: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15146: LD_VAR 0 2
15150: PPUSH
15151: LD_INT 8
15153: PPUSH
15154: CALL_OW 336
// end ;
15158: PPOPN 3
15160: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15161: LD_EXP 27
15165: PUSH
15166: LD_EXP 71
15170: AND
15171: IFFALSE 15315
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15180: LD_ADDR_VAR 0 2
15184: PUSH
15185: LD_INT 22
15187: PUSH
15188: LD_OWVAR 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 21
15199: PUSH
15200: LD_INT 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: LD_INT 34
15212: PUSH
15213: LD_INT 12
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 34
15222: PUSH
15223: LD_INT 51
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 34
15232: PUSH
15233: LD_INT 32
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: PPUSH
15251: CALL_OW 69
15255: ST_TO_ADDR
// if not tmp then
15256: LD_VAR 0 2
15260: NOT
15261: IFFALSE 15265
// exit ;
15263: GO 15315
// for i in tmp do
15265: LD_ADDR_VAR 0 1
15269: PUSH
15270: LD_VAR 0 2
15274: PUSH
15275: FOR_IN
15276: IFFALSE 15313
// if GetCargo ( i , mat_artifact ) = 0 then
15278: LD_VAR 0 1
15282: PPUSH
15283: LD_INT 4
15285: PPUSH
15286: CALL_OW 289
15290: PUSH
15291: LD_INT 0
15293: EQUAL
15294: IFFALSE 15311
// SetCargo ( i , mat_siberit , 100 ) ;
15296: LD_VAR 0 1
15300: PPUSH
15301: LD_INT 3
15303: PPUSH
15304: LD_INT 100
15306: PPUSH
15307: CALL_OW 290
15311: GO 15275
15313: POP
15314: POP
// end ;
15315: PPOPN 2
15317: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15318: LD_EXP 27
15322: PUSH
15323: LD_EXP 72
15327: AND
15328: IFFALSE 15511
15330: GO 15332
15332: DISABLE
15333: LD_INT 0
15335: PPUSH
15336: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15337: LD_ADDR_VAR 0 2
15341: PUSH
15342: LD_INT 22
15344: PUSH
15345: LD_OWVAR 2
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 69
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15511
// for i := 1 to 2 do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: DOUBLE
15374: LD_INT 1
15376: DEC
15377: ST_TO_ADDR
15378: LD_INT 2
15380: PUSH
15381: FOR_TO
15382: IFFALSE 15509
// begin uc_side := your_side ;
15384: LD_ADDR_OWVAR 20
15388: PUSH
15389: LD_OWVAR 2
15393: ST_TO_ADDR
// uc_nation := nation_american ;
15394: LD_ADDR_OWVAR 21
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// vc_chassis := us_morphling ;
15402: LD_ADDR_OWVAR 37
15406: PUSH
15407: LD_INT 5
15409: ST_TO_ADDR
// vc_engine := engine_siberite ;
15410: LD_ADDR_OWVAR 39
15414: PUSH
15415: LD_INT 3
15417: ST_TO_ADDR
// vc_control := control_computer ;
15418: LD_ADDR_OWVAR 38
15422: PUSH
15423: LD_INT 3
15425: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15426: LD_ADDR_OWVAR 40
15430: PUSH
15431: LD_INT 10
15433: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15434: LD_VAR 0 2
15438: PUSH
15439: LD_INT 1
15441: ARRAY
15442: PPUSH
15443: CALL_OW 310
15447: NOT
15448: IFFALSE 15495
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15450: CALL_OW 45
15454: PPUSH
15455: LD_VAR 0 2
15459: PUSH
15460: LD_INT 1
15462: ARRAY
15463: PPUSH
15464: CALL_OW 250
15468: PPUSH
15469: LD_VAR 0 2
15473: PUSH
15474: LD_INT 1
15476: ARRAY
15477: PPUSH
15478: CALL_OW 251
15482: PPUSH
15483: LD_INT 12
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 50
15493: GO 15507
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15495: CALL_OW 45
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 51
// end ;
15507: GO 15381
15509: POP
15510: POP
// end ;
15511: PPOPN 2
15513: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15514: LD_EXP 27
15518: PUSH
15519: LD_EXP 73
15523: AND
15524: IFFALSE 15746
15526: GO 15528
15528: DISABLE
15529: LD_INT 0
15531: PPUSH
15532: PPUSH
15533: PPUSH
15534: PPUSH
15535: PPUSH
15536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15537: LD_ADDR_VAR 0 6
15541: PUSH
15542: LD_INT 22
15544: PUSH
15545: LD_OWVAR 2
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 21
15556: PUSH
15557: LD_INT 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 3
15566: PUSH
15567: LD_INT 23
15569: PUSH
15570: LD_INT 0
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 69
15590: ST_TO_ADDR
// if not tmp then
15591: LD_VAR 0 6
15595: NOT
15596: IFFALSE 15600
// exit ;
15598: GO 15746
// s1 := rand ( 1 , 4 ) ;
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 1
15607: PPUSH
15608: LD_INT 4
15610: PPUSH
15611: CALL_OW 12
15615: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15616: LD_ADDR_VAR 0 4
15620: PUSH
15621: LD_VAR 0 6
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: LD_VAR 0 2
15634: PPUSH
15635: CALL_OW 259
15639: ST_TO_ADDR
// if s1 = 1 then
15640: LD_VAR 0 2
15644: PUSH
15645: LD_INT 1
15647: EQUAL
15648: IFFALSE 15668
// s2 := rand ( 2 , 4 ) else
15650: LD_ADDR_VAR 0 3
15654: PUSH
15655: LD_INT 2
15657: PPUSH
15658: LD_INT 4
15660: PPUSH
15661: CALL_OW 12
15665: ST_TO_ADDR
15666: GO 15676
// s2 := 1 ;
15668: LD_ADDR_VAR 0 3
15672: PUSH
15673: LD_INT 1
15675: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15676: LD_ADDR_VAR 0 5
15680: PUSH
15681: LD_VAR 0 6
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: LD_VAR 0 3
15694: PPUSH
15695: CALL_OW 259
15699: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15700: LD_VAR 0 6
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: PPUSH
15709: LD_VAR 0 2
15713: PPUSH
15714: LD_VAR 0 5
15718: PPUSH
15719: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15723: LD_VAR 0 6
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_VAR 0 4
15741: PPUSH
15742: CALL_OW 237
// end ;
15746: PPOPN 6
15748: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15749: LD_EXP 27
15753: PUSH
15754: LD_EXP 74
15758: AND
15759: IFFALSE 15838
15761: GO 15763
15763: DISABLE
15764: LD_INT 0
15766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15767: LD_ADDR_VAR 0 1
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_OWVAR 2
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 30
15786: PUSH
15787: LD_INT 3
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 69
15802: ST_TO_ADDR
// if not tmp then
15803: LD_VAR 0 1
15807: NOT
15808: IFFALSE 15812
// exit ;
15810: GO 15838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15812: LD_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: PPUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 12
15829: ARRAY
15830: PPUSH
15831: LD_INT 1
15833: PPUSH
15834: CALL_OW 234
// end ;
15838: PPOPN 1
15840: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15841: LD_EXP 27
15845: PUSH
15846: LD_EXP 75
15850: AND
15851: IFFALSE 15963
15853: GO 15855
15855: DISABLE
15856: LD_INT 0
15858: PPUSH
15859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15860: LD_ADDR_VAR 0 2
15864: PUSH
15865: LD_INT 22
15867: PUSH
15868: LD_OWVAR 2
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 2
15879: PUSH
15880: LD_INT 30
15882: PUSH
15883: LD_INT 27
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 30
15892: PUSH
15893: LD_INT 26
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 30
15902: PUSH
15903: LD_INT 28
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PPUSH
15920: CALL_OW 69
15924: ST_TO_ADDR
// if not tmp then
15925: LD_VAR 0 2
15929: NOT
15930: IFFALSE 15934
// exit ;
15932: GO 15963
// for i in tmp do
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 2
15943: PUSH
15944: FOR_IN
15945: IFFALSE 15961
// SetLives ( i , 1 ) ;
15947: LD_VAR 0 1
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 234
15959: GO 15944
15961: POP
15962: POP
// end ;
15963: PPOPN 2
15965: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15966: LD_EXP 27
15970: PUSH
15971: LD_EXP 76
15975: AND
15976: IFFALSE 16263
15978: GO 15980
15980: DISABLE
15981: LD_INT 0
15983: PPUSH
15984: PPUSH
15985: PPUSH
// begin i := rand ( 1 , 7 ) ;
15986: LD_ADDR_VAR 0 1
15990: PUSH
15991: LD_INT 1
15993: PPUSH
15994: LD_INT 7
15996: PPUSH
15997: CALL_OW 12
16001: ST_TO_ADDR
// case i of 1 :
16002: LD_VAR 0 1
16006: PUSH
16007: LD_INT 1
16009: DOUBLE
16010: EQUAL
16011: IFTRUE 16015
16013: GO 16025
16015: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16016: LD_STRING earthquake(getX(game), 0, 32)
16018: PPUSH
16019: CALL_OW 559
16023: GO 16263
16025: LD_INT 2
16027: DOUBLE
16028: EQUAL
16029: IFTRUE 16033
16031: GO 16047
16033: POP
// begin ToLua ( displayStucuk(); ) ;
16034: LD_STRING displayStucuk();
16036: PPUSH
16037: CALL_OW 559
// ResetFog ;
16041: CALL_OW 335
// end ; 3 :
16045: GO 16263
16047: LD_INT 3
16049: DOUBLE
16050: EQUAL
16051: IFTRUE 16055
16053: GO 16159
16055: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16056: LD_ADDR_VAR 0 2
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_OWVAR 2
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 25
16075: PUSH
16076: LD_INT 1
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PPUSH
16087: CALL_OW 69
16091: ST_TO_ADDR
// if not tmp then
16092: LD_VAR 0 2
16096: NOT
16097: IFFALSE 16101
// exit ;
16099: GO 16263
// un := tmp [ rand ( 1 , tmp ) ] ;
16101: LD_ADDR_VAR 0 3
16105: PUSH
16106: LD_VAR 0 2
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL_OW 12
16123: ARRAY
16124: ST_TO_ADDR
// if Crawls ( un ) then
16125: LD_VAR 0 3
16129: PPUSH
16130: CALL_OW 318
16134: IFFALSE 16145
// ComWalk ( un ) ;
16136: LD_VAR 0 3
16140: PPUSH
16141: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 8
16152: PPUSH
16153: CALL_OW 336
// end ; 4 :
16157: GO 16263
16159: LD_INT 4
16161: DOUBLE
16162: EQUAL
16163: IFTRUE 16167
16165: GO 16241
16167: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16168: LD_ADDR_VAR 0 2
16172: PUSH
16173: LD_INT 22
16175: PUSH
16176: LD_OWVAR 2
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 30
16187: PUSH
16188: LD_INT 29
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: ST_TO_ADDR
// if not tmp then
16204: LD_VAR 0 2
16208: NOT
16209: IFFALSE 16213
// exit ;
16211: GO 16263
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 1
16220: ARRAY
16221: PPUSH
16222: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16226: LD_VAR 0 2
16230: PUSH
16231: LD_INT 1
16233: ARRAY
16234: PPUSH
16235: CALL_OW 65
// end ; 5 .. 7 :
16239: GO 16263
16241: LD_INT 5
16243: DOUBLE
16244: GREATEREQUAL
16245: IFFALSE 16253
16247: LD_INT 7
16249: DOUBLE
16250: LESSEQUAL
16251: IFTRUE 16255
16253: GO 16262
16255: POP
// StreamSibBomb ; end ;
16256: CALL 12500 0 0
16260: GO 16263
16262: POP
// end ;
16263: PPOPN 3
16265: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16266: LD_EXP 27
16270: PUSH
16271: LD_EXP 77
16275: AND
16276: IFFALSE 16432
16278: GO 16280
16280: DISABLE
16281: LD_INT 0
16283: PPUSH
16284: PPUSH
16285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16286: LD_ADDR_VAR 0 2
16290: PUSH
16291: LD_INT 81
16293: PUSH
16294: LD_OWVAR 2
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: LD_INT 21
16308: PUSH
16309: LD_INT 1
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 21
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PPUSH
16335: CALL_OW 69
16339: ST_TO_ADDR
// if not tmp then
16340: LD_VAR 0 2
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 16432
// p := 0 ;
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_INT 0
16356: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16357: LD_INT 35
16359: PPUSH
16360: CALL_OW 67
// p := p + 1 ;
16364: LD_ADDR_VAR 0 3
16368: PUSH
16369: LD_VAR 0 3
16373: PUSH
16374: LD_INT 1
16376: PLUS
16377: ST_TO_ADDR
// for i in tmp do
16378: LD_ADDR_VAR 0 1
16382: PUSH
16383: LD_VAR 0 2
16387: PUSH
16388: FOR_IN
16389: IFFALSE 16420
// if GetLives ( i ) < 1000 then
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 256
16400: PUSH
16401: LD_INT 1000
16403: LESS
16404: IFFALSE 16418
// SetLives ( i , 1000 ) ;
16406: LD_VAR 0 1
16410: PPUSH
16411: LD_INT 1000
16413: PPUSH
16414: CALL_OW 234
16418: GO 16388
16420: POP
16421: POP
// until p > 20 ;
16422: LD_VAR 0 3
16426: PUSH
16427: LD_INT 20
16429: GREATER
16430: IFFALSE 16357
// end ;
16432: PPOPN 3
16434: END
// every 0 0$1 trigger StreamModeActive and sTime do
16435: LD_EXP 27
16439: PUSH
16440: LD_EXP 78
16444: AND
16445: IFFALSE 16480
16447: GO 16449
16449: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16450: LD_INT 28
16452: PPUSH
16453: LD_OWVAR 2
16457: PPUSH
16458: LD_INT 2
16460: PPUSH
16461: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16465: LD_INT 30
16467: PPUSH
16468: LD_OWVAR 2
16472: PPUSH
16473: LD_INT 2
16475: PPUSH
16476: CALL_OW 322
// end ;
16480: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16481: LD_EXP 27
16485: PUSH
16486: LD_EXP 79
16490: AND
16491: IFFALSE 16612
16493: GO 16495
16495: DISABLE
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16500: LD_ADDR_VAR 0 2
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_OWVAR 2
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 21
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 3
16529: PUSH
16530: LD_INT 23
16532: PUSH
16533: LD_INT 0
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// if not tmp then
16554: LD_VAR 0 2
16558: NOT
16559: IFFALSE 16563
// exit ;
16561: GO 16612
// for i in tmp do
16563: LD_ADDR_VAR 0 1
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: FOR_IN
16574: IFFALSE 16610
// begin if Crawls ( i ) then
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 318
16585: IFFALSE 16596
// ComWalk ( i ) ;
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 138
// SetClass ( i , 2 ) ;
16596: LD_VAR 0 1
16600: PPUSH
16601: LD_INT 2
16603: PPUSH
16604: CALL_OW 336
// end ;
16608: GO 16573
16610: POP
16611: POP
// end ;
16612: PPOPN 2
16614: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16615: LD_EXP 27
16619: PUSH
16620: LD_EXP 80
16624: AND
16625: IFFALSE 16913
16627: GO 16629
16629: DISABLE
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
16634: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16635: LD_OWVAR 2
16639: PPUSH
16640: LD_INT 9
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 1
16648: PPUSH
16649: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16653: LD_INT 9
16655: PPUSH
16656: LD_OWVAR 2
16660: PPUSH
16661: CALL_OW 343
// uc_side := 9 ;
16665: LD_ADDR_OWVAR 20
16669: PUSH
16670: LD_INT 9
16672: ST_TO_ADDR
// uc_nation := 2 ;
16673: LD_ADDR_OWVAR 21
16677: PUSH
16678: LD_INT 2
16680: ST_TO_ADDR
// hc_name := Dark Warrior ;
16681: LD_ADDR_OWVAR 26
16685: PUSH
16686: LD_STRING Dark Warrior
16688: ST_TO_ADDR
// hc_gallery :=  ;
16689: LD_ADDR_OWVAR 33
16693: PUSH
16694: LD_STRING 
16696: ST_TO_ADDR
// hc_noskilllimit := true ;
16697: LD_ADDR_OWVAR 76
16701: PUSH
16702: LD_INT 1
16704: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16705: LD_ADDR_OWVAR 31
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: LD_INT 30
16718: PUSH
16719: LD_INT 30
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: ST_TO_ADDR
// un := CreateHuman ;
16728: LD_ADDR_VAR 0 3
16732: PUSH
16733: CALL_OW 44
16737: ST_TO_ADDR
// hc_noskilllimit := false ;
16738: LD_ADDR_OWVAR 76
16742: PUSH
16743: LD_INT 0
16745: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16746: LD_VAR 0 3
16750: PPUSH
16751: LD_INT 1
16753: PPUSH
16754: CALL_OW 51
// ToLua ( playRanger() ) ;
16758: LD_STRING playRanger()
16760: PPUSH
16761: CALL_OW 559
// p := 0 ;
16765: LD_ADDR_VAR 0 2
16769: PUSH
16770: LD_INT 0
16772: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16773: LD_INT 35
16775: PPUSH
16776: CALL_OW 67
// p := p + 1 ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_VAR 0 2
16789: PUSH
16790: LD_INT 1
16792: PLUS
16793: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16794: LD_VAR 0 3
16798: PPUSH
16799: CALL_OW 256
16803: PUSH
16804: LD_INT 1000
16806: LESS
16807: IFFALSE 16821
// SetLives ( un , 1000 ) ;
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_INT 1000
16816: PPUSH
16817: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16821: LD_VAR 0 3
16825: PPUSH
16826: LD_INT 81
16828: PUSH
16829: LD_OWVAR 2
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 91
16840: PUSH
16841: LD_VAR 0 3
16845: PUSH
16846: LD_INT 30
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PPUSH
16858: CALL_OW 69
16862: PPUSH
16863: LD_VAR 0 3
16867: PPUSH
16868: CALL_OW 74
16872: PPUSH
16873: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16877: LD_VAR 0 2
16881: PUSH
16882: LD_INT 80
16884: GREATER
16885: PUSH
16886: LD_VAR 0 3
16890: PPUSH
16891: CALL_OW 301
16895: OR
16896: IFFALSE 16773
// if un then
16898: LD_VAR 0 3
16902: IFFALSE 16913
// RemoveUnit ( un ) ;
16904: LD_VAR 0 3
16908: PPUSH
16909: CALL_OW 64
// end ;
16913: PPOPN 3
16915: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16916: LD_EXP 81
16920: IFFALSE 17036
16922: GO 16924
16924: DISABLE
16925: LD_INT 0
16927: PPUSH
16928: PPUSH
16929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_INT 81
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 21
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16966: LD_STRING playComputer()
16968: PPUSH
16969: CALL_OW 559
// if not tmp then
16973: LD_VAR 0 2
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17036
// for i in tmp do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: LD_VAR 0 2
16991: PUSH
16992: FOR_IN
16993: IFFALSE 17034
// for j := 1 to 4 do
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: DOUBLE
17001: LD_INT 1
17003: DEC
17004: ST_TO_ADDR
17005: LD_INT 4
17007: PUSH
17008: FOR_TO
17009: IFFALSE 17030
// SetSkill ( i , j , 10 ) ;
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_VAR 0 3
17020: PPUSH
17021: LD_INT 10
17023: PPUSH
17024: CALL_OW 237
17028: GO 17008
17030: POP
17031: POP
17032: GO 16992
17034: POP
17035: POP
// end ;
17036: PPOPN 3
17038: END
// every 0 0$1 trigger s30 do var i , tmp ;
17039: LD_EXP 82
17043: IFFALSE 17112
17045: GO 17047
17047: DISABLE
17048: LD_INT 0
17050: PPUSH
17051: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17052: LD_ADDR_VAR 0 2
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_OWVAR 2
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: ST_TO_ADDR
// if not tmp then
17074: LD_VAR 0 2
17078: NOT
17079: IFFALSE 17083
// exit ;
17081: GO 17112
// for i in tmp do
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_VAR 0 2
17092: PUSH
17093: FOR_IN
17094: IFFALSE 17110
// SetLives ( i , 300 ) ;
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_INT 300
17103: PPUSH
17104: CALL_OW 234
17108: GO 17093
17110: POP
17111: POP
// end ;
17112: PPOPN 2
17114: END
// every 0 0$1 trigger s60 do var i , tmp ;
17115: LD_EXP 83
17119: IFFALSE 17188
17121: GO 17123
17123: DISABLE
17124: LD_INT 0
17126: PPUSH
17127: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17128: LD_ADDR_VAR 0 2
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_OWVAR 2
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 69
17149: ST_TO_ADDR
// if not tmp then
17150: LD_VAR 0 2
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17188
// for i in tmp do
17159: LD_ADDR_VAR 0 1
17163: PUSH
17164: LD_VAR 0 2
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17186
// SetLives ( i , 600 ) ;
17172: LD_VAR 0 1
17176: PPUSH
17177: LD_INT 600
17179: PPUSH
17180: CALL_OW 234
17184: GO 17169
17186: POP
17187: POP
// end ;
17188: PPOPN 2
17190: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17191: LD_INT 0
17193: PPUSH
// case cmd of 301 :
17194: LD_VAR 0 1
17198: PUSH
17199: LD_INT 301
17201: DOUBLE
17202: EQUAL
17203: IFTRUE 17207
17205: GO 17239
17207: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17208: LD_VAR 0 6
17212: PPUSH
17213: LD_VAR 0 7
17217: PPUSH
17218: LD_VAR 0 8
17222: PPUSH
17223: LD_VAR 0 4
17227: PPUSH
17228: LD_VAR 0 5
17232: PPUSH
17233: CALL 18440 0 5
17237: GO 17360
17239: LD_INT 302
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17284
17247: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17248: LD_VAR 0 6
17252: PPUSH
17253: LD_VAR 0 7
17257: PPUSH
17258: LD_VAR 0 8
17262: PPUSH
17263: LD_VAR 0 9
17267: PPUSH
17268: LD_VAR 0 4
17272: PPUSH
17273: LD_VAR 0 5
17277: PPUSH
17278: CALL 18531 0 6
17282: GO 17360
17284: LD_INT 303
17286: DOUBLE
17287: EQUAL
17288: IFTRUE 17292
17290: GO 17329
17292: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17293: LD_VAR 0 6
17297: PPUSH
17298: LD_VAR 0 7
17302: PPUSH
17303: LD_VAR 0 8
17307: PPUSH
17308: LD_VAR 0 9
17312: PPUSH
17313: LD_VAR 0 4
17317: PPUSH
17318: LD_VAR 0 5
17322: PPUSH
17323: CALL 17365 0 6
17327: GO 17360
17329: LD_INT 304
17331: DOUBLE
17332: EQUAL
17333: IFTRUE 17337
17335: GO 17359
17337: POP
// hHackTeleport ( unit , x , y ) ; end ;
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_VAR 0 4
17347: PPUSH
17348: LD_VAR 0 5
17352: PPUSH
17353: CALL 19124 0 3
17357: GO 17360
17359: POP
// end ;
17360: LD_VAR 0 12
17364: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17365: LD_INT 0
17367: PPUSH
17368: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17369: LD_VAR 0 1
17373: PUSH
17374: LD_INT 1
17376: LESS
17377: PUSH
17378: LD_VAR 0 1
17382: PUSH
17383: LD_INT 3
17385: GREATER
17386: OR
17387: PUSH
17388: LD_VAR 0 5
17392: PPUSH
17393: LD_VAR 0 6
17397: PPUSH
17398: CALL_OW 428
17402: OR
17403: IFFALSE 17407
// exit ;
17405: GO 18127
// uc_side := your_side ;
17407: LD_ADDR_OWVAR 20
17411: PUSH
17412: LD_OWVAR 2
17416: ST_TO_ADDR
// uc_nation := nation ;
17417: LD_ADDR_OWVAR 21
17421: PUSH
17422: LD_VAR 0 1
17426: ST_TO_ADDR
// bc_level = 1 ;
17427: LD_ADDR_OWVAR 43
17431: PUSH
17432: LD_INT 1
17434: ST_TO_ADDR
// case btype of 1 :
17435: LD_VAR 0 2
17439: PUSH
17440: LD_INT 1
17442: DOUBLE
17443: EQUAL
17444: IFTRUE 17448
17446: GO 17459
17448: POP
// bc_type := b_depot ; 2 :
17449: LD_ADDR_OWVAR 42
17453: PUSH
17454: LD_INT 0
17456: ST_TO_ADDR
17457: GO 18071
17459: LD_INT 2
17461: DOUBLE
17462: EQUAL
17463: IFTRUE 17467
17465: GO 17478
17467: POP
// bc_type := b_warehouse ; 3 :
17468: LD_ADDR_OWVAR 42
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
17476: GO 18071
17478: LD_INT 3
17480: DOUBLE
17481: EQUAL
17482: IFTRUE 17486
17484: GO 17497
17486: POP
// bc_type := b_lab ; 4 .. 9 :
17487: LD_ADDR_OWVAR 42
17491: PUSH
17492: LD_INT 6
17494: ST_TO_ADDR
17495: GO 18071
17497: LD_INT 4
17499: DOUBLE
17500: GREATEREQUAL
17501: IFFALSE 17509
17503: LD_INT 9
17505: DOUBLE
17506: LESSEQUAL
17507: IFTRUE 17511
17509: GO 17563
17511: POP
// begin bc_type := b_lab_half ;
17512: LD_ADDR_OWVAR 42
17516: PUSH
17517: LD_INT 7
17519: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17520: LD_ADDR_OWVAR 44
17524: PUSH
17525: LD_INT 10
17527: PUSH
17528: LD_INT 11
17530: PUSH
17531: LD_INT 12
17533: PUSH
17534: LD_INT 15
17536: PUSH
17537: LD_INT 14
17539: PUSH
17540: LD_INT 13
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PUSH
17551: LD_VAR 0 2
17555: PUSH
17556: LD_INT 3
17558: MINUS
17559: ARRAY
17560: ST_TO_ADDR
// end ; 10 .. 13 :
17561: GO 18071
17563: LD_INT 10
17565: DOUBLE
17566: GREATEREQUAL
17567: IFFALSE 17575
17569: LD_INT 13
17571: DOUBLE
17572: LESSEQUAL
17573: IFTRUE 17577
17575: GO 17654
17577: POP
// begin bc_type := b_lab_full ;
17578: LD_ADDR_OWVAR 42
17582: PUSH
17583: LD_INT 8
17585: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17586: LD_ADDR_OWVAR 44
17590: PUSH
17591: LD_INT 10
17593: PUSH
17594: LD_INT 12
17596: PUSH
17597: LD_INT 14
17599: PUSH
17600: LD_INT 13
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 9
17616: MINUS
17617: ARRAY
17618: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17619: LD_ADDR_OWVAR 45
17623: PUSH
17624: LD_INT 11
17626: PUSH
17627: LD_INT 15
17629: PUSH
17630: LD_INT 12
17632: PUSH
17633: LD_INT 15
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: PUSH
17642: LD_VAR 0 2
17646: PUSH
17647: LD_INT 9
17649: MINUS
17650: ARRAY
17651: ST_TO_ADDR
// end ; 14 :
17652: GO 18071
17654: LD_INT 14
17656: DOUBLE
17657: EQUAL
17658: IFTRUE 17662
17660: GO 17673
17662: POP
// bc_type := b_workshop ; 15 :
17663: LD_ADDR_OWVAR 42
17667: PUSH
17668: LD_INT 2
17670: ST_TO_ADDR
17671: GO 18071
17673: LD_INT 15
17675: DOUBLE
17676: EQUAL
17677: IFTRUE 17681
17679: GO 17692
17681: POP
// bc_type := b_factory ; 16 :
17682: LD_ADDR_OWVAR 42
17686: PUSH
17687: LD_INT 3
17689: ST_TO_ADDR
17690: GO 18071
17692: LD_INT 16
17694: DOUBLE
17695: EQUAL
17696: IFTRUE 17700
17698: GO 17711
17700: POP
// bc_type := b_ext_gun ; 17 :
17701: LD_ADDR_OWVAR 42
17705: PUSH
17706: LD_INT 17
17708: ST_TO_ADDR
17709: GO 18071
17711: LD_INT 17
17713: DOUBLE
17714: EQUAL
17715: IFTRUE 17719
17717: GO 17747
17719: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17720: LD_ADDR_OWVAR 42
17724: PUSH
17725: LD_INT 19
17727: PUSH
17728: LD_INT 23
17730: PUSH
17731: LD_INT 19
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: PUSH
17739: LD_VAR 0 1
17743: ARRAY
17744: ST_TO_ADDR
17745: GO 18071
17747: LD_INT 18
17749: DOUBLE
17750: EQUAL
17751: IFTRUE 17755
17753: GO 17766
17755: POP
// bc_type := b_ext_radar ; 19 :
17756: LD_ADDR_OWVAR 42
17760: PUSH
17761: LD_INT 20
17763: ST_TO_ADDR
17764: GO 18071
17766: LD_INT 19
17768: DOUBLE
17769: EQUAL
17770: IFTRUE 17774
17772: GO 17785
17774: POP
// bc_type := b_ext_radio ; 20 :
17775: LD_ADDR_OWVAR 42
17779: PUSH
17780: LD_INT 22
17782: ST_TO_ADDR
17783: GO 18071
17785: LD_INT 20
17787: DOUBLE
17788: EQUAL
17789: IFTRUE 17793
17791: GO 17804
17793: POP
// bc_type := b_ext_siberium ; 21 :
17794: LD_ADDR_OWVAR 42
17798: PUSH
17799: LD_INT 21
17801: ST_TO_ADDR
17802: GO 18071
17804: LD_INT 21
17806: DOUBLE
17807: EQUAL
17808: IFTRUE 17812
17810: GO 17823
17812: POP
// bc_type := b_ext_computer ; 22 :
17813: LD_ADDR_OWVAR 42
17817: PUSH
17818: LD_INT 24
17820: ST_TO_ADDR
17821: GO 18071
17823: LD_INT 22
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 17842
17831: POP
// bc_type := b_ext_track ; 23 :
17832: LD_ADDR_OWVAR 42
17836: PUSH
17837: LD_INT 16
17839: ST_TO_ADDR
17840: GO 18071
17842: LD_INT 23
17844: DOUBLE
17845: EQUAL
17846: IFTRUE 17850
17848: GO 17861
17850: POP
// bc_type := b_ext_laser ; 24 :
17851: LD_ADDR_OWVAR 42
17855: PUSH
17856: LD_INT 25
17858: ST_TO_ADDR
17859: GO 18071
17861: LD_INT 24
17863: DOUBLE
17864: EQUAL
17865: IFTRUE 17869
17867: GO 17880
17869: POP
// bc_type := b_control_tower ; 25 :
17870: LD_ADDR_OWVAR 42
17874: PUSH
17875: LD_INT 36
17877: ST_TO_ADDR
17878: GO 18071
17880: LD_INT 25
17882: DOUBLE
17883: EQUAL
17884: IFTRUE 17888
17886: GO 17899
17888: POP
// bc_type := b_breastwork ; 26 :
17889: LD_ADDR_OWVAR 42
17893: PUSH
17894: LD_INT 31
17896: ST_TO_ADDR
17897: GO 18071
17899: LD_INT 26
17901: DOUBLE
17902: EQUAL
17903: IFTRUE 17907
17905: GO 17918
17907: POP
// bc_type := b_bunker ; 27 :
17908: LD_ADDR_OWVAR 42
17912: PUSH
17913: LD_INT 32
17915: ST_TO_ADDR
17916: GO 18071
17918: LD_INT 27
17920: DOUBLE
17921: EQUAL
17922: IFTRUE 17926
17924: GO 17937
17926: POP
// bc_type := b_turret ; 28 :
17927: LD_ADDR_OWVAR 42
17931: PUSH
17932: LD_INT 33
17934: ST_TO_ADDR
17935: GO 18071
17937: LD_INT 28
17939: DOUBLE
17940: EQUAL
17941: IFTRUE 17945
17943: GO 17956
17945: POP
// bc_type := b_armoury ; 29 :
17946: LD_ADDR_OWVAR 42
17950: PUSH
17951: LD_INT 4
17953: ST_TO_ADDR
17954: GO 18071
17956: LD_INT 29
17958: DOUBLE
17959: EQUAL
17960: IFTRUE 17964
17962: GO 17975
17964: POP
// bc_type := b_barracks ; 30 :
17965: LD_ADDR_OWVAR 42
17969: PUSH
17970: LD_INT 5
17972: ST_TO_ADDR
17973: GO 18071
17975: LD_INT 30
17977: DOUBLE
17978: EQUAL
17979: IFTRUE 17983
17981: GO 17994
17983: POP
// bc_type := b_solar_power ; 31 :
17984: LD_ADDR_OWVAR 42
17988: PUSH
17989: LD_INT 27
17991: ST_TO_ADDR
17992: GO 18071
17994: LD_INT 31
17996: DOUBLE
17997: EQUAL
17998: IFTRUE 18002
18000: GO 18013
18002: POP
// bc_type := b_oil_power ; 32 :
18003: LD_ADDR_OWVAR 42
18007: PUSH
18008: LD_INT 26
18010: ST_TO_ADDR
18011: GO 18071
18013: LD_INT 32
18015: DOUBLE
18016: EQUAL
18017: IFTRUE 18021
18019: GO 18032
18021: POP
// bc_type := b_siberite_power ; 33 :
18022: LD_ADDR_OWVAR 42
18026: PUSH
18027: LD_INT 28
18029: ST_TO_ADDR
18030: GO 18071
18032: LD_INT 33
18034: DOUBLE
18035: EQUAL
18036: IFTRUE 18040
18038: GO 18051
18040: POP
// bc_type := b_oil_mine ; 34 :
18041: LD_ADDR_OWVAR 42
18045: PUSH
18046: LD_INT 29
18048: ST_TO_ADDR
18049: GO 18071
18051: LD_INT 34
18053: DOUBLE
18054: EQUAL
18055: IFTRUE 18059
18057: GO 18070
18059: POP
// bc_type := b_siberite_mine ; end ;
18060: LD_ADDR_OWVAR 42
18064: PUSH
18065: LD_INT 30
18067: ST_TO_ADDR
18068: GO 18071
18070: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18071: LD_ADDR_VAR 0 8
18075: PUSH
18076: LD_VAR 0 5
18080: PPUSH
18081: LD_VAR 0 6
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: CALL_OW 47
18095: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18096: LD_OWVAR 42
18100: PUSH
18101: LD_INT 32
18103: PUSH
18104: LD_INT 33
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: IN
18111: IFFALSE 18127
// PlaceWeaponTurret ( b , weapon ) ;
18113: LD_VAR 0 8
18117: PPUSH
18118: LD_VAR 0 4
18122: PPUSH
18123: CALL_OW 431
// end ;
18127: LD_VAR 0 7
18131: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18132: LD_INT 0
18134: PPUSH
18135: PPUSH
18136: PPUSH
18137: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18138: LD_ADDR_VAR 0 4
18142: PUSH
18143: LD_INT 22
18145: PUSH
18146: LD_OWVAR 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: LD_INT 30
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 30
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: ST_TO_ADDR
// if not tmp then
18192: LD_VAR 0 4
18196: NOT
18197: IFFALSE 18201
// exit ;
18199: GO 18260
// for i in tmp do
18201: LD_ADDR_VAR 0 2
18205: PUSH
18206: LD_VAR 0 4
18210: PUSH
18211: FOR_IN
18212: IFFALSE 18258
// for j = 1 to 3 do
18214: LD_ADDR_VAR 0 3
18218: PUSH
18219: DOUBLE
18220: LD_INT 1
18222: DEC
18223: ST_TO_ADDR
18224: LD_INT 3
18226: PUSH
18227: FOR_TO
18228: IFFALSE 18254
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18230: LD_VAR 0 2
18234: PPUSH
18235: CALL_OW 274
18239: PPUSH
18240: LD_VAR 0 3
18244: PPUSH
18245: LD_INT 99999
18247: PPUSH
18248: CALL_OW 277
18252: GO 18227
18254: POP
18255: POP
18256: GO 18211
18258: POP
18259: POP
// end ;
18260: LD_VAR 0 1
18264: RET
// export function hHackSetLevel10 ; var i , j ; begin
18265: LD_INT 0
18267: PPUSH
18268: PPUSH
18269: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18270: LD_ADDR_VAR 0 2
18274: PUSH
18275: LD_INT 21
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 69
18289: PUSH
18290: FOR_IN
18291: IFFALSE 18343
// if IsSelected ( i ) then
18293: LD_VAR 0 2
18297: PPUSH
18298: CALL_OW 306
18302: IFFALSE 18341
// begin for j := 1 to 4 do
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: DOUBLE
18310: LD_INT 1
18312: DEC
18313: ST_TO_ADDR
18314: LD_INT 4
18316: PUSH
18317: FOR_TO
18318: IFFALSE 18339
// SetSkill ( i , j , 10 ) ;
18320: LD_VAR 0 2
18324: PPUSH
18325: LD_VAR 0 3
18329: PPUSH
18330: LD_INT 10
18332: PPUSH
18333: CALL_OW 237
18337: GO 18317
18339: POP
18340: POP
// end ;
18341: GO 18290
18343: POP
18344: POP
// end ;
18345: LD_VAR 0 1
18349: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18350: LD_INT 0
18352: PPUSH
18353: PPUSH
18354: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: LD_INT 22
18362: PUSH
18363: LD_OWVAR 2
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 21
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 69
18390: PUSH
18391: FOR_IN
18392: IFFALSE 18433
// begin for j := 1 to 4 do
18394: LD_ADDR_VAR 0 3
18398: PUSH
18399: DOUBLE
18400: LD_INT 1
18402: DEC
18403: ST_TO_ADDR
18404: LD_INT 4
18406: PUSH
18407: FOR_TO
18408: IFFALSE 18429
// SetSkill ( i , j , 10 ) ;
18410: LD_VAR 0 2
18414: PPUSH
18415: LD_VAR 0 3
18419: PPUSH
18420: LD_INT 10
18422: PPUSH
18423: CALL_OW 237
18427: GO 18407
18429: POP
18430: POP
// end ;
18431: GO 18391
18433: POP
18434: POP
// end ;
18435: LD_VAR 0 1
18439: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18440: LD_INT 0
18442: PPUSH
// uc_side := your_side ;
18443: LD_ADDR_OWVAR 20
18447: PUSH
18448: LD_OWVAR 2
18452: ST_TO_ADDR
// uc_nation := nation ;
18453: LD_ADDR_OWVAR 21
18457: PUSH
18458: LD_VAR 0 1
18462: ST_TO_ADDR
// InitHc ;
18463: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18467: LD_INT 0
18469: PPUSH
18470: LD_VAR 0 2
18474: PPUSH
18475: LD_VAR 0 3
18479: PPUSH
18480: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18484: LD_VAR 0 4
18488: PPUSH
18489: LD_VAR 0 5
18493: PPUSH
18494: CALL_OW 428
18498: PUSH
18499: LD_INT 0
18501: EQUAL
18502: IFFALSE 18526
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18504: CALL_OW 44
18508: PPUSH
18509: LD_VAR 0 4
18513: PPUSH
18514: LD_VAR 0 5
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 48
// end ;
18526: LD_VAR 0 6
18530: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18531: LD_INT 0
18533: PPUSH
18534: PPUSH
// uc_side := your_side ;
18535: LD_ADDR_OWVAR 20
18539: PUSH
18540: LD_OWVAR 2
18544: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18545: LD_VAR 0 1
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: LD_INT 4
18561: PUSH
18562: LD_INT 5
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: IN
18572: IFFALSE 18584
// uc_nation := nation_american else
18574: LD_ADDR_OWVAR 21
18578: PUSH
18579: LD_INT 1
18581: ST_TO_ADDR
18582: GO 18627
// if chassis in [ 11 , 12 , 13 , 14 ] then
18584: LD_VAR 0 1
18588: PUSH
18589: LD_INT 11
18591: PUSH
18592: LD_INT 12
18594: PUSH
18595: LD_INT 13
18597: PUSH
18598: LD_INT 14
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: IN
18607: IFFALSE 18619
// uc_nation := nation_arabian else
18609: LD_ADDR_OWVAR 21
18613: PUSH
18614: LD_INT 2
18616: ST_TO_ADDR
18617: GO 18627
// uc_nation := nation_russian ;
18619: LD_ADDR_OWVAR 21
18623: PUSH
18624: LD_INT 3
18626: ST_TO_ADDR
// vc_chassis := chassis ;
18627: LD_ADDR_OWVAR 37
18631: PUSH
18632: LD_VAR 0 1
18636: ST_TO_ADDR
// vc_engine := engine ;
18637: LD_ADDR_OWVAR 39
18641: PUSH
18642: LD_VAR 0 2
18646: ST_TO_ADDR
// vc_control := control ;
18647: LD_ADDR_OWVAR 38
18651: PUSH
18652: LD_VAR 0 3
18656: ST_TO_ADDR
// vc_weapon := weapon ;
18657: LD_ADDR_OWVAR 40
18661: PUSH
18662: LD_VAR 0 4
18666: ST_TO_ADDR
// un := CreateVehicle ;
18667: LD_ADDR_VAR 0 8
18671: PUSH
18672: CALL_OW 45
18676: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18677: LD_VAR 0 8
18681: PPUSH
18682: LD_INT 0
18684: PPUSH
18685: LD_INT 5
18687: PPUSH
18688: CALL_OW 12
18692: PPUSH
18693: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18697: LD_VAR 0 8
18701: PPUSH
18702: LD_VAR 0 5
18706: PPUSH
18707: LD_VAR 0 6
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 48
// end ;
18719: LD_VAR 0 7
18723: RET
// export hInvincible ; every 1 do
18724: GO 18726
18726: DISABLE
// hInvincible := [ ] ;
18727: LD_ADDR_EXP 84
18731: PUSH
18732: EMPTY
18733: ST_TO_ADDR
18734: END
// every 10 do var i ;
18735: GO 18737
18737: DISABLE
18738: LD_INT 0
18740: PPUSH
// begin enable ;
18741: ENABLE
// if not hInvincible then
18742: LD_EXP 84
18746: NOT
18747: IFFALSE 18751
// exit ;
18749: GO 18795
// for i in hInvincible do
18751: LD_ADDR_VAR 0 1
18755: PUSH
18756: LD_EXP 84
18760: PUSH
18761: FOR_IN
18762: IFFALSE 18793
// if GetLives ( i ) < 1000 then
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 256
18773: PUSH
18774: LD_INT 1000
18776: LESS
18777: IFFALSE 18791
// SetLives ( i , 1000 ) ;
18779: LD_VAR 0 1
18783: PPUSH
18784: LD_INT 1000
18786: PPUSH
18787: CALL_OW 234
18791: GO 18761
18793: POP
18794: POP
// end ;
18795: PPOPN 1
18797: END
// export function hHackInvincible ; var i ; begin
18798: LD_INT 0
18800: PPUSH
18801: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18802: LD_ADDR_VAR 0 2
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 21
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL_OW 69
18839: PUSH
18840: FOR_IN
18841: IFFALSE 18902
// if IsSelected ( i ) then
18843: LD_VAR 0 2
18847: PPUSH
18848: CALL_OW 306
18852: IFFALSE 18900
// begin if i in hInvincible then
18854: LD_VAR 0 2
18858: PUSH
18859: LD_EXP 84
18863: IN
18864: IFFALSE 18884
// hInvincible := hInvincible diff i else
18866: LD_ADDR_EXP 84
18870: PUSH
18871: LD_EXP 84
18875: PUSH
18876: LD_VAR 0 2
18880: DIFF
18881: ST_TO_ADDR
18882: GO 18900
// hInvincible := hInvincible union i ;
18884: LD_ADDR_EXP 84
18888: PUSH
18889: LD_EXP 84
18893: PUSH
18894: LD_VAR 0 2
18898: UNION
18899: ST_TO_ADDR
// end ;
18900: GO 18840
18902: POP
18903: POP
// end ;
18904: LD_VAR 0 1
18908: RET
// export function hHackInvisible ; var i , j ; begin
18909: LD_INT 0
18911: PPUSH
18912: PPUSH
18913: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18914: LD_ADDR_VAR 0 2
18918: PUSH
18919: LD_INT 21
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PPUSH
18929: CALL_OW 69
18933: PUSH
18934: FOR_IN
18935: IFFALSE 18959
// if IsSelected ( i ) then
18937: LD_VAR 0 2
18941: PPUSH
18942: CALL_OW 306
18946: IFFALSE 18957
// ComForceInvisible ( i ) ;
18948: LD_VAR 0 2
18952: PPUSH
18953: CALL_OW 496
18957: GO 18934
18959: POP
18960: POP
// end ;
18961: LD_VAR 0 1
18965: RET
// export function hHackChangeYourSide ; begin
18966: LD_INT 0
18968: PPUSH
// if your_side = 8 then
18969: LD_OWVAR 2
18973: PUSH
18974: LD_INT 8
18976: EQUAL
18977: IFFALSE 18989
// your_side := 0 else
18979: LD_ADDR_OWVAR 2
18983: PUSH
18984: LD_INT 0
18986: ST_TO_ADDR
18987: GO 19003
// your_side := your_side + 1 ;
18989: LD_ADDR_OWVAR 2
18993: PUSH
18994: LD_OWVAR 2
18998: PUSH
18999: LD_INT 1
19001: PLUS
19002: ST_TO_ADDR
// end ;
19003: LD_VAR 0 1
19007: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19008: LD_INT 0
19010: PPUSH
19011: PPUSH
19012: PPUSH
// for i in all_units do
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: LD_OWVAR 3
19022: PUSH
19023: FOR_IN
19024: IFFALSE 19102
// if IsSelected ( i ) then
19026: LD_VAR 0 2
19030: PPUSH
19031: CALL_OW 306
19035: IFFALSE 19100
// begin j := GetSide ( i ) ;
19037: LD_ADDR_VAR 0 3
19041: PUSH
19042: LD_VAR 0 2
19046: PPUSH
19047: CALL_OW 255
19051: ST_TO_ADDR
// if j = 8 then
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 8
19059: EQUAL
19060: IFFALSE 19072
// j := 0 else
19062: LD_ADDR_VAR 0 3
19066: PUSH
19067: LD_INT 0
19069: ST_TO_ADDR
19070: GO 19086
// j := j + 1 ;
19072: LD_ADDR_VAR 0 3
19076: PUSH
19077: LD_VAR 0 3
19081: PUSH
19082: LD_INT 1
19084: PLUS
19085: ST_TO_ADDR
// SetSide ( i , j ) ;
19086: LD_VAR 0 2
19090: PPUSH
19091: LD_VAR 0 3
19095: PPUSH
19096: CALL_OW 235
// end ;
19100: GO 19023
19102: POP
19103: POP
// end ;
19104: LD_VAR 0 1
19108: RET
// export function hHackFog ; begin
19109: LD_INT 0
19111: PPUSH
// FogOff ( true ) ;
19112: LD_INT 1
19114: PPUSH
19115: CALL_OW 344
// end ;
19119: LD_VAR 0 1
19123: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19124: LD_INT 0
19126: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19127: LD_VAR 0 1
19131: PPUSH
19132: LD_VAR 0 2
19136: PPUSH
19137: LD_VAR 0 3
19141: PPUSH
19142: LD_INT 1
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 483
// CenterOnXY ( x , y ) ;
19152: LD_VAR 0 2
19156: PPUSH
19157: LD_VAR 0 3
19161: PPUSH
19162: CALL_OW 84
// end ; end_of_file
19166: LD_VAR 0 4
19170: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
19176: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19177: LD_VAR 0 1
19181: PPUSH
19182: CALL_OW 264
19186: PUSH
19187: LD_EXP 11
19191: EQUAL
19192: IFFALSE 19264
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19194: LD_INT 68
19196: PPUSH
19197: LD_VAR 0 1
19201: PPUSH
19202: CALL_OW 255
19206: PPUSH
19207: CALL_OW 321
19211: PUSH
19212: LD_INT 2
19214: EQUAL
19215: IFFALSE 19227
// eff := 70 else
19217: LD_ADDR_VAR 0 4
19221: PUSH
19222: LD_INT 70
19224: ST_TO_ADDR
19225: GO 19235
// eff := 30 ;
19227: LD_ADDR_VAR 0 4
19231: PUSH
19232: LD_INT 30
19234: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 250
19244: PPUSH
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL_OW 251
19254: PPUSH
19255: LD_VAR 0 4
19259: PPUSH
19260: CALL_OW 495
// end ; end ;
19264: LD_VAR 0 2
19268: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19269: LD_INT 0
19271: PPUSH
// end ;
19272: LD_VAR 0 4
19276: RET
// export function SOS_Command ( cmd ) ; begin
19277: LD_INT 0
19279: PPUSH
// end ;
19280: LD_VAR 0 2
19284: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19285: LD_INT 0
19287: PPUSH
// end ;
19288: LD_VAR 0 6
19292: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19293: LD_INT 0
19295: PPUSH
19296: PPUSH
// if not vehicle or not factory then
19297: LD_VAR 0 1
19301: NOT
19302: PUSH
19303: LD_VAR 0 2
19307: NOT
19308: OR
19309: IFFALSE 19313
// exit ;
19311: GO 19544
// if factoryWaypoints >= factory then
19313: LD_EXP 85
19317: PUSH
19318: LD_VAR 0 2
19322: GREATEREQUAL
19323: IFFALSE 19544
// if factoryWaypoints [ factory ] then
19325: LD_EXP 85
19329: PUSH
19330: LD_VAR 0 2
19334: ARRAY
19335: IFFALSE 19544
// begin if GetControl ( vehicle ) = control_manual then
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 263
19346: PUSH
19347: LD_INT 1
19349: EQUAL
19350: IFFALSE 19431
// begin driver := IsDrivenBy ( vehicle ) ;
19352: LD_ADDR_VAR 0 4
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19367: LD_VAR 0 4
19371: PPUSH
19372: LD_EXP 85
19376: PUSH
19377: LD_VAR 0 2
19381: ARRAY
19382: PUSH
19383: LD_INT 3
19385: ARRAY
19386: PPUSH
19387: LD_EXP 85
19391: PUSH
19392: LD_VAR 0 2
19396: ARRAY
19397: PUSH
19398: LD_INT 4
19400: ARRAY
19401: PPUSH
19402: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19406: LD_VAR 0 4
19410: PPUSH
19411: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19415: LD_VAR 0 4
19419: PPUSH
19420: LD_VAR 0 2
19424: PPUSH
19425: CALL_OW 180
// end else
19429: GO 19544
// if GetControl ( vehicle ) = control_remote then
19431: LD_VAR 0 1
19435: PPUSH
19436: CALL_OW 263
19440: PUSH
19441: LD_INT 2
19443: EQUAL
19444: IFFALSE 19505
// begin wait ( 0 0$2 ) ;
19446: LD_INT 70
19448: PPUSH
19449: CALL_OW 67
// if Connect ( vehicle ) then
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL 31768 0 1
19462: IFFALSE 19503
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19464: LD_VAR 0 1
19468: PPUSH
19469: LD_EXP 85
19473: PUSH
19474: LD_VAR 0 2
19478: ARRAY
19479: PUSH
19480: LD_INT 3
19482: ARRAY
19483: PPUSH
19484: LD_EXP 85
19488: PUSH
19489: LD_VAR 0 2
19493: ARRAY
19494: PUSH
19495: LD_INT 4
19497: ARRAY
19498: PPUSH
19499: CALL_OW 171
// end else
19503: GO 19544
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
19505: LD_VAR 0 1
19509: PPUSH
19510: LD_EXP 85
19514: PUSH
19515: LD_VAR 0 2
19519: ARRAY
19520: PUSH
19521: LD_INT 3
19523: ARRAY
19524: PPUSH
19525: LD_EXP 85
19529: PUSH
19530: LD_VAR 0 2
19534: ARRAY
19535: PUSH
19536: LD_INT 4
19538: ARRAY
19539: PPUSH
19540: CALL_OW 171
// end ; end ;
19544: LD_VAR 0 3
19548: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19549: LD_INT 0
19551: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19552: LD_VAR 0 1
19556: PUSH
19557: LD_INT 250
19559: EQUAL
19560: PUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: CALL_OW 264
19570: PUSH
19571: LD_EXP 14
19575: EQUAL
19576: AND
19577: IFFALSE 19598
// MinerPlaceMine ( unit , x , y ) ;
19579: LD_VAR 0 2
19583: PPUSH
19584: LD_VAR 0 4
19588: PPUSH
19589: LD_VAR 0 5
19593: PPUSH
19594: CALL 22326 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19598: LD_VAR 0 1
19602: PUSH
19603: LD_INT 251
19605: EQUAL
19606: PUSH
19607: LD_VAR 0 2
19611: PPUSH
19612: CALL_OW 264
19616: PUSH
19617: LD_EXP 14
19621: EQUAL
19622: AND
19623: IFFALSE 19644
// MinerDetonateMine ( unit , x , y ) ;
19625: LD_VAR 0 2
19629: PPUSH
19630: LD_VAR 0 4
19634: PPUSH
19635: LD_VAR 0 5
19639: PPUSH
19640: CALL 22603 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19644: LD_VAR 0 1
19648: PUSH
19649: LD_INT 252
19651: EQUAL
19652: PUSH
19653: LD_VAR 0 2
19657: PPUSH
19658: CALL_OW 264
19662: PUSH
19663: LD_EXP 14
19667: EQUAL
19668: AND
19669: IFFALSE 19690
// MinerCreateMinefield ( unit , x , y ) ;
19671: LD_VAR 0 2
19675: PPUSH
19676: LD_VAR 0 4
19680: PPUSH
19681: LD_VAR 0 5
19685: PPUSH
19686: CALL 23020 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19690: LD_VAR 0 1
19694: PUSH
19695: LD_INT 253
19697: EQUAL
19698: PUSH
19699: LD_VAR 0 2
19703: PPUSH
19704: CALL_OW 257
19708: PUSH
19709: LD_INT 5
19711: EQUAL
19712: AND
19713: IFFALSE 19734
// ComBinocular ( unit , x , y ) ;
19715: LD_VAR 0 2
19719: PPUSH
19720: LD_VAR 0 4
19724: PPUSH
19725: LD_VAR 0 5
19729: PPUSH
19730: CALL 23391 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19734: LD_VAR 0 1
19738: PUSH
19739: LD_INT 254
19741: EQUAL
19742: PUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: CALL_OW 264
19752: PUSH
19753: LD_EXP 9
19757: EQUAL
19758: AND
19759: PUSH
19760: LD_VAR 0 3
19764: PPUSH
19765: CALL_OW 263
19769: PUSH
19770: LD_INT 3
19772: EQUAL
19773: AND
19774: IFFALSE 19790
// HackDestroyVehicle ( unit , selectedUnit ) ;
19776: LD_VAR 0 2
19780: PPUSH
19781: LD_VAR 0 3
19785: PPUSH
19786: CALL 21686 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19790: LD_VAR 0 1
19794: PUSH
19795: LD_INT 255
19797: EQUAL
19798: PUSH
19799: LD_VAR 0 2
19803: PPUSH
19804: CALL_OW 264
19808: PUSH
19809: LD_INT 14
19811: PUSH
19812: LD_INT 53
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: IN
19819: AND
19820: PUSH
19821: LD_VAR 0 4
19825: PPUSH
19826: LD_VAR 0 5
19830: PPUSH
19831: CALL_OW 488
19835: AND
19836: IFFALSE 19860
// CutTreeXYR ( unit , x , y , 12 ) ;
19838: LD_VAR 0 2
19842: PPUSH
19843: LD_VAR 0 4
19847: PPUSH
19848: LD_VAR 0 5
19852: PPUSH
19853: LD_INT 12
19855: PPUSH
19856: CALL 20252 0 4
// if cmd = 256 then
19860: LD_VAR 0 1
19864: PUSH
19865: LD_INT 256
19867: EQUAL
19868: IFFALSE 19889
// SetFactoryWaypoint ( unit , x , y ) ;
19870: LD_VAR 0 2
19874: PPUSH
19875: LD_VAR 0 4
19879: PPUSH
19880: LD_VAR 0 5
19884: PPUSH
19885: CALL 19894 0 3
// end ;
19889: LD_VAR 0 6
19893: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19894: LD_INT 0
19896: PPUSH
19897: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19898: LD_VAR 0 1
19902: NOT
19903: PUSH
19904: LD_VAR 0 2
19908: PPUSH
19909: LD_VAR 0 3
19913: PPUSH
19914: CALL_OW 488
19918: NOT
19919: OR
19920: PUSH
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL_OW 266
19930: PUSH
19931: LD_INT 3
19933: NONEQUAL
19934: PUSH
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL_OW 247
19944: PUSH
19945: LD_INT 1
19947: EQUAL
19948: NOT
19949: AND
19950: OR
19951: IFFALSE 19955
// exit ;
19953: GO 20104
// if GetType ( factory ) = unit_human then
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL_OW 247
19964: PUSH
19965: LD_INT 1
19967: EQUAL
19968: IFFALSE 19985
// factory := IsInUnit ( factory ) ;
19970: LD_ADDR_VAR 0 1
19974: PUSH
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 310
19984: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19985: LD_VAR 0 1
19989: PPUSH
19990: CALL_OW 266
19994: PUSH
19995: LD_INT 3
19997: NONEQUAL
19998: IFFALSE 20002
// exit ;
20000: GO 20104
// if HexInfo ( x , y ) = factory then
20002: LD_VAR 0 2
20006: PPUSH
20007: LD_VAR 0 3
20011: PPUSH
20012: CALL_OW 428
20016: PUSH
20017: LD_VAR 0 1
20021: EQUAL
20022: IFFALSE 20049
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20024: LD_ADDR_EXP 85
20028: PUSH
20029: LD_EXP 85
20033: PPUSH
20034: LD_VAR 0 1
20038: PPUSH
20039: LD_INT 0
20041: PPUSH
20042: CALL_OW 1
20046: ST_TO_ADDR
20047: GO 20100
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20049: LD_ADDR_EXP 85
20053: PUSH
20054: LD_EXP 85
20058: PPUSH
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_VAR 0 1
20068: PPUSH
20069: CALL_OW 255
20073: PUSH
20074: LD_VAR 0 1
20078: PUSH
20079: LD_VAR 0 2
20083: PUSH
20084: LD_VAR 0 3
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: PPUSH
20095: CALL_OW 1
20099: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20100: CALL 20109 0 0
// end ;
20104: LD_VAR 0 4
20108: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20109: LD_INT 0
20111: PPUSH
20112: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20113: LD_STRING resetFactoryWaypoint();
20115: PPUSH
20116: CALL_OW 559
// if factoryWaypoints then
20120: LD_EXP 85
20124: IFFALSE 20247
// begin for i := 1 to factoryWaypoints do
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: DOUBLE
20132: LD_INT 1
20134: DEC
20135: ST_TO_ADDR
20136: LD_EXP 85
20140: PUSH
20141: FOR_TO
20142: IFFALSE 20245
// if factoryWaypoints [ i ] then
20144: LD_EXP 85
20148: PUSH
20149: LD_VAR 0 2
20153: ARRAY
20154: IFFALSE 20243
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20156: LD_STRING setFactoryWaypointXY(
20158: PUSH
20159: LD_EXP 85
20163: PUSH
20164: LD_VAR 0 2
20168: ARRAY
20169: PUSH
20170: LD_INT 1
20172: ARRAY
20173: STR
20174: PUSH
20175: LD_STRING ,
20177: STR
20178: PUSH
20179: LD_EXP 85
20183: PUSH
20184: LD_VAR 0 2
20188: ARRAY
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: STR
20194: PUSH
20195: LD_STRING ,
20197: STR
20198: PUSH
20199: LD_EXP 85
20203: PUSH
20204: LD_VAR 0 2
20208: ARRAY
20209: PUSH
20210: LD_INT 3
20212: ARRAY
20213: STR
20214: PUSH
20215: LD_STRING ,
20217: STR
20218: PUSH
20219: LD_EXP 85
20223: PUSH
20224: LD_VAR 0 2
20228: ARRAY
20229: PUSH
20230: LD_INT 4
20232: ARRAY
20233: STR
20234: PUSH
20235: LD_STRING )
20237: STR
20238: PPUSH
20239: CALL_OW 559
20243: GO 20141
20245: POP
20246: POP
// end ; end ;
20247: LD_VAR 0 1
20251: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20252: LD_INT 0
20254: PPUSH
20255: PPUSH
20256: PPUSH
20257: PPUSH
20258: PPUSH
20259: PPUSH
20260: PPUSH
20261: PPUSH
20262: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20263: LD_VAR 0 1
20267: NOT
20268: PUSH
20269: LD_VAR 0 2
20273: PPUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: CALL_OW 488
20283: NOT
20284: OR
20285: PUSH
20286: LD_VAR 0 4
20290: NOT
20291: OR
20292: IFFALSE 20296
// exit ;
20294: GO 20636
// list := [ ] ;
20296: LD_ADDR_VAR 0 13
20300: PUSH
20301: EMPTY
20302: ST_TO_ADDR
// if x - r < 0 then
20303: LD_VAR 0 2
20307: PUSH
20308: LD_VAR 0 4
20312: MINUS
20313: PUSH
20314: LD_INT 0
20316: LESS
20317: IFFALSE 20329
// min_x := 0 else
20319: LD_ADDR_VAR 0 7
20323: PUSH
20324: LD_INT 0
20326: ST_TO_ADDR
20327: GO 20345
// min_x := x - r ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 2
20338: PUSH
20339: LD_VAR 0 4
20343: MINUS
20344: ST_TO_ADDR
// if y - r < 0 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_VAR 0 4
20354: MINUS
20355: PUSH
20356: LD_INT 0
20358: LESS
20359: IFFALSE 20371
// min_y := 0 else
20361: LD_ADDR_VAR 0 8
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
20369: GO 20387
// min_y := y - r ;
20371: LD_ADDR_VAR 0 8
20375: PUSH
20376: LD_VAR 0 3
20380: PUSH
20381: LD_VAR 0 4
20385: MINUS
20386: ST_TO_ADDR
// max_x := x + r ;
20387: LD_ADDR_VAR 0 9
20391: PUSH
20392: LD_VAR 0 2
20396: PUSH
20397: LD_VAR 0 4
20401: PLUS
20402: ST_TO_ADDR
// max_y := y + r ;
20403: LD_ADDR_VAR 0 10
20407: PUSH
20408: LD_VAR 0 3
20412: PUSH
20413: LD_VAR 0 4
20417: PLUS
20418: ST_TO_ADDR
// for _x = min_x to max_x do
20419: LD_ADDR_VAR 0 11
20423: PUSH
20424: DOUBLE
20425: LD_VAR 0 7
20429: DEC
20430: ST_TO_ADDR
20431: LD_VAR 0 9
20435: PUSH
20436: FOR_TO
20437: IFFALSE 20554
// for _y = min_y to max_y do
20439: LD_ADDR_VAR 0 12
20443: PUSH
20444: DOUBLE
20445: LD_VAR 0 8
20449: DEC
20450: ST_TO_ADDR
20451: LD_VAR 0 10
20455: PUSH
20456: FOR_TO
20457: IFFALSE 20550
// begin if not ValidHex ( _x , _y ) then
20459: LD_VAR 0 11
20463: PPUSH
20464: LD_VAR 0 12
20468: PPUSH
20469: CALL_OW 488
20473: NOT
20474: IFFALSE 20478
// continue ;
20476: GO 20456
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20478: LD_VAR 0 11
20482: PPUSH
20483: LD_VAR 0 12
20487: PPUSH
20488: CALL_OW 351
20492: PUSH
20493: LD_VAR 0 11
20497: PPUSH
20498: LD_VAR 0 12
20502: PPUSH
20503: CALL_OW 554
20507: AND
20508: IFFALSE 20548
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20510: LD_ADDR_VAR 0 13
20514: PUSH
20515: LD_VAR 0 13
20519: PPUSH
20520: LD_VAR 0 13
20524: PUSH
20525: LD_INT 1
20527: PLUS
20528: PPUSH
20529: LD_VAR 0 11
20533: PUSH
20534: LD_VAR 0 12
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 2
20547: ST_TO_ADDR
// end ;
20548: GO 20456
20550: POP
20551: POP
20552: GO 20436
20554: POP
20555: POP
// if not list then
20556: LD_VAR 0 13
20560: NOT
20561: IFFALSE 20565
// exit ;
20563: GO 20636
// for i in list do
20565: LD_ADDR_VAR 0 6
20569: PUSH
20570: LD_VAR 0 13
20574: PUSH
20575: FOR_IN
20576: IFFALSE 20634
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20578: LD_VAR 0 1
20582: PPUSH
20583: LD_STRING M
20585: PUSH
20586: LD_VAR 0 6
20590: PUSH
20591: LD_INT 1
20593: ARRAY
20594: PUSH
20595: LD_VAR 0 6
20599: PUSH
20600: LD_INT 2
20602: ARRAY
20603: PUSH
20604: LD_INT 0
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: PUSH
20625: EMPTY
20626: LIST
20627: PPUSH
20628: CALL_OW 447
20632: GO 20575
20634: POP
20635: POP
// end ;
20636: LD_VAR 0 5
20640: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20641: LD_EXP 86
20645: NOT
20646: IFFALSE 20696
20648: GO 20650
20650: DISABLE
// begin initHack := true ;
20651: LD_ADDR_EXP 86
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// hackTanks := [ ] ;
20659: LD_ADDR_EXP 87
20663: PUSH
20664: EMPTY
20665: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20666: LD_ADDR_EXP 88
20670: PUSH
20671: EMPTY
20672: ST_TO_ADDR
// hackLimit := 3 ;
20673: LD_ADDR_EXP 89
20677: PUSH
20678: LD_INT 3
20680: ST_TO_ADDR
// hackDist := 12 ;
20681: LD_ADDR_EXP 90
20685: PUSH
20686: LD_INT 12
20688: ST_TO_ADDR
// hackCounter := [ ] ;
20689: LD_ADDR_EXP 91
20693: PUSH
20694: EMPTY
20695: ST_TO_ADDR
// end ;
20696: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20697: LD_EXP 86
20701: PUSH
20702: LD_INT 34
20704: PUSH
20705: LD_EXP 9
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PPUSH
20714: CALL_OW 69
20718: AND
20719: IFFALSE 20974
20721: GO 20723
20723: DISABLE
20724: LD_INT 0
20726: PPUSH
20727: PPUSH
// begin enable ;
20728: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20729: LD_ADDR_VAR 0 1
20733: PUSH
20734: LD_INT 34
20736: PUSH
20737: LD_EXP 9
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PPUSH
20746: CALL_OW 69
20750: PUSH
20751: FOR_IN
20752: IFFALSE 20972
// begin if not i in hackTanks then
20754: LD_VAR 0 1
20758: PUSH
20759: LD_EXP 87
20763: IN
20764: NOT
20765: IFFALSE 20848
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20767: LD_ADDR_EXP 87
20771: PUSH
20772: LD_EXP 87
20776: PPUSH
20777: LD_EXP 87
20781: PUSH
20782: LD_INT 1
20784: PLUS
20785: PPUSH
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 1
20795: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20796: LD_ADDR_EXP 88
20800: PUSH
20801: LD_EXP 88
20805: PPUSH
20806: LD_EXP 88
20810: PUSH
20811: LD_INT 1
20813: PLUS
20814: PPUSH
20815: EMPTY
20816: PPUSH
20817: CALL_OW 1
20821: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20822: LD_ADDR_EXP 91
20826: PUSH
20827: LD_EXP 91
20831: PPUSH
20832: LD_EXP 91
20836: PUSH
20837: LD_INT 1
20839: PLUS
20840: PPUSH
20841: EMPTY
20842: PPUSH
20843: CALL_OW 1
20847: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20848: LD_VAR 0 1
20852: PPUSH
20853: CALL_OW 302
20857: NOT
20858: IFFALSE 20871
// begin HackUnlinkAll ( i ) ;
20860: LD_VAR 0 1
20864: PPUSH
20865: CALL 20977 0 1
// continue ;
20869: GO 20751
// end ; HackCheckCapturedStatus ( i ) ;
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL 21420 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20880: LD_ADDR_VAR 0 2
20884: PUSH
20885: LD_INT 81
20887: PUSH
20888: LD_VAR 0 1
20892: PPUSH
20893: CALL_OW 255
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 33
20904: PUSH
20905: LD_INT 3
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 91
20914: PUSH
20915: LD_VAR 0 1
20919: PUSH
20920: LD_EXP 90
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 50
20932: PUSH
20933: EMPTY
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: PPUSH
20942: CALL_OW 69
20946: ST_TO_ADDR
// if not tmp then
20947: LD_VAR 0 2
20951: NOT
20952: IFFALSE 20956
// continue ;
20954: GO 20751
// HackLink ( i , tmp ) ;
20956: LD_VAR 0 1
20960: PPUSH
20961: LD_VAR 0 2
20965: PPUSH
20966: CALL 21113 0 2
// end ;
20970: GO 20751
20972: POP
20973: POP
// end ;
20974: PPOPN 2
20976: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20977: LD_INT 0
20979: PPUSH
20980: PPUSH
20981: PPUSH
// if not hack in hackTanks then
20982: LD_VAR 0 1
20986: PUSH
20987: LD_EXP 87
20991: IN
20992: NOT
20993: IFFALSE 20997
// exit ;
20995: GO 21108
// index := GetElementIndex ( hackTanks , hack ) ;
20997: LD_ADDR_VAR 0 4
21001: PUSH
21002: LD_EXP 87
21006: PPUSH
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL 28582 0 2
21016: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21017: LD_EXP 88
21021: PUSH
21022: LD_VAR 0 4
21026: ARRAY
21027: IFFALSE 21108
// begin for i in hackTanksCaptured [ index ] do
21029: LD_ADDR_VAR 0 3
21033: PUSH
21034: LD_EXP 88
21038: PUSH
21039: LD_VAR 0 4
21043: ARRAY
21044: PUSH
21045: FOR_IN
21046: IFFALSE 21072
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 1
21055: ARRAY
21056: PPUSH
21057: LD_VAR 0 3
21061: PUSH
21062: LD_INT 2
21064: ARRAY
21065: PPUSH
21066: CALL_OW 235
21070: GO 21045
21072: POP
21073: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21074: LD_ADDR_EXP 88
21078: PUSH
21079: LD_EXP 88
21083: PPUSH
21084: LD_VAR 0 4
21088: PPUSH
21089: EMPTY
21090: PPUSH
21091: CALL_OW 1
21095: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21096: LD_VAR 0 1
21100: PPUSH
21101: LD_INT 0
21103: PPUSH
21104: CALL_OW 505
// end ; end ;
21108: LD_VAR 0 2
21112: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21113: LD_INT 0
21115: PPUSH
21116: PPUSH
21117: PPUSH
// if not hack in hackTanks or not vehicles then
21118: LD_VAR 0 1
21122: PUSH
21123: LD_EXP 87
21127: IN
21128: NOT
21129: PUSH
21130: LD_VAR 0 2
21134: NOT
21135: OR
21136: IFFALSE 21140
// exit ;
21138: GO 21415
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21140: LD_ADDR_VAR 0 2
21144: PUSH
21145: LD_VAR 0 1
21149: PPUSH
21150: LD_VAR 0 2
21154: PPUSH
21155: LD_INT 1
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL 29232 0 4
21165: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: LD_EXP 87
21175: PPUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL 28582 0 2
21185: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21186: LD_EXP 88
21190: PUSH
21191: LD_VAR 0 5
21195: ARRAY
21196: PUSH
21197: LD_EXP 89
21201: LESS
21202: IFFALSE 21391
// begin for i := 1 to vehicles do
21204: LD_ADDR_VAR 0 4
21208: PUSH
21209: DOUBLE
21210: LD_INT 1
21212: DEC
21213: ST_TO_ADDR
21214: LD_VAR 0 2
21218: PUSH
21219: FOR_TO
21220: IFFALSE 21389
// begin if hackTanksCaptured [ index ] = hackLimit then
21222: LD_EXP 88
21226: PUSH
21227: LD_VAR 0 5
21231: ARRAY
21232: PUSH
21233: LD_EXP 89
21237: EQUAL
21238: IFFALSE 21242
// break ;
21240: GO 21389
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21242: LD_ADDR_EXP 91
21246: PUSH
21247: LD_EXP 91
21251: PPUSH
21252: LD_VAR 0 5
21256: PPUSH
21257: LD_EXP 91
21261: PUSH
21262: LD_VAR 0 5
21266: ARRAY
21267: PUSH
21268: LD_INT 1
21270: PLUS
21271: PPUSH
21272: CALL_OW 1
21276: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21277: LD_ADDR_EXP 88
21281: PUSH
21282: LD_EXP 88
21286: PPUSH
21287: LD_VAR 0 5
21291: PUSH
21292: LD_EXP 88
21296: PUSH
21297: LD_VAR 0 5
21301: ARRAY
21302: PUSH
21303: LD_INT 1
21305: PLUS
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PPUSH
21311: LD_VAR 0 2
21315: PUSH
21316: LD_VAR 0 4
21320: ARRAY
21321: PUSH
21322: LD_VAR 0 2
21326: PUSH
21327: LD_VAR 0 4
21331: ARRAY
21332: PPUSH
21333: CALL_OW 255
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL 28797 0 3
21346: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21347: LD_VAR 0 2
21351: PUSH
21352: LD_VAR 0 4
21356: ARRAY
21357: PPUSH
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 255
21367: PPUSH
21368: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21372: LD_VAR 0 2
21376: PUSH
21377: LD_VAR 0 4
21381: ARRAY
21382: PPUSH
21383: CALL_OW 141
// end ;
21387: GO 21219
21389: POP
21390: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_EXP 88
21400: PUSH
21401: LD_VAR 0 5
21405: ARRAY
21406: PUSH
21407: LD_INT 0
21409: PLUS
21410: PPUSH
21411: CALL_OW 505
// end ;
21415: LD_VAR 0 3
21419: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21420: LD_INT 0
21422: PPUSH
21423: PPUSH
21424: PPUSH
21425: PPUSH
// if not hack in hackTanks then
21426: LD_VAR 0 1
21430: PUSH
21431: LD_EXP 87
21435: IN
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 21681
// index := GetElementIndex ( hackTanks , hack ) ;
21441: LD_ADDR_VAR 0 4
21445: PUSH
21446: LD_EXP 87
21450: PPUSH
21451: LD_VAR 0 1
21455: PPUSH
21456: CALL 28582 0 2
21460: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: DOUBLE
21467: LD_EXP 88
21471: PUSH
21472: LD_VAR 0 4
21476: ARRAY
21477: INC
21478: ST_TO_ADDR
21479: LD_INT 1
21481: PUSH
21482: FOR_DOWNTO
21483: IFFALSE 21655
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21485: LD_ADDR_VAR 0 5
21489: PUSH
21490: LD_EXP 88
21494: PUSH
21495: LD_VAR 0 4
21499: ARRAY
21500: PUSH
21501: LD_VAR 0 3
21505: ARRAY
21506: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21507: LD_VAR 0 5
21511: PUSH
21512: LD_INT 1
21514: ARRAY
21515: PPUSH
21516: CALL_OW 302
21520: NOT
21521: PUSH
21522: LD_VAR 0 5
21526: PUSH
21527: LD_INT 1
21529: ARRAY
21530: PPUSH
21531: CALL_OW 255
21535: PUSH
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 255
21545: NONEQUAL
21546: OR
21547: IFFALSE 21653
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21549: LD_VAR 0 5
21553: PUSH
21554: LD_INT 1
21556: ARRAY
21557: PPUSH
21558: CALL_OW 305
21562: PUSH
21563: LD_VAR 0 5
21567: PUSH
21568: LD_INT 1
21570: ARRAY
21571: PPUSH
21572: CALL_OW 255
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 255
21586: EQUAL
21587: AND
21588: IFFALSE 21612
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21590: LD_VAR 0 5
21594: PUSH
21595: LD_INT 1
21597: ARRAY
21598: PPUSH
21599: LD_VAR 0 5
21603: PUSH
21604: LD_INT 2
21606: ARRAY
21607: PPUSH
21608: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21612: LD_ADDR_EXP 88
21616: PUSH
21617: LD_EXP 88
21621: PPUSH
21622: LD_VAR 0 4
21626: PPUSH
21627: LD_EXP 88
21631: PUSH
21632: LD_VAR 0 4
21636: ARRAY
21637: PPUSH
21638: LD_VAR 0 3
21642: PPUSH
21643: CALL_OW 3
21647: PPUSH
21648: CALL_OW 1
21652: ST_TO_ADDR
// end ; end ;
21653: GO 21482
21655: POP
21656: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21657: LD_VAR 0 1
21661: PPUSH
21662: LD_EXP 88
21666: PUSH
21667: LD_VAR 0 4
21671: ARRAY
21672: PUSH
21673: LD_INT 0
21675: PLUS
21676: PPUSH
21677: CALL_OW 505
// end ;
21681: LD_VAR 0 2
21685: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21686: LD_INT 0
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
// if not hack in hackTanks then
21692: LD_VAR 0 1
21696: PUSH
21697: LD_EXP 87
21701: IN
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21792
// index := GetElementIndex ( hackTanks , hack ) ;
21707: LD_ADDR_VAR 0 5
21711: PUSH
21712: LD_EXP 87
21716: PPUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL 28582 0 2
21726: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21727: LD_ADDR_VAR 0 4
21731: PUSH
21732: DOUBLE
21733: LD_INT 1
21735: DEC
21736: ST_TO_ADDR
21737: LD_EXP 88
21741: PUSH
21742: LD_VAR 0 5
21746: ARRAY
21747: PUSH
21748: FOR_TO
21749: IFFALSE 21790
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21751: LD_EXP 88
21755: PUSH
21756: LD_VAR 0 5
21760: ARRAY
21761: PUSH
21762: LD_VAR 0 4
21766: ARRAY
21767: PUSH
21768: LD_INT 1
21770: ARRAY
21771: PUSH
21772: LD_VAR 0 2
21776: EQUAL
21777: IFFALSE 21788
// KillUnit ( vehicle ) ;
21779: LD_VAR 0 2
21783: PPUSH
21784: CALL_OW 66
21788: GO 21748
21790: POP
21791: POP
// end ;
21792: LD_VAR 0 3
21796: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21797: LD_EXP 92
21801: NOT
21802: IFFALSE 21837
21804: GO 21806
21806: DISABLE
// begin initMiner := true ;
21807: LD_ADDR_EXP 92
21811: PUSH
21812: LD_INT 1
21814: ST_TO_ADDR
// minersList := [ ] ;
21815: LD_ADDR_EXP 93
21819: PUSH
21820: EMPTY
21821: ST_TO_ADDR
// minerMinesList := [ ] ;
21822: LD_ADDR_EXP 94
21826: PUSH
21827: EMPTY
21828: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21829: LD_ADDR_EXP 95
21833: PUSH
21834: LD_INT 5
21836: ST_TO_ADDR
// end ;
21837: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21838: LD_EXP 92
21842: PUSH
21843: LD_INT 34
21845: PUSH
21846: LD_EXP 14
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PPUSH
21855: CALL_OW 69
21859: AND
21860: IFFALSE 22323
21862: GO 21864
21864: DISABLE
21865: LD_INT 0
21867: PPUSH
21868: PPUSH
21869: PPUSH
21870: PPUSH
// begin enable ;
21871: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21872: LD_ADDR_VAR 0 1
21876: PUSH
21877: LD_INT 34
21879: PUSH
21880: LD_EXP 14
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PPUSH
21889: CALL_OW 69
21893: PUSH
21894: FOR_IN
21895: IFFALSE 21967
// begin if not i in minersList then
21897: LD_VAR 0 1
21901: PUSH
21902: LD_EXP 93
21906: IN
21907: NOT
21908: IFFALSE 21965
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21910: LD_ADDR_EXP 93
21914: PUSH
21915: LD_EXP 93
21919: PPUSH
21920: LD_EXP 93
21924: PUSH
21925: LD_INT 1
21927: PLUS
21928: PPUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL_OW 1
21938: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21939: LD_ADDR_EXP 94
21943: PUSH
21944: LD_EXP 94
21948: PPUSH
21949: LD_EXP 94
21953: PUSH
21954: LD_INT 1
21956: PLUS
21957: PPUSH
21958: EMPTY
21959: PPUSH
21960: CALL_OW 1
21964: ST_TO_ADDR
// end end ;
21965: GO 21894
21967: POP
21968: POP
// for i := minerMinesList downto 1 do
21969: LD_ADDR_VAR 0 1
21973: PUSH
21974: DOUBLE
21975: LD_EXP 94
21979: INC
21980: ST_TO_ADDR
21981: LD_INT 1
21983: PUSH
21984: FOR_DOWNTO
21985: IFFALSE 22321
// begin if IsLive ( minersList [ i ] ) then
21987: LD_EXP 93
21991: PUSH
21992: LD_VAR 0 1
21996: ARRAY
21997: PPUSH
21998: CALL_OW 300
22002: IFFALSE 22030
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22004: LD_EXP 93
22008: PUSH
22009: LD_VAR 0 1
22013: ARRAY
22014: PPUSH
22015: LD_EXP 94
22019: PUSH
22020: LD_VAR 0 1
22024: ARRAY
22025: PPUSH
22026: CALL_OW 505
// if not minerMinesList [ i ] then
22030: LD_EXP 94
22034: PUSH
22035: LD_VAR 0 1
22039: ARRAY
22040: NOT
22041: IFFALSE 22045
// continue ;
22043: GO 21984
// for j := minerMinesList [ i ] downto 1 do
22045: LD_ADDR_VAR 0 2
22049: PUSH
22050: DOUBLE
22051: LD_EXP 94
22055: PUSH
22056: LD_VAR 0 1
22060: ARRAY
22061: INC
22062: ST_TO_ADDR
22063: LD_INT 1
22065: PUSH
22066: FOR_DOWNTO
22067: IFFALSE 22317
// begin side := GetSide ( minersList [ i ] ) ;
22069: LD_ADDR_VAR 0 3
22073: PUSH
22074: LD_EXP 93
22078: PUSH
22079: LD_VAR 0 1
22083: ARRAY
22084: PPUSH
22085: CALL_OW 255
22089: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22090: LD_ADDR_VAR 0 4
22094: PUSH
22095: LD_EXP 94
22099: PUSH
22100: LD_VAR 0 1
22104: ARRAY
22105: PUSH
22106: LD_VAR 0 2
22110: ARRAY
22111: PUSH
22112: LD_INT 1
22114: ARRAY
22115: PPUSH
22116: LD_EXP 94
22120: PUSH
22121: LD_VAR 0 1
22125: ARRAY
22126: PUSH
22127: LD_VAR 0 2
22131: ARRAY
22132: PUSH
22133: LD_INT 2
22135: ARRAY
22136: PPUSH
22137: CALL_OW 428
22141: ST_TO_ADDR
// if not tmp then
22142: LD_VAR 0 4
22146: NOT
22147: IFFALSE 22151
// continue ;
22149: GO 22066
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22151: LD_VAR 0 4
22155: PUSH
22156: LD_INT 81
22158: PUSH
22159: LD_VAR 0 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PPUSH
22168: CALL_OW 69
22172: IN
22173: PUSH
22174: LD_EXP 94
22178: PUSH
22179: LD_VAR 0 1
22183: ARRAY
22184: PUSH
22185: LD_VAR 0 2
22189: ARRAY
22190: PUSH
22191: LD_INT 1
22193: ARRAY
22194: PPUSH
22195: LD_EXP 94
22199: PUSH
22200: LD_VAR 0 1
22204: ARRAY
22205: PUSH
22206: LD_VAR 0 2
22210: ARRAY
22211: PUSH
22212: LD_INT 2
22214: ARRAY
22215: PPUSH
22216: CALL_OW 458
22220: AND
22221: IFFALSE 22315
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22223: LD_EXP 94
22227: PUSH
22228: LD_VAR 0 1
22232: ARRAY
22233: PUSH
22234: LD_VAR 0 2
22238: ARRAY
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_EXP 94
22248: PUSH
22249: LD_VAR 0 1
22253: ARRAY
22254: PUSH
22255: LD_VAR 0 2
22259: ARRAY
22260: PUSH
22261: LD_INT 2
22263: ARRAY
22264: PPUSH
22265: LD_VAR 0 3
22269: PPUSH
22270: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22274: LD_ADDR_EXP 94
22278: PUSH
22279: LD_EXP 94
22283: PPUSH
22284: LD_VAR 0 1
22288: PPUSH
22289: LD_EXP 94
22293: PUSH
22294: LD_VAR 0 1
22298: ARRAY
22299: PPUSH
22300: LD_VAR 0 2
22304: PPUSH
22305: CALL_OW 3
22309: PPUSH
22310: CALL_OW 1
22314: ST_TO_ADDR
// end ; end ;
22315: GO 22066
22317: POP
22318: POP
// end ;
22319: GO 21984
22321: POP
22322: POP
// end ;
22323: PPOPN 4
22325: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22326: LD_INT 0
22328: PPUSH
22329: PPUSH
// result := false ;
22330: LD_ADDR_VAR 0 4
22334: PUSH
22335: LD_INT 0
22337: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 264
22347: PUSH
22348: LD_EXP 14
22352: EQUAL
22353: NOT
22354: IFFALSE 22358
// exit ;
22356: GO 22598
// index := GetElementIndex ( minersList , unit ) ;
22358: LD_ADDR_VAR 0 5
22362: PUSH
22363: LD_EXP 93
22367: PPUSH
22368: LD_VAR 0 1
22372: PPUSH
22373: CALL 28582 0 2
22377: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22378: LD_EXP 94
22382: PUSH
22383: LD_VAR 0 5
22387: ARRAY
22388: PUSH
22389: LD_EXP 95
22393: GREATEREQUAL
22394: IFFALSE 22398
// exit ;
22396: GO 22598
// ComMoveXY ( unit , x , y ) ;
22398: LD_VAR 0 1
22402: PPUSH
22403: LD_VAR 0 2
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22417: LD_INT 35
22419: PPUSH
22420: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_VAR 0 2
22433: PPUSH
22434: LD_VAR 0 3
22438: PPUSH
22439: CALL 59301 0 3
22443: NOT
22444: PUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: CALL_OW 314
22454: AND
22455: IFFALSE 22459
// exit ;
22457: GO 22598
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22459: LD_VAR 0 2
22463: PPUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: CALL_OW 428
22473: PUSH
22474: LD_VAR 0 1
22478: EQUAL
22479: PUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: CALL_OW 314
22489: NOT
22490: AND
22491: IFFALSE 22417
// PlaySoundXY ( x , y , PlantMine ) ;
22493: LD_VAR 0 2
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_STRING PlantMine
22505: PPUSH
22506: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22510: LD_VAR 0 2
22514: PPUSH
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_VAR 0 1
22524: PPUSH
22525: CALL_OW 255
22529: PPUSH
22530: LD_INT 0
22532: PPUSH
22533: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22537: LD_ADDR_EXP 94
22541: PUSH
22542: LD_EXP 94
22546: PPUSH
22547: LD_VAR 0 5
22551: PUSH
22552: LD_EXP 94
22556: PUSH
22557: LD_VAR 0 5
22561: ARRAY
22562: PUSH
22563: LD_INT 1
22565: PLUS
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: LD_VAR 0 2
22575: PUSH
22576: LD_VAR 0 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PPUSH
22585: CALL 28797 0 3
22589: ST_TO_ADDR
// result := true ;
22590: LD_ADDR_VAR 0 4
22594: PUSH
22595: LD_INT 1
22597: ST_TO_ADDR
// end ;
22598: LD_VAR 0 4
22602: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22603: LD_INT 0
22605: PPUSH
22606: PPUSH
22607: PPUSH
// if not unit in minersList then
22608: LD_VAR 0 1
22612: PUSH
22613: LD_EXP 93
22617: IN
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 23015
// index := GetElementIndex ( minersList , unit ) ;
22623: LD_ADDR_VAR 0 6
22627: PUSH
22628: LD_EXP 93
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL 28582 0 2
22642: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22643: LD_ADDR_VAR 0 5
22647: PUSH
22648: DOUBLE
22649: LD_EXP 94
22653: PUSH
22654: LD_VAR 0 6
22658: ARRAY
22659: INC
22660: ST_TO_ADDR
22661: LD_INT 1
22663: PUSH
22664: FOR_DOWNTO
22665: IFFALSE 22826
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22667: LD_EXP 94
22671: PUSH
22672: LD_VAR 0 6
22676: ARRAY
22677: PUSH
22678: LD_VAR 0 5
22682: ARRAY
22683: PUSH
22684: LD_INT 1
22686: ARRAY
22687: PUSH
22688: LD_VAR 0 2
22692: EQUAL
22693: PUSH
22694: LD_EXP 94
22698: PUSH
22699: LD_VAR 0 6
22703: ARRAY
22704: PUSH
22705: LD_VAR 0 5
22709: ARRAY
22710: PUSH
22711: LD_INT 2
22713: ARRAY
22714: PUSH
22715: LD_VAR 0 3
22719: EQUAL
22720: AND
22721: IFFALSE 22824
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22723: LD_EXP 94
22727: PUSH
22728: LD_VAR 0 6
22732: ARRAY
22733: PUSH
22734: LD_VAR 0 5
22738: ARRAY
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: LD_EXP 94
22748: PUSH
22749: LD_VAR 0 6
22753: ARRAY
22754: PUSH
22755: LD_VAR 0 5
22759: ARRAY
22760: PUSH
22761: LD_INT 2
22763: ARRAY
22764: PPUSH
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 255
22774: PPUSH
22775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22779: LD_ADDR_EXP 94
22783: PUSH
22784: LD_EXP 94
22788: PPUSH
22789: LD_VAR 0 6
22793: PPUSH
22794: LD_EXP 94
22798: PUSH
22799: LD_VAR 0 6
22803: ARRAY
22804: PPUSH
22805: LD_VAR 0 5
22809: PPUSH
22810: CALL_OW 3
22814: PPUSH
22815: CALL_OW 1
22819: ST_TO_ADDR
// exit ;
22820: POP
22821: POP
22822: GO 23015
// end ; end ;
22824: GO 22664
22826: POP
22827: POP
// for i := minerMinesList [ index ] downto 1 do
22828: LD_ADDR_VAR 0 5
22832: PUSH
22833: DOUBLE
22834: LD_EXP 94
22838: PUSH
22839: LD_VAR 0 6
22843: ARRAY
22844: INC
22845: ST_TO_ADDR
22846: LD_INT 1
22848: PUSH
22849: FOR_DOWNTO
22850: IFFALSE 23013
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22852: LD_EXP 94
22856: PUSH
22857: LD_VAR 0 6
22861: ARRAY
22862: PUSH
22863: LD_VAR 0 5
22867: ARRAY
22868: PUSH
22869: LD_INT 1
22871: ARRAY
22872: PPUSH
22873: LD_EXP 94
22877: PUSH
22878: LD_VAR 0 6
22882: ARRAY
22883: PUSH
22884: LD_VAR 0 5
22888: ARRAY
22889: PUSH
22890: LD_INT 2
22892: ARRAY
22893: PPUSH
22894: LD_VAR 0 2
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: CALL_OW 298
22908: PUSH
22909: LD_INT 6
22911: LESS
22912: IFFALSE 23011
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22914: LD_EXP 94
22918: PUSH
22919: LD_VAR 0 6
22923: ARRAY
22924: PUSH
22925: LD_VAR 0 5
22929: ARRAY
22930: PUSH
22931: LD_INT 1
22933: ARRAY
22934: PPUSH
22935: LD_EXP 94
22939: PUSH
22940: LD_VAR 0 6
22944: ARRAY
22945: PUSH
22946: LD_VAR 0 5
22950: ARRAY
22951: PUSH
22952: LD_INT 2
22954: ARRAY
22955: PPUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 255
22965: PPUSH
22966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22970: LD_ADDR_EXP 94
22974: PUSH
22975: LD_EXP 94
22979: PPUSH
22980: LD_VAR 0 6
22984: PPUSH
22985: LD_EXP 94
22989: PUSH
22990: LD_VAR 0 6
22994: ARRAY
22995: PPUSH
22996: LD_VAR 0 5
23000: PPUSH
23001: CALL_OW 3
23005: PPUSH
23006: CALL_OW 1
23010: ST_TO_ADDR
// end ; end ;
23011: GO 22849
23013: POP
23014: POP
// end ;
23015: LD_VAR 0 4
23019: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23020: LD_INT 0
23022: PPUSH
23023: PPUSH
23024: PPUSH
23025: PPUSH
23026: PPUSH
23027: PPUSH
23028: PPUSH
23029: PPUSH
23030: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23031: LD_VAR 0 1
23035: PPUSH
23036: CALL_OW 264
23040: PUSH
23041: LD_EXP 14
23045: EQUAL
23046: NOT
23047: PUSH
23048: LD_VAR 0 1
23052: PUSH
23053: LD_EXP 93
23057: IN
23058: NOT
23059: OR
23060: IFFALSE 23064
// exit ;
23062: GO 23386
// index := GetElementIndex ( minersList , unit ) ;
23064: LD_ADDR_VAR 0 6
23068: PUSH
23069: LD_EXP 93
23073: PPUSH
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL 28582 0 2
23083: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23084: LD_ADDR_VAR 0 8
23088: PUSH
23089: LD_EXP 95
23093: PUSH
23094: LD_EXP 94
23098: PUSH
23099: LD_VAR 0 6
23103: ARRAY
23104: MINUS
23105: ST_TO_ADDR
// if not minesFreeAmount then
23106: LD_VAR 0 8
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23386
// tmp := [ ] ;
23115: LD_ADDR_VAR 0 7
23119: PUSH
23120: EMPTY
23121: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23122: LD_ADDR_VAR 0 5
23126: PUSH
23127: DOUBLE
23128: LD_INT 1
23130: DEC
23131: ST_TO_ADDR
23132: LD_VAR 0 8
23136: PUSH
23137: FOR_TO
23138: IFFALSE 23333
// begin _d := rand ( 0 , 5 ) ;
23140: LD_ADDR_VAR 0 11
23144: PUSH
23145: LD_INT 0
23147: PPUSH
23148: LD_INT 5
23150: PPUSH
23151: CALL_OW 12
23155: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23156: LD_ADDR_VAR 0 12
23160: PUSH
23161: LD_INT 2
23163: PPUSH
23164: LD_INT 6
23166: PPUSH
23167: CALL_OW 12
23171: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23172: LD_ADDR_VAR 0 9
23176: PUSH
23177: LD_VAR 0 2
23181: PPUSH
23182: LD_VAR 0 11
23186: PPUSH
23187: LD_VAR 0 12
23191: PPUSH
23192: CALL_OW 272
23196: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23197: LD_ADDR_VAR 0 10
23201: PUSH
23202: LD_VAR 0 3
23206: PPUSH
23207: LD_VAR 0 11
23211: PPUSH
23212: LD_VAR 0 12
23216: PPUSH
23217: CALL_OW 273
23221: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23222: LD_VAR 0 9
23226: PPUSH
23227: LD_VAR 0 10
23231: PPUSH
23232: CALL_OW 488
23236: PUSH
23237: LD_VAR 0 9
23241: PUSH
23242: LD_VAR 0 10
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_VAR 0 7
23255: IN
23256: NOT
23257: AND
23258: PUSH
23259: LD_VAR 0 9
23263: PPUSH
23264: LD_VAR 0 10
23268: PPUSH
23269: CALL_OW 458
23273: NOT
23274: AND
23275: IFFALSE 23317
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_VAR 0 7
23286: PPUSH
23287: LD_VAR 0 7
23291: PUSH
23292: LD_INT 1
23294: PLUS
23295: PPUSH
23296: LD_VAR 0 9
23300: PUSH
23301: LD_VAR 0 10
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PPUSH
23310: CALL_OW 1
23314: ST_TO_ADDR
23315: GO 23331
// i := i - 1 ;
23317: LD_ADDR_VAR 0 5
23321: PUSH
23322: LD_VAR 0 5
23326: PUSH
23327: LD_INT 1
23329: MINUS
23330: ST_TO_ADDR
// end ;
23331: GO 23137
23333: POP
23334: POP
// for i in tmp do
23335: LD_ADDR_VAR 0 5
23339: PUSH
23340: LD_VAR 0 7
23344: PUSH
23345: FOR_IN
23346: IFFALSE 23384
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23348: LD_VAR 0 1
23352: PPUSH
23353: LD_VAR 0 5
23357: PUSH
23358: LD_INT 1
23360: ARRAY
23361: PPUSH
23362: LD_VAR 0 5
23366: PUSH
23367: LD_INT 2
23369: ARRAY
23370: PPUSH
23371: CALL 22326 0 3
23375: NOT
23376: IFFALSE 23382
// exit ;
23378: POP
23379: POP
23380: GO 23386
23382: GO 23345
23384: POP
23385: POP
// end ;
23386: LD_VAR 0 4
23390: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23391: LD_INT 0
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
// if not GetClass ( unit ) = class_sniper then
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 257
23409: PUSH
23410: LD_INT 5
23412: EQUAL
23413: NOT
23414: IFFALSE 23418
// exit ;
23416: GO 23806
// dist := 8 ;
23418: LD_ADDR_VAR 0 5
23422: PUSH
23423: LD_INT 8
23425: ST_TO_ADDR
// viewRange := 12 ;
23426: LD_ADDR_VAR 0 7
23430: PUSH
23431: LD_INT 12
23433: ST_TO_ADDR
// side := GetSide ( unit ) ;
23434: LD_ADDR_VAR 0 6
23438: PUSH
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 255
23448: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23449: LD_INT 61
23451: PPUSH
23452: LD_VAR 0 6
23456: PPUSH
23457: CALL_OW 321
23461: PUSH
23462: LD_INT 2
23464: EQUAL
23465: IFFALSE 23475
// viewRange := 16 ;
23467: LD_ADDR_VAR 0 7
23471: PUSH
23472: LD_INT 16
23474: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23475: LD_VAR 0 1
23479: PPUSH
23480: LD_VAR 0 2
23484: PPUSH
23485: LD_VAR 0 3
23489: PPUSH
23490: CALL_OW 297
23494: PUSH
23495: LD_VAR 0 5
23499: GREATER
23500: IFFALSE 23579
// begin ComMoveXY ( unit , x , y ) ;
23502: LD_VAR 0 1
23506: PPUSH
23507: LD_VAR 0 2
23511: PPUSH
23512: LD_VAR 0 3
23516: PPUSH
23517: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23521: LD_INT 35
23523: PPUSH
23524: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23528: LD_VAR 0 1
23532: PPUSH
23533: LD_VAR 0 2
23537: PPUSH
23538: LD_VAR 0 3
23542: PPUSH
23543: CALL 59301 0 3
23547: NOT
23548: IFFALSE 23552
// exit ;
23550: GO 23806
// until GetDistUnitXY ( unit , x , y ) < dist ;
23552: LD_VAR 0 1
23556: PPUSH
23557: LD_VAR 0 2
23561: PPUSH
23562: LD_VAR 0 3
23566: PPUSH
23567: CALL_OW 297
23571: PUSH
23572: LD_VAR 0 5
23576: LESS
23577: IFFALSE 23521
// end ; ComTurnXY ( unit , x , y ) ;
23579: LD_VAR 0 1
23583: PPUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_VAR 0 3
23593: PPUSH
23594: CALL_OW 118
// wait ( 5 ) ;
23598: LD_INT 5
23600: PPUSH
23601: CALL_OW 67
// _d := GetDir ( unit ) ;
23605: LD_ADDR_VAR 0 10
23609: PUSH
23610: LD_VAR 0 1
23614: PPUSH
23615: CALL_OW 254
23619: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23620: LD_ADDR_VAR 0 8
23624: PUSH
23625: LD_VAR 0 1
23629: PPUSH
23630: CALL_OW 250
23634: PPUSH
23635: LD_VAR 0 10
23639: PPUSH
23640: LD_VAR 0 5
23644: PPUSH
23645: CALL_OW 272
23649: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23650: LD_ADDR_VAR 0 9
23654: PUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 251
23664: PPUSH
23665: LD_VAR 0 10
23669: PPUSH
23670: LD_VAR 0 5
23674: PPUSH
23675: CALL_OW 273
23679: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23680: LD_VAR 0 8
23684: PPUSH
23685: LD_VAR 0 9
23689: PPUSH
23690: CALL_OW 488
23694: NOT
23695: IFFALSE 23699
// exit ;
23697: GO 23806
// ComAnimCustom ( unit , 1 ) ;
23699: LD_VAR 0 1
23703: PPUSH
23704: LD_INT 1
23706: PPUSH
23707: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23711: LD_VAR 0 8
23715: PPUSH
23716: LD_VAR 0 9
23720: PPUSH
23721: LD_VAR 0 6
23725: PPUSH
23726: LD_VAR 0 7
23730: PPUSH
23731: CALL_OW 330
// repeat wait ( 1 ) ;
23735: LD_INT 1
23737: PPUSH
23738: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23742: LD_VAR 0 1
23746: PPUSH
23747: CALL_OW 316
23751: PUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL_OW 314
23761: OR
23762: PUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL_OW 302
23772: NOT
23773: OR
23774: PUSH
23775: LD_VAR 0 1
23779: PPUSH
23780: CALL_OW 301
23784: OR
23785: IFFALSE 23735
// RemoveSeeing ( _x , _y , side ) ;
23787: LD_VAR 0 8
23791: PPUSH
23792: LD_VAR 0 9
23796: PPUSH
23797: LD_VAR 0 6
23801: PPUSH
23802: CALL_OW 331
// end ; end_of_file
23806: LD_VAR 0 4
23810: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23811: LD_INT 0
23813: PPUSH
23814: PPUSH
// if exist_mode then
23815: LD_VAR 0 2
23819: IFFALSE 23844
// unit := CreateCharacter ( prefix & ident ) else
23821: LD_ADDR_VAR 0 5
23825: PUSH
23826: LD_VAR 0 3
23830: PUSH
23831: LD_VAR 0 1
23835: STR
23836: PPUSH
23837: CALL_OW 34
23841: ST_TO_ADDR
23842: GO 23859
// unit := NewCharacter ( ident ) ;
23844: LD_ADDR_VAR 0 5
23848: PUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: CALL_OW 25
23858: ST_TO_ADDR
// result := unit ;
23859: LD_ADDR_VAR 0 4
23863: PUSH
23864: LD_VAR 0 5
23868: ST_TO_ADDR
// end ;
23869: LD_VAR 0 4
23873: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23874: LD_INT 0
23876: PPUSH
23877: PPUSH
// if not side or not nation then
23878: LD_VAR 0 1
23882: NOT
23883: PUSH
23884: LD_VAR 0 2
23888: NOT
23889: OR
23890: IFFALSE 23894
// exit ;
23892: GO 24662
// case nation of nation_american :
23894: LD_VAR 0 2
23898: PUSH
23899: LD_INT 1
23901: DOUBLE
23902: EQUAL
23903: IFTRUE 23907
23905: GO 24121
23907: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23908: LD_ADDR_VAR 0 4
23912: PUSH
23913: LD_INT 35
23915: PUSH
23916: LD_INT 45
23918: PUSH
23919: LD_INT 46
23921: PUSH
23922: LD_INT 47
23924: PUSH
23925: LD_INT 82
23927: PUSH
23928: LD_INT 83
23930: PUSH
23931: LD_INT 84
23933: PUSH
23934: LD_INT 85
23936: PUSH
23937: LD_INT 86
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 6
23948: PUSH
23949: LD_INT 15
23951: PUSH
23952: LD_INT 16
23954: PUSH
23955: LD_INT 7
23957: PUSH
23958: LD_INT 12
23960: PUSH
23961: LD_INT 13
23963: PUSH
23964: LD_INT 10
23966: PUSH
23967: LD_INT 14
23969: PUSH
23970: LD_INT 20
23972: PUSH
23973: LD_INT 21
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_INT 25
23981: PUSH
23982: LD_INT 32
23984: PUSH
23985: LD_INT 27
23987: PUSH
23988: LD_INT 36
23990: PUSH
23991: LD_INT 69
23993: PUSH
23994: LD_INT 39
23996: PUSH
23997: LD_INT 34
23999: PUSH
24000: LD_INT 40
24002: PUSH
24003: LD_INT 48
24005: PUSH
24006: LD_INT 49
24008: PUSH
24009: LD_INT 50
24011: PUSH
24012: LD_INT 51
24014: PUSH
24015: LD_INT 52
24017: PUSH
24018: LD_INT 53
24020: PUSH
24021: LD_INT 54
24023: PUSH
24024: LD_INT 55
24026: PUSH
24027: LD_INT 56
24029: PUSH
24030: LD_INT 57
24032: PUSH
24033: LD_INT 58
24035: PUSH
24036: LD_INT 59
24038: PUSH
24039: LD_INT 60
24041: PUSH
24042: LD_INT 61
24044: PUSH
24045: LD_INT 62
24047: PUSH
24048: LD_INT 80
24050: PUSH
24051: LD_INT 82
24053: PUSH
24054: LD_INT 83
24056: PUSH
24057: LD_INT 84
24059: PUSH
24060: LD_INT 85
24062: PUSH
24063: LD_INT 86
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: ST_TO_ADDR
24119: GO 24586
24121: LD_INT 2
24123: DOUBLE
24124: EQUAL
24125: IFTRUE 24129
24127: GO 24355
24129: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24130: LD_ADDR_VAR 0 4
24134: PUSH
24135: LD_INT 35
24137: PUSH
24138: LD_INT 45
24140: PUSH
24141: LD_INT 46
24143: PUSH
24144: LD_INT 47
24146: PUSH
24147: LD_INT 82
24149: PUSH
24150: LD_INT 83
24152: PUSH
24153: LD_INT 84
24155: PUSH
24156: LD_INT 85
24158: PUSH
24159: LD_INT 87
24161: PUSH
24162: LD_INT 70
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: LD_INT 11
24170: PUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 4
24176: PUSH
24177: LD_INT 5
24179: PUSH
24180: LD_INT 6
24182: PUSH
24183: LD_INT 15
24185: PUSH
24186: LD_INT 18
24188: PUSH
24189: LD_INT 7
24191: PUSH
24192: LD_INT 17
24194: PUSH
24195: LD_INT 8
24197: PUSH
24198: LD_INT 20
24200: PUSH
24201: LD_INT 21
24203: PUSH
24204: LD_INT 22
24206: PUSH
24207: LD_INT 72
24209: PUSH
24210: LD_INT 26
24212: PUSH
24213: LD_INT 69
24215: PUSH
24216: LD_INT 39
24218: PUSH
24219: LD_INT 40
24221: PUSH
24222: LD_INT 41
24224: PUSH
24225: LD_INT 42
24227: PUSH
24228: LD_INT 43
24230: PUSH
24231: LD_INT 48
24233: PUSH
24234: LD_INT 49
24236: PUSH
24237: LD_INT 50
24239: PUSH
24240: LD_INT 51
24242: PUSH
24243: LD_INT 52
24245: PUSH
24246: LD_INT 53
24248: PUSH
24249: LD_INT 54
24251: PUSH
24252: LD_INT 55
24254: PUSH
24255: LD_INT 56
24257: PUSH
24258: LD_INT 60
24260: PUSH
24261: LD_INT 61
24263: PUSH
24264: LD_INT 62
24266: PUSH
24267: LD_INT 66
24269: PUSH
24270: LD_INT 67
24272: PUSH
24273: LD_INT 68
24275: PUSH
24276: LD_INT 81
24278: PUSH
24279: LD_INT 82
24281: PUSH
24282: LD_INT 83
24284: PUSH
24285: LD_INT 84
24287: PUSH
24288: LD_INT 85
24290: PUSH
24291: LD_INT 87
24293: PUSH
24294: LD_INT 88
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
24353: GO 24586
24355: LD_INT 3
24357: DOUBLE
24358: EQUAL
24359: IFTRUE 24363
24361: GO 24585
24363: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24364: LD_ADDR_VAR 0 4
24368: PUSH
24369: LD_INT 46
24371: PUSH
24372: LD_INT 47
24374: PUSH
24375: LD_INT 1
24377: PUSH
24378: LD_INT 2
24380: PUSH
24381: LD_INT 82
24383: PUSH
24384: LD_INT 83
24386: PUSH
24387: LD_INT 84
24389: PUSH
24390: LD_INT 85
24392: PUSH
24393: LD_INT 86
24395: PUSH
24396: LD_INT 11
24398: PUSH
24399: LD_INT 9
24401: PUSH
24402: LD_INT 20
24404: PUSH
24405: LD_INT 19
24407: PUSH
24408: LD_INT 21
24410: PUSH
24411: LD_INT 24
24413: PUSH
24414: LD_INT 22
24416: PUSH
24417: LD_INT 25
24419: PUSH
24420: LD_INT 28
24422: PUSH
24423: LD_INT 29
24425: PUSH
24426: LD_INT 30
24428: PUSH
24429: LD_INT 31
24431: PUSH
24432: LD_INT 37
24434: PUSH
24435: LD_INT 38
24437: PUSH
24438: LD_INT 32
24440: PUSH
24441: LD_INT 27
24443: PUSH
24444: LD_INT 33
24446: PUSH
24447: LD_INT 69
24449: PUSH
24450: LD_INT 39
24452: PUSH
24453: LD_INT 34
24455: PUSH
24456: LD_INT 40
24458: PUSH
24459: LD_INT 71
24461: PUSH
24462: LD_INT 23
24464: PUSH
24465: LD_INT 44
24467: PUSH
24468: LD_INT 48
24470: PUSH
24471: LD_INT 49
24473: PUSH
24474: LD_INT 50
24476: PUSH
24477: LD_INT 51
24479: PUSH
24480: LD_INT 52
24482: PUSH
24483: LD_INT 53
24485: PUSH
24486: LD_INT 54
24488: PUSH
24489: LD_INT 55
24491: PUSH
24492: LD_INT 56
24494: PUSH
24495: LD_INT 57
24497: PUSH
24498: LD_INT 58
24500: PUSH
24501: LD_INT 59
24503: PUSH
24504: LD_INT 63
24506: PUSH
24507: LD_INT 64
24509: PUSH
24510: LD_INT 65
24512: PUSH
24513: LD_INT 82
24515: PUSH
24516: LD_INT 83
24518: PUSH
24519: LD_INT 84
24521: PUSH
24522: LD_INT 85
24524: PUSH
24525: LD_INT 86
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: ST_TO_ADDR
24583: GO 24586
24585: POP
// if state > - 1 and state < 3 then
24586: LD_VAR 0 3
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: GREATER
24595: PUSH
24596: LD_VAR 0 3
24600: PUSH
24601: LD_INT 3
24603: LESS
24604: AND
24605: IFFALSE 24662
// for i in result do
24607: LD_ADDR_VAR 0 5
24611: PUSH
24612: LD_VAR 0 4
24616: PUSH
24617: FOR_IN
24618: IFFALSE 24660
// if GetTech ( i , side ) <> state then
24620: LD_VAR 0 5
24624: PPUSH
24625: LD_VAR 0 1
24629: PPUSH
24630: CALL_OW 321
24634: PUSH
24635: LD_VAR 0 3
24639: NONEQUAL
24640: IFFALSE 24658
// result := result diff i ;
24642: LD_ADDR_VAR 0 4
24646: PUSH
24647: LD_VAR 0 4
24651: PUSH
24652: LD_VAR 0 5
24656: DIFF
24657: ST_TO_ADDR
24658: GO 24617
24660: POP
24661: POP
// end ;
24662: LD_VAR 0 4
24666: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24667: LD_INT 0
24669: PPUSH
24670: PPUSH
24671: PPUSH
// result := true ;
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 1
24679: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24680: LD_ADDR_VAR 0 5
24684: PUSH
24685: LD_VAR 0 2
24689: PPUSH
24690: CALL_OW 480
24694: ST_TO_ADDR
// if not tmp then
24695: LD_VAR 0 5
24699: NOT
24700: IFFALSE 24704
// exit ;
24702: GO 24753
// for i in tmp do
24704: LD_ADDR_VAR 0 4
24708: PUSH
24709: LD_VAR 0 5
24713: PUSH
24714: FOR_IN
24715: IFFALSE 24751
// if GetTech ( i , side ) <> state_researched then
24717: LD_VAR 0 4
24721: PPUSH
24722: LD_VAR 0 1
24726: PPUSH
24727: CALL_OW 321
24731: PUSH
24732: LD_INT 2
24734: NONEQUAL
24735: IFFALSE 24749
// begin result := false ;
24737: LD_ADDR_VAR 0 3
24741: PUSH
24742: LD_INT 0
24744: ST_TO_ADDR
// exit ;
24745: POP
24746: POP
24747: GO 24753
// end ;
24749: GO 24714
24751: POP
24752: POP
// end ;
24753: LD_VAR 0 3
24757: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24758: LD_INT 0
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
24771: PPUSH
24772: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24773: LD_VAR 0 1
24777: NOT
24778: PUSH
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL_OW 257
24788: PUSH
24789: LD_INT 9
24791: NONEQUAL
24792: OR
24793: IFFALSE 24797
// exit ;
24795: GO 25370
// side := GetSide ( unit ) ;
24797: LD_ADDR_VAR 0 9
24801: PUSH
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 255
24811: ST_TO_ADDR
// tech_space := tech_spacanom ;
24812: LD_ADDR_VAR 0 12
24816: PUSH
24817: LD_INT 29
24819: ST_TO_ADDR
// tech_time := tech_taurad ;
24820: LD_ADDR_VAR 0 13
24824: PUSH
24825: LD_INT 28
24827: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24828: LD_ADDR_VAR 0 11
24832: PUSH
24833: LD_VAR 0 1
24837: PPUSH
24838: CALL_OW 310
24842: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24843: LD_VAR 0 11
24847: PPUSH
24848: CALL_OW 247
24852: PUSH
24853: LD_INT 2
24855: EQUAL
24856: IFFALSE 24860
// exit ;
24858: GO 25370
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24860: LD_ADDR_VAR 0 8
24864: PUSH
24865: LD_INT 81
24867: PUSH
24868: LD_VAR 0 9
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: LD_INT 21
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: ST_TO_ADDR
// if not tmp then
24903: LD_VAR 0 8
24907: NOT
24908: IFFALSE 24912
// exit ;
24910: GO 25370
// if in_unit then
24912: LD_VAR 0 11
24916: IFFALSE 24940
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24918: LD_ADDR_VAR 0 10
24922: PUSH
24923: LD_VAR 0 8
24927: PPUSH
24928: LD_VAR 0 11
24932: PPUSH
24933: CALL_OW 74
24937: ST_TO_ADDR
24938: GO 24960
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24940: LD_ADDR_VAR 0 10
24944: PUSH
24945: LD_VAR 0 8
24949: PPUSH
24950: LD_VAR 0 1
24954: PPUSH
24955: CALL_OW 74
24959: ST_TO_ADDR
// if not enemy then
24960: LD_VAR 0 10
24964: NOT
24965: IFFALSE 24969
// exit ;
24967: GO 25370
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24969: LD_VAR 0 11
24973: PUSH
24974: LD_VAR 0 11
24978: PPUSH
24979: LD_VAR 0 10
24983: PPUSH
24984: CALL_OW 296
24988: PUSH
24989: LD_INT 13
24991: GREATER
24992: AND
24993: PUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: LD_VAR 0 10
25003: PPUSH
25004: CALL_OW 296
25008: PUSH
25009: LD_INT 12
25011: GREATER
25012: OR
25013: IFFALSE 25017
// exit ;
25015: GO 25370
// missile := [ 1 ] ;
25017: LD_ADDR_VAR 0 14
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25028: LD_VAR 0 9
25032: PPUSH
25033: LD_VAR 0 12
25037: PPUSH
25038: CALL_OW 325
25042: IFFALSE 25071
// missile := Replace ( missile , missile + 1 , 2 ) ;
25044: LD_ADDR_VAR 0 14
25048: PUSH
25049: LD_VAR 0 14
25053: PPUSH
25054: LD_VAR 0 14
25058: PUSH
25059: LD_INT 1
25061: PLUS
25062: PPUSH
25063: LD_INT 2
25065: PPUSH
25066: CALL_OW 1
25070: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25071: LD_VAR 0 9
25075: PPUSH
25076: LD_VAR 0 13
25080: PPUSH
25081: CALL_OW 325
25085: PUSH
25086: LD_VAR 0 10
25090: PPUSH
25091: CALL_OW 255
25095: PPUSH
25096: LD_VAR 0 13
25100: PPUSH
25101: CALL_OW 325
25105: NOT
25106: AND
25107: IFFALSE 25136
// missile := Replace ( missile , missile + 1 , 3 ) ;
25109: LD_ADDR_VAR 0 14
25113: PUSH
25114: LD_VAR 0 14
25118: PPUSH
25119: LD_VAR 0 14
25123: PUSH
25124: LD_INT 1
25126: PLUS
25127: PPUSH
25128: LD_INT 3
25130: PPUSH
25131: CALL_OW 1
25135: ST_TO_ADDR
// if missile < 2 then
25136: LD_VAR 0 14
25140: PUSH
25141: LD_INT 2
25143: LESS
25144: IFFALSE 25148
// exit ;
25146: GO 25370
// x := GetX ( enemy ) ;
25148: LD_ADDR_VAR 0 4
25152: PUSH
25153: LD_VAR 0 10
25157: PPUSH
25158: CALL_OW 250
25162: ST_TO_ADDR
// y := GetY ( enemy ) ;
25163: LD_ADDR_VAR 0 5
25167: PUSH
25168: LD_VAR 0 10
25172: PPUSH
25173: CALL_OW 251
25177: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25178: LD_ADDR_VAR 0 6
25182: PUSH
25183: LD_VAR 0 4
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PPUSH
25192: LD_INT 1
25194: PPUSH
25195: CALL_OW 12
25199: PLUS
25200: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25201: LD_ADDR_VAR 0 7
25205: PUSH
25206: LD_VAR 0 5
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PPUSH
25215: LD_INT 1
25217: PPUSH
25218: CALL_OW 12
25222: PLUS
25223: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25224: LD_VAR 0 6
25228: PPUSH
25229: LD_VAR 0 7
25233: PPUSH
25234: CALL_OW 488
25238: NOT
25239: IFFALSE 25261
// begin _x := x ;
25241: LD_ADDR_VAR 0 6
25245: PUSH
25246: LD_VAR 0 4
25250: ST_TO_ADDR
// _y := y ;
25251: LD_ADDR_VAR 0 7
25255: PUSH
25256: LD_VAR 0 5
25260: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_INT 1
25268: PPUSH
25269: LD_VAR 0 14
25273: PPUSH
25274: CALL_OW 12
25278: ST_TO_ADDR
// case i of 1 :
25279: LD_VAR 0 3
25283: PUSH
25284: LD_INT 1
25286: DOUBLE
25287: EQUAL
25288: IFTRUE 25292
25290: GO 25309
25292: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_VAR 0 10
25302: PPUSH
25303: CALL_OW 115
25307: GO 25370
25309: LD_INT 2
25311: DOUBLE
25312: EQUAL
25313: IFTRUE 25317
25315: GO 25339
25317: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25318: LD_VAR 0 1
25322: PPUSH
25323: LD_VAR 0 6
25327: PPUSH
25328: LD_VAR 0 7
25332: PPUSH
25333: CALL_OW 153
25337: GO 25370
25339: LD_INT 3
25341: DOUBLE
25342: EQUAL
25343: IFTRUE 25347
25345: GO 25369
25347: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25348: LD_VAR 0 1
25352: PPUSH
25353: LD_VAR 0 6
25357: PPUSH
25358: LD_VAR 0 7
25362: PPUSH
25363: CALL_OW 154
25367: GO 25370
25369: POP
// end ;
25370: LD_VAR 0 2
25374: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25375: LD_INT 0
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
// if not unit or not building then
25383: LD_VAR 0 1
25387: NOT
25388: PUSH
25389: LD_VAR 0 2
25393: NOT
25394: OR
25395: IFFALSE 25399
// exit ;
25397: GO 25557
// x := GetX ( building ) ;
25399: LD_ADDR_VAR 0 5
25403: PUSH
25404: LD_VAR 0 2
25408: PPUSH
25409: CALL_OW 250
25413: ST_TO_ADDR
// y := GetY ( building ) ;
25414: LD_ADDR_VAR 0 6
25418: PUSH
25419: LD_VAR 0 2
25423: PPUSH
25424: CALL_OW 251
25428: ST_TO_ADDR
// for i = 0 to 5 do
25429: LD_ADDR_VAR 0 4
25433: PUSH
25434: DOUBLE
25435: LD_INT 0
25437: DEC
25438: ST_TO_ADDR
25439: LD_INT 5
25441: PUSH
25442: FOR_TO
25443: IFFALSE 25555
// begin _x := ShiftX ( x , i , 3 ) ;
25445: LD_ADDR_VAR 0 7
25449: PUSH
25450: LD_VAR 0 5
25454: PPUSH
25455: LD_VAR 0 4
25459: PPUSH
25460: LD_INT 3
25462: PPUSH
25463: CALL_OW 272
25467: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25468: LD_ADDR_VAR 0 8
25472: PUSH
25473: LD_VAR 0 6
25477: PPUSH
25478: LD_VAR 0 4
25482: PPUSH
25483: LD_INT 3
25485: PPUSH
25486: CALL_OW 273
25490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25491: LD_VAR 0 7
25495: PPUSH
25496: LD_VAR 0 8
25500: PPUSH
25501: CALL_OW 488
25505: NOT
25506: IFFALSE 25510
// continue ;
25508: GO 25442
// if HexInfo ( _x , _y ) = 0 then
25510: LD_VAR 0 7
25514: PPUSH
25515: LD_VAR 0 8
25519: PPUSH
25520: CALL_OW 428
25524: PUSH
25525: LD_INT 0
25527: EQUAL
25528: IFFALSE 25553
// begin ComMoveXY ( unit , _x , _y ) ;
25530: LD_VAR 0 1
25534: PPUSH
25535: LD_VAR 0 7
25539: PPUSH
25540: LD_VAR 0 8
25544: PPUSH
25545: CALL_OW 111
// exit ;
25549: POP
25550: POP
25551: GO 25557
// end ; end ;
25553: GO 25442
25555: POP
25556: POP
// end ;
25557: LD_VAR 0 3
25561: RET
// export function ScanBase ( side , base_area ) ; begin
25562: LD_INT 0
25564: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_VAR 0 2
25574: PPUSH
25575: LD_INT 81
25577: PUSH
25578: LD_VAR 0 1
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PPUSH
25587: CALL_OW 70
25591: ST_TO_ADDR
// end ;
25592: LD_VAR 0 3
25596: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25597: LD_INT 0
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
// result := false ;
25603: LD_ADDR_VAR 0 2
25607: PUSH
25608: LD_INT 0
25610: ST_TO_ADDR
// side := GetSide ( unit ) ;
25611: LD_ADDR_VAR 0 3
25615: PUSH
25616: LD_VAR 0 1
25620: PPUSH
25621: CALL_OW 255
25625: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25626: LD_ADDR_VAR 0 4
25630: PUSH
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL_OW 248
25640: ST_TO_ADDR
// case nat of 1 :
25641: LD_VAR 0 4
25645: PUSH
25646: LD_INT 1
25648: DOUBLE
25649: EQUAL
25650: IFTRUE 25654
25652: GO 25665
25654: POP
// tech := tech_lassight ; 2 :
25655: LD_ADDR_VAR 0 5
25659: PUSH
25660: LD_INT 12
25662: ST_TO_ADDR
25663: GO 25704
25665: LD_INT 2
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25684
25673: POP
// tech := tech_mortar ; 3 :
25674: LD_ADDR_VAR 0 5
25678: PUSH
25679: LD_INT 41
25681: ST_TO_ADDR
25682: GO 25704
25684: LD_INT 3
25686: DOUBLE
25687: EQUAL
25688: IFTRUE 25692
25690: GO 25703
25692: POP
// tech := tech_bazooka ; end ;
25693: LD_ADDR_VAR 0 5
25697: PUSH
25698: LD_INT 44
25700: ST_TO_ADDR
25701: GO 25704
25703: POP
// if Researched ( side , tech ) then
25704: LD_VAR 0 3
25708: PPUSH
25709: LD_VAR 0 5
25713: PPUSH
25714: CALL_OW 325
25718: IFFALSE 25745
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25720: LD_ADDR_VAR 0 2
25724: PUSH
25725: LD_INT 5
25727: PUSH
25728: LD_INT 8
25730: PUSH
25731: LD_INT 9
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: PUSH
25739: LD_VAR 0 4
25743: ARRAY
25744: ST_TO_ADDR
// end ;
25745: LD_VAR 0 2
25749: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25750: LD_INT 0
25752: PPUSH
25753: PPUSH
25754: PPUSH
// if not mines then
25755: LD_VAR 0 2
25759: NOT
25760: IFFALSE 25764
// exit ;
25762: GO 25908
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25764: LD_ADDR_VAR 0 5
25768: PUSH
25769: LD_INT 81
25771: PUSH
25772: LD_VAR 0 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: LD_INT 21
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PPUSH
25802: CALL_OW 69
25806: ST_TO_ADDR
// for i in mines do
25807: LD_ADDR_VAR 0 4
25811: PUSH
25812: LD_VAR 0 2
25816: PUSH
25817: FOR_IN
25818: IFFALSE 25906
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25820: LD_VAR 0 4
25824: PUSH
25825: LD_INT 1
25827: ARRAY
25828: PPUSH
25829: LD_VAR 0 4
25833: PUSH
25834: LD_INT 2
25836: ARRAY
25837: PPUSH
25838: CALL_OW 458
25842: NOT
25843: IFFALSE 25847
// continue ;
25845: GO 25817
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25847: LD_VAR 0 4
25851: PUSH
25852: LD_INT 1
25854: ARRAY
25855: PPUSH
25856: LD_VAR 0 4
25860: PUSH
25861: LD_INT 2
25863: ARRAY
25864: PPUSH
25865: CALL_OW 428
25869: PUSH
25870: LD_VAR 0 5
25874: IN
25875: IFFALSE 25904
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25877: LD_VAR 0 4
25881: PUSH
25882: LD_INT 1
25884: ARRAY
25885: PPUSH
25886: LD_VAR 0 4
25890: PUSH
25891: LD_INT 2
25893: ARRAY
25894: PPUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: CALL_OW 456
// end ;
25904: GO 25817
25906: POP
25907: POP
// end ;
25908: LD_VAR 0 3
25912: RET
// export function Count ( array ) ; var i ; begin
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
// result := 0 ;
25917: LD_ADDR_VAR 0 2
25921: PUSH
25922: LD_INT 0
25924: ST_TO_ADDR
// for i in array do
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_VAR 0 1
25934: PUSH
25935: FOR_IN
25936: IFFALSE 25960
// if i then
25938: LD_VAR 0 3
25942: IFFALSE 25958
// result := result + 1 ;
25944: LD_ADDR_VAR 0 2
25948: PUSH
25949: LD_VAR 0 2
25953: PUSH
25954: LD_INT 1
25956: PLUS
25957: ST_TO_ADDR
25958: GO 25935
25960: POP
25961: POP
// end ;
25962: LD_VAR 0 2
25966: RET
// export function IsEmpty ( building ) ; begin
25967: LD_INT 0
25969: PPUSH
// if not building then
25970: LD_VAR 0 1
25974: NOT
25975: IFFALSE 25979
// exit ;
25977: GO 26022
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25979: LD_ADDR_VAR 0 2
25983: PUSH
25984: LD_VAR 0 1
25988: PUSH
25989: LD_INT 22
25991: PUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: CALL_OW 255
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 58
26008: PUSH
26009: EMPTY
26010: LIST
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PPUSH
26016: CALL_OW 69
26020: IN
26021: ST_TO_ADDR
// end ;
26022: LD_VAR 0 2
26026: RET
// export function IsNotFull ( building ) ; begin
26027: LD_INT 0
26029: PPUSH
// if not building then
26030: LD_VAR 0 1
26034: NOT
26035: IFFALSE 26039
// exit ;
26037: GO 26058
// result := UnitsInside ( building ) < 6 ;
26039: LD_ADDR_VAR 0 2
26043: PUSH
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 313
26053: PUSH
26054: LD_INT 6
26056: LESS
26057: ST_TO_ADDR
// end ;
26058: LD_VAR 0 2
26062: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26063: LD_INT 0
26065: PPUSH
26066: PPUSH
26067: PPUSH
26068: PPUSH
// tmp := [ ] ;
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: EMPTY
26075: ST_TO_ADDR
// list := [ ] ;
26076: LD_ADDR_VAR 0 5
26080: PUSH
26081: EMPTY
26082: ST_TO_ADDR
// for i = 16 to 25 do
26083: LD_ADDR_VAR 0 4
26087: PUSH
26088: DOUBLE
26089: LD_INT 16
26091: DEC
26092: ST_TO_ADDR
26093: LD_INT 25
26095: PUSH
26096: FOR_TO
26097: IFFALSE 26170
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26099: LD_ADDR_VAR 0 3
26103: PUSH
26104: LD_VAR 0 3
26108: PUSH
26109: LD_INT 22
26111: PUSH
26112: LD_VAR 0 1
26116: PPUSH
26117: CALL_OW 255
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 91
26128: PUSH
26129: LD_VAR 0 1
26133: PUSH
26134: LD_INT 6
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 30
26144: PUSH
26145: LD_VAR 0 4
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: PPUSH
26162: CALL_OW 69
26166: ADD
26167: ST_TO_ADDR
26168: GO 26096
26170: POP
26171: POP
// for i = 1 to tmp do
26172: LD_ADDR_VAR 0 4
26176: PUSH
26177: DOUBLE
26178: LD_INT 1
26180: DEC
26181: ST_TO_ADDR
26182: LD_VAR 0 3
26186: PUSH
26187: FOR_TO
26188: IFFALSE 26276
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26190: LD_ADDR_VAR 0 5
26194: PUSH
26195: LD_VAR 0 5
26199: PUSH
26200: LD_VAR 0 3
26204: PUSH
26205: LD_VAR 0 4
26209: ARRAY
26210: PPUSH
26211: CALL_OW 266
26215: PUSH
26216: LD_VAR 0 3
26220: PUSH
26221: LD_VAR 0 4
26225: ARRAY
26226: PPUSH
26227: CALL_OW 250
26231: PUSH
26232: LD_VAR 0 3
26236: PUSH
26237: LD_VAR 0 4
26241: ARRAY
26242: PPUSH
26243: CALL_OW 251
26247: PUSH
26248: LD_VAR 0 3
26252: PUSH
26253: LD_VAR 0 4
26257: ARRAY
26258: PPUSH
26259: CALL_OW 254
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: PUSH
26270: EMPTY
26271: LIST
26272: ADD
26273: ST_TO_ADDR
26274: GO 26187
26276: POP
26277: POP
// result := list ;
26278: LD_ADDR_VAR 0 2
26282: PUSH
26283: LD_VAR 0 5
26287: ST_TO_ADDR
// end ;
26288: LD_VAR 0 2
26292: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26293: LD_INT 0
26295: PPUSH
26296: PPUSH
26297: PPUSH
26298: PPUSH
26299: PPUSH
26300: PPUSH
26301: PPUSH
// if not factory then
26302: LD_VAR 0 1
26306: NOT
26307: IFFALSE 26311
// exit ;
26309: GO 26904
// if control = control_apeman then
26311: LD_VAR 0 4
26315: PUSH
26316: LD_INT 5
26318: EQUAL
26319: IFFALSE 26428
// begin tmp := UnitsInside ( factory ) ;
26321: LD_ADDR_VAR 0 8
26325: PUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 313
26335: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26336: LD_VAR 0 8
26340: PPUSH
26341: LD_INT 25
26343: PUSH
26344: LD_INT 12
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PPUSH
26351: CALL_OW 72
26355: NOT
26356: IFFALSE 26366
// control := control_manual ;
26358: LD_ADDR_VAR 0 4
26362: PUSH
26363: LD_INT 1
26365: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26366: LD_ADDR_VAR 0 8
26370: PUSH
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL 26063 0 1
26380: ST_TO_ADDR
// if tmp then
26381: LD_VAR 0 8
26385: IFFALSE 26428
// begin for i in tmp do
26387: LD_ADDR_VAR 0 7
26391: PUSH
26392: LD_VAR 0 8
26396: PUSH
26397: FOR_IN
26398: IFFALSE 26426
// if i [ 1 ] = b_ext_radio then
26400: LD_VAR 0 7
26404: PUSH
26405: LD_INT 1
26407: ARRAY
26408: PUSH
26409: LD_INT 22
26411: EQUAL
26412: IFFALSE 26424
// begin control := control_remote ;
26414: LD_ADDR_VAR 0 4
26418: PUSH
26419: LD_INT 2
26421: ST_TO_ADDR
// break ;
26422: GO 26426
// end ;
26424: GO 26397
26426: POP
26427: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26428: LD_VAR 0 1
26432: PPUSH
26433: LD_VAR 0 2
26437: PPUSH
26438: LD_VAR 0 3
26442: PPUSH
26443: LD_VAR 0 4
26447: PPUSH
26448: LD_VAR 0 5
26452: PPUSH
26453: CALL_OW 448
26457: IFFALSE 26492
// begin result := [ chassis , engine , control , weapon ] ;
26459: LD_ADDR_VAR 0 6
26463: PUSH
26464: LD_VAR 0 2
26468: PUSH
26469: LD_VAR 0 3
26473: PUSH
26474: LD_VAR 0 4
26478: PUSH
26479: LD_VAR 0 5
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: ST_TO_ADDR
// exit ;
26490: GO 26904
// end ; _chassis := AvailableChassisList ( factory ) ;
26492: LD_ADDR_VAR 0 9
26496: PUSH
26497: LD_VAR 0 1
26501: PPUSH
26502: CALL_OW 475
26506: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26507: LD_ADDR_VAR 0 11
26511: PUSH
26512: LD_VAR 0 1
26516: PPUSH
26517: CALL_OW 476
26521: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26522: LD_ADDR_VAR 0 12
26526: PUSH
26527: LD_VAR 0 1
26531: PPUSH
26532: CALL_OW 477
26536: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26537: LD_ADDR_VAR 0 10
26541: PUSH
26542: LD_VAR 0 1
26546: PPUSH
26547: CALL_OW 478
26551: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26552: LD_VAR 0 9
26556: NOT
26557: PUSH
26558: LD_VAR 0 11
26562: NOT
26563: OR
26564: PUSH
26565: LD_VAR 0 12
26569: NOT
26570: OR
26571: PUSH
26572: LD_VAR 0 10
26576: NOT
26577: OR
26578: IFFALSE 26613
// begin result := [ chassis , engine , control , weapon ] ;
26580: LD_ADDR_VAR 0 6
26584: PUSH
26585: LD_VAR 0 2
26589: PUSH
26590: LD_VAR 0 3
26594: PUSH
26595: LD_VAR 0 4
26599: PUSH
26600: LD_VAR 0 5
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: ST_TO_ADDR
// exit ;
26611: GO 26904
// end ; if not chassis in _chassis then
26613: LD_VAR 0 2
26617: PUSH
26618: LD_VAR 0 9
26622: IN
26623: NOT
26624: IFFALSE 26650
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26626: LD_ADDR_VAR 0 2
26630: PUSH
26631: LD_VAR 0 9
26635: PUSH
26636: LD_INT 1
26638: PPUSH
26639: LD_VAR 0 9
26643: PPUSH
26644: CALL_OW 12
26648: ARRAY
26649: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26650: LD_VAR 0 2
26654: PPUSH
26655: LD_VAR 0 3
26659: PPUSH
26660: CALL 26909 0 2
26664: NOT
26665: IFFALSE 26724
// repeat engine := _engine [ 1 ] ;
26667: LD_ADDR_VAR 0 3
26671: PUSH
26672: LD_VAR 0 11
26676: PUSH
26677: LD_INT 1
26679: ARRAY
26680: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26681: LD_ADDR_VAR 0 11
26685: PUSH
26686: LD_VAR 0 11
26690: PPUSH
26691: LD_INT 1
26693: PPUSH
26694: CALL_OW 3
26698: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26699: LD_VAR 0 2
26703: PPUSH
26704: LD_VAR 0 3
26708: PPUSH
26709: CALL 26909 0 2
26713: PUSH
26714: LD_VAR 0 11
26718: PUSH
26719: EMPTY
26720: EQUAL
26721: OR
26722: IFFALSE 26667
// if not control in _control then
26724: LD_VAR 0 4
26728: PUSH
26729: LD_VAR 0 12
26733: IN
26734: NOT
26735: IFFALSE 26761
// control := _control [ rand ( 1 , _control ) ] ;
26737: LD_ADDR_VAR 0 4
26741: PUSH
26742: LD_VAR 0 12
26746: PUSH
26747: LD_INT 1
26749: PPUSH
26750: LD_VAR 0 12
26754: PPUSH
26755: CALL_OW 12
26759: ARRAY
26760: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26761: LD_VAR 0 2
26765: PPUSH
26766: LD_VAR 0 5
26770: PPUSH
26771: CALL 27129 0 2
26775: NOT
26776: IFFALSE 26835
// repeat weapon := _weapon [ 1 ] ;
26778: LD_ADDR_VAR 0 5
26782: PUSH
26783: LD_VAR 0 10
26787: PUSH
26788: LD_INT 1
26790: ARRAY
26791: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26792: LD_ADDR_VAR 0 10
26796: PUSH
26797: LD_VAR 0 10
26801: PPUSH
26802: LD_INT 1
26804: PPUSH
26805: CALL_OW 3
26809: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26810: LD_VAR 0 2
26814: PPUSH
26815: LD_VAR 0 5
26819: PPUSH
26820: CALL 27129 0 2
26824: PUSH
26825: LD_VAR 0 10
26829: PUSH
26830: EMPTY
26831: EQUAL
26832: OR
26833: IFFALSE 26778
// result := [ ] ;
26835: LD_ADDR_VAR 0 6
26839: PUSH
26840: EMPTY
26841: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26842: LD_VAR 0 1
26846: PPUSH
26847: LD_VAR 0 2
26851: PPUSH
26852: LD_VAR 0 3
26856: PPUSH
26857: LD_VAR 0 4
26861: PPUSH
26862: LD_VAR 0 5
26866: PPUSH
26867: CALL_OW 448
26871: IFFALSE 26904
// result := [ chassis , engine , control , weapon ] ;
26873: LD_ADDR_VAR 0 6
26877: PUSH
26878: LD_VAR 0 2
26882: PUSH
26883: LD_VAR 0 3
26887: PUSH
26888: LD_VAR 0 4
26892: PUSH
26893: LD_VAR 0 5
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: ST_TO_ADDR
// end ;
26904: LD_VAR 0 6
26908: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26909: LD_INT 0
26911: PPUSH
// if not chassis or not engine then
26912: LD_VAR 0 1
26916: NOT
26917: PUSH
26918: LD_VAR 0 2
26922: NOT
26923: OR
26924: IFFALSE 26928
// exit ;
26926: GO 27124
// case engine of engine_solar :
26928: LD_VAR 0 2
26932: PUSH
26933: LD_INT 2
26935: DOUBLE
26936: EQUAL
26937: IFTRUE 26941
26939: GO 26979
26941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_INT 11
26949: PUSH
26950: LD_INT 12
26952: PUSH
26953: LD_INT 13
26955: PUSH
26956: LD_INT 14
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
26977: GO 27108
26979: LD_INT 1
26981: DOUBLE
26982: EQUAL
26983: IFTRUE 26987
26985: GO 27049
26987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26988: LD_ADDR_VAR 0 3
26992: PUSH
26993: LD_INT 11
26995: PUSH
26996: LD_INT 12
26998: PUSH
26999: LD_INT 13
27001: PUSH
27002: LD_INT 14
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: LD_INT 3
27013: PUSH
27014: LD_INT 4
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: LD_INT 21
27022: PUSH
27023: LD_INT 23
27025: PUSH
27026: LD_INT 22
27028: PUSH
27029: LD_INT 24
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: ST_TO_ADDR
27047: GO 27108
27049: LD_INT 3
27051: DOUBLE
27052: EQUAL
27053: IFTRUE 27057
27055: GO 27107
27057: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_INT 13
27065: PUSH
27066: LD_INT 14
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: LD_INT 3
27074: PUSH
27075: LD_INT 4
27077: PUSH
27078: LD_INT 5
27080: PUSH
27081: LD_INT 21
27083: PUSH
27084: LD_INT 22
27086: PUSH
27087: LD_INT 23
27089: PUSH
27090: LD_INT 24
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: ST_TO_ADDR
27105: GO 27108
27107: POP
// result := ( chassis in result ) ;
27108: LD_ADDR_VAR 0 3
27112: PUSH
27113: LD_VAR 0 1
27117: PUSH
27118: LD_VAR 0 3
27122: IN
27123: ST_TO_ADDR
// end ;
27124: LD_VAR 0 3
27128: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27129: LD_INT 0
27131: PPUSH
// if not chassis or not weapon then
27132: LD_VAR 0 1
27136: NOT
27137: PUSH
27138: LD_VAR 0 2
27142: NOT
27143: OR
27144: IFFALSE 27148
// exit ;
27146: GO 28210
// case weapon of us_machine_gun :
27148: LD_VAR 0 2
27152: PUSH
27153: LD_INT 2
27155: DOUBLE
27156: EQUAL
27157: IFTRUE 27161
27159: GO 27191
27161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27162: LD_ADDR_VAR 0 3
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: LD_INT 4
27178: PUSH
27179: LD_INT 5
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
27189: GO 28194
27191: LD_INT 3
27193: DOUBLE
27194: EQUAL
27195: IFTRUE 27199
27197: GO 27229
27199: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27200: LD_ADDR_VAR 0 3
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: LD_INT 4
27216: PUSH
27217: LD_INT 5
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
27227: GO 28194
27229: LD_INT 11
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27267
27237: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27238: LD_ADDR_VAR 0 3
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: LD_INT 4
27254: PUSH
27255: LD_INT 5
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: ST_TO_ADDR
27265: GO 28194
27267: LD_INT 4
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27301
27275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27276: LD_ADDR_VAR 0 3
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 3
27286: PUSH
27287: LD_INT 4
27289: PUSH
27290: LD_INT 5
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: ST_TO_ADDR
27299: GO 28194
27301: LD_INT 5
27303: DOUBLE
27304: EQUAL
27305: IFTRUE 27309
27307: GO 27335
27309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27310: LD_ADDR_VAR 0 3
27314: PUSH
27315: LD_INT 2
27317: PUSH
27318: LD_INT 3
27320: PUSH
27321: LD_INT 4
27323: PUSH
27324: LD_INT 5
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: ST_TO_ADDR
27333: GO 28194
27335: LD_INT 9
27337: DOUBLE
27338: EQUAL
27339: IFTRUE 27343
27341: GO 27369
27343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: LD_INT 3
27354: PUSH
27355: LD_INT 4
27357: PUSH
27358: LD_INT 5
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: ST_TO_ADDR
27367: GO 28194
27369: LD_INT 7
27371: DOUBLE
27372: EQUAL
27373: IFTRUE 27377
27375: GO 27403
27377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 3
27388: PUSH
27389: LD_INT 4
27391: PUSH
27392: LD_INT 5
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
27401: GO 28194
27403: LD_INT 12
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27437
27411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_INT 2
27419: PUSH
27420: LD_INT 3
27422: PUSH
27423: LD_INT 4
27425: PUSH
27426: LD_INT 5
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: ST_TO_ADDR
27435: GO 28194
27437: LD_INT 13
27439: DOUBLE
27440: EQUAL
27441: IFTRUE 27445
27443: GO 27471
27445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_INT 2
27453: PUSH
27454: LD_INT 3
27456: PUSH
27457: LD_INT 4
27459: PUSH
27460: LD_INT 5
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: ST_TO_ADDR
27469: GO 28194
27471: LD_INT 14
27473: DOUBLE
27474: EQUAL
27475: IFTRUE 27479
27477: GO 27497
27479: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27480: LD_ADDR_VAR 0 3
27484: PUSH
27485: LD_INT 4
27487: PUSH
27488: LD_INT 5
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: ST_TO_ADDR
27495: GO 28194
27497: LD_INT 6
27499: DOUBLE
27500: EQUAL
27501: IFTRUE 27505
27503: GO 27523
27505: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27506: LD_ADDR_VAR 0 3
27510: PUSH
27511: LD_INT 4
27513: PUSH
27514: LD_INT 5
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: ST_TO_ADDR
27521: GO 28194
27523: LD_INT 10
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27549
27531: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_INT 4
27539: PUSH
27540: LD_INT 5
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: ST_TO_ADDR
27547: GO 28194
27549: LD_INT 22
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27583
27557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 11
27565: PUSH
27566: LD_INT 12
27568: PUSH
27569: LD_INT 13
27571: PUSH
27572: LD_INT 14
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
27581: GO 28194
27583: LD_INT 23
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27591
27589: GO 27617
27591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 11
27599: PUSH
27600: LD_INT 12
27602: PUSH
27603: LD_INT 13
27605: PUSH
27606: LD_INT 14
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
27615: GO 28194
27617: LD_INT 24
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27651
27625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27626: LD_ADDR_VAR 0 3
27630: PUSH
27631: LD_INT 11
27633: PUSH
27634: LD_INT 12
27636: PUSH
27637: LD_INT 13
27639: PUSH
27640: LD_INT 14
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
27649: GO 28194
27651: LD_INT 30
27653: DOUBLE
27654: EQUAL
27655: IFTRUE 27659
27657: GO 27685
27659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_INT 11
27667: PUSH
27668: LD_INT 12
27670: PUSH
27671: LD_INT 13
27673: PUSH
27674: LD_INT 14
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
27683: GO 28194
27685: LD_INT 25
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 27711
27693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27694: LD_ADDR_VAR 0 3
27698: PUSH
27699: LD_INT 13
27701: PUSH
27702: LD_INT 14
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: ST_TO_ADDR
27709: GO 28194
27711: LD_INT 27
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27737
27719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_INT 13
27727: PUSH
27728: LD_INT 14
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 28194
27737: LD_EXP 12
27741: DOUBLE
27742: EQUAL
27743: IFTRUE 27747
27745: GO 27773
27747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27748: LD_ADDR_VAR 0 3
27752: PUSH
27753: LD_INT 11
27755: PUSH
27756: LD_INT 12
27758: PUSH
27759: LD_INT 13
27761: PUSH
27762: LD_INT 14
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
27771: GO 28194
27773: LD_INT 28
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27799
27781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27782: LD_ADDR_VAR 0 3
27786: PUSH
27787: LD_INT 13
27789: PUSH
27790: LD_INT 14
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: ST_TO_ADDR
27797: GO 28194
27799: LD_INT 29
27801: DOUBLE
27802: EQUAL
27803: IFTRUE 27807
27805: GO 27825
27807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_INT 13
27815: PUSH
27816: LD_INT 14
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: ST_TO_ADDR
27823: GO 28194
27825: LD_INT 31
27827: DOUBLE
27828: EQUAL
27829: IFTRUE 27833
27831: GO 27851
27833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27834: LD_ADDR_VAR 0 3
27838: PUSH
27839: LD_INT 13
27841: PUSH
27842: LD_INT 14
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: ST_TO_ADDR
27849: GO 28194
27851: LD_INT 26
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27859
27857: GO 27877
27859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: LD_INT 13
27867: PUSH
27868: LD_INT 14
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: ST_TO_ADDR
27875: GO 28194
27877: LD_INT 42
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27885
27883: GO 27911
27885: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27886: LD_ADDR_VAR 0 3
27890: PUSH
27891: LD_INT 21
27893: PUSH
27894: LD_INT 22
27896: PUSH
27897: LD_INT 23
27899: PUSH
27900: LD_INT 24
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: ST_TO_ADDR
27909: GO 28194
27911: LD_INT 43
27913: DOUBLE
27914: EQUAL
27915: IFTRUE 27919
27917: GO 27945
27919: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: LD_INT 21
27927: PUSH
27928: LD_INT 22
27930: PUSH
27931: LD_INT 23
27933: PUSH
27934: LD_INT 24
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: ST_TO_ADDR
27943: GO 28194
27945: LD_INT 44
27947: DOUBLE
27948: EQUAL
27949: IFTRUE 27953
27951: GO 27979
27953: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27954: LD_ADDR_VAR 0 3
27958: PUSH
27959: LD_INT 21
27961: PUSH
27962: LD_INT 22
27964: PUSH
27965: LD_INT 23
27967: PUSH
27968: LD_INT 24
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: ST_TO_ADDR
27977: GO 28194
27979: LD_INT 45
27981: DOUBLE
27982: EQUAL
27983: IFTRUE 27987
27985: GO 28013
27987: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27988: LD_ADDR_VAR 0 3
27992: PUSH
27993: LD_INT 21
27995: PUSH
27996: LD_INT 22
27998: PUSH
27999: LD_INT 23
28001: PUSH
28002: LD_INT 24
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
28011: GO 28194
28013: LD_INT 49
28015: DOUBLE
28016: EQUAL
28017: IFTRUE 28021
28019: GO 28047
28021: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28022: LD_ADDR_VAR 0 3
28026: PUSH
28027: LD_INT 21
28029: PUSH
28030: LD_INT 22
28032: PUSH
28033: LD_INT 23
28035: PUSH
28036: LD_INT 24
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: ST_TO_ADDR
28045: GO 28194
28047: LD_INT 51
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28081
28055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 21
28063: PUSH
28064: LD_INT 22
28066: PUSH
28067: LD_INT 23
28069: PUSH
28070: LD_INT 24
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
28079: GO 28194
28081: LD_INT 52
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28115
28089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 21
28097: PUSH
28098: LD_INT 22
28100: PUSH
28101: LD_INT 23
28103: PUSH
28104: LD_INT 24
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
28113: GO 28194
28115: LD_INT 53
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28123
28121: GO 28141
28123: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: LD_INT 23
28131: PUSH
28132: LD_INT 24
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: ST_TO_ADDR
28139: GO 28194
28141: LD_INT 46
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28167
28149: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28150: LD_ADDR_VAR 0 3
28154: PUSH
28155: LD_INT 23
28157: PUSH
28158: LD_INT 24
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: ST_TO_ADDR
28165: GO 28194
28167: LD_INT 47
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28193
28175: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 23
28183: PUSH
28184: LD_INT 24
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: ST_TO_ADDR
28191: GO 28194
28193: POP
// result := ( chassis in result ) ;
28194: LD_ADDR_VAR 0 3
28198: PUSH
28199: LD_VAR 0 1
28203: PUSH
28204: LD_VAR 0 3
28208: IN
28209: ST_TO_ADDR
// end ;
28210: LD_VAR 0 3
28214: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28215: LD_INT 0
28217: PPUSH
28218: PPUSH
28219: PPUSH
28220: PPUSH
28221: PPUSH
28222: PPUSH
28223: PPUSH
// result := array ;
28224: LD_ADDR_VAR 0 5
28228: PUSH
28229: LD_VAR 0 1
28233: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28234: LD_VAR 0 1
28238: NOT
28239: PUSH
28240: LD_VAR 0 2
28244: NOT
28245: OR
28246: PUSH
28247: LD_VAR 0 3
28251: NOT
28252: OR
28253: PUSH
28254: LD_VAR 0 2
28258: PUSH
28259: LD_VAR 0 1
28263: GREATER
28264: OR
28265: PUSH
28266: LD_VAR 0 3
28270: PUSH
28271: LD_VAR 0 1
28275: GREATER
28276: OR
28277: IFFALSE 28281
// exit ;
28279: GO 28577
// if direction then
28281: LD_VAR 0 4
28285: IFFALSE 28349
// begin d := 1 ;
28287: LD_ADDR_VAR 0 9
28291: PUSH
28292: LD_INT 1
28294: ST_TO_ADDR
// if i_from > i_to then
28295: LD_VAR 0 2
28299: PUSH
28300: LD_VAR 0 3
28304: GREATER
28305: IFFALSE 28331
// length := ( array - i_from ) + i_to else
28307: LD_ADDR_VAR 0 11
28311: PUSH
28312: LD_VAR 0 1
28316: PUSH
28317: LD_VAR 0 2
28321: MINUS
28322: PUSH
28323: LD_VAR 0 3
28327: PLUS
28328: ST_TO_ADDR
28329: GO 28347
// length := i_to - i_from ;
28331: LD_ADDR_VAR 0 11
28335: PUSH
28336: LD_VAR 0 3
28340: PUSH
28341: LD_VAR 0 2
28345: MINUS
28346: ST_TO_ADDR
// end else
28347: GO 28410
// begin d := - 1 ;
28349: LD_ADDR_VAR 0 9
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: ST_TO_ADDR
// if i_from > i_to then
28358: LD_VAR 0 2
28362: PUSH
28363: LD_VAR 0 3
28367: GREATER
28368: IFFALSE 28388
// length := i_from - i_to else
28370: LD_ADDR_VAR 0 11
28374: PUSH
28375: LD_VAR 0 2
28379: PUSH
28380: LD_VAR 0 3
28384: MINUS
28385: ST_TO_ADDR
28386: GO 28410
// length := ( array - i_to ) + i_from ;
28388: LD_ADDR_VAR 0 11
28392: PUSH
28393: LD_VAR 0 1
28397: PUSH
28398: LD_VAR 0 3
28402: MINUS
28403: PUSH
28404: LD_VAR 0 2
28408: PLUS
28409: ST_TO_ADDR
// end ; if not length then
28410: LD_VAR 0 11
28414: NOT
28415: IFFALSE 28419
// exit ;
28417: GO 28577
// tmp := array ;
28419: LD_ADDR_VAR 0 10
28423: PUSH
28424: LD_VAR 0 1
28428: ST_TO_ADDR
// for i = 1 to length do
28429: LD_ADDR_VAR 0 6
28433: PUSH
28434: DOUBLE
28435: LD_INT 1
28437: DEC
28438: ST_TO_ADDR
28439: LD_VAR 0 11
28443: PUSH
28444: FOR_TO
28445: IFFALSE 28565
// begin for j = 1 to array do
28447: LD_ADDR_VAR 0 7
28451: PUSH
28452: DOUBLE
28453: LD_INT 1
28455: DEC
28456: ST_TO_ADDR
28457: LD_VAR 0 1
28461: PUSH
28462: FOR_TO
28463: IFFALSE 28551
// begin k := j + d ;
28465: LD_ADDR_VAR 0 8
28469: PUSH
28470: LD_VAR 0 7
28474: PUSH
28475: LD_VAR 0 9
28479: PLUS
28480: ST_TO_ADDR
// if k > array then
28481: LD_VAR 0 8
28485: PUSH
28486: LD_VAR 0 1
28490: GREATER
28491: IFFALSE 28501
// k := 1 ;
28493: LD_ADDR_VAR 0 8
28497: PUSH
28498: LD_INT 1
28500: ST_TO_ADDR
// if not k then
28501: LD_VAR 0 8
28505: NOT
28506: IFFALSE 28518
// k := array ;
28508: LD_ADDR_VAR 0 8
28512: PUSH
28513: LD_VAR 0 1
28517: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28518: LD_ADDR_VAR 0 10
28522: PUSH
28523: LD_VAR 0 10
28527: PPUSH
28528: LD_VAR 0 8
28532: PPUSH
28533: LD_VAR 0 1
28537: PUSH
28538: LD_VAR 0 7
28542: ARRAY
28543: PPUSH
28544: CALL_OW 1
28548: ST_TO_ADDR
// end ;
28549: GO 28462
28551: POP
28552: POP
// array := tmp ;
28553: LD_ADDR_VAR 0 1
28557: PUSH
28558: LD_VAR 0 10
28562: ST_TO_ADDR
// end ;
28563: GO 28444
28565: POP
28566: POP
// result := array ;
28567: LD_ADDR_VAR 0 5
28571: PUSH
28572: LD_VAR 0 1
28576: ST_TO_ADDR
// end ;
28577: LD_VAR 0 5
28581: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
// result := 0 ;
28586: LD_ADDR_VAR 0 3
28590: PUSH
28591: LD_INT 0
28593: ST_TO_ADDR
// if not array or not value in array then
28594: LD_VAR 0 1
28598: NOT
28599: PUSH
28600: LD_VAR 0 2
28604: PUSH
28605: LD_VAR 0 1
28609: IN
28610: NOT
28611: OR
28612: IFFALSE 28616
// exit ;
28614: GO 28670
// for i = 1 to array do
28616: LD_ADDR_VAR 0 4
28620: PUSH
28621: DOUBLE
28622: LD_INT 1
28624: DEC
28625: ST_TO_ADDR
28626: LD_VAR 0 1
28630: PUSH
28631: FOR_TO
28632: IFFALSE 28668
// if value = array [ i ] then
28634: LD_VAR 0 2
28638: PUSH
28639: LD_VAR 0 1
28643: PUSH
28644: LD_VAR 0 4
28648: ARRAY
28649: EQUAL
28650: IFFALSE 28666
// begin result := i ;
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_VAR 0 4
28661: ST_TO_ADDR
// exit ;
28662: POP
28663: POP
28664: GO 28670
// end ;
28666: GO 28631
28668: POP
28669: POP
// end ;
28670: LD_VAR 0 3
28674: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28675: LD_INT 0
28677: PPUSH
// vc_chassis := chassis ;
28678: LD_ADDR_OWVAR 37
28682: PUSH
28683: LD_VAR 0 1
28687: ST_TO_ADDR
// vc_engine := engine ;
28688: LD_ADDR_OWVAR 39
28692: PUSH
28693: LD_VAR 0 2
28697: ST_TO_ADDR
// vc_control := control ;
28698: LD_ADDR_OWVAR 38
28702: PUSH
28703: LD_VAR 0 3
28707: ST_TO_ADDR
// vc_weapon := weapon ;
28708: LD_ADDR_OWVAR 40
28712: PUSH
28713: LD_VAR 0 4
28717: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28718: LD_ADDR_OWVAR 41
28722: PUSH
28723: LD_VAR 0 5
28727: ST_TO_ADDR
// end ;
28728: LD_VAR 0 6
28732: RET
// export function WantPlant ( unit ) ; var task ; begin
28733: LD_INT 0
28735: PPUSH
28736: PPUSH
// result := false ;
28737: LD_ADDR_VAR 0 2
28741: PUSH
28742: LD_INT 0
28744: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28745: LD_ADDR_VAR 0 3
28749: PUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL_OW 437
28759: ST_TO_ADDR
// if task then
28760: LD_VAR 0 3
28764: IFFALSE 28792
// if task [ 1 ] [ 1 ] = p then
28766: LD_VAR 0 3
28770: PUSH
28771: LD_INT 1
28773: ARRAY
28774: PUSH
28775: LD_INT 1
28777: ARRAY
28778: PUSH
28779: LD_STRING p
28781: EQUAL
28782: IFFALSE 28792
// result := true ;
28784: LD_ADDR_VAR 0 2
28788: PUSH
28789: LD_INT 1
28791: ST_TO_ADDR
// end ;
28792: LD_VAR 0 2
28796: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28797: LD_INT 0
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
// if pos < 1 then
28803: LD_VAR 0 2
28807: PUSH
28808: LD_INT 1
28810: LESS
28811: IFFALSE 28815
// exit ;
28813: GO 29118
// if pos = 1 then
28815: LD_VAR 0 2
28819: PUSH
28820: LD_INT 1
28822: EQUAL
28823: IFFALSE 28856
// result := Replace ( arr , pos [ 1 ] , value ) else
28825: LD_ADDR_VAR 0 4
28829: PUSH
28830: LD_VAR 0 1
28834: PPUSH
28835: LD_VAR 0 2
28839: PUSH
28840: LD_INT 1
28842: ARRAY
28843: PPUSH
28844: LD_VAR 0 3
28848: PPUSH
28849: CALL_OW 1
28853: ST_TO_ADDR
28854: GO 29118
// begin tmp := arr ;
28856: LD_ADDR_VAR 0 6
28860: PUSH
28861: LD_VAR 0 1
28865: ST_TO_ADDR
// s_arr := [ tmp ] ;
28866: LD_ADDR_VAR 0 7
28870: PUSH
28871: LD_VAR 0 6
28875: PUSH
28876: EMPTY
28877: LIST
28878: ST_TO_ADDR
// for i = 1 to pos - 1 do
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: DOUBLE
28885: LD_INT 1
28887: DEC
28888: ST_TO_ADDR
28889: LD_VAR 0 2
28893: PUSH
28894: LD_INT 1
28896: MINUS
28897: PUSH
28898: FOR_TO
28899: IFFALSE 28944
// begin tmp := tmp [ pos [ i ] ] ;
28901: LD_ADDR_VAR 0 6
28905: PUSH
28906: LD_VAR 0 6
28910: PUSH
28911: LD_VAR 0 2
28915: PUSH
28916: LD_VAR 0 5
28920: ARRAY
28921: ARRAY
28922: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28923: LD_ADDR_VAR 0 7
28927: PUSH
28928: LD_VAR 0 7
28932: PUSH
28933: LD_VAR 0 6
28937: PUSH
28938: EMPTY
28939: LIST
28940: ADD
28941: ST_TO_ADDR
// end ;
28942: GO 28898
28944: POP
28945: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28946: LD_ADDR_VAR 0 6
28950: PUSH
28951: LD_VAR 0 6
28955: PPUSH
28956: LD_VAR 0 2
28960: PUSH
28961: LD_VAR 0 2
28965: ARRAY
28966: PPUSH
28967: LD_VAR 0 3
28971: PPUSH
28972: CALL_OW 1
28976: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28977: LD_ADDR_VAR 0 7
28981: PUSH
28982: LD_VAR 0 7
28986: PPUSH
28987: LD_VAR 0 7
28991: PPUSH
28992: LD_VAR 0 6
28996: PPUSH
28997: CALL_OW 1
29001: ST_TO_ADDR
// for i = s_arr downto 2 do
29002: LD_ADDR_VAR 0 5
29006: PUSH
29007: DOUBLE
29008: LD_VAR 0 7
29012: INC
29013: ST_TO_ADDR
29014: LD_INT 2
29016: PUSH
29017: FOR_DOWNTO
29018: IFFALSE 29102
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29020: LD_ADDR_VAR 0 6
29024: PUSH
29025: LD_VAR 0 7
29029: PUSH
29030: LD_VAR 0 5
29034: PUSH
29035: LD_INT 1
29037: MINUS
29038: ARRAY
29039: PPUSH
29040: LD_VAR 0 2
29044: PUSH
29045: LD_VAR 0 5
29049: PUSH
29050: LD_INT 1
29052: MINUS
29053: ARRAY
29054: PPUSH
29055: LD_VAR 0 7
29059: PUSH
29060: LD_VAR 0 5
29064: ARRAY
29065: PPUSH
29066: CALL_OW 1
29070: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29071: LD_ADDR_VAR 0 7
29075: PUSH
29076: LD_VAR 0 7
29080: PPUSH
29081: LD_VAR 0 5
29085: PUSH
29086: LD_INT 1
29088: MINUS
29089: PPUSH
29090: LD_VAR 0 6
29094: PPUSH
29095: CALL_OW 1
29099: ST_TO_ADDR
// end ;
29100: GO 29017
29102: POP
29103: POP
// result := s_arr [ 1 ] ;
29104: LD_ADDR_VAR 0 4
29108: PUSH
29109: LD_VAR 0 7
29113: PUSH
29114: LD_INT 1
29116: ARRAY
29117: ST_TO_ADDR
// end ; end ;
29118: LD_VAR 0 4
29122: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
// if not list then
29127: LD_VAR 0 1
29131: NOT
29132: IFFALSE 29136
// exit ;
29134: GO 29227
// i := list [ pos1 ] ;
29136: LD_ADDR_VAR 0 5
29140: PUSH
29141: LD_VAR 0 1
29145: PUSH
29146: LD_VAR 0 2
29150: ARRAY
29151: ST_TO_ADDR
// if not i then
29152: LD_VAR 0 5
29156: NOT
29157: IFFALSE 29161
// exit ;
29159: GO 29227
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29161: LD_ADDR_VAR 0 1
29165: PUSH
29166: LD_VAR 0 1
29170: PPUSH
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_VAR 0 1
29180: PUSH
29181: LD_VAR 0 3
29185: ARRAY
29186: PPUSH
29187: CALL_OW 1
29191: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29192: LD_ADDR_VAR 0 1
29196: PUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: LD_VAR 0 3
29206: PPUSH
29207: LD_VAR 0 5
29211: PPUSH
29212: CALL_OW 1
29216: ST_TO_ADDR
// result := list ;
29217: LD_ADDR_VAR 0 4
29221: PUSH
29222: LD_VAR 0 1
29226: ST_TO_ADDR
// end ;
29227: LD_VAR 0 4
29231: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29232: LD_INT 0
29234: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29235: LD_ADDR_VAR 0 5
29239: PUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 250
29249: PPUSH
29250: LD_VAR 0 1
29254: PPUSH
29255: CALL_OW 251
29259: PPUSH
29260: LD_VAR 0 2
29264: PPUSH
29265: LD_VAR 0 3
29269: PPUSH
29270: LD_VAR 0 4
29274: PPUSH
29275: CALL 29285 0 5
29279: ST_TO_ADDR
// end ;
29280: LD_VAR 0 5
29284: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
29289: PPUSH
29290: PPUSH
// if not list then
29291: LD_VAR 0 3
29295: NOT
29296: IFFALSE 29300
// exit ;
29298: GO 29688
// result := [ ] ;
29300: LD_ADDR_VAR 0 6
29304: PUSH
29305: EMPTY
29306: ST_TO_ADDR
// for i in list do
29307: LD_ADDR_VAR 0 7
29311: PUSH
29312: LD_VAR 0 3
29316: PUSH
29317: FOR_IN
29318: IFFALSE 29520
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29320: LD_ADDR_VAR 0 9
29324: PUSH
29325: LD_VAR 0 7
29329: PPUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: LD_VAR 0 2
29339: PPUSH
29340: CALL_OW 297
29344: ST_TO_ADDR
// if not result then
29345: LD_VAR 0 6
29349: NOT
29350: IFFALSE 29376
// result := [ [ i , tmp ] ] else
29352: LD_ADDR_VAR 0 6
29356: PUSH
29357: LD_VAR 0 7
29361: PUSH
29362: LD_VAR 0 9
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: ST_TO_ADDR
29374: GO 29518
// begin if result [ result ] [ 2 ] < tmp then
29376: LD_VAR 0 6
29380: PUSH
29381: LD_VAR 0 6
29385: ARRAY
29386: PUSH
29387: LD_INT 2
29389: ARRAY
29390: PUSH
29391: LD_VAR 0 9
29395: LESS
29396: IFFALSE 29438
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29398: LD_ADDR_VAR 0 6
29402: PUSH
29403: LD_VAR 0 6
29407: PPUSH
29408: LD_VAR 0 6
29412: PUSH
29413: LD_INT 1
29415: PLUS
29416: PPUSH
29417: LD_VAR 0 7
29421: PUSH
29422: LD_VAR 0 9
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PPUSH
29431: CALL_OW 2
29435: ST_TO_ADDR
29436: GO 29518
// for j = 1 to result do
29438: LD_ADDR_VAR 0 8
29442: PUSH
29443: DOUBLE
29444: LD_INT 1
29446: DEC
29447: ST_TO_ADDR
29448: LD_VAR 0 6
29452: PUSH
29453: FOR_TO
29454: IFFALSE 29516
// begin if tmp < result [ j ] [ 2 ] then
29456: LD_VAR 0 9
29460: PUSH
29461: LD_VAR 0 6
29465: PUSH
29466: LD_VAR 0 8
29470: ARRAY
29471: PUSH
29472: LD_INT 2
29474: ARRAY
29475: LESS
29476: IFFALSE 29514
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29478: LD_ADDR_VAR 0 6
29482: PUSH
29483: LD_VAR 0 6
29487: PPUSH
29488: LD_VAR 0 8
29492: PPUSH
29493: LD_VAR 0 7
29497: PUSH
29498: LD_VAR 0 9
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PPUSH
29507: CALL_OW 2
29511: ST_TO_ADDR
// break ;
29512: GO 29516
// end ; end ;
29514: GO 29453
29516: POP
29517: POP
// end ; end ;
29518: GO 29317
29520: POP
29521: POP
// if result and not asc then
29522: LD_VAR 0 6
29526: PUSH
29527: LD_VAR 0 4
29531: NOT
29532: AND
29533: IFFALSE 29608
// begin tmp := result ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_VAR 0 6
29544: ST_TO_ADDR
// for i = tmp downto 1 do
29545: LD_ADDR_VAR 0 7
29549: PUSH
29550: DOUBLE
29551: LD_VAR 0 9
29555: INC
29556: ST_TO_ADDR
29557: LD_INT 1
29559: PUSH
29560: FOR_DOWNTO
29561: IFFALSE 29606
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29563: LD_ADDR_VAR 0 6
29567: PUSH
29568: LD_VAR 0 6
29572: PPUSH
29573: LD_VAR 0 9
29577: PUSH
29578: LD_VAR 0 7
29582: MINUS
29583: PUSH
29584: LD_INT 1
29586: PLUS
29587: PPUSH
29588: LD_VAR 0 9
29592: PUSH
29593: LD_VAR 0 7
29597: ARRAY
29598: PPUSH
29599: CALL_OW 1
29603: ST_TO_ADDR
29604: GO 29560
29606: POP
29607: POP
// end ; tmp := [ ] ;
29608: LD_ADDR_VAR 0 9
29612: PUSH
29613: EMPTY
29614: ST_TO_ADDR
// if mode then
29615: LD_VAR 0 5
29619: IFFALSE 29688
// begin for i = 1 to result do
29621: LD_ADDR_VAR 0 7
29625: PUSH
29626: DOUBLE
29627: LD_INT 1
29629: DEC
29630: ST_TO_ADDR
29631: LD_VAR 0 6
29635: PUSH
29636: FOR_TO
29637: IFFALSE 29676
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29639: LD_ADDR_VAR 0 9
29643: PUSH
29644: LD_VAR 0 9
29648: PPUSH
29649: LD_VAR 0 7
29653: PPUSH
29654: LD_VAR 0 6
29658: PUSH
29659: LD_VAR 0 7
29663: ARRAY
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PPUSH
29669: CALL_OW 1
29673: ST_TO_ADDR
29674: GO 29636
29676: POP
29677: POP
// result := tmp ;
29678: LD_ADDR_VAR 0 6
29682: PUSH
29683: LD_VAR 0 9
29687: ST_TO_ADDR
// end ; end ;
29688: LD_VAR 0 6
29692: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29693: LD_INT 0
29695: PPUSH
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29701: LD_ADDR_VAR 0 5
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// if not x or not y then
29723: LD_VAR 0 2
29727: NOT
29728: PUSH
29729: LD_VAR 0 3
29733: NOT
29734: OR
29735: IFFALSE 29739
// exit ;
29737: GO 31391
// if not range then
29739: LD_VAR 0 4
29743: NOT
29744: IFFALSE 29754
// range := 10 ;
29746: LD_ADDR_VAR 0 4
29750: PUSH
29751: LD_INT 10
29753: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29754: LD_ADDR_VAR 0 8
29758: PUSH
29759: LD_INT 81
29761: PUSH
29762: LD_VAR 0 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 92
29773: PUSH
29774: LD_VAR 0 2
29778: PUSH
29779: LD_VAR 0 3
29783: PUSH
29784: LD_VAR 0 4
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: LD_INT 21
29800: PUSH
29801: LD_INT 3
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: ST_TO_ADDR
// if not tmp then
29822: LD_VAR 0 8
29826: NOT
29827: IFFALSE 29831
// exit ;
29829: GO 31391
// for i in tmp do
29831: LD_ADDR_VAR 0 6
29835: PUSH
29836: LD_VAR 0 8
29840: PUSH
29841: FOR_IN
29842: IFFALSE 31366
// begin points := [ 0 , 0 , 0 ] ;
29844: LD_ADDR_VAR 0 9
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// bpoints := 1 ;
29863: LD_ADDR_VAR 0 10
29867: PUSH
29868: LD_INT 1
29870: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29871: LD_VAR 0 6
29875: PPUSH
29876: CALL_OW 247
29880: PUSH
29881: LD_INT 1
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 30467
29889: POP
// begin if GetClass ( i ) = 1 then
29890: LD_VAR 0 6
29894: PPUSH
29895: CALL_OW 257
29899: PUSH
29900: LD_INT 1
29902: EQUAL
29903: IFFALSE 29924
// points := [ 10 , 5 , 3 ] ;
29905: LD_ADDR_VAR 0 9
29909: PUSH
29910: LD_INT 10
29912: PUSH
29913: LD_INT 5
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29924: LD_VAR 0 6
29928: PPUSH
29929: CALL_OW 257
29933: PUSH
29934: LD_INT 2
29936: PUSH
29937: LD_INT 3
29939: PUSH
29940: LD_INT 4
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: IN
29948: IFFALSE 29969
// points := [ 3 , 2 , 1 ] ;
29950: LD_ADDR_VAR 0 9
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29969: LD_VAR 0 6
29973: PPUSH
29974: CALL_OW 257
29978: PUSH
29979: LD_INT 5
29981: EQUAL
29982: IFFALSE 30003
// points := [ 130 , 5 , 2 ] ;
29984: LD_ADDR_VAR 0 9
29988: PUSH
29989: LD_INT 130
29991: PUSH
29992: LD_INT 5
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30003: LD_VAR 0 6
30007: PPUSH
30008: CALL_OW 257
30012: PUSH
30013: LD_INT 8
30015: EQUAL
30016: IFFALSE 30037
// points := [ 35 , 35 , 30 ] ;
30018: LD_ADDR_VAR 0 9
30022: PUSH
30023: LD_INT 35
30025: PUSH
30026: LD_INT 35
30028: PUSH
30029: LD_INT 30
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30037: LD_VAR 0 6
30041: PPUSH
30042: CALL_OW 257
30046: PUSH
30047: LD_INT 9
30049: EQUAL
30050: IFFALSE 30071
// points := [ 20 , 55 , 40 ] ;
30052: LD_ADDR_VAR 0 9
30056: PUSH
30057: LD_INT 20
30059: PUSH
30060: LD_INT 55
30062: PUSH
30063: LD_INT 40
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30071: LD_VAR 0 6
30075: PPUSH
30076: CALL_OW 257
30080: PUSH
30081: LD_INT 12
30083: PUSH
30084: LD_INT 16
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: IN
30091: IFFALSE 30112
// points := [ 5 , 3 , 2 ] ;
30093: LD_ADDR_VAR 0 9
30097: PUSH
30098: LD_INT 5
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: LD_INT 2
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30112: LD_VAR 0 6
30116: PPUSH
30117: CALL_OW 257
30121: PUSH
30122: LD_INT 17
30124: EQUAL
30125: IFFALSE 30146
// points := [ 100 , 50 , 75 ] ;
30127: LD_ADDR_VAR 0 9
30131: PUSH
30132: LD_INT 100
30134: PUSH
30135: LD_INT 50
30137: PUSH
30138: LD_INT 75
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30146: LD_VAR 0 6
30150: PPUSH
30151: CALL_OW 257
30155: PUSH
30156: LD_INT 15
30158: EQUAL
30159: IFFALSE 30180
// points := [ 10 , 5 , 3 ] ;
30161: LD_ADDR_VAR 0 9
30165: PUSH
30166: LD_INT 10
30168: PUSH
30169: LD_INT 5
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: LIST
30179: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30180: LD_VAR 0 6
30184: PPUSH
30185: CALL_OW 257
30189: PUSH
30190: LD_INT 14
30192: EQUAL
30193: IFFALSE 30214
// points := [ 10 , 0 , 0 ] ;
30195: LD_ADDR_VAR 0 9
30199: PUSH
30200: LD_INT 10
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30214: LD_VAR 0 6
30218: PPUSH
30219: CALL_OW 257
30223: PUSH
30224: LD_INT 11
30226: EQUAL
30227: IFFALSE 30248
// points := [ 30 , 10 , 5 ] ;
30229: LD_ADDR_VAR 0 9
30233: PUSH
30234: LD_INT 30
30236: PUSH
30237: LD_INT 10
30239: PUSH
30240: LD_INT 5
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_INT 5
30255: PPUSH
30256: CALL_OW 321
30260: PUSH
30261: LD_INT 2
30263: EQUAL
30264: IFFALSE 30281
// bpoints := bpoints * 1.8 ;
30266: LD_ADDR_VAR 0 10
30270: PUSH
30271: LD_VAR 0 10
30275: PUSH
30276: LD_REAL  1.80000000000000E+0000
30279: MUL
30280: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30281: LD_VAR 0 6
30285: PPUSH
30286: CALL_OW 257
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 2
30296: PUSH
30297: LD_INT 3
30299: PUSH
30300: LD_INT 4
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: IN
30309: PUSH
30310: LD_VAR 0 1
30314: PPUSH
30315: LD_INT 51
30317: PPUSH
30318: CALL_OW 321
30322: PUSH
30323: LD_INT 2
30325: EQUAL
30326: AND
30327: IFFALSE 30344
// bpoints := bpoints * 1.2 ;
30329: LD_ADDR_VAR 0 10
30333: PUSH
30334: LD_VAR 0 10
30338: PUSH
30339: LD_REAL  1.20000000000000E+0000
30342: MUL
30343: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30344: LD_VAR 0 6
30348: PPUSH
30349: CALL_OW 257
30353: PUSH
30354: LD_INT 5
30356: PUSH
30357: LD_INT 7
30359: PUSH
30360: LD_INT 9
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: IN
30368: PUSH
30369: LD_VAR 0 1
30373: PPUSH
30374: LD_INT 52
30376: PPUSH
30377: CALL_OW 321
30381: PUSH
30382: LD_INT 2
30384: EQUAL
30385: AND
30386: IFFALSE 30403
// bpoints := bpoints * 1.5 ;
30388: LD_ADDR_VAR 0 10
30392: PUSH
30393: LD_VAR 0 10
30397: PUSH
30398: LD_REAL  1.50000000000000E+0000
30401: MUL
30402: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30403: LD_VAR 0 1
30407: PPUSH
30408: LD_INT 66
30410: PPUSH
30411: CALL_OW 321
30415: PUSH
30416: LD_INT 2
30418: EQUAL
30419: IFFALSE 30436
// bpoints := bpoints * 1.1 ;
30421: LD_ADDR_VAR 0 10
30425: PUSH
30426: LD_VAR 0 10
30430: PUSH
30431: LD_REAL  1.10000000000000E+0000
30434: MUL
30435: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30436: LD_ADDR_VAR 0 10
30440: PUSH
30441: LD_VAR 0 10
30445: PUSH
30446: LD_VAR 0 6
30450: PPUSH
30451: LD_INT 1
30453: PPUSH
30454: CALL_OW 259
30458: PUSH
30459: LD_REAL  1.15000000000000E+0000
30462: MUL
30463: MUL
30464: ST_TO_ADDR
// end ; unit_vehicle :
30465: GO 31295
30467: LD_INT 2
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 31283
30475: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30476: LD_VAR 0 6
30480: PPUSH
30481: CALL_OW 264
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 42
30491: PUSH
30492: LD_INT 24
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: IN
30500: IFFALSE 30521
// points := [ 25 , 5 , 3 ] ;
30502: LD_ADDR_VAR 0 9
30506: PUSH
30507: LD_INT 25
30509: PUSH
30510: LD_INT 5
30512: PUSH
30513: LD_INT 3
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30521: LD_VAR 0 6
30525: PPUSH
30526: CALL_OW 264
30530: PUSH
30531: LD_INT 4
30533: PUSH
30534: LD_INT 43
30536: PUSH
30537: LD_INT 25
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: IN
30545: IFFALSE 30566
// points := [ 40 , 15 , 5 ] ;
30547: LD_ADDR_VAR 0 9
30551: PUSH
30552: LD_INT 40
30554: PUSH
30555: LD_INT 15
30557: PUSH
30558: LD_INT 5
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30566: LD_VAR 0 6
30570: PPUSH
30571: CALL_OW 264
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: LD_INT 23
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: IN
30586: IFFALSE 30607
// points := [ 7 , 25 , 8 ] ;
30588: LD_ADDR_VAR 0 9
30592: PUSH
30593: LD_INT 7
30595: PUSH
30596: LD_INT 25
30598: PUSH
30599: LD_INT 8
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30607: LD_VAR 0 6
30611: PPUSH
30612: CALL_OW 264
30616: PUSH
30617: LD_INT 5
30619: PUSH
30620: LD_INT 27
30622: PUSH
30623: LD_INT 44
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: IN
30631: IFFALSE 30652
// points := [ 14 , 50 , 16 ] ;
30633: LD_ADDR_VAR 0 9
30637: PUSH
30638: LD_INT 14
30640: PUSH
30641: LD_INT 50
30643: PUSH
30644: LD_INT 16
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30652: LD_VAR 0 6
30656: PPUSH
30657: CALL_OW 264
30661: PUSH
30662: LD_INT 6
30664: PUSH
30665: LD_INT 46
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: IN
30672: IFFALSE 30693
// points := [ 32 , 120 , 70 ] ;
30674: LD_ADDR_VAR 0 9
30678: PUSH
30679: LD_INT 32
30681: PUSH
30682: LD_INT 120
30684: PUSH
30685: LD_INT 70
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30693: LD_VAR 0 6
30697: PPUSH
30698: CALL_OW 264
30702: PUSH
30703: LD_INT 7
30705: PUSH
30706: LD_INT 28
30708: PUSH
30709: LD_INT 45
30711: PUSH
30712: LD_EXP 12
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: IN
30723: IFFALSE 30744
// points := [ 35 , 20 , 45 ] ;
30725: LD_ADDR_VAR 0 9
30729: PUSH
30730: LD_INT 35
30732: PUSH
30733: LD_INT 20
30735: PUSH
30736: LD_INT 45
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30744: LD_VAR 0 6
30748: PPUSH
30749: CALL_OW 264
30753: PUSH
30754: LD_INT 47
30756: PUSH
30757: EMPTY
30758: LIST
30759: IN
30760: IFFALSE 30781
// points := [ 67 , 45 , 75 ] ;
30762: LD_ADDR_VAR 0 9
30766: PUSH
30767: LD_INT 67
30769: PUSH
30770: LD_INT 45
30772: PUSH
30773: LD_INT 75
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30781: LD_VAR 0 6
30785: PPUSH
30786: CALL_OW 264
30790: PUSH
30791: LD_INT 26
30793: PUSH
30794: EMPTY
30795: LIST
30796: IN
30797: IFFALSE 30818
// points := [ 120 , 30 , 80 ] ;
30799: LD_ADDR_VAR 0 9
30803: PUSH
30804: LD_INT 120
30806: PUSH
30807: LD_INT 30
30809: PUSH
30810: LD_INT 80
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30818: LD_VAR 0 6
30822: PPUSH
30823: CALL_OW 264
30827: PUSH
30828: LD_INT 22
30830: PUSH
30831: EMPTY
30832: LIST
30833: IN
30834: IFFALSE 30855
// points := [ 40 , 1 , 1 ] ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_INT 40
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30855: LD_VAR 0 6
30859: PPUSH
30860: CALL_OW 264
30864: PUSH
30865: LD_INT 29
30867: PUSH
30868: EMPTY
30869: LIST
30870: IN
30871: IFFALSE 30892
// points := [ 70 , 200 , 400 ] ;
30873: LD_ADDR_VAR 0 9
30877: PUSH
30878: LD_INT 70
30880: PUSH
30881: LD_INT 200
30883: PUSH
30884: LD_INT 400
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30892: LD_VAR 0 6
30896: PPUSH
30897: CALL_OW 264
30901: PUSH
30902: LD_INT 14
30904: PUSH
30905: LD_INT 53
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: IN
30912: IFFALSE 30933
// points := [ 40 , 10 , 20 ] ;
30914: LD_ADDR_VAR 0 9
30918: PUSH
30919: LD_INT 40
30921: PUSH
30922: LD_INT 10
30924: PUSH
30925: LD_INT 20
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30933: LD_VAR 0 6
30937: PPUSH
30938: CALL_OW 264
30942: PUSH
30943: LD_INT 9
30945: PUSH
30946: EMPTY
30947: LIST
30948: IN
30949: IFFALSE 30970
// points := [ 5 , 70 , 20 ] ;
30951: LD_ADDR_VAR 0 9
30955: PUSH
30956: LD_INT 5
30958: PUSH
30959: LD_INT 70
30961: PUSH
30962: LD_INT 20
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30970: LD_VAR 0 6
30974: PPUSH
30975: CALL_OW 264
30979: PUSH
30980: LD_INT 10
30982: PUSH
30983: EMPTY
30984: LIST
30985: IN
30986: IFFALSE 31007
// points := [ 35 , 110 , 70 ] ;
30988: LD_ADDR_VAR 0 9
30992: PUSH
30993: LD_INT 35
30995: PUSH
30996: LD_INT 110
30998: PUSH
30999: LD_INT 70
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31007: LD_VAR 0 6
31011: PPUSH
31012: CALL_OW 265
31016: PUSH
31017: LD_INT 25
31019: EQUAL
31020: IFFALSE 31041
// points := [ 80 , 65 , 100 ] ;
31022: LD_ADDR_VAR 0 9
31026: PUSH
31027: LD_INT 80
31029: PUSH
31030: LD_INT 65
31032: PUSH
31033: LD_INT 100
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31041: LD_VAR 0 6
31045: PPUSH
31046: CALL_OW 263
31050: PUSH
31051: LD_INT 1
31053: EQUAL
31054: IFFALSE 31089
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31056: LD_ADDR_VAR 0 10
31060: PUSH
31061: LD_VAR 0 10
31065: PUSH
31066: LD_VAR 0 6
31070: PPUSH
31071: CALL_OW 311
31075: PPUSH
31076: LD_INT 3
31078: PPUSH
31079: CALL_OW 259
31083: PUSH
31084: LD_INT 4
31086: MUL
31087: MUL
31088: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31089: LD_VAR 0 6
31093: PPUSH
31094: CALL_OW 263
31098: PUSH
31099: LD_INT 2
31101: EQUAL
31102: IFFALSE 31153
// begin j := IsControledBy ( i ) ;
31104: LD_ADDR_VAR 0 7
31108: PUSH
31109: LD_VAR 0 6
31113: PPUSH
31114: CALL_OW 312
31118: ST_TO_ADDR
// if j then
31119: LD_VAR 0 7
31123: IFFALSE 31153
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31125: LD_ADDR_VAR 0 10
31129: PUSH
31130: LD_VAR 0 10
31134: PUSH
31135: LD_VAR 0 7
31139: PPUSH
31140: LD_INT 3
31142: PPUSH
31143: CALL_OW 259
31147: PUSH
31148: LD_INT 3
31150: MUL
31151: MUL
31152: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31153: LD_VAR 0 6
31157: PPUSH
31158: CALL_OW 264
31162: PUSH
31163: LD_INT 5
31165: PUSH
31166: LD_INT 6
31168: PUSH
31169: LD_INT 46
31171: PUSH
31172: LD_INT 44
31174: PUSH
31175: LD_INT 47
31177: PUSH
31178: LD_INT 45
31180: PUSH
31181: LD_INT 28
31183: PUSH
31184: LD_INT 7
31186: PUSH
31187: LD_INT 27
31189: PUSH
31190: LD_INT 29
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: IN
31205: PUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: LD_INT 52
31213: PPUSH
31214: CALL_OW 321
31218: PUSH
31219: LD_INT 2
31221: EQUAL
31222: AND
31223: IFFALSE 31240
// bpoints := bpoints * 1.2 ;
31225: LD_ADDR_VAR 0 10
31229: PUSH
31230: LD_VAR 0 10
31234: PUSH
31235: LD_REAL  1.20000000000000E+0000
31238: MUL
31239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31240: LD_VAR 0 6
31244: PPUSH
31245: CALL_OW 264
31249: PUSH
31250: LD_INT 6
31252: PUSH
31253: LD_INT 46
31255: PUSH
31256: LD_INT 47
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: IN
31264: IFFALSE 31281
// bpoints := bpoints * 1.2 ;
31266: LD_ADDR_VAR 0 10
31270: PUSH
31271: LD_VAR 0 10
31275: PUSH
31276: LD_REAL  1.20000000000000E+0000
31279: MUL
31280: ST_TO_ADDR
// end ; unit_building :
31281: GO 31295
31283: LD_INT 3
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31294
31291: POP
// ; end ;
31292: GO 31295
31294: POP
// for j = 1 to 3 do
31295: LD_ADDR_VAR 0 7
31299: PUSH
31300: DOUBLE
31301: LD_INT 1
31303: DEC
31304: ST_TO_ADDR
31305: LD_INT 3
31307: PUSH
31308: FOR_TO
31309: IFFALSE 31362
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31311: LD_ADDR_VAR 0 5
31315: PUSH
31316: LD_VAR 0 5
31320: PPUSH
31321: LD_VAR 0 7
31325: PPUSH
31326: LD_VAR 0 5
31330: PUSH
31331: LD_VAR 0 7
31335: ARRAY
31336: PUSH
31337: LD_VAR 0 9
31341: PUSH
31342: LD_VAR 0 7
31346: ARRAY
31347: PUSH
31348: LD_VAR 0 10
31352: MUL
31353: PLUS
31354: PPUSH
31355: CALL_OW 1
31359: ST_TO_ADDR
31360: GO 31308
31362: POP
31363: POP
// end ;
31364: GO 29841
31366: POP
31367: POP
// result := Replace ( result , 4 , tmp ) ;
31368: LD_ADDR_VAR 0 5
31372: PUSH
31373: LD_VAR 0 5
31377: PPUSH
31378: LD_INT 4
31380: PPUSH
31381: LD_VAR 0 8
31385: PPUSH
31386: CALL_OW 1
31390: ST_TO_ADDR
// end ;
31391: LD_VAR 0 5
31395: RET
// export function DangerAtRange ( unit , range ) ; begin
31396: LD_INT 0
31398: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: LD_VAR 0 1
31408: PPUSH
31409: CALL_OW 255
31413: PPUSH
31414: LD_VAR 0 1
31418: PPUSH
31419: CALL_OW 250
31423: PPUSH
31424: LD_VAR 0 1
31428: PPUSH
31429: CALL_OW 251
31433: PPUSH
31434: LD_VAR 0 2
31438: PPUSH
31439: CALL 29693 0 4
31443: ST_TO_ADDR
// end ;
31444: LD_VAR 0 3
31448: RET
// export function DangerInArea ( side , area ) ; begin
31449: LD_INT 0
31451: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31452: LD_ADDR_VAR 0 3
31456: PUSH
31457: LD_VAR 0 2
31461: PPUSH
31462: LD_INT 81
31464: PUSH
31465: LD_VAR 0 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PPUSH
31474: CALL_OW 70
31478: ST_TO_ADDR
// end ;
31479: LD_VAR 0 3
31483: RET
// export function IsExtension ( b ) ; begin
31484: LD_INT 0
31486: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31487: LD_ADDR_VAR 0 2
31491: PUSH
31492: LD_VAR 0 1
31496: PUSH
31497: LD_INT 23
31499: PUSH
31500: LD_INT 20
31502: PUSH
31503: LD_INT 22
31505: PUSH
31506: LD_INT 17
31508: PUSH
31509: LD_INT 24
31511: PUSH
31512: LD_INT 21
31514: PUSH
31515: LD_INT 19
31517: PUSH
31518: LD_INT 16
31520: PUSH
31521: LD_INT 25
31523: PUSH
31524: LD_INT 18
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: IN
31539: ST_TO_ADDR
// end ;
31540: LD_VAR 0 2
31544: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31545: LD_INT 0
31547: PPUSH
31548: PPUSH
31549: PPUSH
// result := [ ] ;
31550: LD_ADDR_VAR 0 4
31554: PUSH
31555: EMPTY
31556: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31557: LD_ADDR_VAR 0 5
31561: PUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_INT 21
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PPUSH
31577: CALL_OW 70
31581: ST_TO_ADDR
// if not tmp then
31582: LD_VAR 0 5
31586: NOT
31587: IFFALSE 31591
// exit ;
31589: GO 31655
// if checkLink then
31591: LD_VAR 0 3
31595: IFFALSE 31645
// begin for i in tmp do
31597: LD_ADDR_VAR 0 6
31601: PUSH
31602: LD_VAR 0 5
31606: PUSH
31607: FOR_IN
31608: IFFALSE 31643
// if GetBase ( i ) <> base then
31610: LD_VAR 0 6
31614: PPUSH
31615: CALL_OW 274
31619: PUSH
31620: LD_VAR 0 1
31624: NONEQUAL
31625: IFFALSE 31641
// ComLinkToBase ( base , i ) ;
31627: LD_VAR 0 1
31631: PPUSH
31632: LD_VAR 0 6
31636: PPUSH
31637: CALL_OW 169
31641: GO 31607
31643: POP
31644: POP
// end ; result := tmp ;
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: LD_VAR 0 5
31654: ST_TO_ADDR
// end ;
31655: LD_VAR 0 4
31659: RET
// export function ComComplete ( units , b ) ; var i ; begin
31660: LD_INT 0
31662: PPUSH
31663: PPUSH
// if not units then
31664: LD_VAR 0 1
31668: NOT
31669: IFFALSE 31673
// exit ;
31671: GO 31763
// for i in units do
31673: LD_ADDR_VAR 0 4
31677: PUSH
31678: LD_VAR 0 1
31682: PUSH
31683: FOR_IN
31684: IFFALSE 31761
// if BuildingStatus ( b ) = bs_build then
31686: LD_VAR 0 2
31690: PPUSH
31691: CALL_OW 461
31695: PUSH
31696: LD_INT 1
31698: EQUAL
31699: IFFALSE 31759
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31701: LD_VAR 0 4
31705: PPUSH
31706: LD_STRING h
31708: PUSH
31709: LD_VAR 0 2
31713: PPUSH
31714: CALL_OW 250
31718: PUSH
31719: LD_VAR 0 2
31723: PPUSH
31724: CALL_OW 251
31728: PUSH
31729: LD_VAR 0 2
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: PPUSH
31755: CALL_OW 446
31759: GO 31683
31761: POP
31762: POP
// end ;
31763: LD_VAR 0 3
31767: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31768: LD_INT 0
31770: PPUSH
31771: PPUSH
31772: PPUSH
31773: PPUSH
31774: PPUSH
31775: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31776: LD_VAR 0 1
31780: NOT
31781: PUSH
31782: LD_VAR 0 1
31786: PPUSH
31787: CALL_OW 263
31791: PUSH
31792: LD_INT 2
31794: NONEQUAL
31795: OR
31796: IFFALSE 31800
// exit ;
31798: GO 32116
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31800: LD_ADDR_VAR 0 6
31804: PUSH
31805: LD_INT 22
31807: PUSH
31808: LD_VAR 0 1
31812: PPUSH
31813: CALL_OW 255
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 36
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 34
31837: PUSH
31838: LD_INT 31
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PPUSH
31854: CALL_OW 69
31858: ST_TO_ADDR
// if not tmp then
31859: LD_VAR 0 6
31863: NOT
31864: IFFALSE 31868
// exit ;
31866: GO 32116
// result := [ ] ;
31868: LD_ADDR_VAR 0 2
31872: PUSH
31873: EMPTY
31874: ST_TO_ADDR
// for i in tmp do
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_VAR 0 6
31884: PUSH
31885: FOR_IN
31886: IFFALSE 31957
// begin t := UnitsInside ( i ) ;
31888: LD_ADDR_VAR 0 4
31892: PUSH
31893: LD_VAR 0 3
31897: PPUSH
31898: CALL_OW 313
31902: ST_TO_ADDR
// if t then
31903: LD_VAR 0 4
31907: IFFALSE 31955
// for j in t do
31909: LD_ADDR_VAR 0 7
31913: PUSH
31914: LD_VAR 0 4
31918: PUSH
31919: FOR_IN
31920: IFFALSE 31953
// result := Replace ( result , result + 1 , j ) ;
31922: LD_ADDR_VAR 0 2
31926: PUSH
31927: LD_VAR 0 2
31931: PPUSH
31932: LD_VAR 0 2
31936: PUSH
31937: LD_INT 1
31939: PLUS
31940: PPUSH
31941: LD_VAR 0 7
31945: PPUSH
31946: CALL_OW 1
31950: ST_TO_ADDR
31951: GO 31919
31953: POP
31954: POP
// end ;
31955: GO 31885
31957: POP
31958: POP
// if not result then
31959: LD_VAR 0 2
31963: NOT
31964: IFFALSE 31968
// exit ;
31966: GO 32116
// mech := result [ 1 ] ;
31968: LD_ADDR_VAR 0 5
31972: PUSH
31973: LD_VAR 0 2
31977: PUSH
31978: LD_INT 1
31980: ARRAY
31981: ST_TO_ADDR
// if result > 1 then
31982: LD_VAR 0 2
31986: PUSH
31987: LD_INT 1
31989: GREATER
31990: IFFALSE 32102
// begin for i = 2 to result do
31992: LD_ADDR_VAR 0 3
31996: PUSH
31997: DOUBLE
31998: LD_INT 2
32000: DEC
32001: ST_TO_ADDR
32002: LD_VAR 0 2
32006: PUSH
32007: FOR_TO
32008: IFFALSE 32100
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32010: LD_ADDR_VAR 0 4
32014: PUSH
32015: LD_VAR 0 2
32019: PUSH
32020: LD_VAR 0 3
32024: ARRAY
32025: PPUSH
32026: LD_INT 3
32028: PPUSH
32029: CALL_OW 259
32033: PUSH
32034: LD_VAR 0 2
32038: PUSH
32039: LD_VAR 0 3
32043: ARRAY
32044: PPUSH
32045: CALL_OW 432
32049: MINUS
32050: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32051: LD_VAR 0 4
32055: PUSH
32056: LD_VAR 0 5
32060: PPUSH
32061: LD_INT 3
32063: PPUSH
32064: CALL_OW 259
32068: PUSH
32069: LD_VAR 0 5
32073: PPUSH
32074: CALL_OW 432
32078: MINUS
32079: GREATEREQUAL
32080: IFFALSE 32098
// mech := result [ i ] ;
32082: LD_ADDR_VAR 0 5
32086: PUSH
32087: LD_VAR 0 2
32091: PUSH
32092: LD_VAR 0 3
32096: ARRAY
32097: ST_TO_ADDR
// end ;
32098: GO 32007
32100: POP
32101: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32102: LD_VAR 0 1
32106: PPUSH
32107: LD_VAR 0 5
32111: PPUSH
32112: CALL_OW 135
// end ;
32116: LD_VAR 0 2
32120: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32121: LD_INT 0
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
// result := [ ] ;
32136: LD_ADDR_VAR 0 7
32140: PUSH
32141: EMPTY
32142: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 266
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: IN
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 33802
// if name then
32168: LD_VAR 0 3
32172: IFFALSE 32188
// SetBName ( base_dep , name ) ;
32174: LD_VAR 0 1
32178: PPUSH
32179: LD_VAR 0 3
32183: PPUSH
32184: CALL_OW 500
// base := GetBase ( base_dep ) ;
32188: LD_ADDR_VAR 0 15
32192: PUSH
32193: LD_VAR 0 1
32197: PPUSH
32198: CALL_OW 274
32202: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32203: LD_ADDR_VAR 0 16
32207: PUSH
32208: LD_VAR 0 1
32212: PPUSH
32213: CALL_OW 255
32217: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32218: LD_ADDR_VAR 0 17
32222: PUSH
32223: LD_VAR 0 1
32227: PPUSH
32228: CALL_OW 248
32232: ST_TO_ADDR
// if sources then
32233: LD_VAR 0 5
32237: IFFALSE 32284
// for i = 1 to 3 do
32239: LD_ADDR_VAR 0 8
32243: PUSH
32244: DOUBLE
32245: LD_INT 1
32247: DEC
32248: ST_TO_ADDR
32249: LD_INT 3
32251: PUSH
32252: FOR_TO
32253: IFFALSE 32282
// AddResourceType ( base , i , sources [ i ] ) ;
32255: LD_VAR 0 15
32259: PPUSH
32260: LD_VAR 0 8
32264: PPUSH
32265: LD_VAR 0 5
32269: PUSH
32270: LD_VAR 0 8
32274: ARRAY
32275: PPUSH
32276: CALL_OW 276
32280: GO 32252
32282: POP
32283: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32284: LD_ADDR_VAR 0 18
32288: PUSH
32289: LD_VAR 0 15
32293: PPUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: LD_INT 1
32301: PPUSH
32302: CALL 31545 0 3
32306: ST_TO_ADDR
// InitHc ;
32307: CALL_OW 19
// InitUc ;
32311: CALL_OW 18
// uc_side := side ;
32315: LD_ADDR_OWVAR 20
32319: PUSH
32320: LD_VAR 0 16
32324: ST_TO_ADDR
// uc_nation := nation ;
32325: LD_ADDR_OWVAR 21
32329: PUSH
32330: LD_VAR 0 17
32334: ST_TO_ADDR
// if buildings then
32335: LD_VAR 0 18
32339: IFFALSE 33661
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32341: LD_ADDR_VAR 0 19
32345: PUSH
32346: LD_VAR 0 18
32350: PPUSH
32351: LD_INT 2
32353: PUSH
32354: LD_INT 30
32356: PUSH
32357: LD_INT 29
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 30
32366: PUSH
32367: LD_INT 30
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: PPUSH
32379: CALL_OW 72
32383: ST_TO_ADDR
// if tmp then
32384: LD_VAR 0 19
32388: IFFALSE 32436
// for i in tmp do
32390: LD_ADDR_VAR 0 8
32394: PUSH
32395: LD_VAR 0 19
32399: PUSH
32400: FOR_IN
32401: IFFALSE 32434
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32403: LD_VAR 0 8
32407: PPUSH
32408: CALL_OW 250
32412: PPUSH
32413: LD_VAR 0 8
32417: PPUSH
32418: CALL_OW 251
32422: PPUSH
32423: LD_VAR 0 16
32427: PPUSH
32428: CALL_OW 441
32432: GO 32400
32434: POP
32435: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32436: LD_VAR 0 18
32440: PPUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 30
32446: PUSH
32447: LD_INT 32
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 30
32456: PUSH
32457: LD_INT 33
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: LIST
32468: PPUSH
32469: CALL_OW 72
32473: IFFALSE 32561
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32475: LD_ADDR_VAR 0 8
32479: PUSH
32480: LD_VAR 0 18
32484: PPUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 30
32490: PUSH
32491: LD_INT 32
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 30
32500: PUSH
32501: LD_INT 33
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: PPUSH
32513: CALL_OW 72
32517: PUSH
32518: FOR_IN
32519: IFFALSE 32559
// begin if not GetBWeapon ( i ) then
32521: LD_VAR 0 8
32525: PPUSH
32526: CALL_OW 269
32530: NOT
32531: IFFALSE 32557
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32533: LD_VAR 0 8
32537: PPUSH
32538: LD_VAR 0 8
32542: PPUSH
32543: LD_VAR 0 2
32547: PPUSH
32548: CALL 33807 0 2
32552: PPUSH
32553: CALL_OW 431
// end ;
32557: GO 32518
32559: POP
32560: POP
// end ; for i = 1 to personel do
32561: LD_ADDR_VAR 0 8
32565: PUSH
32566: DOUBLE
32567: LD_INT 1
32569: DEC
32570: ST_TO_ADDR
32571: LD_VAR 0 6
32575: PUSH
32576: FOR_TO
32577: IFFALSE 33641
// begin if i > 4 then
32579: LD_VAR 0 8
32583: PUSH
32584: LD_INT 4
32586: GREATER
32587: IFFALSE 32591
// break ;
32589: GO 33641
// case i of 1 :
32591: LD_VAR 0 8
32595: PUSH
32596: LD_INT 1
32598: DOUBLE
32599: EQUAL
32600: IFTRUE 32604
32602: GO 32684
32604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32605: LD_ADDR_VAR 0 12
32609: PUSH
32610: LD_VAR 0 18
32614: PPUSH
32615: LD_INT 22
32617: PUSH
32618: LD_VAR 0 16
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 58
32629: PUSH
32630: EMPTY
32631: LIST
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: LD_INT 30
32638: PUSH
32639: LD_INT 32
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 30
32648: PUSH
32649: LD_INT 4
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 30
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: PPUSH
32677: CALL_OW 72
32681: ST_TO_ADDR
32682: GO 32906
32684: LD_INT 2
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32754
32692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32693: LD_ADDR_VAR 0 12
32697: PUSH
32698: LD_VAR 0 18
32702: PPUSH
32703: LD_INT 22
32705: PUSH
32706: LD_VAR 0 16
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: LD_INT 30
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 30
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PPUSH
32747: CALL_OW 72
32751: ST_TO_ADDR
32752: GO 32906
32754: LD_INT 3
32756: DOUBLE
32757: EQUAL
32758: IFTRUE 32762
32760: GO 32824
32762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32763: LD_ADDR_VAR 0 12
32767: PUSH
32768: LD_VAR 0 18
32772: PPUSH
32773: LD_INT 22
32775: PUSH
32776: LD_VAR 0 16
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: LD_INT 30
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 30
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PPUSH
32817: CALL_OW 72
32821: ST_TO_ADDR
32822: GO 32906
32824: LD_INT 4
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32905
32832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32833: LD_ADDR_VAR 0 12
32837: PUSH
32838: LD_VAR 0 18
32842: PPUSH
32843: LD_INT 22
32845: PUSH
32846: LD_VAR 0 16
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 2
32857: PUSH
32858: LD_INT 30
32860: PUSH
32861: LD_INT 6
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 30
32870: PUSH
32871: LD_INT 7
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 30
32880: PUSH
32881: LD_INT 8
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PPUSH
32898: CALL_OW 72
32902: ST_TO_ADDR
32903: GO 32906
32905: POP
// if i = 1 then
32906: LD_VAR 0 8
32910: PUSH
32911: LD_INT 1
32913: EQUAL
32914: IFFALSE 33025
// begin tmp := [ ] ;
32916: LD_ADDR_VAR 0 19
32920: PUSH
32921: EMPTY
32922: ST_TO_ADDR
// for j in f do
32923: LD_ADDR_VAR 0 9
32927: PUSH
32928: LD_VAR 0 12
32932: PUSH
32933: FOR_IN
32934: IFFALSE 33007
// if GetBType ( j ) = b_bunker then
32936: LD_VAR 0 9
32940: PPUSH
32941: CALL_OW 266
32945: PUSH
32946: LD_INT 32
32948: EQUAL
32949: IFFALSE 32976
// tmp := Insert ( tmp , 1 , j ) else
32951: LD_ADDR_VAR 0 19
32955: PUSH
32956: LD_VAR 0 19
32960: PPUSH
32961: LD_INT 1
32963: PPUSH
32964: LD_VAR 0 9
32968: PPUSH
32969: CALL_OW 2
32973: ST_TO_ADDR
32974: GO 33005
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32976: LD_ADDR_VAR 0 19
32980: PUSH
32981: LD_VAR 0 19
32985: PPUSH
32986: LD_VAR 0 19
32990: PUSH
32991: LD_INT 1
32993: PLUS
32994: PPUSH
32995: LD_VAR 0 9
32999: PPUSH
33000: CALL_OW 2
33004: ST_TO_ADDR
33005: GO 32933
33007: POP
33008: POP
// if tmp then
33009: LD_VAR 0 19
33013: IFFALSE 33025
// f := tmp ;
33015: LD_ADDR_VAR 0 12
33019: PUSH
33020: LD_VAR 0 19
33024: ST_TO_ADDR
// end ; x := personel [ i ] ;
33025: LD_ADDR_VAR 0 13
33029: PUSH
33030: LD_VAR 0 6
33034: PUSH
33035: LD_VAR 0 8
33039: ARRAY
33040: ST_TO_ADDR
// if x = - 1 then
33041: LD_VAR 0 13
33045: PUSH
33046: LD_INT 1
33048: NEG
33049: EQUAL
33050: IFFALSE 33259
// begin for j in f do
33052: LD_ADDR_VAR 0 9
33056: PUSH
33057: LD_VAR 0 12
33061: PUSH
33062: FOR_IN
33063: IFFALSE 33255
// repeat InitHc ;
33065: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33069: LD_VAR 0 9
33073: PPUSH
33074: CALL_OW 266
33078: PUSH
33079: LD_INT 5
33081: EQUAL
33082: IFFALSE 33152
// begin if UnitsInside ( j ) < 3 then
33084: LD_VAR 0 9
33088: PPUSH
33089: CALL_OW 313
33093: PUSH
33094: LD_INT 3
33096: LESS
33097: IFFALSE 33133
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33099: LD_INT 0
33101: PPUSH
33102: LD_INT 5
33104: PUSH
33105: LD_INT 8
33107: PUSH
33108: LD_INT 9
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: LD_VAR 0 17
33120: ARRAY
33121: PPUSH
33122: LD_VAR 0 4
33126: PPUSH
33127: CALL_OW 380
33131: GO 33150
// PrepareHuman ( false , i , skill ) ;
33133: LD_INT 0
33135: PPUSH
33136: LD_VAR 0 8
33140: PPUSH
33141: LD_VAR 0 4
33145: PPUSH
33146: CALL_OW 380
// end else
33150: GO 33169
// PrepareHuman ( false , i , skill ) ;
33152: LD_INT 0
33154: PPUSH
33155: LD_VAR 0 8
33159: PPUSH
33160: LD_VAR 0 4
33164: PPUSH
33165: CALL_OW 380
// un := CreateHuman ;
33169: LD_ADDR_VAR 0 14
33173: PUSH
33174: CALL_OW 44
33178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33179: LD_ADDR_VAR 0 7
33183: PUSH
33184: LD_VAR 0 7
33188: PPUSH
33189: LD_INT 1
33191: PPUSH
33192: LD_VAR 0 14
33196: PPUSH
33197: CALL_OW 2
33201: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33202: LD_VAR 0 14
33206: PPUSH
33207: LD_VAR 0 9
33211: PPUSH
33212: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33216: LD_VAR 0 9
33220: PPUSH
33221: CALL_OW 313
33225: PUSH
33226: LD_INT 6
33228: EQUAL
33229: PUSH
33230: LD_VAR 0 9
33234: PPUSH
33235: CALL_OW 266
33239: PUSH
33240: LD_INT 32
33242: PUSH
33243: LD_INT 31
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: IN
33250: OR
33251: IFFALSE 33065
33253: GO 33062
33255: POP
33256: POP
// end else
33257: GO 33639
// for j = 1 to x do
33259: LD_ADDR_VAR 0 9
33263: PUSH
33264: DOUBLE
33265: LD_INT 1
33267: DEC
33268: ST_TO_ADDR
33269: LD_VAR 0 13
33273: PUSH
33274: FOR_TO
33275: IFFALSE 33637
// begin InitHc ;
33277: CALL_OW 19
// if not f then
33281: LD_VAR 0 12
33285: NOT
33286: IFFALSE 33375
// begin PrepareHuman ( false , i , skill ) ;
33288: LD_INT 0
33290: PPUSH
33291: LD_VAR 0 8
33295: PPUSH
33296: LD_VAR 0 4
33300: PPUSH
33301: CALL_OW 380
// un := CreateHuman ;
33305: LD_ADDR_VAR 0 14
33309: PUSH
33310: CALL_OW 44
33314: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33315: LD_ADDR_VAR 0 7
33319: PUSH
33320: LD_VAR 0 7
33324: PPUSH
33325: LD_INT 1
33327: PPUSH
33328: LD_VAR 0 14
33332: PPUSH
33333: CALL_OW 2
33337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33338: LD_VAR 0 14
33342: PPUSH
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 250
33352: PPUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 251
33362: PPUSH
33363: LD_INT 10
33365: PPUSH
33366: LD_INT 0
33368: PPUSH
33369: CALL_OW 50
// continue ;
33373: GO 33274
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33375: LD_VAR 0 12
33379: PUSH
33380: LD_INT 1
33382: ARRAY
33383: PPUSH
33384: CALL_OW 313
33388: PUSH
33389: LD_VAR 0 12
33393: PUSH
33394: LD_INT 1
33396: ARRAY
33397: PPUSH
33398: CALL_OW 266
33402: PUSH
33403: LD_INT 32
33405: PUSH
33406: LD_INT 31
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: IN
33413: AND
33414: PUSH
33415: LD_VAR 0 12
33419: PUSH
33420: LD_INT 1
33422: ARRAY
33423: PPUSH
33424: CALL_OW 313
33428: PUSH
33429: LD_INT 6
33431: EQUAL
33432: OR
33433: IFFALSE 33453
// f := Delete ( f , 1 ) ;
33435: LD_ADDR_VAR 0 12
33439: PUSH
33440: LD_VAR 0 12
33444: PPUSH
33445: LD_INT 1
33447: PPUSH
33448: CALL_OW 3
33452: ST_TO_ADDR
// if not f then
33453: LD_VAR 0 12
33457: NOT
33458: IFFALSE 33476
// begin x := x + 2 ;
33460: LD_ADDR_VAR 0 13
33464: PUSH
33465: LD_VAR 0 13
33469: PUSH
33470: LD_INT 2
33472: PLUS
33473: ST_TO_ADDR
// continue ;
33474: GO 33274
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33476: LD_VAR 0 12
33480: PUSH
33481: LD_INT 1
33483: ARRAY
33484: PPUSH
33485: CALL_OW 266
33489: PUSH
33490: LD_INT 5
33492: EQUAL
33493: IFFALSE 33567
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33495: LD_VAR 0 12
33499: PUSH
33500: LD_INT 1
33502: ARRAY
33503: PPUSH
33504: CALL_OW 313
33508: PUSH
33509: LD_INT 3
33511: LESS
33512: IFFALSE 33548
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33514: LD_INT 0
33516: PPUSH
33517: LD_INT 5
33519: PUSH
33520: LD_INT 8
33522: PUSH
33523: LD_INT 9
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: LIST
33530: PUSH
33531: LD_VAR 0 17
33535: ARRAY
33536: PPUSH
33537: LD_VAR 0 4
33541: PPUSH
33542: CALL_OW 380
33546: GO 33565
// PrepareHuman ( false , i , skill ) ;
33548: LD_INT 0
33550: PPUSH
33551: LD_VAR 0 8
33555: PPUSH
33556: LD_VAR 0 4
33560: PPUSH
33561: CALL_OW 380
// end else
33565: GO 33584
// PrepareHuman ( false , i , skill ) ;
33567: LD_INT 0
33569: PPUSH
33570: LD_VAR 0 8
33574: PPUSH
33575: LD_VAR 0 4
33579: PPUSH
33580: CALL_OW 380
// un := CreateHuman ;
33584: LD_ADDR_VAR 0 14
33588: PUSH
33589: CALL_OW 44
33593: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33594: LD_ADDR_VAR 0 7
33598: PUSH
33599: LD_VAR 0 7
33603: PPUSH
33604: LD_INT 1
33606: PPUSH
33607: LD_VAR 0 14
33611: PPUSH
33612: CALL_OW 2
33616: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33617: LD_VAR 0 14
33621: PPUSH
33622: LD_VAR 0 12
33626: PUSH
33627: LD_INT 1
33629: ARRAY
33630: PPUSH
33631: CALL_OW 52
// end ;
33635: GO 33274
33637: POP
33638: POP
// end ;
33639: GO 32576
33641: POP
33642: POP
// result := result ^ buildings ;
33643: LD_ADDR_VAR 0 7
33647: PUSH
33648: LD_VAR 0 7
33652: PUSH
33653: LD_VAR 0 18
33657: ADD
33658: ST_TO_ADDR
// end else
33659: GO 33802
// begin for i = 1 to personel do
33661: LD_ADDR_VAR 0 8
33665: PUSH
33666: DOUBLE
33667: LD_INT 1
33669: DEC
33670: ST_TO_ADDR
33671: LD_VAR 0 6
33675: PUSH
33676: FOR_TO
33677: IFFALSE 33800
// begin if i > 4 then
33679: LD_VAR 0 8
33683: PUSH
33684: LD_INT 4
33686: GREATER
33687: IFFALSE 33691
// break ;
33689: GO 33800
// x := personel [ i ] ;
33691: LD_ADDR_VAR 0 13
33695: PUSH
33696: LD_VAR 0 6
33700: PUSH
33701: LD_VAR 0 8
33705: ARRAY
33706: ST_TO_ADDR
// if x = - 1 then
33707: LD_VAR 0 13
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: EQUAL
33716: IFFALSE 33720
// continue ;
33718: GO 33676
// PrepareHuman ( false , i , skill ) ;
33720: LD_INT 0
33722: PPUSH
33723: LD_VAR 0 8
33727: PPUSH
33728: LD_VAR 0 4
33732: PPUSH
33733: CALL_OW 380
// un := CreateHuman ;
33737: LD_ADDR_VAR 0 14
33741: PUSH
33742: CALL_OW 44
33746: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33747: LD_VAR 0 14
33751: PPUSH
33752: LD_VAR 0 1
33756: PPUSH
33757: CALL_OW 250
33761: PPUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 251
33771: PPUSH
33772: LD_INT 10
33774: PPUSH
33775: LD_INT 0
33777: PPUSH
33778: CALL_OW 50
// result := result ^ un ;
33782: LD_ADDR_VAR 0 7
33786: PUSH
33787: LD_VAR 0 7
33791: PUSH
33792: LD_VAR 0 14
33796: ADD
33797: ST_TO_ADDR
// end ;
33798: GO 33676
33800: POP
33801: POP
// end ; end ;
33802: LD_VAR 0 7
33806: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33807: LD_INT 0
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
// result := false ;
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 0
33832: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33833: LD_VAR 0 1
33837: NOT
33838: PUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 266
33848: PUSH
33849: LD_INT 32
33851: PUSH
33852: LD_INT 33
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: IN
33859: NOT
33860: OR
33861: IFFALSE 33865
// exit ;
33863: GO 34974
// nat := GetNation ( tower ) ;
33865: LD_ADDR_VAR 0 12
33869: PUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: CALL_OW 248
33879: ST_TO_ADDR
// side := GetSide ( tower ) ;
33880: LD_ADDR_VAR 0 16
33884: PUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL_OW 255
33894: ST_TO_ADDR
// x := GetX ( tower ) ;
33895: LD_ADDR_VAR 0 10
33899: PUSH
33900: LD_VAR 0 1
33904: PPUSH
33905: CALL_OW 250
33909: ST_TO_ADDR
// y := GetY ( tower ) ;
33910: LD_ADDR_VAR 0 11
33914: PUSH
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 251
33924: ST_TO_ADDR
// if not x or not y then
33925: LD_VAR 0 10
33929: NOT
33930: PUSH
33931: LD_VAR 0 11
33935: NOT
33936: OR
33937: IFFALSE 33941
// exit ;
33939: GO 34974
// weapon := 0 ;
33941: LD_ADDR_VAR 0 18
33945: PUSH
33946: LD_INT 0
33948: ST_TO_ADDR
// fac_list := [ ] ;
33949: LD_ADDR_VAR 0 17
33953: PUSH
33954: EMPTY
33955: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33956: LD_ADDR_VAR 0 6
33960: PUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 274
33970: PPUSH
33971: LD_VAR 0 2
33975: PPUSH
33976: LD_INT 0
33978: PPUSH
33979: CALL 31545 0 3
33983: PPUSH
33984: LD_INT 30
33986: PUSH
33987: LD_INT 3
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 72
33998: ST_TO_ADDR
// if not factories then
33999: LD_VAR 0 6
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34974
// for i in factories do
34008: LD_ADDR_VAR 0 8
34012: PUSH
34013: LD_VAR 0 6
34017: PUSH
34018: FOR_IN
34019: IFFALSE 34044
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34021: LD_ADDR_VAR 0 17
34025: PUSH
34026: LD_VAR 0 17
34030: PUSH
34031: LD_VAR 0 8
34035: PPUSH
34036: CALL_OW 478
34040: UNION
34041: ST_TO_ADDR
34042: GO 34018
34044: POP
34045: POP
// if not fac_list then
34046: LD_VAR 0 17
34050: NOT
34051: IFFALSE 34055
// exit ;
34053: GO 34974
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34055: LD_ADDR_VAR 0 5
34059: PUSH
34060: LD_INT 4
34062: PUSH
34063: LD_INT 5
34065: PUSH
34066: LD_INT 9
34068: PUSH
34069: LD_INT 10
34071: PUSH
34072: LD_INT 6
34074: PUSH
34075: LD_INT 7
34077: PUSH
34078: LD_INT 11
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 27
34092: PUSH
34093: LD_INT 28
34095: PUSH
34096: LD_INT 26
34098: PUSH
34099: LD_INT 30
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 43
34110: PUSH
34111: LD_INT 44
34113: PUSH
34114: LD_INT 46
34116: PUSH
34117: LD_INT 45
34119: PUSH
34120: LD_INT 47
34122: PUSH
34123: LD_INT 49
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: PUSH
34139: LD_VAR 0 12
34143: ARRAY
34144: ST_TO_ADDR
// list := list isect fac_list ;
34145: LD_ADDR_VAR 0 5
34149: PUSH
34150: LD_VAR 0 5
34154: PUSH
34155: LD_VAR 0 17
34159: ISECT
34160: ST_TO_ADDR
// if not list then
34161: LD_VAR 0 5
34165: NOT
34166: IFFALSE 34170
// exit ;
34168: GO 34974
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34170: LD_VAR 0 12
34174: PUSH
34175: LD_INT 3
34177: EQUAL
34178: PUSH
34179: LD_INT 49
34181: PUSH
34182: LD_VAR 0 5
34186: IN
34187: AND
34188: PUSH
34189: LD_INT 31
34191: PPUSH
34192: LD_VAR 0 16
34196: PPUSH
34197: CALL_OW 321
34201: PUSH
34202: LD_INT 2
34204: EQUAL
34205: AND
34206: IFFALSE 34266
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34208: LD_INT 22
34210: PUSH
34211: LD_VAR 0 16
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 35
34222: PUSH
34223: LD_INT 49
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 91
34232: PUSH
34233: LD_VAR 0 1
34237: PUSH
34238: LD_INT 10
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: PPUSH
34251: CALL_OW 69
34255: NOT
34256: IFFALSE 34266
// weapon := ru_time_lapser ;
34258: LD_ADDR_VAR 0 18
34262: PUSH
34263: LD_INT 49
34265: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34266: LD_VAR 0 12
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 2
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: IN
34281: PUSH
34282: LD_INT 11
34284: PUSH
34285: LD_VAR 0 5
34289: IN
34290: PUSH
34291: LD_INT 30
34293: PUSH
34294: LD_VAR 0 5
34298: IN
34299: OR
34300: AND
34301: PUSH
34302: LD_INT 6
34304: PPUSH
34305: LD_VAR 0 16
34309: PPUSH
34310: CALL_OW 321
34314: PUSH
34315: LD_INT 2
34317: EQUAL
34318: AND
34319: IFFALSE 34484
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34321: LD_INT 22
34323: PUSH
34324: LD_VAR 0 16
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: LD_INT 35
34338: PUSH
34339: LD_INT 11
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 35
34348: PUSH
34349: LD_INT 30
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 91
34363: PUSH
34364: LD_VAR 0 1
34368: PUSH
34369: LD_INT 18
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: PPUSH
34382: CALL_OW 69
34386: NOT
34387: PUSH
34388: LD_INT 22
34390: PUSH
34391: LD_VAR 0 16
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 30
34405: PUSH
34406: LD_INT 32
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 30
34415: PUSH
34416: LD_INT 33
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 91
34430: PUSH
34431: LD_VAR 0 1
34435: PUSH
34436: LD_INT 12
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: LIST
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: PPUSH
34452: CALL_OW 69
34456: PUSH
34457: LD_INT 2
34459: GREATER
34460: AND
34461: IFFALSE 34484
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34463: LD_ADDR_VAR 0 18
34467: PUSH
34468: LD_INT 11
34470: PUSH
34471: LD_INT 30
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_VAR 0 12
34482: ARRAY
34483: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34484: LD_VAR 0 18
34488: NOT
34489: PUSH
34490: LD_INT 40
34492: PPUSH
34493: LD_VAR 0 16
34497: PPUSH
34498: CALL_OW 321
34502: PUSH
34503: LD_INT 2
34505: EQUAL
34506: AND
34507: PUSH
34508: LD_INT 7
34510: PUSH
34511: LD_VAR 0 5
34515: IN
34516: PUSH
34517: LD_INT 28
34519: PUSH
34520: LD_VAR 0 5
34524: IN
34525: OR
34526: PUSH
34527: LD_INT 45
34529: PUSH
34530: LD_VAR 0 5
34534: IN
34535: OR
34536: AND
34537: IFFALSE 34791
// begin hex := GetHexInfo ( x , y ) ;
34539: LD_ADDR_VAR 0 4
34543: PUSH
34544: LD_VAR 0 10
34548: PPUSH
34549: LD_VAR 0 11
34553: PPUSH
34554: CALL_OW 546
34558: ST_TO_ADDR
// if hex [ 1 ] then
34559: LD_VAR 0 4
34563: PUSH
34564: LD_INT 1
34566: ARRAY
34567: IFFALSE 34571
// exit ;
34569: GO 34974
// height := hex [ 2 ] ;
34571: LD_ADDR_VAR 0 15
34575: PUSH
34576: LD_VAR 0 4
34580: PUSH
34581: LD_INT 2
34583: ARRAY
34584: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34585: LD_ADDR_VAR 0 14
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 3
34598: PUSH
34599: LD_INT 5
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: ST_TO_ADDR
// for i in tmp do
34608: LD_ADDR_VAR 0 8
34612: PUSH
34613: LD_VAR 0 14
34617: PUSH
34618: FOR_IN
34619: IFFALSE 34789
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: LD_VAR 0 10
34630: PPUSH
34631: LD_VAR 0 8
34635: PPUSH
34636: LD_INT 5
34638: PPUSH
34639: CALL_OW 272
34643: PUSH
34644: LD_VAR 0 11
34648: PPUSH
34649: LD_VAR 0 8
34653: PPUSH
34654: LD_INT 5
34656: PPUSH
34657: CALL_OW 273
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34666: LD_VAR 0 9
34670: PUSH
34671: LD_INT 1
34673: ARRAY
34674: PPUSH
34675: LD_VAR 0 9
34679: PUSH
34680: LD_INT 2
34682: ARRAY
34683: PPUSH
34684: CALL_OW 488
34688: IFFALSE 34787
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34690: LD_ADDR_VAR 0 4
34694: PUSH
34695: LD_VAR 0 9
34699: PUSH
34700: LD_INT 1
34702: ARRAY
34703: PPUSH
34704: LD_VAR 0 9
34708: PUSH
34709: LD_INT 2
34711: ARRAY
34712: PPUSH
34713: CALL_OW 546
34717: ST_TO_ADDR
// if hex [ 1 ] then
34718: LD_VAR 0 4
34722: PUSH
34723: LD_INT 1
34725: ARRAY
34726: IFFALSE 34730
// continue ;
34728: GO 34618
// h := hex [ 2 ] ;
34730: LD_ADDR_VAR 0 13
34734: PUSH
34735: LD_VAR 0 4
34739: PUSH
34740: LD_INT 2
34742: ARRAY
34743: ST_TO_ADDR
// if h + 7 < height then
34744: LD_VAR 0 13
34748: PUSH
34749: LD_INT 7
34751: PLUS
34752: PUSH
34753: LD_VAR 0 15
34757: LESS
34758: IFFALSE 34787
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34760: LD_ADDR_VAR 0 18
34764: PUSH
34765: LD_INT 7
34767: PUSH
34768: LD_INT 28
34770: PUSH
34771: LD_INT 45
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: PUSH
34779: LD_VAR 0 12
34783: ARRAY
34784: ST_TO_ADDR
// break ;
34785: GO 34789
// end ; end ; end ;
34787: GO 34618
34789: POP
34790: POP
// end ; if not weapon then
34791: LD_VAR 0 18
34795: NOT
34796: IFFALSE 34856
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34798: LD_ADDR_VAR 0 5
34802: PUSH
34803: LD_VAR 0 5
34807: PUSH
34808: LD_INT 11
34810: PUSH
34811: LD_INT 30
34813: PUSH
34814: LD_INT 49
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: LIST
34821: DIFF
34822: ST_TO_ADDR
// if not list then
34823: LD_VAR 0 5
34827: NOT
34828: IFFALSE 34832
// exit ;
34830: GO 34974
// weapon := list [ rand ( 1 , list ) ] ;
34832: LD_ADDR_VAR 0 18
34836: PUSH
34837: LD_VAR 0 5
34841: PUSH
34842: LD_INT 1
34844: PPUSH
34845: LD_VAR 0 5
34849: PPUSH
34850: CALL_OW 12
34854: ARRAY
34855: ST_TO_ADDR
// end ; if weapon then
34856: LD_VAR 0 18
34860: IFFALSE 34974
// begin tmp := CostOfWeapon ( weapon ) ;
34862: LD_ADDR_VAR 0 14
34866: PUSH
34867: LD_VAR 0 18
34871: PPUSH
34872: CALL_OW 451
34876: ST_TO_ADDR
// j := GetBase ( tower ) ;
34877: LD_ADDR_VAR 0 9
34881: PUSH
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL_OW 274
34891: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34892: LD_VAR 0 9
34896: PPUSH
34897: LD_INT 1
34899: PPUSH
34900: CALL_OW 275
34904: PUSH
34905: LD_VAR 0 14
34909: PUSH
34910: LD_INT 1
34912: ARRAY
34913: GREATEREQUAL
34914: PUSH
34915: LD_VAR 0 9
34919: PPUSH
34920: LD_INT 2
34922: PPUSH
34923: CALL_OW 275
34927: PUSH
34928: LD_VAR 0 14
34932: PUSH
34933: LD_INT 2
34935: ARRAY
34936: GREATEREQUAL
34937: AND
34938: PUSH
34939: LD_VAR 0 9
34943: PPUSH
34944: LD_INT 3
34946: PPUSH
34947: CALL_OW 275
34951: PUSH
34952: LD_VAR 0 14
34956: PUSH
34957: LD_INT 3
34959: ARRAY
34960: GREATEREQUAL
34961: AND
34962: IFFALSE 34974
// result := weapon ;
34964: LD_ADDR_VAR 0 3
34968: PUSH
34969: LD_VAR 0 18
34973: ST_TO_ADDR
// end ; end ;
34974: LD_VAR 0 3
34978: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
// result := true ;
34983: LD_ADDR_VAR 0 3
34987: PUSH
34988: LD_INT 1
34990: ST_TO_ADDR
// if array1 = array2 then
34991: LD_VAR 0 1
34995: PUSH
34996: LD_VAR 0 2
35000: EQUAL
35001: IFFALSE 35061
// begin for i = 1 to array1 do
35003: LD_ADDR_VAR 0 4
35007: PUSH
35008: DOUBLE
35009: LD_INT 1
35011: DEC
35012: ST_TO_ADDR
35013: LD_VAR 0 1
35017: PUSH
35018: FOR_TO
35019: IFFALSE 35057
// if array1 [ i ] <> array2 [ i ] then
35021: LD_VAR 0 1
35025: PUSH
35026: LD_VAR 0 4
35030: ARRAY
35031: PUSH
35032: LD_VAR 0 2
35036: PUSH
35037: LD_VAR 0 4
35041: ARRAY
35042: NONEQUAL
35043: IFFALSE 35055
// begin result := false ;
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_INT 0
35052: ST_TO_ADDR
// break ;
35053: GO 35057
// end ;
35055: GO 35018
35057: POP
35058: POP
// end else
35059: GO 35069
// result := false ;
35061: LD_ADDR_VAR 0 3
35065: PUSH
35066: LD_INT 0
35068: ST_TO_ADDR
// end ;
35069: LD_VAR 0 3
35073: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35074: LD_INT 0
35076: PPUSH
35077: PPUSH
// if not array1 or not array2 then
35078: LD_VAR 0 1
35082: NOT
35083: PUSH
35084: LD_VAR 0 2
35088: NOT
35089: OR
35090: IFFALSE 35094
// exit ;
35092: GO 35158
// result := true ;
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: LD_INT 1
35101: ST_TO_ADDR
// for i = 1 to array1 do
35102: LD_ADDR_VAR 0 4
35106: PUSH
35107: DOUBLE
35108: LD_INT 1
35110: DEC
35111: ST_TO_ADDR
35112: LD_VAR 0 1
35116: PUSH
35117: FOR_TO
35118: IFFALSE 35156
// if array1 [ i ] <> array2 [ i ] then
35120: LD_VAR 0 1
35124: PUSH
35125: LD_VAR 0 4
35129: ARRAY
35130: PUSH
35131: LD_VAR 0 2
35135: PUSH
35136: LD_VAR 0 4
35140: ARRAY
35141: NONEQUAL
35142: IFFALSE 35154
// begin result := false ;
35144: LD_ADDR_VAR 0 3
35148: PUSH
35149: LD_INT 0
35151: ST_TO_ADDR
// break ;
35152: GO 35156
// end ;
35154: GO 35117
35156: POP
35157: POP
// end ;
35158: LD_VAR 0 3
35162: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35163: LD_INT 0
35165: PPUSH
35166: PPUSH
35167: PPUSH
// pom := GetBase ( fac ) ;
35168: LD_ADDR_VAR 0 5
35172: PUSH
35173: LD_VAR 0 1
35177: PPUSH
35178: CALL_OW 274
35182: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35183: LD_ADDR_VAR 0 4
35187: PUSH
35188: LD_VAR 0 2
35192: PUSH
35193: LD_INT 1
35195: ARRAY
35196: PPUSH
35197: LD_VAR 0 2
35201: PUSH
35202: LD_INT 2
35204: ARRAY
35205: PPUSH
35206: LD_VAR 0 2
35210: PUSH
35211: LD_INT 3
35213: ARRAY
35214: PPUSH
35215: LD_VAR 0 2
35219: PUSH
35220: LD_INT 4
35222: ARRAY
35223: PPUSH
35224: CALL_OW 449
35228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35229: LD_ADDR_VAR 0 3
35233: PUSH
35234: LD_VAR 0 5
35238: PPUSH
35239: LD_INT 1
35241: PPUSH
35242: CALL_OW 275
35246: PUSH
35247: LD_VAR 0 4
35251: PUSH
35252: LD_INT 1
35254: ARRAY
35255: GREATEREQUAL
35256: PUSH
35257: LD_VAR 0 5
35261: PPUSH
35262: LD_INT 2
35264: PPUSH
35265: CALL_OW 275
35269: PUSH
35270: LD_VAR 0 4
35274: PUSH
35275: LD_INT 2
35277: ARRAY
35278: GREATEREQUAL
35279: AND
35280: PUSH
35281: LD_VAR 0 5
35285: PPUSH
35286: LD_INT 3
35288: PPUSH
35289: CALL_OW 275
35293: PUSH
35294: LD_VAR 0 4
35298: PUSH
35299: LD_INT 3
35301: ARRAY
35302: GREATEREQUAL
35303: AND
35304: ST_TO_ADDR
// end ;
35305: LD_VAR 0 3
35309: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35310: LD_INT 0
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
// pom := GetBase ( building ) ;
35316: LD_ADDR_VAR 0 3
35320: PUSH
35321: LD_VAR 0 1
35325: PPUSH
35326: CALL_OW 274
35330: ST_TO_ADDR
// if not pom then
35331: LD_VAR 0 3
35335: NOT
35336: IFFALSE 35340
// exit ;
35338: GO 35510
// btype := GetBType ( building ) ;
35340: LD_ADDR_VAR 0 5
35344: PUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 266
35354: ST_TO_ADDR
// if btype = b_armoury then
35355: LD_VAR 0 5
35359: PUSH
35360: LD_INT 4
35362: EQUAL
35363: IFFALSE 35373
// btype := b_barracks ;
35365: LD_ADDR_VAR 0 5
35369: PUSH
35370: LD_INT 5
35372: ST_TO_ADDR
// if btype = b_depot then
35373: LD_VAR 0 5
35377: PUSH
35378: LD_INT 0
35380: EQUAL
35381: IFFALSE 35391
// btype := b_warehouse ;
35383: LD_ADDR_VAR 0 5
35387: PUSH
35388: LD_INT 1
35390: ST_TO_ADDR
// if btype = b_workshop then
35391: LD_VAR 0 5
35395: PUSH
35396: LD_INT 2
35398: EQUAL
35399: IFFALSE 35409
// btype := b_factory ;
35401: LD_ADDR_VAR 0 5
35405: PUSH
35406: LD_INT 3
35408: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35409: LD_ADDR_VAR 0 4
35413: PUSH
35414: LD_VAR 0 5
35418: PPUSH
35419: LD_VAR 0 1
35423: PPUSH
35424: CALL_OW 248
35428: PPUSH
35429: CALL_OW 450
35433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35434: LD_ADDR_VAR 0 2
35438: PUSH
35439: LD_VAR 0 3
35443: PPUSH
35444: LD_INT 1
35446: PPUSH
35447: CALL_OW 275
35451: PUSH
35452: LD_VAR 0 4
35456: PUSH
35457: LD_INT 1
35459: ARRAY
35460: GREATEREQUAL
35461: PUSH
35462: LD_VAR 0 3
35466: PPUSH
35467: LD_INT 2
35469: PPUSH
35470: CALL_OW 275
35474: PUSH
35475: LD_VAR 0 4
35479: PUSH
35480: LD_INT 2
35482: ARRAY
35483: GREATEREQUAL
35484: AND
35485: PUSH
35486: LD_VAR 0 3
35490: PPUSH
35491: LD_INT 3
35493: PPUSH
35494: CALL_OW 275
35498: PUSH
35499: LD_VAR 0 4
35503: PUSH
35504: LD_INT 3
35506: ARRAY
35507: GREATEREQUAL
35508: AND
35509: ST_TO_ADDR
// end ;
35510: LD_VAR 0 2
35514: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
// pom := GetBase ( building ) ;
35520: LD_ADDR_VAR 0 4
35524: PUSH
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 274
35534: ST_TO_ADDR
// if not pom then
35535: LD_VAR 0 4
35539: NOT
35540: IFFALSE 35544
// exit ;
35542: GO 35645
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35544: LD_ADDR_VAR 0 5
35548: PUSH
35549: LD_VAR 0 2
35553: PPUSH
35554: LD_VAR 0 1
35558: PPUSH
35559: CALL_OW 248
35563: PPUSH
35564: CALL_OW 450
35568: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35569: LD_ADDR_VAR 0 3
35573: PUSH
35574: LD_VAR 0 4
35578: PPUSH
35579: LD_INT 1
35581: PPUSH
35582: CALL_OW 275
35586: PUSH
35587: LD_VAR 0 5
35591: PUSH
35592: LD_INT 1
35594: ARRAY
35595: GREATEREQUAL
35596: PUSH
35597: LD_VAR 0 4
35601: PPUSH
35602: LD_INT 2
35604: PPUSH
35605: CALL_OW 275
35609: PUSH
35610: LD_VAR 0 5
35614: PUSH
35615: LD_INT 2
35617: ARRAY
35618: GREATEREQUAL
35619: AND
35620: PUSH
35621: LD_VAR 0 4
35625: PPUSH
35626: LD_INT 3
35628: PPUSH
35629: CALL_OW 275
35633: PUSH
35634: LD_VAR 0 5
35638: PUSH
35639: LD_INT 3
35641: ARRAY
35642: GREATEREQUAL
35643: AND
35644: ST_TO_ADDR
// end ;
35645: LD_VAR 0 3
35649: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35650: LD_INT 0
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
// result := false ;
35663: LD_ADDR_VAR 0 8
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35671: LD_VAR 0 5
35675: NOT
35676: PUSH
35677: LD_VAR 0 1
35681: NOT
35682: OR
35683: PUSH
35684: LD_VAR 0 2
35688: NOT
35689: OR
35690: PUSH
35691: LD_VAR 0 3
35695: NOT
35696: OR
35697: IFFALSE 35701
// exit ;
35699: GO 36515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35701: LD_ADDR_VAR 0 14
35705: PUSH
35706: LD_VAR 0 1
35710: PPUSH
35711: LD_VAR 0 2
35715: PPUSH
35716: LD_VAR 0 3
35720: PPUSH
35721: LD_VAR 0 4
35725: PPUSH
35726: LD_VAR 0 5
35730: PUSH
35731: LD_INT 1
35733: ARRAY
35734: PPUSH
35735: CALL_OW 248
35739: PPUSH
35740: LD_INT 0
35742: PPUSH
35743: CALL 37752 0 6
35747: ST_TO_ADDR
// if not hexes then
35748: LD_VAR 0 14
35752: NOT
35753: IFFALSE 35757
// exit ;
35755: GO 36515
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35757: LD_ADDR_VAR 0 17
35761: PUSH
35762: LD_VAR 0 5
35766: PPUSH
35767: LD_INT 22
35769: PUSH
35770: LD_VAR 0 13
35774: PPUSH
35775: CALL_OW 255
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 30
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 30
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PPUSH
35816: CALL_OW 72
35820: ST_TO_ADDR
// for i = 1 to hexes do
35821: LD_ADDR_VAR 0 9
35825: PUSH
35826: DOUBLE
35827: LD_INT 1
35829: DEC
35830: ST_TO_ADDR
35831: LD_VAR 0 14
35835: PUSH
35836: FOR_TO
35837: IFFALSE 36513
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35839: LD_ADDR_VAR 0 13
35843: PUSH
35844: LD_VAR 0 14
35848: PUSH
35849: LD_VAR 0 9
35853: ARRAY
35854: PUSH
35855: LD_INT 1
35857: ARRAY
35858: PPUSH
35859: LD_VAR 0 14
35863: PUSH
35864: LD_VAR 0 9
35868: ARRAY
35869: PUSH
35870: LD_INT 2
35872: ARRAY
35873: PPUSH
35874: CALL_OW 428
35878: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35879: LD_VAR 0 14
35883: PUSH
35884: LD_VAR 0 9
35888: ARRAY
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PPUSH
35894: LD_VAR 0 14
35898: PUSH
35899: LD_VAR 0 9
35903: ARRAY
35904: PUSH
35905: LD_INT 2
35907: ARRAY
35908: PPUSH
35909: CALL_OW 351
35913: PUSH
35914: LD_VAR 0 14
35918: PUSH
35919: LD_VAR 0 9
35923: ARRAY
35924: PUSH
35925: LD_INT 1
35927: ARRAY
35928: PPUSH
35929: LD_VAR 0 14
35933: PUSH
35934: LD_VAR 0 9
35938: ARRAY
35939: PUSH
35940: LD_INT 2
35942: ARRAY
35943: PPUSH
35944: CALL_OW 488
35948: NOT
35949: OR
35950: PUSH
35951: LD_VAR 0 13
35955: PPUSH
35956: CALL_OW 247
35960: PUSH
35961: LD_INT 3
35963: EQUAL
35964: OR
35965: IFFALSE 35971
// exit ;
35967: POP
35968: POP
35969: GO 36515
// if not tmp then
35971: LD_VAR 0 13
35975: NOT
35976: IFFALSE 35980
// continue ;
35978: GO 35836
// result := true ;
35980: LD_ADDR_VAR 0 8
35984: PUSH
35985: LD_INT 1
35987: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35988: LD_VAR 0 6
35992: PUSH
35993: LD_VAR 0 13
35997: PPUSH
35998: CALL_OW 247
36002: PUSH
36003: LD_INT 2
36005: EQUAL
36006: AND
36007: PUSH
36008: LD_VAR 0 13
36012: PPUSH
36013: CALL_OW 263
36017: PUSH
36018: LD_INT 1
36020: EQUAL
36021: AND
36022: IFFALSE 36186
// begin if IsDrivenBy ( tmp ) then
36024: LD_VAR 0 13
36028: PPUSH
36029: CALL_OW 311
36033: IFFALSE 36037
// continue ;
36035: GO 35836
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36037: LD_VAR 0 6
36041: PPUSH
36042: LD_INT 3
36044: PUSH
36045: LD_INT 60
36047: PUSH
36048: EMPTY
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: LD_INT 55
36060: PUSH
36061: EMPTY
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PPUSH
36072: CALL_OW 72
36076: IFFALSE 36184
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36078: LD_ADDR_VAR 0 18
36082: PUSH
36083: LD_VAR 0 6
36087: PPUSH
36088: LD_INT 3
36090: PUSH
36091: LD_INT 60
36093: PUSH
36094: EMPTY
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 55
36106: PUSH
36107: EMPTY
36108: LIST
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PPUSH
36118: CALL_OW 72
36122: PUSH
36123: LD_INT 1
36125: ARRAY
36126: ST_TO_ADDR
// if IsInUnit ( driver ) then
36127: LD_VAR 0 18
36131: PPUSH
36132: CALL_OW 310
36136: IFFALSE 36147
// ComExit ( driver ) ;
36138: LD_VAR 0 18
36142: PPUSH
36143: CALL 60880 0 1
// AddComEnterUnit ( driver , tmp ) ;
36147: LD_VAR 0 18
36151: PPUSH
36152: LD_VAR 0 13
36156: PPUSH
36157: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36161: LD_VAR 0 18
36165: PPUSH
36166: LD_VAR 0 7
36170: PPUSH
36171: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36175: LD_VAR 0 18
36179: PPUSH
36180: CALL_OW 181
// end ; continue ;
36184: GO 35836
// end ; if not cleaners or not tmp in cleaners then
36186: LD_VAR 0 6
36190: NOT
36191: PUSH
36192: LD_VAR 0 13
36196: PUSH
36197: LD_VAR 0 6
36201: IN
36202: NOT
36203: OR
36204: IFFALSE 36511
// begin if dep then
36206: LD_VAR 0 17
36210: IFFALSE 36346
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36212: LD_ADDR_VAR 0 16
36216: PUSH
36217: LD_VAR 0 17
36221: PUSH
36222: LD_INT 1
36224: ARRAY
36225: PPUSH
36226: CALL_OW 250
36230: PPUSH
36231: LD_VAR 0 17
36235: PUSH
36236: LD_INT 1
36238: ARRAY
36239: PPUSH
36240: CALL_OW 254
36244: PPUSH
36245: LD_INT 5
36247: PPUSH
36248: CALL_OW 272
36252: PUSH
36253: LD_VAR 0 17
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: PPUSH
36262: CALL_OW 251
36266: PPUSH
36267: LD_VAR 0 17
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: PPUSH
36276: CALL_OW 254
36280: PPUSH
36281: LD_INT 5
36283: PPUSH
36284: CALL_OW 273
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36293: LD_VAR 0 16
36297: PUSH
36298: LD_INT 1
36300: ARRAY
36301: PPUSH
36302: LD_VAR 0 16
36306: PUSH
36307: LD_INT 2
36309: ARRAY
36310: PPUSH
36311: CALL_OW 488
36315: IFFALSE 36346
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36317: LD_VAR 0 13
36321: PPUSH
36322: LD_VAR 0 16
36326: PUSH
36327: LD_INT 1
36329: ARRAY
36330: PPUSH
36331: LD_VAR 0 16
36335: PUSH
36336: LD_INT 2
36338: ARRAY
36339: PPUSH
36340: CALL_OW 111
// continue ;
36344: GO 35836
// end ; end ; r := GetDir ( tmp ) ;
36346: LD_ADDR_VAR 0 15
36350: PUSH
36351: LD_VAR 0 13
36355: PPUSH
36356: CALL_OW 254
36360: ST_TO_ADDR
// if r = 5 then
36361: LD_VAR 0 15
36365: PUSH
36366: LD_INT 5
36368: EQUAL
36369: IFFALSE 36379
// r := 0 ;
36371: LD_ADDR_VAR 0 15
36375: PUSH
36376: LD_INT 0
36378: ST_TO_ADDR
// for j = r to 5 do
36379: LD_ADDR_VAR 0 10
36383: PUSH
36384: DOUBLE
36385: LD_VAR 0 15
36389: DEC
36390: ST_TO_ADDR
36391: LD_INT 5
36393: PUSH
36394: FOR_TO
36395: IFFALSE 36509
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36397: LD_ADDR_VAR 0 11
36401: PUSH
36402: LD_VAR 0 13
36406: PPUSH
36407: CALL_OW 250
36411: PPUSH
36412: LD_VAR 0 10
36416: PPUSH
36417: LD_INT 2
36419: PPUSH
36420: CALL_OW 272
36424: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36425: LD_ADDR_VAR 0 12
36429: PUSH
36430: LD_VAR 0 13
36434: PPUSH
36435: CALL_OW 251
36439: PPUSH
36440: LD_VAR 0 10
36444: PPUSH
36445: LD_INT 2
36447: PPUSH
36448: CALL_OW 273
36452: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36453: LD_VAR 0 11
36457: PPUSH
36458: LD_VAR 0 12
36462: PPUSH
36463: CALL_OW 488
36467: PUSH
36468: LD_VAR 0 11
36472: PPUSH
36473: LD_VAR 0 12
36477: PPUSH
36478: CALL_OW 428
36482: NOT
36483: AND
36484: IFFALSE 36507
// begin ComMoveXY ( tmp , _x , _y ) ;
36486: LD_VAR 0 13
36490: PPUSH
36491: LD_VAR 0 11
36495: PPUSH
36496: LD_VAR 0 12
36500: PPUSH
36501: CALL_OW 111
// break ;
36505: GO 36509
// end ; end ;
36507: GO 36394
36509: POP
36510: POP
// end ; end ;
36511: GO 35836
36513: POP
36514: POP
// end ;
36515: LD_VAR 0 8
36519: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36520: LD_INT 0
36522: PPUSH
// result := true ;
36523: LD_ADDR_VAR 0 3
36527: PUSH
36528: LD_INT 1
36530: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36531: LD_VAR 0 2
36535: PUSH
36536: LD_INT 24
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36550
36542: LD_INT 33
36544: DOUBLE
36545: EQUAL
36546: IFTRUE 36550
36548: GO 36575
36550: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36551: LD_ADDR_VAR 0 3
36555: PUSH
36556: LD_INT 32
36558: PPUSH
36559: LD_VAR 0 1
36563: PPUSH
36564: CALL_OW 321
36568: PUSH
36569: LD_INT 2
36571: EQUAL
36572: ST_TO_ADDR
36573: GO 36895
36575: LD_INT 20
36577: DOUBLE
36578: EQUAL
36579: IFTRUE 36583
36581: GO 36608
36583: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36584: LD_ADDR_VAR 0 3
36588: PUSH
36589: LD_INT 6
36591: PPUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 321
36601: PUSH
36602: LD_INT 2
36604: EQUAL
36605: ST_TO_ADDR
36606: GO 36895
36608: LD_INT 22
36610: DOUBLE
36611: EQUAL
36612: IFTRUE 36622
36614: LD_INT 36
36616: DOUBLE
36617: EQUAL
36618: IFTRUE 36622
36620: GO 36647
36622: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36623: LD_ADDR_VAR 0 3
36627: PUSH
36628: LD_INT 15
36630: PPUSH
36631: LD_VAR 0 1
36635: PPUSH
36636: CALL_OW 321
36640: PUSH
36641: LD_INT 2
36643: EQUAL
36644: ST_TO_ADDR
36645: GO 36895
36647: LD_INT 30
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36655
36653: GO 36680
36655: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_INT 20
36663: PPUSH
36664: LD_VAR 0 1
36668: PPUSH
36669: CALL_OW 321
36673: PUSH
36674: LD_INT 2
36676: EQUAL
36677: ST_TO_ADDR
36678: GO 36895
36680: LD_INT 28
36682: DOUBLE
36683: EQUAL
36684: IFTRUE 36694
36686: LD_INT 21
36688: DOUBLE
36689: EQUAL
36690: IFTRUE 36694
36692: GO 36719
36694: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36695: LD_ADDR_VAR 0 3
36699: PUSH
36700: LD_INT 21
36702: PPUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 321
36712: PUSH
36713: LD_INT 2
36715: EQUAL
36716: ST_TO_ADDR
36717: GO 36895
36719: LD_INT 16
36721: DOUBLE
36722: EQUAL
36723: IFTRUE 36727
36725: GO 36754
36727: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36728: LD_ADDR_VAR 0 3
36732: PUSH
36733: LD_EXP 20
36737: PPUSH
36738: LD_VAR 0 1
36742: PPUSH
36743: CALL_OW 321
36747: PUSH
36748: LD_INT 2
36750: EQUAL
36751: ST_TO_ADDR
36752: GO 36895
36754: LD_INT 19
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36768
36760: LD_INT 23
36762: DOUBLE
36763: EQUAL
36764: IFTRUE 36768
36766: GO 36795
36768: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_EXP 19
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 321
36788: PUSH
36789: LD_INT 2
36791: EQUAL
36792: ST_TO_ADDR
36793: GO 36895
36795: LD_INT 17
36797: DOUBLE
36798: EQUAL
36799: IFTRUE 36803
36801: GO 36828
36803: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36804: LD_ADDR_VAR 0 3
36808: PUSH
36809: LD_INT 39
36811: PPUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 321
36821: PUSH
36822: LD_INT 2
36824: EQUAL
36825: ST_TO_ADDR
36826: GO 36895
36828: LD_INT 18
36830: DOUBLE
36831: EQUAL
36832: IFTRUE 36836
36834: GO 36861
36836: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36837: LD_ADDR_VAR 0 3
36841: PUSH
36842: LD_INT 40
36844: PPUSH
36845: LD_VAR 0 1
36849: PPUSH
36850: CALL_OW 321
36854: PUSH
36855: LD_INT 2
36857: EQUAL
36858: ST_TO_ADDR
36859: GO 36895
36861: LD_INT 27
36863: DOUBLE
36864: EQUAL
36865: IFTRUE 36869
36867: GO 36894
36869: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36870: LD_ADDR_VAR 0 3
36874: PUSH
36875: LD_INT 35
36877: PPUSH
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL_OW 321
36887: PUSH
36888: LD_INT 2
36890: EQUAL
36891: ST_TO_ADDR
36892: GO 36895
36894: POP
// end ;
36895: LD_VAR 0 3
36899: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36900: LD_INT 0
36902: PPUSH
36903: PPUSH
36904: PPUSH
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
36911: PPUSH
36912: PPUSH
// result := false ;
36913: LD_ADDR_VAR 0 6
36917: PUSH
36918: LD_INT 0
36920: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36921: LD_VAR 0 1
36925: NOT
36926: PUSH
36927: LD_VAR 0 1
36931: PPUSH
36932: CALL_OW 266
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: IN
36947: NOT
36948: OR
36949: PUSH
36950: LD_VAR 0 2
36954: NOT
36955: OR
36956: PUSH
36957: LD_VAR 0 5
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 4
36976: PUSH
36977: LD_INT 5
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: IN
36988: NOT
36989: OR
36990: PUSH
36991: LD_VAR 0 3
36995: PPUSH
36996: LD_VAR 0 4
37000: PPUSH
37001: CALL_OW 488
37005: NOT
37006: OR
37007: IFFALSE 37011
// exit ;
37009: GO 37747
// side := GetSide ( depot ) ;
37011: LD_ADDR_VAR 0 9
37015: PUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 255
37025: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37026: LD_VAR 0 9
37030: PPUSH
37031: LD_VAR 0 2
37035: PPUSH
37036: CALL 36520 0 2
37040: NOT
37041: IFFALSE 37045
// exit ;
37043: GO 37747
// pom := GetBase ( depot ) ;
37045: LD_ADDR_VAR 0 10
37049: PUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL_OW 274
37059: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37060: LD_ADDR_VAR 0 11
37064: PUSH
37065: LD_VAR 0 2
37069: PPUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 248
37079: PPUSH
37080: CALL_OW 450
37084: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37085: LD_VAR 0 10
37089: PPUSH
37090: LD_INT 1
37092: PPUSH
37093: CALL_OW 275
37097: PUSH
37098: LD_VAR 0 11
37102: PUSH
37103: LD_INT 1
37105: ARRAY
37106: GREATEREQUAL
37107: PUSH
37108: LD_VAR 0 10
37112: PPUSH
37113: LD_INT 2
37115: PPUSH
37116: CALL_OW 275
37120: PUSH
37121: LD_VAR 0 11
37125: PUSH
37126: LD_INT 2
37128: ARRAY
37129: GREATEREQUAL
37130: AND
37131: PUSH
37132: LD_VAR 0 10
37136: PPUSH
37137: LD_INT 3
37139: PPUSH
37140: CALL_OW 275
37144: PUSH
37145: LD_VAR 0 11
37149: PUSH
37150: LD_INT 3
37152: ARRAY
37153: GREATEREQUAL
37154: AND
37155: NOT
37156: IFFALSE 37160
// exit ;
37158: GO 37747
// if GetBType ( depot ) = b_depot then
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 266
37169: PUSH
37170: LD_INT 0
37172: EQUAL
37173: IFFALSE 37185
// dist := 28 else
37175: LD_ADDR_VAR 0 14
37179: PUSH
37180: LD_INT 28
37182: ST_TO_ADDR
37183: GO 37193
// dist := 36 ;
37185: LD_ADDR_VAR 0 14
37189: PUSH
37190: LD_INT 36
37192: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37193: LD_VAR 0 1
37197: PPUSH
37198: LD_VAR 0 3
37202: PPUSH
37203: LD_VAR 0 4
37207: PPUSH
37208: CALL_OW 297
37212: PUSH
37213: LD_VAR 0 14
37217: GREATER
37218: IFFALSE 37222
// exit ;
37220: GO 37747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37222: LD_ADDR_VAR 0 12
37226: PUSH
37227: LD_VAR 0 2
37231: PPUSH
37232: LD_VAR 0 3
37236: PPUSH
37237: LD_VAR 0 4
37241: PPUSH
37242: LD_VAR 0 5
37246: PPUSH
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 248
37256: PPUSH
37257: LD_INT 0
37259: PPUSH
37260: CALL 37752 0 6
37264: ST_TO_ADDR
// if not hexes then
37265: LD_VAR 0 12
37269: NOT
37270: IFFALSE 37274
// exit ;
37272: GO 37747
// hex := GetHexInfo ( x , y ) ;
37274: LD_ADDR_VAR 0 15
37278: PUSH
37279: LD_VAR 0 3
37283: PPUSH
37284: LD_VAR 0 4
37288: PPUSH
37289: CALL_OW 546
37293: ST_TO_ADDR
// if hex [ 1 ] then
37294: LD_VAR 0 15
37298: PUSH
37299: LD_INT 1
37301: ARRAY
37302: IFFALSE 37306
// exit ;
37304: GO 37747
// height := hex [ 2 ] ;
37306: LD_ADDR_VAR 0 13
37310: PUSH
37311: LD_VAR 0 15
37315: PUSH
37316: LD_INT 2
37318: ARRAY
37319: ST_TO_ADDR
// for i = 1 to hexes do
37320: LD_ADDR_VAR 0 7
37324: PUSH
37325: DOUBLE
37326: LD_INT 1
37328: DEC
37329: ST_TO_ADDR
37330: LD_VAR 0 12
37334: PUSH
37335: FOR_TO
37336: IFFALSE 37666
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37338: LD_VAR 0 12
37342: PUSH
37343: LD_VAR 0 7
37347: ARRAY
37348: PUSH
37349: LD_INT 1
37351: ARRAY
37352: PPUSH
37353: LD_VAR 0 12
37357: PUSH
37358: LD_VAR 0 7
37362: ARRAY
37363: PUSH
37364: LD_INT 2
37366: ARRAY
37367: PPUSH
37368: CALL_OW 488
37372: NOT
37373: PUSH
37374: LD_VAR 0 12
37378: PUSH
37379: LD_VAR 0 7
37383: ARRAY
37384: PUSH
37385: LD_INT 1
37387: ARRAY
37388: PPUSH
37389: LD_VAR 0 12
37393: PUSH
37394: LD_VAR 0 7
37398: ARRAY
37399: PUSH
37400: LD_INT 2
37402: ARRAY
37403: PPUSH
37404: CALL_OW 428
37408: PUSH
37409: LD_INT 0
37411: GREATER
37412: OR
37413: PUSH
37414: LD_VAR 0 12
37418: PUSH
37419: LD_VAR 0 7
37423: ARRAY
37424: PUSH
37425: LD_INT 1
37427: ARRAY
37428: PPUSH
37429: LD_VAR 0 12
37433: PUSH
37434: LD_VAR 0 7
37438: ARRAY
37439: PUSH
37440: LD_INT 2
37442: ARRAY
37443: PPUSH
37444: CALL_OW 351
37448: OR
37449: IFFALSE 37455
// exit ;
37451: POP
37452: POP
37453: GO 37747
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37455: LD_ADDR_VAR 0 8
37459: PUSH
37460: LD_VAR 0 12
37464: PUSH
37465: LD_VAR 0 7
37469: ARRAY
37470: PUSH
37471: LD_INT 1
37473: ARRAY
37474: PPUSH
37475: LD_VAR 0 12
37479: PUSH
37480: LD_VAR 0 7
37484: ARRAY
37485: PUSH
37486: LD_INT 2
37488: ARRAY
37489: PPUSH
37490: CALL_OW 546
37494: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37495: LD_VAR 0 8
37499: PUSH
37500: LD_INT 1
37502: ARRAY
37503: PUSH
37504: LD_VAR 0 8
37508: PUSH
37509: LD_INT 2
37511: ARRAY
37512: PUSH
37513: LD_VAR 0 13
37517: PUSH
37518: LD_INT 2
37520: PLUS
37521: GREATER
37522: OR
37523: PUSH
37524: LD_VAR 0 8
37528: PUSH
37529: LD_INT 2
37531: ARRAY
37532: PUSH
37533: LD_VAR 0 13
37537: PUSH
37538: LD_INT 2
37540: MINUS
37541: LESS
37542: OR
37543: PUSH
37544: LD_VAR 0 8
37548: PUSH
37549: LD_INT 3
37551: ARRAY
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 8
37558: PUSH
37559: LD_INT 9
37561: PUSH
37562: LD_INT 10
37564: PUSH
37565: LD_INT 11
37567: PUSH
37568: LD_INT 12
37570: PUSH
37571: LD_INT 13
37573: PUSH
37574: LD_INT 16
37576: PUSH
37577: LD_INT 17
37579: PUSH
37580: LD_INT 18
37582: PUSH
37583: LD_INT 19
37585: PUSH
37586: LD_INT 20
37588: PUSH
37589: LD_INT 21
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: IN
37607: NOT
37608: OR
37609: PUSH
37610: LD_VAR 0 8
37614: PUSH
37615: LD_INT 5
37617: ARRAY
37618: NOT
37619: OR
37620: PUSH
37621: LD_VAR 0 8
37625: PUSH
37626: LD_INT 6
37628: ARRAY
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 7
37638: PUSH
37639: LD_INT 9
37641: PUSH
37642: LD_INT 10
37644: PUSH
37645: LD_INT 11
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: IN
37656: NOT
37657: OR
37658: IFFALSE 37664
// exit ;
37660: POP
37661: POP
37662: GO 37747
// end ;
37664: GO 37335
37666: POP
37667: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37668: LD_VAR 0 9
37672: PPUSH
37673: LD_VAR 0 3
37677: PPUSH
37678: LD_VAR 0 4
37682: PPUSH
37683: LD_INT 20
37685: PPUSH
37686: CALL 29693 0 4
37690: PUSH
37691: LD_INT 4
37693: ARRAY
37694: IFFALSE 37698
// exit ;
37696: GO 37747
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37698: LD_VAR 0 2
37702: PUSH
37703: LD_INT 29
37705: PUSH
37706: LD_INT 30
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: IN
37713: PUSH
37714: LD_VAR 0 3
37718: PPUSH
37719: LD_VAR 0 4
37723: PPUSH
37724: LD_VAR 0 9
37728: PPUSH
37729: CALL_OW 440
37733: NOT
37734: AND
37735: IFFALSE 37739
// exit ;
37737: GO 37747
// result := true ;
37739: LD_ADDR_VAR 0 6
37743: PUSH
37744: LD_INT 1
37746: ST_TO_ADDR
// end ;
37747: LD_VAR 0 6
37751: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37752: LD_INT 0
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
37804: PPUSH
37805: PPUSH
37806: PPUSH
37807: PPUSH
37808: PPUSH
37809: PPUSH
37810: PPUSH
37811: PPUSH
// result = [ ] ;
37812: LD_ADDR_VAR 0 7
37816: PUSH
37817: EMPTY
37818: ST_TO_ADDR
// temp_list = [ ] ;
37819: LD_ADDR_VAR 0 9
37823: PUSH
37824: EMPTY
37825: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37826: LD_VAR 0 4
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: LD_INT 3
37842: PUSH
37843: LD_INT 4
37845: PUSH
37846: LD_INT 5
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: IN
37857: NOT
37858: PUSH
37859: LD_VAR 0 1
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: IN
37874: PUSH
37875: LD_VAR 0 5
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: IN
37894: NOT
37895: AND
37896: OR
37897: IFFALSE 37901
// exit ;
37899: GO 56292
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37901: LD_VAR 0 1
37905: PUSH
37906: LD_INT 6
37908: PUSH
37909: LD_INT 7
37911: PUSH
37912: LD_INT 8
37914: PUSH
37915: LD_INT 13
37917: PUSH
37918: LD_INT 12
37920: PUSH
37921: LD_INT 15
37923: PUSH
37924: LD_INT 11
37926: PUSH
37927: LD_INT 14
37929: PUSH
37930: LD_INT 10
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: IN
37944: IFFALSE 37954
// btype = b_lab ;
37946: LD_ADDR_VAR 0 1
37950: PUSH
37951: LD_INT 6
37953: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37954: LD_VAR 0 6
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: IN
37973: NOT
37974: PUSH
37975: LD_VAR 0 1
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 3
37991: PUSH
37992: LD_INT 6
37994: PUSH
37995: LD_INT 36
37997: PUSH
37998: LD_INT 4
38000: PUSH
38001: LD_INT 5
38003: PUSH
38004: LD_INT 31
38006: PUSH
38007: LD_INT 32
38009: PUSH
38010: LD_INT 33
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: IN
38026: NOT
38027: PUSH
38028: LD_VAR 0 6
38032: PUSH
38033: LD_INT 1
38035: EQUAL
38036: AND
38037: OR
38038: PUSH
38039: LD_VAR 0 1
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: IN
38054: NOT
38055: PUSH
38056: LD_VAR 0 6
38060: PUSH
38061: LD_INT 2
38063: EQUAL
38064: AND
38065: OR
38066: IFFALSE 38076
// mode = 0 ;
38068: LD_ADDR_VAR 0 6
38072: PUSH
38073: LD_INT 0
38075: ST_TO_ADDR
// case mode of 0 :
38076: LD_VAR 0 6
38080: PUSH
38081: LD_INT 0
38083: DOUBLE
38084: EQUAL
38085: IFTRUE 38089
38087: GO 49542
38089: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38090: LD_ADDR_VAR 0 11
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 2
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 3
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38283: LD_ADDR_VAR 0 12
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 3
38440: NEG
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38479: LD_ADDR_VAR 0 13
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: NEG
38627: PUSH
38628: LD_INT 3
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 3
38638: NEG
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 3
38650: NEG
38651: PUSH
38652: LD_INT 3
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38678: LD_ADDR_VAR 0 14
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 2
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 2
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 3
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38874: LD_ADDR_VAR 0 15
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39067: LD_ADDR_VAR 0 16
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 3
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 2
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39260: LD_ADDR_VAR 0 17
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39490: LD_ADDR_VAR 0 18
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39720: LD_ADDR_VAR 0 19
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39950: LD_ADDR_VAR 0 20
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40180: LD_ADDR_VAR 0 21
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40410: LD_ADDR_VAR 0 22
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40640: LD_ADDR_VAR 0 23
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: LD_INT 3
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40920: LD_ADDR_VAR 0 24
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 3
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 3
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41196: LD_ADDR_VAR 0 25
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 3
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 3
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41470: LD_ADDR_VAR 0 26
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 1
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 3
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41746: LD_ADDR_VAR 0 27
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 2
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 2
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: NEG
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: NEG
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42026: LD_ADDR_VAR 0 28
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 3
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 3
42261: NEG
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 3
42273: NEG
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42308: LD_ADDR_VAR 0 29
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: NEG
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 2
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: LD_INT 3
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: NEG
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42587: LD_ADDR_VAR 0 30
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 3
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42865: LD_ADDR_VAR 0 31
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 3
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: NEG
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43143: LD_ADDR_VAR 0 32
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 3
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43421: LD_ADDR_VAR 0 33
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 3
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 3
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 3
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43700: LD_ADDR_VAR 0 34
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43980: LD_ADDR_VAR 0 35
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44092: LD_ADDR_VAR 0 36
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44204: LD_ADDR_VAR 0 37
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44316: LD_ADDR_VAR 0 38
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44428: LD_ADDR_VAR 0 39
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44540: LD_ADDR_VAR 0 40
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44652: LD_ADDR_VAR 0 41
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 3
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 3
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: LD_INT 3
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45002: LD_ADDR_VAR 0 42
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 3
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 3
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: NEG
45312: PUSH
45313: LD_INT 3
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45352: LD_ADDR_VAR 0 43
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 2
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 3
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 3
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45700: LD_ADDR_VAR 0 44
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 3
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46050: LD_ADDR_VAR 0 45
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: LD_INT 3
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 2
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: LD_INT 3
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46400: LD_ADDR_VAR 0 46
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 3
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 3
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46748: LD_ADDR_VAR 0 47
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46899: LD_ADDR_VAR 0 48
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 1
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: LD_INT 2
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47046: LD_ADDR_VAR 0 49
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47190: LD_ADDR_VAR 0 50
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47334: LD_ADDR_VAR 0 51
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 2
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47481: LD_ADDR_VAR 0 52
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47632: LD_ADDR_VAR 0 53
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47862: LD_ADDR_VAR 0 54
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48092: LD_ADDR_VAR 0 55
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48322: LD_ADDR_VAR 0 56
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48552: LD_ADDR_VAR 0 57
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48782: LD_ADDR_VAR 0 58
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49012: LD_ADDR_VAR 0 59
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49100: LD_ADDR_VAR 0 60
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49188: LD_ADDR_VAR 0 61
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49276: LD_ADDR_VAR 0 62
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 1
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49364: LD_ADDR_VAR 0 63
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49452: LD_ADDR_VAR 0 64
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// end ; 1 :
49540: GO 55437
49542: LD_INT 1
49544: DOUBLE
49545: EQUAL
49546: IFTRUE 49550
49548: GO 52173
49550: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49551: LD_ADDR_VAR 0 11
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 3
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: LIST
49594: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49595: LD_ADDR_VAR 0 12
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49636: LD_ADDR_VAR 0 13
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49676: LD_ADDR_VAR 0 14
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49717: LD_ADDR_VAR 0 15
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 3
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49761: LD_ADDR_VAR 0 16
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: NEG
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49807: LD_ADDR_VAR 0 17
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49851: LD_ADDR_VAR 0 18
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49892: LD_ADDR_VAR 0 19
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49932: LD_ADDR_VAR 0 20
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49973: LD_ADDR_VAR 0 21
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 3
49991: NEG
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50017: LD_ADDR_VAR 0 22
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 3
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: NEG
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 3
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50063: LD_ADDR_VAR 0 23
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 4
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 3
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50107: LD_ADDR_VAR 0 24
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 4
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50148: LD_ADDR_VAR 0 25
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 4
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 4
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50188: LD_ADDR_VAR 0 26
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 4
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: LIST
50228: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50229: LD_ADDR_VAR 0 27
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 4
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50273: LD_ADDR_VAR 0 28
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: NEG
50293: PUSH
50294: LD_INT 4
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 4
50304: NEG
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50319: LD_ADDR_VAR 0 29
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 3
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 4
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 4
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 5
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 5
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 4
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: LD_INT 6
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 6
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 5
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50474: LD_ADDR_VAR 0 30
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 3
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 4
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 4
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 5
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 5
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 5
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 6
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 6
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50617: LD_ADDR_VAR 0 31
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: LD_INT 4
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: LD_INT 4
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 5
50694: PUSH
50695: LD_INT 5
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: LD_INT 5
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 6
50714: PUSH
50715: LD_INT 5
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 6
50724: PUSH
50725: LD_INT 6
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 5
50734: PUSH
50735: LD_INT 6
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50756: LD_ADDR_VAR 0 32
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 4
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 4
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 5
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 5
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 4
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 6
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 6
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 5
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50899: LD_ADDR_VAR 0 33
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: NEG
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 4
50951: NEG
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 4
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 4
50974: NEG
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 5
50985: NEG
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 5
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 5
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 6
51019: NEG
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 6
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51054: LD_ADDR_VAR 0 34
51058: PUSH
51059: LD_INT 2
51061: NEG
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 4
51109: NEG
51110: PUSH
51111: LD_INT 3
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 4
51121: NEG
51122: PUSH
51123: LD_INT 4
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 4
51133: NEG
51134: PUSH
51135: LD_INT 5
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 5
51145: NEG
51146: PUSH
51147: LD_INT 4
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 5
51157: NEG
51158: PUSH
51159: LD_INT 5
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 5
51169: NEG
51170: PUSH
51171: LD_INT 6
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 6
51181: NEG
51182: PUSH
51183: LD_INT 5
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 6
51193: NEG
51194: PUSH
51195: LD_INT 6
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51217: LD_ADDR_VAR 0 41
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51261: LD_ADDR_VAR 0 42
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51302: LD_ADDR_VAR 0 43
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51342: LD_ADDR_VAR 0 44
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51383: LD_ADDR_VAR 0 45
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51427: LD_ADDR_VAR 0 46
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51473: LD_ADDR_VAR 0 47
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: LD_INT 3
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51506: LD_ADDR_VAR 0 48
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 2
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51537: LD_ADDR_VAR 0 49
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51566: LD_ADDR_VAR 0 50
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 3
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51595: LD_ADDR_VAR 0 51
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51626: LD_ADDR_VAR 0 52
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51659: LD_ADDR_VAR 0 53
51663: PUSH
51664: LD_INT 1
51666: NEG
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51703: LD_ADDR_VAR 0 54
51707: PUSH
51708: LD_INT 2
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51744: LD_ADDR_VAR 0 55
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51784: LD_ADDR_VAR 0 56
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51825: LD_ADDR_VAR 0 57
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: LIST
51868: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51869: LD_ADDR_VAR 0 58
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: NEG
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51915: LD_ADDR_VAR 0 59
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51959: LD_ADDR_VAR 0 60
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52000: LD_ADDR_VAR 0 61
52004: PUSH
52005: LD_INT 2
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: LD_INT 2
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52040: LD_ADDR_VAR 0 62
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 2
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52081: LD_ADDR_VAR 0 63
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52125: LD_ADDR_VAR 0 64
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: NEG
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: ST_TO_ADDR
// end ; 2 :
52171: GO 55437
52173: LD_INT 2
52175: DOUBLE
52176: EQUAL
52177: IFTRUE 52181
52179: GO 55436
52181: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52182: LD_ADDR_VAR 0 29
52186: PUSH
52187: LD_INT 4
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 4
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 5
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 5
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 5
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 3
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 4
52302: PUSH
52303: LD_INT 3
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 4
52312: PUSH
52313: LD_INT 4
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: LD_INT 4
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 2
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 4
52352: PUSH
52353: LD_INT 2
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 4
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 4
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 3
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 4
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 5
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 5
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: LD_INT 5
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: NEG
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 3
52476: NEG
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 4
52521: NEG
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 4
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 4
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 2
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 4
52567: NEG
52568: PUSH
52569: LD_INT 4
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 4
52579: NEG
52580: PUSH
52581: LD_INT 5
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: NEG
52592: PUSH
52593: LD_INT 4
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: LD_INT 3
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: NEG
52616: PUSH
52617: LD_INT 3
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 5
52627: NEG
52628: PUSH
52629: LD_INT 4
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 5
52639: NEG
52640: PUSH
52641: LD_INT 5
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: LD_INT 5
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 5
52663: NEG
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52720: LD_ADDR_VAR 0 30
52724: PUSH
52725: LD_INT 4
52727: PUSH
52728: LD_INT 4
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 4
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 5
52747: PUSH
52748: LD_INT 4
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 5
52757: PUSH
52758: LD_INT 5
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 4
52767: PUSH
52768: LD_INT 5
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: LD_INT 4
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: PUSH
52788: LD_INT 3
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 5
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 2
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 4
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: LD_INT 4
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 4
52910: NEG
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 4
52921: NEG
52922: PUSH
52923: LD_INT 1
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 4
52955: NEG
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 5
52966: NEG
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 5
52977: NEG
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 5
52989: NEG
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 3
53001: NEG
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 4
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 4
53072: NEG
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 4
53084: NEG
53085: PUSH
53086: LD_INT 4
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 4
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 4
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 4
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 5
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 4
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 3
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 3
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: LD_INT 5
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: LD_INT 5
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53267: LD_ADDR_VAR 0 31
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 4
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 5
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 5
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 4
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 5
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 4
53423: NEG
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 4
53434: NEG
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 4
53446: NEG
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 4
53469: NEG
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: LD_INT 5
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 4
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 4
53517: NEG
53518: PUSH
53519: LD_INT 3
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 5
53529: NEG
53530: PUSH
53531: LD_INT 4
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 5
53541: NEG
53542: PUSH
53543: LD_INT 5
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 3
53553: NEG
53554: PUSH
53555: LD_INT 5
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 5
53565: NEG
53566: PUSH
53567: LD_INT 3
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 4
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 3
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 4
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 4
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 4
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 4
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 5
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 4
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 5
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53817: LD_ADDR_VAR 0 32
53821: PUSH
53822: LD_INT 4
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 4
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 4
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 5
53880: NEG
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 5
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 5
53903: NEG
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: NEG
53939: PUSH
53940: LD_INT 4
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 3
53974: NEG
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 4
53986: NEG
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 4
53998: NEG
53999: PUSH
54000: LD_INT 4
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: LD_INT 4
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 4
54022: NEG
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 4
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 5
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 4
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 3
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 4
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 5
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 5
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: LD_INT 0
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 4
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 4
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 4
54229: PUSH
54230: LD_INT 4
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 4
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 5
54249: PUSH
54250: LD_INT 4
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: LD_INT 5
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 4
54269: PUSH
54270: LD_INT 5
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: PUSH
54280: LD_INT 4
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: LD_INT 5
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54364: LD_ADDR_VAR 0 33
54368: PUSH
54369: LD_INT 4
54371: NEG
54372: PUSH
54373: LD_INT 4
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 4
54383: NEG
54384: PUSH
54385: LD_INT 5
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 4
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: LD_INT 3
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 4
54419: NEG
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 5
54431: NEG
54432: PUSH
54433: LD_INT 4
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 5
54443: NEG
54444: PUSH
54445: LD_INT 5
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: NEG
54456: PUSH
54457: LD_INT 5
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 5
54467: NEG
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 4
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: LD_INT 2
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 3
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 4
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 4
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 4
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 4
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 5
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 5
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 4
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 3
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 5
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 4
54694: PUSH
54695: LD_INT 3
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 4
54704: PUSH
54705: LD_INT 4
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 4
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 4
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 5
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 5
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 4
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: LD_INT 5
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54902: LD_ADDR_VAR 0 34
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: LD_INT 4
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 5
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 4
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 4
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 1
54976: NEG
54977: PUSH
54978: LD_INT 5
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 3
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 5
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 4
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 4
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 3
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 4
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 4
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 4
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 5
55124: PUSH
55125: LD_INT 4
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 5
55134: PUSH
55135: LD_INT 5
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 4
55144: PUSH
55145: LD_INT 5
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 4
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 5
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 5
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: LD_INT 3
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 4
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 4
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 3
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 4
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 4
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 4
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 3
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 5
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 5
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 5
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: ST_TO_ADDR
// end ; end ;
55434: GO 55437
55436: POP
// case btype of b_depot , b_warehouse :
55437: LD_VAR 0 1
55441: PUSH
55442: LD_INT 0
55444: DOUBLE
55445: EQUAL
55446: IFTRUE 55456
55448: LD_INT 1
55450: DOUBLE
55451: EQUAL
55452: IFTRUE 55456
55454: GO 55657
55456: POP
// case nation of nation_american :
55457: LD_VAR 0 5
55461: PUSH
55462: LD_INT 1
55464: DOUBLE
55465: EQUAL
55466: IFTRUE 55470
55468: GO 55526
55470: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55471: LD_ADDR_VAR 0 9
55475: PUSH
55476: LD_VAR 0 11
55480: PUSH
55481: LD_VAR 0 12
55485: PUSH
55486: LD_VAR 0 13
55490: PUSH
55491: LD_VAR 0 14
55495: PUSH
55496: LD_VAR 0 15
55500: PUSH
55501: LD_VAR 0 16
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: PUSH
55514: LD_VAR 0 4
55518: PUSH
55519: LD_INT 1
55521: PLUS
55522: ARRAY
55523: ST_TO_ADDR
55524: GO 55655
55526: LD_INT 2
55528: DOUBLE
55529: EQUAL
55530: IFTRUE 55534
55532: GO 55590
55534: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55535: LD_ADDR_VAR 0 9
55539: PUSH
55540: LD_VAR 0 17
55544: PUSH
55545: LD_VAR 0 18
55549: PUSH
55550: LD_VAR 0 19
55554: PUSH
55555: LD_VAR 0 20
55559: PUSH
55560: LD_VAR 0 21
55564: PUSH
55565: LD_VAR 0 22
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: PUSH
55578: LD_VAR 0 4
55582: PUSH
55583: LD_INT 1
55585: PLUS
55586: ARRAY
55587: ST_TO_ADDR
55588: GO 55655
55590: LD_INT 3
55592: DOUBLE
55593: EQUAL
55594: IFTRUE 55598
55596: GO 55654
55598: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55599: LD_ADDR_VAR 0 9
55603: PUSH
55604: LD_VAR 0 23
55608: PUSH
55609: LD_VAR 0 24
55613: PUSH
55614: LD_VAR 0 25
55618: PUSH
55619: LD_VAR 0 26
55623: PUSH
55624: LD_VAR 0 27
55628: PUSH
55629: LD_VAR 0 28
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: PUSH
55642: LD_VAR 0 4
55646: PUSH
55647: LD_INT 1
55649: PLUS
55650: ARRAY
55651: ST_TO_ADDR
55652: GO 55655
55654: POP
55655: GO 56210
55657: LD_INT 2
55659: DOUBLE
55660: EQUAL
55661: IFTRUE 55671
55663: LD_INT 3
55665: DOUBLE
55666: EQUAL
55667: IFTRUE 55671
55669: GO 55727
55671: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55672: LD_ADDR_VAR 0 9
55676: PUSH
55677: LD_VAR 0 29
55681: PUSH
55682: LD_VAR 0 30
55686: PUSH
55687: LD_VAR 0 31
55691: PUSH
55692: LD_VAR 0 32
55696: PUSH
55697: LD_VAR 0 33
55701: PUSH
55702: LD_VAR 0 34
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: PUSH
55715: LD_VAR 0 4
55719: PUSH
55720: LD_INT 1
55722: PLUS
55723: ARRAY
55724: ST_TO_ADDR
55725: GO 56210
55727: LD_INT 16
55729: DOUBLE
55730: EQUAL
55731: IFTRUE 55789
55733: LD_INT 17
55735: DOUBLE
55736: EQUAL
55737: IFTRUE 55789
55739: LD_INT 18
55741: DOUBLE
55742: EQUAL
55743: IFTRUE 55789
55745: LD_INT 19
55747: DOUBLE
55748: EQUAL
55749: IFTRUE 55789
55751: LD_INT 22
55753: DOUBLE
55754: EQUAL
55755: IFTRUE 55789
55757: LD_INT 20
55759: DOUBLE
55760: EQUAL
55761: IFTRUE 55789
55763: LD_INT 21
55765: DOUBLE
55766: EQUAL
55767: IFTRUE 55789
55769: LD_INT 23
55771: DOUBLE
55772: EQUAL
55773: IFTRUE 55789
55775: LD_INT 24
55777: DOUBLE
55778: EQUAL
55779: IFTRUE 55789
55781: LD_INT 25
55783: DOUBLE
55784: EQUAL
55785: IFTRUE 55789
55787: GO 55845
55789: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55790: LD_ADDR_VAR 0 9
55794: PUSH
55795: LD_VAR 0 35
55799: PUSH
55800: LD_VAR 0 36
55804: PUSH
55805: LD_VAR 0 37
55809: PUSH
55810: LD_VAR 0 38
55814: PUSH
55815: LD_VAR 0 39
55819: PUSH
55820: LD_VAR 0 40
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: PUSH
55833: LD_VAR 0 4
55837: PUSH
55838: LD_INT 1
55840: PLUS
55841: ARRAY
55842: ST_TO_ADDR
55843: GO 56210
55845: LD_INT 6
55847: DOUBLE
55848: EQUAL
55849: IFTRUE 55901
55851: LD_INT 7
55853: DOUBLE
55854: EQUAL
55855: IFTRUE 55901
55857: LD_INT 8
55859: DOUBLE
55860: EQUAL
55861: IFTRUE 55901
55863: LD_INT 13
55865: DOUBLE
55866: EQUAL
55867: IFTRUE 55901
55869: LD_INT 12
55871: DOUBLE
55872: EQUAL
55873: IFTRUE 55901
55875: LD_INT 15
55877: DOUBLE
55878: EQUAL
55879: IFTRUE 55901
55881: LD_INT 11
55883: DOUBLE
55884: EQUAL
55885: IFTRUE 55901
55887: LD_INT 14
55889: DOUBLE
55890: EQUAL
55891: IFTRUE 55901
55893: LD_INT 10
55895: DOUBLE
55896: EQUAL
55897: IFTRUE 55901
55899: GO 55957
55901: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55902: LD_ADDR_VAR 0 9
55906: PUSH
55907: LD_VAR 0 41
55911: PUSH
55912: LD_VAR 0 42
55916: PUSH
55917: LD_VAR 0 43
55921: PUSH
55922: LD_VAR 0 44
55926: PUSH
55927: LD_VAR 0 45
55931: PUSH
55932: LD_VAR 0 46
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: PUSH
55945: LD_VAR 0 4
55949: PUSH
55950: LD_INT 1
55952: PLUS
55953: ARRAY
55954: ST_TO_ADDR
55955: GO 56210
55957: LD_INT 36
55959: DOUBLE
55960: EQUAL
55961: IFTRUE 55965
55963: GO 56021
55965: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55966: LD_ADDR_VAR 0 9
55970: PUSH
55971: LD_VAR 0 47
55975: PUSH
55976: LD_VAR 0 48
55980: PUSH
55981: LD_VAR 0 49
55985: PUSH
55986: LD_VAR 0 50
55990: PUSH
55991: LD_VAR 0 51
55995: PUSH
55996: LD_VAR 0 52
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: PUSH
56009: LD_VAR 0 4
56013: PUSH
56014: LD_INT 1
56016: PLUS
56017: ARRAY
56018: ST_TO_ADDR
56019: GO 56210
56021: LD_INT 4
56023: DOUBLE
56024: EQUAL
56025: IFTRUE 56047
56027: LD_INT 5
56029: DOUBLE
56030: EQUAL
56031: IFTRUE 56047
56033: LD_INT 34
56035: DOUBLE
56036: EQUAL
56037: IFTRUE 56047
56039: LD_INT 37
56041: DOUBLE
56042: EQUAL
56043: IFTRUE 56047
56045: GO 56103
56047: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56048: LD_ADDR_VAR 0 9
56052: PUSH
56053: LD_VAR 0 53
56057: PUSH
56058: LD_VAR 0 54
56062: PUSH
56063: LD_VAR 0 55
56067: PUSH
56068: LD_VAR 0 56
56072: PUSH
56073: LD_VAR 0 57
56077: PUSH
56078: LD_VAR 0 58
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: PUSH
56091: LD_VAR 0 4
56095: PUSH
56096: LD_INT 1
56098: PLUS
56099: ARRAY
56100: ST_TO_ADDR
56101: GO 56210
56103: LD_INT 31
56105: DOUBLE
56106: EQUAL
56107: IFTRUE 56153
56109: LD_INT 32
56111: DOUBLE
56112: EQUAL
56113: IFTRUE 56153
56115: LD_INT 33
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56153
56121: LD_INT 27
56123: DOUBLE
56124: EQUAL
56125: IFTRUE 56153
56127: LD_INT 26
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56153
56133: LD_INT 28
56135: DOUBLE
56136: EQUAL
56137: IFTRUE 56153
56139: LD_INT 29
56141: DOUBLE
56142: EQUAL
56143: IFTRUE 56153
56145: LD_INT 30
56147: DOUBLE
56148: EQUAL
56149: IFTRUE 56153
56151: GO 56209
56153: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56154: LD_ADDR_VAR 0 9
56158: PUSH
56159: LD_VAR 0 59
56163: PUSH
56164: LD_VAR 0 60
56168: PUSH
56169: LD_VAR 0 61
56173: PUSH
56174: LD_VAR 0 62
56178: PUSH
56179: LD_VAR 0 63
56183: PUSH
56184: LD_VAR 0 64
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: PUSH
56197: LD_VAR 0 4
56201: PUSH
56202: LD_INT 1
56204: PLUS
56205: ARRAY
56206: ST_TO_ADDR
56207: GO 56210
56209: POP
// temp_list2 = [ ] ;
56210: LD_ADDR_VAR 0 10
56214: PUSH
56215: EMPTY
56216: ST_TO_ADDR
// for i in temp_list do
56217: LD_ADDR_VAR 0 8
56221: PUSH
56222: LD_VAR 0 9
56226: PUSH
56227: FOR_IN
56228: IFFALSE 56280
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56230: LD_ADDR_VAR 0 10
56234: PUSH
56235: LD_VAR 0 10
56239: PUSH
56240: LD_VAR 0 8
56244: PUSH
56245: LD_INT 1
56247: ARRAY
56248: PUSH
56249: LD_VAR 0 2
56253: PLUS
56254: PUSH
56255: LD_VAR 0 8
56259: PUSH
56260: LD_INT 2
56262: ARRAY
56263: PUSH
56264: LD_VAR 0 3
56268: PLUS
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: EMPTY
56275: LIST
56276: ADD
56277: ST_TO_ADDR
56278: GO 56227
56280: POP
56281: POP
// result = temp_list2 ;
56282: LD_ADDR_VAR 0 7
56286: PUSH
56287: LD_VAR 0 10
56291: ST_TO_ADDR
// end ;
56292: LD_VAR 0 7
56296: RET
// export function EnemyInRange ( unit , dist ) ; begin
56297: LD_INT 0
56299: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56300: LD_ADDR_VAR 0 3
56304: PUSH
56305: LD_VAR 0 1
56309: PPUSH
56310: CALL_OW 255
56314: PPUSH
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 250
56324: PPUSH
56325: LD_VAR 0 1
56329: PPUSH
56330: CALL_OW 251
56334: PPUSH
56335: LD_VAR 0 2
56339: PPUSH
56340: CALL 29693 0 4
56344: PUSH
56345: LD_INT 4
56347: ARRAY
56348: ST_TO_ADDR
// end ;
56349: LD_VAR 0 3
56353: RET
// export function PlayerSeeMe ( unit ) ; begin
56354: LD_INT 0
56356: PPUSH
// result := See ( your_side , unit ) ;
56357: LD_ADDR_VAR 0 2
56361: PUSH
56362: LD_OWVAR 2
56366: PPUSH
56367: LD_VAR 0 1
56371: PPUSH
56372: CALL_OW 292
56376: ST_TO_ADDR
// end ;
56377: LD_VAR 0 2
56381: RET
// export function ReverseDir ( unit ) ; begin
56382: LD_INT 0
56384: PPUSH
// if not unit then
56385: LD_VAR 0 1
56389: NOT
56390: IFFALSE 56394
// exit ;
56392: GO 56417
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56394: LD_ADDR_VAR 0 2
56398: PUSH
56399: LD_VAR 0 1
56403: PPUSH
56404: CALL_OW 254
56408: PUSH
56409: LD_INT 3
56411: PLUS
56412: PUSH
56413: LD_INT 6
56415: MOD
56416: ST_TO_ADDR
// end ;
56417: LD_VAR 0 2
56421: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56422: LD_INT 0
56424: PPUSH
56425: PPUSH
56426: PPUSH
56427: PPUSH
56428: PPUSH
// if not hexes then
56429: LD_VAR 0 2
56433: NOT
56434: IFFALSE 56438
// exit ;
56436: GO 56586
// dist := 9999 ;
56438: LD_ADDR_VAR 0 5
56442: PUSH
56443: LD_INT 9999
56445: ST_TO_ADDR
// for i = 1 to hexes do
56446: LD_ADDR_VAR 0 4
56450: PUSH
56451: DOUBLE
56452: LD_INT 1
56454: DEC
56455: ST_TO_ADDR
56456: LD_VAR 0 2
56460: PUSH
56461: FOR_TO
56462: IFFALSE 56574
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56464: LD_VAR 0 1
56468: PPUSH
56469: LD_VAR 0 2
56473: PUSH
56474: LD_VAR 0 4
56478: ARRAY
56479: PUSH
56480: LD_INT 1
56482: ARRAY
56483: PPUSH
56484: LD_VAR 0 2
56488: PUSH
56489: LD_VAR 0 4
56493: ARRAY
56494: PUSH
56495: LD_INT 2
56497: ARRAY
56498: PPUSH
56499: CALL_OW 297
56503: PUSH
56504: LD_VAR 0 5
56508: LESS
56509: IFFALSE 56572
// begin hex := hexes [ i ] ;
56511: LD_ADDR_VAR 0 7
56515: PUSH
56516: LD_VAR 0 2
56520: PUSH
56521: LD_VAR 0 4
56525: ARRAY
56526: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56527: LD_ADDR_VAR 0 5
56531: PUSH
56532: LD_VAR 0 1
56536: PPUSH
56537: LD_VAR 0 2
56541: PUSH
56542: LD_VAR 0 4
56546: ARRAY
56547: PUSH
56548: LD_INT 1
56550: ARRAY
56551: PPUSH
56552: LD_VAR 0 2
56556: PUSH
56557: LD_VAR 0 4
56561: ARRAY
56562: PUSH
56563: LD_INT 2
56565: ARRAY
56566: PPUSH
56567: CALL_OW 297
56571: ST_TO_ADDR
// end ; end ;
56572: GO 56461
56574: POP
56575: POP
// result := hex ;
56576: LD_ADDR_VAR 0 3
56580: PUSH
56581: LD_VAR 0 7
56585: ST_TO_ADDR
// end ;
56586: LD_VAR 0 3
56590: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56591: LD_INT 0
56593: PPUSH
56594: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56595: LD_VAR 0 1
56599: NOT
56600: PUSH
56601: LD_VAR 0 1
56605: PUSH
56606: LD_INT 21
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 23
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 69
56634: IN
56635: NOT
56636: OR
56637: IFFALSE 56641
// exit ;
56639: GO 56688
// for i = 1 to 3 do
56641: LD_ADDR_VAR 0 3
56645: PUSH
56646: DOUBLE
56647: LD_INT 1
56649: DEC
56650: ST_TO_ADDR
56651: LD_INT 3
56653: PUSH
56654: FOR_TO
56655: IFFALSE 56686
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 250
56666: PPUSH
56667: LD_VAR 0 1
56671: PPUSH
56672: CALL_OW 251
56676: PPUSH
56677: LD_INT 1
56679: PPUSH
56680: CALL_OW 453
56684: GO 56654
56686: POP
56687: POP
// end ;
56688: LD_VAR 0 2
56692: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56693: LD_INT 0
56695: PPUSH
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
56700: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56701: LD_VAR 0 1
56705: NOT
56706: PUSH
56707: LD_VAR 0 2
56711: NOT
56712: OR
56713: PUSH
56714: LD_VAR 0 1
56718: PPUSH
56719: CALL_OW 314
56723: OR
56724: IFFALSE 56728
// exit ;
56726: GO 57169
// x := GetX ( enemy_unit ) ;
56728: LD_ADDR_VAR 0 7
56732: PUSH
56733: LD_VAR 0 2
56737: PPUSH
56738: CALL_OW 250
56742: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56743: LD_ADDR_VAR 0 8
56747: PUSH
56748: LD_VAR 0 2
56752: PPUSH
56753: CALL_OW 251
56757: ST_TO_ADDR
// if not x or not y then
56758: LD_VAR 0 7
56762: NOT
56763: PUSH
56764: LD_VAR 0 8
56768: NOT
56769: OR
56770: IFFALSE 56774
// exit ;
56772: GO 57169
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56774: LD_ADDR_VAR 0 6
56778: PUSH
56779: LD_VAR 0 7
56783: PPUSH
56784: LD_INT 0
56786: PPUSH
56787: LD_INT 4
56789: PPUSH
56790: CALL_OW 272
56794: PUSH
56795: LD_VAR 0 8
56799: PPUSH
56800: LD_INT 0
56802: PPUSH
56803: LD_INT 4
56805: PPUSH
56806: CALL_OW 273
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_VAR 0 7
56819: PPUSH
56820: LD_INT 1
56822: PPUSH
56823: LD_INT 4
56825: PPUSH
56826: CALL_OW 272
56830: PUSH
56831: LD_VAR 0 8
56835: PPUSH
56836: LD_INT 1
56838: PPUSH
56839: LD_INT 4
56841: PPUSH
56842: CALL_OW 273
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_VAR 0 7
56855: PPUSH
56856: LD_INT 2
56858: PPUSH
56859: LD_INT 4
56861: PPUSH
56862: CALL_OW 272
56866: PUSH
56867: LD_VAR 0 8
56871: PPUSH
56872: LD_INT 2
56874: PPUSH
56875: LD_INT 4
56877: PPUSH
56878: CALL_OW 273
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_VAR 0 7
56891: PPUSH
56892: LD_INT 3
56894: PPUSH
56895: LD_INT 4
56897: PPUSH
56898: CALL_OW 272
56902: PUSH
56903: LD_VAR 0 8
56907: PPUSH
56908: LD_INT 3
56910: PPUSH
56911: LD_INT 4
56913: PPUSH
56914: CALL_OW 273
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_VAR 0 7
56927: PPUSH
56928: LD_INT 4
56930: PPUSH
56931: LD_INT 4
56933: PPUSH
56934: CALL_OW 272
56938: PUSH
56939: LD_VAR 0 8
56943: PPUSH
56944: LD_INT 4
56946: PPUSH
56947: LD_INT 4
56949: PPUSH
56950: CALL_OW 273
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_VAR 0 7
56963: PPUSH
56964: LD_INT 5
56966: PPUSH
56967: LD_INT 4
56969: PPUSH
56970: CALL_OW 272
56974: PUSH
56975: LD_VAR 0 8
56979: PPUSH
56980: LD_INT 5
56982: PPUSH
56983: LD_INT 4
56985: PPUSH
56986: CALL_OW 273
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: ST_TO_ADDR
// for i = tmp downto 1 do
57003: LD_ADDR_VAR 0 4
57007: PUSH
57008: DOUBLE
57009: LD_VAR 0 6
57013: INC
57014: ST_TO_ADDR
57015: LD_INT 1
57017: PUSH
57018: FOR_DOWNTO
57019: IFFALSE 57120
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57021: LD_VAR 0 6
57025: PUSH
57026: LD_VAR 0 4
57030: ARRAY
57031: PUSH
57032: LD_INT 1
57034: ARRAY
57035: PPUSH
57036: LD_VAR 0 6
57040: PUSH
57041: LD_VAR 0 4
57045: ARRAY
57046: PUSH
57047: LD_INT 2
57049: ARRAY
57050: PPUSH
57051: CALL_OW 488
57055: NOT
57056: PUSH
57057: LD_VAR 0 6
57061: PUSH
57062: LD_VAR 0 4
57066: ARRAY
57067: PUSH
57068: LD_INT 1
57070: ARRAY
57071: PPUSH
57072: LD_VAR 0 6
57076: PUSH
57077: LD_VAR 0 4
57081: ARRAY
57082: PUSH
57083: LD_INT 2
57085: ARRAY
57086: PPUSH
57087: CALL_OW 428
57091: PUSH
57092: LD_INT 0
57094: NONEQUAL
57095: OR
57096: IFFALSE 57118
// tmp := Delete ( tmp , i ) ;
57098: LD_ADDR_VAR 0 6
57102: PUSH
57103: LD_VAR 0 6
57107: PPUSH
57108: LD_VAR 0 4
57112: PPUSH
57113: CALL_OW 3
57117: ST_TO_ADDR
57118: GO 57018
57120: POP
57121: POP
// j := GetClosestHex ( unit , tmp ) ;
57122: LD_ADDR_VAR 0 5
57126: PUSH
57127: LD_VAR 0 1
57131: PPUSH
57132: LD_VAR 0 6
57136: PPUSH
57137: CALL 56422 0 2
57141: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57142: LD_VAR 0 1
57146: PPUSH
57147: LD_VAR 0 5
57151: PUSH
57152: LD_INT 1
57154: ARRAY
57155: PPUSH
57156: LD_VAR 0 5
57160: PUSH
57161: LD_INT 2
57163: ARRAY
57164: PPUSH
57165: CALL_OW 111
// end ;
57169: LD_VAR 0 3
57173: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57174: LD_INT 0
57176: PPUSH
57177: PPUSH
57178: PPUSH
// uc_side = 0 ;
57179: LD_ADDR_OWVAR 20
57183: PUSH
57184: LD_INT 0
57186: ST_TO_ADDR
// uc_nation = 0 ;
57187: LD_ADDR_OWVAR 21
57191: PUSH
57192: LD_INT 0
57194: ST_TO_ADDR
// InitHc_All ( ) ;
57195: CALL_OW 584
// InitVc ;
57199: CALL_OW 20
// if mastodonts then
57203: LD_VAR 0 6
57207: IFFALSE 57274
// for i = 1 to mastodonts do
57209: LD_ADDR_VAR 0 11
57213: PUSH
57214: DOUBLE
57215: LD_INT 1
57217: DEC
57218: ST_TO_ADDR
57219: LD_VAR 0 6
57223: PUSH
57224: FOR_TO
57225: IFFALSE 57272
// begin vc_chassis := 31 ;
57227: LD_ADDR_OWVAR 37
57231: PUSH
57232: LD_INT 31
57234: ST_TO_ADDR
// vc_control := control_rider ;
57235: LD_ADDR_OWVAR 38
57239: PUSH
57240: LD_INT 4
57242: ST_TO_ADDR
// animal := CreateVehicle ;
57243: LD_ADDR_VAR 0 12
57247: PUSH
57248: CALL_OW 45
57252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57253: LD_VAR 0 12
57257: PPUSH
57258: LD_VAR 0 8
57262: PPUSH
57263: LD_INT 0
57265: PPUSH
57266: CALL 59409 0 3
// end ;
57270: GO 57224
57272: POP
57273: POP
// if horses then
57274: LD_VAR 0 5
57278: IFFALSE 57345
// for i = 1 to horses do
57280: LD_ADDR_VAR 0 11
57284: PUSH
57285: DOUBLE
57286: LD_INT 1
57288: DEC
57289: ST_TO_ADDR
57290: LD_VAR 0 5
57294: PUSH
57295: FOR_TO
57296: IFFALSE 57343
// begin hc_class := 21 ;
57298: LD_ADDR_OWVAR 28
57302: PUSH
57303: LD_INT 21
57305: ST_TO_ADDR
// hc_gallery :=  ;
57306: LD_ADDR_OWVAR 33
57310: PUSH
57311: LD_STRING 
57313: ST_TO_ADDR
// animal := CreateHuman ;
57314: LD_ADDR_VAR 0 12
57318: PUSH
57319: CALL_OW 44
57323: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57324: LD_VAR 0 12
57328: PPUSH
57329: LD_VAR 0 8
57333: PPUSH
57334: LD_INT 0
57336: PPUSH
57337: CALL 59409 0 3
// end ;
57341: GO 57295
57343: POP
57344: POP
// if birds then
57345: LD_VAR 0 1
57349: IFFALSE 57416
// for i = 1 to birds do
57351: LD_ADDR_VAR 0 11
57355: PUSH
57356: DOUBLE
57357: LD_INT 1
57359: DEC
57360: ST_TO_ADDR
57361: LD_VAR 0 1
57365: PUSH
57366: FOR_TO
57367: IFFALSE 57414
// begin hc_class = 18 ;
57369: LD_ADDR_OWVAR 28
57373: PUSH
57374: LD_INT 18
57376: ST_TO_ADDR
// hc_gallery =  ;
57377: LD_ADDR_OWVAR 33
57381: PUSH
57382: LD_STRING 
57384: ST_TO_ADDR
// animal := CreateHuman ;
57385: LD_ADDR_VAR 0 12
57389: PUSH
57390: CALL_OW 44
57394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57395: LD_VAR 0 12
57399: PPUSH
57400: LD_VAR 0 8
57404: PPUSH
57405: LD_INT 0
57407: PPUSH
57408: CALL 59409 0 3
// end ;
57412: GO 57366
57414: POP
57415: POP
// if tigers then
57416: LD_VAR 0 2
57420: IFFALSE 57504
// for i = 1 to tigers do
57422: LD_ADDR_VAR 0 11
57426: PUSH
57427: DOUBLE
57428: LD_INT 1
57430: DEC
57431: ST_TO_ADDR
57432: LD_VAR 0 2
57436: PUSH
57437: FOR_TO
57438: IFFALSE 57502
// begin hc_class = class_tiger ;
57440: LD_ADDR_OWVAR 28
57444: PUSH
57445: LD_INT 14
57447: ST_TO_ADDR
// hc_gallery =  ;
57448: LD_ADDR_OWVAR 33
57452: PUSH
57453: LD_STRING 
57455: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57456: LD_ADDR_OWVAR 35
57460: PUSH
57461: LD_INT 7
57463: NEG
57464: PPUSH
57465: LD_INT 7
57467: PPUSH
57468: CALL_OW 12
57472: ST_TO_ADDR
// animal := CreateHuman ;
57473: LD_ADDR_VAR 0 12
57477: PUSH
57478: CALL_OW 44
57482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57483: LD_VAR 0 12
57487: PPUSH
57488: LD_VAR 0 8
57492: PPUSH
57493: LD_INT 0
57495: PPUSH
57496: CALL 59409 0 3
// end ;
57500: GO 57437
57502: POP
57503: POP
// if apemans then
57504: LD_VAR 0 3
57508: IFFALSE 57631
// for i = 1 to apemans do
57510: LD_ADDR_VAR 0 11
57514: PUSH
57515: DOUBLE
57516: LD_INT 1
57518: DEC
57519: ST_TO_ADDR
57520: LD_VAR 0 3
57524: PUSH
57525: FOR_TO
57526: IFFALSE 57629
// begin hc_class = class_apeman ;
57528: LD_ADDR_OWVAR 28
57532: PUSH
57533: LD_INT 12
57535: ST_TO_ADDR
// hc_gallery =  ;
57536: LD_ADDR_OWVAR 33
57540: PUSH
57541: LD_STRING 
57543: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57544: LD_ADDR_OWVAR 35
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PPUSH
57553: LD_INT 2
57555: PPUSH
57556: CALL_OW 12
57560: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57561: LD_ADDR_OWVAR 31
57565: PUSH
57566: LD_INT 1
57568: PPUSH
57569: LD_INT 3
57571: PPUSH
57572: CALL_OW 12
57576: PUSH
57577: LD_INT 1
57579: PPUSH
57580: LD_INT 3
57582: PPUSH
57583: CALL_OW 12
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// animal := CreateHuman ;
57600: LD_ADDR_VAR 0 12
57604: PUSH
57605: CALL_OW 44
57609: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57610: LD_VAR 0 12
57614: PPUSH
57615: LD_VAR 0 8
57619: PPUSH
57620: LD_INT 0
57622: PPUSH
57623: CALL 59409 0 3
// end ;
57627: GO 57525
57629: POP
57630: POP
// if enchidnas then
57631: LD_VAR 0 4
57635: IFFALSE 57702
// for i = 1 to enchidnas do
57637: LD_ADDR_VAR 0 11
57641: PUSH
57642: DOUBLE
57643: LD_INT 1
57645: DEC
57646: ST_TO_ADDR
57647: LD_VAR 0 4
57651: PUSH
57652: FOR_TO
57653: IFFALSE 57700
// begin hc_class = 13 ;
57655: LD_ADDR_OWVAR 28
57659: PUSH
57660: LD_INT 13
57662: ST_TO_ADDR
// hc_gallery =  ;
57663: LD_ADDR_OWVAR 33
57667: PUSH
57668: LD_STRING 
57670: ST_TO_ADDR
// animal := CreateHuman ;
57671: LD_ADDR_VAR 0 12
57675: PUSH
57676: CALL_OW 44
57680: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57681: LD_VAR 0 12
57685: PPUSH
57686: LD_VAR 0 8
57690: PPUSH
57691: LD_INT 0
57693: PPUSH
57694: CALL 59409 0 3
// end ;
57698: GO 57652
57700: POP
57701: POP
// if fishes then
57702: LD_VAR 0 7
57706: IFFALSE 57773
// for i = 1 to fishes do
57708: LD_ADDR_VAR 0 11
57712: PUSH
57713: DOUBLE
57714: LD_INT 1
57716: DEC
57717: ST_TO_ADDR
57718: LD_VAR 0 7
57722: PUSH
57723: FOR_TO
57724: IFFALSE 57771
// begin hc_class = 20 ;
57726: LD_ADDR_OWVAR 28
57730: PUSH
57731: LD_INT 20
57733: ST_TO_ADDR
// hc_gallery =  ;
57734: LD_ADDR_OWVAR 33
57738: PUSH
57739: LD_STRING 
57741: ST_TO_ADDR
// animal := CreateHuman ;
57742: LD_ADDR_VAR 0 12
57746: PUSH
57747: CALL_OW 44
57751: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57752: LD_VAR 0 12
57756: PPUSH
57757: LD_VAR 0 9
57761: PPUSH
57762: LD_INT 0
57764: PPUSH
57765: CALL 59409 0 3
// end ;
57769: GO 57723
57771: POP
57772: POP
// end ;
57773: LD_VAR 0 10
57777: RET
// export function WantHeal ( sci , unit ) ; begin
57778: LD_INT 0
57780: PPUSH
// if GetTaskList ( sci ) > 0 then
57781: LD_VAR 0 1
57785: PPUSH
57786: CALL_OW 437
57790: PUSH
57791: LD_INT 0
57793: GREATER
57794: IFFALSE 57864
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57796: LD_VAR 0 1
57800: PPUSH
57801: CALL_OW 437
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PUSH
57810: LD_INT 1
57812: ARRAY
57813: PUSH
57814: LD_STRING l
57816: EQUAL
57817: PUSH
57818: LD_VAR 0 1
57822: PPUSH
57823: CALL_OW 437
57827: PUSH
57828: LD_INT 1
57830: ARRAY
57831: PUSH
57832: LD_INT 4
57834: ARRAY
57835: PUSH
57836: LD_VAR 0 2
57840: EQUAL
57841: AND
57842: IFFALSE 57854
// result := true else
57844: LD_ADDR_VAR 0 3
57848: PUSH
57849: LD_INT 1
57851: ST_TO_ADDR
57852: GO 57862
// result := false ;
57854: LD_ADDR_VAR 0 3
57858: PUSH
57859: LD_INT 0
57861: ST_TO_ADDR
// end else
57862: GO 57872
// result := false ;
57864: LD_ADDR_VAR 0 3
57868: PUSH
57869: LD_INT 0
57871: ST_TO_ADDR
// end ;
57872: LD_VAR 0 3
57876: RET
// export function HealTarget ( sci ) ; begin
57877: LD_INT 0
57879: PPUSH
// if not sci then
57880: LD_VAR 0 1
57884: NOT
57885: IFFALSE 57889
// exit ;
57887: GO 57954
// result := 0 ;
57889: LD_ADDR_VAR 0 2
57893: PUSH
57894: LD_INT 0
57896: ST_TO_ADDR
// if GetTaskList ( sci ) then
57897: LD_VAR 0 1
57901: PPUSH
57902: CALL_OW 437
57906: IFFALSE 57954
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57908: LD_VAR 0 1
57912: PPUSH
57913: CALL_OW 437
57917: PUSH
57918: LD_INT 1
57920: ARRAY
57921: PUSH
57922: LD_INT 1
57924: ARRAY
57925: PUSH
57926: LD_STRING l
57928: EQUAL
57929: IFFALSE 57954
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57931: LD_ADDR_VAR 0 2
57935: PUSH
57936: LD_VAR 0 1
57940: PPUSH
57941: CALL_OW 437
57945: PUSH
57946: LD_INT 1
57948: ARRAY
57949: PUSH
57950: LD_INT 4
57952: ARRAY
57953: ST_TO_ADDR
// end ;
57954: LD_VAR 0 2
57958: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57959: LD_INT 0
57961: PPUSH
57962: PPUSH
57963: PPUSH
57964: PPUSH
// if not base_units then
57965: LD_VAR 0 1
57969: NOT
57970: IFFALSE 57974
// exit ;
57972: GO 58061
// result := false ;
57974: LD_ADDR_VAR 0 2
57978: PUSH
57979: LD_INT 0
57981: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57982: LD_ADDR_VAR 0 5
57986: PUSH
57987: LD_VAR 0 1
57991: PPUSH
57992: LD_INT 21
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PPUSH
58002: CALL_OW 72
58006: ST_TO_ADDR
// if not tmp then
58007: LD_VAR 0 5
58011: NOT
58012: IFFALSE 58016
// exit ;
58014: GO 58061
// for i in tmp do
58016: LD_ADDR_VAR 0 3
58020: PUSH
58021: LD_VAR 0 5
58025: PUSH
58026: FOR_IN
58027: IFFALSE 58059
// begin result := EnemyInRange ( i , 22 ) ;
58029: LD_ADDR_VAR 0 2
58033: PUSH
58034: LD_VAR 0 3
58038: PPUSH
58039: LD_INT 22
58041: PPUSH
58042: CALL 56297 0 2
58046: ST_TO_ADDR
// if result then
58047: LD_VAR 0 2
58051: IFFALSE 58057
// exit ;
58053: POP
58054: POP
58055: GO 58061
// end ;
58057: GO 58026
58059: POP
58060: POP
// end ;
58061: LD_VAR 0 2
58065: RET
// export function FilterByTag ( units , tag ) ; begin
58066: LD_INT 0
58068: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58069: LD_ADDR_VAR 0 3
58073: PUSH
58074: LD_VAR 0 1
58078: PPUSH
58079: LD_INT 120
58081: PUSH
58082: LD_VAR 0 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PPUSH
58091: CALL_OW 72
58095: ST_TO_ADDR
// end ;
58096: LD_VAR 0 3
58100: RET
// export function IsDriver ( un ) ; begin
58101: LD_INT 0
58103: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58104: LD_ADDR_VAR 0 2
58108: PUSH
58109: LD_VAR 0 1
58113: PUSH
58114: LD_INT 55
58116: PUSH
58117: EMPTY
58118: LIST
58119: PPUSH
58120: CALL_OW 69
58124: IN
58125: ST_TO_ADDR
// end ;
58126: LD_VAR 0 2
58130: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58131: LD_INT 0
58133: PPUSH
58134: PPUSH
// list := [ ] ;
58135: LD_ADDR_VAR 0 5
58139: PUSH
58140: EMPTY
58141: ST_TO_ADDR
// case d of 0 :
58142: LD_VAR 0 3
58146: PUSH
58147: LD_INT 0
58149: DOUBLE
58150: EQUAL
58151: IFTRUE 58155
58153: GO 58288
58155: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58156: LD_ADDR_VAR 0 5
58160: PUSH
58161: LD_VAR 0 1
58165: PUSH
58166: LD_INT 4
58168: MINUS
58169: PUSH
58170: LD_VAR 0 2
58174: PUSH
58175: LD_INT 4
58177: MINUS
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: PUSH
58187: LD_VAR 0 1
58191: PUSH
58192: LD_INT 3
58194: MINUS
58195: PUSH
58196: LD_VAR 0 2
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: PUSH
58209: LD_VAR 0 1
58213: PUSH
58214: LD_INT 4
58216: PLUS
58217: PUSH
58218: LD_VAR 0 2
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: PUSH
58231: LD_VAR 0 1
58235: PUSH
58236: LD_INT 3
58238: PLUS
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: LD_INT 3
58247: PLUS
58248: PUSH
58249: LD_INT 5
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_VAR 0 2
58266: PUSH
58267: LD_INT 4
58269: PLUS
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// end ; 1 :
58286: GO 58986
58288: LD_INT 1
58290: DOUBLE
58291: EQUAL
58292: IFTRUE 58296
58294: GO 58429
58296: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58297: LD_ADDR_VAR 0 5
58301: PUSH
58302: LD_VAR 0 1
58306: PUSH
58307: LD_VAR 0 2
58311: PUSH
58312: LD_INT 4
58314: MINUS
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: LD_VAR 0 1
58328: PUSH
58329: LD_INT 3
58331: MINUS
58332: PUSH
58333: LD_VAR 0 2
58337: PUSH
58338: LD_INT 3
58340: MINUS
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: PUSH
58350: LD_VAR 0 1
58354: PUSH
58355: LD_INT 4
58357: MINUS
58358: PUSH
58359: LD_VAR 0 2
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: PUSH
58372: LD_VAR 0 1
58376: PUSH
58377: LD_VAR 0 2
58381: PUSH
58382: LD_INT 3
58384: PLUS
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: PUSH
58394: LD_VAR 0 1
58398: PUSH
58399: LD_INT 4
58401: PLUS
58402: PUSH
58403: LD_VAR 0 2
58407: PUSH
58408: LD_INT 4
58410: PLUS
58411: PUSH
58412: LD_INT 5
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// end ; 2 :
58427: GO 58986
58429: LD_INT 2
58431: DOUBLE
58432: EQUAL
58433: IFTRUE 58437
58435: GO 58566
58437: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58438: LD_ADDR_VAR 0 5
58442: PUSH
58443: LD_VAR 0 1
58447: PUSH
58448: LD_VAR 0 2
58452: PUSH
58453: LD_INT 3
58455: MINUS
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: PUSH
58465: LD_VAR 0 1
58469: PUSH
58470: LD_INT 4
58472: PLUS
58473: PUSH
58474: LD_VAR 0 2
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: PUSH
58487: LD_VAR 0 1
58491: PUSH
58492: LD_VAR 0 2
58496: PUSH
58497: LD_INT 4
58499: PLUS
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: PUSH
58509: LD_VAR 0 1
58513: PUSH
58514: LD_INT 3
58516: MINUS
58517: PUSH
58518: LD_VAR 0 2
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: PUSH
58531: LD_VAR 0 1
58535: PUSH
58536: LD_INT 4
58538: MINUS
58539: PUSH
58540: LD_VAR 0 2
58544: PUSH
58545: LD_INT 4
58547: MINUS
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// end ; 3 :
58564: GO 58986
58566: LD_INT 3
58568: DOUBLE
58569: EQUAL
58570: IFTRUE 58574
58572: GO 58707
58574: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58575: LD_ADDR_VAR 0 5
58579: PUSH
58580: LD_VAR 0 1
58584: PUSH
58585: LD_INT 3
58587: PLUS
58588: PUSH
58589: LD_VAR 0 2
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: PUSH
58602: LD_VAR 0 1
58606: PUSH
58607: LD_INT 4
58609: PLUS
58610: PUSH
58611: LD_VAR 0 2
58615: PUSH
58616: LD_INT 4
58618: PLUS
58619: PUSH
58620: LD_INT 5
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: PUSH
58628: LD_VAR 0 1
58632: PUSH
58633: LD_INT 4
58635: MINUS
58636: PUSH
58637: LD_VAR 0 2
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: PUSH
58650: LD_VAR 0 1
58654: PUSH
58655: LD_VAR 0 2
58659: PUSH
58660: LD_INT 4
58662: MINUS
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: PUSH
58672: LD_VAR 0 1
58676: PUSH
58677: LD_INT 3
58679: MINUS
58680: PUSH
58681: LD_VAR 0 2
58685: PUSH
58686: LD_INT 3
58688: MINUS
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// end ; 4 :
58705: GO 58986
58707: LD_INT 4
58709: DOUBLE
58710: EQUAL
58711: IFTRUE 58715
58713: GO 58848
58715: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58716: LD_ADDR_VAR 0 5
58720: PUSH
58721: LD_VAR 0 1
58725: PUSH
58726: LD_VAR 0 2
58730: PUSH
58731: LD_INT 4
58733: PLUS
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: PUSH
58743: LD_VAR 0 1
58747: PUSH
58748: LD_INT 3
58750: PLUS
58751: PUSH
58752: LD_VAR 0 2
58756: PUSH
58757: LD_INT 3
58759: PLUS
58760: PUSH
58761: LD_INT 5
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: PUSH
58769: LD_VAR 0 1
58773: PUSH
58774: LD_INT 4
58776: PLUS
58777: PUSH
58778: LD_VAR 0 2
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: PUSH
58791: LD_VAR 0 1
58795: PUSH
58796: LD_VAR 0 2
58800: PUSH
58801: LD_INT 3
58803: MINUS
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: PUSH
58813: LD_VAR 0 1
58817: PUSH
58818: LD_INT 4
58820: MINUS
58821: PUSH
58822: LD_VAR 0 2
58826: PUSH
58827: LD_INT 4
58829: MINUS
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// end ; 5 :
58846: GO 58986
58848: LD_INT 5
58850: DOUBLE
58851: EQUAL
58852: IFTRUE 58856
58854: GO 58985
58856: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58857: LD_ADDR_VAR 0 5
58861: PUSH
58862: LD_VAR 0 1
58866: PUSH
58867: LD_INT 4
58869: MINUS
58870: PUSH
58871: LD_VAR 0 2
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: PUSH
58884: LD_VAR 0 1
58888: PUSH
58889: LD_VAR 0 2
58893: PUSH
58894: LD_INT 4
58896: MINUS
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: LIST
58905: PUSH
58906: LD_VAR 0 1
58910: PUSH
58911: LD_INT 4
58913: PLUS
58914: PUSH
58915: LD_VAR 0 2
58919: PUSH
58920: LD_INT 4
58922: PLUS
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: PUSH
58932: LD_VAR 0 1
58936: PUSH
58937: LD_INT 3
58939: PLUS
58940: PUSH
58941: LD_VAR 0 2
58945: PUSH
58946: LD_INT 4
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: PUSH
58954: LD_VAR 0 1
58958: PUSH
58959: LD_VAR 0 2
58963: PUSH
58964: LD_INT 3
58966: PLUS
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// end ; end ;
58983: GO 58986
58985: POP
// result := list ;
58986: LD_ADDR_VAR 0 4
58990: PUSH
58991: LD_VAR 0 5
58995: ST_TO_ADDR
// end ;
58996: LD_VAR 0 4
59000: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59001: LD_INT 0
59003: PPUSH
59004: PPUSH
59005: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59006: LD_VAR 0 1
59010: NOT
59011: PUSH
59012: LD_VAR 0 2
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 4
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: IN
59035: NOT
59036: OR
59037: IFFALSE 59041
// exit ;
59039: GO 59133
// tmp := [ ] ;
59041: LD_ADDR_VAR 0 5
59045: PUSH
59046: EMPTY
59047: ST_TO_ADDR
// for i in units do
59048: LD_ADDR_VAR 0 4
59052: PUSH
59053: LD_VAR 0 1
59057: PUSH
59058: FOR_IN
59059: IFFALSE 59102
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59061: LD_ADDR_VAR 0 5
59065: PUSH
59066: LD_VAR 0 5
59070: PPUSH
59071: LD_VAR 0 5
59075: PUSH
59076: LD_INT 1
59078: PLUS
59079: PPUSH
59080: LD_VAR 0 4
59084: PPUSH
59085: LD_VAR 0 2
59089: PPUSH
59090: CALL_OW 259
59094: PPUSH
59095: CALL_OW 2
59099: ST_TO_ADDR
59100: GO 59058
59102: POP
59103: POP
// if not tmp then
59104: LD_VAR 0 5
59108: NOT
59109: IFFALSE 59113
// exit ;
59111: GO 59133
// result := SortListByListDesc ( units , tmp ) ;
59113: LD_ADDR_VAR 0 3
59117: PUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: LD_VAR 0 5
59127: PPUSH
59128: CALL_OW 77
59132: ST_TO_ADDR
// end ;
59133: LD_VAR 0 3
59137: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59138: LD_INT 0
59140: PPUSH
59141: PPUSH
59142: PPUSH
// result := false ;
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_INT 0
59150: ST_TO_ADDR
// x := GetX ( building ) ;
59151: LD_ADDR_VAR 0 4
59155: PUSH
59156: LD_VAR 0 2
59160: PPUSH
59161: CALL_OW 250
59165: ST_TO_ADDR
// y := GetY ( building ) ;
59166: LD_ADDR_VAR 0 5
59170: PUSH
59171: LD_VAR 0 2
59175: PPUSH
59176: CALL_OW 251
59180: ST_TO_ADDR
// if not building or not x or not y then
59181: LD_VAR 0 2
59185: NOT
59186: PUSH
59187: LD_VAR 0 4
59191: NOT
59192: OR
59193: PUSH
59194: LD_VAR 0 5
59198: NOT
59199: OR
59200: IFFALSE 59204
// exit ;
59202: GO 59296
// if GetTaskList ( unit ) then
59204: LD_VAR 0 1
59208: PPUSH
59209: CALL_OW 437
59213: IFFALSE 59296
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59215: LD_STRING e
59217: PUSH
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 437
59227: PUSH
59228: LD_INT 1
59230: ARRAY
59231: PUSH
59232: LD_INT 1
59234: ARRAY
59235: EQUAL
59236: PUSH
59237: LD_VAR 0 4
59241: PUSH
59242: LD_VAR 0 1
59246: PPUSH
59247: CALL_OW 437
59251: PUSH
59252: LD_INT 1
59254: ARRAY
59255: PUSH
59256: LD_INT 2
59258: ARRAY
59259: EQUAL
59260: AND
59261: PUSH
59262: LD_VAR 0 5
59266: PUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: CALL_OW 437
59276: PUSH
59277: LD_INT 1
59279: ARRAY
59280: PUSH
59281: LD_INT 3
59283: ARRAY
59284: EQUAL
59285: AND
59286: IFFALSE 59296
// result := true end ;
59288: LD_ADDR_VAR 0 3
59292: PUSH
59293: LD_INT 1
59295: ST_TO_ADDR
// end ;
59296: LD_VAR 0 3
59300: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59301: LD_INT 0
59303: PPUSH
// result := false ;
59304: LD_ADDR_VAR 0 4
59308: PUSH
59309: LD_INT 0
59311: ST_TO_ADDR
// if GetTaskList ( unit ) then
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 437
59321: IFFALSE 59404
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59323: LD_STRING M
59325: PUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 437
59335: PUSH
59336: LD_INT 1
59338: ARRAY
59339: PUSH
59340: LD_INT 1
59342: ARRAY
59343: EQUAL
59344: PUSH
59345: LD_VAR 0 2
59349: PUSH
59350: LD_VAR 0 1
59354: PPUSH
59355: CALL_OW 437
59359: PUSH
59360: LD_INT 1
59362: ARRAY
59363: PUSH
59364: LD_INT 2
59366: ARRAY
59367: EQUAL
59368: AND
59369: PUSH
59370: LD_VAR 0 3
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 437
59384: PUSH
59385: LD_INT 1
59387: ARRAY
59388: PUSH
59389: LD_INT 3
59391: ARRAY
59392: EQUAL
59393: AND
59394: IFFALSE 59404
// result := true ;
59396: LD_ADDR_VAR 0 4
59400: PUSH
59401: LD_INT 1
59403: ST_TO_ADDR
// end ; end ;
59404: LD_VAR 0 4
59408: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59409: LD_INT 0
59411: PPUSH
59412: PPUSH
59413: PPUSH
59414: PPUSH
// if not unit or not area then
59415: LD_VAR 0 1
59419: NOT
59420: PUSH
59421: LD_VAR 0 2
59425: NOT
59426: OR
59427: IFFALSE 59431
// exit ;
59429: GO 59595
// tmp := AreaToList ( area , i ) ;
59431: LD_ADDR_VAR 0 6
59435: PUSH
59436: LD_VAR 0 2
59440: PPUSH
59441: LD_VAR 0 5
59445: PPUSH
59446: CALL_OW 517
59450: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59451: LD_ADDR_VAR 0 5
59455: PUSH
59456: DOUBLE
59457: LD_INT 1
59459: DEC
59460: ST_TO_ADDR
59461: LD_VAR 0 6
59465: PUSH
59466: LD_INT 1
59468: ARRAY
59469: PUSH
59470: FOR_TO
59471: IFFALSE 59593
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59473: LD_ADDR_VAR 0 7
59477: PUSH
59478: LD_VAR 0 6
59482: PUSH
59483: LD_INT 1
59485: ARRAY
59486: PUSH
59487: LD_VAR 0 5
59491: ARRAY
59492: PUSH
59493: LD_VAR 0 6
59497: PUSH
59498: LD_INT 2
59500: ARRAY
59501: PUSH
59502: LD_VAR 0 5
59506: ARRAY
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59512: LD_VAR 0 7
59516: PUSH
59517: LD_INT 1
59519: ARRAY
59520: PPUSH
59521: LD_VAR 0 7
59525: PUSH
59526: LD_INT 2
59528: ARRAY
59529: PPUSH
59530: CALL_OW 428
59534: PUSH
59535: LD_INT 0
59537: EQUAL
59538: IFFALSE 59591
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59540: LD_VAR 0 1
59544: PPUSH
59545: LD_VAR 0 7
59549: PUSH
59550: LD_INT 1
59552: ARRAY
59553: PPUSH
59554: LD_VAR 0 7
59558: PUSH
59559: LD_INT 2
59561: ARRAY
59562: PPUSH
59563: LD_VAR 0 3
59567: PPUSH
59568: CALL_OW 48
// result := IsPlaced ( unit ) ;
59572: LD_ADDR_VAR 0 4
59576: PUSH
59577: LD_VAR 0 1
59581: PPUSH
59582: CALL_OW 305
59586: ST_TO_ADDR
// exit ;
59587: POP
59588: POP
59589: GO 59595
// end ; end ;
59591: GO 59470
59593: POP
59594: POP
// end ;
59595: LD_VAR 0 4
59599: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59600: LD_INT 0
59602: PPUSH
59603: PPUSH
59604: PPUSH
// if not side or side > 8 then
59605: LD_VAR 0 1
59609: NOT
59610: PUSH
59611: LD_VAR 0 1
59615: PUSH
59616: LD_INT 8
59618: GREATER
59619: OR
59620: IFFALSE 59624
// exit ;
59622: GO 59811
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59624: LD_ADDR_VAR 0 4
59628: PUSH
59629: LD_INT 22
59631: PUSH
59632: LD_VAR 0 1
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 21
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PPUSH
59655: CALL_OW 69
59659: ST_TO_ADDR
// if not tmp then
59660: LD_VAR 0 4
59664: NOT
59665: IFFALSE 59669
// exit ;
59667: GO 59811
// enable_addtolog := true ;
59669: LD_ADDR_OWVAR 81
59673: PUSH
59674: LD_INT 1
59676: ST_TO_ADDR
// AddToLog ( [ ) ;
59677: LD_STRING [
59679: PPUSH
59680: CALL_OW 561
// for i in tmp do
59684: LD_ADDR_VAR 0 3
59688: PUSH
59689: LD_VAR 0 4
59693: PUSH
59694: FOR_IN
59695: IFFALSE 59802
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59697: LD_STRING [
59699: PUSH
59700: LD_VAR 0 3
59704: PPUSH
59705: CALL_OW 266
59709: STR
59710: PUSH
59711: LD_STRING , 
59713: STR
59714: PUSH
59715: LD_VAR 0 3
59719: PPUSH
59720: CALL_OW 250
59724: STR
59725: PUSH
59726: LD_STRING , 
59728: STR
59729: PUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 251
59739: STR
59740: PUSH
59741: LD_STRING , 
59743: STR
59744: PUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL_OW 254
59754: STR
59755: PUSH
59756: LD_STRING , 
59758: STR
59759: PUSH
59760: LD_VAR 0 3
59764: PPUSH
59765: LD_INT 1
59767: PPUSH
59768: CALL_OW 268
59772: STR
59773: PUSH
59774: LD_STRING , 
59776: STR
59777: PUSH
59778: LD_VAR 0 3
59782: PPUSH
59783: LD_INT 2
59785: PPUSH
59786: CALL_OW 268
59790: STR
59791: PUSH
59792: LD_STRING ],
59794: STR
59795: PPUSH
59796: CALL_OW 561
// end ;
59800: GO 59694
59802: POP
59803: POP
// AddToLog ( ]; ) ;
59804: LD_STRING ];
59806: PPUSH
59807: CALL_OW 561
// end ;
59811: LD_VAR 0 2
59815: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59816: LD_INT 0
59818: PPUSH
59819: PPUSH
59820: PPUSH
59821: PPUSH
59822: PPUSH
// if not area or not rate or not max then
59823: LD_VAR 0 1
59827: NOT
59828: PUSH
59829: LD_VAR 0 2
59833: NOT
59834: OR
59835: PUSH
59836: LD_VAR 0 4
59840: NOT
59841: OR
59842: IFFALSE 59846
// exit ;
59844: GO 60035
// while 1 do
59846: LD_INT 1
59848: IFFALSE 60035
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59850: LD_ADDR_VAR 0 9
59854: PUSH
59855: LD_VAR 0 1
59859: PPUSH
59860: LD_INT 1
59862: PPUSH
59863: CALL_OW 287
59867: PUSH
59868: LD_INT 10
59870: MUL
59871: ST_TO_ADDR
// r := rate / 10 ;
59872: LD_ADDR_VAR 0 7
59876: PUSH
59877: LD_VAR 0 2
59881: PUSH
59882: LD_INT 10
59884: DIVREAL
59885: ST_TO_ADDR
// time := 1 1$00 ;
59886: LD_ADDR_VAR 0 8
59890: PUSH
59891: LD_INT 2100
59893: ST_TO_ADDR
// if amount < min then
59894: LD_VAR 0 9
59898: PUSH
59899: LD_VAR 0 3
59903: LESS
59904: IFFALSE 59922
// r := r * 2 else
59906: LD_ADDR_VAR 0 7
59910: PUSH
59911: LD_VAR 0 7
59915: PUSH
59916: LD_INT 2
59918: MUL
59919: ST_TO_ADDR
59920: GO 59948
// if amount > max then
59922: LD_VAR 0 9
59926: PUSH
59927: LD_VAR 0 4
59931: GREATER
59932: IFFALSE 59948
// r := r / 2 ;
59934: LD_ADDR_VAR 0 7
59938: PUSH
59939: LD_VAR 0 7
59943: PUSH
59944: LD_INT 2
59946: DIVREAL
59947: ST_TO_ADDR
// time := time / r ;
59948: LD_ADDR_VAR 0 8
59952: PUSH
59953: LD_VAR 0 8
59957: PUSH
59958: LD_VAR 0 7
59962: DIVREAL
59963: ST_TO_ADDR
// if time < 0 then
59964: LD_VAR 0 8
59968: PUSH
59969: LD_INT 0
59971: LESS
59972: IFFALSE 59989
// time := time * - 1 ;
59974: LD_ADDR_VAR 0 8
59978: PUSH
59979: LD_VAR 0 8
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: MUL
59988: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59989: LD_VAR 0 8
59993: PUSH
59994: LD_INT 35
59996: PPUSH
59997: LD_INT 875
59999: PPUSH
60000: CALL_OW 12
60004: PLUS
60005: PPUSH
60006: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60010: LD_INT 1
60012: PPUSH
60013: LD_INT 5
60015: PPUSH
60016: CALL_OW 12
60020: PPUSH
60021: LD_VAR 0 1
60025: PPUSH
60026: LD_INT 1
60028: PPUSH
60029: CALL_OW 55
// end ;
60033: GO 59846
// end ;
60035: LD_VAR 0 5
60039: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60040: LD_INT 0
60042: PPUSH
60043: PPUSH
60044: PPUSH
60045: PPUSH
60046: PPUSH
60047: PPUSH
60048: PPUSH
60049: PPUSH
// if not turrets or not factories then
60050: LD_VAR 0 1
60054: NOT
60055: PUSH
60056: LD_VAR 0 2
60060: NOT
60061: OR
60062: IFFALSE 60066
// exit ;
60064: GO 60373
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60066: LD_ADDR_VAR 0 10
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: LD_INT 6
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: LD_INT 4
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: LD_INT 5
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 24
60108: PUSH
60109: LD_INT 25
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 23
60118: PUSH
60119: LD_INT 27
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 42
60132: PUSH
60133: LD_INT 43
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 44
60142: PUSH
60143: LD_INT 46
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 45
60152: PUSH
60153: LD_INT 47
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// result := [ ] ;
60170: LD_ADDR_VAR 0 3
60174: PUSH
60175: EMPTY
60176: ST_TO_ADDR
// for i in turrets do
60177: LD_ADDR_VAR 0 4
60181: PUSH
60182: LD_VAR 0 1
60186: PUSH
60187: FOR_IN
60188: IFFALSE 60371
// begin nat := GetNation ( i ) ;
60190: LD_ADDR_VAR 0 7
60194: PUSH
60195: LD_VAR 0 4
60199: PPUSH
60200: CALL_OW 248
60204: ST_TO_ADDR
// weapon := 0 ;
60205: LD_ADDR_VAR 0 8
60209: PUSH
60210: LD_INT 0
60212: ST_TO_ADDR
// if not nat then
60213: LD_VAR 0 7
60217: NOT
60218: IFFALSE 60222
// continue ;
60220: GO 60187
// for j in list [ nat ] do
60222: LD_ADDR_VAR 0 5
60226: PUSH
60227: LD_VAR 0 10
60231: PUSH
60232: LD_VAR 0 7
60236: ARRAY
60237: PUSH
60238: FOR_IN
60239: IFFALSE 60280
// if GetBWeapon ( i ) = j [ 1 ] then
60241: LD_VAR 0 4
60245: PPUSH
60246: CALL_OW 269
60250: PUSH
60251: LD_VAR 0 5
60255: PUSH
60256: LD_INT 1
60258: ARRAY
60259: EQUAL
60260: IFFALSE 60278
// begin weapon := j [ 2 ] ;
60262: LD_ADDR_VAR 0 8
60266: PUSH
60267: LD_VAR 0 5
60271: PUSH
60272: LD_INT 2
60274: ARRAY
60275: ST_TO_ADDR
// break ;
60276: GO 60280
// end ;
60278: GO 60238
60280: POP
60281: POP
// if not weapon then
60282: LD_VAR 0 8
60286: NOT
60287: IFFALSE 60291
// continue ;
60289: GO 60187
// for k in factories do
60291: LD_ADDR_VAR 0 6
60295: PUSH
60296: LD_VAR 0 2
60300: PUSH
60301: FOR_IN
60302: IFFALSE 60367
// begin weapons := AvailableWeaponList ( k ) ;
60304: LD_ADDR_VAR 0 9
60308: PUSH
60309: LD_VAR 0 6
60313: PPUSH
60314: CALL_OW 478
60318: ST_TO_ADDR
// if not weapons then
60319: LD_VAR 0 9
60323: NOT
60324: IFFALSE 60328
// continue ;
60326: GO 60301
// if weapon in weapons then
60328: LD_VAR 0 8
60332: PUSH
60333: LD_VAR 0 9
60337: IN
60338: IFFALSE 60365
// begin result := [ i , weapon ] ;
60340: LD_ADDR_VAR 0 3
60344: PUSH
60345: LD_VAR 0 4
60349: PUSH
60350: LD_VAR 0 8
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// exit ;
60359: POP
60360: POP
60361: POP
60362: POP
60363: GO 60373
// end ; end ;
60365: GO 60301
60367: POP
60368: POP
// end ;
60369: GO 60187
60371: POP
60372: POP
// end ;
60373: LD_VAR 0 3
60377: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60378: LD_INT 0
60380: PPUSH
// if not side or side > 8 then
60381: LD_VAR 0 3
60385: NOT
60386: PUSH
60387: LD_VAR 0 3
60391: PUSH
60392: LD_INT 8
60394: GREATER
60395: OR
60396: IFFALSE 60400
// exit ;
60398: GO 60459
// if not range then
60400: LD_VAR 0 4
60404: NOT
60405: IFFALSE 60416
// range := - 12 ;
60407: LD_ADDR_VAR 0 4
60411: PUSH
60412: LD_INT 12
60414: NEG
60415: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60416: LD_VAR 0 1
60420: PPUSH
60421: LD_VAR 0 2
60425: PPUSH
60426: LD_VAR 0 3
60430: PPUSH
60431: LD_VAR 0 4
60435: PPUSH
60436: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60440: LD_VAR 0 1
60444: PPUSH
60445: LD_VAR 0 2
60449: PPUSH
60450: LD_VAR 0 3
60454: PPUSH
60455: CALL_OW 331
// end ;
60459: LD_VAR 0 5
60463: RET
// export function Video ( mode ) ; begin
60464: LD_INT 0
60466: PPUSH
// ingame_video = mode ;
60467: LD_ADDR_OWVAR 52
60471: PUSH
60472: LD_VAR 0 1
60476: ST_TO_ADDR
// interface_hidden = mode ;
60477: LD_ADDR_OWVAR 54
60481: PUSH
60482: LD_VAR 0 1
60486: ST_TO_ADDR
// end ;
60487: LD_VAR 0 2
60491: RET
// export function Join ( array , element ) ; begin
60492: LD_INT 0
60494: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60495: LD_ADDR_VAR 0 3
60499: PUSH
60500: LD_VAR 0 1
60504: PPUSH
60505: LD_VAR 0 1
60509: PUSH
60510: LD_INT 1
60512: PLUS
60513: PPUSH
60514: LD_VAR 0 2
60518: PPUSH
60519: CALL_OW 1
60523: ST_TO_ADDR
// end ;
60524: LD_VAR 0 3
60528: RET
// export function JoinUnion ( array , element ) ; begin
60529: LD_INT 0
60531: PPUSH
// result := array union element ;
60532: LD_ADDR_VAR 0 3
60536: PUSH
60537: LD_VAR 0 1
60541: PUSH
60542: LD_VAR 0 2
60546: UNION
60547: ST_TO_ADDR
// end ;
60548: LD_VAR 0 3
60552: RET
// export function GetBehemoths ( side ) ; begin
60553: LD_INT 0
60555: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60556: LD_ADDR_VAR 0 2
60560: PUSH
60561: LD_INT 22
60563: PUSH
60564: LD_VAR 0 1
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 31
60575: PUSH
60576: LD_INT 25
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PPUSH
60587: CALL_OW 69
60591: ST_TO_ADDR
// end ;
60592: LD_VAR 0 2
60596: RET
// export function Shuffle ( array ) ; var i , index ; begin
60597: LD_INT 0
60599: PPUSH
60600: PPUSH
60601: PPUSH
// result := [ ] ;
60602: LD_ADDR_VAR 0 2
60606: PUSH
60607: EMPTY
60608: ST_TO_ADDR
// if not array then
60609: LD_VAR 0 1
60613: NOT
60614: IFFALSE 60618
// exit ;
60616: GO 60717
// Randomize ;
60618: CALL_OW 10
// for i = array downto 1 do
60622: LD_ADDR_VAR 0 3
60626: PUSH
60627: DOUBLE
60628: LD_VAR 0 1
60632: INC
60633: ST_TO_ADDR
60634: LD_INT 1
60636: PUSH
60637: FOR_DOWNTO
60638: IFFALSE 60715
// begin index := rand ( 1 , array ) ;
60640: LD_ADDR_VAR 0 4
60644: PUSH
60645: LD_INT 1
60647: PPUSH
60648: LD_VAR 0 1
60652: PPUSH
60653: CALL_OW 12
60657: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60658: LD_ADDR_VAR 0 2
60662: PUSH
60663: LD_VAR 0 2
60667: PPUSH
60668: LD_VAR 0 2
60672: PUSH
60673: LD_INT 1
60675: PLUS
60676: PPUSH
60677: LD_VAR 0 1
60681: PUSH
60682: LD_VAR 0 4
60686: ARRAY
60687: PPUSH
60688: CALL_OW 2
60692: ST_TO_ADDR
// array := Delete ( array , index ) ;
60693: LD_ADDR_VAR 0 1
60697: PUSH
60698: LD_VAR 0 1
60702: PPUSH
60703: LD_VAR 0 4
60707: PPUSH
60708: CALL_OW 3
60712: ST_TO_ADDR
// end ;
60713: GO 60637
60715: POP
60716: POP
// end ;
60717: LD_VAR 0 2
60721: RET
// export function GetBaseMaterials ( base ) ; begin
60722: LD_INT 0
60724: PPUSH
// result := [ 0 , 0 , 0 ] ;
60725: LD_ADDR_VAR 0 2
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// if not base then
60744: LD_VAR 0 1
60748: NOT
60749: IFFALSE 60753
// exit ;
60751: GO 60802
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60753: LD_ADDR_VAR 0 2
60757: PUSH
60758: LD_VAR 0 1
60762: PPUSH
60763: LD_INT 1
60765: PPUSH
60766: CALL_OW 275
60770: PUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: LD_INT 2
60778: PPUSH
60779: CALL_OW 275
60783: PUSH
60784: LD_VAR 0 1
60788: PPUSH
60789: LD_INT 3
60791: PPUSH
60792: CALL_OW 275
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// end ;
60802: LD_VAR 0 2
60806: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60807: LD_INT 0
60809: PPUSH
60810: PPUSH
// result := array ;
60811: LD_ADDR_VAR 0 3
60815: PUSH
60816: LD_VAR 0 1
60820: ST_TO_ADDR
// if size > 0 then
60821: LD_VAR 0 2
60825: PUSH
60826: LD_INT 0
60828: GREATER
60829: IFFALSE 60875
// for i := array downto size do
60831: LD_ADDR_VAR 0 4
60835: PUSH
60836: DOUBLE
60837: LD_VAR 0 1
60841: INC
60842: ST_TO_ADDR
60843: LD_VAR 0 2
60847: PUSH
60848: FOR_DOWNTO
60849: IFFALSE 60873
// result := Delete ( result , result ) ;
60851: LD_ADDR_VAR 0 3
60855: PUSH
60856: LD_VAR 0 3
60860: PPUSH
60861: LD_VAR 0 3
60865: PPUSH
60866: CALL_OW 3
60870: ST_TO_ADDR
60871: GO 60848
60873: POP
60874: POP
// end ;
60875: LD_VAR 0 3
60879: RET
// export function ComExit ( unit ) ; var tmp ; begin
60880: LD_INT 0
60882: PPUSH
60883: PPUSH
// if not IsInUnit ( unit ) then
60884: LD_VAR 0 1
60888: PPUSH
60889: CALL_OW 310
60893: NOT
60894: IFFALSE 60898
// exit ;
60896: GO 60958
// tmp := IsInUnit ( unit ) ;
60898: LD_ADDR_VAR 0 3
60902: PUSH
60903: LD_VAR 0 1
60907: PPUSH
60908: CALL_OW 310
60912: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60913: LD_VAR 0 3
60917: PPUSH
60918: CALL_OW 247
60922: PUSH
60923: LD_INT 2
60925: EQUAL
60926: IFFALSE 60939
// ComExitVehicle ( unit ) else
60928: LD_VAR 0 1
60932: PPUSH
60933: CALL_OW 121
60937: GO 60948
// ComExitBuilding ( unit ) ;
60939: LD_VAR 0 1
60943: PPUSH
60944: CALL_OW 122
// result := tmp ;
60948: LD_ADDR_VAR 0 2
60952: PUSH
60953: LD_VAR 0 3
60957: ST_TO_ADDR
// end ;
60958: LD_VAR 0 2
60962: RET
// export function ComExitAll ( units ) ; var i ; begin
60963: LD_INT 0
60965: PPUSH
60966: PPUSH
// if not units then
60967: LD_VAR 0 1
60971: NOT
60972: IFFALSE 60976
// exit ;
60974: GO 61002
// for i in units do
60976: LD_ADDR_VAR 0 3
60980: PUSH
60981: LD_VAR 0 1
60985: PUSH
60986: FOR_IN
60987: IFFALSE 61000
// ComExit ( i ) ;
60989: LD_VAR 0 3
60993: PPUSH
60994: CALL 60880 0 1
60998: GO 60986
61000: POP
61001: POP
// end ;
61002: LD_VAR 0 2
61006: RET
// export function ResetHc ; begin
61007: LD_INT 0
61009: PPUSH
// InitHc ;
61010: CALL_OW 19
// hc_importance := 0 ;
61014: LD_ADDR_OWVAR 32
61018: PUSH
61019: LD_INT 0
61021: ST_TO_ADDR
// end ;
61022: LD_VAR 0 1
61026: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61027: LD_INT 0
61029: PPUSH
61030: PPUSH
61031: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61032: LD_ADDR_VAR 0 6
61036: PUSH
61037: LD_VAR 0 1
61041: PUSH
61042: LD_VAR 0 3
61046: PLUS
61047: PUSH
61048: LD_INT 2
61050: DIV
61051: ST_TO_ADDR
// if _x < 0 then
61052: LD_VAR 0 6
61056: PUSH
61057: LD_INT 0
61059: LESS
61060: IFFALSE 61077
// _x := _x * - 1 ;
61062: LD_ADDR_VAR 0 6
61066: PUSH
61067: LD_VAR 0 6
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: MUL
61076: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61077: LD_ADDR_VAR 0 7
61081: PUSH
61082: LD_VAR 0 2
61086: PUSH
61087: LD_VAR 0 4
61091: PLUS
61092: PUSH
61093: LD_INT 2
61095: DIV
61096: ST_TO_ADDR
// if _y < 0 then
61097: LD_VAR 0 7
61101: PUSH
61102: LD_INT 0
61104: LESS
61105: IFFALSE 61122
// _y := _y * - 1 ;
61107: LD_ADDR_VAR 0 7
61111: PUSH
61112: LD_VAR 0 7
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: MUL
61121: ST_TO_ADDR
// result := [ _x , _y ] ;
61122: LD_ADDR_VAR 0 5
61126: PUSH
61127: LD_VAR 0 6
61131: PUSH
61132: LD_VAR 0 7
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// end ;
61141: LD_VAR 0 5
61145: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61146: LD_INT 0
61148: PPUSH
61149: PPUSH
61150: PPUSH
61151: PPUSH
// task := GetTaskList ( unit ) ;
61152: LD_ADDR_VAR 0 7
61156: PUSH
61157: LD_VAR 0 1
61161: PPUSH
61162: CALL_OW 437
61166: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61167: LD_VAR 0 7
61171: NOT
61172: PUSH
61173: LD_VAR 0 1
61177: PPUSH
61178: LD_VAR 0 2
61182: PPUSH
61183: CALL_OW 308
61187: NOT
61188: AND
61189: IFFALSE 61193
// exit ;
61191: GO 61311
// if IsInArea ( unit , area ) then
61193: LD_VAR 0 1
61197: PPUSH
61198: LD_VAR 0 2
61202: PPUSH
61203: CALL_OW 308
61207: IFFALSE 61225
// begin ComMoveToArea ( unit , goAway ) ;
61209: LD_VAR 0 1
61213: PPUSH
61214: LD_VAR 0 3
61218: PPUSH
61219: CALL_OW 113
// exit ;
61223: GO 61311
// end ; if task [ 1 ] [ 1 ] <> M then
61225: LD_VAR 0 7
61229: PUSH
61230: LD_INT 1
61232: ARRAY
61233: PUSH
61234: LD_INT 1
61236: ARRAY
61237: PUSH
61238: LD_STRING M
61240: NONEQUAL
61241: IFFALSE 61245
// exit ;
61243: GO 61311
// x := task [ 1 ] [ 2 ] ;
61245: LD_ADDR_VAR 0 5
61249: PUSH
61250: LD_VAR 0 7
61254: PUSH
61255: LD_INT 1
61257: ARRAY
61258: PUSH
61259: LD_INT 2
61261: ARRAY
61262: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61263: LD_ADDR_VAR 0 6
61267: PUSH
61268: LD_VAR 0 7
61272: PUSH
61273: LD_INT 1
61275: ARRAY
61276: PUSH
61277: LD_INT 3
61279: ARRAY
61280: ST_TO_ADDR
// if InArea ( x , y , area ) then
61281: LD_VAR 0 5
61285: PPUSH
61286: LD_VAR 0 6
61290: PPUSH
61291: LD_VAR 0 2
61295: PPUSH
61296: CALL_OW 309
61300: IFFALSE 61311
// ComStop ( unit ) ;
61302: LD_VAR 0 1
61306: PPUSH
61307: CALL_OW 141
// end ;
61311: LD_VAR 0 4
61315: RET
// export function Abs ( value ) ; begin
61316: LD_INT 0
61318: PPUSH
// result := value ;
61319: LD_ADDR_VAR 0 2
61323: PUSH
61324: LD_VAR 0 1
61328: ST_TO_ADDR
// if value < 0 then
61329: LD_VAR 0 1
61333: PUSH
61334: LD_INT 0
61336: LESS
61337: IFFALSE 61354
// result := value * - 1 ;
61339: LD_ADDR_VAR 0 2
61343: PUSH
61344: LD_VAR 0 1
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: MUL
61353: ST_TO_ADDR
// end ;
61354: LD_VAR 0 2
61358: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61359: LD_INT 0
61361: PPUSH
61362: PPUSH
61363: PPUSH
61364: PPUSH
61365: PPUSH
61366: PPUSH
61367: PPUSH
61368: PPUSH
// if not unit or not building then
61369: LD_VAR 0 1
61373: NOT
61374: PUSH
61375: LD_VAR 0 2
61379: NOT
61380: OR
61381: IFFALSE 61385
// exit ;
61383: GO 61611
// x := GetX ( building ) ;
61385: LD_ADDR_VAR 0 4
61389: PUSH
61390: LD_VAR 0 2
61394: PPUSH
61395: CALL_OW 250
61399: ST_TO_ADDR
// y := GetY ( building ) ;
61400: LD_ADDR_VAR 0 6
61404: PUSH
61405: LD_VAR 0 2
61409: PPUSH
61410: CALL_OW 251
61414: ST_TO_ADDR
// d := GetDir ( building ) ;
61415: LD_ADDR_VAR 0 8
61419: PUSH
61420: LD_VAR 0 2
61424: PPUSH
61425: CALL_OW 254
61429: ST_TO_ADDR
// r := 4 ;
61430: LD_ADDR_VAR 0 9
61434: PUSH
61435: LD_INT 4
61437: ST_TO_ADDR
// for i := 1 to 5 do
61438: LD_ADDR_VAR 0 10
61442: PUSH
61443: DOUBLE
61444: LD_INT 1
61446: DEC
61447: ST_TO_ADDR
61448: LD_INT 5
61450: PUSH
61451: FOR_TO
61452: IFFALSE 61609
// begin _x := ShiftX ( x , d , r + i ) ;
61454: LD_ADDR_VAR 0 5
61458: PUSH
61459: LD_VAR 0 4
61463: PPUSH
61464: LD_VAR 0 8
61468: PPUSH
61469: LD_VAR 0 9
61473: PUSH
61474: LD_VAR 0 10
61478: PLUS
61479: PPUSH
61480: CALL_OW 272
61484: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61485: LD_ADDR_VAR 0 7
61489: PUSH
61490: LD_VAR 0 6
61494: PPUSH
61495: LD_VAR 0 8
61499: PPUSH
61500: LD_VAR 0 9
61504: PUSH
61505: LD_VAR 0 10
61509: PLUS
61510: PPUSH
61511: CALL_OW 273
61515: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61516: LD_VAR 0 5
61520: PPUSH
61521: LD_VAR 0 7
61525: PPUSH
61526: CALL_OW 488
61530: PUSH
61531: LD_VAR 0 5
61535: PPUSH
61536: LD_VAR 0 7
61540: PPUSH
61541: CALL_OW 428
61545: PPUSH
61546: CALL_OW 247
61550: PUSH
61551: LD_INT 3
61553: PUSH
61554: LD_INT 2
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: IN
61561: NOT
61562: AND
61563: IFFALSE 61607
// begin ComMoveXY ( unit , _x , _y ) ;
61565: LD_VAR 0 1
61569: PPUSH
61570: LD_VAR 0 5
61574: PPUSH
61575: LD_VAR 0 7
61579: PPUSH
61580: CALL_OW 111
// result := [ _x , _y ] ;
61584: LD_ADDR_VAR 0 3
61588: PUSH
61589: LD_VAR 0 5
61593: PUSH
61594: LD_VAR 0 7
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: ST_TO_ADDR
// exit ;
61603: POP
61604: POP
61605: GO 61611
// end ; end ;
61607: GO 61451
61609: POP
61610: POP
// end ;
61611: LD_VAR 0 3
61615: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61616: LD_INT 0
61618: PPUSH
61619: PPUSH
61620: PPUSH
// result := 0 ;
61621: LD_ADDR_VAR 0 3
61625: PUSH
61626: LD_INT 0
61628: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61629: LD_VAR 0 1
61633: PUSH
61634: LD_INT 0
61636: LESS
61637: PUSH
61638: LD_VAR 0 1
61642: PUSH
61643: LD_INT 8
61645: GREATER
61646: OR
61647: PUSH
61648: LD_VAR 0 2
61652: PUSH
61653: LD_INT 0
61655: LESS
61656: OR
61657: PUSH
61658: LD_VAR 0 2
61662: PUSH
61663: LD_INT 8
61665: GREATER
61666: OR
61667: IFFALSE 61671
// exit ;
61669: GO 61746
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61671: LD_ADDR_VAR 0 4
61675: PUSH
61676: LD_INT 22
61678: PUSH
61679: LD_VAR 0 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PPUSH
61688: CALL_OW 69
61692: PUSH
61693: FOR_IN
61694: IFFALSE 61744
// begin un := UnitShoot ( i ) ;
61696: LD_ADDR_VAR 0 5
61700: PUSH
61701: LD_VAR 0 4
61705: PPUSH
61706: CALL_OW 504
61710: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61711: LD_VAR 0 5
61715: PPUSH
61716: CALL_OW 255
61720: PUSH
61721: LD_VAR 0 1
61725: EQUAL
61726: IFFALSE 61742
// begin result := un ;
61728: LD_ADDR_VAR 0 3
61732: PUSH
61733: LD_VAR 0 5
61737: ST_TO_ADDR
// exit ;
61738: POP
61739: POP
61740: GO 61746
// end ; end ;
61742: GO 61693
61744: POP
61745: POP
// end ;
61746: LD_VAR 0 3
61750: RET
// export function GetCargoBay ( units ) ; begin
61751: LD_INT 0
61753: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61754: LD_ADDR_VAR 0 2
61758: PUSH
61759: LD_VAR 0 1
61763: PPUSH
61764: LD_INT 2
61766: PUSH
61767: LD_INT 34
61769: PUSH
61770: LD_INT 12
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 34
61779: PUSH
61780: LD_INT 51
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 34
61789: PUSH
61790: LD_INT 32
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 34
61799: PUSH
61800: LD_EXP 8
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: PPUSH
61816: CALL_OW 72
61820: ST_TO_ADDR
// end ;
61821: LD_VAR 0 2
61825: RET
// export function Negate ( value ) ; begin
61826: LD_INT 0
61828: PPUSH
// result := not value ;
61829: LD_ADDR_VAR 0 2
61833: PUSH
61834: LD_VAR 0 1
61838: NOT
61839: ST_TO_ADDR
// end ;
61840: LD_VAR 0 2
61844: RET
// export function Inc ( value ) ; begin
61845: LD_INT 0
61847: PPUSH
// result := value + 1 ;
61848: LD_ADDR_VAR 0 2
61852: PUSH
61853: LD_VAR 0 1
61857: PUSH
61858: LD_INT 1
61860: PLUS
61861: ST_TO_ADDR
// end ;
61862: LD_VAR 0 2
61866: RET
// export function Dec ( value ) ; begin
61867: LD_INT 0
61869: PPUSH
// result := value - 1 ;
61870: LD_ADDR_VAR 0 2
61874: PUSH
61875: LD_VAR 0 1
61879: PUSH
61880: LD_INT 1
61882: MINUS
61883: ST_TO_ADDR
// end ;
61884: LD_VAR 0 2
61888: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61889: LD_INT 0
61891: PPUSH
61892: PPUSH
61893: PPUSH
61894: PPUSH
61895: PPUSH
61896: PPUSH
61897: PPUSH
61898: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61899: LD_VAR 0 1
61903: PPUSH
61904: LD_VAR 0 2
61908: PPUSH
61909: CALL_OW 488
61913: NOT
61914: PUSH
61915: LD_VAR 0 3
61919: PPUSH
61920: LD_VAR 0 4
61924: PPUSH
61925: CALL_OW 488
61929: NOT
61930: OR
61931: IFFALSE 61944
// begin result := - 1 ;
61933: LD_ADDR_VAR 0 5
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: ST_TO_ADDR
// exit ;
61942: GO 62179
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61944: LD_ADDR_VAR 0 12
61948: PUSH
61949: LD_VAR 0 1
61953: PPUSH
61954: LD_VAR 0 2
61958: PPUSH
61959: LD_VAR 0 3
61963: PPUSH
61964: LD_VAR 0 4
61968: PPUSH
61969: CALL 61027 0 4
61973: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61974: LD_ADDR_VAR 0 11
61978: PUSH
61979: LD_VAR 0 1
61983: PPUSH
61984: LD_VAR 0 2
61988: PPUSH
61989: LD_VAR 0 12
61993: PUSH
61994: LD_INT 1
61996: ARRAY
61997: PPUSH
61998: LD_VAR 0 12
62002: PUSH
62003: LD_INT 2
62005: ARRAY
62006: PPUSH
62007: CALL_OW 298
62011: ST_TO_ADDR
// distance := 9999 ;
62012: LD_ADDR_VAR 0 10
62016: PUSH
62017: LD_INT 9999
62019: ST_TO_ADDR
// for i := 0 to 5 do
62020: LD_ADDR_VAR 0 6
62024: PUSH
62025: DOUBLE
62026: LD_INT 0
62028: DEC
62029: ST_TO_ADDR
62030: LD_INT 5
62032: PUSH
62033: FOR_TO
62034: IFFALSE 62177
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62036: LD_ADDR_VAR 0 7
62040: PUSH
62041: LD_VAR 0 1
62045: PPUSH
62046: LD_VAR 0 6
62050: PPUSH
62051: LD_VAR 0 11
62055: PPUSH
62056: CALL_OW 272
62060: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62061: LD_ADDR_VAR 0 8
62065: PUSH
62066: LD_VAR 0 2
62070: PPUSH
62071: LD_VAR 0 6
62075: PPUSH
62076: LD_VAR 0 11
62080: PPUSH
62081: CALL_OW 273
62085: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62086: LD_VAR 0 7
62090: PPUSH
62091: LD_VAR 0 8
62095: PPUSH
62096: CALL_OW 488
62100: NOT
62101: IFFALSE 62105
// continue ;
62103: GO 62033
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62105: LD_ADDR_VAR 0 9
62109: PUSH
62110: LD_VAR 0 12
62114: PUSH
62115: LD_INT 1
62117: ARRAY
62118: PPUSH
62119: LD_VAR 0 12
62123: PUSH
62124: LD_INT 2
62126: ARRAY
62127: PPUSH
62128: LD_VAR 0 7
62132: PPUSH
62133: LD_VAR 0 8
62137: PPUSH
62138: CALL_OW 298
62142: ST_TO_ADDR
// if tmp < distance then
62143: LD_VAR 0 9
62147: PUSH
62148: LD_VAR 0 10
62152: LESS
62153: IFFALSE 62175
// begin result := i ;
62155: LD_ADDR_VAR 0 5
62159: PUSH
62160: LD_VAR 0 6
62164: ST_TO_ADDR
// distance := tmp ;
62165: LD_ADDR_VAR 0 10
62169: PUSH
62170: LD_VAR 0 9
62174: ST_TO_ADDR
// end ; end ;
62175: GO 62033
62177: POP
62178: POP
// end ;
62179: LD_VAR 0 5
62183: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62184: LD_INT 0
62186: PPUSH
62187: PPUSH
// if not driver or not IsInUnit ( driver ) then
62188: LD_VAR 0 1
62192: NOT
62193: PUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: CALL_OW 310
62203: NOT
62204: OR
62205: IFFALSE 62209
// exit ;
62207: GO 62299
// vehicle := IsInUnit ( driver ) ;
62209: LD_ADDR_VAR 0 3
62213: PUSH
62214: LD_VAR 0 1
62218: PPUSH
62219: CALL_OW 310
62223: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62224: LD_VAR 0 1
62228: PPUSH
62229: LD_STRING \
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: PUSH
62259: LD_STRING E
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_VAR 0 3
62272: PUSH
62273: LD_INT 0
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PPUSH
62295: CALL_OW 446
// end ;
62299: LD_VAR 0 2
62303: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62304: LD_INT 0
62306: PPUSH
62307: PPUSH
// if not driver or not IsInUnit ( driver ) then
62308: LD_VAR 0 1
62312: NOT
62313: PUSH
62314: LD_VAR 0 1
62318: PPUSH
62319: CALL_OW 310
62323: NOT
62324: OR
62325: IFFALSE 62329
// exit ;
62327: GO 62419
// vehicle := IsInUnit ( driver ) ;
62329: LD_ADDR_VAR 0 3
62333: PUSH
62334: LD_VAR 0 1
62338: PPUSH
62339: CALL_OW 310
62343: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62344: LD_VAR 0 1
62348: PPUSH
62349: LD_STRING \
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: LD_INT 0
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: LD_STRING E
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_VAR 0 3
62392: PUSH
62393: LD_INT 0
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PPUSH
62415: CALL_OW 447
// end ;
62419: LD_VAR 0 2
62423: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62424: LD_INT 0
62426: PPUSH
62427: PPUSH
62428: PPUSH
// tmp := [ ] ;
62429: LD_ADDR_VAR 0 5
62433: PUSH
62434: EMPTY
62435: ST_TO_ADDR
// for i in units do
62436: LD_ADDR_VAR 0 4
62440: PUSH
62441: LD_VAR 0 1
62445: PUSH
62446: FOR_IN
62447: IFFALSE 62485
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62449: LD_ADDR_VAR 0 5
62453: PUSH
62454: LD_VAR 0 5
62458: PPUSH
62459: LD_VAR 0 5
62463: PUSH
62464: LD_INT 1
62466: PLUS
62467: PPUSH
62468: LD_VAR 0 4
62472: PPUSH
62473: CALL_OW 256
62477: PPUSH
62478: CALL_OW 2
62482: ST_TO_ADDR
62483: GO 62446
62485: POP
62486: POP
// if not tmp then
62487: LD_VAR 0 5
62491: NOT
62492: IFFALSE 62496
// exit ;
62494: GO 62544
// if asc then
62496: LD_VAR 0 2
62500: IFFALSE 62524
// result := SortListByListAsc ( units , tmp ) else
62502: LD_ADDR_VAR 0 3
62506: PUSH
62507: LD_VAR 0 1
62511: PPUSH
62512: LD_VAR 0 5
62516: PPUSH
62517: CALL_OW 76
62521: ST_TO_ADDR
62522: GO 62544
// result := SortListByListDesc ( units , tmp ) ;
62524: LD_ADDR_VAR 0 3
62528: PUSH
62529: LD_VAR 0 1
62533: PPUSH
62534: LD_VAR 0 5
62538: PPUSH
62539: CALL_OW 77
62543: ST_TO_ADDR
// end ;
62544: LD_VAR 0 3
62548: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62549: LD_INT 0
62551: PPUSH
62552: PPUSH
// task := GetTaskList ( mech ) ;
62553: LD_ADDR_VAR 0 4
62557: PUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: CALL_OW 437
62567: ST_TO_ADDR
// if not task then
62568: LD_VAR 0 4
62572: NOT
62573: IFFALSE 62577
// exit ;
62575: GO 62619
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62577: LD_ADDR_VAR 0 3
62581: PUSH
62582: LD_VAR 0 4
62586: PUSH
62587: LD_INT 1
62589: ARRAY
62590: PUSH
62591: LD_INT 1
62593: ARRAY
62594: PUSH
62595: LD_STRING r
62597: EQUAL
62598: PUSH
62599: LD_VAR 0 4
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: PUSH
62608: LD_INT 4
62610: ARRAY
62611: PUSH
62612: LD_VAR 0 2
62616: EQUAL
62617: AND
62618: ST_TO_ADDR
// end ;
62619: LD_VAR 0 3
62623: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62624: LD_INT 0
62626: PPUSH
// SetDir ( unit , d ) ;
62627: LD_VAR 0 1
62631: PPUSH
62632: LD_VAR 0 4
62636: PPUSH
62637: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62641: LD_VAR 0 1
62645: PPUSH
62646: LD_VAR 0 2
62650: PPUSH
62651: LD_VAR 0 3
62655: PPUSH
62656: LD_VAR 0 5
62660: PPUSH
62661: CALL_OW 48
// end ;
62665: LD_VAR 0 6
62669: RET
// export function ToNaturalNumber ( number ) ; begin
62670: LD_INT 0
62672: PPUSH
// result := number div 1 ;
62673: LD_ADDR_VAR 0 2
62677: PUSH
62678: LD_VAR 0 1
62682: PUSH
62683: LD_INT 1
62685: DIV
62686: ST_TO_ADDR
// if number < 0 then
62687: LD_VAR 0 1
62691: PUSH
62692: LD_INT 0
62694: LESS
62695: IFFALSE 62705
// result := 0 ;
62697: LD_ADDR_VAR 0 2
62701: PUSH
62702: LD_INT 0
62704: ST_TO_ADDR
// end ;
62705: LD_VAR 0 2
62709: RET
// export function SortByClass ( units , class ) ; var un ; begin
62710: LD_INT 0
62712: PPUSH
62713: PPUSH
// if not units or not class then
62714: LD_VAR 0 1
62718: NOT
62719: PUSH
62720: LD_VAR 0 2
62724: NOT
62725: OR
62726: IFFALSE 62730
// exit ;
62728: GO 62825
// result := [ ] ;
62730: LD_ADDR_VAR 0 3
62734: PUSH
62735: EMPTY
62736: ST_TO_ADDR
// for un in units do
62737: LD_ADDR_VAR 0 4
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: FOR_IN
62748: IFFALSE 62823
// if GetClass ( un ) = class then
62750: LD_VAR 0 4
62754: PPUSH
62755: CALL_OW 257
62759: PUSH
62760: LD_VAR 0 2
62764: EQUAL
62765: IFFALSE 62792
// result := Insert ( result , 1 , un ) else
62767: LD_ADDR_VAR 0 3
62771: PUSH
62772: LD_VAR 0 3
62776: PPUSH
62777: LD_INT 1
62779: PPUSH
62780: LD_VAR 0 4
62784: PPUSH
62785: CALL_OW 2
62789: ST_TO_ADDR
62790: GO 62821
// result := Replace ( result , result + 1 , un ) ;
62792: LD_ADDR_VAR 0 3
62796: PUSH
62797: LD_VAR 0 3
62801: PPUSH
62802: LD_VAR 0 3
62806: PUSH
62807: LD_INT 1
62809: PLUS
62810: PPUSH
62811: LD_VAR 0 4
62815: PPUSH
62816: CALL_OW 1
62820: ST_TO_ADDR
62821: GO 62747
62823: POP
62824: POP
// end ;
62825: LD_VAR 0 3
62829: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62830: LD_INT 0
62832: PPUSH
62833: PPUSH
62834: PPUSH
62835: PPUSH
62836: PPUSH
62837: PPUSH
62838: PPUSH
// result := [ ] ;
62839: LD_ADDR_VAR 0 4
62843: PUSH
62844: EMPTY
62845: ST_TO_ADDR
// if x - r < 0 then
62846: LD_VAR 0 1
62850: PUSH
62851: LD_VAR 0 3
62855: MINUS
62856: PUSH
62857: LD_INT 0
62859: LESS
62860: IFFALSE 62872
// min_x := 0 else
62862: LD_ADDR_VAR 0 8
62866: PUSH
62867: LD_INT 0
62869: ST_TO_ADDR
62870: GO 62888
// min_x := x - r ;
62872: LD_ADDR_VAR 0 8
62876: PUSH
62877: LD_VAR 0 1
62881: PUSH
62882: LD_VAR 0 3
62886: MINUS
62887: ST_TO_ADDR
// if y - r < 0 then
62888: LD_VAR 0 2
62892: PUSH
62893: LD_VAR 0 3
62897: MINUS
62898: PUSH
62899: LD_INT 0
62901: LESS
62902: IFFALSE 62914
// min_y := 0 else
62904: LD_ADDR_VAR 0 7
62908: PUSH
62909: LD_INT 0
62911: ST_TO_ADDR
62912: GO 62930
// min_y := y - r ;
62914: LD_ADDR_VAR 0 7
62918: PUSH
62919: LD_VAR 0 2
62923: PUSH
62924: LD_VAR 0 3
62928: MINUS
62929: ST_TO_ADDR
// max_x := x + r ;
62930: LD_ADDR_VAR 0 9
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: LD_VAR 0 3
62944: PLUS
62945: ST_TO_ADDR
// max_y := y + r ;
62946: LD_ADDR_VAR 0 10
62950: PUSH
62951: LD_VAR 0 2
62955: PUSH
62956: LD_VAR 0 3
62960: PLUS
62961: ST_TO_ADDR
// for _x = min_x to max_x do
62962: LD_ADDR_VAR 0 5
62966: PUSH
62967: DOUBLE
62968: LD_VAR 0 8
62972: DEC
62973: ST_TO_ADDR
62974: LD_VAR 0 9
62978: PUSH
62979: FOR_TO
62980: IFFALSE 63081
// for _y = min_y to max_y do
62982: LD_ADDR_VAR 0 6
62986: PUSH
62987: DOUBLE
62988: LD_VAR 0 7
62992: DEC
62993: ST_TO_ADDR
62994: LD_VAR 0 10
62998: PUSH
62999: FOR_TO
63000: IFFALSE 63077
// begin if not ValidHex ( _x , _y ) then
63002: LD_VAR 0 5
63006: PPUSH
63007: LD_VAR 0 6
63011: PPUSH
63012: CALL_OW 488
63016: NOT
63017: IFFALSE 63021
// continue ;
63019: GO 62999
// if GetResourceTypeXY ( _x , _y ) then
63021: LD_VAR 0 5
63025: PPUSH
63026: LD_VAR 0 6
63030: PPUSH
63031: CALL_OW 283
63035: IFFALSE 63075
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63037: LD_ADDR_VAR 0 4
63041: PUSH
63042: LD_VAR 0 4
63046: PPUSH
63047: LD_VAR 0 4
63051: PUSH
63052: LD_INT 1
63054: PLUS
63055: PPUSH
63056: LD_VAR 0 5
63060: PUSH
63061: LD_VAR 0 6
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PPUSH
63070: CALL_OW 1
63074: ST_TO_ADDR
// end ;
63075: GO 62999
63077: POP
63078: POP
63079: GO 62979
63081: POP
63082: POP
// end ;
63083: LD_VAR 0 4
63087: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63088: LD_INT 0
63090: PPUSH
63091: PPUSH
63092: PPUSH
63093: PPUSH
63094: PPUSH
63095: PPUSH
63096: PPUSH
63097: PPUSH
// if not units then
63098: LD_VAR 0 1
63102: NOT
63103: IFFALSE 63107
// exit ;
63105: GO 63532
// result := UnitFilter ( units , [ f_ok ] ) ;
63107: LD_ADDR_VAR 0 3
63111: PUSH
63112: LD_VAR 0 1
63116: PPUSH
63117: LD_INT 50
63119: PUSH
63120: EMPTY
63121: LIST
63122: PPUSH
63123: CALL_OW 72
63127: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63128: LD_ADDR_VAR 0 8
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: LD_INT 1
63140: ARRAY
63141: PPUSH
63142: CALL_OW 255
63146: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63147: LD_ADDR_VAR 0 10
63151: PUSH
63152: LD_INT 29
63154: PUSH
63155: LD_EXP 11
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: ST_TO_ADDR
// if not result then
63164: LD_VAR 0 3
63168: NOT
63169: IFFALSE 63173
// exit ;
63171: GO 63532
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63173: LD_ADDR_VAR 0 5
63177: PUSH
63178: LD_INT 81
63180: PUSH
63181: LD_VAR 0 8
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PPUSH
63190: CALL_OW 69
63194: ST_TO_ADDR
// for i in result do
63195: LD_ADDR_VAR 0 4
63199: PUSH
63200: LD_VAR 0 3
63204: PUSH
63205: FOR_IN
63206: IFFALSE 63530
// begin tag := GetTag ( i ) + 1 ;
63208: LD_ADDR_VAR 0 9
63212: PUSH
63213: LD_VAR 0 4
63217: PPUSH
63218: CALL_OW 110
63222: PUSH
63223: LD_INT 1
63225: PLUS
63226: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63227: LD_ADDR_VAR 0 7
63231: PUSH
63232: LD_VAR 0 4
63236: PPUSH
63237: CALL_OW 250
63241: PPUSH
63242: LD_VAR 0 4
63246: PPUSH
63247: CALL_OW 251
63251: PPUSH
63252: LD_INT 6
63254: PPUSH
63255: CALL 62830 0 3
63259: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63260: LD_VAR 0 7
63264: PUSH
63265: LD_VAR 0 4
63269: PPUSH
63270: CALL_OW 264
63274: PUSH
63275: LD_VAR 0 10
63279: IN
63280: NOT
63281: AND
63282: IFFALSE 63321
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63284: LD_VAR 0 4
63288: PPUSH
63289: LD_VAR 0 7
63293: PUSH
63294: LD_INT 1
63296: ARRAY
63297: PUSH
63298: LD_INT 1
63300: ARRAY
63301: PPUSH
63302: LD_VAR 0 7
63306: PUSH
63307: LD_INT 1
63309: ARRAY
63310: PUSH
63311: LD_INT 2
63313: ARRAY
63314: PPUSH
63315: CALL_OW 116
63319: GO 63528
// if path > tag then
63321: LD_VAR 0 2
63325: PUSH
63326: LD_VAR 0 9
63330: GREATER
63331: IFFALSE 63498
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63333: LD_ADDR_VAR 0 6
63337: PUSH
63338: LD_VAR 0 5
63342: PPUSH
63343: LD_INT 91
63345: PUSH
63346: LD_VAR 0 4
63350: PUSH
63351: LD_INT 12
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: PPUSH
63359: CALL_OW 72
63363: ST_TO_ADDR
// if nearEnemy then
63364: LD_VAR 0 6
63368: IFFALSE 63396
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63370: LD_VAR 0 4
63374: PPUSH
63375: LD_VAR 0 6
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: CALL_OW 74
63389: PPUSH
63390: CALL_OW 115
63394: GO 63496
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63396: LD_VAR 0 4
63400: PPUSH
63401: LD_VAR 0 2
63405: PUSH
63406: LD_VAR 0 9
63410: ARRAY
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PPUSH
63416: LD_VAR 0 2
63420: PUSH
63421: LD_VAR 0 9
63425: ARRAY
63426: PUSH
63427: LD_INT 2
63429: ARRAY
63430: PPUSH
63431: CALL_OW 297
63435: PUSH
63436: LD_INT 6
63438: GREATER
63439: IFFALSE 63482
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63441: LD_VAR 0 4
63445: PPUSH
63446: LD_VAR 0 2
63450: PUSH
63451: LD_VAR 0 9
63455: ARRAY
63456: PUSH
63457: LD_INT 1
63459: ARRAY
63460: PPUSH
63461: LD_VAR 0 2
63465: PUSH
63466: LD_VAR 0 9
63470: ARRAY
63471: PUSH
63472: LD_INT 2
63474: ARRAY
63475: PPUSH
63476: CALL_OW 114
63480: GO 63496
// SetTag ( i , tag ) ;
63482: LD_VAR 0 4
63486: PPUSH
63487: LD_VAR 0 9
63491: PPUSH
63492: CALL_OW 109
// end else
63496: GO 63528
// if enemy then
63498: LD_VAR 0 5
63502: IFFALSE 63528
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63504: LD_VAR 0 4
63508: PPUSH
63509: LD_VAR 0 5
63513: PPUSH
63514: LD_VAR 0 4
63518: PPUSH
63519: CALL_OW 74
63523: PPUSH
63524: CALL_OW 115
// end ;
63528: GO 63205
63530: POP
63531: POP
// end ;
63532: LD_VAR 0 3
63536: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63537: LD_INT 0
63539: PPUSH
63540: PPUSH
63541: PPUSH
// if not unit or IsInUnit ( unit ) then
63542: LD_VAR 0 1
63546: NOT
63547: PUSH
63548: LD_VAR 0 1
63552: PPUSH
63553: CALL_OW 310
63557: OR
63558: IFFALSE 63562
// exit ;
63560: GO 63653
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63562: LD_ADDR_VAR 0 4
63566: PUSH
63567: LD_VAR 0 1
63571: PPUSH
63572: CALL_OW 250
63576: PPUSH
63577: LD_VAR 0 2
63581: PPUSH
63582: LD_INT 1
63584: PPUSH
63585: CALL_OW 272
63589: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63590: LD_ADDR_VAR 0 5
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 251
63604: PPUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_INT 1
63612: PPUSH
63613: CALL_OW 273
63617: ST_TO_ADDR
// if ValidHex ( x , y ) then
63618: LD_VAR 0 4
63622: PPUSH
63623: LD_VAR 0 5
63627: PPUSH
63628: CALL_OW 488
63632: IFFALSE 63653
// ComTurnXY ( unit , x , y ) ;
63634: LD_VAR 0 1
63638: PPUSH
63639: LD_VAR 0 4
63643: PPUSH
63644: LD_VAR 0 5
63648: PPUSH
63649: CALL_OW 118
// end ;
63653: LD_VAR 0 3
63657: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63658: LD_INT 0
63660: PPUSH
63661: PPUSH
// result := false ;
63662: LD_ADDR_VAR 0 3
63666: PUSH
63667: LD_INT 0
63669: ST_TO_ADDR
// if not units then
63670: LD_VAR 0 2
63674: NOT
63675: IFFALSE 63679
// exit ;
63677: GO 63724
// for i in units do
63679: LD_ADDR_VAR 0 4
63683: PUSH
63684: LD_VAR 0 2
63688: PUSH
63689: FOR_IN
63690: IFFALSE 63722
// if See ( side , i ) then
63692: LD_VAR 0 1
63696: PPUSH
63697: LD_VAR 0 4
63701: PPUSH
63702: CALL_OW 292
63706: IFFALSE 63720
// begin result := true ;
63708: LD_ADDR_VAR 0 3
63712: PUSH
63713: LD_INT 1
63715: ST_TO_ADDR
// exit ;
63716: POP
63717: POP
63718: GO 63724
// end ;
63720: GO 63689
63722: POP
63723: POP
// end ;
63724: LD_VAR 0 3
63728: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63729: LD_INT 0
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
// if not unit or not points then
63735: LD_VAR 0 1
63739: NOT
63740: PUSH
63741: LD_VAR 0 2
63745: NOT
63746: OR
63747: IFFALSE 63751
// exit ;
63749: GO 63841
// dist := 99999 ;
63751: LD_ADDR_VAR 0 5
63755: PUSH
63756: LD_INT 99999
63758: ST_TO_ADDR
// for i in points do
63759: LD_ADDR_VAR 0 4
63763: PUSH
63764: LD_VAR 0 2
63768: PUSH
63769: FOR_IN
63770: IFFALSE 63839
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63772: LD_ADDR_VAR 0 6
63776: PUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: LD_VAR 0 4
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PPUSH
63791: LD_VAR 0 4
63795: PUSH
63796: LD_INT 2
63798: ARRAY
63799: PPUSH
63800: CALL_OW 297
63804: ST_TO_ADDR
// if tmpDist < dist then
63805: LD_VAR 0 6
63809: PUSH
63810: LD_VAR 0 5
63814: LESS
63815: IFFALSE 63837
// begin result := i ;
63817: LD_ADDR_VAR 0 3
63821: PUSH
63822: LD_VAR 0 4
63826: ST_TO_ADDR
// dist := tmpDist ;
63827: LD_ADDR_VAR 0 5
63831: PUSH
63832: LD_VAR 0 6
63836: ST_TO_ADDR
// end ; end ;
63837: GO 63769
63839: POP
63840: POP
// end ;
63841: LD_VAR 0 3
63845: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63846: LD_INT 0
63848: PPUSH
// uc_side := side ;
63849: LD_ADDR_OWVAR 20
63853: PUSH
63854: LD_VAR 0 1
63858: ST_TO_ADDR
// uc_nation := 3 ;
63859: LD_ADDR_OWVAR 21
63863: PUSH
63864: LD_INT 3
63866: ST_TO_ADDR
// vc_chassis := 25 ;
63867: LD_ADDR_OWVAR 37
63871: PUSH
63872: LD_INT 25
63874: ST_TO_ADDR
// vc_engine := engine_siberite ;
63875: LD_ADDR_OWVAR 39
63879: PUSH
63880: LD_INT 3
63882: ST_TO_ADDR
// vc_control := control_computer ;
63883: LD_ADDR_OWVAR 38
63887: PUSH
63888: LD_INT 3
63890: ST_TO_ADDR
// vc_weapon := 59 ;
63891: LD_ADDR_OWVAR 40
63895: PUSH
63896: LD_INT 59
63898: ST_TO_ADDR
// result := CreateVehicle ;
63899: LD_ADDR_VAR 0 5
63903: PUSH
63904: CALL_OW 45
63908: ST_TO_ADDR
// SetDir ( result , d ) ;
63909: LD_VAR 0 5
63913: PPUSH
63914: LD_VAR 0 4
63918: PPUSH
63919: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63923: LD_VAR 0 5
63927: PPUSH
63928: LD_VAR 0 2
63932: PPUSH
63933: LD_VAR 0 3
63937: PPUSH
63938: LD_INT 0
63940: PPUSH
63941: CALL_OW 48
// end ; end_of_file
63945: LD_VAR 0 5
63949: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63950: LD_VAR 0 1
63954: PUSH
63955: LD_INT 200
63957: DOUBLE
63958: GREATEREQUAL
63959: IFFALSE 63967
63961: LD_INT 299
63963: DOUBLE
63964: LESSEQUAL
63965: IFTRUE 63969
63967: GO 64001
63969: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63970: LD_VAR 0 1
63974: PPUSH
63975: LD_VAR 0 2
63979: PPUSH
63980: LD_VAR 0 3
63984: PPUSH
63985: LD_VAR 0 4
63989: PPUSH
63990: LD_VAR 0 5
63994: PPUSH
63995: CALL 19549 0 5
63999: GO 64078
64001: LD_INT 300
64003: DOUBLE
64004: GREATEREQUAL
64005: IFFALSE 64013
64007: LD_INT 399
64009: DOUBLE
64010: LESSEQUAL
64011: IFTRUE 64015
64013: GO 64077
64015: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64016: LD_VAR 0 1
64020: PPUSH
64021: LD_VAR 0 2
64025: PPUSH
64026: LD_VAR 0 3
64030: PPUSH
64031: LD_VAR 0 4
64035: PPUSH
64036: LD_VAR 0 5
64040: PPUSH
64041: LD_VAR 0 6
64045: PPUSH
64046: LD_VAR 0 7
64050: PPUSH
64051: LD_VAR 0 8
64055: PPUSH
64056: LD_VAR 0 9
64060: PPUSH
64061: LD_VAR 0 10
64065: PPUSH
64066: LD_VAR 0 11
64070: PPUSH
64071: CALL 17191 0 11
64075: GO 64078
64077: POP
// end ;
64078: PPOPN 11
64080: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64081: LD_VAR 0 1
64085: PPUSH
64086: LD_VAR 0 2
64090: PPUSH
64091: LD_VAR 0 3
64095: PPUSH
64096: LD_VAR 0 4
64100: PPUSH
64101: LD_VAR 0 5
64105: PPUSH
64106: CALL 19285 0 5
// end ; end_of_file
64110: PPOPN 5
64112: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64113: LD_VAR 0 1
64117: PPUSH
64118: LD_VAR 0 2
64122: PPUSH
64123: LD_VAR 0 3
64127: PPUSH
64128: LD_VAR 0 4
64132: PPUSH
64133: LD_VAR 0 5
64137: PPUSH
64138: LD_VAR 0 6
64142: PPUSH
64143: CALL 4884 0 6
// end ;
64147: PPOPN 6
64149: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64150: CALL 4859 0 0
// end ;
64154: PPOPN 1
64156: END
