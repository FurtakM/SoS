// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 19163 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 19261 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 19269 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_miner := 81 ;
4669: LD_ADDR_EXP 14
4673: PUSH
4674: LD_INT 81
4676: ST_TO_ADDR
// ar_crane := 88 ;
4677: LD_ADDR_EXP 13
4681: PUSH
4682: LD_INT 88
4684: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4685: LD_ADDR_EXP 8
4689: PUSH
4690: LD_INT 89
4692: ST_TO_ADDR
// us_hack := 99 ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 99
4700: ST_TO_ADDR
// us_artillery := 97 ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 97
4708: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4709: LD_ADDR_EXP 11
4713: PUSH
4714: LD_INT 91
4716: ST_TO_ADDR
// ar_mortar := 92 ;
4717: LD_ADDR_EXP 12
4721: PUSH
4722: LD_INT 92
4724: ST_TO_ADDR
// ru_radar := 98 ;
4725: LD_ADDR_EXP 7
4729: PUSH
4730: LD_INT 98
4732: ST_TO_ADDR
// tech_Artillery := 80 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 80
4740: ST_TO_ADDR
// tech_RadMat := 81 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 81
4748: ST_TO_ADDR
// tech_BasicTools := 82 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 82
4756: ST_TO_ADDR
// tech_Cargo := 83 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 83
4764: ST_TO_ADDR
// tech_Track := 84 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 84
4772: ST_TO_ADDR
// tech_Crane := 85 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 85
4780: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 86
4788: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4789: LD_ADDR_EXP 22
4793: PUSH
4794: LD_INT 87
4796: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4797: LD_ADDR_EXP 23
4801: PUSH
4802: LD_INT 88
4804: ST_TO_ADDR
// class_mastodont := 31 ;
4805: LD_ADDR_EXP 24
4809: PUSH
4810: LD_INT 31
4812: ST_TO_ADDR
// class_horse := 21 ;
4813: LD_ADDR_EXP 25
4817: PUSH
4818: LD_INT 21
4820: ST_TO_ADDR
// end ;
4821: LD_VAR 0 1
4825: RET
// every 1 do
4826: GO 4828
4828: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4829: CALL 4666 0 0
4833: END
// every 0 0$1 do
4834: GO 4836
4836: DISABLE
// begin enable ;
4837: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4838: LD_STRING updateTimer(
4840: PUSH
4841: LD_OWVAR 1
4845: STR
4846: PUSH
4847: LD_STRING );
4849: STR
4850: PPUSH
4851: CALL_OW 559
// end ;
4855: END
// on MapStart ( p ) do begin if streamModeActive then
4856: LD_EXP 26
4860: IFFALSE 4869
// DefineStreamItems ( true ) ;
4862: LD_INT 1
4864: PPUSH
4865: CALL 6517 0 1
// UpdateFactoryWaypoints ( ) ;
4869: CALL 20101 0 0
// end ;
4873: PPOPN 1
4875: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4876: LD_INT 0
4878: PPUSH
// if p2 = 100 then
4879: LD_VAR 0 2
4883: PUSH
4884: LD_INT 100
4886: EQUAL
4887: IFFALSE 5890
// begin if not StreamModeActive then
4889: LD_EXP 26
4893: NOT
4894: IFFALSE 4904
// StreamModeActive := true ;
4896: LD_ADDR_EXP 26
4900: PUSH
4901: LD_INT 1
4903: ST_TO_ADDR
// if p3 = 0 then
4904: LD_VAR 0 3
4908: PUSH
4909: LD_INT 0
4911: EQUAL
4912: IFFALSE 4918
// InitStreamMode ;
4914: CALL 6053 0 0
// if p3 = 1 then
4918: LD_VAR 0 3
4922: PUSH
4923: LD_INT 1
4925: EQUAL
4926: IFFALSE 4936
// sRocket := true ;
4928: LD_ADDR_EXP 31
4932: PUSH
4933: LD_INT 1
4935: ST_TO_ADDR
// if p3 = 2 then
4936: LD_VAR 0 3
4940: PUSH
4941: LD_INT 2
4943: EQUAL
4944: IFFALSE 4954
// sSpeed := true ;
4946: LD_ADDR_EXP 30
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// if p3 = 3 then
4954: LD_VAR 0 3
4958: PUSH
4959: LD_INT 3
4961: EQUAL
4962: IFFALSE 4972
// sEngine := true ;
4964: LD_ADDR_EXP 32
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// if p3 = 4 then
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 4
4979: EQUAL
4980: IFFALSE 4990
// sSpec := true ;
4982: LD_ADDR_EXP 29
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// if p3 = 5 then
4990: LD_VAR 0 3
4994: PUSH
4995: LD_INT 5
4997: EQUAL
4998: IFFALSE 5008
// sLevel := true ;
5000: LD_ADDR_EXP 33
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// if p3 = 6 then
5008: LD_VAR 0 3
5012: PUSH
5013: LD_INT 6
5015: EQUAL
5016: IFFALSE 5026
// sArmoury := true ;
5018: LD_ADDR_EXP 34
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// if p3 = 7 then
5026: LD_VAR 0 3
5030: PUSH
5031: LD_INT 7
5033: EQUAL
5034: IFFALSE 5044
// sRadar := true ;
5036: LD_ADDR_EXP 35
5040: PUSH
5041: LD_INT 1
5043: ST_TO_ADDR
// if p3 = 8 then
5044: LD_VAR 0 3
5048: PUSH
5049: LD_INT 8
5051: EQUAL
5052: IFFALSE 5062
// sBunker := true ;
5054: LD_ADDR_EXP 36
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// if p3 = 9 then
5062: LD_VAR 0 3
5066: PUSH
5067: LD_INT 9
5069: EQUAL
5070: IFFALSE 5080
// sHack := true ;
5072: LD_ADDR_EXP 37
5076: PUSH
5077: LD_INT 1
5079: ST_TO_ADDR
// if p3 = 10 then
5080: LD_VAR 0 3
5084: PUSH
5085: LD_INT 10
5087: EQUAL
5088: IFFALSE 5098
// sFire := true ;
5090: LD_ADDR_EXP 38
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
// if p3 = 11 then
5098: LD_VAR 0 3
5102: PUSH
5103: LD_INT 11
5105: EQUAL
5106: IFFALSE 5116
// sRefresh := true ;
5108: LD_ADDR_EXP 39
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// if p3 = 12 then
5116: LD_VAR 0 3
5120: PUSH
5121: LD_INT 12
5123: EQUAL
5124: IFFALSE 5134
// sExp := true ;
5126: LD_ADDR_EXP 40
5130: PUSH
5131: LD_INT 1
5133: ST_TO_ADDR
// if p3 = 13 then
5134: LD_VAR 0 3
5138: PUSH
5139: LD_INT 13
5141: EQUAL
5142: IFFALSE 5152
// sDepot := true ;
5144: LD_ADDR_EXP 41
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// if p3 = 14 then
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 14
5159: EQUAL
5160: IFFALSE 5170
// sFlag := true ;
5162: LD_ADDR_EXP 42
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// if p3 = 15 then
5170: LD_VAR 0 3
5174: PUSH
5175: LD_INT 15
5177: EQUAL
5178: IFFALSE 5188
// sKamikadze := true ;
5180: LD_ADDR_EXP 50
5184: PUSH
5185: LD_INT 1
5187: ST_TO_ADDR
// if p3 = 16 then
5188: LD_VAR 0 3
5192: PUSH
5193: LD_INT 16
5195: EQUAL
5196: IFFALSE 5206
// sTroll := true ;
5198: LD_ADDR_EXP 51
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if p3 = 17 then
5206: LD_VAR 0 3
5210: PUSH
5211: LD_INT 17
5213: EQUAL
5214: IFFALSE 5224
// sSlow := true ;
5216: LD_ADDR_EXP 52
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// if p3 = 18 then
5224: LD_VAR 0 3
5228: PUSH
5229: LD_INT 18
5231: EQUAL
5232: IFFALSE 5242
// sLack := true ;
5234: LD_ADDR_EXP 53
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if p3 = 19 then
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 19
5249: EQUAL
5250: IFFALSE 5260
// sTank := true ;
5252: LD_ADDR_EXP 55
5256: PUSH
5257: LD_INT 1
5259: ST_TO_ADDR
// if p3 = 20 then
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 20
5267: EQUAL
5268: IFFALSE 5278
// sRemote := true ;
5270: LD_ADDR_EXP 56
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// if p3 = 21 then
5278: LD_VAR 0 3
5282: PUSH
5283: LD_INT 21
5285: EQUAL
5286: IFFALSE 5296
// sPowell := true ;
5288: LD_ADDR_EXP 57
5292: PUSH
5293: LD_INT 1
5295: ST_TO_ADDR
// if p3 = 22 then
5296: LD_VAR 0 3
5300: PUSH
5301: LD_INT 22
5303: EQUAL
5304: IFFALSE 5314
// sTeleport := true ;
5306: LD_ADDR_EXP 60
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// if p3 = 23 then
5314: LD_VAR 0 3
5318: PUSH
5319: LD_INT 23
5321: EQUAL
5322: IFFALSE 5332
// sOilTower := true ;
5324: LD_ADDR_EXP 62
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// if p3 = 24 then
5332: LD_VAR 0 3
5336: PUSH
5337: LD_INT 24
5339: EQUAL
5340: IFFALSE 5350
// sShovel := true ;
5342: LD_ADDR_EXP 63
5346: PUSH
5347: LD_INT 1
5349: ST_TO_ADDR
// if p3 = 25 then
5350: LD_VAR 0 3
5354: PUSH
5355: LD_INT 25
5357: EQUAL
5358: IFFALSE 5368
// sSheik := true ;
5360: LD_ADDR_EXP 64
5364: PUSH
5365: LD_INT 1
5367: ST_TO_ADDR
// if p3 = 26 then
5368: LD_VAR 0 3
5372: PUSH
5373: LD_INT 26
5375: EQUAL
5376: IFFALSE 5386
// sEarthquake := true ;
5378: LD_ADDR_EXP 66
5382: PUSH
5383: LD_INT 1
5385: ST_TO_ADDR
// if p3 = 27 then
5386: LD_VAR 0 3
5390: PUSH
5391: LD_INT 27
5393: EQUAL
5394: IFFALSE 5404
// sAI := true ;
5396: LD_ADDR_EXP 67
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// if p3 = 28 then
5404: LD_VAR 0 3
5408: PUSH
5409: LD_INT 28
5411: EQUAL
5412: IFFALSE 5422
// sCargo := true ;
5414: LD_ADDR_EXP 70
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// if p3 = 29 then
5422: LD_VAR 0 3
5426: PUSH
5427: LD_INT 29
5429: EQUAL
5430: IFFALSE 5440
// sDLaser := true ;
5432: LD_ADDR_EXP 71
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// if p3 = 30 then
5440: LD_VAR 0 3
5444: PUSH
5445: LD_INT 30
5447: EQUAL
5448: IFFALSE 5458
// sExchange := true ;
5450: LD_ADDR_EXP 72
5454: PUSH
5455: LD_INT 1
5457: ST_TO_ADDR
// if p3 = 31 then
5458: LD_VAR 0 3
5462: PUSH
5463: LD_INT 31
5465: EQUAL
5466: IFFALSE 5476
// sFac := true ;
5468: LD_ADDR_EXP 73
5472: PUSH
5473: LD_INT 1
5475: ST_TO_ADDR
// if p3 = 32 then
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 32
5483: EQUAL
5484: IFFALSE 5494
// sPower := true ;
5486: LD_ADDR_EXP 74
5490: PUSH
5491: LD_INT 1
5493: ST_TO_ADDR
// if p3 = 33 then
5494: LD_VAR 0 3
5498: PUSH
5499: LD_INT 33
5501: EQUAL
5502: IFFALSE 5512
// sRandom := true ;
5504: LD_ADDR_EXP 75
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// if p3 = 34 then
5512: LD_VAR 0 3
5516: PUSH
5517: LD_INT 34
5519: EQUAL
5520: IFFALSE 5530
// sShield := true ;
5522: LD_ADDR_EXP 76
5526: PUSH
5527: LD_INT 1
5529: ST_TO_ADDR
// if p3 = 35 then
5530: LD_VAR 0 3
5534: PUSH
5535: LD_INT 35
5537: EQUAL
5538: IFFALSE 5548
// sTime := true ;
5540: LD_ADDR_EXP 77
5544: PUSH
5545: LD_INT 1
5547: ST_TO_ADDR
// if p3 = 36 then
5548: LD_VAR 0 3
5552: PUSH
5553: LD_INT 36
5555: EQUAL
5556: IFFALSE 5566
// sTools := true ;
5558: LD_ADDR_EXP 78
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// if p3 = 101 then
5566: LD_VAR 0 3
5570: PUSH
5571: LD_INT 101
5573: EQUAL
5574: IFFALSE 5584
// sSold := true ;
5576: LD_ADDR_EXP 43
5580: PUSH
5581: LD_INT 1
5583: ST_TO_ADDR
// if p3 = 102 then
5584: LD_VAR 0 3
5588: PUSH
5589: LD_INT 102
5591: EQUAL
5592: IFFALSE 5602
// sDiff := true ;
5594: LD_ADDR_EXP 44
5598: PUSH
5599: LD_INT 1
5601: ST_TO_ADDR
// if p3 = 103 then
5602: LD_VAR 0 3
5606: PUSH
5607: LD_INT 103
5609: EQUAL
5610: IFFALSE 5620
// sFog := true ;
5612: LD_ADDR_EXP 47
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// if p3 = 104 then
5620: LD_VAR 0 3
5624: PUSH
5625: LD_INT 104
5627: EQUAL
5628: IFFALSE 5638
// sReset := true ;
5630: LD_ADDR_EXP 48
5634: PUSH
5635: LD_INT 1
5637: ST_TO_ADDR
// if p3 = 105 then
5638: LD_VAR 0 3
5642: PUSH
5643: LD_INT 105
5645: EQUAL
5646: IFFALSE 5656
// sSun := true ;
5648: LD_ADDR_EXP 49
5652: PUSH
5653: LD_INT 1
5655: ST_TO_ADDR
// if p3 = 106 then
5656: LD_VAR 0 3
5660: PUSH
5661: LD_INT 106
5663: EQUAL
5664: IFFALSE 5674
// sTiger := true ;
5666: LD_ADDR_EXP 45
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// if p3 = 107 then
5674: LD_VAR 0 3
5678: PUSH
5679: LD_INT 107
5681: EQUAL
5682: IFFALSE 5692
// sBomb := true ;
5684: LD_ADDR_EXP 46
5688: PUSH
5689: LD_INT 1
5691: ST_TO_ADDR
// if p3 = 108 then
5692: LD_VAR 0 3
5696: PUSH
5697: LD_INT 108
5699: EQUAL
5700: IFFALSE 5710
// sWound := true ;
5702: LD_ADDR_EXP 54
5706: PUSH
5707: LD_INT 1
5709: ST_TO_ADDR
// if p3 = 109 then
5710: LD_VAR 0 3
5714: PUSH
5715: LD_INT 109
5717: EQUAL
5718: IFFALSE 5728
// sBetray := true ;
5720: LD_ADDR_EXP 58
5724: PUSH
5725: LD_INT 1
5727: ST_TO_ADDR
// if p3 = 110 then
5728: LD_VAR 0 3
5732: PUSH
5733: LD_INT 110
5735: EQUAL
5736: IFFALSE 5746
// sContamin := true ;
5738: LD_ADDR_EXP 59
5742: PUSH
5743: LD_INT 1
5745: ST_TO_ADDR
// if p3 = 111 then
5746: LD_VAR 0 3
5750: PUSH
5751: LD_INT 111
5753: EQUAL
5754: IFFALSE 5764
// sOil := true ;
5756: LD_ADDR_EXP 61
5760: PUSH
5761: LD_INT 1
5763: ST_TO_ADDR
// if p3 = 112 then
5764: LD_VAR 0 3
5768: PUSH
5769: LD_INT 112
5771: EQUAL
5772: IFFALSE 5782
// sStu := true ;
5774: LD_ADDR_EXP 65
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// if p3 = 113 then
5782: LD_VAR 0 3
5786: PUSH
5787: LD_INT 113
5789: EQUAL
5790: IFFALSE 5800
// sBazooka := true ;
5792: LD_ADDR_EXP 68
5796: PUSH
5797: LD_INT 1
5799: ST_TO_ADDR
// if p3 = 114 then
5800: LD_VAR 0 3
5804: PUSH
5805: LD_INT 114
5807: EQUAL
5808: IFFALSE 5818
// sMortar := true ;
5810: LD_ADDR_EXP 69
5814: PUSH
5815: LD_INT 1
5817: ST_TO_ADDR
// if p3 = 115 then
5818: LD_VAR 0 3
5822: PUSH
5823: LD_INT 115
5825: EQUAL
5826: IFFALSE 5836
// sRanger := true ;
5828: LD_ADDR_EXP 79
5832: PUSH
5833: LD_INT 1
5835: ST_TO_ADDR
// if p3 = 116 then
5836: LD_VAR 0 3
5840: PUSH
5841: LD_INT 116
5843: EQUAL
5844: IFFALSE 5854
// sComputer := true ;
5846: LD_ADDR_EXP 80
5850: PUSH
5851: LD_INT 1
5853: ST_TO_ADDR
// if p3 = 117 then
5854: LD_VAR 0 3
5858: PUSH
5859: LD_INT 117
5861: EQUAL
5862: IFFALSE 5872
// s30 := true ;
5864: LD_ADDR_EXP 81
5868: PUSH
5869: LD_INT 1
5871: ST_TO_ADDR
// if p3 = 118 then
5872: LD_VAR 0 3
5876: PUSH
5877: LD_INT 118
5879: EQUAL
5880: IFFALSE 5890
// s60 := true ;
5882: LD_ADDR_EXP 82
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// end ; if p2 = 101 then
5890: LD_VAR 0 2
5894: PUSH
5895: LD_INT 101
5897: EQUAL
5898: IFFALSE 6026
// begin case p3 of 1 :
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 1
5907: DOUBLE
5908: EQUAL
5909: IFTRUE 5913
5911: GO 5920
5913: POP
// hHackUnlimitedResources ; 2 :
5914: CALL 18124 0 0
5918: GO 6026
5920: LD_INT 2
5922: DOUBLE
5923: EQUAL
5924: IFTRUE 5928
5926: GO 5935
5928: POP
// hHackSetLevel10 ; 3 :
5929: CALL 18257 0 0
5933: GO 6026
5935: LD_INT 3
5937: DOUBLE
5938: EQUAL
5939: IFTRUE 5943
5941: GO 5950
5943: POP
// hHackSetLevel10YourUnits ; 4 :
5944: CALL 18342 0 0
5948: GO 6026
5950: LD_INT 4
5952: DOUBLE
5953: EQUAL
5954: IFTRUE 5958
5956: GO 5965
5958: POP
// hHackInvincible ; 5 :
5959: CALL 18790 0 0
5963: GO 6026
5965: LD_INT 5
5967: DOUBLE
5968: EQUAL
5969: IFTRUE 5973
5971: GO 5980
5973: POP
// hHackInvisible ; 6 :
5974: CALL 18901 0 0
5978: GO 6026
5980: LD_INT 6
5982: DOUBLE
5983: EQUAL
5984: IFTRUE 5988
5986: GO 5995
5988: POP
// hHackChangeYourSide ; 7 :
5989: CALL 18958 0 0
5993: GO 6026
5995: LD_INT 7
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6010
6003: POP
// hHackChangeUnitSide ; 8 :
6004: CALL 19000 0 0
6008: GO 6026
6010: LD_INT 8
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6025
6018: POP
// hHackFog ; end ;
6019: CALL 19101 0 0
6023: GO 6026
6025: POP
// end ; end ;
6026: LD_VAR 0 7
6030: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
6031: GO 6033
6033: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6034: LD_STRING initStreamRollete();
6036: PPUSH
6037: CALL_OW 559
// InitStreamMode ;
6041: CALL 6053 0 0
// DefineStreamItems ( false ) ;
6045: LD_INT 0
6047: PPUSH
6048: CALL 6517 0 1
// end ;
6052: END
// function InitStreamMode ; begin
6053: LD_INT 0
6055: PPUSH
// streamModeActive := false ;
6056: LD_ADDR_EXP 26
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// normalCounter := 36 ;
6064: LD_ADDR_EXP 27
6068: PUSH
6069: LD_INT 36
6071: ST_TO_ADDR
// hardcoreCounter := 18 ;
6072: LD_ADDR_EXP 28
6076: PUSH
6077: LD_INT 18
6079: ST_TO_ADDR
// sRocket := false ;
6080: LD_ADDR_EXP 31
6084: PUSH
6085: LD_INT 0
6087: ST_TO_ADDR
// sSpeed := false ;
6088: LD_ADDR_EXP 30
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// sEngine := false ;
6096: LD_ADDR_EXP 32
6100: PUSH
6101: LD_INT 0
6103: ST_TO_ADDR
// sSpec := false ;
6104: LD_ADDR_EXP 29
6108: PUSH
6109: LD_INT 0
6111: ST_TO_ADDR
// sLevel := false ;
6112: LD_ADDR_EXP 33
6116: PUSH
6117: LD_INT 0
6119: ST_TO_ADDR
// sArmoury := false ;
6120: LD_ADDR_EXP 34
6124: PUSH
6125: LD_INT 0
6127: ST_TO_ADDR
// sRadar := false ;
6128: LD_ADDR_EXP 35
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// sBunker := false ;
6136: LD_ADDR_EXP 36
6140: PUSH
6141: LD_INT 0
6143: ST_TO_ADDR
// sHack := false ;
6144: LD_ADDR_EXP 37
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// sFire := false ;
6152: LD_ADDR_EXP 38
6156: PUSH
6157: LD_INT 0
6159: ST_TO_ADDR
// sRefresh := false ;
6160: LD_ADDR_EXP 39
6164: PUSH
6165: LD_INT 0
6167: ST_TO_ADDR
// sExp := false ;
6168: LD_ADDR_EXP 40
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// sDepot := false ;
6176: LD_ADDR_EXP 41
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// sFlag := false ;
6184: LD_ADDR_EXP 42
6188: PUSH
6189: LD_INT 0
6191: ST_TO_ADDR
// sKamikadze := false ;
6192: LD_ADDR_EXP 50
6196: PUSH
6197: LD_INT 0
6199: ST_TO_ADDR
// sTroll := false ;
6200: LD_ADDR_EXP 51
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// sSlow := false ;
6208: LD_ADDR_EXP 52
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// sLack := false ;
6216: LD_ADDR_EXP 53
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// sTank := false ;
6224: LD_ADDR_EXP 55
6228: PUSH
6229: LD_INT 0
6231: ST_TO_ADDR
// sRemote := false ;
6232: LD_ADDR_EXP 56
6236: PUSH
6237: LD_INT 0
6239: ST_TO_ADDR
// sPowell := false ;
6240: LD_ADDR_EXP 57
6244: PUSH
6245: LD_INT 0
6247: ST_TO_ADDR
// sTeleport := false ;
6248: LD_ADDR_EXP 60
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// sOilTower := false ;
6256: LD_ADDR_EXP 62
6260: PUSH
6261: LD_INT 0
6263: ST_TO_ADDR
// sShovel := false ;
6264: LD_ADDR_EXP 63
6268: PUSH
6269: LD_INT 0
6271: ST_TO_ADDR
// sSheik := false ;
6272: LD_ADDR_EXP 64
6276: PUSH
6277: LD_INT 0
6279: ST_TO_ADDR
// sEarthquake := false ;
6280: LD_ADDR_EXP 66
6284: PUSH
6285: LD_INT 0
6287: ST_TO_ADDR
// sAI := false ;
6288: LD_ADDR_EXP 67
6292: PUSH
6293: LD_INT 0
6295: ST_TO_ADDR
// sCargo := false ;
6296: LD_ADDR_EXP 70
6300: PUSH
6301: LD_INT 0
6303: ST_TO_ADDR
// sDLaser := false ;
6304: LD_ADDR_EXP 71
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// sExchange := false ;
6312: LD_ADDR_EXP 72
6316: PUSH
6317: LD_INT 0
6319: ST_TO_ADDR
// sFac := false ;
6320: LD_ADDR_EXP 73
6324: PUSH
6325: LD_INT 0
6327: ST_TO_ADDR
// sPower := false ;
6328: LD_ADDR_EXP 74
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// sRandom := false ;
6336: LD_ADDR_EXP 75
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// sShield := false ;
6344: LD_ADDR_EXP 76
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// sTime := false ;
6352: LD_ADDR_EXP 77
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// sTools := false ;
6360: LD_ADDR_EXP 78
6364: PUSH
6365: LD_INT 0
6367: ST_TO_ADDR
// sSold := false ;
6368: LD_ADDR_EXP 43
6372: PUSH
6373: LD_INT 0
6375: ST_TO_ADDR
// sDiff := false ;
6376: LD_ADDR_EXP 44
6380: PUSH
6381: LD_INT 0
6383: ST_TO_ADDR
// sFog := false ;
6384: LD_ADDR_EXP 47
6388: PUSH
6389: LD_INT 0
6391: ST_TO_ADDR
// sReset := false ;
6392: LD_ADDR_EXP 48
6396: PUSH
6397: LD_INT 0
6399: ST_TO_ADDR
// sSun := false ;
6400: LD_ADDR_EXP 49
6404: PUSH
6405: LD_INT 0
6407: ST_TO_ADDR
// sTiger := false ;
6408: LD_ADDR_EXP 45
6412: PUSH
6413: LD_INT 0
6415: ST_TO_ADDR
// sBomb := false ;
6416: LD_ADDR_EXP 46
6420: PUSH
6421: LD_INT 0
6423: ST_TO_ADDR
// sWound := false ;
6424: LD_ADDR_EXP 54
6428: PUSH
6429: LD_INT 0
6431: ST_TO_ADDR
// sBetray := false ;
6432: LD_ADDR_EXP 58
6436: PUSH
6437: LD_INT 0
6439: ST_TO_ADDR
// sContamin := false ;
6440: LD_ADDR_EXP 59
6444: PUSH
6445: LD_INT 0
6447: ST_TO_ADDR
// sOil := false ;
6448: LD_ADDR_EXP 61
6452: PUSH
6453: LD_INT 0
6455: ST_TO_ADDR
// sStu := false ;
6456: LD_ADDR_EXP 65
6460: PUSH
6461: LD_INT 0
6463: ST_TO_ADDR
// sBazooka := false ;
6464: LD_ADDR_EXP 68
6468: PUSH
6469: LD_INT 0
6471: ST_TO_ADDR
// sMortar := false ;
6472: LD_ADDR_EXP 69
6476: PUSH
6477: LD_INT 0
6479: ST_TO_ADDR
// sRanger := false ;
6480: LD_ADDR_EXP 79
6484: PUSH
6485: LD_INT 0
6487: ST_TO_ADDR
// sComputer := false ;
6488: LD_ADDR_EXP 80
6492: PUSH
6493: LD_INT 0
6495: ST_TO_ADDR
// s30 := false ;
6496: LD_ADDR_EXP 81
6500: PUSH
6501: LD_INT 0
6503: ST_TO_ADDR
// s60 := false ;
6504: LD_ADDR_EXP 82
6508: PUSH
6509: LD_INT 0
6511: ST_TO_ADDR
// end ;
6512: LD_VAR 0 1
6516: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6517: LD_INT 0
6519: PPUSH
6520: PPUSH
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
6525: PPUSH
// result := [ ] ;
6526: LD_ADDR_VAR 0 2
6530: PUSH
6531: EMPTY
6532: ST_TO_ADDR
// if campaign_id = 1 then
6533: LD_OWVAR 69
6537: PUSH
6538: LD_INT 1
6540: EQUAL
6541: IFFALSE 9707
// begin case mission_number of 1 :
6543: LD_OWVAR 70
6547: PUSH
6548: LD_INT 1
6550: DOUBLE
6551: EQUAL
6552: IFTRUE 6556
6554: GO 6632
6556: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6557: LD_ADDR_VAR 0 2
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 4
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: LD_INT 15
6576: PUSH
6577: LD_INT 16
6579: PUSH
6580: LD_INT 22
6582: PUSH
6583: LD_INT 23
6585: PUSH
6586: LD_INT 26
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 101
6602: PUSH
6603: LD_INT 102
6605: PUSH
6606: LD_INT 106
6608: PUSH
6609: LD_INT 116
6611: PUSH
6612: LD_INT 117
6614: PUSH
6615: LD_INT 118
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 9705
6632: LD_INT 2
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6724
6640: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6641: LD_ADDR_VAR 0 2
6645: PUSH
6646: LD_INT 2
6648: PUSH
6649: LD_INT 4
6651: PUSH
6652: LD_INT 11
6654: PUSH
6655: LD_INT 12
6657: PUSH
6658: LD_INT 15
6660: PUSH
6661: LD_INT 16
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_INT 23
6669: PUSH
6670: LD_INT 26
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 101
6686: PUSH
6687: LD_INT 102
6689: PUSH
6690: LD_INT 105
6692: PUSH
6693: LD_INT 106
6695: PUSH
6696: LD_INT 108
6698: PUSH
6699: LD_INT 116
6701: PUSH
6702: LD_INT 117
6704: PUSH
6705: LD_INT 118
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: ST_TO_ADDR
6722: GO 9705
6724: LD_INT 3
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6820
6732: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6733: LD_ADDR_VAR 0 2
6737: PUSH
6738: LD_INT 2
6740: PUSH
6741: LD_INT 4
6743: PUSH
6744: LD_INT 5
6746: PUSH
6747: LD_INT 11
6749: PUSH
6750: LD_INT 12
6752: PUSH
6753: LD_INT 15
6755: PUSH
6756: LD_INT 16
6758: PUSH
6759: LD_INT 22
6761: PUSH
6762: LD_INT 26
6764: PUSH
6765: LD_INT 36
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 101
6782: PUSH
6783: LD_INT 102
6785: PUSH
6786: LD_INT 105
6788: PUSH
6789: LD_INT 106
6791: PUSH
6792: LD_INT 108
6794: PUSH
6795: LD_INT 116
6797: PUSH
6798: LD_INT 117
6800: PUSH
6801: LD_INT 118
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 9705
6820: LD_INT 4
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6924
6828: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6829: LD_ADDR_VAR 0 2
6833: PUSH
6834: LD_INT 2
6836: PUSH
6837: LD_INT 4
6839: PUSH
6840: LD_INT 5
6842: PUSH
6843: LD_INT 8
6845: PUSH
6846: LD_INT 11
6848: PUSH
6849: LD_INT 12
6851: PUSH
6852: LD_INT 15
6854: PUSH
6855: LD_INT 16
6857: PUSH
6858: LD_INT 22
6860: PUSH
6861: LD_INT 23
6863: PUSH
6864: LD_INT 26
6866: PUSH
6867: LD_INT 36
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 101
6886: PUSH
6887: LD_INT 102
6889: PUSH
6890: LD_INT 105
6892: PUSH
6893: LD_INT 106
6895: PUSH
6896: LD_INT 108
6898: PUSH
6899: LD_INT 116
6901: PUSH
6902: LD_INT 117
6904: PUSH
6905: LD_INT 118
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 9705
6924: LD_INT 5
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 7044
6932: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: LD_INT 4
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: LD_INT 6
6949: PUSH
6950: LD_INT 8
6952: PUSH
6953: LD_INT 11
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: LD_INT 15
6961: PUSH
6962: LD_INT 16
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_INT 23
6970: PUSH
6971: LD_INT 25
6973: PUSH
6974: LD_INT 26
6976: PUSH
6977: LD_INT 36
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 101
6998: PUSH
6999: LD_INT 102
7001: PUSH
7002: LD_INT 105
7004: PUSH
7005: LD_INT 106
7007: PUSH
7008: LD_INT 108
7010: PUSH
7011: LD_INT 109
7013: PUSH
7014: LD_INT 112
7016: PUSH
7017: LD_INT 116
7019: PUSH
7020: LD_INT 117
7022: PUSH
7023: LD_INT 118
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
7042: GO 9705
7044: LD_INT 6
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7184
7052: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 4
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: LD_INT 6
7069: PUSH
7070: LD_INT 8
7072: PUSH
7073: LD_INT 11
7075: PUSH
7076: LD_INT 12
7078: PUSH
7079: LD_INT 15
7081: PUSH
7082: LD_INT 16
7084: PUSH
7085: LD_INT 20
7087: PUSH
7088: LD_INT 21
7090: PUSH
7091: LD_INT 22
7093: PUSH
7094: LD_INT 23
7096: PUSH
7097: LD_INT 25
7099: PUSH
7100: LD_INT 26
7102: PUSH
7103: LD_INT 30
7105: PUSH
7106: LD_INT 31
7108: PUSH
7109: LD_INT 32
7111: PUSH
7112: LD_INT 36
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 101
7138: PUSH
7139: LD_INT 102
7141: PUSH
7142: LD_INT 105
7144: PUSH
7145: LD_INT 106
7147: PUSH
7148: LD_INT 108
7150: PUSH
7151: LD_INT 109
7153: PUSH
7154: LD_INT 112
7156: PUSH
7157: LD_INT 116
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 118
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 9705
7184: LD_INT 7
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7304
7192: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7193: LD_ADDR_VAR 0 2
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: LD_INT 5
7206: PUSH
7207: LD_INT 7
7209: PUSH
7210: LD_INT 11
7212: PUSH
7213: LD_INT 12
7215: PUSH
7216: LD_INT 15
7218: PUSH
7219: LD_INT 16
7221: PUSH
7222: LD_INT 20
7224: PUSH
7225: LD_INT 21
7227: PUSH
7228: LD_INT 22
7230: PUSH
7231: LD_INT 23
7233: PUSH
7234: LD_INT 25
7236: PUSH
7237: LD_INT 26
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 101
7258: PUSH
7259: LD_INT 102
7261: PUSH
7262: LD_INT 103
7264: PUSH
7265: LD_INT 105
7267: PUSH
7268: LD_INT 106
7270: PUSH
7271: LD_INT 108
7273: PUSH
7274: LD_INT 112
7276: PUSH
7277: LD_INT 116
7279: PUSH
7280: LD_INT 117
7282: PUSH
7283: LD_INT 118
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: ST_TO_ADDR
7302: GO 9705
7304: LD_INT 8
7306: DOUBLE
7307: EQUAL
7308: IFTRUE 7312
7310: GO 7452
7312: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 2
7320: PUSH
7321: LD_INT 4
7323: PUSH
7324: LD_INT 5
7326: PUSH
7327: LD_INT 6
7329: PUSH
7330: LD_INT 7
7332: PUSH
7333: LD_INT 8
7335: PUSH
7336: LD_INT 11
7338: PUSH
7339: LD_INT 12
7341: PUSH
7342: LD_INT 15
7344: PUSH
7345: LD_INT 16
7347: PUSH
7348: LD_INT 20
7350: PUSH
7351: LD_INT 21
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_INT 23
7359: PUSH
7360: LD_INT 25
7362: PUSH
7363: LD_INT 26
7365: PUSH
7366: LD_INT 30
7368: PUSH
7369: LD_INT 31
7371: PUSH
7372: LD_INT 32
7374: PUSH
7375: LD_INT 36
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: LD_INT 101
7402: PUSH
7403: LD_INT 102
7405: PUSH
7406: LD_INT 103
7408: PUSH
7409: LD_INT 105
7411: PUSH
7412: LD_INT 106
7414: PUSH
7415: LD_INT 108
7417: PUSH
7418: LD_INT 109
7420: PUSH
7421: LD_INT 112
7423: PUSH
7424: LD_INT 116
7426: PUSH
7427: LD_INT 117
7429: PUSH
7430: LD_INT 118
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: ST_TO_ADDR
7450: GO 9705
7452: LD_INT 9
7454: DOUBLE
7455: EQUAL
7456: IFTRUE 7460
7458: GO 7608
7460: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7461: LD_ADDR_VAR 0 2
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 4
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 6
7477: PUSH
7478: LD_INT 7
7480: PUSH
7481: LD_INT 8
7483: PUSH
7484: LD_INT 11
7486: PUSH
7487: LD_INT 12
7489: PUSH
7490: LD_INT 15
7492: PUSH
7493: LD_INT 16
7495: PUSH
7496: LD_INT 20
7498: PUSH
7499: LD_INT 21
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_INT 23
7507: PUSH
7508: LD_INT 25
7510: PUSH
7511: LD_INT 26
7513: PUSH
7514: LD_INT 28
7516: PUSH
7517: LD_INT 30
7519: PUSH
7520: LD_INT 31
7522: PUSH
7523: LD_INT 32
7525: PUSH
7526: LD_INT 36
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 101
7554: PUSH
7555: LD_INT 102
7557: PUSH
7558: LD_INT 103
7560: PUSH
7561: LD_INT 105
7563: PUSH
7564: LD_INT 106
7566: PUSH
7567: LD_INT 108
7569: PUSH
7570: LD_INT 109
7572: PUSH
7573: LD_INT 112
7575: PUSH
7576: LD_INT 114
7578: PUSH
7579: LD_INT 116
7581: PUSH
7582: LD_INT 117
7584: PUSH
7585: LD_INT 118
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: ST_TO_ADDR
7606: GO 9705
7608: LD_INT 10
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7812
7616: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 4
7627: PUSH
7628: LD_INT 5
7630: PUSH
7631: LD_INT 6
7633: PUSH
7634: LD_INT 7
7636: PUSH
7637: LD_INT 8
7639: PUSH
7640: LD_INT 9
7642: PUSH
7643: LD_INT 10
7645: PUSH
7646: LD_INT 11
7648: PUSH
7649: LD_INT 12
7651: PUSH
7652: LD_INT 13
7654: PUSH
7655: LD_INT 14
7657: PUSH
7658: LD_INT 15
7660: PUSH
7661: LD_INT 16
7663: PUSH
7664: LD_INT 17
7666: PUSH
7667: LD_INT 18
7669: PUSH
7670: LD_INT 19
7672: PUSH
7673: LD_INT 20
7675: PUSH
7676: LD_INT 21
7678: PUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 23
7684: PUSH
7685: LD_INT 24
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 26
7693: PUSH
7694: LD_INT 28
7696: PUSH
7697: LD_INT 30
7699: PUSH
7700: LD_INT 31
7702: PUSH
7703: LD_INT 32
7705: PUSH
7706: LD_INT 36
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 101
7742: PUSH
7743: LD_INT 102
7745: PUSH
7746: LD_INT 103
7748: PUSH
7749: LD_INT 104
7751: PUSH
7752: LD_INT 105
7754: PUSH
7755: LD_INT 106
7757: PUSH
7758: LD_INT 107
7760: PUSH
7761: LD_INT 108
7763: PUSH
7764: LD_INT 109
7766: PUSH
7767: LD_INT 110
7769: PUSH
7770: LD_INT 111
7772: PUSH
7773: LD_INT 112
7775: PUSH
7776: LD_INT 114
7778: PUSH
7779: LD_INT 116
7781: PUSH
7782: LD_INT 117
7784: PUSH
7785: LD_INT 118
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: ST_TO_ADDR
7810: GO 9705
7812: LD_INT 11
7814: DOUBLE
7815: EQUAL
7816: IFTRUE 7820
7818: GO 8024
7820: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7821: LD_ADDR_VAR 0 2
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 3
7831: PUSH
7832: LD_INT 4
7834: PUSH
7835: LD_INT 5
7837: PUSH
7838: LD_INT 6
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: LD_INT 8
7846: PUSH
7847: LD_INT 9
7849: PUSH
7850: LD_INT 10
7852: PUSH
7853: LD_INT 11
7855: PUSH
7856: LD_INT 12
7858: PUSH
7859: LD_INT 13
7861: PUSH
7862: LD_INT 14
7864: PUSH
7865: LD_INT 15
7867: PUSH
7868: LD_INT 16
7870: PUSH
7871: LD_INT 17
7873: PUSH
7874: LD_INT 18
7876: PUSH
7877: LD_INT 19
7879: PUSH
7880: LD_INT 20
7882: PUSH
7883: LD_INT 21
7885: PUSH
7886: LD_INT 22
7888: PUSH
7889: LD_INT 23
7891: PUSH
7892: LD_INT 24
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 26
7900: PUSH
7901: LD_INT 28
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 31
7909: PUSH
7910: LD_INT 32
7912: PUSH
7913: LD_INT 34
7915: PUSH
7916: LD_INT 36
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: PUSH
7952: LD_INT 101
7954: PUSH
7955: LD_INT 102
7957: PUSH
7958: LD_INT 103
7960: PUSH
7961: LD_INT 104
7963: PUSH
7964: LD_INT 105
7966: PUSH
7967: LD_INT 106
7969: PUSH
7970: LD_INT 107
7972: PUSH
7973: LD_INT 108
7975: PUSH
7976: LD_INT 109
7978: PUSH
7979: LD_INT 110
7981: PUSH
7982: LD_INT 111
7984: PUSH
7985: LD_INT 112
7987: PUSH
7988: LD_INT 114
7990: PUSH
7991: LD_INT 116
7993: PUSH
7994: LD_INT 117
7996: PUSH
7997: LD_INT 118
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: ST_TO_ADDR
8022: GO 9705
8024: LD_INT 12
8026: DOUBLE
8027: EQUAL
8028: IFTRUE 8032
8030: GO 8252
8032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8033: LD_ADDR_VAR 0 2
8037: PUSH
8038: LD_INT 1
8040: PUSH
8041: LD_INT 2
8043: PUSH
8044: LD_INT 3
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: LD_INT 5
8052: PUSH
8053: LD_INT 6
8055: PUSH
8056: LD_INT 7
8058: PUSH
8059: LD_INT 8
8061: PUSH
8062: LD_INT 9
8064: PUSH
8065: LD_INT 10
8067: PUSH
8068: LD_INT 11
8070: PUSH
8071: LD_INT 12
8073: PUSH
8074: LD_INT 13
8076: PUSH
8077: LD_INT 14
8079: PUSH
8080: LD_INT 15
8082: PUSH
8083: LD_INT 16
8085: PUSH
8086: LD_INT 17
8088: PUSH
8089: LD_INT 18
8091: PUSH
8092: LD_INT 19
8094: PUSH
8095: LD_INT 20
8097: PUSH
8098: LD_INT 21
8100: PUSH
8101: LD_INT 22
8103: PUSH
8104: LD_INT 23
8106: PUSH
8107: LD_INT 24
8109: PUSH
8110: LD_INT 25
8112: PUSH
8113: LD_INT 26
8115: PUSH
8116: LD_INT 27
8118: PUSH
8119: LD_INT 28
8121: PUSH
8122: LD_INT 30
8124: PUSH
8125: LD_INT 31
8127: PUSH
8128: LD_INT 32
8130: PUSH
8131: LD_INT 33
8133: PUSH
8134: LD_INT 34
8136: PUSH
8137: LD_INT 36
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 101
8178: PUSH
8179: LD_INT 102
8181: PUSH
8182: LD_INT 103
8184: PUSH
8185: LD_INT 104
8187: PUSH
8188: LD_INT 105
8190: PUSH
8191: LD_INT 106
8193: PUSH
8194: LD_INT 107
8196: PUSH
8197: LD_INT 108
8199: PUSH
8200: LD_INT 109
8202: PUSH
8203: LD_INT 110
8205: PUSH
8206: LD_INT 111
8208: PUSH
8209: LD_INT 112
8211: PUSH
8212: LD_INT 113
8214: PUSH
8215: LD_INT 114
8217: PUSH
8218: LD_INT 116
8220: PUSH
8221: LD_INT 117
8223: PUSH
8224: LD_INT 118
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: ST_TO_ADDR
8250: GO 9705
8252: LD_INT 13
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8468
8260: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8261: LD_ADDR_VAR 0 2
8265: PUSH
8266: LD_INT 1
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: LD_INT 4
8277: PUSH
8278: LD_INT 5
8280: PUSH
8281: LD_INT 8
8283: PUSH
8284: LD_INT 9
8286: PUSH
8287: LD_INT 10
8289: PUSH
8290: LD_INT 11
8292: PUSH
8293: LD_INT 12
8295: PUSH
8296: LD_INT 14
8298: PUSH
8299: LD_INT 15
8301: PUSH
8302: LD_INT 16
8304: PUSH
8305: LD_INT 17
8307: PUSH
8308: LD_INT 18
8310: PUSH
8311: LD_INT 19
8313: PUSH
8314: LD_INT 20
8316: PUSH
8317: LD_INT 21
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_INT 23
8325: PUSH
8326: LD_INT 24
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 26
8334: PUSH
8335: LD_INT 27
8337: PUSH
8338: LD_INT 28
8340: PUSH
8341: LD_INT 30
8343: PUSH
8344: LD_INT 31
8346: PUSH
8347: LD_INT 32
8349: PUSH
8350: LD_INT 33
8352: PUSH
8353: LD_INT 34
8355: PUSH
8356: LD_INT 36
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 101
8394: PUSH
8395: LD_INT 102
8397: PUSH
8398: LD_INT 103
8400: PUSH
8401: LD_INT 104
8403: PUSH
8404: LD_INT 105
8406: PUSH
8407: LD_INT 106
8409: PUSH
8410: LD_INT 107
8412: PUSH
8413: LD_INT 108
8415: PUSH
8416: LD_INT 109
8418: PUSH
8419: LD_INT 110
8421: PUSH
8422: LD_INT 111
8424: PUSH
8425: LD_INT 112
8427: PUSH
8428: LD_INT 113
8430: PUSH
8431: LD_INT 114
8433: PUSH
8434: LD_INT 116
8436: PUSH
8437: LD_INT 117
8439: PUSH
8440: LD_INT 118
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: ST_TO_ADDR
8466: GO 9705
8468: LD_INT 14
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8700
8476: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8477: LD_ADDR_VAR 0 2
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: LD_INT 2
8487: PUSH
8488: LD_INT 3
8490: PUSH
8491: LD_INT 4
8493: PUSH
8494: LD_INT 5
8496: PUSH
8497: LD_INT 6
8499: PUSH
8500: LD_INT 7
8502: PUSH
8503: LD_INT 8
8505: PUSH
8506: LD_INT 9
8508: PUSH
8509: LD_INT 10
8511: PUSH
8512: LD_INT 11
8514: PUSH
8515: LD_INT 12
8517: PUSH
8518: LD_INT 13
8520: PUSH
8521: LD_INT 14
8523: PUSH
8524: LD_INT 15
8526: PUSH
8527: LD_INT 16
8529: PUSH
8530: LD_INT 17
8532: PUSH
8533: LD_INT 18
8535: PUSH
8536: LD_INT 19
8538: PUSH
8539: LD_INT 20
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_INT 23
8550: PUSH
8551: LD_INT 24
8553: PUSH
8554: LD_INT 25
8556: PUSH
8557: LD_INT 26
8559: PUSH
8560: LD_INT 27
8562: PUSH
8563: LD_INT 28
8565: PUSH
8566: LD_INT 29
8568: PUSH
8569: LD_INT 30
8571: PUSH
8572: LD_INT 31
8574: PUSH
8575: LD_INT 32
8577: PUSH
8578: LD_INT 33
8580: PUSH
8581: LD_INT 34
8583: PUSH
8584: LD_INT 36
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 101
8626: PUSH
8627: LD_INT 102
8629: PUSH
8630: LD_INT 103
8632: PUSH
8633: LD_INT 104
8635: PUSH
8636: LD_INT 105
8638: PUSH
8639: LD_INT 106
8641: PUSH
8642: LD_INT 107
8644: PUSH
8645: LD_INT 108
8647: PUSH
8648: LD_INT 109
8650: PUSH
8651: LD_INT 110
8653: PUSH
8654: LD_INT 111
8656: PUSH
8657: LD_INT 112
8659: PUSH
8660: LD_INT 113
8662: PUSH
8663: LD_INT 114
8665: PUSH
8666: LD_INT 116
8668: PUSH
8669: LD_INT 117
8671: PUSH
8672: LD_INT 118
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: ST_TO_ADDR
8698: GO 9705
8700: LD_INT 15
8702: DOUBLE
8703: EQUAL
8704: IFTRUE 8708
8706: GO 8932
8708: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8709: LD_ADDR_VAR 0 2
8713: PUSH
8714: LD_INT 1
8716: PUSH
8717: LD_INT 2
8719: PUSH
8720: LD_INT 3
8722: PUSH
8723: LD_INT 4
8725: PUSH
8726: LD_INT 5
8728: PUSH
8729: LD_INT 6
8731: PUSH
8732: LD_INT 7
8734: PUSH
8735: LD_INT 8
8737: PUSH
8738: LD_INT 9
8740: PUSH
8741: LD_INT 10
8743: PUSH
8744: LD_INT 11
8746: PUSH
8747: LD_INT 12
8749: PUSH
8750: LD_INT 13
8752: PUSH
8753: LD_INT 14
8755: PUSH
8756: LD_INT 15
8758: PUSH
8759: LD_INT 16
8761: PUSH
8762: LD_INT 17
8764: PUSH
8765: LD_INT 18
8767: PUSH
8768: LD_INT 19
8770: PUSH
8771: LD_INT 20
8773: PUSH
8774: LD_INT 21
8776: PUSH
8777: LD_INT 22
8779: PUSH
8780: LD_INT 23
8782: PUSH
8783: LD_INT 24
8785: PUSH
8786: LD_INT 25
8788: PUSH
8789: LD_INT 26
8791: PUSH
8792: LD_INT 27
8794: PUSH
8795: LD_INT 28
8797: PUSH
8798: LD_INT 29
8800: PUSH
8801: LD_INT 30
8803: PUSH
8804: LD_INT 31
8806: PUSH
8807: LD_INT 32
8809: PUSH
8810: LD_INT 33
8812: PUSH
8813: LD_INT 34
8815: PUSH
8816: LD_INT 36
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 101
8858: PUSH
8859: LD_INT 102
8861: PUSH
8862: LD_INT 103
8864: PUSH
8865: LD_INT 104
8867: PUSH
8868: LD_INT 105
8870: PUSH
8871: LD_INT 106
8873: PUSH
8874: LD_INT 107
8876: PUSH
8877: LD_INT 108
8879: PUSH
8880: LD_INT 109
8882: PUSH
8883: LD_INT 110
8885: PUSH
8886: LD_INT 111
8888: PUSH
8889: LD_INT 112
8891: PUSH
8892: LD_INT 113
8894: PUSH
8895: LD_INT 114
8897: PUSH
8898: LD_INT 116
8900: PUSH
8901: LD_INT 117
8903: PUSH
8904: LD_INT 118
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: ST_TO_ADDR
8930: GO 9705
8932: LD_INT 16
8934: DOUBLE
8935: EQUAL
8936: IFTRUE 8940
8938: GO 9076
8940: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8941: LD_ADDR_VAR 0 2
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: LD_INT 4
8951: PUSH
8952: LD_INT 5
8954: PUSH
8955: LD_INT 7
8957: PUSH
8958: LD_INT 11
8960: PUSH
8961: LD_INT 12
8963: PUSH
8964: LD_INT 15
8966: PUSH
8967: LD_INT 16
8969: PUSH
8970: LD_INT 20
8972: PUSH
8973: LD_INT 21
8975: PUSH
8976: LD_INT 22
8978: PUSH
8979: LD_INT 23
8981: PUSH
8982: LD_INT 25
8984: PUSH
8985: LD_INT 26
8987: PUSH
8988: LD_INT 30
8990: PUSH
8991: LD_INT 31
8993: PUSH
8994: LD_INT 32
8996: PUSH
8997: LD_INT 33
8999: PUSH
9000: LD_INT 34
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 101
9026: PUSH
9027: LD_INT 102
9029: PUSH
9030: LD_INT 103
9032: PUSH
9033: LD_INT 106
9035: PUSH
9036: LD_INT 108
9038: PUSH
9039: LD_INT 112
9041: PUSH
9042: LD_INT 113
9044: PUSH
9045: LD_INT 114
9047: PUSH
9048: LD_INT 116
9050: PUSH
9051: LD_INT 117
9053: PUSH
9054: LD_INT 118
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: ST_TO_ADDR
9074: GO 9705
9076: LD_INT 17
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9308
9084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9085: LD_ADDR_VAR 0 2
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: LD_INT 7
9110: PUSH
9111: LD_INT 8
9113: PUSH
9114: LD_INT 9
9116: PUSH
9117: LD_INT 10
9119: PUSH
9120: LD_INT 11
9122: PUSH
9123: LD_INT 12
9125: PUSH
9126: LD_INT 13
9128: PUSH
9129: LD_INT 14
9131: PUSH
9132: LD_INT 15
9134: PUSH
9135: LD_INT 16
9137: PUSH
9138: LD_INT 17
9140: PUSH
9141: LD_INT 18
9143: PUSH
9144: LD_INT 19
9146: PUSH
9147: LD_INT 20
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 23
9158: PUSH
9159: LD_INT 24
9161: PUSH
9162: LD_INT 25
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 27
9170: PUSH
9171: LD_INT 28
9173: PUSH
9174: LD_INT 29
9176: PUSH
9177: LD_INT 30
9179: PUSH
9180: LD_INT 31
9182: PUSH
9183: LD_INT 32
9185: PUSH
9186: LD_INT 33
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 36
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 101
9234: PUSH
9235: LD_INT 102
9237: PUSH
9238: LD_INT 103
9240: PUSH
9241: LD_INT 104
9243: PUSH
9244: LD_INT 105
9246: PUSH
9247: LD_INT 106
9249: PUSH
9250: LD_INT 107
9252: PUSH
9253: LD_INT 108
9255: PUSH
9256: LD_INT 109
9258: PUSH
9259: LD_INT 110
9261: PUSH
9262: LD_INT 111
9264: PUSH
9265: LD_INT 112
9267: PUSH
9268: LD_INT 113
9270: PUSH
9271: LD_INT 114
9273: PUSH
9274: LD_INT 116
9276: PUSH
9277: LD_INT 117
9279: PUSH
9280: LD_INT 118
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: ST_TO_ADDR
9306: GO 9705
9308: LD_INT 18
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9464
9316: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9317: LD_ADDR_VAR 0 2
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: LD_INT 4
9327: PUSH
9328: LD_INT 5
9330: PUSH
9331: LD_INT 7
9333: PUSH
9334: LD_INT 11
9336: PUSH
9337: LD_INT 12
9339: PUSH
9340: LD_INT 15
9342: PUSH
9343: LD_INT 16
9345: PUSH
9346: LD_INT 20
9348: PUSH
9349: LD_INT 21
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_INT 23
9357: PUSH
9358: LD_INT 25
9360: PUSH
9361: LD_INT 26
9363: PUSH
9364: LD_INT 30
9366: PUSH
9367: LD_INT 31
9369: PUSH
9370: LD_INT 32
9372: PUSH
9373: LD_INT 33
9375: PUSH
9376: LD_INT 34
9378: PUSH
9379: LD_INT 35
9381: PUSH
9382: LD_INT 36
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 101
9410: PUSH
9411: LD_INT 102
9413: PUSH
9414: LD_INT 103
9416: PUSH
9417: LD_INT 106
9419: PUSH
9420: LD_INT 108
9422: PUSH
9423: LD_INT 112
9425: PUSH
9426: LD_INT 113
9428: PUSH
9429: LD_INT 114
9431: PUSH
9432: LD_INT 115
9434: PUSH
9435: LD_INT 116
9437: PUSH
9438: LD_INT 117
9440: PUSH
9441: LD_INT 118
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: ST_TO_ADDR
9462: GO 9705
9464: LD_INT 19
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9704
9472: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_INT 1
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: LD_INT 3
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 5
9492: PUSH
9493: LD_INT 6
9495: PUSH
9496: LD_INT 7
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 9
9504: PUSH
9505: LD_INT 10
9507: PUSH
9508: LD_INT 11
9510: PUSH
9511: LD_INT 12
9513: PUSH
9514: LD_INT 13
9516: PUSH
9517: LD_INT 14
9519: PUSH
9520: LD_INT 15
9522: PUSH
9523: LD_INT 16
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 18
9531: PUSH
9532: LD_INT 19
9534: PUSH
9535: LD_INT 20
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 23
9546: PUSH
9547: LD_INT 24
9549: PUSH
9550: LD_INT 25
9552: PUSH
9553: LD_INT 26
9555: PUSH
9556: LD_INT 27
9558: PUSH
9559: LD_INT 28
9561: PUSH
9562: LD_INT 29
9564: PUSH
9565: LD_INT 30
9567: PUSH
9568: LD_INT 31
9570: PUSH
9571: LD_INT 32
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 34
9579: PUSH
9580: LD_INT 35
9582: PUSH
9583: LD_INT 36
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 101
9626: PUSH
9627: LD_INT 102
9629: PUSH
9630: LD_INT 103
9632: PUSH
9633: LD_INT 104
9635: PUSH
9636: LD_INT 105
9638: PUSH
9639: LD_INT 106
9641: PUSH
9642: LD_INT 107
9644: PUSH
9645: LD_INT 108
9647: PUSH
9648: LD_INT 109
9650: PUSH
9651: LD_INT 110
9653: PUSH
9654: LD_INT 111
9656: PUSH
9657: LD_INT 112
9659: PUSH
9660: LD_INT 113
9662: PUSH
9663: LD_INT 114
9665: PUSH
9666: LD_INT 115
9668: PUSH
9669: LD_INT 116
9671: PUSH
9672: LD_INT 117
9674: PUSH
9675: LD_INT 118
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: ST_TO_ADDR
9702: GO 9705
9704: POP
// end else
9705: GO 9936
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9707: LD_ADDR_VAR 0 2
9711: PUSH
9712: LD_INT 1
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: LD_INT 3
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: LD_INT 5
9726: PUSH
9727: LD_INT 6
9729: PUSH
9730: LD_INT 7
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 9
9738: PUSH
9739: LD_INT 10
9741: PUSH
9742: LD_INT 11
9744: PUSH
9745: LD_INT 12
9747: PUSH
9748: LD_INT 13
9750: PUSH
9751: LD_INT 14
9753: PUSH
9754: LD_INT 15
9756: PUSH
9757: LD_INT 16
9759: PUSH
9760: LD_INT 17
9762: PUSH
9763: LD_INT 18
9765: PUSH
9766: LD_INT 19
9768: PUSH
9769: LD_INT 20
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_INT 23
9780: PUSH
9781: LD_INT 24
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: LD_INT 27
9792: PUSH
9793: LD_INT 28
9795: PUSH
9796: LD_INT 29
9798: PUSH
9799: LD_INT 30
9801: PUSH
9802: LD_INT 31
9804: PUSH
9805: LD_INT 32
9807: PUSH
9808: LD_INT 33
9810: PUSH
9811: LD_INT 34
9813: PUSH
9814: LD_INT 35
9816: PUSH
9817: LD_INT 36
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 101
9860: PUSH
9861: LD_INT 102
9863: PUSH
9864: LD_INT 103
9866: PUSH
9867: LD_INT 104
9869: PUSH
9870: LD_INT 105
9872: PUSH
9873: LD_INT 106
9875: PUSH
9876: LD_INT 107
9878: PUSH
9879: LD_INT 108
9881: PUSH
9882: LD_INT 109
9884: PUSH
9885: LD_INT 110
9887: PUSH
9888: LD_INT 111
9890: PUSH
9891: LD_INT 112
9893: PUSH
9894: LD_INT 113
9896: PUSH
9897: LD_INT 114
9899: PUSH
9900: LD_INT 115
9902: PUSH
9903: LD_INT 116
9905: PUSH
9906: LD_INT 117
9908: PUSH
9909: LD_INT 118
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
// if result then
9936: LD_VAR 0 2
9940: IFFALSE 10726
// begin normal :=  ;
9942: LD_ADDR_VAR 0 5
9946: PUSH
9947: LD_STRING 
9949: ST_TO_ADDR
// hardcore :=  ;
9950: LD_ADDR_VAR 0 6
9954: PUSH
9955: LD_STRING 
9957: ST_TO_ADDR
// active :=  ;
9958: LD_ADDR_VAR 0 7
9962: PUSH
9963: LD_STRING 
9965: ST_TO_ADDR
// for i = 1 to normalCounter do
9966: LD_ADDR_VAR 0 8
9970: PUSH
9971: DOUBLE
9972: LD_INT 1
9974: DEC
9975: ST_TO_ADDR
9976: LD_EXP 27
9980: PUSH
9981: FOR_TO
9982: IFFALSE 10083
// begin tmp := 0 ;
9984: LD_ADDR_VAR 0 3
9988: PUSH
9989: LD_STRING 0
9991: ST_TO_ADDR
// if result [ 1 ] then
9992: LD_VAR 0 2
9996: PUSH
9997: LD_INT 1
9999: ARRAY
10000: IFFALSE 10065
// if result [ 1 ] [ 1 ] = i then
10002: LD_VAR 0 2
10006: PUSH
10007: LD_INT 1
10009: ARRAY
10010: PUSH
10011: LD_INT 1
10013: ARRAY
10014: PUSH
10015: LD_VAR 0 8
10019: EQUAL
10020: IFFALSE 10065
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: LD_VAR 0 2
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: LD_VAR 0 2
10039: PUSH
10040: LD_INT 1
10042: ARRAY
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: CALL_OW 3
10051: PPUSH
10052: CALL_OW 1
10056: ST_TO_ADDR
// tmp := 1 ;
10057: LD_ADDR_VAR 0 3
10061: PUSH
10062: LD_STRING 1
10064: ST_TO_ADDR
// end ; normal := normal & tmp ;
10065: LD_ADDR_VAR 0 5
10069: PUSH
10070: LD_VAR 0 5
10074: PUSH
10075: LD_VAR 0 3
10079: STR
10080: ST_TO_ADDR
// end ;
10081: GO 9981
10083: POP
10084: POP
// for i = 1 to hardcoreCounter do
10085: LD_ADDR_VAR 0 8
10089: PUSH
10090: DOUBLE
10091: LD_INT 1
10093: DEC
10094: ST_TO_ADDR
10095: LD_EXP 28
10099: PUSH
10100: FOR_TO
10101: IFFALSE 10206
// begin tmp := 0 ;
10103: LD_ADDR_VAR 0 3
10107: PUSH
10108: LD_STRING 0
10110: ST_TO_ADDR
// if result [ 2 ] then
10111: LD_VAR 0 2
10115: PUSH
10116: LD_INT 2
10118: ARRAY
10119: IFFALSE 10188
// if result [ 2 ] [ 1 ] = 100 + i then
10121: LD_VAR 0 2
10125: PUSH
10126: LD_INT 2
10128: ARRAY
10129: PUSH
10130: LD_INT 1
10132: ARRAY
10133: PUSH
10134: LD_INT 100
10136: PUSH
10137: LD_VAR 0 8
10141: PLUS
10142: EQUAL
10143: IFFALSE 10188
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10145: LD_ADDR_VAR 0 2
10149: PUSH
10150: LD_VAR 0 2
10154: PPUSH
10155: LD_INT 2
10157: PPUSH
10158: LD_VAR 0 2
10162: PUSH
10163: LD_INT 2
10165: ARRAY
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 3
10174: PPUSH
10175: CALL_OW 1
10179: ST_TO_ADDR
// tmp := 1 ;
10180: LD_ADDR_VAR 0 3
10184: PUSH
10185: LD_STRING 1
10187: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10188: LD_ADDR_VAR 0 6
10192: PUSH
10193: LD_VAR 0 6
10197: PUSH
10198: LD_VAR 0 3
10202: STR
10203: ST_TO_ADDR
// end ;
10204: GO 10100
10206: POP
10207: POP
// if isGameLoad then
10208: LD_VAR 0 1
10212: IFFALSE 10687
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10214: LD_ADDR_VAR 0 4
10218: PUSH
10219: LD_EXP 31
10223: PUSH
10224: LD_EXP 30
10228: PUSH
10229: LD_EXP 32
10233: PUSH
10234: LD_EXP 29
10238: PUSH
10239: LD_EXP 33
10243: PUSH
10244: LD_EXP 34
10248: PUSH
10249: LD_EXP 35
10253: PUSH
10254: LD_EXP 36
10258: PUSH
10259: LD_EXP 37
10263: PUSH
10264: LD_EXP 38
10268: PUSH
10269: LD_EXP 39
10273: PUSH
10274: LD_EXP 40
10278: PUSH
10279: LD_EXP 41
10283: PUSH
10284: LD_EXP 42
10288: PUSH
10289: LD_EXP 50
10293: PUSH
10294: LD_EXP 51
10298: PUSH
10299: LD_EXP 52
10303: PUSH
10304: LD_EXP 53
10308: PUSH
10309: LD_EXP 55
10313: PUSH
10314: LD_EXP 56
10318: PUSH
10319: LD_EXP 57
10323: PUSH
10324: LD_EXP 60
10328: PUSH
10329: LD_EXP 62
10333: PUSH
10334: LD_EXP 63
10338: PUSH
10339: LD_EXP 64
10343: PUSH
10344: LD_EXP 66
10348: PUSH
10349: LD_EXP 67
10353: PUSH
10354: LD_EXP 70
10358: PUSH
10359: LD_EXP 71
10363: PUSH
10364: LD_EXP 72
10368: PUSH
10369: LD_EXP 73
10373: PUSH
10374: LD_EXP 74
10378: PUSH
10379: LD_EXP 75
10383: PUSH
10384: LD_EXP 76
10388: PUSH
10389: LD_EXP 77
10393: PUSH
10394: LD_EXP 78
10398: PUSH
10399: LD_EXP 43
10403: PUSH
10404: LD_EXP 44
10408: PUSH
10409: LD_EXP 47
10413: PUSH
10414: LD_EXP 48
10418: PUSH
10419: LD_EXP 49
10423: PUSH
10424: LD_EXP 45
10428: PUSH
10429: LD_EXP 46
10433: PUSH
10434: LD_EXP 54
10438: PUSH
10439: LD_EXP 58
10443: PUSH
10444: LD_EXP 59
10448: PUSH
10449: LD_EXP 61
10453: PUSH
10454: LD_EXP 65
10458: PUSH
10459: LD_EXP 68
10463: PUSH
10464: LD_EXP 69
10468: PUSH
10469: LD_EXP 79
10473: PUSH
10474: LD_EXP 80
10478: PUSH
10479: LD_EXP 81
10483: PUSH
10484: LD_EXP 82
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: ST_TO_ADDR
// tmp :=  ;
10545: LD_ADDR_VAR 0 3
10549: PUSH
10550: LD_STRING 
10552: ST_TO_ADDR
// for i = 1 to normalCounter do
10553: LD_ADDR_VAR 0 8
10557: PUSH
10558: DOUBLE
10559: LD_INT 1
10561: DEC
10562: ST_TO_ADDR
10563: LD_EXP 27
10567: PUSH
10568: FOR_TO
10569: IFFALSE 10605
// begin if flags [ i ] then
10571: LD_VAR 0 4
10575: PUSH
10576: LD_VAR 0 8
10580: ARRAY
10581: IFFALSE 10603
// tmp := tmp & i & ; ;
10583: LD_ADDR_VAR 0 3
10587: PUSH
10588: LD_VAR 0 3
10592: PUSH
10593: LD_VAR 0 8
10597: STR
10598: PUSH
10599: LD_STRING ;
10601: STR
10602: ST_TO_ADDR
// end ;
10603: GO 10568
10605: POP
10606: POP
// for i = 1 to hardcoreCounter do
10607: LD_ADDR_VAR 0 8
10611: PUSH
10612: DOUBLE
10613: LD_INT 1
10615: DEC
10616: ST_TO_ADDR
10617: LD_EXP 28
10621: PUSH
10622: FOR_TO
10623: IFFALSE 10669
// begin if flags [ normalCounter + i ] then
10625: LD_VAR 0 4
10629: PUSH
10630: LD_EXP 27
10634: PUSH
10635: LD_VAR 0 8
10639: PLUS
10640: ARRAY
10641: IFFALSE 10667
// tmp := tmp & ( 100 + i ) & ; ;
10643: LD_ADDR_VAR 0 3
10647: PUSH
10648: LD_VAR 0 3
10652: PUSH
10653: LD_INT 100
10655: PUSH
10656: LD_VAR 0 8
10660: PLUS
10661: STR
10662: PUSH
10663: LD_STRING ;
10665: STR
10666: ST_TO_ADDR
// end ;
10667: GO 10622
10669: POP
10670: POP
// if tmp then
10671: LD_VAR 0 3
10675: IFFALSE 10687
// active := tmp ;
10677: LD_ADDR_VAR 0 7
10681: PUSH
10682: LD_VAR 0 3
10686: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10687: LD_STRING getStreamItemsFromMission("
10689: PUSH
10690: LD_VAR 0 5
10694: STR
10695: PUSH
10696: LD_STRING ","
10698: STR
10699: PUSH
10700: LD_VAR 0 6
10704: STR
10705: PUSH
10706: LD_STRING ","
10708: STR
10709: PUSH
10710: LD_VAR 0 7
10714: STR
10715: PUSH
10716: LD_STRING ")
10718: STR
10719: PPUSH
10720: CALL_OW 559
// end else
10724: GO 10733
// ToLua ( getStreamItemsFromMission("","","") ) ;
10726: LD_STRING getStreamItemsFromMission("","","")
10728: PPUSH
10729: CALL_OW 559
// end ;
10733: LD_VAR 0 2
10737: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10738: LD_EXP 26
10742: PUSH
10743: LD_EXP 31
10747: AND
10748: IFFALSE 10872
10750: GO 10752
10752: DISABLE
10753: LD_INT 0
10755: PPUSH
10756: PPUSH
// begin enable ;
10757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10758: LD_ADDR_VAR 0 2
10762: PUSH
10763: LD_INT 22
10765: PUSH
10766: LD_OWVAR 2
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: LD_INT 34
10780: PUSH
10781: LD_INT 7
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 34
10790: PUSH
10791: LD_INT 45
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 34
10800: PUSH
10801: LD_INT 28
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 34
10810: PUSH
10811: LD_INT 47
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PPUSH
10829: CALL_OW 69
10833: ST_TO_ADDR
// if not tmp then
10834: LD_VAR 0 2
10838: NOT
10839: IFFALSE 10843
// exit ;
10841: GO 10872
// for i in tmp do
10843: LD_ADDR_VAR 0 1
10847: PUSH
10848: LD_VAR 0 2
10852: PUSH
10853: FOR_IN
10854: IFFALSE 10870
// begin SetLives ( i , 0 ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_INT 0
10863: PPUSH
10864: CALL_OW 234
// end ;
10868: GO 10853
10870: POP
10871: POP
// end ;
10872: PPOPN 2
10874: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10875: LD_EXP 26
10879: PUSH
10880: LD_EXP 32
10884: AND
10885: IFFALSE 10969
10887: GO 10889
10889: DISABLE
10890: LD_INT 0
10892: PPUSH
10893: PPUSH
// begin enable ;
10894: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_INT 22
10902: PUSH
10903: LD_OWVAR 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 32
10914: PUSH
10915: LD_INT 3
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PPUSH
10926: CALL_OW 69
10930: ST_TO_ADDR
// if not tmp then
10931: LD_VAR 0 2
10935: NOT
10936: IFFALSE 10940
// exit ;
10938: GO 10969
// for i in tmp do
10940: LD_ADDR_VAR 0 1
10944: PUSH
10945: LD_VAR 0 2
10949: PUSH
10950: FOR_IN
10951: IFFALSE 10967
// begin SetLives ( i , 0 ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_INT 0
10960: PPUSH
10961: CALL_OW 234
// end ;
10965: GO 10950
10967: POP
10968: POP
// end ;
10969: PPOPN 2
10971: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10972: LD_EXP 26
10976: PUSH
10977: LD_EXP 29
10981: AND
10982: IFFALSE 11075
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
// begin enable ;
10990: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10991: LD_ADDR_VAR 0 1
10995: PUSH
10996: LD_INT 22
10998: PUSH
10999: LD_OWVAR 2
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 2
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 5
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 25
11023: PUSH
11024: LD_INT 9
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 8
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 69
11055: PUSH
11056: FOR_IN
11057: IFFALSE 11073
// begin SetClass ( i , 1 ) ;
11059: LD_VAR 0 1
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL_OW 336
// end ;
11071: GO 11056
11073: POP
11074: POP
// end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11078: LD_EXP 26
11082: PUSH
11083: LD_EXP 30
11087: AND
11088: PUSH
11089: LD_OWVAR 65
11093: PUSH
11094: LD_INT 7
11096: LESS
11097: AND
11098: IFFALSE 11112
11100: GO 11102
11102: DISABLE
// begin enable ;
11103: ENABLE
// game_speed := 7 ;
11104: LD_ADDR_OWVAR 65
11108: PUSH
11109: LD_INT 7
11111: ST_TO_ADDR
// end ;
11112: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11113: LD_EXP 26
11117: PUSH
11118: LD_EXP 33
11122: AND
11123: IFFALSE 11325
11125: GO 11127
11127: DISABLE
11128: LD_INT 0
11130: PPUSH
11131: PPUSH
11132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11133: LD_ADDR_VAR 0 3
11137: PUSH
11138: LD_INT 81
11140: PUSH
11141: LD_OWVAR 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PPUSH
11164: CALL_OW 69
11168: ST_TO_ADDR
// if not tmp then
11169: LD_VAR 0 3
11173: NOT
11174: IFFALSE 11178
// exit ;
11176: GO 11325
// if tmp > 5 then
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 5
11185: GREATER
11186: IFFALSE 11198
// k := 5 else
11188: LD_ADDR_VAR 0 2
11192: PUSH
11193: LD_INT 5
11195: ST_TO_ADDR
11196: GO 11208
// k := tmp ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_VAR 0 3
11207: ST_TO_ADDR
// for i := 1 to k do
11208: LD_ADDR_VAR 0 1
11212: PUSH
11213: DOUBLE
11214: LD_INT 1
11216: DEC
11217: ST_TO_ADDR
11218: LD_VAR 0 2
11222: PUSH
11223: FOR_TO
11224: IFFALSE 11323
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11226: LD_VAR 0 3
11230: PUSH
11231: LD_VAR 0 1
11235: ARRAY
11236: PPUSH
11237: LD_VAR 0 1
11241: PUSH
11242: LD_INT 4
11244: MOD
11245: PUSH
11246: LD_INT 1
11248: PLUS
11249: PPUSH
11250: CALL_OW 259
11254: PUSH
11255: LD_INT 10
11257: LESS
11258: IFFALSE 11321
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11260: LD_VAR 0 3
11264: PUSH
11265: LD_VAR 0 1
11269: ARRAY
11270: PPUSH
11271: LD_VAR 0 1
11275: PUSH
11276: LD_INT 4
11278: MOD
11279: PUSH
11280: LD_INT 1
11282: PLUS
11283: PPUSH
11284: LD_VAR 0 3
11288: PUSH
11289: LD_VAR 0 1
11293: ARRAY
11294: PPUSH
11295: LD_VAR 0 1
11299: PUSH
11300: LD_INT 4
11302: MOD
11303: PUSH
11304: LD_INT 1
11306: PLUS
11307: PPUSH
11308: CALL_OW 259
11312: PUSH
11313: LD_INT 1
11315: PLUS
11316: PPUSH
11317: CALL_OW 237
11321: GO 11223
11323: POP
11324: POP
// end ;
11325: PPOPN 3
11327: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11328: LD_EXP 26
11332: PUSH
11333: LD_EXP 34
11337: AND
11338: IFFALSE 11358
11340: GO 11342
11342: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11343: LD_INT 4
11345: PPUSH
11346: LD_OWVAR 2
11350: PPUSH
11351: LD_INT 0
11353: PPUSH
11354: CALL_OW 324
11358: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11359: LD_EXP 26
11363: PUSH
11364: LD_EXP 63
11368: AND
11369: IFFALSE 11389
11371: GO 11373
11373: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11374: LD_INT 19
11376: PPUSH
11377: LD_OWVAR 2
11381: PPUSH
11382: LD_INT 0
11384: PPUSH
11385: CALL_OW 324
11389: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11390: LD_EXP 26
11394: PUSH
11395: LD_EXP 35
11399: AND
11400: IFFALSE 11502
11402: GO 11404
11404: DISABLE
11405: LD_INT 0
11407: PPUSH
11408: PPUSH
// begin enable ;
11409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11410: LD_ADDR_VAR 0 2
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_OWVAR 2
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 34
11432: PUSH
11433: LD_INT 11
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 34
11442: PUSH
11443: LD_INT 30
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: ST_TO_ADDR
// if not tmp then
11464: LD_VAR 0 2
11468: NOT
11469: IFFALSE 11473
// exit ;
11471: GO 11502
// for i in tmp do
11473: LD_ADDR_VAR 0 1
11477: PUSH
11478: LD_VAR 0 2
11482: PUSH
11483: FOR_IN
11484: IFFALSE 11500
// begin SetLives ( i , 0 ) ;
11486: LD_VAR 0 1
11490: PPUSH
11491: LD_INT 0
11493: PPUSH
11494: CALL_OW 234
// end ;
11498: GO 11483
11500: POP
11501: POP
// end ;
11502: PPOPN 2
11504: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11505: LD_EXP 26
11509: PUSH
11510: LD_EXP 36
11514: AND
11515: IFFALSE 11535
11517: GO 11519
11519: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11520: LD_INT 32
11522: PPUSH
11523: LD_OWVAR 2
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 324
11535: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11536: LD_EXP 26
11540: PUSH
11541: LD_EXP 37
11545: AND
11546: IFFALSE 11727
11548: GO 11550
11550: DISABLE
11551: LD_INT 0
11553: PPUSH
11554: PPUSH
11555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11556: LD_ADDR_VAR 0 2
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_OWVAR 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 33
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: ST_TO_ADDR
// if not tmp then
11592: LD_VAR 0 2
11596: NOT
11597: IFFALSE 11601
// exit ;
11599: GO 11727
// side := 0 ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: LD_INT 0
11608: ST_TO_ADDR
// for i := 1 to 8 do
11609: LD_ADDR_VAR 0 1
11613: PUSH
11614: DOUBLE
11615: LD_INT 1
11617: DEC
11618: ST_TO_ADDR
11619: LD_INT 8
11621: PUSH
11622: FOR_TO
11623: IFFALSE 11671
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11625: LD_OWVAR 2
11629: PUSH
11630: LD_VAR 0 1
11634: NONEQUAL
11635: PUSH
11636: LD_OWVAR 2
11640: PPUSH
11641: LD_VAR 0 1
11645: PPUSH
11646: CALL_OW 81
11650: PUSH
11651: LD_INT 2
11653: EQUAL
11654: AND
11655: IFFALSE 11669
// begin side := i ;
11657: LD_ADDR_VAR 0 3
11661: PUSH
11662: LD_VAR 0 1
11666: ST_TO_ADDR
// break ;
11667: GO 11671
// end ;
11669: GO 11622
11671: POP
11672: POP
// if not side then
11673: LD_VAR 0 3
11677: NOT
11678: IFFALSE 11682
// exit ;
11680: GO 11727
// for i := 1 to tmp do
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: DOUBLE
11688: LD_INT 1
11690: DEC
11691: ST_TO_ADDR
11692: LD_VAR 0 2
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11725
// if Prob ( 60 ) then
11700: LD_INT 60
11702: PPUSH
11703: CALL_OW 13
11707: IFFALSE 11723
// SetSide ( i , side ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: CALL_OW 235
11723: GO 11697
11725: POP
11726: POP
// end ;
11727: PPOPN 3
11729: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11730: LD_EXP 26
11734: PUSH
11735: LD_EXP 39
11739: AND
11740: IFFALSE 11859
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11748: LD_ADDR_VAR 0 1
11752: PUSH
11753: LD_INT 22
11755: PUSH
11756: LD_OWVAR 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 21
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: LD_INT 23
11780: PUSH
11781: LD_INT 0
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: PPUSH
11797: CALL_OW 69
11801: PUSH
11802: FOR_IN
11803: IFFALSE 11857
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11805: LD_VAR 0 1
11809: PPUSH
11810: CALL_OW 257
11814: PUSH
11815: LD_INT 1
11817: PUSH
11818: LD_INT 2
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: LD_INT 4
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: IN
11833: IFFALSE 11855
// SetClass ( un , rand ( 1 , 4 ) ) ;
11835: LD_VAR 0 1
11839: PPUSH
11840: LD_INT 1
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 12
11850: PPUSH
11851: CALL_OW 336
11855: GO 11802
11857: POP
11858: POP
// end ;
11859: PPOPN 1
11861: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11862: LD_EXP 26
11866: PUSH
11867: LD_EXP 38
11871: AND
11872: IFFALSE 11951
11874: GO 11876
11876: DISABLE
11877: LD_INT 0
11879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11880: LD_ADDR_VAR 0 1
11884: PUSH
11885: LD_INT 22
11887: PUSH
11888: LD_OWVAR 2
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 21
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PPUSH
11911: CALL_OW 69
11915: ST_TO_ADDR
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 11951
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11925: LD_VAR 0 1
11929: PUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_VAR 0 1
11937: PPUSH
11938: CALL_OW 12
11942: ARRAY
11943: PPUSH
11944: LD_INT 100
11946: PPUSH
11947: CALL_OW 234
// end ;
11951: PPOPN 1
11953: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11954: LD_EXP 26
11958: PUSH
11959: LD_EXP 40
11963: AND
11964: IFFALSE 12062
11966: GO 11968
11968: DISABLE
11969: LD_INT 0
11971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11972: LD_ADDR_VAR 0 1
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_OWVAR 2
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 21
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 69
12007: ST_TO_ADDR
// if not tmp then
12008: LD_VAR 0 1
12012: NOT
12013: IFFALSE 12017
// exit ;
12015: GO 12062
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12017: LD_VAR 0 1
12021: PUSH
12022: LD_INT 1
12024: PPUSH
12025: LD_VAR 0 1
12029: PPUSH
12030: CALL_OW 12
12034: ARRAY
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: LD_INT 4
12041: PPUSH
12042: CALL_OW 12
12046: PPUSH
12047: LD_INT 3000
12049: PPUSH
12050: LD_INT 9000
12052: PPUSH
12053: CALL_OW 12
12057: PPUSH
12058: CALL_OW 492
// end ;
12062: PPOPN 1
12064: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12065: LD_EXP 26
12069: PUSH
12070: LD_EXP 41
12074: AND
12075: IFFALSE 12095
12077: GO 12079
12079: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12080: LD_INT 1
12082: PPUSH
12083: LD_OWVAR 2
12087: PPUSH
12088: LD_INT 0
12090: PPUSH
12091: CALL_OW 324
12095: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12096: LD_EXP 26
12100: PUSH
12101: LD_EXP 42
12105: AND
12106: IFFALSE 12189
12108: GO 12110
12110: DISABLE
12111: LD_INT 0
12113: PPUSH
12114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: LD_INT 22
12122: PUSH
12123: LD_OWVAR 2
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 21
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 69
12150: ST_TO_ADDR
// if not tmp then
12151: LD_VAR 0 2
12155: NOT
12156: IFFALSE 12160
// exit ;
12158: GO 12189
// for i in tmp do
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_VAR 0 2
12169: PUSH
12170: FOR_IN
12171: IFFALSE 12187
// SetBLevel ( i , 10 ) ;
12173: LD_VAR 0 1
12177: PPUSH
12178: LD_INT 10
12180: PPUSH
12181: CALL_OW 241
12185: GO 12170
12187: POP
12188: POP
// end ;
12189: PPOPN 2
12191: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12192: LD_EXP 26
12196: PUSH
12197: LD_EXP 43
12201: AND
12202: IFFALSE 12313
12204: GO 12206
12206: DISABLE
12207: LD_INT 0
12209: PPUSH
12210: PPUSH
12211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12212: LD_ADDR_VAR 0 3
12216: PUSH
12217: LD_INT 22
12219: PUSH
12220: LD_OWVAR 2
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 25
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: ST_TO_ADDR
// if not tmp then
12248: LD_VAR 0 3
12252: NOT
12253: IFFALSE 12257
// exit ;
12255: GO 12313
// un := tmp [ rand ( 1 , tmp ) ] ;
12257: LD_ADDR_VAR 0 2
12261: PUSH
12262: LD_VAR 0 3
12266: PUSH
12267: LD_INT 1
12269: PPUSH
12270: LD_VAR 0 3
12274: PPUSH
12275: CALL_OW 12
12279: ARRAY
12280: ST_TO_ADDR
// if Crawls ( un ) then
12281: LD_VAR 0 2
12285: PPUSH
12286: CALL_OW 318
12290: IFFALSE 12301
// ComWalk ( un ) ;
12292: LD_VAR 0 2
12296: PPUSH
12297: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12301: LD_VAR 0 2
12305: PPUSH
12306: LD_INT 5
12308: PPUSH
12309: CALL_OW 336
// end ;
12313: PPOPN 3
12315: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12316: LD_EXP 26
12320: PUSH
12321: LD_EXP 44
12325: AND
12326: PUSH
12327: LD_OWVAR 67
12331: PUSH
12332: LD_INT 4
12334: LESS
12335: AND
12336: IFFALSE 12355
12338: GO 12340
12340: DISABLE
// begin Difficulty := Difficulty + 1 ;
12341: LD_ADDR_OWVAR 67
12345: PUSH
12346: LD_OWVAR 67
12350: PUSH
12351: LD_INT 1
12353: PLUS
12354: ST_TO_ADDR
// end ;
12355: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12356: LD_EXP 26
12360: PUSH
12361: LD_EXP 45
12365: AND
12366: IFFALSE 12469
12368: GO 12370
12370: DISABLE
12371: LD_INT 0
12373: PPUSH
// begin for i := 1 to 5 do
12374: LD_ADDR_VAR 0 1
12378: PUSH
12379: DOUBLE
12380: LD_INT 1
12382: DEC
12383: ST_TO_ADDR
12384: LD_INT 5
12386: PUSH
12387: FOR_TO
12388: IFFALSE 12467
// begin uc_nation := nation_nature ;
12390: LD_ADDR_OWVAR 21
12394: PUSH
12395: LD_INT 0
12397: ST_TO_ADDR
// uc_side := 0 ;
12398: LD_ADDR_OWVAR 20
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12406: LD_ADDR_OWVAR 29
12410: PUSH
12411: LD_INT 12
12413: PUSH
12414: LD_INT 12
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: ST_TO_ADDR
// hc_agressivity := 20 ;
12421: LD_ADDR_OWVAR 35
12425: PUSH
12426: LD_INT 20
12428: ST_TO_ADDR
// hc_class := class_tiger ;
12429: LD_ADDR_OWVAR 28
12433: PUSH
12434: LD_INT 14
12436: ST_TO_ADDR
// hc_gallery :=  ;
12437: LD_ADDR_OWVAR 33
12441: PUSH
12442: LD_STRING 
12444: ST_TO_ADDR
// hc_name :=  ;
12445: LD_ADDR_OWVAR 26
12449: PUSH
12450: LD_STRING 
12452: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12453: CALL_OW 44
12457: PPUSH
12458: LD_INT 0
12460: PPUSH
12461: CALL_OW 51
// end ;
12465: GO 12387
12467: POP
12468: POP
// end ;
12469: PPOPN 1
12471: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12472: LD_EXP 26
12476: PUSH
12477: LD_EXP 46
12481: AND
12482: IFFALSE 12491
12484: GO 12486
12486: DISABLE
// StreamSibBomb ;
12487: CALL 12492 0 0
12491: END
// export function StreamSibBomb ; var i , x , y ; begin
12492: LD_INT 0
12494: PPUSH
12495: PPUSH
12496: PPUSH
12497: PPUSH
// result := false ;
12498: LD_ADDR_VAR 0 1
12502: PUSH
12503: LD_INT 0
12505: ST_TO_ADDR
// for i := 1 to 16 do
12506: LD_ADDR_VAR 0 2
12510: PUSH
12511: DOUBLE
12512: LD_INT 1
12514: DEC
12515: ST_TO_ADDR
12516: LD_INT 16
12518: PUSH
12519: FOR_TO
12520: IFFALSE 12719
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_INT 10
12529: PUSH
12530: LD_INT 20
12532: PUSH
12533: LD_INT 30
12535: PUSH
12536: LD_INT 40
12538: PUSH
12539: LD_INT 50
12541: PUSH
12542: LD_INT 60
12544: PUSH
12545: LD_INT 70
12547: PUSH
12548: LD_INT 80
12550: PUSH
12551: LD_INT 90
12553: PUSH
12554: LD_INT 100
12556: PUSH
12557: LD_INT 110
12559: PUSH
12560: LD_INT 120
12562: PUSH
12563: LD_INT 130
12565: PUSH
12566: LD_INT 140
12568: PUSH
12569: LD_INT 150
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 1
12591: PPUSH
12592: LD_INT 15
12594: PPUSH
12595: CALL_OW 12
12599: ARRAY
12600: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: LD_INT 10
12608: PUSH
12609: LD_INT 20
12611: PUSH
12612: LD_INT 30
12614: PUSH
12615: LD_INT 40
12617: PUSH
12618: LD_INT 50
12620: PUSH
12621: LD_INT 60
12623: PUSH
12624: LD_INT 70
12626: PUSH
12627: LD_INT 80
12629: PUSH
12630: LD_INT 90
12632: PUSH
12633: LD_INT 100
12635: PUSH
12636: LD_INT 110
12638: PUSH
12639: LD_INT 120
12641: PUSH
12642: LD_INT 130
12644: PUSH
12645: LD_INT 140
12647: PUSH
12648: LD_INT 150
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 1
12670: PPUSH
12671: LD_INT 15
12673: PPUSH
12674: CALL_OW 12
12678: ARRAY
12679: ST_TO_ADDR
// if ValidHex ( x , y ) then
12680: LD_VAR 0 3
12684: PPUSH
12685: LD_VAR 0 4
12689: PPUSH
12690: CALL_OW 488
12694: IFFALSE 12717
// begin result := [ x , y ] ;
12696: LD_ADDR_VAR 0 1
12700: PUSH
12701: LD_VAR 0 3
12705: PUSH
12706: LD_VAR 0 4
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: ST_TO_ADDR
// break ;
12715: GO 12719
// end ; end ;
12717: GO 12519
12719: POP
12720: POP
// if result then
12721: LD_VAR 0 1
12725: IFFALSE 12785
// begin ToLua ( playSibBomb() ) ;
12727: LD_STRING playSibBomb()
12729: PPUSH
12730: CALL_OW 559
// wait ( 0 0$14 ) ;
12734: LD_INT 490
12736: PPUSH
12737: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12741: LD_VAR 0 1
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: LD_VAR 0 1
12754: PUSH
12755: LD_INT 2
12757: ARRAY
12758: PPUSH
12759: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12763: LD_VAR 0 1
12767: PUSH
12768: LD_INT 1
12770: ARRAY
12771: PPUSH
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 2
12779: ARRAY
12780: PPUSH
12781: CALL_OW 429
// end ; end ;
12785: LD_VAR 0 1
12789: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12790: LD_EXP 26
12794: PUSH
12795: LD_EXP 48
12799: AND
12800: IFFALSE 12812
12802: GO 12804
12804: DISABLE
// YouLost (  ) ;
12805: LD_STRING 
12807: PPUSH
12808: CALL_OW 104
12812: END
// every 0 0$1 trigger StreamModeActive and sFog do
12813: LD_EXP 26
12817: PUSH
12818: LD_EXP 47
12822: AND
12823: IFFALSE 12837
12825: GO 12827
12827: DISABLE
// FogOff ( your_side ) ;
12828: LD_OWVAR 2
12832: PPUSH
12833: CALL_OW 344
12837: END
// every 0 0$1 trigger StreamModeActive and sSun do
12838: LD_EXP 26
12842: PUSH
12843: LD_EXP 49
12847: AND
12848: IFFALSE 12876
12850: GO 12852
12852: DISABLE
// begin solar_recharge_percent := 0 ;
12853: LD_ADDR_OWVAR 79
12857: PUSH
12858: LD_INT 0
12860: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12861: LD_INT 10500
12863: PPUSH
12864: CALL_OW 67
// solar_recharge_percent := 100 ;
12868: LD_ADDR_OWVAR 79
12872: PUSH
12873: LD_INT 100
12875: ST_TO_ADDR
// end ;
12876: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12877: LD_EXP 26
12881: PUSH
12882: LD_EXP 50
12886: AND
12887: IFFALSE 13126
12889: GO 12891
12891: DISABLE
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
12896: PPUSH
// begin tmp := [ ] ;
12897: LD_ADDR_VAR 0 3
12901: PUSH
12902: EMPTY
12903: ST_TO_ADDR
// for i := 1 to 6 do
12904: LD_ADDR_VAR 0 1
12908: PUSH
12909: DOUBLE
12910: LD_INT 1
12912: DEC
12913: ST_TO_ADDR
12914: LD_INT 6
12916: PUSH
12917: FOR_TO
12918: IFFALSE 13023
// begin uc_nation := nation_nature ;
12920: LD_ADDR_OWVAR 21
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// uc_side := 0 ;
12928: LD_ADDR_OWVAR 20
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12936: LD_ADDR_OWVAR 29
12940: PUSH
12941: LD_INT 12
12943: PUSH
12944: LD_INT 12
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: ST_TO_ADDR
// hc_agressivity := 20 ;
12951: LD_ADDR_OWVAR 35
12955: PUSH
12956: LD_INT 20
12958: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12959: LD_ADDR_OWVAR 28
12963: PUSH
12964: LD_INT 17
12966: ST_TO_ADDR
// hc_gallery :=  ;
12967: LD_ADDR_OWVAR 33
12971: PUSH
12972: LD_STRING 
12974: ST_TO_ADDR
// hc_name :=  ;
12975: LD_ADDR_OWVAR 26
12979: PUSH
12980: LD_STRING 
12982: ST_TO_ADDR
// un := CreateHuman ;
12983: LD_ADDR_VAR 0 2
12987: PUSH
12988: CALL_OW 44
12992: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 51
// tmp := tmp ^ un ;
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: LD_VAR 0 3
13014: PUSH
13015: LD_VAR 0 2
13019: ADD
13020: ST_TO_ADDR
// end ;
13021: GO 12917
13023: POP
13024: POP
// repeat wait ( 0 0$1 ) ;
13025: LD_INT 35
13027: PPUSH
13028: CALL_OW 67
// for un in tmp do
13032: LD_ADDR_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: FOR_IN
13043: IFFALSE 13117
// begin if IsDead ( un ) then
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 301
13054: IFFALSE 13074
// begin tmp := tmp diff un ;
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_VAR 0 3
13065: PUSH
13066: LD_VAR 0 2
13070: DIFF
13071: ST_TO_ADDR
// continue ;
13072: GO 13042
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13074: LD_VAR 0 2
13078: PPUSH
13079: LD_INT 3
13081: PUSH
13082: LD_INT 22
13084: PUSH
13085: LD_INT 0
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: PPUSH
13101: LD_VAR 0 2
13105: PPUSH
13106: CALL_OW 74
13110: PPUSH
13111: CALL_OW 115
// end ;
13115: GO 13042
13117: POP
13118: POP
// until not tmp ;
13119: LD_VAR 0 3
13123: NOT
13124: IFFALSE 13025
// end ;
13126: PPOPN 3
13128: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13129: LD_EXP 26
13133: PUSH
13134: LD_EXP 51
13138: AND
13139: IFFALSE 13193
13141: GO 13143
13143: DISABLE
// begin ToLua ( displayTroll(); ) ;
13144: LD_STRING displayTroll();
13146: PPUSH
13147: CALL_OW 559
// wait ( 3 3$00 ) ;
13151: LD_INT 6300
13153: PPUSH
13154: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13158: LD_STRING hideTroll();
13160: PPUSH
13161: CALL_OW 559
// wait ( 1 1$00 ) ;
13165: LD_INT 2100
13167: PPUSH
13168: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13172: LD_STRING displayTroll();
13174: PPUSH
13175: CALL_OW 559
// wait ( 1 1$00 ) ;
13179: LD_INT 2100
13181: PPUSH
13182: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13186: LD_STRING hideTroll();
13188: PPUSH
13189: CALL_OW 559
// end ;
13193: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13194: LD_EXP 26
13198: PUSH
13199: LD_EXP 52
13203: AND
13204: IFFALSE 13267
13206: GO 13208
13208: DISABLE
13209: LD_INT 0
13211: PPUSH
// begin p := 0 ;
13212: LD_ADDR_VAR 0 1
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// repeat game_speed := 1 ;
13220: LD_ADDR_OWVAR 65
13224: PUSH
13225: LD_INT 1
13227: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13228: LD_INT 35
13230: PPUSH
13231: CALL_OW 67
// p := p + 1 ;
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_VAR 0 1
13244: PUSH
13245: LD_INT 1
13247: PLUS
13248: ST_TO_ADDR
// until p >= 60 ;
13249: LD_VAR 0 1
13253: PUSH
13254: LD_INT 60
13256: GREATEREQUAL
13257: IFFALSE 13220
// game_speed := 4 ;
13259: LD_ADDR_OWVAR 65
13263: PUSH
13264: LD_INT 4
13266: ST_TO_ADDR
// end ;
13267: PPOPN 1
13269: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13270: LD_EXP 26
13274: PUSH
13275: LD_EXP 53
13279: AND
13280: IFFALSE 13426
13282: GO 13284
13284: DISABLE
13285: LD_INT 0
13287: PPUSH
13288: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13289: LD_ADDR_VAR 0 1
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_OWVAR 2
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 2
13308: PUSH
13309: LD_INT 30
13311: PUSH
13312: LD_INT 0
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 30
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 69
13342: ST_TO_ADDR
// if not depot then
13343: LD_VAR 0 1
13347: NOT
13348: IFFALSE 13352
// exit ;
13350: GO 13426
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_VAR 0 1
13361: PUSH
13362: LD_INT 1
13364: PPUSH
13365: LD_VAR 0 1
13369: PPUSH
13370: CALL_OW 12
13374: ARRAY
13375: PPUSH
13376: CALL_OW 274
13380: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13381: LD_VAR 0 2
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: LD_INT 0
13391: PPUSH
13392: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13396: LD_VAR 0 2
13400: PPUSH
13401: LD_INT 2
13403: PPUSH
13404: LD_INT 0
13406: PPUSH
13407: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13411: LD_VAR 0 2
13415: PPUSH
13416: LD_INT 3
13418: PPUSH
13419: LD_INT 0
13421: PPUSH
13422: CALL_OW 277
// end ;
13426: PPOPN 2
13428: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13429: LD_EXP 26
13433: PUSH
13434: LD_EXP 54
13438: AND
13439: IFFALSE 13536
13441: GO 13443
13443: DISABLE
13444: LD_INT 0
13446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: LD_OWVAR 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 21
13466: PUSH
13467: LD_INT 1
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 3
13476: PUSH
13477: LD_INT 23
13479: PUSH
13480: LD_INT 0
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: ST_TO_ADDR
// if not tmp then
13501: LD_VAR 0 1
13505: NOT
13506: IFFALSE 13510
// exit ;
13508: GO 13536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13510: LD_VAR 0 1
13514: PUSH
13515: LD_INT 1
13517: PPUSH
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 12
13527: ARRAY
13528: PPUSH
13529: LD_INT 200
13531: PPUSH
13532: CALL_OW 234
// end ;
13536: PPOPN 1
13538: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13539: LD_EXP 26
13543: PUSH
13544: LD_EXP 55
13548: AND
13549: IFFALSE 13628
13551: GO 13553
13553: DISABLE
13554: LD_INT 0
13556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13557: LD_ADDR_VAR 0 1
13561: PUSH
13562: LD_INT 22
13564: PUSH
13565: LD_OWVAR 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 2
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: ST_TO_ADDR
// if not tmp then
13593: LD_VAR 0 1
13597: NOT
13598: IFFALSE 13602
// exit ;
13600: GO 13628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13602: LD_VAR 0 1
13606: PUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_VAR 0 1
13614: PPUSH
13615: CALL_OW 12
13619: ARRAY
13620: PPUSH
13621: LD_INT 60
13623: PPUSH
13624: CALL_OW 234
// end ;
13628: PPOPN 1
13630: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13631: LD_EXP 26
13635: PUSH
13636: LD_EXP 56
13640: AND
13641: IFFALSE 13740
13643: GO 13645
13645: DISABLE
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
// begin enable ;
13650: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13651: LD_ADDR_VAR 0 1
13655: PUSH
13656: LD_INT 22
13658: PUSH
13659: LD_OWVAR 2
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 61
13670: PUSH
13671: EMPTY
13672: LIST
13673: PUSH
13674: LD_INT 33
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// if not tmp then
13694: LD_VAR 0 1
13698: NOT
13699: IFFALSE 13703
// exit ;
13701: GO 13740
// for i in tmp do
13703: LD_ADDR_VAR 0 2
13707: PUSH
13708: LD_VAR 0 1
13712: PUSH
13713: FOR_IN
13714: IFFALSE 13738
// if IsControledBy ( i ) then
13716: LD_VAR 0 2
13720: PPUSH
13721: CALL_OW 312
13725: IFFALSE 13736
// ComUnlink ( i ) ;
13727: LD_VAR 0 2
13731: PPUSH
13732: CALL_OW 136
13736: GO 13713
13738: POP
13739: POP
// end ;
13740: PPOPN 2
13742: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13743: LD_EXP 26
13747: PUSH
13748: LD_EXP 57
13752: AND
13753: IFFALSE 13893
13755: GO 13757
13757: DISABLE
13758: LD_INT 0
13760: PPUSH
13761: PPUSH
// begin ToLua ( displayPowell(); ) ;
13762: LD_STRING displayPowell();
13764: PPUSH
13765: CALL_OW 559
// uc_side := 0 ;
13769: LD_ADDR_OWVAR 20
13773: PUSH
13774: LD_INT 0
13776: ST_TO_ADDR
// uc_nation := 2 ;
13777: LD_ADDR_OWVAR 21
13781: PUSH
13782: LD_INT 2
13784: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13785: LD_ADDR_OWVAR 37
13789: PUSH
13790: LD_INT 14
13792: ST_TO_ADDR
// vc_engine := engine_siberite ;
13793: LD_ADDR_OWVAR 39
13797: PUSH
13798: LD_INT 3
13800: ST_TO_ADDR
// vc_control := control_apeman ;
13801: LD_ADDR_OWVAR 38
13805: PUSH
13806: LD_INT 5
13808: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13809: LD_ADDR_OWVAR 40
13813: PUSH
13814: LD_INT 29
13816: ST_TO_ADDR
// un := CreateVehicle ;
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: CALL_OW 45
13826: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13827: LD_VAR 0 2
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13839: LD_INT 35
13841: PPUSH
13842: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13846: LD_VAR 0 2
13850: PPUSH
13851: LD_INT 22
13853: PUSH
13854: LD_OWVAR 2
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: PPUSH
13868: LD_VAR 0 2
13872: PPUSH
13873: CALL_OW 74
13877: PPUSH
13878: CALL_OW 115
// until IsDead ( un ) ;
13882: LD_VAR 0 2
13886: PPUSH
13887: CALL_OW 301
13891: IFFALSE 13839
// end ;
13893: PPOPN 2
13895: END
// every 0 0$1 trigger StreamModeActive and sStu do
13896: LD_EXP 26
13900: PUSH
13901: LD_EXP 65
13905: AND
13906: IFFALSE 13922
13908: GO 13910
13910: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13911: LD_STRING displayStucuk();
13913: PPUSH
13914: CALL_OW 559
// ResetFog ;
13918: CALL_OW 335
// end ;
13922: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13923: LD_EXP 26
13927: PUSH
13928: LD_EXP 58
13932: AND
13933: IFFALSE 14074
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
13941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13942: LD_ADDR_VAR 0 2
13946: PUSH
13947: LD_INT 22
13949: PUSH
13950: LD_OWVAR 2
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 21
13961: PUSH
13962: LD_INT 1
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PPUSH
13973: CALL_OW 69
13977: ST_TO_ADDR
// if not tmp then
13978: LD_VAR 0 2
13982: NOT
13983: IFFALSE 13987
// exit ;
13985: GO 14074
// un := tmp [ rand ( 1 , tmp ) ] ;
13987: LD_ADDR_VAR 0 1
13991: PUSH
13992: LD_VAR 0 2
13996: PUSH
13997: LD_INT 1
13999: PPUSH
14000: LD_VAR 0 2
14004: PPUSH
14005: CALL_OW 12
14009: ARRAY
14010: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14011: LD_VAR 0 1
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14023: LD_VAR 0 1
14027: PPUSH
14028: LD_OWVAR 3
14032: PUSH
14033: LD_VAR 0 1
14037: DIFF
14038: PPUSH
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 74
14048: PPUSH
14049: CALL_OW 115
// wait ( 0 0$20 ) ;
14053: LD_INT 700
14055: PPUSH
14056: CALL_OW 67
// SetSide ( un , your_side ) ;
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_OWVAR 2
14069: PPUSH
14070: CALL_OW 235
// end ;
14074: PPOPN 2
14076: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14077: LD_EXP 26
14081: PUSH
14082: LD_EXP 59
14086: AND
14087: IFFALSE 14193
14089: GO 14091
14091: DISABLE
14092: LD_INT 0
14094: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14095: LD_ADDR_VAR 0 1
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_OWVAR 2
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 2
14114: PUSH
14115: LD_INT 30
14117: PUSH
14118: LD_INT 0
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 30
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PPUSH
14144: CALL_OW 69
14148: ST_TO_ADDR
// if not depot then
14149: LD_VAR 0 1
14153: NOT
14154: IFFALSE 14158
// exit ;
14156: GO 14193
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14158: LD_VAR 0 1
14162: PUSH
14163: LD_INT 1
14165: ARRAY
14166: PPUSH
14167: CALL_OW 250
14171: PPUSH
14172: LD_VAR 0 1
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PPUSH
14181: CALL_OW 251
14185: PPUSH
14186: LD_INT 70
14188: PPUSH
14189: CALL_OW 495
// end ;
14193: PPOPN 1
14195: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14196: LD_EXP 26
14200: PUSH
14201: LD_EXP 60
14205: AND
14206: IFFALSE 14417
14208: GO 14210
14210: DISABLE
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14218: LD_ADDR_VAR 0 5
14222: PUSH
14223: LD_INT 22
14225: PUSH
14226: LD_OWVAR 2
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 21
14237: PUSH
14238: LD_INT 1
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PPUSH
14249: CALL_OW 69
14253: ST_TO_ADDR
// if not tmp then
14254: LD_VAR 0 5
14258: NOT
14259: IFFALSE 14263
// exit ;
14261: GO 14417
// for i in tmp do
14263: LD_ADDR_VAR 0 1
14267: PUSH
14268: LD_VAR 0 5
14272: PUSH
14273: FOR_IN
14274: IFFALSE 14415
// begin d := rand ( 0 , 5 ) ;
14276: LD_ADDR_VAR 0 4
14280: PUSH
14281: LD_INT 0
14283: PPUSH
14284: LD_INT 5
14286: PPUSH
14287: CALL_OW 12
14291: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14292: LD_ADDR_VAR 0 2
14296: PUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 250
14306: PPUSH
14307: LD_VAR 0 4
14311: PPUSH
14312: LD_INT 3
14314: PPUSH
14315: LD_INT 12
14317: PPUSH
14318: CALL_OW 12
14322: PPUSH
14323: CALL_OW 272
14327: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 251
14342: PPUSH
14343: LD_VAR 0 4
14347: PPUSH
14348: LD_INT 3
14350: PPUSH
14351: LD_INT 12
14353: PPUSH
14354: CALL_OW 12
14358: PPUSH
14359: CALL_OW 273
14363: ST_TO_ADDR
// if ValidHex ( x , y ) then
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 488
14378: IFFALSE 14413
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14380: LD_VAR 0 1
14384: PPUSH
14385: LD_VAR 0 2
14389: PPUSH
14390: LD_VAR 0 3
14394: PPUSH
14395: LD_INT 3
14397: PPUSH
14398: LD_INT 6
14400: PPUSH
14401: CALL_OW 12
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 483
// end ;
14413: GO 14273
14415: POP
14416: POP
// end ;
14417: PPOPN 5
14419: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14420: LD_EXP 26
14424: PUSH
14425: LD_EXP 61
14429: AND
14430: IFFALSE 14524
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14439: LD_ADDR_VAR 0 2
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: LD_OWVAR 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 32
14458: PUSH
14459: LD_INT 1
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: PPUSH
14481: CALL_OW 69
14485: ST_TO_ADDR
// if not tmp then
14486: LD_VAR 0 2
14490: NOT
14491: IFFALSE 14495
// exit ;
14493: GO 14524
// for i in tmp do
14495: LD_ADDR_VAR 0 1
14499: PUSH
14500: LD_VAR 0 2
14504: PUSH
14505: FOR_IN
14506: IFFALSE 14522
// SetFuel ( i , 0 ) ;
14508: LD_VAR 0 1
14512: PPUSH
14513: LD_INT 0
14515: PPUSH
14516: CALL_OW 240
14520: GO 14505
14522: POP
14523: POP
// end ;
14524: PPOPN 2
14526: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14527: LD_EXP 26
14531: PUSH
14532: LD_EXP 62
14536: AND
14537: IFFALSE 14603
14539: GO 14541
14541: DISABLE
14542: LD_INT 0
14544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_INT 22
14552: PUSH
14553: LD_OWVAR 2
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: LD_INT 30
14564: PUSH
14565: LD_INT 29
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PPUSH
14576: CALL_OW 69
14580: ST_TO_ADDR
// if not tmp then
14581: LD_VAR 0 1
14585: NOT
14586: IFFALSE 14590
// exit ;
14588: GO 14603
// DestroyUnit ( tmp [ 1 ] ) ;
14590: LD_VAR 0 1
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: CALL_OW 65
// end ;
14603: PPOPN 1
14605: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14606: LD_EXP 26
14610: PUSH
14611: LD_EXP 64
14615: AND
14616: IFFALSE 14745
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
// begin uc_side := 0 ;
14624: LD_ADDR_OWVAR 20
14628: PUSH
14629: LD_INT 0
14631: ST_TO_ADDR
// uc_nation := nation_arabian ;
14632: LD_ADDR_OWVAR 21
14636: PUSH
14637: LD_INT 2
14639: ST_TO_ADDR
// hc_gallery :=  ;
14640: LD_ADDR_OWVAR 33
14644: PUSH
14645: LD_STRING 
14647: ST_TO_ADDR
// hc_name :=  ;
14648: LD_ADDR_OWVAR 26
14652: PUSH
14653: LD_STRING 
14655: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14656: LD_INT 1
14658: PPUSH
14659: LD_INT 11
14661: PPUSH
14662: LD_INT 10
14664: PPUSH
14665: CALL_OW 380
// un := CreateHuman ;
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: CALL_OW 44
14678: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14691: LD_INT 35
14693: PPUSH
14694: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14698: LD_VAR 0 1
14702: PPUSH
14703: LD_INT 22
14705: PUSH
14706: LD_OWVAR 2
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: PPUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 74
14729: PPUSH
14730: CALL_OW 115
// until IsDead ( un ) ;
14734: LD_VAR 0 1
14738: PPUSH
14739: CALL_OW 301
14743: IFFALSE 14691
// end ;
14745: PPOPN 1
14747: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14748: LD_EXP 26
14752: PUSH
14753: LD_EXP 66
14757: AND
14758: IFFALSE 14770
14760: GO 14762
14762: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14763: LD_STRING earthquake(getX(game), 0, 32)
14765: PPUSH
14766: CALL_OW 559
14770: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14771: LD_EXP 26
14775: PUSH
14776: LD_EXP 67
14780: AND
14781: IFFALSE 14872
14783: GO 14785
14785: DISABLE
14786: LD_INT 0
14788: PPUSH
// begin enable ;
14789: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14790: LD_ADDR_VAR 0 1
14794: PUSH
14795: LD_INT 22
14797: PUSH
14798: LD_OWVAR 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 21
14809: PUSH
14810: LD_INT 2
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 33
14819: PUSH
14820: LD_INT 3
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: PPUSH
14832: CALL_OW 69
14836: ST_TO_ADDR
// if not tmp then
14837: LD_VAR 0 1
14841: NOT
14842: IFFALSE 14846
// exit ;
14844: GO 14872
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14846: LD_VAR 0 1
14850: PUSH
14851: LD_INT 1
14853: PPUSH
14854: LD_VAR 0 1
14858: PPUSH
14859: CALL_OW 12
14863: ARRAY
14864: PPUSH
14865: LD_INT 1
14867: PPUSH
14868: CALL_OW 234
// end ;
14872: PPOPN 1
14874: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14875: LD_EXP 26
14879: PUSH
14880: LD_EXP 68
14884: AND
14885: IFFALSE 15026
14887: GO 14889
14889: DISABLE
14890: LD_INT 0
14892: PPUSH
14893: PPUSH
14894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14895: LD_ADDR_VAR 0 3
14899: PUSH
14900: LD_INT 22
14902: PUSH
14903: LD_OWVAR 2
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 25
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 69
14930: ST_TO_ADDR
// if not tmp then
14931: LD_VAR 0 3
14935: NOT
14936: IFFALSE 14940
// exit ;
14938: GO 15026
// un := tmp [ rand ( 1 , tmp ) ] ;
14940: LD_ADDR_VAR 0 2
14944: PUSH
14945: LD_VAR 0 3
14949: PUSH
14950: LD_INT 1
14952: PPUSH
14953: LD_VAR 0 3
14957: PPUSH
14958: CALL_OW 12
14962: ARRAY
14963: ST_TO_ADDR
// if Crawls ( un ) then
14964: LD_VAR 0 2
14968: PPUSH
14969: CALL_OW 318
14973: IFFALSE 14984
// ComWalk ( un ) ;
14975: LD_VAR 0 2
14979: PPUSH
14980: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14984: LD_VAR 0 2
14988: PPUSH
14989: LD_INT 9
14991: PPUSH
14992: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14996: LD_INT 28
14998: PPUSH
14999: LD_OWVAR 2
15003: PPUSH
15004: LD_INT 2
15006: PPUSH
15007: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15011: LD_INT 29
15013: PPUSH
15014: LD_OWVAR 2
15018: PPUSH
15019: LD_INT 2
15021: PPUSH
15022: CALL_OW 322
// end ;
15026: PPOPN 3
15028: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15029: LD_EXP 26
15033: PUSH
15034: LD_EXP 69
15038: AND
15039: IFFALSE 15150
15041: GO 15043
15043: DISABLE
15044: LD_INT 0
15046: PPUSH
15047: PPUSH
15048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15049: LD_ADDR_VAR 0 3
15053: PUSH
15054: LD_INT 22
15056: PUSH
15057: LD_OWVAR 2
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 25
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PPUSH
15080: CALL_OW 69
15084: ST_TO_ADDR
// if not tmp then
15085: LD_VAR 0 3
15089: NOT
15090: IFFALSE 15094
// exit ;
15092: GO 15150
// un := tmp [ rand ( 1 , tmp ) ] ;
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_VAR 0 3
15103: PUSH
15104: LD_INT 1
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 12
15116: ARRAY
15117: ST_TO_ADDR
// if Crawls ( un ) then
15118: LD_VAR 0 2
15122: PPUSH
15123: CALL_OW 318
15127: IFFALSE 15138
// ComWalk ( un ) ;
15129: LD_VAR 0 2
15133: PPUSH
15134: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15138: LD_VAR 0 2
15142: PPUSH
15143: LD_INT 8
15145: PPUSH
15146: CALL_OW 336
// end ;
15150: PPOPN 3
15152: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15153: LD_EXP 26
15157: PUSH
15158: LD_EXP 70
15162: AND
15163: IFFALSE 15307
15165: GO 15167
15167: DISABLE
15168: LD_INT 0
15170: PPUSH
15171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15172: LD_ADDR_VAR 0 2
15176: PUSH
15177: LD_INT 22
15179: PUSH
15180: LD_OWVAR 2
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 21
15191: PUSH
15192: LD_INT 2
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: LD_INT 2
15201: PUSH
15202: LD_INT 34
15204: PUSH
15205: LD_INT 12
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 34
15214: PUSH
15215: LD_INT 51
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 34
15224: PUSH
15225: LD_INT 32
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: PPUSH
15243: CALL_OW 69
15247: ST_TO_ADDR
// if not tmp then
15248: LD_VAR 0 2
15252: NOT
15253: IFFALSE 15257
// exit ;
15255: GO 15307
// for i in tmp do
15257: LD_ADDR_VAR 0 1
15261: PUSH
15262: LD_VAR 0 2
15266: PUSH
15267: FOR_IN
15268: IFFALSE 15305
// if GetCargo ( i , mat_artifact ) = 0 then
15270: LD_VAR 0 1
15274: PPUSH
15275: LD_INT 4
15277: PPUSH
15278: CALL_OW 289
15282: PUSH
15283: LD_INT 0
15285: EQUAL
15286: IFFALSE 15303
// SetCargo ( i , mat_siberit , 100 ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_INT 3
15295: PPUSH
15296: LD_INT 100
15298: PPUSH
15299: CALL_OW 290
15303: GO 15267
15305: POP
15306: POP
// end ;
15307: PPOPN 2
15309: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15310: LD_EXP 26
15314: PUSH
15315: LD_EXP 71
15319: AND
15320: IFFALSE 15503
15322: GO 15324
15324: DISABLE
15325: LD_INT 0
15327: PPUSH
15328: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15329: LD_ADDR_VAR 0 2
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_OWVAR 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: ST_TO_ADDR
// if not tmp then
15351: LD_VAR 0 2
15355: NOT
15356: IFFALSE 15360
// exit ;
15358: GO 15503
// for i := 1 to 2 do
15360: LD_ADDR_VAR 0 1
15364: PUSH
15365: DOUBLE
15366: LD_INT 1
15368: DEC
15369: ST_TO_ADDR
15370: LD_INT 2
15372: PUSH
15373: FOR_TO
15374: IFFALSE 15501
// begin uc_side := your_side ;
15376: LD_ADDR_OWVAR 20
15380: PUSH
15381: LD_OWVAR 2
15385: ST_TO_ADDR
// uc_nation := nation_american ;
15386: LD_ADDR_OWVAR 21
15390: PUSH
15391: LD_INT 1
15393: ST_TO_ADDR
// vc_chassis := us_morphling ;
15394: LD_ADDR_OWVAR 37
15398: PUSH
15399: LD_INT 5
15401: ST_TO_ADDR
// vc_engine := engine_siberite ;
15402: LD_ADDR_OWVAR 39
15406: PUSH
15407: LD_INT 3
15409: ST_TO_ADDR
// vc_control := control_computer ;
15410: LD_ADDR_OWVAR 38
15414: PUSH
15415: LD_INT 3
15417: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15418: LD_ADDR_OWVAR 40
15422: PUSH
15423: LD_INT 10
15425: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15426: LD_VAR 0 2
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: CALL_OW 310
15439: NOT
15440: IFFALSE 15487
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15442: CALL_OW 45
15446: PPUSH
15447: LD_VAR 0 2
15451: PUSH
15452: LD_INT 1
15454: ARRAY
15455: PPUSH
15456: CALL_OW 250
15460: PPUSH
15461: LD_VAR 0 2
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: PPUSH
15470: CALL_OW 251
15474: PPUSH
15475: LD_INT 12
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 50
15485: GO 15499
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15487: CALL_OW 45
15491: PPUSH
15492: LD_INT 1
15494: PPUSH
15495: CALL_OW 51
// end ;
15499: GO 15373
15501: POP
15502: POP
// end ;
15503: PPOPN 2
15505: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15506: LD_EXP 26
15510: PUSH
15511: LD_EXP 72
15515: AND
15516: IFFALSE 15738
15518: GO 15520
15520: DISABLE
15521: LD_INT 0
15523: PPUSH
15524: PPUSH
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15529: LD_ADDR_VAR 0 6
15533: PUSH
15534: LD_INT 22
15536: PUSH
15537: LD_OWVAR 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 21
15548: PUSH
15549: LD_INT 1
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 3
15558: PUSH
15559: LD_INT 23
15561: PUSH
15562: LD_INT 0
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: ST_TO_ADDR
// if not tmp then
15583: LD_VAR 0 6
15587: NOT
15588: IFFALSE 15592
// exit ;
15590: GO 15738
// s1 := rand ( 1 , 4 ) ;
15592: LD_ADDR_VAR 0 2
15596: PUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_INT 4
15602: PPUSH
15603: CALL_OW 12
15607: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15608: LD_ADDR_VAR 0 4
15612: PUSH
15613: LD_VAR 0 6
15617: PUSH
15618: LD_INT 1
15620: ARRAY
15621: PPUSH
15622: LD_VAR 0 2
15626: PPUSH
15627: CALL_OW 259
15631: ST_TO_ADDR
// if s1 = 1 then
15632: LD_VAR 0 2
15636: PUSH
15637: LD_INT 1
15639: EQUAL
15640: IFFALSE 15660
// s2 := rand ( 2 , 4 ) else
15642: LD_ADDR_VAR 0 3
15646: PUSH
15647: LD_INT 2
15649: PPUSH
15650: LD_INT 4
15652: PPUSH
15653: CALL_OW 12
15657: ST_TO_ADDR
15658: GO 15668
// s2 := 1 ;
15660: LD_ADDR_VAR 0 3
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15668: LD_ADDR_VAR 0 5
15672: PUSH
15673: LD_VAR 0 6
15677: PUSH
15678: LD_INT 1
15680: ARRAY
15681: PPUSH
15682: LD_VAR 0 3
15686: PPUSH
15687: CALL_OW 259
15691: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15692: LD_VAR 0 6
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: PPUSH
15701: LD_VAR 0 2
15705: PPUSH
15706: LD_VAR 0 5
15710: PPUSH
15711: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15715: LD_VAR 0 6
15719: PUSH
15720: LD_INT 1
15722: ARRAY
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_VAR 0 4
15733: PPUSH
15734: CALL_OW 237
// end ;
15738: PPOPN 6
15740: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15741: LD_EXP 26
15745: PUSH
15746: LD_EXP 73
15750: AND
15751: IFFALSE 15830
15753: GO 15755
15755: DISABLE
15756: LD_INT 0
15758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15759: LD_ADDR_VAR 0 1
15763: PUSH
15764: LD_INT 22
15766: PUSH
15767: LD_OWVAR 2
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 30
15778: PUSH
15779: LD_INT 3
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: ST_TO_ADDR
// if not tmp then
15795: LD_VAR 0 1
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 15830
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15804: LD_VAR 0 1
15808: PUSH
15809: LD_INT 1
15811: PPUSH
15812: LD_VAR 0 1
15816: PPUSH
15817: CALL_OW 12
15821: ARRAY
15822: PPUSH
15823: LD_INT 1
15825: PPUSH
15826: CALL_OW 234
// end ;
15830: PPOPN 1
15832: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15833: LD_EXP 26
15837: PUSH
15838: LD_EXP 74
15842: AND
15843: IFFALSE 15955
15845: GO 15847
15847: DISABLE
15848: LD_INT 0
15850: PPUSH
15851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15852: LD_ADDR_VAR 0 2
15856: PUSH
15857: LD_INT 22
15859: PUSH
15860: LD_OWVAR 2
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 2
15871: PUSH
15872: LD_INT 30
15874: PUSH
15875: LD_INT 27
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 30
15884: PUSH
15885: LD_INT 26
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 30
15894: PUSH
15895: LD_INT 28
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 69
15916: ST_TO_ADDR
// if not tmp then
15917: LD_VAR 0 2
15921: NOT
15922: IFFALSE 15926
// exit ;
15924: GO 15955
// for i in tmp do
15926: LD_ADDR_VAR 0 1
15930: PUSH
15931: LD_VAR 0 2
15935: PUSH
15936: FOR_IN
15937: IFFALSE 15953
// SetLives ( i , 1 ) ;
15939: LD_VAR 0 1
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 234
15951: GO 15936
15953: POP
15954: POP
// end ;
15955: PPOPN 2
15957: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15958: LD_EXP 26
15962: PUSH
15963: LD_EXP 75
15967: AND
15968: IFFALSE 16255
15970: GO 15972
15972: DISABLE
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
15977: PPUSH
// begin i := rand ( 1 , 7 ) ;
15978: LD_ADDR_VAR 0 1
15982: PUSH
15983: LD_INT 1
15985: PPUSH
15986: LD_INT 7
15988: PPUSH
15989: CALL_OW 12
15993: ST_TO_ADDR
// case i of 1 :
15994: LD_VAR 0 1
15998: PUSH
15999: LD_INT 1
16001: DOUBLE
16002: EQUAL
16003: IFTRUE 16007
16005: GO 16017
16007: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16008: LD_STRING earthquake(getX(game), 0, 32)
16010: PPUSH
16011: CALL_OW 559
16015: GO 16255
16017: LD_INT 2
16019: DOUBLE
16020: EQUAL
16021: IFTRUE 16025
16023: GO 16039
16025: POP
// begin ToLua ( displayStucuk(); ) ;
16026: LD_STRING displayStucuk();
16028: PPUSH
16029: CALL_OW 559
// ResetFog ;
16033: CALL_OW 335
// end ; 3 :
16037: GO 16255
16039: LD_INT 3
16041: DOUBLE
16042: EQUAL
16043: IFTRUE 16047
16045: GO 16151
16047: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16048: LD_ADDR_VAR 0 2
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_OWVAR 2
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 25
16067: PUSH
16068: LD_INT 1
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PPUSH
16079: CALL_OW 69
16083: ST_TO_ADDR
// if not tmp then
16084: LD_VAR 0 2
16088: NOT
16089: IFFALSE 16093
// exit ;
16091: GO 16255
// un := tmp [ rand ( 1 , tmp ) ] ;
16093: LD_ADDR_VAR 0 3
16097: PUSH
16098: LD_VAR 0 2
16102: PUSH
16103: LD_INT 1
16105: PPUSH
16106: LD_VAR 0 2
16110: PPUSH
16111: CALL_OW 12
16115: ARRAY
16116: ST_TO_ADDR
// if Crawls ( un ) then
16117: LD_VAR 0 3
16121: PPUSH
16122: CALL_OW 318
16126: IFFALSE 16137
// ComWalk ( un ) ;
16128: LD_VAR 0 3
16132: PPUSH
16133: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16137: LD_VAR 0 3
16141: PPUSH
16142: LD_INT 8
16144: PPUSH
16145: CALL_OW 336
// end ; 4 :
16149: GO 16255
16151: LD_INT 4
16153: DOUBLE
16154: EQUAL
16155: IFTRUE 16159
16157: GO 16233
16159: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16160: LD_ADDR_VAR 0 2
16164: PUSH
16165: LD_INT 22
16167: PUSH
16168: LD_OWVAR 2
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: LD_INT 30
16179: PUSH
16180: LD_INT 29
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// if not tmp then
16196: LD_VAR 0 2
16200: NOT
16201: IFFALSE 16205
// exit ;
16203: GO 16255
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16205: LD_VAR 0 2
16209: PUSH
16210: LD_INT 1
16212: ARRAY
16213: PPUSH
16214: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16218: LD_VAR 0 2
16222: PUSH
16223: LD_INT 1
16225: ARRAY
16226: PPUSH
16227: CALL_OW 65
// end ; 5 .. 7 :
16231: GO 16255
16233: LD_INT 5
16235: DOUBLE
16236: GREATEREQUAL
16237: IFFALSE 16245
16239: LD_INT 7
16241: DOUBLE
16242: LESSEQUAL
16243: IFTRUE 16247
16245: GO 16254
16247: POP
// StreamSibBomb ; end ;
16248: CALL 12492 0 0
16252: GO 16255
16254: POP
// end ;
16255: PPOPN 3
16257: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16258: LD_EXP 26
16262: PUSH
16263: LD_EXP 76
16267: AND
16268: IFFALSE 16424
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
16277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_INT 81
16285: PUSH
16286: LD_OWVAR 2
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 1
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: LD_INT 21
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PPUSH
16327: CALL_OW 69
16331: ST_TO_ADDR
// if not tmp then
16332: LD_VAR 0 2
16336: NOT
16337: IFFALSE 16341
// exit ;
16339: GO 16424
// p := 0 ;
16341: LD_ADDR_VAR 0 3
16345: PUSH
16346: LD_INT 0
16348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// p := p + 1 ;
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: LD_VAR 0 3
16365: PUSH
16366: LD_INT 1
16368: PLUS
16369: ST_TO_ADDR
// for i in tmp do
16370: LD_ADDR_VAR 0 1
16374: PUSH
16375: LD_VAR 0 2
16379: PUSH
16380: FOR_IN
16381: IFFALSE 16412
// if GetLives ( i ) < 1000 then
16383: LD_VAR 0 1
16387: PPUSH
16388: CALL_OW 256
16392: PUSH
16393: LD_INT 1000
16395: LESS
16396: IFFALSE 16410
// SetLives ( i , 1000 ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_INT 1000
16405: PPUSH
16406: CALL_OW 234
16410: GO 16380
16412: POP
16413: POP
// until p > 20 ;
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 20
16421: GREATER
16422: IFFALSE 16349
// end ;
16424: PPOPN 3
16426: END
// every 0 0$1 trigger StreamModeActive and sTime do
16427: LD_EXP 26
16431: PUSH
16432: LD_EXP 77
16436: AND
16437: IFFALSE 16472
16439: GO 16441
16441: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16442: LD_INT 28
16444: PPUSH
16445: LD_OWVAR 2
16449: PPUSH
16450: LD_INT 2
16452: PPUSH
16453: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16457: LD_INT 30
16459: PPUSH
16460: LD_OWVAR 2
16464: PPUSH
16465: LD_INT 2
16467: PPUSH
16468: CALL_OW 322
// end ;
16472: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16473: LD_EXP 26
16477: PUSH
16478: LD_EXP 78
16482: AND
16483: IFFALSE 16604
16485: GO 16487
16487: DISABLE
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16492: LD_ADDR_VAR 0 2
16496: PUSH
16497: LD_INT 22
16499: PUSH
16500: LD_OWVAR 2
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 21
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 3
16521: PUSH
16522: LD_INT 23
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 69
16545: ST_TO_ADDR
// if not tmp then
16546: LD_VAR 0 2
16550: NOT
16551: IFFALSE 16555
// exit ;
16553: GO 16604
// for i in tmp do
16555: LD_ADDR_VAR 0 1
16559: PUSH
16560: LD_VAR 0 2
16564: PUSH
16565: FOR_IN
16566: IFFALSE 16602
// begin if Crawls ( i ) then
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 318
16577: IFFALSE 16588
// ComWalk ( i ) ;
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 138
// SetClass ( i , 2 ) ;
16588: LD_VAR 0 1
16592: PPUSH
16593: LD_INT 2
16595: PPUSH
16596: CALL_OW 336
// end ;
16600: GO 16565
16602: POP
16603: POP
// end ;
16604: PPOPN 2
16606: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16607: LD_EXP 26
16611: PUSH
16612: LD_EXP 79
16616: AND
16617: IFFALSE 16905
16619: GO 16621
16621: DISABLE
16622: LD_INT 0
16624: PPUSH
16625: PPUSH
16626: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16627: LD_OWVAR 2
16631: PPUSH
16632: LD_INT 9
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16645: LD_INT 9
16647: PPUSH
16648: LD_OWVAR 2
16652: PPUSH
16653: CALL_OW 343
// uc_side := 9 ;
16657: LD_ADDR_OWVAR 20
16661: PUSH
16662: LD_INT 9
16664: ST_TO_ADDR
// uc_nation := 2 ;
16665: LD_ADDR_OWVAR 21
16669: PUSH
16670: LD_INT 2
16672: ST_TO_ADDR
// hc_name := Dark Warrior ;
16673: LD_ADDR_OWVAR 26
16677: PUSH
16678: LD_STRING Dark Warrior
16680: ST_TO_ADDR
// hc_gallery :=  ;
16681: LD_ADDR_OWVAR 33
16685: PUSH
16686: LD_STRING 
16688: ST_TO_ADDR
// hc_noskilllimit := true ;
16689: LD_ADDR_OWVAR 76
16693: PUSH
16694: LD_INT 1
16696: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16697: LD_ADDR_OWVAR 31
16701: PUSH
16702: LD_INT 30
16704: PUSH
16705: LD_INT 30
16707: PUSH
16708: LD_INT 30
16710: PUSH
16711: LD_INT 30
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: ST_TO_ADDR
// un := CreateHuman ;
16720: LD_ADDR_VAR 0 3
16724: PUSH
16725: CALL_OW 44
16729: ST_TO_ADDR
// hc_noskilllimit := false ;
16730: LD_ADDR_OWVAR 76
16734: PUSH
16735: LD_INT 0
16737: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16738: LD_VAR 0 3
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 51
// ToLua ( playRanger() ) ;
16750: LD_STRING playRanger()
16752: PPUSH
16753: CALL_OW 559
// p := 0 ;
16757: LD_ADDR_VAR 0 2
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16765: LD_INT 35
16767: PPUSH
16768: CALL_OW 67
// p := p + 1 ;
16772: LD_ADDR_VAR 0 2
16776: PUSH
16777: LD_VAR 0 2
16781: PUSH
16782: LD_INT 1
16784: PLUS
16785: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16786: LD_VAR 0 3
16790: PPUSH
16791: CALL_OW 256
16795: PUSH
16796: LD_INT 1000
16798: LESS
16799: IFFALSE 16813
// SetLives ( un , 1000 ) ;
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_INT 1000
16808: PPUSH
16809: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16813: LD_VAR 0 3
16817: PPUSH
16818: LD_INT 81
16820: PUSH
16821: LD_OWVAR 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 91
16832: PUSH
16833: LD_VAR 0 3
16837: PUSH
16838: LD_INT 30
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: PPUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: CALL_OW 74
16864: PPUSH
16865: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16869: LD_VAR 0 2
16873: PUSH
16874: LD_INT 80
16876: GREATER
16877: PUSH
16878: LD_VAR 0 3
16882: PPUSH
16883: CALL_OW 301
16887: OR
16888: IFFALSE 16765
// if un then
16890: LD_VAR 0 3
16894: IFFALSE 16905
// RemoveUnit ( un ) ;
16896: LD_VAR 0 3
16900: PPUSH
16901: CALL_OW 64
// end ;
16905: PPOPN 3
16907: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16908: LD_EXP 80
16912: IFFALSE 17028
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
16920: PPUSH
16921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16922: LD_ADDR_VAR 0 2
16926: PUSH
16927: LD_INT 81
16929: PUSH
16930: LD_OWVAR 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 21
16941: PUSH
16942: LD_INT 1
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 69
16957: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16958: LD_STRING playComputer()
16960: PPUSH
16961: CALL_OW 559
// if not tmp then
16965: LD_VAR 0 2
16969: NOT
16970: IFFALSE 16974
// exit ;
16972: GO 17028
// for i in tmp do
16974: LD_ADDR_VAR 0 1
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: FOR_IN
16985: IFFALSE 17026
// for j := 1 to 4 do
16987: LD_ADDR_VAR 0 3
16991: PUSH
16992: DOUBLE
16993: LD_INT 1
16995: DEC
16996: ST_TO_ADDR
16997: LD_INT 4
16999: PUSH
17000: FOR_TO
17001: IFFALSE 17022
// SetSkill ( i , j , 10 ) ;
17003: LD_VAR 0 1
17007: PPUSH
17008: LD_VAR 0 3
17012: PPUSH
17013: LD_INT 10
17015: PPUSH
17016: CALL_OW 237
17020: GO 17000
17022: POP
17023: POP
17024: GO 16984
17026: POP
17027: POP
// end ;
17028: PPOPN 3
17030: END
// every 0 0$1 trigger s30 do var i , tmp ;
17031: LD_EXP 81
17035: IFFALSE 17104
17037: GO 17039
17039: DISABLE
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: LD_INT 22
17051: PUSH
17052: LD_OWVAR 2
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: ST_TO_ADDR
// if not tmp then
17066: LD_VAR 0 2
17070: NOT
17071: IFFALSE 17075
// exit ;
17073: GO 17104
// for i in tmp do
17075: LD_ADDR_VAR 0 1
17079: PUSH
17080: LD_VAR 0 2
17084: PUSH
17085: FOR_IN
17086: IFFALSE 17102
// SetLives ( i , 300 ) ;
17088: LD_VAR 0 1
17092: PPUSH
17093: LD_INT 300
17095: PPUSH
17096: CALL_OW 234
17100: GO 17085
17102: POP
17103: POP
// end ;
17104: PPOPN 2
17106: END
// every 0 0$1 trigger s60 do var i , tmp ;
17107: LD_EXP 82
17111: IFFALSE 17180
17113: GO 17115
17115: DISABLE
17116: LD_INT 0
17118: PPUSH
17119: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17120: LD_ADDR_VAR 0 2
17124: PUSH
17125: LD_INT 22
17127: PUSH
17128: LD_OWVAR 2
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 69
17141: ST_TO_ADDR
// if not tmp then
17142: LD_VAR 0 2
17146: NOT
17147: IFFALSE 17151
// exit ;
17149: GO 17180
// for i in tmp do
17151: LD_ADDR_VAR 0 1
17155: PUSH
17156: LD_VAR 0 2
17160: PUSH
17161: FOR_IN
17162: IFFALSE 17178
// SetLives ( i , 600 ) ;
17164: LD_VAR 0 1
17168: PPUSH
17169: LD_INT 600
17171: PPUSH
17172: CALL_OW 234
17176: GO 17161
17178: POP
17179: POP
// end ;
17180: PPOPN 2
17182: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17183: LD_INT 0
17185: PPUSH
// case cmd of 301 :
17186: LD_VAR 0 1
17190: PUSH
17191: LD_INT 301
17193: DOUBLE
17194: EQUAL
17195: IFTRUE 17199
17197: GO 17231
17199: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17200: LD_VAR 0 6
17204: PPUSH
17205: LD_VAR 0 7
17209: PPUSH
17210: LD_VAR 0 8
17214: PPUSH
17215: LD_VAR 0 4
17219: PPUSH
17220: LD_VAR 0 5
17224: PPUSH
17225: CALL 18432 0 5
17229: GO 17352
17231: LD_INT 302
17233: DOUBLE
17234: EQUAL
17235: IFTRUE 17239
17237: GO 17276
17239: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17240: LD_VAR 0 6
17244: PPUSH
17245: LD_VAR 0 7
17249: PPUSH
17250: LD_VAR 0 8
17254: PPUSH
17255: LD_VAR 0 9
17259: PPUSH
17260: LD_VAR 0 4
17264: PPUSH
17265: LD_VAR 0 5
17269: PPUSH
17270: CALL 18523 0 6
17274: GO 17352
17276: LD_INT 303
17278: DOUBLE
17279: EQUAL
17280: IFTRUE 17284
17282: GO 17321
17284: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17285: LD_VAR 0 6
17289: PPUSH
17290: LD_VAR 0 7
17294: PPUSH
17295: LD_VAR 0 8
17299: PPUSH
17300: LD_VAR 0 9
17304: PPUSH
17305: LD_VAR 0 4
17309: PPUSH
17310: LD_VAR 0 5
17314: PPUSH
17315: CALL 17357 0 6
17319: GO 17352
17321: LD_INT 304
17323: DOUBLE
17324: EQUAL
17325: IFTRUE 17329
17327: GO 17351
17329: POP
// hHackTeleport ( unit , x , y ) ; end ;
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_VAR 0 4
17339: PPUSH
17340: LD_VAR 0 5
17344: PPUSH
17345: CALL 19116 0 3
17349: GO 17352
17351: POP
// end ;
17352: LD_VAR 0 12
17356: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17357: LD_INT 0
17359: PPUSH
17360: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17361: LD_VAR 0 1
17365: PUSH
17366: LD_INT 1
17368: LESS
17369: PUSH
17370: LD_VAR 0 1
17374: PUSH
17375: LD_INT 3
17377: GREATER
17378: OR
17379: PUSH
17380: LD_VAR 0 5
17384: PPUSH
17385: LD_VAR 0 6
17389: PPUSH
17390: CALL_OW 428
17394: OR
17395: IFFALSE 17399
// exit ;
17397: GO 18119
// uc_side := your_side ;
17399: LD_ADDR_OWVAR 20
17403: PUSH
17404: LD_OWVAR 2
17408: ST_TO_ADDR
// uc_nation := nation ;
17409: LD_ADDR_OWVAR 21
17413: PUSH
17414: LD_VAR 0 1
17418: ST_TO_ADDR
// bc_level = 1 ;
17419: LD_ADDR_OWVAR 43
17423: PUSH
17424: LD_INT 1
17426: ST_TO_ADDR
// case btype of 1 :
17427: LD_VAR 0 2
17431: PUSH
17432: LD_INT 1
17434: DOUBLE
17435: EQUAL
17436: IFTRUE 17440
17438: GO 17451
17440: POP
// bc_type := b_depot ; 2 :
17441: LD_ADDR_OWVAR 42
17445: PUSH
17446: LD_INT 0
17448: ST_TO_ADDR
17449: GO 18063
17451: LD_INT 2
17453: DOUBLE
17454: EQUAL
17455: IFTRUE 17459
17457: GO 17470
17459: POP
// bc_type := b_warehouse ; 3 :
17460: LD_ADDR_OWVAR 42
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
17468: GO 18063
17470: LD_INT 3
17472: DOUBLE
17473: EQUAL
17474: IFTRUE 17478
17476: GO 17489
17478: POP
// bc_type := b_lab ; 4 .. 9 :
17479: LD_ADDR_OWVAR 42
17483: PUSH
17484: LD_INT 6
17486: ST_TO_ADDR
17487: GO 18063
17489: LD_INT 4
17491: DOUBLE
17492: GREATEREQUAL
17493: IFFALSE 17501
17495: LD_INT 9
17497: DOUBLE
17498: LESSEQUAL
17499: IFTRUE 17503
17501: GO 17555
17503: POP
// begin bc_type := b_lab_half ;
17504: LD_ADDR_OWVAR 42
17508: PUSH
17509: LD_INT 7
17511: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17512: LD_ADDR_OWVAR 44
17516: PUSH
17517: LD_INT 10
17519: PUSH
17520: LD_INT 11
17522: PUSH
17523: LD_INT 12
17525: PUSH
17526: LD_INT 15
17528: PUSH
17529: LD_INT 14
17531: PUSH
17532: LD_INT 13
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: LD_VAR 0 2
17547: PUSH
17548: LD_INT 3
17550: MINUS
17551: ARRAY
17552: ST_TO_ADDR
// end ; 10 .. 13 :
17553: GO 18063
17555: LD_INT 10
17557: DOUBLE
17558: GREATEREQUAL
17559: IFFALSE 17567
17561: LD_INT 13
17563: DOUBLE
17564: LESSEQUAL
17565: IFTRUE 17569
17567: GO 17646
17569: POP
// begin bc_type := b_lab_full ;
17570: LD_ADDR_OWVAR 42
17574: PUSH
17575: LD_INT 8
17577: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17578: LD_ADDR_OWVAR 44
17582: PUSH
17583: LD_INT 10
17585: PUSH
17586: LD_INT 12
17588: PUSH
17589: LD_INT 14
17591: PUSH
17592: LD_INT 13
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PUSH
17601: LD_VAR 0 2
17605: PUSH
17606: LD_INT 9
17608: MINUS
17609: ARRAY
17610: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17611: LD_ADDR_OWVAR 45
17615: PUSH
17616: LD_INT 11
17618: PUSH
17619: LD_INT 15
17621: PUSH
17622: LD_INT 12
17624: PUSH
17625: LD_INT 15
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: LD_VAR 0 2
17638: PUSH
17639: LD_INT 9
17641: MINUS
17642: ARRAY
17643: ST_TO_ADDR
// end ; 14 :
17644: GO 18063
17646: LD_INT 14
17648: DOUBLE
17649: EQUAL
17650: IFTRUE 17654
17652: GO 17665
17654: POP
// bc_type := b_workshop ; 15 :
17655: LD_ADDR_OWVAR 42
17659: PUSH
17660: LD_INT 2
17662: ST_TO_ADDR
17663: GO 18063
17665: LD_INT 15
17667: DOUBLE
17668: EQUAL
17669: IFTRUE 17673
17671: GO 17684
17673: POP
// bc_type := b_factory ; 16 :
17674: LD_ADDR_OWVAR 42
17678: PUSH
17679: LD_INT 3
17681: ST_TO_ADDR
17682: GO 18063
17684: LD_INT 16
17686: DOUBLE
17687: EQUAL
17688: IFTRUE 17692
17690: GO 17703
17692: POP
// bc_type := b_ext_gun ; 17 :
17693: LD_ADDR_OWVAR 42
17697: PUSH
17698: LD_INT 17
17700: ST_TO_ADDR
17701: GO 18063
17703: LD_INT 17
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17739
17711: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17712: LD_ADDR_OWVAR 42
17716: PUSH
17717: LD_INT 19
17719: PUSH
17720: LD_INT 23
17722: PUSH
17723: LD_INT 19
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: PUSH
17731: LD_VAR 0 1
17735: ARRAY
17736: ST_TO_ADDR
17737: GO 18063
17739: LD_INT 18
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17758
17747: POP
// bc_type := b_ext_radar ; 19 :
17748: LD_ADDR_OWVAR 42
17752: PUSH
17753: LD_INT 20
17755: ST_TO_ADDR
17756: GO 18063
17758: LD_INT 19
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17777
17766: POP
// bc_type := b_ext_radio ; 20 :
17767: LD_ADDR_OWVAR 42
17771: PUSH
17772: LD_INT 22
17774: ST_TO_ADDR
17775: GO 18063
17777: LD_INT 20
17779: DOUBLE
17780: EQUAL
17781: IFTRUE 17785
17783: GO 17796
17785: POP
// bc_type := b_ext_siberium ; 21 :
17786: LD_ADDR_OWVAR 42
17790: PUSH
17791: LD_INT 21
17793: ST_TO_ADDR
17794: GO 18063
17796: LD_INT 21
17798: DOUBLE
17799: EQUAL
17800: IFTRUE 17804
17802: GO 17815
17804: POP
// bc_type := b_ext_computer ; 22 :
17805: LD_ADDR_OWVAR 42
17809: PUSH
17810: LD_INT 24
17812: ST_TO_ADDR
17813: GO 18063
17815: LD_INT 22
17817: DOUBLE
17818: EQUAL
17819: IFTRUE 17823
17821: GO 17834
17823: POP
// bc_type := b_ext_track ; 23 :
17824: LD_ADDR_OWVAR 42
17828: PUSH
17829: LD_INT 16
17831: ST_TO_ADDR
17832: GO 18063
17834: LD_INT 23
17836: DOUBLE
17837: EQUAL
17838: IFTRUE 17842
17840: GO 17853
17842: POP
// bc_type := b_ext_laser ; 24 :
17843: LD_ADDR_OWVAR 42
17847: PUSH
17848: LD_INT 25
17850: ST_TO_ADDR
17851: GO 18063
17853: LD_INT 24
17855: DOUBLE
17856: EQUAL
17857: IFTRUE 17861
17859: GO 17872
17861: POP
// bc_type := b_control_tower ; 25 :
17862: LD_ADDR_OWVAR 42
17866: PUSH
17867: LD_INT 36
17869: ST_TO_ADDR
17870: GO 18063
17872: LD_INT 25
17874: DOUBLE
17875: EQUAL
17876: IFTRUE 17880
17878: GO 17891
17880: POP
// bc_type := b_breastwork ; 26 :
17881: LD_ADDR_OWVAR 42
17885: PUSH
17886: LD_INT 31
17888: ST_TO_ADDR
17889: GO 18063
17891: LD_INT 26
17893: DOUBLE
17894: EQUAL
17895: IFTRUE 17899
17897: GO 17910
17899: POP
// bc_type := b_bunker ; 27 :
17900: LD_ADDR_OWVAR 42
17904: PUSH
17905: LD_INT 32
17907: ST_TO_ADDR
17908: GO 18063
17910: LD_INT 27
17912: DOUBLE
17913: EQUAL
17914: IFTRUE 17918
17916: GO 17929
17918: POP
// bc_type := b_turret ; 28 :
17919: LD_ADDR_OWVAR 42
17923: PUSH
17924: LD_INT 33
17926: ST_TO_ADDR
17927: GO 18063
17929: LD_INT 28
17931: DOUBLE
17932: EQUAL
17933: IFTRUE 17937
17935: GO 17948
17937: POP
// bc_type := b_armoury ; 29 :
17938: LD_ADDR_OWVAR 42
17942: PUSH
17943: LD_INT 4
17945: ST_TO_ADDR
17946: GO 18063
17948: LD_INT 29
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 17967
17956: POP
// bc_type := b_barracks ; 30 :
17957: LD_ADDR_OWVAR 42
17961: PUSH
17962: LD_INT 5
17964: ST_TO_ADDR
17965: GO 18063
17967: LD_INT 30
17969: DOUBLE
17970: EQUAL
17971: IFTRUE 17975
17973: GO 17986
17975: POP
// bc_type := b_solar_power ; 31 :
17976: LD_ADDR_OWVAR 42
17980: PUSH
17981: LD_INT 27
17983: ST_TO_ADDR
17984: GO 18063
17986: LD_INT 31
17988: DOUBLE
17989: EQUAL
17990: IFTRUE 17994
17992: GO 18005
17994: POP
// bc_type := b_oil_power ; 32 :
17995: LD_ADDR_OWVAR 42
17999: PUSH
18000: LD_INT 26
18002: ST_TO_ADDR
18003: GO 18063
18005: LD_INT 32
18007: DOUBLE
18008: EQUAL
18009: IFTRUE 18013
18011: GO 18024
18013: POP
// bc_type := b_siberite_power ; 33 :
18014: LD_ADDR_OWVAR 42
18018: PUSH
18019: LD_INT 28
18021: ST_TO_ADDR
18022: GO 18063
18024: LD_INT 33
18026: DOUBLE
18027: EQUAL
18028: IFTRUE 18032
18030: GO 18043
18032: POP
// bc_type := b_oil_mine ; 34 :
18033: LD_ADDR_OWVAR 42
18037: PUSH
18038: LD_INT 29
18040: ST_TO_ADDR
18041: GO 18063
18043: LD_INT 34
18045: DOUBLE
18046: EQUAL
18047: IFTRUE 18051
18049: GO 18062
18051: POP
// bc_type := b_siberite_mine ; end ;
18052: LD_ADDR_OWVAR 42
18056: PUSH
18057: LD_INT 30
18059: ST_TO_ADDR
18060: GO 18063
18062: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18063: LD_ADDR_VAR 0 8
18067: PUSH
18068: LD_VAR 0 5
18072: PPUSH
18073: LD_VAR 0 6
18077: PPUSH
18078: LD_VAR 0 3
18082: PPUSH
18083: CALL_OW 47
18087: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18088: LD_OWVAR 42
18092: PUSH
18093: LD_INT 32
18095: PUSH
18096: LD_INT 33
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: IN
18103: IFFALSE 18119
// PlaceWeaponTurret ( b , weapon ) ;
18105: LD_VAR 0 8
18109: PPUSH
18110: LD_VAR 0 4
18114: PPUSH
18115: CALL_OW 431
// end ;
18119: LD_VAR 0 7
18123: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18124: LD_INT 0
18126: PPUSH
18127: PPUSH
18128: PPUSH
18129: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18130: LD_ADDR_VAR 0 4
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_OWVAR 2
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 30
18152: PUSH
18153: LD_INT 0
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 30
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: ST_TO_ADDR
// if not tmp then
18184: LD_VAR 0 4
18188: NOT
18189: IFFALSE 18193
// exit ;
18191: GO 18252
// for i in tmp do
18193: LD_ADDR_VAR 0 2
18197: PUSH
18198: LD_VAR 0 4
18202: PUSH
18203: FOR_IN
18204: IFFALSE 18250
// for j = 1 to 3 do
18206: LD_ADDR_VAR 0 3
18210: PUSH
18211: DOUBLE
18212: LD_INT 1
18214: DEC
18215: ST_TO_ADDR
18216: LD_INT 3
18218: PUSH
18219: FOR_TO
18220: IFFALSE 18246
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18222: LD_VAR 0 2
18226: PPUSH
18227: CALL_OW 274
18231: PPUSH
18232: LD_VAR 0 3
18236: PPUSH
18237: LD_INT 99999
18239: PPUSH
18240: CALL_OW 277
18244: GO 18219
18246: POP
18247: POP
18248: GO 18203
18250: POP
18251: POP
// end ;
18252: LD_VAR 0 1
18256: RET
// export function hHackSetLevel10 ; var i , j ; begin
18257: LD_INT 0
18259: PPUSH
18260: PPUSH
18261: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18262: LD_ADDR_VAR 0 2
18266: PUSH
18267: LD_INT 21
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PPUSH
18277: CALL_OW 69
18281: PUSH
18282: FOR_IN
18283: IFFALSE 18335
// if IsSelected ( i ) then
18285: LD_VAR 0 2
18289: PPUSH
18290: CALL_OW 306
18294: IFFALSE 18333
// begin for j := 1 to 4 do
18296: LD_ADDR_VAR 0 3
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_INT 4
18308: PUSH
18309: FOR_TO
18310: IFFALSE 18331
// SetSkill ( i , j , 10 ) ;
18312: LD_VAR 0 2
18316: PPUSH
18317: LD_VAR 0 3
18321: PPUSH
18322: LD_INT 10
18324: PPUSH
18325: CALL_OW 237
18329: GO 18309
18331: POP
18332: POP
// end ;
18333: GO 18282
18335: POP
18336: POP
// end ;
18337: LD_VAR 0 1
18341: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18342: LD_INT 0
18344: PPUSH
18345: PPUSH
18346: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18347: LD_ADDR_VAR 0 2
18351: PUSH
18352: LD_INT 22
18354: PUSH
18355: LD_OWVAR 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 21
18366: PUSH
18367: LD_INT 1
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PPUSH
18378: CALL_OW 69
18382: PUSH
18383: FOR_IN
18384: IFFALSE 18425
// begin for j := 1 to 4 do
18386: LD_ADDR_VAR 0 3
18390: PUSH
18391: DOUBLE
18392: LD_INT 1
18394: DEC
18395: ST_TO_ADDR
18396: LD_INT 4
18398: PUSH
18399: FOR_TO
18400: IFFALSE 18421
// SetSkill ( i , j , 10 ) ;
18402: LD_VAR 0 2
18406: PPUSH
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_INT 10
18414: PPUSH
18415: CALL_OW 237
18419: GO 18399
18421: POP
18422: POP
// end ;
18423: GO 18383
18425: POP
18426: POP
// end ;
18427: LD_VAR 0 1
18431: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18432: LD_INT 0
18434: PPUSH
// uc_side := your_side ;
18435: LD_ADDR_OWVAR 20
18439: PUSH
18440: LD_OWVAR 2
18444: ST_TO_ADDR
// uc_nation := nation ;
18445: LD_ADDR_OWVAR 21
18449: PUSH
18450: LD_VAR 0 1
18454: ST_TO_ADDR
// InitHc ;
18455: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18459: LD_INT 0
18461: PPUSH
18462: LD_VAR 0 2
18466: PPUSH
18467: LD_VAR 0 3
18471: PPUSH
18472: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18476: LD_VAR 0 4
18480: PPUSH
18481: LD_VAR 0 5
18485: PPUSH
18486: CALL_OW 428
18490: PUSH
18491: LD_INT 0
18493: EQUAL
18494: IFFALSE 18518
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18496: CALL_OW 44
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: LD_VAR 0 5
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: CALL_OW 48
// end ;
18518: LD_VAR 0 6
18522: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
// uc_side := your_side ;
18527: LD_ADDR_OWVAR 20
18531: PUSH
18532: LD_OWVAR 2
18536: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18537: LD_VAR 0 1
18541: PUSH
18542: LD_INT 1
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 3
18550: PUSH
18551: LD_INT 4
18553: PUSH
18554: LD_INT 5
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: IN
18564: IFFALSE 18576
// uc_nation := nation_american else
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 1
18573: ST_TO_ADDR
18574: GO 18619
// if chassis in [ 11 , 12 , 13 , 14 ] then
18576: LD_VAR 0 1
18580: PUSH
18581: LD_INT 11
18583: PUSH
18584: LD_INT 12
18586: PUSH
18587: LD_INT 13
18589: PUSH
18590: LD_INT 14
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: IN
18599: IFFALSE 18611
// uc_nation := nation_arabian else
18601: LD_ADDR_OWVAR 21
18605: PUSH
18606: LD_INT 2
18608: ST_TO_ADDR
18609: GO 18619
// uc_nation := nation_russian ;
18611: LD_ADDR_OWVAR 21
18615: PUSH
18616: LD_INT 3
18618: ST_TO_ADDR
// vc_chassis := chassis ;
18619: LD_ADDR_OWVAR 37
18623: PUSH
18624: LD_VAR 0 1
18628: ST_TO_ADDR
// vc_engine := engine ;
18629: LD_ADDR_OWVAR 39
18633: PUSH
18634: LD_VAR 0 2
18638: ST_TO_ADDR
// vc_control := control ;
18639: LD_ADDR_OWVAR 38
18643: PUSH
18644: LD_VAR 0 3
18648: ST_TO_ADDR
// vc_weapon := weapon ;
18649: LD_ADDR_OWVAR 40
18653: PUSH
18654: LD_VAR 0 4
18658: ST_TO_ADDR
// un := CreateVehicle ;
18659: LD_ADDR_VAR 0 8
18663: PUSH
18664: CALL_OW 45
18668: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18669: LD_VAR 0 8
18673: PPUSH
18674: LD_INT 0
18676: PPUSH
18677: LD_INT 5
18679: PPUSH
18680: CALL_OW 12
18684: PPUSH
18685: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18689: LD_VAR 0 8
18693: PPUSH
18694: LD_VAR 0 5
18698: PPUSH
18699: LD_VAR 0 6
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL_OW 48
// end ;
18711: LD_VAR 0 7
18715: RET
// export hInvincible ; every 1 do
18716: GO 18718
18718: DISABLE
// hInvincible := [ ] ;
18719: LD_ADDR_EXP 83
18723: PUSH
18724: EMPTY
18725: ST_TO_ADDR
18726: END
// every 10 do var i ;
18727: GO 18729
18729: DISABLE
18730: LD_INT 0
18732: PPUSH
// begin enable ;
18733: ENABLE
// if not hInvincible then
18734: LD_EXP 83
18738: NOT
18739: IFFALSE 18743
// exit ;
18741: GO 18787
// for i in hInvincible do
18743: LD_ADDR_VAR 0 1
18747: PUSH
18748: LD_EXP 83
18752: PUSH
18753: FOR_IN
18754: IFFALSE 18785
// if GetLives ( i ) < 1000 then
18756: LD_VAR 0 1
18760: PPUSH
18761: CALL_OW 256
18765: PUSH
18766: LD_INT 1000
18768: LESS
18769: IFFALSE 18783
// SetLives ( i , 1000 ) ;
18771: LD_VAR 0 1
18775: PPUSH
18776: LD_INT 1000
18778: PPUSH
18779: CALL_OW 234
18783: GO 18753
18785: POP
18786: POP
// end ;
18787: PPOPN 1
18789: END
// export function hHackInvincible ; var i ; begin
18790: LD_INT 0
18792: PPUSH
18793: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: LD_INT 21
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 21
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: LIST
18826: PPUSH
18827: CALL_OW 69
18831: PUSH
18832: FOR_IN
18833: IFFALSE 18894
// if IsSelected ( i ) then
18835: LD_VAR 0 2
18839: PPUSH
18840: CALL_OW 306
18844: IFFALSE 18892
// begin if i in hInvincible then
18846: LD_VAR 0 2
18850: PUSH
18851: LD_EXP 83
18855: IN
18856: IFFALSE 18876
// hInvincible := hInvincible diff i else
18858: LD_ADDR_EXP 83
18862: PUSH
18863: LD_EXP 83
18867: PUSH
18868: LD_VAR 0 2
18872: DIFF
18873: ST_TO_ADDR
18874: GO 18892
// hInvincible := hInvincible union i ;
18876: LD_ADDR_EXP 83
18880: PUSH
18881: LD_EXP 83
18885: PUSH
18886: LD_VAR 0 2
18890: UNION
18891: ST_TO_ADDR
// end ;
18892: GO 18832
18894: POP
18895: POP
// end ;
18896: LD_VAR 0 1
18900: RET
// export function hHackInvisible ; var i , j ; begin
18901: LD_INT 0
18903: PPUSH
18904: PPUSH
18905: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18906: LD_ADDR_VAR 0 2
18910: PUSH
18911: LD_INT 21
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18951
// if IsSelected ( i ) then
18929: LD_VAR 0 2
18933: PPUSH
18934: CALL_OW 306
18938: IFFALSE 18949
// ComForceInvisible ( i ) ;
18940: LD_VAR 0 2
18944: PPUSH
18945: CALL_OW 496
18949: GO 18926
18951: POP
18952: POP
// end ;
18953: LD_VAR 0 1
18957: RET
// export function hHackChangeYourSide ; begin
18958: LD_INT 0
18960: PPUSH
// if your_side = 8 then
18961: LD_OWVAR 2
18965: PUSH
18966: LD_INT 8
18968: EQUAL
18969: IFFALSE 18981
// your_side := 0 else
18971: LD_ADDR_OWVAR 2
18975: PUSH
18976: LD_INT 0
18978: ST_TO_ADDR
18979: GO 18995
// your_side := your_side + 1 ;
18981: LD_ADDR_OWVAR 2
18985: PUSH
18986: LD_OWVAR 2
18990: PUSH
18991: LD_INT 1
18993: PLUS
18994: ST_TO_ADDR
// end ;
18995: LD_VAR 0 1
18999: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19000: LD_INT 0
19002: PPUSH
19003: PPUSH
19004: PPUSH
// for i in all_units do
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: LD_OWVAR 3
19014: PUSH
19015: FOR_IN
19016: IFFALSE 19094
// if IsSelected ( i ) then
19018: LD_VAR 0 2
19022: PPUSH
19023: CALL_OW 306
19027: IFFALSE 19092
// begin j := GetSide ( i ) ;
19029: LD_ADDR_VAR 0 3
19033: PUSH
19034: LD_VAR 0 2
19038: PPUSH
19039: CALL_OW 255
19043: ST_TO_ADDR
// if j = 8 then
19044: LD_VAR 0 3
19048: PUSH
19049: LD_INT 8
19051: EQUAL
19052: IFFALSE 19064
// j := 0 else
19054: LD_ADDR_VAR 0 3
19058: PUSH
19059: LD_INT 0
19061: ST_TO_ADDR
19062: GO 19078
// j := j + 1 ;
19064: LD_ADDR_VAR 0 3
19068: PUSH
19069: LD_VAR 0 3
19073: PUSH
19074: LD_INT 1
19076: PLUS
19077: ST_TO_ADDR
// SetSide ( i , j ) ;
19078: LD_VAR 0 2
19082: PPUSH
19083: LD_VAR 0 3
19087: PPUSH
19088: CALL_OW 235
// end ;
19092: GO 19015
19094: POP
19095: POP
// end ;
19096: LD_VAR 0 1
19100: RET
// export function hHackFog ; begin
19101: LD_INT 0
19103: PPUSH
// FogOff ( true ) ;
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 344
// end ;
19111: LD_VAR 0 1
19115: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19116: LD_INT 0
19118: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19119: LD_VAR 0 1
19123: PPUSH
19124: LD_VAR 0 2
19128: PPUSH
19129: LD_VAR 0 3
19133: PPUSH
19134: LD_INT 1
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 483
// CenterOnXY ( x , y ) ;
19144: LD_VAR 0 2
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: CALL_OW 84
// end ; end_of_file
19158: LD_VAR 0 4
19162: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19163: LD_INT 0
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19169: LD_VAR 0 1
19173: PPUSH
19174: CALL_OW 264
19178: PUSH
19179: LD_EXP 11
19183: EQUAL
19184: IFFALSE 19256
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19186: LD_INT 68
19188: PPUSH
19189: LD_VAR 0 1
19193: PPUSH
19194: CALL_OW 255
19198: PPUSH
19199: CALL_OW 321
19203: PUSH
19204: LD_INT 2
19206: EQUAL
19207: IFFALSE 19219
// eff := 70 else
19209: LD_ADDR_VAR 0 4
19213: PUSH
19214: LD_INT 70
19216: ST_TO_ADDR
19217: GO 19227
// eff := 30 ;
19219: LD_ADDR_VAR 0 4
19223: PUSH
19224: LD_INT 30
19226: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19227: LD_VAR 0 1
19231: PPUSH
19232: CALL_OW 250
19236: PPUSH
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 251
19246: PPUSH
19247: LD_VAR 0 4
19251: PPUSH
19252: CALL_OW 495
// end ; end ;
19256: LD_VAR 0 2
19260: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19261: LD_INT 0
19263: PPUSH
// end ;
19264: LD_VAR 0 4
19268: RET
// export function SOS_Command ( cmd ) ; begin
19269: LD_INT 0
19271: PPUSH
// end ;
19272: LD_VAR 0 2
19276: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
19277: LD_INT 0
19279: PPUSH
// end ;
19280: LD_VAR 0 6
19284: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
19285: LD_INT 0
19287: PPUSH
19288: PPUSH
// if not vehicle or not factory then
19289: LD_VAR 0 1
19293: NOT
19294: PUSH
19295: LD_VAR 0 2
19299: NOT
19300: OR
19301: IFFALSE 19305
// exit ;
19303: GO 19536
// if factoryWaypoints >= factory then
19305: LD_EXP 84
19309: PUSH
19310: LD_VAR 0 2
19314: GREATEREQUAL
19315: IFFALSE 19536
// if factoryWaypoints [ factory ] then
19317: LD_EXP 84
19321: PUSH
19322: LD_VAR 0 2
19326: ARRAY
19327: IFFALSE 19536
// begin if GetControl ( vehicle ) = control_manual then
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL_OW 263
19338: PUSH
19339: LD_INT 1
19341: EQUAL
19342: IFFALSE 19423
// begin driver := IsDrivenBy ( vehicle ) ;
19344: LD_ADDR_VAR 0 4
19348: PUSH
19349: LD_VAR 0 1
19353: PPUSH
19354: CALL_OW 311
19358: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19359: LD_VAR 0 4
19363: PPUSH
19364: LD_EXP 84
19368: PUSH
19369: LD_VAR 0 2
19373: ARRAY
19374: PUSH
19375: LD_INT 1
19377: ARRAY
19378: PPUSH
19379: LD_EXP 84
19383: PUSH
19384: LD_VAR 0 2
19388: ARRAY
19389: PUSH
19390: LD_INT 2
19392: ARRAY
19393: PPUSH
19394: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19398: LD_VAR 0 4
19402: PPUSH
19403: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
19407: LD_VAR 0 4
19411: PPUSH
19412: LD_VAR 0 2
19416: PPUSH
19417: CALL_OW 180
// end else
19421: GO 19536
// if GetControl ( vehicle ) = control_remote then
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 263
19432: PUSH
19433: LD_INT 2
19435: EQUAL
19436: IFFALSE 19497
// begin wait ( 0 0$2 ) ;
19438: LD_INT 70
19440: PPUSH
19441: CALL_OW 67
// if Connect ( vehicle ) then
19445: LD_VAR 0 1
19449: PPUSH
19450: CALL 31760 0 1
19454: IFFALSE 19495
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19456: LD_VAR 0 1
19460: PPUSH
19461: LD_EXP 84
19465: PUSH
19466: LD_VAR 0 2
19470: ARRAY
19471: PUSH
19472: LD_INT 1
19474: ARRAY
19475: PPUSH
19476: LD_EXP 84
19480: PUSH
19481: LD_VAR 0 2
19485: ARRAY
19486: PUSH
19487: LD_INT 2
19489: ARRAY
19490: PPUSH
19491: CALL_OW 171
// end else
19495: GO 19536
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
19497: LD_VAR 0 1
19501: PPUSH
19502: LD_EXP 84
19506: PUSH
19507: LD_VAR 0 2
19511: ARRAY
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: LD_EXP 84
19521: PUSH
19522: LD_VAR 0 2
19526: ARRAY
19527: PUSH
19528: LD_INT 2
19530: ARRAY
19531: PPUSH
19532: CALL_OW 171
// end ; end ;
19536: LD_VAR 0 3
19540: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
19541: LD_INT 0
19543: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
19544: LD_VAR 0 1
19548: PUSH
19549: LD_INT 250
19551: EQUAL
19552: PUSH
19553: LD_VAR 0 2
19557: PPUSH
19558: CALL_OW 264
19562: PUSH
19563: LD_EXP 14
19567: EQUAL
19568: AND
19569: IFFALSE 19590
// MinerPlaceMine ( unit , x , y ) ;
19571: LD_VAR 0 2
19575: PPUSH
19576: LD_VAR 0 4
19580: PPUSH
19581: LD_VAR 0 5
19585: PPUSH
19586: CALL 22318 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
19590: LD_VAR 0 1
19594: PUSH
19595: LD_INT 251
19597: EQUAL
19598: PUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: CALL_OW 264
19608: PUSH
19609: LD_EXP 14
19613: EQUAL
19614: AND
19615: IFFALSE 19636
// MinerDetonateMine ( unit , x , y ) ;
19617: LD_VAR 0 2
19621: PPUSH
19622: LD_VAR 0 4
19626: PPUSH
19627: LD_VAR 0 5
19631: PPUSH
19632: CALL 22595 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
19636: LD_VAR 0 1
19640: PUSH
19641: LD_INT 252
19643: EQUAL
19644: PUSH
19645: LD_VAR 0 2
19649: PPUSH
19650: CALL_OW 264
19654: PUSH
19655: LD_EXP 14
19659: EQUAL
19660: AND
19661: IFFALSE 19682
// MinerCreateMinefield ( unit , x , y ) ;
19663: LD_VAR 0 2
19667: PPUSH
19668: LD_VAR 0 4
19672: PPUSH
19673: LD_VAR 0 5
19677: PPUSH
19678: CALL 23012 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
19682: LD_VAR 0 1
19686: PUSH
19687: LD_INT 253
19689: EQUAL
19690: PUSH
19691: LD_VAR 0 2
19695: PPUSH
19696: CALL_OW 257
19700: PUSH
19701: LD_INT 5
19703: EQUAL
19704: AND
19705: IFFALSE 19726
// ComBinocular ( unit , x , y ) ;
19707: LD_VAR 0 2
19711: PPUSH
19712: LD_VAR 0 4
19716: PPUSH
19717: LD_VAR 0 5
19721: PPUSH
19722: CALL 23383 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19726: LD_VAR 0 1
19730: PUSH
19731: LD_INT 254
19733: EQUAL
19734: PUSH
19735: LD_VAR 0 2
19739: PPUSH
19740: CALL_OW 264
19744: PUSH
19745: LD_EXP 9
19749: EQUAL
19750: AND
19751: PUSH
19752: LD_VAR 0 3
19756: PPUSH
19757: CALL_OW 263
19761: PUSH
19762: LD_INT 3
19764: EQUAL
19765: AND
19766: IFFALSE 19782
// HackDestroyVehicle ( unit , selectedUnit ) ;
19768: LD_VAR 0 2
19772: PPUSH
19773: LD_VAR 0 3
19777: PPUSH
19778: CALL 21678 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19782: LD_VAR 0 1
19786: PUSH
19787: LD_INT 255
19789: EQUAL
19790: PUSH
19791: LD_VAR 0 2
19795: PPUSH
19796: CALL_OW 264
19800: PUSH
19801: LD_INT 14
19803: PUSH
19804: LD_INT 53
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: IN
19811: AND
19812: PUSH
19813: LD_VAR 0 4
19817: PPUSH
19818: LD_VAR 0 5
19822: PPUSH
19823: CALL_OW 488
19827: AND
19828: IFFALSE 19852
// CutTreeXYR ( unit , x , y , 12 ) ;
19830: LD_VAR 0 2
19834: PPUSH
19835: LD_VAR 0 4
19839: PPUSH
19840: LD_VAR 0 5
19844: PPUSH
19845: LD_INT 12
19847: PPUSH
19848: CALL 20244 0 4
// if cmd = 256 then
19852: LD_VAR 0 1
19856: PUSH
19857: LD_INT 256
19859: EQUAL
19860: IFFALSE 19881
// SetFactoryWaypoint ( unit , x , y ) ;
19862: LD_VAR 0 2
19866: PPUSH
19867: LD_VAR 0 4
19871: PPUSH
19872: LD_VAR 0 5
19876: PPUSH
19877: CALL 19886 0 3
// end ;
19881: LD_VAR 0 6
19885: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19886: LD_INT 0
19888: PPUSH
19889: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19890: LD_VAR 0 1
19894: NOT
19895: PUSH
19896: LD_VAR 0 2
19900: PPUSH
19901: LD_VAR 0 3
19905: PPUSH
19906: CALL_OW 488
19910: NOT
19911: OR
19912: PUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 266
19922: PUSH
19923: LD_INT 3
19925: NONEQUAL
19926: PUSH
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 247
19936: PUSH
19937: LD_INT 1
19939: EQUAL
19940: NOT
19941: AND
19942: OR
19943: IFFALSE 19947
// exit ;
19945: GO 20096
// if GetType ( factory ) = unit_human then
19947: LD_VAR 0 1
19951: PPUSH
19952: CALL_OW 247
19956: PUSH
19957: LD_INT 1
19959: EQUAL
19960: IFFALSE 19977
// factory := IsInUnit ( factory ) ;
19962: LD_ADDR_VAR 0 1
19966: PUSH
19967: LD_VAR 0 1
19971: PPUSH
19972: CALL_OW 310
19976: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 266
19986: PUSH
19987: LD_INT 3
19989: NONEQUAL
19990: IFFALSE 19994
// exit ;
19992: GO 20096
// if HexInfo ( x , y ) = factory then
19994: LD_VAR 0 2
19998: PPUSH
19999: LD_VAR 0 3
20003: PPUSH
20004: CALL_OW 428
20008: PUSH
20009: LD_VAR 0 1
20013: EQUAL
20014: IFFALSE 20041
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
20016: LD_ADDR_EXP 84
20020: PUSH
20021: LD_EXP 84
20025: PPUSH
20026: LD_VAR 0 1
20030: PPUSH
20031: LD_INT 0
20033: PPUSH
20034: CALL_OW 1
20038: ST_TO_ADDR
20039: GO 20092
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
20041: LD_ADDR_EXP 84
20045: PUSH
20046: LD_EXP 84
20050: PPUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 255
20065: PUSH
20066: LD_VAR 0 1
20070: PUSH
20071: LD_VAR 0 2
20075: PUSH
20076: LD_VAR 0 3
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: PPUSH
20087: CALL_OW 1
20091: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20092: CALL 20101 0 0
// end ;
20096: LD_VAR 0 4
20100: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
20101: LD_INT 0
20103: PPUSH
20104: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20105: LD_STRING resetFactoryWaypoint();
20107: PPUSH
20108: CALL_OW 559
// if factoryWaypoints then
20112: LD_EXP 84
20116: IFFALSE 20239
// begin for i := 1 to factoryWaypoints do
20118: LD_ADDR_VAR 0 2
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_EXP 84
20132: PUSH
20133: FOR_TO
20134: IFFALSE 20237
// if factoryWaypoints [ i ] then
20136: LD_EXP 84
20140: PUSH
20141: LD_VAR 0 2
20145: ARRAY
20146: IFFALSE 20235
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
20148: LD_STRING setFactoryWaypointXY(
20150: PUSH
20151: LD_EXP 84
20155: PUSH
20156: LD_VAR 0 2
20160: ARRAY
20161: PUSH
20162: LD_INT 1
20164: ARRAY
20165: STR
20166: PUSH
20167: LD_STRING ,
20169: STR
20170: PUSH
20171: LD_EXP 84
20175: PUSH
20176: LD_VAR 0 2
20180: ARRAY
20181: PUSH
20182: LD_INT 2
20184: ARRAY
20185: STR
20186: PUSH
20187: LD_STRING ,
20189: STR
20190: PUSH
20191: LD_EXP 84
20195: PUSH
20196: LD_VAR 0 2
20200: ARRAY
20201: PUSH
20202: LD_INT 3
20204: ARRAY
20205: STR
20206: PUSH
20207: LD_STRING ,
20209: STR
20210: PUSH
20211: LD_EXP 84
20215: PUSH
20216: LD_VAR 0 2
20220: ARRAY
20221: PUSH
20222: LD_INT 4
20224: ARRAY
20225: STR
20226: PUSH
20227: LD_STRING )
20229: STR
20230: PPUSH
20231: CALL_OW 559
20235: GO 20133
20237: POP
20238: POP
// end ; end ;
20239: LD_VAR 0 1
20243: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20244: LD_INT 0
20246: PPUSH
20247: PPUSH
20248: PPUSH
20249: PPUSH
20250: PPUSH
20251: PPUSH
20252: PPUSH
20253: PPUSH
20254: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20255: LD_VAR 0 1
20259: NOT
20260: PUSH
20261: LD_VAR 0 2
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: CALL_OW 488
20275: NOT
20276: OR
20277: PUSH
20278: LD_VAR 0 4
20282: NOT
20283: OR
20284: IFFALSE 20288
// exit ;
20286: GO 20628
// list := [ ] ;
20288: LD_ADDR_VAR 0 13
20292: PUSH
20293: EMPTY
20294: ST_TO_ADDR
// if x - r < 0 then
20295: LD_VAR 0 2
20299: PUSH
20300: LD_VAR 0 4
20304: MINUS
20305: PUSH
20306: LD_INT 0
20308: LESS
20309: IFFALSE 20321
// min_x := 0 else
20311: LD_ADDR_VAR 0 7
20315: PUSH
20316: LD_INT 0
20318: ST_TO_ADDR
20319: GO 20337
// min_x := x - r ;
20321: LD_ADDR_VAR 0 7
20325: PUSH
20326: LD_VAR 0 2
20330: PUSH
20331: LD_VAR 0 4
20335: MINUS
20336: ST_TO_ADDR
// if y - r < 0 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_VAR 0 4
20346: MINUS
20347: PUSH
20348: LD_INT 0
20350: LESS
20351: IFFALSE 20363
// min_y := 0 else
20353: LD_ADDR_VAR 0 8
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
20361: GO 20379
// min_y := y - r ;
20363: LD_ADDR_VAR 0 8
20367: PUSH
20368: LD_VAR 0 3
20372: PUSH
20373: LD_VAR 0 4
20377: MINUS
20378: ST_TO_ADDR
// max_x := x + r ;
20379: LD_ADDR_VAR 0 9
20383: PUSH
20384: LD_VAR 0 2
20388: PUSH
20389: LD_VAR 0 4
20393: PLUS
20394: ST_TO_ADDR
// max_y := y + r ;
20395: LD_ADDR_VAR 0 10
20399: PUSH
20400: LD_VAR 0 3
20404: PUSH
20405: LD_VAR 0 4
20409: PLUS
20410: ST_TO_ADDR
// for _x = min_x to max_x do
20411: LD_ADDR_VAR 0 11
20415: PUSH
20416: DOUBLE
20417: LD_VAR 0 7
20421: DEC
20422: ST_TO_ADDR
20423: LD_VAR 0 9
20427: PUSH
20428: FOR_TO
20429: IFFALSE 20546
// for _y = min_y to max_y do
20431: LD_ADDR_VAR 0 12
20435: PUSH
20436: DOUBLE
20437: LD_VAR 0 8
20441: DEC
20442: ST_TO_ADDR
20443: LD_VAR 0 10
20447: PUSH
20448: FOR_TO
20449: IFFALSE 20542
// begin if not ValidHex ( _x , _y ) then
20451: LD_VAR 0 11
20455: PPUSH
20456: LD_VAR 0 12
20460: PPUSH
20461: CALL_OW 488
20465: NOT
20466: IFFALSE 20470
// continue ;
20468: GO 20448
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20470: LD_VAR 0 11
20474: PPUSH
20475: LD_VAR 0 12
20479: PPUSH
20480: CALL_OW 351
20484: PUSH
20485: LD_VAR 0 11
20489: PPUSH
20490: LD_VAR 0 12
20494: PPUSH
20495: CALL_OW 554
20499: AND
20500: IFFALSE 20540
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20502: LD_ADDR_VAR 0 13
20506: PUSH
20507: LD_VAR 0 13
20511: PPUSH
20512: LD_VAR 0 13
20516: PUSH
20517: LD_INT 1
20519: PLUS
20520: PPUSH
20521: LD_VAR 0 11
20525: PUSH
20526: LD_VAR 0 12
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 2
20539: ST_TO_ADDR
// end ;
20540: GO 20448
20542: POP
20543: POP
20544: GO 20428
20546: POP
20547: POP
// if not list then
20548: LD_VAR 0 13
20552: NOT
20553: IFFALSE 20557
// exit ;
20555: GO 20628
// for i in list do
20557: LD_ADDR_VAR 0 6
20561: PUSH
20562: LD_VAR 0 13
20566: PUSH
20567: FOR_IN
20568: IFFALSE 20626
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20570: LD_VAR 0 1
20574: PPUSH
20575: LD_STRING M
20577: PUSH
20578: LD_VAR 0 6
20582: PUSH
20583: LD_INT 1
20585: ARRAY
20586: PUSH
20587: LD_VAR 0 6
20591: PUSH
20592: LD_INT 2
20594: ARRAY
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: PPUSH
20620: CALL_OW 447
20624: GO 20567
20626: POP
20627: POP
// end ;
20628: LD_VAR 0 5
20632: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20633: LD_EXP 85
20637: NOT
20638: IFFALSE 20688
20640: GO 20642
20642: DISABLE
// begin initHack := true ;
20643: LD_ADDR_EXP 85
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// hackTanks := [ ] ;
20651: LD_ADDR_EXP 86
20655: PUSH
20656: EMPTY
20657: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20658: LD_ADDR_EXP 87
20662: PUSH
20663: EMPTY
20664: ST_TO_ADDR
// hackLimit := 3 ;
20665: LD_ADDR_EXP 88
20669: PUSH
20670: LD_INT 3
20672: ST_TO_ADDR
// hackDist := 12 ;
20673: LD_ADDR_EXP 89
20677: PUSH
20678: LD_INT 12
20680: ST_TO_ADDR
// hackCounter := [ ] ;
20681: LD_ADDR_EXP 90
20685: PUSH
20686: EMPTY
20687: ST_TO_ADDR
// end ;
20688: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20689: LD_EXP 85
20693: PUSH
20694: LD_INT 34
20696: PUSH
20697: LD_EXP 9
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PPUSH
20706: CALL_OW 69
20710: AND
20711: IFFALSE 20966
20713: GO 20715
20715: DISABLE
20716: LD_INT 0
20718: PPUSH
20719: PPUSH
// begin enable ;
20720: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20721: LD_ADDR_VAR 0 1
20725: PUSH
20726: LD_INT 34
20728: PUSH
20729: LD_EXP 9
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: PUSH
20743: FOR_IN
20744: IFFALSE 20964
// begin if not i in hackTanks then
20746: LD_VAR 0 1
20750: PUSH
20751: LD_EXP 86
20755: IN
20756: NOT
20757: IFFALSE 20840
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20759: LD_ADDR_EXP 86
20763: PUSH
20764: LD_EXP 86
20768: PPUSH
20769: LD_EXP 86
20773: PUSH
20774: LD_INT 1
20776: PLUS
20777: PPUSH
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 1
20787: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20788: LD_ADDR_EXP 87
20792: PUSH
20793: LD_EXP 87
20797: PPUSH
20798: LD_EXP 87
20802: PUSH
20803: LD_INT 1
20805: PLUS
20806: PPUSH
20807: EMPTY
20808: PPUSH
20809: CALL_OW 1
20813: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20814: LD_ADDR_EXP 90
20818: PUSH
20819: LD_EXP 90
20823: PPUSH
20824: LD_EXP 90
20828: PUSH
20829: LD_INT 1
20831: PLUS
20832: PPUSH
20833: EMPTY
20834: PPUSH
20835: CALL_OW 1
20839: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 302
20849: NOT
20850: IFFALSE 20863
// begin HackUnlinkAll ( i ) ;
20852: LD_VAR 0 1
20856: PPUSH
20857: CALL 20969 0 1
// continue ;
20861: GO 20743
// end ; HackCheckCapturedStatus ( i ) ;
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL 21412 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20872: LD_ADDR_VAR 0 2
20876: PUSH
20877: LD_INT 81
20879: PUSH
20880: LD_VAR 0 1
20884: PPUSH
20885: CALL_OW 255
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 33
20896: PUSH
20897: LD_INT 3
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 91
20906: PUSH
20907: LD_VAR 0 1
20911: PUSH
20912: LD_EXP 89
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 50
20924: PUSH
20925: EMPTY
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PPUSH
20934: CALL_OW 69
20938: ST_TO_ADDR
// if not tmp then
20939: LD_VAR 0 2
20943: NOT
20944: IFFALSE 20948
// continue ;
20946: GO 20743
// HackLink ( i , tmp ) ;
20948: LD_VAR 0 1
20952: PPUSH
20953: LD_VAR 0 2
20957: PPUSH
20958: CALL 21105 0 2
// end ;
20962: GO 20743
20964: POP
20965: POP
// end ;
20966: PPOPN 2
20968: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20969: LD_INT 0
20971: PPUSH
20972: PPUSH
20973: PPUSH
// if not hack in hackTanks then
20974: LD_VAR 0 1
20978: PUSH
20979: LD_EXP 86
20983: IN
20984: NOT
20985: IFFALSE 20989
// exit ;
20987: GO 21100
// index := GetElementIndex ( hackTanks , hack ) ;
20989: LD_ADDR_VAR 0 4
20993: PUSH
20994: LD_EXP 86
20998: PPUSH
20999: LD_VAR 0 1
21003: PPUSH
21004: CALL 28574 0 2
21008: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21009: LD_EXP 87
21013: PUSH
21014: LD_VAR 0 4
21018: ARRAY
21019: IFFALSE 21100
// begin for i in hackTanksCaptured [ index ] do
21021: LD_ADDR_VAR 0 3
21025: PUSH
21026: LD_EXP 87
21030: PUSH
21031: LD_VAR 0 4
21035: ARRAY
21036: PUSH
21037: FOR_IN
21038: IFFALSE 21064
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 1
21047: ARRAY
21048: PPUSH
21049: LD_VAR 0 3
21053: PUSH
21054: LD_INT 2
21056: ARRAY
21057: PPUSH
21058: CALL_OW 235
21062: GO 21037
21064: POP
21065: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21066: LD_ADDR_EXP 87
21070: PUSH
21071: LD_EXP 87
21075: PPUSH
21076: LD_VAR 0 4
21080: PPUSH
21081: EMPTY
21082: PPUSH
21083: CALL_OW 1
21087: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21088: LD_VAR 0 1
21092: PPUSH
21093: LD_INT 0
21095: PPUSH
21096: CALL_OW 505
// end ; end ;
21100: LD_VAR 0 2
21104: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21105: LD_INT 0
21107: PPUSH
21108: PPUSH
21109: PPUSH
// if not hack in hackTanks or not vehicles then
21110: LD_VAR 0 1
21114: PUSH
21115: LD_EXP 86
21119: IN
21120: NOT
21121: PUSH
21122: LD_VAR 0 2
21126: NOT
21127: OR
21128: IFFALSE 21132
// exit ;
21130: GO 21407
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21132: LD_ADDR_VAR 0 2
21136: PUSH
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_VAR 0 2
21146: PPUSH
21147: LD_INT 1
21149: PPUSH
21150: LD_INT 1
21152: PPUSH
21153: CALL 29224 0 4
21157: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_EXP 86
21167: PPUSH
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL 28574 0 2
21177: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21178: LD_EXP 87
21182: PUSH
21183: LD_VAR 0 5
21187: ARRAY
21188: PUSH
21189: LD_EXP 88
21193: LESS
21194: IFFALSE 21383
// begin for i := 1 to vehicles do
21196: LD_ADDR_VAR 0 4
21200: PUSH
21201: DOUBLE
21202: LD_INT 1
21204: DEC
21205: ST_TO_ADDR
21206: LD_VAR 0 2
21210: PUSH
21211: FOR_TO
21212: IFFALSE 21381
// begin if hackTanksCaptured [ index ] = hackLimit then
21214: LD_EXP 87
21218: PUSH
21219: LD_VAR 0 5
21223: ARRAY
21224: PUSH
21225: LD_EXP 88
21229: EQUAL
21230: IFFALSE 21234
// break ;
21232: GO 21381
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21234: LD_ADDR_EXP 90
21238: PUSH
21239: LD_EXP 90
21243: PPUSH
21244: LD_VAR 0 5
21248: PPUSH
21249: LD_EXP 90
21253: PUSH
21254: LD_VAR 0 5
21258: ARRAY
21259: PUSH
21260: LD_INT 1
21262: PLUS
21263: PPUSH
21264: CALL_OW 1
21268: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21269: LD_ADDR_EXP 87
21273: PUSH
21274: LD_EXP 87
21278: PPUSH
21279: LD_VAR 0 5
21283: PUSH
21284: LD_EXP 87
21288: PUSH
21289: LD_VAR 0 5
21293: ARRAY
21294: PUSH
21295: LD_INT 1
21297: PLUS
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PPUSH
21303: LD_VAR 0 2
21307: PUSH
21308: LD_VAR 0 4
21312: ARRAY
21313: PUSH
21314: LD_VAR 0 2
21318: PUSH
21319: LD_VAR 0 4
21323: ARRAY
21324: PPUSH
21325: CALL_OW 255
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL 28789 0 3
21338: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21339: LD_VAR 0 2
21343: PUSH
21344: LD_VAR 0 4
21348: ARRAY
21349: PPUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL_OW 255
21359: PPUSH
21360: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21364: LD_VAR 0 2
21368: PUSH
21369: LD_VAR 0 4
21373: ARRAY
21374: PPUSH
21375: CALL_OW 141
// end ;
21379: GO 21211
21381: POP
21382: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21383: LD_VAR 0 1
21387: PPUSH
21388: LD_EXP 87
21392: PUSH
21393: LD_VAR 0 5
21397: ARRAY
21398: PUSH
21399: LD_INT 0
21401: PLUS
21402: PPUSH
21403: CALL_OW 505
// end ;
21407: LD_VAR 0 3
21411: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21412: LD_INT 0
21414: PPUSH
21415: PPUSH
21416: PPUSH
21417: PPUSH
// if not hack in hackTanks then
21418: LD_VAR 0 1
21422: PUSH
21423: LD_EXP 86
21427: IN
21428: NOT
21429: IFFALSE 21433
// exit ;
21431: GO 21673
// index := GetElementIndex ( hackTanks , hack ) ;
21433: LD_ADDR_VAR 0 4
21437: PUSH
21438: LD_EXP 86
21442: PPUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL 28574 0 2
21452: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21453: LD_ADDR_VAR 0 3
21457: PUSH
21458: DOUBLE
21459: LD_EXP 87
21463: PUSH
21464: LD_VAR 0 4
21468: ARRAY
21469: INC
21470: ST_TO_ADDR
21471: LD_INT 1
21473: PUSH
21474: FOR_DOWNTO
21475: IFFALSE 21647
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21477: LD_ADDR_VAR 0 5
21481: PUSH
21482: LD_EXP 87
21486: PUSH
21487: LD_VAR 0 4
21491: ARRAY
21492: PUSH
21493: LD_VAR 0 3
21497: ARRAY
21498: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21499: LD_VAR 0 5
21503: PUSH
21504: LD_INT 1
21506: ARRAY
21507: PPUSH
21508: CALL_OW 302
21512: NOT
21513: PUSH
21514: LD_VAR 0 5
21518: PUSH
21519: LD_INT 1
21521: ARRAY
21522: PPUSH
21523: CALL_OW 255
21527: PUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 255
21537: NONEQUAL
21538: OR
21539: IFFALSE 21645
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21541: LD_VAR 0 5
21545: PUSH
21546: LD_INT 1
21548: ARRAY
21549: PPUSH
21550: CALL_OW 305
21554: PUSH
21555: LD_VAR 0 5
21559: PUSH
21560: LD_INT 1
21562: ARRAY
21563: PPUSH
21564: CALL_OW 255
21568: PUSH
21569: LD_VAR 0 1
21573: PPUSH
21574: CALL_OW 255
21578: EQUAL
21579: AND
21580: IFFALSE 21604
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21582: LD_VAR 0 5
21586: PUSH
21587: LD_INT 1
21589: ARRAY
21590: PPUSH
21591: LD_VAR 0 5
21595: PUSH
21596: LD_INT 2
21598: ARRAY
21599: PPUSH
21600: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21604: LD_ADDR_EXP 87
21608: PUSH
21609: LD_EXP 87
21613: PPUSH
21614: LD_VAR 0 4
21618: PPUSH
21619: LD_EXP 87
21623: PUSH
21624: LD_VAR 0 4
21628: ARRAY
21629: PPUSH
21630: LD_VAR 0 3
21634: PPUSH
21635: CALL_OW 3
21639: PPUSH
21640: CALL_OW 1
21644: ST_TO_ADDR
// end ; end ;
21645: GO 21474
21647: POP
21648: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_EXP 87
21658: PUSH
21659: LD_VAR 0 4
21663: ARRAY
21664: PUSH
21665: LD_INT 0
21667: PLUS
21668: PPUSH
21669: CALL_OW 505
// end ;
21673: LD_VAR 0 2
21677: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21678: LD_INT 0
21680: PPUSH
21681: PPUSH
21682: PPUSH
21683: PPUSH
// if not hack in hackTanks then
21684: LD_VAR 0 1
21688: PUSH
21689: LD_EXP 86
21693: IN
21694: NOT
21695: IFFALSE 21699
// exit ;
21697: GO 21784
// index := GetElementIndex ( hackTanks , hack ) ;
21699: LD_ADDR_VAR 0 5
21703: PUSH
21704: LD_EXP 86
21708: PPUSH
21709: LD_VAR 0 1
21713: PPUSH
21714: CALL 28574 0 2
21718: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21719: LD_ADDR_VAR 0 4
21723: PUSH
21724: DOUBLE
21725: LD_INT 1
21727: DEC
21728: ST_TO_ADDR
21729: LD_EXP 87
21733: PUSH
21734: LD_VAR 0 5
21738: ARRAY
21739: PUSH
21740: FOR_TO
21741: IFFALSE 21782
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21743: LD_EXP 87
21747: PUSH
21748: LD_VAR 0 5
21752: ARRAY
21753: PUSH
21754: LD_VAR 0 4
21758: ARRAY
21759: PUSH
21760: LD_INT 1
21762: ARRAY
21763: PUSH
21764: LD_VAR 0 2
21768: EQUAL
21769: IFFALSE 21780
// KillUnit ( vehicle ) ;
21771: LD_VAR 0 2
21775: PPUSH
21776: CALL_OW 66
21780: GO 21740
21782: POP
21783: POP
// end ;
21784: LD_VAR 0 3
21788: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21789: LD_EXP 91
21793: NOT
21794: IFFALSE 21829
21796: GO 21798
21798: DISABLE
// begin initMiner := true ;
21799: LD_ADDR_EXP 91
21803: PUSH
21804: LD_INT 1
21806: ST_TO_ADDR
// minersList := [ ] ;
21807: LD_ADDR_EXP 92
21811: PUSH
21812: EMPTY
21813: ST_TO_ADDR
// minerMinesList := [ ] ;
21814: LD_ADDR_EXP 93
21818: PUSH
21819: EMPTY
21820: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21821: LD_ADDR_EXP 94
21825: PUSH
21826: LD_INT 5
21828: ST_TO_ADDR
// end ;
21829: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21830: LD_EXP 91
21834: PUSH
21835: LD_INT 34
21837: PUSH
21838: LD_EXP 14
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PPUSH
21847: CALL_OW 69
21851: AND
21852: IFFALSE 22315
21854: GO 21856
21856: DISABLE
21857: LD_INT 0
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin enable ;
21863: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21864: LD_ADDR_VAR 0 1
21868: PUSH
21869: LD_INT 34
21871: PUSH
21872: LD_EXP 14
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PPUSH
21881: CALL_OW 69
21885: PUSH
21886: FOR_IN
21887: IFFALSE 21959
// begin if not i in minersList then
21889: LD_VAR 0 1
21893: PUSH
21894: LD_EXP 92
21898: IN
21899: NOT
21900: IFFALSE 21957
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21902: LD_ADDR_EXP 92
21906: PUSH
21907: LD_EXP 92
21911: PPUSH
21912: LD_EXP 92
21916: PUSH
21917: LD_INT 1
21919: PLUS
21920: PPUSH
21921: LD_VAR 0 1
21925: PPUSH
21926: CALL_OW 1
21930: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21931: LD_ADDR_EXP 93
21935: PUSH
21936: LD_EXP 93
21940: PPUSH
21941: LD_EXP 93
21945: PUSH
21946: LD_INT 1
21948: PLUS
21949: PPUSH
21950: EMPTY
21951: PPUSH
21952: CALL_OW 1
21956: ST_TO_ADDR
// end end ;
21957: GO 21886
21959: POP
21960: POP
// for i := minerMinesList downto 1 do
21961: LD_ADDR_VAR 0 1
21965: PUSH
21966: DOUBLE
21967: LD_EXP 93
21971: INC
21972: ST_TO_ADDR
21973: LD_INT 1
21975: PUSH
21976: FOR_DOWNTO
21977: IFFALSE 22313
// begin if IsLive ( minersList [ i ] ) then
21979: LD_EXP 92
21983: PUSH
21984: LD_VAR 0 1
21988: ARRAY
21989: PPUSH
21990: CALL_OW 300
21994: IFFALSE 22022
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21996: LD_EXP 92
22000: PUSH
22001: LD_VAR 0 1
22005: ARRAY
22006: PPUSH
22007: LD_EXP 93
22011: PUSH
22012: LD_VAR 0 1
22016: ARRAY
22017: PPUSH
22018: CALL_OW 505
// if not minerMinesList [ i ] then
22022: LD_EXP 93
22026: PUSH
22027: LD_VAR 0 1
22031: ARRAY
22032: NOT
22033: IFFALSE 22037
// continue ;
22035: GO 21976
// for j := minerMinesList [ i ] downto 1 do
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: DOUBLE
22043: LD_EXP 93
22047: PUSH
22048: LD_VAR 0 1
22052: ARRAY
22053: INC
22054: ST_TO_ADDR
22055: LD_INT 1
22057: PUSH
22058: FOR_DOWNTO
22059: IFFALSE 22309
// begin side := GetSide ( minersList [ i ] ) ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_EXP 92
22070: PUSH
22071: LD_VAR 0 1
22075: ARRAY
22076: PPUSH
22077: CALL_OW 255
22081: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22082: LD_ADDR_VAR 0 4
22086: PUSH
22087: LD_EXP 93
22091: PUSH
22092: LD_VAR 0 1
22096: ARRAY
22097: PUSH
22098: LD_VAR 0 2
22102: ARRAY
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: LD_EXP 93
22112: PUSH
22113: LD_VAR 0 1
22117: ARRAY
22118: PUSH
22119: LD_VAR 0 2
22123: ARRAY
22124: PUSH
22125: LD_INT 2
22127: ARRAY
22128: PPUSH
22129: CALL_OW 428
22133: ST_TO_ADDR
// if not tmp then
22134: LD_VAR 0 4
22138: NOT
22139: IFFALSE 22143
// continue ;
22141: GO 22058
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22143: LD_VAR 0 4
22147: PUSH
22148: LD_INT 81
22150: PUSH
22151: LD_VAR 0 3
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 69
22164: IN
22165: PUSH
22166: LD_EXP 93
22170: PUSH
22171: LD_VAR 0 1
22175: ARRAY
22176: PUSH
22177: LD_VAR 0 2
22181: ARRAY
22182: PUSH
22183: LD_INT 1
22185: ARRAY
22186: PPUSH
22187: LD_EXP 93
22191: PUSH
22192: LD_VAR 0 1
22196: ARRAY
22197: PUSH
22198: LD_VAR 0 2
22202: ARRAY
22203: PUSH
22204: LD_INT 2
22206: ARRAY
22207: PPUSH
22208: CALL_OW 458
22212: AND
22213: IFFALSE 22307
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22215: LD_EXP 93
22219: PUSH
22220: LD_VAR 0 1
22224: ARRAY
22225: PUSH
22226: LD_VAR 0 2
22230: ARRAY
22231: PUSH
22232: LD_INT 1
22234: ARRAY
22235: PPUSH
22236: LD_EXP 93
22240: PUSH
22241: LD_VAR 0 1
22245: ARRAY
22246: PUSH
22247: LD_VAR 0 2
22251: ARRAY
22252: PUSH
22253: LD_INT 2
22255: ARRAY
22256: PPUSH
22257: LD_VAR 0 3
22261: PPUSH
22262: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22266: LD_ADDR_EXP 93
22270: PUSH
22271: LD_EXP 93
22275: PPUSH
22276: LD_VAR 0 1
22280: PPUSH
22281: LD_EXP 93
22285: PUSH
22286: LD_VAR 0 1
22290: ARRAY
22291: PPUSH
22292: LD_VAR 0 2
22296: PPUSH
22297: CALL_OW 3
22301: PPUSH
22302: CALL_OW 1
22306: ST_TO_ADDR
// end ; end ;
22307: GO 22058
22309: POP
22310: POP
// end ;
22311: GO 21976
22313: POP
22314: POP
// end ;
22315: PPOPN 4
22317: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22318: LD_INT 0
22320: PPUSH
22321: PPUSH
// result := false ;
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_INT 0
22329: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 264
22339: PUSH
22340: LD_EXP 14
22344: EQUAL
22345: NOT
22346: IFFALSE 22350
// exit ;
22348: GO 22590
// index := GetElementIndex ( minersList , unit ) ;
22350: LD_ADDR_VAR 0 5
22354: PUSH
22355: LD_EXP 92
22359: PPUSH
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL 28574 0 2
22369: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22370: LD_EXP 93
22374: PUSH
22375: LD_VAR 0 5
22379: ARRAY
22380: PUSH
22381: LD_EXP 94
22385: GREATEREQUAL
22386: IFFALSE 22390
// exit ;
22388: GO 22590
// ComMoveXY ( unit , x , y ) ;
22390: LD_VAR 0 1
22394: PPUSH
22395: LD_VAR 0 2
22399: PPUSH
22400: LD_VAR 0 3
22404: PPUSH
22405: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22409: LD_INT 35
22411: PPUSH
22412: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_VAR 0 2
22425: PPUSH
22426: LD_VAR 0 3
22430: PPUSH
22431: CALL 59346 0 3
22435: NOT
22436: PUSH
22437: LD_VAR 0 1
22441: PPUSH
22442: CALL_OW 314
22446: AND
22447: IFFALSE 22451
// exit ;
22449: GO 22590
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22451: LD_VAR 0 2
22455: PPUSH
22456: LD_VAR 0 3
22460: PPUSH
22461: CALL_OW 428
22465: PUSH
22466: LD_VAR 0 1
22470: EQUAL
22471: PUSH
22472: LD_VAR 0 1
22476: PPUSH
22477: CALL_OW 314
22481: NOT
22482: AND
22483: IFFALSE 22409
// PlaySoundXY ( x , y , PlantMine ) ;
22485: LD_VAR 0 2
22489: PPUSH
22490: LD_VAR 0 3
22494: PPUSH
22495: LD_STRING PlantMine
22497: PPUSH
22498: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22502: LD_VAR 0 2
22506: PPUSH
22507: LD_VAR 0 3
22511: PPUSH
22512: LD_VAR 0 1
22516: PPUSH
22517: CALL_OW 255
22521: PPUSH
22522: LD_INT 0
22524: PPUSH
22525: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22529: LD_ADDR_EXP 93
22533: PUSH
22534: LD_EXP 93
22538: PPUSH
22539: LD_VAR 0 5
22543: PUSH
22544: LD_EXP 93
22548: PUSH
22549: LD_VAR 0 5
22553: ARRAY
22554: PUSH
22555: LD_INT 1
22557: PLUS
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PPUSH
22563: LD_VAR 0 2
22567: PUSH
22568: LD_VAR 0 3
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PPUSH
22577: CALL 28789 0 3
22581: ST_TO_ADDR
// result := true ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_INT 1
22589: ST_TO_ADDR
// end ;
22590: LD_VAR 0 4
22594: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22595: LD_INT 0
22597: PPUSH
22598: PPUSH
22599: PPUSH
// if not unit in minersList then
22600: LD_VAR 0 1
22604: PUSH
22605: LD_EXP 92
22609: IN
22610: NOT
22611: IFFALSE 22615
// exit ;
22613: GO 23007
// index := GetElementIndex ( minersList , unit ) ;
22615: LD_ADDR_VAR 0 6
22619: PUSH
22620: LD_EXP 92
22624: PPUSH
22625: LD_VAR 0 1
22629: PPUSH
22630: CALL 28574 0 2
22634: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22635: LD_ADDR_VAR 0 5
22639: PUSH
22640: DOUBLE
22641: LD_EXP 93
22645: PUSH
22646: LD_VAR 0 6
22650: ARRAY
22651: INC
22652: ST_TO_ADDR
22653: LD_INT 1
22655: PUSH
22656: FOR_DOWNTO
22657: IFFALSE 22818
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22659: LD_EXP 93
22663: PUSH
22664: LD_VAR 0 6
22668: ARRAY
22669: PUSH
22670: LD_VAR 0 5
22674: ARRAY
22675: PUSH
22676: LD_INT 1
22678: ARRAY
22679: PUSH
22680: LD_VAR 0 2
22684: EQUAL
22685: PUSH
22686: LD_EXP 93
22690: PUSH
22691: LD_VAR 0 6
22695: ARRAY
22696: PUSH
22697: LD_VAR 0 5
22701: ARRAY
22702: PUSH
22703: LD_INT 2
22705: ARRAY
22706: PUSH
22707: LD_VAR 0 3
22711: EQUAL
22712: AND
22713: IFFALSE 22816
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22715: LD_EXP 93
22719: PUSH
22720: LD_VAR 0 6
22724: ARRAY
22725: PUSH
22726: LD_VAR 0 5
22730: ARRAY
22731: PUSH
22732: LD_INT 1
22734: ARRAY
22735: PPUSH
22736: LD_EXP 93
22740: PUSH
22741: LD_VAR 0 6
22745: ARRAY
22746: PUSH
22747: LD_VAR 0 5
22751: ARRAY
22752: PUSH
22753: LD_INT 2
22755: ARRAY
22756: PPUSH
22757: LD_VAR 0 1
22761: PPUSH
22762: CALL_OW 255
22766: PPUSH
22767: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22771: LD_ADDR_EXP 93
22775: PUSH
22776: LD_EXP 93
22780: PPUSH
22781: LD_VAR 0 6
22785: PPUSH
22786: LD_EXP 93
22790: PUSH
22791: LD_VAR 0 6
22795: ARRAY
22796: PPUSH
22797: LD_VAR 0 5
22801: PPUSH
22802: CALL_OW 3
22806: PPUSH
22807: CALL_OW 1
22811: ST_TO_ADDR
// exit ;
22812: POP
22813: POP
22814: GO 23007
// end ; end ;
22816: GO 22656
22818: POP
22819: POP
// for i := minerMinesList [ index ] downto 1 do
22820: LD_ADDR_VAR 0 5
22824: PUSH
22825: DOUBLE
22826: LD_EXP 93
22830: PUSH
22831: LD_VAR 0 6
22835: ARRAY
22836: INC
22837: ST_TO_ADDR
22838: LD_INT 1
22840: PUSH
22841: FOR_DOWNTO
22842: IFFALSE 23005
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22844: LD_EXP 93
22848: PUSH
22849: LD_VAR 0 6
22853: ARRAY
22854: PUSH
22855: LD_VAR 0 5
22859: ARRAY
22860: PUSH
22861: LD_INT 1
22863: ARRAY
22864: PPUSH
22865: LD_EXP 93
22869: PUSH
22870: LD_VAR 0 6
22874: ARRAY
22875: PUSH
22876: LD_VAR 0 5
22880: ARRAY
22881: PUSH
22882: LD_INT 2
22884: ARRAY
22885: PPUSH
22886: LD_VAR 0 2
22890: PPUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: CALL_OW 298
22900: PUSH
22901: LD_INT 6
22903: LESS
22904: IFFALSE 23003
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22906: LD_EXP 93
22910: PUSH
22911: LD_VAR 0 6
22915: ARRAY
22916: PUSH
22917: LD_VAR 0 5
22921: ARRAY
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: PPUSH
22927: LD_EXP 93
22931: PUSH
22932: LD_VAR 0 6
22936: ARRAY
22937: PUSH
22938: LD_VAR 0 5
22942: ARRAY
22943: PUSH
22944: LD_INT 2
22946: ARRAY
22947: PPUSH
22948: LD_VAR 0 1
22952: PPUSH
22953: CALL_OW 255
22957: PPUSH
22958: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22962: LD_ADDR_EXP 93
22966: PUSH
22967: LD_EXP 93
22971: PPUSH
22972: LD_VAR 0 6
22976: PPUSH
22977: LD_EXP 93
22981: PUSH
22982: LD_VAR 0 6
22986: ARRAY
22987: PPUSH
22988: LD_VAR 0 5
22992: PPUSH
22993: CALL_OW 3
22997: PPUSH
22998: CALL_OW 1
23002: ST_TO_ADDR
// end ; end ;
23003: GO 22841
23005: POP
23006: POP
// end ;
23007: LD_VAR 0 4
23011: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23012: LD_INT 0
23014: PPUSH
23015: PPUSH
23016: PPUSH
23017: PPUSH
23018: PPUSH
23019: PPUSH
23020: PPUSH
23021: PPUSH
23022: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23023: LD_VAR 0 1
23027: PPUSH
23028: CALL_OW 264
23032: PUSH
23033: LD_EXP 14
23037: EQUAL
23038: NOT
23039: PUSH
23040: LD_VAR 0 1
23044: PUSH
23045: LD_EXP 92
23049: IN
23050: NOT
23051: OR
23052: IFFALSE 23056
// exit ;
23054: GO 23378
// index := GetElementIndex ( minersList , unit ) ;
23056: LD_ADDR_VAR 0 6
23060: PUSH
23061: LD_EXP 92
23065: PPUSH
23066: LD_VAR 0 1
23070: PPUSH
23071: CALL 28574 0 2
23075: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23076: LD_ADDR_VAR 0 8
23080: PUSH
23081: LD_EXP 94
23085: PUSH
23086: LD_EXP 93
23090: PUSH
23091: LD_VAR 0 6
23095: ARRAY
23096: MINUS
23097: ST_TO_ADDR
// if not minesFreeAmount then
23098: LD_VAR 0 8
23102: NOT
23103: IFFALSE 23107
// exit ;
23105: GO 23378
// tmp := [ ] ;
23107: LD_ADDR_VAR 0 7
23111: PUSH
23112: EMPTY
23113: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23114: LD_ADDR_VAR 0 5
23118: PUSH
23119: DOUBLE
23120: LD_INT 1
23122: DEC
23123: ST_TO_ADDR
23124: LD_VAR 0 8
23128: PUSH
23129: FOR_TO
23130: IFFALSE 23325
// begin _d := rand ( 0 , 5 ) ;
23132: LD_ADDR_VAR 0 11
23136: PUSH
23137: LD_INT 0
23139: PPUSH
23140: LD_INT 5
23142: PPUSH
23143: CALL_OW 12
23147: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23148: LD_ADDR_VAR 0 12
23152: PUSH
23153: LD_INT 2
23155: PPUSH
23156: LD_INT 6
23158: PPUSH
23159: CALL_OW 12
23163: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23164: LD_ADDR_VAR 0 9
23168: PUSH
23169: LD_VAR 0 2
23173: PPUSH
23174: LD_VAR 0 11
23178: PPUSH
23179: LD_VAR 0 12
23183: PPUSH
23184: CALL_OW 272
23188: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23189: LD_ADDR_VAR 0 10
23193: PUSH
23194: LD_VAR 0 3
23198: PPUSH
23199: LD_VAR 0 11
23203: PPUSH
23204: LD_VAR 0 12
23208: PPUSH
23209: CALL_OW 273
23213: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23214: LD_VAR 0 9
23218: PPUSH
23219: LD_VAR 0 10
23223: PPUSH
23224: CALL_OW 488
23228: PUSH
23229: LD_VAR 0 9
23233: PUSH
23234: LD_VAR 0 10
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_VAR 0 7
23247: IN
23248: NOT
23249: AND
23250: PUSH
23251: LD_VAR 0 9
23255: PPUSH
23256: LD_VAR 0 10
23260: PPUSH
23261: CALL_OW 458
23265: NOT
23266: AND
23267: IFFALSE 23309
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23269: LD_ADDR_VAR 0 7
23273: PUSH
23274: LD_VAR 0 7
23278: PPUSH
23279: LD_VAR 0 7
23283: PUSH
23284: LD_INT 1
23286: PLUS
23287: PPUSH
23288: LD_VAR 0 9
23292: PUSH
23293: LD_VAR 0 10
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PPUSH
23302: CALL_OW 1
23306: ST_TO_ADDR
23307: GO 23323
// i := i - 1 ;
23309: LD_ADDR_VAR 0 5
23313: PUSH
23314: LD_VAR 0 5
23318: PUSH
23319: LD_INT 1
23321: MINUS
23322: ST_TO_ADDR
// end ;
23323: GO 23129
23325: POP
23326: POP
// for i in tmp do
23327: LD_ADDR_VAR 0 5
23331: PUSH
23332: LD_VAR 0 7
23336: PUSH
23337: FOR_IN
23338: IFFALSE 23376
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23340: LD_VAR 0 1
23344: PPUSH
23345: LD_VAR 0 5
23349: PUSH
23350: LD_INT 1
23352: ARRAY
23353: PPUSH
23354: LD_VAR 0 5
23358: PUSH
23359: LD_INT 2
23361: ARRAY
23362: PPUSH
23363: CALL 22318 0 3
23367: NOT
23368: IFFALSE 23374
// exit ;
23370: POP
23371: POP
23372: GO 23378
23374: GO 23337
23376: POP
23377: POP
// end ;
23378: LD_VAR 0 4
23382: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23383: LD_INT 0
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
23391: PPUSH
// if not GetClass ( unit ) = class_sniper then
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 257
23401: PUSH
23402: LD_INT 5
23404: EQUAL
23405: NOT
23406: IFFALSE 23410
// exit ;
23408: GO 23798
// dist := 8 ;
23410: LD_ADDR_VAR 0 5
23414: PUSH
23415: LD_INT 8
23417: ST_TO_ADDR
// viewRange := 12 ;
23418: LD_ADDR_VAR 0 7
23422: PUSH
23423: LD_INT 12
23425: ST_TO_ADDR
// side := GetSide ( unit ) ;
23426: LD_ADDR_VAR 0 6
23430: PUSH
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 255
23440: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23441: LD_INT 61
23443: PPUSH
23444: LD_VAR 0 6
23448: PPUSH
23449: CALL_OW 321
23453: PUSH
23454: LD_INT 2
23456: EQUAL
23457: IFFALSE 23467
// viewRange := 16 ;
23459: LD_ADDR_VAR 0 7
23463: PUSH
23464: LD_INT 16
23466: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23467: LD_VAR 0 1
23471: PPUSH
23472: LD_VAR 0 2
23476: PPUSH
23477: LD_VAR 0 3
23481: PPUSH
23482: CALL_OW 297
23486: PUSH
23487: LD_VAR 0 5
23491: GREATER
23492: IFFALSE 23571
// begin ComMoveXY ( unit , x , y ) ;
23494: LD_VAR 0 1
23498: PPUSH
23499: LD_VAR 0 2
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23513: LD_INT 35
23515: PPUSH
23516: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23520: LD_VAR 0 1
23524: PPUSH
23525: LD_VAR 0 2
23529: PPUSH
23530: LD_VAR 0 3
23534: PPUSH
23535: CALL 59346 0 3
23539: NOT
23540: IFFALSE 23544
// exit ;
23542: GO 23798
// until GetDistUnitXY ( unit , x , y ) < dist ;
23544: LD_VAR 0 1
23548: PPUSH
23549: LD_VAR 0 2
23553: PPUSH
23554: LD_VAR 0 3
23558: PPUSH
23559: CALL_OW 297
23563: PUSH
23564: LD_VAR 0 5
23568: LESS
23569: IFFALSE 23513
// end ; ComTurnXY ( unit , x , y ) ;
23571: LD_VAR 0 1
23575: PPUSH
23576: LD_VAR 0 2
23580: PPUSH
23581: LD_VAR 0 3
23585: PPUSH
23586: CALL_OW 118
// wait ( 5 ) ;
23590: LD_INT 5
23592: PPUSH
23593: CALL_OW 67
// _d := GetDir ( unit ) ;
23597: LD_ADDR_VAR 0 10
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 254
23611: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23612: LD_ADDR_VAR 0 8
23616: PUSH
23617: LD_VAR 0 1
23621: PPUSH
23622: CALL_OW 250
23626: PPUSH
23627: LD_VAR 0 10
23631: PPUSH
23632: LD_VAR 0 5
23636: PPUSH
23637: CALL_OW 272
23641: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23642: LD_ADDR_VAR 0 9
23646: PUSH
23647: LD_VAR 0 1
23651: PPUSH
23652: CALL_OW 251
23656: PPUSH
23657: LD_VAR 0 10
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL_OW 273
23671: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23672: LD_VAR 0 8
23676: PPUSH
23677: LD_VAR 0 9
23681: PPUSH
23682: CALL_OW 488
23686: NOT
23687: IFFALSE 23691
// exit ;
23689: GO 23798
// ComAnimCustom ( unit , 1 ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23703: LD_VAR 0 8
23707: PPUSH
23708: LD_VAR 0 9
23712: PPUSH
23713: LD_VAR 0 6
23717: PPUSH
23718: LD_VAR 0 7
23722: PPUSH
23723: CALL_OW 330
// repeat wait ( 1 ) ;
23727: LD_INT 1
23729: PPUSH
23730: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 316
23743: PUSH
23744: LD_VAR 0 1
23748: PPUSH
23749: CALL_OW 314
23753: OR
23754: PUSH
23755: LD_VAR 0 1
23759: PPUSH
23760: CALL_OW 302
23764: NOT
23765: OR
23766: PUSH
23767: LD_VAR 0 1
23771: PPUSH
23772: CALL_OW 301
23776: OR
23777: IFFALSE 23727
// RemoveSeeing ( _x , _y , side ) ;
23779: LD_VAR 0 8
23783: PPUSH
23784: LD_VAR 0 9
23788: PPUSH
23789: LD_VAR 0 6
23793: PPUSH
23794: CALL_OW 331
// end ; end_of_file
23798: LD_VAR 0 4
23802: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23803: LD_INT 0
23805: PPUSH
23806: PPUSH
// if exist_mode then
23807: LD_VAR 0 2
23811: IFFALSE 23836
// unit := CreateCharacter ( prefix & ident ) else
23813: LD_ADDR_VAR 0 5
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_VAR 0 1
23827: STR
23828: PPUSH
23829: CALL_OW 34
23833: ST_TO_ADDR
23834: GO 23851
// unit := NewCharacter ( ident ) ;
23836: LD_ADDR_VAR 0 5
23840: PUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL_OW 25
23850: ST_TO_ADDR
// result := unit ;
23851: LD_ADDR_VAR 0 4
23855: PUSH
23856: LD_VAR 0 5
23860: ST_TO_ADDR
// end ;
23861: LD_VAR 0 4
23865: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23866: LD_INT 0
23868: PPUSH
23869: PPUSH
// if not side or not nation then
23870: LD_VAR 0 1
23874: NOT
23875: PUSH
23876: LD_VAR 0 2
23880: NOT
23881: OR
23882: IFFALSE 23886
// exit ;
23884: GO 24654
// case nation of nation_american :
23886: LD_VAR 0 2
23890: PUSH
23891: LD_INT 1
23893: DOUBLE
23894: EQUAL
23895: IFTRUE 23899
23897: GO 24113
23899: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23900: LD_ADDR_VAR 0 4
23904: PUSH
23905: LD_INT 35
23907: PUSH
23908: LD_INT 45
23910: PUSH
23911: LD_INT 46
23913: PUSH
23914: LD_INT 47
23916: PUSH
23917: LD_INT 82
23919: PUSH
23920: LD_INT 83
23922: PUSH
23923: LD_INT 84
23925: PUSH
23926: LD_INT 85
23928: PUSH
23929: LD_INT 86
23931: PUSH
23932: LD_INT 1
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 6
23940: PUSH
23941: LD_INT 15
23943: PUSH
23944: LD_INT 16
23946: PUSH
23947: LD_INT 7
23949: PUSH
23950: LD_INT 12
23952: PUSH
23953: LD_INT 13
23955: PUSH
23956: LD_INT 10
23958: PUSH
23959: LD_INT 14
23961: PUSH
23962: LD_INT 20
23964: PUSH
23965: LD_INT 21
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_INT 25
23973: PUSH
23974: LD_INT 32
23976: PUSH
23977: LD_INT 27
23979: PUSH
23980: LD_INT 36
23982: PUSH
23983: LD_INT 69
23985: PUSH
23986: LD_INT 39
23988: PUSH
23989: LD_INT 34
23991: PUSH
23992: LD_INT 40
23994: PUSH
23995: LD_INT 48
23997: PUSH
23998: LD_INT 49
24000: PUSH
24001: LD_INT 50
24003: PUSH
24004: LD_INT 51
24006: PUSH
24007: LD_INT 52
24009: PUSH
24010: LD_INT 53
24012: PUSH
24013: LD_INT 54
24015: PUSH
24016: LD_INT 55
24018: PUSH
24019: LD_INT 56
24021: PUSH
24022: LD_INT 57
24024: PUSH
24025: LD_INT 58
24027: PUSH
24028: LD_INT 59
24030: PUSH
24031: LD_INT 60
24033: PUSH
24034: LD_INT 61
24036: PUSH
24037: LD_INT 62
24039: PUSH
24040: LD_INT 80
24042: PUSH
24043: LD_INT 82
24045: PUSH
24046: LD_INT 83
24048: PUSH
24049: LD_INT 84
24051: PUSH
24052: LD_INT 85
24054: PUSH
24055: LD_INT 86
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
24111: GO 24578
24113: LD_INT 2
24115: DOUBLE
24116: EQUAL
24117: IFTRUE 24121
24119: GO 24347
24121: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24122: LD_ADDR_VAR 0 4
24126: PUSH
24127: LD_INT 35
24129: PUSH
24130: LD_INT 45
24132: PUSH
24133: LD_INT 46
24135: PUSH
24136: LD_INT 47
24138: PUSH
24139: LD_INT 82
24141: PUSH
24142: LD_INT 83
24144: PUSH
24145: LD_INT 84
24147: PUSH
24148: LD_INT 85
24150: PUSH
24151: LD_INT 87
24153: PUSH
24154: LD_INT 70
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 11
24162: PUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 4
24168: PUSH
24169: LD_INT 5
24171: PUSH
24172: LD_INT 6
24174: PUSH
24175: LD_INT 15
24177: PUSH
24178: LD_INT 18
24180: PUSH
24181: LD_INT 7
24183: PUSH
24184: LD_INT 17
24186: PUSH
24187: LD_INT 8
24189: PUSH
24190: LD_INT 20
24192: PUSH
24193: LD_INT 21
24195: PUSH
24196: LD_INT 22
24198: PUSH
24199: LD_INT 72
24201: PUSH
24202: LD_INT 26
24204: PUSH
24205: LD_INT 69
24207: PUSH
24208: LD_INT 39
24210: PUSH
24211: LD_INT 40
24213: PUSH
24214: LD_INT 41
24216: PUSH
24217: LD_INT 42
24219: PUSH
24220: LD_INT 43
24222: PUSH
24223: LD_INT 48
24225: PUSH
24226: LD_INT 49
24228: PUSH
24229: LD_INT 50
24231: PUSH
24232: LD_INT 51
24234: PUSH
24235: LD_INT 52
24237: PUSH
24238: LD_INT 53
24240: PUSH
24241: LD_INT 54
24243: PUSH
24244: LD_INT 55
24246: PUSH
24247: LD_INT 56
24249: PUSH
24250: LD_INT 60
24252: PUSH
24253: LD_INT 61
24255: PUSH
24256: LD_INT 62
24258: PUSH
24259: LD_INT 66
24261: PUSH
24262: LD_INT 67
24264: PUSH
24265: LD_INT 68
24267: PUSH
24268: LD_INT 81
24270: PUSH
24271: LD_INT 82
24273: PUSH
24274: LD_INT 83
24276: PUSH
24277: LD_INT 84
24279: PUSH
24280: LD_INT 85
24282: PUSH
24283: LD_INT 87
24285: PUSH
24286: LD_INT 88
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
24345: GO 24578
24347: LD_INT 3
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24577
24355: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_INT 46
24363: PUSH
24364: LD_INT 47
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: LD_INT 2
24372: PUSH
24373: LD_INT 82
24375: PUSH
24376: LD_INT 83
24378: PUSH
24379: LD_INT 84
24381: PUSH
24382: LD_INT 85
24384: PUSH
24385: LD_INT 86
24387: PUSH
24388: LD_INT 11
24390: PUSH
24391: LD_INT 9
24393: PUSH
24394: LD_INT 20
24396: PUSH
24397: LD_INT 19
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 24
24405: PUSH
24406: LD_INT 22
24408: PUSH
24409: LD_INT 25
24411: PUSH
24412: LD_INT 28
24414: PUSH
24415: LD_INT 29
24417: PUSH
24418: LD_INT 30
24420: PUSH
24421: LD_INT 31
24423: PUSH
24424: LD_INT 37
24426: PUSH
24427: LD_INT 38
24429: PUSH
24430: LD_INT 32
24432: PUSH
24433: LD_INT 27
24435: PUSH
24436: LD_INT 33
24438: PUSH
24439: LD_INT 69
24441: PUSH
24442: LD_INT 39
24444: PUSH
24445: LD_INT 34
24447: PUSH
24448: LD_INT 40
24450: PUSH
24451: LD_INT 71
24453: PUSH
24454: LD_INT 23
24456: PUSH
24457: LD_INT 44
24459: PUSH
24460: LD_INT 48
24462: PUSH
24463: LD_INT 49
24465: PUSH
24466: LD_INT 50
24468: PUSH
24469: LD_INT 51
24471: PUSH
24472: LD_INT 52
24474: PUSH
24475: LD_INT 53
24477: PUSH
24478: LD_INT 54
24480: PUSH
24481: LD_INT 55
24483: PUSH
24484: LD_INT 56
24486: PUSH
24487: LD_INT 57
24489: PUSH
24490: LD_INT 58
24492: PUSH
24493: LD_INT 59
24495: PUSH
24496: LD_INT 63
24498: PUSH
24499: LD_INT 64
24501: PUSH
24502: LD_INT 65
24504: PUSH
24505: LD_INT 82
24507: PUSH
24508: LD_INT 83
24510: PUSH
24511: LD_INT 84
24513: PUSH
24514: LD_INT 85
24516: PUSH
24517: LD_INT 86
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 24578
24577: POP
// if state > - 1 and state < 3 then
24578: LD_VAR 0 3
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: GREATER
24587: PUSH
24588: LD_VAR 0 3
24592: PUSH
24593: LD_INT 3
24595: LESS
24596: AND
24597: IFFALSE 24654
// for i in result do
24599: LD_ADDR_VAR 0 5
24603: PUSH
24604: LD_VAR 0 4
24608: PUSH
24609: FOR_IN
24610: IFFALSE 24652
// if GetTech ( i , side ) <> state then
24612: LD_VAR 0 5
24616: PPUSH
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL_OW 321
24626: PUSH
24627: LD_VAR 0 3
24631: NONEQUAL
24632: IFFALSE 24650
// result := result diff i ;
24634: LD_ADDR_VAR 0 4
24638: PUSH
24639: LD_VAR 0 4
24643: PUSH
24644: LD_VAR 0 5
24648: DIFF
24649: ST_TO_ADDR
24650: GO 24609
24652: POP
24653: POP
// end ;
24654: LD_VAR 0 4
24658: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24659: LD_INT 0
24661: PPUSH
24662: PPUSH
24663: PPUSH
// result := true ;
24664: LD_ADDR_VAR 0 3
24668: PUSH
24669: LD_INT 1
24671: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24672: LD_ADDR_VAR 0 5
24676: PUSH
24677: LD_VAR 0 2
24681: PPUSH
24682: CALL_OW 480
24686: ST_TO_ADDR
// if not tmp then
24687: LD_VAR 0 5
24691: NOT
24692: IFFALSE 24696
// exit ;
24694: GO 24745
// for i in tmp do
24696: LD_ADDR_VAR 0 4
24700: PUSH
24701: LD_VAR 0 5
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24743
// if GetTech ( i , side ) <> state_researched then
24709: LD_VAR 0 4
24713: PPUSH
24714: LD_VAR 0 1
24718: PPUSH
24719: CALL_OW 321
24723: PUSH
24724: LD_INT 2
24726: NONEQUAL
24727: IFFALSE 24741
// begin result := false ;
24729: LD_ADDR_VAR 0 3
24733: PUSH
24734: LD_INT 0
24736: ST_TO_ADDR
// exit ;
24737: POP
24738: POP
24739: GO 24745
// end ;
24741: GO 24706
24743: POP
24744: POP
// end ;
24745: LD_VAR 0 3
24749: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24750: LD_INT 0
24752: PPUSH
24753: PPUSH
24754: PPUSH
24755: PPUSH
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
24762: PPUSH
24763: PPUSH
24764: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24765: LD_VAR 0 1
24769: NOT
24770: PUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL_OW 257
24780: PUSH
24781: LD_INT 9
24783: NONEQUAL
24784: OR
24785: IFFALSE 24789
// exit ;
24787: GO 25362
// side := GetSide ( unit ) ;
24789: LD_ADDR_VAR 0 9
24793: PUSH
24794: LD_VAR 0 1
24798: PPUSH
24799: CALL_OW 255
24803: ST_TO_ADDR
// tech_space := tech_spacanom ;
24804: LD_ADDR_VAR 0 12
24808: PUSH
24809: LD_INT 29
24811: ST_TO_ADDR
// tech_time := tech_taurad ;
24812: LD_ADDR_VAR 0 13
24816: PUSH
24817: LD_INT 28
24819: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24820: LD_ADDR_VAR 0 11
24824: PUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL_OW 310
24834: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24835: LD_VAR 0 11
24839: PPUSH
24840: CALL_OW 247
24844: PUSH
24845: LD_INT 2
24847: EQUAL
24848: IFFALSE 24852
// exit ;
24850: GO 25362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24852: LD_ADDR_VAR 0 8
24856: PUSH
24857: LD_INT 81
24859: PUSH
24860: LD_VAR 0 9
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 21
24874: PUSH
24875: LD_INT 3
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PPUSH
24890: CALL_OW 69
24894: ST_TO_ADDR
// if not tmp then
24895: LD_VAR 0 8
24899: NOT
24900: IFFALSE 24904
// exit ;
24902: GO 25362
// if in_unit then
24904: LD_VAR 0 11
24908: IFFALSE 24932
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24910: LD_ADDR_VAR 0 10
24914: PUSH
24915: LD_VAR 0 8
24919: PPUSH
24920: LD_VAR 0 11
24924: PPUSH
24925: CALL_OW 74
24929: ST_TO_ADDR
24930: GO 24952
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24932: LD_ADDR_VAR 0 10
24936: PUSH
24937: LD_VAR 0 8
24941: PPUSH
24942: LD_VAR 0 1
24946: PPUSH
24947: CALL_OW 74
24951: ST_TO_ADDR
// if not enemy then
24952: LD_VAR 0 10
24956: NOT
24957: IFFALSE 24961
// exit ;
24959: GO 25362
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24961: LD_VAR 0 11
24965: PUSH
24966: LD_VAR 0 11
24970: PPUSH
24971: LD_VAR 0 10
24975: PPUSH
24976: CALL_OW 296
24980: PUSH
24981: LD_INT 13
24983: GREATER
24984: AND
24985: PUSH
24986: LD_VAR 0 1
24990: PPUSH
24991: LD_VAR 0 10
24995: PPUSH
24996: CALL_OW 296
25000: PUSH
25001: LD_INT 12
25003: GREATER
25004: OR
25005: IFFALSE 25009
// exit ;
25007: GO 25362
// missile := [ 1 ] ;
25009: LD_ADDR_VAR 0 14
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25020: LD_VAR 0 9
25024: PPUSH
25025: LD_VAR 0 12
25029: PPUSH
25030: CALL_OW 325
25034: IFFALSE 25063
// missile := Insert ( missile , missile + 1 , 2 ) ;
25036: LD_ADDR_VAR 0 14
25040: PUSH
25041: LD_VAR 0 14
25045: PPUSH
25046: LD_VAR 0 14
25050: PUSH
25051: LD_INT 1
25053: PLUS
25054: PPUSH
25055: LD_INT 2
25057: PPUSH
25058: CALL_OW 2
25062: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25063: LD_VAR 0 9
25067: PPUSH
25068: LD_VAR 0 13
25072: PPUSH
25073: CALL_OW 325
25077: PUSH
25078: LD_VAR 0 10
25082: PPUSH
25083: CALL_OW 255
25087: PPUSH
25088: LD_VAR 0 13
25092: PPUSH
25093: CALL_OW 325
25097: NOT
25098: AND
25099: IFFALSE 25128
// missile := Insert ( missile , missile + 1 , 3 ) ;
25101: LD_ADDR_VAR 0 14
25105: PUSH
25106: LD_VAR 0 14
25110: PPUSH
25111: LD_VAR 0 14
25115: PUSH
25116: LD_INT 1
25118: PLUS
25119: PPUSH
25120: LD_INT 3
25122: PPUSH
25123: CALL_OW 2
25127: ST_TO_ADDR
// if missile < 2 then
25128: LD_VAR 0 14
25132: PUSH
25133: LD_INT 2
25135: LESS
25136: IFFALSE 25140
// exit ;
25138: GO 25362
// x := GetX ( enemy ) ;
25140: LD_ADDR_VAR 0 4
25144: PUSH
25145: LD_VAR 0 10
25149: PPUSH
25150: CALL_OW 250
25154: ST_TO_ADDR
// y := GetY ( enemy ) ;
25155: LD_ADDR_VAR 0 5
25159: PUSH
25160: LD_VAR 0 10
25164: PPUSH
25165: CALL_OW 251
25169: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25170: LD_ADDR_VAR 0 6
25174: PUSH
25175: LD_VAR 0 4
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PPUSH
25184: LD_INT 1
25186: PPUSH
25187: CALL_OW 12
25191: PLUS
25192: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25193: LD_ADDR_VAR 0 7
25197: PUSH
25198: LD_VAR 0 5
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PPUSH
25207: LD_INT 1
25209: PPUSH
25210: CALL_OW 12
25214: PLUS
25215: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25216: LD_VAR 0 6
25220: PPUSH
25221: LD_VAR 0 7
25225: PPUSH
25226: CALL_OW 488
25230: NOT
25231: IFFALSE 25253
// begin _x := x ;
25233: LD_ADDR_VAR 0 6
25237: PUSH
25238: LD_VAR 0 4
25242: ST_TO_ADDR
// _y := y ;
25243: LD_ADDR_VAR 0 7
25247: PUSH
25248: LD_VAR 0 5
25252: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25253: LD_ADDR_VAR 0 3
25257: PUSH
25258: LD_INT 1
25260: PPUSH
25261: LD_VAR 0 14
25265: PPUSH
25266: CALL_OW 12
25270: ST_TO_ADDR
// case i of 1 :
25271: LD_VAR 0 3
25275: PUSH
25276: LD_INT 1
25278: DOUBLE
25279: EQUAL
25280: IFTRUE 25284
25282: GO 25301
25284: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25285: LD_VAR 0 1
25289: PPUSH
25290: LD_VAR 0 10
25294: PPUSH
25295: CALL_OW 115
25299: GO 25362
25301: LD_INT 2
25303: DOUBLE
25304: EQUAL
25305: IFTRUE 25309
25307: GO 25331
25309: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25310: LD_VAR 0 1
25314: PPUSH
25315: LD_VAR 0 6
25319: PPUSH
25320: LD_VAR 0 7
25324: PPUSH
25325: CALL_OW 153
25329: GO 25362
25331: LD_INT 3
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25361
25339: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25340: LD_VAR 0 1
25344: PPUSH
25345: LD_VAR 0 6
25349: PPUSH
25350: LD_VAR 0 7
25354: PPUSH
25355: CALL_OW 154
25359: GO 25362
25361: POP
// end ;
25362: LD_VAR 0 2
25366: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25367: LD_INT 0
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
// if not unit or not building then
25375: LD_VAR 0 1
25379: NOT
25380: PUSH
25381: LD_VAR 0 2
25385: NOT
25386: OR
25387: IFFALSE 25391
// exit ;
25389: GO 25549
// x := GetX ( building ) ;
25391: LD_ADDR_VAR 0 5
25395: PUSH
25396: LD_VAR 0 2
25400: PPUSH
25401: CALL_OW 250
25405: ST_TO_ADDR
// y := GetY ( building ) ;
25406: LD_ADDR_VAR 0 6
25410: PUSH
25411: LD_VAR 0 2
25415: PPUSH
25416: CALL_OW 251
25420: ST_TO_ADDR
// for i = 0 to 5 do
25421: LD_ADDR_VAR 0 4
25425: PUSH
25426: DOUBLE
25427: LD_INT 0
25429: DEC
25430: ST_TO_ADDR
25431: LD_INT 5
25433: PUSH
25434: FOR_TO
25435: IFFALSE 25547
// begin _x := ShiftX ( x , i , 3 ) ;
25437: LD_ADDR_VAR 0 7
25441: PUSH
25442: LD_VAR 0 5
25446: PPUSH
25447: LD_VAR 0 4
25451: PPUSH
25452: LD_INT 3
25454: PPUSH
25455: CALL_OW 272
25459: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25460: LD_ADDR_VAR 0 8
25464: PUSH
25465: LD_VAR 0 6
25469: PPUSH
25470: LD_VAR 0 4
25474: PPUSH
25475: LD_INT 3
25477: PPUSH
25478: CALL_OW 273
25482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25483: LD_VAR 0 7
25487: PPUSH
25488: LD_VAR 0 8
25492: PPUSH
25493: CALL_OW 488
25497: NOT
25498: IFFALSE 25502
// continue ;
25500: GO 25434
// if HexInfo ( _x , _y ) = 0 then
25502: LD_VAR 0 7
25506: PPUSH
25507: LD_VAR 0 8
25511: PPUSH
25512: CALL_OW 428
25516: PUSH
25517: LD_INT 0
25519: EQUAL
25520: IFFALSE 25545
// begin ComMoveXY ( unit , _x , _y ) ;
25522: LD_VAR 0 1
25526: PPUSH
25527: LD_VAR 0 7
25531: PPUSH
25532: LD_VAR 0 8
25536: PPUSH
25537: CALL_OW 111
// exit ;
25541: POP
25542: POP
25543: GO 25549
// end ; end ;
25545: GO 25434
25547: POP
25548: POP
// end ;
25549: LD_VAR 0 3
25553: RET
// export function ScanBase ( side , base_area ) ; begin
25554: LD_INT 0
25556: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25557: LD_ADDR_VAR 0 3
25561: PUSH
25562: LD_VAR 0 2
25566: PPUSH
25567: LD_INT 81
25569: PUSH
25570: LD_VAR 0 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PPUSH
25579: CALL_OW 70
25583: ST_TO_ADDR
// end ;
25584: LD_VAR 0 3
25588: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25589: LD_INT 0
25591: PPUSH
25592: PPUSH
25593: PPUSH
25594: PPUSH
// result := false ;
25595: LD_ADDR_VAR 0 2
25599: PUSH
25600: LD_INT 0
25602: ST_TO_ADDR
// side := GetSide ( unit ) ;
25603: LD_ADDR_VAR 0 3
25607: PUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 255
25617: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25618: LD_ADDR_VAR 0 4
25622: PUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 248
25632: ST_TO_ADDR
// case nat of 1 :
25633: LD_VAR 0 4
25637: PUSH
25638: LD_INT 1
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25657
25646: POP
// tech := tech_lassight ; 2 :
25647: LD_ADDR_VAR 0 5
25651: PUSH
25652: LD_INT 12
25654: ST_TO_ADDR
25655: GO 25696
25657: LD_INT 2
25659: DOUBLE
25660: EQUAL
25661: IFTRUE 25665
25663: GO 25676
25665: POP
// tech := tech_mortar ; 3 :
25666: LD_ADDR_VAR 0 5
25670: PUSH
25671: LD_INT 41
25673: ST_TO_ADDR
25674: GO 25696
25676: LD_INT 3
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25695
25684: POP
// tech := tech_bazooka ; end ;
25685: LD_ADDR_VAR 0 5
25689: PUSH
25690: LD_INT 44
25692: ST_TO_ADDR
25693: GO 25696
25695: POP
// if Researched ( side , tech ) then
25696: LD_VAR 0 3
25700: PPUSH
25701: LD_VAR 0 5
25705: PPUSH
25706: CALL_OW 325
25710: IFFALSE 25737
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25712: LD_ADDR_VAR 0 2
25716: PUSH
25717: LD_INT 5
25719: PUSH
25720: LD_INT 8
25722: PUSH
25723: LD_INT 9
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: PUSH
25731: LD_VAR 0 4
25735: ARRAY
25736: ST_TO_ADDR
// end ;
25737: LD_VAR 0 2
25741: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
25746: PPUSH
// if not mines then
25747: LD_VAR 0 2
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 25900
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25756: LD_ADDR_VAR 0 5
25760: PUSH
25761: LD_INT 81
25763: PUSH
25764: LD_VAR 0 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: LD_INT 21
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PPUSH
25794: CALL_OW 69
25798: ST_TO_ADDR
// for i in mines do
25799: LD_ADDR_VAR 0 4
25803: PUSH
25804: LD_VAR 0 2
25808: PUSH
25809: FOR_IN
25810: IFFALSE 25898
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25812: LD_VAR 0 4
25816: PUSH
25817: LD_INT 1
25819: ARRAY
25820: PPUSH
25821: LD_VAR 0 4
25825: PUSH
25826: LD_INT 2
25828: ARRAY
25829: PPUSH
25830: CALL_OW 458
25834: NOT
25835: IFFALSE 25839
// continue ;
25837: GO 25809
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25839: LD_VAR 0 4
25843: PUSH
25844: LD_INT 1
25846: ARRAY
25847: PPUSH
25848: LD_VAR 0 4
25852: PUSH
25853: LD_INT 2
25855: ARRAY
25856: PPUSH
25857: CALL_OW 428
25861: PUSH
25862: LD_VAR 0 5
25866: IN
25867: IFFALSE 25896
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25869: LD_VAR 0 4
25873: PUSH
25874: LD_INT 1
25876: ARRAY
25877: PPUSH
25878: LD_VAR 0 4
25882: PUSH
25883: LD_INT 2
25885: ARRAY
25886: PPUSH
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 456
// end ;
25896: GO 25809
25898: POP
25899: POP
// end ;
25900: LD_VAR 0 3
25904: RET
// export function Count ( array ) ; var i ; begin
25905: LD_INT 0
25907: PPUSH
25908: PPUSH
// result := 0 ;
25909: LD_ADDR_VAR 0 2
25913: PUSH
25914: LD_INT 0
25916: ST_TO_ADDR
// for i in array do
25917: LD_ADDR_VAR 0 3
25921: PUSH
25922: LD_VAR 0 1
25926: PUSH
25927: FOR_IN
25928: IFFALSE 25952
// if i then
25930: LD_VAR 0 3
25934: IFFALSE 25950
// result := result + 1 ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: LD_VAR 0 2
25945: PUSH
25946: LD_INT 1
25948: PLUS
25949: ST_TO_ADDR
25950: GO 25927
25952: POP
25953: POP
// end ;
25954: LD_VAR 0 2
25958: RET
// export function IsEmpty ( building ) ; begin
25959: LD_INT 0
25961: PPUSH
// if not building then
25962: LD_VAR 0 1
25966: NOT
25967: IFFALSE 25971
// exit ;
25969: GO 26014
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25971: LD_ADDR_VAR 0 2
25975: PUSH
25976: LD_VAR 0 1
25980: PUSH
25981: LD_INT 22
25983: PUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL_OW 255
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 58
26000: PUSH
26001: EMPTY
26002: LIST
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PPUSH
26008: CALL_OW 69
26012: IN
26013: ST_TO_ADDR
// end ;
26014: LD_VAR 0 2
26018: RET
// export function IsNotFull ( building ) ; begin
26019: LD_INT 0
26021: PPUSH
// if not building then
26022: LD_VAR 0 1
26026: NOT
26027: IFFALSE 26031
// exit ;
26029: GO 26050
// result := UnitsInside ( building ) < 6 ;
26031: LD_ADDR_VAR 0 2
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 313
26045: PUSH
26046: LD_INT 6
26048: LESS
26049: ST_TO_ADDR
// end ;
26050: LD_VAR 0 2
26054: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26055: LD_INT 0
26057: PPUSH
26058: PPUSH
26059: PPUSH
26060: PPUSH
// tmp := [ ] ;
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: EMPTY
26067: ST_TO_ADDR
// list := [ ] ;
26068: LD_ADDR_VAR 0 5
26072: PUSH
26073: EMPTY
26074: ST_TO_ADDR
// for i = 16 to 25 do
26075: LD_ADDR_VAR 0 4
26079: PUSH
26080: DOUBLE
26081: LD_INT 16
26083: DEC
26084: ST_TO_ADDR
26085: LD_INT 25
26087: PUSH
26088: FOR_TO
26089: IFFALSE 26162
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26091: LD_ADDR_VAR 0 3
26095: PUSH
26096: LD_VAR 0 3
26100: PUSH
26101: LD_INT 22
26103: PUSH
26104: LD_VAR 0 1
26108: PPUSH
26109: CALL_OW 255
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 91
26120: PUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_INT 6
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 30
26136: PUSH
26137: LD_VAR 0 4
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: PUSH
26151: EMPTY
26152: LIST
26153: PPUSH
26154: CALL_OW 69
26158: ADD
26159: ST_TO_ADDR
26160: GO 26088
26162: POP
26163: POP
// for i = 1 to tmp do
26164: LD_ADDR_VAR 0 4
26168: PUSH
26169: DOUBLE
26170: LD_INT 1
26172: DEC
26173: ST_TO_ADDR
26174: LD_VAR 0 3
26178: PUSH
26179: FOR_TO
26180: IFFALSE 26268
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26182: LD_ADDR_VAR 0 5
26186: PUSH
26187: LD_VAR 0 5
26191: PUSH
26192: LD_VAR 0 3
26196: PUSH
26197: LD_VAR 0 4
26201: ARRAY
26202: PPUSH
26203: CALL_OW 266
26207: PUSH
26208: LD_VAR 0 3
26212: PUSH
26213: LD_VAR 0 4
26217: ARRAY
26218: PPUSH
26219: CALL_OW 250
26223: PUSH
26224: LD_VAR 0 3
26228: PUSH
26229: LD_VAR 0 4
26233: ARRAY
26234: PPUSH
26235: CALL_OW 251
26239: PUSH
26240: LD_VAR 0 3
26244: PUSH
26245: LD_VAR 0 4
26249: ARRAY
26250: PPUSH
26251: CALL_OW 254
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: ADD
26265: ST_TO_ADDR
26266: GO 26179
26268: POP
26269: POP
// result := list ;
26270: LD_ADDR_VAR 0 2
26274: PUSH
26275: LD_VAR 0 5
26279: ST_TO_ADDR
// end ;
26280: LD_VAR 0 2
26284: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26285: LD_INT 0
26287: PPUSH
26288: PPUSH
26289: PPUSH
26290: PPUSH
26291: PPUSH
26292: PPUSH
26293: PPUSH
// if not factory then
26294: LD_VAR 0 1
26298: NOT
26299: IFFALSE 26303
// exit ;
26301: GO 26896
// if control = control_apeman then
26303: LD_VAR 0 4
26307: PUSH
26308: LD_INT 5
26310: EQUAL
26311: IFFALSE 26420
// begin tmp := UnitsInside ( factory ) ;
26313: LD_ADDR_VAR 0 8
26317: PUSH
26318: LD_VAR 0 1
26322: PPUSH
26323: CALL_OW 313
26327: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26328: LD_VAR 0 8
26332: PPUSH
26333: LD_INT 25
26335: PUSH
26336: LD_INT 12
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PPUSH
26343: CALL_OW 72
26347: NOT
26348: IFFALSE 26358
// control := control_manual ;
26350: LD_ADDR_VAR 0 4
26354: PUSH
26355: LD_INT 1
26357: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26358: LD_ADDR_VAR 0 8
26362: PUSH
26363: LD_VAR 0 1
26367: PPUSH
26368: CALL 26055 0 1
26372: ST_TO_ADDR
// if tmp then
26373: LD_VAR 0 8
26377: IFFALSE 26420
// begin for i in tmp do
26379: LD_ADDR_VAR 0 7
26383: PUSH
26384: LD_VAR 0 8
26388: PUSH
26389: FOR_IN
26390: IFFALSE 26418
// if i [ 1 ] = b_ext_radio then
26392: LD_VAR 0 7
26396: PUSH
26397: LD_INT 1
26399: ARRAY
26400: PUSH
26401: LD_INT 22
26403: EQUAL
26404: IFFALSE 26416
// begin control := control_remote ;
26406: LD_ADDR_VAR 0 4
26410: PUSH
26411: LD_INT 2
26413: ST_TO_ADDR
// break ;
26414: GO 26418
// end ;
26416: GO 26389
26418: POP
26419: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26420: LD_VAR 0 1
26424: PPUSH
26425: LD_VAR 0 2
26429: PPUSH
26430: LD_VAR 0 3
26434: PPUSH
26435: LD_VAR 0 4
26439: PPUSH
26440: LD_VAR 0 5
26444: PPUSH
26445: CALL_OW 448
26449: IFFALSE 26484
// begin result := [ chassis , engine , control , weapon ] ;
26451: LD_ADDR_VAR 0 6
26455: PUSH
26456: LD_VAR 0 2
26460: PUSH
26461: LD_VAR 0 3
26465: PUSH
26466: LD_VAR 0 4
26470: PUSH
26471: LD_VAR 0 5
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: ST_TO_ADDR
// exit ;
26482: GO 26896
// end ; _chassis := AvailableChassisList ( factory ) ;
26484: LD_ADDR_VAR 0 9
26488: PUSH
26489: LD_VAR 0 1
26493: PPUSH
26494: CALL_OW 475
26498: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26499: LD_ADDR_VAR 0 11
26503: PUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 476
26513: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26514: LD_ADDR_VAR 0 12
26518: PUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL_OW 477
26528: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26529: LD_ADDR_VAR 0 10
26533: PUSH
26534: LD_VAR 0 1
26538: PPUSH
26539: CALL_OW 478
26543: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26544: LD_VAR 0 9
26548: NOT
26549: PUSH
26550: LD_VAR 0 11
26554: NOT
26555: OR
26556: PUSH
26557: LD_VAR 0 12
26561: NOT
26562: OR
26563: PUSH
26564: LD_VAR 0 10
26568: NOT
26569: OR
26570: IFFALSE 26605
// begin result := [ chassis , engine , control , weapon ] ;
26572: LD_ADDR_VAR 0 6
26576: PUSH
26577: LD_VAR 0 2
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_VAR 0 4
26591: PUSH
26592: LD_VAR 0 5
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: ST_TO_ADDR
// exit ;
26603: GO 26896
// end ; if not chassis in _chassis then
26605: LD_VAR 0 2
26609: PUSH
26610: LD_VAR 0 9
26614: IN
26615: NOT
26616: IFFALSE 26642
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26618: LD_ADDR_VAR 0 2
26622: PUSH
26623: LD_VAR 0 9
26627: PUSH
26628: LD_INT 1
26630: PPUSH
26631: LD_VAR 0 9
26635: PPUSH
26636: CALL_OW 12
26640: ARRAY
26641: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26642: LD_VAR 0 2
26646: PPUSH
26647: LD_VAR 0 3
26651: PPUSH
26652: CALL 26901 0 2
26656: NOT
26657: IFFALSE 26716
// repeat engine := _engine [ 1 ] ;
26659: LD_ADDR_VAR 0 3
26663: PUSH
26664: LD_VAR 0 11
26668: PUSH
26669: LD_INT 1
26671: ARRAY
26672: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26673: LD_ADDR_VAR 0 11
26677: PUSH
26678: LD_VAR 0 11
26682: PPUSH
26683: LD_INT 1
26685: PPUSH
26686: CALL_OW 3
26690: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26691: LD_VAR 0 2
26695: PPUSH
26696: LD_VAR 0 3
26700: PPUSH
26701: CALL 26901 0 2
26705: PUSH
26706: LD_VAR 0 11
26710: PUSH
26711: EMPTY
26712: EQUAL
26713: OR
26714: IFFALSE 26659
// if not control in _control then
26716: LD_VAR 0 4
26720: PUSH
26721: LD_VAR 0 12
26725: IN
26726: NOT
26727: IFFALSE 26753
// control := _control [ rand ( 1 , _control ) ] ;
26729: LD_ADDR_VAR 0 4
26733: PUSH
26734: LD_VAR 0 12
26738: PUSH
26739: LD_INT 1
26741: PPUSH
26742: LD_VAR 0 12
26746: PPUSH
26747: CALL_OW 12
26751: ARRAY
26752: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26753: LD_VAR 0 2
26757: PPUSH
26758: LD_VAR 0 5
26762: PPUSH
26763: CALL 27121 0 2
26767: NOT
26768: IFFALSE 26827
// repeat weapon := _weapon [ 1 ] ;
26770: LD_ADDR_VAR 0 5
26774: PUSH
26775: LD_VAR 0 10
26779: PUSH
26780: LD_INT 1
26782: ARRAY
26783: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26784: LD_ADDR_VAR 0 10
26788: PUSH
26789: LD_VAR 0 10
26793: PPUSH
26794: LD_INT 1
26796: PPUSH
26797: CALL_OW 3
26801: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26802: LD_VAR 0 2
26806: PPUSH
26807: LD_VAR 0 5
26811: PPUSH
26812: CALL 27121 0 2
26816: PUSH
26817: LD_VAR 0 10
26821: PUSH
26822: EMPTY
26823: EQUAL
26824: OR
26825: IFFALSE 26770
// result := [ ] ;
26827: LD_ADDR_VAR 0 6
26831: PUSH
26832: EMPTY
26833: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26834: LD_VAR 0 1
26838: PPUSH
26839: LD_VAR 0 2
26843: PPUSH
26844: LD_VAR 0 3
26848: PPUSH
26849: LD_VAR 0 4
26853: PPUSH
26854: LD_VAR 0 5
26858: PPUSH
26859: CALL_OW 448
26863: IFFALSE 26896
// result := [ chassis , engine , control , weapon ] ;
26865: LD_ADDR_VAR 0 6
26869: PUSH
26870: LD_VAR 0 2
26874: PUSH
26875: LD_VAR 0 3
26879: PUSH
26880: LD_VAR 0 4
26884: PUSH
26885: LD_VAR 0 5
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: ST_TO_ADDR
// end ;
26896: LD_VAR 0 6
26900: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26901: LD_INT 0
26903: PPUSH
// if not chassis or not engine then
26904: LD_VAR 0 1
26908: NOT
26909: PUSH
26910: LD_VAR 0 2
26914: NOT
26915: OR
26916: IFFALSE 26920
// exit ;
26918: GO 27116
// case engine of engine_solar :
26920: LD_VAR 0 2
26924: PUSH
26925: LD_INT 2
26927: DOUBLE
26928: EQUAL
26929: IFTRUE 26933
26931: GO 26971
26933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26934: LD_ADDR_VAR 0 3
26938: PUSH
26939: LD_INT 11
26941: PUSH
26942: LD_INT 12
26944: PUSH
26945: LD_INT 13
26947: PUSH
26948: LD_INT 14
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
26969: GO 27100
26971: LD_INT 1
26973: DOUBLE
26974: EQUAL
26975: IFTRUE 26979
26977: GO 27041
26979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26980: LD_ADDR_VAR 0 3
26984: PUSH
26985: LD_INT 11
26987: PUSH
26988: LD_INT 12
26990: PUSH
26991: LD_INT 13
26993: PUSH
26994: LD_INT 14
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 2
27002: PUSH
27003: LD_INT 3
27005: PUSH
27006: LD_INT 4
27008: PUSH
27009: LD_INT 5
27011: PUSH
27012: LD_INT 21
27014: PUSH
27015: LD_INT 23
27017: PUSH
27018: LD_INT 22
27020: PUSH
27021: LD_INT 24
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: ST_TO_ADDR
27039: GO 27100
27041: LD_INT 3
27043: DOUBLE
27044: EQUAL
27045: IFTRUE 27049
27047: GO 27099
27049: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27050: LD_ADDR_VAR 0 3
27054: PUSH
27055: LD_INT 13
27057: PUSH
27058: LD_INT 14
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: LD_INT 3
27066: PUSH
27067: LD_INT 4
27069: PUSH
27070: LD_INT 5
27072: PUSH
27073: LD_INT 21
27075: PUSH
27076: LD_INT 22
27078: PUSH
27079: LD_INT 23
27081: PUSH
27082: LD_INT 24
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: ST_TO_ADDR
27097: GO 27100
27099: POP
// result := ( chassis in result ) ;
27100: LD_ADDR_VAR 0 3
27104: PUSH
27105: LD_VAR 0 1
27109: PUSH
27110: LD_VAR 0 3
27114: IN
27115: ST_TO_ADDR
// end ;
27116: LD_VAR 0 3
27120: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27121: LD_INT 0
27123: PPUSH
// if not chassis or not weapon then
27124: LD_VAR 0 1
27128: NOT
27129: PUSH
27130: LD_VAR 0 2
27134: NOT
27135: OR
27136: IFFALSE 27140
// exit ;
27138: GO 28202
// case weapon of us_machine_gun :
27140: LD_VAR 0 2
27144: PUSH
27145: LD_INT 2
27147: DOUBLE
27148: EQUAL
27149: IFTRUE 27153
27151: GO 27183
27153: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: LD_INT 4
27170: PUSH
27171: LD_INT 5
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
27181: GO 28186
27183: LD_INT 3
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27191
27189: GO 27221
27191: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27192: LD_ADDR_VAR 0 3
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: LD_INT 3
27205: PUSH
27206: LD_INT 4
27208: PUSH
27209: LD_INT 5
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
27219: GO 28186
27221: LD_INT 11
27223: DOUBLE
27224: EQUAL
27225: IFTRUE 27229
27227: GO 27259
27229: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: LD_INT 2
27240: PUSH
27241: LD_INT 3
27243: PUSH
27244: LD_INT 4
27246: PUSH
27247: LD_INT 5
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
27257: GO 28186
27259: LD_INT 4
27261: DOUBLE
27262: EQUAL
27263: IFTRUE 27267
27265: GO 27293
27267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 3
27278: PUSH
27279: LD_INT 4
27281: PUSH
27282: LD_INT 5
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: ST_TO_ADDR
27291: GO 28186
27293: LD_INT 5
27295: DOUBLE
27296: EQUAL
27297: IFTRUE 27301
27299: GO 27327
27301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27302: LD_ADDR_VAR 0 3
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 4
27315: PUSH
27316: LD_INT 5
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: ST_TO_ADDR
27325: GO 28186
27327: LD_INT 9
27329: DOUBLE
27330: EQUAL
27331: IFTRUE 27335
27333: GO 27361
27335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27336: LD_ADDR_VAR 0 3
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: LD_INT 4
27349: PUSH
27350: LD_INT 5
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: ST_TO_ADDR
27359: GO 28186
27361: LD_INT 7
27363: DOUBLE
27364: EQUAL
27365: IFTRUE 27369
27367: GO 27395
27369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27370: LD_ADDR_VAR 0 3
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: LD_INT 3
27380: PUSH
27381: LD_INT 4
27383: PUSH
27384: LD_INT 5
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: ST_TO_ADDR
27393: GO 28186
27395: LD_INT 12
27397: DOUBLE
27398: EQUAL
27399: IFTRUE 27403
27401: GO 27429
27403: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27404: LD_ADDR_VAR 0 3
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: LD_INT 3
27414: PUSH
27415: LD_INT 4
27417: PUSH
27418: LD_INT 5
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: ST_TO_ADDR
27427: GO 28186
27429: LD_INT 13
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27463
27437: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: LD_INT 4
27451: PUSH
27452: LD_INT 5
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: ST_TO_ADDR
27461: GO 28186
27463: LD_INT 14
27465: DOUBLE
27466: EQUAL
27467: IFTRUE 27471
27469: GO 27489
27471: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27472: LD_ADDR_VAR 0 3
27476: PUSH
27477: LD_INT 4
27479: PUSH
27480: LD_INT 5
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: ST_TO_ADDR
27487: GO 28186
27489: LD_INT 6
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27515
27497: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 4
27505: PUSH
27506: LD_INT 5
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 28186
27515: LD_INT 10
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27541
27523: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 4
27531: PUSH
27532: LD_INT 5
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: ST_TO_ADDR
27539: GO 28186
27541: LD_INT 22
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27575
27549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 11
27557: PUSH
27558: LD_INT 12
27560: PUSH
27561: LD_INT 13
27563: PUSH
27564: LD_INT 14
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: ST_TO_ADDR
27573: GO 28186
27575: LD_INT 23
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27609
27583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_INT 11
27591: PUSH
27592: LD_INT 12
27594: PUSH
27595: LD_INT 13
27597: PUSH
27598: LD_INT 14
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
27607: GO 28186
27609: LD_INT 24
27611: DOUBLE
27612: EQUAL
27613: IFTRUE 27617
27615: GO 27643
27617: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27618: LD_ADDR_VAR 0 3
27622: PUSH
27623: LD_INT 11
27625: PUSH
27626: LD_INT 12
27628: PUSH
27629: LD_INT 13
27631: PUSH
27632: LD_INT 14
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
27641: GO 28186
27643: LD_INT 30
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27651
27649: GO 27677
27651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27652: LD_ADDR_VAR 0 3
27656: PUSH
27657: LD_INT 11
27659: PUSH
27660: LD_INT 12
27662: PUSH
27663: LD_INT 13
27665: PUSH
27666: LD_INT 14
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: ST_TO_ADDR
27675: GO 28186
27677: LD_INT 25
27679: DOUBLE
27680: EQUAL
27681: IFTRUE 27685
27683: GO 27703
27685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27686: LD_ADDR_VAR 0 3
27690: PUSH
27691: LD_INT 13
27693: PUSH
27694: LD_INT 14
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: ST_TO_ADDR
27701: GO 28186
27703: LD_INT 27
27705: DOUBLE
27706: EQUAL
27707: IFTRUE 27711
27709: GO 27729
27711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27712: LD_ADDR_VAR 0 3
27716: PUSH
27717: LD_INT 13
27719: PUSH
27720: LD_INT 14
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: ST_TO_ADDR
27727: GO 28186
27729: LD_EXP 12
27733: DOUBLE
27734: EQUAL
27735: IFTRUE 27739
27737: GO 27765
27739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27740: LD_ADDR_VAR 0 3
27744: PUSH
27745: LD_INT 11
27747: PUSH
27748: LD_INT 12
27750: PUSH
27751: LD_INT 13
27753: PUSH
27754: LD_INT 14
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: ST_TO_ADDR
27763: GO 28186
27765: LD_INT 28
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27773
27771: GO 27791
27773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27774: LD_ADDR_VAR 0 3
27778: PUSH
27779: LD_INT 13
27781: PUSH
27782: LD_INT 14
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: ST_TO_ADDR
27789: GO 28186
27791: LD_INT 29
27793: DOUBLE
27794: EQUAL
27795: IFTRUE 27799
27797: GO 27817
27799: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27800: LD_ADDR_VAR 0 3
27804: PUSH
27805: LD_INT 13
27807: PUSH
27808: LD_INT 14
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: ST_TO_ADDR
27815: GO 28186
27817: LD_INT 31
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 27843
27825: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27826: LD_ADDR_VAR 0 3
27830: PUSH
27831: LD_INT 13
27833: PUSH
27834: LD_INT 14
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: ST_TO_ADDR
27841: GO 28186
27843: LD_INT 26
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27851
27849: GO 27869
27851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27852: LD_ADDR_VAR 0 3
27856: PUSH
27857: LD_INT 13
27859: PUSH
27860: LD_INT 14
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: ST_TO_ADDR
27867: GO 28186
27869: LD_INT 42
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27877
27875: GO 27903
27877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27878: LD_ADDR_VAR 0 3
27882: PUSH
27883: LD_INT 21
27885: PUSH
27886: LD_INT 22
27888: PUSH
27889: LD_INT 23
27891: PUSH
27892: LD_INT 24
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: ST_TO_ADDR
27901: GO 28186
27903: LD_INT 43
27905: DOUBLE
27906: EQUAL
27907: IFTRUE 27911
27909: GO 27937
27911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27912: LD_ADDR_VAR 0 3
27916: PUSH
27917: LD_INT 21
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_INT 23
27925: PUSH
27926: LD_INT 24
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
27935: GO 28186
27937: LD_INT 44
27939: DOUBLE
27940: EQUAL
27941: IFTRUE 27945
27943: GO 27971
27945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27946: LD_ADDR_VAR 0 3
27950: PUSH
27951: LD_INT 21
27953: PUSH
27954: LD_INT 22
27956: PUSH
27957: LD_INT 23
27959: PUSH
27960: LD_INT 24
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: ST_TO_ADDR
27969: GO 28186
27971: LD_INT 45
27973: DOUBLE
27974: EQUAL
27975: IFTRUE 27979
27977: GO 28005
27979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27980: LD_ADDR_VAR 0 3
27984: PUSH
27985: LD_INT 21
27987: PUSH
27988: LD_INT 22
27990: PUSH
27991: LD_INT 23
27993: PUSH
27994: LD_INT 24
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: ST_TO_ADDR
28003: GO 28186
28005: LD_INT 49
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28039
28013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_INT 21
28021: PUSH
28022: LD_INT 22
28024: PUSH
28025: LD_INT 23
28027: PUSH
28028: LD_INT 24
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: ST_TO_ADDR
28037: GO 28186
28039: LD_INT 51
28041: DOUBLE
28042: EQUAL
28043: IFTRUE 28047
28045: GO 28073
28047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28048: LD_ADDR_VAR 0 3
28052: PUSH
28053: LD_INT 21
28055: PUSH
28056: LD_INT 22
28058: PUSH
28059: LD_INT 23
28061: PUSH
28062: LD_INT 24
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: ST_TO_ADDR
28071: GO 28186
28073: LD_INT 52
28075: DOUBLE
28076: EQUAL
28077: IFTRUE 28081
28079: GO 28107
28081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28082: LD_ADDR_VAR 0 3
28086: PUSH
28087: LD_INT 21
28089: PUSH
28090: LD_INT 22
28092: PUSH
28093: LD_INT 23
28095: PUSH
28096: LD_INT 24
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: ST_TO_ADDR
28105: GO 28186
28107: LD_INT 53
28109: DOUBLE
28110: EQUAL
28111: IFTRUE 28115
28113: GO 28133
28115: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28116: LD_ADDR_VAR 0 3
28120: PUSH
28121: LD_INT 23
28123: PUSH
28124: LD_INT 24
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: ST_TO_ADDR
28131: GO 28186
28133: LD_INT 46
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28159
28141: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28142: LD_ADDR_VAR 0 3
28146: PUSH
28147: LD_INT 23
28149: PUSH
28150: LD_INT 24
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: ST_TO_ADDR
28157: GO 28186
28159: LD_INT 47
28161: DOUBLE
28162: EQUAL
28163: IFTRUE 28167
28165: GO 28185
28167: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28168: LD_ADDR_VAR 0 3
28172: PUSH
28173: LD_INT 23
28175: PUSH
28176: LD_INT 24
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: ST_TO_ADDR
28183: GO 28186
28185: POP
// result := ( chassis in result ) ;
28186: LD_ADDR_VAR 0 3
28190: PUSH
28191: LD_VAR 0 1
28195: PUSH
28196: LD_VAR 0 3
28200: IN
28201: ST_TO_ADDR
// end ;
28202: LD_VAR 0 3
28206: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28207: LD_INT 0
28209: PPUSH
28210: PPUSH
28211: PPUSH
28212: PPUSH
28213: PPUSH
28214: PPUSH
28215: PPUSH
// result := array ;
28216: LD_ADDR_VAR 0 5
28220: PUSH
28221: LD_VAR 0 1
28225: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28226: LD_VAR 0 1
28230: NOT
28231: PUSH
28232: LD_VAR 0 2
28236: NOT
28237: OR
28238: PUSH
28239: LD_VAR 0 3
28243: NOT
28244: OR
28245: PUSH
28246: LD_VAR 0 2
28250: PUSH
28251: LD_VAR 0 1
28255: GREATER
28256: OR
28257: PUSH
28258: LD_VAR 0 3
28262: PUSH
28263: LD_VAR 0 1
28267: GREATER
28268: OR
28269: IFFALSE 28273
// exit ;
28271: GO 28569
// if direction then
28273: LD_VAR 0 4
28277: IFFALSE 28341
// begin d := 1 ;
28279: LD_ADDR_VAR 0 9
28283: PUSH
28284: LD_INT 1
28286: ST_TO_ADDR
// if i_from > i_to then
28287: LD_VAR 0 2
28291: PUSH
28292: LD_VAR 0 3
28296: GREATER
28297: IFFALSE 28323
// length := ( array - i_from ) + i_to else
28299: LD_ADDR_VAR 0 11
28303: PUSH
28304: LD_VAR 0 1
28308: PUSH
28309: LD_VAR 0 2
28313: MINUS
28314: PUSH
28315: LD_VAR 0 3
28319: PLUS
28320: ST_TO_ADDR
28321: GO 28339
// length := i_to - i_from ;
28323: LD_ADDR_VAR 0 11
28327: PUSH
28328: LD_VAR 0 3
28332: PUSH
28333: LD_VAR 0 2
28337: MINUS
28338: ST_TO_ADDR
// end else
28339: GO 28402
// begin d := - 1 ;
28341: LD_ADDR_VAR 0 9
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: ST_TO_ADDR
// if i_from > i_to then
28350: LD_VAR 0 2
28354: PUSH
28355: LD_VAR 0 3
28359: GREATER
28360: IFFALSE 28380
// length := i_from - i_to else
28362: LD_ADDR_VAR 0 11
28366: PUSH
28367: LD_VAR 0 2
28371: PUSH
28372: LD_VAR 0 3
28376: MINUS
28377: ST_TO_ADDR
28378: GO 28402
// length := ( array - i_to ) + i_from ;
28380: LD_ADDR_VAR 0 11
28384: PUSH
28385: LD_VAR 0 1
28389: PUSH
28390: LD_VAR 0 3
28394: MINUS
28395: PUSH
28396: LD_VAR 0 2
28400: PLUS
28401: ST_TO_ADDR
// end ; if not length then
28402: LD_VAR 0 11
28406: NOT
28407: IFFALSE 28411
// exit ;
28409: GO 28569
// tmp := array ;
28411: LD_ADDR_VAR 0 10
28415: PUSH
28416: LD_VAR 0 1
28420: ST_TO_ADDR
// for i = 1 to length do
28421: LD_ADDR_VAR 0 6
28425: PUSH
28426: DOUBLE
28427: LD_INT 1
28429: DEC
28430: ST_TO_ADDR
28431: LD_VAR 0 11
28435: PUSH
28436: FOR_TO
28437: IFFALSE 28557
// begin for j = 1 to array do
28439: LD_ADDR_VAR 0 7
28443: PUSH
28444: DOUBLE
28445: LD_INT 1
28447: DEC
28448: ST_TO_ADDR
28449: LD_VAR 0 1
28453: PUSH
28454: FOR_TO
28455: IFFALSE 28543
// begin k := j + d ;
28457: LD_ADDR_VAR 0 8
28461: PUSH
28462: LD_VAR 0 7
28466: PUSH
28467: LD_VAR 0 9
28471: PLUS
28472: ST_TO_ADDR
// if k > array then
28473: LD_VAR 0 8
28477: PUSH
28478: LD_VAR 0 1
28482: GREATER
28483: IFFALSE 28493
// k := 1 ;
28485: LD_ADDR_VAR 0 8
28489: PUSH
28490: LD_INT 1
28492: ST_TO_ADDR
// if not k then
28493: LD_VAR 0 8
28497: NOT
28498: IFFALSE 28510
// k := array ;
28500: LD_ADDR_VAR 0 8
28504: PUSH
28505: LD_VAR 0 1
28509: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28510: LD_ADDR_VAR 0 10
28514: PUSH
28515: LD_VAR 0 10
28519: PPUSH
28520: LD_VAR 0 8
28524: PPUSH
28525: LD_VAR 0 1
28529: PUSH
28530: LD_VAR 0 7
28534: ARRAY
28535: PPUSH
28536: CALL_OW 1
28540: ST_TO_ADDR
// end ;
28541: GO 28454
28543: POP
28544: POP
// array := tmp ;
28545: LD_ADDR_VAR 0 1
28549: PUSH
28550: LD_VAR 0 10
28554: ST_TO_ADDR
// end ;
28555: GO 28436
28557: POP
28558: POP
// result := array ;
28559: LD_ADDR_VAR 0 5
28563: PUSH
28564: LD_VAR 0 1
28568: ST_TO_ADDR
// end ;
28569: LD_VAR 0 5
28573: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
// result := 0 ;
28578: LD_ADDR_VAR 0 3
28582: PUSH
28583: LD_INT 0
28585: ST_TO_ADDR
// if not array or not value in array then
28586: LD_VAR 0 1
28590: NOT
28591: PUSH
28592: LD_VAR 0 2
28596: PUSH
28597: LD_VAR 0 1
28601: IN
28602: NOT
28603: OR
28604: IFFALSE 28608
// exit ;
28606: GO 28662
// for i = 1 to array do
28608: LD_ADDR_VAR 0 4
28612: PUSH
28613: DOUBLE
28614: LD_INT 1
28616: DEC
28617: ST_TO_ADDR
28618: LD_VAR 0 1
28622: PUSH
28623: FOR_TO
28624: IFFALSE 28660
// if value = array [ i ] then
28626: LD_VAR 0 2
28630: PUSH
28631: LD_VAR 0 1
28635: PUSH
28636: LD_VAR 0 4
28640: ARRAY
28641: EQUAL
28642: IFFALSE 28658
// begin result := i ;
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_VAR 0 4
28653: ST_TO_ADDR
// exit ;
28654: POP
28655: POP
28656: GO 28662
// end ;
28658: GO 28623
28660: POP
28661: POP
// end ;
28662: LD_VAR 0 3
28666: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28667: LD_INT 0
28669: PPUSH
// vc_chassis := chassis ;
28670: LD_ADDR_OWVAR 37
28674: PUSH
28675: LD_VAR 0 1
28679: ST_TO_ADDR
// vc_engine := engine ;
28680: LD_ADDR_OWVAR 39
28684: PUSH
28685: LD_VAR 0 2
28689: ST_TO_ADDR
// vc_control := control ;
28690: LD_ADDR_OWVAR 38
28694: PUSH
28695: LD_VAR 0 3
28699: ST_TO_ADDR
// vc_weapon := weapon ;
28700: LD_ADDR_OWVAR 40
28704: PUSH
28705: LD_VAR 0 4
28709: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28710: LD_ADDR_OWVAR 41
28714: PUSH
28715: LD_VAR 0 5
28719: ST_TO_ADDR
// end ;
28720: LD_VAR 0 6
28724: RET
// export function WantPlant ( unit ) ; var task ; begin
28725: LD_INT 0
28727: PPUSH
28728: PPUSH
// result := false ;
28729: LD_ADDR_VAR 0 2
28733: PUSH
28734: LD_INT 0
28736: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28737: LD_ADDR_VAR 0 3
28741: PUSH
28742: LD_VAR 0 1
28746: PPUSH
28747: CALL_OW 437
28751: ST_TO_ADDR
// if task then
28752: LD_VAR 0 3
28756: IFFALSE 28784
// if task [ 1 ] [ 1 ] = p then
28758: LD_VAR 0 3
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PUSH
28771: LD_STRING p
28773: EQUAL
28774: IFFALSE 28784
// result := true ;
28776: LD_ADDR_VAR 0 2
28780: PUSH
28781: LD_INT 1
28783: ST_TO_ADDR
// end ;
28784: LD_VAR 0 2
28788: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28789: LD_INT 0
28791: PPUSH
28792: PPUSH
28793: PPUSH
28794: PPUSH
// if pos < 1 then
28795: LD_VAR 0 2
28799: PUSH
28800: LD_INT 1
28802: LESS
28803: IFFALSE 28807
// exit ;
28805: GO 29110
// if pos = 1 then
28807: LD_VAR 0 2
28811: PUSH
28812: LD_INT 1
28814: EQUAL
28815: IFFALSE 28848
// result := Replace ( arr , pos [ 1 ] , value ) else
28817: LD_ADDR_VAR 0 4
28821: PUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_VAR 0 2
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PPUSH
28836: LD_VAR 0 3
28840: PPUSH
28841: CALL_OW 1
28845: ST_TO_ADDR
28846: GO 29110
// begin tmp := arr ;
28848: LD_ADDR_VAR 0 6
28852: PUSH
28853: LD_VAR 0 1
28857: ST_TO_ADDR
// s_arr := [ tmp ] ;
28858: LD_ADDR_VAR 0 7
28862: PUSH
28863: LD_VAR 0 6
28867: PUSH
28868: EMPTY
28869: LIST
28870: ST_TO_ADDR
// for i = 1 to pos - 1 do
28871: LD_ADDR_VAR 0 5
28875: PUSH
28876: DOUBLE
28877: LD_INT 1
28879: DEC
28880: ST_TO_ADDR
28881: LD_VAR 0 2
28885: PUSH
28886: LD_INT 1
28888: MINUS
28889: PUSH
28890: FOR_TO
28891: IFFALSE 28936
// begin tmp := tmp [ pos [ i ] ] ;
28893: LD_ADDR_VAR 0 6
28897: PUSH
28898: LD_VAR 0 6
28902: PUSH
28903: LD_VAR 0 2
28907: PUSH
28908: LD_VAR 0 5
28912: ARRAY
28913: ARRAY
28914: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28915: LD_ADDR_VAR 0 7
28919: PUSH
28920: LD_VAR 0 7
28924: PUSH
28925: LD_VAR 0 6
28929: PUSH
28930: EMPTY
28931: LIST
28932: ADD
28933: ST_TO_ADDR
// end ;
28934: GO 28890
28936: POP
28937: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28938: LD_ADDR_VAR 0 6
28942: PUSH
28943: LD_VAR 0 6
28947: PPUSH
28948: LD_VAR 0 2
28952: PUSH
28953: LD_VAR 0 2
28957: ARRAY
28958: PPUSH
28959: LD_VAR 0 3
28963: PPUSH
28964: CALL_OW 1
28968: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28969: LD_ADDR_VAR 0 7
28973: PUSH
28974: LD_VAR 0 7
28978: PPUSH
28979: LD_VAR 0 7
28983: PPUSH
28984: LD_VAR 0 6
28988: PPUSH
28989: CALL_OW 1
28993: ST_TO_ADDR
// for i = s_arr downto 2 do
28994: LD_ADDR_VAR 0 5
28998: PUSH
28999: DOUBLE
29000: LD_VAR 0 7
29004: INC
29005: ST_TO_ADDR
29006: LD_INT 2
29008: PUSH
29009: FOR_DOWNTO
29010: IFFALSE 29094
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29012: LD_ADDR_VAR 0 6
29016: PUSH
29017: LD_VAR 0 7
29021: PUSH
29022: LD_VAR 0 5
29026: PUSH
29027: LD_INT 1
29029: MINUS
29030: ARRAY
29031: PPUSH
29032: LD_VAR 0 2
29036: PUSH
29037: LD_VAR 0 5
29041: PUSH
29042: LD_INT 1
29044: MINUS
29045: ARRAY
29046: PPUSH
29047: LD_VAR 0 7
29051: PUSH
29052: LD_VAR 0 5
29056: ARRAY
29057: PPUSH
29058: CALL_OW 1
29062: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29063: LD_ADDR_VAR 0 7
29067: PUSH
29068: LD_VAR 0 7
29072: PPUSH
29073: LD_VAR 0 5
29077: PUSH
29078: LD_INT 1
29080: MINUS
29081: PPUSH
29082: LD_VAR 0 6
29086: PPUSH
29087: CALL_OW 1
29091: ST_TO_ADDR
// end ;
29092: GO 29009
29094: POP
29095: POP
// result := s_arr [ 1 ] ;
29096: LD_ADDR_VAR 0 4
29100: PUSH
29101: LD_VAR 0 7
29105: PUSH
29106: LD_INT 1
29108: ARRAY
29109: ST_TO_ADDR
// end ; end ;
29110: LD_VAR 0 4
29114: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29115: LD_INT 0
29117: PPUSH
29118: PPUSH
// if not list then
29119: LD_VAR 0 1
29123: NOT
29124: IFFALSE 29128
// exit ;
29126: GO 29219
// i := list [ pos1 ] ;
29128: LD_ADDR_VAR 0 5
29132: PUSH
29133: LD_VAR 0 1
29137: PUSH
29138: LD_VAR 0 2
29142: ARRAY
29143: ST_TO_ADDR
// if not i then
29144: LD_VAR 0 5
29148: NOT
29149: IFFALSE 29153
// exit ;
29151: GO 29219
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29153: LD_ADDR_VAR 0 1
29157: PUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: LD_VAR 0 2
29167: PPUSH
29168: LD_VAR 0 1
29172: PUSH
29173: LD_VAR 0 3
29177: ARRAY
29178: PPUSH
29179: CALL_OW 1
29183: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29184: LD_ADDR_VAR 0 1
29188: PUSH
29189: LD_VAR 0 1
29193: PPUSH
29194: LD_VAR 0 3
29198: PPUSH
29199: LD_VAR 0 5
29203: PPUSH
29204: CALL_OW 1
29208: ST_TO_ADDR
// result := list ;
29209: LD_ADDR_VAR 0 4
29213: PUSH
29214: LD_VAR 0 1
29218: ST_TO_ADDR
// end ;
29219: LD_VAR 0 4
29223: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29224: LD_INT 0
29226: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29227: LD_ADDR_VAR 0 5
29231: PUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL_OW 250
29241: PPUSH
29242: LD_VAR 0 1
29246: PPUSH
29247: CALL_OW 251
29251: PPUSH
29252: LD_VAR 0 2
29256: PPUSH
29257: LD_VAR 0 3
29261: PPUSH
29262: LD_VAR 0 4
29266: PPUSH
29267: CALL 29277 0 5
29271: ST_TO_ADDR
// end ;
29272: LD_VAR 0 5
29276: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29277: LD_INT 0
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
// if not list then
29283: LD_VAR 0 3
29287: NOT
29288: IFFALSE 29292
// exit ;
29290: GO 29680
// result := [ ] ;
29292: LD_ADDR_VAR 0 6
29296: PUSH
29297: EMPTY
29298: ST_TO_ADDR
// for i in list do
29299: LD_ADDR_VAR 0 7
29303: PUSH
29304: LD_VAR 0 3
29308: PUSH
29309: FOR_IN
29310: IFFALSE 29512
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29312: LD_ADDR_VAR 0 9
29316: PUSH
29317: LD_VAR 0 7
29321: PPUSH
29322: LD_VAR 0 1
29326: PPUSH
29327: LD_VAR 0 2
29331: PPUSH
29332: CALL_OW 297
29336: ST_TO_ADDR
// if not result then
29337: LD_VAR 0 6
29341: NOT
29342: IFFALSE 29368
// result := [ [ i , tmp ] ] else
29344: LD_ADDR_VAR 0 6
29348: PUSH
29349: LD_VAR 0 7
29353: PUSH
29354: LD_VAR 0 9
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: EMPTY
29364: LIST
29365: ST_TO_ADDR
29366: GO 29510
// begin if result [ result ] [ 2 ] < tmp then
29368: LD_VAR 0 6
29372: PUSH
29373: LD_VAR 0 6
29377: ARRAY
29378: PUSH
29379: LD_INT 2
29381: ARRAY
29382: PUSH
29383: LD_VAR 0 9
29387: LESS
29388: IFFALSE 29430
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29390: LD_ADDR_VAR 0 6
29394: PUSH
29395: LD_VAR 0 6
29399: PPUSH
29400: LD_VAR 0 6
29404: PUSH
29405: LD_INT 1
29407: PLUS
29408: PPUSH
29409: LD_VAR 0 7
29413: PUSH
29414: LD_VAR 0 9
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PPUSH
29423: CALL_OW 2
29427: ST_TO_ADDR
29428: GO 29510
// for j = 1 to result do
29430: LD_ADDR_VAR 0 8
29434: PUSH
29435: DOUBLE
29436: LD_INT 1
29438: DEC
29439: ST_TO_ADDR
29440: LD_VAR 0 6
29444: PUSH
29445: FOR_TO
29446: IFFALSE 29508
// begin if tmp < result [ j ] [ 2 ] then
29448: LD_VAR 0 9
29452: PUSH
29453: LD_VAR 0 6
29457: PUSH
29458: LD_VAR 0 8
29462: ARRAY
29463: PUSH
29464: LD_INT 2
29466: ARRAY
29467: LESS
29468: IFFALSE 29506
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29470: LD_ADDR_VAR 0 6
29474: PUSH
29475: LD_VAR 0 6
29479: PPUSH
29480: LD_VAR 0 8
29484: PPUSH
29485: LD_VAR 0 7
29489: PUSH
29490: LD_VAR 0 9
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PPUSH
29499: CALL_OW 2
29503: ST_TO_ADDR
// break ;
29504: GO 29508
// end ; end ;
29506: GO 29445
29508: POP
29509: POP
// end ; end ;
29510: GO 29309
29512: POP
29513: POP
// if result and not asc then
29514: LD_VAR 0 6
29518: PUSH
29519: LD_VAR 0 4
29523: NOT
29524: AND
29525: IFFALSE 29600
// begin tmp := result ;
29527: LD_ADDR_VAR 0 9
29531: PUSH
29532: LD_VAR 0 6
29536: ST_TO_ADDR
// for i = tmp downto 1 do
29537: LD_ADDR_VAR 0 7
29541: PUSH
29542: DOUBLE
29543: LD_VAR 0 9
29547: INC
29548: ST_TO_ADDR
29549: LD_INT 1
29551: PUSH
29552: FOR_DOWNTO
29553: IFFALSE 29598
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29555: LD_ADDR_VAR 0 6
29559: PUSH
29560: LD_VAR 0 6
29564: PPUSH
29565: LD_VAR 0 9
29569: PUSH
29570: LD_VAR 0 7
29574: MINUS
29575: PUSH
29576: LD_INT 1
29578: PLUS
29579: PPUSH
29580: LD_VAR 0 9
29584: PUSH
29585: LD_VAR 0 7
29589: ARRAY
29590: PPUSH
29591: CALL_OW 1
29595: ST_TO_ADDR
29596: GO 29552
29598: POP
29599: POP
// end ; tmp := [ ] ;
29600: LD_ADDR_VAR 0 9
29604: PUSH
29605: EMPTY
29606: ST_TO_ADDR
// if mode then
29607: LD_VAR 0 5
29611: IFFALSE 29680
// begin for i = 1 to result do
29613: LD_ADDR_VAR 0 7
29617: PUSH
29618: DOUBLE
29619: LD_INT 1
29621: DEC
29622: ST_TO_ADDR
29623: LD_VAR 0 6
29627: PUSH
29628: FOR_TO
29629: IFFALSE 29668
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29631: LD_ADDR_VAR 0 9
29635: PUSH
29636: LD_VAR 0 9
29640: PPUSH
29641: LD_VAR 0 7
29645: PPUSH
29646: LD_VAR 0 6
29650: PUSH
29651: LD_VAR 0 7
29655: ARRAY
29656: PUSH
29657: LD_INT 1
29659: ARRAY
29660: PPUSH
29661: CALL_OW 1
29665: ST_TO_ADDR
29666: GO 29628
29668: POP
29669: POP
// result := tmp ;
29670: LD_ADDR_VAR 0 6
29674: PUSH
29675: LD_VAR 0 9
29679: ST_TO_ADDR
// end ; end ;
29680: LD_VAR 0 6
29684: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29685: LD_INT 0
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29693: LD_ADDR_VAR 0 5
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 0
29706: PUSH
29707: EMPTY
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// if not x or not y then
29715: LD_VAR 0 2
29719: NOT
29720: PUSH
29721: LD_VAR 0 3
29725: NOT
29726: OR
29727: IFFALSE 29731
// exit ;
29729: GO 31383
// if not range then
29731: LD_VAR 0 4
29735: NOT
29736: IFFALSE 29746
// range := 10 ;
29738: LD_ADDR_VAR 0 4
29742: PUSH
29743: LD_INT 10
29745: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29746: LD_ADDR_VAR 0 8
29750: PUSH
29751: LD_INT 81
29753: PUSH
29754: LD_VAR 0 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 92
29765: PUSH
29766: LD_VAR 0 2
29770: PUSH
29771: LD_VAR 0 3
29775: PUSH
29776: LD_VAR 0 4
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: LD_INT 21
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: LIST
29808: PPUSH
29809: CALL_OW 69
29813: ST_TO_ADDR
// if not tmp then
29814: LD_VAR 0 8
29818: NOT
29819: IFFALSE 29823
// exit ;
29821: GO 31383
// for i in tmp do
29823: LD_ADDR_VAR 0 6
29827: PUSH
29828: LD_VAR 0 8
29832: PUSH
29833: FOR_IN
29834: IFFALSE 31358
// begin points := [ 0 , 0 , 0 ] ;
29836: LD_ADDR_VAR 0 9
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 0
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: ST_TO_ADDR
// bpoints := 1 ;
29855: LD_ADDR_VAR 0 10
29859: PUSH
29860: LD_INT 1
29862: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29863: LD_VAR 0 6
29867: PPUSH
29868: CALL_OW 247
29872: PUSH
29873: LD_INT 1
29875: DOUBLE
29876: EQUAL
29877: IFTRUE 29881
29879: GO 30459
29881: POP
// begin if GetClass ( i ) = 1 then
29882: LD_VAR 0 6
29886: PPUSH
29887: CALL_OW 257
29891: PUSH
29892: LD_INT 1
29894: EQUAL
29895: IFFALSE 29916
// points := [ 10 , 5 , 3 ] ;
29897: LD_ADDR_VAR 0 9
29901: PUSH
29902: LD_INT 10
29904: PUSH
29905: LD_INT 5
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29916: LD_VAR 0 6
29920: PPUSH
29921: CALL_OW 257
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: IN
29940: IFFALSE 29961
// points := [ 3 , 2 , 1 ] ;
29942: LD_ADDR_VAR 0 9
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29961: LD_VAR 0 6
29965: PPUSH
29966: CALL_OW 257
29970: PUSH
29971: LD_INT 5
29973: EQUAL
29974: IFFALSE 29995
// points := [ 130 , 5 , 2 ] ;
29976: LD_ADDR_VAR 0 9
29980: PUSH
29981: LD_INT 130
29983: PUSH
29984: LD_INT 5
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: LIST
29994: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29995: LD_VAR 0 6
29999: PPUSH
30000: CALL_OW 257
30004: PUSH
30005: LD_INT 8
30007: EQUAL
30008: IFFALSE 30029
// points := [ 35 , 35 , 30 ] ;
30010: LD_ADDR_VAR 0 9
30014: PUSH
30015: LD_INT 35
30017: PUSH
30018: LD_INT 35
30020: PUSH
30021: LD_INT 30
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30029: LD_VAR 0 6
30033: PPUSH
30034: CALL_OW 257
30038: PUSH
30039: LD_INT 9
30041: EQUAL
30042: IFFALSE 30063
// points := [ 20 , 55 , 40 ] ;
30044: LD_ADDR_VAR 0 9
30048: PUSH
30049: LD_INT 20
30051: PUSH
30052: LD_INT 55
30054: PUSH
30055: LD_INT 40
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: LIST
30062: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30063: LD_VAR 0 6
30067: PPUSH
30068: CALL_OW 257
30072: PUSH
30073: LD_INT 12
30075: PUSH
30076: LD_INT 16
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: IN
30083: IFFALSE 30104
// points := [ 5 , 3 , 2 ] ;
30085: LD_ADDR_VAR 0 9
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30104: LD_VAR 0 6
30108: PPUSH
30109: CALL_OW 257
30113: PUSH
30114: LD_INT 17
30116: EQUAL
30117: IFFALSE 30138
// points := [ 100 , 50 , 75 ] ;
30119: LD_ADDR_VAR 0 9
30123: PUSH
30124: LD_INT 100
30126: PUSH
30127: LD_INT 50
30129: PUSH
30130: LD_INT 75
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30138: LD_VAR 0 6
30142: PPUSH
30143: CALL_OW 257
30147: PUSH
30148: LD_INT 15
30150: EQUAL
30151: IFFALSE 30172
// points := [ 10 , 5 , 3 ] ;
30153: LD_ADDR_VAR 0 9
30157: PUSH
30158: LD_INT 10
30160: PUSH
30161: LD_INT 5
30163: PUSH
30164: LD_INT 3
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30172: LD_VAR 0 6
30176: PPUSH
30177: CALL_OW 257
30181: PUSH
30182: LD_INT 14
30184: EQUAL
30185: IFFALSE 30206
// points := [ 10 , 0 , 0 ] ;
30187: LD_ADDR_VAR 0 9
30191: PUSH
30192: LD_INT 10
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30206: LD_VAR 0 6
30210: PPUSH
30211: CALL_OW 257
30215: PUSH
30216: LD_INT 11
30218: EQUAL
30219: IFFALSE 30240
// points := [ 30 , 10 , 5 ] ;
30221: LD_ADDR_VAR 0 9
30225: PUSH
30226: LD_INT 30
30228: PUSH
30229: LD_INT 10
30231: PUSH
30232: LD_INT 5
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30240: LD_VAR 0 1
30244: PPUSH
30245: LD_INT 5
30247: PPUSH
30248: CALL_OW 321
30252: PUSH
30253: LD_INT 2
30255: EQUAL
30256: IFFALSE 30273
// bpoints := bpoints * 1.8 ;
30258: LD_ADDR_VAR 0 10
30262: PUSH
30263: LD_VAR 0 10
30267: PUSH
30268: LD_REAL  1.80000000000000E+0000
30271: MUL
30272: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30273: LD_VAR 0 6
30277: PPUSH
30278: CALL_OW 257
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 3
30291: PUSH
30292: LD_INT 4
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: IN
30301: PUSH
30302: LD_VAR 0 1
30306: PPUSH
30307: LD_INT 51
30309: PPUSH
30310: CALL_OW 321
30314: PUSH
30315: LD_INT 2
30317: EQUAL
30318: AND
30319: IFFALSE 30336
// bpoints := bpoints * 1.2 ;
30321: LD_ADDR_VAR 0 10
30325: PUSH
30326: LD_VAR 0 10
30330: PUSH
30331: LD_REAL  1.20000000000000E+0000
30334: MUL
30335: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30336: LD_VAR 0 6
30340: PPUSH
30341: CALL_OW 257
30345: PUSH
30346: LD_INT 5
30348: PUSH
30349: LD_INT 7
30351: PUSH
30352: LD_INT 9
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: LIST
30359: IN
30360: PUSH
30361: LD_VAR 0 1
30365: PPUSH
30366: LD_INT 52
30368: PPUSH
30369: CALL_OW 321
30373: PUSH
30374: LD_INT 2
30376: EQUAL
30377: AND
30378: IFFALSE 30395
// bpoints := bpoints * 1.5 ;
30380: LD_ADDR_VAR 0 10
30384: PUSH
30385: LD_VAR 0 10
30389: PUSH
30390: LD_REAL  1.50000000000000E+0000
30393: MUL
30394: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30395: LD_VAR 0 1
30399: PPUSH
30400: LD_INT 66
30402: PPUSH
30403: CALL_OW 321
30407: PUSH
30408: LD_INT 2
30410: EQUAL
30411: IFFALSE 30428
// bpoints := bpoints * 1.1 ;
30413: LD_ADDR_VAR 0 10
30417: PUSH
30418: LD_VAR 0 10
30422: PUSH
30423: LD_REAL  1.10000000000000E+0000
30426: MUL
30427: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30428: LD_ADDR_VAR 0 10
30432: PUSH
30433: LD_VAR 0 10
30437: PUSH
30438: LD_VAR 0 6
30442: PPUSH
30443: LD_INT 1
30445: PPUSH
30446: CALL_OW 259
30450: PUSH
30451: LD_REAL  1.15000000000000E+0000
30454: MUL
30455: MUL
30456: ST_TO_ADDR
// end ; unit_vehicle :
30457: GO 31287
30459: LD_INT 2
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 31275
30467: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30468: LD_VAR 0 6
30472: PPUSH
30473: CALL_OW 264
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 42
30483: PUSH
30484: LD_INT 24
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: IN
30492: IFFALSE 30513
// points := [ 25 , 5 , 3 ] ;
30494: LD_ADDR_VAR 0 9
30498: PUSH
30499: LD_INT 25
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30513: LD_VAR 0 6
30517: PPUSH
30518: CALL_OW 264
30522: PUSH
30523: LD_INT 4
30525: PUSH
30526: LD_INT 43
30528: PUSH
30529: LD_INT 25
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: IN
30537: IFFALSE 30558
// points := [ 40 , 15 , 5 ] ;
30539: LD_ADDR_VAR 0 9
30543: PUSH
30544: LD_INT 40
30546: PUSH
30547: LD_INT 15
30549: PUSH
30550: LD_INT 5
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: LIST
30557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30558: LD_VAR 0 6
30562: PPUSH
30563: CALL_OW 264
30567: PUSH
30568: LD_INT 3
30570: PUSH
30571: LD_INT 23
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: IN
30578: IFFALSE 30599
// points := [ 7 , 25 , 8 ] ;
30580: LD_ADDR_VAR 0 9
30584: PUSH
30585: LD_INT 7
30587: PUSH
30588: LD_INT 25
30590: PUSH
30591: LD_INT 8
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30599: LD_VAR 0 6
30603: PPUSH
30604: CALL_OW 264
30608: PUSH
30609: LD_INT 5
30611: PUSH
30612: LD_INT 27
30614: PUSH
30615: LD_INT 44
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: IN
30623: IFFALSE 30644
// points := [ 14 , 50 , 16 ] ;
30625: LD_ADDR_VAR 0 9
30629: PUSH
30630: LD_INT 14
30632: PUSH
30633: LD_INT 50
30635: PUSH
30636: LD_INT 16
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30644: LD_VAR 0 6
30648: PPUSH
30649: CALL_OW 264
30653: PUSH
30654: LD_INT 6
30656: PUSH
30657: LD_INT 46
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: IN
30664: IFFALSE 30685
// points := [ 32 , 120 , 70 ] ;
30666: LD_ADDR_VAR 0 9
30670: PUSH
30671: LD_INT 32
30673: PUSH
30674: LD_INT 120
30676: PUSH
30677: LD_INT 70
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30685: LD_VAR 0 6
30689: PPUSH
30690: CALL_OW 264
30694: PUSH
30695: LD_INT 7
30697: PUSH
30698: LD_INT 28
30700: PUSH
30701: LD_INT 45
30703: PUSH
30704: LD_EXP 12
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: IN
30715: IFFALSE 30736
// points := [ 35 , 20 , 45 ] ;
30717: LD_ADDR_VAR 0 9
30721: PUSH
30722: LD_INT 35
30724: PUSH
30725: LD_INT 20
30727: PUSH
30728: LD_INT 45
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30736: LD_VAR 0 6
30740: PPUSH
30741: CALL_OW 264
30745: PUSH
30746: LD_INT 47
30748: PUSH
30749: EMPTY
30750: LIST
30751: IN
30752: IFFALSE 30773
// points := [ 67 , 45 , 75 ] ;
30754: LD_ADDR_VAR 0 9
30758: PUSH
30759: LD_INT 67
30761: PUSH
30762: LD_INT 45
30764: PUSH
30765: LD_INT 75
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30773: LD_VAR 0 6
30777: PPUSH
30778: CALL_OW 264
30782: PUSH
30783: LD_INT 26
30785: PUSH
30786: EMPTY
30787: LIST
30788: IN
30789: IFFALSE 30810
// points := [ 120 , 30 , 80 ] ;
30791: LD_ADDR_VAR 0 9
30795: PUSH
30796: LD_INT 120
30798: PUSH
30799: LD_INT 30
30801: PUSH
30802: LD_INT 80
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: LIST
30809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30810: LD_VAR 0 6
30814: PPUSH
30815: CALL_OW 264
30819: PUSH
30820: LD_INT 22
30822: PUSH
30823: EMPTY
30824: LIST
30825: IN
30826: IFFALSE 30847
// points := [ 40 , 1 , 1 ] ;
30828: LD_ADDR_VAR 0 9
30832: PUSH
30833: LD_INT 40
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30847: LD_VAR 0 6
30851: PPUSH
30852: CALL_OW 264
30856: PUSH
30857: LD_INT 29
30859: PUSH
30860: EMPTY
30861: LIST
30862: IN
30863: IFFALSE 30884
// points := [ 70 , 200 , 400 ] ;
30865: LD_ADDR_VAR 0 9
30869: PUSH
30870: LD_INT 70
30872: PUSH
30873: LD_INT 200
30875: PUSH
30876: LD_INT 400
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30884: LD_VAR 0 6
30888: PPUSH
30889: CALL_OW 264
30893: PUSH
30894: LD_INT 14
30896: PUSH
30897: LD_INT 53
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: IN
30904: IFFALSE 30925
// points := [ 40 , 10 , 20 ] ;
30906: LD_ADDR_VAR 0 9
30910: PUSH
30911: LD_INT 40
30913: PUSH
30914: LD_INT 10
30916: PUSH
30917: LD_INT 20
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30925: LD_VAR 0 6
30929: PPUSH
30930: CALL_OW 264
30934: PUSH
30935: LD_INT 9
30937: PUSH
30938: EMPTY
30939: LIST
30940: IN
30941: IFFALSE 30962
// points := [ 5 , 70 , 20 ] ;
30943: LD_ADDR_VAR 0 9
30947: PUSH
30948: LD_INT 5
30950: PUSH
30951: LD_INT 70
30953: PUSH
30954: LD_INT 20
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30962: LD_VAR 0 6
30966: PPUSH
30967: CALL_OW 264
30971: PUSH
30972: LD_INT 10
30974: PUSH
30975: EMPTY
30976: LIST
30977: IN
30978: IFFALSE 30999
// points := [ 35 , 110 , 70 ] ;
30980: LD_ADDR_VAR 0 9
30984: PUSH
30985: LD_INT 35
30987: PUSH
30988: LD_INT 110
30990: PUSH
30991: LD_INT 70
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30999: LD_VAR 0 6
31003: PPUSH
31004: CALL_OW 265
31008: PUSH
31009: LD_INT 25
31011: EQUAL
31012: IFFALSE 31033
// points := [ 80 , 65 , 100 ] ;
31014: LD_ADDR_VAR 0 9
31018: PUSH
31019: LD_INT 80
31021: PUSH
31022: LD_INT 65
31024: PUSH
31025: LD_INT 100
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31033: LD_VAR 0 6
31037: PPUSH
31038: CALL_OW 263
31042: PUSH
31043: LD_INT 1
31045: EQUAL
31046: IFFALSE 31081
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31048: LD_ADDR_VAR 0 10
31052: PUSH
31053: LD_VAR 0 10
31057: PUSH
31058: LD_VAR 0 6
31062: PPUSH
31063: CALL_OW 311
31067: PPUSH
31068: LD_INT 3
31070: PPUSH
31071: CALL_OW 259
31075: PUSH
31076: LD_INT 4
31078: MUL
31079: MUL
31080: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31081: LD_VAR 0 6
31085: PPUSH
31086: CALL_OW 263
31090: PUSH
31091: LD_INT 2
31093: EQUAL
31094: IFFALSE 31145
// begin j := IsControledBy ( i ) ;
31096: LD_ADDR_VAR 0 7
31100: PUSH
31101: LD_VAR 0 6
31105: PPUSH
31106: CALL_OW 312
31110: ST_TO_ADDR
// if j then
31111: LD_VAR 0 7
31115: IFFALSE 31145
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31117: LD_ADDR_VAR 0 10
31121: PUSH
31122: LD_VAR 0 10
31126: PUSH
31127: LD_VAR 0 7
31131: PPUSH
31132: LD_INT 3
31134: PPUSH
31135: CALL_OW 259
31139: PUSH
31140: LD_INT 3
31142: MUL
31143: MUL
31144: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31145: LD_VAR 0 6
31149: PPUSH
31150: CALL_OW 264
31154: PUSH
31155: LD_INT 5
31157: PUSH
31158: LD_INT 6
31160: PUSH
31161: LD_INT 46
31163: PUSH
31164: LD_INT 44
31166: PUSH
31167: LD_INT 47
31169: PUSH
31170: LD_INT 45
31172: PUSH
31173: LD_INT 28
31175: PUSH
31176: LD_INT 7
31178: PUSH
31179: LD_INT 27
31181: PUSH
31182: LD_INT 29
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: IN
31197: PUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: LD_INT 52
31205: PPUSH
31206: CALL_OW 321
31210: PUSH
31211: LD_INT 2
31213: EQUAL
31214: AND
31215: IFFALSE 31232
// bpoints := bpoints * 1.2 ;
31217: LD_ADDR_VAR 0 10
31221: PUSH
31222: LD_VAR 0 10
31226: PUSH
31227: LD_REAL  1.20000000000000E+0000
31230: MUL
31231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31232: LD_VAR 0 6
31236: PPUSH
31237: CALL_OW 264
31241: PUSH
31242: LD_INT 6
31244: PUSH
31245: LD_INT 46
31247: PUSH
31248: LD_INT 47
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: IN
31256: IFFALSE 31273
// bpoints := bpoints * 1.2 ;
31258: LD_ADDR_VAR 0 10
31262: PUSH
31263: LD_VAR 0 10
31267: PUSH
31268: LD_REAL  1.20000000000000E+0000
31271: MUL
31272: ST_TO_ADDR
// end ; unit_building :
31273: GO 31287
31275: LD_INT 3
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31286
31283: POP
// ; end ;
31284: GO 31287
31286: POP
// for j = 1 to 3 do
31287: LD_ADDR_VAR 0 7
31291: PUSH
31292: DOUBLE
31293: LD_INT 1
31295: DEC
31296: ST_TO_ADDR
31297: LD_INT 3
31299: PUSH
31300: FOR_TO
31301: IFFALSE 31354
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31303: LD_ADDR_VAR 0 5
31307: PUSH
31308: LD_VAR 0 5
31312: PPUSH
31313: LD_VAR 0 7
31317: PPUSH
31318: LD_VAR 0 5
31322: PUSH
31323: LD_VAR 0 7
31327: ARRAY
31328: PUSH
31329: LD_VAR 0 9
31333: PUSH
31334: LD_VAR 0 7
31338: ARRAY
31339: PUSH
31340: LD_VAR 0 10
31344: MUL
31345: PLUS
31346: PPUSH
31347: CALL_OW 1
31351: ST_TO_ADDR
31352: GO 31300
31354: POP
31355: POP
// end ;
31356: GO 29833
31358: POP
31359: POP
// result := Replace ( result , 4 , tmp ) ;
31360: LD_ADDR_VAR 0 5
31364: PUSH
31365: LD_VAR 0 5
31369: PPUSH
31370: LD_INT 4
31372: PPUSH
31373: LD_VAR 0 8
31377: PPUSH
31378: CALL_OW 1
31382: ST_TO_ADDR
// end ;
31383: LD_VAR 0 5
31387: RET
// export function DangerAtRange ( unit , range ) ; begin
31388: LD_INT 0
31390: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31391: LD_ADDR_VAR 0 3
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 255
31405: PPUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 250
31415: PPUSH
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 251
31425: PPUSH
31426: LD_VAR 0 2
31430: PPUSH
31431: CALL 29685 0 4
31435: ST_TO_ADDR
// end ;
31436: LD_VAR 0 3
31440: RET
// export function DangerInArea ( side , area ) ; begin
31441: LD_INT 0
31443: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31444: LD_ADDR_VAR 0 3
31448: PUSH
31449: LD_VAR 0 2
31453: PPUSH
31454: LD_INT 81
31456: PUSH
31457: LD_VAR 0 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PPUSH
31466: CALL_OW 70
31470: ST_TO_ADDR
// end ;
31471: LD_VAR 0 3
31475: RET
// export function IsExtension ( b ) ; begin
31476: LD_INT 0
31478: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31479: LD_ADDR_VAR 0 2
31483: PUSH
31484: LD_VAR 0 1
31488: PUSH
31489: LD_INT 23
31491: PUSH
31492: LD_INT 20
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_INT 17
31500: PUSH
31501: LD_INT 24
31503: PUSH
31504: LD_INT 21
31506: PUSH
31507: LD_INT 19
31509: PUSH
31510: LD_INT 16
31512: PUSH
31513: LD_INT 25
31515: PUSH
31516: LD_INT 18
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: IN
31531: ST_TO_ADDR
// end ;
31532: LD_VAR 0 2
31536: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31537: LD_INT 0
31539: PPUSH
31540: PPUSH
31541: PPUSH
// result := [ ] ;
31542: LD_ADDR_VAR 0 4
31546: PUSH
31547: EMPTY
31548: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31549: LD_ADDR_VAR 0 5
31553: PUSH
31554: LD_VAR 0 2
31558: PPUSH
31559: LD_INT 21
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PPUSH
31569: CALL_OW 70
31573: ST_TO_ADDR
// if not tmp then
31574: LD_VAR 0 5
31578: NOT
31579: IFFALSE 31583
// exit ;
31581: GO 31647
// if checkLink then
31583: LD_VAR 0 3
31587: IFFALSE 31637
// begin for i in tmp do
31589: LD_ADDR_VAR 0 6
31593: PUSH
31594: LD_VAR 0 5
31598: PUSH
31599: FOR_IN
31600: IFFALSE 31635
// if GetBase ( i ) <> base then
31602: LD_VAR 0 6
31606: PPUSH
31607: CALL_OW 274
31611: PUSH
31612: LD_VAR 0 1
31616: NONEQUAL
31617: IFFALSE 31633
// ComLinkToBase ( base , i ) ;
31619: LD_VAR 0 1
31623: PPUSH
31624: LD_VAR 0 6
31628: PPUSH
31629: CALL_OW 169
31633: GO 31599
31635: POP
31636: POP
// end ; result := tmp ;
31637: LD_ADDR_VAR 0 4
31641: PUSH
31642: LD_VAR 0 5
31646: ST_TO_ADDR
// end ;
31647: LD_VAR 0 4
31651: RET
// export function ComComplete ( units , b ) ; var i ; begin
31652: LD_INT 0
31654: PPUSH
31655: PPUSH
// if not units then
31656: LD_VAR 0 1
31660: NOT
31661: IFFALSE 31665
// exit ;
31663: GO 31755
// for i in units do
31665: LD_ADDR_VAR 0 4
31669: PUSH
31670: LD_VAR 0 1
31674: PUSH
31675: FOR_IN
31676: IFFALSE 31753
// if BuildingStatus ( b ) = bs_build then
31678: LD_VAR 0 2
31682: PPUSH
31683: CALL_OW 461
31687: PUSH
31688: LD_INT 1
31690: EQUAL
31691: IFFALSE 31751
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31693: LD_VAR 0 4
31697: PPUSH
31698: LD_STRING h
31700: PUSH
31701: LD_VAR 0 2
31705: PPUSH
31706: CALL_OW 250
31710: PUSH
31711: LD_VAR 0 2
31715: PPUSH
31716: CALL_OW 251
31720: PUSH
31721: LD_VAR 0 2
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: PUSH
31744: EMPTY
31745: LIST
31746: PPUSH
31747: CALL_OW 446
31751: GO 31675
31753: POP
31754: POP
// end ;
31755: LD_VAR 0 3
31759: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31760: LD_INT 0
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31768: LD_VAR 0 1
31772: NOT
31773: PUSH
31774: LD_VAR 0 1
31778: PPUSH
31779: CALL_OW 263
31783: PUSH
31784: LD_INT 2
31786: NONEQUAL
31787: OR
31788: IFFALSE 31792
// exit ;
31790: GO 32108
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31792: LD_ADDR_VAR 0 6
31796: PUSH
31797: LD_INT 22
31799: PUSH
31800: LD_VAR 0 1
31804: PPUSH
31805: CALL_OW 255
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 30
31819: PUSH
31820: LD_INT 36
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 34
31829: PUSH
31830: LD_INT 31
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PPUSH
31846: CALL_OW 69
31850: ST_TO_ADDR
// if not tmp then
31851: LD_VAR 0 6
31855: NOT
31856: IFFALSE 31860
// exit ;
31858: GO 32108
// result := [ ] ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: EMPTY
31866: ST_TO_ADDR
// for i in tmp do
31867: LD_ADDR_VAR 0 3
31871: PUSH
31872: LD_VAR 0 6
31876: PUSH
31877: FOR_IN
31878: IFFALSE 31949
// begin t := UnitsInside ( i ) ;
31880: LD_ADDR_VAR 0 4
31884: PUSH
31885: LD_VAR 0 3
31889: PPUSH
31890: CALL_OW 313
31894: ST_TO_ADDR
// if t then
31895: LD_VAR 0 4
31899: IFFALSE 31947
// for j in t do
31901: LD_ADDR_VAR 0 7
31905: PUSH
31906: LD_VAR 0 4
31910: PUSH
31911: FOR_IN
31912: IFFALSE 31945
// result := Replace ( result , result + 1 , j ) ;
31914: LD_ADDR_VAR 0 2
31918: PUSH
31919: LD_VAR 0 2
31923: PPUSH
31924: LD_VAR 0 2
31928: PUSH
31929: LD_INT 1
31931: PLUS
31932: PPUSH
31933: LD_VAR 0 7
31937: PPUSH
31938: CALL_OW 1
31942: ST_TO_ADDR
31943: GO 31911
31945: POP
31946: POP
// end ;
31947: GO 31877
31949: POP
31950: POP
// if not result then
31951: LD_VAR 0 2
31955: NOT
31956: IFFALSE 31960
// exit ;
31958: GO 32108
// mech := result [ 1 ] ;
31960: LD_ADDR_VAR 0 5
31964: PUSH
31965: LD_VAR 0 2
31969: PUSH
31970: LD_INT 1
31972: ARRAY
31973: ST_TO_ADDR
// if result > 1 then
31974: LD_VAR 0 2
31978: PUSH
31979: LD_INT 1
31981: GREATER
31982: IFFALSE 32094
// begin for i = 2 to result do
31984: LD_ADDR_VAR 0 3
31988: PUSH
31989: DOUBLE
31990: LD_INT 2
31992: DEC
31993: ST_TO_ADDR
31994: LD_VAR 0 2
31998: PUSH
31999: FOR_TO
32000: IFFALSE 32092
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32002: LD_ADDR_VAR 0 4
32006: PUSH
32007: LD_VAR 0 2
32011: PUSH
32012: LD_VAR 0 3
32016: ARRAY
32017: PPUSH
32018: LD_INT 3
32020: PPUSH
32021: CALL_OW 259
32025: PUSH
32026: LD_VAR 0 2
32030: PUSH
32031: LD_VAR 0 3
32035: ARRAY
32036: PPUSH
32037: CALL_OW 432
32041: MINUS
32042: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32043: LD_VAR 0 4
32047: PUSH
32048: LD_VAR 0 5
32052: PPUSH
32053: LD_INT 3
32055: PPUSH
32056: CALL_OW 259
32060: PUSH
32061: LD_VAR 0 5
32065: PPUSH
32066: CALL_OW 432
32070: MINUS
32071: GREATEREQUAL
32072: IFFALSE 32090
// mech := result [ i ] ;
32074: LD_ADDR_VAR 0 5
32078: PUSH
32079: LD_VAR 0 2
32083: PUSH
32084: LD_VAR 0 3
32088: ARRAY
32089: ST_TO_ADDR
// end ;
32090: GO 31999
32092: POP
32093: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32094: LD_VAR 0 1
32098: PPUSH
32099: LD_VAR 0 5
32103: PPUSH
32104: CALL_OW 135
// end ;
32108: LD_VAR 0 2
32112: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32113: LD_INT 0
32115: PPUSH
32116: PPUSH
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
// result := [ ] ;
32128: LD_ADDR_VAR 0 7
32132: PUSH
32133: EMPTY
32134: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32135: LD_VAR 0 1
32139: PPUSH
32140: CALL_OW 266
32144: PUSH
32145: LD_INT 0
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: IN
32155: NOT
32156: IFFALSE 32160
// exit ;
32158: GO 33794
// if name then
32160: LD_VAR 0 3
32164: IFFALSE 32180
// SetBName ( base_dep , name ) ;
32166: LD_VAR 0 1
32170: PPUSH
32171: LD_VAR 0 3
32175: PPUSH
32176: CALL_OW 500
// base := GetBase ( base_dep ) ;
32180: LD_ADDR_VAR 0 15
32184: PUSH
32185: LD_VAR 0 1
32189: PPUSH
32190: CALL_OW 274
32194: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32195: LD_ADDR_VAR 0 16
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: CALL_OW 255
32209: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32210: LD_ADDR_VAR 0 17
32214: PUSH
32215: LD_VAR 0 1
32219: PPUSH
32220: CALL_OW 248
32224: ST_TO_ADDR
// if sources then
32225: LD_VAR 0 5
32229: IFFALSE 32276
// for i = 1 to 3 do
32231: LD_ADDR_VAR 0 8
32235: PUSH
32236: DOUBLE
32237: LD_INT 1
32239: DEC
32240: ST_TO_ADDR
32241: LD_INT 3
32243: PUSH
32244: FOR_TO
32245: IFFALSE 32274
// AddResourceType ( base , i , sources [ i ] ) ;
32247: LD_VAR 0 15
32251: PPUSH
32252: LD_VAR 0 8
32256: PPUSH
32257: LD_VAR 0 5
32261: PUSH
32262: LD_VAR 0 8
32266: ARRAY
32267: PPUSH
32268: CALL_OW 276
32272: GO 32244
32274: POP
32275: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32276: LD_ADDR_VAR 0 18
32280: PUSH
32281: LD_VAR 0 15
32285: PPUSH
32286: LD_VAR 0 2
32290: PPUSH
32291: LD_INT 1
32293: PPUSH
32294: CALL 31537 0 3
32298: ST_TO_ADDR
// InitHc ;
32299: CALL_OW 19
// InitUc ;
32303: CALL_OW 18
// uc_side := side ;
32307: LD_ADDR_OWVAR 20
32311: PUSH
32312: LD_VAR 0 16
32316: ST_TO_ADDR
// uc_nation := nation ;
32317: LD_ADDR_OWVAR 21
32321: PUSH
32322: LD_VAR 0 17
32326: ST_TO_ADDR
// if buildings then
32327: LD_VAR 0 18
32331: IFFALSE 33653
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32333: LD_ADDR_VAR 0 19
32337: PUSH
32338: LD_VAR 0 18
32342: PPUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 30
32348: PUSH
32349: LD_INT 29
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 30
32358: PUSH
32359: LD_INT 30
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: PPUSH
32371: CALL_OW 72
32375: ST_TO_ADDR
// if tmp then
32376: LD_VAR 0 19
32380: IFFALSE 32428
// for i in tmp do
32382: LD_ADDR_VAR 0 8
32386: PUSH
32387: LD_VAR 0 19
32391: PUSH
32392: FOR_IN
32393: IFFALSE 32426
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32395: LD_VAR 0 8
32399: PPUSH
32400: CALL_OW 250
32404: PPUSH
32405: LD_VAR 0 8
32409: PPUSH
32410: CALL_OW 251
32414: PPUSH
32415: LD_VAR 0 16
32419: PPUSH
32420: CALL_OW 441
32424: GO 32392
32426: POP
32427: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32428: LD_VAR 0 18
32432: PPUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 30
32438: PUSH
32439: LD_INT 32
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 30
32448: PUSH
32449: LD_INT 33
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: PPUSH
32461: CALL_OW 72
32465: IFFALSE 32553
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32467: LD_ADDR_VAR 0 8
32471: PUSH
32472: LD_VAR 0 18
32476: PPUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 30
32482: PUSH
32483: LD_INT 32
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 30
32492: PUSH
32493: LD_INT 33
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: PPUSH
32505: CALL_OW 72
32509: PUSH
32510: FOR_IN
32511: IFFALSE 32551
// begin if not GetBWeapon ( i ) then
32513: LD_VAR 0 8
32517: PPUSH
32518: CALL_OW 269
32522: NOT
32523: IFFALSE 32549
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32525: LD_VAR 0 8
32529: PPUSH
32530: LD_VAR 0 8
32534: PPUSH
32535: LD_VAR 0 2
32539: PPUSH
32540: CALL 33799 0 2
32544: PPUSH
32545: CALL_OW 431
// end ;
32549: GO 32510
32551: POP
32552: POP
// end ; for i = 1 to personel do
32553: LD_ADDR_VAR 0 8
32557: PUSH
32558: DOUBLE
32559: LD_INT 1
32561: DEC
32562: ST_TO_ADDR
32563: LD_VAR 0 6
32567: PUSH
32568: FOR_TO
32569: IFFALSE 33633
// begin if i > 4 then
32571: LD_VAR 0 8
32575: PUSH
32576: LD_INT 4
32578: GREATER
32579: IFFALSE 32583
// break ;
32581: GO 33633
// case i of 1 :
32583: LD_VAR 0 8
32587: PUSH
32588: LD_INT 1
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32676
32596: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32597: LD_ADDR_VAR 0 12
32601: PUSH
32602: LD_VAR 0 18
32606: PPUSH
32607: LD_INT 22
32609: PUSH
32610: LD_VAR 0 16
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 58
32621: PUSH
32622: EMPTY
32623: LIST
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: LD_INT 30
32630: PUSH
32631: LD_INT 32
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 30
32640: PUSH
32641: LD_INT 4
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 30
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: PPUSH
32669: CALL_OW 72
32673: ST_TO_ADDR
32674: GO 32898
32676: LD_INT 2
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32746
32684: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32685: LD_ADDR_VAR 0 12
32689: PUSH
32690: LD_VAR 0 18
32694: PPUSH
32695: LD_INT 22
32697: PUSH
32698: LD_VAR 0 16
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: LD_INT 30
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 30
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PPUSH
32739: CALL_OW 72
32743: ST_TO_ADDR
32744: GO 32898
32746: LD_INT 3
32748: DOUBLE
32749: EQUAL
32750: IFTRUE 32754
32752: GO 32816
32754: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32755: LD_ADDR_VAR 0 12
32759: PUSH
32760: LD_VAR 0 18
32764: PPUSH
32765: LD_INT 22
32767: PUSH
32768: LD_VAR 0 16
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 30
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 30
32792: PUSH
32793: LD_INT 3
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: LIST
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PPUSH
32809: CALL_OW 72
32813: ST_TO_ADDR
32814: GO 32898
32816: LD_INT 4
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32897
32824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32825: LD_ADDR_VAR 0 12
32829: PUSH
32830: LD_VAR 0 18
32834: PPUSH
32835: LD_INT 22
32837: PUSH
32838: LD_VAR 0 16
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 30
32852: PUSH
32853: LD_INT 6
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 30
32862: PUSH
32863: LD_INT 7
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 30
32872: PUSH
32873: LD_INT 8
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PPUSH
32890: CALL_OW 72
32894: ST_TO_ADDR
32895: GO 32898
32897: POP
// if i = 1 then
32898: LD_VAR 0 8
32902: PUSH
32903: LD_INT 1
32905: EQUAL
32906: IFFALSE 33017
// begin tmp := [ ] ;
32908: LD_ADDR_VAR 0 19
32912: PUSH
32913: EMPTY
32914: ST_TO_ADDR
// for j in f do
32915: LD_ADDR_VAR 0 9
32919: PUSH
32920: LD_VAR 0 12
32924: PUSH
32925: FOR_IN
32926: IFFALSE 32999
// if GetBType ( j ) = b_bunker then
32928: LD_VAR 0 9
32932: PPUSH
32933: CALL_OW 266
32937: PUSH
32938: LD_INT 32
32940: EQUAL
32941: IFFALSE 32968
// tmp := Insert ( tmp , 1 , j ) else
32943: LD_ADDR_VAR 0 19
32947: PUSH
32948: LD_VAR 0 19
32952: PPUSH
32953: LD_INT 1
32955: PPUSH
32956: LD_VAR 0 9
32960: PPUSH
32961: CALL_OW 2
32965: ST_TO_ADDR
32966: GO 32997
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32968: LD_ADDR_VAR 0 19
32972: PUSH
32973: LD_VAR 0 19
32977: PPUSH
32978: LD_VAR 0 19
32982: PUSH
32983: LD_INT 1
32985: PLUS
32986: PPUSH
32987: LD_VAR 0 9
32991: PPUSH
32992: CALL_OW 2
32996: ST_TO_ADDR
32997: GO 32925
32999: POP
33000: POP
// if tmp then
33001: LD_VAR 0 19
33005: IFFALSE 33017
// f := tmp ;
33007: LD_ADDR_VAR 0 12
33011: PUSH
33012: LD_VAR 0 19
33016: ST_TO_ADDR
// end ; x := personel [ i ] ;
33017: LD_ADDR_VAR 0 13
33021: PUSH
33022: LD_VAR 0 6
33026: PUSH
33027: LD_VAR 0 8
33031: ARRAY
33032: ST_TO_ADDR
// if x = - 1 then
33033: LD_VAR 0 13
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: EQUAL
33042: IFFALSE 33251
// begin for j in f do
33044: LD_ADDR_VAR 0 9
33048: PUSH
33049: LD_VAR 0 12
33053: PUSH
33054: FOR_IN
33055: IFFALSE 33247
// repeat InitHc ;
33057: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33061: LD_VAR 0 9
33065: PPUSH
33066: CALL_OW 266
33070: PUSH
33071: LD_INT 5
33073: EQUAL
33074: IFFALSE 33144
// begin if UnitsInside ( j ) < 3 then
33076: LD_VAR 0 9
33080: PPUSH
33081: CALL_OW 313
33085: PUSH
33086: LD_INT 3
33088: LESS
33089: IFFALSE 33125
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33091: LD_INT 0
33093: PPUSH
33094: LD_INT 5
33096: PUSH
33097: LD_INT 8
33099: PUSH
33100: LD_INT 9
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: PUSH
33108: LD_VAR 0 17
33112: ARRAY
33113: PPUSH
33114: LD_VAR 0 4
33118: PPUSH
33119: CALL_OW 380
33123: GO 33142
// PrepareHuman ( false , i , skill ) ;
33125: LD_INT 0
33127: PPUSH
33128: LD_VAR 0 8
33132: PPUSH
33133: LD_VAR 0 4
33137: PPUSH
33138: CALL_OW 380
// end else
33142: GO 33161
// PrepareHuman ( false , i , skill ) ;
33144: LD_INT 0
33146: PPUSH
33147: LD_VAR 0 8
33151: PPUSH
33152: LD_VAR 0 4
33156: PPUSH
33157: CALL_OW 380
// un := CreateHuman ;
33161: LD_ADDR_VAR 0 14
33165: PUSH
33166: CALL_OW 44
33170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33171: LD_ADDR_VAR 0 7
33175: PUSH
33176: LD_VAR 0 7
33180: PPUSH
33181: LD_INT 1
33183: PPUSH
33184: LD_VAR 0 14
33188: PPUSH
33189: CALL_OW 2
33193: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33194: LD_VAR 0 14
33198: PPUSH
33199: LD_VAR 0 9
33203: PPUSH
33204: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33208: LD_VAR 0 9
33212: PPUSH
33213: CALL_OW 313
33217: PUSH
33218: LD_INT 6
33220: EQUAL
33221: PUSH
33222: LD_VAR 0 9
33226: PPUSH
33227: CALL_OW 266
33231: PUSH
33232: LD_INT 32
33234: PUSH
33235: LD_INT 31
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: IN
33242: OR
33243: IFFALSE 33057
33245: GO 33054
33247: POP
33248: POP
// end else
33249: GO 33631
// for j = 1 to x do
33251: LD_ADDR_VAR 0 9
33255: PUSH
33256: DOUBLE
33257: LD_INT 1
33259: DEC
33260: ST_TO_ADDR
33261: LD_VAR 0 13
33265: PUSH
33266: FOR_TO
33267: IFFALSE 33629
// begin InitHc ;
33269: CALL_OW 19
// if not f then
33273: LD_VAR 0 12
33277: NOT
33278: IFFALSE 33367
// begin PrepareHuman ( false , i , skill ) ;
33280: LD_INT 0
33282: PPUSH
33283: LD_VAR 0 8
33287: PPUSH
33288: LD_VAR 0 4
33292: PPUSH
33293: CALL_OW 380
// un := CreateHuman ;
33297: LD_ADDR_VAR 0 14
33301: PUSH
33302: CALL_OW 44
33306: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33307: LD_ADDR_VAR 0 7
33311: PUSH
33312: LD_VAR 0 7
33316: PPUSH
33317: LD_INT 1
33319: PPUSH
33320: LD_VAR 0 14
33324: PPUSH
33325: CALL_OW 2
33329: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33330: LD_VAR 0 14
33334: PPUSH
33335: LD_VAR 0 1
33339: PPUSH
33340: CALL_OW 250
33344: PPUSH
33345: LD_VAR 0 1
33349: PPUSH
33350: CALL_OW 251
33354: PPUSH
33355: LD_INT 10
33357: PPUSH
33358: LD_INT 0
33360: PPUSH
33361: CALL_OW 50
// continue ;
33365: GO 33266
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33367: LD_VAR 0 12
33371: PUSH
33372: LD_INT 1
33374: ARRAY
33375: PPUSH
33376: CALL_OW 313
33380: PUSH
33381: LD_VAR 0 12
33385: PUSH
33386: LD_INT 1
33388: ARRAY
33389: PPUSH
33390: CALL_OW 266
33394: PUSH
33395: LD_INT 32
33397: PUSH
33398: LD_INT 31
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: IN
33405: AND
33406: PUSH
33407: LD_VAR 0 12
33411: PUSH
33412: LD_INT 1
33414: ARRAY
33415: PPUSH
33416: CALL_OW 313
33420: PUSH
33421: LD_INT 6
33423: EQUAL
33424: OR
33425: IFFALSE 33445
// f := Delete ( f , 1 ) ;
33427: LD_ADDR_VAR 0 12
33431: PUSH
33432: LD_VAR 0 12
33436: PPUSH
33437: LD_INT 1
33439: PPUSH
33440: CALL_OW 3
33444: ST_TO_ADDR
// if not f then
33445: LD_VAR 0 12
33449: NOT
33450: IFFALSE 33468
// begin x := x + 2 ;
33452: LD_ADDR_VAR 0 13
33456: PUSH
33457: LD_VAR 0 13
33461: PUSH
33462: LD_INT 2
33464: PLUS
33465: ST_TO_ADDR
// continue ;
33466: GO 33266
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33468: LD_VAR 0 12
33472: PUSH
33473: LD_INT 1
33475: ARRAY
33476: PPUSH
33477: CALL_OW 266
33481: PUSH
33482: LD_INT 5
33484: EQUAL
33485: IFFALSE 33559
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33487: LD_VAR 0 12
33491: PUSH
33492: LD_INT 1
33494: ARRAY
33495: PPUSH
33496: CALL_OW 313
33500: PUSH
33501: LD_INT 3
33503: LESS
33504: IFFALSE 33540
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33506: LD_INT 0
33508: PPUSH
33509: LD_INT 5
33511: PUSH
33512: LD_INT 8
33514: PUSH
33515: LD_INT 9
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: LIST
33522: PUSH
33523: LD_VAR 0 17
33527: ARRAY
33528: PPUSH
33529: LD_VAR 0 4
33533: PPUSH
33534: CALL_OW 380
33538: GO 33557
// PrepareHuman ( false , i , skill ) ;
33540: LD_INT 0
33542: PPUSH
33543: LD_VAR 0 8
33547: PPUSH
33548: LD_VAR 0 4
33552: PPUSH
33553: CALL_OW 380
// end else
33557: GO 33576
// PrepareHuman ( false , i , skill ) ;
33559: LD_INT 0
33561: PPUSH
33562: LD_VAR 0 8
33566: PPUSH
33567: LD_VAR 0 4
33571: PPUSH
33572: CALL_OW 380
// un := CreateHuman ;
33576: LD_ADDR_VAR 0 14
33580: PUSH
33581: CALL_OW 44
33585: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33586: LD_ADDR_VAR 0 7
33590: PUSH
33591: LD_VAR 0 7
33595: PPUSH
33596: LD_INT 1
33598: PPUSH
33599: LD_VAR 0 14
33603: PPUSH
33604: CALL_OW 2
33608: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33609: LD_VAR 0 14
33613: PPUSH
33614: LD_VAR 0 12
33618: PUSH
33619: LD_INT 1
33621: ARRAY
33622: PPUSH
33623: CALL_OW 52
// end ;
33627: GO 33266
33629: POP
33630: POP
// end ;
33631: GO 32568
33633: POP
33634: POP
// result := result ^ buildings ;
33635: LD_ADDR_VAR 0 7
33639: PUSH
33640: LD_VAR 0 7
33644: PUSH
33645: LD_VAR 0 18
33649: ADD
33650: ST_TO_ADDR
// end else
33651: GO 33794
// begin for i = 1 to personel do
33653: LD_ADDR_VAR 0 8
33657: PUSH
33658: DOUBLE
33659: LD_INT 1
33661: DEC
33662: ST_TO_ADDR
33663: LD_VAR 0 6
33667: PUSH
33668: FOR_TO
33669: IFFALSE 33792
// begin if i > 4 then
33671: LD_VAR 0 8
33675: PUSH
33676: LD_INT 4
33678: GREATER
33679: IFFALSE 33683
// break ;
33681: GO 33792
// x := personel [ i ] ;
33683: LD_ADDR_VAR 0 13
33687: PUSH
33688: LD_VAR 0 6
33692: PUSH
33693: LD_VAR 0 8
33697: ARRAY
33698: ST_TO_ADDR
// if x = - 1 then
33699: LD_VAR 0 13
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: EQUAL
33708: IFFALSE 33712
// continue ;
33710: GO 33668
// PrepareHuman ( false , i , skill ) ;
33712: LD_INT 0
33714: PPUSH
33715: LD_VAR 0 8
33719: PPUSH
33720: LD_VAR 0 4
33724: PPUSH
33725: CALL_OW 380
// un := CreateHuman ;
33729: LD_ADDR_VAR 0 14
33733: PUSH
33734: CALL_OW 44
33738: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33739: LD_VAR 0 14
33743: PPUSH
33744: LD_VAR 0 1
33748: PPUSH
33749: CALL_OW 250
33753: PPUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 251
33763: PPUSH
33764: LD_INT 10
33766: PPUSH
33767: LD_INT 0
33769: PPUSH
33770: CALL_OW 50
// result := result ^ un ;
33774: LD_ADDR_VAR 0 7
33778: PUSH
33779: LD_VAR 0 7
33783: PUSH
33784: LD_VAR 0 14
33788: ADD
33789: ST_TO_ADDR
// end ;
33790: GO 33668
33792: POP
33793: POP
// end ; end ;
33794: LD_VAR 0 7
33798: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33799: LD_INT 0
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
33809: PPUSH
33810: PPUSH
33811: PPUSH
33812: PPUSH
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
// result := false ;
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 0
33824: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33825: LD_VAR 0 1
33829: NOT
33830: PUSH
33831: LD_VAR 0 1
33835: PPUSH
33836: CALL_OW 266
33840: PUSH
33841: LD_INT 32
33843: PUSH
33844: LD_INT 33
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: IN
33851: NOT
33852: OR
33853: IFFALSE 33857
// exit ;
33855: GO 34966
// nat := GetNation ( tower ) ;
33857: LD_ADDR_VAR 0 12
33861: PUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 248
33871: ST_TO_ADDR
// side := GetSide ( tower ) ;
33872: LD_ADDR_VAR 0 16
33876: PUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL_OW 255
33886: ST_TO_ADDR
// x := GetX ( tower ) ;
33887: LD_ADDR_VAR 0 10
33891: PUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 250
33901: ST_TO_ADDR
// y := GetY ( tower ) ;
33902: LD_ADDR_VAR 0 11
33906: PUSH
33907: LD_VAR 0 1
33911: PPUSH
33912: CALL_OW 251
33916: ST_TO_ADDR
// if not x or not y then
33917: LD_VAR 0 10
33921: NOT
33922: PUSH
33923: LD_VAR 0 11
33927: NOT
33928: OR
33929: IFFALSE 33933
// exit ;
33931: GO 34966
// weapon := 0 ;
33933: LD_ADDR_VAR 0 18
33937: PUSH
33938: LD_INT 0
33940: ST_TO_ADDR
// fac_list := [ ] ;
33941: LD_ADDR_VAR 0 17
33945: PUSH
33946: EMPTY
33947: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33948: LD_ADDR_VAR 0 6
33952: PUSH
33953: LD_VAR 0 1
33957: PPUSH
33958: CALL_OW 274
33962: PPUSH
33963: LD_VAR 0 2
33967: PPUSH
33968: LD_INT 0
33970: PPUSH
33971: CALL 31537 0 3
33975: PPUSH
33976: LD_INT 30
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PPUSH
33986: CALL_OW 72
33990: ST_TO_ADDR
// if not factories then
33991: LD_VAR 0 6
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34966
// for i in factories do
34000: LD_ADDR_VAR 0 8
34004: PUSH
34005: LD_VAR 0 6
34009: PUSH
34010: FOR_IN
34011: IFFALSE 34036
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34013: LD_ADDR_VAR 0 17
34017: PUSH
34018: LD_VAR 0 17
34022: PUSH
34023: LD_VAR 0 8
34027: PPUSH
34028: CALL_OW 478
34032: UNION
34033: ST_TO_ADDR
34034: GO 34010
34036: POP
34037: POP
// if not fac_list then
34038: LD_VAR 0 17
34042: NOT
34043: IFFALSE 34047
// exit ;
34045: GO 34966
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34047: LD_ADDR_VAR 0 5
34051: PUSH
34052: LD_INT 4
34054: PUSH
34055: LD_INT 5
34057: PUSH
34058: LD_INT 9
34060: PUSH
34061: LD_INT 10
34063: PUSH
34064: LD_INT 6
34066: PUSH
34067: LD_INT 7
34069: PUSH
34070: LD_INT 11
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 27
34084: PUSH
34085: LD_INT 28
34087: PUSH
34088: LD_INT 26
34090: PUSH
34091: LD_INT 30
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 43
34102: PUSH
34103: LD_INT 44
34105: PUSH
34106: LD_INT 46
34108: PUSH
34109: LD_INT 45
34111: PUSH
34112: LD_INT 47
34114: PUSH
34115: LD_INT 49
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: PUSH
34131: LD_VAR 0 12
34135: ARRAY
34136: ST_TO_ADDR
// list := list isect fac_list ;
34137: LD_ADDR_VAR 0 5
34141: PUSH
34142: LD_VAR 0 5
34146: PUSH
34147: LD_VAR 0 17
34151: ISECT
34152: ST_TO_ADDR
// if not list then
34153: LD_VAR 0 5
34157: NOT
34158: IFFALSE 34162
// exit ;
34160: GO 34966
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34162: LD_VAR 0 12
34166: PUSH
34167: LD_INT 3
34169: EQUAL
34170: PUSH
34171: LD_INT 49
34173: PUSH
34174: LD_VAR 0 5
34178: IN
34179: AND
34180: PUSH
34181: LD_INT 31
34183: PPUSH
34184: LD_VAR 0 16
34188: PPUSH
34189: CALL_OW 321
34193: PUSH
34194: LD_INT 2
34196: EQUAL
34197: AND
34198: IFFALSE 34258
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34200: LD_INT 22
34202: PUSH
34203: LD_VAR 0 16
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 35
34214: PUSH
34215: LD_INT 49
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 91
34224: PUSH
34225: LD_VAR 0 1
34229: PUSH
34230: LD_INT 10
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: PPUSH
34243: CALL_OW 69
34247: NOT
34248: IFFALSE 34258
// weapon := ru_time_lapser ;
34250: LD_ADDR_VAR 0 18
34254: PUSH
34255: LD_INT 49
34257: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34258: LD_VAR 0 12
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: IN
34273: PUSH
34274: LD_INT 11
34276: PUSH
34277: LD_VAR 0 5
34281: IN
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_VAR 0 5
34290: IN
34291: OR
34292: AND
34293: PUSH
34294: LD_INT 6
34296: PPUSH
34297: LD_VAR 0 16
34301: PPUSH
34302: CALL_OW 321
34306: PUSH
34307: LD_INT 2
34309: EQUAL
34310: AND
34311: IFFALSE 34476
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34313: LD_INT 22
34315: PUSH
34316: LD_VAR 0 16
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 35
34330: PUSH
34331: LD_INT 11
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 35
34340: PUSH
34341: LD_INT 30
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 91
34355: PUSH
34356: LD_VAR 0 1
34360: PUSH
34361: LD_INT 18
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: LIST
34373: PPUSH
34374: CALL_OW 69
34378: NOT
34379: PUSH
34380: LD_INT 22
34382: PUSH
34383: LD_VAR 0 16
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 30
34397: PUSH
34398: LD_INT 32
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 30
34407: PUSH
34408: LD_INT 33
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 91
34422: PUSH
34423: LD_VAR 0 1
34427: PUSH
34428: LD_INT 12
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: PUSH
34441: EMPTY
34442: LIST
34443: PPUSH
34444: CALL_OW 69
34448: PUSH
34449: LD_INT 2
34451: GREATER
34452: AND
34453: IFFALSE 34476
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34455: LD_ADDR_VAR 0 18
34459: PUSH
34460: LD_INT 11
34462: PUSH
34463: LD_INT 30
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_VAR 0 12
34474: ARRAY
34475: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34476: LD_VAR 0 18
34480: NOT
34481: PUSH
34482: LD_INT 40
34484: PPUSH
34485: LD_VAR 0 16
34489: PPUSH
34490: CALL_OW 321
34494: PUSH
34495: LD_INT 2
34497: EQUAL
34498: AND
34499: PUSH
34500: LD_INT 7
34502: PUSH
34503: LD_VAR 0 5
34507: IN
34508: PUSH
34509: LD_INT 28
34511: PUSH
34512: LD_VAR 0 5
34516: IN
34517: OR
34518: PUSH
34519: LD_INT 45
34521: PUSH
34522: LD_VAR 0 5
34526: IN
34527: OR
34528: AND
34529: IFFALSE 34783
// begin hex := GetHexInfo ( x , y ) ;
34531: LD_ADDR_VAR 0 4
34535: PUSH
34536: LD_VAR 0 10
34540: PPUSH
34541: LD_VAR 0 11
34545: PPUSH
34546: CALL_OW 546
34550: ST_TO_ADDR
// if hex [ 1 ] then
34551: LD_VAR 0 4
34555: PUSH
34556: LD_INT 1
34558: ARRAY
34559: IFFALSE 34563
// exit ;
34561: GO 34966
// height := hex [ 2 ] ;
34563: LD_ADDR_VAR 0 15
34567: PUSH
34568: LD_VAR 0 4
34572: PUSH
34573: LD_INT 2
34575: ARRAY
34576: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34577: LD_ADDR_VAR 0 14
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: LD_INT 5
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
// for i in tmp do
34600: LD_ADDR_VAR 0 8
34604: PUSH
34605: LD_VAR 0 14
34609: PUSH
34610: FOR_IN
34611: IFFALSE 34781
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34613: LD_ADDR_VAR 0 9
34617: PUSH
34618: LD_VAR 0 10
34622: PPUSH
34623: LD_VAR 0 8
34627: PPUSH
34628: LD_INT 5
34630: PPUSH
34631: CALL_OW 272
34635: PUSH
34636: LD_VAR 0 11
34640: PPUSH
34641: LD_VAR 0 8
34645: PPUSH
34646: LD_INT 5
34648: PPUSH
34649: CALL_OW 273
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34658: LD_VAR 0 9
34662: PUSH
34663: LD_INT 1
34665: ARRAY
34666: PPUSH
34667: LD_VAR 0 9
34671: PUSH
34672: LD_INT 2
34674: ARRAY
34675: PPUSH
34676: CALL_OW 488
34680: IFFALSE 34779
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34682: LD_ADDR_VAR 0 4
34686: PUSH
34687: LD_VAR 0 9
34691: PUSH
34692: LD_INT 1
34694: ARRAY
34695: PPUSH
34696: LD_VAR 0 9
34700: PUSH
34701: LD_INT 2
34703: ARRAY
34704: PPUSH
34705: CALL_OW 546
34709: ST_TO_ADDR
// if hex [ 1 ] then
34710: LD_VAR 0 4
34714: PUSH
34715: LD_INT 1
34717: ARRAY
34718: IFFALSE 34722
// continue ;
34720: GO 34610
// h := hex [ 2 ] ;
34722: LD_ADDR_VAR 0 13
34726: PUSH
34727: LD_VAR 0 4
34731: PUSH
34732: LD_INT 2
34734: ARRAY
34735: ST_TO_ADDR
// if h + 7 < height then
34736: LD_VAR 0 13
34740: PUSH
34741: LD_INT 7
34743: PLUS
34744: PUSH
34745: LD_VAR 0 15
34749: LESS
34750: IFFALSE 34779
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34752: LD_ADDR_VAR 0 18
34756: PUSH
34757: LD_INT 7
34759: PUSH
34760: LD_INT 28
34762: PUSH
34763: LD_INT 45
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: PUSH
34771: LD_VAR 0 12
34775: ARRAY
34776: ST_TO_ADDR
// break ;
34777: GO 34781
// end ; end ; end ;
34779: GO 34610
34781: POP
34782: POP
// end ; if not weapon then
34783: LD_VAR 0 18
34787: NOT
34788: IFFALSE 34848
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34790: LD_ADDR_VAR 0 5
34794: PUSH
34795: LD_VAR 0 5
34799: PUSH
34800: LD_INT 11
34802: PUSH
34803: LD_INT 30
34805: PUSH
34806: LD_INT 49
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: DIFF
34814: ST_TO_ADDR
// if not list then
34815: LD_VAR 0 5
34819: NOT
34820: IFFALSE 34824
// exit ;
34822: GO 34966
// weapon := list [ rand ( 1 , list ) ] ;
34824: LD_ADDR_VAR 0 18
34828: PUSH
34829: LD_VAR 0 5
34833: PUSH
34834: LD_INT 1
34836: PPUSH
34837: LD_VAR 0 5
34841: PPUSH
34842: CALL_OW 12
34846: ARRAY
34847: ST_TO_ADDR
// end ; if weapon then
34848: LD_VAR 0 18
34852: IFFALSE 34966
// begin tmp := CostOfWeapon ( weapon ) ;
34854: LD_ADDR_VAR 0 14
34858: PUSH
34859: LD_VAR 0 18
34863: PPUSH
34864: CALL_OW 451
34868: ST_TO_ADDR
// j := GetBase ( tower ) ;
34869: LD_ADDR_VAR 0 9
34873: PUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 274
34883: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34884: LD_VAR 0 9
34888: PPUSH
34889: LD_INT 1
34891: PPUSH
34892: CALL_OW 275
34896: PUSH
34897: LD_VAR 0 14
34901: PUSH
34902: LD_INT 1
34904: ARRAY
34905: GREATEREQUAL
34906: PUSH
34907: LD_VAR 0 9
34911: PPUSH
34912: LD_INT 2
34914: PPUSH
34915: CALL_OW 275
34919: PUSH
34920: LD_VAR 0 14
34924: PUSH
34925: LD_INT 2
34927: ARRAY
34928: GREATEREQUAL
34929: AND
34930: PUSH
34931: LD_VAR 0 9
34935: PPUSH
34936: LD_INT 3
34938: PPUSH
34939: CALL_OW 275
34943: PUSH
34944: LD_VAR 0 14
34948: PUSH
34949: LD_INT 3
34951: ARRAY
34952: GREATEREQUAL
34953: AND
34954: IFFALSE 34966
// result := weapon ;
34956: LD_ADDR_VAR 0 3
34960: PUSH
34961: LD_VAR 0 18
34965: ST_TO_ADDR
// end ; end ;
34966: LD_VAR 0 3
34970: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34971: LD_INT 0
34973: PPUSH
34974: PPUSH
// result := true ;
34975: LD_ADDR_VAR 0 3
34979: PUSH
34980: LD_INT 1
34982: ST_TO_ADDR
// if array1 = array2 then
34983: LD_VAR 0 1
34987: PUSH
34988: LD_VAR 0 2
34992: EQUAL
34993: IFFALSE 35053
// begin for i = 1 to array1 do
34995: LD_ADDR_VAR 0 4
34999: PUSH
35000: DOUBLE
35001: LD_INT 1
35003: DEC
35004: ST_TO_ADDR
35005: LD_VAR 0 1
35009: PUSH
35010: FOR_TO
35011: IFFALSE 35049
// if array1 [ i ] <> array2 [ i ] then
35013: LD_VAR 0 1
35017: PUSH
35018: LD_VAR 0 4
35022: ARRAY
35023: PUSH
35024: LD_VAR 0 2
35028: PUSH
35029: LD_VAR 0 4
35033: ARRAY
35034: NONEQUAL
35035: IFFALSE 35047
// begin result := false ;
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 0
35044: ST_TO_ADDR
// break ;
35045: GO 35049
// end ;
35047: GO 35010
35049: POP
35050: POP
// end else
35051: GO 35061
// result := false ;
35053: LD_ADDR_VAR 0 3
35057: PUSH
35058: LD_INT 0
35060: ST_TO_ADDR
// end ;
35061: LD_VAR 0 3
35065: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35066: LD_INT 0
35068: PPUSH
35069: PPUSH
// if not array1 or not array2 then
35070: LD_VAR 0 1
35074: NOT
35075: PUSH
35076: LD_VAR 0 2
35080: NOT
35081: OR
35082: IFFALSE 35086
// exit ;
35084: GO 35150
// result := true ;
35086: LD_ADDR_VAR 0 3
35090: PUSH
35091: LD_INT 1
35093: ST_TO_ADDR
// for i = 1 to array1 do
35094: LD_ADDR_VAR 0 4
35098: PUSH
35099: DOUBLE
35100: LD_INT 1
35102: DEC
35103: ST_TO_ADDR
35104: LD_VAR 0 1
35108: PUSH
35109: FOR_TO
35110: IFFALSE 35148
// if array1 [ i ] <> array2 [ i ] then
35112: LD_VAR 0 1
35116: PUSH
35117: LD_VAR 0 4
35121: ARRAY
35122: PUSH
35123: LD_VAR 0 2
35127: PUSH
35128: LD_VAR 0 4
35132: ARRAY
35133: NONEQUAL
35134: IFFALSE 35146
// begin result := false ;
35136: LD_ADDR_VAR 0 3
35140: PUSH
35141: LD_INT 0
35143: ST_TO_ADDR
// break ;
35144: GO 35148
// end ;
35146: GO 35109
35148: POP
35149: POP
// end ;
35150: LD_VAR 0 3
35154: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35155: LD_INT 0
35157: PPUSH
35158: PPUSH
35159: PPUSH
// pom := GetBase ( fac ) ;
35160: LD_ADDR_VAR 0 5
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 274
35174: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35175: LD_ADDR_VAR 0 4
35179: PUSH
35180: LD_VAR 0 2
35184: PUSH
35185: LD_INT 1
35187: ARRAY
35188: PPUSH
35189: LD_VAR 0 2
35193: PUSH
35194: LD_INT 2
35196: ARRAY
35197: PPUSH
35198: LD_VAR 0 2
35202: PUSH
35203: LD_INT 3
35205: ARRAY
35206: PPUSH
35207: LD_VAR 0 2
35211: PUSH
35212: LD_INT 4
35214: ARRAY
35215: PPUSH
35216: CALL_OW 449
35220: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35221: LD_ADDR_VAR 0 3
35225: PUSH
35226: LD_VAR 0 5
35230: PPUSH
35231: LD_INT 1
35233: PPUSH
35234: CALL_OW 275
35238: PUSH
35239: LD_VAR 0 4
35243: PUSH
35244: LD_INT 1
35246: ARRAY
35247: GREATEREQUAL
35248: PUSH
35249: LD_VAR 0 5
35253: PPUSH
35254: LD_INT 2
35256: PPUSH
35257: CALL_OW 275
35261: PUSH
35262: LD_VAR 0 4
35266: PUSH
35267: LD_INT 2
35269: ARRAY
35270: GREATEREQUAL
35271: AND
35272: PUSH
35273: LD_VAR 0 5
35277: PPUSH
35278: LD_INT 3
35280: PPUSH
35281: CALL_OW 275
35285: PUSH
35286: LD_VAR 0 4
35290: PUSH
35291: LD_INT 3
35293: ARRAY
35294: GREATEREQUAL
35295: AND
35296: ST_TO_ADDR
// end ;
35297: LD_VAR 0 3
35301: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
// pom := GetBase ( building ) ;
35308: LD_ADDR_VAR 0 3
35312: PUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 274
35322: ST_TO_ADDR
// if not pom then
35323: LD_VAR 0 3
35327: NOT
35328: IFFALSE 35332
// exit ;
35330: GO 35502
// btype := GetBType ( building ) ;
35332: LD_ADDR_VAR 0 5
35336: PUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 266
35346: ST_TO_ADDR
// if btype = b_armoury then
35347: LD_VAR 0 5
35351: PUSH
35352: LD_INT 4
35354: EQUAL
35355: IFFALSE 35365
// btype := b_barracks ;
35357: LD_ADDR_VAR 0 5
35361: PUSH
35362: LD_INT 5
35364: ST_TO_ADDR
// if btype = b_depot then
35365: LD_VAR 0 5
35369: PUSH
35370: LD_INT 0
35372: EQUAL
35373: IFFALSE 35383
// btype := b_warehouse ;
35375: LD_ADDR_VAR 0 5
35379: PUSH
35380: LD_INT 1
35382: ST_TO_ADDR
// if btype = b_workshop then
35383: LD_VAR 0 5
35387: PUSH
35388: LD_INT 2
35390: EQUAL
35391: IFFALSE 35401
// btype := b_factory ;
35393: LD_ADDR_VAR 0 5
35397: PUSH
35398: LD_INT 3
35400: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35401: LD_ADDR_VAR 0 4
35405: PUSH
35406: LD_VAR 0 5
35410: PPUSH
35411: LD_VAR 0 1
35415: PPUSH
35416: CALL_OW 248
35420: PPUSH
35421: CALL_OW 450
35425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35426: LD_ADDR_VAR 0 2
35430: PUSH
35431: LD_VAR 0 3
35435: PPUSH
35436: LD_INT 1
35438: PPUSH
35439: CALL_OW 275
35443: PUSH
35444: LD_VAR 0 4
35448: PUSH
35449: LD_INT 1
35451: ARRAY
35452: GREATEREQUAL
35453: PUSH
35454: LD_VAR 0 3
35458: PPUSH
35459: LD_INT 2
35461: PPUSH
35462: CALL_OW 275
35466: PUSH
35467: LD_VAR 0 4
35471: PUSH
35472: LD_INT 2
35474: ARRAY
35475: GREATEREQUAL
35476: AND
35477: PUSH
35478: LD_VAR 0 3
35482: PPUSH
35483: LD_INT 3
35485: PPUSH
35486: CALL_OW 275
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: LD_INT 3
35498: ARRAY
35499: GREATEREQUAL
35500: AND
35501: ST_TO_ADDR
// end ;
35502: LD_VAR 0 2
35506: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35507: LD_INT 0
35509: PPUSH
35510: PPUSH
35511: PPUSH
// pom := GetBase ( building ) ;
35512: LD_ADDR_VAR 0 4
35516: PUSH
35517: LD_VAR 0 1
35521: PPUSH
35522: CALL_OW 274
35526: ST_TO_ADDR
// if not pom then
35527: LD_VAR 0 4
35531: NOT
35532: IFFALSE 35536
// exit ;
35534: GO 35637
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35536: LD_ADDR_VAR 0 5
35540: PUSH
35541: LD_VAR 0 2
35545: PPUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 248
35555: PPUSH
35556: CALL_OW 450
35560: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35561: LD_ADDR_VAR 0 3
35565: PUSH
35566: LD_VAR 0 4
35570: PPUSH
35571: LD_INT 1
35573: PPUSH
35574: CALL_OW 275
35578: PUSH
35579: LD_VAR 0 5
35583: PUSH
35584: LD_INT 1
35586: ARRAY
35587: GREATEREQUAL
35588: PUSH
35589: LD_VAR 0 4
35593: PPUSH
35594: LD_INT 2
35596: PPUSH
35597: CALL_OW 275
35601: PUSH
35602: LD_VAR 0 5
35606: PUSH
35607: LD_INT 2
35609: ARRAY
35610: GREATEREQUAL
35611: AND
35612: PUSH
35613: LD_VAR 0 4
35617: PPUSH
35618: LD_INT 3
35620: PPUSH
35621: CALL_OW 275
35625: PUSH
35626: LD_VAR 0 5
35630: PUSH
35631: LD_INT 3
35633: ARRAY
35634: GREATEREQUAL
35635: AND
35636: ST_TO_ADDR
// end ;
35637: LD_VAR 0 3
35641: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35642: LD_INT 0
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
// result := false ;
35655: LD_ADDR_VAR 0 8
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35663: LD_VAR 0 5
35667: NOT
35668: PUSH
35669: LD_VAR 0 1
35673: NOT
35674: OR
35675: PUSH
35676: LD_VAR 0 2
35680: NOT
35681: OR
35682: PUSH
35683: LD_VAR 0 3
35687: NOT
35688: OR
35689: IFFALSE 35693
// exit ;
35691: GO 36507
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35693: LD_ADDR_VAR 0 14
35697: PUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: LD_VAR 0 2
35707: PPUSH
35708: LD_VAR 0 3
35712: PPUSH
35713: LD_VAR 0 4
35717: PPUSH
35718: LD_VAR 0 5
35722: PUSH
35723: LD_INT 1
35725: ARRAY
35726: PPUSH
35727: CALL_OW 248
35731: PPUSH
35732: LD_INT 0
35734: PPUSH
35735: CALL 37744 0 6
35739: ST_TO_ADDR
// if not hexes then
35740: LD_VAR 0 14
35744: NOT
35745: IFFALSE 35749
// exit ;
35747: GO 36507
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35749: LD_ADDR_VAR 0 17
35753: PUSH
35754: LD_VAR 0 5
35758: PPUSH
35759: LD_INT 22
35761: PUSH
35762: LD_VAR 0 13
35766: PPUSH
35767: CALL_OW 255
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: LD_INT 30
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 30
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PPUSH
35808: CALL_OW 72
35812: ST_TO_ADDR
// for i = 1 to hexes do
35813: LD_ADDR_VAR 0 9
35817: PUSH
35818: DOUBLE
35819: LD_INT 1
35821: DEC
35822: ST_TO_ADDR
35823: LD_VAR 0 14
35827: PUSH
35828: FOR_TO
35829: IFFALSE 36505
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35831: LD_ADDR_VAR 0 13
35835: PUSH
35836: LD_VAR 0 14
35840: PUSH
35841: LD_VAR 0 9
35845: ARRAY
35846: PUSH
35847: LD_INT 1
35849: ARRAY
35850: PPUSH
35851: LD_VAR 0 14
35855: PUSH
35856: LD_VAR 0 9
35860: ARRAY
35861: PUSH
35862: LD_INT 2
35864: ARRAY
35865: PPUSH
35866: CALL_OW 428
35870: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35871: LD_VAR 0 14
35875: PUSH
35876: LD_VAR 0 9
35880: ARRAY
35881: PUSH
35882: LD_INT 1
35884: ARRAY
35885: PPUSH
35886: LD_VAR 0 14
35890: PUSH
35891: LD_VAR 0 9
35895: ARRAY
35896: PUSH
35897: LD_INT 2
35899: ARRAY
35900: PPUSH
35901: CALL_OW 351
35905: PUSH
35906: LD_VAR 0 14
35910: PUSH
35911: LD_VAR 0 9
35915: ARRAY
35916: PUSH
35917: LD_INT 1
35919: ARRAY
35920: PPUSH
35921: LD_VAR 0 14
35925: PUSH
35926: LD_VAR 0 9
35930: ARRAY
35931: PUSH
35932: LD_INT 2
35934: ARRAY
35935: PPUSH
35936: CALL_OW 488
35940: NOT
35941: OR
35942: PUSH
35943: LD_VAR 0 13
35947: PPUSH
35948: CALL_OW 247
35952: PUSH
35953: LD_INT 3
35955: EQUAL
35956: OR
35957: IFFALSE 35963
// exit ;
35959: POP
35960: POP
35961: GO 36507
// if not tmp then
35963: LD_VAR 0 13
35967: NOT
35968: IFFALSE 35972
// continue ;
35970: GO 35828
// result := true ;
35972: LD_ADDR_VAR 0 8
35976: PUSH
35977: LD_INT 1
35979: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35980: LD_VAR 0 6
35984: PUSH
35985: LD_VAR 0 13
35989: PPUSH
35990: CALL_OW 247
35994: PUSH
35995: LD_INT 2
35997: EQUAL
35998: AND
35999: PUSH
36000: LD_VAR 0 13
36004: PPUSH
36005: CALL_OW 263
36009: PUSH
36010: LD_INT 1
36012: EQUAL
36013: AND
36014: IFFALSE 36178
// begin if IsDrivenBy ( tmp ) then
36016: LD_VAR 0 13
36020: PPUSH
36021: CALL_OW 311
36025: IFFALSE 36029
// continue ;
36027: GO 35828
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36029: LD_VAR 0 6
36033: PPUSH
36034: LD_INT 3
36036: PUSH
36037: LD_INT 60
36039: PUSH
36040: EMPTY
36041: LIST
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 3
36049: PUSH
36050: LD_INT 55
36052: PUSH
36053: EMPTY
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PPUSH
36064: CALL_OW 72
36068: IFFALSE 36176
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36070: LD_ADDR_VAR 0 18
36074: PUSH
36075: LD_VAR 0 6
36079: PPUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 60
36085: PUSH
36086: EMPTY
36087: LIST
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: LD_INT 55
36098: PUSH
36099: EMPTY
36100: LIST
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PPUSH
36110: CALL_OW 72
36114: PUSH
36115: LD_INT 1
36117: ARRAY
36118: ST_TO_ADDR
// if IsInUnit ( driver ) then
36119: LD_VAR 0 18
36123: PPUSH
36124: CALL_OW 310
36128: IFFALSE 36139
// ComExit ( driver ) ;
36130: LD_VAR 0 18
36134: PPUSH
36135: CALL 60928 0 1
// AddComEnterUnit ( driver , tmp ) ;
36139: LD_VAR 0 18
36143: PPUSH
36144: LD_VAR 0 13
36148: PPUSH
36149: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36153: LD_VAR 0 18
36157: PPUSH
36158: LD_VAR 0 7
36162: PPUSH
36163: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36167: LD_VAR 0 18
36171: PPUSH
36172: CALL_OW 181
// end ; continue ;
36176: GO 35828
// end ; if not cleaners or not tmp in cleaners then
36178: LD_VAR 0 6
36182: NOT
36183: PUSH
36184: LD_VAR 0 13
36188: PUSH
36189: LD_VAR 0 6
36193: IN
36194: NOT
36195: OR
36196: IFFALSE 36503
// begin if dep then
36198: LD_VAR 0 17
36202: IFFALSE 36338
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36204: LD_ADDR_VAR 0 16
36208: PUSH
36209: LD_VAR 0 17
36213: PUSH
36214: LD_INT 1
36216: ARRAY
36217: PPUSH
36218: CALL_OW 250
36222: PPUSH
36223: LD_VAR 0 17
36227: PUSH
36228: LD_INT 1
36230: ARRAY
36231: PPUSH
36232: CALL_OW 254
36236: PPUSH
36237: LD_INT 5
36239: PPUSH
36240: CALL_OW 272
36244: PUSH
36245: LD_VAR 0 17
36249: PUSH
36250: LD_INT 1
36252: ARRAY
36253: PPUSH
36254: CALL_OW 251
36258: PPUSH
36259: LD_VAR 0 17
36263: PUSH
36264: LD_INT 1
36266: ARRAY
36267: PPUSH
36268: CALL_OW 254
36272: PPUSH
36273: LD_INT 5
36275: PPUSH
36276: CALL_OW 273
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36285: LD_VAR 0 16
36289: PUSH
36290: LD_INT 1
36292: ARRAY
36293: PPUSH
36294: LD_VAR 0 16
36298: PUSH
36299: LD_INT 2
36301: ARRAY
36302: PPUSH
36303: CALL_OW 488
36307: IFFALSE 36338
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36309: LD_VAR 0 13
36313: PPUSH
36314: LD_VAR 0 16
36318: PUSH
36319: LD_INT 1
36321: ARRAY
36322: PPUSH
36323: LD_VAR 0 16
36327: PUSH
36328: LD_INT 2
36330: ARRAY
36331: PPUSH
36332: CALL_OW 111
// continue ;
36336: GO 35828
// end ; end ; r := GetDir ( tmp ) ;
36338: LD_ADDR_VAR 0 15
36342: PUSH
36343: LD_VAR 0 13
36347: PPUSH
36348: CALL_OW 254
36352: ST_TO_ADDR
// if r = 5 then
36353: LD_VAR 0 15
36357: PUSH
36358: LD_INT 5
36360: EQUAL
36361: IFFALSE 36371
// r := 0 ;
36363: LD_ADDR_VAR 0 15
36367: PUSH
36368: LD_INT 0
36370: ST_TO_ADDR
// for j = r to 5 do
36371: LD_ADDR_VAR 0 10
36375: PUSH
36376: DOUBLE
36377: LD_VAR 0 15
36381: DEC
36382: ST_TO_ADDR
36383: LD_INT 5
36385: PUSH
36386: FOR_TO
36387: IFFALSE 36501
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36389: LD_ADDR_VAR 0 11
36393: PUSH
36394: LD_VAR 0 13
36398: PPUSH
36399: CALL_OW 250
36403: PPUSH
36404: LD_VAR 0 10
36408: PPUSH
36409: LD_INT 2
36411: PPUSH
36412: CALL_OW 272
36416: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36417: LD_ADDR_VAR 0 12
36421: PUSH
36422: LD_VAR 0 13
36426: PPUSH
36427: CALL_OW 251
36431: PPUSH
36432: LD_VAR 0 10
36436: PPUSH
36437: LD_INT 2
36439: PPUSH
36440: CALL_OW 273
36444: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36445: LD_VAR 0 11
36449: PPUSH
36450: LD_VAR 0 12
36454: PPUSH
36455: CALL_OW 488
36459: PUSH
36460: LD_VAR 0 11
36464: PPUSH
36465: LD_VAR 0 12
36469: PPUSH
36470: CALL_OW 428
36474: NOT
36475: AND
36476: IFFALSE 36499
// begin ComMoveXY ( tmp , _x , _y ) ;
36478: LD_VAR 0 13
36482: PPUSH
36483: LD_VAR 0 11
36487: PPUSH
36488: LD_VAR 0 12
36492: PPUSH
36493: CALL_OW 111
// break ;
36497: GO 36501
// end ; end ;
36499: GO 36386
36501: POP
36502: POP
// end ; end ;
36503: GO 35828
36505: POP
36506: POP
// end ;
36507: LD_VAR 0 8
36511: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36512: LD_INT 0
36514: PPUSH
// result := true ;
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: LD_INT 1
36522: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36523: LD_VAR 0 2
36527: PUSH
36528: LD_INT 24
36530: DOUBLE
36531: EQUAL
36532: IFTRUE 36542
36534: LD_INT 33
36536: DOUBLE
36537: EQUAL
36538: IFTRUE 36542
36540: GO 36567
36542: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36543: LD_ADDR_VAR 0 3
36547: PUSH
36548: LD_INT 32
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 321
36560: PUSH
36561: LD_INT 2
36563: EQUAL
36564: ST_TO_ADDR
36565: GO 36887
36567: LD_INT 20
36569: DOUBLE
36570: EQUAL
36571: IFTRUE 36575
36573: GO 36600
36575: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_INT 6
36583: PPUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 321
36593: PUSH
36594: LD_INT 2
36596: EQUAL
36597: ST_TO_ADDR
36598: GO 36887
36600: LD_INT 22
36602: DOUBLE
36603: EQUAL
36604: IFTRUE 36614
36606: LD_INT 36
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36614
36612: GO 36639
36614: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36615: LD_ADDR_VAR 0 3
36619: PUSH
36620: LD_INT 15
36622: PPUSH
36623: LD_VAR 0 1
36627: PPUSH
36628: CALL_OW 321
36632: PUSH
36633: LD_INT 2
36635: EQUAL
36636: ST_TO_ADDR
36637: GO 36887
36639: LD_INT 30
36641: DOUBLE
36642: EQUAL
36643: IFTRUE 36647
36645: GO 36672
36647: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: LD_INT 20
36655: PPUSH
36656: LD_VAR 0 1
36660: PPUSH
36661: CALL_OW 321
36665: PUSH
36666: LD_INT 2
36668: EQUAL
36669: ST_TO_ADDR
36670: GO 36887
36672: LD_INT 28
36674: DOUBLE
36675: EQUAL
36676: IFTRUE 36686
36678: LD_INT 21
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36686
36684: GO 36711
36686: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36687: LD_ADDR_VAR 0 3
36691: PUSH
36692: LD_INT 21
36694: PPUSH
36695: LD_VAR 0 1
36699: PPUSH
36700: CALL_OW 321
36704: PUSH
36705: LD_INT 2
36707: EQUAL
36708: ST_TO_ADDR
36709: GO 36887
36711: LD_INT 16
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36719
36717: GO 36746
36719: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36720: LD_ADDR_VAR 0 3
36724: PUSH
36725: LD_EXP 19
36729: PPUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL_OW 321
36739: PUSH
36740: LD_INT 2
36742: EQUAL
36743: ST_TO_ADDR
36744: GO 36887
36746: LD_INT 19
36748: DOUBLE
36749: EQUAL
36750: IFTRUE 36760
36752: LD_INT 23
36754: DOUBLE
36755: EQUAL
36756: IFTRUE 36760
36758: GO 36787
36760: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36761: LD_ADDR_VAR 0 3
36765: PUSH
36766: LD_EXP 18
36770: PPUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 321
36780: PUSH
36781: LD_INT 2
36783: EQUAL
36784: ST_TO_ADDR
36785: GO 36887
36787: LD_INT 17
36789: DOUBLE
36790: EQUAL
36791: IFTRUE 36795
36793: GO 36820
36795: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36796: LD_ADDR_VAR 0 3
36800: PUSH
36801: LD_INT 39
36803: PPUSH
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 321
36813: PUSH
36814: LD_INT 2
36816: EQUAL
36817: ST_TO_ADDR
36818: GO 36887
36820: LD_INT 18
36822: DOUBLE
36823: EQUAL
36824: IFTRUE 36828
36826: GO 36853
36828: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36829: LD_ADDR_VAR 0 3
36833: PUSH
36834: LD_INT 40
36836: PPUSH
36837: LD_VAR 0 1
36841: PPUSH
36842: CALL_OW 321
36846: PUSH
36847: LD_INT 2
36849: EQUAL
36850: ST_TO_ADDR
36851: GO 36887
36853: LD_INT 27
36855: DOUBLE
36856: EQUAL
36857: IFTRUE 36861
36859: GO 36886
36861: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36862: LD_ADDR_VAR 0 3
36866: PUSH
36867: LD_INT 35
36869: PPUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 321
36879: PUSH
36880: LD_INT 2
36882: EQUAL
36883: ST_TO_ADDR
36884: GO 36887
36886: POP
// end ;
36887: LD_VAR 0 3
36891: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36892: LD_INT 0
36894: PPUSH
36895: PPUSH
36896: PPUSH
36897: PPUSH
36898: PPUSH
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
36903: PPUSH
36904: PPUSH
// result := false ;
36905: LD_ADDR_VAR 0 6
36909: PUSH
36910: LD_INT 0
36912: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36913: LD_VAR 0 1
36917: NOT
36918: PUSH
36919: LD_VAR 0 1
36923: PPUSH
36924: CALL_OW 266
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: IN
36939: NOT
36940: OR
36941: PUSH
36942: LD_VAR 0 2
36946: NOT
36947: OR
36948: PUSH
36949: LD_VAR 0 5
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 3
36965: PUSH
36966: LD_INT 4
36968: PUSH
36969: LD_INT 5
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: IN
36980: NOT
36981: OR
36982: PUSH
36983: LD_VAR 0 3
36987: PPUSH
36988: LD_VAR 0 4
36992: PPUSH
36993: CALL_OW 488
36997: NOT
36998: OR
36999: IFFALSE 37003
// exit ;
37001: GO 37739
// side := GetSide ( depot ) ;
37003: LD_ADDR_VAR 0 9
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL_OW 255
37017: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37018: LD_VAR 0 9
37022: PPUSH
37023: LD_VAR 0 2
37027: PPUSH
37028: CALL 36512 0 2
37032: NOT
37033: IFFALSE 37037
// exit ;
37035: GO 37739
// pom := GetBase ( depot ) ;
37037: LD_ADDR_VAR 0 10
37041: PUSH
37042: LD_VAR 0 1
37046: PPUSH
37047: CALL_OW 274
37051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37052: LD_ADDR_VAR 0 11
37056: PUSH
37057: LD_VAR 0 2
37061: PPUSH
37062: LD_VAR 0 1
37066: PPUSH
37067: CALL_OW 248
37071: PPUSH
37072: CALL_OW 450
37076: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37077: LD_VAR 0 10
37081: PPUSH
37082: LD_INT 1
37084: PPUSH
37085: CALL_OW 275
37089: PUSH
37090: LD_VAR 0 11
37094: PUSH
37095: LD_INT 1
37097: ARRAY
37098: GREATEREQUAL
37099: PUSH
37100: LD_VAR 0 10
37104: PPUSH
37105: LD_INT 2
37107: PPUSH
37108: CALL_OW 275
37112: PUSH
37113: LD_VAR 0 11
37117: PUSH
37118: LD_INT 2
37120: ARRAY
37121: GREATEREQUAL
37122: AND
37123: PUSH
37124: LD_VAR 0 10
37128: PPUSH
37129: LD_INT 3
37131: PPUSH
37132: CALL_OW 275
37136: PUSH
37137: LD_VAR 0 11
37141: PUSH
37142: LD_INT 3
37144: ARRAY
37145: GREATEREQUAL
37146: AND
37147: NOT
37148: IFFALSE 37152
// exit ;
37150: GO 37739
// if GetBType ( depot ) = b_depot then
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 266
37161: PUSH
37162: LD_INT 0
37164: EQUAL
37165: IFFALSE 37177
// dist := 28 else
37167: LD_ADDR_VAR 0 14
37171: PUSH
37172: LD_INT 28
37174: ST_TO_ADDR
37175: GO 37185
// dist := 36 ;
37177: LD_ADDR_VAR 0 14
37181: PUSH
37182: LD_INT 36
37184: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37185: LD_VAR 0 1
37189: PPUSH
37190: LD_VAR 0 3
37194: PPUSH
37195: LD_VAR 0 4
37199: PPUSH
37200: CALL_OW 297
37204: PUSH
37205: LD_VAR 0 14
37209: GREATER
37210: IFFALSE 37214
// exit ;
37212: GO 37739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37214: LD_ADDR_VAR 0 12
37218: PUSH
37219: LD_VAR 0 2
37223: PPUSH
37224: LD_VAR 0 3
37228: PPUSH
37229: LD_VAR 0 4
37233: PPUSH
37234: LD_VAR 0 5
37238: PPUSH
37239: LD_VAR 0 1
37243: PPUSH
37244: CALL_OW 248
37248: PPUSH
37249: LD_INT 0
37251: PPUSH
37252: CALL 37744 0 6
37256: ST_TO_ADDR
// if not hexes then
37257: LD_VAR 0 12
37261: NOT
37262: IFFALSE 37266
// exit ;
37264: GO 37739
// hex := GetHexInfo ( x , y ) ;
37266: LD_ADDR_VAR 0 15
37270: PUSH
37271: LD_VAR 0 3
37275: PPUSH
37276: LD_VAR 0 4
37280: PPUSH
37281: CALL_OW 546
37285: ST_TO_ADDR
// if hex [ 1 ] then
37286: LD_VAR 0 15
37290: PUSH
37291: LD_INT 1
37293: ARRAY
37294: IFFALSE 37298
// exit ;
37296: GO 37739
// height := hex [ 2 ] ;
37298: LD_ADDR_VAR 0 13
37302: PUSH
37303: LD_VAR 0 15
37307: PUSH
37308: LD_INT 2
37310: ARRAY
37311: ST_TO_ADDR
// for i = 1 to hexes do
37312: LD_ADDR_VAR 0 7
37316: PUSH
37317: DOUBLE
37318: LD_INT 1
37320: DEC
37321: ST_TO_ADDR
37322: LD_VAR 0 12
37326: PUSH
37327: FOR_TO
37328: IFFALSE 37658
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37330: LD_VAR 0 12
37334: PUSH
37335: LD_VAR 0 7
37339: ARRAY
37340: PUSH
37341: LD_INT 1
37343: ARRAY
37344: PPUSH
37345: LD_VAR 0 12
37349: PUSH
37350: LD_VAR 0 7
37354: ARRAY
37355: PUSH
37356: LD_INT 2
37358: ARRAY
37359: PPUSH
37360: CALL_OW 488
37364: NOT
37365: PUSH
37366: LD_VAR 0 12
37370: PUSH
37371: LD_VAR 0 7
37375: ARRAY
37376: PUSH
37377: LD_INT 1
37379: ARRAY
37380: PPUSH
37381: LD_VAR 0 12
37385: PUSH
37386: LD_VAR 0 7
37390: ARRAY
37391: PUSH
37392: LD_INT 2
37394: ARRAY
37395: PPUSH
37396: CALL_OW 428
37400: PUSH
37401: LD_INT 0
37403: GREATER
37404: OR
37405: PUSH
37406: LD_VAR 0 12
37410: PUSH
37411: LD_VAR 0 7
37415: ARRAY
37416: PUSH
37417: LD_INT 1
37419: ARRAY
37420: PPUSH
37421: LD_VAR 0 12
37425: PUSH
37426: LD_VAR 0 7
37430: ARRAY
37431: PUSH
37432: LD_INT 2
37434: ARRAY
37435: PPUSH
37436: CALL_OW 351
37440: OR
37441: IFFALSE 37447
// exit ;
37443: POP
37444: POP
37445: GO 37739
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37447: LD_ADDR_VAR 0 8
37451: PUSH
37452: LD_VAR 0 12
37456: PUSH
37457: LD_VAR 0 7
37461: ARRAY
37462: PUSH
37463: LD_INT 1
37465: ARRAY
37466: PPUSH
37467: LD_VAR 0 12
37471: PUSH
37472: LD_VAR 0 7
37476: ARRAY
37477: PUSH
37478: LD_INT 2
37480: ARRAY
37481: PPUSH
37482: CALL_OW 546
37486: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37487: LD_VAR 0 8
37491: PUSH
37492: LD_INT 1
37494: ARRAY
37495: PUSH
37496: LD_VAR 0 8
37500: PUSH
37501: LD_INT 2
37503: ARRAY
37504: PUSH
37505: LD_VAR 0 13
37509: PUSH
37510: LD_INT 2
37512: PLUS
37513: GREATER
37514: OR
37515: PUSH
37516: LD_VAR 0 8
37520: PUSH
37521: LD_INT 2
37523: ARRAY
37524: PUSH
37525: LD_VAR 0 13
37529: PUSH
37530: LD_INT 2
37532: MINUS
37533: LESS
37534: OR
37535: PUSH
37536: LD_VAR 0 8
37540: PUSH
37541: LD_INT 3
37543: ARRAY
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 8
37550: PUSH
37551: LD_INT 9
37553: PUSH
37554: LD_INT 10
37556: PUSH
37557: LD_INT 11
37559: PUSH
37560: LD_INT 12
37562: PUSH
37563: LD_INT 13
37565: PUSH
37566: LD_INT 16
37568: PUSH
37569: LD_INT 17
37571: PUSH
37572: LD_INT 18
37574: PUSH
37575: LD_INT 19
37577: PUSH
37578: LD_INT 20
37580: PUSH
37581: LD_INT 21
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: IN
37599: NOT
37600: OR
37601: PUSH
37602: LD_VAR 0 8
37606: PUSH
37607: LD_INT 5
37609: ARRAY
37610: NOT
37611: OR
37612: PUSH
37613: LD_VAR 0 8
37617: PUSH
37618: LD_INT 6
37620: ARRAY
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: LD_INT 7
37630: PUSH
37631: LD_INT 9
37633: PUSH
37634: LD_INT 10
37636: PUSH
37637: LD_INT 11
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: IN
37648: NOT
37649: OR
37650: IFFALSE 37656
// exit ;
37652: POP
37653: POP
37654: GO 37739
// end ;
37656: GO 37327
37658: POP
37659: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37660: LD_VAR 0 9
37664: PPUSH
37665: LD_VAR 0 3
37669: PPUSH
37670: LD_VAR 0 4
37674: PPUSH
37675: LD_INT 20
37677: PPUSH
37678: CALL 29685 0 4
37682: PUSH
37683: LD_INT 4
37685: ARRAY
37686: IFFALSE 37690
// exit ;
37688: GO 37739
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37690: LD_VAR 0 2
37694: PUSH
37695: LD_INT 29
37697: PUSH
37698: LD_INT 30
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: IN
37705: PUSH
37706: LD_VAR 0 3
37710: PPUSH
37711: LD_VAR 0 4
37715: PPUSH
37716: LD_VAR 0 9
37720: PPUSH
37721: CALL_OW 440
37725: NOT
37726: AND
37727: IFFALSE 37731
// exit ;
37729: GO 37739
// result := true ;
37731: LD_ADDR_VAR 0 6
37735: PUSH
37736: LD_INT 1
37738: ST_TO_ADDR
// end ;
37739: LD_VAR 0 6
37743: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37744: LD_INT 0
37746: PPUSH
37747: PPUSH
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
37793: PPUSH
37794: PPUSH
37795: PPUSH
37796: PPUSH
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
// result = [ ] ;
37804: LD_ADDR_VAR 0 7
37808: PUSH
37809: EMPTY
37810: ST_TO_ADDR
// temp_list = [ ] ;
37811: LD_ADDR_VAR 0 9
37815: PUSH
37816: EMPTY
37817: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37818: LD_VAR 0 4
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 4
37837: PUSH
37838: LD_INT 5
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: IN
37849: NOT
37850: PUSH
37851: LD_VAR 0 1
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: IN
37866: PUSH
37867: LD_VAR 0 5
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: IN
37886: NOT
37887: AND
37888: OR
37889: IFFALSE 37893
// exit ;
37891: GO 56284
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37893: LD_VAR 0 1
37897: PUSH
37898: LD_INT 6
37900: PUSH
37901: LD_INT 7
37903: PUSH
37904: LD_INT 8
37906: PUSH
37907: LD_INT 13
37909: PUSH
37910: LD_INT 12
37912: PUSH
37913: LD_INT 15
37915: PUSH
37916: LD_INT 11
37918: PUSH
37919: LD_INT 14
37921: PUSH
37922: LD_INT 10
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: IN
37936: IFFALSE 37946
// btype = b_lab ;
37938: LD_ADDR_VAR 0 1
37942: PUSH
37943: LD_INT 6
37945: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37946: LD_VAR 0 6
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: IN
37965: NOT
37966: PUSH
37967: LD_VAR 0 1
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: LD_INT 6
37986: PUSH
37987: LD_INT 36
37989: PUSH
37990: LD_INT 4
37992: PUSH
37993: LD_INT 5
37995: PUSH
37996: LD_INT 31
37998: PUSH
37999: LD_INT 32
38001: PUSH
38002: LD_INT 33
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: IN
38018: NOT
38019: PUSH
38020: LD_VAR 0 6
38024: PUSH
38025: LD_INT 1
38027: EQUAL
38028: AND
38029: OR
38030: PUSH
38031: LD_VAR 0 1
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 3
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: IN
38046: NOT
38047: PUSH
38048: LD_VAR 0 6
38052: PUSH
38053: LD_INT 2
38055: EQUAL
38056: AND
38057: OR
38058: IFFALSE 38068
// mode = 0 ;
38060: LD_ADDR_VAR 0 6
38064: PUSH
38065: LD_INT 0
38067: ST_TO_ADDR
// case mode of 0 :
38068: LD_VAR 0 6
38072: PUSH
38073: LD_INT 0
38075: DOUBLE
38076: EQUAL
38077: IFTRUE 38081
38079: GO 49534
38081: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38082: LD_ADDR_VAR 0 11
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38275: LD_ADDR_VAR 0 12
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: NEG
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 3
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38471: LD_ADDR_VAR 0 13
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 2
38618: NEG
38619: PUSH
38620: LD_INT 3
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 3
38630: NEG
38631: PUSH
38632: LD_INT 2
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38670: LD_ADDR_VAR 0 14
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 2
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: LD_INT 3
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 3
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38866: LD_ADDR_VAR 0 15
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: NEG
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39059: LD_ADDR_VAR 0 16
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39252: LD_ADDR_VAR 0 17
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39482: LD_ADDR_VAR 0 18
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39712: LD_ADDR_VAR 0 19
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 2
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39942: LD_ADDR_VAR 0 20
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 2
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: NEG
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40172: LD_ADDR_VAR 0 21
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 2
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40402: LD_ADDR_VAR 0 22
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 2
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 2
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40632: LD_ADDR_VAR 0 23
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: LD_INT 3
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: LD_INT 3
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 2
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40912: LD_ADDR_VAR 0 24
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41188: LD_ADDR_VAR 0 25
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 1
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 3
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 3
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41462: LD_ADDR_VAR 0 26
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 1
41627: NEG
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 3
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41738: LD_ADDR_VAR 0 27
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42018: LD_ADDR_VAR 0 28
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: NEG
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: NEG
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: LD_INT 3
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42300: LD_ADDR_VAR 0 29
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 2
42478: NEG
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: LD_INT 3
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 3
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 3
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42579: LD_ADDR_VAR 0 30
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: NEG
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: LD_INT 3
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42857: LD_ADDR_VAR 0 31
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: LD_INT 3
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 3
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43135: LD_ADDR_VAR 0 32
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 2
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 2
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43413: LD_ADDR_VAR 0 33
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 3
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43692: LD_ADDR_VAR 0 34
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 3
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 3
43937: NEG
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43972: LD_ADDR_VAR 0 35
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44084: LD_ADDR_VAR 0 36
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44196: LD_ADDR_VAR 0 37
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44308: LD_ADDR_VAR 0 38
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44420: LD_ADDR_VAR 0 39
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44532: LD_ADDR_VAR 0 40
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44644: LD_ADDR_VAR 0 41
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 3
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 3
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 3
44918: NEG
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 3
44929: NEG
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44994: LD_ADDR_VAR 0 42
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 3
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: LD_INT 3
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 3
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 3
45303: NEG
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45344: LD_ADDR_VAR 0 43
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 3
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 3
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: NEG
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 3
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45692: LD_ADDR_VAR 0 44
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 3
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 3
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 3
45966: NEG
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 3
45977: NEG
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 3
46001: NEG
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46042: LD_ADDR_VAR 0 45
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: LD_INT 3
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 3
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 3
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: NEG
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46392: LD_ADDR_VAR 0 46
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 3
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 3
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46740: LD_ADDR_VAR 0 47
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46891: LD_ADDR_VAR 0 48
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47038: LD_ADDR_VAR 0 49
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47182: LD_ADDR_VAR 0 50
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47326: LD_ADDR_VAR 0 51
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47473: LD_ADDR_VAR 0 52
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47624: LD_ADDR_VAR 0 53
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47854: LD_ADDR_VAR 0 54
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 2
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48084: LD_ADDR_VAR 0 55
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 2
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48314: LD_ADDR_VAR 0 56
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48544: LD_ADDR_VAR 0 57
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48774: LD_ADDR_VAR 0 58
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 2
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49004: LD_ADDR_VAR 0 59
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49092: LD_ADDR_VAR 0 60
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49180: LD_ADDR_VAR 0 61
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49268: LD_ADDR_VAR 0 62
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49356: LD_ADDR_VAR 0 63
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: NEG
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49444: LD_ADDR_VAR 0 64
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// end ; 1 :
49532: GO 55429
49534: LD_INT 1
49536: DOUBLE
49537: EQUAL
49538: IFTRUE 49542
49540: GO 52165
49542: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49543: LD_ADDR_VAR 0 11
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49587: LD_ADDR_VAR 0 12
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49628: LD_ADDR_VAR 0 13
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_INT 3
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49668: LD_ADDR_VAR 0 14
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 3
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49709: LD_ADDR_VAR 0 15
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49753: LD_ADDR_VAR 0 16
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: LD_INT 3
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49799: LD_ADDR_VAR 0 17
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49843: LD_ADDR_VAR 0 18
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: LIST
49883: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49884: LD_ADDR_VAR 0 19
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49924: LD_ADDR_VAR 0 20
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 3
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49965: LD_ADDR_VAR 0 21
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50009: LD_ADDR_VAR 0 22
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: NEG
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 3
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50055: LD_ADDR_VAR 0 23
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 4
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50099: LD_ADDR_VAR 0 24
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 4
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50140: LD_ADDR_VAR 0 25
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 4
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50180: LD_ADDR_VAR 0 26
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 4
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50221: LD_ADDR_VAR 0 27
50225: PUSH
50226: LD_INT 3
50228: NEG
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 4
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50265: LD_ADDR_VAR 0 28
50269: PUSH
50270: LD_INT 3
50272: NEG
50273: PUSH
50274: LD_INT 3
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: LD_INT 4
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 4
50296: NEG
50297: PUSH
50298: LD_INT 3
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50311: LD_ADDR_VAR 0 29
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 4
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 5
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 5
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 4
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 6
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 6
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 5
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50466: LD_ADDR_VAR 0 30
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 3
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 4
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 4
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 4
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 5
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 5
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 5
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 6
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 6
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50609: LD_ADDR_VAR 0 31
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 3
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 4
50656: PUSH
50657: LD_INT 4
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: LD_INT 4
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 5
50676: PUSH
50677: LD_INT 4
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 5
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: LD_INT 5
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 6
50706: PUSH
50707: LD_INT 5
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 6
50716: PUSH
50717: LD_INT 6
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 5
50726: PUSH
50727: LD_INT 6
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50748: LD_ADDR_VAR 0 32
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 4
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 4
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 5
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 5
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 4
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 6
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 6
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 5
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50891: LD_ADDR_VAR 0 33
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 4
50943: NEG
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 4
50954: NEG
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 4
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 5
50977: NEG
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 5
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 5
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 6
51011: NEG
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 6
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51046: LD_ADDR_VAR 0 34
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: LD_INT 3
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 4
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 4
51113: NEG
51114: PUSH
51115: LD_INT 4
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: NEG
51126: PUSH
51127: LD_INT 5
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 5
51137: NEG
51138: PUSH
51139: LD_INT 4
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 5
51149: NEG
51150: PUSH
51151: LD_INT 5
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 5
51161: NEG
51162: PUSH
51163: LD_INT 6
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 6
51173: NEG
51174: PUSH
51175: LD_INT 5
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 6
51185: NEG
51186: PUSH
51187: LD_INT 6
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51209: LD_ADDR_VAR 0 41
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 3
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51253: LD_ADDR_VAR 0 42
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 3
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51294: LD_ADDR_VAR 0 43
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 3
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51334: LD_ADDR_VAR 0 44
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51375: LD_ADDR_VAR 0 45
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51419: LD_ADDR_VAR 0 46
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: NEG
51451: PUSH
51452: LD_INT 2
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51465: LD_ADDR_VAR 0 47
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51498: LD_ADDR_VAR 0 48
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51529: LD_ADDR_VAR 0 49
51533: PUSH
51534: LD_INT 3
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51558: LD_ADDR_VAR 0 50
51562: PUSH
51563: LD_INT 2
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51587: LD_ADDR_VAR 0 51
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51618: LD_ADDR_VAR 0 52
51622: PUSH
51623: LD_INT 3
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51651: LD_ADDR_VAR 0 53
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: LIST
51694: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51695: LD_ADDR_VAR 0 54
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51736: LD_ADDR_VAR 0 55
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51776: LD_ADDR_VAR 0 56
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 3
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51817: LD_ADDR_VAR 0 57
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 3
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51861: LD_ADDR_VAR 0 58
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51907: LD_ADDR_VAR 0 59
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 1
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51951: LD_ADDR_VAR 0 60
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51992: LD_ADDR_VAR 0 61
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52032: LD_ADDR_VAR 0 62
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52073: LD_ADDR_VAR 0 63
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52117: LD_ADDR_VAR 0 64
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// end ; 2 :
52163: GO 55429
52165: LD_INT 2
52167: DOUBLE
52168: EQUAL
52169: IFTRUE 52173
52171: GO 55428
52173: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52174: LD_ADDR_VAR 0 29
52178: PUSH
52179: LD_INT 4
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 5
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 5
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: PUSH
52275: LD_INT 3
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 4
52294: PUSH
52295: LD_INT 3
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: LD_INT 4
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 4
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 4
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 4
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 4
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 5
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 5
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 4
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 5
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 3
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 4
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 4
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 4
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 4
52559: NEG
52560: PUSH
52561: LD_INT 4
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 4
52571: NEG
52572: PUSH
52573: LD_INT 5
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: LD_INT 4
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 3
52595: NEG
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 4
52607: NEG
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 5
52619: NEG
52620: PUSH
52621: LD_INT 4
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 5
52631: NEG
52632: PUSH
52633: LD_INT 5
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: NEG
52644: PUSH
52645: LD_INT 5
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 5
52655: NEG
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52712: LD_ADDR_VAR 0 30
52716: PUSH
52717: LD_INT 4
52719: PUSH
52720: LD_INT 4
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 4
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 5
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 5
52749: PUSH
52750: LD_INT 5
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 4
52759: PUSH
52760: LD_INT 5
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: LD_INT 4
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 3
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 5
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 5
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 1
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 4
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 3
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 4
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 4
52902: NEG
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 4
52913: NEG
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 4
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 5
52958: NEG
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 5
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 5
52981: NEG
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: LD_INT 3
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: LD_INT 4
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: NEG
53041: PUSH
53042: LD_INT 2
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: NEG
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 4
53076: NEG
53077: PUSH
53078: LD_INT 4
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 4
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 4
53100: NEG
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 4
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: LD_INT 5
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 4
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 3
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 3
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: LD_INT 4
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 5
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 5
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53259: LD_ADDR_VAR 0 31
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 4
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 4
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 5
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 4
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 5
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 3
53370: NEG
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 4
53415: NEG
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 4
53426: NEG
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 4
53438: NEG
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 4
53461: NEG
53462: PUSH
53463: LD_INT 4
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 4
53473: NEG
53474: PUSH
53475: LD_INT 5
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 4
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 3
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 4
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 5
53521: NEG
53522: PUSH
53523: LD_INT 4
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 5
53533: NEG
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 3
53545: NEG
53546: PUSH
53547: LD_INT 5
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 5
53557: NEG
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 4
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 4
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 2
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 4
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 5
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 5
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 3
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53809: LD_ADDR_VAR 0 32
53813: PUSH
53814: LD_INT 4
53816: NEG
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 4
53827: NEG
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 3
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 4
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 5
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 5
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 5
53895: NEG
53896: PUSH
53897: LD_INT 2
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 3
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 4
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: NEG
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 4
53990: NEG
53991: PUSH
53992: LD_INT 4
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: LD_INT 4
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 4
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 4
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 5
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 4
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 5
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 5
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 3
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 4
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 4
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 4
54221: PUSH
54222: LD_INT 4
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 4
54231: PUSH
54232: LD_INT 3
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 5
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 5
54251: PUSH
54252: LD_INT 5
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 4
54261: PUSH
54262: LD_INT 5
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 5
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54356: LD_ADDR_VAR 0 33
54360: PUSH
54361: LD_INT 4
54363: NEG
54364: PUSH
54365: LD_INT 4
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 4
54375: NEG
54376: PUSH
54377: LD_INT 5
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: NEG
54388: PUSH
54389: LD_INT 4
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: NEG
54400: PUSH
54401: LD_INT 3
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 4
54411: NEG
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 5
54423: NEG
54424: PUSH
54425: LD_INT 4
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 5
54435: NEG
54436: PUSH
54437: LD_INT 5
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: LD_INT 5
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 5
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 4
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: LD_INT 4
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: LD_INT 4
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 4
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 5
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 5
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 5
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: PUSH
54687: LD_INT 3
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 4
54696: PUSH
54697: LD_INT 4
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: PUSH
54707: LD_INT 4
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 4
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 4
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 4
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 3
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 4
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 4
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 5
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: NEG
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54894: LD_ADDR_VAR 0 34
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 4
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 5
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 4
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 3
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 5
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 5
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 4
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 4
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 4
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 4
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 5
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 5
55126: PUSH
55127: LD_INT 5
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 4
55136: PUSH
55137: LD_INT 5
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 5
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 5
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 2
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: LD_INT 4
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 3
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 4
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: NEG
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 4
55279: NEG
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 4
55290: NEG
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 3
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 3
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 4
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 5
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 5
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 5
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: ST_TO_ADDR
// end ; end ;
55426: GO 55429
55428: POP
// case btype of b_depot , b_warehouse :
55429: LD_VAR 0 1
55433: PUSH
55434: LD_INT 0
55436: DOUBLE
55437: EQUAL
55438: IFTRUE 55448
55440: LD_INT 1
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55448
55446: GO 55649
55448: POP
// case nation of nation_american :
55449: LD_VAR 0 5
55453: PUSH
55454: LD_INT 1
55456: DOUBLE
55457: EQUAL
55458: IFTRUE 55462
55460: GO 55518
55462: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55463: LD_ADDR_VAR 0 9
55467: PUSH
55468: LD_VAR 0 11
55472: PUSH
55473: LD_VAR 0 12
55477: PUSH
55478: LD_VAR 0 13
55482: PUSH
55483: LD_VAR 0 14
55487: PUSH
55488: LD_VAR 0 15
55492: PUSH
55493: LD_VAR 0 16
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: PUSH
55506: LD_VAR 0 4
55510: PUSH
55511: LD_INT 1
55513: PLUS
55514: ARRAY
55515: ST_TO_ADDR
55516: GO 55647
55518: LD_INT 2
55520: DOUBLE
55521: EQUAL
55522: IFTRUE 55526
55524: GO 55582
55526: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55527: LD_ADDR_VAR 0 9
55531: PUSH
55532: LD_VAR 0 17
55536: PUSH
55537: LD_VAR 0 18
55541: PUSH
55542: LD_VAR 0 19
55546: PUSH
55547: LD_VAR 0 20
55551: PUSH
55552: LD_VAR 0 21
55556: PUSH
55557: LD_VAR 0 22
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: PUSH
55570: LD_VAR 0 4
55574: PUSH
55575: LD_INT 1
55577: PLUS
55578: ARRAY
55579: ST_TO_ADDR
55580: GO 55647
55582: LD_INT 3
55584: DOUBLE
55585: EQUAL
55586: IFTRUE 55590
55588: GO 55646
55590: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55591: LD_ADDR_VAR 0 9
55595: PUSH
55596: LD_VAR 0 23
55600: PUSH
55601: LD_VAR 0 24
55605: PUSH
55606: LD_VAR 0 25
55610: PUSH
55611: LD_VAR 0 26
55615: PUSH
55616: LD_VAR 0 27
55620: PUSH
55621: LD_VAR 0 28
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: PUSH
55634: LD_VAR 0 4
55638: PUSH
55639: LD_INT 1
55641: PLUS
55642: ARRAY
55643: ST_TO_ADDR
55644: GO 55647
55646: POP
55647: GO 56202
55649: LD_INT 2
55651: DOUBLE
55652: EQUAL
55653: IFTRUE 55663
55655: LD_INT 3
55657: DOUBLE
55658: EQUAL
55659: IFTRUE 55663
55661: GO 55719
55663: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55664: LD_ADDR_VAR 0 9
55668: PUSH
55669: LD_VAR 0 29
55673: PUSH
55674: LD_VAR 0 30
55678: PUSH
55679: LD_VAR 0 31
55683: PUSH
55684: LD_VAR 0 32
55688: PUSH
55689: LD_VAR 0 33
55693: PUSH
55694: LD_VAR 0 34
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: PUSH
55707: LD_VAR 0 4
55711: PUSH
55712: LD_INT 1
55714: PLUS
55715: ARRAY
55716: ST_TO_ADDR
55717: GO 56202
55719: LD_INT 16
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55781
55725: LD_INT 17
55727: DOUBLE
55728: EQUAL
55729: IFTRUE 55781
55731: LD_INT 18
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55781
55737: LD_INT 19
55739: DOUBLE
55740: EQUAL
55741: IFTRUE 55781
55743: LD_INT 22
55745: DOUBLE
55746: EQUAL
55747: IFTRUE 55781
55749: LD_INT 20
55751: DOUBLE
55752: EQUAL
55753: IFTRUE 55781
55755: LD_INT 21
55757: DOUBLE
55758: EQUAL
55759: IFTRUE 55781
55761: LD_INT 23
55763: DOUBLE
55764: EQUAL
55765: IFTRUE 55781
55767: LD_INT 24
55769: DOUBLE
55770: EQUAL
55771: IFTRUE 55781
55773: LD_INT 25
55775: DOUBLE
55776: EQUAL
55777: IFTRUE 55781
55779: GO 55837
55781: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55782: LD_ADDR_VAR 0 9
55786: PUSH
55787: LD_VAR 0 35
55791: PUSH
55792: LD_VAR 0 36
55796: PUSH
55797: LD_VAR 0 37
55801: PUSH
55802: LD_VAR 0 38
55806: PUSH
55807: LD_VAR 0 39
55811: PUSH
55812: LD_VAR 0 40
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: PUSH
55825: LD_VAR 0 4
55829: PUSH
55830: LD_INT 1
55832: PLUS
55833: ARRAY
55834: ST_TO_ADDR
55835: GO 56202
55837: LD_INT 6
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55893
55843: LD_INT 7
55845: DOUBLE
55846: EQUAL
55847: IFTRUE 55893
55849: LD_INT 8
55851: DOUBLE
55852: EQUAL
55853: IFTRUE 55893
55855: LD_INT 13
55857: DOUBLE
55858: EQUAL
55859: IFTRUE 55893
55861: LD_INT 12
55863: DOUBLE
55864: EQUAL
55865: IFTRUE 55893
55867: LD_INT 15
55869: DOUBLE
55870: EQUAL
55871: IFTRUE 55893
55873: LD_INT 11
55875: DOUBLE
55876: EQUAL
55877: IFTRUE 55893
55879: LD_INT 14
55881: DOUBLE
55882: EQUAL
55883: IFTRUE 55893
55885: LD_INT 10
55887: DOUBLE
55888: EQUAL
55889: IFTRUE 55893
55891: GO 55949
55893: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55894: LD_ADDR_VAR 0 9
55898: PUSH
55899: LD_VAR 0 41
55903: PUSH
55904: LD_VAR 0 42
55908: PUSH
55909: LD_VAR 0 43
55913: PUSH
55914: LD_VAR 0 44
55918: PUSH
55919: LD_VAR 0 45
55923: PUSH
55924: LD_VAR 0 46
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: PUSH
55937: LD_VAR 0 4
55941: PUSH
55942: LD_INT 1
55944: PLUS
55945: ARRAY
55946: ST_TO_ADDR
55947: GO 56202
55949: LD_INT 36
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55957
55955: GO 56013
55957: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55958: LD_ADDR_VAR 0 9
55962: PUSH
55963: LD_VAR 0 47
55967: PUSH
55968: LD_VAR 0 48
55972: PUSH
55973: LD_VAR 0 49
55977: PUSH
55978: LD_VAR 0 50
55982: PUSH
55983: LD_VAR 0 51
55987: PUSH
55988: LD_VAR 0 52
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: PUSH
56001: LD_VAR 0 4
56005: PUSH
56006: LD_INT 1
56008: PLUS
56009: ARRAY
56010: ST_TO_ADDR
56011: GO 56202
56013: LD_INT 4
56015: DOUBLE
56016: EQUAL
56017: IFTRUE 56039
56019: LD_INT 5
56021: DOUBLE
56022: EQUAL
56023: IFTRUE 56039
56025: LD_INT 34
56027: DOUBLE
56028: EQUAL
56029: IFTRUE 56039
56031: LD_INT 37
56033: DOUBLE
56034: EQUAL
56035: IFTRUE 56039
56037: GO 56095
56039: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56040: LD_ADDR_VAR 0 9
56044: PUSH
56045: LD_VAR 0 53
56049: PUSH
56050: LD_VAR 0 54
56054: PUSH
56055: LD_VAR 0 55
56059: PUSH
56060: LD_VAR 0 56
56064: PUSH
56065: LD_VAR 0 57
56069: PUSH
56070: LD_VAR 0 58
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: PUSH
56083: LD_VAR 0 4
56087: PUSH
56088: LD_INT 1
56090: PLUS
56091: ARRAY
56092: ST_TO_ADDR
56093: GO 56202
56095: LD_INT 31
56097: DOUBLE
56098: EQUAL
56099: IFTRUE 56145
56101: LD_INT 32
56103: DOUBLE
56104: EQUAL
56105: IFTRUE 56145
56107: LD_INT 33
56109: DOUBLE
56110: EQUAL
56111: IFTRUE 56145
56113: LD_INT 27
56115: DOUBLE
56116: EQUAL
56117: IFTRUE 56145
56119: LD_INT 26
56121: DOUBLE
56122: EQUAL
56123: IFTRUE 56145
56125: LD_INT 28
56127: DOUBLE
56128: EQUAL
56129: IFTRUE 56145
56131: LD_INT 29
56133: DOUBLE
56134: EQUAL
56135: IFTRUE 56145
56137: LD_INT 30
56139: DOUBLE
56140: EQUAL
56141: IFTRUE 56145
56143: GO 56201
56145: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56146: LD_ADDR_VAR 0 9
56150: PUSH
56151: LD_VAR 0 59
56155: PUSH
56156: LD_VAR 0 60
56160: PUSH
56161: LD_VAR 0 61
56165: PUSH
56166: LD_VAR 0 62
56170: PUSH
56171: LD_VAR 0 63
56175: PUSH
56176: LD_VAR 0 64
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: PUSH
56189: LD_VAR 0 4
56193: PUSH
56194: LD_INT 1
56196: PLUS
56197: ARRAY
56198: ST_TO_ADDR
56199: GO 56202
56201: POP
// temp_list2 = [ ] ;
56202: LD_ADDR_VAR 0 10
56206: PUSH
56207: EMPTY
56208: ST_TO_ADDR
// for i in temp_list do
56209: LD_ADDR_VAR 0 8
56213: PUSH
56214: LD_VAR 0 9
56218: PUSH
56219: FOR_IN
56220: IFFALSE 56272
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56222: LD_ADDR_VAR 0 10
56226: PUSH
56227: LD_VAR 0 10
56231: PUSH
56232: LD_VAR 0 8
56236: PUSH
56237: LD_INT 1
56239: ARRAY
56240: PUSH
56241: LD_VAR 0 2
56245: PLUS
56246: PUSH
56247: LD_VAR 0 8
56251: PUSH
56252: LD_INT 2
56254: ARRAY
56255: PUSH
56256: LD_VAR 0 3
56260: PLUS
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: ADD
56269: ST_TO_ADDR
56270: GO 56219
56272: POP
56273: POP
// result = temp_list2 ;
56274: LD_ADDR_VAR 0 7
56278: PUSH
56279: LD_VAR 0 10
56283: ST_TO_ADDR
// end ;
56284: LD_VAR 0 7
56288: RET
// export function EnemyInRange ( unit , dist ) ; begin
56289: LD_INT 0
56291: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56292: LD_ADDR_VAR 0 3
56296: PUSH
56297: LD_VAR 0 1
56301: PPUSH
56302: CALL_OW 255
56306: PPUSH
56307: LD_VAR 0 1
56311: PPUSH
56312: CALL_OW 250
56316: PPUSH
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 251
56326: PPUSH
56327: LD_VAR 0 2
56331: PPUSH
56332: CALL 29685 0 4
56336: PUSH
56337: LD_INT 4
56339: ARRAY
56340: ST_TO_ADDR
// end ;
56341: LD_VAR 0 3
56345: RET
// export function PlayerSeeMe ( unit ) ; begin
56346: LD_INT 0
56348: PPUSH
// result := See ( your_side , unit ) ;
56349: LD_ADDR_VAR 0 2
56353: PUSH
56354: LD_OWVAR 2
56358: PPUSH
56359: LD_VAR 0 1
56363: PPUSH
56364: CALL_OW 292
56368: ST_TO_ADDR
// end ;
56369: LD_VAR 0 2
56373: RET
// export function ReverseDir ( unit ) ; begin
56374: LD_INT 0
56376: PPUSH
// if not unit then
56377: LD_VAR 0 1
56381: NOT
56382: IFFALSE 56386
// exit ;
56384: GO 56409
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56386: LD_ADDR_VAR 0 2
56390: PUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 254
56400: PUSH
56401: LD_INT 3
56403: PLUS
56404: PUSH
56405: LD_INT 6
56407: MOD
56408: ST_TO_ADDR
// end ;
56409: LD_VAR 0 2
56413: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
56418: PPUSH
56419: PPUSH
56420: PPUSH
// if not hexes then
56421: LD_VAR 0 2
56425: NOT
56426: IFFALSE 56430
// exit ;
56428: GO 56578
// dist := 9999 ;
56430: LD_ADDR_VAR 0 5
56434: PUSH
56435: LD_INT 9999
56437: ST_TO_ADDR
// for i = 1 to hexes do
56438: LD_ADDR_VAR 0 4
56442: PUSH
56443: DOUBLE
56444: LD_INT 1
56446: DEC
56447: ST_TO_ADDR
56448: LD_VAR 0 2
56452: PUSH
56453: FOR_TO
56454: IFFALSE 56566
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56456: LD_VAR 0 1
56460: PPUSH
56461: LD_VAR 0 2
56465: PUSH
56466: LD_VAR 0 4
56470: ARRAY
56471: PUSH
56472: LD_INT 1
56474: ARRAY
56475: PPUSH
56476: LD_VAR 0 2
56480: PUSH
56481: LD_VAR 0 4
56485: ARRAY
56486: PUSH
56487: LD_INT 2
56489: ARRAY
56490: PPUSH
56491: CALL_OW 297
56495: PUSH
56496: LD_VAR 0 5
56500: LESS
56501: IFFALSE 56564
// begin hex := hexes [ i ] ;
56503: LD_ADDR_VAR 0 7
56507: PUSH
56508: LD_VAR 0 2
56512: PUSH
56513: LD_VAR 0 4
56517: ARRAY
56518: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56519: LD_ADDR_VAR 0 5
56523: PUSH
56524: LD_VAR 0 1
56528: PPUSH
56529: LD_VAR 0 2
56533: PUSH
56534: LD_VAR 0 4
56538: ARRAY
56539: PUSH
56540: LD_INT 1
56542: ARRAY
56543: PPUSH
56544: LD_VAR 0 2
56548: PUSH
56549: LD_VAR 0 4
56553: ARRAY
56554: PUSH
56555: LD_INT 2
56557: ARRAY
56558: PPUSH
56559: CALL_OW 297
56563: ST_TO_ADDR
// end ; end ;
56564: GO 56453
56566: POP
56567: POP
// result := hex ;
56568: LD_ADDR_VAR 0 3
56572: PUSH
56573: LD_VAR 0 7
56577: ST_TO_ADDR
// end ;
56578: LD_VAR 0 3
56582: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56583: LD_INT 0
56585: PPUSH
56586: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56587: LD_VAR 0 1
56591: NOT
56592: PUSH
56593: LD_VAR 0 1
56597: PUSH
56598: LD_INT 21
56600: PUSH
56601: LD_INT 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 23
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PPUSH
56622: CALL_OW 69
56626: IN
56627: NOT
56628: OR
56629: IFFALSE 56633
// exit ;
56631: GO 56680
// for i = 1 to 3 do
56633: LD_ADDR_VAR 0 3
56637: PUSH
56638: DOUBLE
56639: LD_INT 1
56641: DEC
56642: ST_TO_ADDR
56643: LD_INT 3
56645: PUSH
56646: FOR_TO
56647: IFFALSE 56678
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56649: LD_VAR 0 1
56653: PPUSH
56654: CALL_OW 250
56658: PPUSH
56659: LD_VAR 0 1
56663: PPUSH
56664: CALL_OW 251
56668: PPUSH
56669: LD_INT 1
56671: PPUSH
56672: CALL_OW 453
56676: GO 56646
56678: POP
56679: POP
// end ;
56680: LD_VAR 0 2
56684: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56685: LD_INT 0
56687: PPUSH
56688: PPUSH
56689: PPUSH
56690: PPUSH
56691: PPUSH
56692: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56693: LD_VAR 0 1
56697: NOT
56698: PUSH
56699: LD_VAR 0 2
56703: NOT
56704: OR
56705: PUSH
56706: LD_VAR 0 1
56710: PPUSH
56711: CALL_OW 314
56715: OR
56716: IFFALSE 56720
// exit ;
56718: GO 57161
// x := GetX ( enemy_unit ) ;
56720: LD_ADDR_VAR 0 7
56724: PUSH
56725: LD_VAR 0 2
56729: PPUSH
56730: CALL_OW 250
56734: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56735: LD_ADDR_VAR 0 8
56739: PUSH
56740: LD_VAR 0 2
56744: PPUSH
56745: CALL_OW 251
56749: ST_TO_ADDR
// if not x or not y then
56750: LD_VAR 0 7
56754: NOT
56755: PUSH
56756: LD_VAR 0 8
56760: NOT
56761: OR
56762: IFFALSE 56766
// exit ;
56764: GO 57161
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56766: LD_ADDR_VAR 0 6
56770: PUSH
56771: LD_VAR 0 7
56775: PPUSH
56776: LD_INT 0
56778: PPUSH
56779: LD_INT 4
56781: PPUSH
56782: CALL_OW 272
56786: PUSH
56787: LD_VAR 0 8
56791: PPUSH
56792: LD_INT 0
56794: PPUSH
56795: LD_INT 4
56797: PPUSH
56798: CALL_OW 273
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_VAR 0 7
56811: PPUSH
56812: LD_INT 1
56814: PPUSH
56815: LD_INT 4
56817: PPUSH
56818: CALL_OW 272
56822: PUSH
56823: LD_VAR 0 8
56827: PPUSH
56828: LD_INT 1
56830: PPUSH
56831: LD_INT 4
56833: PPUSH
56834: CALL_OW 273
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_VAR 0 7
56847: PPUSH
56848: LD_INT 2
56850: PPUSH
56851: LD_INT 4
56853: PPUSH
56854: CALL_OW 272
56858: PUSH
56859: LD_VAR 0 8
56863: PPUSH
56864: LD_INT 2
56866: PPUSH
56867: LD_INT 4
56869: PPUSH
56870: CALL_OW 273
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_VAR 0 7
56883: PPUSH
56884: LD_INT 3
56886: PPUSH
56887: LD_INT 4
56889: PPUSH
56890: CALL_OW 272
56894: PUSH
56895: LD_VAR 0 8
56899: PPUSH
56900: LD_INT 3
56902: PPUSH
56903: LD_INT 4
56905: PPUSH
56906: CALL_OW 273
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_VAR 0 7
56919: PPUSH
56920: LD_INT 4
56922: PPUSH
56923: LD_INT 4
56925: PPUSH
56926: CALL_OW 272
56930: PUSH
56931: LD_VAR 0 8
56935: PPUSH
56936: LD_INT 4
56938: PPUSH
56939: LD_INT 4
56941: PPUSH
56942: CALL_OW 273
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_VAR 0 7
56955: PPUSH
56956: LD_INT 5
56958: PPUSH
56959: LD_INT 4
56961: PPUSH
56962: CALL_OW 272
56966: PUSH
56967: LD_VAR 0 8
56971: PPUSH
56972: LD_INT 5
56974: PPUSH
56975: LD_INT 4
56977: PPUSH
56978: CALL_OW 273
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// for i = tmp downto 1 do
56995: LD_ADDR_VAR 0 4
56999: PUSH
57000: DOUBLE
57001: LD_VAR 0 6
57005: INC
57006: ST_TO_ADDR
57007: LD_INT 1
57009: PUSH
57010: FOR_DOWNTO
57011: IFFALSE 57112
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57013: LD_VAR 0 6
57017: PUSH
57018: LD_VAR 0 4
57022: ARRAY
57023: PUSH
57024: LD_INT 1
57026: ARRAY
57027: PPUSH
57028: LD_VAR 0 6
57032: PUSH
57033: LD_VAR 0 4
57037: ARRAY
57038: PUSH
57039: LD_INT 2
57041: ARRAY
57042: PPUSH
57043: CALL_OW 488
57047: NOT
57048: PUSH
57049: LD_VAR 0 6
57053: PUSH
57054: LD_VAR 0 4
57058: ARRAY
57059: PUSH
57060: LD_INT 1
57062: ARRAY
57063: PPUSH
57064: LD_VAR 0 6
57068: PUSH
57069: LD_VAR 0 4
57073: ARRAY
57074: PUSH
57075: LD_INT 2
57077: ARRAY
57078: PPUSH
57079: CALL_OW 428
57083: PUSH
57084: LD_INT 0
57086: NONEQUAL
57087: OR
57088: IFFALSE 57110
// tmp := Delete ( tmp , i ) ;
57090: LD_ADDR_VAR 0 6
57094: PUSH
57095: LD_VAR 0 6
57099: PPUSH
57100: LD_VAR 0 4
57104: PPUSH
57105: CALL_OW 3
57109: ST_TO_ADDR
57110: GO 57010
57112: POP
57113: POP
// j := GetClosestHex ( unit , tmp ) ;
57114: LD_ADDR_VAR 0 5
57118: PUSH
57119: LD_VAR 0 1
57123: PPUSH
57124: LD_VAR 0 6
57128: PPUSH
57129: CALL 56414 0 2
57133: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57134: LD_VAR 0 1
57138: PPUSH
57139: LD_VAR 0 5
57143: PUSH
57144: LD_INT 1
57146: ARRAY
57147: PPUSH
57148: LD_VAR 0 5
57152: PUSH
57153: LD_INT 2
57155: ARRAY
57156: PPUSH
57157: CALL_OW 111
// end ;
57161: LD_VAR 0 3
57165: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57166: LD_INT 0
57168: PPUSH
57169: PPUSH
57170: PPUSH
// uc_side = 0 ;
57171: LD_ADDR_OWVAR 20
57175: PUSH
57176: LD_INT 0
57178: ST_TO_ADDR
// uc_nation = 0 ;
57179: LD_ADDR_OWVAR 21
57183: PUSH
57184: LD_INT 0
57186: ST_TO_ADDR
// InitHc_All ( ) ;
57187: CALL_OW 584
// InitVc ;
57191: CALL_OW 20
// if mastodonts then
57195: LD_VAR 0 6
57199: IFFALSE 57266
// for i = 1 to mastodonts do
57201: LD_ADDR_VAR 0 11
57205: PUSH
57206: DOUBLE
57207: LD_INT 1
57209: DEC
57210: ST_TO_ADDR
57211: LD_VAR 0 6
57215: PUSH
57216: FOR_TO
57217: IFFALSE 57264
// begin vc_chassis := 31 ;
57219: LD_ADDR_OWVAR 37
57223: PUSH
57224: LD_INT 31
57226: ST_TO_ADDR
// vc_control := control_rider ;
57227: LD_ADDR_OWVAR 38
57231: PUSH
57232: LD_INT 4
57234: ST_TO_ADDR
// animal := CreateVehicle ;
57235: LD_ADDR_VAR 0 12
57239: PUSH
57240: CALL_OW 45
57244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57245: LD_VAR 0 12
57249: PPUSH
57250: LD_VAR 0 8
57254: PPUSH
57255: LD_INT 0
57257: PPUSH
57258: CALL 59454 0 3
// end ;
57262: GO 57216
57264: POP
57265: POP
// if horses then
57266: LD_VAR 0 5
57270: IFFALSE 57337
// for i = 1 to horses do
57272: LD_ADDR_VAR 0 11
57276: PUSH
57277: DOUBLE
57278: LD_INT 1
57280: DEC
57281: ST_TO_ADDR
57282: LD_VAR 0 5
57286: PUSH
57287: FOR_TO
57288: IFFALSE 57335
// begin hc_class := 21 ;
57290: LD_ADDR_OWVAR 28
57294: PUSH
57295: LD_INT 21
57297: ST_TO_ADDR
// hc_gallery :=  ;
57298: LD_ADDR_OWVAR 33
57302: PUSH
57303: LD_STRING 
57305: ST_TO_ADDR
// animal := CreateHuman ;
57306: LD_ADDR_VAR 0 12
57310: PUSH
57311: CALL_OW 44
57315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57316: LD_VAR 0 12
57320: PPUSH
57321: LD_VAR 0 8
57325: PPUSH
57326: LD_INT 0
57328: PPUSH
57329: CALL 59454 0 3
// end ;
57333: GO 57287
57335: POP
57336: POP
// if birds then
57337: LD_VAR 0 1
57341: IFFALSE 57408
// for i = 1 to birds do
57343: LD_ADDR_VAR 0 11
57347: PUSH
57348: DOUBLE
57349: LD_INT 1
57351: DEC
57352: ST_TO_ADDR
57353: LD_VAR 0 1
57357: PUSH
57358: FOR_TO
57359: IFFALSE 57406
// begin hc_class = 18 ;
57361: LD_ADDR_OWVAR 28
57365: PUSH
57366: LD_INT 18
57368: ST_TO_ADDR
// hc_gallery =  ;
57369: LD_ADDR_OWVAR 33
57373: PUSH
57374: LD_STRING 
57376: ST_TO_ADDR
// animal := CreateHuman ;
57377: LD_ADDR_VAR 0 12
57381: PUSH
57382: CALL_OW 44
57386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57387: LD_VAR 0 12
57391: PPUSH
57392: LD_VAR 0 8
57396: PPUSH
57397: LD_INT 0
57399: PPUSH
57400: CALL 59454 0 3
// end ;
57404: GO 57358
57406: POP
57407: POP
// if tigers then
57408: LD_VAR 0 2
57412: IFFALSE 57496
// for i = 1 to tigers do
57414: LD_ADDR_VAR 0 11
57418: PUSH
57419: DOUBLE
57420: LD_INT 1
57422: DEC
57423: ST_TO_ADDR
57424: LD_VAR 0 2
57428: PUSH
57429: FOR_TO
57430: IFFALSE 57494
// begin hc_class = class_tiger ;
57432: LD_ADDR_OWVAR 28
57436: PUSH
57437: LD_INT 14
57439: ST_TO_ADDR
// hc_gallery =  ;
57440: LD_ADDR_OWVAR 33
57444: PUSH
57445: LD_STRING 
57447: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57448: LD_ADDR_OWVAR 35
57452: PUSH
57453: LD_INT 7
57455: NEG
57456: PPUSH
57457: LD_INT 7
57459: PPUSH
57460: CALL_OW 12
57464: ST_TO_ADDR
// animal := CreateHuman ;
57465: LD_ADDR_VAR 0 12
57469: PUSH
57470: CALL_OW 44
57474: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57475: LD_VAR 0 12
57479: PPUSH
57480: LD_VAR 0 8
57484: PPUSH
57485: LD_INT 0
57487: PPUSH
57488: CALL 59454 0 3
// end ;
57492: GO 57429
57494: POP
57495: POP
// if apemans then
57496: LD_VAR 0 3
57500: IFFALSE 57623
// for i = 1 to apemans do
57502: LD_ADDR_VAR 0 11
57506: PUSH
57507: DOUBLE
57508: LD_INT 1
57510: DEC
57511: ST_TO_ADDR
57512: LD_VAR 0 3
57516: PUSH
57517: FOR_TO
57518: IFFALSE 57621
// begin hc_class = class_apeman ;
57520: LD_ADDR_OWVAR 28
57524: PUSH
57525: LD_INT 12
57527: ST_TO_ADDR
// hc_gallery =  ;
57528: LD_ADDR_OWVAR 33
57532: PUSH
57533: LD_STRING 
57535: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57536: LD_ADDR_OWVAR 35
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PPUSH
57545: LD_INT 2
57547: PPUSH
57548: CALL_OW 12
57552: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57553: LD_ADDR_OWVAR 31
57557: PUSH
57558: LD_INT 1
57560: PPUSH
57561: LD_INT 3
57563: PPUSH
57564: CALL_OW 12
57568: PUSH
57569: LD_INT 1
57571: PPUSH
57572: LD_INT 3
57574: PPUSH
57575: CALL_OW 12
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: ST_TO_ADDR
// animal := CreateHuman ;
57592: LD_ADDR_VAR 0 12
57596: PUSH
57597: CALL_OW 44
57601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57602: LD_VAR 0 12
57606: PPUSH
57607: LD_VAR 0 8
57611: PPUSH
57612: LD_INT 0
57614: PPUSH
57615: CALL 59454 0 3
// end ;
57619: GO 57517
57621: POP
57622: POP
// if enchidnas then
57623: LD_VAR 0 4
57627: IFFALSE 57694
// for i = 1 to enchidnas do
57629: LD_ADDR_VAR 0 11
57633: PUSH
57634: DOUBLE
57635: LD_INT 1
57637: DEC
57638: ST_TO_ADDR
57639: LD_VAR 0 4
57643: PUSH
57644: FOR_TO
57645: IFFALSE 57692
// begin hc_class = 13 ;
57647: LD_ADDR_OWVAR 28
57651: PUSH
57652: LD_INT 13
57654: ST_TO_ADDR
// hc_gallery =  ;
57655: LD_ADDR_OWVAR 33
57659: PUSH
57660: LD_STRING 
57662: ST_TO_ADDR
// animal := CreateHuman ;
57663: LD_ADDR_VAR 0 12
57667: PUSH
57668: CALL_OW 44
57672: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57673: LD_VAR 0 12
57677: PPUSH
57678: LD_VAR 0 8
57682: PPUSH
57683: LD_INT 0
57685: PPUSH
57686: CALL 59454 0 3
// end ;
57690: GO 57644
57692: POP
57693: POP
// if fishes then
57694: LD_VAR 0 7
57698: IFFALSE 57765
// for i = 1 to fishes do
57700: LD_ADDR_VAR 0 11
57704: PUSH
57705: DOUBLE
57706: LD_INT 1
57708: DEC
57709: ST_TO_ADDR
57710: LD_VAR 0 7
57714: PUSH
57715: FOR_TO
57716: IFFALSE 57763
// begin hc_class = 20 ;
57718: LD_ADDR_OWVAR 28
57722: PUSH
57723: LD_INT 20
57725: ST_TO_ADDR
// hc_gallery =  ;
57726: LD_ADDR_OWVAR 33
57730: PUSH
57731: LD_STRING 
57733: ST_TO_ADDR
// animal := CreateHuman ;
57734: LD_ADDR_VAR 0 12
57738: PUSH
57739: CALL_OW 44
57743: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57744: LD_VAR 0 12
57748: PPUSH
57749: LD_VAR 0 9
57753: PPUSH
57754: LD_INT 0
57756: PPUSH
57757: CALL 59454 0 3
// end ;
57761: GO 57715
57763: POP
57764: POP
// end ;
57765: LD_VAR 0 10
57769: RET
// export function WantHeal ( sci , unit ) ; begin
57770: LD_INT 0
57772: PPUSH
// if GetTaskList ( sci ) > 0 then
57773: LD_VAR 0 1
57777: PPUSH
57778: CALL_OW 437
57782: PUSH
57783: LD_INT 0
57785: GREATER
57786: IFFALSE 57856
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57788: LD_VAR 0 1
57792: PPUSH
57793: CALL_OW 437
57797: PUSH
57798: LD_INT 1
57800: ARRAY
57801: PUSH
57802: LD_INT 1
57804: ARRAY
57805: PUSH
57806: LD_STRING l
57808: EQUAL
57809: PUSH
57810: LD_VAR 0 1
57814: PPUSH
57815: CALL_OW 437
57819: PUSH
57820: LD_INT 1
57822: ARRAY
57823: PUSH
57824: LD_INT 4
57826: ARRAY
57827: PUSH
57828: LD_VAR 0 2
57832: EQUAL
57833: AND
57834: IFFALSE 57846
// result := true else
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: LD_INT 1
57843: ST_TO_ADDR
57844: GO 57854
// result := false ;
57846: LD_ADDR_VAR 0 3
57850: PUSH
57851: LD_INT 0
57853: ST_TO_ADDR
// end else
57854: GO 57864
// result := false ;
57856: LD_ADDR_VAR 0 3
57860: PUSH
57861: LD_INT 0
57863: ST_TO_ADDR
// end ;
57864: LD_VAR 0 3
57868: RET
// export function HealTarget ( sci ) ; begin
57869: LD_INT 0
57871: PPUSH
// if not sci then
57872: LD_VAR 0 1
57876: NOT
57877: IFFALSE 57881
// exit ;
57879: GO 57946
// result := 0 ;
57881: LD_ADDR_VAR 0 2
57885: PUSH
57886: LD_INT 0
57888: ST_TO_ADDR
// if GetTaskList ( sci ) then
57889: LD_VAR 0 1
57893: PPUSH
57894: CALL_OW 437
57898: IFFALSE 57946
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57900: LD_VAR 0 1
57904: PPUSH
57905: CALL_OW 437
57909: PUSH
57910: LD_INT 1
57912: ARRAY
57913: PUSH
57914: LD_INT 1
57916: ARRAY
57917: PUSH
57918: LD_STRING l
57920: EQUAL
57921: IFFALSE 57946
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57923: LD_ADDR_VAR 0 2
57927: PUSH
57928: LD_VAR 0 1
57932: PPUSH
57933: CALL_OW 437
57937: PUSH
57938: LD_INT 1
57940: ARRAY
57941: PUSH
57942: LD_INT 4
57944: ARRAY
57945: ST_TO_ADDR
// end ;
57946: LD_VAR 0 2
57950: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57951: LD_INT 0
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
// if not base_units then
57957: LD_VAR 0 1
57961: NOT
57962: IFFALSE 57966
// exit ;
57964: GO 58053
// result := false ;
57966: LD_ADDR_VAR 0 2
57970: PUSH
57971: LD_INT 0
57973: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57974: LD_ADDR_VAR 0 5
57978: PUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: LD_INT 21
57986: PUSH
57987: LD_INT 3
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PPUSH
57994: CALL_OW 72
57998: ST_TO_ADDR
// if not tmp then
57999: LD_VAR 0 5
58003: NOT
58004: IFFALSE 58008
// exit ;
58006: GO 58053
// for i in tmp do
58008: LD_ADDR_VAR 0 3
58012: PUSH
58013: LD_VAR 0 5
58017: PUSH
58018: FOR_IN
58019: IFFALSE 58051
// begin result := EnemyInRange ( i , 22 ) ;
58021: LD_ADDR_VAR 0 2
58025: PUSH
58026: LD_VAR 0 3
58030: PPUSH
58031: LD_INT 22
58033: PPUSH
58034: CALL 56289 0 2
58038: ST_TO_ADDR
// if result then
58039: LD_VAR 0 2
58043: IFFALSE 58049
// exit ;
58045: POP
58046: POP
58047: GO 58053
// end ;
58049: GO 58018
58051: POP
58052: POP
// end ;
58053: LD_VAR 0 2
58057: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58058: LD_INT 0
58060: PPUSH
58061: PPUSH
// if not units then
58062: LD_VAR 0 1
58066: NOT
58067: IFFALSE 58071
// exit ;
58069: GO 58141
// result := [ ] ;
58071: LD_ADDR_VAR 0 3
58075: PUSH
58076: EMPTY
58077: ST_TO_ADDR
// for i in units do
58078: LD_ADDR_VAR 0 4
58082: PUSH
58083: LD_VAR 0 1
58087: PUSH
58088: FOR_IN
58089: IFFALSE 58139
// if GetTag ( i ) = tag then
58091: LD_VAR 0 4
58095: PPUSH
58096: CALL_OW 110
58100: PUSH
58101: LD_VAR 0 2
58105: EQUAL
58106: IFFALSE 58137
// result := Replace ( result , result + 1 , i ) ;
58108: LD_ADDR_VAR 0 3
58112: PUSH
58113: LD_VAR 0 3
58117: PPUSH
58118: LD_VAR 0 3
58122: PUSH
58123: LD_INT 1
58125: PLUS
58126: PPUSH
58127: LD_VAR 0 4
58131: PPUSH
58132: CALL_OW 1
58136: ST_TO_ADDR
58137: GO 58088
58139: POP
58140: POP
// end ;
58141: LD_VAR 0 3
58145: RET
// export function IsDriver ( un ) ; begin
58146: LD_INT 0
58148: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58149: LD_ADDR_VAR 0 2
58153: PUSH
58154: LD_VAR 0 1
58158: PUSH
58159: LD_INT 55
58161: PUSH
58162: EMPTY
58163: LIST
58164: PPUSH
58165: CALL_OW 69
58169: IN
58170: ST_TO_ADDR
// end ;
58171: LD_VAR 0 2
58175: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58176: LD_INT 0
58178: PPUSH
58179: PPUSH
// list := [ ] ;
58180: LD_ADDR_VAR 0 5
58184: PUSH
58185: EMPTY
58186: ST_TO_ADDR
// case d of 0 :
58187: LD_VAR 0 3
58191: PUSH
58192: LD_INT 0
58194: DOUBLE
58195: EQUAL
58196: IFTRUE 58200
58198: GO 58333
58200: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58201: LD_ADDR_VAR 0 5
58205: PUSH
58206: LD_VAR 0 1
58210: PUSH
58211: LD_INT 4
58213: MINUS
58214: PUSH
58215: LD_VAR 0 2
58219: PUSH
58220: LD_INT 4
58222: MINUS
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: LIST
58231: PUSH
58232: LD_VAR 0 1
58236: PUSH
58237: LD_INT 3
58239: MINUS
58240: PUSH
58241: LD_VAR 0 2
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: PUSH
58254: LD_VAR 0 1
58258: PUSH
58259: LD_INT 4
58261: PLUS
58262: PUSH
58263: LD_VAR 0 2
58267: PUSH
58268: LD_INT 4
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: PUSH
58276: LD_VAR 0 1
58280: PUSH
58281: LD_INT 3
58283: PLUS
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_INT 3
58292: PLUS
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: PUSH
58302: LD_VAR 0 1
58306: PUSH
58307: LD_VAR 0 2
58311: PUSH
58312: LD_INT 4
58314: PLUS
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: ST_TO_ADDR
// end ; 1 :
58331: GO 59031
58333: LD_INT 1
58335: DOUBLE
58336: EQUAL
58337: IFTRUE 58341
58339: GO 58474
58341: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58342: LD_ADDR_VAR 0 5
58346: PUSH
58347: LD_VAR 0 1
58351: PUSH
58352: LD_VAR 0 2
58356: PUSH
58357: LD_INT 4
58359: MINUS
58360: PUSH
58361: LD_INT 3
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: PUSH
58369: LD_VAR 0 1
58373: PUSH
58374: LD_INT 3
58376: MINUS
58377: PUSH
58378: LD_VAR 0 2
58382: PUSH
58383: LD_INT 3
58385: MINUS
58386: PUSH
58387: LD_INT 2
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: PUSH
58395: LD_VAR 0 1
58399: PUSH
58400: LD_INT 4
58402: MINUS
58403: PUSH
58404: LD_VAR 0 2
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: LIST
58416: PUSH
58417: LD_VAR 0 1
58421: PUSH
58422: LD_VAR 0 2
58426: PUSH
58427: LD_INT 3
58429: PLUS
58430: PUSH
58431: LD_INT 0
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: LIST
58438: PUSH
58439: LD_VAR 0 1
58443: PUSH
58444: LD_INT 4
58446: PLUS
58447: PUSH
58448: LD_VAR 0 2
58452: PUSH
58453: LD_INT 4
58455: PLUS
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: ST_TO_ADDR
// end ; 2 :
58472: GO 59031
58474: LD_INT 2
58476: DOUBLE
58477: EQUAL
58478: IFTRUE 58482
58480: GO 58611
58482: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58483: LD_ADDR_VAR 0 5
58487: PUSH
58488: LD_VAR 0 1
58492: PUSH
58493: LD_VAR 0 2
58497: PUSH
58498: LD_INT 3
58500: MINUS
58501: PUSH
58502: LD_INT 3
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: LIST
58509: PUSH
58510: LD_VAR 0 1
58514: PUSH
58515: LD_INT 4
58517: PLUS
58518: PUSH
58519: LD_VAR 0 2
58523: PUSH
58524: LD_INT 4
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: PUSH
58532: LD_VAR 0 1
58536: PUSH
58537: LD_VAR 0 2
58541: PUSH
58542: LD_INT 4
58544: PLUS
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: LIST
58553: PUSH
58554: LD_VAR 0 1
58558: PUSH
58559: LD_INT 3
58561: MINUS
58562: PUSH
58563: LD_VAR 0 2
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: PUSH
58576: LD_VAR 0 1
58580: PUSH
58581: LD_INT 4
58583: MINUS
58584: PUSH
58585: LD_VAR 0 2
58589: PUSH
58590: LD_INT 4
58592: MINUS
58593: PUSH
58594: LD_INT 2
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: ST_TO_ADDR
// end ; 3 :
58609: GO 59031
58611: LD_INT 3
58613: DOUBLE
58614: EQUAL
58615: IFTRUE 58619
58617: GO 58752
58619: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58620: LD_ADDR_VAR 0 5
58624: PUSH
58625: LD_VAR 0 1
58629: PUSH
58630: LD_INT 3
58632: PLUS
58633: PUSH
58634: LD_VAR 0 2
58638: PUSH
58639: LD_INT 4
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: PUSH
58647: LD_VAR 0 1
58651: PUSH
58652: LD_INT 4
58654: PLUS
58655: PUSH
58656: LD_VAR 0 2
58660: PUSH
58661: LD_INT 4
58663: PLUS
58664: PUSH
58665: LD_INT 5
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: PUSH
58673: LD_VAR 0 1
58677: PUSH
58678: LD_INT 4
58680: MINUS
58681: PUSH
58682: LD_VAR 0 2
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: PUSH
58695: LD_VAR 0 1
58699: PUSH
58700: LD_VAR 0 2
58704: PUSH
58705: LD_INT 4
58707: MINUS
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: PUSH
58717: LD_VAR 0 1
58721: PUSH
58722: LD_INT 3
58724: MINUS
58725: PUSH
58726: LD_VAR 0 2
58730: PUSH
58731: LD_INT 3
58733: MINUS
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: ST_TO_ADDR
// end ; 4 :
58750: GO 59031
58752: LD_INT 4
58754: DOUBLE
58755: EQUAL
58756: IFTRUE 58760
58758: GO 58893
58760: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58761: LD_ADDR_VAR 0 5
58765: PUSH
58766: LD_VAR 0 1
58770: PUSH
58771: LD_VAR 0 2
58775: PUSH
58776: LD_INT 4
58778: PLUS
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: PUSH
58788: LD_VAR 0 1
58792: PUSH
58793: LD_INT 3
58795: PLUS
58796: PUSH
58797: LD_VAR 0 2
58801: PUSH
58802: LD_INT 3
58804: PLUS
58805: PUSH
58806: LD_INT 5
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: LIST
58813: PUSH
58814: LD_VAR 0 1
58818: PUSH
58819: LD_INT 4
58821: PLUS
58822: PUSH
58823: LD_VAR 0 2
58827: PUSH
58828: LD_INT 4
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: PUSH
58836: LD_VAR 0 1
58840: PUSH
58841: LD_VAR 0 2
58845: PUSH
58846: LD_INT 3
58848: MINUS
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: PUSH
58858: LD_VAR 0 1
58862: PUSH
58863: LD_INT 4
58865: MINUS
58866: PUSH
58867: LD_VAR 0 2
58871: PUSH
58872: LD_INT 4
58874: MINUS
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// end ; 5 :
58891: GO 59031
58893: LD_INT 5
58895: DOUBLE
58896: EQUAL
58897: IFTRUE 58901
58899: GO 59030
58901: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58902: LD_ADDR_VAR 0 5
58906: PUSH
58907: LD_VAR 0 1
58911: PUSH
58912: LD_INT 4
58914: MINUS
58915: PUSH
58916: LD_VAR 0 2
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: PUSH
58929: LD_VAR 0 1
58933: PUSH
58934: LD_VAR 0 2
58938: PUSH
58939: LD_INT 4
58941: MINUS
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: PUSH
58951: LD_VAR 0 1
58955: PUSH
58956: LD_INT 4
58958: PLUS
58959: PUSH
58960: LD_VAR 0 2
58964: PUSH
58965: LD_INT 4
58967: PLUS
58968: PUSH
58969: LD_INT 5
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: LIST
58976: PUSH
58977: LD_VAR 0 1
58981: PUSH
58982: LD_INT 3
58984: PLUS
58985: PUSH
58986: LD_VAR 0 2
58990: PUSH
58991: LD_INT 4
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: PUSH
58999: LD_VAR 0 1
59003: PUSH
59004: LD_VAR 0 2
59008: PUSH
59009: LD_INT 3
59011: PLUS
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: ST_TO_ADDR
// end ; end ;
59028: GO 59031
59030: POP
// result := list ;
59031: LD_ADDR_VAR 0 4
59035: PUSH
59036: LD_VAR 0 5
59040: ST_TO_ADDR
// end ;
59041: LD_VAR 0 4
59045: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59046: LD_INT 0
59048: PPUSH
59049: PPUSH
59050: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59051: LD_VAR 0 1
59055: NOT
59056: PUSH
59057: LD_VAR 0 2
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 4
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: IN
59080: NOT
59081: OR
59082: IFFALSE 59086
// exit ;
59084: GO 59178
// tmp := [ ] ;
59086: LD_ADDR_VAR 0 5
59090: PUSH
59091: EMPTY
59092: ST_TO_ADDR
// for i in units do
59093: LD_ADDR_VAR 0 4
59097: PUSH
59098: LD_VAR 0 1
59102: PUSH
59103: FOR_IN
59104: IFFALSE 59147
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59106: LD_ADDR_VAR 0 5
59110: PUSH
59111: LD_VAR 0 5
59115: PPUSH
59116: LD_VAR 0 5
59120: PUSH
59121: LD_INT 1
59123: PLUS
59124: PPUSH
59125: LD_VAR 0 4
59129: PPUSH
59130: LD_VAR 0 2
59134: PPUSH
59135: CALL_OW 259
59139: PPUSH
59140: CALL_OW 2
59144: ST_TO_ADDR
59145: GO 59103
59147: POP
59148: POP
// if not tmp then
59149: LD_VAR 0 5
59153: NOT
59154: IFFALSE 59158
// exit ;
59156: GO 59178
// result := SortListByListDesc ( units , tmp ) ;
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_VAR 0 1
59167: PPUSH
59168: LD_VAR 0 5
59172: PPUSH
59173: CALL_OW 77
59177: ST_TO_ADDR
// end ;
59178: LD_VAR 0 3
59182: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59183: LD_INT 0
59185: PPUSH
59186: PPUSH
59187: PPUSH
// result := false ;
59188: LD_ADDR_VAR 0 3
59192: PUSH
59193: LD_INT 0
59195: ST_TO_ADDR
// x := GetX ( building ) ;
59196: LD_ADDR_VAR 0 4
59200: PUSH
59201: LD_VAR 0 2
59205: PPUSH
59206: CALL_OW 250
59210: ST_TO_ADDR
// y := GetY ( building ) ;
59211: LD_ADDR_VAR 0 5
59215: PUSH
59216: LD_VAR 0 2
59220: PPUSH
59221: CALL_OW 251
59225: ST_TO_ADDR
// if not building or not x or not y then
59226: LD_VAR 0 2
59230: NOT
59231: PUSH
59232: LD_VAR 0 4
59236: NOT
59237: OR
59238: PUSH
59239: LD_VAR 0 5
59243: NOT
59244: OR
59245: IFFALSE 59249
// exit ;
59247: GO 59341
// if GetTaskList ( unit ) then
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 437
59258: IFFALSE 59341
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59260: LD_STRING e
59262: PUSH
59263: LD_VAR 0 1
59267: PPUSH
59268: CALL_OW 437
59272: PUSH
59273: LD_INT 1
59275: ARRAY
59276: PUSH
59277: LD_INT 1
59279: ARRAY
59280: EQUAL
59281: PUSH
59282: LD_VAR 0 4
59286: PUSH
59287: LD_VAR 0 1
59291: PPUSH
59292: CALL_OW 437
59296: PUSH
59297: LD_INT 1
59299: ARRAY
59300: PUSH
59301: LD_INT 2
59303: ARRAY
59304: EQUAL
59305: AND
59306: PUSH
59307: LD_VAR 0 5
59311: PUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 437
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PUSH
59326: LD_INT 3
59328: ARRAY
59329: EQUAL
59330: AND
59331: IFFALSE 59341
// result := true end ;
59333: LD_ADDR_VAR 0 3
59337: PUSH
59338: LD_INT 1
59340: ST_TO_ADDR
// end ;
59341: LD_VAR 0 3
59345: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59346: LD_INT 0
59348: PPUSH
// result := false ;
59349: LD_ADDR_VAR 0 4
59353: PUSH
59354: LD_INT 0
59356: ST_TO_ADDR
// if GetTaskList ( unit ) then
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 437
59366: IFFALSE 59449
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59368: LD_STRING M
59370: PUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 437
59380: PUSH
59381: LD_INT 1
59383: ARRAY
59384: PUSH
59385: LD_INT 1
59387: ARRAY
59388: EQUAL
59389: PUSH
59390: LD_VAR 0 2
59394: PUSH
59395: LD_VAR 0 1
59399: PPUSH
59400: CALL_OW 437
59404: PUSH
59405: LD_INT 1
59407: ARRAY
59408: PUSH
59409: LD_INT 2
59411: ARRAY
59412: EQUAL
59413: AND
59414: PUSH
59415: LD_VAR 0 3
59419: PUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: CALL_OW 437
59429: PUSH
59430: LD_INT 1
59432: ARRAY
59433: PUSH
59434: LD_INT 3
59436: ARRAY
59437: EQUAL
59438: AND
59439: IFFALSE 59449
// result := true ;
59441: LD_ADDR_VAR 0 4
59445: PUSH
59446: LD_INT 1
59448: ST_TO_ADDR
// end ; end ;
59449: LD_VAR 0 4
59453: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59454: LD_INT 0
59456: PPUSH
59457: PPUSH
59458: PPUSH
59459: PPUSH
// if not unit or not area then
59460: LD_VAR 0 1
59464: NOT
59465: PUSH
59466: LD_VAR 0 2
59470: NOT
59471: OR
59472: IFFALSE 59476
// exit ;
59474: GO 59640
// tmp := AreaToList ( area , i ) ;
59476: LD_ADDR_VAR 0 6
59480: PUSH
59481: LD_VAR 0 2
59485: PPUSH
59486: LD_VAR 0 5
59490: PPUSH
59491: CALL_OW 517
59495: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59496: LD_ADDR_VAR 0 5
59500: PUSH
59501: DOUBLE
59502: LD_INT 1
59504: DEC
59505: ST_TO_ADDR
59506: LD_VAR 0 6
59510: PUSH
59511: LD_INT 1
59513: ARRAY
59514: PUSH
59515: FOR_TO
59516: IFFALSE 59638
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59518: LD_ADDR_VAR 0 7
59522: PUSH
59523: LD_VAR 0 6
59527: PUSH
59528: LD_INT 1
59530: ARRAY
59531: PUSH
59532: LD_VAR 0 5
59536: ARRAY
59537: PUSH
59538: LD_VAR 0 6
59542: PUSH
59543: LD_INT 2
59545: ARRAY
59546: PUSH
59547: LD_VAR 0 5
59551: ARRAY
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59557: LD_VAR 0 7
59561: PUSH
59562: LD_INT 1
59564: ARRAY
59565: PPUSH
59566: LD_VAR 0 7
59570: PUSH
59571: LD_INT 2
59573: ARRAY
59574: PPUSH
59575: CALL_OW 428
59579: PUSH
59580: LD_INT 0
59582: EQUAL
59583: IFFALSE 59636
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59585: LD_VAR 0 1
59589: PPUSH
59590: LD_VAR 0 7
59594: PUSH
59595: LD_INT 1
59597: ARRAY
59598: PPUSH
59599: LD_VAR 0 7
59603: PUSH
59604: LD_INT 2
59606: ARRAY
59607: PPUSH
59608: LD_VAR 0 3
59612: PPUSH
59613: CALL_OW 48
// result := IsPlaced ( unit ) ;
59617: LD_ADDR_VAR 0 4
59621: PUSH
59622: LD_VAR 0 1
59626: PPUSH
59627: CALL_OW 305
59631: ST_TO_ADDR
// exit ;
59632: POP
59633: POP
59634: GO 59640
// end ; end ;
59636: GO 59515
59638: POP
59639: POP
// end ;
59640: LD_VAR 0 4
59644: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59645: LD_INT 0
59647: PPUSH
59648: PPUSH
59649: PPUSH
// if not side or side > 8 then
59650: LD_VAR 0 1
59654: NOT
59655: PUSH
59656: LD_VAR 0 1
59660: PUSH
59661: LD_INT 8
59663: GREATER
59664: OR
59665: IFFALSE 59669
// exit ;
59667: GO 59856
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59669: LD_ADDR_VAR 0 4
59673: PUSH
59674: LD_INT 22
59676: PUSH
59677: LD_VAR 0 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 21
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PPUSH
59700: CALL_OW 69
59704: ST_TO_ADDR
// if not tmp then
59705: LD_VAR 0 4
59709: NOT
59710: IFFALSE 59714
// exit ;
59712: GO 59856
// enable_addtolog := true ;
59714: LD_ADDR_OWVAR 81
59718: PUSH
59719: LD_INT 1
59721: ST_TO_ADDR
// AddToLog ( [ ) ;
59722: LD_STRING [
59724: PPUSH
59725: CALL_OW 561
// for i in tmp do
59729: LD_ADDR_VAR 0 3
59733: PUSH
59734: LD_VAR 0 4
59738: PUSH
59739: FOR_IN
59740: IFFALSE 59847
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59742: LD_STRING [
59744: PUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL_OW 266
59754: STR
59755: PUSH
59756: LD_STRING , 
59758: STR
59759: PUSH
59760: LD_VAR 0 3
59764: PPUSH
59765: CALL_OW 250
59769: STR
59770: PUSH
59771: LD_STRING , 
59773: STR
59774: PUSH
59775: LD_VAR 0 3
59779: PPUSH
59780: CALL_OW 251
59784: STR
59785: PUSH
59786: LD_STRING , 
59788: STR
59789: PUSH
59790: LD_VAR 0 3
59794: PPUSH
59795: CALL_OW 254
59799: STR
59800: PUSH
59801: LD_STRING , 
59803: STR
59804: PUSH
59805: LD_VAR 0 3
59809: PPUSH
59810: LD_INT 1
59812: PPUSH
59813: CALL_OW 268
59817: STR
59818: PUSH
59819: LD_STRING , 
59821: STR
59822: PUSH
59823: LD_VAR 0 3
59827: PPUSH
59828: LD_INT 2
59830: PPUSH
59831: CALL_OW 268
59835: STR
59836: PUSH
59837: LD_STRING ],
59839: STR
59840: PPUSH
59841: CALL_OW 561
// end ;
59845: GO 59739
59847: POP
59848: POP
// AddToLog ( ]; ) ;
59849: LD_STRING ];
59851: PPUSH
59852: CALL_OW 561
// end ;
59856: LD_VAR 0 2
59860: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59861: LD_INT 0
59863: PPUSH
59864: PPUSH
59865: PPUSH
59866: PPUSH
59867: PPUSH
// if not area or not rate or not max then
59868: LD_VAR 0 1
59872: NOT
59873: PUSH
59874: LD_VAR 0 2
59878: NOT
59879: OR
59880: PUSH
59881: LD_VAR 0 4
59885: NOT
59886: OR
59887: IFFALSE 59891
// exit ;
59889: GO 60083
// while 1 do
59891: LD_INT 1
59893: IFFALSE 60083
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59895: LD_ADDR_VAR 0 9
59899: PUSH
59900: LD_VAR 0 1
59904: PPUSH
59905: LD_INT 1
59907: PPUSH
59908: CALL_OW 287
59912: PUSH
59913: LD_INT 10
59915: MUL
59916: ST_TO_ADDR
// r := rate / 10 ;
59917: LD_ADDR_VAR 0 7
59921: PUSH
59922: LD_VAR 0 2
59926: PUSH
59927: LD_INT 10
59929: DIVREAL
59930: ST_TO_ADDR
// time := 1 1$00 ;
59931: LD_ADDR_VAR 0 8
59935: PUSH
59936: LD_INT 2100
59938: ST_TO_ADDR
// if amount < min then
59939: LD_VAR 0 9
59943: PUSH
59944: LD_VAR 0 3
59948: LESS
59949: IFFALSE 59967
// r := r * 2 else
59951: LD_ADDR_VAR 0 7
59955: PUSH
59956: LD_VAR 0 7
59960: PUSH
59961: LD_INT 2
59963: MUL
59964: ST_TO_ADDR
59965: GO 59993
// if amount > max then
59967: LD_VAR 0 9
59971: PUSH
59972: LD_VAR 0 4
59976: GREATER
59977: IFFALSE 59993
// r := r / 2 ;
59979: LD_ADDR_VAR 0 7
59983: PUSH
59984: LD_VAR 0 7
59988: PUSH
59989: LD_INT 2
59991: DIVREAL
59992: ST_TO_ADDR
// time := time / r ;
59993: LD_ADDR_VAR 0 8
59997: PUSH
59998: LD_VAR 0 8
60002: PUSH
60003: LD_VAR 0 7
60007: DIVREAL
60008: ST_TO_ADDR
// if time < 0 then
60009: LD_VAR 0 8
60013: PUSH
60014: LD_INT 0
60016: LESS
60017: IFFALSE 60034
// time := time * - 1 ;
60019: LD_ADDR_VAR 0 8
60023: PUSH
60024: LD_VAR 0 8
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: MUL
60033: ST_TO_ADDR
// wait ( time ) ;
60034: LD_VAR 0 8
60038: PPUSH
60039: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60043: LD_INT 35
60045: PPUSH
60046: LD_INT 875
60048: PPUSH
60049: CALL_OW 12
60053: PPUSH
60054: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60058: LD_INT 1
60060: PPUSH
60061: LD_INT 5
60063: PPUSH
60064: CALL_OW 12
60068: PPUSH
60069: LD_VAR 0 1
60073: PPUSH
60074: LD_INT 1
60076: PPUSH
60077: CALL_OW 55
// end ;
60081: GO 59891
// end ;
60083: LD_VAR 0 5
60087: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60088: LD_INT 0
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
60096: PPUSH
60097: PPUSH
// if not turrets or not factories then
60098: LD_VAR 0 1
60102: NOT
60103: PUSH
60104: LD_VAR 0 2
60108: NOT
60109: OR
60110: IFFALSE 60114
// exit ;
60112: GO 60421
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60114: LD_ADDR_VAR 0 10
60118: PUSH
60119: LD_INT 5
60121: PUSH
60122: LD_INT 6
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 4
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 24
60156: PUSH
60157: LD_INT 25
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 23
60166: PUSH
60167: LD_INT 27
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 42
60180: PUSH
60181: LD_INT 43
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 44
60190: PUSH
60191: LD_INT 46
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 45
60200: PUSH
60201: LD_INT 47
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// result := [ ] ;
60218: LD_ADDR_VAR 0 3
60222: PUSH
60223: EMPTY
60224: ST_TO_ADDR
// for i in turrets do
60225: LD_ADDR_VAR 0 4
60229: PUSH
60230: LD_VAR 0 1
60234: PUSH
60235: FOR_IN
60236: IFFALSE 60419
// begin nat := GetNation ( i ) ;
60238: LD_ADDR_VAR 0 7
60242: PUSH
60243: LD_VAR 0 4
60247: PPUSH
60248: CALL_OW 248
60252: ST_TO_ADDR
// weapon := 0 ;
60253: LD_ADDR_VAR 0 8
60257: PUSH
60258: LD_INT 0
60260: ST_TO_ADDR
// if not nat then
60261: LD_VAR 0 7
60265: NOT
60266: IFFALSE 60270
// continue ;
60268: GO 60235
// for j in list [ nat ] do
60270: LD_ADDR_VAR 0 5
60274: PUSH
60275: LD_VAR 0 10
60279: PUSH
60280: LD_VAR 0 7
60284: ARRAY
60285: PUSH
60286: FOR_IN
60287: IFFALSE 60328
// if GetBWeapon ( i ) = j [ 1 ] then
60289: LD_VAR 0 4
60293: PPUSH
60294: CALL_OW 269
60298: PUSH
60299: LD_VAR 0 5
60303: PUSH
60304: LD_INT 1
60306: ARRAY
60307: EQUAL
60308: IFFALSE 60326
// begin weapon := j [ 2 ] ;
60310: LD_ADDR_VAR 0 8
60314: PUSH
60315: LD_VAR 0 5
60319: PUSH
60320: LD_INT 2
60322: ARRAY
60323: ST_TO_ADDR
// break ;
60324: GO 60328
// end ;
60326: GO 60286
60328: POP
60329: POP
// if not weapon then
60330: LD_VAR 0 8
60334: NOT
60335: IFFALSE 60339
// continue ;
60337: GO 60235
// for k in factories do
60339: LD_ADDR_VAR 0 6
60343: PUSH
60344: LD_VAR 0 2
60348: PUSH
60349: FOR_IN
60350: IFFALSE 60415
// begin weapons := AvailableWeaponList ( k ) ;
60352: LD_ADDR_VAR 0 9
60356: PUSH
60357: LD_VAR 0 6
60361: PPUSH
60362: CALL_OW 478
60366: ST_TO_ADDR
// if not weapons then
60367: LD_VAR 0 9
60371: NOT
60372: IFFALSE 60376
// continue ;
60374: GO 60349
// if weapon in weapons then
60376: LD_VAR 0 8
60380: PUSH
60381: LD_VAR 0 9
60385: IN
60386: IFFALSE 60413
// begin result := [ i , weapon ] ;
60388: LD_ADDR_VAR 0 3
60392: PUSH
60393: LD_VAR 0 4
60397: PUSH
60398: LD_VAR 0 8
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// exit ;
60407: POP
60408: POP
60409: POP
60410: POP
60411: GO 60421
// end ; end ;
60413: GO 60349
60415: POP
60416: POP
// end ;
60417: GO 60235
60419: POP
60420: POP
// end ;
60421: LD_VAR 0 3
60425: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60426: LD_INT 0
60428: PPUSH
// if not side or side > 8 then
60429: LD_VAR 0 3
60433: NOT
60434: PUSH
60435: LD_VAR 0 3
60439: PUSH
60440: LD_INT 8
60442: GREATER
60443: OR
60444: IFFALSE 60448
// exit ;
60446: GO 60507
// if not range then
60448: LD_VAR 0 4
60452: NOT
60453: IFFALSE 60464
// range := - 12 ;
60455: LD_ADDR_VAR 0 4
60459: PUSH
60460: LD_INT 12
60462: NEG
60463: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_VAR 0 2
60473: PPUSH
60474: LD_VAR 0 3
60478: PPUSH
60479: LD_VAR 0 4
60483: PPUSH
60484: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60488: LD_VAR 0 1
60492: PPUSH
60493: LD_VAR 0 2
60497: PPUSH
60498: LD_VAR 0 3
60502: PPUSH
60503: CALL_OW 331
// end ;
60507: LD_VAR 0 5
60511: RET
// export function Video ( mode ) ; begin
60512: LD_INT 0
60514: PPUSH
// ingame_video = mode ;
60515: LD_ADDR_OWVAR 52
60519: PUSH
60520: LD_VAR 0 1
60524: ST_TO_ADDR
// interface_hidden = mode ;
60525: LD_ADDR_OWVAR 54
60529: PUSH
60530: LD_VAR 0 1
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 2
60539: RET
// export function Join ( array , element ) ; begin
60540: LD_INT 0
60542: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60543: LD_ADDR_VAR 0 3
60547: PUSH
60548: LD_VAR 0 1
60552: PPUSH
60553: LD_VAR 0 1
60557: PUSH
60558: LD_INT 1
60560: PLUS
60561: PPUSH
60562: LD_VAR 0 2
60566: PPUSH
60567: CALL_OW 1
60571: ST_TO_ADDR
// end ;
60572: LD_VAR 0 3
60576: RET
// export function JoinUnion ( array , element ) ; begin
60577: LD_INT 0
60579: PPUSH
// result := array union element ;
60580: LD_ADDR_VAR 0 3
60584: PUSH
60585: LD_VAR 0 1
60589: PUSH
60590: LD_VAR 0 2
60594: UNION
60595: ST_TO_ADDR
// end ;
60596: LD_VAR 0 3
60600: RET
// export function GetBehemoths ( side ) ; begin
60601: LD_INT 0
60603: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60604: LD_ADDR_VAR 0 2
60608: PUSH
60609: LD_INT 22
60611: PUSH
60612: LD_VAR 0 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 31
60623: PUSH
60624: LD_INT 25
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PPUSH
60635: CALL_OW 69
60639: ST_TO_ADDR
// end ;
60640: LD_VAR 0 2
60644: RET
// export function Shuffle ( array ) ; var i , index ; begin
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
60649: PPUSH
// result := [ ] ;
60650: LD_ADDR_VAR 0 2
60654: PUSH
60655: EMPTY
60656: ST_TO_ADDR
// if not array then
60657: LD_VAR 0 1
60661: NOT
60662: IFFALSE 60666
// exit ;
60664: GO 60765
// Randomize ;
60666: CALL_OW 10
// for i = array downto 1 do
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: DOUBLE
60676: LD_VAR 0 1
60680: INC
60681: ST_TO_ADDR
60682: LD_INT 1
60684: PUSH
60685: FOR_DOWNTO
60686: IFFALSE 60763
// begin index := rand ( 1 , array ) ;
60688: LD_ADDR_VAR 0 4
60692: PUSH
60693: LD_INT 1
60695: PPUSH
60696: LD_VAR 0 1
60700: PPUSH
60701: CALL_OW 12
60705: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60706: LD_ADDR_VAR 0 2
60710: PUSH
60711: LD_VAR 0 2
60715: PPUSH
60716: LD_VAR 0 2
60720: PUSH
60721: LD_INT 1
60723: PLUS
60724: PPUSH
60725: LD_VAR 0 1
60729: PUSH
60730: LD_VAR 0 4
60734: ARRAY
60735: PPUSH
60736: CALL_OW 2
60740: ST_TO_ADDR
// array := Delete ( array , index ) ;
60741: LD_ADDR_VAR 0 1
60745: PUSH
60746: LD_VAR 0 1
60750: PPUSH
60751: LD_VAR 0 4
60755: PPUSH
60756: CALL_OW 3
60760: ST_TO_ADDR
// end ;
60761: GO 60685
60763: POP
60764: POP
// end ;
60765: LD_VAR 0 2
60769: RET
// export function GetBaseMaterials ( base ) ; begin
60770: LD_INT 0
60772: PPUSH
// result := [ 0 , 0 , 0 ] ;
60773: LD_ADDR_VAR 0 2
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: ST_TO_ADDR
// if not base then
60792: LD_VAR 0 1
60796: NOT
60797: IFFALSE 60801
// exit ;
60799: GO 60850
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60801: LD_ADDR_VAR 0 2
60805: PUSH
60806: LD_VAR 0 1
60810: PPUSH
60811: LD_INT 1
60813: PPUSH
60814: CALL_OW 275
60818: PUSH
60819: LD_VAR 0 1
60823: PPUSH
60824: LD_INT 2
60826: PPUSH
60827: CALL_OW 275
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: LD_INT 3
60839: PPUSH
60840: CALL_OW 275
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// end ;
60850: LD_VAR 0 2
60854: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60855: LD_INT 0
60857: PPUSH
60858: PPUSH
// result := array ;
60859: LD_ADDR_VAR 0 3
60863: PUSH
60864: LD_VAR 0 1
60868: ST_TO_ADDR
// if size > 0 then
60869: LD_VAR 0 2
60873: PUSH
60874: LD_INT 0
60876: GREATER
60877: IFFALSE 60923
// for i := array downto size do
60879: LD_ADDR_VAR 0 4
60883: PUSH
60884: DOUBLE
60885: LD_VAR 0 1
60889: INC
60890: ST_TO_ADDR
60891: LD_VAR 0 2
60895: PUSH
60896: FOR_DOWNTO
60897: IFFALSE 60921
// result := Delete ( result , result ) ;
60899: LD_ADDR_VAR 0 3
60903: PUSH
60904: LD_VAR 0 3
60908: PPUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: CALL_OW 3
60918: ST_TO_ADDR
60919: GO 60896
60921: POP
60922: POP
// end ;
60923: LD_VAR 0 3
60927: RET
// export function ComExit ( unit ) ; var tmp ; begin
60928: LD_INT 0
60930: PPUSH
60931: PPUSH
// if not IsInUnit ( unit ) then
60932: LD_VAR 0 1
60936: PPUSH
60937: CALL_OW 310
60941: NOT
60942: IFFALSE 60946
// exit ;
60944: GO 61006
// tmp := IsInUnit ( unit ) ;
60946: LD_ADDR_VAR 0 3
60950: PUSH
60951: LD_VAR 0 1
60955: PPUSH
60956: CALL_OW 310
60960: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60961: LD_VAR 0 3
60965: PPUSH
60966: CALL_OW 247
60970: PUSH
60971: LD_INT 2
60973: EQUAL
60974: IFFALSE 60987
// ComExitVehicle ( unit ) else
60976: LD_VAR 0 1
60980: PPUSH
60981: CALL_OW 121
60985: GO 60996
// ComExitBuilding ( unit ) ;
60987: LD_VAR 0 1
60991: PPUSH
60992: CALL_OW 122
// result := tmp ;
60996: LD_ADDR_VAR 0 2
61000: PUSH
61001: LD_VAR 0 3
61005: ST_TO_ADDR
// end ;
61006: LD_VAR 0 2
61010: RET
// export function ComExitAll ( units ) ; var i ; begin
61011: LD_INT 0
61013: PPUSH
61014: PPUSH
// if not units then
61015: LD_VAR 0 1
61019: NOT
61020: IFFALSE 61024
// exit ;
61022: GO 61050
// for i in units do
61024: LD_ADDR_VAR 0 3
61028: PUSH
61029: LD_VAR 0 1
61033: PUSH
61034: FOR_IN
61035: IFFALSE 61048
// ComExit ( i ) ;
61037: LD_VAR 0 3
61041: PPUSH
61042: CALL 60928 0 1
61046: GO 61034
61048: POP
61049: POP
// end ;
61050: LD_VAR 0 2
61054: RET
// export function ResetHc ; begin
61055: LD_INT 0
61057: PPUSH
// InitHc ;
61058: CALL_OW 19
// hc_importance := 0 ;
61062: LD_ADDR_OWVAR 32
61066: PUSH
61067: LD_INT 0
61069: ST_TO_ADDR
// end ;
61070: LD_VAR 0 1
61074: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61075: LD_INT 0
61077: PPUSH
61078: PPUSH
61079: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61080: LD_ADDR_VAR 0 6
61084: PUSH
61085: LD_VAR 0 1
61089: PUSH
61090: LD_VAR 0 3
61094: PLUS
61095: PUSH
61096: LD_INT 2
61098: DIV
61099: ST_TO_ADDR
// if _x < 0 then
61100: LD_VAR 0 6
61104: PUSH
61105: LD_INT 0
61107: LESS
61108: IFFALSE 61125
// _x := _x * - 1 ;
61110: LD_ADDR_VAR 0 6
61114: PUSH
61115: LD_VAR 0 6
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: MUL
61124: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61125: LD_ADDR_VAR 0 7
61129: PUSH
61130: LD_VAR 0 2
61134: PUSH
61135: LD_VAR 0 4
61139: PLUS
61140: PUSH
61141: LD_INT 2
61143: DIV
61144: ST_TO_ADDR
// if _y < 0 then
61145: LD_VAR 0 7
61149: PUSH
61150: LD_INT 0
61152: LESS
61153: IFFALSE 61170
// _y := _y * - 1 ;
61155: LD_ADDR_VAR 0 7
61159: PUSH
61160: LD_VAR 0 7
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: MUL
61169: ST_TO_ADDR
// result := [ _x , _y ] ;
61170: LD_ADDR_VAR 0 5
61174: PUSH
61175: LD_VAR 0 6
61179: PUSH
61180: LD_VAR 0 7
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: ST_TO_ADDR
// end ;
61189: LD_VAR 0 5
61193: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61194: LD_INT 0
61196: PPUSH
61197: PPUSH
61198: PPUSH
61199: PPUSH
// task := GetTaskList ( unit ) ;
61200: LD_ADDR_VAR 0 7
61204: PUSH
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 437
61214: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61215: LD_VAR 0 7
61219: NOT
61220: PUSH
61221: LD_VAR 0 1
61225: PPUSH
61226: LD_VAR 0 2
61230: PPUSH
61231: CALL_OW 308
61235: NOT
61236: AND
61237: IFFALSE 61241
// exit ;
61239: GO 61359
// if IsInArea ( unit , area ) then
61241: LD_VAR 0 1
61245: PPUSH
61246: LD_VAR 0 2
61250: PPUSH
61251: CALL_OW 308
61255: IFFALSE 61273
// begin ComMoveToArea ( unit , goAway ) ;
61257: LD_VAR 0 1
61261: PPUSH
61262: LD_VAR 0 3
61266: PPUSH
61267: CALL_OW 113
// exit ;
61271: GO 61359
// end ; if task [ 1 ] [ 1 ] <> M then
61273: LD_VAR 0 7
61277: PUSH
61278: LD_INT 1
61280: ARRAY
61281: PUSH
61282: LD_INT 1
61284: ARRAY
61285: PUSH
61286: LD_STRING M
61288: NONEQUAL
61289: IFFALSE 61293
// exit ;
61291: GO 61359
// x := task [ 1 ] [ 2 ] ;
61293: LD_ADDR_VAR 0 5
61297: PUSH
61298: LD_VAR 0 7
61302: PUSH
61303: LD_INT 1
61305: ARRAY
61306: PUSH
61307: LD_INT 2
61309: ARRAY
61310: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61311: LD_ADDR_VAR 0 6
61315: PUSH
61316: LD_VAR 0 7
61320: PUSH
61321: LD_INT 1
61323: ARRAY
61324: PUSH
61325: LD_INT 3
61327: ARRAY
61328: ST_TO_ADDR
// if InArea ( x , y , area ) then
61329: LD_VAR 0 5
61333: PPUSH
61334: LD_VAR 0 6
61338: PPUSH
61339: LD_VAR 0 2
61343: PPUSH
61344: CALL_OW 309
61348: IFFALSE 61359
// ComStop ( unit ) ;
61350: LD_VAR 0 1
61354: PPUSH
61355: CALL_OW 141
// end ;
61359: LD_VAR 0 4
61363: RET
// export function Abs ( value ) ; begin
61364: LD_INT 0
61366: PPUSH
// result := value ;
61367: LD_ADDR_VAR 0 2
61371: PUSH
61372: LD_VAR 0 1
61376: ST_TO_ADDR
// if value < 0 then
61377: LD_VAR 0 1
61381: PUSH
61382: LD_INT 0
61384: LESS
61385: IFFALSE 61402
// result := value * - 1 ;
61387: LD_ADDR_VAR 0 2
61391: PUSH
61392: LD_VAR 0 1
61396: PUSH
61397: LD_INT 1
61399: NEG
61400: MUL
61401: ST_TO_ADDR
// end ;
61402: LD_VAR 0 2
61406: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61407: LD_INT 0
61409: PPUSH
61410: PPUSH
61411: PPUSH
61412: PPUSH
61413: PPUSH
61414: PPUSH
61415: PPUSH
61416: PPUSH
// if not unit or not building then
61417: LD_VAR 0 1
61421: NOT
61422: PUSH
61423: LD_VAR 0 2
61427: NOT
61428: OR
61429: IFFALSE 61433
// exit ;
61431: GO 61659
// x := GetX ( building ) ;
61433: LD_ADDR_VAR 0 4
61437: PUSH
61438: LD_VAR 0 2
61442: PPUSH
61443: CALL_OW 250
61447: ST_TO_ADDR
// y := GetY ( building ) ;
61448: LD_ADDR_VAR 0 6
61452: PUSH
61453: LD_VAR 0 2
61457: PPUSH
61458: CALL_OW 251
61462: ST_TO_ADDR
// d := GetDir ( building ) ;
61463: LD_ADDR_VAR 0 8
61467: PUSH
61468: LD_VAR 0 2
61472: PPUSH
61473: CALL_OW 254
61477: ST_TO_ADDR
// r := 4 ;
61478: LD_ADDR_VAR 0 9
61482: PUSH
61483: LD_INT 4
61485: ST_TO_ADDR
// for i := 1 to 5 do
61486: LD_ADDR_VAR 0 10
61490: PUSH
61491: DOUBLE
61492: LD_INT 1
61494: DEC
61495: ST_TO_ADDR
61496: LD_INT 5
61498: PUSH
61499: FOR_TO
61500: IFFALSE 61657
// begin _x := ShiftX ( x , d , r + i ) ;
61502: LD_ADDR_VAR 0 5
61506: PUSH
61507: LD_VAR 0 4
61511: PPUSH
61512: LD_VAR 0 8
61516: PPUSH
61517: LD_VAR 0 9
61521: PUSH
61522: LD_VAR 0 10
61526: PLUS
61527: PPUSH
61528: CALL_OW 272
61532: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61533: LD_ADDR_VAR 0 7
61537: PUSH
61538: LD_VAR 0 6
61542: PPUSH
61543: LD_VAR 0 8
61547: PPUSH
61548: LD_VAR 0 9
61552: PUSH
61553: LD_VAR 0 10
61557: PLUS
61558: PPUSH
61559: CALL_OW 273
61563: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61564: LD_VAR 0 5
61568: PPUSH
61569: LD_VAR 0 7
61573: PPUSH
61574: CALL_OW 488
61578: PUSH
61579: LD_VAR 0 5
61583: PPUSH
61584: LD_VAR 0 7
61588: PPUSH
61589: CALL_OW 428
61593: PPUSH
61594: CALL_OW 247
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 2
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: IN
61609: NOT
61610: AND
61611: IFFALSE 61655
// begin ComMoveXY ( unit , _x , _y ) ;
61613: LD_VAR 0 1
61617: PPUSH
61618: LD_VAR 0 5
61622: PPUSH
61623: LD_VAR 0 7
61627: PPUSH
61628: CALL_OW 111
// result := [ _x , _y ] ;
61632: LD_ADDR_VAR 0 3
61636: PUSH
61637: LD_VAR 0 5
61641: PUSH
61642: LD_VAR 0 7
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// exit ;
61651: POP
61652: POP
61653: GO 61659
// end ; end ;
61655: GO 61499
61657: POP
61658: POP
// end ;
61659: LD_VAR 0 3
61663: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61664: LD_INT 0
61666: PPUSH
61667: PPUSH
61668: PPUSH
// result := 0 ;
61669: LD_ADDR_VAR 0 3
61673: PUSH
61674: LD_INT 0
61676: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61677: LD_VAR 0 1
61681: PUSH
61682: LD_INT 0
61684: LESS
61685: PUSH
61686: LD_VAR 0 1
61690: PUSH
61691: LD_INT 8
61693: GREATER
61694: OR
61695: PUSH
61696: LD_VAR 0 2
61700: PUSH
61701: LD_INT 0
61703: LESS
61704: OR
61705: PUSH
61706: LD_VAR 0 2
61710: PUSH
61711: LD_INT 8
61713: GREATER
61714: OR
61715: IFFALSE 61719
// exit ;
61717: GO 61794
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61719: LD_ADDR_VAR 0 4
61723: PUSH
61724: LD_INT 22
61726: PUSH
61727: LD_VAR 0 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PPUSH
61736: CALL_OW 69
61740: PUSH
61741: FOR_IN
61742: IFFALSE 61792
// begin un := UnitShoot ( i ) ;
61744: LD_ADDR_VAR 0 5
61748: PUSH
61749: LD_VAR 0 4
61753: PPUSH
61754: CALL_OW 504
61758: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61759: LD_VAR 0 5
61763: PPUSH
61764: CALL_OW 255
61768: PUSH
61769: LD_VAR 0 1
61773: EQUAL
61774: IFFALSE 61790
// begin result := un ;
61776: LD_ADDR_VAR 0 3
61780: PUSH
61781: LD_VAR 0 5
61785: ST_TO_ADDR
// exit ;
61786: POP
61787: POP
61788: GO 61794
// end ; end ;
61790: GO 61741
61792: POP
61793: POP
// end ;
61794: LD_VAR 0 3
61798: RET
// export function GetCargoBay ( units ) ; begin
61799: LD_INT 0
61801: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61802: LD_ADDR_VAR 0 2
61806: PUSH
61807: LD_VAR 0 1
61811: PPUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 34
61817: PUSH
61818: LD_INT 12
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 34
61827: PUSH
61828: LD_INT 51
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 34
61837: PUSH
61838: LD_INT 32
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 34
61847: PUSH
61848: LD_EXP 8
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: PPUSH
61864: CALL_OW 72
61868: ST_TO_ADDR
// end ;
61869: LD_VAR 0 2
61873: RET
// export function Negate ( value ) ; begin
61874: LD_INT 0
61876: PPUSH
// result := not value ;
61877: LD_ADDR_VAR 0 2
61881: PUSH
61882: LD_VAR 0 1
61886: NOT
61887: ST_TO_ADDR
// end ;
61888: LD_VAR 0 2
61892: RET
// export function Inc ( value ) ; begin
61893: LD_INT 0
61895: PPUSH
// result := value + 1 ;
61896: LD_ADDR_VAR 0 2
61900: PUSH
61901: LD_VAR 0 1
61905: PUSH
61906: LD_INT 1
61908: PLUS
61909: ST_TO_ADDR
// end ;
61910: LD_VAR 0 2
61914: RET
// export function Dec ( value ) ; begin
61915: LD_INT 0
61917: PPUSH
// result := value - 1 ;
61918: LD_ADDR_VAR 0 2
61922: PUSH
61923: LD_VAR 0 1
61927: PUSH
61928: LD_INT 1
61930: MINUS
61931: ST_TO_ADDR
// end ;
61932: LD_VAR 0 2
61936: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61937: LD_INT 0
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
61945: PPUSH
61946: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61947: LD_VAR 0 1
61951: PPUSH
61952: LD_VAR 0 2
61956: PPUSH
61957: CALL_OW 488
61961: NOT
61962: PUSH
61963: LD_VAR 0 3
61967: PPUSH
61968: LD_VAR 0 4
61972: PPUSH
61973: CALL_OW 488
61977: NOT
61978: OR
61979: IFFALSE 61992
// begin result := - 1 ;
61981: LD_ADDR_VAR 0 5
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: ST_TO_ADDR
// exit ;
61990: GO 62227
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61992: LD_ADDR_VAR 0 12
61996: PUSH
61997: LD_VAR 0 1
62001: PPUSH
62002: LD_VAR 0 2
62006: PPUSH
62007: LD_VAR 0 3
62011: PPUSH
62012: LD_VAR 0 4
62016: PPUSH
62017: CALL 61075 0 4
62021: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62022: LD_ADDR_VAR 0 11
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: LD_VAR 0 2
62036: PPUSH
62037: LD_VAR 0 12
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PPUSH
62046: LD_VAR 0 12
62050: PUSH
62051: LD_INT 2
62053: ARRAY
62054: PPUSH
62055: CALL_OW 298
62059: ST_TO_ADDR
// distance := 9999 ;
62060: LD_ADDR_VAR 0 10
62064: PUSH
62065: LD_INT 9999
62067: ST_TO_ADDR
// for i := 0 to 5 do
62068: LD_ADDR_VAR 0 6
62072: PUSH
62073: DOUBLE
62074: LD_INT 0
62076: DEC
62077: ST_TO_ADDR
62078: LD_INT 5
62080: PUSH
62081: FOR_TO
62082: IFFALSE 62225
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62084: LD_ADDR_VAR 0 7
62088: PUSH
62089: LD_VAR 0 1
62093: PPUSH
62094: LD_VAR 0 6
62098: PPUSH
62099: LD_VAR 0 11
62103: PPUSH
62104: CALL_OW 272
62108: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62109: LD_ADDR_VAR 0 8
62113: PUSH
62114: LD_VAR 0 2
62118: PPUSH
62119: LD_VAR 0 6
62123: PPUSH
62124: LD_VAR 0 11
62128: PPUSH
62129: CALL_OW 273
62133: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62134: LD_VAR 0 7
62138: PPUSH
62139: LD_VAR 0 8
62143: PPUSH
62144: CALL_OW 488
62148: NOT
62149: IFFALSE 62153
// continue ;
62151: GO 62081
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62153: LD_ADDR_VAR 0 9
62157: PUSH
62158: LD_VAR 0 12
62162: PUSH
62163: LD_INT 1
62165: ARRAY
62166: PPUSH
62167: LD_VAR 0 12
62171: PUSH
62172: LD_INT 2
62174: ARRAY
62175: PPUSH
62176: LD_VAR 0 7
62180: PPUSH
62181: LD_VAR 0 8
62185: PPUSH
62186: CALL_OW 298
62190: ST_TO_ADDR
// if tmp < distance then
62191: LD_VAR 0 9
62195: PUSH
62196: LD_VAR 0 10
62200: LESS
62201: IFFALSE 62223
// begin result := i ;
62203: LD_ADDR_VAR 0 5
62207: PUSH
62208: LD_VAR 0 6
62212: ST_TO_ADDR
// distance := tmp ;
62213: LD_ADDR_VAR 0 10
62217: PUSH
62218: LD_VAR 0 9
62222: ST_TO_ADDR
// end ; end ;
62223: GO 62081
62225: POP
62226: POP
// end ;
62227: LD_VAR 0 5
62231: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62232: LD_INT 0
62234: PPUSH
62235: PPUSH
// if not driver or not IsInUnit ( driver ) then
62236: LD_VAR 0 1
62240: NOT
62241: PUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: CALL_OW 310
62251: NOT
62252: OR
62253: IFFALSE 62257
// exit ;
62255: GO 62347
// vehicle := IsInUnit ( driver ) ;
62257: LD_ADDR_VAR 0 3
62261: PUSH
62262: LD_VAR 0 1
62266: PPUSH
62267: CALL_OW 310
62271: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62272: LD_VAR 0 1
62276: PPUSH
62277: LD_STRING \
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: PUSH
62307: LD_STRING E
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: LD_VAR 0 3
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PPUSH
62343: CALL_OW 446
// end ;
62347: LD_VAR 0 2
62351: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62352: LD_INT 0
62354: PPUSH
62355: PPUSH
// if not driver or not IsInUnit ( driver ) then
62356: LD_VAR 0 1
62360: NOT
62361: PUSH
62362: LD_VAR 0 1
62366: PPUSH
62367: CALL_OW 310
62371: NOT
62372: OR
62373: IFFALSE 62377
// exit ;
62375: GO 62467
// vehicle := IsInUnit ( driver ) ;
62377: LD_ADDR_VAR 0 3
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: CALL_OW 310
62391: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62392: LD_VAR 0 1
62396: PPUSH
62397: LD_STRING \
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: LD_INT 0
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: PUSH
62427: LD_STRING E
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_VAR 0 3
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PPUSH
62463: CALL_OW 447
// end ;
62467: LD_VAR 0 2
62471: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62472: LD_INT 0
62474: PPUSH
62475: PPUSH
62476: PPUSH
// tmp := [ ] ;
62477: LD_ADDR_VAR 0 5
62481: PUSH
62482: EMPTY
62483: ST_TO_ADDR
// for i in units do
62484: LD_ADDR_VAR 0 4
62488: PUSH
62489: LD_VAR 0 1
62493: PUSH
62494: FOR_IN
62495: IFFALSE 62533
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62497: LD_ADDR_VAR 0 5
62501: PUSH
62502: LD_VAR 0 5
62506: PPUSH
62507: LD_VAR 0 5
62511: PUSH
62512: LD_INT 1
62514: PLUS
62515: PPUSH
62516: LD_VAR 0 4
62520: PPUSH
62521: CALL_OW 256
62525: PPUSH
62526: CALL_OW 2
62530: ST_TO_ADDR
62531: GO 62494
62533: POP
62534: POP
// if not tmp then
62535: LD_VAR 0 5
62539: NOT
62540: IFFALSE 62544
// exit ;
62542: GO 62592
// if asc then
62544: LD_VAR 0 2
62548: IFFALSE 62572
// result := SortListByListAsc ( units , tmp ) else
62550: LD_ADDR_VAR 0 3
62554: PUSH
62555: LD_VAR 0 1
62559: PPUSH
62560: LD_VAR 0 5
62564: PPUSH
62565: CALL_OW 76
62569: ST_TO_ADDR
62570: GO 62592
// result := SortListByListDesc ( units , tmp ) ;
62572: LD_ADDR_VAR 0 3
62576: PUSH
62577: LD_VAR 0 1
62581: PPUSH
62582: LD_VAR 0 5
62586: PPUSH
62587: CALL_OW 77
62591: ST_TO_ADDR
// end ;
62592: LD_VAR 0 3
62596: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62597: LD_INT 0
62599: PPUSH
62600: PPUSH
// task := GetTaskList ( mech ) ;
62601: LD_ADDR_VAR 0 4
62605: PUSH
62606: LD_VAR 0 1
62610: PPUSH
62611: CALL_OW 437
62615: ST_TO_ADDR
// if not task then
62616: LD_VAR 0 4
62620: NOT
62621: IFFALSE 62625
// exit ;
62623: GO 62667
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62625: LD_ADDR_VAR 0 3
62629: PUSH
62630: LD_VAR 0 4
62634: PUSH
62635: LD_INT 1
62637: ARRAY
62638: PUSH
62639: LD_INT 1
62641: ARRAY
62642: PUSH
62643: LD_STRING r
62645: EQUAL
62646: PUSH
62647: LD_VAR 0 4
62651: PUSH
62652: LD_INT 1
62654: ARRAY
62655: PUSH
62656: LD_INT 4
62658: ARRAY
62659: PUSH
62660: LD_VAR 0 2
62664: EQUAL
62665: AND
62666: ST_TO_ADDR
// end ;
62667: LD_VAR 0 3
62671: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62672: LD_INT 0
62674: PPUSH
// SetDir ( unit , d ) ;
62675: LD_VAR 0 1
62679: PPUSH
62680: LD_VAR 0 4
62684: PPUSH
62685: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62689: LD_VAR 0 1
62693: PPUSH
62694: LD_VAR 0 2
62698: PPUSH
62699: LD_VAR 0 3
62703: PPUSH
62704: LD_VAR 0 5
62708: PPUSH
62709: CALL_OW 48
// end ;
62713: LD_VAR 0 6
62717: RET
// export function ToNaturalNumber ( number ) ; begin
62718: LD_INT 0
62720: PPUSH
// result := number div 1 ;
62721: LD_ADDR_VAR 0 2
62725: PUSH
62726: LD_VAR 0 1
62730: PUSH
62731: LD_INT 1
62733: DIV
62734: ST_TO_ADDR
// if number < 0 then
62735: LD_VAR 0 1
62739: PUSH
62740: LD_INT 0
62742: LESS
62743: IFFALSE 62753
// result := 0 ;
62745: LD_ADDR_VAR 0 2
62749: PUSH
62750: LD_INT 0
62752: ST_TO_ADDR
// end ;
62753: LD_VAR 0 2
62757: RET
// export function SortByClass ( units , class ) ; var un ; begin
62758: LD_INT 0
62760: PPUSH
62761: PPUSH
// if not units or not class then
62762: LD_VAR 0 1
62766: NOT
62767: PUSH
62768: LD_VAR 0 2
62772: NOT
62773: OR
62774: IFFALSE 62778
// exit ;
62776: GO 62873
// result := [ ] ;
62778: LD_ADDR_VAR 0 3
62782: PUSH
62783: EMPTY
62784: ST_TO_ADDR
// for un in units do
62785: LD_ADDR_VAR 0 4
62789: PUSH
62790: LD_VAR 0 1
62794: PUSH
62795: FOR_IN
62796: IFFALSE 62871
// if GetClass ( un ) = class then
62798: LD_VAR 0 4
62802: PPUSH
62803: CALL_OW 257
62807: PUSH
62808: LD_VAR 0 2
62812: EQUAL
62813: IFFALSE 62840
// result := Insert ( result , 1 , un ) else
62815: LD_ADDR_VAR 0 3
62819: PUSH
62820: LD_VAR 0 3
62824: PPUSH
62825: LD_INT 1
62827: PPUSH
62828: LD_VAR 0 4
62832: PPUSH
62833: CALL_OW 2
62837: ST_TO_ADDR
62838: GO 62869
// result := Replace ( result , result + 1 , un ) ;
62840: LD_ADDR_VAR 0 3
62844: PUSH
62845: LD_VAR 0 3
62849: PPUSH
62850: LD_VAR 0 3
62854: PUSH
62855: LD_INT 1
62857: PLUS
62858: PPUSH
62859: LD_VAR 0 4
62863: PPUSH
62864: CALL_OW 1
62868: ST_TO_ADDR
62869: GO 62795
62871: POP
62872: POP
// end ;
62873: LD_VAR 0 3
62877: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
62883: PPUSH
62884: PPUSH
62885: PPUSH
62886: PPUSH
// result := [ ] ;
62887: LD_ADDR_VAR 0 4
62891: PUSH
62892: EMPTY
62893: ST_TO_ADDR
// if x - r < 0 then
62894: LD_VAR 0 1
62898: PUSH
62899: LD_VAR 0 3
62903: MINUS
62904: PUSH
62905: LD_INT 0
62907: LESS
62908: IFFALSE 62920
// min_x := 0 else
62910: LD_ADDR_VAR 0 8
62914: PUSH
62915: LD_INT 0
62917: ST_TO_ADDR
62918: GO 62936
// min_x := x - r ;
62920: LD_ADDR_VAR 0 8
62924: PUSH
62925: LD_VAR 0 1
62929: PUSH
62930: LD_VAR 0 3
62934: MINUS
62935: ST_TO_ADDR
// if y - r < 0 then
62936: LD_VAR 0 2
62940: PUSH
62941: LD_VAR 0 3
62945: MINUS
62946: PUSH
62947: LD_INT 0
62949: LESS
62950: IFFALSE 62962
// min_y := 0 else
62952: LD_ADDR_VAR 0 7
62956: PUSH
62957: LD_INT 0
62959: ST_TO_ADDR
62960: GO 62978
// min_y := y - r ;
62962: LD_ADDR_VAR 0 7
62966: PUSH
62967: LD_VAR 0 2
62971: PUSH
62972: LD_VAR 0 3
62976: MINUS
62977: ST_TO_ADDR
// max_x := x + r ;
62978: LD_ADDR_VAR 0 9
62982: PUSH
62983: LD_VAR 0 1
62987: PUSH
62988: LD_VAR 0 3
62992: PLUS
62993: ST_TO_ADDR
// max_y := y + r ;
62994: LD_ADDR_VAR 0 10
62998: PUSH
62999: LD_VAR 0 2
63003: PUSH
63004: LD_VAR 0 3
63008: PLUS
63009: ST_TO_ADDR
// for _x = min_x to max_x do
63010: LD_ADDR_VAR 0 5
63014: PUSH
63015: DOUBLE
63016: LD_VAR 0 8
63020: DEC
63021: ST_TO_ADDR
63022: LD_VAR 0 9
63026: PUSH
63027: FOR_TO
63028: IFFALSE 63129
// for _y = min_y to max_y do
63030: LD_ADDR_VAR 0 6
63034: PUSH
63035: DOUBLE
63036: LD_VAR 0 7
63040: DEC
63041: ST_TO_ADDR
63042: LD_VAR 0 10
63046: PUSH
63047: FOR_TO
63048: IFFALSE 63125
// begin if not ValidHex ( _x , _y ) then
63050: LD_VAR 0 5
63054: PPUSH
63055: LD_VAR 0 6
63059: PPUSH
63060: CALL_OW 488
63064: NOT
63065: IFFALSE 63069
// continue ;
63067: GO 63047
// if GetResourceTypeXY ( _x , _y ) then
63069: LD_VAR 0 5
63073: PPUSH
63074: LD_VAR 0 6
63078: PPUSH
63079: CALL_OW 283
63083: IFFALSE 63123
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63085: LD_ADDR_VAR 0 4
63089: PUSH
63090: LD_VAR 0 4
63094: PPUSH
63095: LD_VAR 0 4
63099: PUSH
63100: LD_INT 1
63102: PLUS
63103: PPUSH
63104: LD_VAR 0 5
63108: PUSH
63109: LD_VAR 0 6
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PPUSH
63118: CALL_OW 1
63122: ST_TO_ADDR
// end ;
63123: GO 63047
63125: POP
63126: POP
63127: GO 63027
63129: POP
63130: POP
// end ;
63131: LD_VAR 0 4
63135: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63136: LD_INT 0
63138: PPUSH
63139: PPUSH
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
// if not units then
63146: LD_VAR 0 1
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63580
// result := UnitFilter ( units , [ f_ok ] ) ;
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: LD_INT 50
63167: PUSH
63168: EMPTY
63169: LIST
63170: PPUSH
63171: CALL_OW 72
63175: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63176: LD_ADDR_VAR 0 8
63180: PUSH
63181: LD_VAR 0 1
63185: PUSH
63186: LD_INT 1
63188: ARRAY
63189: PPUSH
63190: CALL_OW 255
63194: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
63195: LD_ADDR_VAR 0 10
63199: PUSH
63200: LD_INT 29
63202: PUSH
63203: LD_EXP 11
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: ST_TO_ADDR
// if not result then
63212: LD_VAR 0 3
63216: NOT
63217: IFFALSE 63221
// exit ;
63219: GO 63580
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63221: LD_ADDR_VAR 0 5
63225: PUSH
63226: LD_INT 81
63228: PUSH
63229: LD_VAR 0 8
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PPUSH
63238: CALL_OW 69
63242: ST_TO_ADDR
// for i in result do
63243: LD_ADDR_VAR 0 4
63247: PUSH
63248: LD_VAR 0 3
63252: PUSH
63253: FOR_IN
63254: IFFALSE 63578
// begin tag := GetTag ( i ) + 1 ;
63256: LD_ADDR_VAR 0 9
63260: PUSH
63261: LD_VAR 0 4
63265: PPUSH
63266: CALL_OW 110
63270: PUSH
63271: LD_INT 1
63273: PLUS
63274: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63275: LD_ADDR_VAR 0 7
63279: PUSH
63280: LD_VAR 0 4
63284: PPUSH
63285: CALL_OW 250
63289: PPUSH
63290: LD_VAR 0 4
63294: PPUSH
63295: CALL_OW 251
63299: PPUSH
63300: LD_INT 6
63302: PPUSH
63303: CALL 62878 0 3
63307: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63308: LD_VAR 0 7
63312: PUSH
63313: LD_VAR 0 4
63317: PPUSH
63318: CALL_OW 264
63322: PUSH
63323: LD_VAR 0 10
63327: IN
63328: NOT
63329: AND
63330: IFFALSE 63369
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63332: LD_VAR 0 4
63336: PPUSH
63337: LD_VAR 0 7
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PUSH
63346: LD_INT 1
63348: ARRAY
63349: PPUSH
63350: LD_VAR 0 7
63354: PUSH
63355: LD_INT 1
63357: ARRAY
63358: PUSH
63359: LD_INT 2
63361: ARRAY
63362: PPUSH
63363: CALL_OW 116
63367: GO 63576
// if path > tag then
63369: LD_VAR 0 2
63373: PUSH
63374: LD_VAR 0 9
63378: GREATER
63379: IFFALSE 63546
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
63381: LD_ADDR_VAR 0 6
63385: PUSH
63386: LD_VAR 0 5
63390: PPUSH
63391: LD_INT 91
63393: PUSH
63394: LD_VAR 0 4
63398: PUSH
63399: LD_INT 12
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: PPUSH
63407: CALL_OW 72
63411: ST_TO_ADDR
// if nearEnemy then
63412: LD_VAR 0 6
63416: IFFALSE 63444
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63418: LD_VAR 0 4
63422: PPUSH
63423: LD_VAR 0 6
63427: PPUSH
63428: LD_VAR 0 4
63432: PPUSH
63433: CALL_OW 74
63437: PPUSH
63438: CALL_OW 115
63442: GO 63544
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63444: LD_VAR 0 4
63448: PPUSH
63449: LD_VAR 0 2
63453: PUSH
63454: LD_VAR 0 9
63458: ARRAY
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PPUSH
63464: LD_VAR 0 2
63468: PUSH
63469: LD_VAR 0 9
63473: ARRAY
63474: PUSH
63475: LD_INT 2
63477: ARRAY
63478: PPUSH
63479: CALL_OW 297
63483: PUSH
63484: LD_INT 6
63486: GREATER
63487: IFFALSE 63530
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63489: LD_VAR 0 4
63493: PPUSH
63494: LD_VAR 0 2
63498: PUSH
63499: LD_VAR 0 9
63503: ARRAY
63504: PUSH
63505: LD_INT 1
63507: ARRAY
63508: PPUSH
63509: LD_VAR 0 2
63513: PUSH
63514: LD_VAR 0 9
63518: ARRAY
63519: PUSH
63520: LD_INT 2
63522: ARRAY
63523: PPUSH
63524: CALL_OW 114
63528: GO 63544
// SetTag ( i , tag ) ;
63530: LD_VAR 0 4
63534: PPUSH
63535: LD_VAR 0 9
63539: PPUSH
63540: CALL_OW 109
// end else
63544: GO 63576
// if enemy then
63546: LD_VAR 0 5
63550: IFFALSE 63576
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63552: LD_VAR 0 4
63556: PPUSH
63557: LD_VAR 0 5
63561: PPUSH
63562: LD_VAR 0 4
63566: PPUSH
63567: CALL_OW 74
63571: PPUSH
63572: CALL_OW 115
// end ;
63576: GO 63253
63578: POP
63579: POP
// end ;
63580: LD_VAR 0 3
63584: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63585: LD_INT 0
63587: PPUSH
63588: PPUSH
63589: PPUSH
// if not unit or IsInUnit ( unit ) then
63590: LD_VAR 0 1
63594: NOT
63595: PUSH
63596: LD_VAR 0 1
63600: PPUSH
63601: CALL_OW 310
63605: OR
63606: IFFALSE 63610
// exit ;
63608: GO 63701
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63610: LD_ADDR_VAR 0 4
63614: PUSH
63615: LD_VAR 0 1
63619: PPUSH
63620: CALL_OW 250
63624: PPUSH
63625: LD_VAR 0 2
63629: PPUSH
63630: LD_INT 1
63632: PPUSH
63633: CALL_OW 272
63637: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63638: LD_ADDR_VAR 0 5
63642: PUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: CALL_OW 251
63652: PPUSH
63653: LD_VAR 0 2
63657: PPUSH
63658: LD_INT 1
63660: PPUSH
63661: CALL_OW 273
63665: ST_TO_ADDR
// if ValidHex ( x , y ) then
63666: LD_VAR 0 4
63670: PPUSH
63671: LD_VAR 0 5
63675: PPUSH
63676: CALL_OW 488
63680: IFFALSE 63701
// ComTurnXY ( unit , x , y ) ;
63682: LD_VAR 0 1
63686: PPUSH
63687: LD_VAR 0 4
63691: PPUSH
63692: LD_VAR 0 5
63696: PPUSH
63697: CALL_OW 118
// end ;
63701: LD_VAR 0 3
63705: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63706: LD_INT 0
63708: PPUSH
63709: PPUSH
// result := false ;
63710: LD_ADDR_VAR 0 3
63714: PUSH
63715: LD_INT 0
63717: ST_TO_ADDR
// if not units then
63718: LD_VAR 0 2
63722: NOT
63723: IFFALSE 63727
// exit ;
63725: GO 63772
// for i in units do
63727: LD_ADDR_VAR 0 4
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: FOR_IN
63738: IFFALSE 63770
// if See ( side , i ) then
63740: LD_VAR 0 1
63744: PPUSH
63745: LD_VAR 0 4
63749: PPUSH
63750: CALL_OW 292
63754: IFFALSE 63768
// begin result := true ;
63756: LD_ADDR_VAR 0 3
63760: PUSH
63761: LD_INT 1
63763: ST_TO_ADDR
// exit ;
63764: POP
63765: POP
63766: GO 63772
// end ;
63768: GO 63737
63770: POP
63771: POP
// end ;
63772: LD_VAR 0 3
63776: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63777: LD_INT 0
63779: PPUSH
63780: PPUSH
63781: PPUSH
63782: PPUSH
// if not unit or not points then
63783: LD_VAR 0 1
63787: NOT
63788: PUSH
63789: LD_VAR 0 2
63793: NOT
63794: OR
63795: IFFALSE 63799
// exit ;
63797: GO 63889
// dist := 99999 ;
63799: LD_ADDR_VAR 0 5
63803: PUSH
63804: LD_INT 99999
63806: ST_TO_ADDR
// for i in points do
63807: LD_ADDR_VAR 0 4
63811: PUSH
63812: LD_VAR 0 2
63816: PUSH
63817: FOR_IN
63818: IFFALSE 63887
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63820: LD_ADDR_VAR 0 6
63824: PUSH
63825: LD_VAR 0 1
63829: PPUSH
63830: LD_VAR 0 4
63834: PUSH
63835: LD_INT 1
63837: ARRAY
63838: PPUSH
63839: LD_VAR 0 4
63843: PUSH
63844: LD_INT 2
63846: ARRAY
63847: PPUSH
63848: CALL_OW 297
63852: ST_TO_ADDR
// if tmpDist < dist then
63853: LD_VAR 0 6
63857: PUSH
63858: LD_VAR 0 5
63862: LESS
63863: IFFALSE 63885
// begin result := i ;
63865: LD_ADDR_VAR 0 3
63869: PUSH
63870: LD_VAR 0 4
63874: ST_TO_ADDR
// dist := tmpDist ;
63875: LD_ADDR_VAR 0 5
63879: PUSH
63880: LD_VAR 0 6
63884: ST_TO_ADDR
// end ; end ;
63885: GO 63817
63887: POP
63888: POP
// end ; end_of_file
63889: LD_VAR 0 3
63893: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63894: LD_VAR 0 1
63898: PUSH
63899: LD_INT 200
63901: DOUBLE
63902: GREATEREQUAL
63903: IFFALSE 63911
63905: LD_INT 299
63907: DOUBLE
63908: LESSEQUAL
63909: IFTRUE 63913
63911: GO 63945
63913: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63914: LD_VAR 0 1
63918: PPUSH
63919: LD_VAR 0 2
63923: PPUSH
63924: LD_VAR 0 3
63928: PPUSH
63929: LD_VAR 0 4
63933: PPUSH
63934: LD_VAR 0 5
63938: PPUSH
63939: CALL 19541 0 5
63943: GO 64022
63945: LD_INT 300
63947: DOUBLE
63948: GREATEREQUAL
63949: IFFALSE 63957
63951: LD_INT 399
63953: DOUBLE
63954: LESSEQUAL
63955: IFTRUE 63959
63957: GO 64021
63959: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63960: LD_VAR 0 1
63964: PPUSH
63965: LD_VAR 0 2
63969: PPUSH
63970: LD_VAR 0 3
63974: PPUSH
63975: LD_VAR 0 4
63979: PPUSH
63980: LD_VAR 0 5
63984: PPUSH
63985: LD_VAR 0 6
63989: PPUSH
63990: LD_VAR 0 7
63994: PPUSH
63995: LD_VAR 0 8
63999: PPUSH
64000: LD_VAR 0 9
64004: PPUSH
64005: LD_VAR 0 10
64009: PPUSH
64010: LD_VAR 0 11
64014: PPUSH
64015: CALL 17183 0 11
64019: GO 64022
64021: POP
// end ;
64022: PPOPN 11
64024: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64025: LD_VAR 0 1
64029: PPUSH
64030: LD_VAR 0 2
64034: PPUSH
64035: LD_VAR 0 3
64039: PPUSH
64040: LD_VAR 0 4
64044: PPUSH
64045: LD_VAR 0 5
64049: PPUSH
64050: CALL 19277 0 5
// end ; end_of_file
64054: PPOPN 5
64056: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64057: LD_VAR 0 1
64061: PPUSH
64062: LD_VAR 0 2
64066: PPUSH
64067: LD_VAR 0 3
64071: PPUSH
64072: LD_VAR 0 4
64076: PPUSH
64077: LD_VAR 0 5
64081: PPUSH
64082: LD_VAR 0 6
64086: PPUSH
64087: CALL 4876 0 6
// end ;
64091: PPOPN 6
64093: END
