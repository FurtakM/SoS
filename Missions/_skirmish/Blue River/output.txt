// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
  11: LD_INT 0
  13: PPUSH
  14: LD_INT 0
  16: PPUSH
  17: LD_INT 7
  19: PPUSH
  20: LD_INT 37963
  22: NEG
  23: PPUSH
  24: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  28: LD_INT 0
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 7
  36: PPUSH
  37: CALL_OW 331
// PrepareBase ;
  41: CALL 514 0 0
// Action ;
  45: CALL 54 0 0
// SaveForQuickRestart ;
  49: CALL_OW 22
// end ;
  53: END
// function Action ; var un , f , i ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
// SetBName ( brave , brave ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_STRING brave
  65: PPUSH
  66: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL_OW 274
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_INT 6000
  96: PUSH
  97: LD_INT 4500
  99: PUSH
 100: LD_INT 3000
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PUSH
 108: LD_OWVAR 67
 112: ARRAY
 113: PPUSH
 114: CALL_OW 277
// InGameOn ;
 118: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 122: LD_INT 1
 124: PPUSH
 125: CALL_OW 87
// Say ( com , DJack1 ) ;
 129: LD_EXP 1
 133: PPUSH
 134: LD_STRING DJack1
 136: PPUSH
 137: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 141: LD_EXP 3
 145: PPUSH
 146: LD_STRING DUn1
 148: PPUSH
 149: CALL_OW 88
// Say ( com , DJack2 ) ;
 153: LD_EXP 1
 157: PPUSH
 158: LD_STRING DJack2
 160: PPUSH
 161: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 165: LD_EXP 3
 169: PPUSH
 170: LD_STRING DUn2
 172: PPUSH
 173: CALL_OW 88
// Say ( com , DJack3 ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_STRING DJack3
 184: PPUSH
 185: CALL_OW 88
// uc_side := 7 ;
 189: LD_ADDR_OWVAR 20
 193: PUSH
 194: LD_INT 7
 196: ST_TO_ADDR
// uc_nation := 1 ;
 197: LD_ADDR_OWVAR 21
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 205: LD_INT 1
 207: PPUSH
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 380
// hc_name :=  ;
 218: LD_ADDR_OWVAR 26
 222: PUSH
 223: LD_STRING 
 225: ST_TO_ADDR
// un := CreateHuman ;
 226: LD_ADDR_VAR 0 2
 230: PUSH
 231: CALL_OW 44
 235: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 236: LD_INT 105
 238: PPUSH
 239: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 243: LD_VAR 0 2
 247: PPUSH
 248: LD_STRING DRadio1
 250: PPUSH
 251: CALL_OW 94
// Say ( com , DJack4 ) ;
 255: LD_EXP 1
 259: PPUSH
 260: LD_STRING DJack4
 262: PPUSH
 263: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 267: LD_VAR 0 2
 271: PPUSH
 272: LD_STRING DRadio2
 274: PPUSH
 275: CALL_OW 94
// Wait ( 0 0$01 ) ;
 279: LD_INT 35
 281: PPUSH
 282: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_STRING DDoc1
 293: PPUSH
 294: CALL_OW 94
// Say ( com , DJack5 ) ;
 298: LD_EXP 1
 302: PPUSH
 303: LD_STRING DJack5
 305: PPUSH
 306: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 310: LD_EXP 2
 314: PPUSH
 315: LD_STRING DDoc2
 317: PPUSH
 318: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 322: LD_VAR 0 2
 326: PPUSH
 327: LD_STRING DRadio3
 329: PPUSH
 330: CALL_OW 94
// Say ( com , DJack6 ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_STRING DJack6
 341: PPUSH
 342: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 346: LD_ADDR_VAR 0 3
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 7
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: ST_TO_ADDR
// for i = 2 to f do
 380: LD_ADDR_VAR 0 4
 384: PUSH
 385: DOUBLE
 386: LD_INT 2
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 3
 394: PUSH
 395: FOR_TO
 396: IFFALSE 453
// begin ComExitBuilding ( f [ i ] ) ;
 398: LD_VAR 0 3
 402: PUSH
 403: LD_VAR 0 4
 407: ARRAY
 408: PPUSH
 409: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 413: LD_VAR 0 3
 417: PUSH
 418: LD_VAR 0 4
 422: ARRAY
 423: PPUSH
 424: LD_INT 7
 426: PPUSH
 427: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ARRAY
 441: PPUSH
 442: LD_EXP 1
 446: PPUSH
 447: CALL_OW 179
// end ;
 451: GO 395
 453: POP
 454: POP
// ComExitBuilding ( com ) ;
 455: LD_EXP 1
 459: PPUSH
 460: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 45
 471: PPUSH
 472: LD_INT 32
 474: PPUSH
 475: CALL_OW 178
// Wait ( 0 0$03 ) ;
 479: LD_INT 105
 481: PPUSH
 482: CALL_OW 67
// Say ( com , DJack7 ) ;
 486: LD_EXP 1
 490: PPUSH
 491: LD_STRING DJack7
 493: PPUSH
 494: CALL_OW 88
// InGameOff ;
 498: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 502: LD_STRING TDef
 504: PPUSH
 505: CALL_OW 337
// end ; end_of_file
 509: LD_VAR 0 1
 513: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 514: LD_INT 0
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 520: LD_INT 30
 522: PPUSH
 523: LD_INT 14
 525: PPUSH
 526: LD_INT 7
 528: PPUSH
 529: LD_INT 20
 531: PPUSH
 532: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 536: LD_INT 49
 538: PPUSH
 539: LD_INT 17
 541: PPUSH
 542: LD_INT 7
 544: PPUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 552: LD_INT 35
 554: PPUSH
 555: LD_INT 46
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 568: LD_INT 70
 570: PPUSH
 571: LD_INT 39
 573: PPUSH
 574: LD_INT 7
 576: PPUSH
 577: LD_INT 20
 579: PPUSH
 580: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 584: LD_INT 30
 586: PPUSH
 587: LD_INT 14
 589: PPUSH
 590: LD_INT 7
 592: PPUSH
 593: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 597: LD_INT 49
 599: PPUSH
 600: LD_INT 17
 602: PPUSH
 603: LD_INT 7
 605: PPUSH
 606: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 610: LD_INT 35
 612: PPUSH
 613: LD_INT 46
 615: PPUSH
 616: LD_INT 7
 618: PPUSH
 619: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 623: LD_INT 70
 625: PPUSH
 626: LD_INT 39
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: CALL_OW 331
// uc_side := 7 ;
 636: LD_ADDR_OWVAR 20
 640: PUSH
 641: LD_INT 7
 643: ST_TO_ADDR
// uc_nation := 1 ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// if Difficulty < 3 then
 652: LD_OWVAR 67
 656: PUSH
 657: LD_INT 3
 659: LESS
 660: IFFALSE 761
// begin for i = 1 to 2 do
 662: LD_ADDR_VAR 0 2
 666: PUSH
 667: DOUBLE
 668: LD_INT 1
 670: DEC
 671: ST_TO_ADDR
 672: LD_INT 2
 674: PUSH
 675: FOR_TO
 676: IFFALSE 757
// begin vc_chassis := us_heavy_tracked ;
 678: LD_ADDR_OWVAR 37
 682: PUSH
 683: LD_INT 4
 685: ST_TO_ADDR
// vc_engine := 3 ;
 686: LD_ADDR_OWVAR 39
 690: PUSH
 691: LD_INT 3
 693: ST_TO_ADDR
// vc_control := control_computer ;
 694: LD_ADDR_OWVAR 38
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 702: LD_ADDR_OWVAR 40
 706: PUSH
 707: LD_INT 10
 709: ST_TO_ADDR
// un := CreateVehicle ;
 710: LD_ADDR_VAR 0 3
 714: PUSH
 715: CALL_OW 45
 719: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 720: LD_VAR 0 3
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: LD_INT 5
 730: PPUSH
 731: CALL_OW 12
 735: PPUSH
 736: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 740: LD_VAR 0 3
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 675
 757: POP
 758: POP
// end else
 759: GO 850
// begin vc_chassis := us_medium_tracked ;
 761: LD_ADDR_OWVAR 37
 765: PUSH
 766: LD_INT 3
 768: ST_TO_ADDR
// vc_engine := engine_combustion ;
 769: LD_ADDR_OWVAR 39
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// vc_control := control_manual ;
 777: LD_ADDR_OWVAR 38
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 785: LD_ADDR_OWVAR 40
 789: PUSH
 790: LD_INT 4
 792: ST_TO_ADDR
// un := CreateVehicle ;
 793: LD_ADDR_VAR 0 3
 797: PUSH
 798: CALL_OW 45
 802: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 803: LD_VAR 0 3
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 5
 813: PPUSH
 814: CALL_OW 12
 818: PPUSH
 819: CALL_OW 233
// SetFuel ( un , 75 ) ;
 823: LD_VAR 0 3
 827: PPUSH
 828: LD_INT 75
 830: PPUSH
 831: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 835: LD_VAR 0 3
 839: PPUSH
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 850: LD_ADDR_VAR 0 4
 854: PUSH
 855: LD_INT 8
 857: PUSH
 858: LD_INT 7
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_OWVAR 67
 873: ARRAY
 874: ST_TO_ADDR
// hc_importance := 100 ;
 875: LD_ADDR_OWVAR 32
 879: PUSH
 880: LD_INT 100
 882: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_VAR 0 4
 893: PPUSH
 894: CALL_OW 380
// hc_name := Jack Collins ;
 898: LD_ADDR_OWVAR 26
 902: PUSH
 903: LD_STRING Jack Collins
 905: ST_TO_ADDR
// com := CreateHuman ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: CALL_OW 44
 915: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 916: LD_EXP 1
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL_OW 52
// hc_importance := 0 ;
 928: LD_ADDR_OWVAR 32
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// hc_gallery :=  ;
 936: LD_ADDR_OWVAR 33
 940: PUSH
 941: LD_STRING 
 943: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 4
 954: PPUSH
 955: CALL_OW 380
// hc_name := Thomas Jackson ;
 959: LD_ADDR_OWVAR 26
 963: PUSH
 964: LD_STRING Thomas Jackson
 966: ST_TO_ADDR
// k1 := CreateHuman ;
 967: LD_ADDR_EXP 3
 971: PUSH
 972: CALL_OW 44
 976: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
 977: LD_EXP 3
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 52
// hc_name :=  ;
 989: LD_ADDR_OWVAR 26
 993: PUSH
 994: LD_STRING 
 996: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
 997: LD_ADDR_VAR 0 2
1001: PUSH
1002: DOUBLE
1003: LD_INT 1
1005: DEC
1006: ST_TO_ADDR
1007: LD_INT 9
1009: PUSH
1010: LD_INT 8
1012: PUSH
1013: LD_INT 7
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: PUSH
1021: LD_OWVAR 67
1025: ARRAY
1026: PUSH
1027: FOR_TO
1028: IFFALSE 1199
// begin Randomize ;
1030: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 12
1059: ARRAY
1060: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1061: LD_INT 0
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_INT 4
1069: PPUSH
1070: CALL_OW 12
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 380
// un := CreateHuman ;
1084: LD_ADDR_VAR 0 3
1088: PUSH
1089: CALL_OW 44
1093: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1094: LD_VAR 0 3
1098: PPUSH
1099: CALL_OW 257
1103: PUSH
1104: LD_INT 1
1106: DOUBLE
1107: EQUAL
1108: IFTRUE 1112
1110: GO 1127
1112: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1113: LD_VAR 0 3
1117: PPUSH
1118: LD_INT 21
1120: PPUSH
1121: CALL_OW 52
1125: GO 1197
1127: LD_INT 2
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1150
1135: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1136: LD_VAR 0 3
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: CALL_OW 52
1148: GO 1197
1150: LD_INT 3
1152: DOUBLE
1153: EQUAL
1154: IFTRUE 1158
1156: GO 1173
1158: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_INT 38
1166: PPUSH
1167: CALL_OW 52
1171: GO 1197
1173: LD_INT 4
1175: DOUBLE
1176: EQUAL
1177: IFTRUE 1181
1179: GO 1196
1181: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1182: LD_VAR 0 3
1186: PPUSH
1187: LD_INT 36
1189: PPUSH
1190: CALL_OW 52
1194: GO 1197
1196: POP
// end ;
1197: GO 1027
1199: POP
1200: POP
// uc_side := 2 ;
1201: LD_ADDR_OWVAR 20
1205: PUSH
1206: LD_INT 2
1208: ST_TO_ADDR
// uc_nation := 2 ;
1209: LD_ADDR_OWVAR 21
1213: PUSH
1214: LD_INT 2
1216: ST_TO_ADDR
// hc_name := _ ;
1217: LD_ADDR_OWVAR 26
1221: PUSH
1222: LD_STRING _
1224: ST_TO_ADDR
// hc_gallery :=  ;
1225: LD_ADDR_OWVAR 33
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// hc_class := 4 ;
1233: LD_ADDR_OWVAR 28
1237: PUSH
1238: LD_INT 4
1240: ST_TO_ADDR
// hc_sex := sex_male ;
1241: LD_ADDR_OWVAR 27
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// doc := CreateHuman ;
1249: LD_ADDR_EXP 2
1253: PUSH
1254: CALL_OW 44
1258: ST_TO_ADDR
// end ; end_of_file
1259: LD_VAR 0 1
1263: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1264: LD_INT 0
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
// uc_side := 2 ;
1270: LD_ADDR_OWVAR 20
1274: PUSH
1275: LD_INT 2
1277: ST_TO_ADDR
// uc_nation := 2 ;
1278: LD_ADDR_OWVAR 21
1282: PUSH
1283: LD_INT 2
1285: ST_TO_ADDR
// tmp := [ ] ;
1286: LD_ADDR_VAR 0 5
1290: PUSH
1291: EMPTY
1292: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1293: LD_ADDR_OWVAR 31
1297: PUSH
1298: LD_INT 3
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: LD_INT 10
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: PUSH
1312: LD_OWVAR 67
1316: ARRAY
1317: PUSH
1318: LD_INT 3
1320: PUSH
1321: LD_INT 6
1323: PUSH
1324: LD_INT 10
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: PUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 6
1343: PUSH
1344: LD_INT 10
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_OWVAR 67
1356: ARRAY
1357: PUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 6
1363: PUSH
1364: LD_INT 10
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: LD_OWVAR 67
1376: ARRAY
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1384: LD_INT 4
1386: PPUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 7
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: IFFALSE 1442
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: LD_INT 4
1410: PPUSH
1411: LD_INT 22
1413: PUSH
1414: LD_INT 7
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: PUSH
1426: FOR_IN
1427: IFFALSE 1440
// RemoveUnit ( i ) ;
1429: LD_VAR 0 3
1433: PPUSH
1434: CALL_OW 64
1438: GO 1426
1440: POP
1441: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1442: LD_INT 5
1444: PPUSH
1445: LD_INT 22
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PPUSH
1455: CALL_OW 70
1459: IFFALSE 1500
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: LD_INT 5
1468: PPUSH
1469: LD_INT 22
1471: PUSH
1472: LD_INT 7
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 70
1483: PUSH
1484: FOR_IN
1485: IFFALSE 1498
// RemoveUnit ( i ) ;
1487: LD_VAR 0 3
1491: PPUSH
1492: CALL_OW 64
1496: GO 1484
1498: POP
1499: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 22
1505: PUSH
1506: LD_INT 7
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: CALL_OW 70
1517: IFFALSE 1558
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: LD_INT 1
1526: PPUSH
1527: LD_INT 22
1529: PUSH
1530: LD_INT 7
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 70
1541: PUSH
1542: FOR_IN
1543: IFFALSE 1556
// RemoveUnit ( i ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: CALL_OW 64
1554: GO 1542
1556: POP
1557: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1558: LD_INT 2
1560: PPUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PPUSH
1571: CALL_OW 70
1575: IFFALSE 1616
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1577: LD_ADDR_VAR 0 3
1581: PUSH
1582: LD_INT 2
1584: PPUSH
1585: LD_INT 22
1587: PUSH
1588: LD_INT 7
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 70
1599: PUSH
1600: FOR_IN
1601: IFFALSE 1614
// RemoveUnit ( i ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: CALL_OW 64
1612: GO 1600
1614: POP
1615: POP
// case num of 1 :
1616: LD_VAR 0 1
1620: PUSH
1621: LD_INT 1
1623: DOUBLE
1624: EQUAL
1625: IFTRUE 1629
1627: GO 1882
1629: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: DOUBLE
1636: LD_INT 1
1638: DEC
1639: ST_TO_ADDR
1640: LD_INT 5
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: LD_INT 6
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_OWVAR 67
1658: ARRAY
1659: PUSH
1660: FOR_TO
1661: IFFALSE 1753
// begin uc_nation := 0 ;
1663: LD_ADDR_OWVAR 21
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1671: LD_ADDR_OWVAR 28
1675: PUSH
1676: LD_INT 15
1678: ST_TO_ADDR
// hc_gallery :=  ;
1679: LD_ADDR_OWVAR 33
1683: PUSH
1684: LD_STRING 
1686: ST_TO_ADDR
// hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1695: LD_ADDR_OWVAR 29
1699: PUSH
1700: LD_INT 16
1702: PUSH
1703: LD_INT 12
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// un := CreateHuman ;
1710: LD_ADDR_VAR 0 4
1714: PUSH
1715: CALL_OW 44
1719: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1720: LD_VAR 0 4
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// tmp := tmp ^ un ;
1735: LD_ADDR_VAR 0 5
1739: PUSH
1740: LD_VAR 0 5
1744: PUSH
1745: LD_VAR 0 4
1749: ADD
1750: ST_TO_ADDR
// end ;
1751: GO 1660
1753: POP
1754: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1755: LD_ADDR_VAR 0 3
1759: PUSH
1760: DOUBLE
1761: LD_INT 1
1763: DEC
1764: ST_TO_ADDR
1765: LD_INT 4
1767: PUSH
1768: LD_INT 5
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PUSH
1785: FOR_TO
1786: IFFALSE 1878
// begin uc_nation := 0 ;
1788: LD_ADDR_OWVAR 21
1792: PUSH
1793: LD_INT 0
1795: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1796: LD_ADDR_OWVAR 28
1800: PUSH
1801: LD_INT 15
1803: ST_TO_ADDR
// hc_gallery :=  ;
1804: LD_ADDR_OWVAR 33
1808: PUSH
1809: LD_STRING 
1811: ST_TO_ADDR
// hc_name :=  ;
1812: LD_ADDR_OWVAR 26
1816: PUSH
1817: LD_STRING 
1819: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1820: LD_ADDR_OWVAR 29
1824: PUSH
1825: LD_INT 16
1827: PUSH
1828: LD_INT 12
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: ST_TO_ADDR
// un := CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: CALL_OW 44
1844: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 5
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// tmp := tmp ^ un ;
1860: LD_ADDR_VAR 0 5
1864: PUSH
1865: LD_VAR 0 5
1869: PUSH
1870: LD_VAR 0 4
1874: ADD
1875: ST_TO_ADDR
// end ;
1876: GO 1785
1878: POP
1879: POP
// end ; 2 :
1880: GO 2660
1882: LD_INT 2
1884: DOUBLE
1885: EQUAL
1886: IFTRUE 1890
1888: GO 2018
1890: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_INT 3
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: LD_INT 5
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: LD_OWVAR 67
1919: ARRAY
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2014
// begin uc_nation := 0 ;
1924: LD_ADDR_OWVAR 21
1928: PUSH
1929: LD_INT 0
1931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1932: LD_ADDR_OWVAR 28
1936: PUSH
1937: LD_INT 17
1939: ST_TO_ADDR
// hc_gallery :=  ;
1940: LD_ADDR_OWVAR 33
1944: PUSH
1945: LD_STRING 
1947: ST_TO_ADDR
// hc_name :=  ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING 
1955: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 12
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// un := CreateHuman ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: CALL_OW 44
1980: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
1981: LD_VAR 0 4
1985: PPUSH
1986: LD_INT 3
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// tmp := tmp ^ un ;
1996: LD_ADDR_VAR 0 5
2000: PUSH
2001: LD_VAR 0 5
2005: PUSH
2006: LD_VAR 0 4
2010: ADD
2011: ST_TO_ADDR
// end ;
2012: GO 1921
2014: POP
2015: POP
// end ; 3 :
2016: GO 2660
2018: LD_INT 3
2020: DOUBLE
2021: EQUAL
2022: IFTRUE 2026
2024: GO 2186
2026: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_INT 4
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: LD_INT 6
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: PUSH
2051: LD_OWVAR 67
2055: ARRAY
2056: PUSH
2057: FOR_TO
2058: IFFALSE 2182
// begin uc_nation := 2 ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2068: LD_ADDR_OWVAR 37
2072: PUSH
2073: LD_INT 14
2075: ST_TO_ADDR
// vc_engine := 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control := control_apeman ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 5
2091: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 27
2099: PUSH
2100: LD_INT 28
2102: PUSH
2103: LD_INT 29
2105: PUSH
2106: LD_INT 91
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// un := CreateVehicle ;
2127: LD_ADDR_VAR 0 4
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// tmp := tmp ^ un ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 5
2146: PUSH
2147: LD_VAR 0 4
2151: ADD
2152: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2165: LD_VAR 0 4
2169: PPUSH
2170: LD_INT 2
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: CALL_OW 49
// end ;
2180: GO 2057
2182: POP
2183: POP
// end ; 4 :
2184: GO 2660
2186: LD_INT 4
2188: DOUBLE
2189: EQUAL
2190: IFTRUE 2194
2192: GO 2362
2194: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2195: LD_ADDR_VAR 0 3
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_INT 3
2207: PPUSH
2208: LD_INT 4
2210: PUSH
2211: LD_INT 5
2213: PUSH
2214: LD_INT 6
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: PUSH
2222: LD_OWVAR 67
2226: ARRAY
2227: PPUSH
2228: CALL_OW 12
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2358
// begin uc_nation := 2 ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2244: LD_ADDR_OWVAR 37
2248: PUSH
2249: LD_INT 14
2251: ST_TO_ADDR
// vc_engine := 3 ;
2252: LD_ADDR_OWVAR 39
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// vc_control := control_apeman ;
2260: LD_ADDR_OWVAR 38
2264: PUSH
2265: LD_INT 5
2267: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2268: LD_ADDR_OWVAR 40
2272: PUSH
2273: LD_INT 27
2275: PUSH
2276: LD_INT 28
2278: PUSH
2279: LD_INT 29
2281: PUSH
2282: LD_INT 91
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 1
2293: PPUSH
2294: LD_INT 4
2296: PPUSH
2297: CALL_OW 12
2301: ARRAY
2302: ST_TO_ADDR
// un := CreateVehicle ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: CALL_OW 45
2312: ST_TO_ADDR
// tmp := tmp ^ un ;
2313: LD_ADDR_VAR 0 5
2317: PUSH
2318: LD_VAR 0 5
2322: PUSH
2323: LD_VAR 0 4
2327: ADD
2328: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2329: LD_VAR 0 4
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2341: LD_VAR 0 4
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 0
2351: PPUSH
2352: CALL_OW 49
// end ;
2356: GO 2233
2358: POP
2359: POP
// end ; 5 :
2360: GO 2660
2362: LD_INT 5
2364: DOUBLE
2365: EQUAL
2366: IFTRUE 2370
2368: GO 2530
2370: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 3
2383: PUSH
2384: LD_INT 4
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_OWVAR 67
2399: ARRAY
2400: PUSH
2401: FOR_TO
2402: IFFALSE 2526
// begin uc_nation := 2 ;
2404: LD_ADDR_OWVAR 21
2408: PUSH
2409: LD_INT 2
2411: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2412: LD_ADDR_OWVAR 37
2416: PUSH
2417: LD_INT 14
2419: ST_TO_ADDR
// vc_engine := 3 ;
2420: LD_ADDR_OWVAR 39
2424: PUSH
2425: LD_INT 3
2427: ST_TO_ADDR
// vc_control := control_apeman ;
2428: LD_ADDR_OWVAR 38
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2436: LD_ADDR_OWVAR 40
2440: PUSH
2441: LD_INT 27
2443: PUSH
2444: LD_INT 28
2446: PUSH
2447: LD_INT 29
2449: PUSH
2450: LD_INT 91
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 4
2464: PPUSH
2465: CALL_OW 12
2469: ARRAY
2470: ST_TO_ADDR
// un := CreateVehicle ;
2471: LD_ADDR_VAR 0 4
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// tmp := tmp ^ un ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_VAR 0 5
2490: PUSH
2491: LD_VAR 0 4
2495: ADD
2496: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_INT 4
2504: PPUSH
2505: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2509: LD_VAR 0 4
2513: PPUSH
2514: LD_INT 5
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: CALL_OW 49
// end ;
2524: GO 2401
2526: POP
2527: POP
// end ; 6 :
2528: GO 2660
2530: LD_INT 6
2532: DOUBLE
2533: EQUAL
2534: IFTRUE 2538
2536: GO 2659
2538: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: DOUBLE
2545: LD_INT 1
2547: DEC
2548: ST_TO_ADDR
2549: LD_INT 2
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: LD_INT 4
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: LD_OWVAR 67
2567: ARRAY
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2655
// begin uc_nation := 2 ;
2572: LD_ADDR_OWVAR 21
2576: PUSH
2577: LD_INT 2
2579: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2580: LD_ADDR_OWVAR 37
2584: PUSH
2585: LD_INT 11
2587: ST_TO_ADDR
// vc_engine := engine_combustion ;
2588: LD_ADDR_OWVAR 39
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// vc_control := control_apeman ;
2596: LD_ADDR_OWVAR 38
2600: PUSH
2601: LD_INT 5
2603: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2604: LD_ADDR_OWVAR 40
2608: PUSH
2609: LD_INT 24
2611: ST_TO_ADDR
// un := CreateVehicle ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: CALL_OW 45
2621: ST_TO_ADDR
// tmp := tmp ^ un ;
2622: LD_ADDR_VAR 0 5
2626: PUSH
2627: LD_VAR 0 5
2631: PUSH
2632: LD_VAR 0 4
2636: ADD
2637: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2638: LD_VAR 0 4
2642: PPUSH
2643: LD_INT 8
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 49
// end ;
2653: GO 2569
2655: POP
2656: POP
// end ; end ;
2657: GO 2660
2659: POP
// result := tmp ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_VAR 0 5
2669: ST_TO_ADDR
// end ;
2670: LD_VAR 0 2
2674: RET
// export function ComitSib ; var un ; begin
2675: LD_INT 0
2677: PPUSH
2678: PPUSH
// uc_side := 2 ;
2679: LD_ADDR_OWVAR 20
2683: PUSH
2684: LD_INT 2
2686: ST_TO_ADDR
// uc_nation := 2 ;
2687: LD_ADDR_OWVAR 21
2691: PUSH
2692: LD_INT 2
2694: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2695: LD_INT 0
2697: PPUSH
2698: LD_INT 4
2700: PPUSH
2701: LD_INT 7
2703: PPUSH
2704: CALL_OW 380
// un := CreateHuman ;
2708: LD_ADDR_VAR 0 2
2712: PUSH
2713: CALL_OW 44
2717: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2718: LD_VAR 0 2
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2733: LD_VAR 0 2
2737: PPUSH
2738: LD_INT 63
2740: PPUSH
2741: LD_INT 37
2743: PPUSH
2744: CALL_OW 158
// end ;
2748: LD_VAR 0 1
2752: RET
// export function DSay ; var i ; begin
2753: LD_INT 0
2755: PPUSH
2756: PPUSH
// Randomize ;
2757: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_INT 8
2771: PPUSH
2772: CALL_OW 12
2776: ST_TO_ADDR
// case i of 1 :
2777: LD_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: DOUBLE
2785: EQUAL
2786: IFTRUE 2790
2788: GO 2805
2790: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2791: LD_EXP 2
2795: PPUSH
2796: LD_STRING DDocA1
2798: PPUSH
2799: CALL_OW 94
2803: GO 2967
2805: LD_INT 2
2807: DOUBLE
2808: EQUAL
2809: IFTRUE 2813
2811: GO 2828
2813: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2814: LD_EXP 2
2818: PPUSH
2819: LD_STRING DDocA2
2821: PPUSH
2822: CALL_OW 94
2826: GO 2967
2828: LD_INT 3
2830: DOUBLE
2831: EQUAL
2832: IFTRUE 2836
2834: GO 2851
2836: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2837: LD_EXP 2
2841: PPUSH
2842: LD_STRING DDocA3
2844: PPUSH
2845: CALL_OW 94
2849: GO 2967
2851: LD_INT 4
2853: DOUBLE
2854: EQUAL
2855: IFTRUE 2859
2857: GO 2874
2859: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2860: LD_EXP 2
2864: PPUSH
2865: LD_STRING DDocA4
2867: PPUSH
2868: CALL_OW 94
2872: GO 2967
2874: LD_INT 5
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2897
2882: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2883: LD_EXP 2
2887: PPUSH
2888: LD_STRING DDocA5
2890: PPUSH
2891: CALL_OW 94
2895: GO 2967
2897: LD_INT 6
2899: DOUBLE
2900: EQUAL
2901: IFTRUE 2905
2903: GO 2920
2905: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2906: LD_EXP 2
2910: PPUSH
2911: LD_STRING DDocA6
2913: PPUSH
2914: CALL_OW 94
2918: GO 2967
2920: LD_INT 7
2922: DOUBLE
2923: EQUAL
2924: IFTRUE 2928
2926: GO 2943
2928: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2929: LD_EXP 2
2933: PPUSH
2934: LD_STRING DDocA7
2936: PPUSH
2937: CALL_OW 94
2941: GO 2967
2943: LD_INT 8
2945: DOUBLE
2946: EQUAL
2947: IFTRUE 2951
2949: GO 2966
2951: POP
// SayRadio ( doc , DDocA8 ) ; end ;
2952: LD_EXP 2
2956: PPUSH
2957: LD_STRING DDocA8
2959: PPUSH
2960: CALL_OW 94
2964: GO 2967
2966: POP
// end ; end_of_file
2967: LD_VAR 0 1
2971: RET
// every 0 0$01 do
2972: GO 2974
2974: DISABLE
// begin display_strings := [ #tick , tick ] ;
2975: LD_ADDR_OWVAR 47
2979: PUSH
2980: LD_STRING #tick
2982: PUSH
2983: LD_OWVAR 1
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// enable ;
2992: ENABLE
// end ;
2993: END
// export pom , hover , attackN ; every 1 do
2994: GO 2996
2996: DISABLE
// begin pom := [ ] ;
2997: LD_ADDR_EXP 4
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// hover := [ ] ;
3004: LD_ADDR_EXP 5
3008: PUSH
3009: EMPTY
3010: ST_TO_ADDR
// attackN := 0 ;
3011: LD_ADDR_EXP 6
3015: PUSH
3016: LD_INT 0
3018: ST_TO_ADDR
// end ;
3019: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3020: LD_EXP 4
3024: IFFALSE 3446
3026: GO 3028
3028: DISABLE
3029: LD_INT 0
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
// begin enable ;
3035: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3036: LD_ADDR_VAR 0 2
3040: PUSH
3041: LD_INT 22
3043: PUSH
3044: LD_INT 7
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// for i = 1 to pom do
3056: LD_ADDR_VAR 0 1
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_EXP 4
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3130
// if not HasTask ( pom [ i ] ) then
3074: LD_EXP 4
3078: PUSH
3079: LD_VAR 0 1
3083: ARRAY
3084: PPUSH
3085: CALL_OW 314
3089: NOT
3090: IFFALSE 3128
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3092: LD_EXP 4
3096: PUSH
3097: LD_VAR 0 1
3101: ARRAY
3102: PPUSH
3103: LD_VAR 0 2
3107: PPUSH
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: CALL_OW 74
3123: PPUSH
3124: CALL_OW 115
3128: GO 3071
3130: POP
3131: POP
// if hover then
3132: LD_EXP 5
3136: IFFALSE 3446
// begin for i = 1 to hover do
3138: LD_ADDR_VAR 0 1
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 5
3152: PUSH
3153: FOR_TO
3154: IFFALSE 3444
// begin if GetLives ( hover [ i ] ) < 250 then
3156: LD_EXP 5
3160: PUSH
3161: LD_VAR 0 1
3165: ARRAY
3166: PPUSH
3167: CALL_OW 256
3171: PUSH
3172: LD_INT 250
3174: LESS
3175: IFFALSE 3242
// begin for z = 1 to 1 + Difficulty do
3177: LD_ADDR_VAR 0 3
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 1
3189: PUSH
3190: LD_OWVAR 67
3194: PLUS
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3240
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3199: LD_EXP 5
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 5
3219: PUSH
3220: LD_VAR 0 1
3224: ARRAY
3225: PPUSH
3226: CALL_OW 251
3230: PPUSH
3231: LD_INT 10
3233: PPUSH
3234: CALL_OW 453
3238: GO 3196
3240: POP
3241: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3242: LD_VAR 0 2
3246: PPUSH
3247: LD_INT 25
3249: PUSH
3250: LD_INT 2
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: LD_INT 54
3262: PUSH
3263: EMPTY
3264: LIST
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 72
3278: PUSH
3279: LD_INT 0
3281: GREATER
3282: IFFALSE 3364
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3284: LD_ADDR_VAR 0 4
3288: PUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_INT 25
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 54
3309: PUSH
3310: EMPTY
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PPUSH
3321: CALL_OW 72
3325: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3326: LD_EXP 5
3330: PUSH
3331: LD_VAR 0 1
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_EXP 5
3346: PUSH
3347: LD_VAR 0 1
3351: ARRAY
3352: PPUSH
3353: CALL_OW 74
3357: PPUSH
3358: CALL_OW 115
// end else
3362: GO 3442
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3364: LD_ADDR_VAR 0 4
3368: PUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_INT 21
3376: PUSH
3377: LD_INT 1
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 3
3386: PUSH
3387: LD_INT 54
3389: PUSH
3390: EMPTY
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 72
3405: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3406: LD_EXP 5
3410: PUSH
3411: LD_VAR 0 1
3415: ARRAY
3416: PPUSH
3417: LD_VAR 0 4
3421: PPUSH
3422: LD_EXP 5
3426: PUSH
3427: LD_VAR 0 1
3431: ARRAY
3432: PPUSH
3433: CALL_OW 74
3437: PPUSH
3438: CALL_OW 115
// end ; end ;
3442: GO 3153
3444: POP
3445: POP
// end ; end ;
3446: PPOPN 4
3448: END
// every 3 3$10 do var i , un ;
3449: GO 3451
3451: DISABLE
3452: LD_INT 0
3454: PPUSH
3455: PPUSH
// begin uc_side := 7 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 7
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// for i = 1 to 2 do
3472: LD_ADDR_VAR 0 1
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 2
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3651
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3488: LD_INT 1
3490: PPUSH
3491: LD_INT 5
3493: PPUSH
3494: LD_INT 7
3496: PUSH
3497: LD_INT 6
3499: PUSH
3500: LD_INT 6
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: PUSH
3508: LD_OWVAR 67
3512: ARRAY
3513: PPUSH
3514: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3518: LD_ADDR_OWVAR 37
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// vc_engine := engine_combustion ;
3526: LD_ADDR_OWVAR 39
3530: PUSH
3531: LD_INT 1
3533: ST_TO_ADDR
// vc_control := control_manual ;
3534: LD_ADDR_OWVAR 38
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3542: LD_ADDR_OWVAR 41
3546: PUSH
3547: LD_INT 66
3549: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3550: LD_ADDR_OWVAR 40
3554: PUSH
3555: LD_INT 2
3557: ST_TO_ADDR
// un := CreateVehicle ;
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: CALL_OW 45
3567: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3568: LD_VAR 0 2
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3580: LD_VAR 0 2
3584: PPUSH
3585: LD_INT 48
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 0
3593: PPUSH
3594: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3598: CALL_OW 44
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3612: LD_VAR 0 2
3616: PPUSH
3617: LD_INT 49
3619: PPUSH
3620: LD_INT 17
3622: PPUSH
3623: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3627: LD_VAR 0 2
3631: PPUSH
3632: LD_INT 48
3634: PPUSH
3635: LD_INT 36
3637: PPUSH
3638: CALL_OW 171
// Wait ( 0 0$02 ) ;
3642: LD_INT 70
3644: PPUSH
3645: CALL_OW 67
// end ;
3649: GO 3485
3651: POP
3652: POP
// end ;
3653: PPOPN 2
3655: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3656: LD_EXP 6
3660: PUSH
3661: LD_INT 10
3663: PUSH
3664: LD_INT 12
3666: PUSH
3667: LD_INT 14
3669: PUSH
3670: EMPTY
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_OWVAR 67
3679: ARRAY
3680: LESS
3681: IFFALSE 4383
3683: GO 3685
3685: DISABLE
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
// begin enable ;
3690: ENABLE
// Randomize ;
3691: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3695: LD_INT 35
3697: PPUSH
3698: LD_INT 6265
3700: PPUSH
3701: CALL_OW 12
3705: PPUSH
3706: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3710: LD_EXP 6
3714: PUSH
3715: LD_INT 4
3717: PUSH
3718: LD_INT 4
3720: PUSH
3721: LD_INT 5
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: PUSH
3729: LD_OWVAR 67
3733: ARRAY
3734: LESS
3735: IFFALSE 3755
// c := Rand ( 1 , 2 ) else
3737: LD_ADDR_VAR 0 1
3741: PUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 12
3752: ST_TO_ADDR
3753: GO 3771
// c := Rand ( 1 , 3 ) ;
3755: LD_ADDR_VAR 0 1
3759: PUSH
3760: LD_INT 1
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: CALL_OW 12
3770: ST_TO_ADDR
// if attackN = 0 then
3771: LD_EXP 6
3775: PUSH
3776: LD_INT 0
3778: EQUAL
3779: IFFALSE 3795
// Say ( com , DJackAttack ) else
3781: LD_EXP 1
3785: PPUSH
3786: LD_STRING DJackAttack
3788: PPUSH
3789: CALL_OW 88
3793: GO 3799
// DSay ;
3795: CALL 2753 0 0
// case c of 1 :
3799: LD_VAR 0 1
3803: PUSH
3804: LD_INT 1
3806: DOUBLE
3807: EQUAL
3808: IFTRUE 3812
3810: GO 3994
3812: POP
// begin pom := pom ^ Attack ( 1 ) ;
3813: LD_ADDR_EXP 4
3817: PUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL 1264 0 1
3830: ADD
3831: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3832: LD_INT 420
3834: PPUSH
3835: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3839: LD_ADDR_EXP 4
3843: PUSH
3844: LD_EXP 4
3848: PUSH
3849: LD_INT 3
3851: PPUSH
3852: CALL 1264 0 1
3856: ADD
3857: ST_TO_ADDR
// if Difficulty > 2 then
3858: LD_OWVAR 67
3862: PUSH
3863: LD_INT 2
3865: GREATER
3866: IFFALSE 3894
// begin Wait ( 0 0$46 ) ;
3868: LD_INT 1610
3870: PPUSH
3871: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3875: LD_ADDR_EXP 4
3879: PUSH
3880: LD_EXP 4
3884: PUSH
3885: LD_INT 4
3887: PPUSH
3888: CALL 1264 0 1
3892: ADD
3893: ST_TO_ADDR
// end ; if attackN > 4 then
3894: LD_EXP 6
3898: PUSH
3899: LD_INT 4
3901: GREATER
3902: IFFALSE 3930
// begin Wait ( 0 0$12 ) ;
3904: LD_INT 420
3906: PPUSH
3907: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3911: LD_ADDR_EXP 4
3915: PUSH
3916: LD_EXP 4
3920: PUSH
3921: LD_INT 3
3923: PPUSH
3924: CALL 1264 0 1
3928: ADD
3929: ST_TO_ADDR
// end ; if attackN > 8 then
3930: LD_EXP 6
3934: PUSH
3935: LD_INT 8
3937: GREATER
3938: IFFALSE 3992
// begin Wait ( 0 0$12 ) ;
3940: LD_INT 420
3942: PPUSH
3943: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3947: LD_ADDR_VAR 0 2
3951: PUSH
3952: LD_INT 0
3954: PPUSH
3955: LD_INT 100
3957: PPUSH
3958: CALL_OW 12
3962: ST_TO_ADDR
// if l < 45 then
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 45
3970: LESS
3971: IFFALSE 3992
// pom := pom ^ Attack ( 2 ) ;
3973: LD_ADDR_EXP 4
3977: PUSH
3978: LD_EXP 4
3982: PUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL 1264 0 1
3990: ADD
3991: ST_TO_ADDR
// end ; end ; 2 :
3992: GO 4281
3994: LD_INT 2
3996: DOUBLE
3997: EQUAL
3998: IFTRUE 4002
4000: GO 4150
4002: POP
// begin pom := pom ^ Attack ( 2 ) ;
4003: LD_ADDR_EXP 4
4007: PUSH
4008: LD_EXP 4
4012: PUSH
4013: LD_INT 2
4015: PPUSH
4016: CALL 1264 0 1
4020: ADD
4021: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4022: LD_ADDR_EXP 4
4026: PUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 3
4034: PPUSH
4035: CALL 1264 0 1
4039: ADD
4040: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4041: LD_OWVAR 67
4045: PUSH
4046: LD_INT 1
4048: GREATER
4049: PUSH
4050: LD_INT 63
4052: PPUSH
4053: LD_INT 37
4055: PPUSH
4056: CALL_OW 428
4060: PPUSH
4061: CALL_OW 266
4065: PUSH
4066: LD_INT 30
4068: EQUAL
4069: AND
4070: IFFALSE 4076
// ComitSib ;
4072: CALL 2675 0 0
// if Difficulty > 2 then
4076: LD_OWVAR 67
4080: PUSH
4081: LD_INT 2
4083: GREATER
4084: IFFALSE 4112
// begin Wait ( 0 0$25 ) ;
4086: LD_INT 875
4088: PPUSH
4089: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PUSH
4103: LD_INT 4
4105: PPUSH
4106: CALL 1264 0 1
4110: ADD
4111: ST_TO_ADDR
// end ; if attackN > 7 then
4112: LD_EXP 6
4116: PUSH
4117: LD_INT 7
4119: GREATER
4120: IFFALSE 4148
// begin Wait ( 0 0$15 ) ;
4122: LD_INT 525
4124: PPUSH
4125: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4129: LD_ADDR_EXP 4
4133: PUSH
4134: LD_EXP 4
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: CALL 1264 0 1
4146: ADD
4147: ST_TO_ADDR
// end ; end ; 3 :
4148: GO 4281
4150: LD_INT 3
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4280
4158: POP
// begin pom := pom ^ Attack ( 1 ) ;
4159: LD_ADDR_EXP 4
4163: PUSH
4164: LD_EXP 4
4168: PUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL 1264 0 1
4176: ADD
4177: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4178: LD_INT 70
4180: PPUSH
4181: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4185: LD_ADDR_EXP 4
4189: PUSH
4190: LD_EXP 4
4194: PUSH
4195: LD_INT 2
4197: PPUSH
4198: CALL 1264 0 1
4202: ADD
4203: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4204: LD_INT 2100
4206: PPUSH
4207: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4211: LD_ADDR_EXP 4
4215: PUSH
4216: LD_EXP 4
4220: PUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 1264 0 1
4228: ADD
4229: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4230: LD_ADDR_EXP 4
4234: PUSH
4235: LD_EXP 4
4239: PUSH
4240: LD_INT 5
4242: PPUSH
4243: CALL 1264 0 1
4247: ADD
4248: ST_TO_ADDR
// if attackN > 10 then
4249: LD_EXP 6
4253: PUSH
4254: LD_INT 10
4256: GREATER
4257: IFFALSE 4278
// pom := pom ^ Attack ( 2 ) ;
4259: LD_ADDR_EXP 4
4263: PUSH
4264: LD_EXP 4
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: CALL 1264 0 1
4276: ADD
4277: ST_TO_ADDR
// end ; end ;
4278: GO 4281
4280: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4281: LD_OWVAR 67
4285: PUSH
4286: LD_INT 1
4288: GREATER
4289: PUSH
4290: LD_EXP 6
4294: PUSH
4295: LD_INT 4
4297: MOD
4298: PUSH
4299: LD_INT 0
4301: EQUAL
4302: AND
4303: IFFALSE 4369
// begin Wait ( 1 1$45 ) ;
4305: LD_INT 3675
4307: PPUSH
4308: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4312: LD_ADDR_EXP 4
4316: PUSH
4317: LD_EXP 4
4321: PUSH
4322: LD_INT 3
4324: PPUSH
4325: CALL 1264 0 1
4329: ADD
4330: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4331: LD_ADDR_EXP 4
4335: PUSH
4336: LD_EXP 4
4340: PUSH
4341: LD_INT 4
4343: PPUSH
4344: CALL 1264 0 1
4348: ADD
4349: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4350: LD_ADDR_EXP 5
4354: PUSH
4355: LD_EXP 5
4359: PUSH
4360: LD_INT 6
4362: PPUSH
4363: CALL 1264 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4369: LD_ADDR_EXP 6
4373: PUSH
4374: LD_EXP 6
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: ST_TO_ADDR
// end ;
4383: PPOPN 2
4385: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4386: LD_EXP 6
4390: PUSH
4391: LD_INT 10
4393: PUSH
4394: LD_INT 12
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: PUSH
4405: LD_OWVAR 67
4409: ARRAY
4410: GREATEREQUAL
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 2
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: PUSH
4427: LD_INT 0
4429: EQUAL
4430: AND
4431: IFFALSE 4487
4433: GO 4435
4435: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4436: LD_EXP 2
4440: PPUSH
4441: LD_STRING DDocEnd
4443: PPUSH
4444: CALL_OW 94
// Wait ( 0 0$03 ) ;
4448: LD_INT 105
4450: PPUSH
4451: CALL_OW 67
// case Query ( QWin ) of 1 :
4455: LD_STRING QWin
4457: PPUSH
4458: CALL_OW 97
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4474
4471: POP
// ; end ;
4472: GO 4475
4474: POP
// music_nat := 5 ;
4475: LD_ADDR_OWVAR 71
4479: PUSH
4480: LD_INT 5
4482: ST_TO_ADDR
// YouWin ;
4483: CALL_OW 103
// end ; end_of_file
4487: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL 15458 0 1
// if un = brave or un = com then
4497: LD_VAR 0 1
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: PUSH
4506: LD_VAR 0 1
4510: PUSH
4511: LD_EXP 1
4515: EQUAL
4516: OR
4517: IFFALSE 4538
// begin SayRadio ( doc , DDocWin ) ;
4519: LD_EXP 2
4523: PPUSH
4524: LD_STRING DDocWin
4526: PPUSH
4527: CALL_OW 94
// YouLost (  ) ;
4531: LD_STRING 
4533: PPUSH
4534: CALL_OW 104
// end ; end ;
4538: PPOPN 1
4540: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4541: LD_VAR 0 1
4545: PPUSH
4546: LD_VAR 0 2
4550: PPUSH
4551: LD_VAR 0 3
4555: PPUSH
4556: CALL 15556 0 3
// end ;
4560: PPOPN 3
4562: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4563: LD_VAR 0 1
4567: PPUSH
4568: CALL 15564 0 1
// end ; end_of_file
4572: PPOPN 1
4574: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
4575: GO 4577
4577: DISABLE
// begin ru_radar := 98 ;
4578: LD_ADDR_EXP 7
4582: PUSH
4583: LD_INT 98
4585: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4586: LD_ADDR_EXP 8
4590: PUSH
4591: LD_INT 89
4593: ST_TO_ADDR
// us_hack := 99 ;
4594: LD_ADDR_EXP 9
4598: PUSH
4599: LD_INT 99
4601: ST_TO_ADDR
// us_artillery := 97 ;
4602: LD_ADDR_EXP 10
4606: PUSH
4607: LD_INT 97
4609: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4610: LD_ADDR_EXP 11
4614: PUSH
4615: LD_INT 91
4617: ST_TO_ADDR
// end ; end_of_file end_of_file
4618: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4619: GO 4621
4621: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4622: LD_STRING initStreamRollete();
4624: PPUSH
4625: CALL_OW 559
// InitStreamMode ;
4629: CALL 4638 0 0
// DefineStreamItems ( ) ;
4633: CALL 5078 0 0
// end ;
4637: END
// function InitStreamMode ; begin
4638: LD_INT 0
4640: PPUSH
// streamModeActive := false ;
4641: LD_ADDR_EXP 12
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// normalCounter := 36 ;
4649: LD_ADDR_EXP 13
4653: PUSH
4654: LD_INT 36
4656: ST_TO_ADDR
// hardcoreCounter := 16 ;
4657: LD_ADDR_EXP 14
4661: PUSH
4662: LD_INT 16
4664: ST_TO_ADDR
// sRocket := false ;
4665: LD_ADDR_EXP 17
4669: PUSH
4670: LD_INT 0
4672: ST_TO_ADDR
// sSpeed := false ;
4673: LD_ADDR_EXP 16
4677: PUSH
4678: LD_INT 0
4680: ST_TO_ADDR
// sEngine := false ;
4681: LD_ADDR_EXP 18
4685: PUSH
4686: LD_INT 0
4688: ST_TO_ADDR
// sSpec := false ;
4689: LD_ADDR_EXP 15
4693: PUSH
4694: LD_INT 0
4696: ST_TO_ADDR
// sLevel := false ;
4697: LD_ADDR_EXP 19
4701: PUSH
4702: LD_INT 0
4704: ST_TO_ADDR
// sArmoury := false ;
4705: LD_ADDR_EXP 20
4709: PUSH
4710: LD_INT 0
4712: ST_TO_ADDR
// sRadar := false ;
4713: LD_ADDR_EXP 21
4717: PUSH
4718: LD_INT 0
4720: ST_TO_ADDR
// sBunker := false ;
4721: LD_ADDR_EXP 22
4725: PUSH
4726: LD_INT 0
4728: ST_TO_ADDR
// sHack := false ;
4729: LD_ADDR_EXP 23
4733: PUSH
4734: LD_INT 0
4736: ST_TO_ADDR
// sFire := false ;
4737: LD_ADDR_EXP 24
4741: PUSH
4742: LD_INT 0
4744: ST_TO_ADDR
// sRefresh := false ;
4745: LD_ADDR_EXP 25
4749: PUSH
4750: LD_INT 0
4752: ST_TO_ADDR
// sExp := false ;
4753: LD_ADDR_EXP 26
4757: PUSH
4758: LD_INT 0
4760: ST_TO_ADDR
// sDepot := false ;
4761: LD_ADDR_EXP 27
4765: PUSH
4766: LD_INT 0
4768: ST_TO_ADDR
// sFlag := false ;
4769: LD_ADDR_EXP 28
4773: PUSH
4774: LD_INT 0
4776: ST_TO_ADDR
// sKamikadze := false ;
4777: LD_ADDR_EXP 36
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// sTroll := false ;
4785: LD_ADDR_EXP 37
4789: PUSH
4790: LD_INT 0
4792: ST_TO_ADDR
// sSlow := false ;
4793: LD_ADDR_EXP 38
4797: PUSH
4798: LD_INT 0
4800: ST_TO_ADDR
// sLack := false ;
4801: LD_ADDR_EXP 39
4805: PUSH
4806: LD_INT 0
4808: ST_TO_ADDR
// sTank := false ;
4809: LD_ADDR_EXP 41
4813: PUSH
4814: LD_INT 0
4816: ST_TO_ADDR
// sRemote := false ;
4817: LD_ADDR_EXP 42
4821: PUSH
4822: LD_INT 0
4824: ST_TO_ADDR
// sPowell := false ;
4825: LD_ADDR_EXP 43
4829: PUSH
4830: LD_INT 0
4832: ST_TO_ADDR
// sTeleport := false ;
4833: LD_ADDR_EXP 46
4837: PUSH
4838: LD_INT 0
4840: ST_TO_ADDR
// sOilTower := false ;
4841: LD_ADDR_EXP 48
4845: PUSH
4846: LD_INT 0
4848: ST_TO_ADDR
// sShovel := false ;
4849: LD_ADDR_EXP 49
4853: PUSH
4854: LD_INT 0
4856: ST_TO_ADDR
// sSheik := false ;
4857: LD_ADDR_EXP 50
4861: PUSH
4862: LD_INT 0
4864: ST_TO_ADDR
// sEarthquake := false ;
4865: LD_ADDR_EXP 52
4869: PUSH
4870: LD_INT 0
4872: ST_TO_ADDR
// sAI := false ;
4873: LD_ADDR_EXP 53
4877: PUSH
4878: LD_INT 0
4880: ST_TO_ADDR
// sCargo := false ;
4881: LD_ADDR_EXP 56
4885: PUSH
4886: LD_INT 0
4888: ST_TO_ADDR
// sDLaser := false ;
4889: LD_ADDR_EXP 57
4893: PUSH
4894: LD_INT 0
4896: ST_TO_ADDR
// sExchange := false ;
4897: LD_ADDR_EXP 58
4901: PUSH
4902: LD_INT 0
4904: ST_TO_ADDR
// sFac := false ;
4905: LD_ADDR_EXP 59
4909: PUSH
4910: LD_INT 0
4912: ST_TO_ADDR
// sPower := false ;
4913: LD_ADDR_EXP 60
4917: PUSH
4918: LD_INT 0
4920: ST_TO_ADDR
// sRandom := false ;
4921: LD_ADDR_EXP 61
4925: PUSH
4926: LD_INT 0
4928: ST_TO_ADDR
// sShield := false ;
4929: LD_ADDR_EXP 62
4933: PUSH
4934: LD_INT 0
4936: ST_TO_ADDR
// sTime := false ;
4937: LD_ADDR_EXP 63
4941: PUSH
4942: LD_INT 0
4944: ST_TO_ADDR
// sTools := false ;
4945: LD_ADDR_EXP 64
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// sSold := false ;
4953: LD_ADDR_EXP 29
4957: PUSH
4958: LD_INT 0
4960: ST_TO_ADDR
// sDiff := false ;
4961: LD_ADDR_EXP 30
4965: PUSH
4966: LD_INT 0
4968: ST_TO_ADDR
// sFog := false ;
4969: LD_ADDR_EXP 33
4973: PUSH
4974: LD_INT 0
4976: ST_TO_ADDR
// sReset := false ;
4977: LD_ADDR_EXP 34
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// sSun := false ;
4985: LD_ADDR_EXP 35
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// sTiger := false ;
4993: LD_ADDR_EXP 31
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// sBomb := false ;
5001: LD_ADDR_EXP 32
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// sWound := false ;
5009: LD_ADDR_EXP 40
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// sBetray := false ;
5017: LD_ADDR_EXP 44
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// sContamin := false ;
5025: LD_ADDR_EXP 45
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// sOil := false ;
5033: LD_ADDR_EXP 47
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// sStu := false ;
5041: LD_ADDR_EXP 51
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// sBazooka := false ;
5049: LD_ADDR_EXP 54
5053: PUSH
5054: LD_INT 0
5056: ST_TO_ADDR
// sMortar := false ;
5057: LD_ADDR_EXP 55
5061: PUSH
5062: LD_INT 0
5064: ST_TO_ADDR
// sRanger := false ;
5065: LD_ADDR_EXP 65
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// end ;
5073: LD_VAR 0 1
5077: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5078: LD_INT 0
5080: PPUSH
5081: PPUSH
5082: PPUSH
5083: PPUSH
5084: PPUSH
// result := [ ] ;
5085: LD_ADDR_VAR 0 1
5089: PUSH
5090: EMPTY
5091: ST_TO_ADDR
// if campaign_id = 1 then
5092: LD_OWVAR 69
5096: PUSH
5097: LD_INT 1
5099: EQUAL
5100: IFFALSE 8038
// begin case mission_number of 1 :
5102: LD_OWVAR 70
5106: PUSH
5107: LD_INT 1
5109: DOUBLE
5110: EQUAL
5111: IFTRUE 5115
5113: GO 5179
5115: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5116: LD_ADDR_VAR 0 1
5120: PUSH
5121: LD_INT 2
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 11
5129: PUSH
5130: LD_INT 12
5132: PUSH
5133: LD_INT 15
5135: PUSH
5136: LD_INT 16
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 23
5144: PUSH
5145: LD_INT 26
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 101
5161: PUSH
5162: LD_INT 102
5164: PUSH
5165: LD_INT 106
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: ST_TO_ADDR
5177: GO 8036
5179: LD_INT 2
5181: DOUBLE
5182: EQUAL
5183: IFTRUE 5187
5185: GO 5259
5187: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5188: LD_ADDR_VAR 0 1
5192: PUSH
5193: LD_INT 2
5195: PUSH
5196: LD_INT 4
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 15
5207: PUSH
5208: LD_INT 16
5210: PUSH
5211: LD_INT 22
5213: PUSH
5214: LD_INT 23
5216: PUSH
5217: LD_INT 26
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 101
5233: PUSH
5234: LD_INT 102
5236: PUSH
5237: LD_INT 105
5239: PUSH
5240: LD_INT 106
5242: PUSH
5243: LD_INT 108
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: ST_TO_ADDR
5257: GO 8036
5259: LD_INT 3
5261: DOUBLE
5262: EQUAL
5263: IFTRUE 5267
5265: GO 5343
5267: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5268: LD_ADDR_VAR 0 1
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: LD_INT 4
5278: PUSH
5279: LD_INT 5
5281: PUSH
5282: LD_INT 11
5284: PUSH
5285: LD_INT 12
5287: PUSH
5288: LD_INT 15
5290: PUSH
5291: LD_INT 16
5293: PUSH
5294: LD_INT 22
5296: PUSH
5297: LD_INT 26
5299: PUSH
5300: LD_INT 36
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 101
5317: PUSH
5318: LD_INT 102
5320: PUSH
5321: LD_INT 105
5323: PUSH
5324: LD_INT 106
5326: PUSH
5327: LD_INT 108
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
5341: GO 8036
5343: LD_INT 4
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5435
5351: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 2
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: LD_INT 5
5365: PUSH
5366: LD_INT 8
5368: PUSH
5369: LD_INT 11
5371: PUSH
5372: LD_INT 12
5374: PUSH
5375: LD_INT 15
5377: PUSH
5378: LD_INT 16
5380: PUSH
5381: LD_INT 22
5383: PUSH
5384: LD_INT 23
5386: PUSH
5387: LD_INT 26
5389: PUSH
5390: LD_INT 36
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 101
5409: PUSH
5410: LD_INT 102
5412: PUSH
5413: LD_INT 105
5415: PUSH
5416: LD_INT 106
5418: PUSH
5419: LD_INT 108
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: ST_TO_ADDR
5433: GO 8036
5435: LD_INT 5
5437: DOUBLE
5438: EQUAL
5439: IFTRUE 5443
5441: GO 5543
5443: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5444: LD_ADDR_VAR 0 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 4
5454: PUSH
5455: LD_INT 5
5457: PUSH
5458: LD_INT 6
5460: PUSH
5461: LD_INT 8
5463: PUSH
5464: LD_INT 11
5466: PUSH
5467: LD_INT 12
5469: PUSH
5470: LD_INT 15
5472: PUSH
5473: LD_INT 16
5475: PUSH
5476: LD_INT 22
5478: PUSH
5479: LD_INT 23
5481: PUSH
5482: LD_INT 25
5484: PUSH
5485: LD_INT 26
5487: PUSH
5488: LD_INT 36
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 101
5509: PUSH
5510: LD_INT 102
5512: PUSH
5513: LD_INT 105
5515: PUSH
5516: LD_INT 106
5518: PUSH
5519: LD_INT 108
5521: PUSH
5522: LD_INT 109
5524: PUSH
5525: LD_INT 112
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: ST_TO_ADDR
5541: GO 8036
5543: LD_INT 6
5545: DOUBLE
5546: EQUAL
5547: IFTRUE 5551
5549: GO 5671
5551: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5552: LD_ADDR_VAR 0 1
5556: PUSH
5557: LD_INT 2
5559: PUSH
5560: LD_INT 4
5562: PUSH
5563: LD_INT 5
5565: PUSH
5566: LD_INT 6
5568: PUSH
5569: LD_INT 8
5571: PUSH
5572: LD_INT 11
5574: PUSH
5575: LD_INT 12
5577: PUSH
5578: LD_INT 15
5580: PUSH
5581: LD_INT 16
5583: PUSH
5584: LD_INT 20
5586: PUSH
5587: LD_INT 21
5589: PUSH
5590: LD_INT 22
5592: PUSH
5593: LD_INT 23
5595: PUSH
5596: LD_INT 25
5598: PUSH
5599: LD_INT 26
5601: PUSH
5602: LD_INT 30
5604: PUSH
5605: LD_INT 31
5607: PUSH
5608: LD_INT 32
5610: PUSH
5611: LD_INT 36
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 101
5637: PUSH
5638: LD_INT 102
5640: PUSH
5641: LD_INT 105
5643: PUSH
5644: LD_INT 106
5646: PUSH
5647: LD_INT 108
5649: PUSH
5650: LD_INT 109
5652: PUSH
5653: LD_INT 112
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 8036
5671: LD_INT 7
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5779
5679: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5680: LD_ADDR_VAR 0 1
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 4
5690: PUSH
5691: LD_INT 5
5693: PUSH
5694: LD_INT 7
5696: PUSH
5697: LD_INT 11
5699: PUSH
5700: LD_INT 12
5702: PUSH
5703: LD_INT 15
5705: PUSH
5706: LD_INT 16
5708: PUSH
5709: LD_INT 20
5711: PUSH
5712: LD_INT 21
5714: PUSH
5715: LD_INT 22
5717: PUSH
5718: LD_INT 23
5720: PUSH
5721: LD_INT 25
5723: PUSH
5724: LD_INT 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 101
5745: PUSH
5746: LD_INT 102
5748: PUSH
5749: LD_INT 103
5751: PUSH
5752: LD_INT 105
5754: PUSH
5755: LD_INT 106
5757: PUSH
5758: LD_INT 108
5760: PUSH
5761: LD_INT 112
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 8036
5779: LD_INT 8
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5915
5787: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: LD_INT 5
5801: PUSH
5802: LD_INT 6
5804: PUSH
5805: LD_INT 7
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: LD_INT 11
5813: PUSH
5814: LD_INT 12
5816: PUSH
5817: LD_INT 15
5819: PUSH
5820: LD_INT 16
5822: PUSH
5823: LD_INT 20
5825: PUSH
5826: LD_INT 21
5828: PUSH
5829: LD_INT 22
5831: PUSH
5832: LD_INT 23
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 26
5840: PUSH
5841: LD_INT 30
5843: PUSH
5844: LD_INT 31
5846: PUSH
5847: LD_INT 32
5849: PUSH
5850: LD_INT 36
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 101
5877: PUSH
5878: LD_INT 102
5880: PUSH
5881: LD_INT 103
5883: PUSH
5884: LD_INT 105
5886: PUSH
5887: LD_INT 106
5889: PUSH
5890: LD_INT 108
5892: PUSH
5893: LD_INT 109
5895: PUSH
5896: LD_INT 112
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: ST_TO_ADDR
5913: GO 8036
5915: LD_INT 9
5917: DOUBLE
5918: EQUAL
5919: IFTRUE 5923
5921: GO 6059
5923: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5924: LD_ADDR_VAR 0 1
5928: PUSH
5929: LD_INT 2
5931: PUSH
5932: LD_INT 4
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: LD_INT 6
5940: PUSH
5941: LD_INT 7
5943: PUSH
5944: LD_INT 8
5946: PUSH
5947: LD_INT 11
5949: PUSH
5950: LD_INT 12
5952: PUSH
5953: LD_INT 15
5955: PUSH
5956: LD_INT 16
5958: PUSH
5959: LD_INT 20
5961: PUSH
5962: LD_INT 21
5964: PUSH
5965: LD_INT 22
5967: PUSH
5968: LD_INT 23
5970: PUSH
5971: LD_INT 25
5973: PUSH
5974: LD_INT 26
5976: PUSH
5977: LD_INT 28
5979: PUSH
5980: LD_INT 30
5982: PUSH
5983: LD_INT 31
5985: PUSH
5986: LD_INT 32
5988: PUSH
5989: LD_INT 36
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 101
6017: PUSH
6018: LD_INT 102
6020: PUSH
6021: LD_INT 103
6023: PUSH
6024: LD_INT 105
6026: PUSH
6027: LD_INT 106
6029: PUSH
6030: LD_INT 108
6032: PUSH
6033: LD_INT 109
6035: PUSH
6036: LD_INT 112
6038: PUSH
6039: LD_INT 114
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: ST_TO_ADDR
6057: GO 8036
6059: LD_INT 10
6061: DOUBLE
6062: EQUAL
6063: IFTRUE 6067
6065: GO 6251
6067: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6068: LD_ADDR_VAR 0 1
6072: PUSH
6073: LD_INT 2
6075: PUSH
6076: LD_INT 4
6078: PUSH
6079: LD_INT 5
6081: PUSH
6082: LD_INT 6
6084: PUSH
6085: LD_INT 7
6087: PUSH
6088: LD_INT 8
6090: PUSH
6091: LD_INT 9
6093: PUSH
6094: LD_INT 10
6096: PUSH
6097: LD_INT 11
6099: PUSH
6100: LD_INT 12
6102: PUSH
6103: LD_INT 13
6105: PUSH
6106: LD_INT 14
6108: PUSH
6109: LD_INT 15
6111: PUSH
6112: LD_INT 16
6114: PUSH
6115: LD_INT 17
6117: PUSH
6118: LD_INT 18
6120: PUSH
6121: LD_INT 19
6123: PUSH
6124: LD_INT 20
6126: PUSH
6127: LD_INT 21
6129: PUSH
6130: LD_INT 22
6132: PUSH
6133: LD_INT 23
6135: PUSH
6136: LD_INT 24
6138: PUSH
6139: LD_INT 25
6141: PUSH
6142: LD_INT 26
6144: PUSH
6145: LD_INT 28
6147: PUSH
6148: LD_INT 30
6150: PUSH
6151: LD_INT 31
6153: PUSH
6154: LD_INT 32
6156: PUSH
6157: LD_INT 36
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 101
6193: PUSH
6194: LD_INT 102
6196: PUSH
6197: LD_INT 103
6199: PUSH
6200: LD_INT 104
6202: PUSH
6203: LD_INT 105
6205: PUSH
6206: LD_INT 106
6208: PUSH
6209: LD_INT 107
6211: PUSH
6212: LD_INT 108
6214: PUSH
6215: LD_INT 109
6217: PUSH
6218: LD_INT 110
6220: PUSH
6221: LD_INT 111
6223: PUSH
6224: LD_INT 112
6226: PUSH
6227: LD_INT 114
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: ST_TO_ADDR
6249: GO 8036
6251: LD_INT 11
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6451
6259: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6260: LD_ADDR_VAR 0 1
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 4
6273: PUSH
6274: LD_INT 5
6276: PUSH
6277: LD_INT 6
6279: PUSH
6280: LD_INT 7
6282: PUSH
6283: LD_INT 8
6285: PUSH
6286: LD_INT 9
6288: PUSH
6289: LD_INT 10
6291: PUSH
6292: LD_INT 11
6294: PUSH
6295: LD_INT 12
6297: PUSH
6298: LD_INT 13
6300: PUSH
6301: LD_INT 14
6303: PUSH
6304: LD_INT 15
6306: PUSH
6307: LD_INT 16
6309: PUSH
6310: LD_INT 17
6312: PUSH
6313: LD_INT 18
6315: PUSH
6316: LD_INT 19
6318: PUSH
6319: LD_INT 20
6321: PUSH
6322: LD_INT 21
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 23
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: LD_INT 25
6336: PUSH
6337: LD_INT 26
6339: PUSH
6340: LD_INT 28
6342: PUSH
6343: LD_INT 30
6345: PUSH
6346: LD_INT 31
6348: PUSH
6349: LD_INT 32
6351: PUSH
6352: LD_INT 34
6354: PUSH
6355: LD_INT 36
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 101
6393: PUSH
6394: LD_INT 102
6396: PUSH
6397: LD_INT 103
6399: PUSH
6400: LD_INT 104
6402: PUSH
6403: LD_INT 105
6405: PUSH
6406: LD_INT 106
6408: PUSH
6409: LD_INT 107
6411: PUSH
6412: LD_INT 108
6414: PUSH
6415: LD_INT 109
6417: PUSH
6418: LD_INT 110
6420: PUSH
6421: LD_INT 111
6423: PUSH
6424: LD_INT 112
6426: PUSH
6427: LD_INT 114
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: ST_TO_ADDR
6449: GO 8036
6451: LD_INT 12
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6667
6459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6460: LD_ADDR_VAR 0 1
6464: PUSH
6465: LD_INT 1
6467: PUSH
6468: LD_INT 2
6470: PUSH
6471: LD_INT 3
6473: PUSH
6474: LD_INT 4
6476: PUSH
6477: LD_INT 5
6479: PUSH
6480: LD_INT 6
6482: PUSH
6483: LD_INT 7
6485: PUSH
6486: LD_INT 8
6488: PUSH
6489: LD_INT 9
6491: PUSH
6492: LD_INT 10
6494: PUSH
6495: LD_INT 11
6497: PUSH
6498: LD_INT 12
6500: PUSH
6501: LD_INT 13
6503: PUSH
6504: LD_INT 14
6506: PUSH
6507: LD_INT 15
6509: PUSH
6510: LD_INT 16
6512: PUSH
6513: LD_INT 17
6515: PUSH
6516: LD_INT 18
6518: PUSH
6519: LD_INT 19
6521: PUSH
6522: LD_INT 20
6524: PUSH
6525: LD_INT 21
6527: PUSH
6528: LD_INT 22
6530: PUSH
6531: LD_INT 23
6533: PUSH
6534: LD_INT 24
6536: PUSH
6537: LD_INT 25
6539: PUSH
6540: LD_INT 26
6542: PUSH
6543: LD_INT 27
6545: PUSH
6546: LD_INT 28
6548: PUSH
6549: LD_INT 30
6551: PUSH
6552: LD_INT 31
6554: PUSH
6555: LD_INT 32
6557: PUSH
6558: LD_INT 33
6560: PUSH
6561: LD_INT 34
6563: PUSH
6564: LD_INT 36
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 101
6605: PUSH
6606: LD_INT 102
6608: PUSH
6609: LD_INT 103
6611: PUSH
6612: LD_INT 104
6614: PUSH
6615: LD_INT 105
6617: PUSH
6618: LD_INT 106
6620: PUSH
6621: LD_INT 107
6623: PUSH
6624: LD_INT 108
6626: PUSH
6627: LD_INT 109
6629: PUSH
6630: LD_INT 110
6632: PUSH
6633: LD_INT 111
6635: PUSH
6636: LD_INT 112
6638: PUSH
6639: LD_INT 113
6641: PUSH
6642: LD_INT 114
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: ST_TO_ADDR
6665: GO 8036
6667: LD_INT 13
6669: DOUBLE
6670: EQUAL
6671: IFTRUE 6675
6673: GO 6871
6675: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6676: LD_ADDR_VAR 0 1
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: LD_INT 2
6686: PUSH
6687: LD_INT 3
6689: PUSH
6690: LD_INT 4
6692: PUSH
6693: LD_INT 5
6695: PUSH
6696: LD_INT 8
6698: PUSH
6699: LD_INT 9
6701: PUSH
6702: LD_INT 10
6704: PUSH
6705: LD_INT 11
6707: PUSH
6708: LD_INT 12
6710: PUSH
6711: LD_INT 14
6713: PUSH
6714: LD_INT 15
6716: PUSH
6717: LD_INT 16
6719: PUSH
6720: LD_INT 17
6722: PUSH
6723: LD_INT 18
6725: PUSH
6726: LD_INT 19
6728: PUSH
6729: LD_INT 20
6731: PUSH
6732: LD_INT 21
6734: PUSH
6735: LD_INT 22
6737: PUSH
6738: LD_INT 23
6740: PUSH
6741: LD_INT 24
6743: PUSH
6744: LD_INT 25
6746: PUSH
6747: LD_INT 26
6749: PUSH
6750: LD_INT 27
6752: PUSH
6753: LD_INT 28
6755: PUSH
6756: LD_INT 30
6758: PUSH
6759: LD_INT 31
6761: PUSH
6762: LD_INT 32
6764: PUSH
6765: LD_INT 33
6767: PUSH
6768: LD_INT 34
6770: PUSH
6771: LD_INT 36
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 101
6809: PUSH
6810: LD_INT 102
6812: PUSH
6813: LD_INT 103
6815: PUSH
6816: LD_INT 104
6818: PUSH
6819: LD_INT 105
6821: PUSH
6822: LD_INT 106
6824: PUSH
6825: LD_INT 107
6827: PUSH
6828: LD_INT 108
6830: PUSH
6831: LD_INT 109
6833: PUSH
6834: LD_INT 110
6836: PUSH
6837: LD_INT 111
6839: PUSH
6840: LD_INT 112
6842: PUSH
6843: LD_INT 113
6845: PUSH
6846: LD_INT 114
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 8036
6871: LD_INT 14
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 7091
6879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6880: LD_ADDR_VAR 0 1
6884: PUSH
6885: LD_INT 1
6887: PUSH
6888: LD_INT 2
6890: PUSH
6891: LD_INT 3
6893: PUSH
6894: LD_INT 4
6896: PUSH
6897: LD_INT 5
6899: PUSH
6900: LD_INT 6
6902: PUSH
6903: LD_INT 7
6905: PUSH
6906: LD_INT 8
6908: PUSH
6909: LD_INT 9
6911: PUSH
6912: LD_INT 10
6914: PUSH
6915: LD_INT 11
6917: PUSH
6918: LD_INT 12
6920: PUSH
6921: LD_INT 13
6923: PUSH
6924: LD_INT 14
6926: PUSH
6927: LD_INT 15
6929: PUSH
6930: LD_INT 16
6932: PUSH
6933: LD_INT 17
6935: PUSH
6936: LD_INT 18
6938: PUSH
6939: LD_INT 19
6941: PUSH
6942: LD_INT 20
6944: PUSH
6945: LD_INT 21
6947: PUSH
6948: LD_INT 22
6950: PUSH
6951: LD_INT 23
6953: PUSH
6954: LD_INT 24
6956: PUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 26
6962: PUSH
6963: LD_INT 27
6965: PUSH
6966: LD_INT 28
6968: PUSH
6969: LD_INT 29
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 31
6977: PUSH
6978: LD_INT 32
6980: PUSH
6981: LD_INT 33
6983: PUSH
6984: LD_INT 34
6986: PUSH
6987: LD_INT 36
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 101
7029: PUSH
7030: LD_INT 102
7032: PUSH
7033: LD_INT 103
7035: PUSH
7036: LD_INT 104
7038: PUSH
7039: LD_INT 105
7041: PUSH
7042: LD_INT 106
7044: PUSH
7045: LD_INT 107
7047: PUSH
7048: LD_INT 108
7050: PUSH
7051: LD_INT 109
7053: PUSH
7054: LD_INT 110
7056: PUSH
7057: LD_INT 111
7059: PUSH
7060: LD_INT 112
7062: PUSH
7063: LD_INT 113
7065: PUSH
7066: LD_INT 114
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: ST_TO_ADDR
7089: GO 8036
7091: LD_INT 15
7093: DOUBLE
7094: EQUAL
7095: IFTRUE 7099
7097: GO 7311
7099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7100: LD_ADDR_VAR 0 1
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 3
7113: PUSH
7114: LD_INT 4
7116: PUSH
7117: LD_INT 5
7119: PUSH
7120: LD_INT 6
7122: PUSH
7123: LD_INT 7
7125: PUSH
7126: LD_INT 8
7128: PUSH
7129: LD_INT 9
7131: PUSH
7132: LD_INT 10
7134: PUSH
7135: LD_INT 11
7137: PUSH
7138: LD_INT 12
7140: PUSH
7141: LD_INT 13
7143: PUSH
7144: LD_INT 14
7146: PUSH
7147: LD_INT 15
7149: PUSH
7150: LD_INT 16
7152: PUSH
7153: LD_INT 17
7155: PUSH
7156: LD_INT 18
7158: PUSH
7159: LD_INT 19
7161: PUSH
7162: LD_INT 20
7164: PUSH
7165: LD_INT 21
7167: PUSH
7168: LD_INT 22
7170: PUSH
7171: LD_INT 23
7173: PUSH
7174: LD_INT 24
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 26
7182: PUSH
7183: LD_INT 27
7185: PUSH
7186: LD_INT 28
7188: PUSH
7189: LD_INT 29
7191: PUSH
7192: LD_INT 30
7194: PUSH
7195: LD_INT 31
7197: PUSH
7198: LD_INT 32
7200: PUSH
7201: LD_INT 33
7203: PUSH
7204: LD_INT 34
7206: PUSH
7207: LD_INT 36
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 101
7249: PUSH
7250: LD_INT 102
7252: PUSH
7253: LD_INT 103
7255: PUSH
7256: LD_INT 104
7258: PUSH
7259: LD_INT 105
7261: PUSH
7262: LD_INT 106
7264: PUSH
7265: LD_INT 107
7267: PUSH
7268: LD_INT 108
7270: PUSH
7271: LD_INT 109
7273: PUSH
7274: LD_INT 110
7276: PUSH
7277: LD_INT 111
7279: PUSH
7280: LD_INT 112
7282: PUSH
7283: LD_INT 113
7285: PUSH
7286: LD_INT 114
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: ST_TO_ADDR
7309: GO 8036
7311: LD_INT 16
7313: DOUBLE
7314: EQUAL
7315: IFTRUE 7319
7317: GO 7443
7319: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7320: LD_ADDR_VAR 0 1
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: LD_INT 4
7330: PUSH
7331: LD_INT 5
7333: PUSH
7334: LD_INT 7
7336: PUSH
7337: LD_INT 11
7339: PUSH
7340: LD_INT 12
7342: PUSH
7343: LD_INT 15
7345: PUSH
7346: LD_INT 16
7348: PUSH
7349: LD_INT 20
7351: PUSH
7352: LD_INT 21
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 23
7360: PUSH
7361: LD_INT 25
7363: PUSH
7364: LD_INT 26
7366: PUSH
7367: LD_INT 30
7369: PUSH
7370: LD_INT 31
7372: PUSH
7373: LD_INT 32
7375: PUSH
7376: LD_INT 33
7378: PUSH
7379: LD_INT 34
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 101
7405: PUSH
7406: LD_INT 102
7408: PUSH
7409: LD_INT 103
7411: PUSH
7412: LD_INT 106
7414: PUSH
7415: LD_INT 108
7417: PUSH
7418: LD_INT 112
7420: PUSH
7421: LD_INT 113
7423: PUSH
7424: LD_INT 114
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: ST_TO_ADDR
7441: GO 8036
7443: LD_INT 17
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7451
7449: GO 7663
7451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7452: LD_ADDR_VAR 0 1
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: LD_INT 4
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 6
7474: PUSH
7475: LD_INT 7
7477: PUSH
7478: LD_INT 8
7480: PUSH
7481: LD_INT 9
7483: PUSH
7484: LD_INT 10
7486: PUSH
7487: LD_INT 11
7489: PUSH
7490: LD_INT 12
7492: PUSH
7493: LD_INT 13
7495: PUSH
7496: LD_INT 14
7498: PUSH
7499: LD_INT 15
7501: PUSH
7502: LD_INT 16
7504: PUSH
7505: LD_INT 17
7507: PUSH
7508: LD_INT 18
7510: PUSH
7511: LD_INT 19
7513: PUSH
7514: LD_INT 20
7516: PUSH
7517: LD_INT 21
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 23
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: LD_INT 25
7531: PUSH
7532: LD_INT 26
7534: PUSH
7535: LD_INT 27
7537: PUSH
7538: LD_INT 28
7540: PUSH
7541: LD_INT 29
7543: PUSH
7544: LD_INT 30
7546: PUSH
7547: LD_INT 31
7549: PUSH
7550: LD_INT 32
7552: PUSH
7553: LD_INT 33
7555: PUSH
7556: LD_INT 34
7558: PUSH
7559: LD_INT 36
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 101
7601: PUSH
7602: LD_INT 102
7604: PUSH
7605: LD_INT 103
7607: PUSH
7608: LD_INT 104
7610: PUSH
7611: LD_INT 105
7613: PUSH
7614: LD_INT 106
7616: PUSH
7617: LD_INT 107
7619: PUSH
7620: LD_INT 108
7622: PUSH
7623: LD_INT 109
7625: PUSH
7626: LD_INT 110
7628: PUSH
7629: LD_INT 111
7631: PUSH
7632: LD_INT 112
7634: PUSH
7635: LD_INT 113
7637: PUSH
7638: LD_INT 114
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: ST_TO_ADDR
7661: GO 8036
7663: LD_INT 18
7665: DOUBLE
7666: EQUAL
7667: IFTRUE 7671
7669: GO 7807
7671: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 4
7682: PUSH
7683: LD_INT 5
7685: PUSH
7686: LD_INT 7
7688: PUSH
7689: LD_INT 11
7691: PUSH
7692: LD_INT 12
7694: PUSH
7695: LD_INT 15
7697: PUSH
7698: LD_INT 16
7700: PUSH
7701: LD_INT 20
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 22
7709: PUSH
7710: LD_INT 23
7712: PUSH
7713: LD_INT 25
7715: PUSH
7716: LD_INT 26
7718: PUSH
7719: LD_INT 30
7721: PUSH
7722: LD_INT 31
7724: PUSH
7725: LD_INT 32
7727: PUSH
7728: LD_INT 33
7730: PUSH
7731: LD_INT 34
7733: PUSH
7734: LD_INT 35
7736: PUSH
7737: LD_INT 36
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 101
7765: PUSH
7766: LD_INT 102
7768: PUSH
7769: LD_INT 103
7771: PUSH
7772: LD_INT 106
7774: PUSH
7775: LD_INT 108
7777: PUSH
7778: LD_INT 112
7780: PUSH
7781: LD_INT 113
7783: PUSH
7784: LD_INT 114
7786: PUSH
7787: LD_INT 115
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: ST_TO_ADDR
7805: GO 8036
7807: LD_INT 19
7809: DOUBLE
7810: EQUAL
7811: IFTRUE 7815
7813: GO 8035
7815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7816: LD_ADDR_VAR 0 1
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: LD_INT 2
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: LD_INT 4
7832: PUSH
7833: LD_INT 5
7835: PUSH
7836: LD_INT 6
7838: PUSH
7839: LD_INT 7
7841: PUSH
7842: LD_INT 8
7844: PUSH
7845: LD_INT 9
7847: PUSH
7848: LD_INT 10
7850: PUSH
7851: LD_INT 11
7853: PUSH
7854: LD_INT 12
7856: PUSH
7857: LD_INT 13
7859: PUSH
7860: LD_INT 14
7862: PUSH
7863: LD_INT 15
7865: PUSH
7866: LD_INT 16
7868: PUSH
7869: LD_INT 17
7871: PUSH
7872: LD_INT 18
7874: PUSH
7875: LD_INT 19
7877: PUSH
7878: LD_INT 20
7880: PUSH
7881: LD_INT 21
7883: PUSH
7884: LD_INT 22
7886: PUSH
7887: LD_INT 23
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 25
7895: PUSH
7896: LD_INT 26
7898: PUSH
7899: LD_INT 27
7901: PUSH
7902: LD_INT 28
7904: PUSH
7905: LD_INT 29
7907: PUSH
7908: LD_INT 30
7910: PUSH
7911: LD_INT 31
7913: PUSH
7914: LD_INT 32
7916: PUSH
7917: LD_INT 33
7919: PUSH
7920: LD_INT 34
7922: PUSH
7923: LD_INT 35
7925: PUSH
7926: LD_INT 36
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 101
7969: PUSH
7970: LD_INT 102
7972: PUSH
7973: LD_INT 103
7975: PUSH
7976: LD_INT 104
7978: PUSH
7979: LD_INT 105
7981: PUSH
7982: LD_INT 106
7984: PUSH
7985: LD_INT 107
7987: PUSH
7988: LD_INT 108
7990: PUSH
7991: LD_INT 109
7993: PUSH
7994: LD_INT 110
7996: PUSH
7997: LD_INT 111
7999: PUSH
8000: LD_INT 112
8002: PUSH
8003: LD_INT 113
8005: PUSH
8006: LD_INT 114
8008: PUSH
8009: LD_INT 115
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: ST_TO_ADDR
8033: GO 8036
8035: POP
// end else
8036: GO 8073
// if campaign_id = 5 then
8038: LD_OWVAR 69
8042: PUSH
8043: LD_INT 5
8045: EQUAL
8046: IFFALSE 8073
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
8048: LD_ADDR_VAR 0 1
8052: PUSH
8053: LD_INT 1
8055: PUSH
8056: LD_INT 2
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 100
8065: PUSH
8066: EMPTY
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: ST_TO_ADDR
// end ; if result then
8073: LD_VAR 0 1
8077: IFFALSE 8366
// begin normal :=  ;
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_STRING 
8086: ST_TO_ADDR
// hardcore :=  ;
8087: LD_ADDR_VAR 0 4
8091: PUSH
8092: LD_STRING 
8094: ST_TO_ADDR
// for i = 1 to normalCounter do
8095: LD_ADDR_VAR 0 5
8099: PUSH
8100: DOUBLE
8101: LD_INT 1
8103: DEC
8104: ST_TO_ADDR
8105: LD_EXP 13
8109: PUSH
8110: FOR_TO
8111: IFFALSE 8212
// begin tmp := 0 ;
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: LD_STRING 0
8120: ST_TO_ADDR
// if result [ 1 ] then
8121: LD_VAR 0 1
8125: PUSH
8126: LD_INT 1
8128: ARRAY
8129: IFFALSE 8194
// if result [ 1 ] [ 1 ] = i then
8131: LD_VAR 0 1
8135: PUSH
8136: LD_INT 1
8138: ARRAY
8139: PUSH
8140: LD_INT 1
8142: ARRAY
8143: PUSH
8144: LD_VAR 0 5
8148: EQUAL
8149: IFFALSE 8194
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8151: LD_ADDR_VAR 0 1
8155: PUSH
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 1
8163: PPUSH
8164: LD_VAR 0 1
8168: PUSH
8169: LD_INT 1
8171: ARRAY
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: CALL_OW 3
8180: PPUSH
8181: CALL_OW 1
8185: ST_TO_ADDR
// tmp := 1 ;
8186: LD_ADDR_VAR 0 2
8190: PUSH
8191: LD_STRING 1
8193: ST_TO_ADDR
// end ; normal := normal & tmp ;
8194: LD_ADDR_VAR 0 3
8198: PUSH
8199: LD_VAR 0 3
8203: PUSH
8204: LD_VAR 0 2
8208: STR
8209: ST_TO_ADDR
// end ;
8210: GO 8110
8212: POP
8213: POP
// for i = 1 to hardcoreCounter do
8214: LD_ADDR_VAR 0 5
8218: PUSH
8219: DOUBLE
8220: LD_INT 1
8222: DEC
8223: ST_TO_ADDR
8224: LD_EXP 14
8228: PUSH
8229: FOR_TO
8230: IFFALSE 8335
// begin tmp := 0 ;
8232: LD_ADDR_VAR 0 2
8236: PUSH
8237: LD_STRING 0
8239: ST_TO_ADDR
// if result [ 2 ] then
8240: LD_VAR 0 1
8244: PUSH
8245: LD_INT 2
8247: ARRAY
8248: IFFALSE 8317
// if result [ 2 ] [ 1 ] = 100 + i then
8250: LD_VAR 0 1
8254: PUSH
8255: LD_INT 2
8257: ARRAY
8258: PUSH
8259: LD_INT 1
8261: ARRAY
8262: PUSH
8263: LD_INT 100
8265: PUSH
8266: LD_VAR 0 5
8270: PLUS
8271: EQUAL
8272: IFFALSE 8317
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8274: LD_ADDR_VAR 0 1
8278: PUSH
8279: LD_VAR 0 1
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_VAR 0 1
8291: PUSH
8292: LD_INT 2
8294: ARRAY
8295: PPUSH
8296: LD_INT 1
8298: PPUSH
8299: CALL_OW 3
8303: PPUSH
8304: CALL_OW 1
8308: ST_TO_ADDR
// tmp := 1 ;
8309: LD_ADDR_VAR 0 2
8313: PUSH
8314: LD_STRING 1
8316: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8317: LD_ADDR_VAR 0 4
8321: PUSH
8322: LD_VAR 0 4
8326: PUSH
8327: LD_VAR 0 2
8331: STR
8332: ST_TO_ADDR
// end ;
8333: GO 8229
8335: POP
8336: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8337: LD_STRING getStreamItemsFromMission("
8339: PUSH
8340: LD_VAR 0 3
8344: STR
8345: PUSH
8346: LD_STRING ","
8348: STR
8349: PUSH
8350: LD_VAR 0 4
8354: STR
8355: PUSH
8356: LD_STRING ")
8358: STR
8359: PPUSH
8360: CALL_OW 559
// end else
8364: GO 8373
// ToLua ( getStreamItemsFromMission("","") ) ;
8366: LD_STRING getStreamItemsFromMission("","")
8368: PPUSH
8369: CALL_OW 559
// end ;
8373: LD_VAR 0 1
8377: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8378: LD_VAR 0 2
8382: PUSH
8383: LD_INT 100
8385: EQUAL
8386: IFFALSE 9335
// begin if not StreamModeActive then
8388: LD_EXP 12
8392: NOT
8393: IFFALSE 8403
// StreamModeActive := true ;
8395: LD_ADDR_EXP 12
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// if p3 = 0 then
8403: LD_VAR 0 3
8407: PUSH
8408: LD_INT 0
8410: EQUAL
8411: IFFALSE 8417
// InitStreamMode ;
8413: CALL 4638 0 0
// if p3 = 1 then
8417: LD_VAR 0 3
8421: PUSH
8422: LD_INT 1
8424: EQUAL
8425: IFFALSE 8435
// sRocket := true ;
8427: LD_ADDR_EXP 17
8431: PUSH
8432: LD_INT 1
8434: ST_TO_ADDR
// if p3 = 2 then
8435: LD_VAR 0 3
8439: PUSH
8440: LD_INT 2
8442: EQUAL
8443: IFFALSE 8453
// sSpeed := true ;
8445: LD_ADDR_EXP 16
8449: PUSH
8450: LD_INT 1
8452: ST_TO_ADDR
// if p3 = 3 then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_INT 3
8460: EQUAL
8461: IFFALSE 8471
// sEngine := true ;
8463: LD_ADDR_EXP 18
8467: PUSH
8468: LD_INT 1
8470: ST_TO_ADDR
// if p3 = 4 then
8471: LD_VAR 0 3
8475: PUSH
8476: LD_INT 4
8478: EQUAL
8479: IFFALSE 8489
// sSpec := true ;
8481: LD_ADDR_EXP 15
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// if p3 = 5 then
8489: LD_VAR 0 3
8493: PUSH
8494: LD_INT 5
8496: EQUAL
8497: IFFALSE 8507
// sLevel := true ;
8499: LD_ADDR_EXP 19
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// if p3 = 6 then
8507: LD_VAR 0 3
8511: PUSH
8512: LD_INT 6
8514: EQUAL
8515: IFFALSE 8525
// sArmoury := true ;
8517: LD_ADDR_EXP 20
8521: PUSH
8522: LD_INT 1
8524: ST_TO_ADDR
// if p3 = 7 then
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 7
8532: EQUAL
8533: IFFALSE 8543
// sRadar := true ;
8535: LD_ADDR_EXP 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// if p3 = 8 then
8543: LD_VAR 0 3
8547: PUSH
8548: LD_INT 8
8550: EQUAL
8551: IFFALSE 8561
// sBunker := true ;
8553: LD_ADDR_EXP 22
8557: PUSH
8558: LD_INT 1
8560: ST_TO_ADDR
// if p3 = 9 then
8561: LD_VAR 0 3
8565: PUSH
8566: LD_INT 9
8568: EQUAL
8569: IFFALSE 8579
// sHack := true ;
8571: LD_ADDR_EXP 23
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// if p3 = 10 then
8579: LD_VAR 0 3
8583: PUSH
8584: LD_INT 10
8586: EQUAL
8587: IFFALSE 8597
// sFire := true ;
8589: LD_ADDR_EXP 24
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// if p3 = 11 then
8597: LD_VAR 0 3
8601: PUSH
8602: LD_INT 11
8604: EQUAL
8605: IFFALSE 8615
// sRefresh := true ;
8607: LD_ADDR_EXP 25
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// if p3 = 12 then
8615: LD_VAR 0 3
8619: PUSH
8620: LD_INT 12
8622: EQUAL
8623: IFFALSE 8633
// sExp := true ;
8625: LD_ADDR_EXP 26
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// if p3 = 13 then
8633: LD_VAR 0 3
8637: PUSH
8638: LD_INT 13
8640: EQUAL
8641: IFFALSE 8651
// sDepot := true ;
8643: LD_ADDR_EXP 27
8647: PUSH
8648: LD_INT 1
8650: ST_TO_ADDR
// if p3 = 14 then
8651: LD_VAR 0 3
8655: PUSH
8656: LD_INT 14
8658: EQUAL
8659: IFFALSE 8669
// sFlag := true ;
8661: LD_ADDR_EXP 28
8665: PUSH
8666: LD_INT 1
8668: ST_TO_ADDR
// if p3 = 15 then
8669: LD_VAR 0 3
8673: PUSH
8674: LD_INT 15
8676: EQUAL
8677: IFFALSE 8687
// sKamikadze := true ;
8679: LD_ADDR_EXP 36
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// if p3 = 16 then
8687: LD_VAR 0 3
8691: PUSH
8692: LD_INT 16
8694: EQUAL
8695: IFFALSE 8705
// sTroll := true ;
8697: LD_ADDR_EXP 37
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// if p3 = 17 then
8705: LD_VAR 0 3
8709: PUSH
8710: LD_INT 17
8712: EQUAL
8713: IFFALSE 8723
// sSlow := true ;
8715: LD_ADDR_EXP 38
8719: PUSH
8720: LD_INT 1
8722: ST_TO_ADDR
// if p3 = 18 then
8723: LD_VAR 0 3
8727: PUSH
8728: LD_INT 18
8730: EQUAL
8731: IFFALSE 8741
// sLack := true ;
8733: LD_ADDR_EXP 39
8737: PUSH
8738: LD_INT 1
8740: ST_TO_ADDR
// if p3 = 19 then
8741: LD_VAR 0 3
8745: PUSH
8746: LD_INT 19
8748: EQUAL
8749: IFFALSE 8759
// sTank := true ;
8751: LD_ADDR_EXP 41
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if p3 = 20 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 20
8766: EQUAL
8767: IFFALSE 8777
// sRemote := true ;
8769: LD_ADDR_EXP 42
8773: PUSH
8774: LD_INT 1
8776: ST_TO_ADDR
// if p3 = 21 then
8777: LD_VAR 0 3
8781: PUSH
8782: LD_INT 21
8784: EQUAL
8785: IFFALSE 8795
// sPowell := true ;
8787: LD_ADDR_EXP 43
8791: PUSH
8792: LD_INT 1
8794: ST_TO_ADDR
// if p3 = 22 then
8795: LD_VAR 0 3
8799: PUSH
8800: LD_INT 22
8802: EQUAL
8803: IFFALSE 8813
// sTeleport := true ;
8805: LD_ADDR_EXP 46
8809: PUSH
8810: LD_INT 1
8812: ST_TO_ADDR
// if p3 = 23 then
8813: LD_VAR 0 3
8817: PUSH
8818: LD_INT 23
8820: EQUAL
8821: IFFALSE 8831
// sOilTower := true ;
8823: LD_ADDR_EXP 48
8827: PUSH
8828: LD_INT 1
8830: ST_TO_ADDR
// if p3 = 24 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 24
8838: EQUAL
8839: IFFALSE 8849
// sShovel := true ;
8841: LD_ADDR_EXP 49
8845: PUSH
8846: LD_INT 1
8848: ST_TO_ADDR
// if p3 = 25 then
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 25
8856: EQUAL
8857: IFFALSE 8867
// sSheik := true ;
8859: LD_ADDR_EXP 50
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if p3 = 26 then
8867: LD_VAR 0 3
8871: PUSH
8872: LD_INT 26
8874: EQUAL
8875: IFFALSE 8885
// sEarthquake := true ;
8877: LD_ADDR_EXP 52
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// if p3 = 27 then
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 27
8892: EQUAL
8893: IFFALSE 8903
// sAI := true ;
8895: LD_ADDR_EXP 53
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// if p3 = 28 then
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 28
8910: EQUAL
8911: IFFALSE 8921
// sCargo := true ;
8913: LD_ADDR_EXP 56
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if p3 = 29 then
8921: LD_VAR 0 3
8925: PUSH
8926: LD_INT 29
8928: EQUAL
8929: IFFALSE 8939
// sDLaser := true ;
8931: LD_ADDR_EXP 57
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// if p3 = 30 then
8939: LD_VAR 0 3
8943: PUSH
8944: LD_INT 30
8946: EQUAL
8947: IFFALSE 8957
// sExchange := true ;
8949: LD_ADDR_EXP 58
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if p3 = 31 then
8957: LD_VAR 0 3
8961: PUSH
8962: LD_INT 31
8964: EQUAL
8965: IFFALSE 8975
// sFac := true ;
8967: LD_ADDR_EXP 59
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// if p3 = 32 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 32
8982: EQUAL
8983: IFFALSE 8993
// sPower := true ;
8985: LD_ADDR_EXP 60
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if p3 = 33 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 33
9000: EQUAL
9001: IFFALSE 9011
// sRandom := true ;
9003: LD_ADDR_EXP 61
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if p3 = 34 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 34
9018: EQUAL
9019: IFFALSE 9029
// sShield := true ;
9021: LD_ADDR_EXP 62
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// if p3 = 35 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 35
9036: EQUAL
9037: IFFALSE 9047
// sTime := true ;
9039: LD_ADDR_EXP 63
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// if p3 = 36 then
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 36
9054: EQUAL
9055: IFFALSE 9065
// sTools := true ;
9057: LD_ADDR_EXP 64
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// if p3 = 101 then
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 101
9072: EQUAL
9073: IFFALSE 9083
// sSold := true ;
9075: LD_ADDR_EXP 29
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// if p3 = 102 then
9083: LD_VAR 0 3
9087: PUSH
9088: LD_INT 102
9090: EQUAL
9091: IFFALSE 9101
// sDiff := true ;
9093: LD_ADDR_EXP 30
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// if p3 = 103 then
9101: LD_VAR 0 3
9105: PUSH
9106: LD_INT 103
9108: EQUAL
9109: IFFALSE 9119
// sFog := true ;
9111: LD_ADDR_EXP 33
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// if p3 = 104 then
9119: LD_VAR 0 3
9123: PUSH
9124: LD_INT 104
9126: EQUAL
9127: IFFALSE 9137
// sReset := true ;
9129: LD_ADDR_EXP 34
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// if p3 = 105 then
9137: LD_VAR 0 3
9141: PUSH
9142: LD_INT 105
9144: EQUAL
9145: IFFALSE 9155
// sSun := true ;
9147: LD_ADDR_EXP 35
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// if p3 = 106 then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 106
9162: EQUAL
9163: IFFALSE 9173
// sTiger := true ;
9165: LD_ADDR_EXP 31
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
// if p3 = 107 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 107
9180: EQUAL
9181: IFFALSE 9191
// sBomb := true ;
9183: LD_ADDR_EXP 32
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// if p3 = 108 then
9191: LD_VAR 0 3
9195: PUSH
9196: LD_INT 108
9198: EQUAL
9199: IFFALSE 9209
// sWound := true ;
9201: LD_ADDR_EXP 40
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// if p3 = 109 then
9209: LD_VAR 0 3
9213: PUSH
9214: LD_INT 109
9216: EQUAL
9217: IFFALSE 9227
// sBetray := true ;
9219: LD_ADDR_EXP 44
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// if p3 = 110 then
9227: LD_VAR 0 3
9231: PUSH
9232: LD_INT 110
9234: EQUAL
9235: IFFALSE 9245
// sContamin := true ;
9237: LD_ADDR_EXP 45
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// if p3 = 111 then
9245: LD_VAR 0 3
9249: PUSH
9250: LD_INT 111
9252: EQUAL
9253: IFFALSE 9263
// sOil := true ;
9255: LD_ADDR_EXP 47
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// if p3 = 112 then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 112
9270: EQUAL
9271: IFFALSE 9281
// sStu := true ;
9273: LD_ADDR_EXP 51
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// if p3 = 113 then
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 113
9288: EQUAL
9289: IFFALSE 9299
// sBazooka := true ;
9291: LD_ADDR_EXP 54
9295: PUSH
9296: LD_INT 1
9298: ST_TO_ADDR
// if p3 = 114 then
9299: LD_VAR 0 3
9303: PUSH
9304: LD_INT 114
9306: EQUAL
9307: IFFALSE 9317
// sMortar := true ;
9309: LD_ADDR_EXP 55
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// if p3 = 115 then
9317: LD_VAR 0 3
9321: PUSH
9322: LD_INT 115
9324: EQUAL
9325: IFFALSE 9335
// sRanger := true ;
9327: LD_ADDR_EXP 65
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// end ; end ;
9335: PPOPN 6
9337: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9338: LD_EXP 12
9342: PUSH
9343: LD_EXP 17
9347: AND
9348: IFFALSE 9472
9350: GO 9352
9352: DISABLE
9353: LD_INT 0
9355: PPUSH
9356: PPUSH
// begin enable ;
9357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9358: LD_ADDR_VAR 0 2
9362: PUSH
9363: LD_INT 22
9365: PUSH
9366: LD_OWVAR 2
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 2
9377: PUSH
9378: LD_INT 34
9380: PUSH
9381: LD_INT 7
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 34
9390: PUSH
9391: LD_INT 45
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 34
9400: PUSH
9401: LD_INT 28
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 34
9410: PUSH
9411: LD_INT 47
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PPUSH
9429: CALL_OW 69
9433: ST_TO_ADDR
// if not tmp then
9434: LD_VAR 0 2
9438: NOT
9439: IFFALSE 9443
// exit ;
9441: GO 9472
// for i in tmp do
9443: LD_ADDR_VAR 0 1
9447: PUSH
9448: LD_VAR 0 2
9452: PUSH
9453: FOR_IN
9454: IFFALSE 9470
// begin SetLives ( i , 0 ) ;
9456: LD_VAR 0 1
9460: PPUSH
9461: LD_INT 0
9463: PPUSH
9464: CALL_OW 234
// end ;
9468: GO 9453
9470: POP
9471: POP
// end ;
9472: PPOPN 2
9474: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9475: LD_EXP 12
9479: PUSH
9480: LD_EXP 18
9484: AND
9485: IFFALSE 9569
9487: GO 9489
9489: DISABLE
9490: LD_INT 0
9492: PPUSH
9493: PPUSH
// begin enable ;
9494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: LD_INT 22
9502: PUSH
9503: LD_OWVAR 2
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 32
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PPUSH
9526: CALL_OW 69
9530: ST_TO_ADDR
// if not tmp then
9531: LD_VAR 0 2
9535: NOT
9536: IFFALSE 9540
// exit ;
9538: GO 9569
// for i in tmp do
9540: LD_ADDR_VAR 0 1
9544: PUSH
9545: LD_VAR 0 2
9549: PUSH
9550: FOR_IN
9551: IFFALSE 9567
// begin SetLives ( i , 0 ) ;
9553: LD_VAR 0 1
9557: PPUSH
9558: LD_INT 0
9560: PPUSH
9561: CALL_OW 234
// end ;
9565: GO 9550
9567: POP
9568: POP
// end ;
9569: PPOPN 2
9571: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9572: LD_EXP 12
9576: PUSH
9577: LD_EXP 15
9581: AND
9582: IFFALSE 9675
9584: GO 9586
9586: DISABLE
9587: LD_INT 0
9589: PPUSH
// begin enable ;
9590: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9591: LD_ADDR_VAR 0 1
9595: PUSH
9596: LD_INT 22
9598: PUSH
9599: LD_OWVAR 2
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: LD_INT 25
9613: PUSH
9614: LD_INT 5
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 25
9623: PUSH
9624: LD_INT 9
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 25
9633: PUSH
9634: LD_INT 8
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: FOR_IN
9657: IFFALSE 9673
// begin SetClass ( i , 1 ) ;
9659: LD_VAR 0 1
9663: PPUSH
9664: LD_INT 1
9666: PPUSH
9667: CALL_OW 336
// end ;
9671: GO 9656
9673: POP
9674: POP
// end ;
9675: PPOPN 1
9677: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9678: LD_EXP 12
9682: PUSH
9683: LD_EXP 16
9687: AND
9688: PUSH
9689: LD_OWVAR 65
9693: PUSH
9694: LD_INT 7
9696: LESS
9697: AND
9698: IFFALSE 9712
9700: GO 9702
9702: DISABLE
// begin enable ;
9703: ENABLE
// game_speed := 7 ;
9704: LD_ADDR_OWVAR 65
9708: PUSH
9709: LD_INT 7
9711: ST_TO_ADDR
// end ;
9712: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9713: LD_EXP 12
9717: PUSH
9718: LD_EXP 19
9722: AND
9723: IFFALSE 9925
9725: GO 9727
9727: DISABLE
9728: LD_INT 0
9730: PPUSH
9731: PPUSH
9732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9733: LD_ADDR_VAR 0 3
9737: PUSH
9738: LD_INT 81
9740: PUSH
9741: LD_OWVAR 2
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 21
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// if not tmp then
9769: LD_VAR 0 3
9773: NOT
9774: IFFALSE 9778
// exit ;
9776: GO 9925
// if tmp > 5 then
9778: LD_VAR 0 3
9782: PUSH
9783: LD_INT 5
9785: GREATER
9786: IFFALSE 9798
// k := 5 else
9788: LD_ADDR_VAR 0 2
9792: PUSH
9793: LD_INT 5
9795: ST_TO_ADDR
9796: GO 9808
// k := tmp ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_VAR 0 3
9807: ST_TO_ADDR
// for i := 1 to k do
9808: LD_ADDR_VAR 0 1
9812: PUSH
9813: DOUBLE
9814: LD_INT 1
9816: DEC
9817: ST_TO_ADDR
9818: LD_VAR 0 2
9822: PUSH
9823: FOR_TO
9824: IFFALSE 9923
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9826: LD_VAR 0 3
9830: PUSH
9831: LD_VAR 0 1
9835: ARRAY
9836: PPUSH
9837: LD_VAR 0 1
9841: PUSH
9842: LD_INT 4
9844: MOD
9845: PUSH
9846: LD_INT 1
9848: PLUS
9849: PPUSH
9850: CALL_OW 259
9854: PUSH
9855: LD_INT 10
9857: LESS
9858: IFFALSE 9921
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9860: LD_VAR 0 3
9864: PUSH
9865: LD_VAR 0 1
9869: ARRAY
9870: PPUSH
9871: LD_VAR 0 1
9875: PUSH
9876: LD_INT 4
9878: MOD
9879: PUSH
9880: LD_INT 1
9882: PLUS
9883: PPUSH
9884: LD_VAR 0 3
9888: PUSH
9889: LD_VAR 0 1
9893: ARRAY
9894: PPUSH
9895: LD_VAR 0 1
9899: PUSH
9900: LD_INT 4
9902: MOD
9903: PUSH
9904: LD_INT 1
9906: PLUS
9907: PPUSH
9908: CALL_OW 259
9912: PUSH
9913: LD_INT 1
9915: PLUS
9916: PPUSH
9917: CALL_OW 237
9921: GO 9823
9923: POP
9924: POP
// end ;
9925: PPOPN 3
9927: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9928: LD_EXP 12
9932: PUSH
9933: LD_EXP 20
9937: AND
9938: IFFALSE 9958
9940: GO 9942
9942: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9943: LD_INT 4
9945: PPUSH
9946: LD_OWVAR 2
9950: PPUSH
9951: LD_INT 0
9953: PPUSH
9954: CALL_OW 324
9958: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9959: LD_EXP 12
9963: PUSH
9964: LD_EXP 49
9968: AND
9969: IFFALSE 9989
9971: GO 9973
9973: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9974: LD_INT 19
9976: PPUSH
9977: LD_OWVAR 2
9981: PPUSH
9982: LD_INT 0
9984: PPUSH
9985: CALL_OW 324
9989: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9990: LD_EXP 12
9994: PUSH
9995: LD_EXP 21
9999: AND
10000: IFFALSE 10102
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
10008: PPUSH
// begin enable ;
10009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10010: LD_ADDR_VAR 0 2
10014: PUSH
10015: LD_INT 22
10017: PUSH
10018: LD_OWVAR 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_INT 34
10032: PUSH
10033: LD_INT 11
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 34
10042: PUSH
10043: LD_INT 30
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 69
10063: ST_TO_ADDR
// if not tmp then
10064: LD_VAR 0 2
10068: NOT
10069: IFFALSE 10073
// exit ;
10071: GO 10102
// for i in tmp do
10073: LD_ADDR_VAR 0 1
10077: PUSH
10078: LD_VAR 0 2
10082: PUSH
10083: FOR_IN
10084: IFFALSE 10100
// begin SetLives ( i , 0 ) ;
10086: LD_VAR 0 1
10090: PPUSH
10091: LD_INT 0
10093: PPUSH
10094: CALL_OW 234
// end ;
10098: GO 10083
10100: POP
10101: POP
// end ;
10102: PPOPN 2
10104: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10105: LD_EXP 12
10109: PUSH
10110: LD_EXP 22
10114: AND
10115: IFFALSE 10135
10117: GO 10119
10119: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10120: LD_INT 32
10122: PPUSH
10123: LD_OWVAR 2
10127: PPUSH
10128: LD_INT 0
10130: PPUSH
10131: CALL_OW 324
10135: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10136: LD_EXP 12
10140: PUSH
10141: LD_EXP 23
10145: AND
10146: IFFALSE 10327
10148: GO 10150
10150: DISABLE
10151: LD_INT 0
10153: PPUSH
10154: PPUSH
10155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10156: LD_ADDR_VAR 0 2
10160: PUSH
10161: LD_INT 22
10163: PUSH
10164: LD_OWVAR 2
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 33
10175: PUSH
10176: LD_INT 3
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PPUSH
10187: CALL_OW 69
10191: ST_TO_ADDR
// if not tmp then
10192: LD_VAR 0 2
10196: NOT
10197: IFFALSE 10201
// exit ;
10199: GO 10327
// side := 0 ;
10201: LD_ADDR_VAR 0 3
10205: PUSH
10206: LD_INT 0
10208: ST_TO_ADDR
// for i := 1 to 8 do
10209: LD_ADDR_VAR 0 1
10213: PUSH
10214: DOUBLE
10215: LD_INT 1
10217: DEC
10218: ST_TO_ADDR
10219: LD_INT 8
10221: PUSH
10222: FOR_TO
10223: IFFALSE 10271
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10225: LD_OWVAR 2
10229: PUSH
10230: LD_VAR 0 1
10234: NONEQUAL
10235: PUSH
10236: LD_OWVAR 2
10240: PPUSH
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL_OW 81
10250: PUSH
10251: LD_INT 2
10253: EQUAL
10254: AND
10255: IFFALSE 10269
// begin side := i ;
10257: LD_ADDR_VAR 0 3
10261: PUSH
10262: LD_VAR 0 1
10266: ST_TO_ADDR
// break ;
10267: GO 10271
// end ;
10269: GO 10222
10271: POP
10272: POP
// if not side then
10273: LD_VAR 0 3
10277: NOT
10278: IFFALSE 10282
// exit ;
10280: GO 10327
// for i := 1 to tmp do
10282: LD_ADDR_VAR 0 1
10286: PUSH
10287: DOUBLE
10288: LD_INT 1
10290: DEC
10291: ST_TO_ADDR
10292: LD_VAR 0 2
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10325
// if Prob ( 60 ) then
10300: LD_INT 60
10302: PPUSH
10303: CALL_OW 13
10307: IFFALSE 10323
// SetSide ( i , side ) ;
10309: LD_VAR 0 1
10313: PPUSH
10314: LD_VAR 0 3
10318: PPUSH
10319: CALL_OW 235
10323: GO 10297
10325: POP
10326: POP
// end ;
10327: PPOPN 3
10329: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10330: LD_EXP 12
10334: PUSH
10335: LD_EXP 25
10339: AND
10340: IFFALSE 10459
10342: GO 10344
10344: DISABLE
10345: LD_INT 0
10347: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10348: LD_ADDR_VAR 0 1
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_OWVAR 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 21
10367: PUSH
10368: LD_INT 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 23
10380: PUSH
10381: LD_INT 0
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PUSH
10402: FOR_IN
10403: IFFALSE 10457
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 257
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: LD_INT 3
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: IN
10433: IFFALSE 10455
// SetClass ( un , rand ( 1 , 4 ) ) ;
10435: LD_VAR 0 1
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: LD_INT 4
10445: PPUSH
10446: CALL_OW 12
10450: PPUSH
10451: CALL_OW 336
10455: GO 10402
10457: POP
10458: POP
// end ;
10459: PPOPN 1
10461: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10462: LD_EXP 12
10466: PUSH
10467: LD_EXP 24
10471: AND
10472: IFFALSE 10551
10474: GO 10476
10476: DISABLE
10477: LD_INT 0
10479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10480: LD_ADDR_VAR 0 1
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_OWVAR 2
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 21
10499: PUSH
10500: LD_INT 3
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: ST_TO_ADDR
// if not tmp then
10516: LD_VAR 0 1
10520: NOT
10521: IFFALSE 10525
// exit ;
10523: GO 10551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10525: LD_VAR 0 1
10529: PUSH
10530: LD_INT 1
10532: PPUSH
10533: LD_VAR 0 1
10537: PPUSH
10538: CALL_OW 12
10542: ARRAY
10543: PPUSH
10544: LD_INT 100
10546: PPUSH
10547: CALL_OW 234
// end ;
10551: PPOPN 1
10553: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10554: LD_EXP 12
10558: PUSH
10559: LD_EXP 26
10563: AND
10564: IFFALSE 10662
10566: GO 10568
10568: DISABLE
10569: LD_INT 0
10571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: LD_INT 22
10579: PUSH
10580: LD_OWVAR 2
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 21
10591: PUSH
10592: LD_INT 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: ST_TO_ADDR
// if not tmp then
10608: LD_VAR 0 1
10612: NOT
10613: IFFALSE 10617
// exit ;
10615: GO 10662
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10617: LD_VAR 0 1
10621: PUSH
10622: LD_INT 1
10624: PPUSH
10625: LD_VAR 0 1
10629: PPUSH
10630: CALL_OW 12
10634: ARRAY
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: LD_INT 4
10641: PPUSH
10642: CALL_OW 12
10646: PPUSH
10647: LD_INT 3000
10649: PPUSH
10650: LD_INT 9000
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: CALL_OW 492
// end ;
10662: PPOPN 1
10664: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10665: LD_EXP 12
10669: PUSH
10670: LD_EXP 27
10674: AND
10675: IFFALSE 10695
10677: GO 10679
10679: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10680: LD_INT 1
10682: PPUSH
10683: LD_OWVAR 2
10687: PPUSH
10688: LD_INT 0
10690: PPUSH
10691: CALL_OW 324
10695: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10696: LD_EXP 12
10700: PUSH
10701: LD_EXP 28
10705: AND
10706: IFFALSE 10789
10708: GO 10710
10710: DISABLE
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10715: LD_ADDR_VAR 0 2
10719: PUSH
10720: LD_INT 22
10722: PUSH
10723: LD_OWVAR 2
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 3
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: ST_TO_ADDR
// if not tmp then
10751: LD_VAR 0 2
10755: NOT
10756: IFFALSE 10760
// exit ;
10758: GO 10789
// for i in tmp do
10760: LD_ADDR_VAR 0 1
10764: PUSH
10765: LD_VAR 0 2
10769: PUSH
10770: FOR_IN
10771: IFFALSE 10787
// SetBLevel ( i , 10 ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: LD_INT 10
10780: PPUSH
10781: CALL_OW 241
10785: GO 10770
10787: POP
10788: POP
// end ;
10789: PPOPN 2
10791: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10792: LD_EXP 12
10796: PUSH
10797: LD_EXP 29
10801: AND
10802: IFFALSE 10913
10804: GO 10806
10806: DISABLE
10807: LD_INT 0
10809: PPUSH
10810: PPUSH
10811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10812: LD_ADDR_VAR 0 3
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_OWVAR 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 25
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: CALL_OW 69
10847: ST_TO_ADDR
// if not tmp then
10848: LD_VAR 0 3
10852: NOT
10853: IFFALSE 10857
// exit ;
10855: GO 10913
// un := tmp [ rand ( 1 , tmp ) ] ;
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_VAR 0 3
10866: PUSH
10867: LD_INT 1
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: CALL_OW 12
10879: ARRAY
10880: ST_TO_ADDR
// if Crawls ( un ) then
10881: LD_VAR 0 2
10885: PPUSH
10886: CALL_OW 318
10890: IFFALSE 10901
// ComWalk ( un ) ;
10892: LD_VAR 0 2
10896: PPUSH
10897: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10901: LD_VAR 0 2
10905: PPUSH
10906: LD_INT 5
10908: PPUSH
10909: CALL_OW 336
// end ;
10913: PPOPN 3
10915: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10916: LD_EXP 12
10920: PUSH
10921: LD_EXP 30
10925: AND
10926: PUSH
10927: LD_OWVAR 67
10931: PUSH
10932: LD_INT 3
10934: LESS
10935: AND
10936: IFFALSE 10955
10938: GO 10940
10940: DISABLE
// Difficulty := Difficulty + 1 ;
10941: LD_ADDR_OWVAR 67
10945: PUSH
10946: LD_OWVAR 67
10950: PUSH
10951: LD_INT 1
10953: PLUS
10954: ST_TO_ADDR
10955: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10956: LD_EXP 12
10960: PUSH
10961: LD_EXP 31
10965: AND
10966: IFFALSE 11069
10968: GO 10970
10970: DISABLE
10971: LD_INT 0
10973: PPUSH
// begin for i := 1 to 5 do
10974: LD_ADDR_VAR 0 1
10978: PUSH
10979: DOUBLE
10980: LD_INT 1
10982: DEC
10983: ST_TO_ADDR
10984: LD_INT 5
10986: PUSH
10987: FOR_TO
10988: IFFALSE 11067
// begin uc_nation := nation_nature ;
10990: LD_ADDR_OWVAR 21
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// uc_side := 0 ;
10998: LD_ADDR_OWVAR 20
11002: PUSH
11003: LD_INT 0
11005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11006: LD_ADDR_OWVAR 29
11010: PUSH
11011: LD_INT 12
11013: PUSH
11014: LD_INT 12
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: ST_TO_ADDR
// hc_agressivity := 20 ;
11021: LD_ADDR_OWVAR 35
11025: PUSH
11026: LD_INT 20
11028: ST_TO_ADDR
// hc_class := class_tiger ;
11029: LD_ADDR_OWVAR 28
11033: PUSH
11034: LD_INT 14
11036: ST_TO_ADDR
// hc_gallery :=  ;
11037: LD_ADDR_OWVAR 33
11041: PUSH
11042: LD_STRING 
11044: ST_TO_ADDR
// hc_name :=  ;
11045: LD_ADDR_OWVAR 26
11049: PUSH
11050: LD_STRING 
11052: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11053: CALL_OW 44
11057: PPUSH
11058: LD_INT 0
11060: PPUSH
11061: CALL_OW 51
// end ;
11065: GO 10987
11067: POP
11068: POP
// end ;
11069: PPOPN 1
11071: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11072: LD_EXP 12
11076: PUSH
11077: LD_EXP 32
11081: AND
11082: IFFALSE 11091
11084: GO 11086
11086: DISABLE
// StreamSibBomb ;
11087: CALL 11092 0 0
11091: END
// export function StreamSibBomb ; var i , x , y ; begin
11092: LD_INT 0
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// result := false ;
11098: LD_ADDR_VAR 0 1
11102: PUSH
11103: LD_INT 0
11105: ST_TO_ADDR
// for i := 1 to 16 do
11106: LD_ADDR_VAR 0 2
11110: PUSH
11111: DOUBLE
11112: LD_INT 1
11114: DEC
11115: ST_TO_ADDR
11116: LD_INT 16
11118: PUSH
11119: FOR_TO
11120: IFFALSE 11319
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11122: LD_ADDR_VAR 0 3
11126: PUSH
11127: LD_INT 10
11129: PUSH
11130: LD_INT 20
11132: PUSH
11133: LD_INT 30
11135: PUSH
11136: LD_INT 40
11138: PUSH
11139: LD_INT 50
11141: PUSH
11142: LD_INT 60
11144: PUSH
11145: LD_INT 70
11147: PUSH
11148: LD_INT 80
11150: PUSH
11151: LD_INT 90
11153: PUSH
11154: LD_INT 100
11156: PUSH
11157: LD_INT 110
11159: PUSH
11160: LD_INT 120
11162: PUSH
11163: LD_INT 130
11165: PUSH
11166: LD_INT 140
11168: PUSH
11169: LD_INT 150
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 1
11191: PPUSH
11192: LD_INT 15
11194: PPUSH
11195: CALL_OW 12
11199: ARRAY
11200: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11201: LD_ADDR_VAR 0 4
11205: PUSH
11206: LD_INT 10
11208: PUSH
11209: LD_INT 20
11211: PUSH
11212: LD_INT 30
11214: PUSH
11215: LD_INT 40
11217: PUSH
11218: LD_INT 50
11220: PUSH
11221: LD_INT 60
11223: PUSH
11224: LD_INT 70
11226: PUSH
11227: LD_INT 80
11229: PUSH
11230: LD_INT 90
11232: PUSH
11233: LD_INT 100
11235: PUSH
11236: LD_INT 110
11238: PUSH
11239: LD_INT 120
11241: PUSH
11242: LD_INT 130
11244: PUSH
11245: LD_INT 140
11247: PUSH
11248: LD_INT 150
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 1
11270: PPUSH
11271: LD_INT 15
11273: PPUSH
11274: CALL_OW 12
11278: ARRAY
11279: ST_TO_ADDR
// if ValidHex ( x , y ) then
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_VAR 0 4
11289: PPUSH
11290: CALL_OW 488
11294: IFFALSE 11317
// begin result := [ x , y ] ;
11296: LD_ADDR_VAR 0 1
11300: PUSH
11301: LD_VAR 0 3
11305: PUSH
11306: LD_VAR 0 4
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// break ;
11315: GO 11319
// end ; end ;
11317: GO 11119
11319: POP
11320: POP
// if result then
11321: LD_VAR 0 1
11325: IFFALSE 11385
// begin ToLua ( playSibBomb() ) ;
11327: LD_STRING playSibBomb()
11329: PPUSH
11330: CALL_OW 559
// wait ( 0 0$14 ) ;
11334: LD_INT 490
11336: PPUSH
11337: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11341: LD_VAR 0 1
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PPUSH
11350: LD_VAR 0 1
11354: PUSH
11355: LD_INT 2
11357: ARRAY
11358: PPUSH
11359: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11363: LD_VAR 0 1
11367: PUSH
11368: LD_INT 1
11370: ARRAY
11371: PPUSH
11372: LD_VAR 0 1
11376: PUSH
11377: LD_INT 2
11379: ARRAY
11380: PPUSH
11381: CALL_OW 429
// end ; end ;
11385: LD_VAR 0 1
11389: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11390: LD_EXP 12
11394: PUSH
11395: LD_EXP 34
11399: AND
11400: IFFALSE 11412
11402: GO 11404
11404: DISABLE
// YouLost (  ) ;
11405: LD_STRING 
11407: PPUSH
11408: CALL_OW 104
11412: END
// every 0 0$1 trigger StreamModeActive and sFog do
11413: LD_EXP 12
11417: PUSH
11418: LD_EXP 33
11422: AND
11423: IFFALSE 11437
11425: GO 11427
11427: DISABLE
// FogOff ( your_side ) ;
11428: LD_OWVAR 2
11432: PPUSH
11433: CALL_OW 344
11437: END
// every 0 0$1 trigger StreamModeActive and sSun do
11438: LD_EXP 12
11442: PUSH
11443: LD_EXP 35
11447: AND
11448: IFFALSE 11476
11450: GO 11452
11452: DISABLE
// begin solar_recharge_percent := 0 ;
11453: LD_ADDR_OWVAR 79
11457: PUSH
11458: LD_INT 0
11460: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11461: LD_INT 10500
11463: PPUSH
11464: CALL_OW 67
// solar_recharge_percent := 100 ;
11468: LD_ADDR_OWVAR 79
11472: PUSH
11473: LD_INT 100
11475: ST_TO_ADDR
// end ;
11476: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11477: LD_EXP 12
11481: PUSH
11482: LD_EXP 36
11486: AND
11487: IFFALSE 11726
11489: GO 11491
11491: DISABLE
11492: LD_INT 0
11494: PPUSH
11495: PPUSH
11496: PPUSH
// begin tmp := [ ] ;
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// for i := 1 to 6 do
11504: LD_ADDR_VAR 0 1
11508: PUSH
11509: DOUBLE
11510: LD_INT 1
11512: DEC
11513: ST_TO_ADDR
11514: LD_INT 6
11516: PUSH
11517: FOR_TO
11518: IFFALSE 11623
// begin uc_nation := nation_nature ;
11520: LD_ADDR_OWVAR 21
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// uc_side := 0 ;
11528: LD_ADDR_OWVAR 20
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11536: LD_ADDR_OWVAR 29
11540: PUSH
11541: LD_INT 12
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: ST_TO_ADDR
// hc_agressivity := 20 ;
11551: LD_ADDR_OWVAR 35
11555: PUSH
11556: LD_INT 20
11558: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11559: LD_ADDR_OWVAR 28
11563: PUSH
11564: LD_INT 17
11566: ST_TO_ADDR
// hc_gallery :=  ;
11567: LD_ADDR_OWVAR 33
11571: PUSH
11572: LD_STRING 
11574: ST_TO_ADDR
// hc_name :=  ;
11575: LD_ADDR_OWVAR 26
11579: PUSH
11580: LD_STRING 
11582: ST_TO_ADDR
// un := CreateHuman ;
11583: LD_ADDR_VAR 0 2
11587: PUSH
11588: CALL_OW 44
11592: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11593: LD_VAR 0 2
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 51
// tmp := tmp ^ un ;
11605: LD_ADDR_VAR 0 3
11609: PUSH
11610: LD_VAR 0 3
11614: PUSH
11615: LD_VAR 0 2
11619: ADD
11620: ST_TO_ADDR
// end ;
11621: GO 11517
11623: POP
11624: POP
// repeat wait ( 0 0$1 ) ;
11625: LD_INT 35
11627: PPUSH
11628: CALL_OW 67
// for un in tmp do
11632: LD_ADDR_VAR 0 2
11636: PUSH
11637: LD_VAR 0 3
11641: PUSH
11642: FOR_IN
11643: IFFALSE 11717
// begin if IsDead ( un ) then
11645: LD_VAR 0 2
11649: PPUSH
11650: CALL_OW 301
11654: IFFALSE 11674
// begin tmp := tmp diff un ;
11656: LD_ADDR_VAR 0 3
11660: PUSH
11661: LD_VAR 0 3
11665: PUSH
11666: LD_VAR 0 2
11670: DIFF
11671: ST_TO_ADDR
// continue ;
11672: GO 11642
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_INT 3
11681: PUSH
11682: LD_INT 22
11684: PUSH
11685: LD_INT 0
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: PPUSH
11701: LD_VAR 0 2
11705: PPUSH
11706: CALL_OW 74
11710: PPUSH
11711: CALL_OW 115
// end ;
11715: GO 11642
11717: POP
11718: POP
// until not tmp ;
11719: LD_VAR 0 3
11723: NOT
11724: IFFALSE 11625
// end ;
11726: PPOPN 3
11728: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11729: LD_EXP 12
11733: PUSH
11734: LD_EXP 37
11738: AND
11739: IFFALSE 11793
11741: GO 11743
11743: DISABLE
// begin ToLua ( displayTroll(); ) ;
11744: LD_STRING displayTroll();
11746: PPUSH
11747: CALL_OW 559
// wait ( 3 3$00 ) ;
11751: LD_INT 6300
11753: PPUSH
11754: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11758: LD_STRING hideTroll();
11760: PPUSH
11761: CALL_OW 559
// wait ( 1 1$00 ) ;
11765: LD_INT 2100
11767: PPUSH
11768: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11772: LD_STRING displayTroll();
11774: PPUSH
11775: CALL_OW 559
// wait ( 1 1$00 ) ;
11779: LD_INT 2100
11781: PPUSH
11782: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11786: LD_STRING hideTroll();
11788: PPUSH
11789: CALL_OW 559
// end ;
11793: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11794: LD_EXP 12
11798: PUSH
11799: LD_EXP 38
11803: AND
11804: IFFALSE 11867
11806: GO 11808
11808: DISABLE
11809: LD_INT 0
11811: PPUSH
// begin p := 0 ;
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: LD_INT 0
11819: ST_TO_ADDR
// repeat game_speed := 1 ;
11820: LD_ADDR_OWVAR 65
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11828: LD_INT 35
11830: PPUSH
11831: CALL_OW 67
// p := p + 1 ;
11835: LD_ADDR_VAR 0 1
11839: PUSH
11840: LD_VAR 0 1
11844: PUSH
11845: LD_INT 1
11847: PLUS
11848: ST_TO_ADDR
// until p >= 60 ;
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 60
11856: GREATEREQUAL
11857: IFFALSE 11820
// game_speed := 4 ;
11859: LD_ADDR_OWVAR 65
11863: PUSH
11864: LD_INT 4
11866: ST_TO_ADDR
// end ;
11867: PPOPN 1
11869: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11870: LD_EXP 12
11874: PUSH
11875: LD_EXP 39
11879: AND
11880: IFFALSE 12026
11882: GO 11884
11884: DISABLE
11885: LD_INT 0
11887: PPUSH
11888: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11889: LD_ADDR_VAR 0 1
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_OWVAR 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 2
11908: PUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 0
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 69
11942: ST_TO_ADDR
// if not depot then
11943: LD_VAR 0 1
11947: NOT
11948: IFFALSE 11952
// exit ;
11950: GO 12026
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11952: LD_ADDR_VAR 0 2
11956: PUSH
11957: LD_VAR 0 1
11961: PUSH
11962: LD_INT 1
11964: PPUSH
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 12
11974: ARRAY
11975: PPUSH
11976: CALL_OW 274
11980: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11996: LD_VAR 0 2
12000: PPUSH
12001: LD_INT 2
12003: PPUSH
12004: LD_INT 0
12006: PPUSH
12007: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_INT 3
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: CALL_OW 277
// end ;
12026: PPOPN 2
12028: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12029: LD_EXP 12
12033: PUSH
12034: LD_EXP 40
12038: AND
12039: IFFALSE 12136
12041: GO 12043
12043: DISABLE
12044: LD_INT 0
12046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: LD_INT 22
12054: PUSH
12055: LD_OWVAR 2
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 21
12066: PUSH
12067: LD_INT 1
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 3
12076: PUSH
12077: LD_INT 23
12079: PUSH
12080: LD_INT 0
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 69
12100: ST_TO_ADDR
// if not tmp then
12101: LD_VAR 0 1
12105: NOT
12106: IFFALSE 12110
// exit ;
12108: GO 12136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12110: LD_VAR 0 1
12114: PUSH
12115: LD_INT 1
12117: PPUSH
12118: LD_VAR 0 1
12122: PPUSH
12123: CALL_OW 12
12127: ARRAY
12128: PPUSH
12129: LD_INT 200
12131: PPUSH
12132: CALL_OW 234
// end ;
12136: PPOPN 1
12138: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12139: LD_EXP 12
12143: PUSH
12144: LD_EXP 41
12148: AND
12149: IFFALSE 12228
12151: GO 12153
12153: DISABLE
12154: LD_INT 0
12156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12157: LD_ADDR_VAR 0 1
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_OWVAR 2
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 21
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL_OW 69
12192: ST_TO_ADDR
// if not tmp then
12193: LD_VAR 0 1
12197: NOT
12198: IFFALSE 12202
// exit ;
12200: GO 12228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12202: LD_VAR 0 1
12206: PUSH
12207: LD_INT 1
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 12
12219: ARRAY
12220: PPUSH
12221: LD_INT 60
12223: PPUSH
12224: CALL_OW 234
// end ;
12228: PPOPN 1
12230: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12231: LD_EXP 12
12235: PUSH
12236: LD_EXP 42
12240: AND
12241: IFFALSE 12340
12243: GO 12245
12245: DISABLE
12246: LD_INT 0
12248: PPUSH
12249: PPUSH
// begin enable ;
12250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12251: LD_ADDR_VAR 0 1
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_OWVAR 2
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 61
12270: PUSH
12271: EMPTY
12272: LIST
12273: PUSH
12274: LD_INT 33
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: LIST
12288: PPUSH
12289: CALL_OW 69
12293: ST_TO_ADDR
// if not tmp then
12294: LD_VAR 0 1
12298: NOT
12299: IFFALSE 12303
// exit ;
12301: GO 12340
// for i in tmp do
12303: LD_ADDR_VAR 0 2
12307: PUSH
12308: LD_VAR 0 1
12312: PUSH
12313: FOR_IN
12314: IFFALSE 12338
// if IsControledBy ( i ) then
12316: LD_VAR 0 2
12320: PPUSH
12321: CALL_OW 312
12325: IFFALSE 12336
// ComUnlink ( i ) ;
12327: LD_VAR 0 2
12331: PPUSH
12332: CALL_OW 136
12336: GO 12313
12338: POP
12339: POP
// end ;
12340: PPOPN 2
12342: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12343: LD_EXP 12
12347: PUSH
12348: LD_EXP 43
12352: AND
12353: IFFALSE 12493
12355: GO 12357
12357: DISABLE
12358: LD_INT 0
12360: PPUSH
12361: PPUSH
// begin ToLua ( displayPowell(); ) ;
12362: LD_STRING displayPowell();
12364: PPUSH
12365: CALL_OW 559
// uc_side := 0 ;
12369: LD_ADDR_OWVAR 20
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// uc_nation := 2 ;
12377: LD_ADDR_OWVAR 21
12381: PUSH
12382: LD_INT 2
12384: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12385: LD_ADDR_OWVAR 37
12389: PUSH
12390: LD_INT 14
12392: ST_TO_ADDR
// vc_engine := engine_siberite ;
12393: LD_ADDR_OWVAR 39
12397: PUSH
12398: LD_INT 3
12400: ST_TO_ADDR
// vc_control := control_apeman ;
12401: LD_ADDR_OWVAR 38
12405: PUSH
12406: LD_INT 5
12408: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12409: LD_ADDR_OWVAR 40
12413: PUSH
12414: LD_INT 29
12416: ST_TO_ADDR
// un := CreateVehicle ;
12417: LD_ADDR_VAR 0 2
12421: PUSH
12422: CALL_OW 45
12426: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12427: LD_VAR 0 2
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12439: LD_INT 35
12441: PPUSH
12442: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12446: LD_VAR 0 2
12450: PPUSH
12451: LD_INT 22
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PPUSH
12463: CALL_OW 69
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: CALL_OW 74
12477: PPUSH
12478: CALL_OW 115
// until IsDead ( un ) ;
12482: LD_VAR 0 2
12486: PPUSH
12487: CALL_OW 301
12491: IFFALSE 12439
// end ;
12493: PPOPN 2
12495: END
// every 0 0$1 trigger StreamModeActive and sStu do
12496: LD_EXP 12
12500: PUSH
12501: LD_EXP 51
12505: AND
12506: IFFALSE 12522
12508: GO 12510
12510: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12511: LD_STRING displayStucuk();
12513: PPUSH
12514: CALL_OW 559
// ResetFog ;
12518: CALL_OW 335
// end ;
12522: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12523: LD_EXP 12
12527: PUSH
12528: LD_EXP 44
12532: AND
12533: IFFALSE 12674
12535: GO 12537
12537: DISABLE
12538: LD_INT 0
12540: PPUSH
12541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_OWVAR 2
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 69
12577: ST_TO_ADDR
// if not tmp then
12578: LD_VAR 0 2
12582: NOT
12583: IFFALSE 12587
// exit ;
12585: GO 12674
// un := tmp [ rand ( 1 , tmp ) ] ;
12587: LD_ADDR_VAR 0 1
12591: PUSH
12592: LD_VAR 0 2
12596: PUSH
12597: LD_INT 1
12599: PPUSH
12600: LD_VAR 0 2
12604: PPUSH
12605: CALL_OW 12
12609: ARRAY
12610: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12611: LD_VAR 0 1
12615: PPUSH
12616: LD_INT 0
12618: PPUSH
12619: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12623: LD_VAR 0 1
12627: PPUSH
12628: LD_OWVAR 3
12632: PUSH
12633: LD_VAR 0 1
12637: DIFF
12638: PPUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: CALL_OW 74
12648: PPUSH
12649: CALL_OW 115
// wait ( 0 0$20 ) ;
12653: LD_INT 700
12655: PPUSH
12656: CALL_OW 67
// SetSide ( un , your_side ) ;
12660: LD_VAR 0 1
12664: PPUSH
12665: LD_OWVAR 2
12669: PPUSH
12670: CALL_OW 235
// end ;
12674: PPOPN 2
12676: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12677: LD_EXP 12
12681: PUSH
12682: LD_EXP 45
12686: AND
12687: IFFALSE 12793
12689: GO 12691
12691: DISABLE
12692: LD_INT 0
12694: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12695: LD_ADDR_VAR 0 1
12699: PUSH
12700: LD_INT 22
12702: PUSH
12703: LD_OWVAR 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 2
12714: PUSH
12715: LD_INT 30
12717: PUSH
12718: LD_INT 0
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 30
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 69
12748: ST_TO_ADDR
// if not depot then
12749: LD_VAR 0 1
12753: NOT
12754: IFFALSE 12758
// exit ;
12756: GO 12793
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12758: LD_VAR 0 1
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: PPUSH
12767: CALL_OW 250
12771: PPUSH
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: ARRAY
12780: PPUSH
12781: CALL_OW 251
12785: PPUSH
12786: LD_INT 70
12788: PPUSH
12789: CALL_OW 495
// end ;
12793: PPOPN 1
12795: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12796: LD_EXP 12
12800: PUSH
12801: LD_EXP 46
12805: AND
12806: IFFALSE 13017
12808: GO 12810
12810: DISABLE
12811: LD_INT 0
12813: PPUSH
12814: PPUSH
12815: PPUSH
12816: PPUSH
12817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12818: LD_ADDR_VAR 0 5
12822: PUSH
12823: LD_INT 22
12825: PUSH
12826: LD_OWVAR 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 1
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PPUSH
12849: CALL_OW 69
12853: ST_TO_ADDR
// if not tmp then
12854: LD_VAR 0 5
12858: NOT
12859: IFFALSE 12863
// exit ;
12861: GO 13017
// for i in tmp do
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: LD_VAR 0 5
12872: PUSH
12873: FOR_IN
12874: IFFALSE 13015
// begin d := rand ( 0 , 5 ) ;
12876: LD_ADDR_VAR 0 4
12880: PUSH
12881: LD_INT 0
12883: PPUSH
12884: LD_INT 5
12886: PPUSH
12887: CALL_OW 12
12891: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12892: LD_ADDR_VAR 0 2
12896: PUSH
12897: LD_VAR 0 1
12901: PPUSH
12902: CALL_OW 250
12906: PPUSH
12907: LD_VAR 0 4
12911: PPUSH
12912: LD_INT 3
12914: PPUSH
12915: LD_INT 12
12917: PPUSH
12918: CALL_OW 12
12922: PPUSH
12923: CALL_OW 272
12927: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12928: LD_ADDR_VAR 0 3
12932: PUSH
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 251
12942: PPUSH
12943: LD_VAR 0 4
12947: PPUSH
12948: LD_INT 3
12950: PPUSH
12951: LD_INT 12
12953: PPUSH
12954: CALL_OW 12
12958: PPUSH
12959: CALL_OW 273
12963: ST_TO_ADDR
// if ValidHex ( x , y ) then
12964: LD_VAR 0 2
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: CALL_OW 488
12978: IFFALSE 13013
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_VAR 0 2
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 3
12997: PPUSH
12998: LD_INT 6
13000: PPUSH
13001: CALL_OW 12
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: CALL_OW 483
// end ;
13013: GO 12873
13015: POP
13016: POP
// end ;
13017: PPOPN 5
13019: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13020: LD_EXP 12
13024: PUSH
13025: LD_EXP 47
13029: AND
13030: IFFALSE 13124
13032: GO 13034
13034: DISABLE
13035: LD_INT 0
13037: PPUSH
13038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13039: LD_ADDR_VAR 0 2
13043: PUSH
13044: LD_INT 22
13046: PUSH
13047: LD_OWVAR 2
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 32
13058: PUSH
13059: LD_INT 1
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 21
13068: PUSH
13069: LD_INT 2
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: ST_TO_ADDR
// if not tmp then
13086: LD_VAR 0 2
13090: NOT
13091: IFFALSE 13095
// exit ;
13093: GO 13124
// for i in tmp do
13095: LD_ADDR_VAR 0 1
13099: PUSH
13100: LD_VAR 0 2
13104: PUSH
13105: FOR_IN
13106: IFFALSE 13122
// SetFuel ( i , 0 ) ;
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_INT 0
13115: PPUSH
13116: CALL_OW 240
13120: GO 13105
13122: POP
13123: POP
// end ;
13124: PPOPN 2
13126: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13127: LD_EXP 12
13131: PUSH
13132: LD_EXP 48
13136: AND
13137: IFFALSE 13203
13139: GO 13141
13141: DISABLE
13142: LD_INT 0
13144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13145: LD_ADDR_VAR 0 1
13149: PUSH
13150: LD_INT 22
13152: PUSH
13153: LD_OWVAR 2
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: LD_INT 29
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 69
13180: ST_TO_ADDR
// if not tmp then
13181: LD_VAR 0 1
13185: NOT
13186: IFFALSE 13190
// exit ;
13188: GO 13203
// DestroyUnit ( tmp [ 1 ] ) ;
13190: LD_VAR 0 1
13194: PUSH
13195: LD_INT 1
13197: ARRAY
13198: PPUSH
13199: CALL_OW 65
// end ;
13203: PPOPN 1
13205: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13206: LD_EXP 12
13210: PUSH
13211: LD_EXP 50
13215: AND
13216: IFFALSE 13345
13218: GO 13220
13220: DISABLE
13221: LD_INT 0
13223: PPUSH
// begin uc_side := 0 ;
13224: LD_ADDR_OWVAR 20
13228: PUSH
13229: LD_INT 0
13231: ST_TO_ADDR
// uc_nation := nation_arabian ;
13232: LD_ADDR_OWVAR 21
13236: PUSH
13237: LD_INT 2
13239: ST_TO_ADDR
// hc_gallery :=  ;
13240: LD_ADDR_OWVAR 33
13244: PUSH
13245: LD_STRING 
13247: ST_TO_ADDR
// hc_name :=  ;
13248: LD_ADDR_OWVAR 26
13252: PUSH
13253: LD_STRING 
13255: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 11
13261: PPUSH
13262: LD_INT 10
13264: PPUSH
13265: CALL_OW 380
// un := CreateHuman ;
13269: LD_ADDR_VAR 0 1
13273: PUSH
13274: CALL_OW 44
13278: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13279: LD_VAR 0 1
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13291: LD_INT 35
13293: PPUSH
13294: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13298: LD_VAR 0 1
13302: PPUSH
13303: LD_INT 22
13305: PUSH
13306: LD_OWVAR 2
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PPUSH
13315: CALL_OW 69
13319: PPUSH
13320: LD_VAR 0 1
13324: PPUSH
13325: CALL_OW 74
13329: PPUSH
13330: CALL_OW 115
// until IsDead ( un ) ;
13334: LD_VAR 0 1
13338: PPUSH
13339: CALL_OW 301
13343: IFFALSE 13291
// end ;
13345: PPOPN 1
13347: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13348: LD_EXP 12
13352: PUSH
13353: LD_EXP 52
13357: AND
13358: IFFALSE 13370
13360: GO 13362
13362: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13363: LD_STRING earthquake(getX(game), 0, 32)
13365: PPUSH
13366: CALL_OW 559
13370: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13371: LD_EXP 12
13375: PUSH
13376: LD_EXP 53
13380: AND
13381: IFFALSE 13472
13383: GO 13385
13385: DISABLE
13386: LD_INT 0
13388: PPUSH
// begin enable ;
13389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_OWVAR 2
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 21
13409: PUSH
13410: LD_INT 2
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 33
13419: PUSH
13420: LD_INT 3
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: ST_TO_ADDR
// if not tmp then
13437: LD_VAR 0 1
13441: NOT
13442: IFFALSE 13446
// exit ;
13444: GO 13472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13446: LD_VAR 0 1
13450: PUSH
13451: LD_INT 1
13453: PPUSH
13454: LD_VAR 0 1
13458: PPUSH
13459: CALL_OW 12
13463: ARRAY
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 234
// end ;
13472: PPOPN 1
13474: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13475: LD_EXP 12
13479: PUSH
13480: LD_EXP 54
13484: AND
13485: IFFALSE 13626
13487: GO 13489
13489: DISABLE
13490: LD_INT 0
13492: PPUSH
13493: PPUSH
13494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13495: LD_ADDR_VAR 0 3
13499: PUSH
13500: LD_INT 22
13502: PUSH
13503: LD_OWVAR 2
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 25
13514: PUSH
13515: LD_INT 1
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 69
13530: ST_TO_ADDR
// if not tmp then
13531: LD_VAR 0 3
13535: NOT
13536: IFFALSE 13540
// exit ;
13538: GO 13626
// un := tmp [ rand ( 1 , tmp ) ] ;
13540: LD_ADDR_VAR 0 2
13544: PUSH
13545: LD_VAR 0 3
13549: PUSH
13550: LD_INT 1
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: CALL_OW 12
13562: ARRAY
13563: ST_TO_ADDR
// if Crawls ( un ) then
13564: LD_VAR 0 2
13568: PPUSH
13569: CALL_OW 318
13573: IFFALSE 13584
// ComWalk ( un ) ;
13575: LD_VAR 0 2
13579: PPUSH
13580: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13584: LD_VAR 0 2
13588: PPUSH
13589: LD_INT 9
13591: PPUSH
13592: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13596: LD_INT 28
13598: PPUSH
13599: LD_OWVAR 2
13603: PPUSH
13604: LD_INT 2
13606: PPUSH
13607: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13611: LD_INT 29
13613: PPUSH
13614: LD_OWVAR 2
13618: PPUSH
13619: LD_INT 2
13621: PPUSH
13622: CALL_OW 322
// end ;
13626: PPOPN 3
13628: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13629: LD_EXP 12
13633: PUSH
13634: LD_EXP 55
13638: AND
13639: IFFALSE 13750
13641: GO 13643
13643: DISABLE
13644: LD_INT 0
13646: PPUSH
13647: PPUSH
13648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 22
13656: PUSH
13657: LD_OWVAR 2
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 25
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: ST_TO_ADDR
// if not tmp then
13685: LD_VAR 0 3
13689: NOT
13690: IFFALSE 13694
// exit ;
13692: GO 13750
// un := tmp [ rand ( 1 , tmp ) ] ;
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: LD_VAR 0 3
13703: PUSH
13704: LD_INT 1
13706: PPUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: CALL_OW 12
13716: ARRAY
13717: ST_TO_ADDR
// if Crawls ( un ) then
13718: LD_VAR 0 2
13722: PPUSH
13723: CALL_OW 318
13727: IFFALSE 13738
// ComWalk ( un ) ;
13729: LD_VAR 0 2
13733: PPUSH
13734: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13738: LD_VAR 0 2
13742: PPUSH
13743: LD_INT 8
13745: PPUSH
13746: CALL_OW 336
// end ;
13750: PPOPN 3
13752: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13753: LD_EXP 12
13757: PUSH
13758: LD_EXP 56
13762: AND
13763: IFFALSE 13907
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
13771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_OWVAR 2
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 21
13791: PUSH
13792: LD_INT 2
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 2
13801: PUSH
13802: LD_INT 34
13804: PUSH
13805: LD_INT 12
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 34
13814: PUSH
13815: LD_INT 51
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 34
13824: PUSH
13825: LD_INT 32
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 69
13847: ST_TO_ADDR
// if not tmp then
13848: LD_VAR 0 2
13852: NOT
13853: IFFALSE 13857
// exit ;
13855: GO 13907
// for i in tmp do
13857: LD_ADDR_VAR 0 1
13861: PUSH
13862: LD_VAR 0 2
13866: PUSH
13867: FOR_IN
13868: IFFALSE 13905
// if GetCargo ( i , mat_artifact ) = 0 then
13870: LD_VAR 0 1
13874: PPUSH
13875: LD_INT 4
13877: PPUSH
13878: CALL_OW 289
13882: PUSH
13883: LD_INT 0
13885: EQUAL
13886: IFFALSE 13903
// SetCargo ( i , mat_siberit , 100 ) ;
13888: LD_VAR 0 1
13892: PPUSH
13893: LD_INT 3
13895: PPUSH
13896: LD_INT 100
13898: PPUSH
13899: CALL_OW 290
13903: GO 13867
13905: POP
13906: POP
// end ;
13907: PPOPN 2
13909: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13910: LD_EXP 12
13914: PUSH
13915: LD_EXP 57
13919: AND
13920: IFFALSE 14073
13922: GO 13924
13924: DISABLE
13925: LD_INT 0
13927: PPUSH
13928: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13929: LD_ADDR_VAR 0 2
13933: PUSH
13934: LD_INT 22
13936: PUSH
13937: LD_OWVAR 2
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// if not tmp then
13951: LD_VAR 0 2
13955: NOT
13956: IFFALSE 13960
// exit ;
13958: GO 14073
// for i := 1 to 2 do
13960: LD_ADDR_VAR 0 1
13964: PUSH
13965: DOUBLE
13966: LD_INT 1
13968: DEC
13969: ST_TO_ADDR
13970: LD_INT 2
13972: PUSH
13973: FOR_TO
13974: IFFALSE 14071
// begin uc_side := your_side ;
13976: LD_ADDR_OWVAR 20
13980: PUSH
13981: LD_OWVAR 2
13985: ST_TO_ADDR
// uc_nation := nation_american ;
13986: LD_ADDR_OWVAR 21
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// vc_chassis := us_morphling ;
13994: LD_ADDR_OWVAR 37
13998: PUSH
13999: LD_INT 5
14001: ST_TO_ADDR
// vc_engine := engine_siberite ;
14002: LD_ADDR_OWVAR 39
14006: PUSH
14007: LD_INT 3
14009: ST_TO_ADDR
// vc_control := control_computer ;
14010: LD_ADDR_OWVAR 38
14014: PUSH
14015: LD_INT 3
14017: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14018: LD_ADDR_OWVAR 40
14022: PUSH
14023: LD_INT 10
14025: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
14026: CALL_OW 45
14030: PPUSH
14031: LD_VAR 0 2
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: CALL_OW 250
14044: PPUSH
14045: LD_VAR 0 2
14049: PUSH
14050: LD_INT 1
14052: ARRAY
14053: PPUSH
14054: CALL_OW 251
14058: PPUSH
14059: LD_INT 12
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 50
// end ;
14069: GO 13973
14071: POP
14072: POP
// end ;
14073: PPOPN 2
14075: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14076: LD_EXP 12
14080: PUSH
14081: LD_EXP 58
14085: AND
14086: IFFALSE 14308
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14099: LD_ADDR_VAR 0 6
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_OWVAR 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 21
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 23
14131: PUSH
14132: LD_INT 0
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if not tmp then
14153: LD_VAR 0 6
14157: NOT
14158: IFFALSE 14162
// exit ;
14160: GO 14308
// s1 := rand ( 1 , 4 ) ;
14162: LD_ADDR_VAR 0 2
14166: PUSH
14167: LD_INT 1
14169: PPUSH
14170: LD_INT 4
14172: PPUSH
14173: CALL_OW 12
14177: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14178: LD_ADDR_VAR 0 4
14182: PUSH
14183: LD_VAR 0 6
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: PPUSH
14192: LD_VAR 0 2
14196: PPUSH
14197: CALL_OW 259
14201: ST_TO_ADDR
// if s1 = 1 then
14202: LD_VAR 0 2
14206: PUSH
14207: LD_INT 1
14209: EQUAL
14210: IFFALSE 14230
// s2 := rand ( 2 , 4 ) else
14212: LD_ADDR_VAR 0 3
14216: PUSH
14217: LD_INT 2
14219: PPUSH
14220: LD_INT 4
14222: PPUSH
14223: CALL_OW 12
14227: ST_TO_ADDR
14228: GO 14238
// s2 := 1 ;
14230: LD_ADDR_VAR 0 3
14234: PUSH
14235: LD_INT 1
14237: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14238: LD_ADDR_VAR 0 5
14242: PUSH
14243: LD_VAR 0 6
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: LD_VAR 0 3
14256: PPUSH
14257: CALL_OW 259
14261: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14262: LD_VAR 0 6
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: LD_VAR 0 2
14275: PPUSH
14276: LD_VAR 0 5
14280: PPUSH
14281: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14285: LD_VAR 0 6
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: LD_VAR 0 3
14298: PPUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: CALL_OW 237
// end ;
14308: PPOPN 6
14310: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14311: LD_EXP 12
14315: PUSH
14316: LD_EXP 59
14320: AND
14321: IFFALSE 14400
14323: GO 14325
14325: DISABLE
14326: LD_INT 0
14328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14329: LD_ADDR_VAR 0 1
14333: PUSH
14334: LD_INT 22
14336: PUSH
14337: LD_OWVAR 2
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 30
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: ST_TO_ADDR
// if not tmp then
14365: LD_VAR 0 1
14369: NOT
14370: IFFALSE 14374
// exit ;
14372: GO 14400
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14374: LD_VAR 0 1
14378: PUSH
14379: LD_INT 1
14381: PPUSH
14382: LD_VAR 0 1
14386: PPUSH
14387: CALL_OW 12
14391: ARRAY
14392: PPUSH
14393: LD_INT 1
14395: PPUSH
14396: CALL_OW 234
// end ;
14400: PPOPN 1
14402: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14403: LD_EXP 12
14407: PUSH
14408: LD_EXP 60
14412: AND
14413: IFFALSE 14525
14415: GO 14417
14417: DISABLE
14418: LD_INT 0
14420: PPUSH
14421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14422: LD_ADDR_VAR 0 2
14426: PUSH
14427: LD_INT 22
14429: PUSH
14430: LD_OWVAR 2
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 30
14444: PUSH
14445: LD_INT 27
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 30
14454: PUSH
14455: LD_INT 26
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 30
14464: PUSH
14465: LD_INT 28
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: ST_TO_ADDR
// if not tmp then
14487: LD_VAR 0 2
14491: NOT
14492: IFFALSE 14496
// exit ;
14494: GO 14525
// for i in tmp do
14496: LD_ADDR_VAR 0 1
14500: PUSH
14501: LD_VAR 0 2
14505: PUSH
14506: FOR_IN
14507: IFFALSE 14523
// SetLives ( i , 1 ) ;
14509: LD_VAR 0 1
14513: PPUSH
14514: LD_INT 1
14516: PPUSH
14517: CALL_OW 234
14521: GO 14506
14523: POP
14524: POP
// end ;
14525: PPOPN 2
14527: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14528: LD_EXP 12
14532: PUSH
14533: LD_EXP 61
14537: AND
14538: IFFALSE 14812
14540: GO 14542
14542: DISABLE
14543: LD_INT 0
14545: PPUSH
14546: PPUSH
14547: PPUSH
// begin i := rand ( 1 , 7 ) ;
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_INT 1
14555: PPUSH
14556: LD_INT 7
14558: PPUSH
14559: CALL_OW 12
14563: ST_TO_ADDR
// case i of 1 :
14564: LD_VAR 0 1
14568: PUSH
14569: LD_INT 1
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14587
14577: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14578: LD_STRING earthquake(getX(game), 0, 32)
14580: PPUSH
14581: CALL_OW 559
14585: GO 14812
14587: LD_INT 2
14589: DOUBLE
14590: EQUAL
14591: IFTRUE 14595
14593: GO 14609
14595: POP
// begin ToLua ( displayStucuk(); ) ;
14596: LD_STRING displayStucuk();
14598: PPUSH
14599: CALL_OW 559
// ResetFog ;
14603: CALL_OW 335
// end ; 3 :
14607: GO 14812
14609: LD_INT 3
14611: DOUBLE
14612: EQUAL
14613: IFTRUE 14617
14615: GO 14721
14617: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14618: LD_ADDR_VAR 0 2
14622: PUSH
14623: LD_INT 22
14625: PUSH
14626: LD_OWVAR 2
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 25
14637: PUSH
14638: LD_INT 1
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PPUSH
14649: CALL_OW 69
14653: ST_TO_ADDR
// if not tmp then
14654: LD_VAR 0 2
14658: NOT
14659: IFFALSE 14663
// exit ;
14661: GO 14812
// un := tmp [ rand ( 1 , tmp ) ] ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_VAR 0 2
14672: PUSH
14673: LD_INT 1
14675: PPUSH
14676: LD_VAR 0 2
14680: PPUSH
14681: CALL_OW 12
14685: ARRAY
14686: ST_TO_ADDR
// if Crawls ( un ) then
14687: LD_VAR 0 3
14691: PPUSH
14692: CALL_OW 318
14696: IFFALSE 14707
// ComWalk ( un ) ;
14698: LD_VAR 0 3
14702: PPUSH
14703: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_INT 8
14714: PPUSH
14715: CALL_OW 336
// end ; 4 :
14719: GO 14812
14721: LD_INT 4
14723: DOUBLE
14724: EQUAL
14725: IFTRUE 14729
14727: GO 14790
14729: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14730: LD_ADDR_VAR 0 2
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_OWVAR 2
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 30
14749: PUSH
14750: LD_INT 29
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PPUSH
14761: CALL_OW 69
14765: ST_TO_ADDR
// if not tmp then
14766: LD_VAR 0 2
14770: NOT
14771: IFFALSE 14775
// exit ;
14773: GO 14812
// DestroyUnit ( tmp [ 1 ] ) ;
14775: LD_VAR 0 2
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: CALL_OW 65
// end ; 5 .. 7 :
14788: GO 14812
14790: LD_INT 5
14792: DOUBLE
14793: GREATEREQUAL
14794: IFFALSE 14802
14796: LD_INT 7
14798: DOUBLE
14799: LESSEQUAL
14800: IFTRUE 14804
14802: GO 14811
14804: POP
// StreamSibBomb ; end ;
14805: CALL 11092 0 0
14809: GO 14812
14811: POP
// end ;
14812: PPOPN 3
14814: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14815: LD_EXP 12
14819: PUSH
14820: LD_EXP 62
14824: AND
14825: IFFALSE 14981
14827: GO 14829
14829: DISABLE
14830: LD_INT 0
14832: PPUSH
14833: PPUSH
14834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14835: LD_ADDR_VAR 0 2
14839: PUSH
14840: LD_INT 81
14842: PUSH
14843: LD_OWVAR 2
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: LD_INT 21
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 21
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// if not tmp then
14889: LD_VAR 0 2
14893: NOT
14894: IFFALSE 14898
// exit ;
14896: GO 14981
// p := 0 ;
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: LD_INT 0
14905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14906: LD_INT 35
14908: PPUSH
14909: CALL_OW 67
// p := p + 1 ;
14913: LD_ADDR_VAR 0 3
14917: PUSH
14918: LD_VAR 0 3
14922: PUSH
14923: LD_INT 1
14925: PLUS
14926: ST_TO_ADDR
// for i in tmp do
14927: LD_ADDR_VAR 0 1
14931: PUSH
14932: LD_VAR 0 2
14936: PUSH
14937: FOR_IN
14938: IFFALSE 14969
// if GetLives ( i ) < 1000 then
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 256
14949: PUSH
14950: LD_INT 1000
14952: LESS
14953: IFFALSE 14967
// SetLives ( i , 1000 ) ;
14955: LD_VAR 0 1
14959: PPUSH
14960: LD_INT 1000
14962: PPUSH
14963: CALL_OW 234
14967: GO 14937
14969: POP
14970: POP
// until p > 20 ;
14971: LD_VAR 0 3
14975: PUSH
14976: LD_INT 20
14978: GREATER
14979: IFFALSE 14906
// end ;
14981: PPOPN 3
14983: END
// every 0 0$1 trigger StreamModeActive and sTime do
14984: LD_EXP 12
14988: PUSH
14989: LD_EXP 63
14993: AND
14994: IFFALSE 15029
14996: GO 14998
14998: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14999: LD_INT 28
15001: PPUSH
15002: LD_OWVAR 2
15006: PPUSH
15007: LD_INT 2
15009: PPUSH
15010: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15014: LD_INT 30
15016: PPUSH
15017: LD_OWVAR 2
15021: PPUSH
15022: LD_INT 2
15024: PPUSH
15025: CALL_OW 322
// end ;
15029: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15030: LD_EXP 12
15034: PUSH
15035: LD_EXP 64
15039: AND
15040: IFFALSE 15161
15042: GO 15044
15044: DISABLE
15045: LD_INT 0
15047: PPUSH
15048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: LD_INT 22
15056: PUSH
15057: LD_OWVAR 2
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 0
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 69
15102: ST_TO_ADDR
// if not tmp then
15103: LD_VAR 0 2
15107: NOT
15108: IFFALSE 15112
// exit ;
15110: GO 15161
// for i in tmp do
15112: LD_ADDR_VAR 0 1
15116: PUSH
15117: LD_VAR 0 2
15121: PUSH
15122: FOR_IN
15123: IFFALSE 15159
// begin if Crawls ( i ) then
15125: LD_VAR 0 1
15129: PPUSH
15130: CALL_OW 318
15134: IFFALSE 15145
// ComWalk ( i ) ;
15136: LD_VAR 0 1
15140: PPUSH
15141: CALL_OW 138
// SetClass ( i , 2 ) ;
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_INT 2
15152: PPUSH
15153: CALL_OW 336
// end ;
15157: GO 15122
15159: POP
15160: POP
// end ;
15161: PPOPN 2
15163: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15164: LD_EXP 12
15168: PUSH
15169: LD_EXP 65
15173: AND
15174: IFFALSE 15455
15176: GO 15178
15178: DISABLE
15179: LD_INT 0
15181: PPUSH
15182: PPUSH
15183: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15184: LD_OWVAR 2
15188: PPUSH
15189: LD_INT 9
15191: PPUSH
15192: LD_INT 1
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15202: LD_INT 9
15204: PPUSH
15205: LD_OWVAR 2
15209: PPUSH
15210: CALL_OW 343
// uc_side := 9 ;
15214: LD_ADDR_OWVAR 20
15218: PUSH
15219: LD_INT 9
15221: ST_TO_ADDR
// uc_nation := 2 ;
15222: LD_ADDR_OWVAR 21
15226: PUSH
15227: LD_INT 2
15229: ST_TO_ADDR
// hc_name := Dark Warrior ;
15230: LD_ADDR_OWVAR 26
15234: PUSH
15235: LD_STRING Dark Warrior
15237: ST_TO_ADDR
// hc_gallery :=  ;
15238: LD_ADDR_OWVAR 33
15242: PUSH
15243: LD_STRING 
15245: ST_TO_ADDR
// hc_noskilllimit := true ;
15246: LD_ADDR_OWVAR 76
15250: PUSH
15251: LD_INT 1
15253: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15254: LD_ADDR_OWVAR 31
15258: PUSH
15259: LD_INT 30
15261: PUSH
15262: LD_INT 30
15264: PUSH
15265: LD_INT 30
15267: PUSH
15268: LD_INT 30
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: ST_TO_ADDR
// un := CreateHuman ;
15277: LD_ADDR_VAR 0 3
15281: PUSH
15282: CALL_OW 44
15286: ST_TO_ADDR
// hc_noskilllimit := false ;
15287: LD_ADDR_OWVAR 76
15291: PUSH
15292: LD_INT 0
15294: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15295: LD_VAR 0 3
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 51
// p := 0 ;
15307: LD_ADDR_VAR 0 2
15311: PUSH
15312: LD_INT 0
15314: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15315: LD_INT 35
15317: PPUSH
15318: CALL_OW 67
// p := p + 1 ;
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_VAR 0 2
15331: PUSH
15332: LD_INT 1
15334: PLUS
15335: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15336: LD_VAR 0 3
15340: PPUSH
15341: CALL_OW 256
15345: PUSH
15346: LD_INT 1000
15348: LESS
15349: IFFALSE 15363
// SetLives ( un , 1000 ) ;
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 1000
15358: PPUSH
15359: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15363: LD_VAR 0 3
15367: PPUSH
15368: LD_INT 81
15370: PUSH
15371: LD_OWVAR 2
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 91
15382: PUSH
15383: LD_VAR 0 3
15387: PUSH
15388: LD_INT 30
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 69
15404: PPUSH
15405: LD_VAR 0 3
15409: PPUSH
15410: CALL_OW 74
15414: PPUSH
15415: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15419: LD_VAR 0 2
15423: PUSH
15424: LD_INT 60
15426: GREATER
15427: PUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: CALL_OW 301
15437: OR
15438: IFFALSE 15315
// if un then
15440: LD_VAR 0 3
15444: IFFALSE 15455
// RemoveUnit ( un ) ;
15446: LD_VAR 0 3
15450: PPUSH
15451: CALL_OW 64
// end ; end_of_file
15455: PPOPN 3
15457: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15464: LD_VAR 0 1
15468: PPUSH
15469: CALL_OW 264
15473: PUSH
15474: LD_EXP 11
15478: EQUAL
15479: IFFALSE 15551
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15481: LD_INT 68
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 255
15493: PPUSH
15494: CALL_OW 321
15498: PUSH
15499: LD_INT 2
15501: EQUAL
15502: IFFALSE 15514
// eff := 70 else
15504: LD_ADDR_VAR 0 4
15508: PUSH
15509: LD_INT 70
15511: ST_TO_ADDR
15512: GO 15522
// eff := 30 ;
15514: LD_ADDR_VAR 0 4
15518: PUSH
15519: LD_INT 30
15521: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 250
15531: PPUSH
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 251
15541: PPUSH
15542: LD_VAR 0 4
15546: PPUSH
15547: CALL_OW 495
// end ; end ;
15551: LD_VAR 0 2
15555: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15556: LD_INT 0
15558: PPUSH
// end ;
15559: LD_VAR 0 4
15563: RET
// export function SOS_Command ( cmd ) ; begin
15564: LD_INT 0
15566: PPUSH
// end ;
15567: LD_VAR 0 2
15571: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15572: LD_VAR 0 1
15576: PUSH
15577: LD_INT 255
15579: EQUAL
15580: PUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: CALL_OW 264
15590: PUSH
15591: LD_INT 14
15593: PUSH
15594: LD_INT 53
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: IN
15601: AND
15602: PUSH
15603: LD_VAR 0 4
15607: PPUSH
15608: LD_VAR 0 5
15612: PPUSH
15613: CALL_OW 488
15617: AND
15618: IFFALSE 15642
// CutTreeXYR ( unit , x , y , 12 ) ;
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_VAR 0 4
15629: PPUSH
15630: LD_VAR 0 5
15634: PPUSH
15635: LD_INT 12
15637: PPUSH
15638: CALL 15645 0 4
// end ;
15642: PPOPN 5
15644: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15645: LD_INT 0
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
15654: PPUSH
15655: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15656: LD_VAR 0 1
15660: NOT
15661: PUSH
15662: LD_VAR 0 2
15666: PPUSH
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 488
15676: NOT
15677: OR
15678: PUSH
15679: LD_VAR 0 4
15683: NOT
15684: OR
15685: IFFALSE 15689
// exit ;
15687: GO 16029
// list := [ ] ;
15689: LD_ADDR_VAR 0 13
15693: PUSH
15694: EMPTY
15695: ST_TO_ADDR
// if x - r < 0 then
15696: LD_VAR 0 2
15700: PUSH
15701: LD_VAR 0 4
15705: MINUS
15706: PUSH
15707: LD_INT 0
15709: LESS
15710: IFFALSE 15722
// min_x := 0 else
15712: LD_ADDR_VAR 0 7
15716: PUSH
15717: LD_INT 0
15719: ST_TO_ADDR
15720: GO 15738
// min_x := x - r ;
15722: LD_ADDR_VAR 0 7
15726: PUSH
15727: LD_VAR 0 2
15731: PUSH
15732: LD_VAR 0 4
15736: MINUS
15737: ST_TO_ADDR
// if y - r < 0 then
15738: LD_VAR 0 3
15742: PUSH
15743: LD_VAR 0 4
15747: MINUS
15748: PUSH
15749: LD_INT 0
15751: LESS
15752: IFFALSE 15764
// min_y := 0 else
15754: LD_ADDR_VAR 0 8
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
15762: GO 15780
// min_y := y - r ;
15764: LD_ADDR_VAR 0 8
15768: PUSH
15769: LD_VAR 0 3
15773: PUSH
15774: LD_VAR 0 4
15778: MINUS
15779: ST_TO_ADDR
// max_x := x + r ;
15780: LD_ADDR_VAR 0 9
15784: PUSH
15785: LD_VAR 0 2
15789: PUSH
15790: LD_VAR 0 4
15794: PLUS
15795: ST_TO_ADDR
// max_y := y + r ;
15796: LD_ADDR_VAR 0 10
15800: PUSH
15801: LD_VAR 0 3
15805: PUSH
15806: LD_VAR 0 4
15810: PLUS
15811: ST_TO_ADDR
// for _x = min_x to max_x do
15812: LD_ADDR_VAR 0 11
15816: PUSH
15817: DOUBLE
15818: LD_VAR 0 7
15822: DEC
15823: ST_TO_ADDR
15824: LD_VAR 0 9
15828: PUSH
15829: FOR_TO
15830: IFFALSE 15947
// for _y = min_y to max_y do
15832: LD_ADDR_VAR 0 12
15836: PUSH
15837: DOUBLE
15838: LD_VAR 0 8
15842: DEC
15843: ST_TO_ADDR
15844: LD_VAR 0 10
15848: PUSH
15849: FOR_TO
15850: IFFALSE 15943
// begin if not ValidHex ( _x , _y ) then
15852: LD_VAR 0 11
15856: PPUSH
15857: LD_VAR 0 12
15861: PPUSH
15862: CALL_OW 488
15866: NOT
15867: IFFALSE 15871
// continue ;
15869: GO 15849
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15871: LD_VAR 0 11
15875: PPUSH
15876: LD_VAR 0 12
15880: PPUSH
15881: CALL_OW 351
15885: PUSH
15886: LD_VAR 0 11
15890: PPUSH
15891: LD_VAR 0 12
15895: PPUSH
15896: CALL_OW 554
15900: AND
15901: IFFALSE 15941
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15903: LD_ADDR_VAR 0 13
15907: PUSH
15908: LD_VAR 0 13
15912: PPUSH
15913: LD_VAR 0 13
15917: PUSH
15918: LD_INT 1
15920: PLUS
15921: PPUSH
15922: LD_VAR 0 11
15926: PUSH
15927: LD_VAR 0 12
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PPUSH
15936: CALL_OW 2
15940: ST_TO_ADDR
// end ;
15941: GO 15849
15943: POP
15944: POP
15945: GO 15829
15947: POP
15948: POP
// if not list then
15949: LD_VAR 0 13
15953: NOT
15954: IFFALSE 15958
// exit ;
15956: GO 16029
// for i in list do
15958: LD_ADDR_VAR 0 6
15962: PUSH
15963: LD_VAR 0 13
15967: PUSH
15968: FOR_IN
15969: IFFALSE 16027
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15971: LD_VAR 0 1
15975: PPUSH
15976: LD_STRING M
15978: PUSH
15979: LD_VAR 0 6
15983: PUSH
15984: LD_INT 1
15986: ARRAY
15987: PUSH
15988: LD_VAR 0 6
15992: PUSH
15993: LD_INT 2
15995: ARRAY
15996: PUSH
15997: LD_INT 0
15999: PUSH
16000: LD_INT 0
16002: PUSH
16003: LD_INT 0
16005: PUSH
16006: LD_INT 0
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: PPUSH
16021: CALL_OW 447
16025: GO 15968
16027: POP
16028: POP
// end ;
16029: LD_VAR 0 5
16033: RET
