// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
  11: LD_INT 0
  13: PPUSH
  14: LD_INT 0
  16: PPUSH
  17: LD_INT 7
  19: PPUSH
  20: LD_INT 37963
  22: NEG
  23: PPUSH
  24: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  28: LD_INT 0
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 7
  36: PPUSH
  37: CALL_OW 331
// PrepareBase ;
  41: CALL 514 0 0
// Action ;
  45: CALL 54 0 0
// SaveForQuickRestart ;
  49: CALL_OW 22
// end ;
  53: END
// function Action ; var un , f , i ; begin
  54: LD_INT 0
  56: PPUSH
  57: PPUSH
  58: PPUSH
  59: PPUSH
// SetBName ( brave , brave ) ;
  60: LD_INT 1
  62: PPUSH
  63: LD_STRING brave
  65: PPUSH
  66: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  83: LD_INT 1
  85: PPUSH
  86: CALL_OW 274
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_INT 6000
  96: PUSH
  97: LD_INT 4500
  99: PUSH
 100: LD_INT 3000
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PUSH
 108: LD_OWVAR 67
 112: ARRAY
 113: PPUSH
 114: CALL_OW 277
// InGameOn ;
 118: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 122: LD_INT 1
 124: PPUSH
 125: CALL_OW 87
// Say ( com , DJack1 ) ;
 129: LD_EXP 1
 133: PPUSH
 134: LD_STRING DJack1
 136: PPUSH
 137: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 141: LD_EXP 3
 145: PPUSH
 146: LD_STRING DUn1
 148: PPUSH
 149: CALL_OW 88
// Say ( com , DJack2 ) ;
 153: LD_EXP 1
 157: PPUSH
 158: LD_STRING DJack2
 160: PPUSH
 161: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 165: LD_EXP 3
 169: PPUSH
 170: LD_STRING DUn2
 172: PPUSH
 173: CALL_OW 88
// Say ( com , DJack3 ) ;
 177: LD_EXP 1
 181: PPUSH
 182: LD_STRING DJack3
 184: PPUSH
 185: CALL_OW 88
// uc_side := 7 ;
 189: LD_ADDR_OWVAR 20
 193: PUSH
 194: LD_INT 7
 196: ST_TO_ADDR
// uc_nation := 1 ;
 197: LD_ADDR_OWVAR 21
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 205: LD_INT 1
 207: PPUSH
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 0
 213: PPUSH
 214: CALL_OW 380
// hc_name :=  ;
 218: LD_ADDR_OWVAR 26
 222: PUSH
 223: LD_STRING 
 225: ST_TO_ADDR
// un := CreateHuman ;
 226: LD_ADDR_VAR 0 2
 230: PUSH
 231: CALL_OW 44
 235: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 236: LD_INT 105
 238: PPUSH
 239: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 243: LD_VAR 0 2
 247: PPUSH
 248: LD_STRING DRadio1
 250: PPUSH
 251: CALL_OW 94
// Say ( com , DJack4 ) ;
 255: LD_EXP 1
 259: PPUSH
 260: LD_STRING DJack4
 262: PPUSH
 263: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 267: LD_VAR 0 2
 271: PPUSH
 272: LD_STRING DRadio2
 274: PPUSH
 275: CALL_OW 94
// Wait ( 0 0$01 ) ;
 279: LD_INT 35
 281: PPUSH
 282: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 286: LD_EXP 2
 290: PPUSH
 291: LD_STRING DDoc1
 293: PPUSH
 294: CALL_OW 94
// Say ( com , DJack5 ) ;
 298: LD_EXP 1
 302: PPUSH
 303: LD_STRING DJack5
 305: PPUSH
 306: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 310: LD_EXP 2
 314: PPUSH
 315: LD_STRING DDoc2
 317: PPUSH
 318: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 322: LD_VAR 0 2
 326: PPUSH
 327: LD_STRING DRadio3
 329: PPUSH
 330: CALL_OW 94
// Say ( com , DJack6 ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_STRING DJack6
 341: PPUSH
 342: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 346: LD_ADDR_VAR 0 3
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 7
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: ST_TO_ADDR
// for i = 2 to f do
 380: LD_ADDR_VAR 0 4
 384: PUSH
 385: DOUBLE
 386: LD_INT 2
 388: DEC
 389: ST_TO_ADDR
 390: LD_VAR 0 3
 394: PUSH
 395: FOR_TO
 396: IFFALSE 453
// begin ComExitBuilding ( f [ i ] ) ;
 398: LD_VAR 0 3
 402: PUSH
 403: LD_VAR 0 4
 407: ARRAY
 408: PPUSH
 409: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 413: LD_VAR 0 3
 417: PUSH
 418: LD_VAR 0 4
 422: ARRAY
 423: PPUSH
 424: LD_INT 7
 426: PPUSH
 427: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 431: LD_VAR 0 3
 435: PUSH
 436: LD_VAR 0 4
 440: ARRAY
 441: PPUSH
 442: LD_EXP 1
 446: PPUSH
 447: CALL_OW 179
// end ;
 451: GO 395
 453: POP
 454: POP
// ComExitBuilding ( com ) ;
 455: LD_EXP 1
 459: PPUSH
 460: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 464: LD_EXP 1
 468: PPUSH
 469: LD_INT 45
 471: PPUSH
 472: LD_INT 32
 474: PPUSH
 475: CALL_OW 178
// Wait ( 0 0$03 ) ;
 479: LD_INT 105
 481: PPUSH
 482: CALL_OW 67
// Say ( com , DJack7 ) ;
 486: LD_EXP 1
 490: PPUSH
 491: LD_STRING DJack7
 493: PPUSH
 494: CALL_OW 88
// InGameOff ;
 498: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 502: LD_STRING TDef
 504: PPUSH
 505: CALL_OW 337
// end ; end_of_file
 509: LD_VAR 0 1
 513: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 514: LD_INT 0
 516: PPUSH
 517: PPUSH
 518: PPUSH
 519: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 520: LD_INT 30
 522: PPUSH
 523: LD_INT 14
 525: PPUSH
 526: LD_INT 7
 528: PPUSH
 529: LD_INT 20
 531: PPUSH
 532: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 536: LD_INT 49
 538: PPUSH
 539: LD_INT 17
 541: PPUSH
 542: LD_INT 7
 544: PPUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 552: LD_INT 35
 554: PPUSH
 555: LD_INT 46
 557: PPUSH
 558: LD_INT 7
 560: PPUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 568: LD_INT 70
 570: PPUSH
 571: LD_INT 39
 573: PPUSH
 574: LD_INT 7
 576: PPUSH
 577: LD_INT 20
 579: PPUSH
 580: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 584: LD_INT 30
 586: PPUSH
 587: LD_INT 14
 589: PPUSH
 590: LD_INT 7
 592: PPUSH
 593: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 597: LD_INT 49
 599: PPUSH
 600: LD_INT 17
 602: PPUSH
 603: LD_INT 7
 605: PPUSH
 606: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 610: LD_INT 35
 612: PPUSH
 613: LD_INT 46
 615: PPUSH
 616: LD_INT 7
 618: PPUSH
 619: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 623: LD_INT 70
 625: PPUSH
 626: LD_INT 39
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: CALL_OW 331
// uc_side := 7 ;
 636: LD_ADDR_OWVAR 20
 640: PUSH
 641: LD_INT 7
 643: ST_TO_ADDR
// uc_nation := 1 ;
 644: LD_ADDR_OWVAR 21
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// if Difficulty < 3 then
 652: LD_OWVAR 67
 656: PUSH
 657: LD_INT 3
 659: LESS
 660: IFFALSE 761
// begin for i = 1 to 2 do
 662: LD_ADDR_VAR 0 2
 666: PUSH
 667: DOUBLE
 668: LD_INT 1
 670: DEC
 671: ST_TO_ADDR
 672: LD_INT 2
 674: PUSH
 675: FOR_TO
 676: IFFALSE 757
// begin vc_chassis := us_heavy_tracked ;
 678: LD_ADDR_OWVAR 37
 682: PUSH
 683: LD_INT 4
 685: ST_TO_ADDR
// vc_engine := 3 ;
 686: LD_ADDR_OWVAR 39
 690: PUSH
 691: LD_INT 3
 693: ST_TO_ADDR
// vc_control := control_computer ;
 694: LD_ADDR_OWVAR 38
 698: PUSH
 699: LD_INT 3
 701: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 702: LD_ADDR_OWVAR 40
 706: PUSH
 707: LD_INT 10
 709: ST_TO_ADDR
// un := CreateVehicle ;
 710: LD_ADDR_VAR 0 3
 714: PUSH
 715: CALL_OW 45
 719: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 720: LD_VAR 0 3
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: LD_INT 5
 730: PPUSH
 731: CALL_OW 12
 735: PPUSH
 736: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 740: LD_VAR 0 3
 744: PPUSH
 745: LD_INT 6
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// end ;
 755: GO 675
 757: POP
 758: POP
// end else
 759: GO 850
// begin vc_chassis := us_medium_tracked ;
 761: LD_ADDR_OWVAR 37
 765: PUSH
 766: LD_INT 3
 768: ST_TO_ADDR
// vc_engine := engine_combustion ;
 769: LD_ADDR_OWVAR 39
 773: PUSH
 774: LD_INT 1
 776: ST_TO_ADDR
// vc_control := control_manual ;
 777: LD_ADDR_OWVAR 38
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 785: LD_ADDR_OWVAR 40
 789: PUSH
 790: LD_INT 4
 792: ST_TO_ADDR
// un := CreateVehicle ;
 793: LD_ADDR_VAR 0 3
 797: PUSH
 798: CALL_OW 45
 802: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 803: LD_VAR 0 3
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: LD_INT 5
 813: PPUSH
 814: CALL_OW 12
 818: PPUSH
 819: CALL_OW 233
// SetFuel ( un , 75 ) ;
 823: LD_VAR 0 3
 827: PPUSH
 828: LD_INT 75
 830: PPUSH
 831: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 835: LD_VAR 0 3
 839: PPUSH
 840: LD_INT 6
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 850: LD_ADDR_VAR 0 4
 854: PUSH
 855: LD_INT 8
 857: PUSH
 858: LD_INT 7
 860: PUSH
 861: LD_INT 6
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: LIST
 868: PUSH
 869: LD_OWVAR 67
 873: ARRAY
 874: ST_TO_ADDR
// hc_importance := 100 ;
 875: LD_ADDR_OWVAR 32
 879: PUSH
 880: LD_INT 100
 882: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: LD_VAR 0 4
 893: PPUSH
 894: CALL_OW 380
// hc_gallery := skirmish ;
 898: LD_ADDR_OWVAR 33
 902: PUSH
 903: LD_STRING skirmish
 905: ST_TO_ADDR
// hc_face_number := 4 ;
 906: LD_ADDR_OWVAR 34
 910: PUSH
 911: LD_INT 4
 913: ST_TO_ADDR
// hc_name := Jack Collins ;
 914: LD_ADDR_OWVAR 26
 918: PUSH
 919: LD_STRING Jack Collins
 921: ST_TO_ADDR
// com := CreateHuman ;
 922: LD_ADDR_EXP 1
 926: PUSH
 927: CALL_OW 44
 931: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 932: LD_EXP 1
 936: PPUSH
 937: LD_INT 1
 939: PPUSH
 940: CALL_OW 52
// hc_importance := 0 ;
 944: LD_ADDR_OWVAR 32
 948: PUSH
 949: LD_INT 0
 951: ST_TO_ADDR
// hc_gallery :=  ;
 952: LD_ADDR_OWVAR 33
 956: PUSH
 957: LD_STRING 
 959: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 960: LD_INT 1
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_VAR 0 4
 970: PPUSH
 971: CALL_OW 380
// hc_name := Thomas Jackson ;
 975: LD_ADDR_OWVAR 26
 979: PUSH
 980: LD_STRING Thomas Jackson
 982: ST_TO_ADDR
// k1 := CreateHuman ;
 983: LD_ADDR_EXP 3
 987: PUSH
 988: CALL_OW 44
 992: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
 993: LD_EXP 3
 997: PPUSH
 998: LD_INT 1
1000: PPUSH
1001: CALL_OW 52
// hc_name :=  ;
1005: LD_ADDR_OWVAR 26
1009: PUSH
1010: LD_STRING 
1012: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1013: LD_ADDR_VAR 0 2
1017: PUSH
1018: DOUBLE
1019: LD_INT 1
1021: DEC
1022: ST_TO_ADDR
1023: LD_INT 9
1025: PUSH
1026: LD_INT 8
1028: PUSH
1029: LD_INT 7
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: LD_OWVAR 67
1041: ARRAY
1042: PUSH
1043: FOR_TO
1044: IFFALSE 1215
// begin Randomize ;
1046: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1050: LD_ADDR_OWVAR 21
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 1
1067: PPUSH
1068: LD_INT 2
1070: PPUSH
1071: CALL_OW 12
1075: ARRAY
1076: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1077: LD_INT 0
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: LD_INT 4
1085: PPUSH
1086: CALL_OW 12
1090: PPUSH
1091: LD_VAR 0 4
1095: PPUSH
1096: CALL_OW 380
// un := CreateHuman ;
1100: LD_ADDR_VAR 0 3
1104: PUSH
1105: CALL_OW 44
1109: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1110: LD_VAR 0 3
1114: PPUSH
1115: CALL_OW 257
1119: PUSH
1120: LD_INT 1
1122: DOUBLE
1123: EQUAL
1124: IFTRUE 1128
1126: GO 1143
1128: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 21
1136: PPUSH
1137: CALL_OW 52
1141: GO 1213
1143: LD_INT 2
1145: DOUBLE
1146: EQUAL
1147: IFTRUE 1151
1149: GO 1166
1151: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1152: LD_VAR 0 3
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: CALL_OW 52
1164: GO 1213
1166: LD_INT 3
1168: DOUBLE
1169: EQUAL
1170: IFTRUE 1174
1172: GO 1189
1174: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1175: LD_VAR 0 3
1179: PPUSH
1180: LD_INT 38
1182: PPUSH
1183: CALL_OW 52
1187: GO 1213
1189: LD_INT 4
1191: DOUBLE
1192: EQUAL
1193: IFTRUE 1197
1195: GO 1212
1197: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1198: LD_VAR 0 3
1202: PPUSH
1203: LD_INT 36
1205: PPUSH
1206: CALL_OW 52
1210: GO 1213
1212: POP
// end ;
1213: GO 1043
1215: POP
1216: POP
// uc_side := 2 ;
1217: LD_ADDR_OWVAR 20
1221: PUSH
1222: LD_INT 2
1224: ST_TO_ADDR
// uc_nation := 2 ;
1225: LD_ADDR_OWVAR 21
1229: PUSH
1230: LD_INT 2
1232: ST_TO_ADDR
// hc_name := _ ;
1233: LD_ADDR_OWVAR 26
1237: PUSH
1238: LD_STRING _
1240: ST_TO_ADDR
// hc_gallery :=  ;
1241: LD_ADDR_OWVAR 33
1245: PUSH
1246: LD_STRING 
1248: ST_TO_ADDR
// hc_class := 4 ;
1249: LD_ADDR_OWVAR 28
1253: PUSH
1254: LD_INT 4
1256: ST_TO_ADDR
// hc_sex := sex_male ;
1257: LD_ADDR_OWVAR 27
1261: PUSH
1262: LD_INT 1
1264: ST_TO_ADDR
// doc := CreateHuman ;
1265: LD_ADDR_EXP 2
1269: PUSH
1270: CALL_OW 44
1274: ST_TO_ADDR
// end ; end_of_file
1275: LD_VAR 0 1
1279: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1280: LD_INT 0
1282: PPUSH
1283: PPUSH
1284: PPUSH
1285: PPUSH
// uc_side := 2 ;
1286: LD_ADDR_OWVAR 20
1290: PUSH
1291: LD_INT 2
1293: ST_TO_ADDR
// uc_nation := 2 ;
1294: LD_ADDR_OWVAR 21
1298: PUSH
1299: LD_INT 2
1301: ST_TO_ADDR
// tmp := [ ] ;
1302: LD_ADDR_VAR 0 5
1306: PUSH
1307: EMPTY
1308: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1309: LD_ADDR_OWVAR 31
1313: PUSH
1314: LD_INT 3
1316: PUSH
1317: LD_INT 6
1319: PUSH
1320: LD_INT 10
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: LD_OWVAR 67
1332: ARRAY
1333: PUSH
1334: LD_INT 3
1336: PUSH
1337: LD_INT 6
1339: PUSH
1340: LD_INT 10
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_OWVAR 67
1352: ARRAY
1353: PUSH
1354: LD_INT 3
1356: PUSH
1357: LD_INT 6
1359: PUSH
1360: LD_INT 10
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: LIST
1367: PUSH
1368: LD_OWVAR 67
1372: ARRAY
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 10
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: PUSH
1388: LD_OWVAR 67
1392: ARRAY
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1400: LD_INT 4
1402: PPUSH
1403: LD_INT 22
1405: PUSH
1406: LD_INT 7
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 70
1417: IFFALSE 1458
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1419: LD_ADDR_VAR 0 3
1423: PUSH
1424: LD_INT 4
1426: PPUSH
1427: LD_INT 22
1429: PUSH
1430: LD_INT 7
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 70
1441: PUSH
1442: FOR_IN
1443: IFFALSE 1456
// RemoveUnit ( i ) ;
1445: LD_VAR 0 3
1449: PPUSH
1450: CALL_OW 64
1454: GO 1442
1456: POP
1457: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1458: LD_INT 5
1460: PPUSH
1461: LD_INT 22
1463: PUSH
1464: LD_INT 7
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 70
1475: IFFALSE 1516
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1477: LD_ADDR_VAR 0 3
1481: PUSH
1482: LD_INT 5
1484: PPUSH
1485: LD_INT 22
1487: PUSH
1488: LD_INT 7
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PPUSH
1495: CALL_OW 70
1499: PUSH
1500: FOR_IN
1501: IFFALSE 1514
// RemoveUnit ( i ) ;
1503: LD_VAR 0 3
1507: PPUSH
1508: CALL_OW 64
1512: GO 1500
1514: POP
1515: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1516: LD_INT 1
1518: PPUSH
1519: LD_INT 22
1521: PUSH
1522: LD_INT 7
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PPUSH
1529: CALL_OW 70
1533: IFFALSE 1574
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1535: LD_ADDR_VAR 0 3
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 7
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PPUSH
1553: CALL_OW 70
1557: PUSH
1558: FOR_IN
1559: IFFALSE 1572
// RemoveUnit ( i ) ;
1561: LD_VAR 0 3
1565: PPUSH
1566: CALL_OW 64
1570: GO 1558
1572: POP
1573: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1574: LD_INT 2
1576: PPUSH
1577: LD_INT 22
1579: PUSH
1580: LD_INT 7
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PPUSH
1587: CALL_OW 70
1591: IFFALSE 1632
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1593: LD_ADDR_VAR 0 3
1597: PUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 22
1603: PUSH
1604: LD_INT 7
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 70
1615: PUSH
1616: FOR_IN
1617: IFFALSE 1630
// RemoveUnit ( i ) ;
1619: LD_VAR 0 3
1623: PPUSH
1624: CALL_OW 64
1628: GO 1616
1630: POP
1631: POP
// case num of 1 :
1632: LD_VAR 0 1
1636: PUSH
1637: LD_INT 1
1639: DOUBLE
1640: EQUAL
1641: IFTRUE 1645
1643: GO 1898
1645: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1646: LD_ADDR_VAR 0 3
1650: PUSH
1651: DOUBLE
1652: LD_INT 1
1654: DEC
1655: ST_TO_ADDR
1656: LD_INT 5
1658: PUSH
1659: LD_INT 6
1661: PUSH
1662: LD_INT 6
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_OWVAR 67
1674: ARRAY
1675: PUSH
1676: FOR_TO
1677: IFFALSE 1769
// begin uc_nation := 0 ;
1679: LD_ADDR_OWVAR 21
1683: PUSH
1684: LD_INT 0
1686: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1687: LD_ADDR_OWVAR 28
1691: PUSH
1692: LD_INT 15
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// hc_name :=  ;
1703: LD_ADDR_OWVAR 26
1707: PUSH
1708: LD_STRING 
1710: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1711: LD_ADDR_OWVAR 29
1715: PUSH
1716: LD_INT 16
1718: PUSH
1719: LD_INT 12
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: ST_TO_ADDR
// un := CreateHuman ;
1726: LD_ADDR_VAR 0 4
1730: PUSH
1731: CALL_OW 44
1735: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 0
1746: PPUSH
1747: CALL_OW 49
// tmp := tmp ^ un ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_VAR 0 5
1760: PUSH
1761: LD_VAR 0 4
1765: ADD
1766: ST_TO_ADDR
// end ;
1767: GO 1676
1769: POP
1770: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1771: LD_ADDR_VAR 0 3
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_INT 4
1783: PUSH
1784: LD_INT 5
1786: PUSH
1787: LD_INT 5
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_OWVAR 67
1799: ARRAY
1800: PUSH
1801: FOR_TO
1802: IFFALSE 1894
// begin uc_nation := 0 ;
1804: LD_ADDR_OWVAR 21
1808: PUSH
1809: LD_INT 0
1811: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1812: LD_ADDR_OWVAR 28
1816: PUSH
1817: LD_INT 15
1819: ST_TO_ADDR
// hc_gallery :=  ;
1820: LD_ADDR_OWVAR 33
1824: PUSH
1825: LD_STRING 
1827: ST_TO_ADDR
// hc_name :=  ;
1828: LD_ADDR_OWVAR 26
1832: PUSH
1833: LD_STRING 
1835: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1836: LD_ADDR_OWVAR 29
1840: PUSH
1841: LD_INT 16
1843: PUSH
1844: LD_INT 12
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: ST_TO_ADDR
// un := CreateHuman ;
1851: LD_ADDR_VAR 0 4
1855: PUSH
1856: CALL_OW 44
1860: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1861: LD_VAR 0 4
1865: PPUSH
1866: LD_INT 5
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL_OW 49
// tmp := tmp ^ un ;
1876: LD_ADDR_VAR 0 5
1880: PUSH
1881: LD_VAR 0 5
1885: PUSH
1886: LD_VAR 0 4
1890: ADD
1891: ST_TO_ADDR
// end ;
1892: GO 1801
1894: POP
1895: POP
// end ; 2 :
1896: GO 2676
1898: LD_INT 2
1900: DOUBLE
1901: EQUAL
1902: IFTRUE 1906
1904: GO 2034
1906: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: DOUBLE
1913: LD_INT 1
1915: DEC
1916: ST_TO_ADDR
1917: LD_INT 3
1919: PUSH
1920: LD_INT 4
1922: PUSH
1923: LD_INT 5
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PUSH
1931: LD_OWVAR 67
1935: ARRAY
1936: PUSH
1937: FOR_TO
1938: IFFALSE 2030
// begin uc_nation := 0 ;
1940: LD_ADDR_OWVAR 21
1944: PUSH
1945: LD_INT 0
1947: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1948: LD_ADDR_OWVAR 28
1952: PUSH
1953: LD_INT 17
1955: ST_TO_ADDR
// hc_gallery :=  ;
1956: LD_ADDR_OWVAR 33
1960: PUSH
1961: LD_STRING 
1963: ST_TO_ADDR
// hc_name :=  ;
1964: LD_ADDR_OWVAR 26
1968: PUSH
1969: LD_STRING 
1971: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
1972: LD_ADDR_OWVAR 29
1976: PUSH
1977: LD_INT 22
1979: PUSH
1980: LD_INT 12
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: ST_TO_ADDR
// un := CreateHuman ;
1987: LD_ADDR_VAR 0 4
1991: PUSH
1992: CALL_OW 44
1996: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
1997: LD_VAR 0 4
2001: PPUSH
2002: LD_INT 3
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 49
// tmp := tmp ^ un ;
2012: LD_ADDR_VAR 0 5
2016: PUSH
2017: LD_VAR 0 5
2021: PUSH
2022: LD_VAR 0 4
2026: ADD
2027: ST_TO_ADDR
// end ;
2028: GO 1937
2030: POP
2031: POP
// end ; 3 :
2032: GO 2676
2034: LD_INT 3
2036: DOUBLE
2037: EQUAL
2038: IFTRUE 2042
2040: GO 2202
2042: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: DOUBLE
2049: LD_INT 1
2051: DEC
2052: ST_TO_ADDR
2053: LD_INT 4
2055: PUSH
2056: LD_INT 5
2058: PUSH
2059: LD_INT 6
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_OWVAR 67
2071: ARRAY
2072: PUSH
2073: FOR_TO
2074: IFFALSE 2198
// begin uc_nation := 2 ;
2076: LD_ADDR_OWVAR 21
2080: PUSH
2081: LD_INT 2
2083: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2084: LD_ADDR_OWVAR 37
2088: PUSH
2089: LD_INT 14
2091: ST_TO_ADDR
// vc_engine := 3 ;
2092: LD_ADDR_OWVAR 39
2096: PUSH
2097: LD_INT 3
2099: ST_TO_ADDR
// vc_control := control_apeman ;
2100: LD_ADDR_OWVAR 38
2104: PUSH
2105: LD_INT 5
2107: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2108: LD_ADDR_OWVAR 40
2112: PUSH
2113: LD_INT 27
2115: PUSH
2116: LD_INT 28
2118: PUSH
2119: LD_INT 29
2121: PUSH
2122: LD_INT 91
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 4
2136: PPUSH
2137: CALL_OW 12
2141: ARRAY
2142: ST_TO_ADDR
// un := CreateVehicle ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 45
2152: ST_TO_ADDR
// tmp := tmp ^ un ;
2153: LD_ADDR_VAR 0 5
2157: PUSH
2158: LD_VAR 0 5
2162: PUSH
2163: LD_VAR 0 4
2167: ADD
2168: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2169: LD_VAR 0 4
2173: PPUSH
2174: LD_INT 0
2176: PPUSH
2177: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2181: LD_VAR 0 4
2185: PPUSH
2186: LD_INT 2
2188: PPUSH
2189: LD_INT 0
2191: PPUSH
2192: CALL_OW 49
// end ;
2196: GO 2073
2198: POP
2199: POP
// end ; 4 :
2200: GO 2676
2202: LD_INT 4
2204: DOUBLE
2205: EQUAL
2206: IFTRUE 2210
2208: GO 2378
2210: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2211: LD_ADDR_VAR 0 3
2215: PUSH
2216: DOUBLE
2217: LD_INT 1
2219: DEC
2220: ST_TO_ADDR
2221: LD_INT 3
2223: PPUSH
2224: LD_INT 4
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 6
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_OWVAR 67
2242: ARRAY
2243: PPUSH
2244: CALL_OW 12
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2374
// begin uc_nation := 2 ;
2252: LD_ADDR_OWVAR 21
2256: PUSH
2257: LD_INT 2
2259: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2260: LD_ADDR_OWVAR 37
2264: PUSH
2265: LD_INT 14
2267: ST_TO_ADDR
// vc_engine := 3 ;
2268: LD_ADDR_OWVAR 39
2272: PUSH
2273: LD_INT 3
2275: ST_TO_ADDR
// vc_control := control_apeman ;
2276: LD_ADDR_OWVAR 38
2280: PUSH
2281: LD_INT 5
2283: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2284: LD_ADDR_OWVAR 40
2288: PUSH
2289: LD_INT 27
2291: PUSH
2292: LD_INT 28
2294: PUSH
2295: LD_INT 29
2297: PUSH
2298: LD_INT 91
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 1
2309: PPUSH
2310: LD_INT 4
2312: PPUSH
2313: CALL_OW 12
2317: ARRAY
2318: ST_TO_ADDR
// un := CreateVehicle ;
2319: LD_ADDR_VAR 0 4
2323: PUSH
2324: CALL_OW 45
2328: ST_TO_ADDR
// tmp := tmp ^ un ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: LD_VAR 0 5
2338: PUSH
2339: LD_VAR 0 4
2343: ADD
2344: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_INT 3
2352: PPUSH
2353: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2357: LD_VAR 0 4
2361: PPUSH
2362: LD_INT 1
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: CALL_OW 49
// end ;
2372: GO 2249
2374: POP
2375: POP
// end ; 5 :
2376: GO 2676
2378: LD_INT 5
2380: DOUBLE
2381: EQUAL
2382: IFTRUE 2386
2384: GO 2546
2386: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2387: LD_ADDR_VAR 0 3
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 3
2399: PUSH
2400: LD_INT 4
2402: PUSH
2403: LD_INT 4
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_OWVAR 67
2415: ARRAY
2416: PUSH
2417: FOR_TO
2418: IFFALSE 2542
// begin uc_nation := 2 ;
2420: LD_ADDR_OWVAR 21
2424: PUSH
2425: LD_INT 2
2427: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2428: LD_ADDR_OWVAR 37
2432: PUSH
2433: LD_INT 14
2435: ST_TO_ADDR
// vc_engine := 3 ;
2436: LD_ADDR_OWVAR 39
2440: PUSH
2441: LD_INT 3
2443: ST_TO_ADDR
// vc_control := control_apeman ;
2444: LD_ADDR_OWVAR 38
2448: PUSH
2449: LD_INT 5
2451: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2452: LD_ADDR_OWVAR 40
2456: PUSH
2457: LD_INT 27
2459: PUSH
2460: LD_INT 28
2462: PUSH
2463: LD_INT 29
2465: PUSH
2466: LD_INT 91
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 1
2477: PPUSH
2478: LD_INT 4
2480: PPUSH
2481: CALL_OW 12
2485: ARRAY
2486: ST_TO_ADDR
// un := CreateVehicle ;
2487: LD_ADDR_VAR 0 4
2491: PUSH
2492: CALL_OW 45
2496: ST_TO_ADDR
// tmp := tmp ^ un ;
2497: LD_ADDR_VAR 0 5
2501: PUSH
2502: LD_VAR 0 5
2506: PUSH
2507: LD_VAR 0 4
2511: ADD
2512: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2513: LD_VAR 0 4
2517: PPUSH
2518: LD_INT 4
2520: PPUSH
2521: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2525: LD_VAR 0 4
2529: PPUSH
2530: LD_INT 5
2532: PPUSH
2533: LD_INT 0
2535: PPUSH
2536: CALL_OW 49
// end ;
2540: GO 2417
2542: POP
2543: POP
// end ; 6 :
2544: GO 2676
2546: LD_INT 6
2548: DOUBLE
2549: EQUAL
2550: IFTRUE 2554
2552: GO 2675
2554: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: DOUBLE
2561: LD_INT 1
2563: DEC
2564: ST_TO_ADDR
2565: LD_INT 2
2567: PUSH
2568: LD_INT 3
2570: PUSH
2571: LD_INT 4
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: LIST
2578: PUSH
2579: LD_OWVAR 67
2583: ARRAY
2584: PUSH
2585: FOR_TO
2586: IFFALSE 2671
// begin uc_nation := 2 ;
2588: LD_ADDR_OWVAR 21
2592: PUSH
2593: LD_INT 2
2595: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2596: LD_ADDR_OWVAR 37
2600: PUSH
2601: LD_INT 11
2603: ST_TO_ADDR
// vc_engine := engine_combustion ;
2604: LD_ADDR_OWVAR 39
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// vc_control := control_apeman ;
2612: LD_ADDR_OWVAR 38
2616: PUSH
2617: LD_INT 5
2619: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2620: LD_ADDR_OWVAR 40
2624: PUSH
2625: LD_INT 24
2627: ST_TO_ADDR
// un := CreateVehicle ;
2628: LD_ADDR_VAR 0 4
2632: PUSH
2633: CALL_OW 45
2637: ST_TO_ADDR
// tmp := tmp ^ un ;
2638: LD_ADDR_VAR 0 5
2642: PUSH
2643: LD_VAR 0 5
2647: PUSH
2648: LD_VAR 0 4
2652: ADD
2653: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2654: LD_VAR 0 4
2658: PPUSH
2659: LD_INT 8
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// end ;
2669: GO 2585
2671: POP
2672: POP
// end ; end ;
2673: GO 2676
2675: POP
// result := tmp ;
2676: LD_ADDR_VAR 0 2
2680: PUSH
2681: LD_VAR 0 5
2685: ST_TO_ADDR
// end ;
2686: LD_VAR 0 2
2690: RET
// export function ComitSib ; var un ; begin
2691: LD_INT 0
2693: PPUSH
2694: PPUSH
// uc_side := 2 ;
2695: LD_ADDR_OWVAR 20
2699: PUSH
2700: LD_INT 2
2702: ST_TO_ADDR
// uc_nation := 2 ;
2703: LD_ADDR_OWVAR 21
2707: PUSH
2708: LD_INT 2
2710: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2711: LD_INT 0
2713: PPUSH
2714: LD_INT 4
2716: PPUSH
2717: LD_INT 7
2719: PPUSH
2720: CALL_OW 380
// un := CreateHuman ;
2724: LD_ADDR_VAR 0 2
2728: PUSH
2729: CALL_OW 44
2733: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2734: LD_VAR 0 2
2738: PPUSH
2739: LD_INT 4
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2749: LD_VAR 0 2
2753: PPUSH
2754: LD_INT 63
2756: PPUSH
2757: LD_INT 37
2759: PPUSH
2760: CALL_OW 158
// end ;
2764: LD_VAR 0 1
2768: RET
// export function DSay ; var i ; begin
2769: LD_INT 0
2771: PPUSH
2772: PPUSH
// Randomize ;
2773: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: LD_INT 1
2784: PPUSH
2785: LD_INT 8
2787: PPUSH
2788: CALL_OW 12
2792: ST_TO_ADDR
// case i of 1 :
2793: LD_VAR 0 2
2797: PUSH
2798: LD_INT 1
2800: DOUBLE
2801: EQUAL
2802: IFTRUE 2806
2804: GO 2821
2806: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2807: LD_EXP 2
2811: PPUSH
2812: LD_STRING DDocA1
2814: PPUSH
2815: CALL_OW 94
2819: GO 2983
2821: LD_INT 2
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2844
2829: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2830: LD_EXP 2
2834: PPUSH
2835: LD_STRING DDocA2
2837: PPUSH
2838: CALL_OW 94
2842: GO 2983
2844: LD_INT 3
2846: DOUBLE
2847: EQUAL
2848: IFTRUE 2852
2850: GO 2867
2852: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2853: LD_EXP 2
2857: PPUSH
2858: LD_STRING DDocA3
2860: PPUSH
2861: CALL_OW 94
2865: GO 2983
2867: LD_INT 4
2869: DOUBLE
2870: EQUAL
2871: IFTRUE 2875
2873: GO 2890
2875: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2876: LD_EXP 2
2880: PPUSH
2881: LD_STRING DDocA4
2883: PPUSH
2884: CALL_OW 94
2888: GO 2983
2890: LD_INT 5
2892: DOUBLE
2893: EQUAL
2894: IFTRUE 2898
2896: GO 2913
2898: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2899: LD_EXP 2
2903: PPUSH
2904: LD_STRING DDocA5
2906: PPUSH
2907: CALL_OW 94
2911: GO 2983
2913: LD_INT 6
2915: DOUBLE
2916: EQUAL
2917: IFTRUE 2921
2919: GO 2936
2921: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2922: LD_EXP 2
2926: PPUSH
2927: LD_STRING DDocA6
2929: PPUSH
2930: CALL_OW 94
2934: GO 2983
2936: LD_INT 7
2938: DOUBLE
2939: EQUAL
2940: IFTRUE 2944
2942: GO 2959
2944: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2945: LD_EXP 2
2949: PPUSH
2950: LD_STRING DDocA7
2952: PPUSH
2953: CALL_OW 94
2957: GO 2983
2959: LD_INT 8
2961: DOUBLE
2962: EQUAL
2963: IFTRUE 2967
2965: GO 2982
2967: POP
// SayRadio ( doc , DDocA8 ) ; end ;
2968: LD_EXP 2
2972: PPUSH
2973: LD_STRING DDocA8
2975: PPUSH
2976: CALL_OW 94
2980: GO 2983
2982: POP
// end ; end_of_file
2983: LD_VAR 0 1
2987: RET
// every 0 0$01 do
2988: GO 2990
2990: DISABLE
// begin display_strings := [ #tick , tick ] ;
2991: LD_ADDR_OWVAR 47
2995: PUSH
2996: LD_STRING #tick
2998: PUSH
2999: LD_OWVAR 1
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: ST_TO_ADDR
// enable ;
3008: ENABLE
// end ;
3009: END
// export pom , hover , attackN ; every 1 do
3010: GO 3012
3012: DISABLE
// begin pom := [ ] ;
3013: LD_ADDR_EXP 4
3017: PUSH
3018: EMPTY
3019: ST_TO_ADDR
// hover := [ ] ;
3020: LD_ADDR_EXP 5
3024: PUSH
3025: EMPTY
3026: ST_TO_ADDR
// attackN := 0 ;
3027: LD_ADDR_EXP 6
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// end ;
3035: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3036: LD_EXP 4
3040: IFFALSE 3462
3042: GO 3044
3044: DISABLE
3045: LD_INT 0
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
// begin enable ;
3051: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3052: LD_ADDR_VAR 0 2
3056: PUSH
3057: LD_INT 22
3059: PUSH
3060: LD_INT 7
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PPUSH
3067: CALL_OW 69
3071: ST_TO_ADDR
// for i = 1 to pom do
3072: LD_ADDR_VAR 0 1
3076: PUSH
3077: DOUBLE
3078: LD_INT 1
3080: DEC
3081: ST_TO_ADDR
3082: LD_EXP 4
3086: PUSH
3087: FOR_TO
3088: IFFALSE 3146
// if not HasTask ( pom [ i ] ) then
3090: LD_EXP 4
3094: PUSH
3095: LD_VAR 0 1
3099: ARRAY
3100: PPUSH
3101: CALL_OW 314
3105: NOT
3106: IFFALSE 3144
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3108: LD_EXP 4
3112: PUSH
3113: LD_VAR 0 1
3117: ARRAY
3118: PPUSH
3119: LD_VAR 0 2
3123: PPUSH
3124: LD_EXP 4
3128: PUSH
3129: LD_VAR 0 1
3133: ARRAY
3134: PPUSH
3135: CALL_OW 74
3139: PPUSH
3140: CALL_OW 115
3144: GO 3087
3146: POP
3147: POP
// if hover then
3148: LD_EXP 5
3152: IFFALSE 3462
// begin for i = 1 to hover do
3154: LD_ADDR_VAR 0 1
3158: PUSH
3159: DOUBLE
3160: LD_INT 1
3162: DEC
3163: ST_TO_ADDR
3164: LD_EXP 5
3168: PUSH
3169: FOR_TO
3170: IFFALSE 3460
// begin if GetLives ( hover [ i ] ) < 250 then
3172: LD_EXP 5
3176: PUSH
3177: LD_VAR 0 1
3181: ARRAY
3182: PPUSH
3183: CALL_OW 256
3187: PUSH
3188: LD_INT 250
3190: LESS
3191: IFFALSE 3258
// begin for z = 1 to 1 + Difficulty do
3193: LD_ADDR_VAR 0 3
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 1
3205: PUSH
3206: LD_OWVAR 67
3210: PLUS
3211: PUSH
3212: FOR_TO
3213: IFFALSE 3256
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3215: LD_EXP 5
3219: PUSH
3220: LD_VAR 0 1
3224: ARRAY
3225: PPUSH
3226: CALL_OW 250
3230: PPUSH
3231: LD_EXP 5
3235: PUSH
3236: LD_VAR 0 1
3240: ARRAY
3241: PPUSH
3242: CALL_OW 251
3246: PPUSH
3247: LD_INT 10
3249: PPUSH
3250: CALL_OW 453
3254: GO 3212
3256: POP
3257: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3258: LD_VAR 0 2
3262: PPUSH
3263: LD_INT 25
3265: PUSH
3266: LD_INT 2
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: LD_INT 54
3278: PUSH
3279: EMPTY
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PPUSH
3290: CALL_OW 72
3294: PUSH
3295: LD_INT 0
3297: GREATER
3298: IFFALSE 3380
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3300: LD_ADDR_VAR 0 4
3304: PUSH
3305: LD_VAR 0 2
3309: PPUSH
3310: LD_INT 25
3312: PUSH
3313: LD_INT 2
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 3
3322: PUSH
3323: LD_INT 54
3325: PUSH
3326: EMPTY
3327: LIST
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PPUSH
3337: CALL_OW 72
3341: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3342: LD_EXP 5
3346: PUSH
3347: LD_VAR 0 1
3351: ARRAY
3352: PPUSH
3353: LD_VAR 0 4
3357: PPUSH
3358: LD_EXP 5
3362: PUSH
3363: LD_VAR 0 1
3367: ARRAY
3368: PPUSH
3369: CALL_OW 74
3373: PPUSH
3374: CALL_OW 115
// end else
3378: GO 3458
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3380: LD_ADDR_VAR 0 4
3384: PUSH
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 21
3392: PUSH
3393: LD_INT 1
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: LD_INT 3
3402: PUSH
3403: LD_INT 54
3405: PUSH
3406: EMPTY
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 72
3421: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3422: LD_EXP 5
3426: PUSH
3427: LD_VAR 0 1
3431: ARRAY
3432: PPUSH
3433: LD_VAR 0 4
3437: PPUSH
3438: LD_EXP 5
3442: PUSH
3443: LD_VAR 0 1
3447: ARRAY
3448: PPUSH
3449: CALL_OW 74
3453: PPUSH
3454: CALL_OW 115
// end ; end ;
3458: GO 3169
3460: POP
3461: POP
// end ; end ;
3462: PPOPN 4
3464: END
// every 3 3$10 do var i , un ;
3465: GO 3467
3467: DISABLE
3468: LD_INT 0
3470: PPUSH
3471: PPUSH
// begin uc_side := 7 ;
3472: LD_ADDR_OWVAR 20
3476: PUSH
3477: LD_INT 7
3479: ST_TO_ADDR
// uc_nation := 1 ;
3480: LD_ADDR_OWVAR 21
3484: PUSH
3485: LD_INT 1
3487: ST_TO_ADDR
// for i = 1 to 2 do
3488: LD_ADDR_VAR 0 1
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_INT 2
3500: PUSH
3501: FOR_TO
3502: IFFALSE 3667
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3504: LD_INT 1
3506: PPUSH
3507: LD_INT 5
3509: PPUSH
3510: LD_INT 7
3512: PUSH
3513: LD_INT 6
3515: PUSH
3516: LD_INT 6
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PUSH
3524: LD_OWVAR 67
3528: ARRAY
3529: PPUSH
3530: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3534: LD_ADDR_OWVAR 37
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// vc_engine := engine_combustion ;
3542: LD_ADDR_OWVAR 39
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// vc_control := control_manual ;
3550: LD_ADDR_OWVAR 38
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3558: LD_ADDR_OWVAR 41
3562: PUSH
3563: LD_INT 66
3565: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3566: LD_ADDR_OWVAR 40
3570: PUSH
3571: LD_INT 2
3573: ST_TO_ADDR
// un := CreateVehicle ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 45
3583: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 3
3591: PPUSH
3592: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3596: LD_VAR 0 2
3600: PPUSH
3601: LD_INT 48
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_INT 0
3609: PPUSH
3610: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3614: CALL_OW 44
3618: PPUSH
3619: LD_VAR 0 2
3623: PPUSH
3624: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_INT 49
3635: PPUSH
3636: LD_INT 17
3638: PPUSH
3639: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3643: LD_VAR 0 2
3647: PPUSH
3648: LD_INT 48
3650: PPUSH
3651: LD_INT 36
3653: PPUSH
3654: CALL_OW 171
// Wait ( 0 0$02 ) ;
3658: LD_INT 70
3660: PPUSH
3661: CALL_OW 67
// end ;
3665: GO 3501
3667: POP
3668: POP
// end ;
3669: PPOPN 2
3671: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3672: LD_EXP 6
3676: PUSH
3677: LD_INT 10
3679: PUSH
3680: LD_INT 12
3682: PUSH
3683: LD_INT 14
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_OWVAR 67
3695: ARRAY
3696: LESS
3697: IFFALSE 4399
3699: GO 3701
3701: DISABLE
3702: LD_INT 0
3704: PPUSH
3705: PPUSH
// begin enable ;
3706: ENABLE
// Randomize ;
3707: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3711: LD_INT 35
3713: PPUSH
3714: LD_INT 6265
3716: PPUSH
3717: CALL_OW 12
3721: PPUSH
3722: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3726: LD_EXP 6
3730: PUSH
3731: LD_INT 4
3733: PUSH
3734: LD_INT 4
3736: PUSH
3737: LD_INT 5
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_OWVAR 67
3749: ARRAY
3750: LESS
3751: IFFALSE 3771
// c := Rand ( 1 , 2 ) else
3753: LD_ADDR_VAR 0 1
3757: PUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 2
3763: PPUSH
3764: CALL_OW 12
3768: ST_TO_ADDR
3769: GO 3787
// c := Rand ( 1 , 3 ) ;
3771: LD_ADDR_VAR 0 1
3775: PUSH
3776: LD_INT 1
3778: PPUSH
3779: LD_INT 3
3781: PPUSH
3782: CALL_OW 12
3786: ST_TO_ADDR
// if attackN = 0 then
3787: LD_EXP 6
3791: PUSH
3792: LD_INT 0
3794: EQUAL
3795: IFFALSE 3811
// Say ( com , DJackAttack ) else
3797: LD_EXP 1
3801: PPUSH
3802: LD_STRING DJackAttack
3804: PPUSH
3805: CALL_OW 88
3809: GO 3815
// DSay ;
3811: CALL 2769 0 0
// case c of 1 :
3815: LD_VAR 0 1
3819: PUSH
3820: LD_INT 1
3822: DOUBLE
3823: EQUAL
3824: IFTRUE 3828
3826: GO 4010
3828: POP
// begin pom := pom ^ Attack ( 1 ) ;
3829: LD_ADDR_EXP 4
3833: PUSH
3834: LD_EXP 4
3838: PUSH
3839: LD_INT 1
3841: PPUSH
3842: CALL 1280 0 1
3846: ADD
3847: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3848: LD_INT 420
3850: PPUSH
3851: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3855: LD_ADDR_EXP 4
3859: PUSH
3860: LD_EXP 4
3864: PUSH
3865: LD_INT 3
3867: PPUSH
3868: CALL 1280 0 1
3872: ADD
3873: ST_TO_ADDR
// if Difficulty > 2 then
3874: LD_OWVAR 67
3878: PUSH
3879: LD_INT 2
3881: GREATER
3882: IFFALSE 3910
// begin Wait ( 0 0$46 ) ;
3884: LD_INT 1610
3886: PPUSH
3887: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3891: LD_ADDR_EXP 4
3895: PUSH
3896: LD_EXP 4
3900: PUSH
3901: LD_INT 4
3903: PPUSH
3904: CALL 1280 0 1
3908: ADD
3909: ST_TO_ADDR
// end ; if attackN > 4 then
3910: LD_EXP 6
3914: PUSH
3915: LD_INT 4
3917: GREATER
3918: IFFALSE 3946
// begin Wait ( 0 0$12 ) ;
3920: LD_INT 420
3922: PPUSH
3923: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3927: LD_ADDR_EXP 4
3931: PUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 3
3939: PPUSH
3940: CALL 1280 0 1
3944: ADD
3945: ST_TO_ADDR
// end ; if attackN > 8 then
3946: LD_EXP 6
3950: PUSH
3951: LD_INT 8
3953: GREATER
3954: IFFALSE 4008
// begin Wait ( 0 0$12 ) ;
3956: LD_INT 420
3958: PPUSH
3959: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3963: LD_ADDR_VAR 0 2
3967: PUSH
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 100
3973: PPUSH
3974: CALL_OW 12
3978: ST_TO_ADDR
// if l < 45 then
3979: LD_VAR 0 2
3983: PUSH
3984: LD_INT 45
3986: LESS
3987: IFFALSE 4008
// pom := pom ^ Attack ( 2 ) ;
3989: LD_ADDR_EXP 4
3993: PUSH
3994: LD_EXP 4
3998: PUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL 1280 0 1
4006: ADD
4007: ST_TO_ADDR
// end ; end ; 2 :
4008: GO 4297
4010: LD_INT 2
4012: DOUBLE
4013: EQUAL
4014: IFTRUE 4018
4016: GO 4166
4018: POP
// begin pom := pom ^ Attack ( 2 ) ;
4019: LD_ADDR_EXP 4
4023: PUSH
4024: LD_EXP 4
4028: PUSH
4029: LD_INT 2
4031: PPUSH
4032: CALL 1280 0 1
4036: ADD
4037: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4038: LD_ADDR_EXP 4
4042: PUSH
4043: LD_EXP 4
4047: PUSH
4048: LD_INT 3
4050: PPUSH
4051: CALL 1280 0 1
4055: ADD
4056: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4057: LD_OWVAR 67
4061: PUSH
4062: LD_INT 1
4064: GREATER
4065: PUSH
4066: LD_INT 63
4068: PPUSH
4069: LD_INT 37
4071: PPUSH
4072: CALL_OW 428
4076: PPUSH
4077: CALL_OW 266
4081: PUSH
4082: LD_INT 30
4084: EQUAL
4085: AND
4086: IFFALSE 4092
// ComitSib ;
4088: CALL 2691 0 0
// if Difficulty > 2 then
4092: LD_OWVAR 67
4096: PUSH
4097: LD_INT 2
4099: GREATER
4100: IFFALSE 4128
// begin Wait ( 0 0$25 ) ;
4102: LD_INT 875
4104: PPUSH
4105: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4109: LD_ADDR_EXP 4
4113: PUSH
4114: LD_EXP 4
4118: PUSH
4119: LD_INT 4
4121: PPUSH
4122: CALL 1280 0 1
4126: ADD
4127: ST_TO_ADDR
// end ; if attackN > 7 then
4128: LD_EXP 6
4132: PUSH
4133: LD_INT 7
4135: GREATER
4136: IFFALSE 4164
// begin Wait ( 0 0$15 ) ;
4138: LD_INT 525
4140: PPUSH
4141: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4145: LD_ADDR_EXP 4
4149: PUSH
4150: LD_EXP 4
4154: PUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL 1280 0 1
4162: ADD
4163: ST_TO_ADDR
// end ; end ; 3 :
4164: GO 4297
4166: LD_INT 3
4168: DOUBLE
4169: EQUAL
4170: IFTRUE 4174
4172: GO 4296
4174: POP
// begin pom := pom ^ Attack ( 1 ) ;
4175: LD_ADDR_EXP 4
4179: PUSH
4180: LD_EXP 4
4184: PUSH
4185: LD_INT 1
4187: PPUSH
4188: CALL 1280 0 1
4192: ADD
4193: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4194: LD_INT 70
4196: PPUSH
4197: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PUSH
4211: LD_INT 2
4213: PPUSH
4214: CALL 1280 0 1
4218: ADD
4219: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4220: LD_INT 2100
4222: PPUSH
4223: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4227: LD_ADDR_EXP 4
4231: PUSH
4232: LD_EXP 4
4236: PUSH
4237: LD_INT 3
4239: PPUSH
4240: CALL 1280 0 1
4244: ADD
4245: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4246: LD_ADDR_EXP 4
4250: PUSH
4251: LD_EXP 4
4255: PUSH
4256: LD_INT 5
4258: PPUSH
4259: CALL 1280 0 1
4263: ADD
4264: ST_TO_ADDR
// if attackN > 10 then
4265: LD_EXP 6
4269: PUSH
4270: LD_INT 10
4272: GREATER
4273: IFFALSE 4294
// pom := pom ^ Attack ( 2 ) ;
4275: LD_ADDR_EXP 4
4279: PUSH
4280: LD_EXP 4
4284: PUSH
4285: LD_INT 2
4287: PPUSH
4288: CALL 1280 0 1
4292: ADD
4293: ST_TO_ADDR
// end ; end ;
4294: GO 4297
4296: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4297: LD_OWVAR 67
4301: PUSH
4302: LD_INT 1
4304: GREATER
4305: PUSH
4306: LD_EXP 6
4310: PUSH
4311: LD_INT 4
4313: MOD
4314: PUSH
4315: LD_INT 0
4317: EQUAL
4318: AND
4319: IFFALSE 4385
// begin Wait ( 1 1$45 ) ;
4321: LD_INT 3675
4323: PPUSH
4324: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4328: LD_ADDR_EXP 4
4332: PUSH
4333: LD_EXP 4
4337: PUSH
4338: LD_INT 3
4340: PPUSH
4341: CALL 1280 0 1
4345: ADD
4346: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4347: LD_ADDR_EXP 4
4351: PUSH
4352: LD_EXP 4
4356: PUSH
4357: LD_INT 4
4359: PPUSH
4360: CALL 1280 0 1
4364: ADD
4365: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4366: LD_ADDR_EXP 5
4370: PUSH
4371: LD_EXP 5
4375: PUSH
4376: LD_INT 6
4378: PPUSH
4379: CALL 1280 0 1
4383: ADD
4384: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4385: LD_ADDR_EXP 6
4389: PUSH
4390: LD_EXP 6
4394: PUSH
4395: LD_INT 1
4397: PLUS
4398: ST_TO_ADDR
// end ;
4399: PPOPN 2
4401: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4402: LD_EXP 6
4406: PUSH
4407: LD_INT 10
4409: PUSH
4410: LD_INT 12
4412: PUSH
4413: LD_INT 14
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_OWVAR 67
4425: ARRAY
4426: GREATEREQUAL
4427: PUSH
4428: LD_INT 22
4430: PUSH
4431: LD_INT 2
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PPUSH
4438: CALL_OW 69
4442: PUSH
4443: LD_INT 0
4445: EQUAL
4446: AND
4447: IFFALSE 4503
4449: GO 4451
4451: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4452: LD_EXP 2
4456: PPUSH
4457: LD_STRING DDocEnd
4459: PPUSH
4460: CALL_OW 94
// Wait ( 0 0$03 ) ;
4464: LD_INT 105
4466: PPUSH
4467: CALL_OW 67
// case Query ( QWin ) of 1 :
4471: LD_STRING QWin
4473: PPUSH
4474: CALL_OW 97
4478: PUSH
4479: LD_INT 1
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4490
4487: POP
// ; end ;
4488: GO 4491
4490: POP
// music_nat := 5 ;
4491: LD_ADDR_OWVAR 71
4495: PUSH
4496: LD_INT 5
4498: ST_TO_ADDR
// YouWin ;
4499: CALL_OW 103
// end ; end_of_file
4503: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4504: LD_VAR 0 1
4508: PPUSH
4509: CALL 15758 0 1
// if un = brave or un = com then
4513: LD_VAR 0 1
4517: PUSH
4518: LD_INT 1
4520: EQUAL
4521: PUSH
4522: LD_VAR 0 1
4526: PUSH
4527: LD_EXP 1
4531: EQUAL
4532: OR
4533: IFFALSE 4554
// begin SayRadio ( doc , DDocWin ) ;
4535: LD_EXP 2
4539: PPUSH
4540: LD_STRING DDocWin
4542: PPUSH
4543: CALL_OW 94
// YouLost (  ) ;
4547: LD_STRING 
4549: PPUSH
4550: CALL_OW 104
// end ; end ;
4554: PPOPN 1
4556: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4557: LD_VAR 0 1
4561: PPUSH
4562: LD_VAR 0 2
4566: PPUSH
4567: LD_VAR 0 3
4571: PPUSH
4572: CALL 15856 0 3
// end ;
4576: PPOPN 3
4578: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 15864 0 1
// end ; end_of_file
4588: PPOPN 1
4590: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
4591: GO 4593
4593: DISABLE
// begin ru_radar := 98 ;
4594: LD_ADDR_EXP 7
4598: PUSH
4599: LD_INT 98
4601: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4602: LD_ADDR_EXP 8
4606: PUSH
4607: LD_INT 89
4609: ST_TO_ADDR
// us_hack := 99 ;
4610: LD_ADDR_EXP 9
4614: PUSH
4615: LD_INT 99
4617: ST_TO_ADDR
// us_artillery := 97 ;
4618: LD_ADDR_EXP 10
4622: PUSH
4623: LD_INT 97
4625: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4626: LD_ADDR_EXP 11
4630: PUSH
4631: LD_INT 91
4633: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4634: LD_ADDR_EXP 12
4638: PUSH
4639: LD_INT 92
4641: ST_TO_ADDR
// tech_Artillery := 80 ;
4642: LD_ADDR_EXP 13
4646: PUSH
4647: LD_INT 80
4649: ST_TO_ADDR
// tech_RadMat := 81 ;
4650: LD_ADDR_EXP 14
4654: PUSH
4655: LD_INT 81
4657: ST_TO_ADDR
// tech_BasicTools := 82 ;
4658: LD_ADDR_EXP 15
4662: PUSH
4663: LD_INT 82
4665: ST_TO_ADDR
// tech_Cargo := 83 ;
4666: LD_ADDR_EXP 16
4670: PUSH
4671: LD_INT 83
4673: ST_TO_ADDR
// tech_Track := 84 ;
4674: LD_ADDR_EXP 17
4678: PUSH
4679: LD_INT 84
4681: ST_TO_ADDR
// tech_Crane := 85 ;
4682: LD_ADDR_EXP 18
4686: PUSH
4687: LD_INT 85
4689: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4690: LD_ADDR_EXP 19
4694: PUSH
4695: LD_INT 86
4697: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4698: LD_ADDR_EXP 20
4702: PUSH
4703: LD_INT 87
4705: ST_TO_ADDR
// end ; end_of_file end_of_file
4706: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4707: GO 4709
4709: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4710: LD_STRING initStreamRollete();
4712: PPUSH
4713: CALL_OW 559
// InitStreamMode ;
4717: CALL 4726 0 0
// DefineStreamItems ( ) ;
4721: CALL 5166 0 0
// end ;
4725: END
// function InitStreamMode ; begin
4726: LD_INT 0
4728: PPUSH
// streamModeActive := false ;
4729: LD_ADDR_EXP 21
4733: PUSH
4734: LD_INT 0
4736: ST_TO_ADDR
// normalCounter := 36 ;
4737: LD_ADDR_EXP 22
4741: PUSH
4742: LD_INT 36
4744: ST_TO_ADDR
// hardcoreCounter := 16 ;
4745: LD_ADDR_EXP 23
4749: PUSH
4750: LD_INT 16
4752: ST_TO_ADDR
// sRocket := false ;
4753: LD_ADDR_EXP 26
4757: PUSH
4758: LD_INT 0
4760: ST_TO_ADDR
// sSpeed := false ;
4761: LD_ADDR_EXP 25
4765: PUSH
4766: LD_INT 0
4768: ST_TO_ADDR
// sEngine := false ;
4769: LD_ADDR_EXP 27
4773: PUSH
4774: LD_INT 0
4776: ST_TO_ADDR
// sSpec := false ;
4777: LD_ADDR_EXP 24
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// sLevel := false ;
4785: LD_ADDR_EXP 28
4789: PUSH
4790: LD_INT 0
4792: ST_TO_ADDR
// sArmoury := false ;
4793: LD_ADDR_EXP 29
4797: PUSH
4798: LD_INT 0
4800: ST_TO_ADDR
// sRadar := false ;
4801: LD_ADDR_EXP 30
4805: PUSH
4806: LD_INT 0
4808: ST_TO_ADDR
// sBunker := false ;
4809: LD_ADDR_EXP 31
4813: PUSH
4814: LD_INT 0
4816: ST_TO_ADDR
// sHack := false ;
4817: LD_ADDR_EXP 32
4821: PUSH
4822: LD_INT 0
4824: ST_TO_ADDR
// sFire := false ;
4825: LD_ADDR_EXP 33
4829: PUSH
4830: LD_INT 0
4832: ST_TO_ADDR
// sRefresh := false ;
4833: LD_ADDR_EXP 34
4837: PUSH
4838: LD_INT 0
4840: ST_TO_ADDR
// sExp := false ;
4841: LD_ADDR_EXP 35
4845: PUSH
4846: LD_INT 0
4848: ST_TO_ADDR
// sDepot := false ;
4849: LD_ADDR_EXP 36
4853: PUSH
4854: LD_INT 0
4856: ST_TO_ADDR
// sFlag := false ;
4857: LD_ADDR_EXP 37
4861: PUSH
4862: LD_INT 0
4864: ST_TO_ADDR
// sKamikadze := false ;
4865: LD_ADDR_EXP 45
4869: PUSH
4870: LD_INT 0
4872: ST_TO_ADDR
// sTroll := false ;
4873: LD_ADDR_EXP 46
4877: PUSH
4878: LD_INT 0
4880: ST_TO_ADDR
// sSlow := false ;
4881: LD_ADDR_EXP 47
4885: PUSH
4886: LD_INT 0
4888: ST_TO_ADDR
// sLack := false ;
4889: LD_ADDR_EXP 48
4893: PUSH
4894: LD_INT 0
4896: ST_TO_ADDR
// sTank := false ;
4897: LD_ADDR_EXP 50
4901: PUSH
4902: LD_INT 0
4904: ST_TO_ADDR
// sRemote := false ;
4905: LD_ADDR_EXP 51
4909: PUSH
4910: LD_INT 0
4912: ST_TO_ADDR
// sPowell := false ;
4913: LD_ADDR_EXP 52
4917: PUSH
4918: LD_INT 0
4920: ST_TO_ADDR
// sTeleport := false ;
4921: LD_ADDR_EXP 55
4925: PUSH
4926: LD_INT 0
4928: ST_TO_ADDR
// sOilTower := false ;
4929: LD_ADDR_EXP 57
4933: PUSH
4934: LD_INT 0
4936: ST_TO_ADDR
// sShovel := false ;
4937: LD_ADDR_EXP 58
4941: PUSH
4942: LD_INT 0
4944: ST_TO_ADDR
// sSheik := false ;
4945: LD_ADDR_EXP 59
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// sEarthquake := false ;
4953: LD_ADDR_EXP 61
4957: PUSH
4958: LD_INT 0
4960: ST_TO_ADDR
// sAI := false ;
4961: LD_ADDR_EXP 62
4965: PUSH
4966: LD_INT 0
4968: ST_TO_ADDR
// sCargo := false ;
4969: LD_ADDR_EXP 65
4973: PUSH
4974: LD_INT 0
4976: ST_TO_ADDR
// sDLaser := false ;
4977: LD_ADDR_EXP 66
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// sExchange := false ;
4985: LD_ADDR_EXP 67
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// sFac := false ;
4993: LD_ADDR_EXP 68
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// sPower := false ;
5001: LD_ADDR_EXP 69
5005: PUSH
5006: LD_INT 0
5008: ST_TO_ADDR
// sRandom := false ;
5009: LD_ADDR_EXP 70
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// sShield := false ;
5017: LD_ADDR_EXP 71
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// sTime := false ;
5025: LD_ADDR_EXP 72
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// sTools := false ;
5033: LD_ADDR_EXP 73
5037: PUSH
5038: LD_INT 0
5040: ST_TO_ADDR
// sSold := false ;
5041: LD_ADDR_EXP 38
5045: PUSH
5046: LD_INT 0
5048: ST_TO_ADDR
// sDiff := false ;
5049: LD_ADDR_EXP 39
5053: PUSH
5054: LD_INT 0
5056: ST_TO_ADDR
// sFog := false ;
5057: LD_ADDR_EXP 42
5061: PUSH
5062: LD_INT 0
5064: ST_TO_ADDR
// sReset := false ;
5065: LD_ADDR_EXP 43
5069: PUSH
5070: LD_INT 0
5072: ST_TO_ADDR
// sSun := false ;
5073: LD_ADDR_EXP 44
5077: PUSH
5078: LD_INT 0
5080: ST_TO_ADDR
// sTiger := false ;
5081: LD_ADDR_EXP 40
5085: PUSH
5086: LD_INT 0
5088: ST_TO_ADDR
// sBomb := false ;
5089: LD_ADDR_EXP 41
5093: PUSH
5094: LD_INT 0
5096: ST_TO_ADDR
// sWound := false ;
5097: LD_ADDR_EXP 49
5101: PUSH
5102: LD_INT 0
5104: ST_TO_ADDR
// sBetray := false ;
5105: LD_ADDR_EXP 53
5109: PUSH
5110: LD_INT 0
5112: ST_TO_ADDR
// sContamin := false ;
5113: LD_ADDR_EXP 54
5117: PUSH
5118: LD_INT 0
5120: ST_TO_ADDR
// sOil := false ;
5121: LD_ADDR_EXP 56
5125: PUSH
5126: LD_INT 0
5128: ST_TO_ADDR
// sStu := false ;
5129: LD_ADDR_EXP 60
5133: PUSH
5134: LD_INT 0
5136: ST_TO_ADDR
// sBazooka := false ;
5137: LD_ADDR_EXP 63
5141: PUSH
5142: LD_INT 0
5144: ST_TO_ADDR
// sMortar := false ;
5145: LD_ADDR_EXP 64
5149: PUSH
5150: LD_INT 0
5152: ST_TO_ADDR
// sRanger := false ;
5153: LD_ADDR_EXP 74
5157: PUSH
5158: LD_INT 0
5160: ST_TO_ADDR
// end ;
5161: LD_VAR 0 1
5165: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
5170: PPUSH
5171: PPUSH
5172: PPUSH
// result := [ ] ;
5173: LD_ADDR_VAR 0 1
5177: PUSH
5178: EMPTY
5179: ST_TO_ADDR
// if campaign_id = 1 then
5180: LD_OWVAR 69
5184: PUSH
5185: LD_INT 1
5187: EQUAL
5188: IFFALSE 8126
// begin case mission_number of 1 :
5190: LD_OWVAR 70
5194: PUSH
5195: LD_INT 1
5197: DOUBLE
5198: EQUAL
5199: IFTRUE 5203
5201: GO 5267
5203: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5204: LD_ADDR_VAR 0 1
5208: PUSH
5209: LD_INT 2
5211: PUSH
5212: LD_INT 4
5214: PUSH
5215: LD_INT 11
5217: PUSH
5218: LD_INT 12
5220: PUSH
5221: LD_INT 15
5223: PUSH
5224: LD_INT 16
5226: PUSH
5227: LD_INT 22
5229: PUSH
5230: LD_INT 23
5232: PUSH
5233: LD_INT 26
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: PUSH
5247: LD_INT 101
5249: PUSH
5250: LD_INT 102
5252: PUSH
5253: LD_INT 106
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: ST_TO_ADDR
5265: GO 8124
5267: LD_INT 2
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5347
5275: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5276: LD_ADDR_VAR 0 1
5280: PUSH
5281: LD_INT 2
5283: PUSH
5284: LD_INT 4
5286: PUSH
5287: LD_INT 11
5289: PUSH
5290: LD_INT 12
5292: PUSH
5293: LD_INT 15
5295: PUSH
5296: LD_INT 16
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 23
5304: PUSH
5305: LD_INT 26
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 101
5321: PUSH
5322: LD_INT 102
5324: PUSH
5325: LD_INT 105
5327: PUSH
5328: LD_INT 106
5330: PUSH
5331: LD_INT 108
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: ST_TO_ADDR
5345: GO 8124
5347: LD_INT 3
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5431
5355: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5356: LD_ADDR_VAR 0 1
5360: PUSH
5361: LD_INT 2
5363: PUSH
5364: LD_INT 4
5366: PUSH
5367: LD_INT 5
5369: PUSH
5370: LD_INT 11
5372: PUSH
5373: LD_INT 12
5375: PUSH
5376: LD_INT 15
5378: PUSH
5379: LD_INT 16
5381: PUSH
5382: LD_INT 22
5384: PUSH
5385: LD_INT 26
5387: PUSH
5388: LD_INT 36
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 101
5405: PUSH
5406: LD_INT 102
5408: PUSH
5409: LD_INT 105
5411: PUSH
5412: LD_INT 106
5414: PUSH
5415: LD_INT 108
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: ST_TO_ADDR
5429: GO 8124
5431: LD_INT 4
5433: DOUBLE
5434: EQUAL
5435: IFTRUE 5439
5437: GO 5523
5439: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5440: LD_ADDR_VAR 0 1
5444: PUSH
5445: LD_INT 2
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: LD_INT 5
5453: PUSH
5454: LD_INT 8
5456: PUSH
5457: LD_INT 11
5459: PUSH
5460: LD_INT 12
5462: PUSH
5463: LD_INT 15
5465: PUSH
5466: LD_INT 16
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 23
5474: PUSH
5475: LD_INT 26
5477: PUSH
5478: LD_INT 36
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: PUSH
5495: LD_INT 101
5497: PUSH
5498: LD_INT 102
5500: PUSH
5501: LD_INT 105
5503: PUSH
5504: LD_INT 106
5506: PUSH
5507: LD_INT 108
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: ST_TO_ADDR
5521: GO 8124
5523: LD_INT 5
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5631
5531: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5532: LD_ADDR_VAR 0 1
5536: PUSH
5537: LD_INT 2
5539: PUSH
5540: LD_INT 4
5542: PUSH
5543: LD_INT 5
5545: PUSH
5546: LD_INT 6
5548: PUSH
5549: LD_INT 8
5551: PUSH
5552: LD_INT 11
5554: PUSH
5555: LD_INT 12
5557: PUSH
5558: LD_INT 15
5560: PUSH
5561: LD_INT 16
5563: PUSH
5564: LD_INT 22
5566: PUSH
5567: LD_INT 23
5569: PUSH
5570: LD_INT 25
5572: PUSH
5573: LD_INT 26
5575: PUSH
5576: LD_INT 36
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 101
5597: PUSH
5598: LD_INT 102
5600: PUSH
5601: LD_INT 105
5603: PUSH
5604: LD_INT 106
5606: PUSH
5607: LD_INT 108
5609: PUSH
5610: LD_INT 109
5612: PUSH
5613: LD_INT 112
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: ST_TO_ADDR
5629: GO 8124
5631: LD_INT 6
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5759
5639: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5640: LD_ADDR_VAR 0 1
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: LD_INT 4
5650: PUSH
5651: LD_INT 5
5653: PUSH
5654: LD_INT 6
5656: PUSH
5657: LD_INT 8
5659: PUSH
5660: LD_INT 11
5662: PUSH
5663: LD_INT 12
5665: PUSH
5666: LD_INT 15
5668: PUSH
5669: LD_INT 16
5671: PUSH
5672: LD_INT 20
5674: PUSH
5675: LD_INT 21
5677: PUSH
5678: LD_INT 22
5680: PUSH
5681: LD_INT 23
5683: PUSH
5684: LD_INT 25
5686: PUSH
5687: LD_INT 26
5689: PUSH
5690: LD_INT 30
5692: PUSH
5693: LD_INT 31
5695: PUSH
5696: LD_INT 32
5698: PUSH
5699: LD_INT 36
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 101
5725: PUSH
5726: LD_INT 102
5728: PUSH
5729: LD_INT 105
5731: PUSH
5732: LD_INT 106
5734: PUSH
5735: LD_INT 108
5737: PUSH
5738: LD_INT 109
5740: PUSH
5741: LD_INT 112
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: ST_TO_ADDR
5757: GO 8124
5759: LD_INT 7
5761: DOUBLE
5762: EQUAL
5763: IFTRUE 5767
5765: GO 5867
5767: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_INT 2
5775: PUSH
5776: LD_INT 4
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: LD_INT 7
5784: PUSH
5785: LD_INT 11
5787: PUSH
5788: LD_INT 12
5790: PUSH
5791: LD_INT 15
5793: PUSH
5794: LD_INT 16
5796: PUSH
5797: LD_INT 20
5799: PUSH
5800: LD_INT 21
5802: PUSH
5803: LD_INT 22
5805: PUSH
5806: LD_INT 23
5808: PUSH
5809: LD_INT 25
5811: PUSH
5812: LD_INT 26
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 101
5833: PUSH
5834: LD_INT 102
5836: PUSH
5837: LD_INT 103
5839: PUSH
5840: LD_INT 105
5842: PUSH
5843: LD_INT 106
5845: PUSH
5846: LD_INT 108
5848: PUSH
5849: LD_INT 112
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 8124
5867: LD_INT 8
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 6003
5875: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5876: LD_ADDR_VAR 0 1
5880: PUSH
5881: LD_INT 2
5883: PUSH
5884: LD_INT 4
5886: PUSH
5887: LD_INT 5
5889: PUSH
5890: LD_INT 6
5892: PUSH
5893: LD_INT 7
5895: PUSH
5896: LD_INT 8
5898: PUSH
5899: LD_INT 11
5901: PUSH
5902: LD_INT 12
5904: PUSH
5905: LD_INT 15
5907: PUSH
5908: LD_INT 16
5910: PUSH
5911: LD_INT 20
5913: PUSH
5914: LD_INT 21
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 23
5922: PUSH
5923: LD_INT 25
5925: PUSH
5926: LD_INT 26
5928: PUSH
5929: LD_INT 30
5931: PUSH
5932: LD_INT 31
5934: PUSH
5935: LD_INT 32
5937: PUSH
5938: LD_INT 36
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 101
5965: PUSH
5966: LD_INT 102
5968: PUSH
5969: LD_INT 103
5971: PUSH
5972: LD_INT 105
5974: PUSH
5975: LD_INT 106
5977: PUSH
5978: LD_INT 108
5980: PUSH
5981: LD_INT 109
5983: PUSH
5984: LD_INT 112
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: ST_TO_ADDR
6001: GO 8124
6003: LD_INT 9
6005: DOUBLE
6006: EQUAL
6007: IFTRUE 6011
6009: GO 6147
6011: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6012: LD_ADDR_VAR 0 1
6016: PUSH
6017: LD_INT 2
6019: PUSH
6020: LD_INT 4
6022: PUSH
6023: LD_INT 5
6025: PUSH
6026: LD_INT 6
6028: PUSH
6029: LD_INT 7
6031: PUSH
6032: LD_INT 8
6034: PUSH
6035: LD_INT 11
6037: PUSH
6038: LD_INT 12
6040: PUSH
6041: LD_INT 15
6043: PUSH
6044: LD_INT 16
6046: PUSH
6047: LD_INT 20
6049: PUSH
6050: LD_INT 21
6052: PUSH
6053: LD_INT 22
6055: PUSH
6056: LD_INT 23
6058: PUSH
6059: LD_INT 25
6061: PUSH
6062: LD_INT 26
6064: PUSH
6065: LD_INT 28
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 31
6073: PUSH
6074: LD_INT 32
6076: PUSH
6077: LD_INT 36
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 101
6105: PUSH
6106: LD_INT 102
6108: PUSH
6109: LD_INT 103
6111: PUSH
6112: LD_INT 105
6114: PUSH
6115: LD_INT 106
6117: PUSH
6118: LD_INT 108
6120: PUSH
6121: LD_INT 109
6123: PUSH
6124: LD_INT 112
6126: PUSH
6127: LD_INT 114
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: ST_TO_ADDR
6145: GO 8124
6147: LD_INT 10
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6339
6155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6156: LD_ADDR_VAR 0 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 4
6166: PUSH
6167: LD_INT 5
6169: PUSH
6170: LD_INT 6
6172: PUSH
6173: LD_INT 7
6175: PUSH
6176: LD_INT 8
6178: PUSH
6179: LD_INT 9
6181: PUSH
6182: LD_INT 10
6184: PUSH
6185: LD_INT 11
6187: PUSH
6188: LD_INT 12
6190: PUSH
6191: LD_INT 13
6193: PUSH
6194: LD_INT 14
6196: PUSH
6197: LD_INT 15
6199: PUSH
6200: LD_INT 16
6202: PUSH
6203: LD_INT 17
6205: PUSH
6206: LD_INT 18
6208: PUSH
6209: LD_INT 19
6211: PUSH
6212: LD_INT 20
6214: PUSH
6215: LD_INT 21
6217: PUSH
6218: LD_INT 22
6220: PUSH
6221: LD_INT 23
6223: PUSH
6224: LD_INT 24
6226: PUSH
6227: LD_INT 25
6229: PUSH
6230: LD_INT 26
6232: PUSH
6233: LD_INT 28
6235: PUSH
6236: LD_INT 30
6238: PUSH
6239: LD_INT 31
6241: PUSH
6242: LD_INT 32
6244: PUSH
6245: LD_INT 36
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 101
6281: PUSH
6282: LD_INT 102
6284: PUSH
6285: LD_INT 103
6287: PUSH
6288: LD_INT 104
6290: PUSH
6291: LD_INT 105
6293: PUSH
6294: LD_INT 106
6296: PUSH
6297: LD_INT 107
6299: PUSH
6300: LD_INT 108
6302: PUSH
6303: LD_INT 109
6305: PUSH
6306: LD_INT 110
6308: PUSH
6309: LD_INT 111
6311: PUSH
6312: LD_INT 112
6314: PUSH
6315: LD_INT 114
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: ST_TO_ADDR
6337: GO 8124
6339: LD_INT 11
6341: DOUBLE
6342: EQUAL
6343: IFTRUE 6347
6345: GO 6539
6347: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6348: LD_ADDR_VAR 0 1
6352: PUSH
6353: LD_INT 2
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: LD_INT 5
6364: PUSH
6365: LD_INT 6
6367: PUSH
6368: LD_INT 7
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 9
6376: PUSH
6377: LD_INT 10
6379: PUSH
6380: LD_INT 11
6382: PUSH
6383: LD_INT 12
6385: PUSH
6386: LD_INT 13
6388: PUSH
6389: LD_INT 14
6391: PUSH
6392: LD_INT 15
6394: PUSH
6395: LD_INT 16
6397: PUSH
6398: LD_INT 17
6400: PUSH
6401: LD_INT 18
6403: PUSH
6404: LD_INT 19
6406: PUSH
6407: LD_INT 20
6409: PUSH
6410: LD_INT 21
6412: PUSH
6413: LD_INT 22
6415: PUSH
6416: LD_INT 23
6418: PUSH
6419: LD_INT 24
6421: PUSH
6422: LD_INT 25
6424: PUSH
6425: LD_INT 26
6427: PUSH
6428: LD_INT 28
6430: PUSH
6431: LD_INT 30
6433: PUSH
6434: LD_INT 31
6436: PUSH
6437: LD_INT 32
6439: PUSH
6440: LD_INT 34
6442: PUSH
6443: LD_INT 36
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 101
6481: PUSH
6482: LD_INT 102
6484: PUSH
6485: LD_INT 103
6487: PUSH
6488: LD_INT 104
6490: PUSH
6491: LD_INT 105
6493: PUSH
6494: LD_INT 106
6496: PUSH
6497: LD_INT 107
6499: PUSH
6500: LD_INT 108
6502: PUSH
6503: LD_INT 109
6505: PUSH
6506: LD_INT 110
6508: PUSH
6509: LD_INT 111
6511: PUSH
6512: LD_INT 112
6514: PUSH
6515: LD_INT 114
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: ST_TO_ADDR
6537: GO 8124
6539: LD_INT 12
6541: DOUBLE
6542: EQUAL
6543: IFTRUE 6547
6545: GO 6755
6547: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: LD_INT 2
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: LD_INT 4
6564: PUSH
6565: LD_INT 5
6567: PUSH
6568: LD_INT 6
6570: PUSH
6571: LD_INT 7
6573: PUSH
6574: LD_INT 8
6576: PUSH
6577: LD_INT 9
6579: PUSH
6580: LD_INT 10
6582: PUSH
6583: LD_INT 11
6585: PUSH
6586: LD_INT 12
6588: PUSH
6589: LD_INT 13
6591: PUSH
6592: LD_INT 14
6594: PUSH
6595: LD_INT 15
6597: PUSH
6598: LD_INT 16
6600: PUSH
6601: LD_INT 17
6603: PUSH
6604: LD_INT 18
6606: PUSH
6607: LD_INT 19
6609: PUSH
6610: LD_INT 20
6612: PUSH
6613: LD_INT 21
6615: PUSH
6616: LD_INT 22
6618: PUSH
6619: LD_INT 23
6621: PUSH
6622: LD_INT 24
6624: PUSH
6625: LD_INT 25
6627: PUSH
6628: LD_INT 26
6630: PUSH
6631: LD_INT 27
6633: PUSH
6634: LD_INT 28
6636: PUSH
6637: LD_INT 30
6639: PUSH
6640: LD_INT 31
6642: PUSH
6643: LD_INT 32
6645: PUSH
6646: LD_INT 33
6648: PUSH
6649: LD_INT 34
6651: PUSH
6652: LD_INT 36
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 101
6693: PUSH
6694: LD_INT 102
6696: PUSH
6697: LD_INT 103
6699: PUSH
6700: LD_INT 104
6702: PUSH
6703: LD_INT 105
6705: PUSH
6706: LD_INT 106
6708: PUSH
6709: LD_INT 107
6711: PUSH
6712: LD_INT 108
6714: PUSH
6715: LD_INT 109
6717: PUSH
6718: LD_INT 110
6720: PUSH
6721: LD_INT 111
6723: PUSH
6724: LD_INT 112
6726: PUSH
6727: LD_INT 113
6729: PUSH
6730: LD_INT 114
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: ST_TO_ADDR
6753: GO 8124
6755: LD_INT 13
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 6959
6763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6764: LD_ADDR_VAR 0 1
6768: PUSH
6769: LD_INT 1
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: LD_INT 4
6780: PUSH
6781: LD_INT 5
6783: PUSH
6784: LD_INT 8
6786: PUSH
6787: LD_INT 9
6789: PUSH
6790: LD_INT 10
6792: PUSH
6793: LD_INT 11
6795: PUSH
6796: LD_INT 12
6798: PUSH
6799: LD_INT 14
6801: PUSH
6802: LD_INT 15
6804: PUSH
6805: LD_INT 16
6807: PUSH
6808: LD_INT 17
6810: PUSH
6811: LD_INT 18
6813: PUSH
6814: LD_INT 19
6816: PUSH
6817: LD_INT 20
6819: PUSH
6820: LD_INT 21
6822: PUSH
6823: LD_INT 22
6825: PUSH
6826: LD_INT 23
6828: PUSH
6829: LD_INT 24
6831: PUSH
6832: LD_INT 25
6834: PUSH
6835: LD_INT 26
6837: PUSH
6838: LD_INT 27
6840: PUSH
6841: LD_INT 28
6843: PUSH
6844: LD_INT 30
6846: PUSH
6847: LD_INT 31
6849: PUSH
6850: LD_INT 32
6852: PUSH
6853: LD_INT 33
6855: PUSH
6856: LD_INT 34
6858: PUSH
6859: LD_INT 36
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 101
6897: PUSH
6898: LD_INT 102
6900: PUSH
6901: LD_INT 103
6903: PUSH
6904: LD_INT 104
6906: PUSH
6907: LD_INT 105
6909: PUSH
6910: LD_INT 106
6912: PUSH
6913: LD_INT 107
6915: PUSH
6916: LD_INT 108
6918: PUSH
6919: LD_INT 109
6921: PUSH
6922: LD_INT 110
6924: PUSH
6925: LD_INT 111
6927: PUSH
6928: LD_INT 112
6930: PUSH
6931: LD_INT 113
6933: PUSH
6934: LD_INT 114
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: ST_TO_ADDR
6957: GO 8124
6959: LD_INT 14
6961: DOUBLE
6962: EQUAL
6963: IFTRUE 6967
6965: GO 7179
6967: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6968: LD_ADDR_VAR 0 1
6972: PUSH
6973: LD_INT 1
6975: PUSH
6976: LD_INT 2
6978: PUSH
6979: LD_INT 3
6981: PUSH
6982: LD_INT 4
6984: PUSH
6985: LD_INT 5
6987: PUSH
6988: LD_INT 6
6990: PUSH
6991: LD_INT 7
6993: PUSH
6994: LD_INT 8
6996: PUSH
6997: LD_INT 9
6999: PUSH
7000: LD_INT 10
7002: PUSH
7003: LD_INT 11
7005: PUSH
7006: LD_INT 12
7008: PUSH
7009: LD_INT 13
7011: PUSH
7012: LD_INT 14
7014: PUSH
7015: LD_INT 15
7017: PUSH
7018: LD_INT 16
7020: PUSH
7021: LD_INT 17
7023: PUSH
7024: LD_INT 18
7026: PUSH
7027: LD_INT 19
7029: PUSH
7030: LD_INT 20
7032: PUSH
7033: LD_INT 21
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 23
7041: PUSH
7042: LD_INT 24
7044: PUSH
7045: LD_INT 25
7047: PUSH
7048: LD_INT 26
7050: PUSH
7051: LD_INT 27
7053: PUSH
7054: LD_INT 28
7056: PUSH
7057: LD_INT 29
7059: PUSH
7060: LD_INT 30
7062: PUSH
7063: LD_INT 31
7065: PUSH
7066: LD_INT 32
7068: PUSH
7069: LD_INT 33
7071: PUSH
7072: LD_INT 34
7074: PUSH
7075: LD_INT 36
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 101
7117: PUSH
7118: LD_INT 102
7120: PUSH
7121: LD_INT 103
7123: PUSH
7124: LD_INT 104
7126: PUSH
7127: LD_INT 105
7129: PUSH
7130: LD_INT 106
7132: PUSH
7133: LD_INT 107
7135: PUSH
7136: LD_INT 108
7138: PUSH
7139: LD_INT 109
7141: PUSH
7142: LD_INT 110
7144: PUSH
7145: LD_INT 111
7147: PUSH
7148: LD_INT 112
7150: PUSH
7151: LD_INT 113
7153: PUSH
7154: LD_INT 114
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: ST_TO_ADDR
7177: GO 8124
7179: LD_INT 15
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7399
7187: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7188: LD_ADDR_VAR 0 1
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 3
7201: PUSH
7202: LD_INT 4
7204: PUSH
7205: LD_INT 5
7207: PUSH
7208: LD_INT 6
7210: PUSH
7211: LD_INT 7
7213: PUSH
7214: LD_INT 8
7216: PUSH
7217: LD_INT 9
7219: PUSH
7220: LD_INT 10
7222: PUSH
7223: LD_INT 11
7225: PUSH
7226: LD_INT 12
7228: PUSH
7229: LD_INT 13
7231: PUSH
7232: LD_INT 14
7234: PUSH
7235: LD_INT 15
7237: PUSH
7238: LD_INT 16
7240: PUSH
7241: LD_INT 17
7243: PUSH
7244: LD_INT 18
7246: PUSH
7247: LD_INT 19
7249: PUSH
7250: LD_INT 20
7252: PUSH
7253: LD_INT 21
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 23
7261: PUSH
7262: LD_INT 24
7264: PUSH
7265: LD_INT 25
7267: PUSH
7268: LD_INT 26
7270: PUSH
7271: LD_INT 27
7273: PUSH
7274: LD_INT 28
7276: PUSH
7277: LD_INT 29
7279: PUSH
7280: LD_INT 30
7282: PUSH
7283: LD_INT 31
7285: PUSH
7286: LD_INT 32
7288: PUSH
7289: LD_INT 33
7291: PUSH
7292: LD_INT 34
7294: PUSH
7295: LD_INT 36
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 101
7337: PUSH
7338: LD_INT 102
7340: PUSH
7341: LD_INT 103
7343: PUSH
7344: LD_INT 104
7346: PUSH
7347: LD_INT 105
7349: PUSH
7350: LD_INT 106
7352: PUSH
7353: LD_INT 107
7355: PUSH
7356: LD_INT 108
7358: PUSH
7359: LD_INT 109
7361: PUSH
7362: LD_INT 110
7364: PUSH
7365: LD_INT 111
7367: PUSH
7368: LD_INT 112
7370: PUSH
7371: LD_INT 113
7373: PUSH
7374: LD_INT 114
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: ST_TO_ADDR
7397: GO 8124
7399: LD_INT 16
7401: DOUBLE
7402: EQUAL
7403: IFTRUE 7407
7405: GO 7531
7407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7408: LD_ADDR_VAR 0 1
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: LD_INT 5
7421: PUSH
7422: LD_INT 7
7424: PUSH
7425: LD_INT 11
7427: PUSH
7428: LD_INT 12
7430: PUSH
7431: LD_INT 15
7433: PUSH
7434: LD_INT 16
7436: PUSH
7437: LD_INT 20
7439: PUSH
7440: LD_INT 21
7442: PUSH
7443: LD_INT 22
7445: PUSH
7446: LD_INT 23
7448: PUSH
7449: LD_INT 25
7451: PUSH
7452: LD_INT 26
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 31
7460: PUSH
7461: LD_INT 32
7463: PUSH
7464: LD_INT 33
7466: PUSH
7467: LD_INT 34
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 101
7493: PUSH
7494: LD_INT 102
7496: PUSH
7497: LD_INT 103
7499: PUSH
7500: LD_INT 106
7502: PUSH
7503: LD_INT 108
7505: PUSH
7506: LD_INT 112
7508: PUSH
7509: LD_INT 113
7511: PUSH
7512: LD_INT 114
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: ST_TO_ADDR
7529: GO 8124
7531: LD_INT 17
7533: DOUBLE
7534: EQUAL
7535: IFTRUE 7539
7537: GO 7751
7539: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7540: LD_ADDR_VAR 0 1
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: LD_INT 2
7550: PUSH
7551: LD_INT 3
7553: PUSH
7554: LD_INT 4
7556: PUSH
7557: LD_INT 5
7559: PUSH
7560: LD_INT 6
7562: PUSH
7563: LD_INT 7
7565: PUSH
7566: LD_INT 8
7568: PUSH
7569: LD_INT 9
7571: PUSH
7572: LD_INT 10
7574: PUSH
7575: LD_INT 11
7577: PUSH
7578: LD_INT 12
7580: PUSH
7581: LD_INT 13
7583: PUSH
7584: LD_INT 14
7586: PUSH
7587: LD_INT 15
7589: PUSH
7590: LD_INT 16
7592: PUSH
7593: LD_INT 17
7595: PUSH
7596: LD_INT 18
7598: PUSH
7599: LD_INT 19
7601: PUSH
7602: LD_INT 20
7604: PUSH
7605: LD_INT 21
7607: PUSH
7608: LD_INT 22
7610: PUSH
7611: LD_INT 23
7613: PUSH
7614: LD_INT 24
7616: PUSH
7617: LD_INT 25
7619: PUSH
7620: LD_INT 26
7622: PUSH
7623: LD_INT 27
7625: PUSH
7626: LD_INT 28
7628: PUSH
7629: LD_INT 29
7631: PUSH
7632: LD_INT 30
7634: PUSH
7635: LD_INT 31
7637: PUSH
7638: LD_INT 32
7640: PUSH
7641: LD_INT 33
7643: PUSH
7644: LD_INT 34
7646: PUSH
7647: LD_INT 36
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 101
7689: PUSH
7690: LD_INT 102
7692: PUSH
7693: LD_INT 103
7695: PUSH
7696: LD_INT 104
7698: PUSH
7699: LD_INT 105
7701: PUSH
7702: LD_INT 106
7704: PUSH
7705: LD_INT 107
7707: PUSH
7708: LD_INT 108
7710: PUSH
7711: LD_INT 109
7713: PUSH
7714: LD_INT 110
7716: PUSH
7717: LD_INT 111
7719: PUSH
7720: LD_INT 112
7722: PUSH
7723: LD_INT 113
7725: PUSH
7726: LD_INT 114
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: ST_TO_ADDR
7749: GO 8124
7751: LD_INT 18
7753: DOUBLE
7754: EQUAL
7755: IFTRUE 7759
7757: GO 7895
7759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7760: LD_ADDR_VAR 0 1
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 4
7770: PUSH
7771: LD_INT 5
7773: PUSH
7774: LD_INT 7
7776: PUSH
7777: LD_INT 11
7779: PUSH
7780: LD_INT 12
7782: PUSH
7783: LD_INT 15
7785: PUSH
7786: LD_INT 16
7788: PUSH
7789: LD_INT 20
7791: PUSH
7792: LD_INT 21
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 23
7800: PUSH
7801: LD_INT 25
7803: PUSH
7804: LD_INT 26
7806: PUSH
7807: LD_INT 30
7809: PUSH
7810: LD_INT 31
7812: PUSH
7813: LD_INT 32
7815: PUSH
7816: LD_INT 33
7818: PUSH
7819: LD_INT 34
7821: PUSH
7822: LD_INT 35
7824: PUSH
7825: LD_INT 36
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 101
7853: PUSH
7854: LD_INT 102
7856: PUSH
7857: LD_INT 103
7859: PUSH
7860: LD_INT 106
7862: PUSH
7863: LD_INT 108
7865: PUSH
7866: LD_INT 112
7868: PUSH
7869: LD_INT 113
7871: PUSH
7872: LD_INT 114
7874: PUSH
7875: LD_INT 115
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: ST_TO_ADDR
7893: GO 8124
7895: LD_INT 19
7897: DOUBLE
7898: EQUAL
7899: IFTRUE 7903
7901: GO 8123
7903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7904: LD_ADDR_VAR 0 1
7908: PUSH
7909: LD_INT 1
7911: PUSH
7912: LD_INT 2
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 4
7920: PUSH
7921: LD_INT 5
7923: PUSH
7924: LD_INT 6
7926: PUSH
7927: LD_INT 7
7929: PUSH
7930: LD_INT 8
7932: PUSH
7933: LD_INT 9
7935: PUSH
7936: LD_INT 10
7938: PUSH
7939: LD_INT 11
7941: PUSH
7942: LD_INT 12
7944: PUSH
7945: LD_INT 13
7947: PUSH
7948: LD_INT 14
7950: PUSH
7951: LD_INT 15
7953: PUSH
7954: LD_INT 16
7956: PUSH
7957: LD_INT 17
7959: PUSH
7960: LD_INT 18
7962: PUSH
7963: LD_INT 19
7965: PUSH
7966: LD_INT 20
7968: PUSH
7969: LD_INT 21
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_INT 23
7977: PUSH
7978: LD_INT 24
7980: PUSH
7981: LD_INT 25
7983: PUSH
7984: LD_INT 26
7986: PUSH
7987: LD_INT 27
7989: PUSH
7990: LD_INT 28
7992: PUSH
7993: LD_INT 29
7995: PUSH
7996: LD_INT 30
7998: PUSH
7999: LD_INT 31
8001: PUSH
8002: LD_INT 32
8004: PUSH
8005: LD_INT 33
8007: PUSH
8008: LD_INT 34
8010: PUSH
8011: LD_INT 35
8013: PUSH
8014: LD_INT 36
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 101
8057: PUSH
8058: LD_INT 102
8060: PUSH
8061: LD_INT 103
8063: PUSH
8064: LD_INT 104
8066: PUSH
8067: LD_INT 105
8069: PUSH
8070: LD_INT 106
8072: PUSH
8073: LD_INT 107
8075: PUSH
8076: LD_INT 108
8078: PUSH
8079: LD_INT 109
8081: PUSH
8082: LD_INT 110
8084: PUSH
8085: LD_INT 111
8087: PUSH
8088: LD_INT 112
8090: PUSH
8091: LD_INT 113
8093: PUSH
8094: LD_INT 114
8096: PUSH
8097: LD_INT 115
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: ST_TO_ADDR
8121: GO 8124
8123: POP
// end else
8124: GO 8343
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8126: LD_ADDR_VAR 0 1
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: LD_INT 2
8136: PUSH
8137: LD_INT 3
8139: PUSH
8140: LD_INT 4
8142: PUSH
8143: LD_INT 5
8145: PUSH
8146: LD_INT 6
8148: PUSH
8149: LD_INT 7
8151: PUSH
8152: LD_INT 8
8154: PUSH
8155: LD_INT 9
8157: PUSH
8158: LD_INT 10
8160: PUSH
8161: LD_INT 11
8163: PUSH
8164: LD_INT 12
8166: PUSH
8167: LD_INT 13
8169: PUSH
8170: LD_INT 14
8172: PUSH
8173: LD_INT 15
8175: PUSH
8176: LD_INT 16
8178: PUSH
8179: LD_INT 17
8181: PUSH
8182: LD_INT 18
8184: PUSH
8185: LD_INT 19
8187: PUSH
8188: LD_INT 20
8190: PUSH
8191: LD_INT 21
8193: PUSH
8194: LD_INT 22
8196: PUSH
8197: LD_INT 23
8199: PUSH
8200: LD_INT 24
8202: PUSH
8203: LD_INT 25
8205: PUSH
8206: LD_INT 26
8208: PUSH
8209: LD_INT 27
8211: PUSH
8212: LD_INT 28
8214: PUSH
8215: LD_INT 29
8217: PUSH
8218: LD_INT 30
8220: PUSH
8221: LD_INT 31
8223: PUSH
8224: LD_INT 32
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 34
8232: PUSH
8233: LD_INT 35
8235: PUSH
8236: LD_INT 36
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 101
8279: PUSH
8280: LD_INT 102
8282: PUSH
8283: LD_INT 103
8285: PUSH
8286: LD_INT 104
8288: PUSH
8289: LD_INT 105
8291: PUSH
8292: LD_INT 106
8294: PUSH
8295: LD_INT 107
8297: PUSH
8298: LD_INT 108
8300: PUSH
8301: LD_INT 109
8303: PUSH
8304: LD_INT 110
8306: PUSH
8307: LD_INT 111
8309: PUSH
8310: LD_INT 112
8312: PUSH
8313: LD_INT 113
8315: PUSH
8316: LD_INT 114
8318: PUSH
8319: LD_INT 115
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: ST_TO_ADDR
// if result then
8343: LD_VAR 0 1
8347: IFFALSE 8636
// begin normal :=  ;
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_STRING 
8356: ST_TO_ADDR
// hardcore :=  ;
8357: LD_ADDR_VAR 0 4
8361: PUSH
8362: LD_STRING 
8364: ST_TO_ADDR
// for i = 1 to normalCounter do
8365: LD_ADDR_VAR 0 5
8369: PUSH
8370: DOUBLE
8371: LD_INT 1
8373: DEC
8374: ST_TO_ADDR
8375: LD_EXP 22
8379: PUSH
8380: FOR_TO
8381: IFFALSE 8482
// begin tmp := 0 ;
8383: LD_ADDR_VAR 0 2
8387: PUSH
8388: LD_STRING 0
8390: ST_TO_ADDR
// if result [ 1 ] then
8391: LD_VAR 0 1
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: IFFALSE 8464
// if result [ 1 ] [ 1 ] = i then
8401: LD_VAR 0 1
8405: PUSH
8406: LD_INT 1
8408: ARRAY
8409: PUSH
8410: LD_INT 1
8412: ARRAY
8413: PUSH
8414: LD_VAR 0 5
8418: EQUAL
8419: IFFALSE 8464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_INT 1
8433: PPUSH
8434: LD_VAR 0 1
8438: PUSH
8439: LD_INT 1
8441: ARRAY
8442: PPUSH
8443: LD_INT 1
8445: PPUSH
8446: CALL_OW 3
8450: PPUSH
8451: CALL_OW 1
8455: ST_TO_ADDR
// tmp := 1 ;
8456: LD_ADDR_VAR 0 2
8460: PUSH
8461: LD_STRING 1
8463: ST_TO_ADDR
// end ; normal := normal & tmp ;
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: LD_VAR 0 3
8473: PUSH
8474: LD_VAR 0 2
8478: STR
8479: ST_TO_ADDR
// end ;
8480: GO 8380
8482: POP
8483: POP
// for i = 1 to hardcoreCounter do
8484: LD_ADDR_VAR 0 5
8488: PUSH
8489: DOUBLE
8490: LD_INT 1
8492: DEC
8493: ST_TO_ADDR
8494: LD_EXP 23
8498: PUSH
8499: FOR_TO
8500: IFFALSE 8605
// begin tmp := 0 ;
8502: LD_ADDR_VAR 0 2
8506: PUSH
8507: LD_STRING 0
8509: ST_TO_ADDR
// if result [ 2 ] then
8510: LD_VAR 0 1
8514: PUSH
8515: LD_INT 2
8517: ARRAY
8518: IFFALSE 8587
// if result [ 2 ] [ 1 ] = 100 + i then
8520: LD_VAR 0 1
8524: PUSH
8525: LD_INT 2
8527: ARRAY
8528: PUSH
8529: LD_INT 1
8531: ARRAY
8532: PUSH
8533: LD_INT 100
8535: PUSH
8536: LD_VAR 0 5
8540: PLUS
8541: EQUAL
8542: IFFALSE 8587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8544: LD_ADDR_VAR 0 1
8548: PUSH
8549: LD_VAR 0 1
8553: PPUSH
8554: LD_INT 2
8556: PPUSH
8557: LD_VAR 0 1
8561: PUSH
8562: LD_INT 2
8564: ARRAY
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: CALL_OW 3
8573: PPUSH
8574: CALL_OW 1
8578: ST_TO_ADDR
// tmp := 1 ;
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: LD_STRING 1
8586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8587: LD_ADDR_VAR 0 4
8591: PUSH
8592: LD_VAR 0 4
8596: PUSH
8597: LD_VAR 0 2
8601: STR
8602: ST_TO_ADDR
// end ;
8603: GO 8499
8605: POP
8606: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8607: LD_STRING getStreamItemsFromMission("
8609: PUSH
8610: LD_VAR 0 3
8614: STR
8615: PUSH
8616: LD_STRING ","
8618: STR
8619: PUSH
8620: LD_VAR 0 4
8624: STR
8625: PUSH
8626: LD_STRING ")
8628: STR
8629: PPUSH
8630: CALL_OW 559
// end else
8634: GO 8643
// ToLua ( getStreamItemsFromMission("","") ) ;
8636: LD_STRING getStreamItemsFromMission("","")
8638: PPUSH
8639: CALL_OW 559
// end ;
8643: LD_VAR 0 1
8647: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8648: LD_VAR 0 2
8652: PUSH
8653: LD_INT 100
8655: EQUAL
8656: IFFALSE 9605
// begin if not StreamModeActive then
8658: LD_EXP 21
8662: NOT
8663: IFFALSE 8673
// StreamModeActive := true ;
8665: LD_ADDR_EXP 21
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// if p3 = 0 then
8673: LD_VAR 0 3
8677: PUSH
8678: LD_INT 0
8680: EQUAL
8681: IFFALSE 8687
// InitStreamMode ;
8683: CALL 4726 0 0
// if p3 = 1 then
8687: LD_VAR 0 3
8691: PUSH
8692: LD_INT 1
8694: EQUAL
8695: IFFALSE 8705
// sRocket := true ;
8697: LD_ADDR_EXP 26
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// if p3 = 2 then
8705: LD_VAR 0 3
8709: PUSH
8710: LD_INT 2
8712: EQUAL
8713: IFFALSE 8723
// sSpeed := true ;
8715: LD_ADDR_EXP 25
8719: PUSH
8720: LD_INT 1
8722: ST_TO_ADDR
// if p3 = 3 then
8723: LD_VAR 0 3
8727: PUSH
8728: LD_INT 3
8730: EQUAL
8731: IFFALSE 8741
// sEngine := true ;
8733: LD_ADDR_EXP 27
8737: PUSH
8738: LD_INT 1
8740: ST_TO_ADDR
// if p3 = 4 then
8741: LD_VAR 0 3
8745: PUSH
8746: LD_INT 4
8748: EQUAL
8749: IFFALSE 8759
// sSpec := true ;
8751: LD_ADDR_EXP 24
8755: PUSH
8756: LD_INT 1
8758: ST_TO_ADDR
// if p3 = 5 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 5
8766: EQUAL
8767: IFFALSE 8777
// sLevel := true ;
8769: LD_ADDR_EXP 28
8773: PUSH
8774: LD_INT 1
8776: ST_TO_ADDR
// if p3 = 6 then
8777: LD_VAR 0 3
8781: PUSH
8782: LD_INT 6
8784: EQUAL
8785: IFFALSE 8795
// sArmoury := true ;
8787: LD_ADDR_EXP 29
8791: PUSH
8792: LD_INT 1
8794: ST_TO_ADDR
// if p3 = 7 then
8795: LD_VAR 0 3
8799: PUSH
8800: LD_INT 7
8802: EQUAL
8803: IFFALSE 8813
// sRadar := true ;
8805: LD_ADDR_EXP 30
8809: PUSH
8810: LD_INT 1
8812: ST_TO_ADDR
// if p3 = 8 then
8813: LD_VAR 0 3
8817: PUSH
8818: LD_INT 8
8820: EQUAL
8821: IFFALSE 8831
// sBunker := true ;
8823: LD_ADDR_EXP 31
8827: PUSH
8828: LD_INT 1
8830: ST_TO_ADDR
// if p3 = 9 then
8831: LD_VAR 0 3
8835: PUSH
8836: LD_INT 9
8838: EQUAL
8839: IFFALSE 8849
// sHack := true ;
8841: LD_ADDR_EXP 32
8845: PUSH
8846: LD_INT 1
8848: ST_TO_ADDR
// if p3 = 10 then
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 10
8856: EQUAL
8857: IFFALSE 8867
// sFire := true ;
8859: LD_ADDR_EXP 33
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if p3 = 11 then
8867: LD_VAR 0 3
8871: PUSH
8872: LD_INT 11
8874: EQUAL
8875: IFFALSE 8885
// sRefresh := true ;
8877: LD_ADDR_EXP 34
8881: PUSH
8882: LD_INT 1
8884: ST_TO_ADDR
// if p3 = 12 then
8885: LD_VAR 0 3
8889: PUSH
8890: LD_INT 12
8892: EQUAL
8893: IFFALSE 8903
// sExp := true ;
8895: LD_ADDR_EXP 35
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// if p3 = 13 then
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 13
8910: EQUAL
8911: IFFALSE 8921
// sDepot := true ;
8913: LD_ADDR_EXP 36
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if p3 = 14 then
8921: LD_VAR 0 3
8925: PUSH
8926: LD_INT 14
8928: EQUAL
8929: IFFALSE 8939
// sFlag := true ;
8931: LD_ADDR_EXP 37
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// if p3 = 15 then
8939: LD_VAR 0 3
8943: PUSH
8944: LD_INT 15
8946: EQUAL
8947: IFFALSE 8957
// sKamikadze := true ;
8949: LD_ADDR_EXP 45
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// if p3 = 16 then
8957: LD_VAR 0 3
8961: PUSH
8962: LD_INT 16
8964: EQUAL
8965: IFFALSE 8975
// sTroll := true ;
8967: LD_ADDR_EXP 46
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// if p3 = 17 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 17
8982: EQUAL
8983: IFFALSE 8993
// sSlow := true ;
8985: LD_ADDR_EXP 47
8989: PUSH
8990: LD_INT 1
8992: ST_TO_ADDR
// if p3 = 18 then
8993: LD_VAR 0 3
8997: PUSH
8998: LD_INT 18
9000: EQUAL
9001: IFFALSE 9011
// sLack := true ;
9003: LD_ADDR_EXP 48
9007: PUSH
9008: LD_INT 1
9010: ST_TO_ADDR
// if p3 = 19 then
9011: LD_VAR 0 3
9015: PUSH
9016: LD_INT 19
9018: EQUAL
9019: IFFALSE 9029
// sTank := true ;
9021: LD_ADDR_EXP 50
9025: PUSH
9026: LD_INT 1
9028: ST_TO_ADDR
// if p3 = 20 then
9029: LD_VAR 0 3
9033: PUSH
9034: LD_INT 20
9036: EQUAL
9037: IFFALSE 9047
// sRemote := true ;
9039: LD_ADDR_EXP 51
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// if p3 = 21 then
9047: LD_VAR 0 3
9051: PUSH
9052: LD_INT 21
9054: EQUAL
9055: IFFALSE 9065
// sPowell := true ;
9057: LD_ADDR_EXP 52
9061: PUSH
9062: LD_INT 1
9064: ST_TO_ADDR
// if p3 = 22 then
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 22
9072: EQUAL
9073: IFFALSE 9083
// sTeleport := true ;
9075: LD_ADDR_EXP 55
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// if p3 = 23 then
9083: LD_VAR 0 3
9087: PUSH
9088: LD_INT 23
9090: EQUAL
9091: IFFALSE 9101
// sOilTower := true ;
9093: LD_ADDR_EXP 57
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// if p3 = 24 then
9101: LD_VAR 0 3
9105: PUSH
9106: LD_INT 24
9108: EQUAL
9109: IFFALSE 9119
// sShovel := true ;
9111: LD_ADDR_EXP 58
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// if p3 = 25 then
9119: LD_VAR 0 3
9123: PUSH
9124: LD_INT 25
9126: EQUAL
9127: IFFALSE 9137
// sSheik := true ;
9129: LD_ADDR_EXP 59
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// if p3 = 26 then
9137: LD_VAR 0 3
9141: PUSH
9142: LD_INT 26
9144: EQUAL
9145: IFFALSE 9155
// sEarthquake := true ;
9147: LD_ADDR_EXP 61
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// if p3 = 27 then
9155: LD_VAR 0 3
9159: PUSH
9160: LD_INT 27
9162: EQUAL
9163: IFFALSE 9173
// sAI := true ;
9165: LD_ADDR_EXP 62
9169: PUSH
9170: LD_INT 1
9172: ST_TO_ADDR
// if p3 = 28 then
9173: LD_VAR 0 3
9177: PUSH
9178: LD_INT 28
9180: EQUAL
9181: IFFALSE 9191
// sCargo := true ;
9183: LD_ADDR_EXP 65
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// if p3 = 29 then
9191: LD_VAR 0 3
9195: PUSH
9196: LD_INT 29
9198: EQUAL
9199: IFFALSE 9209
// sDLaser := true ;
9201: LD_ADDR_EXP 66
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// if p3 = 30 then
9209: LD_VAR 0 3
9213: PUSH
9214: LD_INT 30
9216: EQUAL
9217: IFFALSE 9227
// sExchange := true ;
9219: LD_ADDR_EXP 67
9223: PUSH
9224: LD_INT 1
9226: ST_TO_ADDR
// if p3 = 31 then
9227: LD_VAR 0 3
9231: PUSH
9232: LD_INT 31
9234: EQUAL
9235: IFFALSE 9245
// sFac := true ;
9237: LD_ADDR_EXP 68
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// if p3 = 32 then
9245: LD_VAR 0 3
9249: PUSH
9250: LD_INT 32
9252: EQUAL
9253: IFFALSE 9263
// sPower := true ;
9255: LD_ADDR_EXP 69
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// if p3 = 33 then
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 33
9270: EQUAL
9271: IFFALSE 9281
// sRandom := true ;
9273: LD_ADDR_EXP 70
9277: PUSH
9278: LD_INT 1
9280: ST_TO_ADDR
// if p3 = 34 then
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 34
9288: EQUAL
9289: IFFALSE 9299
// sShield := true ;
9291: LD_ADDR_EXP 71
9295: PUSH
9296: LD_INT 1
9298: ST_TO_ADDR
// if p3 = 35 then
9299: LD_VAR 0 3
9303: PUSH
9304: LD_INT 35
9306: EQUAL
9307: IFFALSE 9317
// sTime := true ;
9309: LD_ADDR_EXP 72
9313: PUSH
9314: LD_INT 1
9316: ST_TO_ADDR
// if p3 = 36 then
9317: LD_VAR 0 3
9321: PUSH
9322: LD_INT 36
9324: EQUAL
9325: IFFALSE 9335
// sTools := true ;
9327: LD_ADDR_EXP 73
9331: PUSH
9332: LD_INT 1
9334: ST_TO_ADDR
// if p3 = 101 then
9335: LD_VAR 0 3
9339: PUSH
9340: LD_INT 101
9342: EQUAL
9343: IFFALSE 9353
// sSold := true ;
9345: LD_ADDR_EXP 38
9349: PUSH
9350: LD_INT 1
9352: ST_TO_ADDR
// if p3 = 102 then
9353: LD_VAR 0 3
9357: PUSH
9358: LD_INT 102
9360: EQUAL
9361: IFFALSE 9371
// sDiff := true ;
9363: LD_ADDR_EXP 39
9367: PUSH
9368: LD_INT 1
9370: ST_TO_ADDR
// if p3 = 103 then
9371: LD_VAR 0 3
9375: PUSH
9376: LD_INT 103
9378: EQUAL
9379: IFFALSE 9389
// sFog := true ;
9381: LD_ADDR_EXP 42
9385: PUSH
9386: LD_INT 1
9388: ST_TO_ADDR
// if p3 = 104 then
9389: LD_VAR 0 3
9393: PUSH
9394: LD_INT 104
9396: EQUAL
9397: IFFALSE 9407
// sReset := true ;
9399: LD_ADDR_EXP 43
9403: PUSH
9404: LD_INT 1
9406: ST_TO_ADDR
// if p3 = 105 then
9407: LD_VAR 0 3
9411: PUSH
9412: LD_INT 105
9414: EQUAL
9415: IFFALSE 9425
// sSun := true ;
9417: LD_ADDR_EXP 44
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// if p3 = 106 then
9425: LD_VAR 0 3
9429: PUSH
9430: LD_INT 106
9432: EQUAL
9433: IFFALSE 9443
// sTiger := true ;
9435: LD_ADDR_EXP 40
9439: PUSH
9440: LD_INT 1
9442: ST_TO_ADDR
// if p3 = 107 then
9443: LD_VAR 0 3
9447: PUSH
9448: LD_INT 107
9450: EQUAL
9451: IFFALSE 9461
// sBomb := true ;
9453: LD_ADDR_EXP 41
9457: PUSH
9458: LD_INT 1
9460: ST_TO_ADDR
// if p3 = 108 then
9461: LD_VAR 0 3
9465: PUSH
9466: LD_INT 108
9468: EQUAL
9469: IFFALSE 9479
// sWound := true ;
9471: LD_ADDR_EXP 49
9475: PUSH
9476: LD_INT 1
9478: ST_TO_ADDR
// if p3 = 109 then
9479: LD_VAR 0 3
9483: PUSH
9484: LD_INT 109
9486: EQUAL
9487: IFFALSE 9497
// sBetray := true ;
9489: LD_ADDR_EXP 53
9493: PUSH
9494: LD_INT 1
9496: ST_TO_ADDR
// if p3 = 110 then
9497: LD_VAR 0 3
9501: PUSH
9502: LD_INT 110
9504: EQUAL
9505: IFFALSE 9515
// sContamin := true ;
9507: LD_ADDR_EXP 54
9511: PUSH
9512: LD_INT 1
9514: ST_TO_ADDR
// if p3 = 111 then
9515: LD_VAR 0 3
9519: PUSH
9520: LD_INT 111
9522: EQUAL
9523: IFFALSE 9533
// sOil := true ;
9525: LD_ADDR_EXP 56
9529: PUSH
9530: LD_INT 1
9532: ST_TO_ADDR
// if p3 = 112 then
9533: LD_VAR 0 3
9537: PUSH
9538: LD_INT 112
9540: EQUAL
9541: IFFALSE 9551
// sStu := true ;
9543: LD_ADDR_EXP 60
9547: PUSH
9548: LD_INT 1
9550: ST_TO_ADDR
// if p3 = 113 then
9551: LD_VAR 0 3
9555: PUSH
9556: LD_INT 113
9558: EQUAL
9559: IFFALSE 9569
// sBazooka := true ;
9561: LD_ADDR_EXP 63
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
// if p3 = 114 then
9569: LD_VAR 0 3
9573: PUSH
9574: LD_INT 114
9576: EQUAL
9577: IFFALSE 9587
// sMortar := true ;
9579: LD_ADDR_EXP 64
9583: PUSH
9584: LD_INT 1
9586: ST_TO_ADDR
// if p3 = 115 then
9587: LD_VAR 0 3
9591: PUSH
9592: LD_INT 115
9594: EQUAL
9595: IFFALSE 9605
// sRanger := true ;
9597: LD_ADDR_EXP 74
9601: PUSH
9602: LD_INT 1
9604: ST_TO_ADDR
// end ; end ;
9605: PPOPN 6
9607: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9608: LD_EXP 21
9612: PUSH
9613: LD_EXP 26
9617: AND
9618: IFFALSE 9742
9620: GO 9622
9622: DISABLE
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
// begin enable ;
9627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9628: LD_ADDR_VAR 0 2
9632: PUSH
9633: LD_INT 22
9635: PUSH
9636: LD_OWVAR 2
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: LD_INT 34
9650: PUSH
9651: LD_INT 7
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: LD_INT 34
9660: PUSH
9661: LD_INT 45
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 34
9670: PUSH
9671: LD_INT 28
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 34
9680: PUSH
9681: LD_INT 47
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 69
9703: ST_TO_ADDR
// if not tmp then
9704: LD_VAR 0 2
9708: NOT
9709: IFFALSE 9713
// exit ;
9711: GO 9742
// for i in tmp do
9713: LD_ADDR_VAR 0 1
9717: PUSH
9718: LD_VAR 0 2
9722: PUSH
9723: FOR_IN
9724: IFFALSE 9740
// begin SetLives ( i , 0 ) ;
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 0
9733: PPUSH
9734: CALL_OW 234
// end ;
9738: GO 9723
9740: POP
9741: POP
// end ;
9742: PPOPN 2
9744: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9745: LD_EXP 21
9749: PUSH
9750: LD_EXP 27
9754: AND
9755: IFFALSE 9839
9757: GO 9759
9759: DISABLE
9760: LD_INT 0
9762: PPUSH
9763: PPUSH
// begin enable ;
9764: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9765: LD_ADDR_VAR 0 2
9769: PUSH
9770: LD_INT 22
9772: PUSH
9773: LD_OWVAR 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 32
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: ST_TO_ADDR
// if not tmp then
9801: LD_VAR 0 2
9805: NOT
9806: IFFALSE 9810
// exit ;
9808: GO 9839
// for i in tmp do
9810: LD_ADDR_VAR 0 1
9814: PUSH
9815: LD_VAR 0 2
9819: PUSH
9820: FOR_IN
9821: IFFALSE 9837
// begin SetLives ( i , 0 ) ;
9823: LD_VAR 0 1
9827: PPUSH
9828: LD_INT 0
9830: PPUSH
9831: CALL_OW 234
// end ;
9835: GO 9820
9837: POP
9838: POP
// end ;
9839: PPOPN 2
9841: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9842: LD_EXP 21
9846: PUSH
9847: LD_EXP 24
9851: AND
9852: IFFALSE 9945
9854: GO 9856
9856: DISABLE
9857: LD_INT 0
9859: PPUSH
// begin enable ;
9860: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9861: LD_ADDR_VAR 0 1
9865: PUSH
9866: LD_INT 22
9868: PUSH
9869: LD_OWVAR 2
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: LD_INT 25
9883: PUSH
9884: LD_INT 5
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 25
9893: PUSH
9894: LD_INT 9
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 25
9903: PUSH
9904: LD_INT 8
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PPUSH
9921: CALL_OW 69
9925: PUSH
9926: FOR_IN
9927: IFFALSE 9943
// begin SetClass ( i , 1 ) ;
9929: LD_VAR 0 1
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 336
// end ;
9941: GO 9926
9943: POP
9944: POP
// end ;
9945: PPOPN 1
9947: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9948: LD_EXP 21
9952: PUSH
9953: LD_EXP 25
9957: AND
9958: PUSH
9959: LD_OWVAR 65
9963: PUSH
9964: LD_INT 7
9966: LESS
9967: AND
9968: IFFALSE 9982
9970: GO 9972
9972: DISABLE
// begin enable ;
9973: ENABLE
// game_speed := 7 ;
9974: LD_ADDR_OWVAR 65
9978: PUSH
9979: LD_INT 7
9981: ST_TO_ADDR
// end ;
9982: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9983: LD_EXP 21
9987: PUSH
9988: LD_EXP 28
9992: AND
9993: IFFALSE 10195
9995: GO 9997
9997: DISABLE
9998: LD_INT 0
10000: PPUSH
10001: PPUSH
10002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10003: LD_ADDR_VAR 0 3
10007: PUSH
10008: LD_INT 81
10010: PUSH
10011: LD_OWVAR 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 21
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: ST_TO_ADDR
// if not tmp then
10039: LD_VAR 0 3
10043: NOT
10044: IFFALSE 10048
// exit ;
10046: GO 10195
// if tmp > 5 then
10048: LD_VAR 0 3
10052: PUSH
10053: LD_INT 5
10055: GREATER
10056: IFFALSE 10068
// k := 5 else
10058: LD_ADDR_VAR 0 2
10062: PUSH
10063: LD_INT 5
10065: ST_TO_ADDR
10066: GO 10078
// k := tmp ;
10068: LD_ADDR_VAR 0 2
10072: PUSH
10073: LD_VAR 0 3
10077: ST_TO_ADDR
// for i := 1 to k do
10078: LD_ADDR_VAR 0 1
10082: PUSH
10083: DOUBLE
10084: LD_INT 1
10086: DEC
10087: ST_TO_ADDR
10088: LD_VAR 0 2
10092: PUSH
10093: FOR_TO
10094: IFFALSE 10193
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10096: LD_VAR 0 3
10100: PUSH
10101: LD_VAR 0 1
10105: ARRAY
10106: PPUSH
10107: LD_VAR 0 1
10111: PUSH
10112: LD_INT 4
10114: MOD
10115: PUSH
10116: LD_INT 1
10118: PLUS
10119: PPUSH
10120: CALL_OW 259
10124: PUSH
10125: LD_INT 10
10127: LESS
10128: IFFALSE 10191
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10130: LD_VAR 0 3
10134: PUSH
10135: LD_VAR 0 1
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 1
10145: PUSH
10146: LD_INT 4
10148: MOD
10149: PUSH
10150: LD_INT 1
10152: PLUS
10153: PPUSH
10154: LD_VAR 0 3
10158: PUSH
10159: LD_VAR 0 1
10163: ARRAY
10164: PPUSH
10165: LD_VAR 0 1
10169: PUSH
10170: LD_INT 4
10172: MOD
10173: PUSH
10174: LD_INT 1
10176: PLUS
10177: PPUSH
10178: CALL_OW 259
10182: PUSH
10183: LD_INT 1
10185: PLUS
10186: PPUSH
10187: CALL_OW 237
10191: GO 10093
10193: POP
10194: POP
// end ;
10195: PPOPN 3
10197: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10198: LD_EXP 21
10202: PUSH
10203: LD_EXP 29
10207: AND
10208: IFFALSE 10228
10210: GO 10212
10212: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10213: LD_INT 4
10215: PPUSH
10216: LD_OWVAR 2
10220: PPUSH
10221: LD_INT 0
10223: PPUSH
10224: CALL_OW 324
10228: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10229: LD_EXP 21
10233: PUSH
10234: LD_EXP 58
10238: AND
10239: IFFALSE 10259
10241: GO 10243
10243: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10244: LD_INT 19
10246: PPUSH
10247: LD_OWVAR 2
10251: PPUSH
10252: LD_INT 0
10254: PPUSH
10255: CALL_OW 324
10259: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10260: LD_EXP 21
10264: PUSH
10265: LD_EXP 30
10269: AND
10270: IFFALSE 10372
10272: GO 10274
10274: DISABLE
10275: LD_INT 0
10277: PPUSH
10278: PPUSH
// begin enable ;
10279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10280: LD_ADDR_VAR 0 2
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: LD_OWVAR 2
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 2
10299: PUSH
10300: LD_INT 34
10302: PUSH
10303: LD_INT 11
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 34
10312: PUSH
10313: LD_INT 30
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: ST_TO_ADDR
// if not tmp then
10334: LD_VAR 0 2
10338: NOT
10339: IFFALSE 10343
// exit ;
10341: GO 10372
// for i in tmp do
10343: LD_ADDR_VAR 0 1
10347: PUSH
10348: LD_VAR 0 2
10352: PUSH
10353: FOR_IN
10354: IFFALSE 10370
// begin SetLives ( i , 0 ) ;
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_INT 0
10363: PPUSH
10364: CALL_OW 234
// end ;
10368: GO 10353
10370: POP
10371: POP
// end ;
10372: PPOPN 2
10374: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10375: LD_EXP 21
10379: PUSH
10380: LD_EXP 31
10384: AND
10385: IFFALSE 10405
10387: GO 10389
10389: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10390: LD_INT 32
10392: PPUSH
10393: LD_OWVAR 2
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 324
10405: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10406: LD_EXP 21
10410: PUSH
10411: LD_EXP 32
10415: AND
10416: IFFALSE 10597
10418: GO 10420
10420: DISABLE
10421: LD_INT 0
10423: PPUSH
10424: PPUSH
10425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10426: LD_ADDR_VAR 0 2
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_OWVAR 2
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 33
10445: PUSH
10446: LD_INT 3
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: ST_TO_ADDR
// if not tmp then
10462: LD_VAR 0 2
10466: NOT
10467: IFFALSE 10471
// exit ;
10469: GO 10597
// side := 0 ;
10471: LD_ADDR_VAR 0 3
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// for i := 1 to 8 do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 8
10491: PUSH
10492: FOR_TO
10493: IFFALSE 10541
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10495: LD_OWVAR 2
10499: PUSH
10500: LD_VAR 0 1
10504: NONEQUAL
10505: PUSH
10506: LD_OWVAR 2
10510: PPUSH
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 81
10520: PUSH
10521: LD_INT 2
10523: EQUAL
10524: AND
10525: IFFALSE 10539
// begin side := i ;
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: LD_VAR 0 1
10536: ST_TO_ADDR
// break ;
10537: GO 10541
// end ;
10539: GO 10492
10541: POP
10542: POP
// if not side then
10543: LD_VAR 0 3
10547: NOT
10548: IFFALSE 10552
// exit ;
10550: GO 10597
// for i := 1 to tmp do
10552: LD_ADDR_VAR 0 1
10556: PUSH
10557: DOUBLE
10558: LD_INT 1
10560: DEC
10561: ST_TO_ADDR
10562: LD_VAR 0 2
10566: PUSH
10567: FOR_TO
10568: IFFALSE 10595
// if Prob ( 60 ) then
10570: LD_INT 60
10572: PPUSH
10573: CALL_OW 13
10577: IFFALSE 10593
// SetSide ( i , side ) ;
10579: LD_VAR 0 1
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: CALL_OW 235
10593: GO 10567
10595: POP
10596: POP
// end ;
10597: PPOPN 3
10599: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10600: LD_EXP 21
10604: PUSH
10605: LD_EXP 34
10609: AND
10610: IFFALSE 10729
10612: GO 10614
10614: DISABLE
10615: LD_INT 0
10617: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10618: LD_ADDR_VAR 0 1
10622: PUSH
10623: LD_INT 22
10625: PUSH
10626: LD_OWVAR 2
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 21
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: LD_INT 23
10650: PUSH
10651: LD_INT 0
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: PPUSH
10667: CALL_OW 69
10671: PUSH
10672: FOR_IN
10673: IFFALSE 10727
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 257
10684: PUSH
10685: LD_INT 1
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: LD_INT 3
10693: PUSH
10694: LD_INT 4
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: IN
10703: IFFALSE 10725
// SetClass ( un , rand ( 1 , 4 ) ) ;
10705: LD_VAR 0 1
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: LD_INT 4
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 336
10725: GO 10672
10727: POP
10728: POP
// end ;
10729: PPOPN 1
10731: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10732: LD_EXP 21
10736: PUSH
10737: LD_EXP 33
10741: AND
10742: IFFALSE 10821
10744: GO 10746
10746: DISABLE
10747: LD_INT 0
10749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10750: LD_ADDR_VAR 0 1
10754: PUSH
10755: LD_INT 22
10757: PUSH
10758: LD_OWVAR 2
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 21
10769: PUSH
10770: LD_INT 3
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: ST_TO_ADDR
// if not tmp then
10786: LD_VAR 0 1
10790: NOT
10791: IFFALSE 10795
// exit ;
10793: GO 10821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10795: LD_VAR 0 1
10799: PUSH
10800: LD_INT 1
10802: PPUSH
10803: LD_VAR 0 1
10807: PPUSH
10808: CALL_OW 12
10812: ARRAY
10813: PPUSH
10814: LD_INT 100
10816: PPUSH
10817: CALL_OW 234
// end ;
10821: PPOPN 1
10823: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10824: LD_EXP 21
10828: PUSH
10829: LD_EXP 35
10833: AND
10834: IFFALSE 10932
10836: GO 10838
10838: DISABLE
10839: LD_INT 0
10841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10842: LD_ADDR_VAR 0 1
10846: PUSH
10847: LD_INT 22
10849: PUSH
10850: LD_OWVAR 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 69
10877: ST_TO_ADDR
// if not tmp then
10878: LD_VAR 0 1
10882: NOT
10883: IFFALSE 10887
// exit ;
10885: GO 10932
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10887: LD_VAR 0 1
10891: PUSH
10892: LD_INT 1
10894: PPUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 12
10904: ARRAY
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 4
10911: PPUSH
10912: CALL_OW 12
10916: PPUSH
10917: LD_INT 3000
10919: PPUSH
10920: LD_INT 9000
10922: PPUSH
10923: CALL_OW 12
10927: PPUSH
10928: CALL_OW 492
// end ;
10932: PPOPN 1
10934: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10935: LD_EXP 21
10939: PUSH
10940: LD_EXP 36
10944: AND
10945: IFFALSE 10965
10947: GO 10949
10949: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10950: LD_INT 1
10952: PPUSH
10953: LD_OWVAR 2
10957: PPUSH
10958: LD_INT 0
10960: PPUSH
10961: CALL_OW 324
10965: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10966: LD_EXP 21
10970: PUSH
10971: LD_EXP 37
10975: AND
10976: IFFALSE 11059
10978: GO 10980
10980: DISABLE
10981: LD_INT 0
10983: PPUSH
10984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10985: LD_ADDR_VAR 0 2
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_OWVAR 2
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 21
11004: PUSH
11005: LD_INT 3
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PPUSH
11016: CALL_OW 69
11020: ST_TO_ADDR
// if not tmp then
11021: LD_VAR 0 2
11025: NOT
11026: IFFALSE 11030
// exit ;
11028: GO 11059
// for i in tmp do
11030: LD_ADDR_VAR 0 1
11034: PUSH
11035: LD_VAR 0 2
11039: PUSH
11040: FOR_IN
11041: IFFALSE 11057
// SetBLevel ( i , 10 ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_INT 10
11050: PPUSH
11051: CALL_OW 241
11055: GO 11040
11057: POP
11058: POP
// end ;
11059: PPOPN 2
11061: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11062: LD_EXP 21
11066: PUSH
11067: LD_EXP 38
11071: AND
11072: IFFALSE 11183
11074: GO 11076
11076: DISABLE
11077: LD_INT 0
11079: PPUSH
11080: PPUSH
11081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11082: LD_ADDR_VAR 0 3
11086: PUSH
11087: LD_INT 22
11089: PUSH
11090: LD_OWVAR 2
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 25
11101: PUSH
11102: LD_INT 1
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 69
11117: ST_TO_ADDR
// if not tmp then
11118: LD_VAR 0 3
11122: NOT
11123: IFFALSE 11127
// exit ;
11125: GO 11183
// un := tmp [ rand ( 1 , tmp ) ] ;
11127: LD_ADDR_VAR 0 2
11131: PUSH
11132: LD_VAR 0 3
11136: PUSH
11137: LD_INT 1
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: CALL_OW 12
11149: ARRAY
11150: ST_TO_ADDR
// if Crawls ( un ) then
11151: LD_VAR 0 2
11155: PPUSH
11156: CALL_OW 318
11160: IFFALSE 11171
// ComWalk ( un ) ;
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11171: LD_VAR 0 2
11175: PPUSH
11176: LD_INT 5
11178: PPUSH
11179: CALL_OW 336
// end ;
11183: PPOPN 3
11185: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11186: LD_EXP 21
11190: PUSH
11191: LD_EXP 39
11195: AND
11196: PUSH
11197: LD_OWVAR 67
11201: PUSH
11202: LD_INT 3
11204: LESS
11205: AND
11206: IFFALSE 11225
11208: GO 11210
11210: DISABLE
// Difficulty := Difficulty + 1 ;
11211: LD_ADDR_OWVAR 67
11215: PUSH
11216: LD_OWVAR 67
11220: PUSH
11221: LD_INT 1
11223: PLUS
11224: ST_TO_ADDR
11225: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11226: LD_EXP 21
11230: PUSH
11231: LD_EXP 40
11235: AND
11236: IFFALSE 11339
11238: GO 11240
11240: DISABLE
11241: LD_INT 0
11243: PPUSH
// begin for i := 1 to 5 do
11244: LD_ADDR_VAR 0 1
11248: PUSH
11249: DOUBLE
11250: LD_INT 1
11252: DEC
11253: ST_TO_ADDR
11254: LD_INT 5
11256: PUSH
11257: FOR_TO
11258: IFFALSE 11337
// begin uc_nation := nation_nature ;
11260: LD_ADDR_OWVAR 21
11264: PUSH
11265: LD_INT 0
11267: ST_TO_ADDR
// uc_side := 0 ;
11268: LD_ADDR_OWVAR 20
11272: PUSH
11273: LD_INT 0
11275: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11276: LD_ADDR_OWVAR 29
11280: PUSH
11281: LD_INT 12
11283: PUSH
11284: LD_INT 12
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: ST_TO_ADDR
// hc_agressivity := 20 ;
11291: LD_ADDR_OWVAR 35
11295: PUSH
11296: LD_INT 20
11298: ST_TO_ADDR
// hc_class := class_tiger ;
11299: LD_ADDR_OWVAR 28
11303: PUSH
11304: LD_INT 14
11306: ST_TO_ADDR
// hc_gallery :=  ;
11307: LD_ADDR_OWVAR 33
11311: PUSH
11312: LD_STRING 
11314: ST_TO_ADDR
// hc_name :=  ;
11315: LD_ADDR_OWVAR 26
11319: PUSH
11320: LD_STRING 
11322: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11323: CALL_OW 44
11327: PPUSH
11328: LD_INT 0
11330: PPUSH
11331: CALL_OW 51
// end ;
11335: GO 11257
11337: POP
11338: POP
// end ;
11339: PPOPN 1
11341: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11342: LD_EXP 21
11346: PUSH
11347: LD_EXP 41
11351: AND
11352: IFFALSE 11361
11354: GO 11356
11356: DISABLE
// StreamSibBomb ;
11357: CALL 11362 0 0
11361: END
// export function StreamSibBomb ; var i , x , y ; begin
11362: LD_INT 0
11364: PPUSH
11365: PPUSH
11366: PPUSH
11367: PPUSH
// result := false ;
11368: LD_ADDR_VAR 0 1
11372: PUSH
11373: LD_INT 0
11375: ST_TO_ADDR
// for i := 1 to 16 do
11376: LD_ADDR_VAR 0 2
11380: PUSH
11381: DOUBLE
11382: LD_INT 1
11384: DEC
11385: ST_TO_ADDR
11386: LD_INT 16
11388: PUSH
11389: FOR_TO
11390: IFFALSE 11589
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11392: LD_ADDR_VAR 0 3
11396: PUSH
11397: LD_INT 10
11399: PUSH
11400: LD_INT 20
11402: PUSH
11403: LD_INT 30
11405: PUSH
11406: LD_INT 40
11408: PUSH
11409: LD_INT 50
11411: PUSH
11412: LD_INT 60
11414: PUSH
11415: LD_INT 70
11417: PUSH
11418: LD_INT 80
11420: PUSH
11421: LD_INT 90
11423: PUSH
11424: LD_INT 100
11426: PUSH
11427: LD_INT 110
11429: PUSH
11430: LD_INT 120
11432: PUSH
11433: LD_INT 130
11435: PUSH
11436: LD_INT 140
11438: PUSH
11439: LD_INT 150
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 1
11461: PPUSH
11462: LD_INT 15
11464: PPUSH
11465: CALL_OW 12
11469: ARRAY
11470: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11471: LD_ADDR_VAR 0 4
11475: PUSH
11476: LD_INT 10
11478: PUSH
11479: LD_INT 20
11481: PUSH
11482: LD_INT 30
11484: PUSH
11485: LD_INT 40
11487: PUSH
11488: LD_INT 50
11490: PUSH
11491: LD_INT 60
11493: PUSH
11494: LD_INT 70
11496: PUSH
11497: LD_INT 80
11499: PUSH
11500: LD_INT 90
11502: PUSH
11503: LD_INT 100
11505: PUSH
11506: LD_INT 110
11508: PUSH
11509: LD_INT 120
11511: PUSH
11512: LD_INT 130
11514: PUSH
11515: LD_INT 140
11517: PUSH
11518: LD_INT 150
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_INT 15
11543: PPUSH
11544: CALL_OW 12
11548: ARRAY
11549: ST_TO_ADDR
// if ValidHex ( x , y ) then
11550: LD_VAR 0 3
11554: PPUSH
11555: LD_VAR 0 4
11559: PPUSH
11560: CALL_OW 488
11564: IFFALSE 11587
// begin result := [ x , y ] ;
11566: LD_ADDR_VAR 0 1
11570: PUSH
11571: LD_VAR 0 3
11575: PUSH
11576: LD_VAR 0 4
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: ST_TO_ADDR
// break ;
11585: GO 11589
// end ; end ;
11587: GO 11389
11589: POP
11590: POP
// if result then
11591: LD_VAR 0 1
11595: IFFALSE 11655
// begin ToLua ( playSibBomb() ) ;
11597: LD_STRING playSibBomb()
11599: PPUSH
11600: CALL_OW 559
// wait ( 0 0$14 ) ;
11604: LD_INT 490
11606: PPUSH
11607: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11611: LD_VAR 0 1
11615: PUSH
11616: LD_INT 1
11618: ARRAY
11619: PPUSH
11620: LD_VAR 0 1
11624: PUSH
11625: LD_INT 2
11627: ARRAY
11628: PPUSH
11629: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11633: LD_VAR 0 1
11637: PUSH
11638: LD_INT 1
11640: ARRAY
11641: PPUSH
11642: LD_VAR 0 1
11646: PUSH
11647: LD_INT 2
11649: ARRAY
11650: PPUSH
11651: CALL_OW 429
// end ; end ;
11655: LD_VAR 0 1
11659: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11660: LD_EXP 21
11664: PUSH
11665: LD_EXP 43
11669: AND
11670: IFFALSE 11682
11672: GO 11674
11674: DISABLE
// YouLost (  ) ;
11675: LD_STRING 
11677: PPUSH
11678: CALL_OW 104
11682: END
// every 0 0$1 trigger StreamModeActive and sFog do
11683: LD_EXP 21
11687: PUSH
11688: LD_EXP 42
11692: AND
11693: IFFALSE 11707
11695: GO 11697
11697: DISABLE
// FogOff ( your_side ) ;
11698: LD_OWVAR 2
11702: PPUSH
11703: CALL_OW 344
11707: END
// every 0 0$1 trigger StreamModeActive and sSun do
11708: LD_EXP 21
11712: PUSH
11713: LD_EXP 44
11717: AND
11718: IFFALSE 11746
11720: GO 11722
11722: DISABLE
// begin solar_recharge_percent := 0 ;
11723: LD_ADDR_OWVAR 79
11727: PUSH
11728: LD_INT 0
11730: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11731: LD_INT 10500
11733: PPUSH
11734: CALL_OW 67
// solar_recharge_percent := 100 ;
11738: LD_ADDR_OWVAR 79
11742: PUSH
11743: LD_INT 100
11745: ST_TO_ADDR
// end ;
11746: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11747: LD_EXP 21
11751: PUSH
11752: LD_EXP 45
11756: AND
11757: IFFALSE 11996
11759: GO 11761
11761: DISABLE
11762: LD_INT 0
11764: PPUSH
11765: PPUSH
11766: PPUSH
// begin tmp := [ ] ;
11767: LD_ADDR_VAR 0 3
11771: PUSH
11772: EMPTY
11773: ST_TO_ADDR
// for i := 1 to 6 do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: DOUBLE
11780: LD_INT 1
11782: DEC
11783: ST_TO_ADDR
11784: LD_INT 6
11786: PUSH
11787: FOR_TO
11788: IFFALSE 11893
// begin uc_nation := nation_nature ;
11790: LD_ADDR_OWVAR 21
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// uc_side := 0 ;
11798: LD_ADDR_OWVAR 20
11802: PUSH
11803: LD_INT 0
11805: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11806: LD_ADDR_OWVAR 29
11810: PUSH
11811: LD_INT 12
11813: PUSH
11814: LD_INT 12
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: ST_TO_ADDR
// hc_agressivity := 20 ;
11821: LD_ADDR_OWVAR 35
11825: PUSH
11826: LD_INT 20
11828: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11829: LD_ADDR_OWVAR 28
11833: PUSH
11834: LD_INT 17
11836: ST_TO_ADDR
// hc_gallery :=  ;
11837: LD_ADDR_OWVAR 33
11841: PUSH
11842: LD_STRING 
11844: ST_TO_ADDR
// hc_name :=  ;
11845: LD_ADDR_OWVAR 26
11849: PUSH
11850: LD_STRING 
11852: ST_TO_ADDR
// un := CreateHuman ;
11853: LD_ADDR_VAR 0 2
11857: PUSH
11858: CALL_OW 44
11862: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11863: LD_VAR 0 2
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 51
// tmp := tmp ^ un ;
11875: LD_ADDR_VAR 0 3
11879: PUSH
11880: LD_VAR 0 3
11884: PUSH
11885: LD_VAR 0 2
11889: ADD
11890: ST_TO_ADDR
// end ;
11891: GO 11787
11893: POP
11894: POP
// repeat wait ( 0 0$1 ) ;
11895: LD_INT 35
11897: PPUSH
11898: CALL_OW 67
// for un in tmp do
11902: LD_ADDR_VAR 0 2
11906: PUSH
11907: LD_VAR 0 3
11911: PUSH
11912: FOR_IN
11913: IFFALSE 11987
// begin if IsDead ( un ) then
11915: LD_VAR 0 2
11919: PPUSH
11920: CALL_OW 301
11924: IFFALSE 11944
// begin tmp := tmp diff un ;
11926: LD_ADDR_VAR 0 3
11930: PUSH
11931: LD_VAR 0 3
11935: PUSH
11936: LD_VAR 0 2
11940: DIFF
11941: ST_TO_ADDR
// continue ;
11942: GO 11912
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11944: LD_VAR 0 2
11948: PPUSH
11949: LD_INT 3
11951: PUSH
11952: LD_INT 22
11954: PUSH
11955: LD_INT 0
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 69
11970: PPUSH
11971: LD_VAR 0 2
11975: PPUSH
11976: CALL_OW 74
11980: PPUSH
11981: CALL_OW 115
// end ;
11985: GO 11912
11987: POP
11988: POP
// until not tmp ;
11989: LD_VAR 0 3
11993: NOT
11994: IFFALSE 11895
// end ;
11996: PPOPN 3
11998: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11999: LD_EXP 21
12003: PUSH
12004: LD_EXP 46
12008: AND
12009: IFFALSE 12063
12011: GO 12013
12013: DISABLE
// begin ToLua ( displayTroll(); ) ;
12014: LD_STRING displayTroll();
12016: PPUSH
12017: CALL_OW 559
// wait ( 3 3$00 ) ;
12021: LD_INT 6300
12023: PPUSH
12024: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12028: LD_STRING hideTroll();
12030: PPUSH
12031: CALL_OW 559
// wait ( 1 1$00 ) ;
12035: LD_INT 2100
12037: PPUSH
12038: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12042: LD_STRING displayTroll();
12044: PPUSH
12045: CALL_OW 559
// wait ( 1 1$00 ) ;
12049: LD_INT 2100
12051: PPUSH
12052: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12056: LD_STRING hideTroll();
12058: PPUSH
12059: CALL_OW 559
// end ;
12063: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12064: LD_EXP 21
12068: PUSH
12069: LD_EXP 47
12073: AND
12074: IFFALSE 12137
12076: GO 12078
12078: DISABLE
12079: LD_INT 0
12081: PPUSH
// begin p := 0 ;
12082: LD_ADDR_VAR 0 1
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// repeat game_speed := 1 ;
12090: LD_ADDR_OWVAR 65
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12098: LD_INT 35
12100: PPUSH
12101: CALL_OW 67
// p := p + 1 ;
12105: LD_ADDR_VAR 0 1
12109: PUSH
12110: LD_VAR 0 1
12114: PUSH
12115: LD_INT 1
12117: PLUS
12118: ST_TO_ADDR
// until p >= 60 ;
12119: LD_VAR 0 1
12123: PUSH
12124: LD_INT 60
12126: GREATEREQUAL
12127: IFFALSE 12090
// game_speed := 4 ;
12129: LD_ADDR_OWVAR 65
12133: PUSH
12134: LD_INT 4
12136: ST_TO_ADDR
// end ;
12137: PPOPN 1
12139: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12140: LD_EXP 21
12144: PUSH
12145: LD_EXP 48
12149: AND
12150: IFFALSE 12296
12152: GO 12154
12154: DISABLE
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_INT 22
12166: PUSH
12167: LD_OWVAR 2
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 2
12178: PUSH
12179: LD_INT 30
12181: PUSH
12182: LD_INT 0
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PPUSH
12208: CALL_OW 69
12212: ST_TO_ADDR
// if not depot then
12213: LD_VAR 0 1
12217: NOT
12218: IFFALSE 12222
// exit ;
12220: GO 12296
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12222: LD_ADDR_VAR 0 2
12226: PUSH
12227: LD_VAR 0 1
12231: PUSH
12232: LD_INT 1
12234: PPUSH
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 12
12244: ARRAY
12245: PPUSH
12246: CALL_OW 274
12250: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12251: LD_VAR 0 2
12255: PPUSH
12256: LD_INT 1
12258: PPUSH
12259: LD_INT 0
12261: PPUSH
12262: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12266: LD_VAR 0 2
12270: PPUSH
12271: LD_INT 2
12273: PPUSH
12274: LD_INT 0
12276: PPUSH
12277: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12281: LD_VAR 0 2
12285: PPUSH
12286: LD_INT 3
12288: PPUSH
12289: LD_INT 0
12291: PPUSH
12292: CALL_OW 277
// end ;
12296: PPOPN 2
12298: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12299: LD_EXP 21
12303: PUSH
12304: LD_EXP 49
12308: AND
12309: IFFALSE 12406
12311: GO 12313
12313: DISABLE
12314: LD_INT 0
12316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12317: LD_ADDR_VAR 0 1
12321: PUSH
12322: LD_INT 22
12324: PUSH
12325: LD_OWVAR 2
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 21
12336: PUSH
12337: LD_INT 1
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 23
12349: PUSH
12350: LD_INT 0
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: PPUSH
12366: CALL_OW 69
12370: ST_TO_ADDR
// if not tmp then
12371: LD_VAR 0 1
12375: NOT
12376: IFFALSE 12380
// exit ;
12378: GO 12406
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12380: LD_VAR 0 1
12384: PUSH
12385: LD_INT 1
12387: PPUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 12
12397: ARRAY
12398: PPUSH
12399: LD_INT 200
12401: PPUSH
12402: CALL_OW 234
// end ;
12406: PPOPN 1
12408: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12409: LD_EXP 21
12413: PUSH
12414: LD_EXP 50
12418: AND
12419: IFFALSE 12498
12421: GO 12423
12423: DISABLE
12424: LD_INT 0
12426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12427: LD_ADDR_VAR 0 1
12431: PUSH
12432: LD_INT 22
12434: PUSH
12435: LD_OWVAR 2
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 21
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 69
12462: ST_TO_ADDR
// if not tmp then
12463: LD_VAR 0 1
12467: NOT
12468: IFFALSE 12472
// exit ;
12470: GO 12498
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12472: LD_VAR 0 1
12476: PUSH
12477: LD_INT 1
12479: PPUSH
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 12
12489: ARRAY
12490: PPUSH
12491: LD_INT 60
12493: PPUSH
12494: CALL_OW 234
// end ;
12498: PPOPN 1
12500: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12501: LD_EXP 21
12505: PUSH
12506: LD_EXP 51
12510: AND
12511: IFFALSE 12610
12513: GO 12515
12515: DISABLE
12516: LD_INT 0
12518: PPUSH
12519: PPUSH
// begin enable ;
12520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12521: LD_ADDR_VAR 0 1
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_OWVAR 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 61
12540: PUSH
12541: EMPTY
12542: LIST
12543: PUSH
12544: LD_INT 33
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: ST_TO_ADDR
// if not tmp then
12564: LD_VAR 0 1
12568: NOT
12569: IFFALSE 12573
// exit ;
12571: GO 12610
// for i in tmp do
12573: LD_ADDR_VAR 0 2
12577: PUSH
12578: LD_VAR 0 1
12582: PUSH
12583: FOR_IN
12584: IFFALSE 12608
// if IsControledBy ( i ) then
12586: LD_VAR 0 2
12590: PPUSH
12591: CALL_OW 312
12595: IFFALSE 12606
// ComUnlink ( i ) ;
12597: LD_VAR 0 2
12601: PPUSH
12602: CALL_OW 136
12606: GO 12583
12608: POP
12609: POP
// end ;
12610: PPOPN 2
12612: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12613: LD_EXP 21
12617: PUSH
12618: LD_EXP 52
12622: AND
12623: IFFALSE 12763
12625: GO 12627
12627: DISABLE
12628: LD_INT 0
12630: PPUSH
12631: PPUSH
// begin ToLua ( displayPowell(); ) ;
12632: LD_STRING displayPowell();
12634: PPUSH
12635: CALL_OW 559
// uc_side := 0 ;
12639: LD_ADDR_OWVAR 20
12643: PUSH
12644: LD_INT 0
12646: ST_TO_ADDR
// uc_nation := 2 ;
12647: LD_ADDR_OWVAR 21
12651: PUSH
12652: LD_INT 2
12654: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12655: LD_ADDR_OWVAR 37
12659: PUSH
12660: LD_INT 14
12662: ST_TO_ADDR
// vc_engine := engine_siberite ;
12663: LD_ADDR_OWVAR 39
12667: PUSH
12668: LD_INT 3
12670: ST_TO_ADDR
// vc_control := control_apeman ;
12671: LD_ADDR_OWVAR 38
12675: PUSH
12676: LD_INT 5
12678: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12679: LD_ADDR_OWVAR 40
12683: PUSH
12684: LD_INT 29
12686: ST_TO_ADDR
// un := CreateVehicle ;
12687: LD_ADDR_VAR 0 2
12691: PUSH
12692: CALL_OW 45
12696: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12697: LD_VAR 0 2
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12709: LD_INT 35
12711: PPUSH
12712: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12716: LD_VAR 0 2
12720: PPUSH
12721: LD_INT 22
12723: PUSH
12724: LD_OWVAR 2
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: PPUSH
12738: LD_VAR 0 2
12742: PPUSH
12743: CALL_OW 74
12747: PPUSH
12748: CALL_OW 115
// until IsDead ( un ) ;
12752: LD_VAR 0 2
12756: PPUSH
12757: CALL_OW 301
12761: IFFALSE 12709
// end ;
12763: PPOPN 2
12765: END
// every 0 0$1 trigger StreamModeActive and sStu do
12766: LD_EXP 21
12770: PUSH
12771: LD_EXP 60
12775: AND
12776: IFFALSE 12792
12778: GO 12780
12780: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12781: LD_STRING displayStucuk();
12783: PPUSH
12784: CALL_OW 559
// ResetFog ;
12788: CALL_OW 335
// end ;
12792: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12793: LD_EXP 21
12797: PUSH
12798: LD_EXP 53
12802: AND
12803: IFFALSE 12944
12805: GO 12807
12807: DISABLE
12808: LD_INT 0
12810: PPUSH
12811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12812: LD_ADDR_VAR 0 2
12816: PUSH
12817: LD_INT 22
12819: PUSH
12820: LD_OWVAR 2
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PPUSH
12843: CALL_OW 69
12847: ST_TO_ADDR
// if not tmp then
12848: LD_VAR 0 2
12852: NOT
12853: IFFALSE 12857
// exit ;
12855: GO 12944
// un := tmp [ rand ( 1 , tmp ) ] ;
12857: LD_ADDR_VAR 0 1
12861: PUSH
12862: LD_VAR 0 2
12866: PUSH
12867: LD_INT 1
12869: PPUSH
12870: LD_VAR 0 2
12874: PPUSH
12875: CALL_OW 12
12879: ARRAY
12880: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12881: LD_VAR 0 1
12885: PPUSH
12886: LD_INT 0
12888: PPUSH
12889: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12893: LD_VAR 0 1
12897: PPUSH
12898: LD_OWVAR 3
12902: PUSH
12903: LD_VAR 0 1
12907: DIFF
12908: PPUSH
12909: LD_VAR 0 1
12913: PPUSH
12914: CALL_OW 74
12918: PPUSH
12919: CALL_OW 115
// wait ( 0 0$20 ) ;
12923: LD_INT 700
12925: PPUSH
12926: CALL_OW 67
// SetSide ( un , your_side ) ;
12930: LD_VAR 0 1
12934: PPUSH
12935: LD_OWVAR 2
12939: PPUSH
12940: CALL_OW 235
// end ;
12944: PPOPN 2
12946: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12947: LD_EXP 21
12951: PUSH
12952: LD_EXP 54
12956: AND
12957: IFFALSE 13063
12959: GO 12961
12961: DISABLE
12962: LD_INT 0
12964: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_INT 22
12972: PUSH
12973: LD_OWVAR 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 2
12984: PUSH
12985: LD_INT 30
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 30
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if not depot then
13019: LD_VAR 0 1
13023: NOT
13024: IFFALSE 13028
// exit ;
13026: GO 13063
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13028: LD_VAR 0 1
13032: PUSH
13033: LD_INT 1
13035: ARRAY
13036: PPUSH
13037: CALL_OW 250
13041: PPUSH
13042: LD_VAR 0 1
13046: PUSH
13047: LD_INT 1
13049: ARRAY
13050: PPUSH
13051: CALL_OW 251
13055: PPUSH
13056: LD_INT 70
13058: PPUSH
13059: CALL_OW 495
// end ;
13063: PPOPN 1
13065: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13066: LD_EXP 21
13070: PUSH
13071: LD_EXP 55
13075: AND
13076: IFFALSE 13287
13078: GO 13080
13080: DISABLE
13081: LD_INT 0
13083: PPUSH
13084: PPUSH
13085: PPUSH
13086: PPUSH
13087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13088: LD_ADDR_VAR 0 5
13092: PUSH
13093: LD_INT 22
13095: PUSH
13096: LD_OWVAR 2
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 21
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: ST_TO_ADDR
// if not tmp then
13124: LD_VAR 0 5
13128: NOT
13129: IFFALSE 13133
// exit ;
13131: GO 13287
// for i in tmp do
13133: LD_ADDR_VAR 0 1
13137: PUSH
13138: LD_VAR 0 5
13142: PUSH
13143: FOR_IN
13144: IFFALSE 13285
// begin d := rand ( 0 , 5 ) ;
13146: LD_ADDR_VAR 0 4
13150: PUSH
13151: LD_INT 0
13153: PPUSH
13154: LD_INT 5
13156: PPUSH
13157: CALL_OW 12
13161: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13162: LD_ADDR_VAR 0 2
13166: PUSH
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL_OW 250
13176: PPUSH
13177: LD_VAR 0 4
13181: PPUSH
13182: LD_INT 3
13184: PPUSH
13185: LD_INT 12
13187: PPUSH
13188: CALL_OW 12
13192: PPUSH
13193: CALL_OW 272
13197: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 1
13207: PPUSH
13208: CALL_OW 251
13212: PPUSH
13213: LD_VAR 0 4
13217: PPUSH
13218: LD_INT 3
13220: PPUSH
13221: LD_INT 12
13223: PPUSH
13224: CALL_OW 12
13228: PPUSH
13229: CALL_OW 273
13233: ST_TO_ADDR
// if ValidHex ( x , y ) then
13234: LD_VAR 0 2
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: CALL_OW 488
13248: IFFALSE 13283
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13250: LD_VAR 0 1
13254: PPUSH
13255: LD_VAR 0 2
13259: PPUSH
13260: LD_VAR 0 3
13264: PPUSH
13265: LD_INT 3
13267: PPUSH
13268: LD_INT 6
13270: PPUSH
13271: CALL_OW 12
13275: PPUSH
13276: LD_INT 1
13278: PPUSH
13279: CALL_OW 483
// end ;
13283: GO 13143
13285: POP
13286: POP
// end ;
13287: PPOPN 5
13289: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13290: LD_EXP 21
13294: PUSH
13295: LD_EXP 56
13299: AND
13300: IFFALSE 13394
13302: GO 13304
13304: DISABLE
13305: LD_INT 0
13307: PPUSH
13308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13309: LD_ADDR_VAR 0 2
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_OWVAR 2
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 32
13328: PUSH
13329: LD_INT 1
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 21
13338: PUSH
13339: LD_INT 2
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: PPUSH
13351: CALL_OW 69
13355: ST_TO_ADDR
// if not tmp then
13356: LD_VAR 0 2
13360: NOT
13361: IFFALSE 13365
// exit ;
13363: GO 13394
// for i in tmp do
13365: LD_ADDR_VAR 0 1
13369: PUSH
13370: LD_VAR 0 2
13374: PUSH
13375: FOR_IN
13376: IFFALSE 13392
// SetFuel ( i , 0 ) ;
13378: LD_VAR 0 1
13382: PPUSH
13383: LD_INT 0
13385: PPUSH
13386: CALL_OW 240
13390: GO 13375
13392: POP
13393: POP
// end ;
13394: PPOPN 2
13396: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13397: LD_EXP 21
13401: PUSH
13402: LD_EXP 57
13406: AND
13407: IFFALSE 13473
13409: GO 13411
13411: DISABLE
13412: LD_INT 0
13414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13415: LD_ADDR_VAR 0 1
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_OWVAR 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 30
13434: PUSH
13435: LD_INT 29
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PPUSH
13446: CALL_OW 69
13450: ST_TO_ADDR
// if not tmp then
13451: LD_VAR 0 1
13455: NOT
13456: IFFALSE 13460
// exit ;
13458: GO 13473
// DestroyUnit ( tmp [ 1 ] ) ;
13460: LD_VAR 0 1
13464: PUSH
13465: LD_INT 1
13467: ARRAY
13468: PPUSH
13469: CALL_OW 65
// end ;
13473: PPOPN 1
13475: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13476: LD_EXP 21
13480: PUSH
13481: LD_EXP 59
13485: AND
13486: IFFALSE 13615
13488: GO 13490
13490: DISABLE
13491: LD_INT 0
13493: PPUSH
// begin uc_side := 0 ;
13494: LD_ADDR_OWVAR 20
13498: PUSH
13499: LD_INT 0
13501: ST_TO_ADDR
// uc_nation := nation_arabian ;
13502: LD_ADDR_OWVAR 21
13506: PUSH
13507: LD_INT 2
13509: ST_TO_ADDR
// hc_gallery :=  ;
13510: LD_ADDR_OWVAR 33
13514: PUSH
13515: LD_STRING 
13517: ST_TO_ADDR
// hc_name :=  ;
13518: LD_ADDR_OWVAR 26
13522: PUSH
13523: LD_STRING 
13525: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13526: LD_INT 1
13528: PPUSH
13529: LD_INT 11
13531: PPUSH
13532: LD_INT 10
13534: PPUSH
13535: CALL_OW 380
// un := CreateHuman ;
13539: LD_ADDR_VAR 0 1
13543: PUSH
13544: CALL_OW 44
13548: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13549: LD_VAR 0 1
13553: PPUSH
13554: LD_INT 1
13556: PPUSH
13557: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13561: LD_INT 35
13563: PPUSH
13564: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13568: LD_VAR 0 1
13572: PPUSH
13573: LD_INT 22
13575: PUSH
13576: LD_OWVAR 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PPUSH
13585: CALL_OW 69
13589: PPUSH
13590: LD_VAR 0 1
13594: PPUSH
13595: CALL_OW 74
13599: PPUSH
13600: CALL_OW 115
// until IsDead ( un ) ;
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 301
13613: IFFALSE 13561
// end ;
13615: PPOPN 1
13617: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13618: LD_EXP 21
13622: PUSH
13623: LD_EXP 61
13627: AND
13628: IFFALSE 13640
13630: GO 13632
13632: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13633: LD_STRING earthquake(getX(game), 0, 32)
13635: PPUSH
13636: CALL_OW 559
13640: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13641: LD_EXP 21
13645: PUSH
13646: LD_EXP 62
13650: AND
13651: IFFALSE 13742
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin enable ;
13659: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_OWVAR 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 21
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 33
13689: PUSH
13690: LD_INT 3
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: ST_TO_ADDR
// if not tmp then
13707: LD_VAR 0 1
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 13742
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 1
13723: PPUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 12
13733: ARRAY
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 234
// end ;
13742: PPOPN 1
13744: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13745: LD_EXP 21
13749: PUSH
13750: LD_EXP 63
13754: AND
13755: IFFALSE 13896
13757: GO 13759
13759: DISABLE
13760: LD_INT 0
13762: PPUSH
13763: PPUSH
13764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13765: LD_ADDR_VAR 0 3
13769: PUSH
13770: LD_INT 22
13772: PUSH
13773: LD_OWVAR 2
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: LD_INT 25
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PPUSH
13796: CALL_OW 69
13800: ST_TO_ADDR
// if not tmp then
13801: LD_VAR 0 3
13805: NOT
13806: IFFALSE 13810
// exit ;
13808: GO 13896
// un := tmp [ rand ( 1 , tmp ) ] ;
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_VAR 0 3
13827: PPUSH
13828: CALL_OW 12
13832: ARRAY
13833: ST_TO_ADDR
// if Crawls ( un ) then
13834: LD_VAR 0 2
13838: PPUSH
13839: CALL_OW 318
13843: IFFALSE 13854
// ComWalk ( un ) ;
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13854: LD_VAR 0 2
13858: PPUSH
13859: LD_INT 9
13861: PPUSH
13862: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13866: LD_INT 28
13868: PPUSH
13869: LD_OWVAR 2
13873: PPUSH
13874: LD_INT 2
13876: PPUSH
13877: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13881: LD_INT 29
13883: PPUSH
13884: LD_OWVAR 2
13888: PPUSH
13889: LD_INT 2
13891: PPUSH
13892: CALL_OW 322
// end ;
13896: PPOPN 3
13898: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13899: LD_EXP 21
13903: PUSH
13904: LD_EXP 64
13908: AND
13909: IFFALSE 14020
13911: GO 13913
13913: DISABLE
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
13918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13919: LD_ADDR_VAR 0 3
13923: PUSH
13924: LD_INT 22
13926: PUSH
13927: LD_OWVAR 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 25
13938: PUSH
13939: LD_INT 1
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PPUSH
13950: CALL_OW 69
13954: ST_TO_ADDR
// if not tmp then
13955: LD_VAR 0 3
13959: NOT
13960: IFFALSE 13964
// exit ;
13962: GO 14020
// un := tmp [ rand ( 1 , tmp ) ] ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_VAR 0 3
13973: PUSH
13974: LD_INT 1
13976: PPUSH
13977: LD_VAR 0 3
13981: PPUSH
13982: CALL_OW 12
13986: ARRAY
13987: ST_TO_ADDR
// if Crawls ( un ) then
13988: LD_VAR 0 2
13992: PPUSH
13993: CALL_OW 318
13997: IFFALSE 14008
// ComWalk ( un ) ;
13999: LD_VAR 0 2
14003: PPUSH
14004: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14008: LD_VAR 0 2
14012: PPUSH
14013: LD_INT 8
14015: PPUSH
14016: CALL_OW 336
// end ;
14020: PPOPN 3
14022: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14023: LD_EXP 21
14027: PUSH
14028: LD_EXP 65
14032: AND
14033: IFFALSE 14177
14035: GO 14037
14037: DISABLE
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_OWVAR 2
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 21
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: LD_INT 2
14071: PUSH
14072: LD_INT 34
14074: PUSH
14075: LD_INT 12
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 34
14084: PUSH
14085: LD_INT 51
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 34
14094: PUSH
14095: LD_INT 32
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: ST_TO_ADDR
// if not tmp then
14118: LD_VAR 0 2
14122: NOT
14123: IFFALSE 14127
// exit ;
14125: GO 14177
// for i in tmp do
14127: LD_ADDR_VAR 0 1
14131: PUSH
14132: LD_VAR 0 2
14136: PUSH
14137: FOR_IN
14138: IFFALSE 14175
// if GetCargo ( i , mat_artifact ) = 0 then
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_INT 4
14147: PPUSH
14148: CALL_OW 289
14152: PUSH
14153: LD_INT 0
14155: EQUAL
14156: IFFALSE 14173
// SetCargo ( i , mat_siberit , 100 ) ;
14158: LD_VAR 0 1
14162: PPUSH
14163: LD_INT 3
14165: PPUSH
14166: LD_INT 100
14168: PPUSH
14169: CALL_OW 290
14173: GO 14137
14175: POP
14176: POP
// end ;
14177: PPOPN 2
14179: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14180: LD_EXP 21
14184: PUSH
14185: LD_EXP 66
14189: AND
14190: IFFALSE 14373
14192: GO 14194
14194: DISABLE
14195: LD_INT 0
14197: PPUSH
14198: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: LD_INT 22
14206: PUSH
14207: LD_OWVAR 2
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PPUSH
14216: CALL_OW 69
14220: ST_TO_ADDR
// if not tmp then
14221: LD_VAR 0 2
14225: NOT
14226: IFFALSE 14230
// exit ;
14228: GO 14373
// for i := 1 to 2 do
14230: LD_ADDR_VAR 0 1
14234: PUSH
14235: DOUBLE
14236: LD_INT 1
14238: DEC
14239: ST_TO_ADDR
14240: LD_INT 2
14242: PUSH
14243: FOR_TO
14244: IFFALSE 14371
// begin uc_side := your_side ;
14246: LD_ADDR_OWVAR 20
14250: PUSH
14251: LD_OWVAR 2
14255: ST_TO_ADDR
// uc_nation := nation_american ;
14256: LD_ADDR_OWVAR 21
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// vc_chassis := us_morphling ;
14264: LD_ADDR_OWVAR 37
14268: PUSH
14269: LD_INT 5
14271: ST_TO_ADDR
// vc_engine := engine_siberite ;
14272: LD_ADDR_OWVAR 39
14276: PUSH
14277: LD_INT 3
14279: ST_TO_ADDR
// vc_control := control_computer ;
14280: LD_ADDR_OWVAR 38
14284: PUSH
14285: LD_INT 3
14287: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14288: LD_ADDR_OWVAR 40
14292: PUSH
14293: LD_INT 10
14295: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 1
14303: ARRAY
14304: PPUSH
14305: CALL_OW 310
14309: NOT
14310: IFFALSE 14357
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14312: CALL_OW 45
14316: PPUSH
14317: LD_VAR 0 2
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: PPUSH
14326: CALL_OW 250
14330: PPUSH
14331: LD_VAR 0 2
14335: PUSH
14336: LD_INT 1
14338: ARRAY
14339: PPUSH
14340: CALL_OW 251
14344: PPUSH
14345: LD_INT 12
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 50
14355: GO 14369
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14357: CALL_OW 45
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 51
// end ;
14369: GO 14243
14371: POP
14372: POP
// end ;
14373: PPOPN 2
14375: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14376: LD_EXP 21
14380: PUSH
14381: LD_EXP 67
14385: AND
14386: IFFALSE 14608
14388: GO 14390
14390: DISABLE
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14399: LD_ADDR_VAR 0 6
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_OWVAR 2
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: LD_INT 23
14431: PUSH
14432: LD_INT 0
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: PPUSH
14448: CALL_OW 69
14452: ST_TO_ADDR
// if not tmp then
14453: LD_VAR 0 6
14457: NOT
14458: IFFALSE 14462
// exit ;
14460: GO 14608
// s1 := rand ( 1 , 4 ) ;
14462: LD_ADDR_VAR 0 2
14466: PUSH
14467: LD_INT 1
14469: PPUSH
14470: LD_INT 4
14472: PPUSH
14473: CALL_OW 12
14477: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14478: LD_ADDR_VAR 0 4
14482: PUSH
14483: LD_VAR 0 6
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_VAR 0 2
14496: PPUSH
14497: CALL_OW 259
14501: ST_TO_ADDR
// if s1 = 1 then
14502: LD_VAR 0 2
14506: PUSH
14507: LD_INT 1
14509: EQUAL
14510: IFFALSE 14530
// s2 := rand ( 2 , 4 ) else
14512: LD_ADDR_VAR 0 3
14516: PUSH
14517: LD_INT 2
14519: PPUSH
14520: LD_INT 4
14522: PPUSH
14523: CALL_OW 12
14527: ST_TO_ADDR
14528: GO 14538
// s2 := 1 ;
14530: LD_ADDR_VAR 0 3
14534: PUSH
14535: LD_INT 1
14537: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14538: LD_ADDR_VAR 0 5
14542: PUSH
14543: LD_VAR 0 6
14547: PUSH
14548: LD_INT 1
14550: ARRAY
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: CALL_OW 259
14561: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14562: LD_VAR 0 6
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: PPUSH
14571: LD_VAR 0 2
14575: PPUSH
14576: LD_VAR 0 5
14580: PPUSH
14581: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14585: LD_VAR 0 6
14589: PUSH
14590: LD_INT 1
14592: ARRAY
14593: PPUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: LD_VAR 0 4
14603: PPUSH
14604: CALL_OW 237
// end ;
14608: PPOPN 6
14610: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14611: LD_EXP 21
14615: PUSH
14616: LD_EXP 68
14620: AND
14621: IFFALSE 14700
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14629: LD_ADDR_VAR 0 1
14633: PUSH
14634: LD_INT 22
14636: PUSH
14637: LD_OWVAR 2
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 30
14648: PUSH
14649: LD_INT 3
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PPUSH
14660: CALL_OW 69
14664: ST_TO_ADDR
// if not tmp then
14665: LD_VAR 0 1
14669: NOT
14670: IFFALSE 14674
// exit ;
14672: GO 14700
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14674: LD_VAR 0 1
14678: PUSH
14679: LD_INT 1
14681: PPUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 12
14691: ARRAY
14692: PPUSH
14693: LD_INT 1
14695: PPUSH
14696: CALL_OW 234
// end ;
14700: PPOPN 1
14702: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14703: LD_EXP 21
14707: PUSH
14708: LD_EXP 69
14712: AND
14713: IFFALSE 14825
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 22
14729: PUSH
14730: LD_OWVAR 2
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 30
14744: PUSH
14745: LD_INT 27
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 30
14754: PUSH
14755: LD_INT 26
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 30
14764: PUSH
14765: LD_INT 28
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PPUSH
14782: CALL_OW 69
14786: ST_TO_ADDR
// if not tmp then
14787: LD_VAR 0 2
14791: NOT
14792: IFFALSE 14796
// exit ;
14794: GO 14825
// for i in tmp do
14796: LD_ADDR_VAR 0 1
14800: PUSH
14801: LD_VAR 0 2
14805: PUSH
14806: FOR_IN
14807: IFFALSE 14823
// SetLives ( i , 1 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 1
14816: PPUSH
14817: CALL_OW 234
14821: GO 14806
14823: POP
14824: POP
// end ;
14825: PPOPN 2
14827: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14828: LD_EXP 21
14832: PUSH
14833: LD_EXP 70
14837: AND
14838: IFFALSE 15112
14840: GO 14842
14842: DISABLE
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
14847: PPUSH
// begin i := rand ( 1 , 7 ) ;
14848: LD_ADDR_VAR 0 1
14852: PUSH
14853: LD_INT 1
14855: PPUSH
14856: LD_INT 7
14858: PPUSH
14859: CALL_OW 12
14863: ST_TO_ADDR
// case i of 1 :
14864: LD_VAR 0 1
14868: PUSH
14869: LD_INT 1
14871: DOUBLE
14872: EQUAL
14873: IFTRUE 14877
14875: GO 14887
14877: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14878: LD_STRING earthquake(getX(game), 0, 32)
14880: PPUSH
14881: CALL_OW 559
14885: GO 15112
14887: LD_INT 2
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14909
14895: POP
// begin ToLua ( displayStucuk(); ) ;
14896: LD_STRING displayStucuk();
14898: PPUSH
14899: CALL_OW 559
// ResetFog ;
14903: CALL_OW 335
// end ; 3 :
14907: GO 15112
14909: LD_INT 3
14911: DOUBLE
14912: EQUAL
14913: IFTRUE 14917
14915: GO 15021
14917: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14918: LD_ADDR_VAR 0 2
14922: PUSH
14923: LD_INT 22
14925: PUSH
14926: LD_OWVAR 2
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 25
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: ST_TO_ADDR
// if not tmp then
14954: LD_VAR 0 2
14958: NOT
14959: IFFALSE 14963
// exit ;
14961: GO 15112
// un := tmp [ rand ( 1 , tmp ) ] ;
14963: LD_ADDR_VAR 0 3
14967: PUSH
14968: LD_VAR 0 2
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 2
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: ST_TO_ADDR
// if Crawls ( un ) then
14987: LD_VAR 0 3
14991: PPUSH
14992: CALL_OW 318
14996: IFFALSE 15007
// ComWalk ( un ) ;
14998: LD_VAR 0 3
15002: PPUSH
15003: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_INT 8
15014: PPUSH
15015: CALL_OW 336
// end ; 4 :
15019: GO 15112
15021: LD_INT 4
15023: DOUBLE
15024: EQUAL
15025: IFTRUE 15029
15027: GO 15090
15029: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15030: LD_ADDR_VAR 0 2
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_OWVAR 2
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 30
15049: PUSH
15050: LD_INT 29
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 69
15065: ST_TO_ADDR
// if not tmp then
15066: LD_VAR 0 2
15070: NOT
15071: IFFALSE 15075
// exit ;
15073: GO 15112
// DestroyUnit ( tmp [ 1 ] ) ;
15075: LD_VAR 0 2
15079: PUSH
15080: LD_INT 1
15082: ARRAY
15083: PPUSH
15084: CALL_OW 65
// end ; 5 .. 7 :
15088: GO 15112
15090: LD_INT 5
15092: DOUBLE
15093: GREATEREQUAL
15094: IFFALSE 15102
15096: LD_INT 7
15098: DOUBLE
15099: LESSEQUAL
15100: IFTRUE 15104
15102: GO 15111
15104: POP
// StreamSibBomb ; end ;
15105: CALL 11362 0 0
15109: GO 15112
15111: POP
// end ;
15112: PPOPN 3
15114: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15115: LD_EXP 21
15119: PUSH
15120: LD_EXP 71
15124: AND
15125: IFFALSE 15281
15127: GO 15129
15129: DISABLE
15130: LD_INT 0
15132: PPUSH
15133: PPUSH
15134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15135: LD_ADDR_VAR 0 2
15139: PUSH
15140: LD_INT 81
15142: PUSH
15143: LD_OWVAR 2
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: LD_INT 21
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 21
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: ST_TO_ADDR
// if not tmp then
15189: LD_VAR 0 2
15193: NOT
15194: IFFALSE 15198
// exit ;
15196: GO 15281
// p := 0 ;
15198: LD_ADDR_VAR 0 3
15202: PUSH
15203: LD_INT 0
15205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15206: LD_INT 35
15208: PPUSH
15209: CALL_OW 67
// p := p + 1 ;
15213: LD_ADDR_VAR 0 3
15217: PUSH
15218: LD_VAR 0 3
15222: PUSH
15223: LD_INT 1
15225: PLUS
15226: ST_TO_ADDR
// for i in tmp do
15227: LD_ADDR_VAR 0 1
15231: PUSH
15232: LD_VAR 0 2
15236: PUSH
15237: FOR_IN
15238: IFFALSE 15269
// if GetLives ( i ) < 1000 then
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 256
15249: PUSH
15250: LD_INT 1000
15252: LESS
15253: IFFALSE 15267
// SetLives ( i , 1000 ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 1000
15262: PPUSH
15263: CALL_OW 234
15267: GO 15237
15269: POP
15270: POP
// until p > 20 ;
15271: LD_VAR 0 3
15275: PUSH
15276: LD_INT 20
15278: GREATER
15279: IFFALSE 15206
// end ;
15281: PPOPN 3
15283: END
// every 0 0$1 trigger StreamModeActive and sTime do
15284: LD_EXP 21
15288: PUSH
15289: LD_EXP 72
15293: AND
15294: IFFALSE 15329
15296: GO 15298
15298: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15299: LD_INT 28
15301: PPUSH
15302: LD_OWVAR 2
15306: PPUSH
15307: LD_INT 2
15309: PPUSH
15310: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15314: LD_INT 30
15316: PPUSH
15317: LD_OWVAR 2
15321: PPUSH
15322: LD_INT 2
15324: PPUSH
15325: CALL_OW 322
// end ;
15329: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15330: LD_EXP 21
15334: PUSH
15335: LD_EXP 73
15339: AND
15340: IFFALSE 15461
15342: GO 15344
15344: DISABLE
15345: LD_INT 0
15347: PPUSH
15348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15349: LD_ADDR_VAR 0 2
15353: PUSH
15354: LD_INT 22
15356: PUSH
15357: LD_OWVAR 2
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: LD_INT 23
15381: PUSH
15382: LD_INT 0
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: PPUSH
15398: CALL_OW 69
15402: ST_TO_ADDR
// if not tmp then
15403: LD_VAR 0 2
15407: NOT
15408: IFFALSE 15412
// exit ;
15410: GO 15461
// for i in tmp do
15412: LD_ADDR_VAR 0 1
15416: PUSH
15417: LD_VAR 0 2
15421: PUSH
15422: FOR_IN
15423: IFFALSE 15459
// begin if Crawls ( i ) then
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 318
15434: IFFALSE 15445
// ComWalk ( i ) ;
15436: LD_VAR 0 1
15440: PPUSH
15441: CALL_OW 138
// SetClass ( i , 2 ) ;
15445: LD_VAR 0 1
15449: PPUSH
15450: LD_INT 2
15452: PPUSH
15453: CALL_OW 336
// end ;
15457: GO 15422
15459: POP
15460: POP
// end ;
15461: PPOPN 2
15463: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15464: LD_EXP 21
15468: PUSH
15469: LD_EXP 74
15473: AND
15474: IFFALSE 15755
15476: GO 15478
15478: DISABLE
15479: LD_INT 0
15481: PPUSH
15482: PPUSH
15483: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15484: LD_OWVAR 2
15488: PPUSH
15489: LD_INT 9
15491: PPUSH
15492: LD_INT 1
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15502: LD_INT 9
15504: PPUSH
15505: LD_OWVAR 2
15509: PPUSH
15510: CALL_OW 343
// uc_side := 9 ;
15514: LD_ADDR_OWVAR 20
15518: PUSH
15519: LD_INT 9
15521: ST_TO_ADDR
// uc_nation := 2 ;
15522: LD_ADDR_OWVAR 21
15526: PUSH
15527: LD_INT 2
15529: ST_TO_ADDR
// hc_name := Dark Warrior ;
15530: LD_ADDR_OWVAR 26
15534: PUSH
15535: LD_STRING Dark Warrior
15537: ST_TO_ADDR
// hc_gallery :=  ;
15538: LD_ADDR_OWVAR 33
15542: PUSH
15543: LD_STRING 
15545: ST_TO_ADDR
// hc_noskilllimit := true ;
15546: LD_ADDR_OWVAR 76
15550: PUSH
15551: LD_INT 1
15553: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15554: LD_ADDR_OWVAR 31
15558: PUSH
15559: LD_INT 30
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 30
15567: PUSH
15568: LD_INT 30
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: ST_TO_ADDR
// un := CreateHuman ;
15577: LD_ADDR_VAR 0 3
15581: PUSH
15582: CALL_OW 44
15586: ST_TO_ADDR
// hc_noskilllimit := false ;
15587: LD_ADDR_OWVAR 76
15591: PUSH
15592: LD_INT 0
15594: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15595: LD_VAR 0 3
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: CALL_OW 51
// p := 0 ;
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 0
15614: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15615: LD_INT 35
15617: PPUSH
15618: CALL_OW 67
// p := p + 1 ;
15622: LD_ADDR_VAR 0 2
15626: PUSH
15627: LD_VAR 0 2
15631: PUSH
15632: LD_INT 1
15634: PLUS
15635: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15636: LD_VAR 0 3
15640: PPUSH
15641: CALL_OW 256
15645: PUSH
15646: LD_INT 1000
15648: LESS
15649: IFFALSE 15663
// SetLives ( un , 1000 ) ;
15651: LD_VAR 0 3
15655: PPUSH
15656: LD_INT 1000
15658: PPUSH
15659: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_INT 81
15670: PUSH
15671: LD_OWVAR 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 91
15682: PUSH
15683: LD_VAR 0 3
15687: PUSH
15688: LD_INT 30
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: PPUSH
15705: LD_VAR 0 3
15709: PPUSH
15710: CALL_OW 74
15714: PPUSH
15715: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15719: LD_VAR 0 2
15723: PUSH
15724: LD_INT 60
15726: GREATER
15727: PUSH
15728: LD_VAR 0 3
15732: PPUSH
15733: CALL_OW 301
15737: OR
15738: IFFALSE 15615
// if un then
15740: LD_VAR 0 3
15744: IFFALSE 15755
// RemoveUnit ( un ) ;
15746: LD_VAR 0 3
15750: PPUSH
15751: CALL_OW 64
// end ; end_of_file
15755: PPOPN 3
15757: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
15763: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15764: LD_VAR 0 1
15768: PPUSH
15769: CALL_OW 264
15773: PUSH
15774: LD_EXP 11
15778: EQUAL
15779: IFFALSE 15851
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15781: LD_INT 68
15783: PPUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 255
15793: PPUSH
15794: CALL_OW 321
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: IFFALSE 15814
// eff := 70 else
15804: LD_ADDR_VAR 0 4
15808: PUSH
15809: LD_INT 70
15811: ST_TO_ADDR
15812: GO 15822
// eff := 30 ;
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_INT 30
15821: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 250
15831: PPUSH
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 251
15841: PPUSH
15842: LD_VAR 0 4
15846: PPUSH
15847: CALL_OW 495
// end ; end ;
15851: LD_VAR 0 2
15855: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15856: LD_INT 0
15858: PPUSH
// end ;
15859: LD_VAR 0 4
15863: RET
// export function SOS_Command ( cmd ) ; begin
15864: LD_INT 0
15866: PPUSH
// end ;
15867: LD_VAR 0 2
15871: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
15872: LD_VAR 0 1
15876: PUSH
15877: LD_INT 255
15879: EQUAL
15880: PUSH
15881: LD_VAR 0 2
15885: PPUSH
15886: CALL_OW 264
15890: PUSH
15891: LD_INT 14
15893: PUSH
15894: LD_INT 53
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: IN
15901: AND
15902: PUSH
15903: LD_VAR 0 4
15907: PPUSH
15908: LD_VAR 0 5
15912: PPUSH
15913: CALL_OW 488
15917: AND
15918: IFFALSE 15942
// CutTreeXYR ( unit , x , y , 12 ) ;
15920: LD_VAR 0 2
15924: PPUSH
15925: LD_VAR 0 4
15929: PPUSH
15930: LD_VAR 0 5
15934: PPUSH
15935: LD_INT 12
15937: PPUSH
15938: CALL 15945 0 4
// end ;
15942: PPOPN 5
15944: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15945: LD_INT 0
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
15952: PPUSH
15953: PPUSH
15954: PPUSH
15955: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15956: LD_VAR 0 1
15960: NOT
15961: PUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: CALL_OW 488
15976: NOT
15977: OR
15978: PUSH
15979: LD_VAR 0 4
15983: NOT
15984: OR
15985: IFFALSE 15989
// exit ;
15987: GO 16329
// list := [ ] ;
15989: LD_ADDR_VAR 0 13
15993: PUSH
15994: EMPTY
15995: ST_TO_ADDR
// if x - r < 0 then
15996: LD_VAR 0 2
16000: PUSH
16001: LD_VAR 0 4
16005: MINUS
16006: PUSH
16007: LD_INT 0
16009: LESS
16010: IFFALSE 16022
// min_x := 0 else
16012: LD_ADDR_VAR 0 7
16016: PUSH
16017: LD_INT 0
16019: ST_TO_ADDR
16020: GO 16038
// min_x := x - r ;
16022: LD_ADDR_VAR 0 7
16026: PUSH
16027: LD_VAR 0 2
16031: PUSH
16032: LD_VAR 0 4
16036: MINUS
16037: ST_TO_ADDR
// if y - r < 0 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_VAR 0 4
16047: MINUS
16048: PUSH
16049: LD_INT 0
16051: LESS
16052: IFFALSE 16064
// min_y := 0 else
16054: LD_ADDR_VAR 0 8
16058: PUSH
16059: LD_INT 0
16061: ST_TO_ADDR
16062: GO 16080
// min_y := y - r ;
16064: LD_ADDR_VAR 0 8
16068: PUSH
16069: LD_VAR 0 3
16073: PUSH
16074: LD_VAR 0 4
16078: MINUS
16079: ST_TO_ADDR
// max_x := x + r ;
16080: LD_ADDR_VAR 0 9
16084: PUSH
16085: LD_VAR 0 2
16089: PUSH
16090: LD_VAR 0 4
16094: PLUS
16095: ST_TO_ADDR
// max_y := y + r ;
16096: LD_ADDR_VAR 0 10
16100: PUSH
16101: LD_VAR 0 3
16105: PUSH
16106: LD_VAR 0 4
16110: PLUS
16111: ST_TO_ADDR
// for _x = min_x to max_x do
16112: LD_ADDR_VAR 0 11
16116: PUSH
16117: DOUBLE
16118: LD_VAR 0 7
16122: DEC
16123: ST_TO_ADDR
16124: LD_VAR 0 9
16128: PUSH
16129: FOR_TO
16130: IFFALSE 16247
// for _y = min_y to max_y do
16132: LD_ADDR_VAR 0 12
16136: PUSH
16137: DOUBLE
16138: LD_VAR 0 8
16142: DEC
16143: ST_TO_ADDR
16144: LD_VAR 0 10
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16243
// begin if not ValidHex ( _x , _y ) then
16152: LD_VAR 0 11
16156: PPUSH
16157: LD_VAR 0 12
16161: PPUSH
16162: CALL_OW 488
16166: NOT
16167: IFFALSE 16171
// continue ;
16169: GO 16149
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16171: LD_VAR 0 11
16175: PPUSH
16176: LD_VAR 0 12
16180: PPUSH
16181: CALL_OW 351
16185: PUSH
16186: LD_VAR 0 11
16190: PPUSH
16191: LD_VAR 0 12
16195: PPUSH
16196: CALL_OW 554
16200: AND
16201: IFFALSE 16241
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16203: LD_ADDR_VAR 0 13
16207: PUSH
16208: LD_VAR 0 13
16212: PPUSH
16213: LD_VAR 0 13
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: PPUSH
16222: LD_VAR 0 11
16226: PUSH
16227: LD_VAR 0 12
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PPUSH
16236: CALL_OW 2
16240: ST_TO_ADDR
// end ;
16241: GO 16149
16243: POP
16244: POP
16245: GO 16129
16247: POP
16248: POP
// if not list then
16249: LD_VAR 0 13
16253: NOT
16254: IFFALSE 16258
// exit ;
16256: GO 16329
// for i in list do
16258: LD_ADDR_VAR 0 6
16262: PUSH
16263: LD_VAR 0 13
16267: PUSH
16268: FOR_IN
16269: IFFALSE 16327
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16271: LD_VAR 0 1
16275: PPUSH
16276: LD_STRING M
16278: PUSH
16279: LD_VAR 0 6
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: PUSH
16288: LD_VAR 0 6
16292: PUSH
16293: LD_INT 2
16295: ARRAY
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: LD_INT 0
16305: PUSH
16306: LD_INT 0
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: PPUSH
16321: CALL_OW 447
16325: GO 16268
16327: POP
16328: POP
// end ;
16329: LD_VAR 0 5
16333: RET
