// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 17977 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 18075 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 18083 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_miner := 81 ;
4669: LD_ADDR_EXP 14
4673: PUSH
4674: LD_INT 81
4676: ST_TO_ADDR
// ar_crane := 88 ;
4677: LD_ADDR_EXP 13
4681: PUSH
4682: LD_INT 88
4684: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4685: LD_ADDR_EXP 8
4689: PUSH
4690: LD_INT 89
4692: ST_TO_ADDR
// us_hack := 99 ;
4693: LD_ADDR_EXP 9
4697: PUSH
4698: LD_INT 99
4700: ST_TO_ADDR
// us_artillery := 97 ;
4701: LD_ADDR_EXP 10
4705: PUSH
4706: LD_INT 97
4708: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4709: LD_ADDR_EXP 11
4713: PUSH
4714: LD_INT 91
4716: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4717: LD_ADDR_EXP 12
4721: PUSH
4722: LD_INT 92
4724: ST_TO_ADDR
// ru_radar := 98 ;
4725: LD_ADDR_EXP 7
4729: PUSH
4730: LD_INT 98
4732: ST_TO_ADDR
// tech_Artillery := 80 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 80
4740: ST_TO_ADDR
// tech_RadMat := 81 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 81
4748: ST_TO_ADDR
// tech_BasicTools := 82 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 82
4756: ST_TO_ADDR
// tech_Cargo := 83 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 83
4764: ST_TO_ADDR
// tech_Track := 84 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 84
4772: ST_TO_ADDR
// tech_Crane := 85 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 85
4780: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 86
4788: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4789: LD_ADDR_EXP 22
4793: PUSH
4794: LD_INT 87
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// every 1 do
4802: GO 4804
4804: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4805: CALL 4666 0 0
4809: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4810: LD_VAR 0 2
4814: PUSH
4815: LD_INT 100
4817: EQUAL
4818: IFFALSE 5767
// begin if not StreamModeActive then
4820: LD_EXP 23
4824: NOT
4825: IFFALSE 4835
// StreamModeActive := true ;
4827: LD_ADDR_EXP 23
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// if p3 = 0 then
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 0
4842: EQUAL
4843: IFFALSE 4849
// InitStreamMode ;
4845: CALL 5925 0 0
// if p3 = 1 then
4849: LD_VAR 0 3
4853: PUSH
4854: LD_INT 1
4856: EQUAL
4857: IFFALSE 4867
// sRocket := true ;
4859: LD_ADDR_EXP 28
4863: PUSH
4864: LD_INT 1
4866: ST_TO_ADDR
// if p3 = 2 then
4867: LD_VAR 0 3
4871: PUSH
4872: LD_INT 2
4874: EQUAL
4875: IFFALSE 4885
// sSpeed := true ;
4877: LD_ADDR_EXP 27
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// if p3 = 3 then
4885: LD_VAR 0 3
4889: PUSH
4890: LD_INT 3
4892: EQUAL
4893: IFFALSE 4903
// sEngine := true ;
4895: LD_ADDR_EXP 29
4899: PUSH
4900: LD_INT 1
4902: ST_TO_ADDR
// if p3 = 4 then
4903: LD_VAR 0 3
4907: PUSH
4908: LD_INT 4
4910: EQUAL
4911: IFFALSE 4921
// sSpec := true ;
4913: LD_ADDR_EXP 26
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// if p3 = 5 then
4921: LD_VAR 0 3
4925: PUSH
4926: LD_INT 5
4928: EQUAL
4929: IFFALSE 4939
// sLevel := true ;
4931: LD_ADDR_EXP 30
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// if p3 = 6 then
4939: LD_VAR 0 3
4943: PUSH
4944: LD_INT 6
4946: EQUAL
4947: IFFALSE 4957
// sArmoury := true ;
4949: LD_ADDR_EXP 31
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// if p3 = 7 then
4957: LD_VAR 0 3
4961: PUSH
4962: LD_INT 7
4964: EQUAL
4965: IFFALSE 4975
// sRadar := true ;
4967: LD_ADDR_EXP 32
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// if p3 = 8 then
4975: LD_VAR 0 3
4979: PUSH
4980: LD_INT 8
4982: EQUAL
4983: IFFALSE 4993
// sBunker := true ;
4985: LD_ADDR_EXP 33
4989: PUSH
4990: LD_INT 1
4992: ST_TO_ADDR
// if p3 = 9 then
4993: LD_VAR 0 3
4997: PUSH
4998: LD_INT 9
5000: EQUAL
5001: IFFALSE 5011
// sHack := true ;
5003: LD_ADDR_EXP 34
5007: PUSH
5008: LD_INT 1
5010: ST_TO_ADDR
// if p3 = 10 then
5011: LD_VAR 0 3
5015: PUSH
5016: LD_INT 10
5018: EQUAL
5019: IFFALSE 5029
// sFire := true ;
5021: LD_ADDR_EXP 35
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// if p3 = 11 then
5029: LD_VAR 0 3
5033: PUSH
5034: LD_INT 11
5036: EQUAL
5037: IFFALSE 5047
// sRefresh := true ;
5039: LD_ADDR_EXP 36
5043: PUSH
5044: LD_INT 1
5046: ST_TO_ADDR
// if p3 = 12 then
5047: LD_VAR 0 3
5051: PUSH
5052: LD_INT 12
5054: EQUAL
5055: IFFALSE 5065
// sExp := true ;
5057: LD_ADDR_EXP 37
5061: PUSH
5062: LD_INT 1
5064: ST_TO_ADDR
// if p3 = 13 then
5065: LD_VAR 0 3
5069: PUSH
5070: LD_INT 13
5072: EQUAL
5073: IFFALSE 5083
// sDepot := true ;
5075: LD_ADDR_EXP 38
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// if p3 = 14 then
5083: LD_VAR 0 3
5087: PUSH
5088: LD_INT 14
5090: EQUAL
5091: IFFALSE 5101
// sFlag := true ;
5093: LD_ADDR_EXP 39
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// if p3 = 15 then
5101: LD_VAR 0 3
5105: PUSH
5106: LD_INT 15
5108: EQUAL
5109: IFFALSE 5119
// sKamikadze := true ;
5111: LD_ADDR_EXP 47
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// if p3 = 16 then
5119: LD_VAR 0 3
5123: PUSH
5124: LD_INT 16
5126: EQUAL
5127: IFFALSE 5137
// sTroll := true ;
5129: LD_ADDR_EXP 48
5133: PUSH
5134: LD_INT 1
5136: ST_TO_ADDR
// if p3 = 17 then
5137: LD_VAR 0 3
5141: PUSH
5142: LD_INT 17
5144: EQUAL
5145: IFFALSE 5155
// sSlow := true ;
5147: LD_ADDR_EXP 49
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// if p3 = 18 then
5155: LD_VAR 0 3
5159: PUSH
5160: LD_INT 18
5162: EQUAL
5163: IFFALSE 5173
// sLack := true ;
5165: LD_ADDR_EXP 50
5169: PUSH
5170: LD_INT 1
5172: ST_TO_ADDR
// if p3 = 19 then
5173: LD_VAR 0 3
5177: PUSH
5178: LD_INT 19
5180: EQUAL
5181: IFFALSE 5191
// sTank := true ;
5183: LD_ADDR_EXP 52
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// if p3 = 20 then
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 20
5198: EQUAL
5199: IFFALSE 5209
// sRemote := true ;
5201: LD_ADDR_EXP 53
5205: PUSH
5206: LD_INT 1
5208: ST_TO_ADDR
// if p3 = 21 then
5209: LD_VAR 0 3
5213: PUSH
5214: LD_INT 21
5216: EQUAL
5217: IFFALSE 5227
// sPowell := true ;
5219: LD_ADDR_EXP 54
5223: PUSH
5224: LD_INT 1
5226: ST_TO_ADDR
// if p3 = 22 then
5227: LD_VAR 0 3
5231: PUSH
5232: LD_INT 22
5234: EQUAL
5235: IFFALSE 5245
// sTeleport := true ;
5237: LD_ADDR_EXP 57
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// if p3 = 23 then
5245: LD_VAR 0 3
5249: PUSH
5250: LD_INT 23
5252: EQUAL
5253: IFFALSE 5263
// sOilTower := true ;
5255: LD_ADDR_EXP 59
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// if p3 = 24 then
5263: LD_VAR 0 3
5267: PUSH
5268: LD_INT 24
5270: EQUAL
5271: IFFALSE 5281
// sShovel := true ;
5273: LD_ADDR_EXP 60
5277: PUSH
5278: LD_INT 1
5280: ST_TO_ADDR
// if p3 = 25 then
5281: LD_VAR 0 3
5285: PUSH
5286: LD_INT 25
5288: EQUAL
5289: IFFALSE 5299
// sSheik := true ;
5291: LD_ADDR_EXP 61
5295: PUSH
5296: LD_INT 1
5298: ST_TO_ADDR
// if p3 = 26 then
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 26
5306: EQUAL
5307: IFFALSE 5317
// sEarthquake := true ;
5309: LD_ADDR_EXP 63
5313: PUSH
5314: LD_INT 1
5316: ST_TO_ADDR
// if p3 = 27 then
5317: LD_VAR 0 3
5321: PUSH
5322: LD_INT 27
5324: EQUAL
5325: IFFALSE 5335
// sAI := true ;
5327: LD_ADDR_EXP 64
5331: PUSH
5332: LD_INT 1
5334: ST_TO_ADDR
// if p3 = 28 then
5335: LD_VAR 0 3
5339: PUSH
5340: LD_INT 28
5342: EQUAL
5343: IFFALSE 5353
// sCargo := true ;
5345: LD_ADDR_EXP 67
5349: PUSH
5350: LD_INT 1
5352: ST_TO_ADDR
// if p3 = 29 then
5353: LD_VAR 0 3
5357: PUSH
5358: LD_INT 29
5360: EQUAL
5361: IFFALSE 5371
// sDLaser := true ;
5363: LD_ADDR_EXP 68
5367: PUSH
5368: LD_INT 1
5370: ST_TO_ADDR
// if p3 = 30 then
5371: LD_VAR 0 3
5375: PUSH
5376: LD_INT 30
5378: EQUAL
5379: IFFALSE 5389
// sExchange := true ;
5381: LD_ADDR_EXP 69
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// if p3 = 31 then
5389: LD_VAR 0 3
5393: PUSH
5394: LD_INT 31
5396: EQUAL
5397: IFFALSE 5407
// sFac := true ;
5399: LD_ADDR_EXP 70
5403: PUSH
5404: LD_INT 1
5406: ST_TO_ADDR
// if p3 = 32 then
5407: LD_VAR 0 3
5411: PUSH
5412: LD_INT 32
5414: EQUAL
5415: IFFALSE 5425
// sPower := true ;
5417: LD_ADDR_EXP 71
5421: PUSH
5422: LD_INT 1
5424: ST_TO_ADDR
// if p3 = 33 then
5425: LD_VAR 0 3
5429: PUSH
5430: LD_INT 33
5432: EQUAL
5433: IFFALSE 5443
// sRandom := true ;
5435: LD_ADDR_EXP 72
5439: PUSH
5440: LD_INT 1
5442: ST_TO_ADDR
// if p3 = 34 then
5443: LD_VAR 0 3
5447: PUSH
5448: LD_INT 34
5450: EQUAL
5451: IFFALSE 5461
// sShield := true ;
5453: LD_ADDR_EXP 73
5457: PUSH
5458: LD_INT 1
5460: ST_TO_ADDR
// if p3 = 35 then
5461: LD_VAR 0 3
5465: PUSH
5466: LD_INT 35
5468: EQUAL
5469: IFFALSE 5479
// sTime := true ;
5471: LD_ADDR_EXP 74
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// if p3 = 36 then
5479: LD_VAR 0 3
5483: PUSH
5484: LD_INT 36
5486: EQUAL
5487: IFFALSE 5497
// sTools := true ;
5489: LD_ADDR_EXP 75
5493: PUSH
5494: LD_INT 1
5496: ST_TO_ADDR
// if p3 = 101 then
5497: LD_VAR 0 3
5501: PUSH
5502: LD_INT 101
5504: EQUAL
5505: IFFALSE 5515
// sSold := true ;
5507: LD_ADDR_EXP 40
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// if p3 = 102 then
5515: LD_VAR 0 3
5519: PUSH
5520: LD_INT 102
5522: EQUAL
5523: IFFALSE 5533
// sDiff := true ;
5525: LD_ADDR_EXP 41
5529: PUSH
5530: LD_INT 1
5532: ST_TO_ADDR
// if p3 = 103 then
5533: LD_VAR 0 3
5537: PUSH
5538: LD_INT 103
5540: EQUAL
5541: IFFALSE 5551
// sFog := true ;
5543: LD_ADDR_EXP 44
5547: PUSH
5548: LD_INT 1
5550: ST_TO_ADDR
// if p3 = 104 then
5551: LD_VAR 0 3
5555: PUSH
5556: LD_INT 104
5558: EQUAL
5559: IFFALSE 5569
// sReset := true ;
5561: LD_ADDR_EXP 45
5565: PUSH
5566: LD_INT 1
5568: ST_TO_ADDR
// if p3 = 105 then
5569: LD_VAR 0 3
5573: PUSH
5574: LD_INT 105
5576: EQUAL
5577: IFFALSE 5587
// sSun := true ;
5579: LD_ADDR_EXP 46
5583: PUSH
5584: LD_INT 1
5586: ST_TO_ADDR
// if p3 = 106 then
5587: LD_VAR 0 3
5591: PUSH
5592: LD_INT 106
5594: EQUAL
5595: IFFALSE 5605
// sTiger := true ;
5597: LD_ADDR_EXP 42
5601: PUSH
5602: LD_INT 1
5604: ST_TO_ADDR
// if p3 = 107 then
5605: LD_VAR 0 3
5609: PUSH
5610: LD_INT 107
5612: EQUAL
5613: IFFALSE 5623
// sBomb := true ;
5615: LD_ADDR_EXP 43
5619: PUSH
5620: LD_INT 1
5622: ST_TO_ADDR
// if p3 = 108 then
5623: LD_VAR 0 3
5627: PUSH
5628: LD_INT 108
5630: EQUAL
5631: IFFALSE 5641
// sWound := true ;
5633: LD_ADDR_EXP 51
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// if p3 = 109 then
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 109
5648: EQUAL
5649: IFFALSE 5659
// sBetray := true ;
5651: LD_ADDR_EXP 55
5655: PUSH
5656: LD_INT 1
5658: ST_TO_ADDR
// if p3 = 110 then
5659: LD_VAR 0 3
5663: PUSH
5664: LD_INT 110
5666: EQUAL
5667: IFFALSE 5677
// sContamin := true ;
5669: LD_ADDR_EXP 56
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// if p3 = 111 then
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 111
5684: EQUAL
5685: IFFALSE 5695
// sOil := true ;
5687: LD_ADDR_EXP 58
5691: PUSH
5692: LD_INT 1
5694: ST_TO_ADDR
// if p3 = 112 then
5695: LD_VAR 0 3
5699: PUSH
5700: LD_INT 112
5702: EQUAL
5703: IFFALSE 5713
// sStu := true ;
5705: LD_ADDR_EXP 62
5709: PUSH
5710: LD_INT 1
5712: ST_TO_ADDR
// if p3 = 113 then
5713: LD_VAR 0 3
5717: PUSH
5718: LD_INT 113
5720: EQUAL
5721: IFFALSE 5731
// sBazooka := true ;
5723: LD_ADDR_EXP 65
5727: PUSH
5728: LD_INT 1
5730: ST_TO_ADDR
// if p3 = 114 then
5731: LD_VAR 0 3
5735: PUSH
5736: LD_INT 114
5738: EQUAL
5739: IFFALSE 5749
// sMortar := true ;
5741: LD_ADDR_EXP 66
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// if p3 = 115 then
5749: LD_VAR 0 3
5753: PUSH
5754: LD_INT 115
5756: EQUAL
5757: IFFALSE 5767
// sRanger := true ;
5759: LD_ADDR_EXP 76
5763: PUSH
5764: LD_INT 1
5766: ST_TO_ADDR
// end ; if p2 = 101 then
5767: LD_VAR 0 2
5771: PUSH
5772: LD_INT 101
5774: EQUAL
5775: IFFALSE 5903
// begin case p3 of 1 :
5777: LD_VAR 0 3
5781: PUSH
5782: LD_INT 1
5784: DOUBLE
5785: EQUAL
5786: IFTRUE 5790
5788: GO 5797
5790: POP
// hHackUnlimitedResources ; 2 :
5791: CALL 16938 0 0
5795: GO 5903
5797: LD_INT 2
5799: DOUBLE
5800: EQUAL
5801: IFTRUE 5805
5803: GO 5812
5805: POP
// hHackSetLevel10 ; 3 :
5806: CALL 17071 0 0
5810: GO 5903
5812: LD_INT 3
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5820
5818: GO 5827
5820: POP
// hHackSetLevel10YourUnits ; 4 :
5821: CALL 17156 0 0
5825: GO 5903
5827: LD_INT 4
5829: DOUBLE
5830: EQUAL
5831: IFTRUE 5835
5833: GO 5842
5835: POP
// hHackInvincible ; 5 :
5836: CALL 17604 0 0
5840: GO 5903
5842: LD_INT 5
5844: DOUBLE
5845: EQUAL
5846: IFTRUE 5850
5848: GO 5857
5850: POP
// hHackInvisible ; 6 :
5851: CALL 17715 0 0
5855: GO 5903
5857: LD_INT 6
5859: DOUBLE
5860: EQUAL
5861: IFTRUE 5865
5863: GO 5872
5865: POP
// hHackChangeYourSide ; 7 :
5866: CALL 17772 0 0
5870: GO 5903
5872: LD_INT 7
5874: DOUBLE
5875: EQUAL
5876: IFTRUE 5880
5878: GO 5887
5880: POP
// hHackChangeUnitSide ; 8 :
5881: CALL 17814 0 0
5885: GO 5903
5887: LD_INT 8
5889: DOUBLE
5890: EQUAL
5891: IFTRUE 5895
5893: GO 5902
5895: POP
// hHackFog ; end ;
5896: CALL 17915 0 0
5900: GO 5903
5902: POP
// end ; end ;
5903: PPOPN 6
5905: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5906: GO 5908
5908: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5909: LD_STRING initStreamRollete();
5911: PPUSH
5912: CALL_OW 559
// InitStreamMode ;
5916: CALL 5925 0 0
// DefineStreamItems ( ) ;
5920: CALL 6365 0 0
// end ;
5924: END
// function InitStreamMode ; begin
5925: LD_INT 0
5927: PPUSH
// streamModeActive := false ;
5928: LD_ADDR_EXP 23
5932: PUSH
5933: LD_INT 0
5935: ST_TO_ADDR
// normalCounter := 36 ;
5936: LD_ADDR_EXP 24
5940: PUSH
5941: LD_INT 36
5943: ST_TO_ADDR
// hardcoreCounter := 16 ;
5944: LD_ADDR_EXP 25
5948: PUSH
5949: LD_INT 16
5951: ST_TO_ADDR
// sRocket := false ;
5952: LD_ADDR_EXP 28
5956: PUSH
5957: LD_INT 0
5959: ST_TO_ADDR
// sSpeed := false ;
5960: LD_ADDR_EXP 27
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// sEngine := false ;
5968: LD_ADDR_EXP 29
5972: PUSH
5973: LD_INT 0
5975: ST_TO_ADDR
// sSpec := false ;
5976: LD_ADDR_EXP 26
5980: PUSH
5981: LD_INT 0
5983: ST_TO_ADDR
// sLevel := false ;
5984: LD_ADDR_EXP 30
5988: PUSH
5989: LD_INT 0
5991: ST_TO_ADDR
// sArmoury := false ;
5992: LD_ADDR_EXP 31
5996: PUSH
5997: LD_INT 0
5999: ST_TO_ADDR
// sRadar := false ;
6000: LD_ADDR_EXP 32
6004: PUSH
6005: LD_INT 0
6007: ST_TO_ADDR
// sBunker := false ;
6008: LD_ADDR_EXP 33
6012: PUSH
6013: LD_INT 0
6015: ST_TO_ADDR
// sHack := false ;
6016: LD_ADDR_EXP 34
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// sFire := false ;
6024: LD_ADDR_EXP 35
6028: PUSH
6029: LD_INT 0
6031: ST_TO_ADDR
// sRefresh := false ;
6032: LD_ADDR_EXP 36
6036: PUSH
6037: LD_INT 0
6039: ST_TO_ADDR
// sExp := false ;
6040: LD_ADDR_EXP 37
6044: PUSH
6045: LD_INT 0
6047: ST_TO_ADDR
// sDepot := false ;
6048: LD_ADDR_EXP 38
6052: PUSH
6053: LD_INT 0
6055: ST_TO_ADDR
// sFlag := false ;
6056: LD_ADDR_EXP 39
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// sKamikadze := false ;
6064: LD_ADDR_EXP 47
6068: PUSH
6069: LD_INT 0
6071: ST_TO_ADDR
// sTroll := false ;
6072: LD_ADDR_EXP 48
6076: PUSH
6077: LD_INT 0
6079: ST_TO_ADDR
// sSlow := false ;
6080: LD_ADDR_EXP 49
6084: PUSH
6085: LD_INT 0
6087: ST_TO_ADDR
// sLack := false ;
6088: LD_ADDR_EXP 50
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// sTank := false ;
6096: LD_ADDR_EXP 52
6100: PUSH
6101: LD_INT 0
6103: ST_TO_ADDR
// sRemote := false ;
6104: LD_ADDR_EXP 53
6108: PUSH
6109: LD_INT 0
6111: ST_TO_ADDR
// sPowell := false ;
6112: LD_ADDR_EXP 54
6116: PUSH
6117: LD_INT 0
6119: ST_TO_ADDR
// sTeleport := false ;
6120: LD_ADDR_EXP 57
6124: PUSH
6125: LD_INT 0
6127: ST_TO_ADDR
// sOilTower := false ;
6128: LD_ADDR_EXP 59
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// sShovel := false ;
6136: LD_ADDR_EXP 60
6140: PUSH
6141: LD_INT 0
6143: ST_TO_ADDR
// sSheik := false ;
6144: LD_ADDR_EXP 61
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// sEarthquake := false ;
6152: LD_ADDR_EXP 63
6156: PUSH
6157: LD_INT 0
6159: ST_TO_ADDR
// sAI := false ;
6160: LD_ADDR_EXP 64
6164: PUSH
6165: LD_INT 0
6167: ST_TO_ADDR
// sCargo := false ;
6168: LD_ADDR_EXP 67
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// sDLaser := false ;
6176: LD_ADDR_EXP 68
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// sExchange := false ;
6184: LD_ADDR_EXP 69
6188: PUSH
6189: LD_INT 0
6191: ST_TO_ADDR
// sFac := false ;
6192: LD_ADDR_EXP 70
6196: PUSH
6197: LD_INT 0
6199: ST_TO_ADDR
// sPower := false ;
6200: LD_ADDR_EXP 71
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// sRandom := false ;
6208: LD_ADDR_EXP 72
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// sShield := false ;
6216: LD_ADDR_EXP 73
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// sTime := false ;
6224: LD_ADDR_EXP 74
6228: PUSH
6229: LD_INT 0
6231: ST_TO_ADDR
// sTools := false ;
6232: LD_ADDR_EXP 75
6236: PUSH
6237: LD_INT 0
6239: ST_TO_ADDR
// sSold := false ;
6240: LD_ADDR_EXP 40
6244: PUSH
6245: LD_INT 0
6247: ST_TO_ADDR
// sDiff := false ;
6248: LD_ADDR_EXP 41
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// sFog := false ;
6256: LD_ADDR_EXP 44
6260: PUSH
6261: LD_INT 0
6263: ST_TO_ADDR
// sReset := false ;
6264: LD_ADDR_EXP 45
6268: PUSH
6269: LD_INT 0
6271: ST_TO_ADDR
// sSun := false ;
6272: LD_ADDR_EXP 46
6276: PUSH
6277: LD_INT 0
6279: ST_TO_ADDR
// sTiger := false ;
6280: LD_ADDR_EXP 42
6284: PUSH
6285: LD_INT 0
6287: ST_TO_ADDR
// sBomb := false ;
6288: LD_ADDR_EXP 43
6292: PUSH
6293: LD_INT 0
6295: ST_TO_ADDR
// sWound := false ;
6296: LD_ADDR_EXP 51
6300: PUSH
6301: LD_INT 0
6303: ST_TO_ADDR
// sBetray := false ;
6304: LD_ADDR_EXP 55
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// sContamin := false ;
6312: LD_ADDR_EXP 56
6316: PUSH
6317: LD_INT 0
6319: ST_TO_ADDR
// sOil := false ;
6320: LD_ADDR_EXP 58
6324: PUSH
6325: LD_INT 0
6327: ST_TO_ADDR
// sStu := false ;
6328: LD_ADDR_EXP 62
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// sBazooka := false ;
6336: LD_ADDR_EXP 65
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// sMortar := false ;
6344: LD_ADDR_EXP 66
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// sRanger := false ;
6352: LD_ADDR_EXP 76
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// end ;
6360: LD_VAR 0 1
6364: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
// result := [ ] ;
6372: LD_ADDR_VAR 0 1
6376: PUSH
6377: EMPTY
6378: ST_TO_ADDR
// if campaign_id = 1 then
6379: LD_OWVAR 69
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: IFFALSE 9325
// begin case mission_number of 1 :
6389: LD_OWVAR 70
6393: PUSH
6394: LD_INT 1
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6466
6402: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6403: LD_ADDR_VAR 0 1
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 4
6413: PUSH
6414: LD_INT 11
6416: PUSH
6417: LD_INT 12
6419: PUSH
6420: LD_INT 15
6422: PUSH
6423: LD_INT 16
6425: PUSH
6426: LD_INT 22
6428: PUSH
6429: LD_INT 23
6431: PUSH
6432: LD_INT 26
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 101
6448: PUSH
6449: LD_INT 102
6451: PUSH
6452: LD_INT 106
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: ST_TO_ADDR
6464: GO 9323
6466: LD_INT 2
6468: DOUBLE
6469: EQUAL
6470: IFTRUE 6474
6472: GO 6546
6474: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6475: LD_ADDR_VAR 0 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 4
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: LD_INT 15
6494: PUSH
6495: LD_INT 16
6497: PUSH
6498: LD_INT 22
6500: PUSH
6501: LD_INT 23
6503: PUSH
6504: LD_INT 26
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 101
6520: PUSH
6521: LD_INT 102
6523: PUSH
6524: LD_INT 105
6526: PUSH
6527: LD_INT 106
6529: PUSH
6530: LD_INT 108
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 9323
6546: LD_INT 3
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6630
6554: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 4
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: LD_INT 11
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 15
6577: PUSH
6578: LD_INT 16
6580: PUSH
6581: LD_INT 22
6583: PUSH
6584: LD_INT 26
6586: PUSH
6587: LD_INT 36
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 101
6604: PUSH
6605: LD_INT 102
6607: PUSH
6608: LD_INT 105
6610: PUSH
6611: LD_INT 106
6613: PUSH
6614: LD_INT 108
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 9323
6630: LD_INT 4
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6722
6638: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6639: LD_ADDR_VAR 0 1
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 4
6649: PUSH
6650: LD_INT 5
6652: PUSH
6653: LD_INT 8
6655: PUSH
6656: LD_INT 11
6658: PUSH
6659: LD_INT 12
6661: PUSH
6662: LD_INT 15
6664: PUSH
6665: LD_INT 16
6667: PUSH
6668: LD_INT 22
6670: PUSH
6671: LD_INT 23
6673: PUSH
6674: LD_INT 26
6676: PUSH
6677: LD_INT 36
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 101
6696: PUSH
6697: LD_INT 102
6699: PUSH
6700: LD_INT 105
6702: PUSH
6703: LD_INT 106
6705: PUSH
6706: LD_INT 108
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: ST_TO_ADDR
6720: GO 9323
6722: LD_INT 5
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6830
6730: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6731: LD_ADDR_VAR 0 1
6735: PUSH
6736: LD_INT 2
6738: PUSH
6739: LD_INT 4
6741: PUSH
6742: LD_INT 5
6744: PUSH
6745: LD_INT 6
6747: PUSH
6748: LD_INT 8
6750: PUSH
6751: LD_INT 11
6753: PUSH
6754: LD_INT 12
6756: PUSH
6757: LD_INT 15
6759: PUSH
6760: LD_INT 16
6762: PUSH
6763: LD_INT 22
6765: PUSH
6766: LD_INT 23
6768: PUSH
6769: LD_INT 25
6771: PUSH
6772: LD_INT 26
6774: PUSH
6775: LD_INT 36
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 101
6796: PUSH
6797: LD_INT 102
6799: PUSH
6800: LD_INT 105
6802: PUSH
6803: LD_INT 106
6805: PUSH
6806: LD_INT 108
6808: PUSH
6809: LD_INT 109
6811: PUSH
6812: LD_INT 112
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: ST_TO_ADDR
6828: GO 9323
6830: LD_INT 6
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6958
6838: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 2
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: LD_INT 5
6852: PUSH
6853: LD_INT 6
6855: PUSH
6856: LD_INT 8
6858: PUSH
6859: LD_INT 11
6861: PUSH
6862: LD_INT 12
6864: PUSH
6865: LD_INT 15
6867: PUSH
6868: LD_INT 16
6870: PUSH
6871: LD_INT 20
6873: PUSH
6874: LD_INT 21
6876: PUSH
6877: LD_INT 22
6879: PUSH
6880: LD_INT 23
6882: PUSH
6883: LD_INT 25
6885: PUSH
6886: LD_INT 26
6888: PUSH
6889: LD_INT 30
6891: PUSH
6892: LD_INT 31
6894: PUSH
6895: LD_INT 32
6897: PUSH
6898: LD_INT 36
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 101
6924: PUSH
6925: LD_INT 102
6927: PUSH
6928: LD_INT 105
6930: PUSH
6931: LD_INT 106
6933: PUSH
6934: LD_INT 108
6936: PUSH
6937: LD_INT 109
6939: PUSH
6940: LD_INT 112
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 9323
6958: LD_INT 7
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 7066
6966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6967: LD_ADDR_VAR 0 1
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: LD_INT 4
6977: PUSH
6978: LD_INT 5
6980: PUSH
6981: LD_INT 7
6983: PUSH
6984: LD_INT 11
6986: PUSH
6987: LD_INT 12
6989: PUSH
6990: LD_INT 15
6992: PUSH
6993: LD_INT 16
6995: PUSH
6996: LD_INT 20
6998: PUSH
6999: LD_INT 21
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 23
7007: PUSH
7008: LD_INT 25
7010: PUSH
7011: LD_INT 26
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 101
7032: PUSH
7033: LD_INT 102
7035: PUSH
7036: LD_INT 103
7038: PUSH
7039: LD_INT 105
7041: PUSH
7042: LD_INT 106
7044: PUSH
7045: LD_INT 108
7047: PUSH
7048: LD_INT 112
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 9323
7066: LD_INT 8
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7202
7074: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: LD_INT 5
7088: PUSH
7089: LD_INT 6
7091: PUSH
7092: LD_INT 7
7094: PUSH
7095: LD_INT 8
7097: PUSH
7098: LD_INT 11
7100: PUSH
7101: LD_INT 12
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: LD_INT 16
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 31
7133: PUSH
7134: LD_INT 32
7136: PUSH
7137: LD_INT 36
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 101
7164: PUSH
7165: LD_INT 102
7167: PUSH
7168: LD_INT 103
7170: PUSH
7171: LD_INT 105
7173: PUSH
7174: LD_INT 106
7176: PUSH
7177: LD_INT 108
7179: PUSH
7180: LD_INT 109
7182: PUSH
7183: LD_INT 112
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: ST_TO_ADDR
7200: GO 9323
7202: LD_INT 9
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7346
7210: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7211: LD_ADDR_VAR 0 1
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_INT 4
7221: PUSH
7222: LD_INT 5
7224: PUSH
7225: LD_INT 6
7227: PUSH
7228: LD_INT 7
7230: PUSH
7231: LD_INT 8
7233: PUSH
7234: LD_INT 11
7236: PUSH
7237: LD_INT 12
7239: PUSH
7240: LD_INT 15
7242: PUSH
7243: LD_INT 16
7245: PUSH
7246: LD_INT 20
7248: PUSH
7249: LD_INT 21
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 23
7257: PUSH
7258: LD_INT 25
7260: PUSH
7261: LD_INT 26
7263: PUSH
7264: LD_INT 28
7266: PUSH
7267: LD_INT 30
7269: PUSH
7270: LD_INT 31
7272: PUSH
7273: LD_INT 32
7275: PUSH
7276: LD_INT 36
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 101
7304: PUSH
7305: LD_INT 102
7307: PUSH
7308: LD_INT 103
7310: PUSH
7311: LD_INT 105
7313: PUSH
7314: LD_INT 106
7316: PUSH
7317: LD_INT 108
7319: PUSH
7320: LD_INT 109
7322: PUSH
7323: LD_INT 112
7325: PUSH
7326: LD_INT 114
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: ST_TO_ADDR
7344: GO 9323
7346: LD_INT 10
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7538
7354: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 4
7365: PUSH
7366: LD_INT 5
7368: PUSH
7369: LD_INT 6
7371: PUSH
7372: LD_INT 7
7374: PUSH
7375: LD_INT 8
7377: PUSH
7378: LD_INT 9
7380: PUSH
7381: LD_INT 10
7383: PUSH
7384: LD_INT 11
7386: PUSH
7387: LD_INT 12
7389: PUSH
7390: LD_INT 13
7392: PUSH
7393: LD_INT 14
7395: PUSH
7396: LD_INT 15
7398: PUSH
7399: LD_INT 16
7401: PUSH
7402: LD_INT 17
7404: PUSH
7405: LD_INT 18
7407: PUSH
7408: LD_INT 19
7410: PUSH
7411: LD_INT 20
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 22
7419: PUSH
7420: LD_INT 23
7422: PUSH
7423: LD_INT 24
7425: PUSH
7426: LD_INT 25
7428: PUSH
7429: LD_INT 26
7431: PUSH
7432: LD_INT 28
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 31
7440: PUSH
7441: LD_INT 32
7443: PUSH
7444: LD_INT 36
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 101
7480: PUSH
7481: LD_INT 102
7483: PUSH
7484: LD_INT 103
7486: PUSH
7487: LD_INT 104
7489: PUSH
7490: LD_INT 105
7492: PUSH
7493: LD_INT 106
7495: PUSH
7496: LD_INT 107
7498: PUSH
7499: LD_INT 108
7501: PUSH
7502: LD_INT 109
7504: PUSH
7505: LD_INT 110
7507: PUSH
7508: LD_INT 111
7510: PUSH
7511: LD_INT 112
7513: PUSH
7514: LD_INT 114
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: ST_TO_ADDR
7536: GO 9323
7538: LD_INT 11
7540: DOUBLE
7541: EQUAL
7542: IFTRUE 7546
7544: GO 7738
7546: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_INT 2
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 4
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 6
7566: PUSH
7567: LD_INT 7
7569: PUSH
7570: LD_INT 8
7572: PUSH
7573: LD_INT 9
7575: PUSH
7576: LD_INT 10
7578: PUSH
7579: LD_INT 11
7581: PUSH
7582: LD_INT 12
7584: PUSH
7585: LD_INT 13
7587: PUSH
7588: LD_INT 14
7590: PUSH
7591: LD_INT 15
7593: PUSH
7594: LD_INT 16
7596: PUSH
7597: LD_INT 17
7599: PUSH
7600: LD_INT 18
7602: PUSH
7603: LD_INT 19
7605: PUSH
7606: LD_INT 20
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 23
7617: PUSH
7618: LD_INT 24
7620: PUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 26
7626: PUSH
7627: LD_INT 28
7629: PUSH
7630: LD_INT 30
7632: PUSH
7633: LD_INT 31
7635: PUSH
7636: LD_INT 32
7638: PUSH
7639: LD_INT 34
7641: PUSH
7642: LD_INT 36
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 101
7680: PUSH
7681: LD_INT 102
7683: PUSH
7684: LD_INT 103
7686: PUSH
7687: LD_INT 104
7689: PUSH
7690: LD_INT 105
7692: PUSH
7693: LD_INT 106
7695: PUSH
7696: LD_INT 107
7698: PUSH
7699: LD_INT 108
7701: PUSH
7702: LD_INT 109
7704: PUSH
7705: LD_INT 110
7707: PUSH
7708: LD_INT 111
7710: PUSH
7711: LD_INT 112
7713: PUSH
7714: LD_INT 114
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: ST_TO_ADDR
7736: GO 9323
7738: LD_INT 12
7740: DOUBLE
7741: EQUAL
7742: IFTRUE 7746
7744: GO 7954
7746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7747: LD_ADDR_VAR 0 1
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: LD_INT 3
7760: PUSH
7761: LD_INT 4
7763: PUSH
7764: LD_INT 5
7766: PUSH
7767: LD_INT 6
7769: PUSH
7770: LD_INT 7
7772: PUSH
7773: LD_INT 8
7775: PUSH
7776: LD_INT 9
7778: PUSH
7779: LD_INT 10
7781: PUSH
7782: LD_INT 11
7784: PUSH
7785: LD_INT 12
7787: PUSH
7788: LD_INT 13
7790: PUSH
7791: LD_INT 14
7793: PUSH
7794: LD_INT 15
7796: PUSH
7797: LD_INT 16
7799: PUSH
7800: LD_INT 17
7802: PUSH
7803: LD_INT 18
7805: PUSH
7806: LD_INT 19
7808: PUSH
7809: LD_INT 20
7811: PUSH
7812: LD_INT 21
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 23
7820: PUSH
7821: LD_INT 24
7823: PUSH
7824: LD_INT 25
7826: PUSH
7827: LD_INT 26
7829: PUSH
7830: LD_INT 27
7832: PUSH
7833: LD_INT 28
7835: PUSH
7836: LD_INT 30
7838: PUSH
7839: LD_INT 31
7841: PUSH
7842: LD_INT 32
7844: PUSH
7845: LD_INT 33
7847: PUSH
7848: LD_INT 34
7850: PUSH
7851: LD_INT 36
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 101
7892: PUSH
7893: LD_INT 102
7895: PUSH
7896: LD_INT 103
7898: PUSH
7899: LD_INT 104
7901: PUSH
7902: LD_INT 105
7904: PUSH
7905: LD_INT 106
7907: PUSH
7908: LD_INT 107
7910: PUSH
7911: LD_INT 108
7913: PUSH
7914: LD_INT 109
7916: PUSH
7917: LD_INT 110
7919: PUSH
7920: LD_INT 111
7922: PUSH
7923: LD_INT 112
7925: PUSH
7926: LD_INT 113
7928: PUSH
7929: LD_INT 114
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: ST_TO_ADDR
7952: GO 9323
7954: LD_INT 13
7956: DOUBLE
7957: EQUAL
7958: IFTRUE 7962
7960: GO 8158
7962: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7963: LD_ADDR_VAR 0 1
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 4
7979: PUSH
7980: LD_INT 5
7982: PUSH
7983: LD_INT 8
7985: PUSH
7986: LD_INT 9
7988: PUSH
7989: LD_INT 10
7991: PUSH
7992: LD_INT 11
7994: PUSH
7995: LD_INT 12
7997: PUSH
7998: LD_INT 14
8000: PUSH
8001: LD_INT 15
8003: PUSH
8004: LD_INT 16
8006: PUSH
8007: LD_INT 17
8009: PUSH
8010: LD_INT 18
8012: PUSH
8013: LD_INT 19
8015: PUSH
8016: LD_INT 20
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 22
8024: PUSH
8025: LD_INT 23
8027: PUSH
8028: LD_INT 24
8030: PUSH
8031: LD_INT 25
8033: PUSH
8034: LD_INT 26
8036: PUSH
8037: LD_INT 27
8039: PUSH
8040: LD_INT 28
8042: PUSH
8043: LD_INT 30
8045: PUSH
8046: LD_INT 31
8048: PUSH
8049: LD_INT 32
8051: PUSH
8052: LD_INT 33
8054: PUSH
8055: LD_INT 34
8057: PUSH
8058: LD_INT 36
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 101
8096: PUSH
8097: LD_INT 102
8099: PUSH
8100: LD_INT 103
8102: PUSH
8103: LD_INT 104
8105: PUSH
8106: LD_INT 105
8108: PUSH
8109: LD_INT 106
8111: PUSH
8112: LD_INT 107
8114: PUSH
8115: LD_INT 108
8117: PUSH
8118: LD_INT 109
8120: PUSH
8121: LD_INT 110
8123: PUSH
8124: LD_INT 111
8126: PUSH
8127: LD_INT 112
8129: PUSH
8130: LD_INT 113
8132: PUSH
8133: LD_INT 114
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
8156: GO 9323
8158: LD_INT 14
8160: DOUBLE
8161: EQUAL
8162: IFTRUE 8166
8164: GO 8378
8166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: LD_INT 1
8174: PUSH
8175: LD_INT 2
8177: PUSH
8178: LD_INT 3
8180: PUSH
8181: LD_INT 4
8183: PUSH
8184: LD_INT 5
8186: PUSH
8187: LD_INT 6
8189: PUSH
8190: LD_INT 7
8192: PUSH
8193: LD_INT 8
8195: PUSH
8196: LD_INT 9
8198: PUSH
8199: LD_INT 10
8201: PUSH
8202: LD_INT 11
8204: PUSH
8205: LD_INT 12
8207: PUSH
8208: LD_INT 13
8210: PUSH
8211: LD_INT 14
8213: PUSH
8214: LD_INT 15
8216: PUSH
8217: LD_INT 16
8219: PUSH
8220: LD_INT 17
8222: PUSH
8223: LD_INT 18
8225: PUSH
8226: LD_INT 19
8228: PUSH
8229: LD_INT 20
8231: PUSH
8232: LD_INT 21
8234: PUSH
8235: LD_INT 22
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 24
8243: PUSH
8244: LD_INT 25
8246: PUSH
8247: LD_INT 26
8249: PUSH
8250: LD_INT 27
8252: PUSH
8253: LD_INT 28
8255: PUSH
8256: LD_INT 29
8258: PUSH
8259: LD_INT 30
8261: PUSH
8262: LD_INT 31
8264: PUSH
8265: LD_INT 32
8267: PUSH
8268: LD_INT 33
8270: PUSH
8271: LD_INT 34
8273: PUSH
8274: LD_INT 36
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 101
8316: PUSH
8317: LD_INT 102
8319: PUSH
8320: LD_INT 103
8322: PUSH
8323: LD_INT 104
8325: PUSH
8326: LD_INT 105
8328: PUSH
8329: LD_INT 106
8331: PUSH
8332: LD_INT 107
8334: PUSH
8335: LD_INT 108
8337: PUSH
8338: LD_INT 109
8340: PUSH
8341: LD_INT 110
8343: PUSH
8344: LD_INT 111
8346: PUSH
8347: LD_INT 112
8349: PUSH
8350: LD_INT 113
8352: PUSH
8353: LD_INT 114
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: ST_TO_ADDR
8376: GO 9323
8378: LD_INT 15
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8598
8386: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8387: LD_ADDR_VAR 0 1
8391: PUSH
8392: LD_INT 1
8394: PUSH
8395: LD_INT 2
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: LD_INT 4
8403: PUSH
8404: LD_INT 5
8406: PUSH
8407: LD_INT 6
8409: PUSH
8410: LD_INT 7
8412: PUSH
8413: LD_INT 8
8415: PUSH
8416: LD_INT 9
8418: PUSH
8419: LD_INT 10
8421: PUSH
8422: LD_INT 11
8424: PUSH
8425: LD_INT 12
8427: PUSH
8428: LD_INT 13
8430: PUSH
8431: LD_INT 14
8433: PUSH
8434: LD_INT 15
8436: PUSH
8437: LD_INT 16
8439: PUSH
8440: LD_INT 17
8442: PUSH
8443: LD_INT 18
8445: PUSH
8446: LD_INT 19
8448: PUSH
8449: LD_INT 20
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 23
8460: PUSH
8461: LD_INT 24
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 26
8469: PUSH
8470: LD_INT 27
8472: PUSH
8473: LD_INT 28
8475: PUSH
8476: LD_INT 29
8478: PUSH
8479: LD_INT 30
8481: PUSH
8482: LD_INT 31
8484: PUSH
8485: LD_INT 32
8487: PUSH
8488: LD_INT 33
8490: PUSH
8491: LD_INT 34
8493: PUSH
8494: LD_INT 36
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 101
8536: PUSH
8537: LD_INT 102
8539: PUSH
8540: LD_INT 103
8542: PUSH
8543: LD_INT 104
8545: PUSH
8546: LD_INT 105
8548: PUSH
8549: LD_INT 106
8551: PUSH
8552: LD_INT 107
8554: PUSH
8555: LD_INT 108
8557: PUSH
8558: LD_INT 109
8560: PUSH
8561: LD_INT 110
8563: PUSH
8564: LD_INT 111
8566: PUSH
8567: LD_INT 112
8569: PUSH
8570: LD_INT 113
8572: PUSH
8573: LD_INT 114
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: ST_TO_ADDR
8596: GO 9323
8598: LD_INT 16
8600: DOUBLE
8601: EQUAL
8602: IFTRUE 8606
8604: GO 8730
8606: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8607: LD_ADDR_VAR 0 1
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 4
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 7
8623: PUSH
8624: LD_INT 11
8626: PUSH
8627: LD_INT 12
8629: PUSH
8630: LD_INT 15
8632: PUSH
8633: LD_INT 16
8635: PUSH
8636: LD_INT 20
8638: PUSH
8639: LD_INT 21
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_INT 23
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 26
8653: PUSH
8654: LD_INT 30
8656: PUSH
8657: LD_INT 31
8659: PUSH
8660: LD_INT 32
8662: PUSH
8663: LD_INT 33
8665: PUSH
8666: LD_INT 34
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 101
8692: PUSH
8693: LD_INT 102
8695: PUSH
8696: LD_INT 103
8698: PUSH
8699: LD_INT 106
8701: PUSH
8702: LD_INT 108
8704: PUSH
8705: LD_INT 112
8707: PUSH
8708: LD_INT 113
8710: PUSH
8711: LD_INT 114
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: ST_TO_ADDR
8728: GO 9323
8730: LD_INT 17
8732: DOUBLE
8733: EQUAL
8734: IFTRUE 8738
8736: GO 8950
8738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: LD_INT 3
8752: PUSH
8753: LD_INT 4
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: LD_INT 6
8761: PUSH
8762: LD_INT 7
8764: PUSH
8765: LD_INT 8
8767: PUSH
8768: LD_INT 9
8770: PUSH
8771: LD_INT 10
8773: PUSH
8774: LD_INT 11
8776: PUSH
8777: LD_INT 12
8779: PUSH
8780: LD_INT 13
8782: PUSH
8783: LD_INT 14
8785: PUSH
8786: LD_INT 15
8788: PUSH
8789: LD_INT 16
8791: PUSH
8792: LD_INT 17
8794: PUSH
8795: LD_INT 18
8797: PUSH
8798: LD_INT 19
8800: PUSH
8801: LD_INT 20
8803: PUSH
8804: LD_INT 21
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_INT 23
8812: PUSH
8813: LD_INT 24
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 26
8821: PUSH
8822: LD_INT 27
8824: PUSH
8825: LD_INT 28
8827: PUSH
8828: LD_INT 29
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 31
8836: PUSH
8837: LD_INT 32
8839: PUSH
8840: LD_INT 33
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 36
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 101
8888: PUSH
8889: LD_INT 102
8891: PUSH
8892: LD_INT 103
8894: PUSH
8895: LD_INT 104
8897: PUSH
8898: LD_INT 105
8900: PUSH
8901: LD_INT 106
8903: PUSH
8904: LD_INT 107
8906: PUSH
8907: LD_INT 108
8909: PUSH
8910: LD_INT 109
8912: PUSH
8913: LD_INT 110
8915: PUSH
8916: LD_INT 111
8918: PUSH
8919: LD_INT 112
8921: PUSH
8922: LD_INT 113
8924: PUSH
8925: LD_INT 114
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: ST_TO_ADDR
8948: GO 9323
8950: LD_INT 18
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 9094
8958: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8959: LD_ADDR_VAR 0 1
8963: PUSH
8964: LD_INT 2
8966: PUSH
8967: LD_INT 4
8969: PUSH
8970: LD_INT 5
8972: PUSH
8973: LD_INT 7
8975: PUSH
8976: LD_INT 11
8978: PUSH
8979: LD_INT 12
8981: PUSH
8982: LD_INT 15
8984: PUSH
8985: LD_INT 16
8987: PUSH
8988: LD_INT 20
8990: PUSH
8991: LD_INT 21
8993: PUSH
8994: LD_INT 22
8996: PUSH
8997: LD_INT 23
8999: PUSH
9000: LD_INT 25
9002: PUSH
9003: LD_INT 26
9005: PUSH
9006: LD_INT 30
9008: PUSH
9009: LD_INT 31
9011: PUSH
9012: LD_INT 32
9014: PUSH
9015: LD_INT 33
9017: PUSH
9018: LD_INT 34
9020: PUSH
9021: LD_INT 35
9023: PUSH
9024: LD_INT 36
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 101
9052: PUSH
9053: LD_INT 102
9055: PUSH
9056: LD_INT 103
9058: PUSH
9059: LD_INT 106
9061: PUSH
9062: LD_INT 108
9064: PUSH
9065: LD_INT 112
9067: PUSH
9068: LD_INT 113
9070: PUSH
9071: LD_INT 114
9073: PUSH
9074: LD_INT 115
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: ST_TO_ADDR
9092: GO 9323
9094: LD_INT 19
9096: DOUBLE
9097: EQUAL
9098: IFTRUE 9102
9100: GO 9322
9102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9103: LD_ADDR_VAR 0 1
9107: PUSH
9108: LD_INT 1
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: LD_INT 3
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: LD_INT 5
9122: PUSH
9123: LD_INT 6
9125: PUSH
9126: LD_INT 7
9128: PUSH
9129: LD_INT 8
9131: PUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 11
9140: PUSH
9141: LD_INT 12
9143: PUSH
9144: LD_INT 13
9146: PUSH
9147: LD_INT 14
9149: PUSH
9150: LD_INT 15
9152: PUSH
9153: LD_INT 16
9155: PUSH
9156: LD_INT 17
9158: PUSH
9159: LD_INT 18
9161: PUSH
9162: LD_INT 19
9164: PUSH
9165: LD_INT 20
9167: PUSH
9168: LD_INT 21
9170: PUSH
9171: LD_INT 22
9173: PUSH
9174: LD_INT 23
9176: PUSH
9177: LD_INT 24
9179: PUSH
9180: LD_INT 25
9182: PUSH
9183: LD_INT 26
9185: PUSH
9186: LD_INT 27
9188: PUSH
9189: LD_INT 28
9191: PUSH
9192: LD_INT 29
9194: PUSH
9195: LD_INT 30
9197: PUSH
9198: LD_INT 31
9200: PUSH
9201: LD_INT 32
9203: PUSH
9204: LD_INT 33
9206: PUSH
9207: LD_INT 34
9209: PUSH
9210: LD_INT 35
9212: PUSH
9213: LD_INT 36
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 101
9256: PUSH
9257: LD_INT 102
9259: PUSH
9260: LD_INT 103
9262: PUSH
9263: LD_INT 104
9265: PUSH
9266: LD_INT 105
9268: PUSH
9269: LD_INT 106
9271: PUSH
9272: LD_INT 107
9274: PUSH
9275: LD_INT 108
9277: PUSH
9278: LD_INT 109
9280: PUSH
9281: LD_INT 110
9283: PUSH
9284: LD_INT 111
9286: PUSH
9287: LD_INT 112
9289: PUSH
9290: LD_INT 113
9292: PUSH
9293: LD_INT 114
9295: PUSH
9296: LD_INT 115
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: ST_TO_ADDR
9320: GO 9323
9322: POP
// end else
9323: GO 9542
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_INT 1
9332: PUSH
9333: LD_INT 2
9335: PUSH
9336: LD_INT 3
9338: PUSH
9339: LD_INT 4
9341: PUSH
9342: LD_INT 5
9344: PUSH
9345: LD_INT 6
9347: PUSH
9348: LD_INT 7
9350: PUSH
9351: LD_INT 8
9353: PUSH
9354: LD_INT 9
9356: PUSH
9357: LD_INT 10
9359: PUSH
9360: LD_INT 11
9362: PUSH
9363: LD_INT 12
9365: PUSH
9366: LD_INT 13
9368: PUSH
9369: LD_INT 14
9371: PUSH
9372: LD_INT 15
9374: PUSH
9375: LD_INT 16
9377: PUSH
9378: LD_INT 17
9380: PUSH
9381: LD_INT 18
9383: PUSH
9384: LD_INT 19
9386: PUSH
9387: LD_INT 20
9389: PUSH
9390: LD_INT 21
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 23
9398: PUSH
9399: LD_INT 24
9401: PUSH
9402: LD_INT 25
9404: PUSH
9405: LD_INT 26
9407: PUSH
9408: LD_INT 27
9410: PUSH
9411: LD_INT 28
9413: PUSH
9414: LD_INT 29
9416: PUSH
9417: LD_INT 30
9419: PUSH
9420: LD_INT 31
9422: PUSH
9423: LD_INT 32
9425: PUSH
9426: LD_INT 33
9428: PUSH
9429: LD_INT 34
9431: PUSH
9432: LD_INT 35
9434: PUSH
9435: LD_INT 36
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 101
9478: PUSH
9479: LD_INT 102
9481: PUSH
9482: LD_INT 103
9484: PUSH
9485: LD_INT 104
9487: PUSH
9488: LD_INT 105
9490: PUSH
9491: LD_INT 106
9493: PUSH
9494: LD_INT 107
9496: PUSH
9497: LD_INT 108
9499: PUSH
9500: LD_INT 109
9502: PUSH
9503: LD_INT 110
9505: PUSH
9506: LD_INT 111
9508: PUSH
9509: LD_INT 112
9511: PUSH
9512: LD_INT 113
9514: PUSH
9515: LD_INT 114
9517: PUSH
9518: LD_INT 115
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// if result then
9542: LD_VAR 0 1
9546: IFFALSE 9835
// begin normal :=  ;
9548: LD_ADDR_VAR 0 3
9552: PUSH
9553: LD_STRING 
9555: ST_TO_ADDR
// hardcore :=  ;
9556: LD_ADDR_VAR 0 4
9560: PUSH
9561: LD_STRING 
9563: ST_TO_ADDR
// for i = 1 to normalCounter do
9564: LD_ADDR_VAR 0 5
9568: PUSH
9569: DOUBLE
9570: LD_INT 1
9572: DEC
9573: ST_TO_ADDR
9574: LD_EXP 24
9578: PUSH
9579: FOR_TO
9580: IFFALSE 9681
// begin tmp := 0 ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_STRING 0
9589: ST_TO_ADDR
// if result [ 1 ] then
9590: LD_VAR 0 1
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: IFFALSE 9663
// if result [ 1 ] [ 1 ] = i then
9600: LD_VAR 0 1
9604: PUSH
9605: LD_INT 1
9607: ARRAY
9608: PUSH
9609: LD_INT 1
9611: ARRAY
9612: PUSH
9613: LD_VAR 0 5
9617: EQUAL
9618: IFFALSE 9663
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9620: LD_ADDR_VAR 0 1
9624: PUSH
9625: LD_VAR 0 1
9629: PPUSH
9630: LD_INT 1
9632: PPUSH
9633: LD_VAR 0 1
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 3
9649: PPUSH
9650: CALL_OW 1
9654: ST_TO_ADDR
// tmp := 1 ;
9655: LD_ADDR_VAR 0 2
9659: PUSH
9660: LD_STRING 1
9662: ST_TO_ADDR
// end ; normal := normal & tmp ;
9663: LD_ADDR_VAR 0 3
9667: PUSH
9668: LD_VAR 0 3
9672: PUSH
9673: LD_VAR 0 2
9677: STR
9678: ST_TO_ADDR
// end ;
9679: GO 9579
9681: POP
9682: POP
// for i = 1 to hardcoreCounter do
9683: LD_ADDR_VAR 0 5
9687: PUSH
9688: DOUBLE
9689: LD_INT 1
9691: DEC
9692: ST_TO_ADDR
9693: LD_EXP 25
9697: PUSH
9698: FOR_TO
9699: IFFALSE 9804
// begin tmp := 0 ;
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: LD_STRING 0
9708: ST_TO_ADDR
// if result [ 2 ] then
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 2
9716: ARRAY
9717: IFFALSE 9786
// if result [ 2 ] [ 1 ] = 100 + i then
9719: LD_VAR 0 1
9723: PUSH
9724: LD_INT 2
9726: ARRAY
9727: PUSH
9728: LD_INT 1
9730: ARRAY
9731: PUSH
9732: LD_INT 100
9734: PUSH
9735: LD_VAR 0 5
9739: PLUS
9740: EQUAL
9741: IFFALSE 9786
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9743: LD_ADDR_VAR 0 1
9747: PUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: LD_INT 2
9755: PPUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 2
9763: ARRAY
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 3
9772: PPUSH
9773: CALL_OW 1
9777: ST_TO_ADDR
// tmp := 1 ;
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_STRING 1
9785: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: STR
9801: ST_TO_ADDR
// end ;
9802: GO 9698
9804: POP
9805: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9806: LD_STRING getStreamItemsFromMission("
9808: PUSH
9809: LD_VAR 0 3
9813: STR
9814: PUSH
9815: LD_STRING ","
9817: STR
9818: PUSH
9819: LD_VAR 0 4
9823: STR
9824: PUSH
9825: LD_STRING ")
9827: STR
9828: PPUSH
9829: CALL_OW 559
// end else
9833: GO 9842
// ToLua ( getStreamItemsFromMission("","") ) ;
9835: LD_STRING getStreamItemsFromMission("","")
9837: PPUSH
9838: CALL_OW 559
// end ;
9842: LD_VAR 0 1
9846: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9847: LD_EXP 23
9851: PUSH
9852: LD_EXP 28
9856: AND
9857: IFFALSE 9981
9859: GO 9861
9861: DISABLE
9862: LD_INT 0
9864: PPUSH
9865: PPUSH
// begin enable ;
9866: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9867: LD_ADDR_VAR 0 2
9871: PUSH
9872: LD_INT 22
9874: PUSH
9875: LD_OWVAR 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: LD_INT 34
9889: PUSH
9890: LD_INT 7
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 34
9899: PUSH
9900: LD_INT 45
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 34
9909: PUSH
9910: LD_INT 28
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 34
9919: PUSH
9920: LD_INT 47
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: ST_TO_ADDR
// if not tmp then
9943: LD_VAR 0 2
9947: NOT
9948: IFFALSE 9952
// exit ;
9950: GO 9981
// for i in tmp do
9952: LD_ADDR_VAR 0 1
9956: PUSH
9957: LD_VAR 0 2
9961: PUSH
9962: FOR_IN
9963: IFFALSE 9979
// begin SetLives ( i , 0 ) ;
9965: LD_VAR 0 1
9969: PPUSH
9970: LD_INT 0
9972: PPUSH
9973: CALL_OW 234
// end ;
9977: GO 9962
9979: POP
9980: POP
// end ;
9981: PPOPN 2
9983: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9984: LD_EXP 23
9988: PUSH
9989: LD_EXP 29
9993: AND
9994: IFFALSE 10078
9996: GO 9998
9998: DISABLE
9999: LD_INT 0
10001: PPUSH
10002: PPUSH
// begin enable ;
10003: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10004: LD_ADDR_VAR 0 2
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_OWVAR 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 32
10023: PUSH
10024: LD_INT 3
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PPUSH
10035: CALL_OW 69
10039: ST_TO_ADDR
// if not tmp then
10040: LD_VAR 0 2
10044: NOT
10045: IFFALSE 10049
// exit ;
10047: GO 10078
// for i in tmp do
10049: LD_ADDR_VAR 0 1
10053: PUSH
10054: LD_VAR 0 2
10058: PUSH
10059: FOR_IN
10060: IFFALSE 10076
// begin SetLives ( i , 0 ) ;
10062: LD_VAR 0 1
10066: PPUSH
10067: LD_INT 0
10069: PPUSH
10070: CALL_OW 234
// end ;
10074: GO 10059
10076: POP
10077: POP
// end ;
10078: PPOPN 2
10080: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10081: LD_EXP 23
10085: PUSH
10086: LD_EXP 26
10090: AND
10091: IFFALSE 10184
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin enable ;
10099: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10100: LD_ADDR_VAR 0 1
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_OWVAR 2
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 25
10122: PUSH
10123: LD_INT 5
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 25
10132: PUSH
10133: LD_INT 9
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 25
10142: PUSH
10143: LD_INT 8
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: PUSH
10165: FOR_IN
10166: IFFALSE 10182
// begin SetClass ( i , 1 ) ;
10168: LD_VAR 0 1
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 336
// end ;
10180: GO 10165
10182: POP
10183: POP
// end ;
10184: PPOPN 1
10186: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10187: LD_EXP 23
10191: PUSH
10192: LD_EXP 27
10196: AND
10197: PUSH
10198: LD_OWVAR 65
10202: PUSH
10203: LD_INT 7
10205: LESS
10206: AND
10207: IFFALSE 10221
10209: GO 10211
10211: DISABLE
// begin enable ;
10212: ENABLE
// game_speed := 7 ;
10213: LD_ADDR_OWVAR 65
10217: PUSH
10218: LD_INT 7
10220: ST_TO_ADDR
// end ;
10221: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10222: LD_EXP 23
10226: PUSH
10227: LD_EXP 30
10231: AND
10232: IFFALSE 10434
10234: GO 10236
10236: DISABLE
10237: LD_INT 0
10239: PPUSH
10240: PPUSH
10241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10242: LD_ADDR_VAR 0 3
10246: PUSH
10247: LD_INT 81
10249: PUSH
10250: LD_OWVAR 2
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 21
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PPUSH
10273: CALL_OW 69
10277: ST_TO_ADDR
// if not tmp then
10278: LD_VAR 0 3
10282: NOT
10283: IFFALSE 10287
// exit ;
10285: GO 10434
// if tmp > 5 then
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 5
10294: GREATER
10295: IFFALSE 10307
// k := 5 else
10297: LD_ADDR_VAR 0 2
10301: PUSH
10302: LD_INT 5
10304: ST_TO_ADDR
10305: GO 10317
// k := tmp ;
10307: LD_ADDR_VAR 0 2
10311: PUSH
10312: LD_VAR 0 3
10316: ST_TO_ADDR
// for i := 1 to k do
10317: LD_ADDR_VAR 0 1
10321: PUSH
10322: DOUBLE
10323: LD_INT 1
10325: DEC
10326: ST_TO_ADDR
10327: LD_VAR 0 2
10331: PUSH
10332: FOR_TO
10333: IFFALSE 10432
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10335: LD_VAR 0 3
10339: PUSH
10340: LD_VAR 0 1
10344: ARRAY
10345: PPUSH
10346: LD_VAR 0 1
10350: PUSH
10351: LD_INT 4
10353: MOD
10354: PUSH
10355: LD_INT 1
10357: PLUS
10358: PPUSH
10359: CALL_OW 259
10363: PUSH
10364: LD_INT 10
10366: LESS
10367: IFFALSE 10430
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10369: LD_VAR 0 3
10373: PUSH
10374: LD_VAR 0 1
10378: ARRAY
10379: PPUSH
10380: LD_VAR 0 1
10384: PUSH
10385: LD_INT 4
10387: MOD
10388: PUSH
10389: LD_INT 1
10391: PLUS
10392: PPUSH
10393: LD_VAR 0 3
10397: PUSH
10398: LD_VAR 0 1
10402: ARRAY
10403: PPUSH
10404: LD_VAR 0 1
10408: PUSH
10409: LD_INT 4
10411: MOD
10412: PUSH
10413: LD_INT 1
10415: PLUS
10416: PPUSH
10417: CALL_OW 259
10421: PUSH
10422: LD_INT 1
10424: PLUS
10425: PPUSH
10426: CALL_OW 237
10430: GO 10332
10432: POP
10433: POP
// end ;
10434: PPOPN 3
10436: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10437: LD_EXP 23
10441: PUSH
10442: LD_EXP 31
10446: AND
10447: IFFALSE 10467
10449: GO 10451
10451: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10452: LD_INT 4
10454: PPUSH
10455: LD_OWVAR 2
10459: PPUSH
10460: LD_INT 0
10462: PPUSH
10463: CALL_OW 324
10467: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10468: LD_EXP 23
10472: PUSH
10473: LD_EXP 60
10477: AND
10478: IFFALSE 10498
10480: GO 10482
10482: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10483: LD_INT 19
10485: PPUSH
10486: LD_OWVAR 2
10490: PPUSH
10491: LD_INT 0
10493: PPUSH
10494: CALL_OW 324
10498: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10499: LD_EXP 23
10503: PUSH
10504: LD_EXP 32
10508: AND
10509: IFFALSE 10611
10511: GO 10513
10513: DISABLE
10514: LD_INT 0
10516: PPUSH
10517: PPUSH
// begin enable ;
10518: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_OWVAR 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: LD_INT 34
10541: PUSH
10542: LD_INT 11
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 34
10551: PUSH
10552: LD_INT 30
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PPUSH
10568: CALL_OW 69
10572: ST_TO_ADDR
// if not tmp then
10573: LD_VAR 0 2
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10611
// for i in tmp do
10582: LD_ADDR_VAR 0 1
10586: PUSH
10587: LD_VAR 0 2
10591: PUSH
10592: FOR_IN
10593: IFFALSE 10609
// begin SetLives ( i , 0 ) ;
10595: LD_VAR 0 1
10599: PPUSH
10600: LD_INT 0
10602: PPUSH
10603: CALL_OW 234
// end ;
10607: GO 10592
10609: POP
10610: POP
// end ;
10611: PPOPN 2
10613: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10614: LD_EXP 23
10618: PUSH
10619: LD_EXP 33
10623: AND
10624: IFFALSE 10644
10626: GO 10628
10628: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10629: LD_INT 32
10631: PPUSH
10632: LD_OWVAR 2
10636: PPUSH
10637: LD_INT 0
10639: PPUSH
10640: CALL_OW 324
10644: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10645: LD_EXP 23
10649: PUSH
10650: LD_EXP 34
10654: AND
10655: IFFALSE 10836
10657: GO 10659
10659: DISABLE
10660: LD_INT 0
10662: PPUSH
10663: PPUSH
10664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_INT 22
10672: PUSH
10673: LD_OWVAR 2
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 33
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PPUSH
10696: CALL_OW 69
10700: ST_TO_ADDR
// if not tmp then
10701: LD_VAR 0 2
10705: NOT
10706: IFFALSE 10710
// exit ;
10708: GO 10836
// side := 0 ;
10710: LD_ADDR_VAR 0 3
10714: PUSH
10715: LD_INT 0
10717: ST_TO_ADDR
// for i := 1 to 8 do
10718: LD_ADDR_VAR 0 1
10722: PUSH
10723: DOUBLE
10724: LD_INT 1
10726: DEC
10727: ST_TO_ADDR
10728: LD_INT 8
10730: PUSH
10731: FOR_TO
10732: IFFALSE 10780
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10734: LD_OWVAR 2
10738: PUSH
10739: LD_VAR 0 1
10743: NONEQUAL
10744: PUSH
10745: LD_OWVAR 2
10749: PPUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 81
10759: PUSH
10760: LD_INT 2
10762: EQUAL
10763: AND
10764: IFFALSE 10778
// begin side := i ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_VAR 0 1
10775: ST_TO_ADDR
// break ;
10776: GO 10780
// end ;
10778: GO 10731
10780: POP
10781: POP
// if not side then
10782: LD_VAR 0 3
10786: NOT
10787: IFFALSE 10791
// exit ;
10789: GO 10836
// for i := 1 to tmp do
10791: LD_ADDR_VAR 0 1
10795: PUSH
10796: DOUBLE
10797: LD_INT 1
10799: DEC
10800: ST_TO_ADDR
10801: LD_VAR 0 2
10805: PUSH
10806: FOR_TO
10807: IFFALSE 10834
// if Prob ( 60 ) then
10809: LD_INT 60
10811: PPUSH
10812: CALL_OW 13
10816: IFFALSE 10832
// SetSide ( i , side ) ;
10818: LD_VAR 0 1
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: CALL_OW 235
10832: GO 10806
10834: POP
10835: POP
// end ;
10836: PPOPN 3
10838: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10839: LD_EXP 23
10843: PUSH
10844: LD_EXP 36
10848: AND
10849: IFFALSE 10968
10851: GO 10853
10853: DISABLE
10854: LD_INT 0
10856: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10857: LD_ADDR_VAR 0 1
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_OWVAR 2
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 21
10876: PUSH
10877: LD_INT 1
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 3
10886: PUSH
10887: LD_INT 23
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 69
10910: PUSH
10911: FOR_IN
10912: IFFALSE 10966
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 257
10923: PUSH
10924: LD_INT 1
10926: PUSH
10927: LD_INT 2
10929: PUSH
10930: LD_INT 3
10932: PUSH
10933: LD_INT 4
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: IN
10942: IFFALSE 10964
// SetClass ( un , rand ( 1 , 4 ) ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: LD_INT 4
10954: PPUSH
10955: CALL_OW 12
10959: PPUSH
10960: CALL_OW 336
10964: GO 10911
10966: POP
10967: POP
// end ;
10968: PPOPN 1
10970: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10971: LD_EXP 23
10975: PUSH
10976: LD_EXP 35
10980: AND
10981: IFFALSE 11060
10983: GO 10985
10985: DISABLE
10986: LD_INT 0
10988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_OWVAR 2
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 21
11008: PUSH
11009: LD_INT 3
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 69
11024: ST_TO_ADDR
// if not tmp then
11025: LD_VAR 0 1
11029: NOT
11030: IFFALSE 11034
// exit ;
11032: GO 11060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11034: LD_VAR 0 1
11038: PUSH
11039: LD_INT 1
11041: PPUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 12
11051: ARRAY
11052: PPUSH
11053: LD_INT 100
11055: PPUSH
11056: CALL_OW 234
// end ;
11060: PPOPN 1
11062: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11063: LD_EXP 23
11067: PUSH
11068: LD_EXP 37
11072: AND
11073: IFFALSE 11171
11075: GO 11077
11077: DISABLE
11078: LD_INT 0
11080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: LD_INT 22
11088: PUSH
11089: LD_OWVAR 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 21
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 69
11116: ST_TO_ADDR
// if not tmp then
11117: LD_VAR 0 1
11121: NOT
11122: IFFALSE 11126
// exit ;
11124: GO 11171
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11126: LD_VAR 0 1
11130: PUSH
11131: LD_INT 1
11133: PPUSH
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL_OW 12
11143: ARRAY
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: LD_INT 4
11150: PPUSH
11151: CALL_OW 12
11155: PPUSH
11156: LD_INT 3000
11158: PPUSH
11159: LD_INT 9000
11161: PPUSH
11162: CALL_OW 12
11166: PPUSH
11167: CALL_OW 492
// end ;
11171: PPOPN 1
11173: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11174: LD_EXP 23
11178: PUSH
11179: LD_EXP 38
11183: AND
11184: IFFALSE 11204
11186: GO 11188
11188: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11189: LD_INT 1
11191: PPUSH
11192: LD_OWVAR 2
11196: PPUSH
11197: LD_INT 0
11199: PPUSH
11200: CALL_OW 324
11204: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11205: LD_EXP 23
11209: PUSH
11210: LD_EXP 39
11214: AND
11215: IFFALSE 11298
11217: GO 11219
11219: DISABLE
11220: LD_INT 0
11222: PPUSH
11223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11224: LD_ADDR_VAR 0 2
11228: PUSH
11229: LD_INT 22
11231: PUSH
11232: LD_OWVAR 2
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 21
11243: PUSH
11244: LD_INT 3
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: ST_TO_ADDR
// if not tmp then
11260: LD_VAR 0 2
11264: NOT
11265: IFFALSE 11269
// exit ;
11267: GO 11298
// for i in tmp do
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_VAR 0 2
11278: PUSH
11279: FOR_IN
11280: IFFALSE 11296
// SetBLevel ( i , 10 ) ;
11282: LD_VAR 0 1
11286: PPUSH
11287: LD_INT 10
11289: PPUSH
11290: CALL_OW 241
11294: GO 11279
11296: POP
11297: POP
// end ;
11298: PPOPN 2
11300: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11301: LD_EXP 23
11305: PUSH
11306: LD_EXP 40
11310: AND
11311: IFFALSE 11422
11313: GO 11315
11315: DISABLE
11316: LD_INT 0
11318: PPUSH
11319: PPUSH
11320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_OWVAR 2
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: ST_TO_ADDR
// if not tmp then
11357: LD_VAR 0 3
11361: NOT
11362: IFFALSE 11366
// exit ;
11364: GO 11422
// un := tmp [ rand ( 1 , tmp ) ] ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_VAR 0 3
11375: PUSH
11376: LD_INT 1
11378: PPUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: CALL_OW 12
11388: ARRAY
11389: ST_TO_ADDR
// if Crawls ( un ) then
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL_OW 318
11399: IFFALSE 11410
// ComWalk ( un ) ;
11401: LD_VAR 0 2
11405: PPUSH
11406: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11410: LD_VAR 0 2
11414: PPUSH
11415: LD_INT 5
11417: PPUSH
11418: CALL_OW 336
// end ;
11422: PPOPN 3
11424: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11425: LD_EXP 23
11429: PUSH
11430: LD_EXP 41
11434: AND
11435: PUSH
11436: LD_OWVAR 67
11440: PUSH
11441: LD_INT 3
11443: LESS
11444: AND
11445: IFFALSE 11464
11447: GO 11449
11449: DISABLE
// Difficulty := Difficulty + 1 ;
11450: LD_ADDR_OWVAR 67
11454: PUSH
11455: LD_OWVAR 67
11459: PUSH
11460: LD_INT 1
11462: PLUS
11463: ST_TO_ADDR
11464: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11465: LD_EXP 23
11469: PUSH
11470: LD_EXP 42
11474: AND
11475: IFFALSE 11578
11477: GO 11479
11479: DISABLE
11480: LD_INT 0
11482: PPUSH
// begin for i := 1 to 5 do
11483: LD_ADDR_VAR 0 1
11487: PUSH
11488: DOUBLE
11489: LD_INT 1
11491: DEC
11492: ST_TO_ADDR
11493: LD_INT 5
11495: PUSH
11496: FOR_TO
11497: IFFALSE 11576
// begin uc_nation := nation_nature ;
11499: LD_ADDR_OWVAR 21
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// uc_side := 0 ;
11507: LD_ADDR_OWVAR 20
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11515: LD_ADDR_OWVAR 29
11519: PUSH
11520: LD_INT 12
11522: PUSH
11523: LD_INT 12
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: ST_TO_ADDR
// hc_agressivity := 20 ;
11530: LD_ADDR_OWVAR 35
11534: PUSH
11535: LD_INT 20
11537: ST_TO_ADDR
// hc_class := class_tiger ;
11538: LD_ADDR_OWVAR 28
11542: PUSH
11543: LD_INT 14
11545: ST_TO_ADDR
// hc_gallery :=  ;
11546: LD_ADDR_OWVAR 33
11550: PUSH
11551: LD_STRING 
11553: ST_TO_ADDR
// hc_name :=  ;
11554: LD_ADDR_OWVAR 26
11558: PUSH
11559: LD_STRING 
11561: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11562: CALL_OW 44
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 51
// end ;
11574: GO 11496
11576: POP
11577: POP
// end ;
11578: PPOPN 1
11580: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11581: LD_EXP 23
11585: PUSH
11586: LD_EXP 43
11590: AND
11591: IFFALSE 11600
11593: GO 11595
11595: DISABLE
// StreamSibBomb ;
11596: CALL 11601 0 0
11600: END
// export function StreamSibBomb ; var i , x , y ; begin
11601: LD_INT 0
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
// result := false ;
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_INT 0
11614: ST_TO_ADDR
// for i := 1 to 16 do
11615: LD_ADDR_VAR 0 2
11619: PUSH
11620: DOUBLE
11621: LD_INT 1
11623: DEC
11624: ST_TO_ADDR
11625: LD_INT 16
11627: PUSH
11628: FOR_TO
11629: IFFALSE 11828
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 10
11638: PUSH
11639: LD_INT 20
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: LD_INT 40
11647: PUSH
11648: LD_INT 50
11650: PUSH
11651: LD_INT 60
11653: PUSH
11654: LD_INT 70
11656: PUSH
11657: LD_INT 80
11659: PUSH
11660: LD_INT 90
11662: PUSH
11663: LD_INT 100
11665: PUSH
11666: LD_INT 110
11668: PUSH
11669: LD_INT 120
11671: PUSH
11672: LD_INT 130
11674: PUSH
11675: LD_INT 140
11677: PUSH
11678: LD_INT 150
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 1
11700: PPUSH
11701: LD_INT 15
11703: PPUSH
11704: CALL_OW 12
11708: ARRAY
11709: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11710: LD_ADDR_VAR 0 4
11714: PUSH
11715: LD_INT 10
11717: PUSH
11718: LD_INT 20
11720: PUSH
11721: LD_INT 30
11723: PUSH
11724: LD_INT 40
11726: PUSH
11727: LD_INT 50
11729: PUSH
11730: LD_INT 60
11732: PUSH
11733: LD_INT 70
11735: PUSH
11736: LD_INT 80
11738: PUSH
11739: LD_INT 90
11741: PUSH
11742: LD_INT 100
11744: PUSH
11745: LD_INT 110
11747: PUSH
11748: LD_INT 120
11750: PUSH
11751: LD_INT 130
11753: PUSH
11754: LD_INT 140
11756: PUSH
11757: LD_INT 150
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 1
11779: PPUSH
11780: LD_INT 15
11782: PPUSH
11783: CALL_OW 12
11787: ARRAY
11788: ST_TO_ADDR
// if ValidHex ( x , y ) then
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_VAR 0 4
11798: PPUSH
11799: CALL_OW 488
11803: IFFALSE 11826
// begin result := [ x , y ] ;
11805: LD_ADDR_VAR 0 1
11809: PUSH
11810: LD_VAR 0 3
11814: PUSH
11815: LD_VAR 0 4
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: ST_TO_ADDR
// break ;
11824: GO 11828
// end ; end ;
11826: GO 11628
11828: POP
11829: POP
// if result then
11830: LD_VAR 0 1
11834: IFFALSE 11894
// begin ToLua ( playSibBomb() ) ;
11836: LD_STRING playSibBomb()
11838: PPUSH
11839: CALL_OW 559
// wait ( 0 0$14 ) ;
11843: LD_INT 490
11845: PPUSH
11846: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11850: LD_VAR 0 1
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: PPUSH
11859: LD_VAR 0 1
11863: PUSH
11864: LD_INT 2
11866: ARRAY
11867: PPUSH
11868: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11872: LD_VAR 0 1
11876: PUSH
11877: LD_INT 1
11879: ARRAY
11880: PPUSH
11881: LD_VAR 0 1
11885: PUSH
11886: LD_INT 2
11888: ARRAY
11889: PPUSH
11890: CALL_OW 429
// end ; end ;
11894: LD_VAR 0 1
11898: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11899: LD_EXP 23
11903: PUSH
11904: LD_EXP 45
11908: AND
11909: IFFALSE 11921
11911: GO 11913
11913: DISABLE
// YouLost (  ) ;
11914: LD_STRING 
11916: PPUSH
11917: CALL_OW 104
11921: END
// every 0 0$1 trigger StreamModeActive and sFog do
11922: LD_EXP 23
11926: PUSH
11927: LD_EXP 44
11931: AND
11932: IFFALSE 11946
11934: GO 11936
11936: DISABLE
// FogOff ( your_side ) ;
11937: LD_OWVAR 2
11941: PPUSH
11942: CALL_OW 344
11946: END
// every 0 0$1 trigger StreamModeActive and sSun do
11947: LD_EXP 23
11951: PUSH
11952: LD_EXP 46
11956: AND
11957: IFFALSE 11985
11959: GO 11961
11961: DISABLE
// begin solar_recharge_percent := 0 ;
11962: LD_ADDR_OWVAR 79
11966: PUSH
11967: LD_INT 0
11969: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11970: LD_INT 10500
11972: PPUSH
11973: CALL_OW 67
// solar_recharge_percent := 100 ;
11977: LD_ADDR_OWVAR 79
11981: PUSH
11982: LD_INT 100
11984: ST_TO_ADDR
// end ;
11985: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11986: LD_EXP 23
11990: PUSH
11991: LD_EXP 47
11995: AND
11996: IFFALSE 12235
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
12005: PPUSH
// begin tmp := [ ] ;
12006: LD_ADDR_VAR 0 3
12010: PUSH
12011: EMPTY
12012: ST_TO_ADDR
// for i := 1 to 6 do
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: DOUBLE
12019: LD_INT 1
12021: DEC
12022: ST_TO_ADDR
12023: LD_INT 6
12025: PUSH
12026: FOR_TO
12027: IFFALSE 12132
// begin uc_nation := nation_nature ;
12029: LD_ADDR_OWVAR 21
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// uc_side := 0 ;
12037: LD_ADDR_OWVAR 20
12041: PUSH
12042: LD_INT 0
12044: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12045: LD_ADDR_OWVAR 29
12049: PUSH
12050: LD_INT 12
12052: PUSH
12053: LD_INT 12
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: ST_TO_ADDR
// hc_agressivity := 20 ;
12060: LD_ADDR_OWVAR 35
12064: PUSH
12065: LD_INT 20
12067: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12068: LD_ADDR_OWVAR 28
12072: PUSH
12073: LD_INT 17
12075: ST_TO_ADDR
// hc_gallery :=  ;
12076: LD_ADDR_OWVAR 33
12080: PUSH
12081: LD_STRING 
12083: ST_TO_ADDR
// hc_name :=  ;
12084: LD_ADDR_OWVAR 26
12088: PUSH
12089: LD_STRING 
12091: ST_TO_ADDR
// un := CreateHuman ;
12092: LD_ADDR_VAR 0 2
12096: PUSH
12097: CALL_OW 44
12101: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12102: LD_VAR 0 2
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 51
// tmp := tmp ^ un ;
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: LD_VAR 0 3
12123: PUSH
12124: LD_VAR 0 2
12128: ADD
12129: ST_TO_ADDR
// end ;
12130: GO 12026
12132: POP
12133: POP
// repeat wait ( 0 0$1 ) ;
12134: LD_INT 35
12136: PPUSH
12137: CALL_OW 67
// for un in tmp do
12141: LD_ADDR_VAR 0 2
12145: PUSH
12146: LD_VAR 0 3
12150: PUSH
12151: FOR_IN
12152: IFFALSE 12226
// begin if IsDead ( un ) then
12154: LD_VAR 0 2
12158: PPUSH
12159: CALL_OW 301
12163: IFFALSE 12183
// begin tmp := tmp diff un ;
12165: LD_ADDR_VAR 0 3
12169: PUSH
12170: LD_VAR 0 3
12174: PUSH
12175: LD_VAR 0 2
12179: DIFF
12180: ST_TO_ADDR
// continue ;
12181: GO 12151
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_INT 3
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_INT 0
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 69
12209: PPUSH
12210: LD_VAR 0 2
12214: PPUSH
12215: CALL_OW 74
12219: PPUSH
12220: CALL_OW 115
// end ;
12224: GO 12151
12226: POP
12227: POP
// until not tmp ;
12228: LD_VAR 0 3
12232: NOT
12233: IFFALSE 12134
// end ;
12235: PPOPN 3
12237: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12238: LD_EXP 23
12242: PUSH
12243: LD_EXP 48
12247: AND
12248: IFFALSE 12302
12250: GO 12252
12252: DISABLE
// begin ToLua ( displayTroll(); ) ;
12253: LD_STRING displayTroll();
12255: PPUSH
12256: CALL_OW 559
// wait ( 3 3$00 ) ;
12260: LD_INT 6300
12262: PPUSH
12263: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12267: LD_STRING hideTroll();
12269: PPUSH
12270: CALL_OW 559
// wait ( 1 1$00 ) ;
12274: LD_INT 2100
12276: PPUSH
12277: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12281: LD_STRING displayTroll();
12283: PPUSH
12284: CALL_OW 559
// wait ( 1 1$00 ) ;
12288: LD_INT 2100
12290: PPUSH
12291: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12295: LD_STRING hideTroll();
12297: PPUSH
12298: CALL_OW 559
// end ;
12302: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12303: LD_EXP 23
12307: PUSH
12308: LD_EXP 49
12312: AND
12313: IFFALSE 12376
12315: GO 12317
12317: DISABLE
12318: LD_INT 0
12320: PPUSH
// begin p := 0 ;
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 0
12328: ST_TO_ADDR
// repeat game_speed := 1 ;
12329: LD_ADDR_OWVAR 65
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12337: LD_INT 35
12339: PPUSH
12340: CALL_OW 67
// p := p + 1 ;
12344: LD_ADDR_VAR 0 1
12348: PUSH
12349: LD_VAR 0 1
12353: PUSH
12354: LD_INT 1
12356: PLUS
12357: ST_TO_ADDR
// until p >= 60 ;
12358: LD_VAR 0 1
12362: PUSH
12363: LD_INT 60
12365: GREATEREQUAL
12366: IFFALSE 12329
// game_speed := 4 ;
12368: LD_ADDR_OWVAR 65
12372: PUSH
12373: LD_INT 4
12375: ST_TO_ADDR
// end ;
12376: PPOPN 1
12378: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12379: LD_EXP 23
12383: PUSH
12384: LD_EXP 50
12388: AND
12389: IFFALSE 12535
12391: GO 12393
12393: DISABLE
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_OWVAR 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 0
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PPUSH
12447: CALL_OW 69
12451: ST_TO_ADDR
// if not depot then
12452: LD_VAR 0 1
12456: NOT
12457: IFFALSE 12461
// exit ;
12459: GO 12535
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12461: LD_ADDR_VAR 0 2
12465: PUSH
12466: LD_VAR 0 1
12470: PUSH
12471: LD_INT 1
12473: PPUSH
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 12
12483: ARRAY
12484: PPUSH
12485: CALL_OW 274
12489: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12490: LD_VAR 0 2
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: LD_INT 0
12500: PPUSH
12501: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12505: LD_VAR 0 2
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: LD_INT 0
12515: PPUSH
12516: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12520: LD_VAR 0 2
12524: PPUSH
12525: LD_INT 3
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 277
// end ;
12535: PPOPN 2
12537: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12538: LD_EXP 23
12542: PUSH
12543: LD_EXP 51
12547: AND
12548: IFFALSE 12645
12550: GO 12552
12552: DISABLE
12553: LD_INT 0
12555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12556: LD_ADDR_VAR 0 1
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 21
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 3
12585: PUSH
12586: LD_INT 23
12588: PUSH
12589: LD_INT 0
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// if not tmp then
12610: LD_VAR 0 1
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: LD_INT 200
12640: PPUSH
12641: CALL_OW 234
// end ;
12645: PPOPN 1
12647: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12648: LD_EXP 23
12652: PUSH
12653: LD_EXP 52
12657: AND
12658: IFFALSE 12737
12660: GO 12662
12662: DISABLE
12663: LD_INT 0
12665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12666: LD_ADDR_VAR 0 1
12670: PUSH
12671: LD_INT 22
12673: PUSH
12674: LD_OWVAR 2
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 21
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: ST_TO_ADDR
// if not tmp then
12702: LD_VAR 0 1
12706: NOT
12707: IFFALSE 12711
// exit ;
12709: GO 12737
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: PPUSH
12719: LD_VAR 0 1
12723: PPUSH
12724: CALL_OW 12
12728: ARRAY
12729: PPUSH
12730: LD_INT 60
12732: PPUSH
12733: CALL_OW 234
// end ;
12737: PPOPN 1
12739: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12740: LD_EXP 23
12744: PUSH
12745: LD_EXP 53
12749: AND
12750: IFFALSE 12849
12752: GO 12754
12754: DISABLE
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// begin enable ;
12759: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12760: LD_ADDR_VAR 0 1
12764: PUSH
12765: LD_INT 22
12767: PUSH
12768: LD_OWVAR 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 61
12779: PUSH
12780: EMPTY
12781: LIST
12782: PUSH
12783: LD_INT 33
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: LIST
12797: PPUSH
12798: CALL_OW 69
12802: ST_TO_ADDR
// if not tmp then
12803: LD_VAR 0 1
12807: NOT
12808: IFFALSE 12812
// exit ;
12810: GO 12849
// for i in tmp do
12812: LD_ADDR_VAR 0 2
12816: PUSH
12817: LD_VAR 0 1
12821: PUSH
12822: FOR_IN
12823: IFFALSE 12847
// if IsControledBy ( i ) then
12825: LD_VAR 0 2
12829: PPUSH
12830: CALL_OW 312
12834: IFFALSE 12845
// ComUnlink ( i ) ;
12836: LD_VAR 0 2
12840: PPUSH
12841: CALL_OW 136
12845: GO 12822
12847: POP
12848: POP
// end ;
12849: PPOPN 2
12851: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12852: LD_EXP 23
12856: PUSH
12857: LD_EXP 54
12861: AND
12862: IFFALSE 13002
12864: GO 12866
12866: DISABLE
12867: LD_INT 0
12869: PPUSH
12870: PPUSH
// begin ToLua ( displayPowell(); ) ;
12871: LD_STRING displayPowell();
12873: PPUSH
12874: CALL_OW 559
// uc_side := 0 ;
12878: LD_ADDR_OWVAR 20
12882: PUSH
12883: LD_INT 0
12885: ST_TO_ADDR
// uc_nation := 2 ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_INT 2
12893: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12894: LD_ADDR_OWVAR 37
12898: PUSH
12899: LD_INT 14
12901: ST_TO_ADDR
// vc_engine := engine_siberite ;
12902: LD_ADDR_OWVAR 39
12906: PUSH
12907: LD_INT 3
12909: ST_TO_ADDR
// vc_control := control_apeman ;
12910: LD_ADDR_OWVAR 38
12914: PUSH
12915: LD_INT 5
12917: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12918: LD_ADDR_OWVAR 40
12922: PUSH
12923: LD_INT 29
12925: ST_TO_ADDR
// un := CreateVehicle ;
12926: LD_ADDR_VAR 0 2
12930: PUSH
12931: CALL_OW 45
12935: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12948: LD_INT 35
12950: PPUSH
12951: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12955: LD_VAR 0 2
12959: PPUSH
12960: LD_INT 22
12962: PUSH
12963: LD_OWVAR 2
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 69
12976: PPUSH
12977: LD_VAR 0 2
12981: PPUSH
12982: CALL_OW 74
12986: PPUSH
12987: CALL_OW 115
// until IsDead ( un ) ;
12991: LD_VAR 0 2
12995: PPUSH
12996: CALL_OW 301
13000: IFFALSE 12948
// end ;
13002: PPOPN 2
13004: END
// every 0 0$1 trigger StreamModeActive and sStu do
13005: LD_EXP 23
13009: PUSH
13010: LD_EXP 62
13014: AND
13015: IFFALSE 13031
13017: GO 13019
13019: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13020: LD_STRING displayStucuk();
13022: PPUSH
13023: CALL_OW 559
// ResetFog ;
13027: CALL_OW 335
// end ;
13031: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13032: LD_EXP 23
13036: PUSH
13037: LD_EXP 55
13041: AND
13042: IFFALSE 13183
13044: GO 13046
13046: DISABLE
13047: LD_INT 0
13049: PPUSH
13050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_OWVAR 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 1
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: ST_TO_ADDR
// if not tmp then
13087: LD_VAR 0 2
13091: NOT
13092: IFFALSE 13096
// exit ;
13094: GO 13183
// un := tmp [ rand ( 1 , tmp ) ] ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: LD_INT 1
13108: PPUSH
13109: LD_VAR 0 2
13113: PPUSH
13114: CALL_OW 12
13118: ARRAY
13119: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13120: LD_VAR 0 1
13124: PPUSH
13125: LD_INT 0
13127: PPUSH
13128: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13132: LD_VAR 0 1
13136: PPUSH
13137: LD_OWVAR 3
13141: PUSH
13142: LD_VAR 0 1
13146: DIFF
13147: PPUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 74
13157: PPUSH
13158: CALL_OW 115
// wait ( 0 0$20 ) ;
13162: LD_INT 700
13164: PPUSH
13165: CALL_OW 67
// SetSide ( un , your_side ) ;
13169: LD_VAR 0 1
13173: PPUSH
13174: LD_OWVAR 2
13178: PPUSH
13179: CALL_OW 235
// end ;
13183: PPOPN 2
13185: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13186: LD_EXP 23
13190: PUSH
13191: LD_EXP 56
13195: AND
13196: IFFALSE 13302
13198: GO 13200
13200: DISABLE
13201: LD_INT 0
13203: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13204: LD_ADDR_VAR 0 1
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_OWVAR 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: LD_INT 30
13226: PUSH
13227: LD_INT 0
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 30
13236: PUSH
13237: LD_INT 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 69
13257: ST_TO_ADDR
// if not depot then
13258: LD_VAR 0 1
13262: NOT
13263: IFFALSE 13267
// exit ;
13265: GO 13302
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13267: LD_VAR 0 1
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: CALL_OW 250
13280: PPUSH
13281: LD_VAR 0 1
13285: PUSH
13286: LD_INT 1
13288: ARRAY
13289: PPUSH
13290: CALL_OW 251
13294: PPUSH
13295: LD_INT 70
13297: PPUSH
13298: CALL_OW 495
// end ;
13302: PPOPN 1
13304: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13305: LD_EXP 23
13309: PUSH
13310: LD_EXP 57
13314: AND
13315: IFFALSE 13526
13317: GO 13319
13319: DISABLE
13320: LD_INT 0
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13327: LD_ADDR_VAR 0 5
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_OWVAR 2
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PPUSH
13358: CALL_OW 69
13362: ST_TO_ADDR
// if not tmp then
13363: LD_VAR 0 5
13367: NOT
13368: IFFALSE 13372
// exit ;
13370: GO 13526
// for i in tmp do
13372: LD_ADDR_VAR 0 1
13376: PUSH
13377: LD_VAR 0 5
13381: PUSH
13382: FOR_IN
13383: IFFALSE 13524
// begin d := rand ( 0 , 5 ) ;
13385: LD_ADDR_VAR 0 4
13389: PUSH
13390: LD_INT 0
13392: PPUSH
13393: LD_INT 5
13395: PPUSH
13396: CALL_OW 12
13400: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13401: LD_ADDR_VAR 0 2
13405: PUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: CALL_OW 250
13415: PPUSH
13416: LD_VAR 0 4
13420: PPUSH
13421: LD_INT 3
13423: PPUSH
13424: LD_INT 12
13426: PPUSH
13427: CALL_OW 12
13431: PPUSH
13432: CALL_OW 272
13436: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13437: LD_ADDR_VAR 0 3
13441: PUSH
13442: LD_VAR 0 1
13446: PPUSH
13447: CALL_OW 251
13451: PPUSH
13452: LD_VAR 0 4
13456: PPUSH
13457: LD_INT 3
13459: PPUSH
13460: LD_INT 12
13462: PPUSH
13463: CALL_OW 12
13467: PPUSH
13468: CALL_OW 273
13472: ST_TO_ADDR
// if ValidHex ( x , y ) then
13473: LD_VAR 0 2
13477: PPUSH
13478: LD_VAR 0 3
13482: PPUSH
13483: CALL_OW 488
13487: IFFALSE 13522
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_INT 3
13506: PPUSH
13507: LD_INT 6
13509: PPUSH
13510: CALL_OW 12
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 483
// end ;
13522: GO 13382
13524: POP
13525: POP
// end ;
13526: PPOPN 5
13528: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13529: LD_EXP 23
13533: PUSH
13534: LD_EXP 58
13538: AND
13539: IFFALSE 13633
13541: GO 13543
13543: DISABLE
13544: LD_INT 0
13546: PPUSH
13547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_OWVAR 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 32
13567: PUSH
13568: LD_INT 1
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 21
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 69
13594: ST_TO_ADDR
// if not tmp then
13595: LD_VAR 0 2
13599: NOT
13600: IFFALSE 13604
// exit ;
13602: GO 13633
// for i in tmp do
13604: LD_ADDR_VAR 0 1
13608: PUSH
13609: LD_VAR 0 2
13613: PUSH
13614: FOR_IN
13615: IFFALSE 13631
// SetFuel ( i , 0 ) ;
13617: LD_VAR 0 1
13621: PPUSH
13622: LD_INT 0
13624: PPUSH
13625: CALL_OW 240
13629: GO 13614
13631: POP
13632: POP
// end ;
13633: PPOPN 2
13635: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13636: LD_EXP 23
13640: PUSH
13641: LD_EXP 59
13645: AND
13646: IFFALSE 13712
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13654: LD_ADDR_VAR 0 1
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 30
13673: PUSH
13674: LD_INT 29
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 1
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13712
// DestroyUnit ( tmp [ 1 ] ) ;
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 65
// end ;
13712: PPOPN 1
13714: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13715: LD_EXP 23
13719: PUSH
13720: LD_EXP 61
13724: AND
13725: IFFALSE 13854
13727: GO 13729
13729: DISABLE
13730: LD_INT 0
13732: PPUSH
// begin uc_side := 0 ;
13733: LD_ADDR_OWVAR 20
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// uc_nation := nation_arabian ;
13741: LD_ADDR_OWVAR 21
13745: PUSH
13746: LD_INT 2
13748: ST_TO_ADDR
// hc_gallery :=  ;
13749: LD_ADDR_OWVAR 33
13753: PUSH
13754: LD_STRING 
13756: ST_TO_ADDR
// hc_name :=  ;
13757: LD_ADDR_OWVAR 26
13761: PUSH
13762: LD_STRING 
13764: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13765: LD_INT 1
13767: PPUSH
13768: LD_INT 11
13770: PPUSH
13771: LD_INT 10
13773: PPUSH
13774: CALL_OW 380
// un := CreateHuman ;
13778: LD_ADDR_VAR 0 1
13782: PUSH
13783: CALL_OW 44
13787: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13800: LD_INT 35
13802: PPUSH
13803: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13807: LD_VAR 0 1
13811: PPUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: PPUSH
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 74
13838: PPUSH
13839: CALL_OW 115
// until IsDead ( un ) ;
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 301
13852: IFFALSE 13800
// end ;
13854: PPOPN 1
13856: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13857: LD_EXP 23
13861: PUSH
13862: LD_EXP 63
13866: AND
13867: IFFALSE 13879
13869: GO 13871
13871: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13872: LD_STRING earthquake(getX(game), 0, 32)
13874: PPUSH
13875: CALL_OW 559
13879: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13880: LD_EXP 23
13884: PUSH
13885: LD_EXP 64
13889: AND
13890: IFFALSE 13981
13892: GO 13894
13894: DISABLE
13895: LD_INT 0
13897: PPUSH
// begin enable ;
13898: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13899: LD_ADDR_VAR 0 1
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_OWVAR 2
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 33
13928: PUSH
13929: LD_INT 3
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: PPUSH
13941: CALL_OW 69
13945: ST_TO_ADDR
// if not tmp then
13946: LD_VAR 0 1
13950: NOT
13951: IFFALSE 13955
// exit ;
13953: GO 13981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13955: LD_VAR 0 1
13959: PUSH
13960: LD_INT 1
13962: PPUSH
13963: LD_VAR 0 1
13967: PPUSH
13968: CALL_OW 12
13972: ARRAY
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 234
// end ;
13981: PPOPN 1
13983: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13984: LD_EXP 23
13988: PUSH
13989: LD_EXP 65
13993: AND
13994: IFFALSE 14135
13996: GO 13998
13998: DISABLE
13999: LD_INT 0
14001: PPUSH
14002: PPUSH
14003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14004: LD_ADDR_VAR 0 3
14008: PUSH
14009: LD_INT 22
14011: PUSH
14012: LD_OWVAR 2
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 25
14023: PUSH
14024: LD_INT 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: ST_TO_ADDR
// if not tmp then
14040: LD_VAR 0 3
14044: NOT
14045: IFFALSE 14049
// exit ;
14047: GO 14135
// un := tmp [ rand ( 1 , tmp ) ] ;
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: LD_VAR 0 3
14058: PUSH
14059: LD_INT 1
14061: PPUSH
14062: LD_VAR 0 3
14066: PPUSH
14067: CALL_OW 12
14071: ARRAY
14072: ST_TO_ADDR
// if Crawls ( un ) then
14073: LD_VAR 0 2
14077: PPUSH
14078: CALL_OW 318
14082: IFFALSE 14093
// ComWalk ( un ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14093: LD_VAR 0 2
14097: PPUSH
14098: LD_INT 9
14100: PPUSH
14101: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14105: LD_INT 28
14107: PPUSH
14108: LD_OWVAR 2
14112: PPUSH
14113: LD_INT 2
14115: PPUSH
14116: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14120: LD_INT 29
14122: PPUSH
14123: LD_OWVAR 2
14127: PPUSH
14128: LD_INT 2
14130: PPUSH
14131: CALL_OW 322
// end ;
14135: PPOPN 3
14137: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14138: LD_EXP 23
14142: PUSH
14143: LD_EXP 66
14147: AND
14148: IFFALSE 14259
14150: GO 14152
14152: DISABLE
14153: LD_INT 0
14155: PPUSH
14156: PPUSH
14157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14158: LD_ADDR_VAR 0 3
14162: PUSH
14163: LD_INT 22
14165: PUSH
14166: LD_OWVAR 2
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 25
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 69
14193: ST_TO_ADDR
// if not tmp then
14194: LD_VAR 0 3
14198: NOT
14199: IFFALSE 14203
// exit ;
14201: GO 14259
// un := tmp [ rand ( 1 , tmp ) ] ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_VAR 0 3
14212: PUSH
14213: LD_INT 1
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: CALL_OW 12
14225: ARRAY
14226: ST_TO_ADDR
// if Crawls ( un ) then
14227: LD_VAR 0 2
14231: PPUSH
14232: CALL_OW 318
14236: IFFALSE 14247
// ComWalk ( un ) ;
14238: LD_VAR 0 2
14242: PPUSH
14243: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14247: LD_VAR 0 2
14251: PPUSH
14252: LD_INT 8
14254: PPUSH
14255: CALL_OW 336
// end ;
14259: PPOPN 3
14261: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14262: LD_EXP 23
14266: PUSH
14267: LD_EXP 67
14271: AND
14272: IFFALSE 14416
14274: GO 14276
14276: DISABLE
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_INT 22
14288: PUSH
14289: LD_OWVAR 2
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 2
14310: PUSH
14311: LD_INT 34
14313: PUSH
14314: LD_INT 12
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 34
14323: PUSH
14324: LD_INT 51
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 34
14333: PUSH
14334: LD_INT 32
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// if not tmp then
14357: LD_VAR 0 2
14361: NOT
14362: IFFALSE 14366
// exit ;
14364: GO 14416
// for i in tmp do
14366: LD_ADDR_VAR 0 1
14370: PUSH
14371: LD_VAR 0 2
14375: PUSH
14376: FOR_IN
14377: IFFALSE 14414
// if GetCargo ( i , mat_artifact ) = 0 then
14379: LD_VAR 0 1
14383: PPUSH
14384: LD_INT 4
14386: PPUSH
14387: CALL_OW 289
14391: PUSH
14392: LD_INT 0
14394: EQUAL
14395: IFFALSE 14412
// SetCargo ( i , mat_siberit , 100 ) ;
14397: LD_VAR 0 1
14401: PPUSH
14402: LD_INT 3
14404: PPUSH
14405: LD_INT 100
14407: PPUSH
14408: CALL_OW 290
14412: GO 14376
14414: POP
14415: POP
// end ;
14416: PPOPN 2
14418: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14419: LD_EXP 23
14423: PUSH
14424: LD_EXP 68
14428: AND
14429: IFFALSE 14612
14431: GO 14433
14433: DISABLE
14434: LD_INT 0
14436: PPUSH
14437: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14438: LD_ADDR_VAR 0 2
14442: PUSH
14443: LD_INT 22
14445: PUSH
14446: LD_OWVAR 2
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// if not tmp then
14460: LD_VAR 0 2
14464: NOT
14465: IFFALSE 14469
// exit ;
14467: GO 14612
// for i := 1 to 2 do
14469: LD_ADDR_VAR 0 1
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_INT 2
14481: PUSH
14482: FOR_TO
14483: IFFALSE 14610
// begin uc_side := your_side ;
14485: LD_ADDR_OWVAR 20
14489: PUSH
14490: LD_OWVAR 2
14494: ST_TO_ADDR
// uc_nation := nation_american ;
14495: LD_ADDR_OWVAR 21
14499: PUSH
14500: LD_INT 1
14502: ST_TO_ADDR
// vc_chassis := us_morphling ;
14503: LD_ADDR_OWVAR 37
14507: PUSH
14508: LD_INT 5
14510: ST_TO_ADDR
// vc_engine := engine_siberite ;
14511: LD_ADDR_OWVAR 39
14515: PUSH
14516: LD_INT 3
14518: ST_TO_ADDR
// vc_control := control_computer ;
14519: LD_ADDR_OWVAR 38
14523: PUSH
14524: LD_INT 3
14526: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14527: LD_ADDR_OWVAR 40
14531: PUSH
14532: LD_INT 10
14534: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14535: LD_VAR 0 2
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PPUSH
14544: CALL_OW 310
14548: NOT
14549: IFFALSE 14596
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14551: CALL_OW 45
14555: PPUSH
14556: LD_VAR 0 2
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: CALL_OW 250
14569: PPUSH
14570: LD_VAR 0 2
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: PPUSH
14579: CALL_OW 251
14583: PPUSH
14584: LD_INT 12
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 50
14594: GO 14608
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14596: CALL_OW 45
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 51
// end ;
14608: GO 14482
14610: POP
14611: POP
// end ;
14612: PPOPN 2
14614: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14615: LD_EXP 23
14619: PUSH
14620: LD_EXP 69
14624: AND
14625: IFFALSE 14847
14627: GO 14629
14629: DISABLE
14630: LD_INT 0
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14638: LD_ADDR_VAR 0 6
14642: PUSH
14643: LD_INT 22
14645: PUSH
14646: LD_OWVAR 2
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 0
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: ST_TO_ADDR
// if not tmp then
14692: LD_VAR 0 6
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14847
// s1 := rand ( 1 , 4 ) ;
14701: LD_ADDR_VAR 0 2
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 4
14711: PPUSH
14712: CALL_OW 12
14716: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_VAR 0 6
14726: PUSH
14727: LD_INT 1
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 2
14735: PPUSH
14736: CALL_OW 259
14740: ST_TO_ADDR
// if s1 = 1 then
14741: LD_VAR 0 2
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14769
// s2 := rand ( 2 , 4 ) else
14751: LD_ADDR_VAR 0 3
14755: PUSH
14756: LD_INT 2
14758: PPUSH
14759: LD_INT 4
14761: PPUSH
14762: CALL_OW 12
14766: ST_TO_ADDR
14767: GO 14777
// s2 := 1 ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14777: LD_ADDR_VAR 0 5
14781: PUSH
14782: LD_VAR 0 6
14786: PUSH
14787: LD_INT 1
14789: ARRAY
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: CALL_OW 259
14800: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14801: LD_VAR 0 6
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 2
14814: PPUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14824: LD_VAR 0 6
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_VAR 0 4
14842: PPUSH
14843: CALL_OW 237
// end ;
14847: PPOPN 6
14849: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14850: LD_EXP 23
14854: PUSH
14855: LD_EXP 70
14859: AND
14860: IFFALSE 14939
14862: GO 14864
14864: DISABLE
14865: LD_INT 0
14867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14868: LD_ADDR_VAR 0 1
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_OWVAR 2
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 30
14887: PUSH
14888: LD_INT 3
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: ST_TO_ADDR
// if not tmp then
14904: LD_VAR 0 1
14908: NOT
14909: IFFALSE 14913
// exit ;
14911: GO 14939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14913: LD_VAR 0 1
14917: PUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 12
14930: ARRAY
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 234
// end ;
14939: PPOPN 1
14941: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14942: LD_EXP 23
14946: PUSH
14947: LD_EXP 71
14951: AND
14952: IFFALSE 15064
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
14960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14961: LD_ADDR_VAR 0 2
14965: PUSH
14966: LD_INT 22
14968: PUSH
14969: LD_OWVAR 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 2
14980: PUSH
14981: LD_INT 30
14983: PUSH
14984: LD_INT 27
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 26
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 30
15003: PUSH
15004: LD_INT 28
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: ST_TO_ADDR
// if not tmp then
15026: LD_VAR 0 2
15030: NOT
15031: IFFALSE 15035
// exit ;
15033: GO 15064
// for i in tmp do
15035: LD_ADDR_VAR 0 1
15039: PUSH
15040: LD_VAR 0 2
15044: PUSH
15045: FOR_IN
15046: IFFALSE 15062
// SetLives ( i , 1 ) ;
15048: LD_VAR 0 1
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 234
15060: GO 15045
15062: POP
15063: POP
// end ;
15064: PPOPN 2
15066: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15067: LD_EXP 23
15071: PUSH
15072: LD_EXP 72
15076: AND
15077: IFFALSE 15351
15079: GO 15081
15081: DISABLE
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
// begin i := rand ( 1 , 7 ) ;
15087: LD_ADDR_VAR 0 1
15091: PUSH
15092: LD_INT 1
15094: PPUSH
15095: LD_INT 7
15097: PPUSH
15098: CALL_OW 12
15102: ST_TO_ADDR
// case i of 1 :
15103: LD_VAR 0 1
15107: PUSH
15108: LD_INT 1
15110: DOUBLE
15111: EQUAL
15112: IFTRUE 15116
15114: GO 15126
15116: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15117: LD_STRING earthquake(getX(game), 0, 32)
15119: PPUSH
15120: CALL_OW 559
15124: GO 15351
15126: LD_INT 2
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15148
15134: POP
// begin ToLua ( displayStucuk(); ) ;
15135: LD_STRING displayStucuk();
15137: PPUSH
15138: CALL_OW 559
// ResetFog ;
15142: CALL_OW 335
// end ; 3 :
15146: GO 15351
15148: LD_INT 3
15150: DOUBLE
15151: EQUAL
15152: IFTRUE 15156
15154: GO 15260
15156: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15157: LD_ADDR_VAR 0 2
15161: PUSH
15162: LD_INT 22
15164: PUSH
15165: LD_OWVAR 2
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 25
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: ST_TO_ADDR
// if not tmp then
15193: LD_VAR 0 2
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15351
// un := tmp [ rand ( 1 , tmp ) ] ;
15202: LD_ADDR_VAR 0 3
15206: PUSH
15207: LD_VAR 0 2
15211: PUSH
15212: LD_INT 1
15214: PPUSH
15215: LD_VAR 0 2
15219: PPUSH
15220: CALL_OW 12
15224: ARRAY
15225: ST_TO_ADDR
// if Crawls ( un ) then
15226: LD_VAR 0 3
15230: PPUSH
15231: CALL_OW 318
15235: IFFALSE 15246
// ComWalk ( un ) ;
15237: LD_VAR 0 3
15241: PPUSH
15242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15246: LD_VAR 0 3
15250: PPUSH
15251: LD_INT 8
15253: PPUSH
15254: CALL_OW 336
// end ; 4 :
15258: GO 15351
15260: LD_INT 4
15262: DOUBLE
15263: EQUAL
15264: IFTRUE 15268
15266: GO 15329
15268: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15269: LD_ADDR_VAR 0 2
15273: PUSH
15274: LD_INT 22
15276: PUSH
15277: LD_OWVAR 2
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 30
15288: PUSH
15289: LD_INT 29
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PPUSH
15300: CALL_OW 69
15304: ST_TO_ADDR
// if not tmp then
15305: LD_VAR 0 2
15309: NOT
15310: IFFALSE 15314
// exit ;
15312: GO 15351
// DestroyUnit ( tmp [ 1 ] ) ;
15314: LD_VAR 0 2
15318: PUSH
15319: LD_INT 1
15321: ARRAY
15322: PPUSH
15323: CALL_OW 65
// end ; 5 .. 7 :
15327: GO 15351
15329: LD_INT 5
15331: DOUBLE
15332: GREATEREQUAL
15333: IFFALSE 15341
15335: LD_INT 7
15337: DOUBLE
15338: LESSEQUAL
15339: IFTRUE 15343
15341: GO 15350
15343: POP
// StreamSibBomb ; end ;
15344: CALL 11601 0 0
15348: GO 15351
15350: POP
// end ;
15351: PPOPN 3
15353: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15354: LD_EXP 23
15358: PUSH
15359: LD_EXP 73
15363: AND
15364: IFFALSE 15520
15366: GO 15368
15368: DISABLE
15369: LD_INT 0
15371: PPUSH
15372: PPUSH
15373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15374: LD_ADDR_VAR 0 2
15378: PUSH
15379: LD_INT 81
15381: PUSH
15382: LD_OWVAR 2
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: LD_INT 21
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 21
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 69
15427: ST_TO_ADDR
// if not tmp then
15428: LD_VAR 0 2
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 15520
// p := 0 ;
15437: LD_ADDR_VAR 0 3
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15445: LD_INT 35
15447: PPUSH
15448: CALL_OW 67
// p := p + 1 ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_VAR 0 3
15461: PUSH
15462: LD_INT 1
15464: PLUS
15465: ST_TO_ADDR
// for i in tmp do
15466: LD_ADDR_VAR 0 1
15470: PUSH
15471: LD_VAR 0 2
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15508
// if GetLives ( i ) < 1000 then
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 256
15488: PUSH
15489: LD_INT 1000
15491: LESS
15492: IFFALSE 15506
// SetLives ( i , 1000 ) ;
15494: LD_VAR 0 1
15498: PPUSH
15499: LD_INT 1000
15501: PPUSH
15502: CALL_OW 234
15506: GO 15476
15508: POP
15509: POP
// until p > 20 ;
15510: LD_VAR 0 3
15514: PUSH
15515: LD_INT 20
15517: GREATER
15518: IFFALSE 15445
// end ;
15520: PPOPN 3
15522: END
// every 0 0$1 trigger StreamModeActive and sTime do
15523: LD_EXP 23
15527: PUSH
15528: LD_EXP 74
15532: AND
15533: IFFALSE 15568
15535: GO 15537
15537: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15538: LD_INT 28
15540: PPUSH
15541: LD_OWVAR 2
15545: PPUSH
15546: LD_INT 2
15548: PPUSH
15549: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15553: LD_INT 30
15555: PPUSH
15556: LD_OWVAR 2
15560: PPUSH
15561: LD_INT 2
15563: PPUSH
15564: CALL_OW 322
// end ;
15568: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15569: LD_EXP 23
15573: PUSH
15574: LD_EXP 75
15578: AND
15579: IFFALSE 15700
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
15587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15588: LD_ADDR_VAR 0 2
15592: PUSH
15593: LD_INT 22
15595: PUSH
15596: LD_OWVAR 2
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 21
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 3
15617: PUSH
15618: LD_INT 23
15620: PUSH
15621: LD_INT 0
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PPUSH
15637: CALL_OW 69
15641: ST_TO_ADDR
// if not tmp then
15642: LD_VAR 0 2
15646: NOT
15647: IFFALSE 15651
// exit ;
15649: GO 15700
// for i in tmp do
15651: LD_ADDR_VAR 0 1
15655: PUSH
15656: LD_VAR 0 2
15660: PUSH
15661: FOR_IN
15662: IFFALSE 15698
// begin if Crawls ( i ) then
15664: LD_VAR 0 1
15668: PPUSH
15669: CALL_OW 318
15673: IFFALSE 15684
// ComWalk ( i ) ;
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 138
// SetClass ( i , 2 ) ;
15684: LD_VAR 0 1
15688: PPUSH
15689: LD_INT 2
15691: PPUSH
15692: CALL_OW 336
// end ;
15696: GO 15661
15698: POP
15699: POP
// end ;
15700: PPOPN 2
15702: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15703: LD_EXP 23
15707: PUSH
15708: LD_EXP 76
15712: AND
15713: IFFALSE 15994
15715: GO 15717
15717: DISABLE
15718: LD_INT 0
15720: PPUSH
15721: PPUSH
15722: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15723: LD_OWVAR 2
15727: PPUSH
15728: LD_INT 9
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15741: LD_INT 9
15743: PPUSH
15744: LD_OWVAR 2
15748: PPUSH
15749: CALL_OW 343
// uc_side := 9 ;
15753: LD_ADDR_OWVAR 20
15757: PUSH
15758: LD_INT 9
15760: ST_TO_ADDR
// uc_nation := 2 ;
15761: LD_ADDR_OWVAR 21
15765: PUSH
15766: LD_INT 2
15768: ST_TO_ADDR
// hc_name := Dark Warrior ;
15769: LD_ADDR_OWVAR 26
15773: PUSH
15774: LD_STRING Dark Warrior
15776: ST_TO_ADDR
// hc_gallery :=  ;
15777: LD_ADDR_OWVAR 33
15781: PUSH
15782: LD_STRING 
15784: ST_TO_ADDR
// hc_noskilllimit := true ;
15785: LD_ADDR_OWVAR 76
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15793: LD_ADDR_OWVAR 31
15797: PUSH
15798: LD_INT 30
15800: PUSH
15801: LD_INT 30
15803: PUSH
15804: LD_INT 30
15806: PUSH
15807: LD_INT 30
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// un := CreateHuman ;
15816: LD_ADDR_VAR 0 3
15820: PUSH
15821: CALL_OW 44
15825: ST_TO_ADDR
// hc_noskilllimit := false ;
15826: LD_ADDR_OWVAR 76
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 51
// p := 0 ;
15846: LD_ADDR_VAR 0 2
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15854: LD_INT 35
15856: PPUSH
15857: CALL_OW 67
// p := p + 1 ;
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: LD_VAR 0 2
15870: PUSH
15871: LD_INT 1
15873: PLUS
15874: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15875: LD_VAR 0 3
15879: PPUSH
15880: CALL_OW 256
15884: PUSH
15885: LD_INT 1000
15887: LESS
15888: IFFALSE 15902
// SetLives ( un , 1000 ) ;
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_INT 1000
15897: PPUSH
15898: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 81
15909: PUSH
15910: LD_OWVAR 2
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 91
15921: PUSH
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: PPUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: CALL_OW 74
15953: PPUSH
15954: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15958: LD_VAR 0 2
15962: PUSH
15963: LD_INT 60
15965: GREATER
15966: PUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: CALL_OW 301
15976: OR
15977: IFFALSE 15854
// if un then
15979: LD_VAR 0 3
15983: IFFALSE 15994
// RemoveUnit ( un ) ;
15985: LD_VAR 0 3
15989: PPUSH
15990: CALL_OW 64
// end ;
15994: PPOPN 3
15996: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15997: LD_INT 0
15999: PPUSH
// case cmd of 301 :
16000: LD_VAR 0 1
16004: PUSH
16005: LD_INT 301
16007: DOUBLE
16008: EQUAL
16009: IFTRUE 16013
16011: GO 16045
16013: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16014: LD_VAR 0 6
16018: PPUSH
16019: LD_VAR 0 7
16023: PPUSH
16024: LD_VAR 0 8
16028: PPUSH
16029: LD_VAR 0 4
16033: PPUSH
16034: LD_VAR 0 5
16038: PPUSH
16039: CALL 17246 0 5
16043: GO 16166
16045: LD_INT 302
16047: DOUBLE
16048: EQUAL
16049: IFTRUE 16053
16051: GO 16090
16053: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16054: LD_VAR 0 6
16058: PPUSH
16059: LD_VAR 0 7
16063: PPUSH
16064: LD_VAR 0 8
16068: PPUSH
16069: LD_VAR 0 9
16073: PPUSH
16074: LD_VAR 0 4
16078: PPUSH
16079: LD_VAR 0 5
16083: PPUSH
16084: CALL 17337 0 6
16088: GO 16166
16090: LD_INT 303
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16135
16098: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16099: LD_VAR 0 6
16103: PPUSH
16104: LD_VAR 0 7
16108: PPUSH
16109: LD_VAR 0 8
16113: PPUSH
16114: LD_VAR 0 9
16118: PPUSH
16119: LD_VAR 0 4
16123: PPUSH
16124: LD_VAR 0 5
16128: PPUSH
16129: CALL 16171 0 6
16133: GO 16166
16135: LD_INT 304
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16165
16143: POP
// hHackTeleport ( unit , x , y ) ; end ;
16144: LD_VAR 0 2
16148: PPUSH
16149: LD_VAR 0 4
16153: PPUSH
16154: LD_VAR 0 5
16158: PPUSH
16159: CALL 17930 0 3
16163: GO 16166
16165: POP
// end ;
16166: LD_VAR 0 12
16170: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16175: LD_VAR 0 1
16179: PUSH
16180: LD_INT 1
16182: LESS
16183: PUSH
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 3
16191: GREATER
16192: OR
16193: PUSH
16194: LD_VAR 0 5
16198: PPUSH
16199: LD_VAR 0 6
16203: PPUSH
16204: CALL_OW 428
16208: OR
16209: IFFALSE 16213
// exit ;
16211: GO 16933
// uc_side := your_side ;
16213: LD_ADDR_OWVAR 20
16217: PUSH
16218: LD_OWVAR 2
16222: ST_TO_ADDR
// uc_nation := nation ;
16223: LD_ADDR_OWVAR 21
16227: PUSH
16228: LD_VAR 0 1
16232: ST_TO_ADDR
// bc_level = 1 ;
16233: LD_ADDR_OWVAR 43
16237: PUSH
16238: LD_INT 1
16240: ST_TO_ADDR
// case btype of 1 :
16241: LD_VAR 0 2
16245: PUSH
16246: LD_INT 1
16248: DOUBLE
16249: EQUAL
16250: IFTRUE 16254
16252: GO 16265
16254: POP
// bc_type := b_depot ; 2 :
16255: LD_ADDR_OWVAR 42
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
16263: GO 16877
16265: LD_INT 2
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16273
16271: GO 16284
16273: POP
// bc_type := b_warehouse ; 3 :
16274: LD_ADDR_OWVAR 42
16278: PUSH
16279: LD_INT 1
16281: ST_TO_ADDR
16282: GO 16877
16284: LD_INT 3
16286: DOUBLE
16287: EQUAL
16288: IFTRUE 16292
16290: GO 16303
16292: POP
// bc_type := b_lab ; 4 .. 9 :
16293: LD_ADDR_OWVAR 42
16297: PUSH
16298: LD_INT 6
16300: ST_TO_ADDR
16301: GO 16877
16303: LD_INT 4
16305: DOUBLE
16306: GREATEREQUAL
16307: IFFALSE 16315
16309: LD_INT 9
16311: DOUBLE
16312: LESSEQUAL
16313: IFTRUE 16317
16315: GO 16369
16317: POP
// begin bc_type := b_lab_half ;
16318: LD_ADDR_OWVAR 42
16322: PUSH
16323: LD_INT 7
16325: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16326: LD_ADDR_OWVAR 44
16330: PUSH
16331: LD_INT 10
16333: PUSH
16334: LD_INT 11
16336: PUSH
16337: LD_INT 12
16339: PUSH
16340: LD_INT 15
16342: PUSH
16343: LD_INT 14
16345: PUSH
16346: LD_INT 13
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: PUSH
16357: LD_VAR 0 2
16361: PUSH
16362: LD_INT 3
16364: MINUS
16365: ARRAY
16366: ST_TO_ADDR
// end ; 10 .. 13 :
16367: GO 16877
16369: LD_INT 10
16371: DOUBLE
16372: GREATEREQUAL
16373: IFFALSE 16381
16375: LD_INT 13
16377: DOUBLE
16378: LESSEQUAL
16379: IFTRUE 16383
16381: GO 16460
16383: POP
// begin bc_type := b_lab_full ;
16384: LD_ADDR_OWVAR 42
16388: PUSH
16389: LD_INT 8
16391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16392: LD_ADDR_OWVAR 44
16396: PUSH
16397: LD_INT 10
16399: PUSH
16400: LD_INT 12
16402: PUSH
16403: LD_INT 14
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: LD_INT 9
16422: MINUS
16423: ARRAY
16424: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16425: LD_ADDR_OWVAR 45
16429: PUSH
16430: LD_INT 11
16432: PUSH
16433: LD_INT 15
16435: PUSH
16436: LD_INT 12
16438: PUSH
16439: LD_INT 15
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: PUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 9
16455: MINUS
16456: ARRAY
16457: ST_TO_ADDR
// end ; 14 :
16458: GO 16877
16460: LD_INT 14
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16468
16466: GO 16479
16468: POP
// bc_type := b_workshop ; 15 :
16469: LD_ADDR_OWVAR 42
16473: PUSH
16474: LD_INT 2
16476: ST_TO_ADDR
16477: GO 16877
16479: LD_INT 15
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16498
16487: POP
// bc_type := b_factory ; 16 :
16488: LD_ADDR_OWVAR 42
16492: PUSH
16493: LD_INT 3
16495: ST_TO_ADDR
16496: GO 16877
16498: LD_INT 16
16500: DOUBLE
16501: EQUAL
16502: IFTRUE 16506
16504: GO 16517
16506: POP
// bc_type := b_ext_gun ; 17 :
16507: LD_ADDR_OWVAR 42
16511: PUSH
16512: LD_INT 17
16514: ST_TO_ADDR
16515: GO 16877
16517: LD_INT 17
16519: DOUBLE
16520: EQUAL
16521: IFTRUE 16525
16523: GO 16553
16525: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16526: LD_ADDR_OWVAR 42
16530: PUSH
16531: LD_INT 19
16533: PUSH
16534: LD_INT 23
16536: PUSH
16537: LD_INT 19
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: PUSH
16545: LD_VAR 0 1
16549: ARRAY
16550: ST_TO_ADDR
16551: GO 16877
16553: LD_INT 18
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16572
16561: POP
// bc_type := b_ext_radar ; 19 :
16562: LD_ADDR_OWVAR 42
16566: PUSH
16567: LD_INT 20
16569: ST_TO_ADDR
16570: GO 16877
16572: LD_INT 19
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16580
16578: GO 16591
16580: POP
// bc_type := b_ext_radio ; 20 :
16581: LD_ADDR_OWVAR 42
16585: PUSH
16586: LD_INT 22
16588: ST_TO_ADDR
16589: GO 16877
16591: LD_INT 20
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16610
16599: POP
// bc_type := b_ext_siberium ; 21 :
16600: LD_ADDR_OWVAR 42
16604: PUSH
16605: LD_INT 21
16607: ST_TO_ADDR
16608: GO 16877
16610: LD_INT 21
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16629
16618: POP
// bc_type := b_ext_computer ; 22 :
16619: LD_ADDR_OWVAR 42
16623: PUSH
16624: LD_INT 24
16626: ST_TO_ADDR
16627: GO 16877
16629: LD_INT 22
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16648
16637: POP
// bc_type := b_ext_track ; 23 :
16638: LD_ADDR_OWVAR 42
16642: PUSH
16643: LD_INT 16
16645: ST_TO_ADDR
16646: GO 16877
16648: LD_INT 23
16650: DOUBLE
16651: EQUAL
16652: IFTRUE 16656
16654: GO 16667
16656: POP
// bc_type := b_ext_laser ; 24 :
16657: LD_ADDR_OWVAR 42
16661: PUSH
16662: LD_INT 25
16664: ST_TO_ADDR
16665: GO 16877
16667: LD_INT 24
16669: DOUBLE
16670: EQUAL
16671: IFTRUE 16675
16673: GO 16686
16675: POP
// bc_type := b_control_tower ; 25 :
16676: LD_ADDR_OWVAR 42
16680: PUSH
16681: LD_INT 36
16683: ST_TO_ADDR
16684: GO 16877
16686: LD_INT 25
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16705
16694: POP
// bc_type := b_breastwork ; 26 :
16695: LD_ADDR_OWVAR 42
16699: PUSH
16700: LD_INT 31
16702: ST_TO_ADDR
16703: GO 16877
16705: LD_INT 26
16707: DOUBLE
16708: EQUAL
16709: IFTRUE 16713
16711: GO 16724
16713: POP
// bc_type := b_bunker ; 27 :
16714: LD_ADDR_OWVAR 42
16718: PUSH
16719: LD_INT 32
16721: ST_TO_ADDR
16722: GO 16877
16724: LD_INT 27
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 16743
16732: POP
// bc_type := b_turret ; 28 :
16733: LD_ADDR_OWVAR 42
16737: PUSH
16738: LD_INT 33
16740: ST_TO_ADDR
16741: GO 16877
16743: LD_INT 28
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16762
16751: POP
// bc_type := b_armoury ; 29 :
16752: LD_ADDR_OWVAR 42
16756: PUSH
16757: LD_INT 4
16759: ST_TO_ADDR
16760: GO 16877
16762: LD_INT 29
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16781
16770: POP
// bc_type := b_barracks ; 30 :
16771: LD_ADDR_OWVAR 42
16775: PUSH
16776: LD_INT 5
16778: ST_TO_ADDR
16779: GO 16877
16781: LD_INT 30
16783: DOUBLE
16784: EQUAL
16785: IFTRUE 16789
16787: GO 16800
16789: POP
// bc_type := b_solar_power ; 31 :
16790: LD_ADDR_OWVAR 42
16794: PUSH
16795: LD_INT 27
16797: ST_TO_ADDR
16798: GO 16877
16800: LD_INT 31
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16819
16808: POP
// bc_type := b_oil_power ; 32 :
16809: LD_ADDR_OWVAR 42
16813: PUSH
16814: LD_INT 26
16816: ST_TO_ADDR
16817: GO 16877
16819: LD_INT 32
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16838
16827: POP
// bc_type := b_siberite_power ; 33 :
16828: LD_ADDR_OWVAR 42
16832: PUSH
16833: LD_INT 28
16835: ST_TO_ADDR
16836: GO 16877
16838: LD_INT 33
16840: DOUBLE
16841: EQUAL
16842: IFTRUE 16846
16844: GO 16857
16846: POP
// bc_type := b_oil_mine ; 34 :
16847: LD_ADDR_OWVAR 42
16851: PUSH
16852: LD_INT 29
16854: ST_TO_ADDR
16855: GO 16877
16857: LD_INT 34
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16876
16865: POP
// bc_type := b_siberite_mine ; end ;
16866: LD_ADDR_OWVAR 42
16870: PUSH
16871: LD_INT 30
16873: ST_TO_ADDR
16874: GO 16877
16876: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16877: LD_ADDR_VAR 0 8
16881: PUSH
16882: LD_VAR 0 5
16886: PPUSH
16887: LD_VAR 0 6
16891: PPUSH
16892: LD_VAR 0 3
16896: PPUSH
16897: CALL_OW 47
16901: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16902: LD_OWVAR 42
16906: PUSH
16907: LD_INT 32
16909: PUSH
16910: LD_INT 33
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: IN
16917: IFFALSE 16933
// PlaceWeaponTurret ( b , weapon ) ;
16919: LD_VAR 0 8
16923: PPUSH
16924: LD_VAR 0 4
16928: PPUSH
16929: CALL_OW 431
// end ;
16933: LD_VAR 0 7
16937: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16944: LD_ADDR_VAR 0 4
16948: PUSH
16949: LD_INT 22
16951: PUSH
16952: LD_OWVAR 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 2
16963: PUSH
16964: LD_INT 30
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 30
16976: PUSH
16977: LD_INT 1
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PPUSH
16993: CALL_OW 69
16997: ST_TO_ADDR
// if not tmp then
16998: LD_VAR 0 4
17002: NOT
17003: IFFALSE 17007
// exit ;
17005: GO 17066
// for i in tmp do
17007: LD_ADDR_VAR 0 2
17011: PUSH
17012: LD_VAR 0 4
17016: PUSH
17017: FOR_IN
17018: IFFALSE 17064
// for j = 1 to 3 do
17020: LD_ADDR_VAR 0 3
17024: PUSH
17025: DOUBLE
17026: LD_INT 1
17028: DEC
17029: ST_TO_ADDR
17030: LD_INT 3
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17060
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17036: LD_VAR 0 2
17040: PPUSH
17041: CALL_OW 274
17045: PPUSH
17046: LD_VAR 0 3
17050: PPUSH
17051: LD_INT 99999
17053: PPUSH
17054: CALL_OW 277
17058: GO 17033
17060: POP
17061: POP
17062: GO 17017
17064: POP
17065: POP
// end ;
17066: LD_VAR 0 1
17070: RET
// export function hHackSetLevel10 ; var i , j ; begin
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17076: LD_ADDR_VAR 0 2
17080: PUSH
17081: LD_INT 21
17083: PUSH
17084: LD_INT 1
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17149
// if IsSelected ( i ) then
17099: LD_VAR 0 2
17103: PPUSH
17104: CALL_OW 306
17108: IFFALSE 17147
// begin for j := 1 to 4 do
17110: LD_ADDR_VAR 0 3
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_INT 4
17122: PUSH
17123: FOR_TO
17124: IFFALSE 17145
// SetSkill ( i , j , 10 ) ;
17126: LD_VAR 0 2
17130: PPUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 10
17138: PPUSH
17139: CALL_OW 237
17143: GO 17123
17145: POP
17146: POP
// end ;
17147: GO 17096
17149: POP
17150: POP
// end ;
17151: LD_VAR 0 1
17155: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17156: LD_INT 0
17158: PPUSH
17159: PPUSH
17160: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17161: LD_ADDR_VAR 0 2
17165: PUSH
17166: LD_INT 22
17168: PUSH
17169: LD_OWVAR 2
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: PUSH
17197: FOR_IN
17198: IFFALSE 17239
// begin for j := 1 to 4 do
17200: LD_ADDR_VAR 0 3
17204: PUSH
17205: DOUBLE
17206: LD_INT 1
17208: DEC
17209: ST_TO_ADDR
17210: LD_INT 4
17212: PUSH
17213: FOR_TO
17214: IFFALSE 17235
// SetSkill ( i , j , 10 ) ;
17216: LD_VAR 0 2
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_INT 10
17228: PPUSH
17229: CALL_OW 237
17233: GO 17213
17235: POP
17236: POP
// end ;
17237: GO 17197
17239: POP
17240: POP
// end ;
17241: LD_VAR 0 1
17245: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17246: LD_INT 0
17248: PPUSH
// uc_side := your_side ;
17249: LD_ADDR_OWVAR 20
17253: PUSH
17254: LD_OWVAR 2
17258: ST_TO_ADDR
// uc_nation := nation ;
17259: LD_ADDR_OWVAR 21
17263: PUSH
17264: LD_VAR 0 1
17268: ST_TO_ADDR
// InitHc ;
17269: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17273: LD_INT 0
17275: PPUSH
17276: LD_VAR 0 2
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17290: LD_VAR 0 4
17294: PPUSH
17295: LD_VAR 0 5
17299: PPUSH
17300: CALL_OW 428
17304: PUSH
17305: LD_INT 0
17307: EQUAL
17308: IFFALSE 17332
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17310: CALL_OW 44
17314: PPUSH
17315: LD_VAR 0 4
17319: PPUSH
17320: LD_VAR 0 5
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 48
// end ;
17332: LD_VAR 0 6
17336: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// uc_side := your_side ;
17341: LD_ADDR_OWVAR 20
17345: PUSH
17346: LD_OWVAR 2
17350: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17351: LD_VAR 0 1
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: IN
17378: IFFALSE 17390
// uc_nation := nation_american else
17380: LD_ADDR_OWVAR 21
17384: PUSH
17385: LD_INT 1
17387: ST_TO_ADDR
17388: GO 17433
// if chassis in [ 11 , 12 , 13 , 14 ] then
17390: LD_VAR 0 1
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 13
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: IN
17413: IFFALSE 17425
// uc_nation := nation_arabian else
17415: LD_ADDR_OWVAR 21
17419: PUSH
17420: LD_INT 2
17422: ST_TO_ADDR
17423: GO 17433
// uc_nation := nation_russian ;
17425: LD_ADDR_OWVAR 21
17429: PUSH
17430: LD_INT 3
17432: ST_TO_ADDR
// vc_chassis := chassis ;
17433: LD_ADDR_OWVAR 37
17437: PUSH
17438: LD_VAR 0 1
17442: ST_TO_ADDR
// vc_engine := engine ;
17443: LD_ADDR_OWVAR 39
17447: PUSH
17448: LD_VAR 0 2
17452: ST_TO_ADDR
// vc_control := control ;
17453: LD_ADDR_OWVAR 38
17457: PUSH
17458: LD_VAR 0 3
17462: ST_TO_ADDR
// vc_weapon := weapon ;
17463: LD_ADDR_OWVAR 40
17467: PUSH
17468: LD_VAR 0 4
17472: ST_TO_ADDR
// un := CreateVehicle ;
17473: LD_ADDR_VAR 0 8
17477: PUSH
17478: CALL_OW 45
17482: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17483: LD_VAR 0 8
17487: PPUSH
17488: LD_INT 0
17490: PPUSH
17491: LD_INT 5
17493: PPUSH
17494: CALL_OW 12
17498: PPUSH
17499: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17503: LD_VAR 0 8
17507: PPUSH
17508: LD_VAR 0 5
17512: PPUSH
17513: LD_VAR 0 6
17517: PPUSH
17518: LD_INT 1
17520: PPUSH
17521: CALL_OW 48
// end ;
17525: LD_VAR 0 7
17529: RET
// export hInvincible ; every 1 do
17530: GO 17532
17532: DISABLE
// hInvincible := [ ] ;
17533: LD_ADDR_EXP 77
17537: PUSH
17538: EMPTY
17539: ST_TO_ADDR
17540: END
// every 10 do var i ;
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
// begin enable ;
17547: ENABLE
// if not hInvincible then
17548: LD_EXP 77
17552: NOT
17553: IFFALSE 17557
// exit ;
17555: GO 17601
// for i in hInvincible do
17557: LD_ADDR_VAR 0 1
17561: PUSH
17562: LD_EXP 77
17566: PUSH
17567: FOR_IN
17568: IFFALSE 17599
// if GetLives ( i ) < 1000 then
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 256
17579: PUSH
17580: LD_INT 1000
17582: LESS
17583: IFFALSE 17597
// SetLives ( i , 1000 ) ;
17585: LD_VAR 0 1
17589: PPUSH
17590: LD_INT 1000
17592: PPUSH
17593: CALL_OW 234
17597: GO 17567
17599: POP
17600: POP
// end ;
17601: PPOPN 1
17603: END
// export function hHackInvincible ; var i ; begin
17604: LD_INT 0
17606: PPUSH
17607: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17608: LD_ADDR_VAR 0 2
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: LD_INT 21
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 21
17628: PUSH
17629: LD_INT 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 69
17645: PUSH
17646: FOR_IN
17647: IFFALSE 17708
// if IsSelected ( i ) then
17649: LD_VAR 0 2
17653: PPUSH
17654: CALL_OW 306
17658: IFFALSE 17706
// begin if i in hInvincible then
17660: LD_VAR 0 2
17664: PUSH
17665: LD_EXP 77
17669: IN
17670: IFFALSE 17690
// hInvincible := hInvincible diff i else
17672: LD_ADDR_EXP 77
17676: PUSH
17677: LD_EXP 77
17681: PUSH
17682: LD_VAR 0 2
17686: DIFF
17687: ST_TO_ADDR
17688: GO 17706
// hInvincible := hInvincible union i ;
17690: LD_ADDR_EXP 77
17694: PUSH
17695: LD_EXP 77
17699: PUSH
17700: LD_VAR 0 2
17704: UNION
17705: ST_TO_ADDR
// end ;
17706: GO 17646
17708: POP
17709: POP
// end ;
17710: LD_VAR 0 1
17714: RET
// export function hHackInvisible ; var i , j ; begin
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
17719: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17720: LD_ADDR_VAR 0 2
17724: PUSH
17725: LD_INT 21
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PPUSH
17735: CALL_OW 69
17739: PUSH
17740: FOR_IN
17741: IFFALSE 17765
// if IsSelected ( i ) then
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 306
17752: IFFALSE 17763
// ComForceInvisible ( i ) ;
17754: LD_VAR 0 2
17758: PPUSH
17759: CALL_OW 496
17763: GO 17740
17765: POP
17766: POP
// end ;
17767: LD_VAR 0 1
17771: RET
// export function hHackChangeYourSide ; begin
17772: LD_INT 0
17774: PPUSH
// if your_side = 8 then
17775: LD_OWVAR 2
17779: PUSH
17780: LD_INT 8
17782: EQUAL
17783: IFFALSE 17795
// your_side := 0 else
17785: LD_ADDR_OWVAR 2
17789: PUSH
17790: LD_INT 0
17792: ST_TO_ADDR
17793: GO 17809
// your_side := your_side + 1 ;
17795: LD_ADDR_OWVAR 2
17799: PUSH
17800: LD_OWVAR 2
17804: PUSH
17805: LD_INT 1
17807: PLUS
17808: ST_TO_ADDR
// end ;
17809: LD_VAR 0 1
17813: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17814: LD_INT 0
17816: PPUSH
17817: PPUSH
17818: PPUSH
// for i in all_units do
17819: LD_ADDR_VAR 0 2
17823: PUSH
17824: LD_OWVAR 3
17828: PUSH
17829: FOR_IN
17830: IFFALSE 17908
// if IsSelected ( i ) then
17832: LD_VAR 0 2
17836: PPUSH
17837: CALL_OW 306
17841: IFFALSE 17906
// begin j := GetSide ( i ) ;
17843: LD_ADDR_VAR 0 3
17847: PUSH
17848: LD_VAR 0 2
17852: PPUSH
17853: CALL_OW 255
17857: ST_TO_ADDR
// if j = 8 then
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 8
17865: EQUAL
17866: IFFALSE 17878
// j := 0 else
17868: LD_ADDR_VAR 0 3
17872: PUSH
17873: LD_INT 0
17875: ST_TO_ADDR
17876: GO 17892
// j := j + 1 ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_VAR 0 3
17887: PUSH
17888: LD_INT 1
17890: PLUS
17891: ST_TO_ADDR
// SetSide ( i , j ) ;
17892: LD_VAR 0 2
17896: PPUSH
17897: LD_VAR 0 3
17901: PPUSH
17902: CALL_OW 235
// end ;
17906: GO 17829
17908: POP
17909: POP
// end ;
17910: LD_VAR 0 1
17914: RET
// export function hHackFog ; begin
17915: LD_INT 0
17917: PPUSH
// FogOff ( true ) ;
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 344
// end ;
17925: LD_VAR 0 1
17929: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17930: LD_INT 0
17932: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_VAR 0 2
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 483
// CenterOnXY ( x , y ) ;
17958: LD_VAR 0 2
17962: PPUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: CALL_OW 84
// end ; end_of_file
17972: LD_VAR 0 4
17976: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17977: LD_INT 0
17979: PPUSH
17980: PPUSH
17981: PPUSH
17982: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 264
17992: PUSH
17993: LD_EXP 11
17997: EQUAL
17998: IFFALSE 18070
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18000: LD_INT 68
18002: PPUSH
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 255
18012: PPUSH
18013: CALL_OW 321
18017: PUSH
18018: LD_INT 2
18020: EQUAL
18021: IFFALSE 18033
// eff := 70 else
18023: LD_ADDR_VAR 0 4
18027: PUSH
18028: LD_INT 70
18030: ST_TO_ADDR
18031: GO 18041
// eff := 30 ;
18033: LD_ADDR_VAR 0 4
18037: PUSH
18038: LD_INT 30
18040: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18041: LD_VAR 0 1
18045: PPUSH
18046: CALL_OW 250
18050: PPUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 251
18060: PPUSH
18061: LD_VAR 0 4
18065: PPUSH
18066: CALL_OW 495
// end ; end ;
18070: LD_VAR 0 2
18074: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18075: LD_INT 0
18077: PPUSH
// end ;
18078: LD_VAR 0 4
18082: RET
// export function SOS_Command ( cmd ) ; begin
18083: LD_INT 0
18085: PPUSH
// end ;
18086: LD_VAR 0 2
18090: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18091: LD_INT 0
18093: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 250
18101: EQUAL
18102: PUSH
18103: LD_VAR 0 2
18107: PPUSH
18108: CALL_OW 264
18112: PUSH
18113: LD_EXP 14
18117: EQUAL
18118: AND
18119: IFFALSE 18140
// MinerPlaceMine ( unit , x , y ) ;
18121: LD_VAR 0 2
18125: PPUSH
18126: LD_VAR 0 4
18130: PPUSH
18131: LD_VAR 0 5
18135: PPUSH
18136: CALL 20481 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18140: LD_VAR 0 1
18144: PUSH
18145: LD_INT 251
18147: EQUAL
18148: PUSH
18149: LD_VAR 0 2
18153: PPUSH
18154: CALL_OW 264
18158: PUSH
18159: LD_EXP 14
18163: EQUAL
18164: AND
18165: IFFALSE 18186
// MinerDetonateMine ( unit , x , y ) ;
18167: LD_VAR 0 2
18171: PPUSH
18172: LD_VAR 0 4
18176: PPUSH
18177: LD_VAR 0 5
18181: PPUSH
18182: CALL 20758 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18186: LD_VAR 0 1
18190: PUSH
18191: LD_INT 252
18193: EQUAL
18194: PUSH
18195: LD_VAR 0 2
18199: PPUSH
18200: CALL_OW 264
18204: PUSH
18205: LD_EXP 14
18209: EQUAL
18210: AND
18211: IFFALSE 18232
// MinerCreateMinefield ( unit , x , y ) ;
18213: LD_VAR 0 2
18217: PPUSH
18218: LD_VAR 0 4
18222: PPUSH
18223: LD_VAR 0 5
18227: PPUSH
18228: CALL 21175 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18232: LD_VAR 0 1
18236: PUSH
18237: LD_INT 253
18239: EQUAL
18240: PUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 257
18250: PUSH
18251: LD_INT 5
18253: EQUAL
18254: AND
18255: IFFALSE 18276
// ComBinocular ( unit , x , y ) ;
18257: LD_VAR 0 2
18261: PPUSH
18262: LD_VAR 0 4
18266: PPUSH
18267: LD_VAR 0 5
18271: PPUSH
18272: CALL 21546 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18276: LD_VAR 0 1
18280: PUSH
18281: LD_INT 254
18283: EQUAL
18284: PUSH
18285: LD_VAR 0 2
18289: PPUSH
18290: CALL_OW 264
18294: PUSH
18295: LD_EXP 9
18299: EQUAL
18300: AND
18301: PUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: CALL_OW 263
18311: PUSH
18312: LD_INT 3
18314: EQUAL
18315: AND
18316: IFFALSE 18332
// HackDestroyVehicle ( unit , selectedUnit ) ;
18318: LD_VAR 0 2
18322: PPUSH
18323: LD_VAR 0 3
18327: PPUSH
18328: CALL 19841 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18332: LD_VAR 0 1
18336: PUSH
18337: LD_INT 255
18339: EQUAL
18340: PUSH
18341: LD_VAR 0 2
18345: PPUSH
18346: CALL_OW 264
18350: PUSH
18351: LD_INT 14
18353: PUSH
18354: LD_INT 53
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: IN
18361: AND
18362: PUSH
18363: LD_VAR 0 4
18367: PPUSH
18368: LD_VAR 0 5
18372: PPUSH
18373: CALL_OW 488
18377: AND
18378: IFFALSE 18402
// CutTreeXYR ( unit , x , y , 12 ) ;
18380: LD_VAR 0 2
18384: PPUSH
18385: LD_VAR 0 4
18389: PPUSH
18390: LD_VAR 0 5
18394: PPUSH
18395: LD_INT 12
18397: PPUSH
18398: CALL 18407 0 4
// end ;
18402: LD_VAR 0 6
18406: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18407: LD_INT 0
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18418: LD_VAR 0 1
18422: NOT
18423: PUSH
18424: LD_VAR 0 2
18428: PPUSH
18429: LD_VAR 0 3
18433: PPUSH
18434: CALL_OW 488
18438: NOT
18439: OR
18440: PUSH
18441: LD_VAR 0 4
18445: NOT
18446: OR
18447: IFFALSE 18451
// exit ;
18449: GO 18791
// list := [ ] ;
18451: LD_ADDR_VAR 0 13
18455: PUSH
18456: EMPTY
18457: ST_TO_ADDR
// if x - r < 0 then
18458: LD_VAR 0 2
18462: PUSH
18463: LD_VAR 0 4
18467: MINUS
18468: PUSH
18469: LD_INT 0
18471: LESS
18472: IFFALSE 18484
// min_x := 0 else
18474: LD_ADDR_VAR 0 7
18478: PUSH
18479: LD_INT 0
18481: ST_TO_ADDR
18482: GO 18500
// min_x := x - r ;
18484: LD_ADDR_VAR 0 7
18488: PUSH
18489: LD_VAR 0 2
18493: PUSH
18494: LD_VAR 0 4
18498: MINUS
18499: ST_TO_ADDR
// if y - r < 0 then
18500: LD_VAR 0 3
18504: PUSH
18505: LD_VAR 0 4
18509: MINUS
18510: PUSH
18511: LD_INT 0
18513: LESS
18514: IFFALSE 18526
// min_y := 0 else
18516: LD_ADDR_VAR 0 8
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
18524: GO 18542
// min_y := y - r ;
18526: LD_ADDR_VAR 0 8
18530: PUSH
18531: LD_VAR 0 3
18535: PUSH
18536: LD_VAR 0 4
18540: MINUS
18541: ST_TO_ADDR
// max_x := x + r ;
18542: LD_ADDR_VAR 0 9
18546: PUSH
18547: LD_VAR 0 2
18551: PUSH
18552: LD_VAR 0 4
18556: PLUS
18557: ST_TO_ADDR
// max_y := y + r ;
18558: LD_ADDR_VAR 0 10
18562: PUSH
18563: LD_VAR 0 3
18567: PUSH
18568: LD_VAR 0 4
18572: PLUS
18573: ST_TO_ADDR
// for _x = min_x to max_x do
18574: LD_ADDR_VAR 0 11
18578: PUSH
18579: DOUBLE
18580: LD_VAR 0 7
18584: DEC
18585: ST_TO_ADDR
18586: LD_VAR 0 9
18590: PUSH
18591: FOR_TO
18592: IFFALSE 18709
// for _y = min_y to max_y do
18594: LD_ADDR_VAR 0 12
18598: PUSH
18599: DOUBLE
18600: LD_VAR 0 8
18604: DEC
18605: ST_TO_ADDR
18606: LD_VAR 0 10
18610: PUSH
18611: FOR_TO
18612: IFFALSE 18705
// begin if not ValidHex ( _x , _y ) then
18614: LD_VAR 0 11
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: CALL_OW 488
18628: NOT
18629: IFFALSE 18633
// continue ;
18631: GO 18611
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18633: LD_VAR 0 11
18637: PPUSH
18638: LD_VAR 0 12
18642: PPUSH
18643: CALL_OW 351
18647: PUSH
18648: LD_VAR 0 11
18652: PPUSH
18653: LD_VAR 0 12
18657: PPUSH
18658: CALL_OW 554
18662: AND
18663: IFFALSE 18703
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18665: LD_ADDR_VAR 0 13
18669: PUSH
18670: LD_VAR 0 13
18674: PPUSH
18675: LD_VAR 0 13
18679: PUSH
18680: LD_INT 1
18682: PLUS
18683: PPUSH
18684: LD_VAR 0 11
18688: PUSH
18689: LD_VAR 0 12
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PPUSH
18698: CALL_OW 2
18702: ST_TO_ADDR
// end ;
18703: GO 18611
18705: POP
18706: POP
18707: GO 18591
18709: POP
18710: POP
// if not list then
18711: LD_VAR 0 13
18715: NOT
18716: IFFALSE 18720
// exit ;
18718: GO 18791
// for i in list do
18720: LD_ADDR_VAR 0 6
18724: PUSH
18725: LD_VAR 0 13
18729: PUSH
18730: FOR_IN
18731: IFFALSE 18789
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18733: LD_VAR 0 1
18737: PPUSH
18738: LD_STRING M
18740: PUSH
18741: LD_VAR 0 6
18745: PUSH
18746: LD_INT 1
18748: ARRAY
18749: PUSH
18750: LD_VAR 0 6
18754: PUSH
18755: LD_INT 2
18757: ARRAY
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: PPUSH
18783: CALL_OW 447
18787: GO 18730
18789: POP
18790: POP
// end ;
18791: LD_VAR 0 5
18795: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18796: LD_EXP 78
18800: NOT
18801: IFFALSE 18851
18803: GO 18805
18805: DISABLE
// begin initHack := true ;
18806: LD_ADDR_EXP 78
18810: PUSH
18811: LD_INT 1
18813: ST_TO_ADDR
// hackTanks := [ ] ;
18814: LD_ADDR_EXP 79
18818: PUSH
18819: EMPTY
18820: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18821: LD_ADDR_EXP 80
18825: PUSH
18826: EMPTY
18827: ST_TO_ADDR
// hackLimit := 3 ;
18828: LD_ADDR_EXP 81
18832: PUSH
18833: LD_INT 3
18835: ST_TO_ADDR
// hackDist := 12 ;
18836: LD_ADDR_EXP 82
18840: PUSH
18841: LD_INT 12
18843: ST_TO_ADDR
// hackCounter := [ ] ;
18844: LD_ADDR_EXP 83
18848: PUSH
18849: EMPTY
18850: ST_TO_ADDR
// end ;
18851: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18852: LD_EXP 78
18856: PUSH
18857: LD_INT 34
18859: PUSH
18860: LD_EXP 9
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: AND
18874: IFFALSE 19129
18876: GO 18878
18878: DISABLE
18879: LD_INT 0
18881: PPUSH
18882: PPUSH
// begin enable ;
18883: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 34
18891: PUSH
18892: LD_EXP 9
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: PUSH
18906: FOR_IN
18907: IFFALSE 19127
// begin if not i in hackTanks then
18909: LD_VAR 0 1
18913: PUSH
18914: LD_EXP 79
18918: IN
18919: NOT
18920: IFFALSE 19003
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18922: LD_ADDR_EXP 79
18926: PUSH
18927: LD_EXP 79
18931: PPUSH
18932: LD_EXP 79
18936: PUSH
18937: LD_INT 1
18939: PLUS
18940: PPUSH
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 1
18950: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18951: LD_ADDR_EXP 80
18955: PUSH
18956: LD_EXP 80
18960: PPUSH
18961: LD_EXP 80
18965: PUSH
18966: LD_INT 1
18968: PLUS
18969: PPUSH
18970: EMPTY
18971: PPUSH
18972: CALL_OW 1
18976: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18977: LD_ADDR_EXP 83
18981: PUSH
18982: LD_EXP 83
18986: PPUSH
18987: LD_EXP 83
18991: PUSH
18992: LD_INT 1
18994: PLUS
18995: PPUSH
18996: EMPTY
18997: PPUSH
18998: CALL_OW 1
19002: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19003: LD_VAR 0 1
19007: PPUSH
19008: CALL_OW 302
19012: NOT
19013: IFFALSE 19026
// begin HackUnlinkAll ( i ) ;
19015: LD_VAR 0 1
19019: PPUSH
19020: CALL 19132 0 1
// continue ;
19024: GO 18906
// end ; HackCheckCapturedStatus ( i ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: CALL 19575 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19035: LD_ADDR_VAR 0 2
19039: PUSH
19040: LD_INT 81
19042: PUSH
19043: LD_VAR 0 1
19047: PPUSH
19048: CALL_OW 255
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 33
19059: PUSH
19060: LD_INT 3
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 91
19069: PUSH
19070: LD_VAR 0 1
19074: PUSH
19075: LD_EXP 82
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 50
19087: PUSH
19088: EMPTY
19089: LIST
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: ST_TO_ADDR
// if not tmp then
19102: LD_VAR 0 2
19106: NOT
19107: IFFALSE 19111
// continue ;
19109: GO 18906
// HackLink ( i , tmp ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_VAR 0 2
19120: PPUSH
19121: CALL 19268 0 2
// end ;
19125: GO 18906
19127: POP
19128: POP
// end ;
19129: PPOPN 2
19131: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19132: LD_INT 0
19134: PPUSH
19135: PPUSH
19136: PPUSH
// if not hack in hackTanks then
19137: LD_VAR 0 1
19141: PUSH
19142: LD_EXP 79
19146: IN
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19263
// index := GetElementIndex ( hackTanks , hack ) ;
19152: LD_ADDR_VAR 0 4
19156: PUSH
19157: LD_EXP 79
19161: PPUSH
19162: LD_VAR 0 1
19166: PPUSH
19167: CALL 26697 0 2
19171: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19172: LD_EXP 80
19176: PUSH
19177: LD_VAR 0 4
19181: ARRAY
19182: IFFALSE 19263
// begin for i in hackTanksCaptured [ index ] do
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_EXP 80
19193: PUSH
19194: LD_VAR 0 4
19198: ARRAY
19199: PUSH
19200: FOR_IN
19201: IFFALSE 19227
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 1
19210: ARRAY
19211: PPUSH
19212: LD_VAR 0 3
19216: PUSH
19217: LD_INT 2
19219: ARRAY
19220: PPUSH
19221: CALL_OW 235
19225: GO 19200
19227: POP
19228: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19229: LD_ADDR_EXP 80
19233: PUSH
19234: LD_EXP 80
19238: PPUSH
19239: LD_VAR 0 4
19243: PPUSH
19244: EMPTY
19245: PPUSH
19246: CALL_OW 1
19250: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19251: LD_VAR 0 1
19255: PPUSH
19256: LD_INT 0
19258: PPUSH
19259: CALL_OW 505
// end ; end ;
19263: LD_VAR 0 2
19267: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19268: LD_INT 0
19270: PPUSH
19271: PPUSH
19272: PPUSH
// if not hack in hackTanks or not vehicles then
19273: LD_VAR 0 1
19277: PUSH
19278: LD_EXP 79
19282: IN
19283: NOT
19284: PUSH
19285: LD_VAR 0 2
19289: NOT
19290: OR
19291: IFFALSE 19295
// exit ;
19293: GO 19570
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19295: LD_ADDR_VAR 0 2
19299: PUSH
19300: LD_VAR 0 1
19304: PPUSH
19305: LD_VAR 0 2
19309: PPUSH
19310: LD_INT 1
19312: PPUSH
19313: LD_INT 1
19315: PPUSH
19316: CALL 27347 0 4
19320: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19321: LD_ADDR_VAR 0 5
19325: PUSH
19326: LD_EXP 79
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL 26697 0 2
19340: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19341: LD_EXP 80
19345: PUSH
19346: LD_VAR 0 5
19350: ARRAY
19351: PUSH
19352: LD_EXP 81
19356: LESS
19357: IFFALSE 19546
// begin for i := 1 to vehicles do
19359: LD_ADDR_VAR 0 4
19363: PUSH
19364: DOUBLE
19365: LD_INT 1
19367: DEC
19368: ST_TO_ADDR
19369: LD_VAR 0 2
19373: PUSH
19374: FOR_TO
19375: IFFALSE 19544
// begin if hackTanksCaptured [ index ] = hackLimit then
19377: LD_EXP 80
19381: PUSH
19382: LD_VAR 0 5
19386: ARRAY
19387: PUSH
19388: LD_EXP 81
19392: EQUAL
19393: IFFALSE 19397
// break ;
19395: GO 19544
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19397: LD_ADDR_EXP 83
19401: PUSH
19402: LD_EXP 83
19406: PPUSH
19407: LD_VAR 0 5
19411: PPUSH
19412: LD_EXP 83
19416: PUSH
19417: LD_VAR 0 5
19421: ARRAY
19422: PUSH
19423: LD_INT 1
19425: PLUS
19426: PPUSH
19427: CALL_OW 1
19431: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19432: LD_ADDR_EXP 80
19436: PUSH
19437: LD_EXP 80
19441: PPUSH
19442: LD_VAR 0 5
19446: PUSH
19447: LD_EXP 80
19451: PUSH
19452: LD_VAR 0 5
19456: ARRAY
19457: PUSH
19458: LD_INT 1
19460: PLUS
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PPUSH
19466: LD_VAR 0 2
19470: PUSH
19471: LD_VAR 0 4
19475: ARRAY
19476: PUSH
19477: LD_VAR 0 2
19481: PUSH
19482: LD_VAR 0 4
19486: ARRAY
19487: PPUSH
19488: CALL_OW 255
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PPUSH
19497: CALL 26912 0 3
19501: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19502: LD_VAR 0 2
19506: PUSH
19507: LD_VAR 0 4
19511: ARRAY
19512: PPUSH
19513: LD_VAR 0 1
19517: PPUSH
19518: CALL_OW 255
19522: PPUSH
19523: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19527: LD_VAR 0 2
19531: PUSH
19532: LD_VAR 0 4
19536: ARRAY
19537: PPUSH
19538: CALL_OW 141
// end ;
19542: GO 19374
19544: POP
19545: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19546: LD_VAR 0 1
19550: PPUSH
19551: LD_EXP 80
19555: PUSH
19556: LD_VAR 0 5
19560: ARRAY
19561: PUSH
19562: LD_INT 0
19564: PLUS
19565: PPUSH
19566: CALL_OW 505
// end ;
19570: LD_VAR 0 3
19574: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19575: LD_INT 0
19577: PPUSH
19578: PPUSH
19579: PPUSH
19580: PPUSH
// if not hack in hackTanks then
19581: LD_VAR 0 1
19585: PUSH
19586: LD_EXP 79
19590: IN
19591: NOT
19592: IFFALSE 19596
// exit ;
19594: GO 19836
// index := GetElementIndex ( hackTanks , hack ) ;
19596: LD_ADDR_VAR 0 4
19600: PUSH
19601: LD_EXP 79
19605: PPUSH
19606: LD_VAR 0 1
19610: PPUSH
19611: CALL 26697 0 2
19615: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19616: LD_ADDR_VAR 0 3
19620: PUSH
19621: DOUBLE
19622: LD_EXP 80
19626: PUSH
19627: LD_VAR 0 4
19631: ARRAY
19632: INC
19633: ST_TO_ADDR
19634: LD_INT 1
19636: PUSH
19637: FOR_DOWNTO
19638: IFFALSE 19810
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19640: LD_ADDR_VAR 0 5
19644: PUSH
19645: LD_EXP 80
19649: PUSH
19650: LD_VAR 0 4
19654: ARRAY
19655: PUSH
19656: LD_VAR 0 3
19660: ARRAY
19661: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19662: LD_VAR 0 5
19666: PUSH
19667: LD_INT 1
19669: ARRAY
19670: PPUSH
19671: CALL_OW 302
19675: NOT
19676: PUSH
19677: LD_VAR 0 5
19681: PUSH
19682: LD_INT 1
19684: ARRAY
19685: PPUSH
19686: CALL_OW 255
19690: PUSH
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 255
19700: NONEQUAL
19701: OR
19702: IFFALSE 19808
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19704: LD_VAR 0 5
19708: PUSH
19709: LD_INT 1
19711: ARRAY
19712: PPUSH
19713: CALL_OW 305
19717: PUSH
19718: LD_VAR 0 5
19722: PUSH
19723: LD_INT 1
19725: ARRAY
19726: PPUSH
19727: CALL_OW 255
19731: PUSH
19732: LD_VAR 0 1
19736: PPUSH
19737: CALL_OW 255
19741: EQUAL
19742: AND
19743: IFFALSE 19767
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19745: LD_VAR 0 5
19749: PUSH
19750: LD_INT 1
19752: ARRAY
19753: PPUSH
19754: LD_VAR 0 5
19758: PUSH
19759: LD_INT 2
19761: ARRAY
19762: PPUSH
19763: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19767: LD_ADDR_EXP 80
19771: PUSH
19772: LD_EXP 80
19776: PPUSH
19777: LD_VAR 0 4
19781: PPUSH
19782: LD_EXP 80
19786: PUSH
19787: LD_VAR 0 4
19791: ARRAY
19792: PPUSH
19793: LD_VAR 0 3
19797: PPUSH
19798: CALL_OW 3
19802: PPUSH
19803: CALL_OW 1
19807: ST_TO_ADDR
// end ; end ;
19808: GO 19637
19810: POP
19811: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_EXP 80
19821: PUSH
19822: LD_VAR 0 4
19826: ARRAY
19827: PUSH
19828: LD_INT 0
19830: PLUS
19831: PPUSH
19832: CALL_OW 505
// end ;
19836: LD_VAR 0 2
19840: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19841: LD_INT 0
19843: PPUSH
19844: PPUSH
19845: PPUSH
19846: PPUSH
// if not hack in hackTanks then
19847: LD_VAR 0 1
19851: PUSH
19852: LD_EXP 79
19856: IN
19857: NOT
19858: IFFALSE 19862
// exit ;
19860: GO 19947
// index := GetElementIndex ( hackTanks , hack ) ;
19862: LD_ADDR_VAR 0 5
19866: PUSH
19867: LD_EXP 79
19871: PPUSH
19872: LD_VAR 0 1
19876: PPUSH
19877: CALL 26697 0 2
19881: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19882: LD_ADDR_VAR 0 4
19886: PUSH
19887: DOUBLE
19888: LD_INT 1
19890: DEC
19891: ST_TO_ADDR
19892: LD_EXP 80
19896: PUSH
19897: LD_VAR 0 5
19901: ARRAY
19902: PUSH
19903: FOR_TO
19904: IFFALSE 19945
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19906: LD_EXP 80
19910: PUSH
19911: LD_VAR 0 5
19915: ARRAY
19916: PUSH
19917: LD_VAR 0 4
19921: ARRAY
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PUSH
19927: LD_VAR 0 2
19931: EQUAL
19932: IFFALSE 19943
// KillUnit ( vehicle ) ;
19934: LD_VAR 0 2
19938: PPUSH
19939: CALL_OW 66
19943: GO 19903
19945: POP
19946: POP
// end ;
19947: LD_VAR 0 3
19951: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19952: LD_EXP 84
19956: NOT
19957: IFFALSE 19992
19959: GO 19961
19961: DISABLE
// begin initMiner := true ;
19962: LD_ADDR_EXP 84
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// minersList := [ ] ;
19970: LD_ADDR_EXP 85
19974: PUSH
19975: EMPTY
19976: ST_TO_ADDR
// minerMinesList := [ ] ;
19977: LD_ADDR_EXP 86
19981: PUSH
19982: EMPTY
19983: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19984: LD_ADDR_EXP 87
19988: PUSH
19989: LD_INT 5
19991: ST_TO_ADDR
// end ;
19992: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19993: LD_EXP 84
19997: PUSH
19998: LD_INT 34
20000: PUSH
20001: LD_EXP 14
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PPUSH
20010: CALL_OW 69
20014: AND
20015: IFFALSE 20478
20017: GO 20019
20019: DISABLE
20020: LD_INT 0
20022: PPUSH
20023: PPUSH
20024: PPUSH
20025: PPUSH
// begin enable ;
20026: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20027: LD_ADDR_VAR 0 1
20031: PUSH
20032: LD_INT 34
20034: PUSH
20035: LD_EXP 14
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PPUSH
20044: CALL_OW 69
20048: PUSH
20049: FOR_IN
20050: IFFALSE 20122
// begin if not i in minersList then
20052: LD_VAR 0 1
20056: PUSH
20057: LD_EXP 85
20061: IN
20062: NOT
20063: IFFALSE 20120
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20065: LD_ADDR_EXP 85
20069: PUSH
20070: LD_EXP 85
20074: PPUSH
20075: LD_EXP 85
20079: PUSH
20080: LD_INT 1
20082: PLUS
20083: PPUSH
20084: LD_VAR 0 1
20088: PPUSH
20089: CALL_OW 1
20093: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20094: LD_ADDR_EXP 86
20098: PUSH
20099: LD_EXP 86
20103: PPUSH
20104: LD_EXP 86
20108: PUSH
20109: LD_INT 1
20111: PLUS
20112: PPUSH
20113: EMPTY
20114: PPUSH
20115: CALL_OW 1
20119: ST_TO_ADDR
// end end ;
20120: GO 20049
20122: POP
20123: POP
// for i := minerMinesList downto 1 do
20124: LD_ADDR_VAR 0 1
20128: PUSH
20129: DOUBLE
20130: LD_EXP 86
20134: INC
20135: ST_TO_ADDR
20136: LD_INT 1
20138: PUSH
20139: FOR_DOWNTO
20140: IFFALSE 20476
// begin if IsLive ( minersList [ i ] ) then
20142: LD_EXP 85
20146: PUSH
20147: LD_VAR 0 1
20151: ARRAY
20152: PPUSH
20153: CALL_OW 300
20157: IFFALSE 20185
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20159: LD_EXP 85
20163: PUSH
20164: LD_VAR 0 1
20168: ARRAY
20169: PPUSH
20170: LD_EXP 86
20174: PUSH
20175: LD_VAR 0 1
20179: ARRAY
20180: PPUSH
20181: CALL_OW 505
// if not minerMinesList [ i ] then
20185: LD_EXP 86
20189: PUSH
20190: LD_VAR 0 1
20194: ARRAY
20195: NOT
20196: IFFALSE 20200
// continue ;
20198: GO 20139
// for j := minerMinesList [ i ] downto 1 do
20200: LD_ADDR_VAR 0 2
20204: PUSH
20205: DOUBLE
20206: LD_EXP 86
20210: PUSH
20211: LD_VAR 0 1
20215: ARRAY
20216: INC
20217: ST_TO_ADDR
20218: LD_INT 1
20220: PUSH
20221: FOR_DOWNTO
20222: IFFALSE 20472
// begin side := GetSide ( minersList [ i ] ) ;
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_EXP 85
20233: PUSH
20234: LD_VAR 0 1
20238: ARRAY
20239: PPUSH
20240: CALL_OW 255
20244: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20245: LD_ADDR_VAR 0 4
20249: PUSH
20250: LD_EXP 86
20254: PUSH
20255: LD_VAR 0 1
20259: ARRAY
20260: PUSH
20261: LD_VAR 0 2
20265: ARRAY
20266: PUSH
20267: LD_INT 1
20269: ARRAY
20270: PPUSH
20271: LD_EXP 86
20275: PUSH
20276: LD_VAR 0 1
20280: ARRAY
20281: PUSH
20282: LD_VAR 0 2
20286: ARRAY
20287: PUSH
20288: LD_INT 2
20290: ARRAY
20291: PPUSH
20292: CALL_OW 428
20296: ST_TO_ADDR
// if not tmp then
20297: LD_VAR 0 4
20301: NOT
20302: IFFALSE 20306
// continue ;
20304: GO 20221
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20306: LD_VAR 0 4
20310: PUSH
20311: LD_INT 81
20313: PUSH
20314: LD_VAR 0 3
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PPUSH
20323: CALL_OW 69
20327: IN
20328: PUSH
20329: LD_EXP 86
20333: PUSH
20334: LD_VAR 0 1
20338: ARRAY
20339: PUSH
20340: LD_VAR 0 2
20344: ARRAY
20345: PUSH
20346: LD_INT 1
20348: ARRAY
20349: PPUSH
20350: LD_EXP 86
20354: PUSH
20355: LD_VAR 0 1
20359: ARRAY
20360: PUSH
20361: LD_VAR 0 2
20365: ARRAY
20366: PUSH
20367: LD_INT 2
20369: ARRAY
20370: PPUSH
20371: CALL_OW 458
20375: AND
20376: IFFALSE 20470
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20378: LD_EXP 86
20382: PUSH
20383: LD_VAR 0 1
20387: ARRAY
20388: PUSH
20389: LD_VAR 0 2
20393: ARRAY
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PPUSH
20399: LD_EXP 86
20403: PUSH
20404: LD_VAR 0 1
20408: ARRAY
20409: PUSH
20410: LD_VAR 0 2
20414: ARRAY
20415: PUSH
20416: LD_INT 2
20418: ARRAY
20419: PPUSH
20420: LD_VAR 0 3
20424: PPUSH
20425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20429: LD_ADDR_EXP 86
20433: PUSH
20434: LD_EXP 86
20438: PPUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: LD_EXP 86
20448: PUSH
20449: LD_VAR 0 1
20453: ARRAY
20454: PPUSH
20455: LD_VAR 0 2
20459: PPUSH
20460: CALL_OW 3
20464: PPUSH
20465: CALL_OW 1
20469: ST_TO_ADDR
// end ; end ;
20470: GO 20221
20472: POP
20473: POP
// end ;
20474: GO 20139
20476: POP
20477: POP
// end ;
20478: PPOPN 4
20480: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20481: LD_INT 0
20483: PPUSH
20484: PPUSH
// result := false ;
20485: LD_ADDR_VAR 0 4
20489: PUSH
20490: LD_INT 0
20492: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL_OW 264
20502: PUSH
20503: LD_EXP 14
20507: EQUAL
20508: NOT
20509: IFFALSE 20513
// exit ;
20511: GO 20753
// index := GetElementIndex ( minersList , unit ) ;
20513: LD_ADDR_VAR 0 5
20517: PUSH
20518: LD_EXP 85
20522: PPUSH
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL 26697 0 2
20532: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20533: LD_EXP 86
20537: PUSH
20538: LD_VAR 0 5
20542: ARRAY
20543: PUSH
20544: LD_EXP 87
20548: GREATEREQUAL
20549: IFFALSE 20553
// exit ;
20551: GO 20753
// ComMoveXY ( unit , x , y ) ;
20553: LD_VAR 0 1
20557: PPUSH
20558: LD_VAR 0 2
20562: PPUSH
20563: LD_VAR 0 3
20567: PPUSH
20568: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20572: LD_INT 35
20574: PPUSH
20575: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20579: LD_VAR 0 1
20583: PPUSH
20584: LD_VAR 0 2
20588: PPUSH
20589: LD_VAR 0 3
20593: PPUSH
20594: CALL 56761 0 3
20598: NOT
20599: PUSH
20600: LD_VAR 0 1
20604: PPUSH
20605: CALL_OW 314
20609: AND
20610: IFFALSE 20614
// exit ;
20612: GO 20753
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20614: LD_VAR 0 2
20618: PPUSH
20619: LD_VAR 0 3
20623: PPUSH
20624: CALL_OW 428
20628: PUSH
20629: LD_VAR 0 1
20633: EQUAL
20634: PUSH
20635: LD_VAR 0 1
20639: PPUSH
20640: CALL_OW 314
20644: NOT
20645: AND
20646: IFFALSE 20572
// PlaySoundXY ( x , y , PlantMine ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_VAR 0 3
20657: PPUSH
20658: LD_STRING PlantMine
20660: PPUSH
20661: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20665: LD_VAR 0 2
20669: PPUSH
20670: LD_VAR 0 3
20674: PPUSH
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL_OW 255
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20692: LD_ADDR_EXP 86
20696: PUSH
20697: LD_EXP 86
20701: PPUSH
20702: LD_VAR 0 5
20706: PUSH
20707: LD_EXP 86
20711: PUSH
20712: LD_VAR 0 5
20716: ARRAY
20717: PUSH
20718: LD_INT 1
20720: PLUS
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PPUSH
20726: LD_VAR 0 2
20730: PUSH
20731: LD_VAR 0 3
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL 26912 0 3
20744: ST_TO_ADDR
// result := true ;
20745: LD_ADDR_VAR 0 4
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// end ;
20753: LD_VAR 0 4
20757: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
20762: PPUSH
// if not unit in minersList then
20763: LD_VAR 0 1
20767: PUSH
20768: LD_EXP 85
20772: IN
20773: NOT
20774: IFFALSE 20778
// exit ;
20776: GO 21170
// index := GetElementIndex ( minersList , unit ) ;
20778: LD_ADDR_VAR 0 6
20782: PUSH
20783: LD_EXP 85
20787: PPUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL 26697 0 2
20797: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20798: LD_ADDR_VAR 0 5
20802: PUSH
20803: DOUBLE
20804: LD_EXP 86
20808: PUSH
20809: LD_VAR 0 6
20813: ARRAY
20814: INC
20815: ST_TO_ADDR
20816: LD_INT 1
20818: PUSH
20819: FOR_DOWNTO
20820: IFFALSE 20981
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20822: LD_EXP 86
20826: PUSH
20827: LD_VAR 0 6
20831: ARRAY
20832: PUSH
20833: LD_VAR 0 5
20837: ARRAY
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: PUSH
20843: LD_VAR 0 2
20847: EQUAL
20848: PUSH
20849: LD_EXP 86
20853: PUSH
20854: LD_VAR 0 6
20858: ARRAY
20859: PUSH
20860: LD_VAR 0 5
20864: ARRAY
20865: PUSH
20866: LD_INT 2
20868: ARRAY
20869: PUSH
20870: LD_VAR 0 3
20874: EQUAL
20875: AND
20876: IFFALSE 20979
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20878: LD_EXP 86
20882: PUSH
20883: LD_VAR 0 6
20887: ARRAY
20888: PUSH
20889: LD_VAR 0 5
20893: ARRAY
20894: PUSH
20895: LD_INT 1
20897: ARRAY
20898: PPUSH
20899: LD_EXP 86
20903: PUSH
20904: LD_VAR 0 6
20908: ARRAY
20909: PUSH
20910: LD_VAR 0 5
20914: ARRAY
20915: PUSH
20916: LD_INT 2
20918: ARRAY
20919: PPUSH
20920: LD_VAR 0 1
20924: PPUSH
20925: CALL_OW 255
20929: PPUSH
20930: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20934: LD_ADDR_EXP 86
20938: PUSH
20939: LD_EXP 86
20943: PPUSH
20944: LD_VAR 0 6
20948: PPUSH
20949: LD_EXP 86
20953: PUSH
20954: LD_VAR 0 6
20958: ARRAY
20959: PPUSH
20960: LD_VAR 0 5
20964: PPUSH
20965: CALL_OW 3
20969: PPUSH
20970: CALL_OW 1
20974: ST_TO_ADDR
// exit ;
20975: POP
20976: POP
20977: GO 21170
// end ; end ;
20979: GO 20819
20981: POP
20982: POP
// for i := minerMinesList [ index ] downto 1 do
20983: LD_ADDR_VAR 0 5
20987: PUSH
20988: DOUBLE
20989: LD_EXP 86
20993: PUSH
20994: LD_VAR 0 6
20998: ARRAY
20999: INC
21000: ST_TO_ADDR
21001: LD_INT 1
21003: PUSH
21004: FOR_DOWNTO
21005: IFFALSE 21168
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21007: LD_EXP 86
21011: PUSH
21012: LD_VAR 0 6
21016: ARRAY
21017: PUSH
21018: LD_VAR 0 5
21022: ARRAY
21023: PUSH
21024: LD_INT 1
21026: ARRAY
21027: PPUSH
21028: LD_EXP 86
21032: PUSH
21033: LD_VAR 0 6
21037: ARRAY
21038: PUSH
21039: LD_VAR 0 5
21043: ARRAY
21044: PUSH
21045: LD_INT 2
21047: ARRAY
21048: PPUSH
21049: LD_VAR 0 2
21053: PPUSH
21054: LD_VAR 0 3
21058: PPUSH
21059: CALL_OW 298
21063: PUSH
21064: LD_INT 6
21066: LESS
21067: IFFALSE 21166
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21069: LD_EXP 86
21073: PUSH
21074: LD_VAR 0 6
21078: ARRAY
21079: PUSH
21080: LD_VAR 0 5
21084: ARRAY
21085: PUSH
21086: LD_INT 1
21088: ARRAY
21089: PPUSH
21090: LD_EXP 86
21094: PUSH
21095: LD_VAR 0 6
21099: ARRAY
21100: PUSH
21101: LD_VAR 0 5
21105: ARRAY
21106: PUSH
21107: LD_INT 2
21109: ARRAY
21110: PPUSH
21111: LD_VAR 0 1
21115: PPUSH
21116: CALL_OW 255
21120: PPUSH
21121: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21125: LD_ADDR_EXP 86
21129: PUSH
21130: LD_EXP 86
21134: PPUSH
21135: LD_VAR 0 6
21139: PPUSH
21140: LD_EXP 86
21144: PUSH
21145: LD_VAR 0 6
21149: ARRAY
21150: PPUSH
21151: LD_VAR 0 5
21155: PPUSH
21156: CALL_OW 3
21160: PPUSH
21161: CALL_OW 1
21165: ST_TO_ADDR
// end ; end ;
21166: GO 21004
21168: POP
21169: POP
// end ;
21170: LD_VAR 0 4
21174: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21175: LD_INT 0
21177: PPUSH
21178: PPUSH
21179: PPUSH
21180: PPUSH
21181: PPUSH
21182: PPUSH
21183: PPUSH
21184: PPUSH
21185: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21186: LD_VAR 0 1
21190: PPUSH
21191: CALL_OW 264
21195: PUSH
21196: LD_EXP 14
21200: EQUAL
21201: NOT
21202: PUSH
21203: LD_VAR 0 1
21207: PUSH
21208: LD_EXP 85
21212: IN
21213: NOT
21214: OR
21215: IFFALSE 21219
// exit ;
21217: GO 21541
// index := GetElementIndex ( minersList , unit ) ;
21219: LD_ADDR_VAR 0 6
21223: PUSH
21224: LD_EXP 85
21228: PPUSH
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL 26697 0 2
21238: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21239: LD_ADDR_VAR 0 8
21243: PUSH
21244: LD_EXP 87
21248: PUSH
21249: LD_EXP 86
21253: PUSH
21254: LD_VAR 0 6
21258: ARRAY
21259: MINUS
21260: ST_TO_ADDR
// if not minesFreeAmount then
21261: LD_VAR 0 8
21265: NOT
21266: IFFALSE 21270
// exit ;
21268: GO 21541
// tmp := [ ] ;
21270: LD_ADDR_VAR 0 7
21274: PUSH
21275: EMPTY
21276: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21277: LD_ADDR_VAR 0 5
21281: PUSH
21282: DOUBLE
21283: LD_INT 1
21285: DEC
21286: ST_TO_ADDR
21287: LD_VAR 0 8
21291: PUSH
21292: FOR_TO
21293: IFFALSE 21488
// begin _d := rand ( 0 , 5 ) ;
21295: LD_ADDR_VAR 0 11
21299: PUSH
21300: LD_INT 0
21302: PPUSH
21303: LD_INT 5
21305: PPUSH
21306: CALL_OW 12
21310: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21311: LD_ADDR_VAR 0 12
21315: PUSH
21316: LD_INT 2
21318: PPUSH
21319: LD_INT 6
21321: PPUSH
21322: CALL_OW 12
21326: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21327: LD_ADDR_VAR 0 9
21331: PUSH
21332: LD_VAR 0 2
21336: PPUSH
21337: LD_VAR 0 11
21341: PPUSH
21342: LD_VAR 0 12
21346: PPUSH
21347: CALL_OW 272
21351: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21352: LD_ADDR_VAR 0 10
21356: PUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_VAR 0 11
21366: PPUSH
21367: LD_VAR 0 12
21371: PPUSH
21372: CALL_OW 273
21376: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21377: LD_VAR 0 9
21381: PPUSH
21382: LD_VAR 0 10
21386: PPUSH
21387: CALL_OW 488
21391: PUSH
21392: LD_VAR 0 9
21396: PUSH
21397: LD_VAR 0 10
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_VAR 0 7
21410: IN
21411: NOT
21412: AND
21413: PUSH
21414: LD_VAR 0 9
21418: PPUSH
21419: LD_VAR 0 10
21423: PPUSH
21424: CALL_OW 458
21428: NOT
21429: AND
21430: IFFALSE 21472
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21432: LD_ADDR_VAR 0 7
21436: PUSH
21437: LD_VAR 0 7
21441: PPUSH
21442: LD_VAR 0 7
21446: PUSH
21447: LD_INT 1
21449: PLUS
21450: PPUSH
21451: LD_VAR 0 9
21455: PUSH
21456: LD_VAR 0 10
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PPUSH
21465: CALL_OW 1
21469: ST_TO_ADDR
21470: GO 21486
// i := i - 1 ;
21472: LD_ADDR_VAR 0 5
21476: PUSH
21477: LD_VAR 0 5
21481: PUSH
21482: LD_INT 1
21484: MINUS
21485: ST_TO_ADDR
// end ;
21486: GO 21292
21488: POP
21489: POP
// for i in tmp do
21490: LD_ADDR_VAR 0 5
21494: PUSH
21495: LD_VAR 0 7
21499: PUSH
21500: FOR_IN
21501: IFFALSE 21539
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21503: LD_VAR 0 1
21507: PPUSH
21508: LD_VAR 0 5
21512: PUSH
21513: LD_INT 1
21515: ARRAY
21516: PPUSH
21517: LD_VAR 0 5
21521: PUSH
21522: LD_INT 2
21524: ARRAY
21525: PPUSH
21526: CALL 20481 0 3
21530: NOT
21531: IFFALSE 21537
// exit ;
21533: POP
21534: POP
21535: GO 21541
21537: GO 21500
21539: POP
21540: POP
// end ;
21541: LD_VAR 0 4
21545: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21546: LD_INT 0
21548: PPUSH
21549: PPUSH
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
21554: PPUSH
// if not GetClass ( unit ) = class_sniper then
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL_OW 257
21564: PUSH
21565: LD_INT 5
21567: EQUAL
21568: NOT
21569: IFFALSE 21573
// exit ;
21571: GO 21961
// dist := 8 ;
21573: LD_ADDR_VAR 0 5
21577: PUSH
21578: LD_INT 8
21580: ST_TO_ADDR
// viewRange := 12 ;
21581: LD_ADDR_VAR 0 7
21585: PUSH
21586: LD_INT 12
21588: ST_TO_ADDR
// side := GetSide ( unit ) ;
21589: LD_ADDR_VAR 0 6
21593: PUSH
21594: LD_VAR 0 1
21598: PPUSH
21599: CALL_OW 255
21603: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21604: LD_INT 61
21606: PPUSH
21607: LD_VAR 0 6
21611: PPUSH
21612: CALL_OW 321
21616: PUSH
21617: LD_INT 2
21619: EQUAL
21620: IFFALSE 21630
// viewRange := 16 ;
21622: LD_ADDR_VAR 0 7
21626: PUSH
21627: LD_INT 16
21629: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21630: LD_VAR 0 1
21634: PPUSH
21635: LD_VAR 0 2
21639: PPUSH
21640: LD_VAR 0 3
21644: PPUSH
21645: CALL_OW 297
21649: PUSH
21650: LD_VAR 0 5
21654: GREATER
21655: IFFALSE 21734
// begin ComMoveXY ( unit , x , y ) ;
21657: LD_VAR 0 1
21661: PPUSH
21662: LD_VAR 0 2
21666: PPUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21676: LD_INT 35
21678: PPUSH
21679: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: LD_VAR 0 3
21697: PPUSH
21698: CALL 56761 0 3
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21961
// until GetDistUnitXY ( unit , x , y ) < dist ;
21707: LD_VAR 0 1
21711: PPUSH
21712: LD_VAR 0 2
21716: PPUSH
21717: LD_VAR 0 3
21721: PPUSH
21722: CALL_OW 297
21726: PUSH
21727: LD_VAR 0 5
21731: LESS
21732: IFFALSE 21676
// end ; ComTurnXY ( unit , x , y ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_VAR 0 2
21743: PPUSH
21744: LD_VAR 0 3
21748: PPUSH
21749: CALL_OW 118
// wait ( 5 ) ;
21753: LD_INT 5
21755: PPUSH
21756: CALL_OW 67
// _d := GetDir ( unit ) ;
21760: LD_ADDR_VAR 0 10
21764: PUSH
21765: LD_VAR 0 1
21769: PPUSH
21770: CALL_OW 254
21774: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21775: LD_ADDR_VAR 0 8
21779: PUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 250
21789: PPUSH
21790: LD_VAR 0 10
21794: PPUSH
21795: LD_VAR 0 5
21799: PPUSH
21800: CALL_OW 272
21804: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21805: LD_ADDR_VAR 0 9
21809: PUSH
21810: LD_VAR 0 1
21814: PPUSH
21815: CALL_OW 251
21819: PPUSH
21820: LD_VAR 0 10
21824: PPUSH
21825: LD_VAR 0 5
21829: PPUSH
21830: CALL_OW 273
21834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21835: LD_VAR 0 8
21839: PPUSH
21840: LD_VAR 0 9
21844: PPUSH
21845: CALL_OW 488
21849: NOT
21850: IFFALSE 21854
// exit ;
21852: GO 21961
// ComAnimCustom ( unit , 1 ) ;
21854: LD_VAR 0 1
21858: PPUSH
21859: LD_INT 1
21861: PPUSH
21862: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21866: LD_VAR 0 8
21870: PPUSH
21871: LD_VAR 0 9
21875: PPUSH
21876: LD_VAR 0 6
21880: PPUSH
21881: LD_VAR 0 7
21885: PPUSH
21886: CALL_OW 330
// repeat wait ( 1 ) ;
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 316
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 314
21916: OR
21917: PUSH
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 302
21927: NOT
21928: OR
21929: PUSH
21930: LD_VAR 0 1
21934: PPUSH
21935: CALL_OW 301
21939: OR
21940: IFFALSE 21890
// RemoveSeeing ( _x , _y , side ) ;
21942: LD_VAR 0 8
21946: PPUSH
21947: LD_VAR 0 9
21951: PPUSH
21952: LD_VAR 0 6
21956: PPUSH
21957: CALL_OW 331
// end ; end_of_file
21961: LD_VAR 0 4
21965: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21966: LD_INT 0
21968: PPUSH
21969: PPUSH
// if exist_mode then
21970: LD_VAR 0 2
21974: IFFALSE 21999
// unit := CreateCharacter ( prefix & ident ) else
21976: LD_ADDR_VAR 0 5
21980: PUSH
21981: LD_VAR 0 3
21985: PUSH
21986: LD_VAR 0 1
21990: STR
21991: PPUSH
21992: CALL_OW 34
21996: ST_TO_ADDR
21997: GO 22014
// unit := NewCharacter ( ident ) ;
21999: LD_ADDR_VAR 0 5
22003: PUSH
22004: LD_VAR 0 1
22008: PPUSH
22009: CALL_OW 25
22013: ST_TO_ADDR
// result := unit ;
22014: LD_ADDR_VAR 0 4
22018: PUSH
22019: LD_VAR 0 5
22023: ST_TO_ADDR
// end ;
22024: LD_VAR 0 4
22028: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22029: LD_INT 0
22031: PPUSH
22032: PPUSH
// if not side or not nation then
22033: LD_VAR 0 1
22037: NOT
22038: PUSH
22039: LD_VAR 0 2
22043: NOT
22044: OR
22045: IFFALSE 22049
// exit ;
22047: GO 22813
// case nation of nation_american :
22049: LD_VAR 0 2
22053: PUSH
22054: LD_INT 1
22056: DOUBLE
22057: EQUAL
22058: IFTRUE 22062
22060: GO 22276
22062: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22063: LD_ADDR_VAR 0 4
22067: PUSH
22068: LD_INT 35
22070: PUSH
22071: LD_INT 45
22073: PUSH
22074: LD_INT 46
22076: PUSH
22077: LD_INT 47
22079: PUSH
22080: LD_INT 82
22082: PUSH
22083: LD_INT 83
22085: PUSH
22086: LD_INT 84
22088: PUSH
22089: LD_INT 85
22091: PUSH
22092: LD_INT 86
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 6
22103: PUSH
22104: LD_INT 15
22106: PUSH
22107: LD_INT 16
22109: PUSH
22110: LD_INT 7
22112: PUSH
22113: LD_INT 12
22115: PUSH
22116: LD_INT 13
22118: PUSH
22119: LD_INT 10
22121: PUSH
22122: LD_INT 14
22124: PUSH
22125: LD_INT 20
22127: PUSH
22128: LD_INT 21
22130: PUSH
22131: LD_INT 22
22133: PUSH
22134: LD_INT 25
22136: PUSH
22137: LD_INT 32
22139: PUSH
22140: LD_INT 27
22142: PUSH
22143: LD_INT 36
22145: PUSH
22146: LD_INT 69
22148: PUSH
22149: LD_INT 39
22151: PUSH
22152: LD_INT 34
22154: PUSH
22155: LD_INT 40
22157: PUSH
22158: LD_INT 48
22160: PUSH
22161: LD_INT 49
22163: PUSH
22164: LD_INT 50
22166: PUSH
22167: LD_INT 51
22169: PUSH
22170: LD_INT 52
22172: PUSH
22173: LD_INT 53
22175: PUSH
22176: LD_INT 54
22178: PUSH
22179: LD_INT 55
22181: PUSH
22182: LD_INT 56
22184: PUSH
22185: LD_INT 57
22187: PUSH
22188: LD_INT 58
22190: PUSH
22191: LD_INT 59
22193: PUSH
22194: LD_INT 60
22196: PUSH
22197: LD_INT 61
22199: PUSH
22200: LD_INT 62
22202: PUSH
22203: LD_INT 80
22205: PUSH
22206: LD_INT 82
22208: PUSH
22209: LD_INT 83
22211: PUSH
22212: LD_INT 84
22214: PUSH
22215: LD_INT 85
22217: PUSH
22218: LD_INT 86
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: ST_TO_ADDR
22274: GO 22737
22276: LD_INT 2
22278: DOUBLE
22279: EQUAL
22280: IFTRUE 22284
22282: GO 22506
22284: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
22285: LD_ADDR_VAR 0 4
22289: PUSH
22290: LD_INT 35
22292: PUSH
22293: LD_INT 45
22295: PUSH
22296: LD_INT 46
22298: PUSH
22299: LD_INT 47
22301: PUSH
22302: LD_INT 82
22304: PUSH
22305: LD_INT 83
22307: PUSH
22308: LD_INT 84
22310: PUSH
22311: LD_INT 85
22313: PUSH
22314: LD_INT 87
22316: PUSH
22317: LD_INT 70
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: LD_INT 11
22325: PUSH
22326: LD_INT 3
22328: PUSH
22329: LD_INT 4
22331: PUSH
22332: LD_INT 5
22334: PUSH
22335: LD_INT 6
22337: PUSH
22338: LD_INT 15
22340: PUSH
22341: LD_INT 18
22343: PUSH
22344: LD_INT 7
22346: PUSH
22347: LD_INT 17
22349: PUSH
22350: LD_INT 8
22352: PUSH
22353: LD_INT 20
22355: PUSH
22356: LD_INT 21
22358: PUSH
22359: LD_INT 22
22361: PUSH
22362: LD_INT 72
22364: PUSH
22365: LD_INT 26
22367: PUSH
22368: LD_INT 69
22370: PUSH
22371: LD_INT 39
22373: PUSH
22374: LD_INT 40
22376: PUSH
22377: LD_INT 41
22379: PUSH
22380: LD_INT 42
22382: PUSH
22383: LD_INT 43
22385: PUSH
22386: LD_INT 48
22388: PUSH
22389: LD_INT 49
22391: PUSH
22392: LD_INT 50
22394: PUSH
22395: LD_INT 51
22397: PUSH
22398: LD_INT 52
22400: PUSH
22401: LD_INT 53
22403: PUSH
22404: LD_INT 54
22406: PUSH
22407: LD_INT 55
22409: PUSH
22410: LD_INT 56
22412: PUSH
22413: LD_INT 60
22415: PUSH
22416: LD_INT 61
22418: PUSH
22419: LD_INT 62
22421: PUSH
22422: LD_INT 66
22424: PUSH
22425: LD_INT 67
22427: PUSH
22428: LD_INT 68
22430: PUSH
22431: LD_INT 81
22433: PUSH
22434: LD_INT 82
22436: PUSH
22437: LD_INT 83
22439: PUSH
22440: LD_INT 84
22442: PUSH
22443: LD_INT 85
22445: PUSH
22446: LD_INT 87
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: ST_TO_ADDR
22504: GO 22737
22506: LD_INT 3
22508: DOUBLE
22509: EQUAL
22510: IFTRUE 22514
22512: GO 22736
22514: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22515: LD_ADDR_VAR 0 4
22519: PUSH
22520: LD_INT 46
22522: PUSH
22523: LD_INT 47
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 82
22534: PUSH
22535: LD_INT 83
22537: PUSH
22538: LD_INT 84
22540: PUSH
22541: LD_INT 85
22543: PUSH
22544: LD_INT 86
22546: PUSH
22547: LD_INT 11
22549: PUSH
22550: LD_INT 9
22552: PUSH
22553: LD_INT 20
22555: PUSH
22556: LD_INT 19
22558: PUSH
22559: LD_INT 21
22561: PUSH
22562: LD_INT 24
22564: PUSH
22565: LD_INT 22
22567: PUSH
22568: LD_INT 25
22570: PUSH
22571: LD_INT 28
22573: PUSH
22574: LD_INT 29
22576: PUSH
22577: LD_INT 30
22579: PUSH
22580: LD_INT 31
22582: PUSH
22583: LD_INT 37
22585: PUSH
22586: LD_INT 38
22588: PUSH
22589: LD_INT 32
22591: PUSH
22592: LD_INT 27
22594: PUSH
22595: LD_INT 33
22597: PUSH
22598: LD_INT 69
22600: PUSH
22601: LD_INT 39
22603: PUSH
22604: LD_INT 34
22606: PUSH
22607: LD_INT 40
22609: PUSH
22610: LD_INT 71
22612: PUSH
22613: LD_INT 23
22615: PUSH
22616: LD_INT 44
22618: PUSH
22619: LD_INT 48
22621: PUSH
22622: LD_INT 49
22624: PUSH
22625: LD_INT 50
22627: PUSH
22628: LD_INT 51
22630: PUSH
22631: LD_INT 52
22633: PUSH
22634: LD_INT 53
22636: PUSH
22637: LD_INT 54
22639: PUSH
22640: LD_INT 55
22642: PUSH
22643: LD_INT 56
22645: PUSH
22646: LD_INT 57
22648: PUSH
22649: LD_INT 58
22651: PUSH
22652: LD_INT 59
22654: PUSH
22655: LD_INT 63
22657: PUSH
22658: LD_INT 64
22660: PUSH
22661: LD_INT 65
22663: PUSH
22664: LD_INT 82
22666: PUSH
22667: LD_INT 83
22669: PUSH
22670: LD_INT 84
22672: PUSH
22673: LD_INT 85
22675: PUSH
22676: LD_INT 86
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: ST_TO_ADDR
22734: GO 22737
22736: POP
// if state > - 1 and state < 3 then
22737: LD_VAR 0 3
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: GREATER
22746: PUSH
22747: LD_VAR 0 3
22751: PUSH
22752: LD_INT 3
22754: LESS
22755: AND
22756: IFFALSE 22813
// for i in result do
22758: LD_ADDR_VAR 0 5
22762: PUSH
22763: LD_VAR 0 4
22767: PUSH
22768: FOR_IN
22769: IFFALSE 22811
// if GetTech ( i , side ) <> state then
22771: LD_VAR 0 5
22775: PPUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 321
22785: PUSH
22786: LD_VAR 0 3
22790: NONEQUAL
22791: IFFALSE 22809
// result := result diff i ;
22793: LD_ADDR_VAR 0 4
22797: PUSH
22798: LD_VAR 0 4
22802: PUSH
22803: LD_VAR 0 5
22807: DIFF
22808: ST_TO_ADDR
22809: GO 22768
22811: POP
22812: POP
// end ;
22813: LD_VAR 0 4
22817: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22818: LD_INT 0
22820: PPUSH
22821: PPUSH
22822: PPUSH
// result := true ;
22823: LD_ADDR_VAR 0 3
22827: PUSH
22828: LD_INT 1
22830: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22831: LD_ADDR_VAR 0 5
22835: PUSH
22836: LD_VAR 0 2
22840: PPUSH
22841: CALL_OW 480
22845: ST_TO_ADDR
// if not tmp then
22846: LD_VAR 0 5
22850: NOT
22851: IFFALSE 22855
// exit ;
22853: GO 22904
// for i in tmp do
22855: LD_ADDR_VAR 0 4
22859: PUSH
22860: LD_VAR 0 5
22864: PUSH
22865: FOR_IN
22866: IFFALSE 22902
// if GetTech ( i , side ) <> state_researched then
22868: LD_VAR 0 4
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 321
22882: PUSH
22883: LD_INT 2
22885: NONEQUAL
22886: IFFALSE 22900
// begin result := false ;
22888: LD_ADDR_VAR 0 3
22892: PUSH
22893: LD_INT 0
22895: ST_TO_ADDR
// exit ;
22896: POP
22897: POP
22898: GO 22904
// end ;
22900: GO 22865
22902: POP
22903: POP
// end ;
22904: LD_VAR 0 3
22908: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22909: LD_INT 0
22911: PPUSH
22912: PPUSH
22913: PPUSH
22914: PPUSH
22915: PPUSH
22916: PPUSH
22917: PPUSH
22918: PPUSH
22919: PPUSH
22920: PPUSH
22921: PPUSH
22922: PPUSH
22923: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22924: LD_VAR 0 1
22928: NOT
22929: PUSH
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 257
22939: PUSH
22940: LD_INT 9
22942: NONEQUAL
22943: OR
22944: IFFALSE 22948
// exit ;
22946: GO 23521
// side := GetSide ( unit ) ;
22948: LD_ADDR_VAR 0 9
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: CALL_OW 255
22962: ST_TO_ADDR
// tech_space := tech_spacanom ;
22963: LD_ADDR_VAR 0 12
22967: PUSH
22968: LD_INT 29
22970: ST_TO_ADDR
// tech_time := tech_taurad ;
22971: LD_ADDR_VAR 0 13
22975: PUSH
22976: LD_INT 28
22978: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22979: LD_ADDR_VAR 0 11
22983: PUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 310
22993: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22994: LD_VAR 0 11
22998: PPUSH
22999: CALL_OW 247
23003: PUSH
23004: LD_INT 2
23006: EQUAL
23007: IFFALSE 23011
// exit ;
23009: GO 23521
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23011: LD_ADDR_VAR 0 8
23015: PUSH
23016: LD_INT 81
23018: PUSH
23019: LD_VAR 0 9
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PPUSH
23049: CALL_OW 69
23053: ST_TO_ADDR
// if not tmp then
23054: LD_VAR 0 8
23058: NOT
23059: IFFALSE 23063
// exit ;
23061: GO 23521
// if in_unit then
23063: LD_VAR 0 11
23067: IFFALSE 23091
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23069: LD_ADDR_VAR 0 10
23073: PUSH
23074: LD_VAR 0 8
23078: PPUSH
23079: LD_VAR 0 11
23083: PPUSH
23084: CALL_OW 74
23088: ST_TO_ADDR
23089: GO 23111
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23091: LD_ADDR_VAR 0 10
23095: PUSH
23096: LD_VAR 0 8
23100: PPUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 74
23110: ST_TO_ADDR
// if not enemy then
23111: LD_VAR 0 10
23115: NOT
23116: IFFALSE 23120
// exit ;
23118: GO 23521
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23120: LD_VAR 0 11
23124: PUSH
23125: LD_VAR 0 11
23129: PPUSH
23130: LD_VAR 0 10
23134: PPUSH
23135: CALL_OW 296
23139: PUSH
23140: LD_INT 13
23142: GREATER
23143: AND
23144: PUSH
23145: LD_VAR 0 1
23149: PPUSH
23150: LD_VAR 0 10
23154: PPUSH
23155: CALL_OW 296
23159: PUSH
23160: LD_INT 12
23162: GREATER
23163: OR
23164: IFFALSE 23168
// exit ;
23166: GO 23521
// missile := [ 1 ] ;
23168: LD_ADDR_VAR 0 14
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: EMPTY
23177: LIST
23178: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23179: LD_VAR 0 9
23183: PPUSH
23184: LD_VAR 0 12
23188: PPUSH
23189: CALL_OW 325
23193: IFFALSE 23222
// missile := Insert ( missile , missile + 1 , 2 ) ;
23195: LD_ADDR_VAR 0 14
23199: PUSH
23200: LD_VAR 0 14
23204: PPUSH
23205: LD_VAR 0 14
23209: PUSH
23210: LD_INT 1
23212: PLUS
23213: PPUSH
23214: LD_INT 2
23216: PPUSH
23217: CALL_OW 2
23221: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23222: LD_VAR 0 9
23226: PPUSH
23227: LD_VAR 0 13
23231: PPUSH
23232: CALL_OW 325
23236: PUSH
23237: LD_VAR 0 10
23241: PPUSH
23242: CALL_OW 255
23246: PPUSH
23247: LD_VAR 0 13
23251: PPUSH
23252: CALL_OW 325
23256: NOT
23257: AND
23258: IFFALSE 23287
// missile := Insert ( missile , missile + 1 , 3 ) ;
23260: LD_ADDR_VAR 0 14
23264: PUSH
23265: LD_VAR 0 14
23269: PPUSH
23270: LD_VAR 0 14
23274: PUSH
23275: LD_INT 1
23277: PLUS
23278: PPUSH
23279: LD_INT 3
23281: PPUSH
23282: CALL_OW 2
23286: ST_TO_ADDR
// if missile < 2 then
23287: LD_VAR 0 14
23291: PUSH
23292: LD_INT 2
23294: LESS
23295: IFFALSE 23299
// exit ;
23297: GO 23521
// x := GetX ( enemy ) ;
23299: LD_ADDR_VAR 0 4
23303: PUSH
23304: LD_VAR 0 10
23308: PPUSH
23309: CALL_OW 250
23313: ST_TO_ADDR
// y := GetY ( enemy ) ;
23314: LD_ADDR_VAR 0 5
23318: PUSH
23319: LD_VAR 0 10
23323: PPUSH
23324: CALL_OW 251
23328: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23329: LD_ADDR_VAR 0 6
23333: PUSH
23334: LD_VAR 0 4
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PPUSH
23343: LD_INT 1
23345: PPUSH
23346: CALL_OW 12
23350: PLUS
23351: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23352: LD_ADDR_VAR 0 7
23356: PUSH
23357: LD_VAR 0 5
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PPUSH
23366: LD_INT 1
23368: PPUSH
23369: CALL_OW 12
23373: PLUS
23374: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23375: LD_VAR 0 6
23379: PPUSH
23380: LD_VAR 0 7
23384: PPUSH
23385: CALL_OW 488
23389: NOT
23390: IFFALSE 23412
// begin _x := x ;
23392: LD_ADDR_VAR 0 6
23396: PUSH
23397: LD_VAR 0 4
23401: ST_TO_ADDR
// _y := y ;
23402: LD_ADDR_VAR 0 7
23406: PUSH
23407: LD_VAR 0 5
23411: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23412: LD_ADDR_VAR 0 3
23416: PUSH
23417: LD_INT 1
23419: PPUSH
23420: LD_VAR 0 14
23424: PPUSH
23425: CALL_OW 12
23429: ST_TO_ADDR
// case i of 1 :
23430: LD_VAR 0 3
23434: PUSH
23435: LD_INT 1
23437: DOUBLE
23438: EQUAL
23439: IFTRUE 23443
23441: GO 23460
23443: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23444: LD_VAR 0 1
23448: PPUSH
23449: LD_VAR 0 10
23453: PPUSH
23454: CALL_OW 115
23458: GO 23521
23460: LD_INT 2
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23490
23468: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23469: LD_VAR 0 1
23473: PPUSH
23474: LD_VAR 0 6
23478: PPUSH
23479: LD_VAR 0 7
23483: PPUSH
23484: CALL_OW 153
23488: GO 23521
23490: LD_INT 3
23492: DOUBLE
23493: EQUAL
23494: IFTRUE 23498
23496: GO 23520
23498: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23499: LD_VAR 0 1
23503: PPUSH
23504: LD_VAR 0 6
23508: PPUSH
23509: LD_VAR 0 7
23513: PPUSH
23514: CALL_OW 154
23518: GO 23521
23520: POP
// end ;
23521: LD_VAR 0 2
23525: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23526: LD_INT 0
23528: PPUSH
23529: PPUSH
23530: PPUSH
23531: PPUSH
23532: PPUSH
23533: PPUSH
// if not unit or not building then
23534: LD_VAR 0 1
23538: NOT
23539: PUSH
23540: LD_VAR 0 2
23544: NOT
23545: OR
23546: IFFALSE 23550
// exit ;
23548: GO 23708
// x := GetX ( building ) ;
23550: LD_ADDR_VAR 0 5
23554: PUSH
23555: LD_VAR 0 2
23559: PPUSH
23560: CALL_OW 250
23564: ST_TO_ADDR
// y := GetY ( building ) ;
23565: LD_ADDR_VAR 0 6
23569: PUSH
23570: LD_VAR 0 2
23574: PPUSH
23575: CALL_OW 251
23579: ST_TO_ADDR
// for i = 0 to 5 do
23580: LD_ADDR_VAR 0 4
23584: PUSH
23585: DOUBLE
23586: LD_INT 0
23588: DEC
23589: ST_TO_ADDR
23590: LD_INT 5
23592: PUSH
23593: FOR_TO
23594: IFFALSE 23706
// begin _x := ShiftX ( x , i , 3 ) ;
23596: LD_ADDR_VAR 0 7
23600: PUSH
23601: LD_VAR 0 5
23605: PPUSH
23606: LD_VAR 0 4
23610: PPUSH
23611: LD_INT 3
23613: PPUSH
23614: CALL_OW 272
23618: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23619: LD_ADDR_VAR 0 8
23623: PUSH
23624: LD_VAR 0 6
23628: PPUSH
23629: LD_VAR 0 4
23633: PPUSH
23634: LD_INT 3
23636: PPUSH
23637: CALL_OW 273
23641: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23642: LD_VAR 0 7
23646: PPUSH
23647: LD_VAR 0 8
23651: PPUSH
23652: CALL_OW 488
23656: NOT
23657: IFFALSE 23661
// continue ;
23659: GO 23593
// if HexInfo ( _x , _y ) = 0 then
23661: LD_VAR 0 7
23665: PPUSH
23666: LD_VAR 0 8
23670: PPUSH
23671: CALL_OW 428
23675: PUSH
23676: LD_INT 0
23678: EQUAL
23679: IFFALSE 23704
// begin ComMoveXY ( unit , _x , _y ) ;
23681: LD_VAR 0 1
23685: PPUSH
23686: LD_VAR 0 7
23690: PPUSH
23691: LD_VAR 0 8
23695: PPUSH
23696: CALL_OW 111
// exit ;
23700: POP
23701: POP
23702: GO 23708
// end ; end ;
23704: GO 23593
23706: POP
23707: POP
// end ;
23708: LD_VAR 0 3
23712: RET
// export function ScanBase ( side , base_area ) ; begin
23713: LD_INT 0
23715: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23716: LD_ADDR_VAR 0 3
23720: PUSH
23721: LD_VAR 0 2
23725: PPUSH
23726: LD_INT 81
23728: PUSH
23729: LD_VAR 0 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PPUSH
23738: CALL_OW 70
23742: ST_TO_ADDR
// end ;
23743: LD_VAR 0 3
23747: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23748: LD_INT 0
23750: PPUSH
23751: PPUSH
23752: PPUSH
23753: PPUSH
// result := false ;
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: LD_INT 0
23761: ST_TO_ADDR
// side := GetSide ( unit ) ;
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_VAR 0 1
23771: PPUSH
23772: CALL_OW 255
23776: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23777: LD_ADDR_VAR 0 4
23781: PUSH
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 248
23791: ST_TO_ADDR
// case nat of 1 :
23792: LD_VAR 0 4
23796: PUSH
23797: LD_INT 1
23799: DOUBLE
23800: EQUAL
23801: IFTRUE 23805
23803: GO 23816
23805: POP
// tech := tech_lassight ; 2 :
23806: LD_ADDR_VAR 0 5
23810: PUSH
23811: LD_INT 12
23813: ST_TO_ADDR
23814: GO 23855
23816: LD_INT 2
23818: DOUBLE
23819: EQUAL
23820: IFTRUE 23824
23822: GO 23835
23824: POP
// tech := tech_mortar ; 3 :
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: LD_INT 41
23832: ST_TO_ADDR
23833: GO 23855
23835: LD_INT 3
23837: DOUBLE
23838: EQUAL
23839: IFTRUE 23843
23841: GO 23854
23843: POP
// tech := tech_bazooka ; end ;
23844: LD_ADDR_VAR 0 5
23848: PUSH
23849: LD_INT 44
23851: ST_TO_ADDR
23852: GO 23855
23854: POP
// if Researched ( side , tech ) then
23855: LD_VAR 0 3
23859: PPUSH
23860: LD_VAR 0 5
23864: PPUSH
23865: CALL_OW 325
23869: IFFALSE 23896
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23871: LD_ADDR_VAR 0 2
23875: PUSH
23876: LD_INT 5
23878: PUSH
23879: LD_INT 8
23881: PUSH
23882: LD_INT 9
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: PUSH
23890: LD_VAR 0 4
23894: ARRAY
23895: ST_TO_ADDR
// end ;
23896: LD_VAR 0 2
23900: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23901: LD_INT 0
23903: PPUSH
23904: PPUSH
23905: PPUSH
// if not mines then
23906: LD_VAR 0 2
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 24059
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23915: LD_ADDR_VAR 0 5
23919: PUSH
23920: LD_INT 81
23922: PUSH
23923: LD_VAR 0 1
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: LD_INT 21
23937: PUSH
23938: LD_INT 3
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PPUSH
23953: CALL_OW 69
23957: ST_TO_ADDR
// for i in mines do
23958: LD_ADDR_VAR 0 4
23962: PUSH
23963: LD_VAR 0 2
23967: PUSH
23968: FOR_IN
23969: IFFALSE 24057
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23971: LD_VAR 0 4
23975: PUSH
23976: LD_INT 1
23978: ARRAY
23979: PPUSH
23980: LD_VAR 0 4
23984: PUSH
23985: LD_INT 2
23987: ARRAY
23988: PPUSH
23989: CALL_OW 458
23993: NOT
23994: IFFALSE 23998
// continue ;
23996: GO 23968
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23998: LD_VAR 0 4
24002: PUSH
24003: LD_INT 1
24005: ARRAY
24006: PPUSH
24007: LD_VAR 0 4
24011: PUSH
24012: LD_INT 2
24014: ARRAY
24015: PPUSH
24016: CALL_OW 428
24020: PUSH
24021: LD_VAR 0 5
24025: IN
24026: IFFALSE 24055
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24028: LD_VAR 0 4
24032: PUSH
24033: LD_INT 1
24035: ARRAY
24036: PPUSH
24037: LD_VAR 0 4
24041: PUSH
24042: LD_INT 2
24044: ARRAY
24045: PPUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 456
// end ;
24055: GO 23968
24057: POP
24058: POP
// end ;
24059: LD_VAR 0 3
24063: RET
// export function Count ( array ) ; var i ; begin
24064: LD_INT 0
24066: PPUSH
24067: PPUSH
// result := 0 ;
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_INT 0
24075: ST_TO_ADDR
// for i in array do
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: LD_VAR 0 1
24085: PUSH
24086: FOR_IN
24087: IFFALSE 24111
// if i then
24089: LD_VAR 0 3
24093: IFFALSE 24109
// result := result + 1 ;
24095: LD_ADDR_VAR 0 2
24099: PUSH
24100: LD_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: PLUS
24108: ST_TO_ADDR
24109: GO 24086
24111: POP
24112: POP
// end ;
24113: LD_VAR 0 2
24117: RET
// export function IsEmpty ( building ) ; begin
24118: LD_INT 0
24120: PPUSH
// if not building then
24121: LD_VAR 0 1
24125: NOT
24126: IFFALSE 24130
// exit ;
24128: GO 24173
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24130: LD_ADDR_VAR 0 2
24134: PUSH
24135: LD_VAR 0 1
24139: PUSH
24140: LD_INT 22
24142: PUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 255
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 58
24159: PUSH
24160: EMPTY
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PPUSH
24167: CALL_OW 69
24171: IN
24172: ST_TO_ADDR
// end ;
24173: LD_VAR 0 2
24177: RET
// export function IsNotFull ( building ) ; begin
24178: LD_INT 0
24180: PPUSH
// if not building then
24181: LD_VAR 0 1
24185: NOT
24186: IFFALSE 24190
// exit ;
24188: GO 24209
// result := UnitsInside ( building ) < 6 ;
24190: LD_ADDR_VAR 0 2
24194: PUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 313
24204: PUSH
24205: LD_INT 6
24207: LESS
24208: ST_TO_ADDR
// end ;
24209: LD_VAR 0 2
24213: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24214: LD_INT 0
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
// tmp := [ ] ;
24220: LD_ADDR_VAR 0 3
24224: PUSH
24225: EMPTY
24226: ST_TO_ADDR
// list := [ ] ;
24227: LD_ADDR_VAR 0 5
24231: PUSH
24232: EMPTY
24233: ST_TO_ADDR
// for i = 16 to 25 do
24234: LD_ADDR_VAR 0 4
24238: PUSH
24239: DOUBLE
24240: LD_INT 16
24242: DEC
24243: ST_TO_ADDR
24244: LD_INT 25
24246: PUSH
24247: FOR_TO
24248: IFFALSE 24321
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24250: LD_ADDR_VAR 0 3
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_INT 22
24262: PUSH
24263: LD_VAR 0 1
24267: PPUSH
24268: CALL_OW 255
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 91
24279: PUSH
24280: LD_VAR 0 1
24284: PUSH
24285: LD_INT 6
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_VAR 0 4
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: PPUSH
24313: CALL_OW 69
24317: ADD
24318: ST_TO_ADDR
24319: GO 24247
24321: POP
24322: POP
// for i = 1 to tmp do
24323: LD_ADDR_VAR 0 4
24327: PUSH
24328: DOUBLE
24329: LD_INT 1
24331: DEC
24332: ST_TO_ADDR
24333: LD_VAR 0 3
24337: PUSH
24338: FOR_TO
24339: IFFALSE 24427
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24341: LD_ADDR_VAR 0 5
24345: PUSH
24346: LD_VAR 0 5
24350: PUSH
24351: LD_VAR 0 3
24355: PUSH
24356: LD_VAR 0 4
24360: ARRAY
24361: PPUSH
24362: CALL_OW 266
24366: PUSH
24367: LD_VAR 0 3
24371: PUSH
24372: LD_VAR 0 4
24376: ARRAY
24377: PPUSH
24378: CALL_OW 250
24382: PUSH
24383: LD_VAR 0 3
24387: PUSH
24388: LD_VAR 0 4
24392: ARRAY
24393: PPUSH
24394: CALL_OW 251
24398: PUSH
24399: LD_VAR 0 3
24403: PUSH
24404: LD_VAR 0 4
24408: ARRAY
24409: PPUSH
24410: CALL_OW 254
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: ADD
24424: ST_TO_ADDR
24425: GO 24338
24427: POP
24428: POP
// result := list ;
24429: LD_ADDR_VAR 0 2
24433: PUSH
24434: LD_VAR 0 5
24438: ST_TO_ADDR
// end ;
24439: LD_VAR 0 2
24443: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24444: LD_INT 0
24446: PPUSH
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
24451: PPUSH
24452: PPUSH
// if not factory then
24453: LD_VAR 0 1
24457: NOT
24458: IFFALSE 24462
// exit ;
24460: GO 25055
// if control = control_apeman then
24462: LD_VAR 0 4
24466: PUSH
24467: LD_INT 5
24469: EQUAL
24470: IFFALSE 24579
// begin tmp := UnitsInside ( factory ) ;
24472: LD_ADDR_VAR 0 8
24476: PUSH
24477: LD_VAR 0 1
24481: PPUSH
24482: CALL_OW 313
24486: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24487: LD_VAR 0 8
24491: PPUSH
24492: LD_INT 25
24494: PUSH
24495: LD_INT 12
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PPUSH
24502: CALL_OW 72
24506: NOT
24507: IFFALSE 24517
// control := control_manual ;
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: LD_INT 1
24516: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24517: LD_ADDR_VAR 0 8
24521: PUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL 24214 0 1
24531: ST_TO_ADDR
// if tmp then
24532: LD_VAR 0 8
24536: IFFALSE 24579
// begin for i in tmp do
24538: LD_ADDR_VAR 0 7
24542: PUSH
24543: LD_VAR 0 8
24547: PUSH
24548: FOR_IN
24549: IFFALSE 24577
// if i [ 1 ] = b_ext_radio then
24551: LD_VAR 0 7
24555: PUSH
24556: LD_INT 1
24558: ARRAY
24559: PUSH
24560: LD_INT 22
24562: EQUAL
24563: IFFALSE 24575
// begin control := control_remote ;
24565: LD_ADDR_VAR 0 4
24569: PUSH
24570: LD_INT 2
24572: ST_TO_ADDR
// break ;
24573: GO 24577
// end ;
24575: GO 24548
24577: POP
24578: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24579: LD_VAR 0 1
24583: PPUSH
24584: LD_VAR 0 2
24588: PPUSH
24589: LD_VAR 0 3
24593: PPUSH
24594: LD_VAR 0 4
24598: PPUSH
24599: LD_VAR 0 5
24603: PPUSH
24604: CALL_OW 448
24608: IFFALSE 24643
// begin result := [ chassis , engine , control , weapon ] ;
24610: LD_ADDR_VAR 0 6
24614: PUSH
24615: LD_VAR 0 2
24619: PUSH
24620: LD_VAR 0 3
24624: PUSH
24625: LD_VAR 0 4
24629: PUSH
24630: LD_VAR 0 5
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: ST_TO_ADDR
// exit ;
24641: GO 25055
// end ; _chassis := AvailableChassisList ( factory ) ;
24643: LD_ADDR_VAR 0 9
24647: PUSH
24648: LD_VAR 0 1
24652: PPUSH
24653: CALL_OW 475
24657: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24658: LD_ADDR_VAR 0 11
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 476
24672: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24673: LD_ADDR_VAR 0 12
24677: PUSH
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 477
24687: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24688: LD_ADDR_VAR 0 10
24692: PUSH
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 478
24702: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24703: LD_VAR 0 9
24707: NOT
24708: PUSH
24709: LD_VAR 0 11
24713: NOT
24714: OR
24715: PUSH
24716: LD_VAR 0 12
24720: NOT
24721: OR
24722: PUSH
24723: LD_VAR 0 10
24727: NOT
24728: OR
24729: IFFALSE 24764
// begin result := [ chassis , engine , control , weapon ] ;
24731: LD_ADDR_VAR 0 6
24735: PUSH
24736: LD_VAR 0 2
24740: PUSH
24741: LD_VAR 0 3
24745: PUSH
24746: LD_VAR 0 4
24750: PUSH
24751: LD_VAR 0 5
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
// exit ;
24762: GO 25055
// end ; if not chassis in _chassis then
24764: LD_VAR 0 2
24768: PUSH
24769: LD_VAR 0 9
24773: IN
24774: NOT
24775: IFFALSE 24801
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24777: LD_ADDR_VAR 0 2
24781: PUSH
24782: LD_VAR 0 9
24786: PUSH
24787: LD_INT 1
24789: PPUSH
24790: LD_VAR 0 9
24794: PPUSH
24795: CALL_OW 12
24799: ARRAY
24800: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24801: LD_VAR 0 2
24805: PPUSH
24806: LD_VAR 0 3
24810: PPUSH
24811: CALL 25060 0 2
24815: NOT
24816: IFFALSE 24875
// repeat engine := _engine [ 1 ] ;
24818: LD_ADDR_VAR 0 3
24822: PUSH
24823: LD_VAR 0 11
24827: PUSH
24828: LD_INT 1
24830: ARRAY
24831: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24832: LD_ADDR_VAR 0 11
24836: PUSH
24837: LD_VAR 0 11
24841: PPUSH
24842: LD_INT 1
24844: PPUSH
24845: CALL_OW 3
24849: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24850: LD_VAR 0 2
24854: PPUSH
24855: LD_VAR 0 3
24859: PPUSH
24860: CALL 25060 0 2
24864: PUSH
24865: LD_VAR 0 11
24869: PUSH
24870: EMPTY
24871: EQUAL
24872: OR
24873: IFFALSE 24818
// if not control in _control then
24875: LD_VAR 0 4
24879: PUSH
24880: LD_VAR 0 12
24884: IN
24885: NOT
24886: IFFALSE 24912
// control := _control [ rand ( 1 , _control ) ] ;
24888: LD_ADDR_VAR 0 4
24892: PUSH
24893: LD_VAR 0 12
24897: PUSH
24898: LD_INT 1
24900: PPUSH
24901: LD_VAR 0 12
24905: PPUSH
24906: CALL_OW 12
24910: ARRAY
24911: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24912: LD_VAR 0 2
24916: PPUSH
24917: LD_VAR 0 5
24921: PPUSH
24922: CALL 25280 0 2
24926: NOT
24927: IFFALSE 24986
// repeat weapon := _weapon [ 1 ] ;
24929: LD_ADDR_VAR 0 5
24933: PUSH
24934: LD_VAR 0 10
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24943: LD_ADDR_VAR 0 10
24947: PUSH
24948: LD_VAR 0 10
24952: PPUSH
24953: LD_INT 1
24955: PPUSH
24956: CALL_OW 3
24960: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24961: LD_VAR 0 2
24965: PPUSH
24966: LD_VAR 0 5
24970: PPUSH
24971: CALL 25280 0 2
24975: PUSH
24976: LD_VAR 0 10
24980: PUSH
24981: EMPTY
24982: EQUAL
24983: OR
24984: IFFALSE 24929
// result := [ ] ;
24986: LD_ADDR_VAR 0 6
24990: PUSH
24991: EMPTY
24992: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_VAR 0 2
25002: PPUSH
25003: LD_VAR 0 3
25007: PPUSH
25008: LD_VAR 0 4
25012: PPUSH
25013: LD_VAR 0 5
25017: PPUSH
25018: CALL_OW 448
25022: IFFALSE 25055
// result := [ chassis , engine , control , weapon ] ;
25024: LD_ADDR_VAR 0 6
25028: PUSH
25029: LD_VAR 0 2
25033: PUSH
25034: LD_VAR 0 3
25038: PUSH
25039: LD_VAR 0 4
25043: PUSH
25044: LD_VAR 0 5
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
// end ;
25055: LD_VAR 0 6
25059: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25060: LD_INT 0
25062: PPUSH
// if not chassis or not engine then
25063: LD_VAR 0 1
25067: NOT
25068: PUSH
25069: LD_VAR 0 2
25073: NOT
25074: OR
25075: IFFALSE 25079
// exit ;
25077: GO 25275
// case engine of engine_solar :
25079: LD_VAR 0 2
25083: PUSH
25084: LD_INT 2
25086: DOUBLE
25087: EQUAL
25088: IFTRUE 25092
25090: GO 25130
25092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25093: LD_ADDR_VAR 0 3
25097: PUSH
25098: LD_INT 11
25100: PUSH
25101: LD_INT 12
25103: PUSH
25104: LD_INT 13
25106: PUSH
25107: LD_INT 14
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: LD_INT 3
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: ST_TO_ADDR
25128: GO 25259
25130: LD_INT 1
25132: DOUBLE
25133: EQUAL
25134: IFTRUE 25138
25136: GO 25200
25138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25139: LD_ADDR_VAR 0 3
25143: PUSH
25144: LD_INT 11
25146: PUSH
25147: LD_INT 12
25149: PUSH
25150: LD_INT 13
25152: PUSH
25153: LD_INT 14
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 2
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: LD_INT 4
25167: PUSH
25168: LD_INT 5
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 23
25176: PUSH
25177: LD_INT 22
25179: PUSH
25180: LD_INT 24
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 25259
25200: LD_INT 3
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25258
25208: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_INT 13
25216: PUSH
25217: LD_INT 14
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 3
25225: PUSH
25226: LD_INT 4
25228: PUSH
25229: LD_INT 5
25231: PUSH
25232: LD_INT 21
25234: PUSH
25235: LD_INT 22
25237: PUSH
25238: LD_INT 23
25240: PUSH
25241: LD_INT 24
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: ST_TO_ADDR
25256: GO 25259
25258: POP
// result := ( chassis in result ) ;
25259: LD_ADDR_VAR 0 3
25263: PUSH
25264: LD_VAR 0 1
25268: PUSH
25269: LD_VAR 0 3
25273: IN
25274: ST_TO_ADDR
// end ;
25275: LD_VAR 0 3
25279: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25280: LD_INT 0
25282: PPUSH
// if not chassis or not weapon then
25283: LD_VAR 0 1
25287: NOT
25288: PUSH
25289: LD_VAR 0 2
25293: NOT
25294: OR
25295: IFFALSE 25299
// exit ;
25297: GO 26325
// case weapon of us_machine_gun :
25299: LD_VAR 0 2
25303: PUSH
25304: LD_INT 2
25306: DOUBLE
25307: EQUAL
25308: IFTRUE 25312
25310: GO 25342
25312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25313: LD_ADDR_VAR 0 3
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 3
25326: PUSH
25327: LD_INT 4
25329: PUSH
25330: LD_INT 5
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 26309
25342: LD_INT 3
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25380
25350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 3
25364: PUSH
25365: LD_INT 4
25367: PUSH
25368: LD_INT 5
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: ST_TO_ADDR
25378: GO 26309
25380: LD_INT 11
25382: DOUBLE
25383: EQUAL
25384: IFTRUE 25388
25386: GO 25418
25388: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25389: LD_ADDR_VAR 0 3
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: LD_INT 4
25405: PUSH
25406: LD_INT 5
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: ST_TO_ADDR
25416: GO 26309
25418: LD_INT 4
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25452
25426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: LD_INT 4
25440: PUSH
25441: LD_INT 5
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
25450: GO 26309
25452: LD_INT 5
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25486
25460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: LD_INT 4
25474: PUSH
25475: LD_INT 5
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: ST_TO_ADDR
25484: GO 26309
25486: LD_INT 9
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25520
25494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: LD_INT 4
25508: PUSH
25509: LD_INT 5
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: ST_TO_ADDR
25518: GO 26309
25520: LD_INT 7
25522: DOUBLE
25523: EQUAL
25524: IFTRUE 25528
25526: GO 25554
25528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_INT 2
25536: PUSH
25537: LD_INT 3
25539: PUSH
25540: LD_INT 4
25542: PUSH
25543: LD_INT 5
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: ST_TO_ADDR
25552: GO 26309
25554: LD_INT 12
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25588
25562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: LD_INT 3
25573: PUSH
25574: LD_INT 4
25576: PUSH
25577: LD_INT 5
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: ST_TO_ADDR
25586: GO 26309
25588: LD_INT 13
25590: DOUBLE
25591: EQUAL
25592: IFTRUE 25596
25594: GO 25622
25596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 2
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 4
25610: PUSH
25611: LD_INT 5
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: ST_TO_ADDR
25620: GO 26309
25622: LD_INT 14
25624: DOUBLE
25625: EQUAL
25626: IFTRUE 25630
25628: GO 25648
25630: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_INT 4
25638: PUSH
25639: LD_INT 5
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: ST_TO_ADDR
25646: GO 26309
25648: LD_INT 6
25650: DOUBLE
25651: EQUAL
25652: IFTRUE 25656
25654: GO 25674
25656: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25657: LD_ADDR_VAR 0 3
25661: PUSH
25662: LD_INT 4
25664: PUSH
25665: LD_INT 5
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: ST_TO_ADDR
25672: GO 26309
25674: LD_INT 10
25676: DOUBLE
25677: EQUAL
25678: IFTRUE 25682
25680: GO 25700
25682: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_INT 4
25690: PUSH
25691: LD_INT 5
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: ST_TO_ADDR
25698: GO 26309
25700: LD_INT 22
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25708
25706: GO 25734
25708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25709: LD_ADDR_VAR 0 3
25713: PUSH
25714: LD_INT 11
25716: PUSH
25717: LD_INT 12
25719: PUSH
25720: LD_INT 13
25722: PUSH
25723: LD_INT 14
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: ST_TO_ADDR
25732: GO 26309
25734: LD_INT 23
25736: DOUBLE
25737: EQUAL
25738: IFTRUE 25742
25740: GO 25768
25742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 11
25750: PUSH
25751: LD_INT 12
25753: PUSH
25754: LD_INT 13
25756: PUSH
25757: LD_INT 14
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: ST_TO_ADDR
25766: GO 26309
25768: LD_INT 24
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25802
25776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25777: LD_ADDR_VAR 0 3
25781: PUSH
25782: LD_INT 11
25784: PUSH
25785: LD_INT 12
25787: PUSH
25788: LD_INT 13
25790: PUSH
25791: LD_INT 14
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
25800: GO 26309
25802: LD_INT 30
25804: DOUBLE
25805: EQUAL
25806: IFTRUE 25810
25808: GO 25836
25810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_INT 11
25818: PUSH
25819: LD_INT 12
25821: PUSH
25822: LD_INT 13
25824: PUSH
25825: LD_INT 14
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: ST_TO_ADDR
25834: GO 26309
25836: LD_INT 25
25838: DOUBLE
25839: EQUAL
25840: IFTRUE 25844
25842: GO 25862
25844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25845: LD_ADDR_VAR 0 3
25849: PUSH
25850: LD_INT 13
25852: PUSH
25853: LD_INT 14
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: ST_TO_ADDR
25860: GO 26309
25862: LD_INT 27
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25888
25870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: LD_INT 13
25878: PUSH
25879: LD_INT 14
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: ST_TO_ADDR
25886: GO 26309
25888: LD_INT 28
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25914
25896: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25897: LD_ADDR_VAR 0 3
25901: PUSH
25902: LD_INT 13
25904: PUSH
25905: LD_INT 14
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: ST_TO_ADDR
25912: GO 26309
25914: LD_INT 29
25916: DOUBLE
25917: EQUAL
25918: IFTRUE 25922
25920: GO 25940
25922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_INT 13
25930: PUSH
25931: LD_INT 14
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: ST_TO_ADDR
25938: GO 26309
25940: LD_INT 31
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25966
25948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_INT 13
25956: PUSH
25957: LD_INT 14
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: ST_TO_ADDR
25964: GO 26309
25966: LD_INT 26
25968: DOUBLE
25969: EQUAL
25970: IFTRUE 25974
25972: GO 25992
25974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_INT 13
25982: PUSH
25983: LD_INT 14
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: ST_TO_ADDR
25990: GO 26309
25992: LD_INT 42
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26026
26000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 21
26008: PUSH
26009: LD_INT 22
26011: PUSH
26012: LD_INT 23
26014: PUSH
26015: LD_INT 24
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: ST_TO_ADDR
26024: GO 26309
26026: LD_INT 43
26028: DOUBLE
26029: EQUAL
26030: IFTRUE 26034
26032: GO 26060
26034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 21
26042: PUSH
26043: LD_INT 22
26045: PUSH
26046: LD_INT 23
26048: PUSH
26049: LD_INT 24
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 26309
26060: LD_INT 44
26062: DOUBLE
26063: EQUAL
26064: IFTRUE 26068
26066: GO 26094
26068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: LD_INT 21
26076: PUSH
26077: LD_INT 22
26079: PUSH
26080: LD_INT 23
26082: PUSH
26083: LD_INT 24
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
26092: GO 26309
26094: LD_INT 45
26096: DOUBLE
26097: EQUAL
26098: IFTRUE 26102
26100: GO 26128
26102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26103: LD_ADDR_VAR 0 3
26107: PUSH
26108: LD_INT 21
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_INT 23
26116: PUSH
26117: LD_INT 24
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: ST_TO_ADDR
26126: GO 26309
26128: LD_INT 49
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26162
26136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26137: LD_ADDR_VAR 0 3
26141: PUSH
26142: LD_INT 21
26144: PUSH
26145: LD_INT 22
26147: PUSH
26148: LD_INT 23
26150: PUSH
26151: LD_INT 24
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: ST_TO_ADDR
26160: GO 26309
26162: LD_INT 51
26164: DOUBLE
26165: EQUAL
26166: IFTRUE 26170
26168: GO 26196
26170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26171: LD_ADDR_VAR 0 3
26175: PUSH
26176: LD_INT 21
26178: PUSH
26179: LD_INT 22
26181: PUSH
26182: LD_INT 23
26184: PUSH
26185: LD_INT 24
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: ST_TO_ADDR
26194: GO 26309
26196: LD_INT 52
26198: DOUBLE
26199: EQUAL
26200: IFTRUE 26204
26202: GO 26230
26204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26205: LD_ADDR_VAR 0 3
26209: PUSH
26210: LD_INT 21
26212: PUSH
26213: LD_INT 22
26215: PUSH
26216: LD_INT 23
26218: PUSH
26219: LD_INT 24
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: ST_TO_ADDR
26228: GO 26309
26230: LD_INT 53
26232: DOUBLE
26233: EQUAL
26234: IFTRUE 26238
26236: GO 26256
26238: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26239: LD_ADDR_VAR 0 3
26243: PUSH
26244: LD_INT 23
26246: PUSH
26247: LD_INT 24
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: ST_TO_ADDR
26254: GO 26309
26256: LD_INT 46
26258: DOUBLE
26259: EQUAL
26260: IFTRUE 26264
26262: GO 26282
26264: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26265: LD_ADDR_VAR 0 3
26269: PUSH
26270: LD_INT 23
26272: PUSH
26273: LD_INT 24
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: ST_TO_ADDR
26280: GO 26309
26282: LD_INT 47
26284: DOUBLE
26285: EQUAL
26286: IFTRUE 26290
26288: GO 26308
26290: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_INT 23
26298: PUSH
26299: LD_INT 24
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: ST_TO_ADDR
26306: GO 26309
26308: POP
// result := ( chassis in result ) ;
26309: LD_ADDR_VAR 0 3
26313: PUSH
26314: LD_VAR 0 1
26318: PUSH
26319: LD_VAR 0 3
26323: IN
26324: ST_TO_ADDR
// end ;
26325: LD_VAR 0 3
26329: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26330: LD_INT 0
26332: PPUSH
26333: PPUSH
26334: PPUSH
26335: PPUSH
26336: PPUSH
26337: PPUSH
26338: PPUSH
// result := array ;
26339: LD_ADDR_VAR 0 5
26343: PUSH
26344: LD_VAR 0 1
26348: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26349: LD_VAR 0 1
26353: NOT
26354: PUSH
26355: LD_VAR 0 2
26359: NOT
26360: OR
26361: PUSH
26362: LD_VAR 0 3
26366: NOT
26367: OR
26368: PUSH
26369: LD_VAR 0 2
26373: PUSH
26374: LD_VAR 0 1
26378: GREATER
26379: OR
26380: PUSH
26381: LD_VAR 0 3
26385: PUSH
26386: LD_VAR 0 1
26390: GREATER
26391: OR
26392: IFFALSE 26396
// exit ;
26394: GO 26692
// if direction then
26396: LD_VAR 0 4
26400: IFFALSE 26464
// begin d := 1 ;
26402: LD_ADDR_VAR 0 9
26406: PUSH
26407: LD_INT 1
26409: ST_TO_ADDR
// if i_from > i_to then
26410: LD_VAR 0 2
26414: PUSH
26415: LD_VAR 0 3
26419: GREATER
26420: IFFALSE 26446
// length := ( array - i_from ) + i_to else
26422: LD_ADDR_VAR 0 11
26426: PUSH
26427: LD_VAR 0 1
26431: PUSH
26432: LD_VAR 0 2
26436: MINUS
26437: PUSH
26438: LD_VAR 0 3
26442: PLUS
26443: ST_TO_ADDR
26444: GO 26462
// length := i_to - i_from ;
26446: LD_ADDR_VAR 0 11
26450: PUSH
26451: LD_VAR 0 3
26455: PUSH
26456: LD_VAR 0 2
26460: MINUS
26461: ST_TO_ADDR
// end else
26462: GO 26525
// begin d := - 1 ;
26464: LD_ADDR_VAR 0 9
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: ST_TO_ADDR
// if i_from > i_to then
26473: LD_VAR 0 2
26477: PUSH
26478: LD_VAR 0 3
26482: GREATER
26483: IFFALSE 26503
// length := i_from - i_to else
26485: LD_ADDR_VAR 0 11
26489: PUSH
26490: LD_VAR 0 2
26494: PUSH
26495: LD_VAR 0 3
26499: MINUS
26500: ST_TO_ADDR
26501: GO 26525
// length := ( array - i_to ) + i_from ;
26503: LD_ADDR_VAR 0 11
26507: PUSH
26508: LD_VAR 0 1
26512: PUSH
26513: LD_VAR 0 3
26517: MINUS
26518: PUSH
26519: LD_VAR 0 2
26523: PLUS
26524: ST_TO_ADDR
// end ; if not length then
26525: LD_VAR 0 11
26529: NOT
26530: IFFALSE 26534
// exit ;
26532: GO 26692
// tmp := array ;
26534: LD_ADDR_VAR 0 10
26538: PUSH
26539: LD_VAR 0 1
26543: ST_TO_ADDR
// for i = 1 to length do
26544: LD_ADDR_VAR 0 6
26548: PUSH
26549: DOUBLE
26550: LD_INT 1
26552: DEC
26553: ST_TO_ADDR
26554: LD_VAR 0 11
26558: PUSH
26559: FOR_TO
26560: IFFALSE 26680
// begin for j = 1 to array do
26562: LD_ADDR_VAR 0 7
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_VAR 0 1
26576: PUSH
26577: FOR_TO
26578: IFFALSE 26666
// begin k := j + d ;
26580: LD_ADDR_VAR 0 8
26584: PUSH
26585: LD_VAR 0 7
26589: PUSH
26590: LD_VAR 0 9
26594: PLUS
26595: ST_TO_ADDR
// if k > array then
26596: LD_VAR 0 8
26600: PUSH
26601: LD_VAR 0 1
26605: GREATER
26606: IFFALSE 26616
// k := 1 ;
26608: LD_ADDR_VAR 0 8
26612: PUSH
26613: LD_INT 1
26615: ST_TO_ADDR
// if not k then
26616: LD_VAR 0 8
26620: NOT
26621: IFFALSE 26633
// k := array ;
26623: LD_ADDR_VAR 0 8
26627: PUSH
26628: LD_VAR 0 1
26632: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26633: LD_ADDR_VAR 0 10
26637: PUSH
26638: LD_VAR 0 10
26642: PPUSH
26643: LD_VAR 0 8
26647: PPUSH
26648: LD_VAR 0 1
26652: PUSH
26653: LD_VAR 0 7
26657: ARRAY
26658: PPUSH
26659: CALL_OW 1
26663: ST_TO_ADDR
// end ;
26664: GO 26577
26666: POP
26667: POP
// array := tmp ;
26668: LD_ADDR_VAR 0 1
26672: PUSH
26673: LD_VAR 0 10
26677: ST_TO_ADDR
// end ;
26678: GO 26559
26680: POP
26681: POP
// result := array ;
26682: LD_ADDR_VAR 0 5
26686: PUSH
26687: LD_VAR 0 1
26691: ST_TO_ADDR
// end ;
26692: LD_VAR 0 5
26696: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26697: LD_INT 0
26699: PPUSH
26700: PPUSH
// result := 0 ;
26701: LD_ADDR_VAR 0 3
26705: PUSH
26706: LD_INT 0
26708: ST_TO_ADDR
// if not array or not value in array then
26709: LD_VAR 0 1
26713: NOT
26714: PUSH
26715: LD_VAR 0 2
26719: PUSH
26720: LD_VAR 0 1
26724: IN
26725: NOT
26726: OR
26727: IFFALSE 26731
// exit ;
26729: GO 26785
// for i = 1 to array do
26731: LD_ADDR_VAR 0 4
26735: PUSH
26736: DOUBLE
26737: LD_INT 1
26739: DEC
26740: ST_TO_ADDR
26741: LD_VAR 0 1
26745: PUSH
26746: FOR_TO
26747: IFFALSE 26783
// if value = array [ i ] then
26749: LD_VAR 0 2
26753: PUSH
26754: LD_VAR 0 1
26758: PUSH
26759: LD_VAR 0 4
26763: ARRAY
26764: EQUAL
26765: IFFALSE 26781
// begin result := i ;
26767: LD_ADDR_VAR 0 3
26771: PUSH
26772: LD_VAR 0 4
26776: ST_TO_ADDR
// exit ;
26777: POP
26778: POP
26779: GO 26785
// end ;
26781: GO 26746
26783: POP
26784: POP
// end ;
26785: LD_VAR 0 3
26789: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26790: LD_INT 0
26792: PPUSH
// vc_chassis := chassis ;
26793: LD_ADDR_OWVAR 37
26797: PUSH
26798: LD_VAR 0 1
26802: ST_TO_ADDR
// vc_engine := engine ;
26803: LD_ADDR_OWVAR 39
26807: PUSH
26808: LD_VAR 0 2
26812: ST_TO_ADDR
// vc_control := control ;
26813: LD_ADDR_OWVAR 38
26817: PUSH
26818: LD_VAR 0 3
26822: ST_TO_ADDR
// vc_weapon := weapon ;
26823: LD_ADDR_OWVAR 40
26827: PUSH
26828: LD_VAR 0 4
26832: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26833: LD_ADDR_OWVAR 41
26837: PUSH
26838: LD_VAR 0 5
26842: ST_TO_ADDR
// end ;
26843: LD_VAR 0 6
26847: RET
// export function WantPlant ( unit ) ; var task ; begin
26848: LD_INT 0
26850: PPUSH
26851: PPUSH
// result := false ;
26852: LD_ADDR_VAR 0 2
26856: PUSH
26857: LD_INT 0
26859: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26860: LD_ADDR_VAR 0 3
26864: PUSH
26865: LD_VAR 0 1
26869: PPUSH
26870: CALL_OW 437
26874: ST_TO_ADDR
// if task then
26875: LD_VAR 0 3
26879: IFFALSE 26907
// if task [ 1 ] [ 1 ] = p then
26881: LD_VAR 0 3
26885: PUSH
26886: LD_INT 1
26888: ARRAY
26889: PUSH
26890: LD_INT 1
26892: ARRAY
26893: PUSH
26894: LD_STRING p
26896: EQUAL
26897: IFFALSE 26907
// result := true ;
26899: LD_ADDR_VAR 0 2
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// end ;
26907: LD_VAR 0 2
26911: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26912: LD_INT 0
26914: PPUSH
26915: PPUSH
26916: PPUSH
26917: PPUSH
// if pos < 1 then
26918: LD_VAR 0 2
26922: PUSH
26923: LD_INT 1
26925: LESS
26926: IFFALSE 26930
// exit ;
26928: GO 27233
// if pos = 1 then
26930: LD_VAR 0 2
26934: PUSH
26935: LD_INT 1
26937: EQUAL
26938: IFFALSE 26971
// result := Replace ( arr , pos [ 1 ] , value ) else
26940: LD_ADDR_VAR 0 4
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: LD_VAR 0 2
26954: PUSH
26955: LD_INT 1
26957: ARRAY
26958: PPUSH
26959: LD_VAR 0 3
26963: PPUSH
26964: CALL_OW 1
26968: ST_TO_ADDR
26969: GO 27233
// begin tmp := arr ;
26971: LD_ADDR_VAR 0 6
26975: PUSH
26976: LD_VAR 0 1
26980: ST_TO_ADDR
// s_arr := [ tmp ] ;
26981: LD_ADDR_VAR 0 7
26985: PUSH
26986: LD_VAR 0 6
26990: PUSH
26991: EMPTY
26992: LIST
26993: ST_TO_ADDR
// for i = 1 to pos - 1 do
26994: LD_ADDR_VAR 0 5
26998: PUSH
26999: DOUBLE
27000: LD_INT 1
27002: DEC
27003: ST_TO_ADDR
27004: LD_VAR 0 2
27008: PUSH
27009: LD_INT 1
27011: MINUS
27012: PUSH
27013: FOR_TO
27014: IFFALSE 27059
// begin tmp := tmp [ pos [ i ] ] ;
27016: LD_ADDR_VAR 0 6
27020: PUSH
27021: LD_VAR 0 6
27025: PUSH
27026: LD_VAR 0 2
27030: PUSH
27031: LD_VAR 0 5
27035: ARRAY
27036: ARRAY
27037: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27038: LD_ADDR_VAR 0 7
27042: PUSH
27043: LD_VAR 0 7
27047: PUSH
27048: LD_VAR 0 6
27052: PUSH
27053: EMPTY
27054: LIST
27055: ADD
27056: ST_TO_ADDR
// end ;
27057: GO 27013
27059: POP
27060: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27061: LD_ADDR_VAR 0 6
27065: PUSH
27066: LD_VAR 0 6
27070: PPUSH
27071: LD_VAR 0 2
27075: PUSH
27076: LD_VAR 0 2
27080: ARRAY
27081: PPUSH
27082: LD_VAR 0 3
27086: PPUSH
27087: CALL_OW 1
27091: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27092: LD_ADDR_VAR 0 7
27096: PUSH
27097: LD_VAR 0 7
27101: PPUSH
27102: LD_VAR 0 7
27106: PPUSH
27107: LD_VAR 0 6
27111: PPUSH
27112: CALL_OW 1
27116: ST_TO_ADDR
// for i = s_arr downto 2 do
27117: LD_ADDR_VAR 0 5
27121: PUSH
27122: DOUBLE
27123: LD_VAR 0 7
27127: INC
27128: ST_TO_ADDR
27129: LD_INT 2
27131: PUSH
27132: FOR_DOWNTO
27133: IFFALSE 27217
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27135: LD_ADDR_VAR 0 6
27139: PUSH
27140: LD_VAR 0 7
27144: PUSH
27145: LD_VAR 0 5
27149: PUSH
27150: LD_INT 1
27152: MINUS
27153: ARRAY
27154: PPUSH
27155: LD_VAR 0 2
27159: PUSH
27160: LD_VAR 0 5
27164: PUSH
27165: LD_INT 1
27167: MINUS
27168: ARRAY
27169: PPUSH
27170: LD_VAR 0 7
27174: PUSH
27175: LD_VAR 0 5
27179: ARRAY
27180: PPUSH
27181: CALL_OW 1
27185: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27186: LD_ADDR_VAR 0 7
27190: PUSH
27191: LD_VAR 0 7
27195: PPUSH
27196: LD_VAR 0 5
27200: PUSH
27201: LD_INT 1
27203: MINUS
27204: PPUSH
27205: LD_VAR 0 6
27209: PPUSH
27210: CALL_OW 1
27214: ST_TO_ADDR
// end ;
27215: GO 27132
27217: POP
27218: POP
// result := s_arr [ 1 ] ;
27219: LD_ADDR_VAR 0 4
27223: PUSH
27224: LD_VAR 0 7
27228: PUSH
27229: LD_INT 1
27231: ARRAY
27232: ST_TO_ADDR
// end ; end ;
27233: LD_VAR 0 4
27237: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27238: LD_INT 0
27240: PPUSH
27241: PPUSH
// if not list then
27242: LD_VAR 0 1
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 27342
// i := list [ pos1 ] ;
27251: LD_ADDR_VAR 0 5
27255: PUSH
27256: LD_VAR 0 1
27260: PUSH
27261: LD_VAR 0 2
27265: ARRAY
27266: ST_TO_ADDR
// if not i then
27267: LD_VAR 0 5
27271: NOT
27272: IFFALSE 27276
// exit ;
27274: GO 27342
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27276: LD_ADDR_VAR 0 1
27280: PUSH
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_VAR 0 2
27290: PPUSH
27291: LD_VAR 0 1
27295: PUSH
27296: LD_VAR 0 3
27300: ARRAY
27301: PPUSH
27302: CALL_OW 1
27306: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27307: LD_ADDR_VAR 0 1
27311: PUSH
27312: LD_VAR 0 1
27316: PPUSH
27317: LD_VAR 0 3
27321: PPUSH
27322: LD_VAR 0 5
27326: PPUSH
27327: CALL_OW 1
27331: ST_TO_ADDR
// result := list ;
27332: LD_ADDR_VAR 0 4
27336: PUSH
27337: LD_VAR 0 1
27341: ST_TO_ADDR
// end ;
27342: LD_VAR 0 4
27346: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27347: LD_INT 0
27349: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27350: LD_ADDR_VAR 0 5
27354: PUSH
27355: LD_VAR 0 1
27359: PPUSH
27360: CALL_OW 250
27364: PPUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 251
27374: PPUSH
27375: LD_VAR 0 2
27379: PPUSH
27380: LD_VAR 0 3
27384: PPUSH
27385: LD_VAR 0 4
27389: PPUSH
27390: CALL 27400 0 5
27394: ST_TO_ADDR
// end ;
27395: LD_VAR 0 5
27399: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27400: LD_INT 0
27402: PPUSH
27403: PPUSH
27404: PPUSH
27405: PPUSH
// if not list then
27406: LD_VAR 0 3
27410: NOT
27411: IFFALSE 27415
// exit ;
27413: GO 27803
// result := [ ] ;
27415: LD_ADDR_VAR 0 6
27419: PUSH
27420: EMPTY
27421: ST_TO_ADDR
// for i in list do
27422: LD_ADDR_VAR 0 7
27426: PUSH
27427: LD_VAR 0 3
27431: PUSH
27432: FOR_IN
27433: IFFALSE 27635
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27435: LD_ADDR_VAR 0 9
27439: PUSH
27440: LD_VAR 0 7
27444: PPUSH
27445: LD_VAR 0 1
27449: PPUSH
27450: LD_VAR 0 2
27454: PPUSH
27455: CALL_OW 297
27459: ST_TO_ADDR
// if not result then
27460: LD_VAR 0 6
27464: NOT
27465: IFFALSE 27491
// result := [ [ i , tmp ] ] else
27467: LD_ADDR_VAR 0 6
27471: PUSH
27472: LD_VAR 0 7
27476: PUSH
27477: LD_VAR 0 9
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: ST_TO_ADDR
27489: GO 27633
// begin if result [ result ] [ 2 ] < tmp then
27491: LD_VAR 0 6
27495: PUSH
27496: LD_VAR 0 6
27500: ARRAY
27501: PUSH
27502: LD_INT 2
27504: ARRAY
27505: PUSH
27506: LD_VAR 0 9
27510: LESS
27511: IFFALSE 27553
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27513: LD_ADDR_VAR 0 6
27517: PUSH
27518: LD_VAR 0 6
27522: PPUSH
27523: LD_VAR 0 6
27527: PUSH
27528: LD_INT 1
27530: PLUS
27531: PPUSH
27532: LD_VAR 0 7
27536: PUSH
27537: LD_VAR 0 9
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PPUSH
27546: CALL_OW 2
27550: ST_TO_ADDR
27551: GO 27633
// for j = 1 to result do
27553: LD_ADDR_VAR 0 8
27557: PUSH
27558: DOUBLE
27559: LD_INT 1
27561: DEC
27562: ST_TO_ADDR
27563: LD_VAR 0 6
27567: PUSH
27568: FOR_TO
27569: IFFALSE 27631
// begin if tmp < result [ j ] [ 2 ] then
27571: LD_VAR 0 9
27575: PUSH
27576: LD_VAR 0 6
27580: PUSH
27581: LD_VAR 0 8
27585: ARRAY
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: LESS
27591: IFFALSE 27629
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27593: LD_ADDR_VAR 0 6
27597: PUSH
27598: LD_VAR 0 6
27602: PPUSH
27603: LD_VAR 0 8
27607: PPUSH
27608: LD_VAR 0 7
27612: PUSH
27613: LD_VAR 0 9
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PPUSH
27622: CALL_OW 2
27626: ST_TO_ADDR
// break ;
27627: GO 27631
// end ; end ;
27629: GO 27568
27631: POP
27632: POP
// end ; end ;
27633: GO 27432
27635: POP
27636: POP
// if result and not asc then
27637: LD_VAR 0 6
27641: PUSH
27642: LD_VAR 0 4
27646: NOT
27647: AND
27648: IFFALSE 27723
// begin tmp := result ;
27650: LD_ADDR_VAR 0 9
27654: PUSH
27655: LD_VAR 0 6
27659: ST_TO_ADDR
// for i = tmp downto 1 do
27660: LD_ADDR_VAR 0 7
27664: PUSH
27665: DOUBLE
27666: LD_VAR 0 9
27670: INC
27671: ST_TO_ADDR
27672: LD_INT 1
27674: PUSH
27675: FOR_DOWNTO
27676: IFFALSE 27721
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27678: LD_ADDR_VAR 0 6
27682: PUSH
27683: LD_VAR 0 6
27687: PPUSH
27688: LD_VAR 0 9
27692: PUSH
27693: LD_VAR 0 7
27697: MINUS
27698: PUSH
27699: LD_INT 1
27701: PLUS
27702: PPUSH
27703: LD_VAR 0 9
27707: PUSH
27708: LD_VAR 0 7
27712: ARRAY
27713: PPUSH
27714: CALL_OW 1
27718: ST_TO_ADDR
27719: GO 27675
27721: POP
27722: POP
// end ; tmp := [ ] ;
27723: LD_ADDR_VAR 0 9
27727: PUSH
27728: EMPTY
27729: ST_TO_ADDR
// if mode then
27730: LD_VAR 0 5
27734: IFFALSE 27803
// begin for i = 1 to result do
27736: LD_ADDR_VAR 0 7
27740: PUSH
27741: DOUBLE
27742: LD_INT 1
27744: DEC
27745: ST_TO_ADDR
27746: LD_VAR 0 6
27750: PUSH
27751: FOR_TO
27752: IFFALSE 27791
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27754: LD_ADDR_VAR 0 9
27758: PUSH
27759: LD_VAR 0 9
27763: PPUSH
27764: LD_VAR 0 7
27768: PPUSH
27769: LD_VAR 0 6
27773: PUSH
27774: LD_VAR 0 7
27778: ARRAY
27779: PUSH
27780: LD_INT 1
27782: ARRAY
27783: PPUSH
27784: CALL_OW 1
27788: ST_TO_ADDR
27789: GO 27751
27791: POP
27792: POP
// result := tmp ;
27793: LD_ADDR_VAR 0 6
27797: PUSH
27798: LD_VAR 0 9
27802: ST_TO_ADDR
// end ; end ;
27803: LD_VAR 0 6
27807: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27808: LD_INT 0
27810: PPUSH
27811: PPUSH
27812: PPUSH
27813: PPUSH
27814: PPUSH
27815: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27816: LD_ADDR_VAR 0 5
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// if not x or not y then
27838: LD_VAR 0 2
27842: NOT
27843: PUSH
27844: LD_VAR 0 3
27848: NOT
27849: OR
27850: IFFALSE 27854
// exit ;
27852: GO 29500
// if not range then
27854: LD_VAR 0 4
27858: NOT
27859: IFFALSE 27869
// range := 10 ;
27861: LD_ADDR_VAR 0 4
27865: PUSH
27866: LD_INT 10
27868: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27869: LD_ADDR_VAR 0 8
27873: PUSH
27874: LD_INT 81
27876: PUSH
27877: LD_VAR 0 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 92
27888: PUSH
27889: LD_VAR 0 2
27893: PUSH
27894: LD_VAR 0 3
27898: PUSH
27899: LD_VAR 0 4
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 3
27912: PUSH
27913: LD_INT 21
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: PPUSH
27932: CALL_OW 69
27936: ST_TO_ADDR
// if not tmp then
27937: LD_VAR 0 8
27941: NOT
27942: IFFALSE 27946
// exit ;
27944: GO 29500
// for i in tmp do
27946: LD_ADDR_VAR 0 6
27950: PUSH
27951: LD_VAR 0 8
27955: PUSH
27956: FOR_IN
27957: IFFALSE 29475
// begin points := [ 0 , 0 , 0 ] ;
27959: LD_ADDR_VAR 0 9
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
// bpoints := 1 ;
27978: LD_ADDR_VAR 0 10
27982: PUSH
27983: LD_INT 1
27985: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 247
27995: PUSH
27996: LD_INT 1
27998: DOUBLE
27999: EQUAL
28000: IFTRUE 28004
28002: GO 28582
28004: POP
// begin if GetClass ( i ) = 1 then
28005: LD_VAR 0 6
28009: PPUSH
28010: CALL_OW 257
28014: PUSH
28015: LD_INT 1
28017: EQUAL
28018: IFFALSE 28039
// points := [ 10 , 5 , 3 ] ;
28020: LD_ADDR_VAR 0 9
28024: PUSH
28025: LD_INT 10
28027: PUSH
28028: LD_INT 5
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28039: LD_VAR 0 6
28043: PPUSH
28044: CALL_OW 257
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 3
28054: PUSH
28055: LD_INT 4
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: IN
28063: IFFALSE 28084
// points := [ 3 , 2 , 1 ] ;
28065: LD_ADDR_VAR 0 9
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28084: LD_VAR 0 6
28088: PPUSH
28089: CALL_OW 257
28093: PUSH
28094: LD_INT 5
28096: EQUAL
28097: IFFALSE 28118
// points := [ 130 , 5 , 2 ] ;
28099: LD_ADDR_VAR 0 9
28103: PUSH
28104: LD_INT 130
28106: PUSH
28107: LD_INT 5
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28118: LD_VAR 0 6
28122: PPUSH
28123: CALL_OW 257
28127: PUSH
28128: LD_INT 8
28130: EQUAL
28131: IFFALSE 28152
// points := [ 35 , 35 , 30 ] ;
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: LD_INT 35
28140: PUSH
28141: LD_INT 35
28143: PUSH
28144: LD_INT 30
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28152: LD_VAR 0 6
28156: PPUSH
28157: CALL_OW 257
28161: PUSH
28162: LD_INT 9
28164: EQUAL
28165: IFFALSE 28186
// points := [ 20 , 55 , 40 ] ;
28167: LD_ADDR_VAR 0 9
28171: PUSH
28172: LD_INT 20
28174: PUSH
28175: LD_INT 55
28177: PUSH
28178: LD_INT 40
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28186: LD_VAR 0 6
28190: PPUSH
28191: CALL_OW 257
28195: PUSH
28196: LD_INT 12
28198: PUSH
28199: LD_INT 16
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: IN
28206: IFFALSE 28227
// points := [ 5 , 3 , 2 ] ;
28208: LD_ADDR_VAR 0 9
28212: PUSH
28213: LD_INT 5
28215: PUSH
28216: LD_INT 3
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28227: LD_VAR 0 6
28231: PPUSH
28232: CALL_OW 257
28236: PUSH
28237: LD_INT 17
28239: EQUAL
28240: IFFALSE 28261
// points := [ 100 , 50 , 75 ] ;
28242: LD_ADDR_VAR 0 9
28246: PUSH
28247: LD_INT 100
28249: PUSH
28250: LD_INT 50
28252: PUSH
28253: LD_INT 75
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28261: LD_VAR 0 6
28265: PPUSH
28266: CALL_OW 257
28270: PUSH
28271: LD_INT 15
28273: EQUAL
28274: IFFALSE 28295
// points := [ 10 , 5 , 3 ] ;
28276: LD_ADDR_VAR 0 9
28280: PUSH
28281: LD_INT 10
28283: PUSH
28284: LD_INT 5
28286: PUSH
28287: LD_INT 3
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28295: LD_VAR 0 6
28299: PPUSH
28300: CALL_OW 257
28304: PUSH
28305: LD_INT 14
28307: EQUAL
28308: IFFALSE 28329
// points := [ 10 , 0 , 0 ] ;
28310: LD_ADDR_VAR 0 9
28314: PUSH
28315: LD_INT 10
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: LIST
28328: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28329: LD_VAR 0 6
28333: PPUSH
28334: CALL_OW 257
28338: PUSH
28339: LD_INT 11
28341: EQUAL
28342: IFFALSE 28363
// points := [ 30 , 10 , 5 ] ;
28344: LD_ADDR_VAR 0 9
28348: PUSH
28349: LD_INT 30
28351: PUSH
28352: LD_INT 10
28354: PUSH
28355: LD_INT 5
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: LIST
28362: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28363: LD_VAR 0 1
28367: PPUSH
28368: LD_INT 5
28370: PPUSH
28371: CALL_OW 321
28375: PUSH
28376: LD_INT 2
28378: EQUAL
28379: IFFALSE 28396
// bpoints := bpoints * 1.8 ;
28381: LD_ADDR_VAR 0 10
28385: PUSH
28386: LD_VAR 0 10
28390: PUSH
28391: LD_REAL  1.80000000000000E+0000
28394: MUL
28395: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28396: LD_VAR 0 6
28400: PPUSH
28401: CALL_OW 257
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: LD_INT 3
28414: PUSH
28415: LD_INT 4
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: IN
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: LD_INT 51
28432: PPUSH
28433: CALL_OW 321
28437: PUSH
28438: LD_INT 2
28440: EQUAL
28441: AND
28442: IFFALSE 28459
// bpoints := bpoints * 1.2 ;
28444: LD_ADDR_VAR 0 10
28448: PUSH
28449: LD_VAR 0 10
28453: PUSH
28454: LD_REAL  1.20000000000000E+0000
28457: MUL
28458: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28459: LD_VAR 0 6
28463: PPUSH
28464: CALL_OW 257
28468: PUSH
28469: LD_INT 5
28471: PUSH
28472: LD_INT 7
28474: PUSH
28475: LD_INT 9
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: IN
28483: PUSH
28484: LD_VAR 0 1
28488: PPUSH
28489: LD_INT 52
28491: PPUSH
28492: CALL_OW 321
28496: PUSH
28497: LD_INT 2
28499: EQUAL
28500: AND
28501: IFFALSE 28518
// bpoints := bpoints * 1.5 ;
28503: LD_ADDR_VAR 0 10
28507: PUSH
28508: LD_VAR 0 10
28512: PUSH
28513: LD_REAL  1.50000000000000E+0000
28516: MUL
28517: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28518: LD_VAR 0 1
28522: PPUSH
28523: LD_INT 66
28525: PPUSH
28526: CALL_OW 321
28530: PUSH
28531: LD_INT 2
28533: EQUAL
28534: IFFALSE 28551
// bpoints := bpoints * 1.1 ;
28536: LD_ADDR_VAR 0 10
28540: PUSH
28541: LD_VAR 0 10
28545: PUSH
28546: LD_REAL  1.10000000000000E+0000
28549: MUL
28550: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28551: LD_ADDR_VAR 0 10
28555: PUSH
28556: LD_VAR 0 10
28560: PUSH
28561: LD_VAR 0 6
28565: PPUSH
28566: LD_INT 1
28568: PPUSH
28569: CALL_OW 259
28573: PUSH
28574: LD_REAL  1.15000000000000E+0000
28577: MUL
28578: MUL
28579: ST_TO_ADDR
// end ; unit_vehicle :
28580: GO 29404
28582: LD_INT 2
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 29392
28590: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28591: LD_VAR 0 6
28595: PPUSH
28596: CALL_OW 264
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 42
28606: PUSH
28607: LD_INT 24
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: IN
28615: IFFALSE 28636
// points := [ 25 , 5 , 3 ] ;
28617: LD_ADDR_VAR 0 9
28621: PUSH
28622: LD_INT 25
28624: PUSH
28625: LD_INT 5
28627: PUSH
28628: LD_INT 3
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28636: LD_VAR 0 6
28640: PPUSH
28641: CALL_OW 264
28645: PUSH
28646: LD_INT 4
28648: PUSH
28649: LD_INT 43
28651: PUSH
28652: LD_INT 25
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: IN
28660: IFFALSE 28681
// points := [ 40 , 15 , 5 ] ;
28662: LD_ADDR_VAR 0 9
28666: PUSH
28667: LD_INT 40
28669: PUSH
28670: LD_INT 15
28672: PUSH
28673: LD_INT 5
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28681: LD_VAR 0 6
28685: PPUSH
28686: CALL_OW 264
28690: PUSH
28691: LD_INT 3
28693: PUSH
28694: LD_INT 23
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: IN
28701: IFFALSE 28722
// points := [ 7 , 25 , 8 ] ;
28703: LD_ADDR_VAR 0 9
28707: PUSH
28708: LD_INT 7
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 8
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28722: LD_VAR 0 6
28726: PPUSH
28727: CALL_OW 264
28731: PUSH
28732: LD_INT 5
28734: PUSH
28735: LD_INT 27
28737: PUSH
28738: LD_INT 44
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: IN
28746: IFFALSE 28767
// points := [ 14 , 50 , 16 ] ;
28748: LD_ADDR_VAR 0 9
28752: PUSH
28753: LD_INT 14
28755: PUSH
28756: LD_INT 50
28758: PUSH
28759: LD_INT 16
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28767: LD_VAR 0 6
28771: PPUSH
28772: CALL_OW 264
28776: PUSH
28777: LD_INT 6
28779: PUSH
28780: LD_INT 46
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: IN
28787: IFFALSE 28808
// points := [ 32 , 120 , 70 ] ;
28789: LD_ADDR_VAR 0 9
28793: PUSH
28794: LD_INT 32
28796: PUSH
28797: LD_INT 120
28799: PUSH
28800: LD_INT 70
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28808: LD_VAR 0 6
28812: PPUSH
28813: CALL_OW 264
28817: PUSH
28818: LD_INT 7
28820: PUSH
28821: LD_INT 28
28823: PUSH
28824: LD_INT 45
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: IN
28832: IFFALSE 28853
// points := [ 35 , 20 , 45 ] ;
28834: LD_ADDR_VAR 0 9
28838: PUSH
28839: LD_INT 35
28841: PUSH
28842: LD_INT 20
28844: PUSH
28845: LD_INT 45
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28853: LD_VAR 0 6
28857: PPUSH
28858: CALL_OW 264
28862: PUSH
28863: LD_INT 47
28865: PUSH
28866: EMPTY
28867: LIST
28868: IN
28869: IFFALSE 28890
// points := [ 67 , 45 , 75 ] ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_INT 67
28878: PUSH
28879: LD_INT 45
28881: PUSH
28882: LD_INT 75
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28890: LD_VAR 0 6
28894: PPUSH
28895: CALL_OW 264
28899: PUSH
28900: LD_INT 26
28902: PUSH
28903: EMPTY
28904: LIST
28905: IN
28906: IFFALSE 28927
// points := [ 120 , 30 , 80 ] ;
28908: LD_ADDR_VAR 0 9
28912: PUSH
28913: LD_INT 120
28915: PUSH
28916: LD_INT 30
28918: PUSH
28919: LD_INT 80
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28927: LD_VAR 0 6
28931: PPUSH
28932: CALL_OW 264
28936: PUSH
28937: LD_INT 22
28939: PUSH
28940: EMPTY
28941: LIST
28942: IN
28943: IFFALSE 28964
// points := [ 40 , 1 , 1 ] ;
28945: LD_ADDR_VAR 0 9
28949: PUSH
28950: LD_INT 40
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28964: LD_VAR 0 6
28968: PPUSH
28969: CALL_OW 264
28973: PUSH
28974: LD_INT 29
28976: PUSH
28977: EMPTY
28978: LIST
28979: IN
28980: IFFALSE 29001
// points := [ 70 , 200 , 400 ] ;
28982: LD_ADDR_VAR 0 9
28986: PUSH
28987: LD_INT 70
28989: PUSH
28990: LD_INT 200
28992: PUSH
28993: LD_INT 400
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29001: LD_VAR 0 6
29005: PPUSH
29006: CALL_OW 264
29010: PUSH
29011: LD_INT 14
29013: PUSH
29014: LD_INT 53
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: IN
29021: IFFALSE 29042
// points := [ 40 , 10 , 20 ] ;
29023: LD_ADDR_VAR 0 9
29027: PUSH
29028: LD_INT 40
29030: PUSH
29031: LD_INT 10
29033: PUSH
29034: LD_INT 20
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: LIST
29041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29042: LD_VAR 0 6
29046: PPUSH
29047: CALL_OW 264
29051: PUSH
29052: LD_INT 9
29054: PUSH
29055: EMPTY
29056: LIST
29057: IN
29058: IFFALSE 29079
// points := [ 5 , 70 , 20 ] ;
29060: LD_ADDR_VAR 0 9
29064: PUSH
29065: LD_INT 5
29067: PUSH
29068: LD_INT 70
29070: PUSH
29071: LD_INT 20
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29079: LD_VAR 0 6
29083: PPUSH
29084: CALL_OW 264
29088: PUSH
29089: LD_INT 10
29091: PUSH
29092: EMPTY
29093: LIST
29094: IN
29095: IFFALSE 29116
// points := [ 35 , 110 , 70 ] ;
29097: LD_ADDR_VAR 0 9
29101: PUSH
29102: LD_INT 35
29104: PUSH
29105: LD_INT 110
29107: PUSH
29108: LD_INT 70
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29116: LD_VAR 0 6
29120: PPUSH
29121: CALL_OW 265
29125: PUSH
29126: LD_INT 25
29128: EQUAL
29129: IFFALSE 29150
// points := [ 80 , 65 , 100 ] ;
29131: LD_ADDR_VAR 0 9
29135: PUSH
29136: LD_INT 80
29138: PUSH
29139: LD_INT 65
29141: PUSH
29142: LD_INT 100
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29150: LD_VAR 0 6
29154: PPUSH
29155: CALL_OW 263
29159: PUSH
29160: LD_INT 1
29162: EQUAL
29163: IFFALSE 29198
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29165: LD_ADDR_VAR 0 10
29169: PUSH
29170: LD_VAR 0 10
29174: PUSH
29175: LD_VAR 0 6
29179: PPUSH
29180: CALL_OW 311
29184: PPUSH
29185: LD_INT 3
29187: PPUSH
29188: CALL_OW 259
29192: PUSH
29193: LD_INT 4
29195: MUL
29196: MUL
29197: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29198: LD_VAR 0 6
29202: PPUSH
29203: CALL_OW 263
29207: PUSH
29208: LD_INT 2
29210: EQUAL
29211: IFFALSE 29262
// begin j := IsControledBy ( i ) ;
29213: LD_ADDR_VAR 0 7
29217: PUSH
29218: LD_VAR 0 6
29222: PPUSH
29223: CALL_OW 312
29227: ST_TO_ADDR
// if j then
29228: LD_VAR 0 7
29232: IFFALSE 29262
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29234: LD_ADDR_VAR 0 10
29238: PUSH
29239: LD_VAR 0 10
29243: PUSH
29244: LD_VAR 0 7
29248: PPUSH
29249: LD_INT 3
29251: PPUSH
29252: CALL_OW 259
29256: PUSH
29257: LD_INT 3
29259: MUL
29260: MUL
29261: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29262: LD_VAR 0 6
29266: PPUSH
29267: CALL_OW 264
29271: PUSH
29272: LD_INT 5
29274: PUSH
29275: LD_INT 6
29277: PUSH
29278: LD_INT 46
29280: PUSH
29281: LD_INT 44
29283: PUSH
29284: LD_INT 47
29286: PUSH
29287: LD_INT 45
29289: PUSH
29290: LD_INT 28
29292: PUSH
29293: LD_INT 7
29295: PUSH
29296: LD_INT 27
29298: PUSH
29299: LD_INT 29
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: IN
29314: PUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: LD_INT 52
29322: PPUSH
29323: CALL_OW 321
29327: PUSH
29328: LD_INT 2
29330: EQUAL
29331: AND
29332: IFFALSE 29349
// bpoints := bpoints * 1.2 ;
29334: LD_ADDR_VAR 0 10
29338: PUSH
29339: LD_VAR 0 10
29343: PUSH
29344: LD_REAL  1.20000000000000E+0000
29347: MUL
29348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29349: LD_VAR 0 6
29353: PPUSH
29354: CALL_OW 264
29358: PUSH
29359: LD_INT 6
29361: PUSH
29362: LD_INT 46
29364: PUSH
29365: LD_INT 47
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: IN
29373: IFFALSE 29390
// bpoints := bpoints * 1.2 ;
29375: LD_ADDR_VAR 0 10
29379: PUSH
29380: LD_VAR 0 10
29384: PUSH
29385: LD_REAL  1.20000000000000E+0000
29388: MUL
29389: ST_TO_ADDR
// end ; unit_building :
29390: GO 29404
29392: LD_INT 3
29394: DOUBLE
29395: EQUAL
29396: IFTRUE 29400
29398: GO 29403
29400: POP
// ; end ;
29401: GO 29404
29403: POP
// for j = 1 to 3 do
29404: LD_ADDR_VAR 0 7
29408: PUSH
29409: DOUBLE
29410: LD_INT 1
29412: DEC
29413: ST_TO_ADDR
29414: LD_INT 3
29416: PUSH
29417: FOR_TO
29418: IFFALSE 29471
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29420: LD_ADDR_VAR 0 5
29424: PUSH
29425: LD_VAR 0 5
29429: PPUSH
29430: LD_VAR 0 7
29434: PPUSH
29435: LD_VAR 0 5
29439: PUSH
29440: LD_VAR 0 7
29444: ARRAY
29445: PUSH
29446: LD_VAR 0 9
29450: PUSH
29451: LD_VAR 0 7
29455: ARRAY
29456: PUSH
29457: LD_VAR 0 10
29461: MUL
29462: PLUS
29463: PPUSH
29464: CALL_OW 1
29468: ST_TO_ADDR
29469: GO 29417
29471: POP
29472: POP
// end ;
29473: GO 27956
29475: POP
29476: POP
// result := Replace ( result , 4 , tmp ) ;
29477: LD_ADDR_VAR 0 5
29481: PUSH
29482: LD_VAR 0 5
29486: PPUSH
29487: LD_INT 4
29489: PPUSH
29490: LD_VAR 0 8
29494: PPUSH
29495: CALL_OW 1
29499: ST_TO_ADDR
// end ;
29500: LD_VAR 0 5
29504: RET
// export function DangerAtRange ( unit , range ) ; begin
29505: LD_INT 0
29507: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_VAR 0 1
29517: PPUSH
29518: CALL_OW 255
29522: PPUSH
29523: LD_VAR 0 1
29527: PPUSH
29528: CALL_OW 250
29532: PPUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 251
29542: PPUSH
29543: LD_VAR 0 2
29547: PPUSH
29548: CALL 27808 0 4
29552: ST_TO_ADDR
// end ;
29553: LD_VAR 0 3
29557: RET
// export function DangerInArea ( side , area ) ; begin
29558: LD_INT 0
29560: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29561: LD_ADDR_VAR 0 3
29565: PUSH
29566: LD_VAR 0 2
29570: PPUSH
29571: LD_INT 81
29573: PUSH
29574: LD_VAR 0 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PPUSH
29583: CALL_OW 70
29587: ST_TO_ADDR
// end ;
29588: LD_VAR 0 3
29592: RET
// export function IsExtension ( b ) ; begin
29593: LD_INT 0
29595: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29596: LD_ADDR_VAR 0 2
29600: PUSH
29601: LD_VAR 0 1
29605: PUSH
29606: LD_INT 23
29608: PUSH
29609: LD_INT 20
29611: PUSH
29612: LD_INT 22
29614: PUSH
29615: LD_INT 17
29617: PUSH
29618: LD_INT 24
29620: PUSH
29621: LD_INT 21
29623: PUSH
29624: LD_INT 19
29626: PUSH
29627: LD_INT 16
29629: PUSH
29630: LD_INT 25
29632: PUSH
29633: LD_INT 18
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: IN
29648: ST_TO_ADDR
// end ;
29649: LD_VAR 0 2
29653: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29654: LD_INT 0
29656: PPUSH
29657: PPUSH
29658: PPUSH
// result := [ ] ;
29659: LD_ADDR_VAR 0 3
29663: PUSH
29664: EMPTY
29665: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29666: LD_ADDR_VAR 0 4
29670: PUSH
29671: LD_VAR 0 2
29675: PPUSH
29676: LD_INT 21
29678: PUSH
29679: LD_INT 3
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PPUSH
29686: CALL_OW 70
29690: ST_TO_ADDR
// if not tmp then
29691: LD_VAR 0 4
29695: NOT
29696: IFFALSE 29700
// exit ;
29698: GO 29758
// for i in tmp do
29700: LD_ADDR_VAR 0 5
29704: PUSH
29705: LD_VAR 0 4
29709: PUSH
29710: FOR_IN
29711: IFFALSE 29746
// if GetBase ( i ) <> base then
29713: LD_VAR 0 5
29717: PPUSH
29718: CALL_OW 274
29722: PUSH
29723: LD_VAR 0 1
29727: NONEQUAL
29728: IFFALSE 29744
// ComLinkToBase ( base , i ) ;
29730: LD_VAR 0 1
29734: PPUSH
29735: LD_VAR 0 5
29739: PPUSH
29740: CALL_OW 169
29744: GO 29710
29746: POP
29747: POP
// result := tmp ;
29748: LD_ADDR_VAR 0 3
29752: PUSH
29753: LD_VAR 0 4
29757: ST_TO_ADDR
// end ;
29758: LD_VAR 0 3
29762: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29763: LD_INT 0
29765: PPUSH
29766: PPUSH
// if BuildingStatus ( b ) = bs_build then
29767: LD_VAR 0 2
29771: PPUSH
29772: CALL_OW 461
29776: PUSH
29777: LD_INT 1
29779: EQUAL
29780: IFFALSE 29840
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_STRING h
29789: PUSH
29790: LD_VAR 0 2
29794: PPUSH
29795: CALL_OW 250
29799: PUSH
29800: LD_VAR 0 2
29804: PPUSH
29805: CALL_OW 251
29809: PUSH
29810: LD_VAR 0 2
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: PPUSH
29836: CALL_OW 446
// end ;
29840: LD_VAR 0 3
29844: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29845: LD_INT 0
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29853: LD_VAR 0 1
29857: NOT
29858: PUSH
29859: LD_VAR 0 1
29863: PPUSH
29864: CALL_OW 263
29868: PUSH
29869: LD_INT 2
29871: EQUAL
29872: NOT
29873: OR
29874: IFFALSE 29878
// exit ;
29876: GO 30194
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29878: LD_ADDR_VAR 0 6
29882: PUSH
29883: LD_INT 22
29885: PUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: CALL_OW 255
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 30
29905: PUSH
29906: LD_INT 36
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 34
29915: PUSH
29916: LD_INT 31
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PPUSH
29932: CALL_OW 69
29936: ST_TO_ADDR
// if not tmp then
29937: LD_VAR 0 6
29941: NOT
29942: IFFALSE 29946
// exit ;
29944: GO 30194
// result := [ ] ;
29946: LD_ADDR_VAR 0 2
29950: PUSH
29951: EMPTY
29952: ST_TO_ADDR
// for i in tmp do
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_VAR 0 6
29962: PUSH
29963: FOR_IN
29964: IFFALSE 30035
// begin t := UnitsInside ( i ) ;
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_VAR 0 3
29975: PPUSH
29976: CALL_OW 313
29980: ST_TO_ADDR
// if t then
29981: LD_VAR 0 4
29985: IFFALSE 30033
// for j in t do
29987: LD_ADDR_VAR 0 7
29991: PUSH
29992: LD_VAR 0 4
29996: PUSH
29997: FOR_IN
29998: IFFALSE 30031
// result := Insert ( result , result + 1 , j ) ;
30000: LD_ADDR_VAR 0 2
30004: PUSH
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_VAR 0 2
30014: PUSH
30015: LD_INT 1
30017: PLUS
30018: PPUSH
30019: LD_VAR 0 7
30023: PPUSH
30024: CALL_OW 2
30028: ST_TO_ADDR
30029: GO 29997
30031: POP
30032: POP
// end ;
30033: GO 29963
30035: POP
30036: POP
// if not result then
30037: LD_VAR 0 2
30041: NOT
30042: IFFALSE 30046
// exit ;
30044: GO 30194
// mech := result [ 1 ] ;
30046: LD_ADDR_VAR 0 5
30050: PUSH
30051: LD_VAR 0 2
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: ST_TO_ADDR
// if result > 1 then
30060: LD_VAR 0 2
30064: PUSH
30065: LD_INT 1
30067: GREATER
30068: IFFALSE 30180
// for i = 2 to result do
30070: LD_ADDR_VAR 0 3
30074: PUSH
30075: DOUBLE
30076: LD_INT 2
30078: DEC
30079: ST_TO_ADDR
30080: LD_VAR 0 2
30084: PUSH
30085: FOR_TO
30086: IFFALSE 30178
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30088: LD_ADDR_VAR 0 4
30092: PUSH
30093: LD_VAR 0 2
30097: PUSH
30098: LD_VAR 0 3
30102: ARRAY
30103: PPUSH
30104: LD_INT 3
30106: PPUSH
30107: CALL_OW 259
30111: PUSH
30112: LD_VAR 0 2
30116: PUSH
30117: LD_VAR 0 3
30121: ARRAY
30122: PPUSH
30123: CALL_OW 432
30127: MINUS
30128: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30129: LD_VAR 0 4
30133: PUSH
30134: LD_VAR 0 5
30138: PPUSH
30139: LD_INT 3
30141: PPUSH
30142: CALL_OW 259
30146: PUSH
30147: LD_VAR 0 5
30151: PPUSH
30152: CALL_OW 432
30156: MINUS
30157: GREATEREQUAL
30158: IFFALSE 30176
// mech := result [ i ] ;
30160: LD_ADDR_VAR 0 5
30164: PUSH
30165: LD_VAR 0 2
30169: PUSH
30170: LD_VAR 0 3
30174: ARRAY
30175: ST_TO_ADDR
// end ;
30176: GO 30085
30178: POP
30179: POP
// ComLinkTo ( vehicle , mech ) ;
30180: LD_VAR 0 1
30184: PPUSH
30185: LD_VAR 0 5
30189: PPUSH
30190: CALL_OW 135
// end ;
30194: LD_VAR 0 2
30198: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30199: LD_INT 0
30201: PPUSH
30202: PPUSH
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
30213: PPUSH
// result := [ ] ;
30214: LD_ADDR_VAR 0 7
30218: PUSH
30219: EMPTY
30220: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL_OW 266
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: IN
30241: NOT
30242: IFFALSE 30246
// exit ;
30244: GO 31877
// if name then
30246: LD_VAR 0 3
30250: IFFALSE 30266
// SetBName ( base_dep , name ) ;
30252: LD_VAR 0 1
30256: PPUSH
30257: LD_VAR 0 3
30261: PPUSH
30262: CALL_OW 500
// base := GetBase ( base_dep ) ;
30266: LD_ADDR_VAR 0 15
30270: PUSH
30271: LD_VAR 0 1
30275: PPUSH
30276: CALL_OW 274
30280: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30281: LD_ADDR_VAR 0 16
30285: PUSH
30286: LD_VAR 0 1
30290: PPUSH
30291: CALL_OW 255
30295: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30296: LD_ADDR_VAR 0 17
30300: PUSH
30301: LD_VAR 0 1
30305: PPUSH
30306: CALL_OW 248
30310: ST_TO_ADDR
// if sources then
30311: LD_VAR 0 5
30315: IFFALSE 30362
// for i = 1 to 3 do
30317: LD_ADDR_VAR 0 8
30321: PUSH
30322: DOUBLE
30323: LD_INT 1
30325: DEC
30326: ST_TO_ADDR
30327: LD_INT 3
30329: PUSH
30330: FOR_TO
30331: IFFALSE 30360
// AddResourceType ( base , i , sources [ i ] ) ;
30333: LD_VAR 0 15
30337: PPUSH
30338: LD_VAR 0 8
30342: PPUSH
30343: LD_VAR 0 5
30347: PUSH
30348: LD_VAR 0 8
30352: ARRAY
30353: PPUSH
30354: CALL_OW 276
30358: GO 30330
30360: POP
30361: POP
// buildings := GetBaseBuildings ( base , area ) ;
30362: LD_ADDR_VAR 0 18
30366: PUSH
30367: LD_VAR 0 15
30371: PPUSH
30372: LD_VAR 0 2
30376: PPUSH
30377: CALL 29654 0 2
30381: ST_TO_ADDR
// InitHc ;
30382: CALL_OW 19
// InitUc ;
30386: CALL_OW 18
// uc_side := side ;
30390: LD_ADDR_OWVAR 20
30394: PUSH
30395: LD_VAR 0 16
30399: ST_TO_ADDR
// uc_nation := nation ;
30400: LD_ADDR_OWVAR 21
30404: PUSH
30405: LD_VAR 0 17
30409: ST_TO_ADDR
// if buildings then
30410: LD_VAR 0 18
30414: IFFALSE 31736
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30416: LD_ADDR_VAR 0 19
30420: PUSH
30421: LD_VAR 0 18
30425: PPUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 30
30431: PUSH
30432: LD_INT 29
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 30
30441: PUSH
30442: LD_INT 30
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 72
30458: ST_TO_ADDR
// if tmp then
30459: LD_VAR 0 19
30463: IFFALSE 30511
// for i in tmp do
30465: LD_ADDR_VAR 0 8
30469: PUSH
30470: LD_VAR 0 19
30474: PUSH
30475: FOR_IN
30476: IFFALSE 30509
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30478: LD_VAR 0 8
30482: PPUSH
30483: CALL_OW 250
30487: PPUSH
30488: LD_VAR 0 8
30492: PPUSH
30493: CALL_OW 251
30497: PPUSH
30498: LD_VAR 0 16
30502: PPUSH
30503: CALL_OW 441
30507: GO 30475
30509: POP
30510: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30511: LD_VAR 0 18
30515: PPUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 30
30521: PUSH
30522: LD_INT 32
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 30
30531: PUSH
30532: LD_INT 33
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: PPUSH
30544: CALL_OW 72
30548: IFFALSE 30636
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30550: LD_ADDR_VAR 0 8
30554: PUSH
30555: LD_VAR 0 18
30559: PPUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 30
30565: PUSH
30566: LD_INT 32
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 30
30575: PUSH
30576: LD_INT 33
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: PPUSH
30588: CALL_OW 72
30592: PUSH
30593: FOR_IN
30594: IFFALSE 30634
// begin if not GetBWeapon ( i ) then
30596: LD_VAR 0 8
30600: PPUSH
30601: CALL_OW 269
30605: NOT
30606: IFFALSE 30632
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30608: LD_VAR 0 8
30612: PPUSH
30613: LD_VAR 0 8
30617: PPUSH
30618: LD_VAR 0 2
30622: PPUSH
30623: CALL 31882 0 2
30627: PPUSH
30628: CALL_OW 431
// end ;
30632: GO 30593
30634: POP
30635: POP
// end ; for i = 1 to personel do
30636: LD_ADDR_VAR 0 8
30640: PUSH
30641: DOUBLE
30642: LD_INT 1
30644: DEC
30645: ST_TO_ADDR
30646: LD_VAR 0 6
30650: PUSH
30651: FOR_TO
30652: IFFALSE 31716
// begin if i > 4 then
30654: LD_VAR 0 8
30658: PUSH
30659: LD_INT 4
30661: GREATER
30662: IFFALSE 30666
// break ;
30664: GO 31716
// case i of 1 :
30666: LD_VAR 0 8
30670: PUSH
30671: LD_INT 1
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30759
30679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30680: LD_ADDR_VAR 0 12
30684: PUSH
30685: LD_VAR 0 18
30689: PPUSH
30690: LD_INT 22
30692: PUSH
30693: LD_VAR 0 16
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 58
30704: PUSH
30705: EMPTY
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 30
30713: PUSH
30714: LD_INT 32
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 30
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 30
30733: PUSH
30734: LD_INT 5
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: PPUSH
30752: CALL_OW 72
30756: ST_TO_ADDR
30757: GO 30981
30759: LD_INT 2
30761: DOUBLE
30762: EQUAL
30763: IFTRUE 30767
30765: GO 30829
30767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30768: LD_ADDR_VAR 0 12
30772: PUSH
30773: LD_VAR 0 18
30777: PPUSH
30778: LD_INT 22
30780: PUSH
30781: LD_VAR 0 16
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 30
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 30
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PPUSH
30822: CALL_OW 72
30826: ST_TO_ADDR
30827: GO 30981
30829: LD_INT 3
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30899
30837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30838: LD_ADDR_VAR 0 12
30842: PUSH
30843: LD_VAR 0 18
30847: PPUSH
30848: LD_INT 22
30850: PUSH
30851: LD_VAR 0 16
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: LD_INT 30
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 30
30875: PUSH
30876: LD_INT 3
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PPUSH
30892: CALL_OW 72
30896: ST_TO_ADDR
30897: GO 30981
30899: LD_INT 4
30901: DOUBLE
30902: EQUAL
30903: IFTRUE 30907
30905: GO 30980
30907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30908: LD_ADDR_VAR 0 12
30912: PUSH
30913: LD_VAR 0 18
30917: PPUSH
30918: LD_INT 22
30920: PUSH
30921: LD_VAR 0 16
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 30
30935: PUSH
30936: LD_INT 6
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 30
30945: PUSH
30946: LD_INT 7
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 30
30955: PUSH
30956: LD_INT 8
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PPUSH
30973: CALL_OW 72
30977: ST_TO_ADDR
30978: GO 30981
30980: POP
// if i = 1 then
30981: LD_VAR 0 8
30985: PUSH
30986: LD_INT 1
30988: EQUAL
30989: IFFALSE 31100
// begin tmp := [ ] ;
30991: LD_ADDR_VAR 0 19
30995: PUSH
30996: EMPTY
30997: ST_TO_ADDR
// for j in f do
30998: LD_ADDR_VAR 0 9
31002: PUSH
31003: LD_VAR 0 12
31007: PUSH
31008: FOR_IN
31009: IFFALSE 31082
// if GetBType ( j ) = b_bunker then
31011: LD_VAR 0 9
31015: PPUSH
31016: CALL_OW 266
31020: PUSH
31021: LD_INT 32
31023: EQUAL
31024: IFFALSE 31051
// tmp := Insert ( tmp , 1 , j ) else
31026: LD_ADDR_VAR 0 19
31030: PUSH
31031: LD_VAR 0 19
31035: PPUSH
31036: LD_INT 1
31038: PPUSH
31039: LD_VAR 0 9
31043: PPUSH
31044: CALL_OW 2
31048: ST_TO_ADDR
31049: GO 31080
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31051: LD_ADDR_VAR 0 19
31055: PUSH
31056: LD_VAR 0 19
31060: PPUSH
31061: LD_VAR 0 19
31065: PUSH
31066: LD_INT 1
31068: PLUS
31069: PPUSH
31070: LD_VAR 0 9
31074: PPUSH
31075: CALL_OW 2
31079: ST_TO_ADDR
31080: GO 31008
31082: POP
31083: POP
// if tmp then
31084: LD_VAR 0 19
31088: IFFALSE 31100
// f := tmp ;
31090: LD_ADDR_VAR 0 12
31094: PUSH
31095: LD_VAR 0 19
31099: ST_TO_ADDR
// end ; x := personel [ i ] ;
31100: LD_ADDR_VAR 0 13
31104: PUSH
31105: LD_VAR 0 6
31109: PUSH
31110: LD_VAR 0 8
31114: ARRAY
31115: ST_TO_ADDR
// if x = - 1 then
31116: LD_VAR 0 13
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: EQUAL
31125: IFFALSE 31334
// begin for j in f do
31127: LD_ADDR_VAR 0 9
31131: PUSH
31132: LD_VAR 0 12
31136: PUSH
31137: FOR_IN
31138: IFFALSE 31330
// repeat InitHc ;
31140: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31144: LD_VAR 0 9
31148: PPUSH
31149: CALL_OW 266
31153: PUSH
31154: LD_INT 5
31156: EQUAL
31157: IFFALSE 31227
// begin if UnitsInside ( j ) < 3 then
31159: LD_VAR 0 9
31163: PPUSH
31164: CALL_OW 313
31168: PUSH
31169: LD_INT 3
31171: LESS
31172: IFFALSE 31208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31174: LD_INT 0
31176: PPUSH
31177: LD_INT 5
31179: PUSH
31180: LD_INT 8
31182: PUSH
31183: LD_INT 9
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: PUSH
31191: LD_VAR 0 17
31195: ARRAY
31196: PPUSH
31197: LD_VAR 0 4
31201: PPUSH
31202: CALL_OW 380
31206: GO 31225
// PrepareHuman ( false , i , skill ) ;
31208: LD_INT 0
31210: PPUSH
31211: LD_VAR 0 8
31215: PPUSH
31216: LD_VAR 0 4
31220: PPUSH
31221: CALL_OW 380
// end else
31225: GO 31244
// PrepareHuman ( false , i , skill ) ;
31227: LD_INT 0
31229: PPUSH
31230: LD_VAR 0 8
31234: PPUSH
31235: LD_VAR 0 4
31239: PPUSH
31240: CALL_OW 380
// un := CreateHuman ;
31244: LD_ADDR_VAR 0 14
31248: PUSH
31249: CALL_OW 44
31253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31254: LD_ADDR_VAR 0 7
31258: PUSH
31259: LD_VAR 0 7
31263: PPUSH
31264: LD_INT 1
31266: PPUSH
31267: LD_VAR 0 14
31271: PPUSH
31272: CALL_OW 2
31276: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31277: LD_VAR 0 14
31281: PPUSH
31282: LD_VAR 0 9
31286: PPUSH
31287: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31291: LD_VAR 0 9
31295: PPUSH
31296: CALL_OW 313
31300: PUSH
31301: LD_INT 6
31303: EQUAL
31304: PUSH
31305: LD_VAR 0 9
31309: PPUSH
31310: CALL_OW 266
31314: PUSH
31315: LD_INT 32
31317: PUSH
31318: LD_INT 31
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: IN
31325: OR
31326: IFFALSE 31140
31328: GO 31137
31330: POP
31331: POP
// end else
31332: GO 31714
// for j = 1 to x do
31334: LD_ADDR_VAR 0 9
31338: PUSH
31339: DOUBLE
31340: LD_INT 1
31342: DEC
31343: ST_TO_ADDR
31344: LD_VAR 0 13
31348: PUSH
31349: FOR_TO
31350: IFFALSE 31712
// begin InitHc ;
31352: CALL_OW 19
// if not f then
31356: LD_VAR 0 12
31360: NOT
31361: IFFALSE 31450
// begin PrepareHuman ( false , i , skill ) ;
31363: LD_INT 0
31365: PPUSH
31366: LD_VAR 0 8
31370: PPUSH
31371: LD_VAR 0 4
31375: PPUSH
31376: CALL_OW 380
// un := CreateHuman ;
31380: LD_ADDR_VAR 0 14
31384: PUSH
31385: CALL_OW 44
31389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31390: LD_ADDR_VAR 0 7
31394: PUSH
31395: LD_VAR 0 7
31399: PPUSH
31400: LD_INT 1
31402: PPUSH
31403: LD_VAR 0 14
31407: PPUSH
31408: CALL_OW 2
31412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31413: LD_VAR 0 14
31417: PPUSH
31418: LD_VAR 0 1
31422: PPUSH
31423: CALL_OW 250
31427: PPUSH
31428: LD_VAR 0 1
31432: PPUSH
31433: CALL_OW 251
31437: PPUSH
31438: LD_INT 10
31440: PPUSH
31441: LD_INT 0
31443: PPUSH
31444: CALL_OW 50
// continue ;
31448: GO 31349
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31450: LD_VAR 0 12
31454: PUSH
31455: LD_INT 1
31457: ARRAY
31458: PPUSH
31459: CALL_OW 313
31463: PUSH
31464: LD_VAR 0 12
31468: PUSH
31469: LD_INT 1
31471: ARRAY
31472: PPUSH
31473: CALL_OW 266
31477: PUSH
31478: LD_INT 32
31480: PUSH
31481: LD_INT 31
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: IN
31488: AND
31489: PUSH
31490: LD_VAR 0 12
31494: PUSH
31495: LD_INT 1
31497: ARRAY
31498: PPUSH
31499: CALL_OW 313
31503: PUSH
31504: LD_INT 6
31506: EQUAL
31507: OR
31508: IFFALSE 31528
// f := Delete ( f , 1 ) ;
31510: LD_ADDR_VAR 0 12
31514: PUSH
31515: LD_VAR 0 12
31519: PPUSH
31520: LD_INT 1
31522: PPUSH
31523: CALL_OW 3
31527: ST_TO_ADDR
// if not f then
31528: LD_VAR 0 12
31532: NOT
31533: IFFALSE 31551
// begin x := x + 2 ;
31535: LD_ADDR_VAR 0 13
31539: PUSH
31540: LD_VAR 0 13
31544: PUSH
31545: LD_INT 2
31547: PLUS
31548: ST_TO_ADDR
// continue ;
31549: GO 31349
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31551: LD_VAR 0 12
31555: PUSH
31556: LD_INT 1
31558: ARRAY
31559: PPUSH
31560: CALL_OW 266
31564: PUSH
31565: LD_INT 5
31567: EQUAL
31568: IFFALSE 31642
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31570: LD_VAR 0 12
31574: PUSH
31575: LD_INT 1
31577: ARRAY
31578: PPUSH
31579: CALL_OW 313
31583: PUSH
31584: LD_INT 3
31586: LESS
31587: IFFALSE 31623
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31589: LD_INT 0
31591: PPUSH
31592: LD_INT 5
31594: PUSH
31595: LD_INT 8
31597: PUSH
31598: LD_INT 9
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: LIST
31605: PUSH
31606: LD_VAR 0 17
31610: ARRAY
31611: PPUSH
31612: LD_VAR 0 4
31616: PPUSH
31617: CALL_OW 380
31621: GO 31640
// PrepareHuman ( false , i , skill ) ;
31623: LD_INT 0
31625: PPUSH
31626: LD_VAR 0 8
31630: PPUSH
31631: LD_VAR 0 4
31635: PPUSH
31636: CALL_OW 380
// end else
31640: GO 31659
// PrepareHuman ( false , i , skill ) ;
31642: LD_INT 0
31644: PPUSH
31645: LD_VAR 0 8
31649: PPUSH
31650: LD_VAR 0 4
31654: PPUSH
31655: CALL_OW 380
// un := CreateHuman ;
31659: LD_ADDR_VAR 0 14
31663: PUSH
31664: CALL_OW 44
31668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31669: LD_ADDR_VAR 0 7
31673: PUSH
31674: LD_VAR 0 7
31678: PPUSH
31679: LD_INT 1
31681: PPUSH
31682: LD_VAR 0 14
31686: PPUSH
31687: CALL_OW 2
31691: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31692: LD_VAR 0 14
31696: PPUSH
31697: LD_VAR 0 12
31701: PUSH
31702: LD_INT 1
31704: ARRAY
31705: PPUSH
31706: CALL_OW 52
// end ;
31710: GO 31349
31712: POP
31713: POP
// end ;
31714: GO 30651
31716: POP
31717: POP
// result := result ^ buildings ;
31718: LD_ADDR_VAR 0 7
31722: PUSH
31723: LD_VAR 0 7
31727: PUSH
31728: LD_VAR 0 18
31732: ADD
31733: ST_TO_ADDR
// end else
31734: GO 31877
// begin for i = 1 to personel do
31736: LD_ADDR_VAR 0 8
31740: PUSH
31741: DOUBLE
31742: LD_INT 1
31744: DEC
31745: ST_TO_ADDR
31746: LD_VAR 0 6
31750: PUSH
31751: FOR_TO
31752: IFFALSE 31875
// begin if i > 4 then
31754: LD_VAR 0 8
31758: PUSH
31759: LD_INT 4
31761: GREATER
31762: IFFALSE 31766
// break ;
31764: GO 31875
// x := personel [ i ] ;
31766: LD_ADDR_VAR 0 13
31770: PUSH
31771: LD_VAR 0 6
31775: PUSH
31776: LD_VAR 0 8
31780: ARRAY
31781: ST_TO_ADDR
// if x = - 1 then
31782: LD_VAR 0 13
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: EQUAL
31791: IFFALSE 31795
// continue ;
31793: GO 31751
// PrepareHuman ( false , i , skill ) ;
31795: LD_INT 0
31797: PPUSH
31798: LD_VAR 0 8
31802: PPUSH
31803: LD_VAR 0 4
31807: PPUSH
31808: CALL_OW 380
// un := CreateHuman ;
31812: LD_ADDR_VAR 0 14
31816: PUSH
31817: CALL_OW 44
31821: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31822: LD_VAR 0 14
31826: PPUSH
31827: LD_VAR 0 1
31831: PPUSH
31832: CALL_OW 250
31836: PPUSH
31837: LD_VAR 0 1
31841: PPUSH
31842: CALL_OW 251
31846: PPUSH
31847: LD_INT 10
31849: PPUSH
31850: LD_INT 0
31852: PPUSH
31853: CALL_OW 50
// result := result ^ un ;
31857: LD_ADDR_VAR 0 7
31861: PUSH
31862: LD_VAR 0 7
31866: PUSH
31867: LD_VAR 0 14
31871: ADD
31872: ST_TO_ADDR
// end ;
31873: GO 31751
31875: POP
31876: POP
// end ; end ;
31877: LD_VAR 0 7
31881: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31882: LD_INT 0
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
31890: PPUSH
31891: PPUSH
31892: PPUSH
31893: PPUSH
31894: PPUSH
31895: PPUSH
31896: PPUSH
31897: PPUSH
31898: PPUSH
31899: PPUSH
// result := false ;
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: LD_INT 0
31907: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31908: LD_VAR 0 1
31912: NOT
31913: PUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL_OW 266
31923: PUSH
31924: LD_INT 32
31926: PUSH
31927: LD_INT 33
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: IN
31934: NOT
31935: OR
31936: IFFALSE 31940
// exit ;
31938: GO 33076
// nat := GetNation ( tower ) ;
31940: LD_ADDR_VAR 0 12
31944: PUSH
31945: LD_VAR 0 1
31949: PPUSH
31950: CALL_OW 248
31954: ST_TO_ADDR
// side := GetSide ( tower ) ;
31955: LD_ADDR_VAR 0 16
31959: PUSH
31960: LD_VAR 0 1
31964: PPUSH
31965: CALL_OW 255
31969: ST_TO_ADDR
// x := GetX ( tower ) ;
31970: LD_ADDR_VAR 0 10
31974: PUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 250
31984: ST_TO_ADDR
// y := GetY ( tower ) ;
31985: LD_ADDR_VAR 0 11
31989: PUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: CALL_OW 251
31999: ST_TO_ADDR
// if not x or not y then
32000: LD_VAR 0 10
32004: NOT
32005: PUSH
32006: LD_VAR 0 11
32010: NOT
32011: OR
32012: IFFALSE 32016
// exit ;
32014: GO 33076
// weapon := 0 ;
32016: LD_ADDR_VAR 0 18
32020: PUSH
32021: LD_INT 0
32023: ST_TO_ADDR
// fac_list := [ ] ;
32024: LD_ADDR_VAR 0 17
32028: PUSH
32029: EMPTY
32030: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
32031: LD_ADDR_VAR 0 6
32035: PUSH
32036: LD_VAR 0 1
32040: PPUSH
32041: CALL_OW 274
32045: PPUSH
32046: LD_VAR 0 2
32050: PPUSH
32051: CALL 29654 0 2
32055: PPUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PPUSH
32066: CALL_OW 72
32070: ST_TO_ADDR
// if not factories then
32071: LD_VAR 0 6
32075: NOT
32076: IFFALSE 32080
// exit ;
32078: GO 33076
// for i in factories do
32080: LD_ADDR_VAR 0 8
32084: PUSH
32085: LD_VAR 0 6
32089: PUSH
32090: FOR_IN
32091: IFFALSE 32116
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32093: LD_ADDR_VAR 0 17
32097: PUSH
32098: LD_VAR 0 17
32102: PUSH
32103: LD_VAR 0 8
32107: PPUSH
32108: CALL_OW 478
32112: UNION
32113: ST_TO_ADDR
32114: GO 32090
32116: POP
32117: POP
// if not fac_list then
32118: LD_VAR 0 17
32122: NOT
32123: IFFALSE 32127
// exit ;
32125: GO 33076
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32127: LD_ADDR_VAR 0 5
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: LD_INT 9
32140: PUSH
32141: LD_INT 10
32143: PUSH
32144: LD_INT 6
32146: PUSH
32147: LD_INT 7
32149: PUSH
32150: LD_INT 11
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 27
32164: PUSH
32165: LD_INT 28
32167: PUSH
32168: LD_INT 26
32170: PUSH
32171: LD_INT 30
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 43
32182: PUSH
32183: LD_INT 44
32185: PUSH
32186: LD_INT 46
32188: PUSH
32189: LD_INT 45
32191: PUSH
32192: LD_INT 47
32194: PUSH
32195: LD_INT 49
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: LIST
32210: PUSH
32211: LD_VAR 0 12
32215: ARRAY
32216: ST_TO_ADDR
// for i in list do
32217: LD_ADDR_VAR 0 8
32221: PUSH
32222: LD_VAR 0 5
32226: PUSH
32227: FOR_IN
32228: IFFALSE 32261
// if not i in fac_list then
32230: LD_VAR 0 8
32234: PUSH
32235: LD_VAR 0 17
32239: IN
32240: NOT
32241: IFFALSE 32259
// list := list diff i ;
32243: LD_ADDR_VAR 0 5
32247: PUSH
32248: LD_VAR 0 5
32252: PUSH
32253: LD_VAR 0 8
32257: DIFF
32258: ST_TO_ADDR
32259: GO 32227
32261: POP
32262: POP
// if not list then
32263: LD_VAR 0 5
32267: NOT
32268: IFFALSE 32272
// exit ;
32270: GO 33076
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32272: LD_VAR 0 12
32276: PUSH
32277: LD_INT 3
32279: EQUAL
32280: PUSH
32281: LD_INT 49
32283: PUSH
32284: LD_VAR 0 5
32288: IN
32289: AND
32290: PUSH
32291: LD_INT 31
32293: PPUSH
32294: LD_VAR 0 16
32298: PPUSH
32299: CALL_OW 321
32303: PUSH
32304: LD_INT 2
32306: EQUAL
32307: AND
32308: IFFALSE 32368
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32310: LD_INT 22
32312: PUSH
32313: LD_VAR 0 16
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 35
32324: PUSH
32325: LD_INT 49
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 91
32334: PUSH
32335: LD_VAR 0 1
32339: PUSH
32340: LD_INT 10
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: NOT
32358: IFFALSE 32368
// weapon := ru_time_lapser ;
32360: LD_ADDR_VAR 0 18
32364: PUSH
32365: LD_INT 49
32367: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32368: LD_VAR 0 12
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: IN
32383: PUSH
32384: LD_INT 11
32386: PUSH
32387: LD_VAR 0 5
32391: IN
32392: PUSH
32393: LD_INT 30
32395: PUSH
32396: LD_VAR 0 5
32400: IN
32401: OR
32402: AND
32403: PUSH
32404: LD_INT 6
32406: PPUSH
32407: LD_VAR 0 16
32411: PPUSH
32412: CALL_OW 321
32416: PUSH
32417: LD_INT 2
32419: EQUAL
32420: AND
32421: IFFALSE 32586
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32423: LD_INT 22
32425: PUSH
32426: LD_VAR 0 16
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 35
32440: PUSH
32441: LD_INT 11
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 35
32450: PUSH
32451: LD_INT 30
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 91
32465: PUSH
32466: LD_VAR 0 1
32470: PUSH
32471: LD_INT 18
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL_OW 69
32488: NOT
32489: PUSH
32490: LD_INT 22
32492: PUSH
32493: LD_VAR 0 16
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: LD_INT 30
32507: PUSH
32508: LD_INT 32
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 30
32517: PUSH
32518: LD_INT 33
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 91
32532: PUSH
32533: LD_VAR 0 1
32537: PUSH
32538: LD_INT 12
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: PPUSH
32554: CALL_OW 69
32558: PUSH
32559: LD_INT 2
32561: GREATER
32562: AND
32563: IFFALSE 32586
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32565: LD_ADDR_VAR 0 18
32569: PUSH
32570: LD_INT 11
32572: PUSH
32573: LD_INT 30
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_VAR 0 12
32584: ARRAY
32585: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32586: LD_VAR 0 18
32590: NOT
32591: PUSH
32592: LD_INT 40
32594: PPUSH
32595: LD_VAR 0 16
32599: PPUSH
32600: CALL_OW 321
32604: PUSH
32605: LD_INT 2
32607: EQUAL
32608: AND
32609: PUSH
32610: LD_INT 7
32612: PUSH
32613: LD_VAR 0 5
32617: IN
32618: PUSH
32619: LD_INT 28
32621: PUSH
32622: LD_VAR 0 5
32626: IN
32627: OR
32628: PUSH
32629: LD_INT 45
32631: PUSH
32632: LD_VAR 0 5
32636: IN
32637: OR
32638: AND
32639: IFFALSE 32893
// begin hex := GetHexInfo ( x , y ) ;
32641: LD_ADDR_VAR 0 4
32645: PUSH
32646: LD_VAR 0 10
32650: PPUSH
32651: LD_VAR 0 11
32655: PPUSH
32656: CALL_OW 546
32660: ST_TO_ADDR
// if hex [ 1 ] then
32661: LD_VAR 0 4
32665: PUSH
32666: LD_INT 1
32668: ARRAY
32669: IFFALSE 32673
// exit ;
32671: GO 33076
// height := hex [ 2 ] ;
32673: LD_ADDR_VAR 0 15
32677: PUSH
32678: LD_VAR 0 4
32682: PUSH
32683: LD_INT 2
32685: ARRAY
32686: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32687: LD_ADDR_VAR 0 14
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 5
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: ST_TO_ADDR
// for i in tmp do
32710: LD_ADDR_VAR 0 8
32714: PUSH
32715: LD_VAR 0 14
32719: PUSH
32720: FOR_IN
32721: IFFALSE 32891
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32723: LD_ADDR_VAR 0 9
32727: PUSH
32728: LD_VAR 0 10
32732: PPUSH
32733: LD_VAR 0 8
32737: PPUSH
32738: LD_INT 5
32740: PPUSH
32741: CALL_OW 272
32745: PUSH
32746: LD_VAR 0 11
32750: PPUSH
32751: LD_VAR 0 8
32755: PPUSH
32756: LD_INT 5
32758: PPUSH
32759: CALL_OW 273
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32768: LD_VAR 0 9
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: PPUSH
32777: LD_VAR 0 9
32781: PUSH
32782: LD_INT 2
32784: ARRAY
32785: PPUSH
32786: CALL_OW 488
32790: IFFALSE 32889
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32792: LD_ADDR_VAR 0 4
32796: PUSH
32797: LD_VAR 0 9
32801: PUSH
32802: LD_INT 1
32804: ARRAY
32805: PPUSH
32806: LD_VAR 0 9
32810: PUSH
32811: LD_INT 2
32813: ARRAY
32814: PPUSH
32815: CALL_OW 546
32819: ST_TO_ADDR
// if hex [ 1 ] then
32820: LD_VAR 0 4
32824: PUSH
32825: LD_INT 1
32827: ARRAY
32828: IFFALSE 32832
// continue ;
32830: GO 32720
// h := hex [ 2 ] ;
32832: LD_ADDR_VAR 0 13
32836: PUSH
32837: LD_VAR 0 4
32841: PUSH
32842: LD_INT 2
32844: ARRAY
32845: ST_TO_ADDR
// if h + 7 < height then
32846: LD_VAR 0 13
32850: PUSH
32851: LD_INT 7
32853: PLUS
32854: PUSH
32855: LD_VAR 0 15
32859: LESS
32860: IFFALSE 32889
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32862: LD_ADDR_VAR 0 18
32866: PUSH
32867: LD_INT 7
32869: PUSH
32870: LD_INT 28
32872: PUSH
32873: LD_INT 45
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: LIST
32880: PUSH
32881: LD_VAR 0 12
32885: ARRAY
32886: ST_TO_ADDR
// break ;
32887: GO 32891
// end ; end ; end ;
32889: GO 32720
32891: POP
32892: POP
// end ; if not weapon then
32893: LD_VAR 0 18
32897: NOT
32898: IFFALSE 32958
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32900: LD_ADDR_VAR 0 5
32904: PUSH
32905: LD_VAR 0 5
32909: PUSH
32910: LD_INT 11
32912: PUSH
32913: LD_INT 30
32915: PUSH
32916: LD_INT 49
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: DIFF
32924: ST_TO_ADDR
// if not list then
32925: LD_VAR 0 5
32929: NOT
32930: IFFALSE 32934
// exit ;
32932: GO 33076
// weapon := list [ rand ( 1 , list ) ] ;
32934: LD_ADDR_VAR 0 18
32938: PUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_INT 1
32946: PPUSH
32947: LD_VAR 0 5
32951: PPUSH
32952: CALL_OW 12
32956: ARRAY
32957: ST_TO_ADDR
// end ; if weapon then
32958: LD_VAR 0 18
32962: IFFALSE 33076
// begin tmp := CostOfWeapon ( weapon ) ;
32964: LD_ADDR_VAR 0 14
32968: PUSH
32969: LD_VAR 0 18
32973: PPUSH
32974: CALL_OW 451
32978: ST_TO_ADDR
// j := GetBase ( tower ) ;
32979: LD_ADDR_VAR 0 9
32983: PUSH
32984: LD_VAR 0 1
32988: PPUSH
32989: CALL_OW 274
32993: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32994: LD_VAR 0 9
32998: PPUSH
32999: LD_INT 1
33001: PPUSH
33002: CALL_OW 275
33006: PUSH
33007: LD_VAR 0 14
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: GREATEREQUAL
33016: PUSH
33017: LD_VAR 0 9
33021: PPUSH
33022: LD_INT 2
33024: PPUSH
33025: CALL_OW 275
33029: PUSH
33030: LD_VAR 0 14
33034: PUSH
33035: LD_INT 2
33037: ARRAY
33038: GREATEREQUAL
33039: AND
33040: PUSH
33041: LD_VAR 0 9
33045: PPUSH
33046: LD_INT 3
33048: PPUSH
33049: CALL_OW 275
33053: PUSH
33054: LD_VAR 0 14
33058: PUSH
33059: LD_INT 3
33061: ARRAY
33062: GREATEREQUAL
33063: AND
33064: IFFALSE 33076
// result := weapon ;
33066: LD_ADDR_VAR 0 3
33070: PUSH
33071: LD_VAR 0 18
33075: ST_TO_ADDR
// end ; end ;
33076: LD_VAR 0 3
33080: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
// result := true ;
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_INT 1
33092: ST_TO_ADDR
// if array1 = array2 then
33093: LD_VAR 0 1
33097: PUSH
33098: LD_VAR 0 2
33102: EQUAL
33103: IFFALSE 33163
// begin for i = 1 to array1 do
33105: LD_ADDR_VAR 0 4
33109: PUSH
33110: DOUBLE
33111: LD_INT 1
33113: DEC
33114: ST_TO_ADDR
33115: LD_VAR 0 1
33119: PUSH
33120: FOR_TO
33121: IFFALSE 33159
// if array1 [ i ] <> array2 [ i ] then
33123: LD_VAR 0 1
33127: PUSH
33128: LD_VAR 0 4
33132: ARRAY
33133: PUSH
33134: LD_VAR 0 2
33138: PUSH
33139: LD_VAR 0 4
33143: ARRAY
33144: NONEQUAL
33145: IFFALSE 33157
// begin result := false ;
33147: LD_ADDR_VAR 0 3
33151: PUSH
33152: LD_INT 0
33154: ST_TO_ADDR
// break ;
33155: GO 33159
// end ;
33157: GO 33120
33159: POP
33160: POP
// end else
33161: GO 33171
// result := false ;
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_INT 0
33170: ST_TO_ADDR
// end ;
33171: LD_VAR 0 3
33175: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
// pom := GetBase ( fac ) ;
33181: LD_ADDR_VAR 0 5
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 274
33195: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33196: LD_ADDR_VAR 0 4
33200: PUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_INT 1
33208: ARRAY
33209: PPUSH
33210: LD_VAR 0 2
33214: PUSH
33215: LD_INT 2
33217: ARRAY
33218: PPUSH
33219: LD_VAR 0 2
33223: PUSH
33224: LD_INT 3
33226: ARRAY
33227: PPUSH
33228: LD_VAR 0 2
33232: PUSH
33233: LD_INT 4
33235: ARRAY
33236: PPUSH
33237: CALL_OW 449
33241: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33242: LD_ADDR_VAR 0 3
33246: PUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: LD_INT 1
33254: PPUSH
33255: CALL_OW 275
33259: PUSH
33260: LD_VAR 0 4
33264: PUSH
33265: LD_INT 1
33267: ARRAY
33268: GREATEREQUAL
33269: PUSH
33270: LD_VAR 0 5
33274: PPUSH
33275: LD_INT 2
33277: PPUSH
33278: CALL_OW 275
33282: PUSH
33283: LD_VAR 0 4
33287: PUSH
33288: LD_INT 2
33290: ARRAY
33291: GREATEREQUAL
33292: AND
33293: PUSH
33294: LD_VAR 0 5
33298: PPUSH
33299: LD_INT 3
33301: PPUSH
33302: CALL_OW 275
33306: PUSH
33307: LD_VAR 0 4
33311: PUSH
33312: LD_INT 3
33314: ARRAY
33315: GREATEREQUAL
33316: AND
33317: ST_TO_ADDR
// end ;
33318: LD_VAR 0 3
33322: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33323: LD_INT 0
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
// pom := GetBase ( building ) ;
33329: LD_ADDR_VAR 0 3
33333: PUSH
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 274
33343: ST_TO_ADDR
// if not pom then
33344: LD_VAR 0 3
33348: NOT
33349: IFFALSE 33353
// exit ;
33351: GO 33523
// btype := GetBType ( building ) ;
33353: LD_ADDR_VAR 0 5
33357: PUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 266
33367: ST_TO_ADDR
// if btype = b_armoury then
33368: LD_VAR 0 5
33372: PUSH
33373: LD_INT 4
33375: EQUAL
33376: IFFALSE 33386
// btype := b_barracks ;
33378: LD_ADDR_VAR 0 5
33382: PUSH
33383: LD_INT 5
33385: ST_TO_ADDR
// if btype = b_depot then
33386: LD_VAR 0 5
33390: PUSH
33391: LD_INT 0
33393: EQUAL
33394: IFFALSE 33404
// btype := b_warehouse ;
33396: LD_ADDR_VAR 0 5
33400: PUSH
33401: LD_INT 1
33403: ST_TO_ADDR
// if btype = b_workshop then
33404: LD_VAR 0 5
33408: PUSH
33409: LD_INT 2
33411: EQUAL
33412: IFFALSE 33422
// btype := b_factory ;
33414: LD_ADDR_VAR 0 5
33418: PUSH
33419: LD_INT 3
33421: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33422: LD_ADDR_VAR 0 4
33426: PUSH
33427: LD_VAR 0 5
33431: PPUSH
33432: LD_VAR 0 1
33436: PPUSH
33437: CALL_OW 248
33441: PPUSH
33442: CALL_OW 450
33446: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33447: LD_ADDR_VAR 0 2
33451: PUSH
33452: LD_VAR 0 3
33456: PPUSH
33457: LD_INT 1
33459: PPUSH
33460: CALL_OW 275
33464: PUSH
33465: LD_VAR 0 4
33469: PUSH
33470: LD_INT 1
33472: ARRAY
33473: GREATEREQUAL
33474: PUSH
33475: LD_VAR 0 3
33479: PPUSH
33480: LD_INT 2
33482: PPUSH
33483: CALL_OW 275
33487: PUSH
33488: LD_VAR 0 4
33492: PUSH
33493: LD_INT 2
33495: ARRAY
33496: GREATEREQUAL
33497: AND
33498: PUSH
33499: LD_VAR 0 3
33503: PPUSH
33504: LD_INT 3
33506: PPUSH
33507: CALL_OW 275
33511: PUSH
33512: LD_VAR 0 4
33516: PUSH
33517: LD_INT 3
33519: ARRAY
33520: GREATEREQUAL
33521: AND
33522: ST_TO_ADDR
// end ;
33523: LD_VAR 0 2
33527: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33528: LD_INT 0
33530: PPUSH
33531: PPUSH
33532: PPUSH
// pom := GetBase ( building ) ;
33533: LD_ADDR_VAR 0 4
33537: PUSH
33538: LD_VAR 0 1
33542: PPUSH
33543: CALL_OW 274
33547: ST_TO_ADDR
// if not pom then
33548: LD_VAR 0 4
33552: NOT
33553: IFFALSE 33557
// exit ;
33555: GO 33658
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33557: LD_ADDR_VAR 0 5
33561: PUSH
33562: LD_VAR 0 2
33566: PPUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: CALL_OW 248
33576: PPUSH
33577: CALL_OW 450
33581: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_VAR 0 4
33591: PPUSH
33592: LD_INT 1
33594: PPUSH
33595: CALL_OW 275
33599: PUSH
33600: LD_VAR 0 5
33604: PUSH
33605: LD_INT 1
33607: ARRAY
33608: GREATEREQUAL
33609: PUSH
33610: LD_VAR 0 4
33614: PPUSH
33615: LD_INT 2
33617: PPUSH
33618: CALL_OW 275
33622: PUSH
33623: LD_VAR 0 5
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: GREATEREQUAL
33632: AND
33633: PUSH
33634: LD_VAR 0 4
33638: PPUSH
33639: LD_INT 3
33641: PPUSH
33642: CALL_OW 275
33646: PUSH
33647: LD_VAR 0 5
33651: PUSH
33652: LD_INT 3
33654: ARRAY
33655: GREATEREQUAL
33656: AND
33657: ST_TO_ADDR
// end ;
33658: LD_VAR 0 3
33662: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33663: LD_INT 0
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
// result := false ;
33675: LD_ADDR_VAR 0 6
33679: PUSH
33680: LD_INT 0
33682: ST_TO_ADDR
// if not base or not btype or not x or not y then
33683: LD_VAR 0 1
33687: NOT
33688: PUSH
33689: LD_VAR 0 2
33693: NOT
33694: OR
33695: PUSH
33696: LD_VAR 0 3
33700: NOT
33701: OR
33702: PUSH
33703: LD_VAR 0 4
33707: NOT
33708: OR
33709: IFFALSE 33713
// exit ;
33711: GO 34322
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33713: LD_ADDR_VAR 0 12
33717: PUSH
33718: LD_VAR 0 2
33722: PPUSH
33723: LD_VAR 0 3
33727: PPUSH
33728: LD_VAR 0 4
33732: PPUSH
33733: LD_VAR 0 5
33737: PPUSH
33738: LD_VAR 0 1
33742: PUSH
33743: LD_INT 1
33745: ARRAY
33746: PPUSH
33747: CALL_OW 248
33751: PPUSH
33752: LD_INT 0
33754: PPUSH
33755: CALL 35159 0 6
33759: ST_TO_ADDR
// if not hexes then
33760: LD_VAR 0 12
33764: NOT
33765: IFFALSE 33769
// exit ;
33767: GO 34322
// for i = 1 to hexes do
33769: LD_ADDR_VAR 0 7
33773: PUSH
33774: DOUBLE
33775: LD_INT 1
33777: DEC
33778: ST_TO_ADDR
33779: LD_VAR 0 12
33783: PUSH
33784: FOR_TO
33785: IFFALSE 34320
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33787: LD_ADDR_VAR 0 11
33791: PUSH
33792: LD_VAR 0 12
33796: PUSH
33797: LD_VAR 0 7
33801: ARRAY
33802: PUSH
33803: LD_INT 1
33805: ARRAY
33806: PPUSH
33807: LD_VAR 0 12
33811: PUSH
33812: LD_VAR 0 7
33816: ARRAY
33817: PUSH
33818: LD_INT 2
33820: ARRAY
33821: PPUSH
33822: CALL_OW 428
33826: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33827: LD_VAR 0 12
33831: PUSH
33832: LD_VAR 0 7
33836: ARRAY
33837: PUSH
33838: LD_INT 1
33840: ARRAY
33841: PPUSH
33842: LD_VAR 0 12
33846: PUSH
33847: LD_VAR 0 7
33851: ARRAY
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: PPUSH
33857: CALL_OW 351
33861: PUSH
33862: LD_VAR 0 12
33866: PUSH
33867: LD_VAR 0 7
33871: ARRAY
33872: PUSH
33873: LD_INT 1
33875: ARRAY
33876: PPUSH
33877: LD_VAR 0 12
33881: PUSH
33882: LD_VAR 0 7
33886: ARRAY
33887: PUSH
33888: LD_INT 2
33890: ARRAY
33891: PPUSH
33892: CALL_OW 488
33896: NOT
33897: OR
33898: PUSH
33899: LD_VAR 0 11
33903: PPUSH
33904: CALL_OW 247
33908: PUSH
33909: LD_INT 3
33911: EQUAL
33912: OR
33913: IFFALSE 33919
// exit ;
33915: POP
33916: POP
33917: GO 34322
// if not tmp or not tmp in base then
33919: LD_VAR 0 11
33923: NOT
33924: PUSH
33925: LD_VAR 0 11
33929: PUSH
33930: LD_VAR 0 1
33934: IN
33935: NOT
33936: OR
33937: IFFALSE 33941
// continue ;
33939: GO 33784
// result := true ;
33941: LD_ADDR_VAR 0 6
33945: PUSH
33946: LD_INT 1
33948: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33949: LD_ADDR_VAR 0 15
33953: PUSH
33954: LD_VAR 0 1
33958: PPUSH
33959: LD_INT 22
33961: PUSH
33962: LD_VAR 0 11
33966: PPUSH
33967: CALL_OW 255
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: LD_INT 30
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 30
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PPUSH
34008: CALL_OW 72
34012: ST_TO_ADDR
// if dep then
34013: LD_VAR 0 15
34017: IFFALSE 34153
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34019: LD_ADDR_VAR 0 14
34023: PUSH
34024: LD_VAR 0 15
34028: PUSH
34029: LD_INT 1
34031: ARRAY
34032: PPUSH
34033: CALL_OW 250
34037: PPUSH
34038: LD_VAR 0 15
34042: PUSH
34043: LD_INT 1
34045: ARRAY
34046: PPUSH
34047: CALL_OW 254
34051: PPUSH
34052: LD_INT 5
34054: PPUSH
34055: CALL_OW 272
34059: PUSH
34060: LD_VAR 0 15
34064: PUSH
34065: LD_INT 1
34067: ARRAY
34068: PPUSH
34069: CALL_OW 251
34073: PPUSH
34074: LD_VAR 0 15
34078: PUSH
34079: LD_INT 1
34081: ARRAY
34082: PPUSH
34083: CALL_OW 254
34087: PPUSH
34088: LD_INT 5
34090: PPUSH
34091: CALL_OW 273
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34100: LD_VAR 0 14
34104: PUSH
34105: LD_INT 1
34107: ARRAY
34108: PPUSH
34109: LD_VAR 0 14
34113: PUSH
34114: LD_INT 2
34116: ARRAY
34117: PPUSH
34118: CALL_OW 488
34122: IFFALSE 34153
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34124: LD_VAR 0 11
34128: PPUSH
34129: LD_VAR 0 14
34133: PUSH
34134: LD_INT 1
34136: ARRAY
34137: PPUSH
34138: LD_VAR 0 14
34142: PUSH
34143: LD_INT 2
34145: ARRAY
34146: PPUSH
34147: CALL_OW 111
// continue ;
34151: GO 33784
// end ; end ; r := GetDir ( tmp ) ;
34153: LD_ADDR_VAR 0 13
34157: PUSH
34158: LD_VAR 0 11
34162: PPUSH
34163: CALL_OW 254
34167: ST_TO_ADDR
// if r = 5 then
34168: LD_VAR 0 13
34172: PUSH
34173: LD_INT 5
34175: EQUAL
34176: IFFALSE 34186
// r := 0 ;
34178: LD_ADDR_VAR 0 13
34182: PUSH
34183: LD_INT 0
34185: ST_TO_ADDR
// for j = r to 5 do
34186: LD_ADDR_VAR 0 8
34190: PUSH
34191: DOUBLE
34192: LD_VAR 0 13
34196: DEC
34197: ST_TO_ADDR
34198: LD_INT 5
34200: PUSH
34201: FOR_TO
34202: IFFALSE 34316
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34204: LD_ADDR_VAR 0 9
34208: PUSH
34209: LD_VAR 0 11
34213: PPUSH
34214: CALL_OW 250
34218: PPUSH
34219: LD_VAR 0 8
34223: PPUSH
34224: LD_INT 2
34226: PPUSH
34227: CALL_OW 272
34231: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34232: LD_ADDR_VAR 0 10
34236: PUSH
34237: LD_VAR 0 11
34241: PPUSH
34242: CALL_OW 251
34246: PPUSH
34247: LD_VAR 0 8
34251: PPUSH
34252: LD_INT 2
34254: PPUSH
34255: CALL_OW 273
34259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34260: LD_VAR 0 9
34264: PPUSH
34265: LD_VAR 0 10
34269: PPUSH
34270: CALL_OW 488
34274: PUSH
34275: LD_VAR 0 9
34279: PPUSH
34280: LD_VAR 0 10
34284: PPUSH
34285: CALL_OW 428
34289: NOT
34290: AND
34291: IFFALSE 34314
// begin ComMoveXY ( tmp , _x , _y ) ;
34293: LD_VAR 0 11
34297: PPUSH
34298: LD_VAR 0 9
34302: PPUSH
34303: LD_VAR 0 10
34307: PPUSH
34308: CALL_OW 111
// break ;
34312: GO 34316
// end ; end ;
34314: GO 34201
34316: POP
34317: POP
// end ;
34318: GO 33784
34320: POP
34321: POP
// end ;
34322: LD_VAR 0 6
34326: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34327: LD_INT 0
34329: PPUSH
34330: PPUSH
34331: PPUSH
34332: PPUSH
34333: PPUSH
34334: PPUSH
34335: PPUSH
34336: PPUSH
34337: PPUSH
34338: PPUSH
// result := false ;
34339: LD_ADDR_VAR 0 6
34343: PUSH
34344: LD_INT 0
34346: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34347: LD_VAR 0 1
34351: NOT
34352: PUSH
34353: LD_VAR 0 1
34357: PPUSH
34358: CALL_OW 266
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: IN
34373: NOT
34374: OR
34375: PUSH
34376: LD_VAR 0 2
34380: NOT
34381: OR
34382: PUSH
34383: LD_VAR 0 5
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 4
34402: PUSH
34403: LD_INT 5
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: IN
34414: NOT
34415: OR
34416: PUSH
34417: LD_VAR 0 3
34421: PPUSH
34422: LD_VAR 0 4
34426: PPUSH
34427: CALL_OW 488
34431: NOT
34432: OR
34433: IFFALSE 34437
// exit ;
34435: GO 35154
// pom := GetBase ( depot ) ;
34437: LD_ADDR_VAR 0 10
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 274
34451: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34452: LD_ADDR_VAR 0 11
34456: PUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: LD_VAR 0 1
34466: PPUSH
34467: CALL_OW 248
34471: PPUSH
34472: CALL_OW 450
34476: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34477: LD_VAR 0 10
34481: PPUSH
34482: LD_INT 1
34484: PPUSH
34485: CALL_OW 275
34489: PUSH
34490: LD_VAR 0 11
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: GREATEREQUAL
34499: PUSH
34500: LD_VAR 0 10
34504: PPUSH
34505: LD_INT 2
34507: PPUSH
34508: CALL_OW 275
34512: PUSH
34513: LD_VAR 0 11
34517: PUSH
34518: LD_INT 2
34520: ARRAY
34521: GREATEREQUAL
34522: AND
34523: PUSH
34524: LD_VAR 0 10
34528: PPUSH
34529: LD_INT 3
34531: PPUSH
34532: CALL_OW 275
34536: PUSH
34537: LD_VAR 0 11
34541: PUSH
34542: LD_INT 3
34544: ARRAY
34545: GREATEREQUAL
34546: AND
34547: NOT
34548: IFFALSE 34552
// exit ;
34550: GO 35154
// if GetBType ( depot ) = b_depot then
34552: LD_VAR 0 1
34556: PPUSH
34557: CALL_OW 266
34561: PUSH
34562: LD_INT 0
34564: EQUAL
34565: IFFALSE 34577
// dist := 28 else
34567: LD_ADDR_VAR 0 14
34571: PUSH
34572: LD_INT 28
34574: ST_TO_ADDR
34575: GO 34585
// dist := 36 ;
34577: LD_ADDR_VAR 0 14
34581: PUSH
34582: LD_INT 36
34584: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34585: LD_VAR 0 1
34589: PPUSH
34590: LD_VAR 0 3
34594: PPUSH
34595: LD_VAR 0 4
34599: PPUSH
34600: CALL_OW 297
34604: PUSH
34605: LD_VAR 0 14
34609: GREATER
34610: IFFALSE 34614
// exit ;
34612: GO 35154
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34614: LD_ADDR_VAR 0 12
34618: PUSH
34619: LD_VAR 0 2
34623: PPUSH
34624: LD_VAR 0 3
34628: PPUSH
34629: LD_VAR 0 4
34633: PPUSH
34634: LD_VAR 0 5
34638: PPUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: CALL_OW 248
34648: PPUSH
34649: LD_INT 0
34651: PPUSH
34652: CALL 35159 0 6
34656: ST_TO_ADDR
// if not hexes then
34657: LD_VAR 0 12
34661: NOT
34662: IFFALSE 34666
// exit ;
34664: GO 35154
// hex := GetHexInfo ( x , y ) ;
34666: LD_ADDR_VAR 0 15
34670: PUSH
34671: LD_VAR 0 3
34675: PPUSH
34676: LD_VAR 0 4
34680: PPUSH
34681: CALL_OW 546
34685: ST_TO_ADDR
// if hex [ 1 ] then
34686: LD_VAR 0 15
34690: PUSH
34691: LD_INT 1
34693: ARRAY
34694: IFFALSE 34698
// exit ;
34696: GO 35154
// height := hex [ 2 ] ;
34698: LD_ADDR_VAR 0 13
34702: PUSH
34703: LD_VAR 0 15
34707: PUSH
34708: LD_INT 2
34710: ARRAY
34711: ST_TO_ADDR
// for i = 1 to hexes do
34712: LD_ADDR_VAR 0 7
34716: PUSH
34717: DOUBLE
34718: LD_INT 1
34720: DEC
34721: ST_TO_ADDR
34722: LD_VAR 0 12
34726: PUSH
34727: FOR_TO
34728: IFFALSE 35058
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34730: LD_VAR 0 12
34734: PUSH
34735: LD_VAR 0 7
34739: ARRAY
34740: PUSH
34741: LD_INT 1
34743: ARRAY
34744: PPUSH
34745: LD_VAR 0 12
34749: PUSH
34750: LD_VAR 0 7
34754: ARRAY
34755: PUSH
34756: LD_INT 2
34758: ARRAY
34759: PPUSH
34760: CALL_OW 488
34764: NOT
34765: PUSH
34766: LD_VAR 0 12
34770: PUSH
34771: LD_VAR 0 7
34775: ARRAY
34776: PUSH
34777: LD_INT 1
34779: ARRAY
34780: PPUSH
34781: LD_VAR 0 12
34785: PUSH
34786: LD_VAR 0 7
34790: ARRAY
34791: PUSH
34792: LD_INT 2
34794: ARRAY
34795: PPUSH
34796: CALL_OW 428
34800: PUSH
34801: LD_INT 0
34803: GREATER
34804: OR
34805: PUSH
34806: LD_VAR 0 12
34810: PUSH
34811: LD_VAR 0 7
34815: ARRAY
34816: PUSH
34817: LD_INT 1
34819: ARRAY
34820: PPUSH
34821: LD_VAR 0 12
34825: PUSH
34826: LD_VAR 0 7
34830: ARRAY
34831: PUSH
34832: LD_INT 2
34834: ARRAY
34835: PPUSH
34836: CALL_OW 351
34840: OR
34841: IFFALSE 34847
// exit ;
34843: POP
34844: POP
34845: GO 35154
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34847: LD_ADDR_VAR 0 8
34851: PUSH
34852: LD_VAR 0 12
34856: PUSH
34857: LD_VAR 0 7
34861: ARRAY
34862: PUSH
34863: LD_INT 1
34865: ARRAY
34866: PPUSH
34867: LD_VAR 0 12
34871: PUSH
34872: LD_VAR 0 7
34876: ARRAY
34877: PUSH
34878: LD_INT 2
34880: ARRAY
34881: PPUSH
34882: CALL_OW 546
34886: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34887: LD_VAR 0 8
34891: PUSH
34892: LD_INT 1
34894: ARRAY
34895: PUSH
34896: LD_VAR 0 8
34900: PUSH
34901: LD_INT 2
34903: ARRAY
34904: PUSH
34905: LD_VAR 0 13
34909: PUSH
34910: LD_INT 2
34912: PLUS
34913: GREATER
34914: OR
34915: PUSH
34916: LD_VAR 0 8
34920: PUSH
34921: LD_INT 2
34923: ARRAY
34924: PUSH
34925: LD_VAR 0 13
34929: PUSH
34930: LD_INT 2
34932: MINUS
34933: LESS
34934: OR
34935: PUSH
34936: LD_VAR 0 8
34940: PUSH
34941: LD_INT 3
34943: ARRAY
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 8
34950: PUSH
34951: LD_INT 9
34953: PUSH
34954: LD_INT 10
34956: PUSH
34957: LD_INT 11
34959: PUSH
34960: LD_INT 12
34962: PUSH
34963: LD_INT 13
34965: PUSH
34966: LD_INT 16
34968: PUSH
34969: LD_INT 17
34971: PUSH
34972: LD_INT 18
34974: PUSH
34975: LD_INT 19
34977: PUSH
34978: LD_INT 20
34980: PUSH
34981: LD_INT 21
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: IN
34999: NOT
35000: OR
35001: PUSH
35002: LD_VAR 0 8
35006: PUSH
35007: LD_INT 5
35009: ARRAY
35010: NOT
35011: OR
35012: PUSH
35013: LD_VAR 0 8
35017: PUSH
35018: LD_INT 6
35020: ARRAY
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: LD_INT 7
35030: PUSH
35031: LD_INT 9
35033: PUSH
35034: LD_INT 10
35036: PUSH
35037: LD_INT 11
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: IN
35048: NOT
35049: OR
35050: IFFALSE 35056
// exit ;
35052: POP
35053: POP
35054: GO 35154
// end ;
35056: GO 34727
35058: POP
35059: POP
// side := GetSide ( depot ) ;
35060: LD_ADDR_VAR 0 9
35064: PUSH
35065: LD_VAR 0 1
35069: PPUSH
35070: CALL_OW 255
35074: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35075: LD_VAR 0 9
35079: PPUSH
35080: LD_VAR 0 3
35084: PPUSH
35085: LD_VAR 0 4
35089: PPUSH
35090: LD_INT 20
35092: PPUSH
35093: CALL 27808 0 4
35097: PUSH
35098: LD_INT 4
35100: ARRAY
35101: IFFALSE 35105
// exit ;
35103: GO 35154
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35105: LD_VAR 0 2
35109: PUSH
35110: LD_INT 29
35112: PUSH
35113: LD_INT 30
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: IN
35120: PUSH
35121: LD_VAR 0 3
35125: PPUSH
35126: LD_VAR 0 4
35130: PPUSH
35131: LD_VAR 0 9
35135: PPUSH
35136: CALL_OW 440
35140: NOT
35141: AND
35142: IFFALSE 35146
// exit ;
35144: GO 35154
// result := true ;
35146: LD_ADDR_VAR 0 6
35150: PUSH
35151: LD_INT 1
35153: ST_TO_ADDR
// end ;
35154: LD_VAR 0 6
35158: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35159: LD_INT 0
35161: PPUSH
35162: PPUSH
35163: PPUSH
35164: PPUSH
35165: PPUSH
35166: PPUSH
35167: PPUSH
35168: PPUSH
35169: PPUSH
35170: PPUSH
35171: PPUSH
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
// result = [ ] ;
35219: LD_ADDR_VAR 0 7
35223: PUSH
35224: EMPTY
35225: ST_TO_ADDR
// temp_list = [ ] ;
35226: LD_ADDR_VAR 0 9
35230: PUSH
35231: EMPTY
35232: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35233: LD_VAR 0 4
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: LD_INT 4
35252: PUSH
35253: LD_INT 5
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: IN
35264: NOT
35265: PUSH
35266: LD_VAR 0 1
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: IN
35281: PUSH
35282: LD_VAR 0 5
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: LD_INT 3
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: IN
35301: NOT
35302: AND
35303: OR
35304: IFFALSE 35308
// exit ;
35306: GO 53699
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35308: LD_VAR 0 1
35312: PUSH
35313: LD_INT 6
35315: PUSH
35316: LD_INT 7
35318: PUSH
35319: LD_INT 8
35321: PUSH
35322: LD_INT 13
35324: PUSH
35325: LD_INT 12
35327: PUSH
35328: LD_INT 15
35330: PUSH
35331: LD_INT 11
35333: PUSH
35334: LD_INT 14
35336: PUSH
35337: LD_INT 10
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: IN
35351: IFFALSE 35361
// btype = b_lab ;
35353: LD_ADDR_VAR 0 1
35357: PUSH
35358: LD_INT 6
35360: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35361: LD_VAR 0 6
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: IN
35380: NOT
35381: PUSH
35382: LD_VAR 0 1
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: LD_INT 6
35401: PUSH
35402: LD_INT 36
35404: PUSH
35405: LD_INT 4
35407: PUSH
35408: LD_INT 5
35410: PUSH
35411: LD_INT 31
35413: PUSH
35414: LD_INT 32
35416: PUSH
35417: LD_INT 33
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: IN
35433: NOT
35434: PUSH
35435: LD_VAR 0 6
35439: PUSH
35440: LD_INT 1
35442: EQUAL
35443: AND
35444: OR
35445: PUSH
35446: LD_VAR 0 1
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 3
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: IN
35461: NOT
35462: PUSH
35463: LD_VAR 0 6
35467: PUSH
35468: LD_INT 2
35470: EQUAL
35471: AND
35472: OR
35473: IFFALSE 35483
// mode = 0 ;
35475: LD_ADDR_VAR 0 6
35479: PUSH
35480: LD_INT 0
35482: ST_TO_ADDR
// case mode of 0 :
35483: LD_VAR 0 6
35487: PUSH
35488: LD_INT 0
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35496
35494: GO 46949
35496: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35497: LD_ADDR_VAR 0 11
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 3
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 3
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 2
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35690: LD_ADDR_VAR 0 12
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: NEG
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 3
35847: NEG
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 3
35858: NEG
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35886: LD_ADDR_VAR 0 13
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 2
36009: NEG
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: LD_INT 2
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 3
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 3
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: LD_INT 3
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36085: LD_ADDR_VAR 0 14
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: LD_INT 3
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 3
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36281: LD_ADDR_VAR 0 15
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36474: LD_ADDR_VAR 0 16
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 2
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 3
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: LD_INT 3
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 3
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36667: LD_ADDR_VAR 0 17
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36897: LD_ADDR_VAR 0 18
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37127: LD_ADDR_VAR 0 19
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37357: LD_ADDR_VAR 0 20
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37587: LD_ADDR_VAR 0 21
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: NEG
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37817: LD_ADDR_VAR 0 22
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: NEG
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: NEG
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38047: LD_ADDR_VAR 0 23
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 3
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: NEG
38271: PUSH
38272: LD_INT 3
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: LD_INT 1
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38327: LD_ADDR_VAR 0 24
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38603: LD_ADDR_VAR 0 25
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38877: LD_ADDR_VAR 0 26
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 3
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 3
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39153: LD_ADDR_VAR 0 27
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 3
39386: NEG
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 3
39398: NEG
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39433: LD_ADDR_VAR 0 28
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 3
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39715: LD_ADDR_VAR 0 29
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 0
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: LD_INT 3
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 3
39959: NEG
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39994: LD_ADDR_VAR 0 30
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 3
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 3
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 3
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40272: LD_ADDR_VAR 0 31
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: LD_INT 3
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 3
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40550: LD_ADDR_VAR 0 32
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40828: LD_ADDR_VAR 0 33
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: NEG
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 3
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41107: LD_ADDR_VAR 0 34
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 3
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: NEG
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41387: LD_ADDR_VAR 0 35
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41499: LD_ADDR_VAR 0 36
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 0
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41611: LD_ADDR_VAR 0 37
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41723: LD_ADDR_VAR 0 38
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41835: LD_ADDR_VAR 0 39
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 2
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41947: LD_ADDR_VAR 0 40
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42059: LD_ADDR_VAR 0 41
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 2
42249: NEG
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: LD_INT 2
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 3
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 3
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 3
42333: NEG
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: LD_INT 3
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42409: LD_ADDR_VAR 0 42
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: LD_INT 3
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 3
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 3
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: LD_INT 3
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42759: LD_ADDR_VAR 0 43
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: NEG
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 3
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 3
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 3
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 3
43055: NEG
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43107: LD_ADDR_VAR 0 44
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 1
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: NEG
43286: PUSH
43287: LD_INT 2
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 3
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 3
43416: NEG
43417: PUSH
43418: LD_INT 3
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43457: LD_ADDR_VAR 0 45
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 3
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 3
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 3
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 3
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 3
43766: NEG
43767: PUSH
43768: LD_INT 3
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43807: LD_ADDR_VAR 0 46
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 2
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 3
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 3
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 3
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 3
44103: NEG
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 3
44114: NEG
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44155: LD_ADDR_VAR 0 47
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44306: LD_ADDR_VAR 0 48
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44453: LD_ADDR_VAR 0 49
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 2
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44597: LD_ADDR_VAR 0 50
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44741: LD_ADDR_VAR 0 51
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44888: LD_ADDR_VAR 0 52
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45039: LD_ADDR_VAR 0 53
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45269: LD_ADDR_VAR 0 54
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45499: LD_ADDR_VAR 0 55
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45729: LD_ADDR_VAR 0 56
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45959: LD_ADDR_VAR 0 57
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46189: LD_ADDR_VAR 0 58
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46419: LD_ADDR_VAR 0 59
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46507: LD_ADDR_VAR 0 60
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46595: LD_ADDR_VAR 0 61
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46683: LD_ADDR_VAR 0 62
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46771: LD_ADDR_VAR 0 63
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46859: LD_ADDR_VAR 0 64
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: ST_TO_ADDR
// end ; 1 :
46947: GO 52844
46949: LD_INT 1
46951: DOUBLE
46952: EQUAL
46953: IFTRUE 46957
46955: GO 49580
46957: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46958: LD_ADDR_VAR 0 11
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: LD_INT 3
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47002: LD_ADDR_VAR 0 12
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 3
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: LIST
47042: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47043: LD_ADDR_VAR 0 13
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47083: LD_ADDR_VAR 0 14
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47124: LD_ADDR_VAR 0 15
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47168: LD_ADDR_VAR 0 16
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 3
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47214: LD_ADDR_VAR 0 17
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47258: LD_ADDR_VAR 0 18
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47299: LD_ADDR_VAR 0 19
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47339: LD_ADDR_VAR 0 20
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47380: LD_ADDR_VAR 0 21
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47424: LD_ADDR_VAR 0 22
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: LD_INT 3
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47470: LD_ADDR_VAR 0 23
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 4
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47514: LD_ADDR_VAR 0 24
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47555: LD_ADDR_VAR 0 25
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: LD_INT 4
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47595: LD_ADDR_VAR 0 26
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47636: LD_ADDR_VAR 0 27
47640: PUSH
47641: LD_INT 3
47643: NEG
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 3
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 4
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47680: LD_ADDR_VAR 0 28
47684: PUSH
47685: LD_INT 3
47687: NEG
47688: PUSH
47689: LD_INT 3
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: NEG
47700: PUSH
47701: LD_INT 4
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 4
47711: NEG
47712: PUSH
47713: LD_INT 3
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47726: LD_ADDR_VAR 0 29
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 2
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 4
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 4
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: LD_INT 5
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 5
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 4
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 6
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 6
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 5
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47881: LD_ADDR_VAR 0 30
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 4
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 4
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 4
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 5
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 5
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 5
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 6
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 6
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48024: LD_ADDR_VAR 0 31
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 3
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 4
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 5
48091: PUSH
48092: LD_INT 4
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 5
48101: PUSH
48102: LD_INT 5
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: PUSH
48112: LD_INT 5
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 6
48121: PUSH
48122: LD_INT 5
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 6
48131: PUSH
48132: LD_INT 6
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 5
48141: PUSH
48142: LD_INT 6
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48163: LD_ADDR_VAR 0 32
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 3
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 4
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 5
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 5
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 4
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 6
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 6
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 5
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48306: LD_ADDR_VAR 0 33
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 4
48358: NEG
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 4
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 4
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 5
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 5
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 5
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 6
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 6
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48461: LD_ADDR_VAR 0 34
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: LD_INT 3
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: LD_INT 4
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: NEG
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 4
48528: NEG
48529: PUSH
48530: LD_INT 4
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 4
48540: NEG
48541: PUSH
48542: LD_INT 5
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 5
48552: NEG
48553: PUSH
48554: LD_INT 4
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 5
48564: NEG
48565: PUSH
48566: LD_INT 5
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 5
48576: NEG
48577: PUSH
48578: LD_INT 6
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 6
48588: NEG
48589: PUSH
48590: LD_INT 5
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 6
48600: NEG
48601: PUSH
48602: LD_INT 6
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48624: LD_ADDR_VAR 0 41
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 3
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48668: LD_ADDR_VAR 0 42
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48709: LD_ADDR_VAR 0 43
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 3
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48749: LD_ADDR_VAR 0 44
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 3
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48790: LD_ADDR_VAR 0 45
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48834: LD_ADDR_VAR 0 46
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 3
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48880: LD_ADDR_VAR 0 47
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: LD_INT 3
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 3
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48913: LD_ADDR_VAR 0 48
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48944: LD_ADDR_VAR 0 49
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48973: LD_ADDR_VAR 0 50
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: LD_INT 3
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 3
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49002: LD_ADDR_VAR 0 51
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 2
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49033: LD_ADDR_VAR 0 52
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 3
49052: NEG
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49066: LD_ADDR_VAR 0 53
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: LIST
49109: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49110: LD_ADDR_VAR 0 54
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49151: LD_ADDR_VAR 0 55
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: LD_INT 2
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: LD_INT 3
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 3
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49191: LD_ADDR_VAR 0 56
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 3
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49232: LD_ADDR_VAR 0 57
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: LIST
49275: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49276: LD_ADDR_VAR 0 58
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49322: LD_ADDR_VAR 0 59
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: LIST
49365: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49366: LD_ADDR_VAR 0 60
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49407: LD_ADDR_VAR 0 61
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 2
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: LIST
49446: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49447: LD_ADDR_VAR 0 62
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49488: LD_ADDR_VAR 0 63
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49532: LD_ADDR_VAR 0 64
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// end ; 2 :
49578: GO 52844
49580: LD_INT 2
49582: DOUBLE
49583: EQUAL
49584: IFTRUE 49588
49586: GO 52843
49588: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49589: LD_ADDR_VAR 0 29
49593: PUSH
49594: LD_INT 4
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 4
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 5
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 5
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 4
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 3
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 5
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 4
49719: PUSH
49720: LD_INT 4
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 4
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 4
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 4
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 3
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 5
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 5
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 4
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 5
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 3
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 4
49928: NEG
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 4
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 4
49951: NEG
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: NEG
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: NEG
49975: PUSH
49976: LD_INT 4
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: NEG
49987: PUSH
49988: LD_INT 5
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: NEG
50011: PUSH
50012: LD_INT 3
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 4
50022: NEG
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 5
50034: NEG
50035: PUSH
50036: LD_INT 4
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 5
50046: NEG
50047: PUSH
50048: LD_INT 5
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 5
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 5
50070: NEG
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50127: LD_ADDR_VAR 0 30
50131: PUSH
50132: LD_INT 4
50134: PUSH
50135: LD_INT 4
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 5
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 5
50164: PUSH
50165: LD_INT 5
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 4
50174: PUSH
50175: LD_INT 5
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 3
50184: PUSH
50185: LD_INT 4
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 5
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 5
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 4
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: LD_INT 4
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 4
50317: NEG
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 4
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: NEG
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 4
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 5
50373: NEG
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 5
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 5
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 3
50419: NEG
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 3
50467: NEG
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 4
50479: NEG
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 4
50491: NEG
50492: PUSH
50493: LD_INT 4
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 4
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 4
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 4
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 5
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 4
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 4
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 5
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 5
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50674: LD_ADDR_VAR 0 31
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 4
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 5
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: LD_INT 5
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 4
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 5
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 4
50830: NEG
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 4
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: NEG
50877: PUSH
50878: LD_INT 4
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 4
50888: NEG
50889: PUSH
50890: LD_INT 5
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 4
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 4
50924: NEG
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 5
50936: NEG
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 5
50948: NEG
50949: PUSH
50950: LD_INT 5
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: LD_INT 5
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 5
50972: NEG
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: LD_INT 4
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 5
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 5
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51224: LD_ADDR_VAR 0 32
51228: PUSH
51229: LD_INT 4
51231: NEG
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 4
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 4
51276: NEG
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 5
51287: NEG
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 5
51298: NEG
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 5
51310: NEG
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 3
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: NEG
51346: PUSH
51347: LD_INT 4
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: NEG
51382: PUSH
51383: LD_INT 2
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 4
51393: NEG
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: LD_INT 4
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: LD_INT 4
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 4
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 5
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: LD_INT 4
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: LD_INT 4
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 5
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 5
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 4
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 4
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 4
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 5
51656: PUSH
51657: LD_INT 4
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 5
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: LD_INT 5
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 4
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 5
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 5
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51771: LD_ADDR_VAR 0 33
51775: PUSH
51776: LD_INT 4
51778: NEG
51779: PUSH
51780: LD_INT 4
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 4
51790: NEG
51791: PUSH
51792: LD_INT 5
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 4
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: NEG
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 4
51826: NEG
51827: PUSH
51828: LD_INT 3
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: LD_INT 4
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 5
51850: NEG
51851: PUSH
51852: LD_INT 5
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: LD_INT 5
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 5
51874: NEG
51875: PUSH
51876: LD_INT 3
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 3
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 4
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 4
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 4
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: LD_INT 1
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 5
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 5
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 4
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 5
52071: PUSH
52072: LD_INT 2
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 4
52111: PUSH
52112: LD_INT 4
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 4
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 4
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 4
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: LD_INT 4
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 5
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 5
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 4
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: LD_INT 5
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52309: LD_ADDR_VAR 0 34
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 4
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 5
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 4
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: LD_INT 4
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 5
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: LD_INT 5
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 3
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 4
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 4
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 4
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 4
52511: PUSH
52512: LD_INT 4
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 5
52531: PUSH
52532: LD_INT 4
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 5
52541: PUSH
52542: LD_INT 5
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 4
52551: PUSH
52552: LD_INT 5
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 5
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 4
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 4
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 4
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 4
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 5
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 5
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 5
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// end ; end ;
52841: GO 52844
52843: POP
// case btype of b_depot , b_warehouse :
52844: LD_VAR 0 1
52848: PUSH
52849: LD_INT 0
52851: DOUBLE
52852: EQUAL
52853: IFTRUE 52863
52855: LD_INT 1
52857: DOUBLE
52858: EQUAL
52859: IFTRUE 52863
52861: GO 53064
52863: POP
// case nation of nation_american :
52864: LD_VAR 0 5
52868: PUSH
52869: LD_INT 1
52871: DOUBLE
52872: EQUAL
52873: IFTRUE 52877
52875: GO 52933
52877: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52878: LD_ADDR_VAR 0 9
52882: PUSH
52883: LD_VAR 0 11
52887: PUSH
52888: LD_VAR 0 12
52892: PUSH
52893: LD_VAR 0 13
52897: PUSH
52898: LD_VAR 0 14
52902: PUSH
52903: LD_VAR 0 15
52907: PUSH
52908: LD_VAR 0 16
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: PUSH
52921: LD_VAR 0 4
52925: PUSH
52926: LD_INT 1
52928: PLUS
52929: ARRAY
52930: ST_TO_ADDR
52931: GO 53062
52933: LD_INT 2
52935: DOUBLE
52936: EQUAL
52937: IFTRUE 52941
52939: GO 52997
52941: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52942: LD_ADDR_VAR 0 9
52946: PUSH
52947: LD_VAR 0 17
52951: PUSH
52952: LD_VAR 0 18
52956: PUSH
52957: LD_VAR 0 19
52961: PUSH
52962: LD_VAR 0 20
52966: PUSH
52967: LD_VAR 0 21
52971: PUSH
52972: LD_VAR 0 22
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: PUSH
52985: LD_VAR 0 4
52989: PUSH
52990: LD_INT 1
52992: PLUS
52993: ARRAY
52994: ST_TO_ADDR
52995: GO 53062
52997: LD_INT 3
52999: DOUBLE
53000: EQUAL
53001: IFTRUE 53005
53003: GO 53061
53005: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53006: LD_ADDR_VAR 0 9
53010: PUSH
53011: LD_VAR 0 23
53015: PUSH
53016: LD_VAR 0 24
53020: PUSH
53021: LD_VAR 0 25
53025: PUSH
53026: LD_VAR 0 26
53030: PUSH
53031: LD_VAR 0 27
53035: PUSH
53036: LD_VAR 0 28
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: PUSH
53049: LD_VAR 0 4
53053: PUSH
53054: LD_INT 1
53056: PLUS
53057: ARRAY
53058: ST_TO_ADDR
53059: GO 53062
53061: POP
53062: GO 53617
53064: LD_INT 2
53066: DOUBLE
53067: EQUAL
53068: IFTRUE 53078
53070: LD_INT 3
53072: DOUBLE
53073: EQUAL
53074: IFTRUE 53078
53076: GO 53134
53078: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53079: LD_ADDR_VAR 0 9
53083: PUSH
53084: LD_VAR 0 29
53088: PUSH
53089: LD_VAR 0 30
53093: PUSH
53094: LD_VAR 0 31
53098: PUSH
53099: LD_VAR 0 32
53103: PUSH
53104: LD_VAR 0 33
53108: PUSH
53109: LD_VAR 0 34
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: PUSH
53122: LD_VAR 0 4
53126: PUSH
53127: LD_INT 1
53129: PLUS
53130: ARRAY
53131: ST_TO_ADDR
53132: GO 53617
53134: LD_INT 16
53136: DOUBLE
53137: EQUAL
53138: IFTRUE 53196
53140: LD_INT 17
53142: DOUBLE
53143: EQUAL
53144: IFTRUE 53196
53146: LD_INT 18
53148: DOUBLE
53149: EQUAL
53150: IFTRUE 53196
53152: LD_INT 19
53154: DOUBLE
53155: EQUAL
53156: IFTRUE 53196
53158: LD_INT 22
53160: DOUBLE
53161: EQUAL
53162: IFTRUE 53196
53164: LD_INT 20
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53196
53170: LD_INT 21
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53196
53176: LD_INT 23
53178: DOUBLE
53179: EQUAL
53180: IFTRUE 53196
53182: LD_INT 24
53184: DOUBLE
53185: EQUAL
53186: IFTRUE 53196
53188: LD_INT 25
53190: DOUBLE
53191: EQUAL
53192: IFTRUE 53196
53194: GO 53252
53196: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53197: LD_ADDR_VAR 0 9
53201: PUSH
53202: LD_VAR 0 35
53206: PUSH
53207: LD_VAR 0 36
53211: PUSH
53212: LD_VAR 0 37
53216: PUSH
53217: LD_VAR 0 38
53221: PUSH
53222: LD_VAR 0 39
53226: PUSH
53227: LD_VAR 0 40
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: PUSH
53240: LD_VAR 0 4
53244: PUSH
53245: LD_INT 1
53247: PLUS
53248: ARRAY
53249: ST_TO_ADDR
53250: GO 53617
53252: LD_INT 6
53254: DOUBLE
53255: EQUAL
53256: IFTRUE 53308
53258: LD_INT 7
53260: DOUBLE
53261: EQUAL
53262: IFTRUE 53308
53264: LD_INT 8
53266: DOUBLE
53267: EQUAL
53268: IFTRUE 53308
53270: LD_INT 13
53272: DOUBLE
53273: EQUAL
53274: IFTRUE 53308
53276: LD_INT 12
53278: DOUBLE
53279: EQUAL
53280: IFTRUE 53308
53282: LD_INT 15
53284: DOUBLE
53285: EQUAL
53286: IFTRUE 53308
53288: LD_INT 11
53290: DOUBLE
53291: EQUAL
53292: IFTRUE 53308
53294: LD_INT 14
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53308
53300: LD_INT 10
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53308
53306: GO 53364
53308: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53309: LD_ADDR_VAR 0 9
53313: PUSH
53314: LD_VAR 0 41
53318: PUSH
53319: LD_VAR 0 42
53323: PUSH
53324: LD_VAR 0 43
53328: PUSH
53329: LD_VAR 0 44
53333: PUSH
53334: LD_VAR 0 45
53338: PUSH
53339: LD_VAR 0 46
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: PUSH
53352: LD_VAR 0 4
53356: PUSH
53357: LD_INT 1
53359: PLUS
53360: ARRAY
53361: ST_TO_ADDR
53362: GO 53617
53364: LD_INT 36
53366: DOUBLE
53367: EQUAL
53368: IFTRUE 53372
53370: GO 53428
53372: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53373: LD_ADDR_VAR 0 9
53377: PUSH
53378: LD_VAR 0 47
53382: PUSH
53383: LD_VAR 0 48
53387: PUSH
53388: LD_VAR 0 49
53392: PUSH
53393: LD_VAR 0 50
53397: PUSH
53398: LD_VAR 0 51
53402: PUSH
53403: LD_VAR 0 52
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: PUSH
53416: LD_VAR 0 4
53420: PUSH
53421: LD_INT 1
53423: PLUS
53424: ARRAY
53425: ST_TO_ADDR
53426: GO 53617
53428: LD_INT 4
53430: DOUBLE
53431: EQUAL
53432: IFTRUE 53454
53434: LD_INT 5
53436: DOUBLE
53437: EQUAL
53438: IFTRUE 53454
53440: LD_INT 34
53442: DOUBLE
53443: EQUAL
53444: IFTRUE 53454
53446: LD_INT 37
53448: DOUBLE
53449: EQUAL
53450: IFTRUE 53454
53452: GO 53510
53454: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53455: LD_ADDR_VAR 0 9
53459: PUSH
53460: LD_VAR 0 53
53464: PUSH
53465: LD_VAR 0 54
53469: PUSH
53470: LD_VAR 0 55
53474: PUSH
53475: LD_VAR 0 56
53479: PUSH
53480: LD_VAR 0 57
53484: PUSH
53485: LD_VAR 0 58
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: PUSH
53498: LD_VAR 0 4
53502: PUSH
53503: LD_INT 1
53505: PLUS
53506: ARRAY
53507: ST_TO_ADDR
53508: GO 53617
53510: LD_INT 31
53512: DOUBLE
53513: EQUAL
53514: IFTRUE 53560
53516: LD_INT 32
53518: DOUBLE
53519: EQUAL
53520: IFTRUE 53560
53522: LD_INT 33
53524: DOUBLE
53525: EQUAL
53526: IFTRUE 53560
53528: LD_INT 27
53530: DOUBLE
53531: EQUAL
53532: IFTRUE 53560
53534: LD_INT 26
53536: DOUBLE
53537: EQUAL
53538: IFTRUE 53560
53540: LD_INT 28
53542: DOUBLE
53543: EQUAL
53544: IFTRUE 53560
53546: LD_INT 29
53548: DOUBLE
53549: EQUAL
53550: IFTRUE 53560
53552: LD_INT 30
53554: DOUBLE
53555: EQUAL
53556: IFTRUE 53560
53558: GO 53616
53560: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53561: LD_ADDR_VAR 0 9
53565: PUSH
53566: LD_VAR 0 59
53570: PUSH
53571: LD_VAR 0 60
53575: PUSH
53576: LD_VAR 0 61
53580: PUSH
53581: LD_VAR 0 62
53585: PUSH
53586: LD_VAR 0 63
53590: PUSH
53591: LD_VAR 0 64
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: PUSH
53604: LD_VAR 0 4
53608: PUSH
53609: LD_INT 1
53611: PLUS
53612: ARRAY
53613: ST_TO_ADDR
53614: GO 53617
53616: POP
// temp_list2 = [ ] ;
53617: LD_ADDR_VAR 0 10
53621: PUSH
53622: EMPTY
53623: ST_TO_ADDR
// for i in temp_list do
53624: LD_ADDR_VAR 0 8
53628: PUSH
53629: LD_VAR 0 9
53633: PUSH
53634: FOR_IN
53635: IFFALSE 53687
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53637: LD_ADDR_VAR 0 10
53641: PUSH
53642: LD_VAR 0 10
53646: PUSH
53647: LD_VAR 0 8
53651: PUSH
53652: LD_INT 1
53654: ARRAY
53655: PUSH
53656: LD_VAR 0 2
53660: PLUS
53661: PUSH
53662: LD_VAR 0 8
53666: PUSH
53667: LD_INT 2
53669: ARRAY
53670: PUSH
53671: LD_VAR 0 3
53675: PLUS
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: ADD
53684: ST_TO_ADDR
53685: GO 53634
53687: POP
53688: POP
// result = temp_list2 ;
53689: LD_ADDR_VAR 0 7
53693: PUSH
53694: LD_VAR 0 10
53698: ST_TO_ADDR
// end ;
53699: LD_VAR 0 7
53703: RET
// export function EnemyInRange ( unit , dist ) ; begin
53704: LD_INT 0
53706: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53707: LD_ADDR_VAR 0 3
53711: PUSH
53712: LD_VAR 0 1
53716: PPUSH
53717: CALL_OW 255
53721: PPUSH
53722: LD_VAR 0 1
53726: PPUSH
53727: CALL_OW 250
53731: PPUSH
53732: LD_VAR 0 1
53736: PPUSH
53737: CALL_OW 251
53741: PPUSH
53742: LD_VAR 0 2
53746: PPUSH
53747: CALL 27808 0 4
53751: PUSH
53752: LD_INT 4
53754: ARRAY
53755: ST_TO_ADDR
// end ;
53756: LD_VAR 0 3
53760: RET
// export function PlayerSeeMe ( unit ) ; begin
53761: LD_INT 0
53763: PPUSH
// result := See ( your_side , unit ) ;
53764: LD_ADDR_VAR 0 2
53768: PUSH
53769: LD_OWVAR 2
53773: PPUSH
53774: LD_VAR 0 1
53778: PPUSH
53779: CALL_OW 292
53783: ST_TO_ADDR
// end ;
53784: LD_VAR 0 2
53788: RET
// export function ReverseDir ( unit ) ; begin
53789: LD_INT 0
53791: PPUSH
// if not unit then
53792: LD_VAR 0 1
53796: NOT
53797: IFFALSE 53801
// exit ;
53799: GO 53824
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53801: LD_ADDR_VAR 0 2
53805: PUSH
53806: LD_VAR 0 1
53810: PPUSH
53811: CALL_OW 254
53815: PUSH
53816: LD_INT 3
53818: PLUS
53819: PUSH
53820: LD_INT 6
53822: MOD
53823: ST_TO_ADDR
// end ;
53824: LD_VAR 0 2
53828: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53829: LD_INT 0
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
53835: PPUSH
// if not hexes then
53836: LD_VAR 0 2
53840: NOT
53841: IFFALSE 53845
// exit ;
53843: GO 53993
// dist := 9999 ;
53845: LD_ADDR_VAR 0 5
53849: PUSH
53850: LD_INT 9999
53852: ST_TO_ADDR
// for i = 1 to hexes do
53853: LD_ADDR_VAR 0 4
53857: PUSH
53858: DOUBLE
53859: LD_INT 1
53861: DEC
53862: ST_TO_ADDR
53863: LD_VAR 0 2
53867: PUSH
53868: FOR_TO
53869: IFFALSE 53981
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53871: LD_VAR 0 1
53875: PPUSH
53876: LD_VAR 0 2
53880: PUSH
53881: LD_VAR 0 4
53885: ARRAY
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PPUSH
53891: LD_VAR 0 2
53895: PUSH
53896: LD_VAR 0 4
53900: ARRAY
53901: PUSH
53902: LD_INT 2
53904: ARRAY
53905: PPUSH
53906: CALL_OW 297
53910: PUSH
53911: LD_VAR 0 5
53915: LESS
53916: IFFALSE 53979
// begin hex := hexes [ i ] ;
53918: LD_ADDR_VAR 0 7
53922: PUSH
53923: LD_VAR 0 2
53927: PUSH
53928: LD_VAR 0 4
53932: ARRAY
53933: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53934: LD_ADDR_VAR 0 5
53938: PUSH
53939: LD_VAR 0 1
53943: PPUSH
53944: LD_VAR 0 2
53948: PUSH
53949: LD_VAR 0 4
53953: ARRAY
53954: PUSH
53955: LD_INT 1
53957: ARRAY
53958: PPUSH
53959: LD_VAR 0 2
53963: PUSH
53964: LD_VAR 0 4
53968: ARRAY
53969: PUSH
53970: LD_INT 2
53972: ARRAY
53973: PPUSH
53974: CALL_OW 297
53978: ST_TO_ADDR
// end ; end ;
53979: GO 53868
53981: POP
53982: POP
// result := hex ;
53983: LD_ADDR_VAR 0 3
53987: PUSH
53988: LD_VAR 0 7
53992: ST_TO_ADDR
// end ;
53993: LD_VAR 0 3
53997: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53998: LD_INT 0
54000: PPUSH
54001: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54002: LD_VAR 0 1
54006: NOT
54007: PUSH
54008: LD_VAR 0 1
54012: PUSH
54013: LD_INT 21
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 23
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PPUSH
54037: CALL_OW 69
54041: IN
54042: NOT
54043: OR
54044: IFFALSE 54048
// exit ;
54046: GO 54095
// for i = 1 to 3 do
54048: LD_ADDR_VAR 0 3
54052: PUSH
54053: DOUBLE
54054: LD_INT 1
54056: DEC
54057: ST_TO_ADDR
54058: LD_INT 3
54060: PUSH
54061: FOR_TO
54062: IFFALSE 54093
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54064: LD_VAR 0 1
54068: PPUSH
54069: CALL_OW 250
54073: PPUSH
54074: LD_VAR 0 1
54078: PPUSH
54079: CALL_OW 251
54083: PPUSH
54084: LD_INT 1
54086: PPUSH
54087: CALL_OW 453
54091: GO 54061
54093: POP
54094: POP
// end ;
54095: LD_VAR 0 2
54099: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54100: LD_INT 0
54102: PPUSH
54103: PPUSH
54104: PPUSH
54105: PPUSH
54106: PPUSH
54107: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54108: LD_VAR 0 1
54112: NOT
54113: PUSH
54114: LD_VAR 0 2
54118: NOT
54119: OR
54120: PUSH
54121: LD_VAR 0 1
54125: PPUSH
54126: CALL_OW 314
54130: OR
54131: IFFALSE 54135
// exit ;
54133: GO 54576
// x := GetX ( enemy_unit ) ;
54135: LD_ADDR_VAR 0 7
54139: PUSH
54140: LD_VAR 0 2
54144: PPUSH
54145: CALL_OW 250
54149: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54150: LD_ADDR_VAR 0 8
54154: PUSH
54155: LD_VAR 0 2
54159: PPUSH
54160: CALL_OW 251
54164: ST_TO_ADDR
// if not x or not y then
54165: LD_VAR 0 7
54169: NOT
54170: PUSH
54171: LD_VAR 0 8
54175: NOT
54176: OR
54177: IFFALSE 54181
// exit ;
54179: GO 54576
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54181: LD_ADDR_VAR 0 6
54185: PUSH
54186: LD_VAR 0 7
54190: PPUSH
54191: LD_INT 0
54193: PPUSH
54194: LD_INT 4
54196: PPUSH
54197: CALL_OW 272
54201: PUSH
54202: LD_VAR 0 8
54206: PPUSH
54207: LD_INT 0
54209: PPUSH
54210: LD_INT 4
54212: PPUSH
54213: CALL_OW 273
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_VAR 0 7
54226: PPUSH
54227: LD_INT 1
54229: PPUSH
54230: LD_INT 4
54232: PPUSH
54233: CALL_OW 272
54237: PUSH
54238: LD_VAR 0 8
54242: PPUSH
54243: LD_INT 1
54245: PPUSH
54246: LD_INT 4
54248: PPUSH
54249: CALL_OW 273
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_VAR 0 7
54262: PPUSH
54263: LD_INT 2
54265: PPUSH
54266: LD_INT 4
54268: PPUSH
54269: CALL_OW 272
54273: PUSH
54274: LD_VAR 0 8
54278: PPUSH
54279: LD_INT 2
54281: PPUSH
54282: LD_INT 4
54284: PPUSH
54285: CALL_OW 273
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_VAR 0 7
54298: PPUSH
54299: LD_INT 3
54301: PPUSH
54302: LD_INT 4
54304: PPUSH
54305: CALL_OW 272
54309: PUSH
54310: LD_VAR 0 8
54314: PPUSH
54315: LD_INT 3
54317: PPUSH
54318: LD_INT 4
54320: PPUSH
54321: CALL_OW 273
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_VAR 0 7
54334: PPUSH
54335: LD_INT 4
54337: PPUSH
54338: LD_INT 4
54340: PPUSH
54341: CALL_OW 272
54345: PUSH
54346: LD_VAR 0 8
54350: PPUSH
54351: LD_INT 4
54353: PPUSH
54354: LD_INT 4
54356: PPUSH
54357: CALL_OW 273
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_VAR 0 7
54370: PPUSH
54371: LD_INT 5
54373: PPUSH
54374: LD_INT 4
54376: PPUSH
54377: CALL_OW 272
54381: PUSH
54382: LD_VAR 0 8
54386: PPUSH
54387: LD_INT 5
54389: PPUSH
54390: LD_INT 4
54392: PPUSH
54393: CALL_OW 273
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// for i = tmp downto 1 do
54410: LD_ADDR_VAR 0 4
54414: PUSH
54415: DOUBLE
54416: LD_VAR 0 6
54420: INC
54421: ST_TO_ADDR
54422: LD_INT 1
54424: PUSH
54425: FOR_DOWNTO
54426: IFFALSE 54527
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54428: LD_VAR 0 6
54432: PUSH
54433: LD_VAR 0 4
54437: ARRAY
54438: PUSH
54439: LD_INT 1
54441: ARRAY
54442: PPUSH
54443: LD_VAR 0 6
54447: PUSH
54448: LD_VAR 0 4
54452: ARRAY
54453: PUSH
54454: LD_INT 2
54456: ARRAY
54457: PPUSH
54458: CALL_OW 488
54462: NOT
54463: PUSH
54464: LD_VAR 0 6
54468: PUSH
54469: LD_VAR 0 4
54473: ARRAY
54474: PUSH
54475: LD_INT 1
54477: ARRAY
54478: PPUSH
54479: LD_VAR 0 6
54483: PUSH
54484: LD_VAR 0 4
54488: ARRAY
54489: PUSH
54490: LD_INT 2
54492: ARRAY
54493: PPUSH
54494: CALL_OW 428
54498: PUSH
54499: LD_INT 0
54501: NONEQUAL
54502: OR
54503: IFFALSE 54525
// tmp := Delete ( tmp , i ) ;
54505: LD_ADDR_VAR 0 6
54509: PUSH
54510: LD_VAR 0 6
54514: PPUSH
54515: LD_VAR 0 4
54519: PPUSH
54520: CALL_OW 3
54524: ST_TO_ADDR
54525: GO 54425
54527: POP
54528: POP
// j := GetClosestHex ( unit , tmp ) ;
54529: LD_ADDR_VAR 0 5
54533: PUSH
54534: LD_VAR 0 1
54538: PPUSH
54539: LD_VAR 0 6
54543: PPUSH
54544: CALL 53829 0 2
54548: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54549: LD_VAR 0 1
54553: PPUSH
54554: LD_VAR 0 5
54558: PUSH
54559: LD_INT 1
54561: ARRAY
54562: PPUSH
54563: LD_VAR 0 5
54567: PUSH
54568: LD_INT 2
54570: ARRAY
54571: PPUSH
54572: CALL_OW 111
// end ;
54576: LD_VAR 0 3
54580: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54581: LD_INT 0
54583: PPUSH
54584: PPUSH
54585: PPUSH
// uc_side = 0 ;
54586: LD_ADDR_OWVAR 20
54590: PUSH
54591: LD_INT 0
54593: ST_TO_ADDR
// uc_nation = 0 ;
54594: LD_ADDR_OWVAR 21
54598: PUSH
54599: LD_INT 0
54601: ST_TO_ADDR
// InitHc_All ( ) ;
54602: CALL_OW 584
// InitVc ;
54606: CALL_OW 20
// if mastodonts then
54610: LD_VAR 0 6
54614: IFFALSE 54681
// for i = 1 to mastodonts do
54616: LD_ADDR_VAR 0 11
54620: PUSH
54621: DOUBLE
54622: LD_INT 1
54624: DEC
54625: ST_TO_ADDR
54626: LD_VAR 0 6
54630: PUSH
54631: FOR_TO
54632: IFFALSE 54679
// begin vc_chassis := 31 ;
54634: LD_ADDR_OWVAR 37
54638: PUSH
54639: LD_INT 31
54641: ST_TO_ADDR
// vc_control := control_rider ;
54642: LD_ADDR_OWVAR 38
54646: PUSH
54647: LD_INT 4
54649: ST_TO_ADDR
// animal := CreateVehicle ;
54650: LD_ADDR_VAR 0 12
54654: PUSH
54655: CALL_OW 45
54659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54660: LD_VAR 0 12
54664: PPUSH
54665: LD_VAR 0 8
54669: PPUSH
54670: LD_INT 0
54672: PPUSH
54673: CALL 56869 0 3
// end ;
54677: GO 54631
54679: POP
54680: POP
// if horses then
54681: LD_VAR 0 5
54685: IFFALSE 54752
// for i = 1 to horses do
54687: LD_ADDR_VAR 0 11
54691: PUSH
54692: DOUBLE
54693: LD_INT 1
54695: DEC
54696: ST_TO_ADDR
54697: LD_VAR 0 5
54701: PUSH
54702: FOR_TO
54703: IFFALSE 54750
// begin hc_class := 21 ;
54705: LD_ADDR_OWVAR 28
54709: PUSH
54710: LD_INT 21
54712: ST_TO_ADDR
// hc_gallery :=  ;
54713: LD_ADDR_OWVAR 33
54717: PUSH
54718: LD_STRING 
54720: ST_TO_ADDR
// animal := CreateHuman ;
54721: LD_ADDR_VAR 0 12
54725: PUSH
54726: CALL_OW 44
54730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54731: LD_VAR 0 12
54735: PPUSH
54736: LD_VAR 0 8
54740: PPUSH
54741: LD_INT 0
54743: PPUSH
54744: CALL 56869 0 3
// end ;
54748: GO 54702
54750: POP
54751: POP
// if birds then
54752: LD_VAR 0 1
54756: IFFALSE 54823
// for i = 1 to birds do
54758: LD_ADDR_VAR 0 11
54762: PUSH
54763: DOUBLE
54764: LD_INT 1
54766: DEC
54767: ST_TO_ADDR
54768: LD_VAR 0 1
54772: PUSH
54773: FOR_TO
54774: IFFALSE 54821
// begin hc_class = 18 ;
54776: LD_ADDR_OWVAR 28
54780: PUSH
54781: LD_INT 18
54783: ST_TO_ADDR
// hc_gallery =  ;
54784: LD_ADDR_OWVAR 33
54788: PUSH
54789: LD_STRING 
54791: ST_TO_ADDR
// animal := CreateHuman ;
54792: LD_ADDR_VAR 0 12
54796: PUSH
54797: CALL_OW 44
54801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54802: LD_VAR 0 12
54806: PPUSH
54807: LD_VAR 0 8
54811: PPUSH
54812: LD_INT 0
54814: PPUSH
54815: CALL 56869 0 3
// end ;
54819: GO 54773
54821: POP
54822: POP
// if tigers then
54823: LD_VAR 0 2
54827: IFFALSE 54911
// for i = 1 to tigers do
54829: LD_ADDR_VAR 0 11
54833: PUSH
54834: DOUBLE
54835: LD_INT 1
54837: DEC
54838: ST_TO_ADDR
54839: LD_VAR 0 2
54843: PUSH
54844: FOR_TO
54845: IFFALSE 54909
// begin hc_class = class_tiger ;
54847: LD_ADDR_OWVAR 28
54851: PUSH
54852: LD_INT 14
54854: ST_TO_ADDR
// hc_gallery =  ;
54855: LD_ADDR_OWVAR 33
54859: PUSH
54860: LD_STRING 
54862: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54863: LD_ADDR_OWVAR 35
54867: PUSH
54868: LD_INT 7
54870: NEG
54871: PPUSH
54872: LD_INT 7
54874: PPUSH
54875: CALL_OW 12
54879: ST_TO_ADDR
// animal := CreateHuman ;
54880: LD_ADDR_VAR 0 12
54884: PUSH
54885: CALL_OW 44
54889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54890: LD_VAR 0 12
54894: PPUSH
54895: LD_VAR 0 8
54899: PPUSH
54900: LD_INT 0
54902: PPUSH
54903: CALL 56869 0 3
// end ;
54907: GO 54844
54909: POP
54910: POP
// if apemans then
54911: LD_VAR 0 3
54915: IFFALSE 55038
// for i = 1 to apemans do
54917: LD_ADDR_VAR 0 11
54921: PUSH
54922: DOUBLE
54923: LD_INT 1
54925: DEC
54926: ST_TO_ADDR
54927: LD_VAR 0 3
54931: PUSH
54932: FOR_TO
54933: IFFALSE 55036
// begin hc_class = class_apeman ;
54935: LD_ADDR_OWVAR 28
54939: PUSH
54940: LD_INT 12
54942: ST_TO_ADDR
// hc_gallery =  ;
54943: LD_ADDR_OWVAR 33
54947: PUSH
54948: LD_STRING 
54950: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54951: LD_ADDR_OWVAR 35
54955: PUSH
54956: LD_INT 5
54958: NEG
54959: PPUSH
54960: LD_INT 5
54962: PPUSH
54963: CALL_OW 12
54967: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54968: LD_ADDR_OWVAR 31
54972: PUSH
54973: LD_INT 1
54975: PPUSH
54976: LD_INT 3
54978: PPUSH
54979: CALL_OW 12
54983: PUSH
54984: LD_INT 1
54986: PPUSH
54987: LD_INT 3
54989: PPUSH
54990: CALL_OW 12
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// animal := CreateHuman ;
55007: LD_ADDR_VAR 0 12
55011: PUSH
55012: CALL_OW 44
55016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55017: LD_VAR 0 12
55021: PPUSH
55022: LD_VAR 0 8
55026: PPUSH
55027: LD_INT 0
55029: PPUSH
55030: CALL 56869 0 3
// end ;
55034: GO 54932
55036: POP
55037: POP
// if enchidnas then
55038: LD_VAR 0 4
55042: IFFALSE 55109
// for i = 1 to enchidnas do
55044: LD_ADDR_VAR 0 11
55048: PUSH
55049: DOUBLE
55050: LD_INT 1
55052: DEC
55053: ST_TO_ADDR
55054: LD_VAR 0 4
55058: PUSH
55059: FOR_TO
55060: IFFALSE 55107
// begin hc_class = 13 ;
55062: LD_ADDR_OWVAR 28
55066: PUSH
55067: LD_INT 13
55069: ST_TO_ADDR
// hc_gallery =  ;
55070: LD_ADDR_OWVAR 33
55074: PUSH
55075: LD_STRING 
55077: ST_TO_ADDR
// animal := CreateHuman ;
55078: LD_ADDR_VAR 0 12
55082: PUSH
55083: CALL_OW 44
55087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55088: LD_VAR 0 12
55092: PPUSH
55093: LD_VAR 0 8
55097: PPUSH
55098: LD_INT 0
55100: PPUSH
55101: CALL 56869 0 3
// end ;
55105: GO 55059
55107: POP
55108: POP
// if fishes then
55109: LD_VAR 0 7
55113: IFFALSE 55180
// for i = 1 to fishes do
55115: LD_ADDR_VAR 0 11
55119: PUSH
55120: DOUBLE
55121: LD_INT 1
55123: DEC
55124: ST_TO_ADDR
55125: LD_VAR 0 7
55129: PUSH
55130: FOR_TO
55131: IFFALSE 55178
// begin hc_class = 20 ;
55133: LD_ADDR_OWVAR 28
55137: PUSH
55138: LD_INT 20
55140: ST_TO_ADDR
// hc_gallery =  ;
55141: LD_ADDR_OWVAR 33
55145: PUSH
55146: LD_STRING 
55148: ST_TO_ADDR
// animal := CreateHuman ;
55149: LD_ADDR_VAR 0 12
55153: PUSH
55154: CALL_OW 44
55158: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55159: LD_VAR 0 12
55163: PPUSH
55164: LD_VAR 0 9
55168: PPUSH
55169: LD_INT 0
55171: PPUSH
55172: CALL 56869 0 3
// end ;
55176: GO 55130
55178: POP
55179: POP
// end ;
55180: LD_VAR 0 10
55184: RET
// export function WantHeal ( sci , unit ) ; begin
55185: LD_INT 0
55187: PPUSH
// if GetTaskList ( sci ) > 0 then
55188: LD_VAR 0 1
55192: PPUSH
55193: CALL_OW 437
55197: PUSH
55198: LD_INT 0
55200: GREATER
55201: IFFALSE 55271
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55203: LD_VAR 0 1
55207: PPUSH
55208: CALL_OW 437
55212: PUSH
55213: LD_INT 1
55215: ARRAY
55216: PUSH
55217: LD_INT 1
55219: ARRAY
55220: PUSH
55221: LD_STRING l
55223: EQUAL
55224: PUSH
55225: LD_VAR 0 1
55229: PPUSH
55230: CALL_OW 437
55234: PUSH
55235: LD_INT 1
55237: ARRAY
55238: PUSH
55239: LD_INT 4
55241: ARRAY
55242: PUSH
55243: LD_VAR 0 2
55247: EQUAL
55248: AND
55249: IFFALSE 55261
// result := true else
55251: LD_ADDR_VAR 0 3
55255: PUSH
55256: LD_INT 1
55258: ST_TO_ADDR
55259: GO 55269
// result := false ;
55261: LD_ADDR_VAR 0 3
55265: PUSH
55266: LD_INT 0
55268: ST_TO_ADDR
// end else
55269: GO 55279
// result := false ;
55271: LD_ADDR_VAR 0 3
55275: PUSH
55276: LD_INT 0
55278: ST_TO_ADDR
// end ;
55279: LD_VAR 0 3
55283: RET
// export function HealTarget ( sci ) ; begin
55284: LD_INT 0
55286: PPUSH
// if not sci then
55287: LD_VAR 0 1
55291: NOT
55292: IFFALSE 55296
// exit ;
55294: GO 55361
// result := 0 ;
55296: LD_ADDR_VAR 0 2
55300: PUSH
55301: LD_INT 0
55303: ST_TO_ADDR
// if GetTaskList ( sci ) then
55304: LD_VAR 0 1
55308: PPUSH
55309: CALL_OW 437
55313: IFFALSE 55361
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55315: LD_VAR 0 1
55319: PPUSH
55320: CALL_OW 437
55324: PUSH
55325: LD_INT 1
55327: ARRAY
55328: PUSH
55329: LD_INT 1
55331: ARRAY
55332: PUSH
55333: LD_STRING l
55335: EQUAL
55336: IFFALSE 55361
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55338: LD_ADDR_VAR 0 2
55342: PUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: CALL_OW 437
55352: PUSH
55353: LD_INT 1
55355: ARRAY
55356: PUSH
55357: LD_INT 4
55359: ARRAY
55360: ST_TO_ADDR
// end ;
55361: LD_VAR 0 2
55365: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55366: LD_INT 0
55368: PPUSH
55369: PPUSH
55370: PPUSH
55371: PPUSH
// if not base_units then
55372: LD_VAR 0 1
55376: NOT
55377: IFFALSE 55381
// exit ;
55379: GO 55468
// result := false ;
55381: LD_ADDR_VAR 0 2
55385: PUSH
55386: LD_INT 0
55388: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55389: LD_ADDR_VAR 0 5
55393: PUSH
55394: LD_VAR 0 1
55398: PPUSH
55399: LD_INT 21
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PPUSH
55409: CALL_OW 72
55413: ST_TO_ADDR
// if not tmp then
55414: LD_VAR 0 5
55418: NOT
55419: IFFALSE 55423
// exit ;
55421: GO 55468
// for i in tmp do
55423: LD_ADDR_VAR 0 3
55427: PUSH
55428: LD_VAR 0 5
55432: PUSH
55433: FOR_IN
55434: IFFALSE 55466
// begin result := EnemyInRange ( i , 22 ) ;
55436: LD_ADDR_VAR 0 2
55440: PUSH
55441: LD_VAR 0 3
55445: PPUSH
55446: LD_INT 22
55448: PPUSH
55449: CALL 53704 0 2
55453: ST_TO_ADDR
// if result then
55454: LD_VAR 0 2
55458: IFFALSE 55464
// exit ;
55460: POP
55461: POP
55462: GO 55468
// end ;
55464: GO 55433
55466: POP
55467: POP
// end ;
55468: LD_VAR 0 2
55472: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55473: LD_INT 0
55475: PPUSH
55476: PPUSH
// if not units then
55477: LD_VAR 0 1
55481: NOT
55482: IFFALSE 55486
// exit ;
55484: GO 55556
// result := [ ] ;
55486: LD_ADDR_VAR 0 3
55490: PUSH
55491: EMPTY
55492: ST_TO_ADDR
// for i in units do
55493: LD_ADDR_VAR 0 4
55497: PUSH
55498: LD_VAR 0 1
55502: PUSH
55503: FOR_IN
55504: IFFALSE 55554
// if GetTag ( i ) = tag then
55506: LD_VAR 0 4
55510: PPUSH
55511: CALL_OW 110
55515: PUSH
55516: LD_VAR 0 2
55520: EQUAL
55521: IFFALSE 55552
// result := Insert ( result , result + 1 , i ) ;
55523: LD_ADDR_VAR 0 3
55527: PUSH
55528: LD_VAR 0 3
55532: PPUSH
55533: LD_VAR 0 3
55537: PUSH
55538: LD_INT 1
55540: PLUS
55541: PPUSH
55542: LD_VAR 0 4
55546: PPUSH
55547: CALL_OW 2
55551: ST_TO_ADDR
55552: GO 55503
55554: POP
55555: POP
// end ;
55556: LD_VAR 0 3
55560: RET
// export function IsDriver ( un ) ; begin
55561: LD_INT 0
55563: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55564: LD_ADDR_VAR 0 2
55568: PUSH
55569: LD_VAR 0 1
55573: PUSH
55574: LD_INT 55
55576: PUSH
55577: EMPTY
55578: LIST
55579: PPUSH
55580: CALL_OW 69
55584: IN
55585: ST_TO_ADDR
// end ;
55586: LD_VAR 0 2
55590: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55591: LD_INT 0
55593: PPUSH
55594: PPUSH
// list := [ ] ;
55595: LD_ADDR_VAR 0 5
55599: PUSH
55600: EMPTY
55601: ST_TO_ADDR
// case d of 0 :
55602: LD_VAR 0 3
55606: PUSH
55607: LD_INT 0
55609: DOUBLE
55610: EQUAL
55611: IFTRUE 55615
55613: GO 55748
55615: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55616: LD_ADDR_VAR 0 5
55620: PUSH
55621: LD_VAR 0 1
55625: PUSH
55626: LD_INT 4
55628: MINUS
55629: PUSH
55630: LD_VAR 0 2
55634: PUSH
55635: LD_INT 4
55637: MINUS
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: PUSH
55647: LD_VAR 0 1
55651: PUSH
55652: LD_INT 3
55654: MINUS
55655: PUSH
55656: LD_VAR 0 2
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: PUSH
55669: LD_VAR 0 1
55673: PUSH
55674: LD_INT 4
55676: PLUS
55677: PUSH
55678: LD_VAR 0 2
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: PUSH
55691: LD_VAR 0 1
55695: PUSH
55696: LD_INT 3
55698: PLUS
55699: PUSH
55700: LD_VAR 0 2
55704: PUSH
55705: LD_INT 3
55707: PLUS
55708: PUSH
55709: LD_INT 5
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: PUSH
55717: LD_VAR 0 1
55721: PUSH
55722: LD_VAR 0 2
55726: PUSH
55727: LD_INT 4
55729: PLUS
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// end ; 1 :
55746: GO 56446
55748: LD_INT 1
55750: DOUBLE
55751: EQUAL
55752: IFTRUE 55756
55754: GO 55889
55756: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55757: LD_ADDR_VAR 0 5
55761: PUSH
55762: LD_VAR 0 1
55766: PUSH
55767: LD_VAR 0 2
55771: PUSH
55772: LD_INT 4
55774: MINUS
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: PUSH
55784: LD_VAR 0 1
55788: PUSH
55789: LD_INT 3
55791: MINUS
55792: PUSH
55793: LD_VAR 0 2
55797: PUSH
55798: LD_INT 3
55800: MINUS
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: PUSH
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 4
55817: MINUS
55818: PUSH
55819: LD_VAR 0 2
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: LIST
55831: PUSH
55832: LD_VAR 0 1
55836: PUSH
55837: LD_VAR 0 2
55841: PUSH
55842: LD_INT 3
55844: PLUS
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: PUSH
55854: LD_VAR 0 1
55858: PUSH
55859: LD_INT 4
55861: PLUS
55862: PUSH
55863: LD_VAR 0 2
55867: PUSH
55868: LD_INT 4
55870: PLUS
55871: PUSH
55872: LD_INT 5
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: ST_TO_ADDR
// end ; 2 :
55887: GO 56446
55889: LD_INT 2
55891: DOUBLE
55892: EQUAL
55893: IFTRUE 55897
55895: GO 56026
55897: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55898: LD_ADDR_VAR 0 5
55902: PUSH
55903: LD_VAR 0 1
55907: PUSH
55908: LD_VAR 0 2
55912: PUSH
55913: LD_INT 3
55915: MINUS
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: PUSH
55925: LD_VAR 0 1
55929: PUSH
55930: LD_INT 4
55932: PLUS
55933: PUSH
55934: LD_VAR 0 2
55938: PUSH
55939: LD_INT 4
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: PUSH
55947: LD_VAR 0 1
55951: PUSH
55952: LD_VAR 0 2
55956: PUSH
55957: LD_INT 4
55959: PLUS
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: PUSH
55969: LD_VAR 0 1
55973: PUSH
55974: LD_INT 3
55976: MINUS
55977: PUSH
55978: LD_VAR 0 2
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: LIST
55990: PUSH
55991: LD_VAR 0 1
55995: PUSH
55996: LD_INT 4
55998: MINUS
55999: PUSH
56000: LD_VAR 0 2
56004: PUSH
56005: LD_INT 4
56007: MINUS
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: ST_TO_ADDR
// end ; 3 :
56024: GO 56446
56026: LD_INT 3
56028: DOUBLE
56029: EQUAL
56030: IFTRUE 56034
56032: GO 56167
56034: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56035: LD_ADDR_VAR 0 5
56039: PUSH
56040: LD_VAR 0 1
56044: PUSH
56045: LD_INT 3
56047: PLUS
56048: PUSH
56049: LD_VAR 0 2
56053: PUSH
56054: LD_INT 4
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: PUSH
56062: LD_VAR 0 1
56066: PUSH
56067: LD_INT 4
56069: PLUS
56070: PUSH
56071: LD_VAR 0 2
56075: PUSH
56076: LD_INT 4
56078: PLUS
56079: PUSH
56080: LD_INT 5
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: PUSH
56088: LD_VAR 0 1
56092: PUSH
56093: LD_INT 4
56095: MINUS
56096: PUSH
56097: LD_VAR 0 2
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: PUSH
56110: LD_VAR 0 1
56114: PUSH
56115: LD_VAR 0 2
56119: PUSH
56120: LD_INT 4
56122: MINUS
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: PUSH
56132: LD_VAR 0 1
56136: PUSH
56137: LD_INT 3
56139: MINUS
56140: PUSH
56141: LD_VAR 0 2
56145: PUSH
56146: LD_INT 3
56148: MINUS
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: ST_TO_ADDR
// end ; 4 :
56165: GO 56446
56167: LD_INT 4
56169: DOUBLE
56170: EQUAL
56171: IFTRUE 56175
56173: GO 56308
56175: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56176: LD_ADDR_VAR 0 5
56180: PUSH
56181: LD_VAR 0 1
56185: PUSH
56186: LD_VAR 0 2
56190: PUSH
56191: LD_INT 4
56193: PLUS
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: LIST
56202: PUSH
56203: LD_VAR 0 1
56207: PUSH
56208: LD_INT 3
56210: PLUS
56211: PUSH
56212: LD_VAR 0 2
56216: PUSH
56217: LD_INT 3
56219: PLUS
56220: PUSH
56221: LD_INT 5
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: PUSH
56229: LD_VAR 0 1
56233: PUSH
56234: LD_INT 4
56236: PLUS
56237: PUSH
56238: LD_VAR 0 2
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: PUSH
56251: LD_VAR 0 1
56255: PUSH
56256: LD_VAR 0 2
56260: PUSH
56261: LD_INT 3
56263: MINUS
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: PUSH
56273: LD_VAR 0 1
56277: PUSH
56278: LD_INT 4
56280: MINUS
56281: PUSH
56282: LD_VAR 0 2
56286: PUSH
56287: LD_INT 4
56289: MINUS
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: ST_TO_ADDR
// end ; 5 :
56306: GO 56446
56308: LD_INT 5
56310: DOUBLE
56311: EQUAL
56312: IFTRUE 56316
56314: GO 56445
56316: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56317: LD_ADDR_VAR 0 5
56321: PUSH
56322: LD_VAR 0 1
56326: PUSH
56327: LD_INT 4
56329: MINUS
56330: PUSH
56331: LD_VAR 0 2
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: PUSH
56344: LD_VAR 0 1
56348: PUSH
56349: LD_VAR 0 2
56353: PUSH
56354: LD_INT 4
56356: MINUS
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: PUSH
56366: LD_VAR 0 1
56370: PUSH
56371: LD_INT 4
56373: PLUS
56374: PUSH
56375: LD_VAR 0 2
56379: PUSH
56380: LD_INT 4
56382: PLUS
56383: PUSH
56384: LD_INT 5
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: PUSH
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 3
56399: PLUS
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 4
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: PUSH
56414: LD_VAR 0 1
56418: PUSH
56419: LD_VAR 0 2
56423: PUSH
56424: LD_INT 3
56426: PLUS
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// end ; end ;
56443: GO 56446
56445: POP
// result := list ;
56446: LD_ADDR_VAR 0 4
56450: PUSH
56451: LD_VAR 0 5
56455: ST_TO_ADDR
// end ;
56456: LD_VAR 0 4
56460: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56461: LD_INT 0
56463: PPUSH
56464: PPUSH
56465: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56466: LD_VAR 0 1
56470: NOT
56471: PUSH
56472: LD_VAR 0 2
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 4
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: IN
56495: NOT
56496: OR
56497: IFFALSE 56501
// exit ;
56499: GO 56593
// tmp := [ ] ;
56501: LD_ADDR_VAR 0 5
56505: PUSH
56506: EMPTY
56507: ST_TO_ADDR
// for i in units do
56508: LD_ADDR_VAR 0 4
56512: PUSH
56513: LD_VAR 0 1
56517: PUSH
56518: FOR_IN
56519: IFFALSE 56562
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56521: LD_ADDR_VAR 0 5
56525: PUSH
56526: LD_VAR 0 5
56530: PPUSH
56531: LD_VAR 0 5
56535: PUSH
56536: LD_INT 1
56538: PLUS
56539: PPUSH
56540: LD_VAR 0 4
56544: PPUSH
56545: LD_VAR 0 2
56549: PPUSH
56550: CALL_OW 259
56554: PPUSH
56555: CALL_OW 2
56559: ST_TO_ADDR
56560: GO 56518
56562: POP
56563: POP
// if not tmp then
56564: LD_VAR 0 5
56568: NOT
56569: IFFALSE 56573
// exit ;
56571: GO 56593
// result := SortListByListDesc ( units , tmp ) ;
56573: LD_ADDR_VAR 0 3
56577: PUSH
56578: LD_VAR 0 1
56582: PPUSH
56583: LD_VAR 0 5
56587: PPUSH
56588: CALL_OW 77
56592: ST_TO_ADDR
// end ;
56593: LD_VAR 0 3
56597: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56598: LD_INT 0
56600: PPUSH
56601: PPUSH
56602: PPUSH
// result := false ;
56603: LD_ADDR_VAR 0 3
56607: PUSH
56608: LD_INT 0
56610: ST_TO_ADDR
// x := GetX ( building ) ;
56611: LD_ADDR_VAR 0 4
56615: PUSH
56616: LD_VAR 0 2
56620: PPUSH
56621: CALL_OW 250
56625: ST_TO_ADDR
// y := GetY ( building ) ;
56626: LD_ADDR_VAR 0 5
56630: PUSH
56631: LD_VAR 0 2
56635: PPUSH
56636: CALL_OW 251
56640: ST_TO_ADDR
// if not building or not x or not y then
56641: LD_VAR 0 2
56645: NOT
56646: PUSH
56647: LD_VAR 0 4
56651: NOT
56652: OR
56653: PUSH
56654: LD_VAR 0 5
56658: NOT
56659: OR
56660: IFFALSE 56664
// exit ;
56662: GO 56756
// if GetTaskList ( unit ) then
56664: LD_VAR 0 1
56668: PPUSH
56669: CALL_OW 437
56673: IFFALSE 56756
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56675: LD_STRING e
56677: PUSH
56678: LD_VAR 0 1
56682: PPUSH
56683: CALL_OW 437
56687: PUSH
56688: LD_INT 1
56690: ARRAY
56691: PUSH
56692: LD_INT 1
56694: ARRAY
56695: EQUAL
56696: PUSH
56697: LD_VAR 0 4
56701: PUSH
56702: LD_VAR 0 1
56706: PPUSH
56707: CALL_OW 437
56711: PUSH
56712: LD_INT 1
56714: ARRAY
56715: PUSH
56716: LD_INT 2
56718: ARRAY
56719: EQUAL
56720: AND
56721: PUSH
56722: LD_VAR 0 5
56726: PUSH
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 437
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PUSH
56741: LD_INT 3
56743: ARRAY
56744: EQUAL
56745: AND
56746: IFFALSE 56756
// result := true end ;
56748: LD_ADDR_VAR 0 3
56752: PUSH
56753: LD_INT 1
56755: ST_TO_ADDR
// end ;
56756: LD_VAR 0 3
56760: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56761: LD_INT 0
56763: PPUSH
// result := false ;
56764: LD_ADDR_VAR 0 4
56768: PUSH
56769: LD_INT 0
56771: ST_TO_ADDR
// if GetTaskList ( unit ) then
56772: LD_VAR 0 1
56776: PPUSH
56777: CALL_OW 437
56781: IFFALSE 56864
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56783: LD_STRING M
56785: PUSH
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 437
56795: PUSH
56796: LD_INT 1
56798: ARRAY
56799: PUSH
56800: LD_INT 1
56802: ARRAY
56803: EQUAL
56804: PUSH
56805: LD_VAR 0 2
56809: PUSH
56810: LD_VAR 0 1
56814: PPUSH
56815: CALL_OW 437
56819: PUSH
56820: LD_INT 1
56822: ARRAY
56823: PUSH
56824: LD_INT 2
56826: ARRAY
56827: EQUAL
56828: AND
56829: PUSH
56830: LD_VAR 0 3
56834: PUSH
56835: LD_VAR 0 1
56839: PPUSH
56840: CALL_OW 437
56844: PUSH
56845: LD_INT 1
56847: ARRAY
56848: PUSH
56849: LD_INT 3
56851: ARRAY
56852: EQUAL
56853: AND
56854: IFFALSE 56864
// result := true ;
56856: LD_ADDR_VAR 0 4
56860: PUSH
56861: LD_INT 1
56863: ST_TO_ADDR
// end ; end ;
56864: LD_VAR 0 4
56868: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56869: LD_INT 0
56871: PPUSH
56872: PPUSH
56873: PPUSH
56874: PPUSH
// if not unit or not area then
56875: LD_VAR 0 1
56879: NOT
56880: PUSH
56881: LD_VAR 0 2
56885: NOT
56886: OR
56887: IFFALSE 56891
// exit ;
56889: GO 57055
// tmp := AreaToList ( area , i ) ;
56891: LD_ADDR_VAR 0 6
56895: PUSH
56896: LD_VAR 0 2
56900: PPUSH
56901: LD_VAR 0 5
56905: PPUSH
56906: CALL_OW 517
56910: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56911: LD_ADDR_VAR 0 5
56915: PUSH
56916: DOUBLE
56917: LD_INT 1
56919: DEC
56920: ST_TO_ADDR
56921: LD_VAR 0 6
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: PUSH
56930: FOR_TO
56931: IFFALSE 57053
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56933: LD_ADDR_VAR 0 7
56937: PUSH
56938: LD_VAR 0 6
56942: PUSH
56943: LD_INT 1
56945: ARRAY
56946: PUSH
56947: LD_VAR 0 5
56951: ARRAY
56952: PUSH
56953: LD_VAR 0 6
56957: PUSH
56958: LD_INT 2
56960: ARRAY
56961: PUSH
56962: LD_VAR 0 5
56966: ARRAY
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56972: LD_VAR 0 7
56976: PUSH
56977: LD_INT 1
56979: ARRAY
56980: PPUSH
56981: LD_VAR 0 7
56985: PUSH
56986: LD_INT 2
56988: ARRAY
56989: PPUSH
56990: CALL_OW 428
56994: PUSH
56995: LD_INT 0
56997: EQUAL
56998: IFFALSE 57051
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57000: LD_VAR 0 1
57004: PPUSH
57005: LD_VAR 0 7
57009: PUSH
57010: LD_INT 1
57012: ARRAY
57013: PPUSH
57014: LD_VAR 0 7
57018: PUSH
57019: LD_INT 2
57021: ARRAY
57022: PPUSH
57023: LD_VAR 0 3
57027: PPUSH
57028: CALL_OW 48
// result := IsPlaced ( unit ) ;
57032: LD_ADDR_VAR 0 4
57036: PUSH
57037: LD_VAR 0 1
57041: PPUSH
57042: CALL_OW 305
57046: ST_TO_ADDR
// exit ;
57047: POP
57048: POP
57049: GO 57055
// end ; end ;
57051: GO 56930
57053: POP
57054: POP
// end ;
57055: LD_VAR 0 4
57059: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57060: LD_INT 0
57062: PPUSH
57063: PPUSH
57064: PPUSH
// if not side or side > 8 then
57065: LD_VAR 0 1
57069: NOT
57070: PUSH
57071: LD_VAR 0 1
57075: PUSH
57076: LD_INT 8
57078: GREATER
57079: OR
57080: IFFALSE 57084
// exit ;
57082: GO 57271
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57084: LD_ADDR_VAR 0 4
57088: PUSH
57089: LD_INT 22
57091: PUSH
57092: LD_VAR 0 1
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 21
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PPUSH
57115: CALL_OW 69
57119: ST_TO_ADDR
// if not tmp then
57120: LD_VAR 0 4
57124: NOT
57125: IFFALSE 57129
// exit ;
57127: GO 57271
// enable_addtolog := true ;
57129: LD_ADDR_OWVAR 81
57133: PUSH
57134: LD_INT 1
57136: ST_TO_ADDR
// AddToLog ( [ ) ;
57137: LD_STRING [
57139: PPUSH
57140: CALL_OW 561
// for i in tmp do
57144: LD_ADDR_VAR 0 3
57148: PUSH
57149: LD_VAR 0 4
57153: PUSH
57154: FOR_IN
57155: IFFALSE 57262
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57157: LD_STRING [
57159: PUSH
57160: LD_VAR 0 3
57164: PPUSH
57165: CALL_OW 266
57169: STR
57170: PUSH
57171: LD_STRING , 
57173: STR
57174: PUSH
57175: LD_VAR 0 3
57179: PPUSH
57180: CALL_OW 250
57184: STR
57185: PUSH
57186: LD_STRING , 
57188: STR
57189: PUSH
57190: LD_VAR 0 3
57194: PPUSH
57195: CALL_OW 251
57199: STR
57200: PUSH
57201: LD_STRING , 
57203: STR
57204: PUSH
57205: LD_VAR 0 3
57209: PPUSH
57210: CALL_OW 254
57214: STR
57215: PUSH
57216: LD_STRING , 
57218: STR
57219: PUSH
57220: LD_VAR 0 3
57224: PPUSH
57225: LD_INT 1
57227: PPUSH
57228: CALL_OW 268
57232: STR
57233: PUSH
57234: LD_STRING , 
57236: STR
57237: PUSH
57238: LD_VAR 0 3
57242: PPUSH
57243: LD_INT 2
57245: PPUSH
57246: CALL_OW 268
57250: STR
57251: PUSH
57252: LD_STRING ],
57254: STR
57255: PPUSH
57256: CALL_OW 561
// end ;
57260: GO 57154
57262: POP
57263: POP
// AddToLog ( ]; ) ;
57264: LD_STRING ];
57266: PPUSH
57267: CALL_OW 561
// end ;
57271: LD_VAR 0 2
57275: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57276: LD_INT 0
57278: PPUSH
57279: PPUSH
57280: PPUSH
57281: PPUSH
57282: PPUSH
// if not area or not rate or not max then
57283: LD_VAR 0 1
57287: NOT
57288: PUSH
57289: LD_VAR 0 2
57293: NOT
57294: OR
57295: PUSH
57296: LD_VAR 0 4
57300: NOT
57301: OR
57302: IFFALSE 57306
// exit ;
57304: GO 57498
// while 1 do
57306: LD_INT 1
57308: IFFALSE 57498
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57310: LD_ADDR_VAR 0 9
57314: PUSH
57315: LD_VAR 0 1
57319: PPUSH
57320: LD_INT 1
57322: PPUSH
57323: CALL_OW 287
57327: PUSH
57328: LD_INT 10
57330: MUL
57331: ST_TO_ADDR
// r := rate / 10 ;
57332: LD_ADDR_VAR 0 7
57336: PUSH
57337: LD_VAR 0 2
57341: PUSH
57342: LD_INT 10
57344: DIVREAL
57345: ST_TO_ADDR
// time := 1 1$00 ;
57346: LD_ADDR_VAR 0 8
57350: PUSH
57351: LD_INT 2100
57353: ST_TO_ADDR
// if amount < min then
57354: LD_VAR 0 9
57358: PUSH
57359: LD_VAR 0 3
57363: LESS
57364: IFFALSE 57382
// r := r * 2 else
57366: LD_ADDR_VAR 0 7
57370: PUSH
57371: LD_VAR 0 7
57375: PUSH
57376: LD_INT 2
57378: MUL
57379: ST_TO_ADDR
57380: GO 57408
// if amount > max then
57382: LD_VAR 0 9
57386: PUSH
57387: LD_VAR 0 4
57391: GREATER
57392: IFFALSE 57408
// r := r / 2 ;
57394: LD_ADDR_VAR 0 7
57398: PUSH
57399: LD_VAR 0 7
57403: PUSH
57404: LD_INT 2
57406: DIVREAL
57407: ST_TO_ADDR
// time := time / r ;
57408: LD_ADDR_VAR 0 8
57412: PUSH
57413: LD_VAR 0 8
57417: PUSH
57418: LD_VAR 0 7
57422: DIVREAL
57423: ST_TO_ADDR
// if time < 0 then
57424: LD_VAR 0 8
57428: PUSH
57429: LD_INT 0
57431: LESS
57432: IFFALSE 57449
// time := time * - 1 ;
57434: LD_ADDR_VAR 0 8
57438: PUSH
57439: LD_VAR 0 8
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: MUL
57448: ST_TO_ADDR
// wait ( time ) ;
57449: LD_VAR 0 8
57453: PPUSH
57454: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57458: LD_INT 35
57460: PPUSH
57461: LD_INT 875
57463: PPUSH
57464: CALL_OW 12
57468: PPUSH
57469: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57473: LD_INT 1
57475: PPUSH
57476: LD_INT 5
57478: PPUSH
57479: CALL_OW 12
57483: PPUSH
57484: LD_VAR 0 1
57488: PPUSH
57489: LD_INT 1
57491: PPUSH
57492: CALL_OW 55
// end ;
57496: GO 57306
// end ;
57498: LD_VAR 0 5
57502: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57503: LD_INT 0
57505: PPUSH
57506: PPUSH
57507: PPUSH
57508: PPUSH
57509: PPUSH
57510: PPUSH
57511: PPUSH
57512: PPUSH
// if not turrets or not factories then
57513: LD_VAR 0 1
57517: NOT
57518: PUSH
57519: LD_VAR 0 2
57523: NOT
57524: OR
57525: IFFALSE 57529
// exit ;
57527: GO 57836
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57529: LD_ADDR_VAR 0 10
57533: PUSH
57534: LD_INT 5
57536: PUSH
57537: LD_INT 6
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 4
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 3
57556: PUSH
57557: LD_INT 5
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 24
57571: PUSH
57572: LD_INT 25
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 23
57581: PUSH
57582: LD_INT 27
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 42
57595: PUSH
57596: LD_INT 43
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 44
57605: PUSH
57606: LD_INT 46
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 45
57615: PUSH
57616: LD_INT 47
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// result := [ ] ;
57633: LD_ADDR_VAR 0 3
57637: PUSH
57638: EMPTY
57639: ST_TO_ADDR
// for i in turrets do
57640: LD_ADDR_VAR 0 4
57644: PUSH
57645: LD_VAR 0 1
57649: PUSH
57650: FOR_IN
57651: IFFALSE 57834
// begin nat := GetNation ( i ) ;
57653: LD_ADDR_VAR 0 7
57657: PUSH
57658: LD_VAR 0 4
57662: PPUSH
57663: CALL_OW 248
57667: ST_TO_ADDR
// weapon := 0 ;
57668: LD_ADDR_VAR 0 8
57672: PUSH
57673: LD_INT 0
57675: ST_TO_ADDR
// if not nat then
57676: LD_VAR 0 7
57680: NOT
57681: IFFALSE 57685
// continue ;
57683: GO 57650
// for j in list [ nat ] do
57685: LD_ADDR_VAR 0 5
57689: PUSH
57690: LD_VAR 0 10
57694: PUSH
57695: LD_VAR 0 7
57699: ARRAY
57700: PUSH
57701: FOR_IN
57702: IFFALSE 57743
// if GetBWeapon ( i ) = j [ 1 ] then
57704: LD_VAR 0 4
57708: PPUSH
57709: CALL_OW 269
57713: PUSH
57714: LD_VAR 0 5
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: EQUAL
57723: IFFALSE 57741
// begin weapon := j [ 2 ] ;
57725: LD_ADDR_VAR 0 8
57729: PUSH
57730: LD_VAR 0 5
57734: PUSH
57735: LD_INT 2
57737: ARRAY
57738: ST_TO_ADDR
// break ;
57739: GO 57743
// end ;
57741: GO 57701
57743: POP
57744: POP
// if not weapon then
57745: LD_VAR 0 8
57749: NOT
57750: IFFALSE 57754
// continue ;
57752: GO 57650
// for k in factories do
57754: LD_ADDR_VAR 0 6
57758: PUSH
57759: LD_VAR 0 2
57763: PUSH
57764: FOR_IN
57765: IFFALSE 57830
// begin weapons := AvailableWeaponList ( k ) ;
57767: LD_ADDR_VAR 0 9
57771: PUSH
57772: LD_VAR 0 6
57776: PPUSH
57777: CALL_OW 478
57781: ST_TO_ADDR
// if not weapons then
57782: LD_VAR 0 9
57786: NOT
57787: IFFALSE 57791
// continue ;
57789: GO 57764
// if weapon in weapons then
57791: LD_VAR 0 8
57795: PUSH
57796: LD_VAR 0 9
57800: IN
57801: IFFALSE 57828
// begin result := [ i , weapon ] ;
57803: LD_ADDR_VAR 0 3
57807: PUSH
57808: LD_VAR 0 4
57812: PUSH
57813: LD_VAR 0 8
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// exit ;
57822: POP
57823: POP
57824: POP
57825: POP
57826: GO 57836
// end ; end ;
57828: GO 57764
57830: POP
57831: POP
// end ;
57832: GO 57650
57834: POP
57835: POP
// end ;
57836: LD_VAR 0 3
57840: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57841: LD_INT 0
57843: PPUSH
// if not side or side > 8 then
57844: LD_VAR 0 3
57848: NOT
57849: PUSH
57850: LD_VAR 0 3
57854: PUSH
57855: LD_INT 8
57857: GREATER
57858: OR
57859: IFFALSE 57863
// exit ;
57861: GO 57922
// if not range then
57863: LD_VAR 0 4
57867: NOT
57868: IFFALSE 57879
// range := - 12 ;
57870: LD_ADDR_VAR 0 4
57874: PUSH
57875: LD_INT 12
57877: NEG
57878: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57879: LD_VAR 0 1
57883: PPUSH
57884: LD_VAR 0 2
57888: PPUSH
57889: LD_VAR 0 3
57893: PPUSH
57894: LD_VAR 0 4
57898: PPUSH
57899: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57903: LD_VAR 0 1
57907: PPUSH
57908: LD_VAR 0 2
57912: PPUSH
57913: LD_VAR 0 3
57917: PPUSH
57918: CALL_OW 331
// end ;
57922: LD_VAR 0 5
57926: RET
// export function Video ( mode ) ; begin
57927: LD_INT 0
57929: PPUSH
// ingame_video = mode ;
57930: LD_ADDR_OWVAR 52
57934: PUSH
57935: LD_VAR 0 1
57939: ST_TO_ADDR
// interface_hidden = mode ;
57940: LD_ADDR_OWVAR 54
57944: PUSH
57945: LD_VAR 0 1
57949: ST_TO_ADDR
// end ;
57950: LD_VAR 0 2
57954: RET
// export function Join ( array , element ) ; begin
57955: LD_INT 0
57957: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57958: LD_ADDR_VAR 0 3
57962: PUSH
57963: LD_VAR 0 1
57967: PPUSH
57968: LD_VAR 0 1
57972: PUSH
57973: LD_INT 1
57975: PLUS
57976: PPUSH
57977: LD_VAR 0 2
57981: PPUSH
57982: CALL_OW 1
57986: ST_TO_ADDR
// end ;
57987: LD_VAR 0 3
57991: RET
// export function JoinUnion ( array , element ) ; begin
57992: LD_INT 0
57994: PPUSH
// result := array union element ;
57995: LD_ADDR_VAR 0 3
57999: PUSH
58000: LD_VAR 0 1
58004: PUSH
58005: LD_VAR 0 2
58009: UNION
58010: ST_TO_ADDR
// end ;
58011: LD_VAR 0 3
58015: RET
// export function GetBehemoths ( side ) ; begin
58016: LD_INT 0
58018: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58019: LD_ADDR_VAR 0 2
58023: PUSH
58024: LD_INT 22
58026: PUSH
58027: LD_VAR 0 1
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 31
58038: PUSH
58039: LD_INT 25
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PPUSH
58050: CALL_OW 69
58054: ST_TO_ADDR
// end ;
58055: LD_VAR 0 2
58059: RET
// export function Shuffle ( array ) ; var i , index ; begin
58060: LD_INT 0
58062: PPUSH
58063: PPUSH
58064: PPUSH
// result := [ ] ;
58065: LD_ADDR_VAR 0 2
58069: PUSH
58070: EMPTY
58071: ST_TO_ADDR
// if not array then
58072: LD_VAR 0 1
58076: NOT
58077: IFFALSE 58081
// exit ;
58079: GO 58180
// Randomize ;
58081: CALL_OW 10
// for i = array downto 1 do
58085: LD_ADDR_VAR 0 3
58089: PUSH
58090: DOUBLE
58091: LD_VAR 0 1
58095: INC
58096: ST_TO_ADDR
58097: LD_INT 1
58099: PUSH
58100: FOR_DOWNTO
58101: IFFALSE 58178
// begin index := rand ( 1 , array ) ;
58103: LD_ADDR_VAR 0 4
58107: PUSH
58108: LD_INT 1
58110: PPUSH
58111: LD_VAR 0 1
58115: PPUSH
58116: CALL_OW 12
58120: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58121: LD_ADDR_VAR 0 2
58125: PUSH
58126: LD_VAR 0 2
58130: PPUSH
58131: LD_VAR 0 2
58135: PUSH
58136: LD_INT 1
58138: PLUS
58139: PPUSH
58140: LD_VAR 0 1
58144: PUSH
58145: LD_VAR 0 4
58149: ARRAY
58150: PPUSH
58151: CALL_OW 2
58155: ST_TO_ADDR
// array := Delete ( array , index ) ;
58156: LD_ADDR_VAR 0 1
58160: PUSH
58161: LD_VAR 0 1
58165: PPUSH
58166: LD_VAR 0 4
58170: PPUSH
58171: CALL_OW 3
58175: ST_TO_ADDR
// end ;
58176: GO 58100
58178: POP
58179: POP
// end ;
58180: LD_VAR 0 2
58184: RET
// export function GetBaseMaterials ( base ) ; begin
58185: LD_INT 0
58187: PPUSH
// result := [ 0 , 0 , 0 ] ;
58188: LD_ADDR_VAR 0 2
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// if not base then
58207: LD_VAR 0 1
58211: NOT
58212: IFFALSE 58216
// exit ;
58214: GO 58265
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58216: LD_ADDR_VAR 0 2
58220: PUSH
58221: LD_VAR 0 1
58225: PPUSH
58226: LD_INT 1
58228: PPUSH
58229: CALL_OW 275
58233: PUSH
58234: LD_VAR 0 1
58238: PPUSH
58239: LD_INT 2
58241: PPUSH
58242: CALL_OW 275
58246: PUSH
58247: LD_VAR 0 1
58251: PPUSH
58252: LD_INT 3
58254: PPUSH
58255: CALL_OW 275
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// end ;
58265: LD_VAR 0 2
58269: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58270: LD_INT 0
58272: PPUSH
58273: PPUSH
// result := array ;
58274: LD_ADDR_VAR 0 3
58278: PUSH
58279: LD_VAR 0 1
58283: ST_TO_ADDR
// if size > 0 then
58284: LD_VAR 0 2
58288: PUSH
58289: LD_INT 0
58291: GREATER
58292: IFFALSE 58338
// for i := array downto size do
58294: LD_ADDR_VAR 0 4
58298: PUSH
58299: DOUBLE
58300: LD_VAR 0 1
58304: INC
58305: ST_TO_ADDR
58306: LD_VAR 0 2
58310: PUSH
58311: FOR_DOWNTO
58312: IFFALSE 58336
// result := Delete ( result , result ) ;
58314: LD_ADDR_VAR 0 3
58318: PUSH
58319: LD_VAR 0 3
58323: PPUSH
58324: LD_VAR 0 3
58328: PPUSH
58329: CALL_OW 3
58333: ST_TO_ADDR
58334: GO 58311
58336: POP
58337: POP
// end ;
58338: LD_VAR 0 3
58342: RET
// export function ComExit ( unit ) ; var tmp ; begin
58343: LD_INT 0
58345: PPUSH
58346: PPUSH
// if not IsInUnit ( unit ) then
58347: LD_VAR 0 1
58351: PPUSH
58352: CALL_OW 310
58356: NOT
58357: IFFALSE 58361
// exit ;
58359: GO 58421
// tmp := IsInUnit ( unit ) ;
58361: LD_ADDR_VAR 0 3
58365: PUSH
58366: LD_VAR 0 1
58370: PPUSH
58371: CALL_OW 310
58375: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58376: LD_VAR 0 3
58380: PPUSH
58381: CALL_OW 247
58385: PUSH
58386: LD_INT 2
58388: EQUAL
58389: IFFALSE 58402
// ComExitVehicle ( unit ) else
58391: LD_VAR 0 1
58395: PPUSH
58396: CALL_OW 121
58400: GO 58411
// ComExitBuilding ( unit ) ;
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL_OW 122
// result := tmp ;
58411: LD_ADDR_VAR 0 2
58415: PUSH
58416: LD_VAR 0 3
58420: ST_TO_ADDR
// end ;
58421: LD_VAR 0 2
58425: RET
// export function ResetHc ; begin
58426: LD_INT 0
58428: PPUSH
// InitHc ;
58429: CALL_OW 19
// hc_importance := 0 ;
58433: LD_ADDR_OWVAR 32
58437: PUSH
58438: LD_INT 0
58440: ST_TO_ADDR
// end ;
58441: LD_VAR 0 1
58445: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58446: LD_INT 0
58448: PPUSH
58449: PPUSH
58450: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58451: LD_ADDR_VAR 0 6
58455: PUSH
58456: LD_VAR 0 1
58460: PUSH
58461: LD_VAR 0 3
58465: PLUS
58466: PUSH
58467: LD_INT 2
58469: DIV
58470: ST_TO_ADDR
// if _x < 0 then
58471: LD_VAR 0 6
58475: PUSH
58476: LD_INT 0
58478: LESS
58479: IFFALSE 58496
// _x := _x * - 1 ;
58481: LD_ADDR_VAR 0 6
58485: PUSH
58486: LD_VAR 0 6
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: MUL
58495: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58496: LD_ADDR_VAR 0 7
58500: PUSH
58501: LD_VAR 0 2
58505: PUSH
58506: LD_VAR 0 4
58510: PLUS
58511: PUSH
58512: LD_INT 2
58514: DIV
58515: ST_TO_ADDR
// if _y < 0 then
58516: LD_VAR 0 7
58520: PUSH
58521: LD_INT 0
58523: LESS
58524: IFFALSE 58541
// _y := _y * - 1 ;
58526: LD_ADDR_VAR 0 7
58530: PUSH
58531: LD_VAR 0 7
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: MUL
58540: ST_TO_ADDR
// result := [ _x , _y ] ;
58541: LD_ADDR_VAR 0 5
58545: PUSH
58546: LD_VAR 0 6
58550: PUSH
58551: LD_VAR 0 7
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: ST_TO_ADDR
// end ;
58560: LD_VAR 0 5
58564: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58565: LD_INT 0
58567: PPUSH
58568: PPUSH
58569: PPUSH
58570: PPUSH
// task := GetTaskList ( unit ) ;
58571: LD_ADDR_VAR 0 7
58575: PUSH
58576: LD_VAR 0 1
58580: PPUSH
58581: CALL_OW 437
58585: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58586: LD_VAR 0 7
58590: NOT
58591: PUSH
58592: LD_VAR 0 1
58596: PPUSH
58597: LD_VAR 0 2
58601: PPUSH
58602: CALL_OW 308
58606: NOT
58607: AND
58608: IFFALSE 58612
// exit ;
58610: GO 58730
// if IsInArea ( unit , area ) then
58612: LD_VAR 0 1
58616: PPUSH
58617: LD_VAR 0 2
58621: PPUSH
58622: CALL_OW 308
58626: IFFALSE 58644
// begin ComMoveToArea ( unit , goAway ) ;
58628: LD_VAR 0 1
58632: PPUSH
58633: LD_VAR 0 3
58637: PPUSH
58638: CALL_OW 113
// exit ;
58642: GO 58730
// end ; if task [ 1 ] [ 1 ] <> M then
58644: LD_VAR 0 7
58648: PUSH
58649: LD_INT 1
58651: ARRAY
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: PUSH
58657: LD_STRING M
58659: NONEQUAL
58660: IFFALSE 58664
// exit ;
58662: GO 58730
// x := task [ 1 ] [ 2 ] ;
58664: LD_ADDR_VAR 0 5
58668: PUSH
58669: LD_VAR 0 7
58673: PUSH
58674: LD_INT 1
58676: ARRAY
58677: PUSH
58678: LD_INT 2
58680: ARRAY
58681: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58682: LD_ADDR_VAR 0 6
58686: PUSH
58687: LD_VAR 0 7
58691: PUSH
58692: LD_INT 1
58694: ARRAY
58695: PUSH
58696: LD_INT 3
58698: ARRAY
58699: ST_TO_ADDR
// if InArea ( x , y , area ) then
58700: LD_VAR 0 5
58704: PPUSH
58705: LD_VAR 0 6
58709: PPUSH
58710: LD_VAR 0 2
58714: PPUSH
58715: CALL_OW 309
58719: IFFALSE 58730
// ComStop ( unit ) ;
58721: LD_VAR 0 1
58725: PPUSH
58726: CALL_OW 141
// end ;
58730: LD_VAR 0 4
58734: RET
// export function Abs ( value ) ; begin
58735: LD_INT 0
58737: PPUSH
// result := value ;
58738: LD_ADDR_VAR 0 2
58742: PUSH
58743: LD_VAR 0 1
58747: ST_TO_ADDR
// if value < 0 then
58748: LD_VAR 0 1
58752: PUSH
58753: LD_INT 0
58755: LESS
58756: IFFALSE 58773
// result := value * - 1 ;
58758: LD_ADDR_VAR 0 2
58762: PUSH
58763: LD_VAR 0 1
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: MUL
58772: ST_TO_ADDR
// end ;
58773: LD_VAR 0 2
58777: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58778: LD_INT 0
58780: PPUSH
58781: PPUSH
58782: PPUSH
58783: PPUSH
58784: PPUSH
58785: PPUSH
58786: PPUSH
58787: PPUSH
// if not unit or not building then
58788: LD_VAR 0 1
58792: NOT
58793: PUSH
58794: LD_VAR 0 2
58798: NOT
58799: OR
58800: IFFALSE 58804
// exit ;
58802: GO 59030
// x := GetX ( building ) ;
58804: LD_ADDR_VAR 0 4
58808: PUSH
58809: LD_VAR 0 2
58813: PPUSH
58814: CALL_OW 250
58818: ST_TO_ADDR
// y := GetY ( building ) ;
58819: LD_ADDR_VAR 0 6
58823: PUSH
58824: LD_VAR 0 2
58828: PPUSH
58829: CALL_OW 251
58833: ST_TO_ADDR
// d := GetDir ( building ) ;
58834: LD_ADDR_VAR 0 8
58838: PUSH
58839: LD_VAR 0 2
58843: PPUSH
58844: CALL_OW 254
58848: ST_TO_ADDR
// r := 4 ;
58849: LD_ADDR_VAR 0 9
58853: PUSH
58854: LD_INT 4
58856: ST_TO_ADDR
// for i := 1 to 5 do
58857: LD_ADDR_VAR 0 10
58861: PUSH
58862: DOUBLE
58863: LD_INT 1
58865: DEC
58866: ST_TO_ADDR
58867: LD_INT 5
58869: PUSH
58870: FOR_TO
58871: IFFALSE 59028
// begin _x := ShiftX ( x , d , r + i ) ;
58873: LD_ADDR_VAR 0 5
58877: PUSH
58878: LD_VAR 0 4
58882: PPUSH
58883: LD_VAR 0 8
58887: PPUSH
58888: LD_VAR 0 9
58892: PUSH
58893: LD_VAR 0 10
58897: PLUS
58898: PPUSH
58899: CALL_OW 272
58903: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58904: LD_ADDR_VAR 0 7
58908: PUSH
58909: LD_VAR 0 6
58913: PPUSH
58914: LD_VAR 0 8
58918: PPUSH
58919: LD_VAR 0 9
58923: PUSH
58924: LD_VAR 0 10
58928: PLUS
58929: PPUSH
58930: CALL_OW 273
58934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58935: LD_VAR 0 5
58939: PPUSH
58940: LD_VAR 0 7
58944: PPUSH
58945: CALL_OW 488
58949: PUSH
58950: LD_VAR 0 5
58954: PPUSH
58955: LD_VAR 0 7
58959: PPUSH
58960: CALL_OW 428
58964: PPUSH
58965: CALL_OW 247
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: IN
58980: NOT
58981: AND
58982: IFFALSE 59026
// begin ComMoveXY ( unit , _x , _y ) ;
58984: LD_VAR 0 1
58988: PPUSH
58989: LD_VAR 0 5
58993: PPUSH
58994: LD_VAR 0 7
58998: PPUSH
58999: CALL_OW 111
// result := [ _x , _y ] ;
59003: LD_ADDR_VAR 0 3
59007: PUSH
59008: LD_VAR 0 5
59012: PUSH
59013: LD_VAR 0 7
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// exit ;
59022: POP
59023: POP
59024: GO 59030
// end ; end ;
59026: GO 58870
59028: POP
59029: POP
// end ;
59030: LD_VAR 0 3
59034: RET
