// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadioNoFace ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 586
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadioNoFace ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 586
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; begin
2844: LD_INT 0
2846: PPUSH
// Randomize ;
2847: CALL_OW 10
// SayRadioNoFace ( doc , DDocA & rand ( 1 , 8 ) ) ;
2851: LD_EXP 2
2855: PPUSH
2856: LD_STRING DDocA
2858: PUSH
2859: LD_INT 1
2861: PPUSH
2862: LD_INT 8
2864: PPUSH
2865: CALL_OW 12
2869: STR
2870: PPUSH
2871: CALL_OW 586
// end ; end_of_file
2875: LD_VAR 0 1
2879: RET
// export pom , hover , attackN ; every 1 do
2880: GO 2882
2882: DISABLE
// begin pom := [ ] ;
2883: LD_ADDR_EXP 4
2887: PUSH
2888: EMPTY
2889: ST_TO_ADDR
// hover := [ ] ;
2890: LD_ADDR_EXP 5
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// attackN := 0 ;
2897: LD_ADDR_EXP 6
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$01 trigger pom do var i , f , z , target ;
2906: LD_EXP 4
2910: IFFALSE 3332
2912: GO 2914
2914: DISABLE
2915: LD_INT 0
2917: PPUSH
2918: PPUSH
2919: PPUSH
2920: PPUSH
// begin enable ;
2921: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: LD_INT 22
2929: PUSH
2930: LD_INT 7
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PPUSH
2937: CALL_OW 69
2941: ST_TO_ADDR
// for i = 1 to pom do
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_EXP 4
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3016
// if not HasTask ( pom [ i ] ) then
2960: LD_EXP 4
2964: PUSH
2965: LD_VAR 0 1
2969: ARRAY
2970: PPUSH
2971: CALL_OW 314
2975: NOT
2976: IFFALSE 3014
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
2978: LD_EXP 4
2982: PUSH
2983: LD_VAR 0 1
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_EXP 4
2998: PUSH
2999: LD_VAR 0 1
3003: ARRAY
3004: PPUSH
3005: CALL_OW 74
3009: PPUSH
3010: CALL_OW 115
3014: GO 2957
3016: POP
3017: POP
// if hover then
3018: LD_EXP 5
3022: IFFALSE 3332
// begin for i = 1 to hover do
3024: LD_ADDR_VAR 0 1
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 5
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3330
// begin if GetLives ( hover [ i ] ) < 250 then
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 256
3057: PUSH
3058: LD_INT 250
3060: LESS
3061: IFFALSE 3128
// begin for z = 1 to 1 + Difficulty do
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: DOUBLE
3069: LD_INT 1
3071: DEC
3072: ST_TO_ADDR
3073: LD_INT 1
3075: PUSH
3076: LD_OWVAR 67
3080: PLUS
3081: PUSH
3082: FOR_TO
3083: IFFALSE 3126
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3085: LD_EXP 5
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: CALL_OW 250
3100: PPUSH
3101: LD_EXP 5
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 251
3116: PPUSH
3117: LD_INT 10
3119: PPUSH
3120: CALL_OW 453
3124: GO 3082
3126: POP
3127: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 2
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 3
3145: PUSH
3146: LD_INT 54
3148: PUSH
3149: EMPTY
3150: LIST
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PPUSH
3160: CALL_OW 72
3164: PUSH
3165: LD_INT 0
3167: GREATER
3168: IFFALSE 3250
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3170: LD_ADDR_VAR 0 4
3174: PUSH
3175: LD_VAR 0 2
3179: PPUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 2
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 54
3195: PUSH
3196: EMPTY
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PPUSH
3207: CALL_OW 72
3211: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3212: LD_EXP 5
3216: PUSH
3217: LD_VAR 0 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 4
3227: PPUSH
3228: LD_EXP 5
3232: PUSH
3233: LD_VAR 0 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 74
3243: PPUSH
3244: CALL_OW 115
// end else
3248: GO 3328
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_INT 21
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 3
3272: PUSH
3273: LD_INT 54
3275: PUSH
3276: EMPTY
3277: LIST
3278: PUSH
3279: EMPTY
3280: LIST
3281: LIST
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PPUSH
3287: CALL_OW 72
3291: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3292: LD_EXP 5
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_EXP 5
3312: PUSH
3313: LD_VAR 0 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 74
3323: PPUSH
3324: CALL_OW 115
// end ; end ;
3328: GO 3039
3330: POP
3331: POP
// end ; end ;
3332: PPOPN 4
3334: END
// every 3 3$10 do var i , un ;
3335: GO 3337
3337: DISABLE
3338: LD_INT 0
3340: PPUSH
3341: PPUSH
// begin uc_side := 7 ;
3342: LD_ADDR_OWVAR 20
3346: PUSH
3347: LD_INT 7
3349: ST_TO_ADDR
// uc_nation := 1 ;
3350: LD_ADDR_OWVAR 21
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// for i = 1 to 2 do
3358: LD_ADDR_VAR 0 1
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 2
3370: PUSH
3371: FOR_TO
3372: IFFALSE 3537
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3374: LD_INT 1
3376: PPUSH
3377: LD_INT 5
3379: PPUSH
3380: LD_INT 7
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: LD_INT 6
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: PUSH
3394: LD_OWVAR 67
3398: ARRAY
3399: PPUSH
3400: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3404: LD_ADDR_OWVAR 37
3408: PUSH
3409: LD_INT 1
3411: ST_TO_ADDR
// vc_engine := engine_combustion ;
3412: LD_ADDR_OWVAR 39
3416: PUSH
3417: LD_INT 1
3419: ST_TO_ADDR
// vc_control := control_manual ;
3420: LD_ADDR_OWVAR 38
3424: PUSH
3425: LD_INT 1
3427: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3428: LD_ADDR_OWVAR 41
3432: PUSH
3433: LD_INT 66
3435: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3436: LD_ADDR_OWVAR 40
3440: PUSH
3441: LD_INT 2
3443: ST_TO_ADDR
// un := CreateVehicle ;
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: CALL_OW 45
3453: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3454: LD_VAR 0 2
3458: PPUSH
3459: LD_INT 3
3461: PPUSH
3462: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3466: LD_VAR 0 2
3470: PPUSH
3471: LD_INT 48
3473: PPUSH
3474: LD_INT 3
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3484: CALL_OW 44
3488: PPUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3498: LD_VAR 0 2
3502: PPUSH
3503: LD_INT 49
3505: PPUSH
3506: LD_INT 17
3508: PPUSH
3509: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 48
3520: PPUSH
3521: LD_INT 36
3523: PPUSH
3524: CALL_OW 171
// Wait ( 0 0$02 ) ;
3528: LD_INT 70
3530: PPUSH
3531: CALL_OW 67
// end ;
3535: GO 3371
3537: POP
3538: POP
// end ;
3539: PPOPN 2
3541: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3542: LD_EXP 6
3546: PUSH
3547: LD_INT 10
3549: PUSH
3550: LD_INT 12
3552: PUSH
3553: LD_INT 14
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_OWVAR 67
3565: ARRAY
3566: LESS
3567: IFFALSE 4273
3569: GO 3571
3571: DISABLE
3572: LD_INT 0
3574: PPUSH
3575: PPUSH
// begin enable ;
3576: ENABLE
// Randomize ;
3577: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3581: LD_INT 35
3583: PPUSH
3584: LD_INT 6265
3586: PPUSH
3587: CALL_OW 12
3591: PPUSH
3592: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3596: LD_EXP 6
3600: PUSH
3601: LD_INT 4
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_OWVAR 67
3619: ARRAY
3620: LESS
3621: IFFALSE 3641
// c := Rand ( 1 , 2 ) else
3623: LD_ADDR_VAR 0 1
3627: PUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 2
3633: PPUSH
3634: CALL_OW 12
3638: ST_TO_ADDR
3639: GO 3657
// c := Rand ( 1 , 3 ) ;
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: LD_INT 1
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: CALL_OW 12
3656: ST_TO_ADDR
// if attackN = 0 then
3657: LD_EXP 6
3661: PUSH
3662: LD_INT 0
3664: EQUAL
3665: IFFALSE 3681
// Say ( com , DJackAttack ) else
3667: LD_EXP 1
3671: PPUSH
3672: LD_STRING DJackAttack
3674: PPUSH
3675: CALL_OW 88
3679: GO 3685
// DSay ;
3681: CALL 2844 0 0
// case c of 1 :
3685: LD_VAR 0 1
3689: PUSH
3690: LD_INT 1
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3880
3698: POP
// begin pom := pom ^ Attack ( 1 ) ;
3699: LD_ADDR_EXP 4
3703: PUSH
3704: LD_EXP 4
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: CALL 1355 0 1
3716: ADD
3717: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3718: LD_INT 420
3720: PPUSH
3721: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3725: LD_ADDR_EXP 4
3729: PUSH
3730: LD_EXP 4
3734: PUSH
3735: LD_INT 3
3737: PPUSH
3738: CALL 1355 0 1
3742: ADD
3743: ST_TO_ADDR
// if Difficulty > 2 then
3744: LD_OWVAR 67
3748: PUSH
3749: LD_INT 2
3751: GREATER
3752: IFFALSE 3780
// begin Wait ( 0 0$46 ) ;
3754: LD_INT 1610
3756: PPUSH
3757: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3761: LD_ADDR_EXP 4
3765: PUSH
3766: LD_EXP 4
3770: PUSH
3771: LD_INT 4
3773: PPUSH
3774: CALL 1355 0 1
3778: ADD
3779: ST_TO_ADDR
// end ; if attackN > 4 then
3780: LD_EXP 6
3784: PUSH
3785: LD_INT 4
3787: GREATER
3788: IFFALSE 3816
// begin Wait ( 0 0$12 ) ;
3790: LD_INT 420
3792: PPUSH
3793: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3797: LD_ADDR_EXP 4
3801: PUSH
3802: LD_EXP 4
3806: PUSH
3807: LD_INT 3
3809: PPUSH
3810: CALL 1355 0 1
3814: ADD
3815: ST_TO_ADDR
// end ; if attackN > 8 then
3816: LD_EXP 6
3820: PUSH
3821: LD_INT 8
3823: GREATER
3824: IFFALSE 3878
// begin Wait ( 0 0$12 ) ;
3826: LD_INT 420
3828: PPUSH
3829: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 100
3843: PPUSH
3844: CALL_OW 12
3848: ST_TO_ADDR
// if l < 45 then
3849: LD_VAR 0 2
3853: PUSH
3854: LD_INT 45
3856: LESS
3857: IFFALSE 3878
// pom := pom ^ Attack ( 2 ) ;
3859: LD_ADDR_EXP 4
3863: PUSH
3864: LD_EXP 4
3868: PUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL 1355 0 1
3876: ADD
3877: ST_TO_ADDR
// end ; end ; 2 :
3878: GO 4169
3880: LD_INT 2
3882: DOUBLE
3883: EQUAL
3884: IFTRUE 3888
3886: GO 4038
3888: POP
// begin pom := pom ^ Attack ( 2 ) ;
3889: LD_ADDR_EXP 4
3893: PUSH
3894: LD_EXP 4
3898: PUSH
3899: LD_INT 2
3901: PPUSH
3902: CALL 1355 0 1
3906: ADD
3907: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
3908: LD_ADDR_EXP 4
3912: PUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 3
3920: PPUSH
3921: CALL 1355 0 1
3925: ADD
3926: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
3927: LD_OWVAR 67
3931: PUSH
3932: LD_INT 1
3934: GREATER
3935: IFFALSE 3958
3937: PUSH
3938: LD_INT 63
3940: PPUSH
3941: LD_INT 37
3943: PPUSH
3944: CALL_OW 428
3948: PPUSH
3949: CALL_OW 266
3953: PUSH
3954: LD_INT 30
3956: EQUAL
3957: AND
3958: IFFALSE 3964
// ComitSib ;
3960: CALL 2766 0 0
// if Difficulty > 2 then
3964: LD_OWVAR 67
3968: PUSH
3969: LD_INT 2
3971: GREATER
3972: IFFALSE 4000
// begin Wait ( 0 0$25 ) ;
3974: LD_INT 875
3976: PPUSH
3977: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3981: LD_ADDR_EXP 4
3985: PUSH
3986: LD_EXP 4
3990: PUSH
3991: LD_INT 4
3993: PPUSH
3994: CALL 1355 0 1
3998: ADD
3999: ST_TO_ADDR
// end ; if attackN > 7 then
4000: LD_EXP 6
4004: PUSH
4005: LD_INT 7
4007: GREATER
4008: IFFALSE 4036
// begin Wait ( 0 0$15 ) ;
4010: LD_INT 525
4012: PPUSH
4013: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4017: LD_ADDR_EXP 4
4021: PUSH
4022: LD_EXP 4
4026: PUSH
4027: LD_INT 2
4029: PPUSH
4030: CALL 1355 0 1
4034: ADD
4035: ST_TO_ADDR
// end ; end ; 3 :
4036: GO 4169
4038: LD_INT 3
4040: DOUBLE
4041: EQUAL
4042: IFTRUE 4046
4044: GO 4168
4046: POP
// begin pom := pom ^ Attack ( 1 ) ;
4047: LD_ADDR_EXP 4
4051: PUSH
4052: LD_EXP 4
4056: PUSH
4057: LD_INT 1
4059: PPUSH
4060: CALL 1355 0 1
4064: ADD
4065: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4066: LD_INT 70
4068: PPUSH
4069: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4073: LD_ADDR_EXP 4
4077: PUSH
4078: LD_EXP 4
4082: PUSH
4083: LD_INT 2
4085: PPUSH
4086: CALL 1355 0 1
4090: ADD
4091: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4092: LD_INT 2100
4094: PPUSH
4095: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4099: LD_ADDR_EXP 4
4103: PUSH
4104: LD_EXP 4
4108: PUSH
4109: LD_INT 3
4111: PPUSH
4112: CALL 1355 0 1
4116: ADD
4117: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4118: LD_ADDR_EXP 4
4122: PUSH
4123: LD_EXP 4
4127: PUSH
4128: LD_INT 5
4130: PPUSH
4131: CALL 1355 0 1
4135: ADD
4136: ST_TO_ADDR
// if attackN > 10 then
4137: LD_EXP 6
4141: PUSH
4142: LD_INT 10
4144: GREATER
4145: IFFALSE 4166
// pom := pom ^ Attack ( 2 ) ;
4147: LD_ADDR_EXP 4
4151: PUSH
4152: LD_EXP 4
4156: PUSH
4157: LD_INT 2
4159: PPUSH
4160: CALL 1355 0 1
4164: ADD
4165: ST_TO_ADDR
// end ; end ;
4166: GO 4169
4168: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4169: LD_OWVAR 67
4173: PUSH
4174: LD_INT 1
4176: GREATER
4177: IFFALSE 4193
4179: PUSH
4180: LD_EXP 6
4184: PUSH
4185: LD_INT 4
4187: MOD
4188: PUSH
4189: LD_INT 0
4191: EQUAL
4192: AND
4193: IFFALSE 4259
// begin Wait ( 1 1$45 ) ;
4195: LD_INT 3675
4197: PPUSH
4198: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4202: LD_ADDR_EXP 4
4206: PUSH
4207: LD_EXP 4
4211: PUSH
4212: LD_INT 3
4214: PPUSH
4215: CALL 1355 0 1
4219: ADD
4220: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4221: LD_ADDR_EXP 4
4225: PUSH
4226: LD_EXP 4
4230: PUSH
4231: LD_INT 4
4233: PPUSH
4234: CALL 1355 0 1
4238: ADD
4239: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4240: LD_ADDR_EXP 5
4244: PUSH
4245: LD_EXP 5
4249: PUSH
4250: LD_INT 6
4252: PPUSH
4253: CALL 1355 0 1
4257: ADD
4258: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4259: LD_ADDR_EXP 6
4263: PUSH
4264: LD_EXP 6
4268: PUSH
4269: LD_INT 1
4271: PLUS
4272: ST_TO_ADDR
// end ;
4273: PPOPN 2
4275: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4276: LD_EXP 6
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: LD_INT 12
4286: PUSH
4287: LD_INT 14
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_OWVAR 67
4299: ARRAY
4300: GREATEREQUAL
4301: IFFALSE 4323
4303: PUSH
4304: LD_INT 22
4306: PUSH
4307: LD_INT 2
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 69
4318: PUSH
4319: LD_INT 0
4321: EQUAL
4322: AND
4323: IFFALSE 4366
4325: GO 4327
4327: DISABLE
// begin SayRadioNoFace ( doc , DDocEnd ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DDocEnd
4335: PPUSH
4336: CALL_OW 586
// wait ( 0 0$03 ) ;
4340: LD_INT 105
4342: PPUSH
4343: CALL_OW 67
// Query ( QWin ) ;
4347: LD_STRING QWin
4349: PPUSH
4350: CALL_OW 97
// music_nat := 5 ;
4354: LD_ADDR_OWVAR 71
4358: PUSH
4359: LD_INT 5
4361: ST_TO_ADDR
// YouWin ;
4362: CALL_OW 103
// end ; end_of_file
4366: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4367: LD_VAR 0 1
4371: PPUSH
4372: CALL 20559 0 1
// if un = brave or un = com then
4376: LD_VAR 0 1
4380: PUSH
4381: LD_INT 1
4383: EQUAL
4384: IFTRUE 4398
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_EXP 1
4396: EQUAL
4397: OR
4398: IFFALSE 4419
// begin SayRadioNoFace ( doc , DDocWin ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DDocWin
4407: PPUSH
4408: CALL_OW 586
// YouLost (  ) ;
4412: LD_STRING 
4414: PPUSH
4415: CALL_OW 104
// end ; end ;
4419: PPOPN 1
4421: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4422: LD_VAR 0 1
4426: PPUSH
4427: LD_VAR 0 2
4431: PPUSH
4432: LD_VAR 0 3
4436: PPUSH
4437: CALL 20593 0 3
// end ;
4441: PPOPN 3
4443: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4444: LD_VAR 0 1
4448: PPUSH
4449: CALL 20601 0 1
// end ;
4453: PPOPN 1
4455: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
4456: LD_VAR 0 1
4460: PPUSH
4461: LD_VAR 0 2
4465: PPUSH
4466: CALL 20617 0 2
// end ; end_of_file end_of_file
4470: PPOPN 2
4472: END
// export globalGameSaveCounter ; every 0 0$1 do
4473: GO 4475
4475: DISABLE
// begin enable ;
4476: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4477: LD_STRING updateTimer(
4479: PUSH
4480: LD_OWVAR 1
4484: STR
4485: PUSH
4486: LD_STRING );
4488: STR
4489: PPUSH
4490: CALL_OW 559
// end ;
4494: END
// every 0 0$1 do
4495: GO 4497
4497: DISABLE
// begin globalGameSaveCounter := 0 ;
4498: LD_ADDR_EXP 7
4502: PUSH
4503: LD_INT 0
4505: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4506: LD_STRING setGameSaveCounter(0)
4508: PPUSH
4509: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4513: LD_STRING initStreamRollete();
4515: PPUSH
4516: CALL_OW 559
// InitStreamMode ;
4520: CALL 5872 0 0
// DefineStreamItems ( false ) ;
4524: LD_INT 0
4526: PPUSH
4527: CALL 6336 0 1
// end ;
4531: END
// export function SOS_MapStart ( ) ; begin
4532: LD_INT 0
4534: PPUSH
// if streamModeActive then
4535: LD_EXP 8
4539: IFFALSE 4548
// DefineStreamItems ( true ) ;
4541: LD_INT 1
4543: PPUSH
4544: CALL 6336 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
4548: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
4550: PPUSH
4551: CALL_OW 559
// UpdateLuaVariables ( ) ;
4555: CALL 4572 0 0
// UpdateFactoryWaypoints ( ) ;
4559: CALL 19458 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4563: CALL 19710 0 0
// end ;
4567: LD_VAR 0 1
4571: RET
// function UpdateLuaVariables ( ) ; begin
4572: LD_INT 0
4574: PPUSH
// if globalGameSaveCounter then
4575: LD_EXP 7
4579: IFFALSE 4613
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4581: LD_ADDR_EXP 7
4585: PUSH
4586: LD_EXP 7
4590: PPUSH
4591: CALL 66606 0 1
4595: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4596: LD_STRING setGameSaveCounter(
4598: PUSH
4599: LD_EXP 7
4603: STR
4604: PUSH
4605: LD_STRING )
4607: STR
4608: PPUSH
4609: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4613: LD_STRING setGameDifficulty(
4615: PUSH
4616: LD_OWVAR 67
4620: STR
4621: PUSH
4622: LD_STRING )
4624: STR
4625: PPUSH
4626: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4630: LD_STRING displayDifficulty(
4632: PUSH
4633: LD_OWVAR 67
4637: STR
4638: PUSH
4639: LD_STRING )
4641: STR
4642: PPUSH
4643: CALL_OW 559
// end ;
4647: LD_VAR 0 1
4651: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4652: LD_INT 0
4654: PPUSH
// if p2 = stream_mode then
4655: LD_VAR 0 2
4659: PUSH
4660: LD_INT 100
4662: EQUAL
4663: IFFALSE 5666
// begin if not StreamModeActive then
4665: LD_EXP 8
4669: NOT
4670: IFFALSE 4680
// StreamModeActive := true ;
4672: LD_ADDR_EXP 8
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 0 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 0
4687: EQUAL
4688: IFFALSE 4694
// InitStreamMode ;
4690: CALL 5872 0 0
// if p3 = 1 then
4694: LD_VAR 0 3
4698: PUSH
4699: LD_INT 1
4701: EQUAL
4702: IFFALSE 4712
// sRocket := true ;
4704: LD_ADDR_EXP 13
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// if p3 = 2 then
4712: LD_VAR 0 3
4716: PUSH
4717: LD_INT 2
4719: EQUAL
4720: IFFALSE 4730
// sSpeed := true ;
4722: LD_ADDR_EXP 12
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// if p3 = 3 then
4730: LD_VAR 0 3
4734: PUSH
4735: LD_INT 3
4737: EQUAL
4738: IFFALSE 4748
// sEngine := true ;
4740: LD_ADDR_EXP 14
4744: PUSH
4745: LD_INT 1
4747: ST_TO_ADDR
// if p3 = 4 then
4748: LD_VAR 0 3
4752: PUSH
4753: LD_INT 4
4755: EQUAL
4756: IFFALSE 4766
// sSpec := true ;
4758: LD_ADDR_EXP 11
4762: PUSH
4763: LD_INT 1
4765: ST_TO_ADDR
// if p3 = 5 then
4766: LD_VAR 0 3
4770: PUSH
4771: LD_INT 5
4773: EQUAL
4774: IFFALSE 4784
// sLevel := true ;
4776: LD_ADDR_EXP 15
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// if p3 = 6 then
4784: LD_VAR 0 3
4788: PUSH
4789: LD_INT 6
4791: EQUAL
4792: IFFALSE 4802
// sArmoury := true ;
4794: LD_ADDR_EXP 16
4798: PUSH
4799: LD_INT 1
4801: ST_TO_ADDR
// if p3 = 7 then
4802: LD_VAR 0 3
4806: PUSH
4807: LD_INT 7
4809: EQUAL
4810: IFFALSE 4820
// sRadar := true ;
4812: LD_ADDR_EXP 17
4816: PUSH
4817: LD_INT 1
4819: ST_TO_ADDR
// if p3 = 8 then
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 8
4827: EQUAL
4828: IFFALSE 4838
// sBunker := true ;
4830: LD_ADDR_EXP 18
4834: PUSH
4835: LD_INT 1
4837: ST_TO_ADDR
// if p3 = 9 then
4838: LD_VAR 0 3
4842: PUSH
4843: LD_INT 9
4845: EQUAL
4846: IFFALSE 4856
// sHack := true ;
4848: LD_ADDR_EXP 19
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// if p3 = 10 then
4856: LD_VAR 0 3
4860: PUSH
4861: LD_INT 10
4863: EQUAL
4864: IFFALSE 4874
// sFire := true ;
4866: LD_ADDR_EXP 20
4870: PUSH
4871: LD_INT 1
4873: ST_TO_ADDR
// if p3 = 11 then
4874: LD_VAR 0 3
4878: PUSH
4879: LD_INT 11
4881: EQUAL
4882: IFFALSE 4892
// sRefresh := true ;
4884: LD_ADDR_EXP 21
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// if p3 = 12 then
4892: LD_VAR 0 3
4896: PUSH
4897: LD_INT 12
4899: EQUAL
4900: IFFALSE 4910
// sExp := true ;
4902: LD_ADDR_EXP 22
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// if p3 = 13 then
4910: LD_VAR 0 3
4914: PUSH
4915: LD_INT 13
4917: EQUAL
4918: IFFALSE 4928
// sDepot := true ;
4920: LD_ADDR_EXP 23
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// if p3 = 14 then
4928: LD_VAR 0 3
4932: PUSH
4933: LD_INT 14
4935: EQUAL
4936: IFFALSE 4946
// sFlag := true ;
4938: LD_ADDR_EXP 24
4942: PUSH
4943: LD_INT 1
4945: ST_TO_ADDR
// if p3 = 15 then
4946: LD_VAR 0 3
4950: PUSH
4951: LD_INT 15
4953: EQUAL
4954: IFFALSE 4964
// sKamikadze := true ;
4956: LD_ADDR_EXP 32
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// if p3 = 16 then
4964: LD_VAR 0 3
4968: PUSH
4969: LD_INT 16
4971: EQUAL
4972: IFFALSE 4982
// sTroll := true ;
4974: LD_ADDR_EXP 33
4978: PUSH
4979: LD_INT 1
4981: ST_TO_ADDR
// if p3 = 17 then
4982: LD_VAR 0 3
4986: PUSH
4987: LD_INT 17
4989: EQUAL
4990: IFFALSE 5000
// sSlow := true ;
4992: LD_ADDR_EXP 34
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// if p3 = 18 then
5000: LD_VAR 0 3
5004: PUSH
5005: LD_INT 18
5007: EQUAL
5008: IFFALSE 5018
// sLack := true ;
5010: LD_ADDR_EXP 35
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// if p3 = 19 then
5018: LD_VAR 0 3
5022: PUSH
5023: LD_INT 19
5025: EQUAL
5026: IFFALSE 5036
// sTank := true ;
5028: LD_ADDR_EXP 37
5032: PUSH
5033: LD_INT 1
5035: ST_TO_ADDR
// if p3 = 20 then
5036: LD_VAR 0 3
5040: PUSH
5041: LD_INT 20
5043: EQUAL
5044: IFFALSE 5054
// sRemote := true ;
5046: LD_ADDR_EXP 38
5050: PUSH
5051: LD_INT 1
5053: ST_TO_ADDR
// if p3 = 21 then
5054: LD_VAR 0 3
5058: PUSH
5059: LD_INT 21
5061: EQUAL
5062: IFFALSE 5072
// sPowell := true ;
5064: LD_ADDR_EXP 39
5068: PUSH
5069: LD_INT 1
5071: ST_TO_ADDR
// if p3 = 22 then
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 22
5079: EQUAL
5080: IFFALSE 5090
// sTeleport := true ;
5082: LD_ADDR_EXP 42
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// if p3 = 23 then
5090: LD_VAR 0 3
5094: PUSH
5095: LD_INT 23
5097: EQUAL
5098: IFFALSE 5108
// sOilTower := true ;
5100: LD_ADDR_EXP 44
5104: PUSH
5105: LD_INT 1
5107: ST_TO_ADDR
// if p3 = 24 then
5108: LD_VAR 0 3
5112: PUSH
5113: LD_INT 24
5115: EQUAL
5116: IFFALSE 5126
// sShovel := true ;
5118: LD_ADDR_EXP 45
5122: PUSH
5123: LD_INT 1
5125: ST_TO_ADDR
// if p3 = 25 then
5126: LD_VAR 0 3
5130: PUSH
5131: LD_INT 25
5133: EQUAL
5134: IFFALSE 5144
// sSheik := true ;
5136: LD_ADDR_EXP 46
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// if p3 = 26 then
5144: LD_VAR 0 3
5148: PUSH
5149: LD_INT 26
5151: EQUAL
5152: IFFALSE 5162
// sEarthquake := true ;
5154: LD_ADDR_EXP 48
5158: PUSH
5159: LD_INT 1
5161: ST_TO_ADDR
// if p3 = 27 then
5162: LD_VAR 0 3
5166: PUSH
5167: LD_INT 27
5169: EQUAL
5170: IFFALSE 5180
// sAI := true ;
5172: LD_ADDR_EXP 49
5176: PUSH
5177: LD_INT 1
5179: ST_TO_ADDR
// if p3 = 28 then
5180: LD_VAR 0 3
5184: PUSH
5185: LD_INT 28
5187: EQUAL
5188: IFFALSE 5198
// sCargo := true ;
5190: LD_ADDR_EXP 52
5194: PUSH
5195: LD_INT 1
5197: ST_TO_ADDR
// if p3 = 29 then
5198: LD_VAR 0 3
5202: PUSH
5203: LD_INT 29
5205: EQUAL
5206: IFFALSE 5216
// sDLaser := true ;
5208: LD_ADDR_EXP 53
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// if p3 = 30 then
5216: LD_VAR 0 3
5220: PUSH
5221: LD_INT 30
5223: EQUAL
5224: IFFALSE 5234
// sExchange := true ;
5226: LD_ADDR_EXP 54
5230: PUSH
5231: LD_INT 1
5233: ST_TO_ADDR
// if p3 = 31 then
5234: LD_VAR 0 3
5238: PUSH
5239: LD_INT 31
5241: EQUAL
5242: IFFALSE 5252
// sFac := true ;
5244: LD_ADDR_EXP 55
5248: PUSH
5249: LD_INT 1
5251: ST_TO_ADDR
// if p3 = 32 then
5252: LD_VAR 0 3
5256: PUSH
5257: LD_INT 32
5259: EQUAL
5260: IFFALSE 5270
// sPower := true ;
5262: LD_ADDR_EXP 56
5266: PUSH
5267: LD_INT 1
5269: ST_TO_ADDR
// if p3 = 33 then
5270: LD_VAR 0 3
5274: PUSH
5275: LD_INT 33
5277: EQUAL
5278: IFFALSE 5288
// sRandom := true ;
5280: LD_ADDR_EXP 57
5284: PUSH
5285: LD_INT 1
5287: ST_TO_ADDR
// if p3 = 34 then
5288: LD_VAR 0 3
5292: PUSH
5293: LD_INT 34
5295: EQUAL
5296: IFFALSE 5306
// sShield := true ;
5298: LD_ADDR_EXP 58
5302: PUSH
5303: LD_INT 1
5305: ST_TO_ADDR
// if p3 = 35 then
5306: LD_VAR 0 3
5310: PUSH
5311: LD_INT 35
5313: EQUAL
5314: IFFALSE 5324
// sTime := true ;
5316: LD_ADDR_EXP 59
5320: PUSH
5321: LD_INT 1
5323: ST_TO_ADDR
// if p3 = 36 then
5324: LD_VAR 0 3
5328: PUSH
5329: LD_INT 36
5331: EQUAL
5332: IFFALSE 5342
// sTools := true ;
5334: LD_ADDR_EXP 60
5338: PUSH
5339: LD_INT 1
5341: ST_TO_ADDR
// if p3 = 101 then
5342: LD_VAR 0 3
5346: PUSH
5347: LD_INT 101
5349: EQUAL
5350: IFFALSE 5360
// sSold := true ;
5352: LD_ADDR_EXP 25
5356: PUSH
5357: LD_INT 1
5359: ST_TO_ADDR
// if p3 = 102 then
5360: LD_VAR 0 3
5364: PUSH
5365: LD_INT 102
5367: EQUAL
5368: IFFALSE 5378
// sDiff := true ;
5370: LD_ADDR_EXP 26
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// if p3 = 103 then
5378: LD_VAR 0 3
5382: PUSH
5383: LD_INT 103
5385: EQUAL
5386: IFFALSE 5396
// sFog := true ;
5388: LD_ADDR_EXP 29
5392: PUSH
5393: LD_INT 1
5395: ST_TO_ADDR
// if p3 = 104 then
5396: LD_VAR 0 3
5400: PUSH
5401: LD_INT 104
5403: EQUAL
5404: IFFALSE 5414
// sReset := true ;
5406: LD_ADDR_EXP 30
5410: PUSH
5411: LD_INT 1
5413: ST_TO_ADDR
// if p3 = 105 then
5414: LD_VAR 0 3
5418: PUSH
5419: LD_INT 105
5421: EQUAL
5422: IFFALSE 5432
// sSun := true ;
5424: LD_ADDR_EXP 31
5428: PUSH
5429: LD_INT 1
5431: ST_TO_ADDR
// if p3 = 106 then
5432: LD_VAR 0 3
5436: PUSH
5437: LD_INT 106
5439: EQUAL
5440: IFFALSE 5450
// sTiger := true ;
5442: LD_ADDR_EXP 27
5446: PUSH
5447: LD_INT 1
5449: ST_TO_ADDR
// if p3 = 107 then
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 107
5457: EQUAL
5458: IFFALSE 5468
// sBomb := true ;
5460: LD_ADDR_EXP 28
5464: PUSH
5465: LD_INT 1
5467: ST_TO_ADDR
// if p3 = 108 then
5468: LD_VAR 0 3
5472: PUSH
5473: LD_INT 108
5475: EQUAL
5476: IFFALSE 5486
// sWound := true ;
5478: LD_ADDR_EXP 36
5482: PUSH
5483: LD_INT 1
5485: ST_TO_ADDR
// if p3 = 109 then
5486: LD_VAR 0 3
5490: PUSH
5491: LD_INT 109
5493: EQUAL
5494: IFFALSE 5504
// sBetray := true ;
5496: LD_ADDR_EXP 40
5500: PUSH
5501: LD_INT 1
5503: ST_TO_ADDR
// if p3 = 110 then
5504: LD_VAR 0 3
5508: PUSH
5509: LD_INT 110
5511: EQUAL
5512: IFFALSE 5522
// sContamin := true ;
5514: LD_ADDR_EXP 41
5518: PUSH
5519: LD_INT 1
5521: ST_TO_ADDR
// if p3 = 111 then
5522: LD_VAR 0 3
5526: PUSH
5527: LD_INT 111
5529: EQUAL
5530: IFFALSE 5540
// sOil := true ;
5532: LD_ADDR_EXP 43
5536: PUSH
5537: LD_INT 1
5539: ST_TO_ADDR
// if p3 = 112 then
5540: LD_VAR 0 3
5544: PUSH
5545: LD_INT 112
5547: EQUAL
5548: IFFALSE 5558
// sStu := true ;
5550: LD_ADDR_EXP 47
5554: PUSH
5555: LD_INT 1
5557: ST_TO_ADDR
// if p3 = 113 then
5558: LD_VAR 0 3
5562: PUSH
5563: LD_INT 113
5565: EQUAL
5566: IFFALSE 5576
// sBazooka := true ;
5568: LD_ADDR_EXP 50
5572: PUSH
5573: LD_INT 1
5575: ST_TO_ADDR
// if p3 = 114 then
5576: LD_VAR 0 3
5580: PUSH
5581: LD_INT 114
5583: EQUAL
5584: IFFALSE 5594
// sMortar := true ;
5586: LD_ADDR_EXP 51
5590: PUSH
5591: LD_INT 1
5593: ST_TO_ADDR
// if p3 = 115 then
5594: LD_VAR 0 3
5598: PUSH
5599: LD_INT 115
5601: EQUAL
5602: IFFALSE 5612
// sRanger := true ;
5604: LD_ADDR_EXP 61
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// if p3 = 116 then
5612: LD_VAR 0 3
5616: PUSH
5617: LD_INT 116
5619: EQUAL
5620: IFFALSE 5630
// sComputer := true ;
5622: LD_ADDR_EXP 62
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// if p3 = 117 then
5630: LD_VAR 0 3
5634: PUSH
5635: LD_INT 117
5637: EQUAL
5638: IFFALSE 5648
// s30 := true ;
5640: LD_ADDR_EXP 63
5644: PUSH
5645: LD_INT 1
5647: ST_TO_ADDR
// if p3 = 118 then
5648: LD_VAR 0 3
5652: PUSH
5653: LD_INT 118
5655: EQUAL
5656: IFFALSE 5666
// s60 := true ;
5658: LD_ADDR_EXP 64
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
// end ; if p2 = hack_mode then
5666: LD_VAR 0 2
5670: PUSH
5671: LD_INT 101
5673: EQUAL
5674: IFFALSE 5802
// begin case p3 of 1 :
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: DOUBLE
5684: EQUAL
5685: IFTRUE 5689
5687: GO 5696
5689: POP
// hHackUnlimitedResources ; 2 :
5690: CALL 18065 0 0
5694: GO 5802
5696: LD_INT 2
5698: DOUBLE
5699: EQUAL
5700: IFTRUE 5704
5702: GO 5711
5704: POP
// hHackSetLevel10 ; 3 :
5705: CALL 18198 0 0
5709: GO 5802
5711: LD_INT 3
5713: DOUBLE
5714: EQUAL
5715: IFTRUE 5719
5717: GO 5726
5719: POP
// hHackSetLevel10YourUnits ; 4 :
5720: CALL 18283 0 0
5724: GO 5802
5726: LD_INT 4
5728: DOUBLE
5729: EQUAL
5730: IFTRUE 5734
5732: GO 5741
5734: POP
// hHackInvincible ; 5 :
5735: CALL 18731 0 0
5739: GO 5802
5741: LD_INT 5
5743: DOUBLE
5744: EQUAL
5745: IFTRUE 5749
5747: GO 5756
5749: POP
// hHackInvisible ; 6 :
5750: CALL 18842 0 0
5754: GO 5802
5756: LD_INT 6
5758: DOUBLE
5759: EQUAL
5760: IFTRUE 5764
5762: GO 5771
5764: POP
// hHackChangeYourSide ; 7 :
5765: CALL 18899 0 0
5769: GO 5802
5771: LD_INT 7
5773: DOUBLE
5774: EQUAL
5775: IFTRUE 5779
5777: GO 5786
5779: POP
// hHackChangeUnitSide ; 8 :
5780: CALL 18941 0 0
5784: GO 5802
5786: LD_INT 8
5788: DOUBLE
5789: EQUAL
5790: IFTRUE 5794
5792: GO 5801
5794: POP
// hHackFog ; end ;
5795: CALL 19042 0 0
5799: GO 5802
5801: POP
// end ; if p2 = game_save_mode then
5802: LD_VAR 0 2
5806: PUSH
5807: LD_INT 102
5809: EQUAL
5810: IFFALSE 5867
// begin if p3 = 1 then
5812: LD_VAR 0 3
5816: PUSH
5817: LD_INT 1
5819: EQUAL
5820: IFFALSE 5832
// globalGameSaveCounter := p4 ;
5822: LD_ADDR_EXP 7
5826: PUSH
5827: LD_VAR 0 4
5831: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5832: LD_VAR 0 3
5836: PUSH
5837: LD_INT 2
5839: EQUAL
5840: IFFALSE 5848
5842: PUSH
5843: LD_EXP 7
5847: AND
5848: IFFALSE 5867
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5850: LD_STRING setGameSaveCounter(
5852: PUSH
5853: LD_EXP 7
5857: STR
5858: PUSH
5859: LD_STRING )
5861: STR
5862: PPUSH
5863: CALL_OW 559
// end ; end ;
5867: LD_VAR 0 7
5871: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5872: LD_INT 0
5874: PPUSH
// streamModeActive := false ;
5875: LD_ADDR_EXP 8
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// normalCounter := 36 ;
5883: LD_ADDR_EXP 9
5887: PUSH
5888: LD_INT 36
5890: ST_TO_ADDR
// hardcoreCounter := 18 ;
5891: LD_ADDR_EXP 10
5895: PUSH
5896: LD_INT 18
5898: ST_TO_ADDR
// sRocket := false ;
5899: LD_ADDR_EXP 13
5903: PUSH
5904: LD_INT 0
5906: ST_TO_ADDR
// sSpeed := false ;
5907: LD_ADDR_EXP 12
5911: PUSH
5912: LD_INT 0
5914: ST_TO_ADDR
// sEngine := false ;
5915: LD_ADDR_EXP 14
5919: PUSH
5920: LD_INT 0
5922: ST_TO_ADDR
// sSpec := false ;
5923: LD_ADDR_EXP 11
5927: PUSH
5928: LD_INT 0
5930: ST_TO_ADDR
// sLevel := false ;
5931: LD_ADDR_EXP 15
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// sArmoury := false ;
5939: LD_ADDR_EXP 16
5943: PUSH
5944: LD_INT 0
5946: ST_TO_ADDR
// sRadar := false ;
5947: LD_ADDR_EXP 17
5951: PUSH
5952: LD_INT 0
5954: ST_TO_ADDR
// sBunker := false ;
5955: LD_ADDR_EXP 18
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// sHack := false ;
5963: LD_ADDR_EXP 19
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// sFire := false ;
5971: LD_ADDR_EXP 20
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// sRefresh := false ;
5979: LD_ADDR_EXP 21
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// sExp := false ;
5987: LD_ADDR_EXP 22
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// sDepot := false ;
5995: LD_ADDR_EXP 23
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// sFlag := false ;
6003: LD_ADDR_EXP 24
6007: PUSH
6008: LD_INT 0
6010: ST_TO_ADDR
// sKamikadze := false ;
6011: LD_ADDR_EXP 32
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// sTroll := false ;
6019: LD_ADDR_EXP 33
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sSlow := false ;
6027: LD_ADDR_EXP 34
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sLack := false ;
6035: LD_ADDR_EXP 35
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sTank := false ;
6043: LD_ADDR_EXP 37
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sRemote := false ;
6051: LD_ADDR_EXP 38
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sPowell := false ;
6059: LD_ADDR_EXP 39
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sTeleport := false ;
6067: LD_ADDR_EXP 42
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sOilTower := false ;
6075: LD_ADDR_EXP 44
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sShovel := false ;
6083: LD_ADDR_EXP 45
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sSheik := false ;
6091: LD_ADDR_EXP 46
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sEarthquake := false ;
6099: LD_ADDR_EXP 48
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sAI := false ;
6107: LD_ADDR_EXP 49
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sCargo := false ;
6115: LD_ADDR_EXP 52
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sDLaser := false ;
6123: LD_ADDR_EXP 53
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sExchange := false ;
6131: LD_ADDR_EXP 54
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sFac := false ;
6139: LD_ADDR_EXP 55
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sPower := false ;
6147: LD_ADDR_EXP 56
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sRandom := false ;
6155: LD_ADDR_EXP 57
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sShield := false ;
6163: LD_ADDR_EXP 58
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sTime := false ;
6171: LD_ADDR_EXP 59
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sTools := false ;
6179: LD_ADDR_EXP 60
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sSold := false ;
6187: LD_ADDR_EXP 25
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sDiff := false ;
6195: LD_ADDR_EXP 26
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sFog := false ;
6203: LD_ADDR_EXP 29
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sReset := false ;
6211: LD_ADDR_EXP 30
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sSun := false ;
6219: LD_ADDR_EXP 31
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sTiger := false ;
6227: LD_ADDR_EXP 27
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sBomb := false ;
6235: LD_ADDR_EXP 28
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sWound := false ;
6243: LD_ADDR_EXP 36
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sBetray := false ;
6251: LD_ADDR_EXP 40
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sContamin := false ;
6259: LD_ADDR_EXP 41
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sOil := false ;
6267: LD_ADDR_EXP 43
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sStu := false ;
6275: LD_ADDR_EXP 47
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sBazooka := false ;
6283: LD_ADDR_EXP 50
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sMortar := false ;
6291: LD_ADDR_EXP 51
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sRanger := false ;
6299: LD_ADDR_EXP 61
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sComputer := false ;
6307: LD_ADDR_EXP 62
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// s30 := false ;
6315: LD_ADDR_EXP 63
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// s60 := false ;
6323: LD_ADDR_EXP 64
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// end ;
6331: LD_VAR 0 1
6335: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6336: LD_INT 0
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
// result := [ ] ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: EMPTY
6351: ST_TO_ADDR
// if campaign_id = 1 then
6352: LD_OWVAR 69
6356: PUSH
6357: LD_INT 1
6359: EQUAL
6360: IFFALSE 9526
// begin case mission_number of 1 :
6362: LD_OWVAR 70
6366: PUSH
6367: LD_INT 1
6369: DOUBLE
6370: EQUAL
6371: IFTRUE 6375
6373: GO 6451
6375: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: LD_INT 4
6386: PUSH
6387: LD_INT 11
6389: PUSH
6390: LD_INT 12
6392: PUSH
6393: LD_INT 15
6395: PUSH
6396: LD_INT 16
6398: PUSH
6399: LD_INT 22
6401: PUSH
6402: LD_INT 23
6404: PUSH
6405: LD_INT 26
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 101
6421: PUSH
6422: LD_INT 102
6424: PUSH
6425: LD_INT 106
6427: PUSH
6428: LD_INT 116
6430: PUSH
6431: LD_INT 117
6433: PUSH
6434: LD_INT 118
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: ST_TO_ADDR
6449: GO 9524
6451: LD_INT 2
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6543
6459: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_INT 2
6467: PUSH
6468: LD_INT 4
6470: PUSH
6471: LD_INT 11
6473: PUSH
6474: LD_INT 12
6476: PUSH
6477: LD_INT 15
6479: PUSH
6480: LD_INT 16
6482: PUSH
6483: LD_INT 22
6485: PUSH
6486: LD_INT 23
6488: PUSH
6489: LD_INT 26
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 101
6505: PUSH
6506: LD_INT 102
6508: PUSH
6509: LD_INT 105
6511: PUSH
6512: LD_INT 106
6514: PUSH
6515: LD_INT 108
6517: PUSH
6518: LD_INT 116
6520: PUSH
6521: LD_INT 117
6523: PUSH
6524: LD_INT 118
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: ST_TO_ADDR
6541: GO 9524
6543: LD_INT 3
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6639
6551: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_INT 2
6559: PUSH
6560: LD_INT 4
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: LD_INT 11
6568: PUSH
6569: LD_INT 12
6571: PUSH
6572: LD_INT 15
6574: PUSH
6575: LD_INT 16
6577: PUSH
6578: LD_INT 22
6580: PUSH
6581: LD_INT 26
6583: PUSH
6584: LD_INT 36
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 102
6604: PUSH
6605: LD_INT 105
6607: PUSH
6608: LD_INT 106
6610: PUSH
6611: LD_INT 108
6613: PUSH
6614: LD_INT 116
6616: PUSH
6617: LD_INT 117
6619: PUSH
6620: LD_INT 118
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 9524
6639: LD_INT 4
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6743
6647: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6648: LD_ADDR_VAR 0 2
6652: PUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 8
6664: PUSH
6665: LD_INT 11
6667: PUSH
6668: LD_INT 12
6670: PUSH
6671: LD_INT 15
6673: PUSH
6674: LD_INT 16
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 23
6682: PUSH
6683: LD_INT 26
6685: PUSH
6686: LD_INT 36
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 101
6705: PUSH
6706: LD_INT 102
6708: PUSH
6709: LD_INT 105
6711: PUSH
6712: LD_INT 106
6714: PUSH
6715: LD_INT 108
6717: PUSH
6718: LD_INT 116
6720: PUSH
6721: LD_INT 117
6723: PUSH
6724: LD_INT 118
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: ST_TO_ADDR
6741: GO 9524
6743: LD_INT 5
6745: DOUBLE
6746: EQUAL
6747: IFTRUE 6751
6749: GO 6863
6751: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6752: LD_ADDR_VAR 0 2
6756: PUSH
6757: LD_INT 2
6759: PUSH
6760: LD_INT 4
6762: PUSH
6763: LD_INT 5
6765: PUSH
6766: LD_INT 6
6768: PUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 15
6780: PUSH
6781: LD_INT 16
6783: PUSH
6784: LD_INT 22
6786: PUSH
6787: LD_INT 23
6789: PUSH
6790: LD_INT 25
6792: PUSH
6793: LD_INT 26
6795: PUSH
6796: LD_INT 36
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 101
6817: PUSH
6818: LD_INT 102
6820: PUSH
6821: LD_INT 105
6823: PUSH
6824: LD_INT 106
6826: PUSH
6827: LD_INT 108
6829: PUSH
6830: LD_INT 109
6832: PUSH
6833: LD_INT 112
6835: PUSH
6836: LD_INT 116
6838: PUSH
6839: LD_INT 117
6841: PUSH
6842: LD_INT 118
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: ST_TO_ADDR
6861: GO 9524
6863: LD_INT 6
6865: DOUBLE
6866: EQUAL
6867: IFTRUE 6871
6869: GO 7003
6871: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6872: LD_ADDR_VAR 0 2
6876: PUSH
6877: LD_INT 2
6879: PUSH
6880: LD_INT 4
6882: PUSH
6883: LD_INT 5
6885: PUSH
6886: LD_INT 6
6888: PUSH
6889: LD_INT 8
6891: PUSH
6892: LD_INT 11
6894: PUSH
6895: LD_INT 12
6897: PUSH
6898: LD_INT 15
6900: PUSH
6901: LD_INT 16
6903: PUSH
6904: LD_INT 20
6906: PUSH
6907: LD_INT 21
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 23
6915: PUSH
6916: LD_INT 25
6918: PUSH
6919: LD_INT 26
6921: PUSH
6922: LD_INT 30
6924: PUSH
6925: LD_INT 31
6927: PUSH
6928: LD_INT 32
6930: PUSH
6931: LD_INT 36
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 101
6957: PUSH
6958: LD_INT 102
6960: PUSH
6961: LD_INT 105
6963: PUSH
6964: LD_INT 106
6966: PUSH
6967: LD_INT 108
6969: PUSH
6970: LD_INT 109
6972: PUSH
6973: LD_INT 112
6975: PUSH
6976: LD_INT 116
6978: PUSH
6979: LD_INT 117
6981: PUSH
6982: LD_INT 118
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: ST_TO_ADDR
7001: GO 9524
7003: LD_INT 7
7005: DOUBLE
7006: EQUAL
7007: IFTRUE 7011
7009: GO 7123
7011: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7012: LD_ADDR_VAR 0 2
7016: PUSH
7017: LD_INT 2
7019: PUSH
7020: LD_INT 4
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: LD_INT 7
7028: PUSH
7029: LD_INT 11
7031: PUSH
7032: LD_INT 12
7034: PUSH
7035: LD_INT 15
7037: PUSH
7038: LD_INT 16
7040: PUSH
7041: LD_INT 20
7043: PUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 22
7049: PUSH
7050: LD_INT 23
7052: PUSH
7053: LD_INT 25
7055: PUSH
7056: LD_INT 26
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 101
7077: PUSH
7078: LD_INT 102
7080: PUSH
7081: LD_INT 103
7083: PUSH
7084: LD_INT 105
7086: PUSH
7087: LD_INT 106
7089: PUSH
7090: LD_INT 108
7092: PUSH
7093: LD_INT 112
7095: PUSH
7096: LD_INT 116
7098: PUSH
7099: LD_INT 117
7101: PUSH
7102: LD_INT 118
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: ST_TO_ADDR
7121: GO 9524
7123: LD_INT 8
7125: DOUBLE
7126: EQUAL
7127: IFTRUE 7131
7129: GO 7271
7131: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7132: LD_ADDR_VAR 0 2
7136: PUSH
7137: LD_INT 2
7139: PUSH
7140: LD_INT 4
7142: PUSH
7143: LD_INT 5
7145: PUSH
7146: LD_INT 6
7148: PUSH
7149: LD_INT 7
7151: PUSH
7152: LD_INT 8
7154: PUSH
7155: LD_INT 11
7157: PUSH
7158: LD_INT 12
7160: PUSH
7161: LD_INT 15
7163: PUSH
7164: LD_INT 16
7166: PUSH
7167: LD_INT 20
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 23
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 26
7184: PUSH
7185: LD_INT 30
7187: PUSH
7188: LD_INT 31
7190: PUSH
7191: LD_INT 32
7193: PUSH
7194: LD_INT 36
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 101
7221: PUSH
7222: LD_INT 102
7224: PUSH
7225: LD_INT 103
7227: PUSH
7228: LD_INT 105
7230: PUSH
7231: LD_INT 106
7233: PUSH
7234: LD_INT 108
7236: PUSH
7237: LD_INT 109
7239: PUSH
7240: LD_INT 112
7242: PUSH
7243: LD_INT 116
7245: PUSH
7246: LD_INT 117
7248: PUSH
7249: LD_INT 118
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: ST_TO_ADDR
7269: GO 9524
7271: LD_INT 9
7273: DOUBLE
7274: EQUAL
7275: IFTRUE 7279
7277: GO 7427
7279: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7280: LD_ADDR_VAR 0 2
7284: PUSH
7285: LD_INT 2
7287: PUSH
7288: LD_INT 4
7290: PUSH
7291: LD_INT 5
7293: PUSH
7294: LD_INT 6
7296: PUSH
7297: LD_INT 7
7299: PUSH
7300: LD_INT 8
7302: PUSH
7303: LD_INT 11
7305: PUSH
7306: LD_INT 12
7308: PUSH
7309: LD_INT 15
7311: PUSH
7312: LD_INT 16
7314: PUSH
7315: LD_INT 20
7317: PUSH
7318: LD_INT 21
7320: PUSH
7321: LD_INT 22
7323: PUSH
7324: LD_INT 23
7326: PUSH
7327: LD_INT 25
7329: PUSH
7330: LD_INT 26
7332: PUSH
7333: LD_INT 28
7335: PUSH
7336: LD_INT 30
7338: PUSH
7339: LD_INT 31
7341: PUSH
7342: LD_INT 32
7344: PUSH
7345: LD_INT 36
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 101
7373: PUSH
7374: LD_INT 102
7376: PUSH
7377: LD_INT 103
7379: PUSH
7380: LD_INT 105
7382: PUSH
7383: LD_INT 106
7385: PUSH
7386: LD_INT 108
7388: PUSH
7389: LD_INT 109
7391: PUSH
7392: LD_INT 112
7394: PUSH
7395: LD_INT 114
7397: PUSH
7398: LD_INT 116
7400: PUSH
7401: LD_INT 117
7403: PUSH
7404: LD_INT 118
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: ST_TO_ADDR
7425: GO 9524
7427: LD_INT 10
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7631
7435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7436: LD_ADDR_VAR 0 2
7440: PUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 4
7446: PUSH
7447: LD_INT 5
7449: PUSH
7450: LD_INT 6
7452: PUSH
7453: LD_INT 7
7455: PUSH
7456: LD_INT 8
7458: PUSH
7459: LD_INT 9
7461: PUSH
7462: LD_INT 10
7464: PUSH
7465: LD_INT 11
7467: PUSH
7468: LD_INT 12
7470: PUSH
7471: LD_INT 13
7473: PUSH
7474: LD_INT 14
7476: PUSH
7477: LD_INT 15
7479: PUSH
7480: LD_INT 16
7482: PUSH
7483: LD_INT 17
7485: PUSH
7486: LD_INT 18
7488: PUSH
7489: LD_INT 19
7491: PUSH
7492: LD_INT 20
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 22
7500: PUSH
7501: LD_INT 23
7503: PUSH
7504: LD_INT 24
7506: PUSH
7507: LD_INT 25
7509: PUSH
7510: LD_INT 26
7512: PUSH
7513: LD_INT 28
7515: PUSH
7516: LD_INT 30
7518: PUSH
7519: LD_INT 31
7521: PUSH
7522: LD_INT 32
7524: PUSH
7525: LD_INT 36
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 101
7561: PUSH
7562: LD_INT 102
7564: PUSH
7565: LD_INT 103
7567: PUSH
7568: LD_INT 104
7570: PUSH
7571: LD_INT 105
7573: PUSH
7574: LD_INT 106
7576: PUSH
7577: LD_INT 107
7579: PUSH
7580: LD_INT 108
7582: PUSH
7583: LD_INT 109
7585: PUSH
7586: LD_INT 110
7588: PUSH
7589: LD_INT 111
7591: PUSH
7592: LD_INT 112
7594: PUSH
7595: LD_INT 114
7597: PUSH
7598: LD_INT 116
7600: PUSH
7601: LD_INT 117
7603: PUSH
7604: LD_INT 118
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: ST_TO_ADDR
7629: GO 9524
7631: LD_INT 11
7633: DOUBLE
7634: EQUAL
7635: IFTRUE 7639
7637: GO 7843
7639: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7640: LD_ADDR_VAR 0 2
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 5
7656: PUSH
7657: LD_INT 6
7659: PUSH
7660: LD_INT 7
7662: PUSH
7663: LD_INT 8
7665: PUSH
7666: LD_INT 9
7668: PUSH
7669: LD_INT 10
7671: PUSH
7672: LD_INT 11
7674: PUSH
7675: LD_INT 12
7677: PUSH
7678: LD_INT 13
7680: PUSH
7681: LD_INT 14
7683: PUSH
7684: LD_INT 15
7686: PUSH
7687: LD_INT 16
7689: PUSH
7690: LD_INT 17
7692: PUSH
7693: LD_INT 18
7695: PUSH
7696: LD_INT 19
7698: PUSH
7699: LD_INT 20
7701: PUSH
7702: LD_INT 21
7704: PUSH
7705: LD_INT 22
7707: PUSH
7708: LD_INT 23
7710: PUSH
7711: LD_INT 24
7713: PUSH
7714: LD_INT 25
7716: PUSH
7717: LD_INT 26
7719: PUSH
7720: LD_INT 28
7722: PUSH
7723: LD_INT 30
7725: PUSH
7726: LD_INT 31
7728: PUSH
7729: LD_INT 32
7731: PUSH
7732: LD_INT 34
7734: PUSH
7735: LD_INT 36
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 101
7773: PUSH
7774: LD_INT 102
7776: PUSH
7777: LD_INT 103
7779: PUSH
7780: LD_INT 104
7782: PUSH
7783: LD_INT 105
7785: PUSH
7786: LD_INT 106
7788: PUSH
7789: LD_INT 107
7791: PUSH
7792: LD_INT 108
7794: PUSH
7795: LD_INT 109
7797: PUSH
7798: LD_INT 110
7800: PUSH
7801: LD_INT 111
7803: PUSH
7804: LD_INT 112
7806: PUSH
7807: LD_INT 114
7809: PUSH
7810: LD_INT 116
7812: PUSH
7813: LD_INT 117
7815: PUSH
7816: LD_INT 118
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: ST_TO_ADDR
7841: GO 9524
7843: LD_INT 12
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 8071
7851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7852: LD_ADDR_VAR 0 2
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: LD_INT 2
7862: PUSH
7863: LD_INT 3
7865: PUSH
7866: LD_INT 4
7868: PUSH
7869: LD_INT 5
7871: PUSH
7872: LD_INT 6
7874: PUSH
7875: LD_INT 7
7877: PUSH
7878: LD_INT 8
7880: PUSH
7881: LD_INT 9
7883: PUSH
7884: LD_INT 10
7886: PUSH
7887: LD_INT 11
7889: PUSH
7890: LD_INT 12
7892: PUSH
7893: LD_INT 13
7895: PUSH
7896: LD_INT 14
7898: PUSH
7899: LD_INT 15
7901: PUSH
7902: LD_INT 16
7904: PUSH
7905: LD_INT 17
7907: PUSH
7908: LD_INT 18
7910: PUSH
7911: LD_INT 19
7913: PUSH
7914: LD_INT 20
7916: PUSH
7917: LD_INT 21
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: LD_INT 23
7925: PUSH
7926: LD_INT 24
7928: PUSH
7929: LD_INT 25
7931: PUSH
7932: LD_INT 26
7934: PUSH
7935: LD_INT 27
7937: PUSH
7938: LD_INT 28
7940: PUSH
7941: LD_INT 30
7943: PUSH
7944: LD_INT 31
7946: PUSH
7947: LD_INT 32
7949: PUSH
7950: LD_INT 33
7952: PUSH
7953: LD_INT 34
7955: PUSH
7956: LD_INT 36
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 101
7997: PUSH
7998: LD_INT 102
8000: PUSH
8001: LD_INT 103
8003: PUSH
8004: LD_INT 104
8006: PUSH
8007: LD_INT 105
8009: PUSH
8010: LD_INT 106
8012: PUSH
8013: LD_INT 107
8015: PUSH
8016: LD_INT 108
8018: PUSH
8019: LD_INT 109
8021: PUSH
8022: LD_INT 110
8024: PUSH
8025: LD_INT 111
8027: PUSH
8028: LD_INT 112
8030: PUSH
8031: LD_INT 113
8033: PUSH
8034: LD_INT 114
8036: PUSH
8037: LD_INT 116
8039: PUSH
8040: LD_INT 117
8042: PUSH
8043: LD_INT 118
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: ST_TO_ADDR
8069: GO 9524
8071: LD_INT 13
8073: DOUBLE
8074: EQUAL
8075: IFTRUE 8079
8077: GO 8287
8079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_INT 1
8087: PUSH
8088: LD_INT 2
8090: PUSH
8091: LD_INT 3
8093: PUSH
8094: LD_INT 4
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: LD_INT 8
8102: PUSH
8103: LD_INT 9
8105: PUSH
8106: LD_INT 10
8108: PUSH
8109: LD_INT 11
8111: PUSH
8112: LD_INT 12
8114: PUSH
8115: LD_INT 14
8117: PUSH
8118: LD_INT 15
8120: PUSH
8121: LD_INT 16
8123: PUSH
8124: LD_INT 17
8126: PUSH
8127: LD_INT 18
8129: PUSH
8130: LD_INT 19
8132: PUSH
8133: LD_INT 20
8135: PUSH
8136: LD_INT 21
8138: PUSH
8139: LD_INT 22
8141: PUSH
8142: LD_INT 23
8144: PUSH
8145: LD_INT 24
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 26
8153: PUSH
8154: LD_INT 27
8156: PUSH
8157: LD_INT 28
8159: PUSH
8160: LD_INT 30
8162: PUSH
8163: LD_INT 31
8165: PUSH
8166: LD_INT 32
8168: PUSH
8169: LD_INT 33
8171: PUSH
8172: LD_INT 34
8174: PUSH
8175: LD_INT 36
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 101
8213: PUSH
8214: LD_INT 102
8216: PUSH
8217: LD_INT 103
8219: PUSH
8220: LD_INT 104
8222: PUSH
8223: LD_INT 105
8225: PUSH
8226: LD_INT 106
8228: PUSH
8229: LD_INT 107
8231: PUSH
8232: LD_INT 108
8234: PUSH
8235: LD_INT 109
8237: PUSH
8238: LD_INT 110
8240: PUSH
8241: LD_INT 111
8243: PUSH
8244: LD_INT 112
8246: PUSH
8247: LD_INT 113
8249: PUSH
8250: LD_INT 114
8252: PUSH
8253: LD_INT 116
8255: PUSH
8256: LD_INT 117
8258: PUSH
8259: LD_INT 118
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: ST_TO_ADDR
8285: GO 9524
8287: LD_INT 14
8289: DOUBLE
8290: EQUAL
8291: IFTRUE 8295
8293: GO 8519
8295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8296: LD_ADDR_VAR 0 2
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: LD_INT 2
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: LD_INT 4
8312: PUSH
8313: LD_INT 5
8315: PUSH
8316: LD_INT 6
8318: PUSH
8319: LD_INT 7
8321: PUSH
8322: LD_INT 8
8324: PUSH
8325: LD_INT 9
8327: PUSH
8328: LD_INT 10
8330: PUSH
8331: LD_INT 11
8333: PUSH
8334: LD_INT 12
8336: PUSH
8337: LD_INT 13
8339: PUSH
8340: LD_INT 14
8342: PUSH
8343: LD_INT 15
8345: PUSH
8346: LD_INT 16
8348: PUSH
8349: LD_INT 17
8351: PUSH
8352: LD_INT 18
8354: PUSH
8355: LD_INT 19
8357: PUSH
8358: LD_INT 20
8360: PUSH
8361: LD_INT 21
8363: PUSH
8364: LD_INT 22
8366: PUSH
8367: LD_INT 23
8369: PUSH
8370: LD_INT 24
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 26
8378: PUSH
8379: LD_INT 27
8381: PUSH
8382: LD_INT 28
8384: PUSH
8385: LD_INT 29
8387: PUSH
8388: LD_INT 30
8390: PUSH
8391: LD_INT 31
8393: PUSH
8394: LD_INT 32
8396: PUSH
8397: LD_INT 33
8399: PUSH
8400: LD_INT 34
8402: PUSH
8403: LD_INT 36
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: PUSH
8443: LD_INT 101
8445: PUSH
8446: LD_INT 102
8448: PUSH
8449: LD_INT 103
8451: PUSH
8452: LD_INT 104
8454: PUSH
8455: LD_INT 105
8457: PUSH
8458: LD_INT 106
8460: PUSH
8461: LD_INT 107
8463: PUSH
8464: LD_INT 108
8466: PUSH
8467: LD_INT 109
8469: PUSH
8470: LD_INT 110
8472: PUSH
8473: LD_INT 111
8475: PUSH
8476: LD_INT 112
8478: PUSH
8479: LD_INT 113
8481: PUSH
8482: LD_INT 114
8484: PUSH
8485: LD_INT 116
8487: PUSH
8488: LD_INT 117
8490: PUSH
8491: LD_INT 118
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: ST_TO_ADDR
8517: GO 9524
8519: LD_INT 15
8521: DOUBLE
8522: EQUAL
8523: IFTRUE 8527
8525: GO 8751
8527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8528: LD_ADDR_VAR 0 2
8532: PUSH
8533: LD_INT 1
8535: PUSH
8536: LD_INT 2
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 4
8544: PUSH
8545: LD_INT 5
8547: PUSH
8548: LD_INT 6
8550: PUSH
8551: LD_INT 7
8553: PUSH
8554: LD_INT 8
8556: PUSH
8557: LD_INT 9
8559: PUSH
8560: LD_INT 10
8562: PUSH
8563: LD_INT 11
8565: PUSH
8566: LD_INT 12
8568: PUSH
8569: LD_INT 13
8571: PUSH
8572: LD_INT 14
8574: PUSH
8575: LD_INT 15
8577: PUSH
8578: LD_INT 16
8580: PUSH
8581: LD_INT 17
8583: PUSH
8584: LD_INT 18
8586: PUSH
8587: LD_INT 19
8589: PUSH
8590: LD_INT 20
8592: PUSH
8593: LD_INT 21
8595: PUSH
8596: LD_INT 22
8598: PUSH
8599: LD_INT 23
8601: PUSH
8602: LD_INT 24
8604: PUSH
8605: LD_INT 25
8607: PUSH
8608: LD_INT 26
8610: PUSH
8611: LD_INT 27
8613: PUSH
8614: LD_INT 28
8616: PUSH
8617: LD_INT 29
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 31
8625: PUSH
8626: LD_INT 32
8628: PUSH
8629: LD_INT 33
8631: PUSH
8632: LD_INT 34
8634: PUSH
8635: LD_INT 36
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 101
8677: PUSH
8678: LD_INT 102
8680: PUSH
8681: LD_INT 103
8683: PUSH
8684: LD_INT 104
8686: PUSH
8687: LD_INT 105
8689: PUSH
8690: LD_INT 106
8692: PUSH
8693: LD_INT 107
8695: PUSH
8696: LD_INT 108
8698: PUSH
8699: LD_INT 109
8701: PUSH
8702: LD_INT 110
8704: PUSH
8705: LD_INT 111
8707: PUSH
8708: LD_INT 112
8710: PUSH
8711: LD_INT 113
8713: PUSH
8714: LD_INT 114
8716: PUSH
8717: LD_INT 116
8719: PUSH
8720: LD_INT 117
8722: PUSH
8723: LD_INT 118
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: ST_TO_ADDR
8749: GO 9524
8751: LD_INT 16
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8895
8759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 4
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 7
8776: PUSH
8777: LD_INT 11
8779: PUSH
8780: LD_INT 12
8782: PUSH
8783: LD_INT 15
8785: PUSH
8786: LD_INT 16
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 22
8797: PUSH
8798: LD_INT 23
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 26
8806: PUSH
8807: LD_INT 30
8809: PUSH
8810: LD_INT 31
8812: PUSH
8813: LD_INT 32
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 34
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 101
8845: PUSH
8846: LD_INT 102
8848: PUSH
8849: LD_INT 103
8851: PUSH
8852: LD_INT 106
8854: PUSH
8855: LD_INT 108
8857: PUSH
8858: LD_INT 112
8860: PUSH
8861: LD_INT 113
8863: PUSH
8864: LD_INT 114
8866: PUSH
8867: LD_INT 116
8869: PUSH
8870: LD_INT 117
8872: PUSH
8873: LD_INT 118
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: ST_TO_ADDR
8893: GO 9524
8895: LD_INT 17
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 9127
8903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8904: LD_ADDR_VAR 0 2
8908: PUSH
8909: LD_INT 1
8911: PUSH
8912: LD_INT 2
8914: PUSH
8915: LD_INT 3
8917: PUSH
8918: LD_INT 4
8920: PUSH
8921: LD_INT 5
8923: PUSH
8924: LD_INT 6
8926: PUSH
8927: LD_INT 7
8929: PUSH
8930: LD_INT 8
8932: PUSH
8933: LD_INT 9
8935: PUSH
8936: LD_INT 10
8938: PUSH
8939: LD_INT 11
8941: PUSH
8942: LD_INT 12
8944: PUSH
8945: LD_INT 13
8947: PUSH
8948: LD_INT 14
8950: PUSH
8951: LD_INT 15
8953: PUSH
8954: LD_INT 16
8956: PUSH
8957: LD_INT 17
8959: PUSH
8960: LD_INT 18
8962: PUSH
8963: LD_INT 19
8965: PUSH
8966: LD_INT 20
8968: PUSH
8969: LD_INT 21
8971: PUSH
8972: LD_INT 22
8974: PUSH
8975: LD_INT 23
8977: PUSH
8978: LD_INT 24
8980: PUSH
8981: LD_INT 25
8983: PUSH
8984: LD_INT 26
8986: PUSH
8987: LD_INT 27
8989: PUSH
8990: LD_INT 28
8992: PUSH
8993: LD_INT 29
8995: PUSH
8996: LD_INT 30
8998: PUSH
8999: LD_INT 31
9001: PUSH
9002: LD_INT 32
9004: PUSH
9005: LD_INT 33
9007: PUSH
9008: LD_INT 34
9010: PUSH
9011: LD_INT 36
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: PUSH
9051: LD_INT 101
9053: PUSH
9054: LD_INT 102
9056: PUSH
9057: LD_INT 103
9059: PUSH
9060: LD_INT 104
9062: PUSH
9063: LD_INT 105
9065: PUSH
9066: LD_INT 106
9068: PUSH
9069: LD_INT 107
9071: PUSH
9072: LD_INT 108
9074: PUSH
9075: LD_INT 109
9077: PUSH
9078: LD_INT 110
9080: PUSH
9081: LD_INT 111
9083: PUSH
9084: LD_INT 112
9086: PUSH
9087: LD_INT 113
9089: PUSH
9090: LD_INT 114
9092: PUSH
9093: LD_INT 116
9095: PUSH
9096: LD_INT 117
9098: PUSH
9099: LD_INT 118
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: ST_TO_ADDR
9125: GO 9524
9127: LD_INT 18
9129: DOUBLE
9130: EQUAL
9131: IFTRUE 9135
9133: GO 9283
9135: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9136: LD_ADDR_VAR 0 2
9140: PUSH
9141: LD_INT 2
9143: PUSH
9144: LD_INT 4
9146: PUSH
9147: LD_INT 5
9149: PUSH
9150: LD_INT 7
9152: PUSH
9153: LD_INT 11
9155: PUSH
9156: LD_INT 12
9158: PUSH
9159: LD_INT 15
9161: PUSH
9162: LD_INT 16
9164: PUSH
9165: LD_INT 20
9167: PUSH
9168: LD_INT 21
9170: PUSH
9171: LD_INT 22
9173: PUSH
9174: LD_INT 23
9176: PUSH
9177: LD_INT 25
9179: PUSH
9180: LD_INT 26
9182: PUSH
9183: LD_INT 30
9185: PUSH
9186: LD_INT 31
9188: PUSH
9189: LD_INT 32
9191: PUSH
9192: LD_INT 33
9194: PUSH
9195: LD_INT 34
9197: PUSH
9198: LD_INT 35
9200: PUSH
9201: LD_INT 36
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 101
9229: PUSH
9230: LD_INT 102
9232: PUSH
9233: LD_INT 103
9235: PUSH
9236: LD_INT 106
9238: PUSH
9239: LD_INT 108
9241: PUSH
9242: LD_INT 112
9244: PUSH
9245: LD_INT 113
9247: PUSH
9248: LD_INT 114
9250: PUSH
9251: LD_INT 115
9253: PUSH
9254: LD_INT 116
9256: PUSH
9257: LD_INT 117
9259: PUSH
9260: LD_INT 118
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: ST_TO_ADDR
9281: GO 9524
9283: LD_INT 19
9285: DOUBLE
9286: EQUAL
9287: IFTRUE 9291
9289: GO 9523
9291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 3
9305: PUSH
9306: LD_INT 4
9308: PUSH
9309: LD_INT 5
9311: PUSH
9312: LD_INT 6
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: LD_INT 8
9320: PUSH
9321: LD_INT 9
9323: PUSH
9324: LD_INT 10
9326: PUSH
9327: LD_INT 11
9329: PUSH
9330: LD_INT 12
9332: PUSH
9333: LD_INT 13
9335: PUSH
9336: LD_INT 14
9338: PUSH
9339: LD_INT 15
9341: PUSH
9342: LD_INT 16
9344: PUSH
9345: LD_INT 17
9347: PUSH
9348: LD_INT 18
9350: PUSH
9351: LD_INT 19
9353: PUSH
9354: LD_INT 20
9356: PUSH
9357: LD_INT 21
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 23
9365: PUSH
9366: LD_INT 24
9368: PUSH
9369: LD_INT 25
9371: PUSH
9372: LD_INT 26
9374: PUSH
9375: LD_INT 27
9377: PUSH
9378: LD_INT 28
9380: PUSH
9381: LD_INT 29
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 31
9389: PUSH
9390: LD_INT 32
9392: PUSH
9393: LD_INT 33
9395: PUSH
9396: LD_INT 34
9398: PUSH
9399: LD_INT 35
9401: PUSH
9402: LD_INT 36
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 101
9445: PUSH
9446: LD_INT 102
9448: PUSH
9449: LD_INT 103
9451: PUSH
9452: LD_INT 104
9454: PUSH
9455: LD_INT 105
9457: PUSH
9458: LD_INT 106
9460: PUSH
9461: LD_INT 107
9463: PUSH
9464: LD_INT 108
9466: PUSH
9467: LD_INT 109
9469: PUSH
9470: LD_INT 110
9472: PUSH
9473: LD_INT 111
9475: PUSH
9476: LD_INT 112
9478: PUSH
9479: LD_INT 113
9481: PUSH
9482: LD_INT 114
9484: PUSH
9485: LD_INT 115
9487: PUSH
9488: LD_INT 116
9490: PUSH
9491: LD_INT 117
9493: PUSH
9494: LD_INT 118
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: ST_TO_ADDR
9521: GO 9524
9523: POP
// end else
9524: GO 9755
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9526: LD_ADDR_VAR 0 2
9530: PUSH
9531: LD_INT 1
9533: PUSH
9534: LD_INT 2
9536: PUSH
9537: LD_INT 3
9539: PUSH
9540: LD_INT 4
9542: PUSH
9543: LD_INT 5
9545: PUSH
9546: LD_INT 6
9548: PUSH
9549: LD_INT 7
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: LD_INT 9
9557: PUSH
9558: LD_INT 10
9560: PUSH
9561: LD_INT 11
9563: PUSH
9564: LD_INT 12
9566: PUSH
9567: LD_INT 13
9569: PUSH
9570: LD_INT 14
9572: PUSH
9573: LD_INT 15
9575: PUSH
9576: LD_INT 16
9578: PUSH
9579: LD_INT 17
9581: PUSH
9582: LD_INT 18
9584: PUSH
9585: LD_INT 19
9587: PUSH
9588: LD_INT 20
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 22
9596: PUSH
9597: LD_INT 23
9599: PUSH
9600: LD_INT 24
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 26
9608: PUSH
9609: LD_INT 27
9611: PUSH
9612: LD_INT 28
9614: PUSH
9615: LD_INT 29
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: LD_INT 31
9623: PUSH
9624: LD_INT 32
9626: PUSH
9627: LD_INT 33
9629: PUSH
9630: LD_INT 34
9632: PUSH
9633: LD_INT 35
9635: PUSH
9636: LD_INT 36
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 101
9679: PUSH
9680: LD_INT 102
9682: PUSH
9683: LD_INT 103
9685: PUSH
9686: LD_INT 104
9688: PUSH
9689: LD_INT 105
9691: PUSH
9692: LD_INT 106
9694: PUSH
9695: LD_INT 107
9697: PUSH
9698: LD_INT 108
9700: PUSH
9701: LD_INT 109
9703: PUSH
9704: LD_INT 110
9706: PUSH
9707: LD_INT 111
9709: PUSH
9710: LD_INT 112
9712: PUSH
9713: LD_INT 113
9715: PUSH
9716: LD_INT 114
9718: PUSH
9719: LD_INT 115
9721: PUSH
9722: LD_INT 116
9724: PUSH
9725: LD_INT 117
9727: PUSH
9728: LD_INT 118
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: ST_TO_ADDR
// if result then
9755: LD_VAR 0 2
9759: IFFALSE 10545
// begin normal :=  ;
9761: LD_ADDR_VAR 0 5
9765: PUSH
9766: LD_STRING 
9768: ST_TO_ADDR
// hardcore :=  ;
9769: LD_ADDR_VAR 0 6
9773: PUSH
9774: LD_STRING 
9776: ST_TO_ADDR
// active :=  ;
9777: LD_ADDR_VAR 0 7
9781: PUSH
9782: LD_STRING 
9784: ST_TO_ADDR
// for i = 1 to normalCounter do
9785: LD_ADDR_VAR 0 8
9789: PUSH
9790: DOUBLE
9791: LD_INT 1
9793: DEC
9794: ST_TO_ADDR
9795: LD_EXP 9
9799: PUSH
9800: FOR_TO
9801: IFFALSE 9902
// begin tmp := 0 ;
9803: LD_ADDR_VAR 0 3
9807: PUSH
9808: LD_STRING 0
9810: ST_TO_ADDR
// if result [ 1 ] then
9811: LD_VAR 0 2
9815: PUSH
9816: LD_INT 1
9818: ARRAY
9819: IFFALSE 9884
// if result [ 1 ] [ 1 ] = i then
9821: LD_VAR 0 2
9825: PUSH
9826: LD_INT 1
9828: ARRAY
9829: PUSH
9830: LD_INT 1
9832: ARRAY
9833: PUSH
9834: LD_VAR 0 8
9838: EQUAL
9839: IFFALSE 9884
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9841: LD_ADDR_VAR 0 2
9845: PUSH
9846: LD_VAR 0 2
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: LD_VAR 0 2
9858: PUSH
9859: LD_INT 1
9861: ARRAY
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 3
9870: PPUSH
9871: CALL_OW 1
9875: ST_TO_ADDR
// tmp := 1 ;
9876: LD_ADDR_VAR 0 3
9880: PUSH
9881: LD_STRING 1
9883: ST_TO_ADDR
// end ; normal := normal & tmp ;
9884: LD_ADDR_VAR 0 5
9888: PUSH
9889: LD_VAR 0 5
9893: PUSH
9894: LD_VAR 0 3
9898: STR
9899: ST_TO_ADDR
// end ;
9900: GO 9800
9902: POP
9903: POP
// for i = 1 to hardcoreCounter do
9904: LD_ADDR_VAR 0 8
9908: PUSH
9909: DOUBLE
9910: LD_INT 1
9912: DEC
9913: ST_TO_ADDR
9914: LD_EXP 10
9918: PUSH
9919: FOR_TO
9920: IFFALSE 10025
// begin tmp := 0 ;
9922: LD_ADDR_VAR 0 3
9926: PUSH
9927: LD_STRING 0
9929: ST_TO_ADDR
// if result [ 2 ] then
9930: LD_VAR 0 2
9934: PUSH
9935: LD_INT 2
9937: ARRAY
9938: IFFALSE 10007
// if result [ 2 ] [ 1 ] = 100 + i then
9940: LD_VAR 0 2
9944: PUSH
9945: LD_INT 2
9947: ARRAY
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PUSH
9953: LD_INT 100
9955: PUSH
9956: LD_VAR 0 8
9960: PLUS
9961: EQUAL
9962: IFFALSE 10007
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9964: LD_ADDR_VAR 0 2
9968: PUSH
9969: LD_VAR 0 2
9973: PPUSH
9974: LD_INT 2
9976: PPUSH
9977: LD_VAR 0 2
9981: PUSH
9982: LD_INT 2
9984: ARRAY
9985: PPUSH
9986: LD_INT 1
9988: PPUSH
9989: CALL_OW 3
9993: PPUSH
9994: CALL_OW 1
9998: ST_TO_ADDR
// tmp := 1 ;
9999: LD_ADDR_VAR 0 3
10003: PUSH
10004: LD_STRING 1
10006: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10007: LD_ADDR_VAR 0 6
10011: PUSH
10012: LD_VAR 0 6
10016: PUSH
10017: LD_VAR 0 3
10021: STR
10022: ST_TO_ADDR
// end ;
10023: GO 9919
10025: POP
10026: POP
// if isGameLoad then
10027: LD_VAR 0 1
10031: IFFALSE 10506
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10033: LD_ADDR_VAR 0 4
10037: PUSH
10038: LD_EXP 13
10042: PUSH
10043: LD_EXP 12
10047: PUSH
10048: LD_EXP 14
10052: PUSH
10053: LD_EXP 11
10057: PUSH
10058: LD_EXP 15
10062: PUSH
10063: LD_EXP 16
10067: PUSH
10068: LD_EXP 17
10072: PUSH
10073: LD_EXP 18
10077: PUSH
10078: LD_EXP 19
10082: PUSH
10083: LD_EXP 20
10087: PUSH
10088: LD_EXP 21
10092: PUSH
10093: LD_EXP 22
10097: PUSH
10098: LD_EXP 23
10102: PUSH
10103: LD_EXP 24
10107: PUSH
10108: LD_EXP 32
10112: PUSH
10113: LD_EXP 33
10117: PUSH
10118: LD_EXP 34
10122: PUSH
10123: LD_EXP 35
10127: PUSH
10128: LD_EXP 37
10132: PUSH
10133: LD_EXP 38
10137: PUSH
10138: LD_EXP 39
10142: PUSH
10143: LD_EXP 42
10147: PUSH
10148: LD_EXP 44
10152: PUSH
10153: LD_EXP 45
10157: PUSH
10158: LD_EXP 46
10162: PUSH
10163: LD_EXP 48
10167: PUSH
10168: LD_EXP 49
10172: PUSH
10173: LD_EXP 52
10177: PUSH
10178: LD_EXP 53
10182: PUSH
10183: LD_EXP 54
10187: PUSH
10188: LD_EXP 55
10192: PUSH
10193: LD_EXP 56
10197: PUSH
10198: LD_EXP 57
10202: PUSH
10203: LD_EXP 58
10207: PUSH
10208: LD_EXP 59
10212: PUSH
10213: LD_EXP 60
10217: PUSH
10218: LD_EXP 25
10222: PUSH
10223: LD_EXP 26
10227: PUSH
10228: LD_EXP 29
10232: PUSH
10233: LD_EXP 30
10237: PUSH
10238: LD_EXP 31
10242: PUSH
10243: LD_EXP 27
10247: PUSH
10248: LD_EXP 28
10252: PUSH
10253: LD_EXP 36
10257: PUSH
10258: LD_EXP 40
10262: PUSH
10263: LD_EXP 41
10267: PUSH
10268: LD_EXP 43
10272: PUSH
10273: LD_EXP 47
10277: PUSH
10278: LD_EXP 50
10282: PUSH
10283: LD_EXP 51
10287: PUSH
10288: LD_EXP 61
10292: PUSH
10293: LD_EXP 62
10297: PUSH
10298: LD_EXP 63
10302: PUSH
10303: LD_EXP 64
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: ST_TO_ADDR
// tmp :=  ;
10364: LD_ADDR_VAR 0 3
10368: PUSH
10369: LD_STRING 
10371: ST_TO_ADDR
// for i = 1 to normalCounter do
10372: LD_ADDR_VAR 0 8
10376: PUSH
10377: DOUBLE
10378: LD_INT 1
10380: DEC
10381: ST_TO_ADDR
10382: LD_EXP 9
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10424
// begin if flags [ i ] then
10390: LD_VAR 0 4
10394: PUSH
10395: LD_VAR 0 8
10399: ARRAY
10400: IFFALSE 10422
// tmp := tmp & i & ; ;
10402: LD_ADDR_VAR 0 3
10406: PUSH
10407: LD_VAR 0 3
10411: PUSH
10412: LD_VAR 0 8
10416: STR
10417: PUSH
10418: LD_STRING ;
10420: STR
10421: ST_TO_ADDR
// end ;
10422: GO 10387
10424: POP
10425: POP
// for i = 1 to hardcoreCounter do
10426: LD_ADDR_VAR 0 8
10430: PUSH
10431: DOUBLE
10432: LD_INT 1
10434: DEC
10435: ST_TO_ADDR
10436: LD_EXP 10
10440: PUSH
10441: FOR_TO
10442: IFFALSE 10488
// begin if flags [ normalCounter + i ] then
10444: LD_VAR 0 4
10448: PUSH
10449: LD_EXP 9
10453: PUSH
10454: LD_VAR 0 8
10458: PLUS
10459: ARRAY
10460: IFFALSE 10486
// tmp := tmp & ( 100 + i ) & ; ;
10462: LD_ADDR_VAR 0 3
10466: PUSH
10467: LD_VAR 0 3
10471: PUSH
10472: LD_INT 100
10474: PUSH
10475: LD_VAR 0 8
10479: PLUS
10480: STR
10481: PUSH
10482: LD_STRING ;
10484: STR
10485: ST_TO_ADDR
// end ;
10486: GO 10441
10488: POP
10489: POP
// if tmp then
10490: LD_VAR 0 3
10494: IFFALSE 10506
// active := tmp ;
10496: LD_ADDR_VAR 0 7
10500: PUSH
10501: LD_VAR 0 3
10505: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10506: LD_STRING getStreamItemsFromMission("
10508: PUSH
10509: LD_VAR 0 5
10513: STR
10514: PUSH
10515: LD_STRING ","
10517: STR
10518: PUSH
10519: LD_VAR 0 6
10523: STR
10524: PUSH
10525: LD_STRING ","
10527: STR
10528: PUSH
10529: LD_VAR 0 7
10533: STR
10534: PUSH
10535: LD_STRING ")
10537: STR
10538: PPUSH
10539: CALL_OW 559
// end else
10543: GO 10552
// ToLua ( getStreamItemsFromMission("","","") ) ;
10545: LD_STRING getStreamItemsFromMission("","","")
10547: PPUSH
10548: CALL_OW 559
// end ;
10552: LD_VAR 0 2
10556: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10557: LD_EXP 8
10561: IFFALSE 10569
10563: PUSH
10564: LD_EXP 13
10568: AND
10569: IFFALSE 10693
10571: GO 10573
10573: DISABLE
10574: LD_INT 0
10576: PPUSH
10577: PPUSH
// begin enable ;
10578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10579: LD_ADDR_VAR 0 2
10583: PUSH
10584: LD_INT 22
10586: PUSH
10587: LD_OWVAR 2
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 2
10598: PUSH
10599: LD_INT 34
10601: PUSH
10602: LD_INT 7
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 34
10611: PUSH
10612: LD_INT 45
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 34
10621: PUSH
10622: LD_INT 28
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 34
10631: PUSH
10632: LD_INT 47
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PPUSH
10650: CALL_OW 69
10654: ST_TO_ADDR
// if not tmp then
10655: LD_VAR 0 2
10659: NOT
10660: IFFALSE 10664
// exit ;
10662: GO 10693
// for i in tmp do
10664: LD_ADDR_VAR 0 1
10668: PUSH
10669: LD_VAR 0 2
10673: PUSH
10674: FOR_IN
10675: IFFALSE 10691
// begin SetLives ( i , 0 ) ;
10677: LD_VAR 0 1
10681: PPUSH
10682: LD_INT 0
10684: PPUSH
10685: CALL_OW 234
// end ;
10689: GO 10674
10691: POP
10692: POP
// end ;
10693: PPOPN 2
10695: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10696: LD_EXP 8
10700: IFFALSE 10708
10702: PUSH
10703: LD_EXP 14
10707: AND
10708: IFFALSE 10792
10710: GO 10712
10712: DISABLE
10713: LD_INT 0
10715: PPUSH
10716: PPUSH
// begin enable ;
10717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10718: LD_ADDR_VAR 0 2
10722: PUSH
10723: LD_INT 22
10725: PUSH
10726: LD_OWVAR 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 32
10737: PUSH
10738: LD_INT 3
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: ST_TO_ADDR
// if not tmp then
10754: LD_VAR 0 2
10758: NOT
10759: IFFALSE 10763
// exit ;
10761: GO 10792
// for i in tmp do
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_VAR 0 2
10772: PUSH
10773: FOR_IN
10774: IFFALSE 10790
// begin SetLives ( i , 0 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 0
10783: PPUSH
10784: CALL_OW 234
// end ;
10788: GO 10773
10790: POP
10791: POP
// end ;
10792: PPOPN 2
10794: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10795: LD_EXP 8
10799: IFFALSE 10807
10801: PUSH
10802: LD_EXP 11
10806: AND
10807: IFFALSE 10900
10809: GO 10811
10811: DISABLE
10812: LD_INT 0
10814: PPUSH
// begin enable ;
10815: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10816: LD_ADDR_VAR 0 1
10820: PUSH
10821: LD_INT 22
10823: PUSH
10824: LD_OWVAR 2
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 25
10838: PUSH
10839: LD_INT 5
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 25
10848: PUSH
10849: LD_INT 9
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 25
10858: PUSH
10859: LD_INT 8
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PPUSH
10876: CALL_OW 69
10880: PUSH
10881: FOR_IN
10882: IFFALSE 10898
// begin SetClass ( i , 1 ) ;
10884: LD_VAR 0 1
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 336
// end ;
10896: GO 10881
10898: POP
10899: POP
// end ;
10900: PPOPN 1
10902: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10903: LD_EXP 8
10907: IFFALSE 10915
10909: PUSH
10910: LD_EXP 12
10914: AND
10915: IFFALSE 10927
10917: PUSH
10918: LD_OWVAR 65
10922: PUSH
10923: LD_INT 7
10925: LESS
10926: AND
10927: IFFALSE 10941
10929: GO 10931
10931: DISABLE
// begin enable ;
10932: ENABLE
// game_speed := 7 ;
10933: LD_ADDR_OWVAR 65
10937: PUSH
10938: LD_INT 7
10940: ST_TO_ADDR
// end ;
10941: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10942: LD_EXP 8
10946: IFFALSE 10954
10948: PUSH
10949: LD_EXP 15
10953: AND
10954: IFFALSE 11156
10956: GO 10958
10958: DISABLE
10959: LD_INT 0
10961: PPUSH
10962: PPUSH
10963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10964: LD_ADDR_VAR 0 3
10968: PUSH
10969: LD_INT 81
10971: PUSH
10972: LD_OWVAR 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 21
10983: PUSH
10984: LD_INT 1
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PPUSH
10995: CALL_OW 69
10999: ST_TO_ADDR
// if not tmp then
11000: LD_VAR 0 3
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11156
// if tmp > 5 then
11009: LD_VAR 0 3
11013: PUSH
11014: LD_INT 5
11016: GREATER
11017: IFFALSE 11029
// k := 5 else
11019: LD_ADDR_VAR 0 2
11023: PUSH
11024: LD_INT 5
11026: ST_TO_ADDR
11027: GO 11039
// k := tmp ;
11029: LD_ADDR_VAR 0 2
11033: PUSH
11034: LD_VAR 0 3
11038: ST_TO_ADDR
// for i := 1 to k do
11039: LD_ADDR_VAR 0 1
11043: PUSH
11044: DOUBLE
11045: LD_INT 1
11047: DEC
11048: ST_TO_ADDR
11049: LD_VAR 0 2
11053: PUSH
11054: FOR_TO
11055: IFFALSE 11154
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11057: LD_VAR 0 3
11061: PUSH
11062: LD_VAR 0 1
11066: ARRAY
11067: PPUSH
11068: LD_VAR 0 1
11072: PUSH
11073: LD_INT 4
11075: MOD
11076: PUSH
11077: LD_INT 1
11079: PLUS
11080: PPUSH
11081: CALL_OW 259
11085: PUSH
11086: LD_INT 10
11088: LESS
11089: IFFALSE 11152
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11091: LD_VAR 0 3
11095: PUSH
11096: LD_VAR 0 1
11100: ARRAY
11101: PPUSH
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 4
11109: MOD
11110: PUSH
11111: LD_INT 1
11113: PLUS
11114: PPUSH
11115: LD_VAR 0 3
11119: PUSH
11120: LD_VAR 0 1
11124: ARRAY
11125: PPUSH
11126: LD_VAR 0 1
11130: PUSH
11131: LD_INT 4
11133: MOD
11134: PUSH
11135: LD_INT 1
11137: PLUS
11138: PPUSH
11139: CALL_OW 259
11143: PUSH
11144: LD_INT 1
11146: PLUS
11147: PPUSH
11148: CALL_OW 237
11152: GO 11054
11154: POP
11155: POP
// end ;
11156: PPOPN 3
11158: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11159: LD_EXP 8
11163: IFFALSE 11171
11165: PUSH
11166: LD_EXP 16
11170: AND
11171: IFFALSE 11191
11173: GO 11175
11175: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11176: LD_INT 4
11178: PPUSH
11179: LD_OWVAR 2
11183: PPUSH
11184: LD_INT 0
11186: PPUSH
11187: CALL_OW 324
11191: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11192: LD_EXP 8
11196: IFFALSE 11204
11198: PUSH
11199: LD_EXP 45
11203: AND
11204: IFFALSE 11224
11206: GO 11208
11208: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11209: LD_INT 19
11211: PPUSH
11212: LD_OWVAR 2
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 324
11224: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11225: LD_EXP 8
11229: IFFALSE 11237
11231: PUSH
11232: LD_EXP 17
11236: AND
11237: IFFALSE 11339
11239: GO 11241
11241: DISABLE
11242: LD_INT 0
11244: PPUSH
11245: PPUSH
// begin enable ;
11246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_OWVAR 2
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: LD_INT 34
11269: PUSH
11270: LD_INT 11
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 34
11279: PUSH
11280: LD_INT 30
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 69
11300: ST_TO_ADDR
// if not tmp then
11301: LD_VAR 0 2
11305: NOT
11306: IFFALSE 11310
// exit ;
11308: GO 11339
// for i in tmp do
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_VAR 0 2
11319: PUSH
11320: FOR_IN
11321: IFFALSE 11337
// begin SetLives ( i , 0 ) ;
11323: LD_VAR 0 1
11327: PPUSH
11328: LD_INT 0
11330: PPUSH
11331: CALL_OW 234
// end ;
11335: GO 11320
11337: POP
11338: POP
// end ;
11339: PPOPN 2
11341: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11342: LD_EXP 8
11346: IFFALSE 11354
11348: PUSH
11349: LD_EXP 18
11353: AND
11354: IFFALSE 11374
11356: GO 11358
11358: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11359: LD_INT 32
11361: PPUSH
11362: LD_OWVAR 2
11366: PPUSH
11367: LD_INT 0
11369: PPUSH
11370: CALL_OW 324
11374: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11375: LD_EXP 8
11379: IFFALSE 11387
11381: PUSH
11382: LD_EXP 19
11386: AND
11387: IFFALSE 11570
11389: GO 11391
11391: DISABLE
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
11396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11397: LD_ADDR_VAR 0 2
11401: PUSH
11402: LD_INT 22
11404: PUSH
11405: LD_OWVAR 2
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 33
11416: PUSH
11417: LD_INT 3
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: ST_TO_ADDR
// if not tmp then
11433: LD_VAR 0 2
11437: NOT
11438: IFFALSE 11442
// exit ;
11440: GO 11570
// side := 0 ;
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// for i := 1 to 8 do
11450: LD_ADDR_VAR 0 1
11454: PUSH
11455: DOUBLE
11456: LD_INT 1
11458: DEC
11459: ST_TO_ADDR
11460: LD_INT 8
11462: PUSH
11463: FOR_TO
11464: IFFALSE 11514
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11466: LD_OWVAR 2
11470: PUSH
11471: LD_VAR 0 1
11475: NONEQUAL
11476: IFFALSE 11498
11478: PUSH
11479: LD_OWVAR 2
11483: PPUSH
11484: LD_VAR 0 1
11488: PPUSH
11489: CALL_OW 81
11493: PUSH
11494: LD_INT 2
11496: EQUAL
11497: AND
11498: IFFALSE 11512
// begin side := i ;
11500: LD_ADDR_VAR 0 3
11504: PUSH
11505: LD_VAR 0 1
11509: ST_TO_ADDR
// break ;
11510: GO 11514
// end ;
11512: GO 11463
11514: POP
11515: POP
// if not side then
11516: LD_VAR 0 3
11520: NOT
11521: IFFALSE 11525
// exit ;
11523: GO 11570
// for i := 1 to tmp do
11525: LD_ADDR_VAR 0 1
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_VAR 0 2
11539: PUSH
11540: FOR_TO
11541: IFFALSE 11568
// if Prob ( 60 ) then
11543: LD_INT 60
11545: PPUSH
11546: CALL_OW 13
11550: IFFALSE 11566
// SetSide ( i , side ) ;
11552: LD_VAR 0 1
11556: PPUSH
11557: LD_VAR 0 3
11561: PPUSH
11562: CALL_OW 235
11566: GO 11540
11568: POP
11569: POP
// end ;
11570: PPOPN 3
11572: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11573: LD_EXP 8
11577: IFFALSE 11585
11579: PUSH
11580: LD_EXP 21
11584: AND
11585: IFFALSE 11704
11587: GO 11589
11589: DISABLE
11590: LD_INT 0
11592: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11593: LD_ADDR_VAR 0 1
11597: PUSH
11598: LD_INT 22
11600: PUSH
11601: LD_OWVAR 2
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 1
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: LD_INT 23
11625: PUSH
11626: LD_INT 0
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: PUSH
11647: FOR_IN
11648: IFFALSE 11702
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11650: LD_VAR 0 1
11654: PPUSH
11655: CALL_OW 257
11659: PUSH
11660: LD_INT 1
11662: PUSH
11663: LD_INT 2
11665: PUSH
11666: LD_INT 3
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: IN
11678: IFFALSE 11700
// SetClass ( un , rand ( 1 , 4 ) ) ;
11680: LD_VAR 0 1
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: LD_INT 4
11690: PPUSH
11691: CALL_OW 12
11695: PPUSH
11696: CALL_OW 336
11700: GO 11647
11702: POP
11703: POP
// end ;
11704: PPOPN 1
11706: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11707: LD_EXP 8
11711: IFFALSE 11719
11713: PUSH
11714: LD_EXP 20
11718: AND
11719: IFFALSE 11798
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11727: LD_ADDR_VAR 0 1
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_OWVAR 2
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 21
11746: PUSH
11747: LD_INT 3
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PPUSH
11758: CALL_OW 69
11762: ST_TO_ADDR
// if not tmp then
11763: LD_VAR 0 1
11767: NOT
11768: IFFALSE 11772
// exit ;
11770: GO 11798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11772: LD_VAR 0 1
11776: PUSH
11777: LD_INT 1
11779: PPUSH
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 12
11789: ARRAY
11790: PPUSH
11791: LD_INT 100
11793: PPUSH
11794: CALL_OW 234
// end ;
11798: PPOPN 1
11800: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11801: LD_EXP 8
11805: IFFALSE 11813
11807: PUSH
11808: LD_EXP 22
11812: AND
11813: IFFALSE 11911
11815: GO 11817
11817: DISABLE
11818: LD_INT 0
11820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_INT 22
11828: PUSH
11829: LD_OWVAR 2
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 21
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PPUSH
11852: CALL_OW 69
11856: ST_TO_ADDR
// if not tmp then
11857: LD_VAR 0 1
11861: NOT
11862: IFFALSE 11866
// exit ;
11864: GO 11911
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11866: LD_VAR 0 1
11870: PUSH
11871: LD_INT 1
11873: PPUSH
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 12
11883: ARRAY
11884: PPUSH
11885: LD_INT 1
11887: PPUSH
11888: LD_INT 4
11890: PPUSH
11891: CALL_OW 12
11895: PPUSH
11896: LD_INT 3000
11898: PPUSH
11899: LD_INT 9000
11901: PPUSH
11902: CALL_OW 12
11906: PPUSH
11907: CALL_OW 492
// end ;
11911: PPOPN 1
11913: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11914: LD_EXP 8
11918: IFFALSE 11926
11920: PUSH
11921: LD_EXP 23
11925: AND
11926: IFFALSE 11946
11928: GO 11930
11930: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11931: LD_INT 1
11933: PPUSH
11934: LD_OWVAR 2
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 324
11946: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11947: LD_EXP 8
11951: IFFALSE 11959
11953: PUSH
11954: LD_EXP 24
11958: AND
11959: IFFALSE 12042
11961: GO 11963
11963: DISABLE
11964: LD_INT 0
11966: PPUSH
11967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11968: LD_ADDR_VAR 0 2
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_OWVAR 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 21
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: ST_TO_ADDR
// if not tmp then
12004: LD_VAR 0 2
12008: NOT
12009: IFFALSE 12013
// exit ;
12011: GO 12042
// for i in tmp do
12013: LD_ADDR_VAR 0 1
12017: PUSH
12018: LD_VAR 0 2
12022: PUSH
12023: FOR_IN
12024: IFFALSE 12040
// SetBLevel ( i , 10 ) ;
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_INT 10
12033: PPUSH
12034: CALL_OW 241
12038: GO 12023
12040: POP
12041: POP
// end ;
12042: PPOPN 2
12044: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12045: LD_EXP 8
12049: IFFALSE 12057
12051: PUSH
12052: LD_EXP 25
12056: AND
12057: IFFALSE 12168
12059: GO 12061
12061: DISABLE
12062: LD_INT 0
12064: PPUSH
12065: PPUSH
12066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12067: LD_ADDR_VAR 0 3
12071: PUSH
12072: LD_INT 22
12074: PUSH
12075: LD_OWVAR 2
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 25
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PPUSH
12098: CALL_OW 69
12102: ST_TO_ADDR
// if not tmp then
12103: LD_VAR 0 3
12107: NOT
12108: IFFALSE 12112
// exit ;
12110: GO 12168
// un := tmp [ rand ( 1 , tmp ) ] ;
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_VAR 0 3
12121: PUSH
12122: LD_INT 1
12124: PPUSH
12125: LD_VAR 0 3
12129: PPUSH
12130: CALL_OW 12
12134: ARRAY
12135: ST_TO_ADDR
// if Crawls ( un ) then
12136: LD_VAR 0 2
12140: PPUSH
12141: CALL_OW 318
12145: IFFALSE 12156
// ComWalk ( un ) ;
12147: LD_VAR 0 2
12151: PPUSH
12152: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12156: LD_VAR 0 2
12160: PPUSH
12161: LD_INT 5
12163: PPUSH
12164: CALL_OW 336
// end ;
12168: PPOPN 3
12170: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12171: LD_EXP 8
12175: IFFALSE 12183
12177: PUSH
12178: LD_EXP 26
12182: AND
12183: IFFALSE 12195
12185: PUSH
12186: LD_OWVAR 67
12190: PUSH
12191: LD_INT 4
12193: LESS
12194: AND
12195: IFFALSE 12214
12197: GO 12199
12199: DISABLE
// begin Difficulty := Difficulty + 1 ;
12200: LD_ADDR_OWVAR 67
12204: PUSH
12205: LD_OWVAR 67
12209: PUSH
12210: LD_INT 1
12212: PLUS
12213: ST_TO_ADDR
// end ;
12214: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12215: LD_EXP 8
12219: IFFALSE 12227
12221: PUSH
12222: LD_EXP 27
12226: AND
12227: IFFALSE 12330
12229: GO 12231
12231: DISABLE
12232: LD_INT 0
12234: PPUSH
// begin for i := 1 to 5 do
12235: LD_ADDR_VAR 0 1
12239: PUSH
12240: DOUBLE
12241: LD_INT 1
12243: DEC
12244: ST_TO_ADDR
12245: LD_INT 5
12247: PUSH
12248: FOR_TO
12249: IFFALSE 12328
// begin uc_nation := nation_nature ;
12251: LD_ADDR_OWVAR 21
12255: PUSH
12256: LD_INT 0
12258: ST_TO_ADDR
// uc_side := 0 ;
12259: LD_ADDR_OWVAR 20
12263: PUSH
12264: LD_INT 0
12266: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12267: LD_ADDR_OWVAR 29
12271: PUSH
12272: LD_INT 12
12274: PUSH
12275: LD_INT 12
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: ST_TO_ADDR
// hc_agressivity := 20 ;
12282: LD_ADDR_OWVAR 35
12286: PUSH
12287: LD_INT 20
12289: ST_TO_ADDR
// hc_class := class_tiger ;
12290: LD_ADDR_OWVAR 28
12294: PUSH
12295: LD_INT 14
12297: ST_TO_ADDR
// hc_gallery :=  ;
12298: LD_ADDR_OWVAR 33
12302: PUSH
12303: LD_STRING 
12305: ST_TO_ADDR
// hc_name :=  ;
12306: LD_ADDR_OWVAR 26
12310: PUSH
12311: LD_STRING 
12313: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12314: CALL_OW 44
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 51
// end ;
12326: GO 12248
12328: POP
12329: POP
// end ;
12330: PPOPN 1
12332: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12333: LD_EXP 8
12337: IFFALSE 12345
12339: PUSH
12340: LD_EXP 28
12344: AND
12345: IFFALSE 12354
12347: GO 12349
12349: DISABLE
// StreamSibBomb ;
12350: CALL 12355 0 0
12354: END
// export function StreamSibBomb ; var i , x , y ; begin
12355: LD_INT 0
12357: PPUSH
12358: PPUSH
12359: PPUSH
12360: PPUSH
// result := false ;
12361: LD_ADDR_VAR 0 1
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// for i := 1 to 16 do
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: DOUBLE
12375: LD_INT 1
12377: DEC
12378: ST_TO_ADDR
12379: LD_INT 16
12381: PUSH
12382: FOR_TO
12383: IFFALSE 12582
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12385: LD_ADDR_VAR 0 3
12389: PUSH
12390: LD_INT 10
12392: PUSH
12393: LD_INT 20
12395: PUSH
12396: LD_INT 30
12398: PUSH
12399: LD_INT 40
12401: PUSH
12402: LD_INT 50
12404: PUSH
12405: LD_INT 60
12407: PUSH
12408: LD_INT 70
12410: PUSH
12411: LD_INT 80
12413: PUSH
12414: LD_INT 90
12416: PUSH
12417: LD_INT 100
12419: PUSH
12420: LD_INT 110
12422: PUSH
12423: LD_INT 120
12425: PUSH
12426: LD_INT 130
12428: PUSH
12429: LD_INT 140
12431: PUSH
12432: LD_INT 150
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 1
12454: PPUSH
12455: LD_INT 15
12457: PPUSH
12458: CALL_OW 12
12462: ARRAY
12463: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12464: LD_ADDR_VAR 0 4
12468: PUSH
12469: LD_INT 10
12471: PUSH
12472: LD_INT 20
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: LD_INT 40
12480: PUSH
12481: LD_INT 50
12483: PUSH
12484: LD_INT 60
12486: PUSH
12487: LD_INT 70
12489: PUSH
12490: LD_INT 80
12492: PUSH
12493: LD_INT 90
12495: PUSH
12496: LD_INT 100
12498: PUSH
12499: LD_INT 110
12501: PUSH
12502: LD_INT 120
12504: PUSH
12505: LD_INT 130
12507: PUSH
12508: LD_INT 140
12510: PUSH
12511: LD_INT 150
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 1
12533: PPUSH
12534: LD_INT 15
12536: PPUSH
12537: CALL_OW 12
12541: ARRAY
12542: ST_TO_ADDR
// if ValidHex ( x , y ) then
12543: LD_VAR 0 3
12547: PPUSH
12548: LD_VAR 0 4
12552: PPUSH
12553: CALL_OW 488
12557: IFFALSE 12580
// begin result := [ x , y ] ;
12559: LD_ADDR_VAR 0 1
12563: PUSH
12564: LD_VAR 0 3
12568: PUSH
12569: LD_VAR 0 4
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: ST_TO_ADDR
// break ;
12578: GO 12582
// end ; end ;
12580: GO 12382
12582: POP
12583: POP
// if result then
12584: LD_VAR 0 1
12588: IFFALSE 12648
// begin ToLua ( playSibBomb() ) ;
12590: LD_STRING playSibBomb()
12592: PPUSH
12593: CALL_OW 559
// wait ( 0 0$14 ) ;
12597: LD_INT 490
12599: PPUSH
12600: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12604: LD_VAR 0 1
12608: PUSH
12609: LD_INT 1
12611: ARRAY
12612: PPUSH
12613: LD_VAR 0 1
12617: PUSH
12618: LD_INT 2
12620: ARRAY
12621: PPUSH
12622: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12626: LD_VAR 0 1
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: LD_VAR 0 1
12639: PUSH
12640: LD_INT 2
12642: ARRAY
12643: PPUSH
12644: CALL_OW 429
// end ; end ;
12648: LD_VAR 0 1
12652: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12653: LD_EXP 8
12657: IFFALSE 12665
12659: PUSH
12660: LD_EXP 30
12664: AND
12665: IFFALSE 12677
12667: GO 12669
12669: DISABLE
// YouLost (  ) ;
12670: LD_STRING 
12672: PPUSH
12673: CALL_OW 104
12677: END
// every 0 0$1 trigger StreamModeActive and sFog do
12678: LD_EXP 8
12682: IFFALSE 12690
12684: PUSH
12685: LD_EXP 29
12689: AND
12690: IFFALSE 12704
12692: GO 12694
12694: DISABLE
// FogOff ( your_side ) ;
12695: LD_OWVAR 2
12699: PPUSH
12700: CALL_OW 344
12704: END
// every 0 0$1 trigger StreamModeActive and sSun do
12705: LD_EXP 8
12709: IFFALSE 12717
12711: PUSH
12712: LD_EXP 31
12716: AND
12717: IFFALSE 12745
12719: GO 12721
12721: DISABLE
// begin solar_recharge_percent := 0 ;
12722: LD_ADDR_OWVAR 79
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12730: LD_INT 10500
12732: PPUSH
12733: CALL_OW 67
// solar_recharge_percent := 100 ;
12737: LD_ADDR_OWVAR 79
12741: PUSH
12742: LD_INT 100
12744: ST_TO_ADDR
// end ;
12745: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12746: LD_EXP 8
12750: IFFALSE 12758
12752: PUSH
12753: LD_EXP 32
12757: AND
12758: IFFALSE 12997
12760: GO 12762
12762: DISABLE
12763: LD_INT 0
12765: PPUSH
12766: PPUSH
12767: PPUSH
// begin tmp := [ ] ;
12768: LD_ADDR_VAR 0 3
12772: PUSH
12773: EMPTY
12774: ST_TO_ADDR
// for i := 1 to 6 do
12775: LD_ADDR_VAR 0 1
12779: PUSH
12780: DOUBLE
12781: LD_INT 1
12783: DEC
12784: ST_TO_ADDR
12785: LD_INT 6
12787: PUSH
12788: FOR_TO
12789: IFFALSE 12894
// begin uc_nation := nation_nature ;
12791: LD_ADDR_OWVAR 21
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// uc_side := 0 ;
12799: LD_ADDR_OWVAR 20
12803: PUSH
12804: LD_INT 0
12806: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12807: LD_ADDR_OWVAR 29
12811: PUSH
12812: LD_INT 12
12814: PUSH
12815: LD_INT 12
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: ST_TO_ADDR
// hc_agressivity := 20 ;
12822: LD_ADDR_OWVAR 35
12826: PUSH
12827: LD_INT 20
12829: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12830: LD_ADDR_OWVAR 28
12834: PUSH
12835: LD_INT 17
12837: ST_TO_ADDR
// hc_gallery :=  ;
12838: LD_ADDR_OWVAR 33
12842: PUSH
12843: LD_STRING 
12845: ST_TO_ADDR
// hc_name :=  ;
12846: LD_ADDR_OWVAR 26
12850: PUSH
12851: LD_STRING 
12853: ST_TO_ADDR
// un := CreateHuman ;
12854: LD_ADDR_VAR 0 2
12858: PUSH
12859: CALL_OW 44
12863: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12864: LD_VAR 0 2
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 51
// tmp := tmp ^ un ;
12876: LD_ADDR_VAR 0 3
12880: PUSH
12881: LD_VAR 0 3
12885: PUSH
12886: LD_VAR 0 2
12890: ADD
12891: ST_TO_ADDR
// end ;
12892: GO 12788
12894: POP
12895: POP
// repeat wait ( 0 0$1 ) ;
12896: LD_INT 35
12898: PPUSH
12899: CALL_OW 67
// for un in tmp do
12903: LD_ADDR_VAR 0 2
12907: PUSH
12908: LD_VAR 0 3
12912: PUSH
12913: FOR_IN
12914: IFFALSE 12988
// begin if IsDead ( un ) then
12916: LD_VAR 0 2
12920: PPUSH
12921: CALL_OW 301
12925: IFFALSE 12945
// begin tmp := tmp diff un ;
12927: LD_ADDR_VAR 0 3
12931: PUSH
12932: LD_VAR 0 3
12936: PUSH
12937: LD_VAR 0 2
12941: DIFF
12942: ST_TO_ADDR
// continue ;
12943: GO 12913
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12945: LD_VAR 0 2
12949: PPUSH
12950: LD_INT 3
12952: PUSH
12953: LD_INT 22
12955: PUSH
12956: LD_INT 0
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: PPUSH
12972: LD_VAR 0 2
12976: PPUSH
12977: CALL_OW 74
12981: PPUSH
12982: CALL_OW 115
// end ;
12986: GO 12913
12988: POP
12989: POP
// until not tmp ;
12990: LD_VAR 0 3
12994: NOT
12995: IFFALSE 12896
// end ;
12997: PPOPN 3
12999: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13000: LD_EXP 8
13004: IFFALSE 13012
13006: PUSH
13007: LD_EXP 33
13011: AND
13012: IFFALSE 13066
13014: GO 13016
13016: DISABLE
// begin ToLua ( displayTroll(); ) ;
13017: LD_STRING displayTroll();
13019: PPUSH
13020: CALL_OW 559
// wait ( 3 3$00 ) ;
13024: LD_INT 6300
13026: PPUSH
13027: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13031: LD_STRING hideTroll();
13033: PPUSH
13034: CALL_OW 559
// wait ( 1 1$00 ) ;
13038: LD_INT 2100
13040: PPUSH
13041: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13045: LD_STRING displayTroll();
13047: PPUSH
13048: CALL_OW 559
// wait ( 1 1$00 ) ;
13052: LD_INT 2100
13054: PPUSH
13055: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13059: LD_STRING hideTroll();
13061: PPUSH
13062: CALL_OW 559
// end ;
13066: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13067: LD_EXP 8
13071: IFFALSE 13079
13073: PUSH
13074: LD_EXP 34
13078: AND
13079: IFFALSE 13142
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
// begin p := 0 ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// repeat game_speed := 1 ;
13095: LD_ADDR_OWVAR 65
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13103: LD_INT 35
13105: PPUSH
13106: CALL_OW 67
// p := p + 1 ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: LD_INT 1
13122: PLUS
13123: ST_TO_ADDR
// until p >= 60 ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 60
13131: GREATEREQUAL
13132: IFFALSE 13095
// game_speed := 4 ;
13134: LD_ADDR_OWVAR 65
13138: PUSH
13139: LD_INT 4
13141: ST_TO_ADDR
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13145: LD_EXP 8
13149: IFFALSE 13157
13151: PUSH
13152: LD_EXP 35
13156: AND
13157: IFFALSE 13303
13159: GO 13161
13161: DISABLE
13162: LD_INT 0
13164: PPUSH
13165: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13166: LD_ADDR_VAR 0 1
13170: PUSH
13171: LD_INT 22
13173: PUSH
13174: LD_OWVAR 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 2
13185: PUSH
13186: LD_INT 30
13188: PUSH
13189: LD_INT 0
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 30
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: ST_TO_ADDR
// if not depot then
13220: LD_VAR 0 1
13224: NOT
13225: IFFALSE 13229
// exit ;
13227: GO 13303
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13229: LD_ADDR_VAR 0 2
13233: PUSH
13234: LD_VAR 0 1
13238: PUSH
13239: LD_INT 1
13241: PPUSH
13242: LD_VAR 0 1
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: PPUSH
13253: CALL_OW 274
13257: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13258: LD_VAR 0 2
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: LD_INT 0
13268: PPUSH
13269: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13273: LD_VAR 0 2
13277: PPUSH
13278: LD_INT 2
13280: PPUSH
13281: LD_INT 0
13283: PPUSH
13284: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_INT 3
13295: PPUSH
13296: LD_INT 0
13298: PPUSH
13299: CALL_OW 277
// end ;
13303: PPOPN 2
13305: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13306: LD_EXP 8
13310: IFFALSE 13318
13312: PUSH
13313: LD_EXP 36
13317: AND
13318: IFFALSE 13415
13320: GO 13322
13322: DISABLE
13323: LD_INT 0
13325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13326: LD_ADDR_VAR 0 1
13330: PUSH
13331: LD_INT 22
13333: PUSH
13334: LD_OWVAR 2
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 21
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 3
13355: PUSH
13356: LD_INT 23
13358: PUSH
13359: LD_INT 0
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: PPUSH
13375: CALL_OW 69
13379: ST_TO_ADDR
// if not tmp then
13380: LD_VAR 0 1
13384: NOT
13385: IFFALSE 13389
// exit ;
13387: GO 13415
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13389: LD_VAR 0 1
13393: PUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_VAR 0 1
13401: PPUSH
13402: CALL_OW 12
13406: ARRAY
13407: PPUSH
13408: LD_INT 200
13410: PPUSH
13411: CALL_OW 234
// end ;
13415: PPOPN 1
13417: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13418: LD_EXP 8
13422: IFFALSE 13430
13424: PUSH
13425: LD_EXP 37
13429: AND
13430: IFFALSE 13509
13432: GO 13434
13434: DISABLE
13435: LD_INT 0
13437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13438: LD_ADDR_VAR 0 1
13442: PUSH
13443: LD_INT 22
13445: PUSH
13446: LD_OWVAR 2
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: ST_TO_ADDR
// if not tmp then
13474: LD_VAR 0 1
13478: NOT
13479: IFFALSE 13483
// exit ;
13481: GO 13509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13483: LD_VAR 0 1
13487: PUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_VAR 0 1
13495: PPUSH
13496: CALL_OW 12
13500: ARRAY
13501: PPUSH
13502: LD_INT 60
13504: PPUSH
13505: CALL_OW 234
// end ;
13509: PPOPN 1
13511: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13512: LD_EXP 8
13516: IFFALSE 13524
13518: PUSH
13519: LD_EXP 38
13523: AND
13524: IFFALSE 13623
13526: GO 13528
13528: DISABLE
13529: LD_INT 0
13531: PPUSH
13532: PPUSH
// begin enable ;
13533: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13534: LD_ADDR_VAR 0 1
13538: PUSH
13539: LD_INT 22
13541: PUSH
13542: LD_OWVAR 2
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 61
13553: PUSH
13554: EMPTY
13555: LIST
13556: PUSH
13557: LD_INT 33
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: LIST
13571: PPUSH
13572: CALL_OW 69
13576: ST_TO_ADDR
// if not tmp then
13577: LD_VAR 0 1
13581: NOT
13582: IFFALSE 13586
// exit ;
13584: GO 13623
// for i in tmp do
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_VAR 0 1
13595: PUSH
13596: FOR_IN
13597: IFFALSE 13621
// if IsControledBy ( i ) then
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 312
13608: IFFALSE 13619
// ComUnlink ( i ) ;
13610: LD_VAR 0 2
13614: PPUSH
13615: CALL_OW 136
13619: GO 13596
13621: POP
13622: POP
// end ;
13623: PPOPN 2
13625: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13626: LD_EXP 8
13630: IFFALSE 13638
13632: PUSH
13633: LD_EXP 39
13637: AND
13638: IFFALSE 13778
13640: GO 13642
13642: DISABLE
13643: LD_INT 0
13645: PPUSH
13646: PPUSH
// begin ToLua ( displayPowell(); ) ;
13647: LD_STRING displayPowell();
13649: PPUSH
13650: CALL_OW 559
// uc_side := 0 ;
13654: LD_ADDR_OWVAR 20
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// uc_nation := 2 ;
13662: LD_ADDR_OWVAR 21
13666: PUSH
13667: LD_INT 2
13669: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13670: LD_ADDR_OWVAR 37
13674: PUSH
13675: LD_INT 14
13677: ST_TO_ADDR
// vc_engine := engine_siberite ;
13678: LD_ADDR_OWVAR 39
13682: PUSH
13683: LD_INT 3
13685: ST_TO_ADDR
// vc_control := control_apeman ;
13686: LD_ADDR_OWVAR 38
13690: PUSH
13691: LD_INT 5
13693: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13694: LD_ADDR_OWVAR 40
13698: PUSH
13699: LD_INT 29
13701: ST_TO_ADDR
// un := CreateVehicle ;
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: CALL_OW 45
13711: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13712: LD_VAR 0 2
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13724: LD_INT 35
13726: PPUSH
13727: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13731: LD_VAR 0 2
13735: PPUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: PPUSH
13753: LD_VAR 0 2
13757: PPUSH
13758: CALL_OW 74
13762: PPUSH
13763: CALL_OW 115
// until IsDead ( un ) ;
13767: LD_VAR 0 2
13771: PPUSH
13772: CALL_OW 301
13776: IFFALSE 13724
// end ;
13778: PPOPN 2
13780: END
// every 0 0$1 trigger StreamModeActive and sStu do
13781: LD_EXP 8
13785: IFFALSE 13793
13787: PUSH
13788: LD_EXP 47
13792: AND
13793: IFFALSE 13809
13795: GO 13797
13797: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13798: LD_STRING displayStucuk();
13800: PPUSH
13801: CALL_OW 559
// ResetFog ;
13805: CALL_OW 335
// end ;
13809: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13810: LD_EXP 8
13814: IFFALSE 13822
13816: PUSH
13817: LD_EXP 40
13821: AND
13822: IFFALSE 13963
13824: GO 13826
13826: DISABLE
13827: LD_INT 0
13829: PPUSH
13830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13831: LD_ADDR_VAR 0 2
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_OWVAR 2
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 21
13850: PUSH
13851: LD_INT 1
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 69
13866: ST_TO_ADDR
// if not tmp then
13867: LD_VAR 0 2
13871: NOT
13872: IFFALSE 13876
// exit ;
13874: GO 13963
// un := tmp [ rand ( 1 , tmp ) ] ;
13876: LD_ADDR_VAR 0 1
13880: PUSH
13881: LD_VAR 0 2
13885: PUSH
13886: LD_INT 1
13888: PPUSH
13889: LD_VAR 0 2
13893: PPUSH
13894: CALL_OW 12
13898: ARRAY
13899: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13900: LD_VAR 0 1
13904: PPUSH
13905: LD_INT 0
13907: PPUSH
13908: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13912: LD_VAR 0 1
13916: PPUSH
13917: LD_OWVAR 3
13921: PUSH
13922: LD_VAR 0 1
13926: DIFF
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 74
13937: PPUSH
13938: CALL_OW 115
// wait ( 0 0$20 ) ;
13942: LD_INT 700
13944: PPUSH
13945: CALL_OW 67
// SetSide ( un , your_side ) ;
13949: LD_VAR 0 1
13953: PPUSH
13954: LD_OWVAR 2
13958: PPUSH
13959: CALL_OW 235
// end ;
13963: PPOPN 2
13965: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13966: LD_EXP 8
13970: IFFALSE 13978
13972: PUSH
13973: LD_EXP 41
13977: AND
13978: IFFALSE 14084
13980: GO 13982
13982: DISABLE
13983: LD_INT 0
13985: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13986: LD_ADDR_VAR 0 1
13990: PUSH
13991: LD_INT 22
13993: PUSH
13994: LD_OWVAR 2
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: LD_INT 30
14008: PUSH
14009: LD_INT 0
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 30
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: ST_TO_ADDR
// if not depot then
14040: LD_VAR 0 1
14044: NOT
14045: IFFALSE 14049
// exit ;
14047: GO 14084
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14049: LD_VAR 0 1
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PPUSH
14058: CALL_OW 250
14062: PPUSH
14063: LD_VAR 0 1
14067: PUSH
14068: LD_INT 1
14070: ARRAY
14071: PPUSH
14072: CALL_OW 251
14076: PPUSH
14077: LD_INT 70
14079: PPUSH
14080: CALL_OW 495
// end ;
14084: PPOPN 1
14086: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14087: LD_EXP 8
14091: IFFALSE 14099
14093: PUSH
14094: LD_EXP 42
14098: AND
14099: IFFALSE 14310
14101: GO 14103
14103: DISABLE
14104: LD_INT 0
14106: PPUSH
14107: PPUSH
14108: PPUSH
14109: PPUSH
14110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14111: LD_ADDR_VAR 0 5
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_OWVAR 2
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 21
14130: PUSH
14131: LD_INT 1
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PPUSH
14142: CALL_OW 69
14146: ST_TO_ADDR
// if not tmp then
14147: LD_VAR 0 5
14151: NOT
14152: IFFALSE 14156
// exit ;
14154: GO 14310
// for i in tmp do
14156: LD_ADDR_VAR 0 1
14160: PUSH
14161: LD_VAR 0 5
14165: PUSH
14166: FOR_IN
14167: IFFALSE 14308
// begin d := rand ( 0 , 5 ) ;
14169: LD_ADDR_VAR 0 4
14173: PUSH
14174: LD_INT 0
14176: PPUSH
14177: LD_INT 5
14179: PPUSH
14180: CALL_OW 12
14184: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 250
14199: PPUSH
14200: LD_VAR 0 4
14204: PPUSH
14205: LD_INT 3
14207: PPUSH
14208: LD_INT 12
14210: PPUSH
14211: CALL_OW 12
14215: PPUSH
14216: CALL_OW 272
14220: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14221: LD_ADDR_VAR 0 3
14225: PUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: CALL_OW 251
14235: PPUSH
14236: LD_VAR 0 4
14240: PPUSH
14241: LD_INT 3
14243: PPUSH
14244: LD_INT 12
14246: PPUSH
14247: CALL_OW 12
14251: PPUSH
14252: CALL_OW 273
14256: ST_TO_ADDR
// if ValidHex ( x , y ) then
14257: LD_VAR 0 2
14261: PPUSH
14262: LD_VAR 0 3
14266: PPUSH
14267: CALL_OW 488
14271: IFFALSE 14306
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14273: LD_VAR 0 1
14277: PPUSH
14278: LD_VAR 0 2
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: LD_INT 3
14290: PPUSH
14291: LD_INT 6
14293: PPUSH
14294: CALL_OW 12
14298: PPUSH
14299: LD_INT 1
14301: PPUSH
14302: CALL_OW 483
// end ;
14306: GO 14166
14308: POP
14309: POP
// end ;
14310: PPOPN 5
14312: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14313: LD_EXP 8
14317: IFFALSE 14325
14319: PUSH
14320: LD_EXP 43
14324: AND
14325: IFFALSE 14419
14327: GO 14329
14329: DISABLE
14330: LD_INT 0
14332: PPUSH
14333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14334: LD_ADDR_VAR 0 2
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_OWVAR 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 32
14353: PUSH
14354: LD_INT 1
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// if not tmp then
14381: LD_VAR 0 2
14385: NOT
14386: IFFALSE 14390
// exit ;
14388: GO 14419
// for i in tmp do
14390: LD_ADDR_VAR 0 1
14394: PUSH
14395: LD_VAR 0 2
14399: PUSH
14400: FOR_IN
14401: IFFALSE 14417
// SetFuel ( i , 0 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 0
14410: PPUSH
14411: CALL_OW 240
14415: GO 14400
14417: POP
14418: POP
// end ;
14419: PPOPN 2
14421: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14422: LD_EXP 8
14426: IFFALSE 14434
14428: PUSH
14429: LD_EXP 44
14433: AND
14434: IFFALSE 14500
14436: GO 14438
14438: DISABLE
14439: LD_INT 0
14441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14442: LD_ADDR_VAR 0 1
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_OWVAR 2
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 30
14461: PUSH
14462: LD_INT 29
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 69
14477: ST_TO_ADDR
// if not tmp then
14478: LD_VAR 0 1
14482: NOT
14483: IFFALSE 14487
// exit ;
14485: GO 14500
// DestroyUnit ( tmp [ 1 ] ) ;
14487: LD_VAR 0 1
14491: PUSH
14492: LD_INT 1
14494: ARRAY
14495: PPUSH
14496: CALL_OW 65
// end ;
14500: PPOPN 1
14502: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14503: LD_EXP 8
14507: IFFALSE 14515
14509: PUSH
14510: LD_EXP 46
14514: AND
14515: IFFALSE 14644
14517: GO 14519
14519: DISABLE
14520: LD_INT 0
14522: PPUSH
// begin uc_side := 0 ;
14523: LD_ADDR_OWVAR 20
14527: PUSH
14528: LD_INT 0
14530: ST_TO_ADDR
// uc_nation := nation_arabian ;
14531: LD_ADDR_OWVAR 21
14535: PUSH
14536: LD_INT 2
14538: ST_TO_ADDR
// hc_gallery :=  ;
14539: LD_ADDR_OWVAR 33
14543: PUSH
14544: LD_STRING 
14546: ST_TO_ADDR
// hc_name :=  ;
14547: LD_ADDR_OWVAR 26
14551: PUSH
14552: LD_STRING 
14554: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14555: LD_INT 1
14557: PPUSH
14558: LD_INT 11
14560: PPUSH
14561: LD_INT 10
14563: PPUSH
14564: CALL_OW 380
// un := CreateHuman ;
14568: LD_ADDR_VAR 0 1
14572: PUSH
14573: CALL_OW 44
14577: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14578: LD_VAR 0 1
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14590: LD_INT 35
14592: PPUSH
14593: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_INT 22
14604: PUSH
14605: LD_OWVAR 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PPUSH
14614: CALL_OW 69
14618: PPUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: CALL_OW 74
14628: PPUSH
14629: CALL_OW 115
// until IsDead ( un ) ;
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 301
14642: IFFALSE 14590
// end ;
14644: PPOPN 1
14646: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14647: LD_EXP 8
14651: IFFALSE 14659
14653: PUSH
14654: LD_EXP 48
14658: AND
14659: IFFALSE 14671
14661: GO 14663
14663: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14664: LD_STRING earthquake(getX(game), 0, 32)
14666: PPUSH
14667: CALL_OW 559
14671: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14672: LD_EXP 8
14676: IFFALSE 14684
14678: PUSH
14679: LD_EXP 49
14683: AND
14684: IFFALSE 14775
14686: GO 14688
14688: DISABLE
14689: LD_INT 0
14691: PPUSH
// begin enable ;
14692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14693: LD_ADDR_VAR 0 1
14697: PUSH
14698: LD_INT 22
14700: PUSH
14701: LD_OWVAR 2
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 21
14712: PUSH
14713: LD_INT 2
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 33
14722: PUSH
14723: LD_INT 3
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: ST_TO_ADDR
// if not tmp then
14740: LD_VAR 0 1
14744: NOT
14745: IFFALSE 14749
// exit ;
14747: GO 14775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14749: LD_VAR 0 1
14753: PUSH
14754: LD_INT 1
14756: PPUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 12
14766: ARRAY
14767: PPUSH
14768: LD_INT 1
14770: PPUSH
14771: CALL_OW 234
// end ;
14775: PPOPN 1
14777: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14778: LD_EXP 8
14782: IFFALSE 14790
14784: PUSH
14785: LD_EXP 50
14789: AND
14790: IFFALSE 14931
14792: GO 14794
14794: DISABLE
14795: LD_INT 0
14797: PPUSH
14798: PPUSH
14799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14800: LD_ADDR_VAR 0 3
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_OWVAR 2
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: ST_TO_ADDR
// if not tmp then
14836: LD_VAR 0 3
14840: NOT
14841: IFFALSE 14845
// exit ;
14843: GO 14931
// un := tmp [ rand ( 1 , tmp ) ] ;
14845: LD_ADDR_VAR 0 2
14849: PUSH
14850: LD_VAR 0 3
14854: PUSH
14855: LD_INT 1
14857: PPUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: CALL_OW 12
14867: ARRAY
14868: ST_TO_ADDR
// if Crawls ( un ) then
14869: LD_VAR 0 2
14873: PPUSH
14874: CALL_OW 318
14878: IFFALSE 14889
// ComWalk ( un ) ;
14880: LD_VAR 0 2
14884: PPUSH
14885: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14889: LD_VAR 0 2
14893: PPUSH
14894: LD_INT 9
14896: PPUSH
14897: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14901: LD_INT 28
14903: PPUSH
14904: LD_OWVAR 2
14908: PPUSH
14909: LD_INT 2
14911: PPUSH
14912: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14916: LD_INT 29
14918: PPUSH
14919: LD_OWVAR 2
14923: PPUSH
14924: LD_INT 2
14926: PPUSH
14927: CALL_OW 322
// end ;
14931: PPOPN 3
14933: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14934: LD_EXP 8
14938: IFFALSE 14946
14940: PUSH
14941: LD_EXP 51
14945: AND
14946: IFFALSE 15057
14948: GO 14950
14950: DISABLE
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
14955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14956: LD_ADDR_VAR 0 3
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 25
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: ST_TO_ADDR
// if not tmp then
14992: LD_VAR 0 3
14996: NOT
14997: IFFALSE 15001
// exit ;
14999: GO 15057
// un := tmp [ rand ( 1 , tmp ) ] ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: LD_VAR 0 3
15010: PUSH
15011: LD_INT 1
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: CALL_OW 12
15023: ARRAY
15024: ST_TO_ADDR
// if Crawls ( un ) then
15025: LD_VAR 0 2
15029: PPUSH
15030: CALL_OW 318
15034: IFFALSE 15045
// ComWalk ( un ) ;
15036: LD_VAR 0 2
15040: PPUSH
15041: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15045: LD_VAR 0 2
15049: PPUSH
15050: LD_INT 8
15052: PPUSH
15053: CALL_OW 336
// end ;
15057: PPOPN 3
15059: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15060: LD_EXP 8
15064: IFFALSE 15072
15066: PUSH
15067: LD_EXP 52
15071: AND
15072: IFFALSE 15216
15074: GO 15076
15076: DISABLE
15077: LD_INT 0
15079: PPUSH
15080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15081: LD_ADDR_VAR 0 2
15085: PUSH
15086: LD_INT 22
15088: PUSH
15089: LD_OWVAR 2
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 21
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: LD_INT 34
15113: PUSH
15114: LD_INT 12
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 34
15123: PUSH
15124: LD_INT 51
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 34
15133: PUSH
15134: LD_INT 32
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 69
15156: ST_TO_ADDR
// if not tmp then
15157: LD_VAR 0 2
15161: NOT
15162: IFFALSE 15166
// exit ;
15164: GO 15216
// for i in tmp do
15166: LD_ADDR_VAR 0 1
15170: PUSH
15171: LD_VAR 0 2
15175: PUSH
15176: FOR_IN
15177: IFFALSE 15214
// if GetCargo ( i , mat_artifact ) = 0 then
15179: LD_VAR 0 1
15183: PPUSH
15184: LD_INT 4
15186: PPUSH
15187: CALL_OW 289
15191: PUSH
15192: LD_INT 0
15194: EQUAL
15195: IFFALSE 15212
// SetCargo ( i , mat_siberit , 100 ) ;
15197: LD_VAR 0 1
15201: PPUSH
15202: LD_INT 3
15204: PPUSH
15205: LD_INT 100
15207: PPUSH
15208: CALL_OW 290
15212: GO 15176
15214: POP
15215: POP
// end ;
15216: PPOPN 2
15218: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15219: LD_EXP 8
15223: IFFALSE 15231
15225: PUSH
15226: LD_EXP 53
15230: AND
15231: IFFALSE 15414
15233: GO 15235
15235: DISABLE
15236: LD_INT 0
15238: PPUSH
15239: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_INT 22
15247: PUSH
15248: LD_OWVAR 2
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: ST_TO_ADDR
// if not tmp then
15262: LD_VAR 0 2
15266: NOT
15267: IFFALSE 15271
// exit ;
15269: GO 15414
// for i := 1 to 2 do
15271: LD_ADDR_VAR 0 1
15275: PUSH
15276: DOUBLE
15277: LD_INT 1
15279: DEC
15280: ST_TO_ADDR
15281: LD_INT 2
15283: PUSH
15284: FOR_TO
15285: IFFALSE 15412
// begin uc_side := your_side ;
15287: LD_ADDR_OWVAR 20
15291: PUSH
15292: LD_OWVAR 2
15296: ST_TO_ADDR
// uc_nation := nation_american ;
15297: LD_ADDR_OWVAR 21
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// vc_chassis := us_morphling ;
15305: LD_ADDR_OWVAR 37
15309: PUSH
15310: LD_INT 5
15312: ST_TO_ADDR
// vc_engine := engine_siberite ;
15313: LD_ADDR_OWVAR 39
15317: PUSH
15318: LD_INT 3
15320: ST_TO_ADDR
// vc_control := control_computer ;
15321: LD_ADDR_OWVAR 38
15325: PUSH
15326: LD_INT 3
15328: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15329: LD_ADDR_OWVAR 40
15333: PUSH
15334: LD_INT 10
15336: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15337: LD_VAR 0 2
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PPUSH
15346: CALL_OW 310
15350: NOT
15351: IFFALSE 15398
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15353: CALL_OW 45
15357: PPUSH
15358: LD_VAR 0 2
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: PPUSH
15367: CALL_OW 250
15371: PPUSH
15372: LD_VAR 0 2
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: CALL_OW 251
15385: PPUSH
15386: LD_INT 12
15388: PPUSH
15389: LD_INT 1
15391: PPUSH
15392: CALL_OW 50
15396: GO 15410
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15398: CALL_OW 45
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: CALL_OW 51
// end ;
15410: GO 15284
15412: POP
15413: POP
// end ;
15414: PPOPN 2
15416: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15417: LD_EXP 8
15421: IFFALSE 15429
15423: PUSH
15424: LD_EXP 54
15428: AND
15429: IFFALSE 15651
15431: GO 15433
15433: DISABLE
15434: LD_INT 0
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15442: LD_ADDR_VAR 0 6
15446: PUSH
15447: LD_INT 22
15449: PUSH
15450: LD_OWVAR 2
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 3
15471: PUSH
15472: LD_INT 23
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: LIST
15490: PPUSH
15491: CALL_OW 69
15495: ST_TO_ADDR
// if not tmp then
15496: LD_VAR 0 6
15500: NOT
15501: IFFALSE 15505
// exit ;
15503: GO 15651
// s1 := rand ( 1 , 4 ) ;
15505: LD_ADDR_VAR 0 2
15509: PUSH
15510: LD_INT 1
15512: PPUSH
15513: LD_INT 4
15515: PPUSH
15516: CALL_OW 12
15520: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15521: LD_ADDR_VAR 0 4
15525: PUSH
15526: LD_VAR 0 6
15530: PUSH
15531: LD_INT 1
15533: ARRAY
15534: PPUSH
15535: LD_VAR 0 2
15539: PPUSH
15540: CALL_OW 259
15544: ST_TO_ADDR
// if s1 = 1 then
15545: LD_VAR 0 2
15549: PUSH
15550: LD_INT 1
15552: EQUAL
15553: IFFALSE 15573
// s2 := rand ( 2 , 4 ) else
15555: LD_ADDR_VAR 0 3
15559: PUSH
15560: LD_INT 2
15562: PPUSH
15563: LD_INT 4
15565: PPUSH
15566: CALL_OW 12
15570: ST_TO_ADDR
15571: GO 15581
// s2 := 1 ;
15573: LD_ADDR_VAR 0 3
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15581: LD_ADDR_VAR 0 5
15585: PUSH
15586: LD_VAR 0 6
15590: PUSH
15591: LD_INT 1
15593: ARRAY
15594: PPUSH
15595: LD_VAR 0 3
15599: PPUSH
15600: CALL_OW 259
15604: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15605: LD_VAR 0 6
15609: PUSH
15610: LD_INT 1
15612: ARRAY
15613: PPUSH
15614: LD_VAR 0 2
15618: PPUSH
15619: LD_VAR 0 5
15623: PPUSH
15624: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15628: LD_VAR 0 6
15632: PUSH
15633: LD_INT 1
15635: ARRAY
15636: PPUSH
15637: LD_VAR 0 3
15641: PPUSH
15642: LD_VAR 0 4
15646: PPUSH
15647: CALL_OW 237
// end ;
15651: PPOPN 6
15653: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15654: LD_EXP 8
15658: IFFALSE 15666
15660: PUSH
15661: LD_EXP 55
15665: AND
15666: IFFALSE 15745
15668: GO 15670
15670: DISABLE
15671: LD_INT 0
15673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15674: LD_ADDR_VAR 0 1
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 30
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PPUSH
15705: CALL_OW 69
15709: ST_TO_ADDR
// if not tmp then
15710: LD_VAR 0 1
15714: NOT
15715: IFFALSE 15719
// exit ;
15717: GO 15745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15719: LD_VAR 0 1
15723: PUSH
15724: LD_INT 1
15726: PPUSH
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 12
15736: ARRAY
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 234
// end ;
15745: PPOPN 1
15747: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15748: LD_EXP 8
15752: IFFALSE 15760
15754: PUSH
15755: LD_EXP 56
15759: AND
15760: IFFALSE 15872
15762: GO 15764
15764: DISABLE
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15769: LD_ADDR_VAR 0 2
15773: PUSH
15774: LD_INT 22
15776: PUSH
15777: LD_OWVAR 2
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 2
15788: PUSH
15789: LD_INT 30
15791: PUSH
15792: LD_INT 27
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 30
15801: PUSH
15802: LD_INT 26
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 30
15811: PUSH
15812: LD_INT 28
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PPUSH
15829: CALL_OW 69
15833: ST_TO_ADDR
// if not tmp then
15834: LD_VAR 0 2
15838: NOT
15839: IFFALSE 15843
// exit ;
15841: GO 15872
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 2
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15870
// SetLives ( i , 1 ) ;
15856: LD_VAR 0 1
15860: PPUSH
15861: LD_INT 1
15863: PPUSH
15864: CALL_OW 234
15868: GO 15853
15870: POP
15871: POP
// end ;
15872: PPOPN 2
15874: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15875: LD_EXP 8
15879: IFFALSE 15887
15881: PUSH
15882: LD_EXP 57
15886: AND
15887: IFFALSE 16174
15889: GO 15891
15891: DISABLE
15892: LD_INT 0
15894: PPUSH
15895: PPUSH
15896: PPUSH
// begin i := rand ( 1 , 7 ) ;
15897: LD_ADDR_VAR 0 1
15901: PUSH
15902: LD_INT 1
15904: PPUSH
15905: LD_INT 7
15907: PPUSH
15908: CALL_OW 12
15912: ST_TO_ADDR
// case i of 1 :
15913: LD_VAR 0 1
15917: PUSH
15918: LD_INT 1
15920: DOUBLE
15921: EQUAL
15922: IFTRUE 15926
15924: GO 15936
15926: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15927: LD_STRING earthquake(getX(game), 0, 32)
15929: PPUSH
15930: CALL_OW 559
15934: GO 16174
15936: LD_INT 2
15938: DOUBLE
15939: EQUAL
15940: IFTRUE 15944
15942: GO 15958
15944: POP
// begin ToLua ( displayStucuk(); ) ;
15945: LD_STRING displayStucuk();
15947: PPUSH
15948: CALL_OW 559
// ResetFog ;
15952: CALL_OW 335
// end ; 3 :
15956: GO 16174
15958: LD_INT 3
15960: DOUBLE
15961: EQUAL
15962: IFTRUE 15966
15964: GO 16070
15966: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15967: LD_ADDR_VAR 0 2
15971: PUSH
15972: LD_INT 22
15974: PUSH
15975: LD_OWVAR 2
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 25
15986: PUSH
15987: LD_INT 1
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PPUSH
15998: CALL_OW 69
16002: ST_TO_ADDR
// if not tmp then
16003: LD_VAR 0 2
16007: NOT
16008: IFFALSE 16012
// exit ;
16010: GO 16174
// un := tmp [ rand ( 1 , tmp ) ] ;
16012: LD_ADDR_VAR 0 3
16016: PUSH
16017: LD_VAR 0 2
16021: PUSH
16022: LD_INT 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL_OW 12
16034: ARRAY
16035: ST_TO_ADDR
// if Crawls ( un ) then
16036: LD_VAR 0 3
16040: PPUSH
16041: CALL_OW 318
16045: IFFALSE 16056
// ComWalk ( un ) ;
16047: LD_VAR 0 3
16051: PPUSH
16052: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16056: LD_VAR 0 3
16060: PPUSH
16061: LD_INT 8
16063: PPUSH
16064: CALL_OW 336
// end ; 4 :
16068: GO 16174
16070: LD_INT 4
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16152
16078: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16079: LD_ADDR_VAR 0 2
16083: PUSH
16084: LD_INT 22
16086: PUSH
16087: LD_OWVAR 2
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 30
16098: PUSH
16099: LD_INT 29
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 2
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16174
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16124: LD_VAR 0 2
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16137: LD_VAR 0 2
16141: PUSH
16142: LD_INT 1
16144: ARRAY
16145: PPUSH
16146: CALL_OW 65
// end ; 5 .. 7 :
16150: GO 16174
16152: LD_INT 5
16154: DOUBLE
16155: GREATEREQUAL
16156: IFFALSE 16164
16158: LD_INT 7
16160: DOUBLE
16161: LESSEQUAL
16162: IFTRUE 16166
16164: GO 16173
16166: POP
// StreamSibBomb ; end ;
16167: CALL 12355 0 0
16171: GO 16174
16173: POP
// end ;
16174: PPOPN 3
16176: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16177: LD_EXP 8
16181: IFFALSE 16189
16183: PUSH
16184: LD_EXP 58
16188: AND
16189: IFFALSE 16345
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
16198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16199: LD_ADDR_VAR 0 2
16203: PUSH
16204: LD_INT 81
16206: PUSH
16207: LD_OWVAR 2
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 2
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if not tmp then
16253: LD_VAR 0 2
16257: NOT
16258: IFFALSE 16262
// exit ;
16260: GO 16345
// p := 0 ;
16262: LD_ADDR_VAR 0 3
16266: PUSH
16267: LD_INT 0
16269: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16270: LD_INT 35
16272: PPUSH
16273: CALL_OW 67
// p := p + 1 ;
16277: LD_ADDR_VAR 0 3
16281: PUSH
16282: LD_VAR 0 3
16286: PUSH
16287: LD_INT 1
16289: PLUS
16290: ST_TO_ADDR
// for i in tmp do
16291: LD_ADDR_VAR 0 1
16295: PUSH
16296: LD_VAR 0 2
16300: PUSH
16301: FOR_IN
16302: IFFALSE 16333
// if GetLives ( i ) < 1000 then
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 256
16313: PUSH
16314: LD_INT 1000
16316: LESS
16317: IFFALSE 16331
// SetLives ( i , 1000 ) ;
16319: LD_VAR 0 1
16323: PPUSH
16324: LD_INT 1000
16326: PPUSH
16327: CALL_OW 234
16331: GO 16301
16333: POP
16334: POP
// until p > 20 ;
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 20
16342: GREATER
16343: IFFALSE 16270
// end ;
16345: PPOPN 3
16347: END
// every 0 0$1 trigger StreamModeActive and sTime do
16348: LD_EXP 8
16352: IFFALSE 16360
16354: PUSH
16355: LD_EXP 59
16359: AND
16360: IFFALSE 16395
16362: GO 16364
16364: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16365: LD_INT 28
16367: PPUSH
16368: LD_OWVAR 2
16372: PPUSH
16373: LD_INT 2
16375: PPUSH
16376: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16380: LD_INT 30
16382: PPUSH
16383: LD_OWVAR 2
16387: PPUSH
16388: LD_INT 2
16390: PPUSH
16391: CALL_OW 322
// end ;
16395: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16396: LD_EXP 8
16400: IFFALSE 16408
16402: PUSH
16403: LD_EXP 60
16407: AND
16408: IFFALSE 16529
16410: GO 16412
16412: DISABLE
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16417: LD_ADDR_VAR 0 2
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_OWVAR 2
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 21
16436: PUSH
16437: LD_INT 1
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 3
16446: PUSH
16447: LD_INT 23
16449: PUSH
16450: LD_INT 0
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if not tmp then
16471: LD_VAR 0 2
16475: NOT
16476: IFFALSE 16480
// exit ;
16478: GO 16529
// for i in tmp do
16480: LD_ADDR_VAR 0 1
16484: PUSH
16485: LD_VAR 0 2
16489: PUSH
16490: FOR_IN
16491: IFFALSE 16527
// begin if Crawls ( i ) then
16493: LD_VAR 0 1
16497: PPUSH
16498: CALL_OW 318
16502: IFFALSE 16513
// ComWalk ( i ) ;
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 138
// SetClass ( i , 2 ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 2
16520: PPUSH
16521: CALL_OW 336
// end ;
16525: GO 16490
16527: POP
16528: POP
// end ;
16529: PPOPN 2
16531: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16532: LD_EXP 8
16536: IFFALSE 16544
16538: PUSH
16539: LD_EXP 61
16543: AND
16544: IFFALSE 16834
16546: GO 16548
16548: DISABLE
16549: LD_INT 0
16551: PPUSH
16552: PPUSH
16553: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16554: LD_OWVAR 2
16558: PPUSH
16559: LD_INT 9
16561: PPUSH
16562: LD_INT 1
16564: PPUSH
16565: LD_INT 1
16567: PPUSH
16568: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16572: LD_INT 9
16574: PPUSH
16575: LD_OWVAR 2
16579: PPUSH
16580: CALL_OW 343
// uc_side := 9 ;
16584: LD_ADDR_OWVAR 20
16588: PUSH
16589: LD_INT 9
16591: ST_TO_ADDR
// uc_nation := 2 ;
16592: LD_ADDR_OWVAR 21
16596: PUSH
16597: LD_INT 2
16599: ST_TO_ADDR
// hc_name := Dark Warrior ;
16600: LD_ADDR_OWVAR 26
16604: PUSH
16605: LD_STRING Dark Warrior
16607: ST_TO_ADDR
// hc_gallery :=  ;
16608: LD_ADDR_OWVAR 33
16612: PUSH
16613: LD_STRING 
16615: ST_TO_ADDR
// hc_noskilllimit := true ;
16616: LD_ADDR_OWVAR 76
16620: PUSH
16621: LD_INT 1
16623: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16624: LD_ADDR_OWVAR 31
16628: PUSH
16629: LD_INT 30
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 30
16637: PUSH
16638: LD_INT 30
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: ST_TO_ADDR
// un := CreateHuman ;
16647: LD_ADDR_VAR 0 3
16651: PUSH
16652: CALL_OW 44
16656: ST_TO_ADDR
// hc_noskilllimit := false ;
16657: LD_ADDR_OWVAR 76
16661: PUSH
16662: LD_INT 0
16664: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16665: LD_VAR 0 3
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 51
// ToLua ( playRanger() ) ;
16677: LD_STRING playRanger()
16679: PPUSH
16680: CALL_OW 559
// p := 0 ;
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: LD_INT 0
16691: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16692: LD_INT 35
16694: PPUSH
16695: CALL_OW 67
// p := p + 1 ;
16699: LD_ADDR_VAR 0 2
16703: PUSH
16704: LD_VAR 0 2
16708: PUSH
16709: LD_INT 1
16711: PLUS
16712: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16713: LD_VAR 0 3
16717: PPUSH
16718: CALL_OW 256
16722: PUSH
16723: LD_INT 1000
16725: LESS
16726: IFFALSE 16740
// SetLives ( un , 1000 ) ;
16728: LD_VAR 0 3
16732: PPUSH
16733: LD_INT 1000
16735: PPUSH
16736: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 81
16747: PUSH
16748: LD_OWVAR 2
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 91
16759: PUSH
16760: LD_VAR 0 3
16764: PUSH
16765: LD_INT 30
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: PPUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: CALL_OW 74
16791: PPUSH
16792: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16796: LD_VAR 0 2
16800: PUSH
16801: LD_INT 80
16803: GREATER
16804: IFTRUE 16817
16806: PUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: CALL_OW 301
16816: OR
16817: IFFALSE 16692
// if un then
16819: LD_VAR 0 3
16823: IFFALSE 16834
// RemoveUnit ( un ) ;
16825: LD_VAR 0 3
16829: PPUSH
16830: CALL_OW 64
// end ;
16834: PPOPN 3
16836: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16837: LD_EXP 62
16841: IFFALSE 16957
16843: GO 16845
16845: DISABLE
16846: LD_INT 0
16848: PPUSH
16849: PPUSH
16850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16851: LD_ADDR_VAR 0 2
16855: PUSH
16856: LD_INT 81
16858: PUSH
16859: LD_OWVAR 2
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 21
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PPUSH
16882: CALL_OW 69
16886: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16887: LD_STRING playComputer()
16889: PPUSH
16890: CALL_OW 559
// if not tmp then
16894: LD_VAR 0 2
16898: NOT
16899: IFFALSE 16903
// exit ;
16901: GO 16957
// for i in tmp do
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_VAR 0 2
16912: PUSH
16913: FOR_IN
16914: IFFALSE 16955
// for j := 1 to 4 do
16916: LD_ADDR_VAR 0 3
16920: PUSH
16921: DOUBLE
16922: LD_INT 1
16924: DEC
16925: ST_TO_ADDR
16926: LD_INT 4
16928: PUSH
16929: FOR_TO
16930: IFFALSE 16951
// SetSkill ( i , j , 10 ) ;
16932: LD_VAR 0 1
16936: PPUSH
16937: LD_VAR 0 3
16941: PPUSH
16942: LD_INT 10
16944: PPUSH
16945: CALL_OW 237
16949: GO 16929
16951: POP
16952: POP
16953: GO 16913
16955: POP
16956: POP
// end ;
16957: PPOPN 3
16959: END
// every 0 0$1 trigger s30 do var i , tmp ;
16960: LD_EXP 63
16964: IFFALSE 17033
16966: GO 16968
16968: DISABLE
16969: LD_INT 0
16971: PPUSH
16972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16973: LD_ADDR_VAR 0 2
16977: PUSH
16978: LD_INT 22
16980: PUSH
16981: LD_OWVAR 2
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PPUSH
16990: CALL_OW 69
16994: ST_TO_ADDR
// if not tmp then
16995: LD_VAR 0 2
16999: NOT
17000: IFFALSE 17004
// exit ;
17002: GO 17033
// for i in tmp do
17004: LD_ADDR_VAR 0 1
17008: PUSH
17009: LD_VAR 0 2
17013: PUSH
17014: FOR_IN
17015: IFFALSE 17031
// SetLives ( i , 300 ) ;
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_INT 300
17024: PPUSH
17025: CALL_OW 234
17029: GO 17014
17031: POP
17032: POP
// end ;
17033: PPOPN 2
17035: END
// every 0 0$1 trigger s60 do var i , tmp ;
17036: LD_EXP 64
17040: IFFALSE 17109
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17049: LD_ADDR_VAR 0 2
17053: PUSH
17054: LD_INT 22
17056: PUSH
17057: LD_OWVAR 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: ST_TO_ADDR
// if not tmp then
17071: LD_VAR 0 2
17075: NOT
17076: IFFALSE 17080
// exit ;
17078: GO 17109
// for i in tmp do
17080: LD_ADDR_VAR 0 1
17084: PUSH
17085: LD_VAR 0 2
17089: PUSH
17090: FOR_IN
17091: IFFALSE 17107
// SetLives ( i , 600 ) ;
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_INT 600
17100: PPUSH
17101: CALL_OW 234
17105: GO 17090
17107: POP
17108: POP
// end ;
17109: PPOPN 2
17111: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17112: LD_INT 0
17114: PPUSH
// case cmd of 301 :
17115: LD_VAR 0 1
17119: PUSH
17120: LD_INT 301
17122: DOUBLE
17123: EQUAL
17124: IFTRUE 17128
17126: GO 17160
17128: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17129: LD_VAR 0 6
17133: PPUSH
17134: LD_VAR 0 7
17138: PPUSH
17139: LD_VAR 0 8
17143: PPUSH
17144: LD_VAR 0 4
17148: PPUSH
17149: LD_VAR 0 5
17153: PPUSH
17154: CALL 18373 0 5
17158: GO 17281
17160: LD_INT 302
17162: DOUBLE
17163: EQUAL
17164: IFTRUE 17168
17166: GO 17205
17168: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17169: LD_VAR 0 6
17173: PPUSH
17174: LD_VAR 0 7
17178: PPUSH
17179: LD_VAR 0 8
17183: PPUSH
17184: LD_VAR 0 9
17188: PPUSH
17189: LD_VAR 0 4
17193: PPUSH
17194: LD_VAR 0 5
17198: PPUSH
17199: CALL 18464 0 6
17203: GO 17281
17205: LD_INT 303
17207: DOUBLE
17208: EQUAL
17209: IFTRUE 17213
17211: GO 17250
17213: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17214: LD_VAR 0 6
17218: PPUSH
17219: LD_VAR 0 7
17223: PPUSH
17224: LD_VAR 0 8
17228: PPUSH
17229: LD_VAR 0 9
17233: PPUSH
17234: LD_VAR 0 4
17238: PPUSH
17239: LD_VAR 0 5
17243: PPUSH
17244: CALL 17286 0 6
17248: GO 17281
17250: LD_INT 304
17252: DOUBLE
17253: EQUAL
17254: IFTRUE 17258
17256: GO 17280
17258: POP
// hHackTeleport ( unit , x , y ) ; end ;
17259: LD_VAR 0 2
17263: PPUSH
17264: LD_VAR 0 4
17268: PPUSH
17269: LD_VAR 0 5
17273: PPUSH
17274: CALL 19057 0 3
17278: GO 17281
17280: POP
// end ;
17281: LD_VAR 0 12
17285: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17290: LD_VAR 0 1
17294: PUSH
17295: LD_INT 1
17297: LESS
17298: IFTRUE 17310
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 3
17308: GREATER
17309: OR
17310: IFTRUE 17328
17312: PUSH
17313: LD_VAR 0 5
17317: PPUSH
17318: LD_VAR 0 6
17322: PPUSH
17323: CALL_OW 428
17327: OR
17328: IFFALSE 17332
// exit ;
17330: GO 18060
// uc_side := your_side ;
17332: LD_ADDR_OWVAR 20
17336: PUSH
17337: LD_OWVAR 2
17341: ST_TO_ADDR
// uc_nation := nation ;
17342: LD_ADDR_OWVAR 21
17346: PUSH
17347: LD_VAR 0 1
17351: ST_TO_ADDR
// bc_level = 1 ;
17352: LD_ADDR_OWVAR 43
17356: PUSH
17357: LD_INT 1
17359: ST_TO_ADDR
// case btype of 1 :
17360: LD_VAR 0 2
17364: PUSH
17365: LD_INT 1
17367: DOUBLE
17368: EQUAL
17369: IFTRUE 17373
17371: GO 17384
17373: POP
// bc_type := b_depot ; 2 :
17374: LD_ADDR_OWVAR 42
17378: PUSH
17379: LD_INT 0
17381: ST_TO_ADDR
17382: GO 18004
17384: LD_INT 2
17386: DOUBLE
17387: EQUAL
17388: IFTRUE 17392
17390: GO 17403
17392: POP
// bc_type := b_warehouse ; 3 :
17393: LD_ADDR_OWVAR 42
17397: PUSH
17398: LD_INT 1
17400: ST_TO_ADDR
17401: GO 18004
17403: LD_INT 3
17405: DOUBLE
17406: EQUAL
17407: IFTRUE 17411
17409: GO 17422
17411: POP
// bc_type := b_lab ; 4 .. 9 :
17412: LD_ADDR_OWVAR 42
17416: PUSH
17417: LD_INT 6
17419: ST_TO_ADDR
17420: GO 18004
17422: LD_INT 4
17424: DOUBLE
17425: GREATEREQUAL
17426: IFFALSE 17434
17428: LD_INT 9
17430: DOUBLE
17431: LESSEQUAL
17432: IFTRUE 17436
17434: GO 17496
17436: POP
// begin bc_type := b_lab_half ;
17437: LD_ADDR_OWVAR 42
17441: PUSH
17442: LD_INT 7
17444: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17445: LD_ADDR_OWVAR 44
17449: PUSH
17450: LD_INT 10
17452: PUSH
17453: LD_INT 11
17455: PUSH
17456: LD_INT 12
17458: PUSH
17459: LD_INT 15
17461: PUSH
17462: LD_INT 14
17464: PUSH
17465: LD_INT 13
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_VAR 0 2
17480: PUSH
17481: LD_INT 3
17483: MINUS
17484: ARRAY
17485: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17486: LD_ADDR_OWVAR 45
17490: PUSH
17491: LD_INT 9
17493: ST_TO_ADDR
// end ; 10 .. 13 :
17494: GO 18004
17496: LD_INT 10
17498: DOUBLE
17499: GREATEREQUAL
17500: IFFALSE 17508
17502: LD_INT 13
17504: DOUBLE
17505: LESSEQUAL
17506: IFTRUE 17510
17508: GO 17587
17510: POP
// begin bc_type := b_lab_full ;
17511: LD_ADDR_OWVAR 42
17515: PUSH
17516: LD_INT 8
17518: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17519: LD_ADDR_OWVAR 44
17523: PUSH
17524: LD_INT 10
17526: PUSH
17527: LD_INT 12
17529: PUSH
17530: LD_INT 14
17532: PUSH
17533: LD_INT 13
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: LD_INT 9
17549: MINUS
17550: ARRAY
17551: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17552: LD_ADDR_OWVAR 45
17556: PUSH
17557: LD_INT 11
17559: PUSH
17560: LD_INT 15
17562: PUSH
17563: LD_INT 12
17565: PUSH
17566: LD_INT 15
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_VAR 0 2
17579: PUSH
17580: LD_INT 9
17582: MINUS
17583: ARRAY
17584: ST_TO_ADDR
// end ; 14 :
17585: GO 18004
17587: LD_INT 14
17589: DOUBLE
17590: EQUAL
17591: IFTRUE 17595
17593: GO 17606
17595: POP
// bc_type := b_workshop ; 15 :
17596: LD_ADDR_OWVAR 42
17600: PUSH
17601: LD_INT 2
17603: ST_TO_ADDR
17604: GO 18004
17606: LD_INT 15
17608: DOUBLE
17609: EQUAL
17610: IFTRUE 17614
17612: GO 17625
17614: POP
// bc_type := b_factory ; 16 :
17615: LD_ADDR_OWVAR 42
17619: PUSH
17620: LD_INT 3
17622: ST_TO_ADDR
17623: GO 18004
17625: LD_INT 16
17627: DOUBLE
17628: EQUAL
17629: IFTRUE 17633
17631: GO 17644
17633: POP
// bc_type := b_ext_gun ; 17 :
17634: LD_ADDR_OWVAR 42
17638: PUSH
17639: LD_INT 17
17641: ST_TO_ADDR
17642: GO 18004
17644: LD_INT 17
17646: DOUBLE
17647: EQUAL
17648: IFTRUE 17652
17650: GO 17680
17652: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17653: LD_ADDR_OWVAR 42
17657: PUSH
17658: LD_INT 19
17660: PUSH
17661: LD_INT 23
17663: PUSH
17664: LD_INT 19
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: PUSH
17672: LD_VAR 0 1
17676: ARRAY
17677: ST_TO_ADDR
17678: GO 18004
17680: LD_INT 18
17682: DOUBLE
17683: EQUAL
17684: IFTRUE 17688
17686: GO 17699
17688: POP
// bc_type := b_ext_radar ; 19 :
17689: LD_ADDR_OWVAR 42
17693: PUSH
17694: LD_INT 20
17696: ST_TO_ADDR
17697: GO 18004
17699: LD_INT 19
17701: DOUBLE
17702: EQUAL
17703: IFTRUE 17707
17705: GO 17718
17707: POP
// bc_type := b_ext_radio ; 20 :
17708: LD_ADDR_OWVAR 42
17712: PUSH
17713: LD_INT 22
17715: ST_TO_ADDR
17716: GO 18004
17718: LD_INT 20
17720: DOUBLE
17721: EQUAL
17722: IFTRUE 17726
17724: GO 17737
17726: POP
// bc_type := b_ext_siberium ; 21 :
17727: LD_ADDR_OWVAR 42
17731: PUSH
17732: LD_INT 21
17734: ST_TO_ADDR
17735: GO 18004
17737: LD_INT 21
17739: DOUBLE
17740: EQUAL
17741: IFTRUE 17745
17743: GO 17756
17745: POP
// bc_type := b_ext_computer ; 22 :
17746: LD_ADDR_OWVAR 42
17750: PUSH
17751: LD_INT 24
17753: ST_TO_ADDR
17754: GO 18004
17756: LD_INT 22
17758: DOUBLE
17759: EQUAL
17760: IFTRUE 17764
17762: GO 17775
17764: POP
// bc_type := b_ext_track ; 23 :
17765: LD_ADDR_OWVAR 42
17769: PUSH
17770: LD_INT 16
17772: ST_TO_ADDR
17773: GO 18004
17775: LD_INT 23
17777: DOUBLE
17778: EQUAL
17779: IFTRUE 17783
17781: GO 17794
17783: POP
// bc_type := b_ext_laser ; 24 :
17784: LD_ADDR_OWVAR 42
17788: PUSH
17789: LD_INT 25
17791: ST_TO_ADDR
17792: GO 18004
17794: LD_INT 24
17796: DOUBLE
17797: EQUAL
17798: IFTRUE 17802
17800: GO 17813
17802: POP
// bc_type := b_control_tower ; 25 :
17803: LD_ADDR_OWVAR 42
17807: PUSH
17808: LD_INT 36
17810: ST_TO_ADDR
17811: GO 18004
17813: LD_INT 25
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17832
17821: POP
// bc_type := b_breastwork ; 26 :
17822: LD_ADDR_OWVAR 42
17826: PUSH
17827: LD_INT 31
17829: ST_TO_ADDR
17830: GO 18004
17832: LD_INT 26
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 17851
17840: POP
// bc_type := b_bunker ; 27 :
17841: LD_ADDR_OWVAR 42
17845: PUSH
17846: LD_INT 32
17848: ST_TO_ADDR
17849: GO 18004
17851: LD_INT 27
17853: DOUBLE
17854: EQUAL
17855: IFTRUE 17859
17857: GO 17870
17859: POP
// bc_type := b_turret ; 28 :
17860: LD_ADDR_OWVAR 42
17864: PUSH
17865: LD_INT 33
17867: ST_TO_ADDR
17868: GO 18004
17870: LD_INT 28
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 17889
17878: POP
// bc_type := b_armoury ; 29 :
17879: LD_ADDR_OWVAR 42
17883: PUSH
17884: LD_INT 4
17886: ST_TO_ADDR
17887: GO 18004
17889: LD_INT 29
17891: DOUBLE
17892: EQUAL
17893: IFTRUE 17897
17895: GO 17908
17897: POP
// bc_type := b_barracks ; 30 :
17898: LD_ADDR_OWVAR 42
17902: PUSH
17903: LD_INT 5
17905: ST_TO_ADDR
17906: GO 18004
17908: LD_INT 30
17910: DOUBLE
17911: EQUAL
17912: IFTRUE 17916
17914: GO 17927
17916: POP
// bc_type := b_solar_power ; 31 :
17917: LD_ADDR_OWVAR 42
17921: PUSH
17922: LD_INT 27
17924: ST_TO_ADDR
17925: GO 18004
17927: LD_INT 31
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17946
17935: POP
// bc_type := b_oil_power ; 32 :
17936: LD_ADDR_OWVAR 42
17940: PUSH
17941: LD_INT 26
17943: ST_TO_ADDR
17944: GO 18004
17946: LD_INT 32
17948: DOUBLE
17949: EQUAL
17950: IFTRUE 17954
17952: GO 17965
17954: POP
// bc_type := b_siberite_power ; 33 :
17955: LD_ADDR_OWVAR 42
17959: PUSH
17960: LD_INT 28
17962: ST_TO_ADDR
17963: GO 18004
17965: LD_INT 33
17967: DOUBLE
17968: EQUAL
17969: IFTRUE 17973
17971: GO 17984
17973: POP
// bc_type := b_oil_mine ; 34 :
17974: LD_ADDR_OWVAR 42
17978: PUSH
17979: LD_INT 29
17981: ST_TO_ADDR
17982: GO 18004
17984: LD_INT 34
17986: DOUBLE
17987: EQUAL
17988: IFTRUE 17992
17990: GO 18003
17992: POP
// bc_type := b_siberite_mine ; end ;
17993: LD_ADDR_OWVAR 42
17997: PUSH
17998: LD_INT 30
18000: ST_TO_ADDR
18001: GO 18004
18003: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18004: LD_ADDR_VAR 0 8
18008: PUSH
18009: LD_VAR 0 5
18013: PPUSH
18014: LD_VAR 0 6
18018: PPUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: CALL_OW 47
18028: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18029: LD_OWVAR 42
18033: PUSH
18034: LD_INT 32
18036: PUSH
18037: LD_INT 33
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: IN
18044: IFFALSE 18060
// PlaceWeaponTurret ( b , weapon ) ;
18046: LD_VAR 0 8
18050: PPUSH
18051: LD_VAR 0 4
18055: PPUSH
18056: CALL_OW 431
// end ;
18060: LD_VAR 0 7
18064: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18065: LD_INT 0
18067: PPUSH
18068: PPUSH
18069: PPUSH
18070: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18071: LD_ADDR_VAR 0 4
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_OWVAR 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 30
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 30
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: ST_TO_ADDR
// if not tmp then
18125: LD_VAR 0 4
18129: NOT
18130: IFFALSE 18134
// exit ;
18132: GO 18193
// for i in tmp do
18134: LD_ADDR_VAR 0 2
18138: PUSH
18139: LD_VAR 0 4
18143: PUSH
18144: FOR_IN
18145: IFFALSE 18191
// for j = 1 to 3 do
18147: LD_ADDR_VAR 0 3
18151: PUSH
18152: DOUBLE
18153: LD_INT 1
18155: DEC
18156: ST_TO_ADDR
18157: LD_INT 3
18159: PUSH
18160: FOR_TO
18161: IFFALSE 18187
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18163: LD_VAR 0 2
18167: PPUSH
18168: CALL_OW 274
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_INT 99999
18180: PPUSH
18181: CALL_OW 277
18185: GO 18160
18187: POP
18188: POP
18189: GO 18144
18191: POP
18192: POP
// end ;
18193: LD_VAR 0 1
18197: RET
// export function hHackSetLevel10 ; var i , j ; begin
18198: LD_INT 0
18200: PPUSH
18201: PPUSH
18202: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18203: LD_ADDR_VAR 0 2
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18276
// if IsSelected ( i ) then
18226: LD_VAR 0 2
18230: PPUSH
18231: CALL_OW 306
18235: IFFALSE 18274
// begin for j := 1 to 4 do
18237: LD_ADDR_VAR 0 3
18241: PUSH
18242: DOUBLE
18243: LD_INT 1
18245: DEC
18246: ST_TO_ADDR
18247: LD_INT 4
18249: PUSH
18250: FOR_TO
18251: IFFALSE 18272
// SetSkill ( i , j , 10 ) ;
18253: LD_VAR 0 2
18257: PPUSH
18258: LD_VAR 0 3
18262: PPUSH
18263: LD_INT 10
18265: PPUSH
18266: CALL_OW 237
18270: GO 18250
18272: POP
18273: POP
// end ;
18274: GO 18223
18276: POP
18277: POP
// end ;
18278: LD_VAR 0 1
18282: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18283: LD_INT 0
18285: PPUSH
18286: PPUSH
18287: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18288: LD_ADDR_VAR 0 2
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_OWVAR 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 69
18323: PUSH
18324: FOR_IN
18325: IFFALSE 18366
// begin for j := 1 to 4 do
18327: LD_ADDR_VAR 0 3
18331: PUSH
18332: DOUBLE
18333: LD_INT 1
18335: DEC
18336: ST_TO_ADDR
18337: LD_INT 4
18339: PUSH
18340: FOR_TO
18341: IFFALSE 18362
// SetSkill ( i , j , 10 ) ;
18343: LD_VAR 0 2
18347: PPUSH
18348: LD_VAR 0 3
18352: PPUSH
18353: LD_INT 10
18355: PPUSH
18356: CALL_OW 237
18360: GO 18340
18362: POP
18363: POP
// end ;
18364: GO 18324
18366: POP
18367: POP
// end ;
18368: LD_VAR 0 1
18372: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18373: LD_INT 0
18375: PPUSH
// uc_side := your_side ;
18376: LD_ADDR_OWVAR 20
18380: PUSH
18381: LD_OWVAR 2
18385: ST_TO_ADDR
// uc_nation := nation ;
18386: LD_ADDR_OWVAR 21
18390: PUSH
18391: LD_VAR 0 1
18395: ST_TO_ADDR
// InitHc ;
18396: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18400: LD_INT 0
18402: PPUSH
18403: LD_VAR 0 2
18407: PPUSH
18408: LD_VAR 0 3
18412: PPUSH
18413: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18417: LD_VAR 0 4
18421: PPUSH
18422: LD_VAR 0 5
18426: PPUSH
18427: CALL_OW 428
18431: PUSH
18432: LD_INT 0
18434: EQUAL
18435: IFFALSE 18459
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18437: CALL_OW 44
18441: PPUSH
18442: LD_VAR 0 4
18446: PPUSH
18447: LD_VAR 0 5
18451: PPUSH
18452: LD_INT 1
18454: PPUSH
18455: CALL_OW 48
// end ;
18459: LD_VAR 0 6
18463: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
// uc_side := your_side ;
18468: LD_ADDR_OWVAR 20
18472: PUSH
18473: LD_OWVAR 2
18477: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18478: LD_VAR 0 1
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 2
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: LD_INT 4
18494: PUSH
18495: LD_INT 5
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: IN
18505: IFFALSE 18517
// uc_nation := nation_american else
18507: LD_ADDR_OWVAR 21
18511: PUSH
18512: LD_INT 1
18514: ST_TO_ADDR
18515: GO 18560
// if chassis in [ 11 , 12 , 13 , 14 ] then
18517: LD_VAR 0 1
18521: PUSH
18522: LD_INT 11
18524: PUSH
18525: LD_INT 12
18527: PUSH
18528: LD_INT 13
18530: PUSH
18531: LD_INT 14
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: IN
18540: IFFALSE 18552
// uc_nation := nation_arabian else
18542: LD_ADDR_OWVAR 21
18546: PUSH
18547: LD_INT 2
18549: ST_TO_ADDR
18550: GO 18560
// uc_nation := nation_russian ;
18552: LD_ADDR_OWVAR 21
18556: PUSH
18557: LD_INT 3
18559: ST_TO_ADDR
// vc_chassis := chassis ;
18560: LD_ADDR_OWVAR 37
18564: PUSH
18565: LD_VAR 0 1
18569: ST_TO_ADDR
// vc_engine := engine ;
18570: LD_ADDR_OWVAR 39
18574: PUSH
18575: LD_VAR 0 2
18579: ST_TO_ADDR
// vc_control := control ;
18580: LD_ADDR_OWVAR 38
18584: PUSH
18585: LD_VAR 0 3
18589: ST_TO_ADDR
// vc_weapon := weapon ;
18590: LD_ADDR_OWVAR 40
18594: PUSH
18595: LD_VAR 0 4
18599: ST_TO_ADDR
// un := CreateVehicle ;
18600: LD_ADDR_VAR 0 8
18604: PUSH
18605: CALL_OW 45
18609: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18610: LD_VAR 0 8
18614: PPUSH
18615: LD_INT 0
18617: PPUSH
18618: LD_INT 5
18620: PPUSH
18621: CALL_OW 12
18625: PPUSH
18626: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18630: LD_VAR 0 8
18634: PPUSH
18635: LD_VAR 0 5
18639: PPUSH
18640: LD_VAR 0 6
18644: PPUSH
18645: LD_INT 1
18647: PPUSH
18648: CALL_OW 48
// end ;
18652: LD_VAR 0 7
18656: RET
// export hInvincible ; every 1 do
18657: GO 18659
18659: DISABLE
// hInvincible := [ ] ;
18660: LD_ADDR_EXP 65
18664: PUSH
18665: EMPTY
18666: ST_TO_ADDR
18667: END
// every 10 do var i ;
18668: GO 18670
18670: DISABLE
18671: LD_INT 0
18673: PPUSH
// begin enable ;
18674: ENABLE
// if not hInvincible then
18675: LD_EXP 65
18679: NOT
18680: IFFALSE 18684
// exit ;
18682: GO 18728
// for i in hInvincible do
18684: LD_ADDR_VAR 0 1
18688: PUSH
18689: LD_EXP 65
18693: PUSH
18694: FOR_IN
18695: IFFALSE 18726
// if GetLives ( i ) < 1000 then
18697: LD_VAR 0 1
18701: PPUSH
18702: CALL_OW 256
18706: PUSH
18707: LD_INT 1000
18709: LESS
18710: IFFALSE 18724
// SetLives ( i , 1000 ) ;
18712: LD_VAR 0 1
18716: PPUSH
18717: LD_INT 1000
18719: PPUSH
18720: CALL_OW 234
18724: GO 18694
18726: POP
18727: POP
// end ;
18728: PPOPN 1
18730: END
// export function hHackInvincible ; var i ; begin
18731: LD_INT 0
18733: PPUSH
18734: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18735: LD_ADDR_VAR 0 2
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 1
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 21
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: PUSH
18773: FOR_IN
18774: IFFALSE 18835
// if IsSelected ( i ) then
18776: LD_VAR 0 2
18780: PPUSH
18781: CALL_OW 306
18785: IFFALSE 18833
// begin if i in hInvincible then
18787: LD_VAR 0 2
18791: PUSH
18792: LD_EXP 65
18796: IN
18797: IFFALSE 18817
// hInvincible := hInvincible diff i else
18799: LD_ADDR_EXP 65
18803: PUSH
18804: LD_EXP 65
18808: PUSH
18809: LD_VAR 0 2
18813: DIFF
18814: ST_TO_ADDR
18815: GO 18833
// hInvincible := hInvincible union i ;
18817: LD_ADDR_EXP 65
18821: PUSH
18822: LD_EXP 65
18826: PUSH
18827: LD_VAR 0 2
18831: UNION
18832: ST_TO_ADDR
// end ;
18833: GO 18773
18835: POP
18836: POP
// end ;
18837: LD_VAR 0 1
18841: RET
// export function hHackInvisible ; var i , j ; begin
18842: LD_INT 0
18844: PPUSH
18845: PPUSH
18846: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18847: LD_ADDR_VAR 0 2
18851: PUSH
18852: LD_INT 21
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: PUSH
18867: FOR_IN
18868: IFFALSE 18892
// if IsSelected ( i ) then
18870: LD_VAR 0 2
18874: PPUSH
18875: CALL_OW 306
18879: IFFALSE 18890
// ComForceInvisible ( i ) ;
18881: LD_VAR 0 2
18885: PPUSH
18886: CALL_OW 496
18890: GO 18867
18892: POP
18893: POP
// end ;
18894: LD_VAR 0 1
18898: RET
// export function hHackChangeYourSide ; begin
18899: LD_INT 0
18901: PPUSH
// if your_side = 8 then
18902: LD_OWVAR 2
18906: PUSH
18907: LD_INT 8
18909: EQUAL
18910: IFFALSE 18922
// your_side := 0 else
18912: LD_ADDR_OWVAR 2
18916: PUSH
18917: LD_INT 0
18919: ST_TO_ADDR
18920: GO 18936
// your_side := your_side + 1 ;
18922: LD_ADDR_OWVAR 2
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: ST_TO_ADDR
// end ;
18936: LD_VAR 0 1
18940: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18941: LD_INT 0
18943: PPUSH
18944: PPUSH
18945: PPUSH
// for i in all_units do
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: LD_OWVAR 3
18955: PUSH
18956: FOR_IN
18957: IFFALSE 19035
// if IsSelected ( i ) then
18959: LD_VAR 0 2
18963: PPUSH
18964: CALL_OW 306
18968: IFFALSE 19033
// begin j := GetSide ( i ) ;
18970: LD_ADDR_VAR 0 3
18974: PUSH
18975: LD_VAR 0 2
18979: PPUSH
18980: CALL_OW 255
18984: ST_TO_ADDR
// if j = 8 then
18985: LD_VAR 0 3
18989: PUSH
18990: LD_INT 8
18992: EQUAL
18993: IFFALSE 19005
// j := 0 else
18995: LD_ADDR_VAR 0 3
18999: PUSH
19000: LD_INT 0
19002: ST_TO_ADDR
19003: GO 19019
// j := j + 1 ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 1
19017: PLUS
19018: ST_TO_ADDR
// SetSide ( i , j ) ;
19019: LD_VAR 0 2
19023: PPUSH
19024: LD_VAR 0 3
19028: PPUSH
19029: CALL_OW 235
// end ;
19033: GO 18956
19035: POP
19036: POP
// end ;
19037: LD_VAR 0 1
19041: RET
// export function hHackFog ; begin
19042: LD_INT 0
19044: PPUSH
// FogOff ( true ) ;
19045: LD_INT 1
19047: PPUSH
19048: CALL_OW 344
// end ;
19052: LD_VAR 0 1
19056: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19057: LD_INT 0
19059: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_VAR 0 2
19069: PPUSH
19070: LD_VAR 0 3
19074: PPUSH
19075: LD_INT 1
19077: PPUSH
19078: LD_INT 1
19080: PPUSH
19081: CALL_OW 483
// CenterOnXY ( x , y ) ;
19085: LD_VAR 0 2
19089: PPUSH
19090: LD_VAR 0 3
19094: PPUSH
19095: CALL_OW 84
// end ;
19099: LD_VAR 0 4
19103: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19104: LD_INT 0
19106: PPUSH
19107: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19108: LD_VAR 0 1
19112: NOT
19113: IFTRUE 19132
19115: PUSH
19116: LD_VAR 0 2
19120: PPUSH
19121: LD_VAR 0 3
19125: PPUSH
19126: CALL_OW 488
19130: NOT
19131: OR
19132: IFTRUE 19167
19134: PUSH
19135: LD_VAR 0 1
19139: PPUSH
19140: CALL_OW 266
19144: PUSH
19145: LD_INT 3
19147: NONEQUAL
19148: IFFALSE 19166
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 247
19160: PUSH
19161: LD_INT 1
19163: EQUAL
19164: NOT
19165: AND
19166: OR
19167: IFFALSE 19171
// exit ;
19169: GO 19453
// if GetType ( factory ) = unit_human then
19171: LD_VAR 0 1
19175: PPUSH
19176: CALL_OW 247
19180: PUSH
19181: LD_INT 1
19183: EQUAL
19184: IFFALSE 19201
// factory := IsInUnit ( factory ) ;
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_VAR 0 1
19195: PPUSH
19196: CALL_OW 310
19200: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19201: LD_VAR 0 1
19205: PPUSH
19206: CALL_OW 266
19210: PUSH
19211: LD_INT 3
19213: NONEQUAL
19214: IFFALSE 19218
// exit ;
19216: GO 19453
// for i := 1 to Count ( factoryWaypoints ) do
19218: LD_ADDR_VAR 0 5
19222: PUSH
19223: DOUBLE
19224: LD_INT 1
19226: DEC
19227: ST_TO_ADDR
19228: LD_EXP 66
19232: PPUSH
19233: CALL 29257 0 1
19237: PUSH
19238: FOR_TO
19239: IFFALSE 19401
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: CALL_OW 428
19255: PUSH
19256: LD_EXP 66
19260: PUSH
19261: LD_VAR 0 5
19265: ARRAY
19266: PUSH
19267: LD_INT 2
19269: ARRAY
19270: EQUAL
19271: IFFALSE 19303
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19273: LD_ADDR_EXP 66
19277: PUSH
19278: LD_EXP 66
19282: PPUSH
19283: LD_VAR 0 5
19287: PPUSH
19288: CALL_OW 3
19292: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19293: CALL 19458 0 0
// exit ;
19297: POP
19298: POP
19299: GO 19453
// end else
19301: GO 19399
// if factory = factoryWaypoints [ i ] [ 2 ] then
19303: LD_VAR 0 1
19307: PUSH
19308: LD_EXP 66
19312: PUSH
19313: LD_VAR 0 5
19317: ARRAY
19318: PUSH
19319: LD_INT 2
19321: ARRAY
19322: EQUAL
19323: IFFALSE 19399
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19325: LD_ADDR_EXP 66
19329: PUSH
19330: LD_EXP 66
19334: PPUSH
19335: LD_VAR 0 5
19339: PPUSH
19340: CALL_OW 3
19344: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19345: LD_ADDR_EXP 66
19349: PUSH
19350: LD_EXP 66
19354: PPUSH
19355: LD_VAR 0 1
19359: PPUSH
19360: CALL_OW 255
19364: PUSH
19365: LD_VAR 0 1
19369: PUSH
19370: LD_VAR 0 2
19374: PUSH
19375: LD_VAR 0 3
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL 65233 0 2
19390: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19391: CALL 19458 0 0
// exit ;
19395: POP
19396: POP
19397: GO 19453
// end ; end ;
19399: GO 19238
19401: POP
19402: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19403: LD_ADDR_EXP 66
19407: PUSH
19408: LD_EXP 66
19412: PPUSH
19413: LD_VAR 0 1
19417: PPUSH
19418: CALL_OW 255
19422: PUSH
19423: LD_VAR 0 1
19427: PUSH
19428: LD_VAR 0 2
19432: PUSH
19433: LD_VAR 0 3
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL 65233 0 2
19448: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19449: CALL 19458 0 0
// end ;
19453: LD_VAR 0 4
19457: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19458: LD_INT 0
19460: PPUSH
19461: PPUSH
19462: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19463: LD_STRING resetFactoryWaypoint();
19465: PPUSH
19466: CALL_OW 559
// if factoryWaypoints then
19470: LD_EXP 66
19474: IFFALSE 19595
// begin list := factoryWaypoints ;
19476: LD_ADDR_VAR 0 3
19480: PUSH
19481: LD_EXP 66
19485: ST_TO_ADDR
// for i := 1 to list do
19486: LD_ADDR_VAR 0 2
19490: PUSH
19491: DOUBLE
19492: LD_INT 1
19494: DEC
19495: ST_TO_ADDR
19496: LD_VAR 0 3
19500: PUSH
19501: FOR_TO
19502: IFFALSE 19593
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19504: LD_STRING setFactoryWaypointXY(
19506: PUSH
19507: LD_VAR 0 3
19511: PUSH
19512: LD_VAR 0 2
19516: ARRAY
19517: PUSH
19518: LD_INT 1
19520: ARRAY
19521: STR
19522: PUSH
19523: LD_STRING ,
19525: STR
19526: PUSH
19527: LD_VAR 0 3
19531: PUSH
19532: LD_VAR 0 2
19536: ARRAY
19537: PUSH
19538: LD_INT 2
19540: ARRAY
19541: STR
19542: PUSH
19543: LD_STRING ,
19545: STR
19546: PUSH
19547: LD_VAR 0 3
19551: PUSH
19552: LD_VAR 0 2
19556: ARRAY
19557: PUSH
19558: LD_INT 3
19560: ARRAY
19561: STR
19562: PUSH
19563: LD_STRING ,
19565: STR
19566: PUSH
19567: LD_VAR 0 3
19571: PUSH
19572: LD_VAR 0 2
19576: ARRAY
19577: PUSH
19578: LD_INT 4
19580: ARRAY
19581: STR
19582: PUSH
19583: LD_STRING )
19585: STR
19586: PPUSH
19587: CALL_OW 559
19591: GO 19501
19593: POP
19594: POP
// end ; end ;
19595: LD_VAR 0 1
19599: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19600: LD_INT 0
19602: PPUSH
// if HexInfo ( x , y ) = warehouse then
19603: LD_VAR 0 2
19607: PPUSH
19608: LD_VAR 0 3
19612: PPUSH
19613: CALL_OW 428
19617: PUSH
19618: LD_VAR 0 1
19622: EQUAL
19623: IFFALSE 19650
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19625: LD_ADDR_EXP 68
19629: PUSH
19630: LD_EXP 68
19634: PPUSH
19635: LD_VAR 0 1
19639: PPUSH
19640: LD_INT 0
19642: PPUSH
19643: CALL_OW 1
19647: ST_TO_ADDR
19648: GO 19701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19650: LD_ADDR_EXP 68
19654: PUSH
19655: LD_EXP 68
19659: PPUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: LD_VAR 0 1
19669: PPUSH
19670: CALL_OW 255
19674: PUSH
19675: LD_VAR 0 1
19679: PUSH
19680: LD_VAR 0 2
19684: PUSH
19685: LD_VAR 0 3
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: PPUSH
19696: CALL_OW 1
19700: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19701: CALL 19710 0 0
// end ;
19705: LD_VAR 0 4
19709: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19710: LD_INT 0
19712: PPUSH
19713: PPUSH
19714: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19715: LD_STRING resetWarehouseGatheringPoints();
19717: PPUSH
19718: CALL_OW 559
// if warehouseGatheringPoints then
19722: LD_EXP 68
19726: IFFALSE 19852
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19728: LD_ADDR_VAR 0 3
19732: PUSH
19733: LD_EXP 68
19737: PPUSH
19738: CALL 69167 0 1
19742: ST_TO_ADDR
// for i := 1 to list do
19743: LD_ADDR_VAR 0 2
19747: PUSH
19748: DOUBLE
19749: LD_INT 1
19751: DEC
19752: ST_TO_ADDR
19753: LD_VAR 0 3
19757: PUSH
19758: FOR_TO
19759: IFFALSE 19850
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19761: LD_STRING setWarehouseGatheringPointXY(
19763: PUSH
19764: LD_VAR 0 3
19768: PUSH
19769: LD_VAR 0 2
19773: ARRAY
19774: PUSH
19775: LD_INT 1
19777: ARRAY
19778: STR
19779: PUSH
19780: LD_STRING ,
19782: STR
19783: PUSH
19784: LD_VAR 0 3
19788: PUSH
19789: LD_VAR 0 2
19793: ARRAY
19794: PUSH
19795: LD_INT 2
19797: ARRAY
19798: STR
19799: PUSH
19800: LD_STRING ,
19802: STR
19803: PUSH
19804: LD_VAR 0 3
19808: PUSH
19809: LD_VAR 0 2
19813: ARRAY
19814: PUSH
19815: LD_INT 3
19817: ARRAY
19818: STR
19819: PUSH
19820: LD_STRING ,
19822: STR
19823: PUSH
19824: LD_VAR 0 3
19828: PUSH
19829: LD_VAR 0 2
19833: ARRAY
19834: PUSH
19835: LD_INT 4
19837: ARRAY
19838: STR
19839: PUSH
19840: LD_STRING )
19842: STR
19843: PPUSH
19844: CALL_OW 559
19848: GO 19758
19850: POP
19851: POP
// end ; end ;
19852: LD_VAR 0 1
19856: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19857: LD_EXP 68
19861: IFFALSE 20556
19863: GO 19865
19865: DISABLE
19866: LD_INT 0
19868: PPUSH
19869: PPUSH
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
19874: PPUSH
19875: PPUSH
19876: PPUSH
// begin enable ;
19877: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19878: LD_ADDR_VAR 0 3
19882: PUSH
19883: LD_EXP 68
19887: PPUSH
19888: CALL 69167 0 1
19892: ST_TO_ADDR
// if not list then
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19902
// exit ;
19900: GO 20556
// for i := 1 to list do
19902: LD_ADDR_VAR 0 1
19906: PUSH
19907: DOUBLE
19908: LD_INT 1
19910: DEC
19911: ST_TO_ADDR
19912: LD_VAR 0 3
19916: PUSH
19917: FOR_TO
19918: IFFALSE 20554
// begin depot := list [ i ] [ 2 ] ;
19920: LD_ADDR_VAR 0 8
19924: PUSH
19925: LD_VAR 0 3
19929: PUSH
19930: LD_VAR 0 1
19934: ARRAY
19935: PUSH
19936: LD_INT 2
19938: ARRAY
19939: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19940: LD_ADDR_VAR 0 5
19944: PUSH
19945: LD_VAR 0 3
19949: PUSH
19950: LD_VAR 0 1
19954: ARRAY
19955: PUSH
19956: LD_INT 1
19958: ARRAY
19959: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19960: LD_VAR 0 8
19964: PPUSH
19965: CALL_OW 301
19969: IFTRUE 19988
19971: PUSH
19972: LD_VAR 0 5
19976: PUSH
19977: LD_VAR 0 8
19981: PPUSH
19982: CALL_OW 255
19986: NONEQUAL
19987: OR
19988: IFFALSE 20017
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19990: LD_ADDR_EXP 68
19994: PUSH
19995: LD_EXP 68
19999: PPUSH
20000: LD_VAR 0 8
20004: PPUSH
20005: LD_INT 0
20007: PPUSH
20008: CALL_OW 1
20012: ST_TO_ADDR
// exit ;
20013: POP
20014: POP
20015: GO 20556
// end ; x := list [ i ] [ 3 ] ;
20017: LD_ADDR_VAR 0 6
20021: PUSH
20022: LD_VAR 0 3
20026: PUSH
20027: LD_VAR 0 1
20031: ARRAY
20032: PUSH
20033: LD_INT 3
20035: ARRAY
20036: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20037: LD_ADDR_VAR 0 7
20041: PUSH
20042: LD_VAR 0 3
20046: PUSH
20047: LD_VAR 0 1
20051: ARRAY
20052: PUSH
20053: LD_INT 4
20055: ARRAY
20056: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20057: LD_ADDR_VAR 0 9
20061: PUSH
20062: LD_VAR 0 6
20066: PPUSH
20067: LD_VAR 0 7
20071: PPUSH
20072: LD_INT 16
20074: PPUSH
20075: CALL 67741 0 3
20079: ST_TO_ADDR
// if not cratesNearbyPoint then
20080: LD_VAR 0 9
20084: NOT
20085: IFFALSE 20091
// exit ;
20087: POP
20088: POP
20089: GO 20556
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20091: LD_ADDR_VAR 0 4
20095: PUSH
20096: LD_INT 22
20098: PUSH
20099: LD_VAR 0 5
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 3
20110: PUSH
20111: LD_INT 60
20113: PUSH
20114: EMPTY
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 91
20123: PUSH
20124: LD_VAR 0 8
20128: PUSH
20129: LD_INT 6
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 25
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 25
20152: PUSH
20153: LD_INT 16
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: LIST
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: PPUSH
20171: CALL_OW 69
20175: PUSH
20176: LD_VAR 0 8
20180: PPUSH
20181: CALL_OW 313
20185: PPUSH
20186: LD_INT 3
20188: PUSH
20189: LD_INT 60
20191: PUSH
20192: EMPTY
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 25
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 25
20214: PUSH
20215: LD_INT 16
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 72
20235: UNION
20236: ST_TO_ADDR
// if tmp then
20237: LD_VAR 0 4
20241: IFFALSE 20321
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20243: LD_ADDR_VAR 0 4
20247: PUSH
20248: LD_VAR 0 4
20252: PPUSH
20253: LD_INT 3
20255: PPUSH
20256: CALL 65548 0 2
20260: ST_TO_ADDR
// for j in tmp do
20261: LD_ADDR_VAR 0 2
20265: PUSH
20266: LD_VAR 0 4
20270: PUSH
20271: FOR_IN
20272: IFFALSE 20315
// begin if IsInUnit ( j ) then
20274: LD_VAR 0 2
20278: PPUSH
20279: CALL_OW 310
20283: IFFALSE 20294
// ComExit ( j ) ;
20285: LD_VAR 0 2
20289: PPUSH
20290: CALL 65631 0 1
// AddComCollect ( j , x , y ) ;
20294: LD_VAR 0 2
20298: PPUSH
20299: LD_VAR 0 6
20303: PPUSH
20304: LD_VAR 0 7
20308: PPUSH
20309: CALL_OW 177
// end ;
20313: GO 20271
20315: POP
20316: POP
// exit ;
20317: POP
20318: POP
20319: GO 20556
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_INT 22
20328: PUSH
20329: LD_VAR 0 5
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 91
20340: PUSH
20341: LD_VAR 0 8
20345: PUSH
20346: LD_INT 8
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: LD_INT 34
20359: PUSH
20360: LD_INT 12
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 34
20369: PUSH
20370: LD_INT 51
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 34
20379: PUSH
20380: LD_INT 32
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 34
20389: PUSH
20390: LD_INT 89
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: PPUSH
20409: CALL_OW 69
20413: ST_TO_ADDR
// if tmp then
20414: LD_VAR 0 4
20418: IFFALSE 20552
// begin for j in tmp do
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_VAR 0 4
20429: PUSH
20430: FOR_IN
20431: IFFALSE 20550
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20433: LD_VAR 0 2
20437: PPUSH
20438: CALL_OW 262
20442: PUSH
20443: LD_INT 3
20445: EQUAL
20446: IFTRUE 20463
20448: PUSH
20449: LD_VAR 0 2
20453: PPUSH
20454: CALL_OW 261
20458: PUSH
20459: LD_INT 20
20461: GREATER
20462: OR
20463: IFFALSE 20477
20465: PUSH
20466: LD_VAR 0 2
20470: PPUSH
20471: CALL_OW 314
20475: NOT
20476: AND
20477: IFFALSE 20507
20479: PUSH
20480: LD_VAR 0 2
20484: PPUSH
20485: CALL_OW 263
20489: PUSH
20490: LD_INT 1
20492: NONEQUAL
20493: IFTRUE 20506
20495: PUSH
20496: LD_VAR 0 2
20500: PPUSH
20501: CALL_OW 311
20505: OR
20506: AND
20507: IFFALSE 20548
// begin ComCollect ( j , x , y ) ;
20509: LD_VAR 0 2
20513: PPUSH
20514: LD_VAR 0 6
20518: PPUSH
20519: LD_VAR 0 7
20523: PPUSH
20524: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20528: LD_VAR 0 2
20532: PPUSH
20533: LD_VAR 0 8
20537: PPUSH
20538: CALL_OW 172
// exit ;
20542: POP
20543: POP
20544: POP
20545: POP
20546: GO 20556
// end ;
20548: GO 20430
20550: POP
20551: POP
// end ; end ;
20552: GO 19917
20554: POP
20555: POP
// end ; end_of_file
20556: PPOPN 9
20558: END
// export function SOS_UnitDestroyed ( un ) ; begin
20559: LD_INT 0
20561: PPUSH
// ComRadiation ( un ) ;
20562: LD_VAR 0 1
20566: PPUSH
20567: CALL 21729 0 1
// end ;
20571: LD_VAR 0 2
20575: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20576: LD_INT 0
20578: PPUSH
// ComRadiation ( un ) ;
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL 21729 0 1
// end ;
20588: LD_VAR 0 2
20592: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20593: LD_INT 0
20595: PPUSH
// end ;
20596: LD_VAR 0 4
20600: RET
// export function SOS_Command ( cmd ) ; begin
20601: LD_INT 0
20603: PPUSH
// end ;
20604: LD_VAR 0 2
20608: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20609: LD_INT 0
20611: PPUSH
// end ;
20612: LD_VAR 0 6
20616: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
20617: LD_INT 0
20619: PPUSH
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
// if not vehicle or not factory then
20624: LD_VAR 0 1
20628: NOT
20629: IFTRUE 20638
20631: PUSH
20632: LD_VAR 0 2
20636: NOT
20637: OR
20638: IFFALSE 20642
// exit ;
20640: GO 21304
// weapon := GetWeapon ( vehicle ) ;
20642: LD_ADDR_VAR 0 7
20646: PUSH
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL_OW 264
20656: ST_TO_ADDR
// if weapon = ar_miner then
20657: LD_VAR 0 7
20661: PUSH
20662: LD_INT 81
20664: EQUAL
20665: IFFALSE 20722
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
20667: LD_ADDR_EXP 77
20671: PUSH
20672: LD_EXP 77
20676: PPUSH
20677: LD_EXP 77
20681: PUSH
20682: LD_INT 1
20684: PLUS
20685: PPUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: CALL_OW 1
20695: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20696: LD_ADDR_EXP 78
20700: PUSH
20701: LD_EXP 78
20705: PPUSH
20706: LD_EXP 78
20710: PUSH
20711: LD_INT 1
20713: PLUS
20714: PPUSH
20715: EMPTY
20716: PPUSH
20717: CALL_OW 1
20721: ST_TO_ADDR
// end ; if not factoryWaypoints then
20722: LD_EXP 66
20726: NOT
20727: IFFALSE 20731
// exit ;
20729: GO 21304
// for i := 1 to Count ( factoryWaypoints ) do
20731: LD_ADDR_VAR 0 4
20735: PUSH
20736: DOUBLE
20737: LD_INT 1
20739: DEC
20740: ST_TO_ADDR
20741: LD_EXP 66
20745: PPUSH
20746: CALL 29257 0 1
20750: PUSH
20751: FOR_TO
20752: IFFALSE 21302
// if factoryWaypoints [ i ] [ 2 ] = factory then
20754: LD_EXP 66
20758: PUSH
20759: LD_VAR 0 4
20763: ARRAY
20764: PUSH
20765: LD_INT 2
20767: ARRAY
20768: PUSH
20769: LD_VAR 0 2
20773: EQUAL
20774: IFFALSE 21300
// begin if GetControl ( vehicle ) = control_manual then
20776: LD_VAR 0 1
20780: PPUSH
20781: CALL_OW 263
20785: PUSH
20786: LD_INT 1
20788: EQUAL
20789: IFFALSE 21153
// begin driver := IsDrivenBy ( vehicle ) ;
20791: LD_ADDR_VAR 0 5
20795: PUSH
20796: LD_VAR 0 1
20800: PPUSH
20801: CALL_OW 311
20805: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
20806: LD_VAR 0 5
20810: PUSH
20811: LD_EXP 67
20815: IN
20816: IFTRUE 20830
20818: PUSH
20819: LD_VAR 0 1
20823: PUSH
20824: LD_EXP 67
20828: IN
20829: OR
20830: IFFALSE 20836
// exit ;
20832: POP
20833: POP
20834: GO 21304
// if not HasTask ( driver ) then
20836: LD_VAR 0 5
20840: PPUSH
20841: CALL_OW 314
20845: NOT
20846: IFFALSE 21151
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
20848: LD_ADDR_EXP 67
20852: PUSH
20853: LD_EXP 67
20857: PPUSH
20858: LD_VAR 0 5
20862: PPUSH
20863: CALL 65233 0 2
20867: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
20868: LD_ADDR_EXP 67
20872: PUSH
20873: LD_EXP 67
20877: PPUSH
20878: LD_VAR 0 1
20882: PPUSH
20883: CALL 65233 0 2
20887: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20888: LD_ADDR_VAR 0 6
20892: PUSH
20893: LD_EXP 66
20897: PUSH
20898: LD_VAR 0 4
20902: ARRAY
20903: PUSH
20904: LD_INT 3
20906: ARRAY
20907: PPUSH
20908: LD_EXP 66
20912: PUSH
20913: LD_VAR 0 4
20917: ARRAY
20918: PUSH
20919: LD_INT 4
20921: ARRAY
20922: PPUSH
20923: CALL_OW 428
20927: ST_TO_ADDR
// if hex then
20928: LD_VAR 0 6
20932: IFFALSE 20950
// ComMoveUnit ( driver , hex ) else
20934: LD_VAR 0 5
20938: PPUSH
20939: LD_VAR 0 6
20943: PPUSH
20944: CALL_OW 112
20948: GO 21034
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
20950: LD_VAR 0 1
20954: PPUSH
20955: LD_EXP 66
20959: PUSH
20960: LD_VAR 0 4
20964: ARRAY
20965: PUSH
20966: LD_INT 3
20968: ARRAY
20969: PPUSH
20970: LD_EXP 66
20974: PUSH
20975: LD_VAR 0 4
20979: ARRAY
20980: PUSH
20981: LD_INT 4
20983: ARRAY
20984: PPUSH
20985: CALL_OW 297
20989: PUSH
20990: LD_INT 0
20992: GREATER
20993: IFFALSE 21034
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20995: LD_VAR 0 5
20999: PPUSH
21000: LD_EXP 66
21004: PUSH
21005: LD_VAR 0 4
21009: ARRAY
21010: PUSH
21011: LD_INT 3
21013: ARRAY
21014: PPUSH
21015: LD_EXP 66
21019: PUSH
21020: LD_VAR 0 4
21024: ARRAY
21025: PUSH
21026: LD_INT 4
21028: ARRAY
21029: PPUSH
21030: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21034: LD_VAR 0 5
21038: PPUSH
21039: CALL_OW 181
// if Multiplayer then
21043: LD_OWVAR 4
21047: IFFALSE 21096
// begin repeat wait ( 10 ) ;
21049: LD_INT 10
21051: PPUSH
21052: CALL_OW 67
// until not IsInUnit ( driver ) ;
21056: LD_VAR 0 5
21060: PPUSH
21061: CALL_OW 310
21065: NOT
21066: IFFALSE 21049
// if not HasTask ( driver ) then
21068: LD_VAR 0 5
21072: PPUSH
21073: CALL_OW 314
21077: NOT
21078: IFFALSE 21094
// ComEnterUnit ( driver , factory ) ;
21080: LD_VAR 0 5
21084: PPUSH
21085: LD_VAR 0 2
21089: PPUSH
21090: CALL_OW 120
// end else
21094: GO 21110
// AddComEnterUnit ( driver , factory ) ;
21096: LD_VAR 0 5
21100: PPUSH
21101: LD_VAR 0 2
21105: PPUSH
21106: CALL_OW 180
// wait ( 0 0$1 ) ;
21110: LD_INT 35
21112: PPUSH
21113: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
21117: LD_ADDR_EXP 67
21121: PUSH
21122: LD_EXP 67
21126: PUSH
21127: LD_VAR 0 5
21131: DIFF
21132: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
21133: LD_ADDR_EXP 67
21137: PUSH
21138: LD_EXP 67
21142: PUSH
21143: LD_VAR 0 1
21147: DIFF
21148: ST_TO_ADDR
// break ;
21149: GO 21302
// end ; end else
21151: GO 21300
// if GetControl ( vehicle ) = control_remote then
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 263
21162: PUSH
21163: LD_INT 2
21165: EQUAL
21166: IFFALSE 21252
// begin wait ( 0 0$2 ) ;
21168: LD_INT 70
21170: PPUSH
21171: CALL_OW 67
// repeat wait ( 10 ) ;
21175: LD_INT 10
21177: PPUSH
21178: CALL_OW 67
// Connect ( vehicle ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL 35535 0 1
// until IsControledBy ( vehicle ) ;
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 312
21200: IFFALSE 21175
// wait ( 10 ) ;
21202: LD_INT 10
21204: PPUSH
21205: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21209: LD_VAR 0 1
21213: PPUSH
21214: LD_EXP 66
21218: PUSH
21219: LD_VAR 0 4
21223: ARRAY
21224: PUSH
21225: LD_INT 3
21227: ARRAY
21228: PPUSH
21229: LD_EXP 66
21233: PUSH
21234: LD_VAR 0 4
21238: ARRAY
21239: PUSH
21240: LD_INT 4
21242: ARRAY
21243: PPUSH
21244: CALL_OW 111
// break ;
21248: GO 21302
// end else
21250: GO 21300
// begin wait ( 0 0$3 ) ;
21252: LD_INT 105
21254: PPUSH
21255: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21259: LD_VAR 0 1
21263: PPUSH
21264: LD_EXP 66
21268: PUSH
21269: LD_VAR 0 4
21273: ARRAY
21274: PUSH
21275: LD_INT 3
21277: ARRAY
21278: PPUSH
21279: LD_EXP 66
21283: PUSH
21284: LD_VAR 0 4
21288: ARRAY
21289: PUSH
21290: LD_INT 4
21292: ARRAY
21293: PPUSH
21294: CALL_OW 111
// break ;
21298: GO 21302
// end ; end ;
21300: GO 20751
21302: POP
21303: POP
// end ;
21304: LD_VAR 0 3
21308: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21309: LD_INT 0
21311: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21312: LD_VAR 0 1
21316: PUSH
21317: LD_INT 250
21319: EQUAL
21320: IFFALSE 21337
21322: PUSH
21323: LD_VAR 0 2
21327: PPUSH
21328: CALL_OW 264
21332: PUSH
21333: LD_INT 81
21335: EQUAL
21336: AND
21337: IFFALSE 21358
// MinerPlaceMine ( unit , x , y ) ;
21339: LD_VAR 0 2
21343: PPUSH
21344: LD_VAR 0 4
21348: PPUSH
21349: LD_VAR 0 5
21353: PPUSH
21354: CALL 24704 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21358: LD_VAR 0 1
21362: PUSH
21363: LD_INT 251
21365: EQUAL
21366: IFFALSE 21383
21368: PUSH
21369: LD_VAR 0 2
21373: PPUSH
21374: CALL_OW 264
21378: PUSH
21379: LD_INT 81
21381: EQUAL
21382: AND
21383: IFFALSE 21404
// MinerDetonateMine ( unit , x , y ) ;
21385: LD_VAR 0 2
21389: PPUSH
21390: LD_VAR 0 4
21394: PPUSH
21395: LD_VAR 0 5
21399: PPUSH
21400: CALL 25111 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21404: LD_VAR 0 1
21408: PUSH
21409: LD_INT 252
21411: EQUAL
21412: IFFALSE 21429
21414: PUSH
21415: LD_VAR 0 2
21419: PPUSH
21420: CALL_OW 264
21424: PUSH
21425: LD_INT 81
21427: EQUAL
21428: AND
21429: IFFALSE 21450
// MinerCreateMinefield ( unit , x , y ) ;
21431: LD_VAR 0 2
21435: PPUSH
21436: LD_VAR 0 4
21440: PPUSH
21441: LD_VAR 0 5
21445: PPUSH
21446: CALL 25343 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21450: LD_VAR 0 1
21454: PUSH
21455: LD_INT 253
21457: EQUAL
21458: IFFALSE 21475
21460: PUSH
21461: LD_VAR 0 2
21465: PPUSH
21466: CALL_OW 257
21470: PUSH
21471: LD_INT 5
21473: EQUAL
21474: AND
21475: IFFALSE 21496
// ComBinocular ( unit , x , y ) ;
21477: LD_VAR 0 2
21481: PPUSH
21482: LD_VAR 0 4
21486: PPUSH
21487: LD_VAR 0 5
21491: PPUSH
21492: CALL 25718 0 3
// if selectedUnit then
21496: LD_VAR 0 3
21500: IFFALSE 21560
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21502: LD_VAR 0 1
21506: PUSH
21507: LD_INT 254
21509: EQUAL
21510: IFFALSE 21527
21512: PUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 264
21522: PUSH
21523: LD_INT 99
21525: EQUAL
21526: AND
21527: IFFALSE 21544
21529: PUSH
21530: LD_VAR 0 3
21534: PPUSH
21535: CALL_OW 263
21539: PUSH
21540: LD_INT 3
21542: EQUAL
21543: AND
21544: IFFALSE 21560
// HackDestroyVehicle ( unit , selectedUnit ) ;
21546: LD_VAR 0 2
21550: PPUSH
21551: LD_VAR 0 3
21555: PPUSH
21556: CALL 23894 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21560: LD_VAR 0 1
21564: PUSH
21565: LD_INT 255
21567: EQUAL
21568: IFFALSE 21592
21570: PUSH
21571: LD_VAR 0 2
21575: PPUSH
21576: CALL_OW 264
21580: PUSH
21581: LD_INT 14
21583: PUSH
21584: LD_INT 53
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: IN
21591: AND
21592: IFFALSE 21610
21594: PUSH
21595: LD_VAR 0 4
21599: PPUSH
21600: LD_VAR 0 5
21604: PPUSH
21605: CALL_OW 488
21609: AND
21610: IFFALSE 21634
// CutTreeXYR ( unit , x , y , 12 ) ;
21612: LD_VAR 0 2
21616: PPUSH
21617: LD_VAR 0 4
21621: PPUSH
21622: LD_VAR 0 5
21626: PPUSH
21627: LD_INT 12
21629: PPUSH
21630: CALL 21825 0 4
// if cmd = 256 then
21634: LD_VAR 0 1
21638: PUSH
21639: LD_INT 256
21641: EQUAL
21642: IFFALSE 21663
// SetFactoryWaypoint ( unit , x , y ) ;
21644: LD_VAR 0 2
21648: PPUSH
21649: LD_VAR 0 4
21653: PPUSH
21654: LD_VAR 0 5
21658: PPUSH
21659: CALL 19104 0 3
// if cmd = 257 then
21663: LD_VAR 0 1
21667: PUSH
21668: LD_INT 257
21670: EQUAL
21671: IFFALSE 21692
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21673: LD_VAR 0 2
21677: PPUSH
21678: LD_VAR 0 4
21682: PPUSH
21683: LD_VAR 0 5
21687: PPUSH
21688: CALL 19600 0 3
// if cmd = 258 then
21692: LD_VAR 0 1
21696: PUSH
21697: LD_INT 258
21699: EQUAL
21700: IFFALSE 21724
// BurnTreeXYR ( unit , x , y , 8 ) ;
21702: LD_VAR 0 2
21706: PPUSH
21707: LD_VAR 0 4
21711: PPUSH
21712: LD_VAR 0 5
21716: PPUSH
21717: LD_INT 8
21719: PPUSH
21720: CALL 22247 0 4
// end ;
21724: LD_VAR 0 6
21728: RET
// export function ComRadiation ( un ) ; var eff ; begin
21729: LD_INT 0
21731: PPUSH
21732: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 264
21742: PUSH
21743: LD_INT 91
21745: NONEQUAL
21746: IFFALSE 21750
// exit ;
21748: GO 21820
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21750: LD_INT 68
21752: PPUSH
21753: LD_VAR 0 1
21757: PPUSH
21758: CALL_OW 255
21762: PPUSH
21763: CALL_OW 321
21767: PUSH
21768: LD_INT 2
21770: EQUAL
21771: IFFALSE 21783
// eff := 50 else
21773: LD_ADDR_VAR 0 3
21777: PUSH
21778: LD_INT 50
21780: ST_TO_ADDR
21781: GO 21791
// eff := 25 ;
21783: LD_ADDR_VAR 0 3
21787: PUSH
21788: LD_INT 25
21790: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21791: LD_VAR 0 1
21795: PPUSH
21796: CALL_OW 250
21800: PPUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: CALL_OW 251
21810: PPUSH
21811: LD_VAR 0 3
21815: PPUSH
21816: CALL_OW 495
// end ;
21820: LD_VAR 0 2
21824: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 302
21845: NOT
21846: IFTRUE 21865
21848: PUSH
21849: LD_VAR 0 2
21853: PPUSH
21854: LD_VAR 0 3
21858: PPUSH
21859: CALL_OW 488
21863: NOT
21864: OR
21865: IFTRUE 21874
21867: PUSH
21868: LD_VAR 0 4
21872: NOT
21873: OR
21874: IFFALSE 21878
// exit ;
21876: GO 22242
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
21878: LD_VAR 0 1
21882: PPUSH
21883: CALL_OW 437
21887: PPUSH
21888: CALL 29257 0 1
21892: PUSH
21893: LD_INT 10
21895: GREATER
21896: IFFALSE 21900
// exit ;
21898: GO 22242
// list := [ ] ;
21900: LD_ADDR_VAR 0 13
21904: PUSH
21905: EMPTY
21906: ST_TO_ADDR
// if x - r < 0 then
21907: LD_VAR 0 2
21911: PUSH
21912: LD_VAR 0 4
21916: MINUS
21917: PUSH
21918: LD_INT 0
21920: LESS
21921: IFFALSE 21933
// min_x := 0 else
21923: LD_ADDR_VAR 0 7
21927: PUSH
21928: LD_INT 0
21930: ST_TO_ADDR
21931: GO 21949
// min_x := x - r ;
21933: LD_ADDR_VAR 0 7
21937: PUSH
21938: LD_VAR 0 2
21942: PUSH
21943: LD_VAR 0 4
21947: MINUS
21948: ST_TO_ADDR
// if y - r < 0 then
21949: LD_VAR 0 3
21953: PUSH
21954: LD_VAR 0 4
21958: MINUS
21959: PUSH
21960: LD_INT 0
21962: LESS
21963: IFFALSE 21975
// min_y := 0 else
21965: LD_ADDR_VAR 0 8
21969: PUSH
21970: LD_INT 0
21972: ST_TO_ADDR
21973: GO 21991
// min_y := y - r ;
21975: LD_ADDR_VAR 0 8
21979: PUSH
21980: LD_VAR 0 3
21984: PUSH
21985: LD_VAR 0 4
21989: MINUS
21990: ST_TO_ADDR
// max_x := x + r ;
21991: LD_ADDR_VAR 0 9
21995: PUSH
21996: LD_VAR 0 2
22000: PUSH
22001: LD_VAR 0 4
22005: PLUS
22006: ST_TO_ADDR
// max_y := y + r ;
22007: LD_ADDR_VAR 0 10
22011: PUSH
22012: LD_VAR 0 3
22016: PUSH
22017: LD_VAR 0 4
22021: PLUS
22022: ST_TO_ADDR
// for _x = min_x to max_x do
22023: LD_ADDR_VAR 0 11
22027: PUSH
22028: DOUBLE
22029: LD_VAR 0 7
22033: DEC
22034: ST_TO_ADDR
22035: LD_VAR 0 9
22039: PUSH
22040: FOR_TO
22041: IFFALSE 22160
// for _y = min_y to max_y do
22043: LD_ADDR_VAR 0 12
22047: PUSH
22048: DOUBLE
22049: LD_VAR 0 8
22053: DEC
22054: ST_TO_ADDR
22055: LD_VAR 0 10
22059: PUSH
22060: FOR_TO
22061: IFFALSE 22156
// begin if not ValidHex ( _x , _y ) then
22063: LD_VAR 0 11
22067: PPUSH
22068: LD_VAR 0 12
22072: PPUSH
22073: CALL_OW 488
22077: NOT
22078: IFFALSE 22082
// continue ;
22080: GO 22060
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22082: LD_VAR 0 11
22086: PPUSH
22087: LD_VAR 0 12
22091: PPUSH
22092: CALL_OW 351
22096: IFFALSE 22114
22098: PUSH
22099: LD_VAR 0 11
22103: PPUSH
22104: LD_VAR 0 12
22108: PPUSH
22109: CALL_OW 554
22113: AND
22114: IFFALSE 22154
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22116: LD_ADDR_VAR 0 13
22120: PUSH
22121: LD_VAR 0 13
22125: PPUSH
22126: LD_VAR 0 13
22130: PUSH
22131: LD_INT 1
22133: PLUS
22134: PPUSH
22135: LD_VAR 0 11
22139: PUSH
22140: LD_VAR 0 12
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL_OW 2
22153: ST_TO_ADDR
// end ;
22154: GO 22060
22156: POP
22157: POP
22158: GO 22040
22160: POP
22161: POP
// if not list then
22162: LD_VAR 0 13
22166: NOT
22167: IFFALSE 22171
// exit ;
22169: GO 22242
// for i in list do
22171: LD_ADDR_VAR 0 6
22175: PUSH
22176: LD_VAR 0 13
22180: PUSH
22181: FOR_IN
22182: IFFALSE 22240
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: LD_STRING M
22191: PUSH
22192: LD_VAR 0 6
22196: PUSH
22197: LD_INT 1
22199: ARRAY
22200: PUSH
22201: LD_VAR 0 6
22205: PUSH
22206: LD_INT 2
22208: ARRAY
22209: PUSH
22210: LD_INT 0
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: PPUSH
22234: CALL_OW 447
22238: GO 22181
22240: POP
22241: POP
// end ;
22242: LD_VAR 0 5
22246: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22247: LD_INT 0
22249: PPUSH
22250: PPUSH
22251: PPUSH
22252: PPUSH
22253: PPUSH
22254: PPUSH
22255: PPUSH
22256: PPUSH
22257: PPUSH
22258: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22259: LD_VAR 0 1
22263: PPUSH
22264: CALL_OW 302
22268: NOT
22269: IFTRUE 22288
22271: PUSH
22272: LD_VAR 0 2
22276: PPUSH
22277: LD_VAR 0 3
22281: PPUSH
22282: CALL_OW 488
22286: NOT
22287: OR
22288: IFTRUE 22297
22290: PUSH
22291: LD_VAR 0 4
22295: NOT
22296: OR
22297: IFFALSE 22301
// exit ;
22299: GO 22840
// if Count ( GetTaskList ( flame ) ) > 10 then
22301: LD_VAR 0 1
22305: PPUSH
22306: CALL_OW 437
22310: PPUSH
22311: CALL 29257 0 1
22315: PUSH
22316: LD_INT 10
22318: GREATER
22319: IFFALSE 22323
// exit ;
22321: GO 22840
// list := [ ] ;
22323: LD_ADDR_VAR 0 13
22327: PUSH
22328: EMPTY
22329: ST_TO_ADDR
// if x - r < 0 then
22330: LD_VAR 0 2
22334: PUSH
22335: LD_VAR 0 4
22339: MINUS
22340: PUSH
22341: LD_INT 0
22343: LESS
22344: IFFALSE 22356
// min_x := 0 else
22346: LD_ADDR_VAR 0 7
22350: PUSH
22351: LD_INT 0
22353: ST_TO_ADDR
22354: GO 22372
// min_x := x - r ;
22356: LD_ADDR_VAR 0 7
22360: PUSH
22361: LD_VAR 0 2
22365: PUSH
22366: LD_VAR 0 4
22370: MINUS
22371: ST_TO_ADDR
// if y - r < 0 then
22372: LD_VAR 0 3
22376: PUSH
22377: LD_VAR 0 4
22381: MINUS
22382: PUSH
22383: LD_INT 0
22385: LESS
22386: IFFALSE 22398
// min_y := 0 else
22388: LD_ADDR_VAR 0 8
22392: PUSH
22393: LD_INT 0
22395: ST_TO_ADDR
22396: GO 22414
// min_y := y - r ;
22398: LD_ADDR_VAR 0 8
22402: PUSH
22403: LD_VAR 0 3
22407: PUSH
22408: LD_VAR 0 4
22412: MINUS
22413: ST_TO_ADDR
// max_x := x + r ;
22414: LD_ADDR_VAR 0 9
22418: PUSH
22419: LD_VAR 0 2
22423: PUSH
22424: LD_VAR 0 4
22428: PLUS
22429: ST_TO_ADDR
// max_y := y + r ;
22430: LD_ADDR_VAR 0 10
22434: PUSH
22435: LD_VAR 0 3
22439: PUSH
22440: LD_VAR 0 4
22444: PLUS
22445: ST_TO_ADDR
// for _x = min_x to max_x do
22446: LD_ADDR_VAR 0 11
22450: PUSH
22451: DOUBLE
22452: LD_VAR 0 7
22456: DEC
22457: ST_TO_ADDR
22458: LD_VAR 0 9
22462: PUSH
22463: FOR_TO
22464: IFFALSE 22583
// for _y = min_y to max_y do
22466: LD_ADDR_VAR 0 12
22470: PUSH
22471: DOUBLE
22472: LD_VAR 0 8
22476: DEC
22477: ST_TO_ADDR
22478: LD_VAR 0 10
22482: PUSH
22483: FOR_TO
22484: IFFALSE 22579
// begin if not ValidHex ( _x , _y ) then
22486: LD_VAR 0 11
22490: PPUSH
22491: LD_VAR 0 12
22495: PPUSH
22496: CALL_OW 488
22500: NOT
22501: IFFALSE 22505
// continue ;
22503: GO 22483
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22505: LD_VAR 0 11
22509: PPUSH
22510: LD_VAR 0 12
22514: PPUSH
22515: CALL_OW 351
22519: IFFALSE 22537
22521: PUSH
22522: LD_VAR 0 11
22526: PPUSH
22527: LD_VAR 0 12
22531: PPUSH
22532: CALL_OW 554
22536: AND
22537: IFFALSE 22577
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22539: LD_ADDR_VAR 0 13
22543: PUSH
22544: LD_VAR 0 13
22548: PPUSH
22549: LD_VAR 0 13
22553: PUSH
22554: LD_INT 1
22556: PLUS
22557: PPUSH
22558: LD_VAR 0 11
22562: PUSH
22563: LD_VAR 0 12
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PPUSH
22572: CALL_OW 2
22576: ST_TO_ADDR
// end ;
22577: GO 22483
22579: POP
22580: POP
22581: GO 22463
22583: POP
22584: POP
// if not list then
22585: LD_VAR 0 13
22589: NOT
22590: IFFALSE 22594
// exit ;
22592: GO 22840
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22594: LD_ADDR_VAR 0 13
22598: PUSH
22599: LD_VAR 0 1
22603: PPUSH
22604: LD_VAR 0 13
22608: PPUSH
22609: LD_INT 1
22611: PPUSH
22612: LD_INT 1
22614: PPUSH
22615: CALL 32663 0 4
22619: ST_TO_ADDR
// ComStop ( flame ) ;
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 141
// for i in list do
22629: LD_ADDR_VAR 0 6
22633: PUSH
22634: LD_VAR 0 13
22638: PUSH
22639: FOR_IN
22640: IFFALSE 22671
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22642: LD_VAR 0 1
22646: PPUSH
22647: LD_VAR 0 6
22651: PUSH
22652: LD_INT 1
22654: ARRAY
22655: PPUSH
22656: LD_VAR 0 6
22660: PUSH
22661: LD_INT 2
22663: ARRAY
22664: PPUSH
22665: CALL_OW 176
22669: GO 22639
22671: POP
22672: POP
// repeat wait ( 0 0$1 ) ;
22673: LD_INT 35
22675: PPUSH
22676: CALL_OW 67
// task := GetTaskList ( flame ) ;
22680: LD_ADDR_VAR 0 14
22684: PUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: CALL_OW 437
22694: ST_TO_ADDR
// if not task then
22695: LD_VAR 0 14
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 22840
// if task [ 1 ] [ 1 ] <> | then
22704: LD_VAR 0 14
22708: PUSH
22709: LD_INT 1
22711: ARRAY
22712: PUSH
22713: LD_INT 1
22715: ARRAY
22716: PUSH
22717: LD_STRING |
22719: NONEQUAL
22720: IFFALSE 22724
// exit ;
22722: GO 22840
// _x := task [ 1 ] [ 2 ] ;
22724: LD_ADDR_VAR 0 11
22728: PUSH
22729: LD_VAR 0 14
22733: PUSH
22734: LD_INT 1
22736: ARRAY
22737: PUSH
22738: LD_INT 2
22740: ARRAY
22741: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22742: LD_ADDR_VAR 0 12
22746: PUSH
22747: LD_VAR 0 14
22751: PUSH
22752: LD_INT 1
22754: ARRAY
22755: PUSH
22756: LD_INT 3
22758: ARRAY
22759: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22760: LD_VAR 0 11
22764: PPUSH
22765: LD_VAR 0 12
22769: PPUSH
22770: CALL_OW 351
22774: NOT
22775: IFTRUE 22794
22777: PUSH
22778: LD_VAR 0 11
22782: PPUSH
22783: LD_VAR 0 12
22787: PPUSH
22788: CALL_OW 554
22792: NOT
22793: OR
22794: IFFALSE 22828
// begin task := Delete ( task , 1 ) ;
22796: LD_ADDR_VAR 0 14
22800: PUSH
22801: LD_VAR 0 14
22805: PPUSH
22806: LD_INT 1
22808: PPUSH
22809: CALL_OW 3
22813: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_VAR 0 14
22823: PPUSH
22824: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 314
22837: NOT
22838: IFFALSE 22673
// end ;
22840: LD_VAR 0 5
22844: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22845: LD_EXP 70
22849: NOT
22850: IFFALSE 22900
22852: GO 22854
22854: DISABLE
// begin initHack := true ;
22855: LD_ADDR_EXP 70
22859: PUSH
22860: LD_INT 1
22862: ST_TO_ADDR
// hackTanks := [ ] ;
22863: LD_ADDR_EXP 71
22867: PUSH
22868: EMPTY
22869: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22870: LD_ADDR_EXP 72
22874: PUSH
22875: EMPTY
22876: ST_TO_ADDR
// hackLimit := 3 ;
22877: LD_ADDR_EXP 73
22881: PUSH
22882: LD_INT 3
22884: ST_TO_ADDR
// hackDist := 12 ;
22885: LD_ADDR_EXP 74
22889: PUSH
22890: LD_INT 12
22892: ST_TO_ADDR
// hackCounter := [ ] ;
22893: LD_ADDR_EXP 75
22897: PUSH
22898: EMPTY
22899: ST_TO_ADDR
// end ;
22900: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22901: LD_EXP 70
22905: IFFALSE 22923
22907: PUSH
22908: LD_INT 34
22910: PUSH
22911: LD_INT 99
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PPUSH
22918: CALL_OW 69
22922: AND
22923: IFFALSE 23176
22925: GO 22927
22927: DISABLE
22928: LD_INT 0
22930: PPUSH
22931: PPUSH
// begin enable ;
22932: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22933: LD_ADDR_VAR 0 1
22937: PUSH
22938: LD_INT 34
22940: PUSH
22941: LD_INT 99
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PPUSH
22948: CALL_OW 69
22952: PUSH
22953: FOR_IN
22954: IFFALSE 23174
// begin if not i in hackTanks then
22956: LD_VAR 0 1
22960: PUSH
22961: LD_EXP 71
22965: IN
22966: NOT
22967: IFFALSE 23050
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22969: LD_ADDR_EXP 71
22973: PUSH
22974: LD_EXP 71
22978: PPUSH
22979: LD_EXP 71
22983: PUSH
22984: LD_INT 1
22986: PLUS
22987: PPUSH
22988: LD_VAR 0 1
22992: PPUSH
22993: CALL_OW 1
22997: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22998: LD_ADDR_EXP 72
23002: PUSH
23003: LD_EXP 72
23007: PPUSH
23008: LD_EXP 72
23012: PUSH
23013: LD_INT 1
23015: PLUS
23016: PPUSH
23017: EMPTY
23018: PPUSH
23019: CALL_OW 1
23023: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23024: LD_ADDR_EXP 75
23028: PUSH
23029: LD_EXP 75
23033: PPUSH
23034: LD_EXP 75
23038: PUSH
23039: LD_INT 1
23041: PLUS
23042: PPUSH
23043: EMPTY
23044: PPUSH
23045: CALL_OW 1
23049: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 302
23059: NOT
23060: IFFALSE 23073
// begin HackUnlinkAll ( i ) ;
23062: LD_VAR 0 1
23066: PPUSH
23067: CALL 23179 0 1
// continue ;
23071: GO 22953
// end ; HackCheckCapturedStatus ( i ) ;
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL 23624 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_INT 81
23089: PUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 255
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 33
23106: PUSH
23107: LD_INT 3
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 91
23116: PUSH
23117: LD_VAR 0 1
23121: PUSH
23122: LD_EXP 74
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 50
23134: PUSH
23135: EMPTY
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: PPUSH
23144: CALL_OW 69
23148: ST_TO_ADDR
// if not tmp then
23149: LD_VAR 0 2
23153: NOT
23154: IFFALSE 23158
// continue ;
23156: GO 22953
// HackLink ( i , tmp ) ;
23158: LD_VAR 0 1
23162: PPUSH
23163: LD_VAR 0 2
23167: PPUSH
23168: CALL 23315 0 2
// end ;
23172: GO 22953
23174: POP
23175: POP
// end ;
23176: PPOPN 2
23178: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23179: LD_INT 0
23181: PPUSH
23182: PPUSH
23183: PPUSH
// if not hack in hackTanks then
23184: LD_VAR 0 1
23188: PUSH
23189: LD_EXP 71
23193: IN
23194: NOT
23195: IFFALSE 23199
// exit ;
23197: GO 23310
// index := GetElementIndex ( hackTanks , hack ) ;
23199: LD_ADDR_VAR 0 4
23203: PUSH
23204: LD_EXP 71
23208: PPUSH
23209: LD_VAR 0 1
23213: PPUSH
23214: CALL 31958 0 2
23218: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23219: LD_EXP 72
23223: PUSH
23224: LD_VAR 0 4
23228: ARRAY
23229: IFFALSE 23310
// begin for i in hackTanksCaptured [ index ] do
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_EXP 72
23240: PUSH
23241: LD_VAR 0 4
23245: ARRAY
23246: PUSH
23247: FOR_IN
23248: IFFALSE 23274
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23250: LD_VAR 0 3
23254: PUSH
23255: LD_INT 1
23257: ARRAY
23258: PPUSH
23259: LD_VAR 0 3
23263: PUSH
23264: LD_INT 2
23266: ARRAY
23267: PPUSH
23268: CALL_OW 235
23272: GO 23247
23274: POP
23275: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23276: LD_ADDR_EXP 72
23280: PUSH
23281: LD_EXP 72
23285: PPUSH
23286: LD_VAR 0 4
23290: PPUSH
23291: EMPTY
23292: PPUSH
23293: CALL_OW 1
23297: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23298: LD_VAR 0 1
23302: PPUSH
23303: LD_INT 0
23305: PPUSH
23306: CALL_OW 505
// end ; end ;
23310: LD_VAR 0 2
23314: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23315: LD_INT 0
23317: PPUSH
23318: PPUSH
23319: PPUSH
// if not hack in hackTanks or not vehicles then
23320: LD_VAR 0 1
23324: PUSH
23325: LD_EXP 71
23329: IN
23330: NOT
23331: IFTRUE 23340
23333: PUSH
23334: LD_VAR 0 2
23338: NOT
23339: OR
23340: IFFALSE 23344
// exit ;
23342: GO 23619
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23344: LD_ADDR_VAR 0 2
23348: PUSH
23349: LD_VAR 0 1
23353: PPUSH
23354: LD_VAR 0 2
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL 32610 0 4
23369: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23370: LD_ADDR_VAR 0 5
23374: PUSH
23375: LD_EXP 71
23379: PPUSH
23380: LD_VAR 0 1
23384: PPUSH
23385: CALL 31958 0 2
23389: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23390: LD_EXP 72
23394: PUSH
23395: LD_VAR 0 5
23399: ARRAY
23400: PUSH
23401: LD_EXP 73
23405: LESS
23406: IFFALSE 23595
// begin for i := 1 to vehicles do
23408: LD_ADDR_VAR 0 4
23412: PUSH
23413: DOUBLE
23414: LD_INT 1
23416: DEC
23417: ST_TO_ADDR
23418: LD_VAR 0 2
23422: PUSH
23423: FOR_TO
23424: IFFALSE 23593
// begin if hackTanksCaptured [ index ] = hackLimit then
23426: LD_EXP 72
23430: PUSH
23431: LD_VAR 0 5
23435: ARRAY
23436: PUSH
23437: LD_EXP 73
23441: EQUAL
23442: IFFALSE 23446
// break ;
23444: GO 23593
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23446: LD_ADDR_EXP 75
23450: PUSH
23451: LD_EXP 75
23455: PPUSH
23456: LD_VAR 0 5
23460: PPUSH
23461: LD_EXP 75
23465: PUSH
23466: LD_VAR 0 5
23470: ARRAY
23471: PUSH
23472: LD_INT 1
23474: PLUS
23475: PPUSH
23476: CALL_OW 1
23480: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23481: LD_ADDR_EXP 72
23485: PUSH
23486: LD_EXP 72
23490: PPUSH
23491: LD_VAR 0 5
23495: PUSH
23496: LD_EXP 72
23500: PUSH
23501: LD_VAR 0 5
23505: ARRAY
23506: PUSH
23507: LD_INT 1
23509: PLUS
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PPUSH
23515: LD_VAR 0 2
23519: PUSH
23520: LD_VAR 0 4
23524: ARRAY
23525: PUSH
23526: LD_VAR 0 2
23530: PUSH
23531: LD_VAR 0 4
23535: ARRAY
23536: PPUSH
23537: CALL_OW 255
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PPUSH
23546: CALL 32175 0 3
23550: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23551: LD_VAR 0 2
23555: PUSH
23556: LD_VAR 0 4
23560: ARRAY
23561: PPUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL_OW 255
23571: PPUSH
23572: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23576: LD_VAR 0 2
23580: PUSH
23581: LD_VAR 0 4
23585: ARRAY
23586: PPUSH
23587: CALL_OW 141
// end ;
23591: GO 23423
23593: POP
23594: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23595: LD_VAR 0 1
23599: PPUSH
23600: LD_EXP 72
23604: PUSH
23605: LD_VAR 0 5
23609: ARRAY
23610: PUSH
23611: LD_INT 0
23613: PLUS
23614: PPUSH
23615: CALL_OW 505
// end ;
23619: LD_VAR 0 3
23623: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23624: LD_INT 0
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
// if not hack in hackTanks then
23630: LD_VAR 0 1
23634: PUSH
23635: LD_EXP 71
23639: IN
23640: NOT
23641: IFFALSE 23645
// exit ;
23643: GO 23889
// index := GetElementIndex ( hackTanks , hack ) ;
23645: LD_ADDR_VAR 0 4
23649: PUSH
23650: LD_EXP 71
23654: PPUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL 31958 0 2
23664: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23665: LD_ADDR_VAR 0 3
23669: PUSH
23670: DOUBLE
23671: LD_EXP 72
23675: PUSH
23676: LD_VAR 0 4
23680: ARRAY
23681: INC
23682: ST_TO_ADDR
23683: LD_INT 1
23685: PUSH
23686: FOR_DOWNTO
23687: IFFALSE 23863
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23689: LD_ADDR_VAR 0 5
23693: PUSH
23694: LD_EXP 72
23698: PUSH
23699: LD_VAR 0 4
23703: ARRAY
23704: PUSH
23705: LD_VAR 0 3
23709: ARRAY
23710: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23711: LD_VAR 0 5
23715: PUSH
23716: LD_INT 1
23718: ARRAY
23719: PPUSH
23720: CALL_OW 302
23724: NOT
23725: IFTRUE 23753
23727: PUSH
23728: LD_VAR 0 5
23732: PUSH
23733: LD_INT 1
23735: ARRAY
23736: PPUSH
23737: CALL_OW 255
23741: PUSH
23742: LD_VAR 0 1
23746: PPUSH
23747: CALL_OW 255
23751: NONEQUAL
23752: OR
23753: IFFALSE 23861
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23755: LD_VAR 0 5
23759: PUSH
23760: LD_INT 1
23762: ARRAY
23763: PPUSH
23764: CALL_OW 305
23768: IFFALSE 23796
23770: PUSH
23771: LD_VAR 0 5
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PPUSH
23780: CALL_OW 255
23784: PUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL_OW 255
23794: EQUAL
23795: AND
23796: IFFALSE 23820
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23798: LD_VAR 0 5
23802: PUSH
23803: LD_INT 1
23805: ARRAY
23806: PPUSH
23807: LD_VAR 0 5
23811: PUSH
23812: LD_INT 2
23814: ARRAY
23815: PPUSH
23816: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23820: LD_ADDR_EXP 72
23824: PUSH
23825: LD_EXP 72
23829: PPUSH
23830: LD_VAR 0 4
23834: PPUSH
23835: LD_EXP 72
23839: PUSH
23840: LD_VAR 0 4
23844: ARRAY
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: CALL_OW 3
23855: PPUSH
23856: CALL_OW 1
23860: ST_TO_ADDR
// end ; end ;
23861: GO 23686
23863: POP
23864: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23865: LD_VAR 0 1
23869: PPUSH
23870: LD_EXP 72
23874: PUSH
23875: LD_VAR 0 4
23879: ARRAY
23880: PUSH
23881: LD_INT 0
23883: PLUS
23884: PPUSH
23885: CALL_OW 505
// end ;
23889: LD_VAR 0 2
23893: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23894: LD_INT 0
23896: PPUSH
23897: PPUSH
23898: PPUSH
23899: PPUSH
// if not hack in hackTanks then
23900: LD_VAR 0 1
23904: PUSH
23905: LD_EXP 71
23909: IN
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 24000
// index := GetElementIndex ( hackTanks , hack ) ;
23915: LD_ADDR_VAR 0 5
23919: PUSH
23920: LD_EXP 71
23924: PPUSH
23925: LD_VAR 0 1
23929: PPUSH
23930: CALL 31958 0 2
23934: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23935: LD_ADDR_VAR 0 4
23939: PUSH
23940: DOUBLE
23941: LD_INT 1
23943: DEC
23944: ST_TO_ADDR
23945: LD_EXP 72
23949: PUSH
23950: LD_VAR 0 5
23954: ARRAY
23955: PUSH
23956: FOR_TO
23957: IFFALSE 23998
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23959: LD_EXP 72
23963: PUSH
23964: LD_VAR 0 5
23968: ARRAY
23969: PUSH
23970: LD_VAR 0 4
23974: ARRAY
23975: PUSH
23976: LD_INT 1
23978: ARRAY
23979: PUSH
23980: LD_VAR 0 2
23984: EQUAL
23985: IFFALSE 23996
// KillUnit ( vehicle ) ;
23987: LD_VAR 0 2
23991: PPUSH
23992: CALL_OW 66
23996: GO 23956
23998: POP
23999: POP
// end ;
24000: LD_VAR 0 3
24004: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
24005: LD_EXP 76
24009: NOT
24010: IFFALSE 24143
24012: GO 24014
24014: DISABLE
24015: LD_INT 0
24017: PPUSH
// begin initMiner := true ;
24018: LD_ADDR_EXP 76
24022: PUSH
24023: LD_INT 1
24025: ST_TO_ADDR
// minersList := [ ] ;
24026: LD_ADDR_EXP 77
24030: PUSH
24031: EMPTY
24032: ST_TO_ADDR
// minerMinesList := [ ] ;
24033: LD_ADDR_EXP 78
24037: PUSH
24038: EMPTY
24039: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
24040: LD_ADDR_EXP 79
24044: PUSH
24045: LD_INT 10
24047: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24048: LD_ADDR_VAR 0 1
24052: PUSH
24053: LD_INT 34
24055: PUSH
24056: LD_INT 81
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PPUSH
24063: CALL_OW 69
24067: PUSH
24068: FOR_IN
24069: IFFALSE 24141
// begin if not i in minersList then
24071: LD_VAR 0 1
24075: PUSH
24076: LD_EXP 77
24080: IN
24081: NOT
24082: IFFALSE 24139
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24084: LD_ADDR_EXP 77
24088: PUSH
24089: LD_EXP 77
24093: PPUSH
24094: LD_EXP 77
24098: PUSH
24099: LD_INT 1
24101: PLUS
24102: PPUSH
24103: LD_VAR 0 1
24107: PPUSH
24108: CALL_OW 1
24112: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24113: LD_ADDR_EXP 78
24117: PUSH
24118: LD_EXP 78
24122: PPUSH
24123: LD_EXP 78
24127: PUSH
24128: LD_INT 1
24130: PLUS
24131: PPUSH
24132: EMPTY
24133: PPUSH
24134: CALL_OW 1
24138: ST_TO_ADDR
// end end ;
24139: GO 24068
24141: POP
24142: POP
// end ;
24143: PPOPN 1
24145: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
24146: LD_EXP 76
24150: IFFALSE 24181
24152: PUSH
24153: LD_EXP 78
24157: PPUSH
24158: CALL 29257 0 1
24162: IFTRUE 24180
24164: PUSH
24165: LD_INT 34
24167: PUSH
24168: LD_INT 81
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PPUSH
24175: CALL_OW 69
24179: OR
24180: AND
24181: IFFALSE 24701
24183: GO 24185
24185: DISABLE
24186: LD_INT 0
24188: PPUSH
24189: PPUSH
24190: PPUSH
24191: PPUSH
// begin enable ;
24192: ENABLE
// for i := minerMinesList downto 1 do
24193: LD_ADDR_VAR 0 1
24197: PUSH
24198: DOUBLE
24199: LD_EXP 78
24203: INC
24204: ST_TO_ADDR
24205: LD_INT 1
24207: PUSH
24208: FOR_DOWNTO
24209: IFFALSE 24699
// begin side := GetSide ( minersList [ i ] ) ;
24211: LD_ADDR_VAR 0 3
24215: PUSH
24216: LD_EXP 77
24220: PUSH
24221: LD_VAR 0 1
24225: ARRAY
24226: PPUSH
24227: CALL_OW 255
24231: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
24232: LD_EXP 77
24236: PUSH
24237: LD_VAR 0 1
24241: ARRAY
24242: PPUSH
24243: CALL_OW 300
24247: IFFALSE 24268
24249: PUSH
24250: LD_VAR 0 3
24254: PUSH
24255: LD_OWVAR 2
24259: PUSH
24260: LD_INT 9
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: IN
24267: AND
24268: IFFALSE 24301
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
24270: LD_EXP 77
24274: PUSH
24275: LD_VAR 0 1
24279: ARRAY
24280: PPUSH
24281: LD_EXP 78
24285: PUSH
24286: LD_VAR 0 1
24290: ARRAY
24291: PPUSH
24292: CALL 29257 0 1
24296: PPUSH
24297: CALL_OW 505
// if not minerMinesList [ i ] then
24301: LD_EXP 78
24305: PUSH
24306: LD_VAR 0 1
24310: ARRAY
24311: NOT
24312: IFFALSE 24316
// continue ;
24314: GO 24208
// for j := minerMinesList [ i ] downto 1 do
24316: LD_ADDR_VAR 0 2
24320: PUSH
24321: DOUBLE
24322: LD_EXP 78
24326: PUSH
24327: LD_VAR 0 1
24331: ARRAY
24332: INC
24333: ST_TO_ADDR
24334: LD_INT 1
24336: PUSH
24337: FOR_DOWNTO
24338: IFFALSE 24695
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
24340: LD_EXP 77
24344: PUSH
24345: LD_VAR 0 1
24349: ARRAY
24350: PPUSH
24351: CALL_OW 301
24355: IFTRUE 24375
24357: PUSH
24358: LD_EXP 77
24362: PUSH
24363: LD_VAR 0 1
24367: ARRAY
24368: PPUSH
24369: CALL_OW 305
24373: NOT
24374: OR
24375: IFFALSE 24466
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24377: LD_EXP 78
24381: PUSH
24382: LD_VAR 0 1
24386: ARRAY
24387: PUSH
24388: LD_VAR 0 2
24392: ARRAY
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: PPUSH
24398: LD_EXP 78
24402: PUSH
24403: LD_VAR 0 1
24407: ARRAY
24408: PUSH
24409: LD_VAR 0 2
24413: ARRAY
24414: PUSH
24415: LD_INT 2
24417: ARRAY
24418: PPUSH
24419: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24423: LD_ADDR_EXP 78
24427: PUSH
24428: LD_EXP 78
24432: PPUSH
24433: LD_VAR 0 1
24437: PPUSH
24438: LD_EXP 78
24442: PUSH
24443: LD_VAR 0 1
24447: ARRAY
24448: PPUSH
24449: LD_VAR 0 2
24453: PPUSH
24454: CALL_OW 3
24458: PPUSH
24459: CALL_OW 1
24463: ST_TO_ADDR
// continue ;
24464: GO 24337
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_EXP 78
24475: PUSH
24476: LD_VAR 0 1
24480: ARRAY
24481: PUSH
24482: LD_VAR 0 2
24486: ARRAY
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PPUSH
24492: LD_EXP 78
24496: PUSH
24497: LD_VAR 0 1
24501: ARRAY
24502: PUSH
24503: LD_VAR 0 2
24507: ARRAY
24508: PUSH
24509: LD_INT 2
24511: ARRAY
24512: PPUSH
24513: CALL_OW 428
24517: ST_TO_ADDR
// if not tmp then
24518: LD_VAR 0 4
24522: NOT
24523: IFFALSE 24527
// continue ;
24525: GO 24337
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24527: LD_VAR 0 4
24531: PUSH
24532: LD_INT 81
24534: PUSH
24535: LD_VAR 0 3
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PPUSH
24544: CALL_OW 69
24548: IN
24549: IFFALSE 24599
24551: PUSH
24552: LD_EXP 78
24556: PUSH
24557: LD_VAR 0 1
24561: ARRAY
24562: PUSH
24563: LD_VAR 0 2
24567: ARRAY
24568: PUSH
24569: LD_INT 1
24571: ARRAY
24572: PPUSH
24573: LD_EXP 78
24577: PUSH
24578: LD_VAR 0 1
24582: ARRAY
24583: PUSH
24584: LD_VAR 0 2
24588: ARRAY
24589: PUSH
24590: LD_INT 2
24592: ARRAY
24593: PPUSH
24594: CALL_OW 458
24598: AND
24599: IFFALSE 24693
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24601: LD_EXP 78
24605: PUSH
24606: LD_VAR 0 1
24610: ARRAY
24611: PUSH
24612: LD_VAR 0 2
24616: ARRAY
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: PPUSH
24622: LD_EXP 78
24626: PUSH
24627: LD_VAR 0 1
24631: ARRAY
24632: PUSH
24633: LD_VAR 0 2
24637: ARRAY
24638: PUSH
24639: LD_INT 2
24641: ARRAY
24642: PPUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24652: LD_ADDR_EXP 78
24656: PUSH
24657: LD_EXP 78
24661: PPUSH
24662: LD_VAR 0 1
24666: PPUSH
24667: LD_EXP 78
24671: PUSH
24672: LD_VAR 0 1
24676: ARRAY
24677: PPUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: CALL_OW 3
24687: PPUSH
24688: CALL_OW 1
24692: ST_TO_ADDR
// end ; end ;
24693: GO 24337
24695: POP
24696: POP
// end ;
24697: GO 24208
24699: POP
24700: POP
// end ;
24701: PPOPN 4
24703: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
24704: LD_INT 0
24706: PPUSH
24707: PPUSH
24708: PPUSH
24709: PPUSH
// result := false ;
24710: LD_ADDR_VAR 0 4
24714: PUSH
24715: LD_INT 0
24717: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24718: LD_VAR 0 1
24722: PPUSH
24723: CALL_OW 264
24727: PUSH
24728: LD_INT 81
24730: EQUAL
24731: NOT
24732: IFFALSE 24736
// exit ;
24734: GO 25106
// side := GetSide ( unit ) ;
24736: LD_ADDR_VAR 0 6
24740: PUSH
24741: LD_VAR 0 1
24745: PPUSH
24746: CALL_OW 255
24750: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
24751: LD_ADDR_VAR 0 5
24755: PUSH
24756: LD_EXP 77
24760: PPUSH
24761: LD_VAR 0 1
24765: PPUSH
24766: CALL 31958 0 2
24770: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24771: LD_EXP 78
24775: PUSH
24776: LD_VAR 0 5
24780: ARRAY
24781: PUSH
24782: LD_EXP 79
24786: GREATEREQUAL
24787: IFFALSE 24791
// exit ;
24789: GO 25106
// ComMoveXY ( unit , x , y ) ;
24791: LD_VAR 0 1
24795: PPUSH
24796: LD_VAR 0 2
24800: PPUSH
24801: LD_VAR 0 3
24805: PPUSH
24806: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24810: LD_INT 35
24812: PPUSH
24813: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24817: LD_VAR 0 1
24821: PPUSH
24822: LD_VAR 0 2
24826: PPUSH
24827: LD_VAR 0 3
24831: PPUSH
24832: CALL 64014 0 3
24836: NOT
24837: IFFALSE 24850
24839: PUSH
24840: LD_VAR 0 1
24844: PPUSH
24845: CALL_OW 314
24849: AND
24850: IFFALSE 24854
// exit ;
24852: GO 25106
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_VAR 0 3
24863: PPUSH
24864: CALL_OW 428
24868: PUSH
24869: LD_VAR 0 1
24873: EQUAL
24874: IFFALSE 24888
24876: PUSH
24877: LD_VAR 0 1
24881: PPUSH
24882: CALL_OW 314
24886: NOT
24887: AND
24888: IFFALSE 24810
// if MineAtPos ( x , y ) then
24890: LD_VAR 0 2
24894: PPUSH
24895: LD_VAR 0 3
24899: PPUSH
24900: CALL_OW 458
24904: IFFALSE 24908
// exit ;
24906: GO 25106
// if your_side = side then
24908: LD_OWVAR 2
24912: PUSH
24913: LD_VAR 0 6
24917: EQUAL
24918: IFFALSE 24937
// PlaySoundXY ( x , y , PlantMine ) ;
24920: LD_VAR 0 2
24924: PPUSH
24925: LD_VAR 0 3
24929: PPUSH
24930: LD_STRING PlantMine
24932: PPUSH
24933: CALL_OW 366
// repeat wait ( 1 ) ;
24937: LD_INT 1
24939: PPUSH
24940: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
24944: LD_VAR 0 2
24948: PPUSH
24949: LD_VAR 0 3
24953: PPUSH
24954: LD_VAR 0 6
24958: PPUSH
24959: LD_INT 0
24961: PPUSH
24962: CALL_OW 454
24966: IFFALSE 24937
// if MineAtPos ( x , y ) then
24968: LD_VAR 0 2
24972: PPUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: CALL_OW 458
24982: IFFALSE 25098
// begin for i in minerMinesList [ index ] do
24984: LD_ADDR_VAR 0 7
24988: PUSH
24989: LD_EXP 78
24993: PUSH
24994: LD_VAR 0 5
24998: ARRAY
24999: PUSH
25000: FOR_IN
25001: IFFALSE 25043
// if i [ 1 ] = x and i [ 2 ] = y then
25003: LD_VAR 0 7
25007: PUSH
25008: LD_INT 1
25010: ARRAY
25011: PUSH
25012: LD_VAR 0 2
25016: EQUAL
25017: IFFALSE 25035
25019: PUSH
25020: LD_VAR 0 7
25024: PUSH
25025: LD_INT 2
25027: ARRAY
25028: PUSH
25029: LD_VAR 0 3
25033: EQUAL
25034: AND
25035: IFFALSE 25041
// exit ;
25037: POP
25038: POP
25039: GO 25106
25041: GO 25000
25043: POP
25044: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25045: LD_ADDR_EXP 78
25049: PUSH
25050: LD_EXP 78
25054: PPUSH
25055: LD_VAR 0 5
25059: PUSH
25060: LD_EXP 78
25064: PUSH
25065: LD_VAR 0 5
25069: ARRAY
25070: PUSH
25071: LD_INT 1
25073: PLUS
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PPUSH
25079: LD_VAR 0 2
25083: PUSH
25084: LD_VAR 0 3
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PPUSH
25093: CALL 32175 0 3
25097: ST_TO_ADDR
// end ; result := true ;
25098: LD_ADDR_VAR 0 4
25102: PUSH
25103: LD_INT 1
25105: ST_TO_ADDR
// end ;
25106: LD_VAR 0 4
25110: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
25115: PPUSH
// if not unit in minersList then
25116: LD_VAR 0 1
25120: PUSH
25121: LD_EXP 77
25125: IN
25126: NOT
25127: IFFALSE 25131
// exit ;
25129: GO 25338
// index := GetElementIndex ( minersList , unit ) ;
25131: LD_ADDR_VAR 0 6
25135: PUSH
25136: LD_EXP 77
25140: PPUSH
25141: LD_VAR 0 1
25145: PPUSH
25146: CALL 31958 0 2
25150: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25151: LD_ADDR_VAR 0 5
25155: PUSH
25156: DOUBLE
25157: LD_EXP 78
25161: PUSH
25162: LD_VAR 0 6
25166: ARRAY
25167: INC
25168: ST_TO_ADDR
25169: LD_INT 1
25171: PUSH
25172: FOR_DOWNTO
25173: IFFALSE 25336
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25175: LD_EXP 78
25179: PUSH
25180: LD_VAR 0 6
25184: ARRAY
25185: PUSH
25186: LD_VAR 0 5
25190: ARRAY
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: LD_EXP 78
25200: PUSH
25201: LD_VAR 0 6
25205: ARRAY
25206: PUSH
25207: LD_VAR 0 5
25211: ARRAY
25212: PUSH
25213: LD_INT 2
25215: ARRAY
25216: PPUSH
25217: LD_VAR 0 2
25221: PPUSH
25222: LD_VAR 0 3
25226: PPUSH
25227: CALL_OW 298
25231: PUSH
25232: LD_INT 6
25234: LESS
25235: IFFALSE 25334
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25237: LD_EXP 78
25241: PUSH
25242: LD_VAR 0 6
25246: ARRAY
25247: PUSH
25248: LD_VAR 0 5
25252: ARRAY
25253: PUSH
25254: LD_INT 1
25256: ARRAY
25257: PPUSH
25258: LD_EXP 78
25262: PUSH
25263: LD_VAR 0 6
25267: ARRAY
25268: PUSH
25269: LD_VAR 0 5
25273: ARRAY
25274: PUSH
25275: LD_INT 2
25277: ARRAY
25278: PPUSH
25279: LD_VAR 0 1
25283: PPUSH
25284: CALL_OW 255
25288: PPUSH
25289: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25293: LD_ADDR_EXP 78
25297: PUSH
25298: LD_EXP 78
25302: PPUSH
25303: LD_VAR 0 6
25307: PPUSH
25308: LD_EXP 78
25312: PUSH
25313: LD_VAR 0 6
25317: ARRAY
25318: PPUSH
25319: LD_VAR 0 5
25323: PPUSH
25324: CALL_OW 3
25328: PPUSH
25329: CALL_OW 1
25333: ST_TO_ADDR
// end ; end ;
25334: GO 25172
25336: POP
25337: POP
// end ;
25338: LD_VAR 0 4
25342: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25343: LD_INT 0
25345: PPUSH
25346: PPUSH
25347: PPUSH
25348: PPUSH
25349: PPUSH
25350: PPUSH
25351: PPUSH
25352: PPUSH
25353: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25354: LD_VAR 0 1
25358: PPUSH
25359: CALL_OW 264
25363: PUSH
25364: LD_INT 81
25366: EQUAL
25367: NOT
25368: IFTRUE 25383
25370: PUSH
25371: LD_VAR 0 1
25375: PUSH
25376: LD_EXP 77
25380: IN
25381: NOT
25382: OR
25383: IFFALSE 25387
// exit ;
25385: GO 25713
// index := GetElementIndex ( minersList , unit ) ;
25387: LD_ADDR_VAR 0 6
25391: PUSH
25392: LD_EXP 77
25396: PPUSH
25397: LD_VAR 0 1
25401: PPUSH
25402: CALL 31958 0 2
25406: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25407: LD_ADDR_VAR 0 8
25411: PUSH
25412: LD_EXP 79
25416: PUSH
25417: LD_EXP 78
25421: PUSH
25422: LD_VAR 0 6
25426: ARRAY
25427: MINUS
25428: ST_TO_ADDR
// if not minesFreeAmount then
25429: LD_VAR 0 8
25433: NOT
25434: IFFALSE 25438
// exit ;
25436: GO 25713
// tmp := [ ] ;
25438: LD_ADDR_VAR 0 7
25442: PUSH
25443: EMPTY
25444: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: DOUBLE
25451: LD_INT 1
25453: DEC
25454: ST_TO_ADDR
25455: LD_VAR 0 8
25459: PUSH
25460: FOR_TO
25461: IFFALSE 25660
// begin _d := rand ( 0 , 5 ) ;
25463: LD_ADDR_VAR 0 11
25467: PUSH
25468: LD_INT 0
25470: PPUSH
25471: LD_INT 5
25473: PPUSH
25474: CALL_OW 12
25478: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25479: LD_ADDR_VAR 0 12
25483: PUSH
25484: LD_INT 2
25486: PPUSH
25487: LD_INT 6
25489: PPUSH
25490: CALL_OW 12
25494: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25495: LD_ADDR_VAR 0 9
25499: PUSH
25500: LD_VAR 0 2
25504: PPUSH
25505: LD_VAR 0 11
25509: PPUSH
25510: LD_VAR 0 12
25514: PPUSH
25515: CALL_OW 272
25519: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25520: LD_ADDR_VAR 0 10
25524: PUSH
25525: LD_VAR 0 3
25529: PPUSH
25530: LD_VAR 0 11
25534: PPUSH
25535: LD_VAR 0 12
25539: PPUSH
25540: CALL_OW 273
25544: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25545: LD_VAR 0 9
25549: PPUSH
25550: LD_VAR 0 10
25554: PPUSH
25555: CALL_OW 488
25559: IFFALSE 25583
25561: PUSH
25562: LD_VAR 0 9
25566: PUSH
25567: LD_VAR 0 10
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_VAR 0 7
25580: IN
25581: NOT
25582: AND
25583: IFFALSE 25602
25585: PUSH
25586: LD_VAR 0 9
25590: PPUSH
25591: LD_VAR 0 10
25595: PPUSH
25596: CALL_OW 458
25600: NOT
25601: AND
25602: IFFALSE 25644
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25604: LD_ADDR_VAR 0 7
25608: PUSH
25609: LD_VAR 0 7
25613: PPUSH
25614: LD_VAR 0 7
25618: PUSH
25619: LD_INT 1
25621: PLUS
25622: PPUSH
25623: LD_VAR 0 9
25627: PUSH
25628: LD_VAR 0 10
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 1
25641: ST_TO_ADDR
25642: GO 25658
// i := i - 1 ;
25644: LD_ADDR_VAR 0 5
25648: PUSH
25649: LD_VAR 0 5
25653: PUSH
25654: LD_INT 1
25656: MINUS
25657: ST_TO_ADDR
// end ;
25658: GO 25460
25660: POP
25661: POP
// for i in tmp do
25662: LD_ADDR_VAR 0 5
25666: PUSH
25667: LD_VAR 0 7
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25711
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25675: LD_VAR 0 1
25679: PPUSH
25680: LD_VAR 0 5
25684: PUSH
25685: LD_INT 1
25687: ARRAY
25688: PPUSH
25689: LD_VAR 0 5
25693: PUSH
25694: LD_INT 2
25696: ARRAY
25697: PPUSH
25698: CALL 24704 0 3
25702: NOT
25703: IFFALSE 25709
// exit ;
25705: POP
25706: POP
25707: GO 25713
25709: GO 25672
25711: POP
25712: POP
// end ;
25713: LD_VAR 0 4
25717: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25718: LD_INT 0
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
// if GetClass ( unit ) <> class_sniper then
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL_OW 257
25738: PUSH
25739: LD_INT 5
25741: NONEQUAL
25742: IFFALSE 25746
// exit ;
25744: GO 26216
// dist := 8 ;
25746: LD_ADDR_VAR 0 5
25750: PUSH
25751: LD_INT 8
25753: ST_TO_ADDR
// viewRange := 12 ;
25754: LD_ADDR_VAR 0 8
25758: PUSH
25759: LD_INT 12
25761: ST_TO_ADDR
// side := GetSide ( unit ) ;
25762: LD_ADDR_VAR 0 6
25766: PUSH
25767: LD_VAR 0 1
25771: PPUSH
25772: CALL_OW 255
25776: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25777: LD_INT 61
25779: PPUSH
25780: LD_VAR 0 6
25784: PPUSH
25785: CALL_OW 321
25789: PUSH
25790: LD_INT 2
25792: EQUAL
25793: IFFALSE 25803
// viewRange := 16 ;
25795: LD_ADDR_VAR 0 8
25799: PUSH
25800: LD_INT 16
25802: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25803: LD_VAR 0 1
25807: PPUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: LD_VAR 0 3
25817: PPUSH
25818: CALL_OW 297
25822: PUSH
25823: LD_VAR 0 5
25827: GREATER
25828: IFFALSE 25907
// begin ComMoveXY ( unit , x , y ) ;
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_VAR 0 2
25839: PPUSH
25840: LD_VAR 0 3
25844: PPUSH
25845: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25849: LD_INT 35
25851: PPUSH
25852: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25856: LD_VAR 0 1
25860: PPUSH
25861: LD_VAR 0 2
25865: PPUSH
25866: LD_VAR 0 3
25870: PPUSH
25871: CALL 64014 0 3
25875: NOT
25876: IFFALSE 25880
// exit ;
25878: GO 26216
// until GetDistUnitXY ( unit , x , y ) < dist ;
25880: LD_VAR 0 1
25884: PPUSH
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PPUSH
25895: CALL_OW 297
25899: PUSH
25900: LD_VAR 0 5
25904: LESS
25905: IFFALSE 25849
// end ; ComTurnXY ( unit , x , y ) ;
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_VAR 0 2
25916: PPUSH
25917: LD_VAR 0 3
25921: PPUSH
25922: CALL_OW 118
// repeat if Multiplayer then
25926: LD_OWVAR 4
25930: IFFALSE 25941
// wait ( 35 ) else
25932: LD_INT 35
25934: PPUSH
25935: CALL_OW 67
25939: GO 25948
// wait ( 5 ) ;
25941: LD_INT 5
25943: PPUSH
25944: CALL_OW 67
// _d := GetDir ( unit ) ;
25948: LD_ADDR_VAR 0 11
25952: PUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: CALL_OW 254
25962: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25963: LD_ADDR_VAR 0 7
25967: PUSH
25968: LD_VAR 0 1
25972: PPUSH
25973: CALL_OW 250
25977: PPUSH
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 251
25987: PPUSH
25988: LD_VAR 0 2
25992: PPUSH
25993: LD_VAR 0 3
25997: PPUSH
25998: CALL 66650 0 4
26002: ST_TO_ADDR
// until dir = _d ;
26003: LD_VAR 0 7
26007: PUSH
26008: LD_VAR 0 11
26012: EQUAL
26013: IFFALSE 25926
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26015: LD_ADDR_VAR 0 9
26019: PUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: CALL_OW 250
26029: PPUSH
26030: LD_VAR 0 7
26034: PPUSH
26035: LD_VAR 0 5
26039: PPUSH
26040: CALL_OW 272
26044: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26045: LD_ADDR_VAR 0 10
26049: PUSH
26050: LD_VAR 0 1
26054: PPUSH
26055: CALL_OW 251
26059: PPUSH
26060: LD_VAR 0 7
26064: PPUSH
26065: LD_VAR 0 5
26069: PPUSH
26070: CALL_OW 273
26074: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26075: LD_VAR 0 9
26079: PPUSH
26080: LD_VAR 0 10
26084: PPUSH
26085: CALL_OW 488
26089: NOT
26090: IFFALSE 26094
// exit ;
26092: GO 26216
// ComAnimCustom ( unit , 1 ) ;
26094: LD_VAR 0 1
26098: PPUSH
26099: LD_INT 1
26101: PPUSH
26102: CALL_OW 592
// p := 0 ;
26106: LD_ADDR_VAR 0 12
26110: PUSH
26111: LD_INT 0
26113: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26114: LD_VAR 0 9
26118: PPUSH
26119: LD_VAR 0 10
26123: PPUSH
26124: LD_VAR 0 6
26128: PPUSH
26129: LD_VAR 0 8
26133: PPUSH
26134: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26138: LD_INT 35
26140: PPUSH
26141: CALL_OW 67
// p := Inc ( p ) ;
26145: LD_ADDR_VAR 0 12
26149: PUSH
26150: LD_VAR 0 12
26154: PPUSH
26155: CALL 66606 0 1
26159: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26160: LD_VAR 0 12
26164: PUSH
26165: LD_INT 3
26167: EQUAL
26168: IFTRUE 26182
26170: PUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 302
26180: NOT
26181: OR
26182: IFTRUE 26195
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: CALL_OW 301
26194: OR
26195: IFFALSE 26138
// RemoveSeeing ( _x , _y , side ) ;
26197: LD_VAR 0 9
26201: PPUSH
26202: LD_VAR 0 10
26206: PPUSH
26207: LD_VAR 0 6
26211: PPUSH
26212: CALL_OW 331
// end ;
26216: LD_VAR 0 4
26220: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
26221: LD_INT 0
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
// if not unit then
26234: LD_VAR 0 1
26238: NOT
26239: IFFALSE 26243
// exit ;
26241: GO 26514
// side := GetSide ( unit ) ;
26243: LD_ADDR_VAR 0 3
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 255
26257: ST_TO_ADDR
// x := GetX ( unit ) ;
26258: LD_ADDR_VAR 0 5
26262: PUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 250
26272: ST_TO_ADDR
// y := GetY ( unit ) ;
26273: LD_ADDR_VAR 0 6
26277: PUSH
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 251
26287: ST_TO_ADDR
// r := 8 ;
26288: LD_ADDR_VAR 0 4
26292: PUSH
26293: LD_INT 8
26295: ST_TO_ADDR
// if x - r < 0 then
26296: LD_VAR 0 5
26300: PUSH
26301: LD_VAR 0 4
26305: MINUS
26306: PUSH
26307: LD_INT 0
26309: LESS
26310: IFFALSE 26322
// min_x := 0 else
26312: LD_ADDR_VAR 0 7
26316: PUSH
26317: LD_INT 0
26319: ST_TO_ADDR
26320: GO 26338
// min_x := x - r ;
26322: LD_ADDR_VAR 0 7
26326: PUSH
26327: LD_VAR 0 5
26331: PUSH
26332: LD_VAR 0 4
26336: MINUS
26337: ST_TO_ADDR
// if y - r < 0 then
26338: LD_VAR 0 6
26342: PUSH
26343: LD_VAR 0 4
26347: MINUS
26348: PUSH
26349: LD_INT 0
26351: LESS
26352: IFFALSE 26364
// min_y := 0 else
26354: LD_ADDR_VAR 0 8
26358: PUSH
26359: LD_INT 0
26361: ST_TO_ADDR
26362: GO 26380
// min_y := y - r ;
26364: LD_ADDR_VAR 0 8
26368: PUSH
26369: LD_VAR 0 6
26373: PUSH
26374: LD_VAR 0 4
26378: MINUS
26379: ST_TO_ADDR
// max_x := x + r ;
26380: LD_ADDR_VAR 0 9
26384: PUSH
26385: LD_VAR 0 5
26389: PUSH
26390: LD_VAR 0 4
26394: PLUS
26395: ST_TO_ADDR
// max_y := y + r ;
26396: LD_ADDR_VAR 0 10
26400: PUSH
26401: LD_VAR 0 6
26405: PUSH
26406: LD_VAR 0 4
26410: PLUS
26411: ST_TO_ADDR
// for _x = min_x to max_x do
26412: LD_ADDR_VAR 0 11
26416: PUSH
26417: DOUBLE
26418: LD_VAR 0 7
26422: DEC
26423: ST_TO_ADDR
26424: LD_VAR 0 9
26428: PUSH
26429: FOR_TO
26430: IFFALSE 26512
// for _y = min_y to max_y do
26432: LD_ADDR_VAR 0 12
26436: PUSH
26437: DOUBLE
26438: LD_VAR 0 8
26442: DEC
26443: ST_TO_ADDR
26444: LD_VAR 0 10
26448: PUSH
26449: FOR_TO
26450: IFFALSE 26508
// begin if not ValidHex ( _x , _y ) then
26452: LD_VAR 0 11
26456: PPUSH
26457: LD_VAR 0 12
26461: PPUSH
26462: CALL_OW 488
26466: NOT
26467: IFFALSE 26471
// continue ;
26469: GO 26449
// if MineAtPos ( _x , _y ) then
26471: LD_VAR 0 11
26475: PPUSH
26476: LD_VAR 0 12
26480: PPUSH
26481: CALL_OW 458
26485: IFFALSE 26506
// ViewMineAtPos ( _x , _y , side ) ;
26487: LD_VAR 0 11
26491: PPUSH
26492: LD_VAR 0 12
26496: PPUSH
26497: LD_VAR 0 3
26501: PPUSH
26502: CALL_OW 457
// end ;
26506: GO 26449
26508: POP
26509: POP
26510: GO 26429
26512: POP
26513: POP
// end ;
26514: LD_VAR 0 2
26518: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
26519: LD_INT 0
26521: PPUSH
26522: PPUSH
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
26527: PPUSH
// if not units then
26528: LD_VAR 0 1
26532: NOT
26533: IFFALSE 26537
// exit ;
26535: GO 27001
// scaners := [ ] ;
26537: LD_ADDR_VAR 0 6
26541: PUSH
26542: EMPTY
26543: ST_TO_ADDR
// for i in units do
26544: LD_ADDR_VAR 0 3
26548: PUSH
26549: LD_VAR 0 1
26553: PUSH
26554: FOR_IN
26555: IFFALSE 26712
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26557: LD_VAR 0 3
26561: PPUSH
26562: CALL_OW 264
26566: PUSH
26567: LD_INT 11
26569: NONEQUAL
26570: IFTRUE 26584
26572: PUSH
26573: LD_VAR 0 3
26577: PPUSH
26578: CALL_OW 302
26582: NOT
26583: OR
26584: IFTRUE 26601
26586: PUSH
26587: LD_VAR 0 3
26591: PPUSH
26592: CALL_OW 110
26596: PUSH
26597: LD_INT 502
26599: EQUAL
26600: OR
26601: IFFALSE 26605
// continue ;
26603: GO 26554
// ComStop ( i ) ;
26605: LD_VAR 0 3
26609: PPUSH
26610: CALL_OW 141
// x := GetX ( i ) ;
26614: LD_ADDR_VAR 0 4
26618: PUSH
26619: LD_VAR 0 3
26623: PPUSH
26624: CALL_OW 250
26628: ST_TO_ADDR
// y := GetY ( i ) ;
26629: LD_ADDR_VAR 0 5
26633: PUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: CALL_OW 251
26643: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26644: LD_VAR 0 3
26648: PPUSH
26649: CALL_OW 255
26653: PUSH
26654: LD_OWVAR 2
26658: EQUAL
26659: IFFALSE 26678
// PlaySoundXY ( x , y , mineDetector ) ;
26661: LD_VAR 0 4
26665: PPUSH
26666: LD_VAR 0 5
26670: PPUSH
26671: LD_STRING mineDetector
26673: PPUSH
26674: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26678: LD_ADDR_VAR 0 6
26682: PUSH
26683: LD_VAR 0 6
26687: PPUSH
26688: LD_VAR 0 3
26692: PPUSH
26693: CALL 65233 0 2
26697: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26698: LD_VAR 0 3
26702: PPUSH
26703: LD_INT 502
26705: PPUSH
26706: CALL_OW 109
// end ;
26710: GO 26554
26712: POP
26713: POP
// if not scaners then
26714: LD_VAR 0 6
26718: NOT
26719: IFFALSE 26723
// exit ;
26721: GO 27001
// wait ( 3 ) ;
26723: LD_INT 3
26725: PPUSH
26726: CALL_OW 67
// timer := 6 ;
26730: LD_ADDR_VAR 0 7
26734: PUSH
26735: LD_INT 6
26737: ST_TO_ADDR
// repeat for i in scaners do
26738: LD_ADDR_VAR 0 3
26742: PUSH
26743: LD_VAR 0 6
26747: PUSH
26748: FOR_IN
26749: IFFALSE 26899
// begin side := GetSide ( i ) ;
26751: LD_ADDR_VAR 0 8
26755: PUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 255
26765: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
26766: LD_VAR 0 3
26770: PPUSH
26771: CALL_OW 302
26775: NOT
26776: IFTRUE 26789
26778: PUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 314
26788: OR
26789: IFTRUE 26820
26791: PUSH
26792: LD_VAR 0 3
26796: PPUSH
26797: CALL_OW 263
26801: PUSH
26802: LD_INT 1
26804: EQUAL
26805: IFFALSE 26819
26807: PUSH
26808: LD_VAR 0 3
26812: PPUSH
26813: CALL_OW 311
26817: NOT
26818: AND
26819: OR
26820: IFFALSE 26864
// begin SetUnitDisplayNumber ( i , 0 ) ;
26822: LD_VAR 0 3
26826: PPUSH
26827: LD_INT 0
26829: PPUSH
26830: CALL_OW 505
// SetTag ( i , 0 ) ;
26834: LD_VAR 0 3
26838: PPUSH
26839: LD_INT 0
26841: PPUSH
26842: CALL_OW 109
// scaners := scaners diff i ;
26846: LD_ADDR_VAR 0 6
26850: PUSH
26851: LD_VAR 0 6
26855: PUSH
26856: LD_VAR 0 3
26860: DIFF
26861: ST_TO_ADDR
// continue ;
26862: GO 26748
// end ; if side in [ your_side , 9 ] then
26864: LD_VAR 0 8
26868: PUSH
26869: LD_OWVAR 2
26873: PUSH
26874: LD_INT 9
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: IN
26881: IFFALSE 26897
// SetUnitDisplayNumber ( i , timer ) ;
26883: LD_VAR 0 3
26887: PPUSH
26888: LD_VAR 0 7
26892: PPUSH
26893: CALL_OW 505
// end ;
26897: GO 26748
26899: POP
26900: POP
// if not scaners then
26901: LD_VAR 0 6
26905: NOT
26906: IFFALSE 26910
// exit ;
26908: GO 27001
// timer := Dec ( timer ) ;
26910: LD_ADDR_VAR 0 7
26914: PUSH
26915: LD_VAR 0 7
26919: PPUSH
26920: CALL 66628 0 1
26924: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26925: LD_INT 35
26927: PPUSH
26928: CALL_OW 67
// until timer = 0 ;
26932: LD_VAR 0 7
26936: PUSH
26937: LD_INT 0
26939: EQUAL
26940: IFFALSE 26738
// if not scaners then
26942: LD_VAR 0 6
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 27001
// for i in scaners do
26951: LD_ADDR_VAR 0 3
26955: PUSH
26956: LD_VAR 0 6
26960: PUSH
26961: FOR_IN
26962: IFFALSE 26999
// begin SetUnitDisplayNumber ( i , 0 ) ;
26964: LD_VAR 0 3
26968: PPUSH
26969: LD_INT 0
26971: PPUSH
26972: CALL_OW 505
// SetTag ( i , 0 ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_INT 0
26983: PPUSH
26984: CALL_OW 109
// RevealDetectorMine ( i ) ;
26988: LD_VAR 0 3
26992: PPUSH
26993: CALL 26221 0 1
// end ;
26997: GO 26961
26999: POP
27000: POP
// end ;
27001: LD_VAR 0 2
27005: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
27006: LD_INT 0
27008: PPUSH
// if p1 = mine_detector_mode then
27009: LD_VAR 0 2
27013: PUSH
27014: LD_INT 103
27016: EQUAL
27017: IFFALSE 27028
// DetectMine ( units ) ;
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL 26519 0 1
// end ; end_of_file
27028: LD_VAR 0 7
27032: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27033: LD_INT 0
27035: PPUSH
27036: PPUSH
// if exist_mode then
27037: LD_VAR 0 2
27041: IFFALSE 27087
// begin unit := CreateCharacter ( prefix & ident ) ;
27043: LD_ADDR_VAR 0 5
27047: PUSH
27048: LD_VAR 0 3
27052: PUSH
27053: LD_VAR 0 1
27057: STR
27058: PPUSH
27059: CALL_OW 34
27063: ST_TO_ADDR
// if unit then
27064: LD_VAR 0 5
27068: IFFALSE 27085
// DeleteCharacters ( prefix & ident ) ;
27070: LD_VAR 0 3
27074: PUSH
27075: LD_VAR 0 1
27079: STR
27080: PPUSH
27081: CALL_OW 40
// end else
27085: GO 27102
// unit := NewCharacter ( ident ) ;
27087: LD_ADDR_VAR 0 5
27091: PUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL_OW 25
27101: ST_TO_ADDR
// result := unit ;
27102: LD_ADDR_VAR 0 4
27106: PUSH
27107: LD_VAR 0 5
27111: ST_TO_ADDR
// end ;
27112: LD_VAR 0 4
27116: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
// if exist_mode then
27121: LD_VAR 0 2
27125: IFFALSE 27150
// unit := CreateCharacter ( prefix & ident ) else
27127: LD_ADDR_VAR 0 5
27131: PUSH
27132: LD_VAR 0 3
27136: PUSH
27137: LD_VAR 0 1
27141: STR
27142: PPUSH
27143: CALL_OW 34
27147: ST_TO_ADDR
27148: GO 27165
// unit := NewCharacter ( ident ) ;
27150: LD_ADDR_VAR 0 5
27154: PUSH
27155: LD_VAR 0 1
27159: PPUSH
27160: CALL_OW 25
27164: ST_TO_ADDR
// result := unit ;
27165: LD_ADDR_VAR 0 4
27169: PUSH
27170: LD_VAR 0 5
27174: ST_TO_ADDR
// end ;
27175: LD_VAR 0 4
27179: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27180: LD_INT 0
27182: PPUSH
27183: PPUSH
// if not side or not nation then
27184: LD_VAR 0 1
27188: NOT
27189: IFTRUE 27198
27191: PUSH
27192: LD_VAR 0 2
27196: NOT
27197: OR
27198: IFFALSE 27202
// exit ;
27200: GO 27996
// case nation of nation_american :
27202: LD_VAR 0 2
27206: PUSH
27207: LD_INT 1
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27215
27213: GO 27437
27215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
27216: LD_ADDR_VAR 0 4
27220: PUSH
27221: LD_INT 35
27223: PUSH
27224: LD_INT 45
27226: PUSH
27227: LD_INT 46
27229: PUSH
27230: LD_INT 47
27232: PUSH
27233: LD_INT 82
27235: PUSH
27236: LD_INT 83
27238: PUSH
27239: LD_INT 84
27241: PUSH
27242: LD_INT 85
27244: PUSH
27245: LD_INT 86
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 6
27256: PUSH
27257: LD_INT 15
27259: PUSH
27260: LD_INT 16
27262: PUSH
27263: LD_INT 7
27265: PUSH
27266: LD_INT 12
27268: PUSH
27269: LD_INT 13
27271: PUSH
27272: LD_INT 10
27274: PUSH
27275: LD_INT 14
27277: PUSH
27278: LD_INT 20
27280: PUSH
27281: LD_INT 21
27283: PUSH
27284: LD_INT 22
27286: PUSH
27287: LD_INT 25
27289: PUSH
27290: LD_INT 32
27292: PUSH
27293: LD_INT 27
27295: PUSH
27296: LD_INT 36
27298: PUSH
27299: LD_INT 69
27301: PUSH
27302: LD_INT 39
27304: PUSH
27305: LD_INT 34
27307: PUSH
27308: LD_INT 40
27310: PUSH
27311: LD_INT 48
27313: PUSH
27314: LD_INT 49
27316: PUSH
27317: LD_INT 50
27319: PUSH
27320: LD_INT 51
27322: PUSH
27323: LD_INT 52
27325: PUSH
27326: LD_INT 53
27328: PUSH
27329: LD_INT 54
27331: PUSH
27332: LD_INT 55
27334: PUSH
27335: LD_INT 56
27337: PUSH
27338: LD_INT 57
27340: PUSH
27341: LD_INT 58
27343: PUSH
27344: LD_INT 59
27346: PUSH
27347: LD_INT 60
27349: PUSH
27350: LD_INT 61
27352: PUSH
27353: LD_INT 62
27355: PUSH
27356: LD_INT 80
27358: PUSH
27359: LD_INT 82
27361: PUSH
27362: LD_INT 83
27364: PUSH
27365: LD_INT 84
27367: PUSH
27368: LD_INT 85
27370: PUSH
27371: LD_INT 86
27373: PUSH
27374: LD_INT 90
27376: PUSH
27377: LD_INT 93
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: ST_TO_ADDR
27435: GO 27918
27437: LD_INT 2
27439: DOUBLE
27440: EQUAL
27441: IFTRUE 27445
27443: GO 27679
27445: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
27446: LD_ADDR_VAR 0 4
27450: PUSH
27451: LD_INT 35
27453: PUSH
27454: LD_INT 45
27456: PUSH
27457: LD_INT 46
27459: PUSH
27460: LD_INT 47
27462: PUSH
27463: LD_INT 82
27465: PUSH
27466: LD_INT 83
27468: PUSH
27469: LD_INT 84
27471: PUSH
27472: LD_INT 85
27474: PUSH
27475: LD_INT 87
27477: PUSH
27478: LD_INT 70
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: LD_INT 11
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 4
27492: PUSH
27493: LD_INT 5
27495: PUSH
27496: LD_INT 6
27498: PUSH
27499: LD_INT 15
27501: PUSH
27502: LD_INT 18
27504: PUSH
27505: LD_INT 7
27507: PUSH
27508: LD_INT 17
27510: PUSH
27511: LD_INT 8
27513: PUSH
27514: LD_INT 20
27516: PUSH
27517: LD_INT 21
27519: PUSH
27520: LD_INT 22
27522: PUSH
27523: LD_INT 72
27525: PUSH
27526: LD_INT 26
27528: PUSH
27529: LD_INT 69
27531: PUSH
27532: LD_INT 39
27534: PUSH
27535: LD_INT 40
27537: PUSH
27538: LD_INT 41
27540: PUSH
27541: LD_INT 42
27543: PUSH
27544: LD_INT 43
27546: PUSH
27547: LD_INT 48
27549: PUSH
27550: LD_INT 49
27552: PUSH
27553: LD_INT 50
27555: PUSH
27556: LD_INT 51
27558: PUSH
27559: LD_INT 52
27561: PUSH
27562: LD_INT 53
27564: PUSH
27565: LD_INT 54
27567: PUSH
27568: LD_INT 55
27570: PUSH
27571: LD_INT 56
27573: PUSH
27574: LD_INT 60
27576: PUSH
27577: LD_INT 61
27579: PUSH
27580: LD_INT 62
27582: PUSH
27583: LD_INT 66
27585: PUSH
27586: LD_INT 67
27588: PUSH
27589: LD_INT 68
27591: PUSH
27592: LD_INT 81
27594: PUSH
27595: LD_INT 82
27597: PUSH
27598: LD_INT 83
27600: PUSH
27601: LD_INT 84
27603: PUSH
27604: LD_INT 85
27606: PUSH
27607: LD_INT 87
27609: PUSH
27610: LD_INT 88
27612: PUSH
27613: LD_INT 92
27615: PUSH
27616: LD_INT 94
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
27677: GO 27918
27679: LD_INT 3
27681: DOUBLE
27682: EQUAL
27683: IFTRUE 27687
27685: GO 27917
27687: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
27688: LD_ADDR_VAR 0 4
27692: PUSH
27693: LD_INT 46
27695: PUSH
27696: LD_INT 47
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: LD_INT 82
27707: PUSH
27708: LD_INT 83
27710: PUSH
27711: LD_INT 84
27713: PUSH
27714: LD_INT 85
27716: PUSH
27717: LD_INT 86
27719: PUSH
27720: LD_INT 11
27722: PUSH
27723: LD_INT 9
27725: PUSH
27726: LD_INT 20
27728: PUSH
27729: LD_INT 19
27731: PUSH
27732: LD_INT 21
27734: PUSH
27735: LD_INT 24
27737: PUSH
27738: LD_INT 22
27740: PUSH
27741: LD_INT 25
27743: PUSH
27744: LD_INT 28
27746: PUSH
27747: LD_INT 29
27749: PUSH
27750: LD_INT 30
27752: PUSH
27753: LD_INT 31
27755: PUSH
27756: LD_INT 37
27758: PUSH
27759: LD_INT 38
27761: PUSH
27762: LD_INT 32
27764: PUSH
27765: LD_INT 27
27767: PUSH
27768: LD_INT 33
27770: PUSH
27771: LD_INT 69
27773: PUSH
27774: LD_INT 39
27776: PUSH
27777: LD_INT 34
27779: PUSH
27780: LD_INT 40
27782: PUSH
27783: LD_INT 71
27785: PUSH
27786: LD_INT 23
27788: PUSH
27789: LD_INT 44
27791: PUSH
27792: LD_INT 48
27794: PUSH
27795: LD_INT 49
27797: PUSH
27798: LD_INT 50
27800: PUSH
27801: LD_INT 51
27803: PUSH
27804: LD_INT 52
27806: PUSH
27807: LD_INT 53
27809: PUSH
27810: LD_INT 54
27812: PUSH
27813: LD_INT 55
27815: PUSH
27816: LD_INT 56
27818: PUSH
27819: LD_INT 57
27821: PUSH
27822: LD_INT 58
27824: PUSH
27825: LD_INT 59
27827: PUSH
27828: LD_INT 63
27830: PUSH
27831: LD_INT 64
27833: PUSH
27834: LD_INT 65
27836: PUSH
27837: LD_INT 82
27839: PUSH
27840: LD_INT 83
27842: PUSH
27843: LD_INT 84
27845: PUSH
27846: LD_INT 85
27848: PUSH
27849: LD_INT 86
27851: PUSH
27852: LD_INT 89
27854: PUSH
27855: LD_INT 91
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
27915: GO 27918
27917: POP
// if state > - 1 and state < 3 then
27918: LD_VAR 0 3
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: GREATER
27927: IFFALSE 27939
27929: PUSH
27930: LD_VAR 0 3
27934: PUSH
27935: LD_INT 3
27937: LESS
27938: AND
27939: IFFALSE 27996
// for i in result do
27941: LD_ADDR_VAR 0 5
27945: PUSH
27946: LD_VAR 0 4
27950: PUSH
27951: FOR_IN
27952: IFFALSE 27994
// if GetTech ( i , side ) <> state then
27954: LD_VAR 0 5
27958: PPUSH
27959: LD_VAR 0 1
27963: PPUSH
27964: CALL_OW 321
27968: PUSH
27969: LD_VAR 0 3
27973: NONEQUAL
27974: IFFALSE 27992
// result := result diff i ;
27976: LD_ADDR_VAR 0 4
27980: PUSH
27981: LD_VAR 0 4
27985: PUSH
27986: LD_VAR 0 5
27990: DIFF
27991: ST_TO_ADDR
27992: GO 27951
27994: POP
27995: POP
// end ;
27996: LD_VAR 0 4
28000: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28001: LD_INT 0
28003: PPUSH
28004: PPUSH
28005: PPUSH
// result := true ;
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_INT 1
28013: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28014: LD_ADDR_VAR 0 5
28018: PUSH
28019: LD_VAR 0 2
28023: PPUSH
28024: CALL_OW 480
28028: ST_TO_ADDR
// if not tmp then
28029: LD_VAR 0 5
28033: NOT
28034: IFFALSE 28038
// exit ;
28036: GO 28087
// for i in tmp do
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_VAR 0 5
28047: PUSH
28048: FOR_IN
28049: IFFALSE 28085
// if GetTech ( i , side ) <> state_researched then
28051: LD_VAR 0 4
28055: PPUSH
28056: LD_VAR 0 1
28060: PPUSH
28061: CALL_OW 321
28065: PUSH
28066: LD_INT 2
28068: NONEQUAL
28069: IFFALSE 28083
// begin result := false ;
28071: LD_ADDR_VAR 0 3
28075: PUSH
28076: LD_INT 0
28078: ST_TO_ADDR
// exit ;
28079: POP
28080: POP
28081: GO 28087
// end ;
28083: GO 28048
28085: POP
28086: POP
// end ;
28087: LD_VAR 0 3
28091: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28092: LD_INT 0
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28107: LD_VAR 0 1
28111: NOT
28112: IFTRUE 28129
28114: PUSH
28115: LD_VAR 0 1
28119: PPUSH
28120: CALL_OW 257
28124: PUSH
28125: LD_INT 9
28127: NONEQUAL
28128: OR
28129: IFFALSE 28133
// exit ;
28131: GO 28712
// side := GetSide ( unit ) ;
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: LD_VAR 0 1
28142: PPUSH
28143: CALL_OW 255
28147: ST_TO_ADDR
// tech_space := tech_spacanom ;
28148: LD_ADDR_VAR 0 12
28152: PUSH
28153: LD_INT 29
28155: ST_TO_ADDR
// tech_time := tech_taurad ;
28156: LD_ADDR_VAR 0 13
28160: PUSH
28161: LD_INT 28
28163: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28164: LD_ADDR_VAR 0 11
28168: PUSH
28169: LD_VAR 0 1
28173: PPUSH
28174: CALL_OW 310
28178: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28179: LD_VAR 0 11
28183: PPUSH
28184: CALL_OW 247
28188: PUSH
28189: LD_INT 2
28191: EQUAL
28192: IFFALSE 28196
// exit ;
28194: GO 28712
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28196: LD_ADDR_VAR 0 8
28200: PUSH
28201: LD_INT 81
28203: PUSH
28204: LD_VAR 0 9
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 3
28215: PUSH
28216: LD_INT 21
28218: PUSH
28219: LD_INT 3
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 69
28238: ST_TO_ADDR
// if not tmp then
28239: LD_VAR 0 8
28243: NOT
28244: IFFALSE 28248
// exit ;
28246: GO 28712
// if in_unit then
28248: LD_VAR 0 11
28252: IFFALSE 28276
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28254: LD_ADDR_VAR 0 10
28258: PUSH
28259: LD_VAR 0 8
28263: PPUSH
28264: LD_VAR 0 11
28268: PPUSH
28269: CALL_OW 74
28273: ST_TO_ADDR
28274: GO 28296
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28276: LD_ADDR_VAR 0 10
28280: PUSH
28281: LD_VAR 0 8
28285: PPUSH
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 74
28295: ST_TO_ADDR
// if not enemy then
28296: LD_VAR 0 10
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 28712
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28305: LD_VAR 0 11
28309: IFFALSE 28331
28311: PUSH
28312: LD_VAR 0 11
28316: PPUSH
28317: LD_VAR 0 10
28321: PPUSH
28322: CALL_OW 296
28326: PUSH
28327: LD_INT 13
28329: GREATER
28330: AND
28331: IFTRUE 28353
28333: PUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: LD_VAR 0 10
28343: PPUSH
28344: CALL_OW 296
28348: PUSH
28349: LD_INT 12
28351: GREATER
28352: OR
28353: IFFALSE 28357
// exit ;
28355: GO 28712
// missile := [ 1 ] ;
28357: LD_ADDR_VAR 0 14
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28368: LD_VAR 0 9
28372: PPUSH
28373: LD_VAR 0 12
28377: PPUSH
28378: CALL_OW 325
28382: IFFALSE 28411
// missile := Replace ( missile , missile + 1 , 2 ) ;
28384: LD_ADDR_VAR 0 14
28388: PUSH
28389: LD_VAR 0 14
28393: PPUSH
28394: LD_VAR 0 14
28398: PUSH
28399: LD_INT 1
28401: PLUS
28402: PPUSH
28403: LD_INT 2
28405: PPUSH
28406: CALL_OW 1
28410: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28411: LD_VAR 0 9
28415: PPUSH
28416: LD_VAR 0 13
28420: PPUSH
28421: CALL_OW 325
28425: IFFALSE 28449
28427: PUSH
28428: LD_VAR 0 10
28432: PPUSH
28433: CALL_OW 255
28437: PPUSH
28438: LD_VAR 0 13
28442: PPUSH
28443: CALL_OW 325
28447: NOT
28448: AND
28449: IFFALSE 28478
// missile := Replace ( missile , missile + 1 , 3 ) ;
28451: LD_ADDR_VAR 0 14
28455: PUSH
28456: LD_VAR 0 14
28460: PPUSH
28461: LD_VAR 0 14
28465: PUSH
28466: LD_INT 1
28468: PLUS
28469: PPUSH
28470: LD_INT 3
28472: PPUSH
28473: CALL_OW 1
28477: ST_TO_ADDR
// if missile < 2 then
28478: LD_VAR 0 14
28482: PUSH
28483: LD_INT 2
28485: LESS
28486: IFFALSE 28490
// exit ;
28488: GO 28712
// x := GetX ( enemy ) ;
28490: LD_ADDR_VAR 0 4
28494: PUSH
28495: LD_VAR 0 10
28499: PPUSH
28500: CALL_OW 250
28504: ST_TO_ADDR
// y := GetY ( enemy ) ;
28505: LD_ADDR_VAR 0 5
28509: PUSH
28510: LD_VAR 0 10
28514: PPUSH
28515: CALL_OW 251
28519: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28520: LD_ADDR_VAR 0 6
28524: PUSH
28525: LD_VAR 0 4
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PPUSH
28534: LD_INT 1
28536: PPUSH
28537: CALL_OW 12
28541: PLUS
28542: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28543: LD_ADDR_VAR 0 7
28547: PUSH
28548: LD_VAR 0 5
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PPUSH
28557: LD_INT 1
28559: PPUSH
28560: CALL_OW 12
28564: PLUS
28565: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28566: LD_VAR 0 6
28570: PPUSH
28571: LD_VAR 0 7
28575: PPUSH
28576: CALL_OW 488
28580: NOT
28581: IFFALSE 28603
// begin _x := x ;
28583: LD_ADDR_VAR 0 6
28587: PUSH
28588: LD_VAR 0 4
28592: ST_TO_ADDR
// _y := y ;
28593: LD_ADDR_VAR 0 7
28597: PUSH
28598: LD_VAR 0 5
28602: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28603: LD_ADDR_VAR 0 3
28607: PUSH
28608: LD_INT 1
28610: PPUSH
28611: LD_VAR 0 14
28615: PPUSH
28616: CALL_OW 12
28620: ST_TO_ADDR
// case i of 1 :
28621: LD_VAR 0 3
28625: PUSH
28626: LD_INT 1
28628: DOUBLE
28629: EQUAL
28630: IFTRUE 28634
28632: GO 28651
28634: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28635: LD_VAR 0 1
28639: PPUSH
28640: LD_VAR 0 10
28644: PPUSH
28645: CALL_OW 115
28649: GO 28712
28651: LD_INT 2
28653: DOUBLE
28654: EQUAL
28655: IFTRUE 28659
28657: GO 28681
28659: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28660: LD_VAR 0 1
28664: PPUSH
28665: LD_VAR 0 6
28669: PPUSH
28670: LD_VAR 0 7
28674: PPUSH
28675: CALL_OW 153
28679: GO 28712
28681: LD_INT 3
28683: DOUBLE
28684: EQUAL
28685: IFTRUE 28689
28687: GO 28711
28689: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28690: LD_VAR 0 1
28694: PPUSH
28695: LD_VAR 0 6
28699: PPUSH
28700: LD_VAR 0 7
28704: PPUSH
28705: CALL_OW 154
28709: GO 28712
28711: POP
// end ;
28712: LD_VAR 0 2
28716: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28717: LD_INT 0
28719: PPUSH
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
28724: PPUSH
// if not unit or not building then
28725: LD_VAR 0 1
28729: NOT
28730: IFTRUE 28739
28732: PUSH
28733: LD_VAR 0 2
28737: NOT
28738: OR
28739: IFFALSE 28743
// exit ;
28741: GO 28901
// x := GetX ( building ) ;
28743: LD_ADDR_VAR 0 5
28747: PUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 250
28757: ST_TO_ADDR
// y := GetY ( building ) ;
28758: LD_ADDR_VAR 0 6
28762: PUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: CALL_OW 251
28772: ST_TO_ADDR
// for i := 0 to 5 do
28773: LD_ADDR_VAR 0 4
28777: PUSH
28778: DOUBLE
28779: LD_INT 0
28781: DEC
28782: ST_TO_ADDR
28783: LD_INT 5
28785: PUSH
28786: FOR_TO
28787: IFFALSE 28899
// begin _x := ShiftX ( x , i , 3 ) ;
28789: LD_ADDR_VAR 0 7
28793: PUSH
28794: LD_VAR 0 5
28798: PPUSH
28799: LD_VAR 0 4
28803: PPUSH
28804: LD_INT 3
28806: PPUSH
28807: CALL_OW 272
28811: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28812: LD_ADDR_VAR 0 8
28816: PUSH
28817: LD_VAR 0 6
28821: PPUSH
28822: LD_VAR 0 4
28826: PPUSH
28827: LD_INT 3
28829: PPUSH
28830: CALL_OW 273
28834: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28835: LD_VAR 0 7
28839: PPUSH
28840: LD_VAR 0 8
28844: PPUSH
28845: CALL_OW 488
28849: NOT
28850: IFFALSE 28854
// continue ;
28852: GO 28786
// if HexInfo ( _x , _y ) = 0 then
28854: LD_VAR 0 7
28858: PPUSH
28859: LD_VAR 0 8
28863: PPUSH
28864: CALL_OW 428
28868: PUSH
28869: LD_INT 0
28871: EQUAL
28872: IFFALSE 28897
// begin ComMoveXY ( unit , _x , _y ) ;
28874: LD_VAR 0 1
28878: PPUSH
28879: LD_VAR 0 7
28883: PPUSH
28884: LD_VAR 0 8
28888: PPUSH
28889: CALL_OW 111
// exit ;
28893: POP
28894: POP
28895: GO 28901
// end ; end ;
28897: GO 28786
28899: POP
28900: POP
// end ;
28901: LD_VAR 0 3
28905: RET
// export function ScanBase ( side , base_area ) ; begin
28906: LD_INT 0
28908: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28909: LD_ADDR_VAR 0 3
28913: PUSH
28914: LD_VAR 0 2
28918: PPUSH
28919: LD_INT 81
28921: PUSH
28922: LD_VAR 0 1
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PPUSH
28931: CALL_OW 70
28935: ST_TO_ADDR
// end ;
28936: LD_VAR 0 3
28940: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28941: LD_INT 0
28943: PPUSH
28944: PPUSH
28945: PPUSH
28946: PPUSH
// result := false ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 0
28954: ST_TO_ADDR
// side := GetSide ( unit ) ;
28955: LD_ADDR_VAR 0 3
28959: PUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 255
28969: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28970: LD_ADDR_VAR 0 4
28974: PUSH
28975: LD_VAR 0 1
28979: PPUSH
28980: CALL_OW 248
28984: ST_TO_ADDR
// case nat of 1 :
28985: LD_VAR 0 4
28989: PUSH
28990: LD_INT 1
28992: DOUBLE
28993: EQUAL
28994: IFTRUE 28998
28996: GO 29009
28998: POP
// tech := tech_lassight ; 2 :
28999: LD_ADDR_VAR 0 5
29003: PUSH
29004: LD_INT 12
29006: ST_TO_ADDR
29007: GO 29048
29009: LD_INT 2
29011: DOUBLE
29012: EQUAL
29013: IFTRUE 29017
29015: GO 29028
29017: POP
// tech := tech_mortar ; 3 :
29018: LD_ADDR_VAR 0 5
29022: PUSH
29023: LD_INT 41
29025: ST_TO_ADDR
29026: GO 29048
29028: LD_INT 3
29030: DOUBLE
29031: EQUAL
29032: IFTRUE 29036
29034: GO 29047
29036: POP
// tech := tech_bazooka ; end ;
29037: LD_ADDR_VAR 0 5
29041: PUSH
29042: LD_INT 44
29044: ST_TO_ADDR
29045: GO 29048
29047: POP
// if Researched ( side , tech ) then
29048: LD_VAR 0 3
29052: PPUSH
29053: LD_VAR 0 5
29057: PPUSH
29058: CALL_OW 325
29062: IFFALSE 29089
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29064: LD_ADDR_VAR 0 2
29068: PUSH
29069: LD_INT 5
29071: PUSH
29072: LD_INT 8
29074: PUSH
29075: LD_INT 9
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: PUSH
29083: LD_VAR 0 4
29087: ARRAY
29088: ST_TO_ADDR
// end ;
29089: LD_VAR 0 2
29093: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29094: LD_INT 0
29096: PPUSH
29097: PPUSH
29098: PPUSH
// if not mines then
29099: LD_VAR 0 2
29103: NOT
29104: IFFALSE 29108
// exit ;
29106: GO 29252
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29108: LD_ADDR_VAR 0 5
29112: PUSH
29113: LD_INT 81
29115: PUSH
29116: LD_VAR 0 1
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 3
29127: PUSH
29128: LD_INT 21
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PPUSH
29146: CALL_OW 69
29150: ST_TO_ADDR
// for i in mines do
29151: LD_ADDR_VAR 0 4
29155: PUSH
29156: LD_VAR 0 2
29160: PUSH
29161: FOR_IN
29162: IFFALSE 29250
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29164: LD_VAR 0 4
29168: PUSH
29169: LD_INT 1
29171: ARRAY
29172: PPUSH
29173: LD_VAR 0 4
29177: PUSH
29178: LD_INT 2
29180: ARRAY
29181: PPUSH
29182: CALL_OW 458
29186: NOT
29187: IFFALSE 29191
// continue ;
29189: GO 29161
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29191: LD_VAR 0 4
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: LD_VAR 0 4
29204: PUSH
29205: LD_INT 2
29207: ARRAY
29208: PPUSH
29209: CALL_OW 428
29213: PUSH
29214: LD_VAR 0 5
29218: IN
29219: IFFALSE 29248
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29221: LD_VAR 0 4
29225: PUSH
29226: LD_INT 1
29228: ARRAY
29229: PPUSH
29230: LD_VAR 0 4
29234: PUSH
29235: LD_INT 2
29237: ARRAY
29238: PPUSH
29239: LD_VAR 0 1
29243: PPUSH
29244: CALL_OW 456
// end ;
29248: GO 29161
29250: POP
29251: POP
// end ;
29252: LD_VAR 0 3
29256: RET
// export function Count ( array ) ; begin
29257: LD_INT 0
29259: PPUSH
// result := array + 0 ;
29260: LD_ADDR_VAR 0 2
29264: PUSH
29265: LD_VAR 0 1
29269: PUSH
29270: LD_INT 0
29272: PLUS
29273: ST_TO_ADDR
// end ;
29274: LD_VAR 0 2
29278: RET
// export function IsEmpty ( building ) ; begin
29279: LD_INT 0
29281: PPUSH
// if not building then
29282: LD_VAR 0 1
29286: NOT
29287: IFFALSE 29291
// exit ;
29289: GO 29334
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29291: LD_ADDR_VAR 0 2
29295: PUSH
29296: LD_VAR 0 1
29300: PUSH
29301: LD_INT 22
29303: PUSH
29304: LD_VAR 0 1
29308: PPUSH
29309: CALL_OW 255
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 58
29320: PUSH
29321: EMPTY
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PPUSH
29328: CALL_OW 69
29332: IN
29333: ST_TO_ADDR
// end ;
29334: LD_VAR 0 2
29338: RET
// export function IsNotFull ( building ) ; var places ; begin
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
// if not building then
29343: LD_VAR 0 1
29347: NOT
29348: IFFALSE 29352
// exit ;
29350: GO 29380
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29352: LD_ADDR_VAR 0 2
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: LD_INT 3
29364: PUSH
29365: LD_INT 62
29367: PUSH
29368: EMPTY
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PPUSH
29375: CALL_OW 72
29379: ST_TO_ADDR
// end ;
29380: LD_VAR 0 2
29384: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29385: LD_INT 0
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// tmp := [ ] ;
29391: LD_ADDR_VAR 0 3
29395: PUSH
29396: EMPTY
29397: ST_TO_ADDR
// list := [ ] ;
29398: LD_ADDR_VAR 0 5
29402: PUSH
29403: EMPTY
29404: ST_TO_ADDR
// for i = 16 to 25 do
29405: LD_ADDR_VAR 0 4
29409: PUSH
29410: DOUBLE
29411: LD_INT 16
29413: DEC
29414: ST_TO_ADDR
29415: LD_INT 25
29417: PUSH
29418: FOR_TO
29419: IFFALSE 29492
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29421: LD_ADDR_VAR 0 3
29425: PUSH
29426: LD_VAR 0 3
29430: PUSH
29431: LD_INT 22
29433: PUSH
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 255
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 91
29450: PUSH
29451: LD_VAR 0 1
29455: PUSH
29456: LD_INT 6
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 30
29466: PUSH
29467: LD_VAR 0 4
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: PPUSH
29484: CALL_OW 69
29488: ADD
29489: ST_TO_ADDR
29490: GO 29418
29492: POP
29493: POP
// for i = 1 to tmp do
29494: LD_ADDR_VAR 0 4
29498: PUSH
29499: DOUBLE
29500: LD_INT 1
29502: DEC
29503: ST_TO_ADDR
29504: LD_VAR 0 3
29508: PUSH
29509: FOR_TO
29510: IFFALSE 29598
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29512: LD_ADDR_VAR 0 5
29516: PUSH
29517: LD_VAR 0 5
29521: PUSH
29522: LD_VAR 0 3
29526: PUSH
29527: LD_VAR 0 4
29531: ARRAY
29532: PPUSH
29533: CALL_OW 266
29537: PUSH
29538: LD_VAR 0 3
29542: PUSH
29543: LD_VAR 0 4
29547: ARRAY
29548: PPUSH
29549: CALL_OW 250
29553: PUSH
29554: LD_VAR 0 3
29558: PUSH
29559: LD_VAR 0 4
29563: ARRAY
29564: PPUSH
29565: CALL_OW 251
29569: PUSH
29570: LD_VAR 0 3
29574: PUSH
29575: LD_VAR 0 4
29579: ARRAY
29580: PPUSH
29581: CALL_OW 254
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: PUSH
29592: EMPTY
29593: LIST
29594: ADD
29595: ST_TO_ADDR
29596: GO 29509
29598: POP
29599: POP
// result := list ;
29600: LD_ADDR_VAR 0 2
29604: PUSH
29605: LD_VAR 0 5
29609: ST_TO_ADDR
// end ;
29610: LD_VAR 0 2
29614: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29615: LD_INT 0
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
// if not factory then
29624: LD_VAR 0 1
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 30236
// if control = control_apeman then
29633: LD_VAR 0 4
29637: PUSH
29638: LD_INT 5
29640: EQUAL
29641: IFFALSE 29750
// begin tmp := UnitsInside ( factory ) ;
29643: LD_ADDR_VAR 0 8
29647: PUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: CALL_OW 313
29657: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29658: LD_VAR 0 8
29662: PPUSH
29663: LD_INT 25
29665: PUSH
29666: LD_INT 12
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PPUSH
29673: CALL_OW 72
29677: NOT
29678: IFFALSE 29688
// control := control_manual ;
29680: LD_ADDR_VAR 0 4
29684: PUSH
29685: LD_INT 1
29687: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29688: LD_ADDR_VAR 0 8
29692: PUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL 29385 0 1
29702: ST_TO_ADDR
// if tmp then
29703: LD_VAR 0 8
29707: IFFALSE 29750
// begin for i in tmp do
29709: LD_ADDR_VAR 0 7
29713: PUSH
29714: LD_VAR 0 8
29718: PUSH
29719: FOR_IN
29720: IFFALSE 29748
// if i [ 1 ] = b_ext_radio then
29722: LD_VAR 0 7
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: PUSH
29731: LD_INT 22
29733: EQUAL
29734: IFFALSE 29746
// begin control := control_remote ;
29736: LD_ADDR_VAR 0 4
29740: PUSH
29741: LD_INT 2
29743: ST_TO_ADDR
// break ;
29744: GO 29748
// end ;
29746: GO 29719
29748: POP
29749: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29750: LD_VAR 0 1
29754: PPUSH
29755: LD_VAR 0 2
29759: PPUSH
29760: LD_VAR 0 3
29764: PPUSH
29765: LD_VAR 0 4
29769: PPUSH
29770: LD_VAR 0 5
29774: PPUSH
29775: CALL_OW 448
29779: IFFALSE 29814
// begin result := [ chassis , engine , control , weapon ] ;
29781: LD_ADDR_VAR 0 6
29785: PUSH
29786: LD_VAR 0 2
29790: PUSH
29791: LD_VAR 0 3
29795: PUSH
29796: LD_VAR 0 4
29800: PUSH
29801: LD_VAR 0 5
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: ST_TO_ADDR
// exit ;
29812: GO 30236
// end ; _chassis := AvailableChassisList ( factory ) ;
29814: LD_ADDR_VAR 0 9
29818: PUSH
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 475
29828: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29829: LD_ADDR_VAR 0 11
29833: PUSH
29834: LD_VAR 0 1
29838: PPUSH
29839: CALL_OW 476
29843: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29844: LD_ADDR_VAR 0 12
29848: PUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 477
29858: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29859: LD_ADDR_VAR 0 10
29863: PUSH
29864: LD_VAR 0 1
29868: PPUSH
29869: CALL_OW 478
29873: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29874: LD_VAR 0 9
29878: NOT
29879: IFTRUE 29888
29881: PUSH
29882: LD_VAR 0 11
29886: NOT
29887: OR
29888: IFTRUE 29897
29890: PUSH
29891: LD_VAR 0 12
29895: NOT
29896: OR
29897: IFTRUE 29906
29899: PUSH
29900: LD_VAR 0 10
29904: NOT
29905: OR
29906: IFFALSE 29941
// begin result := [ chassis , engine , control , weapon ] ;
29908: LD_ADDR_VAR 0 6
29912: PUSH
29913: LD_VAR 0 2
29917: PUSH
29918: LD_VAR 0 3
29922: PUSH
29923: LD_VAR 0 4
29927: PUSH
29928: LD_VAR 0 5
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// exit ;
29939: GO 30236
// end ; if not chassis in _chassis then
29941: LD_VAR 0 2
29945: PUSH
29946: LD_VAR 0 9
29950: IN
29951: NOT
29952: IFFALSE 29978
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29954: LD_ADDR_VAR 0 2
29958: PUSH
29959: LD_VAR 0 9
29963: PUSH
29964: LD_INT 1
29966: PPUSH
29967: LD_VAR 0 9
29971: PPUSH
29972: CALL_OW 12
29976: ARRAY
29977: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29978: LD_VAR 0 2
29982: PPUSH
29983: LD_VAR 0 3
29987: PPUSH
29988: CALL 30241 0 2
29992: NOT
29993: IFFALSE 30054
// repeat engine := _engine [ 1 ] ;
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_VAR 0 11
30004: PUSH
30005: LD_INT 1
30007: ARRAY
30008: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30009: LD_ADDR_VAR 0 11
30013: PUSH
30014: LD_VAR 0 11
30018: PPUSH
30019: LD_INT 1
30021: PPUSH
30022: CALL_OW 3
30026: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30027: LD_VAR 0 2
30031: PPUSH
30032: LD_VAR 0 3
30036: PPUSH
30037: CALL 30241 0 2
30041: IFTRUE 30052
30043: PUSH
30044: LD_VAR 0 11
30048: PUSH
30049: EMPTY
30050: EQUAL
30051: OR
30052: IFFALSE 29995
// if not control in _control then
30054: LD_VAR 0 4
30058: PUSH
30059: LD_VAR 0 12
30063: IN
30064: NOT
30065: IFFALSE 30091
// control := _control [ rand ( 1 , _control ) ] ;
30067: LD_ADDR_VAR 0 4
30071: PUSH
30072: LD_VAR 0 12
30076: PUSH
30077: LD_INT 1
30079: PPUSH
30080: LD_VAR 0 12
30084: PPUSH
30085: CALL_OW 12
30089: ARRAY
30090: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: LD_VAR 0 5
30100: PPUSH
30101: CALL 30463 0 2
30105: NOT
30106: IFFALSE 30167
// repeat weapon := _weapon [ 1 ] ;
30108: LD_ADDR_VAR 0 5
30112: PUSH
30113: LD_VAR 0 10
30117: PUSH
30118: LD_INT 1
30120: ARRAY
30121: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30122: LD_ADDR_VAR 0 10
30126: PUSH
30127: LD_VAR 0 10
30131: PPUSH
30132: LD_INT 1
30134: PPUSH
30135: CALL_OW 3
30139: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30140: LD_VAR 0 2
30144: PPUSH
30145: LD_VAR 0 5
30149: PPUSH
30150: CALL 30463 0 2
30154: IFTRUE 30165
30156: PUSH
30157: LD_VAR 0 10
30161: PUSH
30162: EMPTY
30163: EQUAL
30164: OR
30165: IFFALSE 30108
// result := [ ] ;
30167: LD_ADDR_VAR 0 6
30171: PUSH
30172: EMPTY
30173: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30174: LD_VAR 0 1
30178: PPUSH
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: LD_VAR 0 4
30193: PPUSH
30194: LD_VAR 0 5
30198: PPUSH
30199: CALL_OW 448
30203: IFFALSE 30236
// result := [ chassis , engine , control , weapon ] ;
30205: LD_ADDR_VAR 0 6
30209: PUSH
30210: LD_VAR 0 2
30214: PUSH
30215: LD_VAR 0 3
30219: PUSH
30220: LD_VAR 0 4
30224: PUSH
30225: LD_VAR 0 5
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// end ;
30236: LD_VAR 0 6
30240: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30241: LD_INT 0
30243: PPUSH
// if not chassis or not engine then
30244: LD_VAR 0 1
30248: NOT
30249: IFTRUE 30258
30251: PUSH
30252: LD_VAR 0 2
30256: NOT
30257: OR
30258: IFFALSE 30262
// exit ;
30260: GO 30458
// case engine of engine_solar :
30262: LD_VAR 0 2
30266: PUSH
30267: LD_INT 2
30269: DOUBLE
30270: EQUAL
30271: IFTRUE 30275
30273: GO 30313
30275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30276: LD_ADDR_VAR 0 3
30280: PUSH
30281: LD_INT 11
30283: PUSH
30284: LD_INT 12
30286: PUSH
30287: LD_INT 13
30289: PUSH
30290: LD_INT 14
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: ST_TO_ADDR
30311: GO 30442
30313: LD_INT 1
30315: DOUBLE
30316: EQUAL
30317: IFTRUE 30321
30319: GO 30383
30321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30322: LD_ADDR_VAR 0 3
30326: PUSH
30327: LD_INT 11
30329: PUSH
30330: LD_INT 12
30332: PUSH
30333: LD_INT 13
30335: PUSH
30336: LD_INT 14
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: LD_INT 4
30350: PUSH
30351: LD_INT 5
30353: PUSH
30354: LD_INT 21
30356: PUSH
30357: LD_INT 23
30359: PUSH
30360: LD_INT 22
30362: PUSH
30363: LD_INT 24
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
30381: GO 30442
30383: LD_INT 3
30385: DOUBLE
30386: EQUAL
30387: IFTRUE 30391
30389: GO 30441
30391: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30392: LD_ADDR_VAR 0 3
30396: PUSH
30397: LD_INT 13
30399: PUSH
30400: LD_INT 14
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: LD_INT 4
30411: PUSH
30412: LD_INT 5
30414: PUSH
30415: LD_INT 21
30417: PUSH
30418: LD_INT 22
30420: PUSH
30421: LD_INT 23
30423: PUSH
30424: LD_INT 24
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
30439: GO 30442
30441: POP
// result := ( chassis in result ) ;
30442: LD_ADDR_VAR 0 3
30446: PUSH
30447: LD_VAR 0 1
30451: PUSH
30452: LD_VAR 0 3
30456: IN
30457: ST_TO_ADDR
// end ;
30458: LD_VAR 0 3
30462: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30463: LD_INT 0
30465: PPUSH
// if not chassis or not weapon then
30466: LD_VAR 0 1
30470: NOT
30471: IFTRUE 30480
30473: PUSH
30474: LD_VAR 0 2
30478: NOT
30479: OR
30480: IFFALSE 30484
// exit ;
30482: GO 31578
// case weapon of us_machine_gun :
30484: LD_VAR 0 2
30488: PUSH
30489: LD_INT 2
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30527
30497: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: LD_INT 4
30514: PUSH
30515: LD_INT 5
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
30525: GO 31562
30527: LD_INT 3
30529: DOUBLE
30530: EQUAL
30531: IFTRUE 30535
30533: GO 30565
30535: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 3
30549: PUSH
30550: LD_INT 4
30552: PUSH
30553: LD_INT 5
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: ST_TO_ADDR
30563: GO 31562
30565: LD_INT 11
30567: DOUBLE
30568: EQUAL
30569: IFTRUE 30573
30571: GO 30603
30573: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30574: LD_ADDR_VAR 0 3
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 4
30590: PUSH
30591: LD_INT 5
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
30601: GO 31562
30603: LD_INT 4
30605: DOUBLE
30606: EQUAL
30607: IFTRUE 30611
30609: GO 30637
30611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30612: LD_ADDR_VAR 0 3
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 3
30622: PUSH
30623: LD_INT 4
30625: PUSH
30626: LD_INT 5
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
30635: GO 31562
30637: LD_INT 5
30639: DOUBLE
30640: EQUAL
30641: IFTRUE 30645
30643: GO 30671
30645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: LD_INT 3
30656: PUSH
30657: LD_INT 4
30659: PUSH
30660: LD_INT 5
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
30669: GO 31562
30671: LD_INT 9
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30705
30679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 3
30690: PUSH
30691: LD_INT 4
30693: PUSH
30694: LD_INT 5
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
30703: GO 31562
30705: LD_INT 7
30707: DOUBLE
30708: EQUAL
30709: IFTRUE 30713
30711: GO 30739
30713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: LD_INT 3
30724: PUSH
30725: LD_INT 4
30727: PUSH
30728: LD_INT 5
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
30737: GO 31562
30739: LD_INT 12
30741: DOUBLE
30742: EQUAL
30743: IFTRUE 30747
30745: GO 30773
30747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30748: LD_ADDR_VAR 0 3
30752: PUSH
30753: LD_INT 2
30755: PUSH
30756: LD_INT 3
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
30771: GO 31562
30773: LD_INT 13
30775: DOUBLE
30776: EQUAL
30777: IFTRUE 30781
30779: GO 30807
30781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30782: LD_ADDR_VAR 0 3
30786: PUSH
30787: LD_INT 2
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: LD_INT 4
30795: PUSH
30796: LD_INT 5
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: ST_TO_ADDR
30805: GO 31562
30807: LD_INT 14
30809: DOUBLE
30810: EQUAL
30811: IFTRUE 30815
30813: GO 30833
30815: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_INT 4
30823: PUSH
30824: LD_INT 5
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: ST_TO_ADDR
30831: GO 31562
30833: LD_INT 6
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30841
30839: GO 30859
30841: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30842: LD_ADDR_VAR 0 3
30846: PUSH
30847: LD_INT 4
30849: PUSH
30850: LD_INT 5
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: ST_TO_ADDR
30857: GO 31562
30859: LD_INT 10
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30885
30867: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30868: LD_ADDR_VAR 0 3
30872: PUSH
30873: LD_INT 4
30875: PUSH
30876: LD_INT 5
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: ST_TO_ADDR
30883: GO 31562
30885: LD_INT 22
30887: DOUBLE
30888: EQUAL
30889: IFTRUE 30893
30891: GO 30919
30893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30894: LD_ADDR_VAR 0 3
30898: PUSH
30899: LD_INT 11
30901: PUSH
30902: LD_INT 12
30904: PUSH
30905: LD_INT 13
30907: PUSH
30908: LD_INT 14
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: ST_TO_ADDR
30917: GO 31562
30919: LD_INT 23
30921: DOUBLE
30922: EQUAL
30923: IFTRUE 30927
30925: GO 30953
30927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30928: LD_ADDR_VAR 0 3
30932: PUSH
30933: LD_INT 11
30935: PUSH
30936: LD_INT 12
30938: PUSH
30939: LD_INT 13
30941: PUSH
30942: LD_INT 14
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: ST_TO_ADDR
30951: GO 31562
30953: LD_INT 24
30955: DOUBLE
30956: EQUAL
30957: IFTRUE 30961
30959: GO 30987
30961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30962: LD_ADDR_VAR 0 3
30966: PUSH
30967: LD_INT 11
30969: PUSH
30970: LD_INT 12
30972: PUSH
30973: LD_INT 13
30975: PUSH
30976: LD_INT 14
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: ST_TO_ADDR
30985: GO 31562
30987: LD_INT 30
30989: DOUBLE
30990: EQUAL
30991: IFTRUE 30995
30993: GO 31021
30995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30996: LD_ADDR_VAR 0 3
31000: PUSH
31001: LD_INT 11
31003: PUSH
31004: LD_INT 12
31006: PUSH
31007: LD_INT 13
31009: PUSH
31010: LD_INT 14
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
31019: GO 31562
31021: LD_INT 25
31023: DOUBLE
31024: EQUAL
31025: IFTRUE 31029
31027: GO 31047
31029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31030: LD_ADDR_VAR 0 3
31034: PUSH
31035: LD_INT 13
31037: PUSH
31038: LD_INT 14
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: ST_TO_ADDR
31045: GO 31562
31047: LD_INT 27
31049: DOUBLE
31050: EQUAL
31051: IFTRUE 31055
31053: GO 31073
31055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31056: LD_ADDR_VAR 0 3
31060: PUSH
31061: LD_INT 13
31063: PUSH
31064: LD_INT 14
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: ST_TO_ADDR
31071: GO 31562
31073: LD_INT 92
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31081
31079: GO 31107
31081: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31082: LD_ADDR_VAR 0 3
31086: PUSH
31087: LD_INT 11
31089: PUSH
31090: LD_INT 12
31092: PUSH
31093: LD_INT 13
31095: PUSH
31096: LD_INT 14
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
31105: GO 31562
31107: LD_INT 28
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31133
31115: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_INT 13
31123: PUSH
31124: LD_INT 14
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: ST_TO_ADDR
31131: GO 31562
31133: LD_INT 29
31135: DOUBLE
31136: EQUAL
31137: IFTRUE 31141
31139: GO 31159
31141: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31142: LD_ADDR_VAR 0 3
31146: PUSH
31147: LD_INT 13
31149: PUSH
31150: LD_INT 14
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: ST_TO_ADDR
31157: GO 31562
31159: LD_INT 31
31161: DOUBLE
31162: EQUAL
31163: IFTRUE 31167
31165: GO 31185
31167: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31168: LD_ADDR_VAR 0 3
31172: PUSH
31173: LD_INT 13
31175: PUSH
31176: LD_INT 14
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: ST_TO_ADDR
31183: GO 31562
31185: LD_INT 26
31187: DOUBLE
31188: EQUAL
31189: IFTRUE 31193
31191: GO 31211
31193: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: LD_INT 13
31201: PUSH
31202: LD_INT 14
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: ST_TO_ADDR
31209: GO 31562
31211: LD_INT 42
31213: DOUBLE
31214: EQUAL
31215: IFTRUE 31219
31217: GO 31245
31219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31220: LD_ADDR_VAR 0 3
31224: PUSH
31225: LD_INT 21
31227: PUSH
31228: LD_INT 22
31230: PUSH
31231: LD_INT 23
31233: PUSH
31234: LD_INT 24
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
31243: GO 31562
31245: LD_INT 43
31247: DOUBLE
31248: EQUAL
31249: IFTRUE 31253
31251: GO 31279
31253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31254: LD_ADDR_VAR 0 3
31258: PUSH
31259: LD_INT 21
31261: PUSH
31262: LD_INT 22
31264: PUSH
31265: LD_INT 23
31267: PUSH
31268: LD_INT 24
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: ST_TO_ADDR
31277: GO 31562
31279: LD_INT 44
31281: DOUBLE
31282: EQUAL
31283: IFTRUE 31287
31285: GO 31313
31287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31288: LD_ADDR_VAR 0 3
31292: PUSH
31293: LD_INT 21
31295: PUSH
31296: LD_INT 22
31298: PUSH
31299: LD_INT 23
31301: PUSH
31302: LD_INT 24
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
31311: GO 31562
31313: LD_INT 45
31315: DOUBLE
31316: EQUAL
31317: IFTRUE 31321
31319: GO 31347
31321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_INT 21
31329: PUSH
31330: LD_INT 22
31332: PUSH
31333: LD_INT 23
31335: PUSH
31336: LD_INT 24
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: ST_TO_ADDR
31345: GO 31562
31347: LD_INT 49
31349: DOUBLE
31350: EQUAL
31351: IFTRUE 31355
31353: GO 31381
31355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31356: LD_ADDR_VAR 0 3
31360: PUSH
31361: LD_INT 21
31363: PUSH
31364: LD_INT 22
31366: PUSH
31367: LD_INT 23
31369: PUSH
31370: LD_INT 24
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: ST_TO_ADDR
31379: GO 31562
31381: LD_INT 51
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 31415
31389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31390: LD_ADDR_VAR 0 3
31394: PUSH
31395: LD_INT 21
31397: PUSH
31398: LD_INT 22
31400: PUSH
31401: LD_INT 23
31403: PUSH
31404: LD_INT 24
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: ST_TO_ADDR
31413: GO 31562
31415: LD_INT 52
31417: DOUBLE
31418: EQUAL
31419: IFTRUE 31423
31421: GO 31449
31423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31424: LD_ADDR_VAR 0 3
31428: PUSH
31429: LD_INT 21
31431: PUSH
31432: LD_INT 22
31434: PUSH
31435: LD_INT 23
31437: PUSH
31438: LD_INT 24
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: ST_TO_ADDR
31447: GO 31562
31449: LD_INT 53
31451: DOUBLE
31452: EQUAL
31453: IFTRUE 31457
31455: GO 31475
31457: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: LD_INT 23
31465: PUSH
31466: LD_INT 24
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: ST_TO_ADDR
31473: GO 31562
31475: LD_INT 46
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31501
31483: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31484: LD_ADDR_VAR 0 3
31488: PUSH
31489: LD_INT 23
31491: PUSH
31492: LD_INT 24
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: ST_TO_ADDR
31499: GO 31562
31501: LD_INT 47
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31527
31509: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: LD_INT 23
31517: PUSH
31518: LD_INT 24
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: ST_TO_ADDR
31525: GO 31562
31527: LD_INT 98
31529: DOUBLE
31530: EQUAL
31531: IFTRUE 31535
31533: GO 31561
31535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31536: LD_ADDR_VAR 0 3
31540: PUSH
31541: LD_INT 21
31543: PUSH
31544: LD_INT 22
31546: PUSH
31547: LD_INT 23
31549: PUSH
31550: LD_INT 24
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
31559: GO 31562
31561: POP
// result := ( chassis in result ) ;
31562: LD_ADDR_VAR 0 3
31566: PUSH
31567: LD_VAR 0 1
31571: PUSH
31572: LD_VAR 0 3
31576: IN
31577: ST_TO_ADDR
// end ;
31578: LD_VAR 0 3
31582: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31583: LD_INT 0
31585: PPUSH
31586: PPUSH
31587: PPUSH
31588: PPUSH
31589: PPUSH
31590: PPUSH
31591: PPUSH
// result := array ;
31592: LD_ADDR_VAR 0 5
31596: PUSH
31597: LD_VAR 0 1
31601: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31602: LD_VAR 0 1
31606: NOT
31607: IFTRUE 31616
31609: PUSH
31610: LD_VAR 0 2
31614: NOT
31615: OR
31616: IFTRUE 31625
31618: PUSH
31619: LD_VAR 0 3
31623: NOT
31624: OR
31625: IFTRUE 31639
31627: PUSH
31628: LD_VAR 0 2
31632: PUSH
31633: LD_VAR 0 1
31637: GREATER
31638: OR
31639: IFTRUE 31653
31641: PUSH
31642: LD_VAR 0 3
31646: PUSH
31647: LD_VAR 0 1
31651: GREATER
31652: OR
31653: IFFALSE 31657
// exit ;
31655: GO 31953
// if direction then
31657: LD_VAR 0 4
31661: IFFALSE 31725
// begin d := 1 ;
31663: LD_ADDR_VAR 0 9
31667: PUSH
31668: LD_INT 1
31670: ST_TO_ADDR
// if i_from > i_to then
31671: LD_VAR 0 2
31675: PUSH
31676: LD_VAR 0 3
31680: GREATER
31681: IFFALSE 31707
// length := ( array - i_from ) + i_to else
31683: LD_ADDR_VAR 0 11
31687: PUSH
31688: LD_VAR 0 1
31692: PUSH
31693: LD_VAR 0 2
31697: MINUS
31698: PUSH
31699: LD_VAR 0 3
31703: PLUS
31704: ST_TO_ADDR
31705: GO 31723
// length := i_to - i_from ;
31707: LD_ADDR_VAR 0 11
31711: PUSH
31712: LD_VAR 0 3
31716: PUSH
31717: LD_VAR 0 2
31721: MINUS
31722: ST_TO_ADDR
// end else
31723: GO 31786
// begin d := - 1 ;
31725: LD_ADDR_VAR 0 9
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: ST_TO_ADDR
// if i_from > i_to then
31734: LD_VAR 0 2
31738: PUSH
31739: LD_VAR 0 3
31743: GREATER
31744: IFFALSE 31764
// length := i_from - i_to else
31746: LD_ADDR_VAR 0 11
31750: PUSH
31751: LD_VAR 0 2
31755: PUSH
31756: LD_VAR 0 3
31760: MINUS
31761: ST_TO_ADDR
31762: GO 31786
// length := ( array - i_to ) + i_from ;
31764: LD_ADDR_VAR 0 11
31768: PUSH
31769: LD_VAR 0 1
31773: PUSH
31774: LD_VAR 0 3
31778: MINUS
31779: PUSH
31780: LD_VAR 0 2
31784: PLUS
31785: ST_TO_ADDR
// end ; if not length then
31786: LD_VAR 0 11
31790: NOT
31791: IFFALSE 31795
// exit ;
31793: GO 31953
// tmp := array ;
31795: LD_ADDR_VAR 0 10
31799: PUSH
31800: LD_VAR 0 1
31804: ST_TO_ADDR
// for i = 1 to length do
31805: LD_ADDR_VAR 0 6
31809: PUSH
31810: DOUBLE
31811: LD_INT 1
31813: DEC
31814: ST_TO_ADDR
31815: LD_VAR 0 11
31819: PUSH
31820: FOR_TO
31821: IFFALSE 31941
// begin for j = 1 to array do
31823: LD_ADDR_VAR 0 7
31827: PUSH
31828: DOUBLE
31829: LD_INT 1
31831: DEC
31832: ST_TO_ADDR
31833: LD_VAR 0 1
31837: PUSH
31838: FOR_TO
31839: IFFALSE 31927
// begin k := j + d ;
31841: LD_ADDR_VAR 0 8
31845: PUSH
31846: LD_VAR 0 7
31850: PUSH
31851: LD_VAR 0 9
31855: PLUS
31856: ST_TO_ADDR
// if k > array then
31857: LD_VAR 0 8
31861: PUSH
31862: LD_VAR 0 1
31866: GREATER
31867: IFFALSE 31877
// k := 1 ;
31869: LD_ADDR_VAR 0 8
31873: PUSH
31874: LD_INT 1
31876: ST_TO_ADDR
// if not k then
31877: LD_VAR 0 8
31881: NOT
31882: IFFALSE 31894
// k := array ;
31884: LD_ADDR_VAR 0 8
31888: PUSH
31889: LD_VAR 0 1
31893: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31894: LD_ADDR_VAR 0 10
31898: PUSH
31899: LD_VAR 0 10
31903: PPUSH
31904: LD_VAR 0 8
31908: PPUSH
31909: LD_VAR 0 1
31913: PUSH
31914: LD_VAR 0 7
31918: ARRAY
31919: PPUSH
31920: CALL_OW 1
31924: ST_TO_ADDR
// end ;
31925: GO 31838
31927: POP
31928: POP
// array := tmp ;
31929: LD_ADDR_VAR 0 1
31933: PUSH
31934: LD_VAR 0 10
31938: ST_TO_ADDR
// end ;
31939: GO 31820
31941: POP
31942: POP
// result := array ;
31943: LD_ADDR_VAR 0 5
31947: PUSH
31948: LD_VAR 0 1
31952: ST_TO_ADDR
// end ;
31953: LD_VAR 0 5
31957: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31958: LD_INT 0
31960: PPUSH
31961: PPUSH
// result := 0 ;
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 0
31969: ST_TO_ADDR
// if not array or not value in array then
31970: LD_VAR 0 1
31974: NOT
31975: IFTRUE 31990
31977: PUSH
31978: LD_VAR 0 2
31982: PUSH
31983: LD_VAR 0 1
31987: IN
31988: NOT
31989: OR
31990: IFFALSE 31994
// exit ;
31992: GO 32048
// for i = 1 to array do
31994: LD_ADDR_VAR 0 4
31998: PUSH
31999: DOUBLE
32000: LD_INT 1
32002: DEC
32003: ST_TO_ADDR
32004: LD_VAR 0 1
32008: PUSH
32009: FOR_TO
32010: IFFALSE 32046
// if value = array [ i ] then
32012: LD_VAR 0 2
32016: PUSH
32017: LD_VAR 0 1
32021: PUSH
32022: LD_VAR 0 4
32026: ARRAY
32027: EQUAL
32028: IFFALSE 32044
// begin result := i ;
32030: LD_ADDR_VAR 0 3
32034: PUSH
32035: LD_VAR 0 4
32039: ST_TO_ADDR
// exit ;
32040: POP
32041: POP
32042: GO 32048
// end ;
32044: GO 32009
32046: POP
32047: POP
// end ;
32048: LD_VAR 0 3
32052: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32053: LD_INT 0
32055: PPUSH
// vc_chassis := chassis ;
32056: LD_ADDR_OWVAR 37
32060: PUSH
32061: LD_VAR 0 1
32065: ST_TO_ADDR
// vc_engine := engine ;
32066: LD_ADDR_OWVAR 39
32070: PUSH
32071: LD_VAR 0 2
32075: ST_TO_ADDR
// vc_control := control ;
32076: LD_ADDR_OWVAR 38
32080: PUSH
32081: LD_VAR 0 3
32085: ST_TO_ADDR
// vc_weapon := weapon ;
32086: LD_ADDR_OWVAR 40
32090: PUSH
32091: LD_VAR 0 4
32095: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32096: LD_ADDR_OWVAR 41
32100: PUSH
32101: LD_VAR 0 5
32105: ST_TO_ADDR
// end ;
32106: LD_VAR 0 6
32110: RET
// export function WantPlant ( unit ) ; var task ; begin
32111: LD_INT 0
32113: PPUSH
32114: PPUSH
// result := false ;
32115: LD_ADDR_VAR 0 2
32119: PUSH
32120: LD_INT 0
32122: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL_OW 437
32137: ST_TO_ADDR
// if task then
32138: LD_VAR 0 3
32142: IFFALSE 32170
// if task [ 1 ] [ 1 ] = p then
32144: LD_VAR 0 3
32148: PUSH
32149: LD_INT 1
32151: ARRAY
32152: PUSH
32153: LD_INT 1
32155: ARRAY
32156: PUSH
32157: LD_STRING p
32159: EQUAL
32160: IFFALSE 32170
// result := true ;
32162: LD_ADDR_VAR 0 2
32166: PUSH
32167: LD_INT 1
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 2
32174: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32175: LD_INT 0
32177: PPUSH
32178: PPUSH
32179: PPUSH
32180: PPUSH
// if pos < 1 then
32181: LD_VAR 0 2
32185: PUSH
32186: LD_INT 1
32188: LESS
32189: IFFALSE 32193
// exit ;
32191: GO 32496
// if pos = 1 then
32193: LD_VAR 0 2
32197: PUSH
32198: LD_INT 1
32200: EQUAL
32201: IFFALSE 32234
// result := Replace ( arr , pos [ 1 ] , value ) else
32203: LD_ADDR_VAR 0 4
32207: PUSH
32208: LD_VAR 0 1
32212: PPUSH
32213: LD_VAR 0 2
32217: PUSH
32218: LD_INT 1
32220: ARRAY
32221: PPUSH
32222: LD_VAR 0 3
32226: PPUSH
32227: CALL_OW 1
32231: ST_TO_ADDR
32232: GO 32496
// begin tmp := arr ;
32234: LD_ADDR_VAR 0 6
32238: PUSH
32239: LD_VAR 0 1
32243: ST_TO_ADDR
// s_arr := [ tmp ] ;
32244: LD_ADDR_VAR 0 7
32248: PUSH
32249: LD_VAR 0 6
32253: PUSH
32254: EMPTY
32255: LIST
32256: ST_TO_ADDR
// for i = 1 to pos - 1 do
32257: LD_ADDR_VAR 0 5
32261: PUSH
32262: DOUBLE
32263: LD_INT 1
32265: DEC
32266: ST_TO_ADDR
32267: LD_VAR 0 2
32271: PUSH
32272: LD_INT 1
32274: MINUS
32275: PUSH
32276: FOR_TO
32277: IFFALSE 32322
// begin tmp := tmp [ pos [ i ] ] ;
32279: LD_ADDR_VAR 0 6
32283: PUSH
32284: LD_VAR 0 6
32288: PUSH
32289: LD_VAR 0 2
32293: PUSH
32294: LD_VAR 0 5
32298: ARRAY
32299: ARRAY
32300: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32301: LD_ADDR_VAR 0 7
32305: PUSH
32306: LD_VAR 0 7
32310: PUSH
32311: LD_VAR 0 6
32315: PUSH
32316: EMPTY
32317: LIST
32318: ADD
32319: ST_TO_ADDR
// end ;
32320: GO 32276
32322: POP
32323: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32324: LD_ADDR_VAR 0 6
32328: PUSH
32329: LD_VAR 0 6
32333: PPUSH
32334: LD_VAR 0 2
32338: PUSH
32339: LD_VAR 0 2
32343: ARRAY
32344: PPUSH
32345: LD_VAR 0 3
32349: PPUSH
32350: CALL_OW 1
32354: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32355: LD_ADDR_VAR 0 7
32359: PUSH
32360: LD_VAR 0 7
32364: PPUSH
32365: LD_VAR 0 7
32369: PPUSH
32370: LD_VAR 0 6
32374: PPUSH
32375: CALL_OW 1
32379: ST_TO_ADDR
// for i = s_arr downto 2 do
32380: LD_ADDR_VAR 0 5
32384: PUSH
32385: DOUBLE
32386: LD_VAR 0 7
32390: INC
32391: ST_TO_ADDR
32392: LD_INT 2
32394: PUSH
32395: FOR_DOWNTO
32396: IFFALSE 32480
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32398: LD_ADDR_VAR 0 6
32402: PUSH
32403: LD_VAR 0 7
32407: PUSH
32408: LD_VAR 0 5
32412: PUSH
32413: LD_INT 1
32415: MINUS
32416: ARRAY
32417: PPUSH
32418: LD_VAR 0 2
32422: PUSH
32423: LD_VAR 0 5
32427: PUSH
32428: LD_INT 1
32430: MINUS
32431: ARRAY
32432: PPUSH
32433: LD_VAR 0 7
32437: PUSH
32438: LD_VAR 0 5
32442: ARRAY
32443: PPUSH
32444: CALL_OW 1
32448: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32449: LD_ADDR_VAR 0 7
32453: PUSH
32454: LD_VAR 0 7
32458: PPUSH
32459: LD_VAR 0 5
32463: PUSH
32464: LD_INT 1
32466: MINUS
32467: PPUSH
32468: LD_VAR 0 6
32472: PPUSH
32473: CALL_OW 1
32477: ST_TO_ADDR
// end ;
32478: GO 32395
32480: POP
32481: POP
// result := s_arr [ 1 ] ;
32482: LD_ADDR_VAR 0 4
32486: PUSH
32487: LD_VAR 0 7
32491: PUSH
32492: LD_INT 1
32494: ARRAY
32495: ST_TO_ADDR
// end ; end ;
32496: LD_VAR 0 4
32500: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32501: LD_INT 0
32503: PPUSH
32504: PPUSH
// if not list then
32505: LD_VAR 0 1
32509: NOT
32510: IFFALSE 32514
// exit ;
32512: GO 32605
// i := list [ pos1 ] ;
32514: LD_ADDR_VAR 0 5
32518: PUSH
32519: LD_VAR 0 1
32523: PUSH
32524: LD_VAR 0 2
32528: ARRAY
32529: ST_TO_ADDR
// if not i then
32530: LD_VAR 0 5
32534: NOT
32535: IFFALSE 32539
// exit ;
32537: GO 32605
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32539: LD_ADDR_VAR 0 1
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 1
32558: PUSH
32559: LD_VAR 0 3
32563: ARRAY
32564: PPUSH
32565: CALL_OW 1
32569: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32570: LD_ADDR_VAR 0 1
32574: PUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: LD_VAR 0 3
32584: PPUSH
32585: LD_VAR 0 5
32589: PPUSH
32590: CALL_OW 1
32594: ST_TO_ADDR
// result := list ;
32595: LD_ADDR_VAR 0 4
32599: PUSH
32600: LD_VAR 0 1
32604: ST_TO_ADDR
// end ;
32605: LD_VAR 0 4
32609: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32610: LD_INT 0
32612: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32613: LD_ADDR_VAR 0 5
32617: PUSH
32618: LD_VAR 0 1
32622: PPUSH
32623: CALL_OW 250
32627: PPUSH
32628: LD_VAR 0 1
32632: PPUSH
32633: CALL_OW 251
32637: PPUSH
32638: LD_VAR 0 2
32642: PPUSH
32643: LD_VAR 0 3
32647: PPUSH
32648: LD_VAR 0 4
32652: PPUSH
32653: CALL 33035 0 5
32657: ST_TO_ADDR
// end ;
32658: LD_VAR 0 5
32662: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32663: LD_INT 0
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
// if not list or not unit then
32669: LD_VAR 0 2
32673: NOT
32674: IFTRUE 32683
32676: PUSH
32677: LD_VAR 0 1
32681: NOT
32682: OR
32683: IFFALSE 32687
// exit ;
32685: GO 33030
// result := [ ] ;
32687: LD_ADDR_VAR 0 5
32691: PUSH
32692: EMPTY
32693: ST_TO_ADDR
// for i in list do
32694: LD_ADDR_VAR 0 6
32698: PUSH
32699: LD_VAR 0 2
32703: PUSH
32704: FOR_IN
32705: IFFALSE 32923
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32707: LD_ADDR_VAR 0 8
32711: PUSH
32712: LD_VAR 0 1
32716: PPUSH
32717: LD_VAR 0 6
32721: PUSH
32722: LD_INT 1
32724: ARRAY
32725: PPUSH
32726: LD_VAR 0 6
32730: PUSH
32731: LD_INT 2
32733: ARRAY
32734: PPUSH
32735: CALL_OW 297
32739: ST_TO_ADDR
// if not Count ( result ) then
32740: LD_VAR 0 5
32744: PPUSH
32745: CALL 29257 0 1
32749: NOT
32750: IFFALSE 32783
// begin result := Join ( result , [ i , tmp ] ) ;
32752: LD_ADDR_VAR 0 5
32756: PUSH
32757: LD_VAR 0 5
32761: PPUSH
32762: LD_VAR 0 6
32766: PUSH
32767: LD_VAR 0 8
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PPUSH
32776: CALL 65233 0 2
32780: ST_TO_ADDR
// continue ;
32781: GO 32704
// end ; if result [ result ] [ 2 ] <= tmp then
32783: LD_VAR 0 5
32787: PUSH
32788: LD_VAR 0 5
32792: ARRAY
32793: PUSH
32794: LD_INT 2
32796: ARRAY
32797: PUSH
32798: LD_VAR 0 8
32802: LESSEQUAL
32803: IFFALSE 32836
// result := Join ( result , [ i , tmp ] ) else
32805: LD_ADDR_VAR 0 5
32809: PUSH
32810: LD_VAR 0 5
32814: PPUSH
32815: LD_VAR 0 6
32819: PUSH
32820: LD_VAR 0 8
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PPUSH
32829: CALL 65233 0 2
32833: ST_TO_ADDR
32834: GO 32921
// begin for j := 1 to Count ( result ) do
32836: LD_ADDR_VAR 0 7
32840: PUSH
32841: DOUBLE
32842: LD_INT 1
32844: DEC
32845: ST_TO_ADDR
32846: LD_VAR 0 5
32850: PPUSH
32851: CALL 29257 0 1
32855: PUSH
32856: FOR_TO
32857: IFFALSE 32919
// begin if tmp < result [ j ] [ 2 ] then
32859: LD_VAR 0 8
32863: PUSH
32864: LD_VAR 0 5
32868: PUSH
32869: LD_VAR 0 7
32873: ARRAY
32874: PUSH
32875: LD_INT 2
32877: ARRAY
32878: LESS
32879: IFFALSE 32917
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32881: LD_ADDR_VAR 0 5
32885: PUSH
32886: LD_VAR 0 5
32890: PPUSH
32891: LD_VAR 0 7
32895: PPUSH
32896: LD_VAR 0 6
32900: PUSH
32901: LD_VAR 0 8
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PPUSH
32910: CALL_OW 2
32914: ST_TO_ADDR
// break ;
32915: GO 32919
// end ; end ;
32917: GO 32856
32919: POP
32920: POP
// end ; end ;
32921: GO 32704
32923: POP
32924: POP
// if result and not asc then
32925: LD_VAR 0 5
32929: IFFALSE 32938
32931: PUSH
32932: LD_VAR 0 3
32936: NOT
32937: AND
32938: IFFALSE 32955
// result := ReverseArray ( result ) ;
32940: LD_ADDR_VAR 0 5
32944: PUSH
32945: LD_VAR 0 5
32949: PPUSH
32950: CALL 60313 0 1
32954: ST_TO_ADDR
// tmp := [ ] ;
32955: LD_ADDR_VAR 0 8
32959: PUSH
32960: EMPTY
32961: ST_TO_ADDR
// if mode then
32962: LD_VAR 0 4
32966: IFFALSE 33030
// begin for i := 1 to result do
32968: LD_ADDR_VAR 0 6
32972: PUSH
32973: DOUBLE
32974: LD_INT 1
32976: DEC
32977: ST_TO_ADDR
32978: LD_VAR 0 5
32982: PUSH
32983: FOR_TO
32984: IFFALSE 33018
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32986: LD_ADDR_VAR 0 8
32990: PUSH
32991: LD_VAR 0 8
32995: PPUSH
32996: LD_VAR 0 5
33000: PUSH
33001: LD_VAR 0 6
33005: ARRAY
33006: PUSH
33007: LD_INT 1
33009: ARRAY
33010: PPUSH
33011: CALL 65233 0 2
33015: ST_TO_ADDR
33016: GO 32983
33018: POP
33019: POP
// result := tmp ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 8
33029: ST_TO_ADDR
// end ; end ;
33030: LD_VAR 0 5
33034: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
// if not list then
33041: LD_VAR 0 3
33045: NOT
33046: IFFALSE 33050
// exit ;
33048: GO 33440
// result := [ ] ;
33050: LD_ADDR_VAR 0 6
33054: PUSH
33055: EMPTY
33056: ST_TO_ADDR
// for i in list do
33057: LD_ADDR_VAR 0 7
33061: PUSH
33062: LD_VAR 0 3
33066: PUSH
33067: FOR_IN
33068: IFFALSE 33270
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_VAR 0 7
33079: PPUSH
33080: LD_VAR 0 1
33084: PPUSH
33085: LD_VAR 0 2
33089: PPUSH
33090: CALL_OW 297
33094: ST_TO_ADDR
// if not result then
33095: LD_VAR 0 6
33099: NOT
33100: IFFALSE 33126
// result := [ [ i , tmp ] ] else
33102: LD_ADDR_VAR 0 6
33106: PUSH
33107: LD_VAR 0 7
33111: PUSH
33112: LD_VAR 0 9
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: ST_TO_ADDR
33124: GO 33268
// begin if result [ result ] [ 2 ] <= tmp then
33126: LD_VAR 0 6
33130: PUSH
33131: LD_VAR 0 6
33135: ARRAY
33136: PUSH
33137: LD_INT 2
33139: ARRAY
33140: PUSH
33141: LD_VAR 0 9
33145: LESSEQUAL
33146: IFFALSE 33188
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33148: LD_ADDR_VAR 0 6
33152: PUSH
33153: LD_VAR 0 6
33157: PPUSH
33158: LD_VAR 0 6
33162: PUSH
33163: LD_INT 1
33165: PLUS
33166: PPUSH
33167: LD_VAR 0 7
33171: PUSH
33172: LD_VAR 0 9
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PPUSH
33181: CALL_OW 2
33185: ST_TO_ADDR
33186: GO 33268
// for j := 1 to result do
33188: LD_ADDR_VAR 0 8
33192: PUSH
33193: DOUBLE
33194: LD_INT 1
33196: DEC
33197: ST_TO_ADDR
33198: LD_VAR 0 6
33202: PUSH
33203: FOR_TO
33204: IFFALSE 33266
// begin if tmp < result [ j ] [ 2 ] then
33206: LD_VAR 0 9
33210: PUSH
33211: LD_VAR 0 6
33215: PUSH
33216: LD_VAR 0 8
33220: ARRAY
33221: PUSH
33222: LD_INT 2
33224: ARRAY
33225: LESS
33226: IFFALSE 33264
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33228: LD_ADDR_VAR 0 6
33232: PUSH
33233: LD_VAR 0 6
33237: PPUSH
33238: LD_VAR 0 8
33242: PPUSH
33243: LD_VAR 0 7
33247: PUSH
33248: LD_VAR 0 9
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PPUSH
33257: CALL_OW 2
33261: ST_TO_ADDR
// break ;
33262: GO 33266
// end ; end ;
33264: GO 33203
33266: POP
33267: POP
// end ; end ;
33268: GO 33067
33270: POP
33271: POP
// if result and not asc then
33272: LD_VAR 0 6
33276: IFFALSE 33285
33278: PUSH
33279: LD_VAR 0 4
33283: NOT
33284: AND
33285: IFFALSE 33360
// begin tmp := result ;
33287: LD_ADDR_VAR 0 9
33291: PUSH
33292: LD_VAR 0 6
33296: ST_TO_ADDR
// for i = tmp downto 1 do
33297: LD_ADDR_VAR 0 7
33301: PUSH
33302: DOUBLE
33303: LD_VAR 0 9
33307: INC
33308: ST_TO_ADDR
33309: LD_INT 1
33311: PUSH
33312: FOR_DOWNTO
33313: IFFALSE 33358
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33315: LD_ADDR_VAR 0 6
33319: PUSH
33320: LD_VAR 0 6
33324: PPUSH
33325: LD_VAR 0 9
33329: PUSH
33330: LD_VAR 0 7
33334: MINUS
33335: PUSH
33336: LD_INT 1
33338: PLUS
33339: PPUSH
33340: LD_VAR 0 9
33344: PUSH
33345: LD_VAR 0 7
33349: ARRAY
33350: PPUSH
33351: CALL_OW 1
33355: ST_TO_ADDR
33356: GO 33312
33358: POP
33359: POP
// end ; tmp := [ ] ;
33360: LD_ADDR_VAR 0 9
33364: PUSH
33365: EMPTY
33366: ST_TO_ADDR
// if mode then
33367: LD_VAR 0 5
33371: IFFALSE 33440
// begin for i = 1 to result do
33373: LD_ADDR_VAR 0 7
33377: PUSH
33378: DOUBLE
33379: LD_INT 1
33381: DEC
33382: ST_TO_ADDR
33383: LD_VAR 0 6
33387: PUSH
33388: FOR_TO
33389: IFFALSE 33428
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33391: LD_ADDR_VAR 0 9
33395: PUSH
33396: LD_VAR 0 9
33400: PPUSH
33401: LD_VAR 0 7
33405: PPUSH
33406: LD_VAR 0 6
33410: PUSH
33411: LD_VAR 0 7
33415: ARRAY
33416: PUSH
33417: LD_INT 1
33419: ARRAY
33420: PPUSH
33421: CALL_OW 1
33425: ST_TO_ADDR
33426: GO 33388
33428: POP
33429: POP
// result := tmp ;
33430: LD_ADDR_VAR 0 6
33434: PUSH
33435: LD_VAR 0 9
33439: ST_TO_ADDR
// end ; end ;
33440: LD_VAR 0 6
33444: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33445: LD_INT 0
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33453: LD_ADDR_VAR 0 5
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: ST_TO_ADDR
// if not x or not y then
33475: LD_VAR 0 2
33479: NOT
33480: IFTRUE 33489
33482: PUSH
33483: LD_VAR 0 3
33487: NOT
33488: OR
33489: IFFALSE 33493
// exit ;
33491: GO 35149
// if not range then
33493: LD_VAR 0 4
33497: NOT
33498: IFFALSE 33508
// range := 10 ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_INT 10
33507: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33508: LD_ADDR_VAR 0 8
33512: PUSH
33513: LD_INT 81
33515: PUSH
33516: LD_VAR 0 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 92
33527: PUSH
33528: LD_VAR 0 2
33532: PUSH
33533: LD_VAR 0 3
33537: PUSH
33538: LD_VAR 0 4
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: LD_INT 21
33554: PUSH
33555: LD_INT 3
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: PPUSH
33571: CALL_OW 69
33575: ST_TO_ADDR
// if not tmp then
33576: LD_VAR 0 8
33580: NOT
33581: IFFALSE 33585
// exit ;
33583: GO 35149
// for i in tmp do
33585: LD_ADDR_VAR 0 6
33589: PUSH
33590: LD_VAR 0 8
33594: PUSH
33595: FOR_IN
33596: IFFALSE 35124
// begin points := [ 0 , 0 , 0 ] ;
33598: LD_ADDR_VAR 0 9
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: ST_TO_ADDR
// bpoints := 1 ;
33617: LD_ADDR_VAR 0 10
33621: PUSH
33622: LD_INT 1
33624: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33625: LD_VAR 0 6
33629: PPUSH
33630: CALL_OW 247
33634: PUSH
33635: LD_INT 1
33637: DOUBLE
33638: EQUAL
33639: IFTRUE 33643
33641: GO 34225
33643: POP
// begin if GetClass ( i ) = 1 then
33644: LD_VAR 0 6
33648: PPUSH
33649: CALL_OW 257
33653: PUSH
33654: LD_INT 1
33656: EQUAL
33657: IFFALSE 33678
// points := [ 10 , 5 , 3 ] ;
33659: LD_ADDR_VAR 0 9
33663: PUSH
33664: LD_INT 10
33666: PUSH
33667: LD_INT 5
33669: PUSH
33670: LD_INT 3
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33678: LD_VAR 0 6
33682: PPUSH
33683: CALL_OW 257
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 4
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: IN
33702: IFFALSE 33723
// points := [ 3 , 2 , 1 ] ;
33704: LD_ADDR_VAR 0 9
33708: PUSH
33709: LD_INT 3
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33723: LD_VAR 0 6
33727: PPUSH
33728: CALL_OW 257
33732: PUSH
33733: LD_INT 5
33735: EQUAL
33736: IFFALSE 33757
// points := [ 130 , 5 , 2 ] ;
33738: LD_ADDR_VAR 0 9
33742: PUSH
33743: LD_INT 130
33745: PUSH
33746: LD_INT 5
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33757: LD_VAR 0 6
33761: PPUSH
33762: CALL_OW 257
33766: PUSH
33767: LD_INT 8
33769: EQUAL
33770: IFFALSE 33791
// points := [ 35 , 35 , 30 ] ;
33772: LD_ADDR_VAR 0 9
33776: PUSH
33777: LD_INT 35
33779: PUSH
33780: LD_INT 35
33782: PUSH
33783: LD_INT 30
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33791: LD_VAR 0 6
33795: PPUSH
33796: CALL_OW 257
33800: PUSH
33801: LD_INT 9
33803: EQUAL
33804: IFFALSE 33825
// points := [ 20 , 55 , 40 ] ;
33806: LD_ADDR_VAR 0 9
33810: PUSH
33811: LD_INT 20
33813: PUSH
33814: LD_INT 55
33816: PUSH
33817: LD_INT 40
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33825: LD_VAR 0 6
33829: PPUSH
33830: CALL_OW 257
33834: PUSH
33835: LD_INT 12
33837: PUSH
33838: LD_INT 16
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: IN
33845: IFFALSE 33866
// points := [ 5 , 3 , 2 ] ;
33847: LD_ADDR_VAR 0 9
33851: PUSH
33852: LD_INT 5
33854: PUSH
33855: LD_INT 3
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33866: LD_VAR 0 6
33870: PPUSH
33871: CALL_OW 257
33875: PUSH
33876: LD_INT 17
33878: EQUAL
33879: IFFALSE 33900
// points := [ 100 , 50 , 75 ] ;
33881: LD_ADDR_VAR 0 9
33885: PUSH
33886: LD_INT 100
33888: PUSH
33889: LD_INT 50
33891: PUSH
33892: LD_INT 75
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33900: LD_VAR 0 6
33904: PPUSH
33905: CALL_OW 257
33909: PUSH
33910: LD_INT 15
33912: EQUAL
33913: IFFALSE 33934
// points := [ 10 , 5 , 3 ] ;
33915: LD_ADDR_VAR 0 9
33919: PUSH
33920: LD_INT 10
33922: PUSH
33923: LD_INT 5
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33934: LD_VAR 0 6
33938: PPUSH
33939: CALL_OW 257
33943: PUSH
33944: LD_INT 14
33946: EQUAL
33947: IFFALSE 33968
// points := [ 10 , 0 , 0 ] ;
33949: LD_ADDR_VAR 0 9
33953: PUSH
33954: LD_INT 10
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33968: LD_VAR 0 6
33972: PPUSH
33973: CALL_OW 257
33977: PUSH
33978: LD_INT 11
33980: EQUAL
33981: IFFALSE 34002
// points := [ 30 , 10 , 5 ] ;
33983: LD_ADDR_VAR 0 9
33987: PUSH
33988: LD_INT 30
33990: PUSH
33991: LD_INT 10
33993: PUSH
33994: LD_INT 5
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34002: LD_VAR 0 1
34006: PPUSH
34007: LD_INT 5
34009: PPUSH
34010: CALL_OW 321
34014: PUSH
34015: LD_INT 2
34017: EQUAL
34018: IFFALSE 34035
// bpoints := bpoints * 1.8 ;
34020: LD_ADDR_VAR 0 10
34024: PUSH
34025: LD_VAR 0 10
34029: PUSH
34030: LD_REAL  1.80000000000000E+0000
34033: MUL
34034: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34035: LD_VAR 0 6
34039: PPUSH
34040: CALL_OW 257
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 4
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: IN
34063: IFFALSE 34083
34065: PUSH
34066: LD_VAR 0 1
34070: PPUSH
34071: LD_INT 51
34073: PPUSH
34074: CALL_OW 321
34078: PUSH
34079: LD_INT 2
34081: EQUAL
34082: AND
34083: IFFALSE 34100
// bpoints := bpoints * 1.2 ;
34085: LD_ADDR_VAR 0 10
34089: PUSH
34090: LD_VAR 0 10
34094: PUSH
34095: LD_REAL  1.20000000000000E+0000
34098: MUL
34099: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34100: LD_VAR 0 6
34104: PPUSH
34105: CALL_OW 257
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 7
34115: PUSH
34116: LD_INT 9
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: LIST
34123: IN
34124: IFFALSE 34144
34126: PUSH
34127: LD_VAR 0 1
34131: PPUSH
34132: LD_INT 52
34134: PPUSH
34135: CALL_OW 321
34139: PUSH
34140: LD_INT 2
34142: EQUAL
34143: AND
34144: IFFALSE 34161
// bpoints := bpoints * 1.5 ;
34146: LD_ADDR_VAR 0 10
34150: PUSH
34151: LD_VAR 0 10
34155: PUSH
34156: LD_REAL  1.50000000000000E+0000
34159: MUL
34160: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34161: LD_VAR 0 1
34165: PPUSH
34166: LD_INT 66
34168: PPUSH
34169: CALL_OW 321
34173: PUSH
34174: LD_INT 2
34176: EQUAL
34177: IFFALSE 34194
// bpoints := bpoints * 1.1 ;
34179: LD_ADDR_VAR 0 10
34183: PUSH
34184: LD_VAR 0 10
34188: PUSH
34189: LD_REAL  1.10000000000000E+0000
34192: MUL
34193: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34194: LD_ADDR_VAR 0 10
34198: PUSH
34199: LD_VAR 0 10
34203: PUSH
34204: LD_VAR 0 6
34208: PPUSH
34209: LD_INT 1
34211: PPUSH
34212: CALL_OW 259
34216: PUSH
34217: LD_REAL  1.15000000000000E+0000
34220: MUL
34221: MUL
34222: ST_TO_ADDR
// end ; unit_vehicle :
34223: GO 35053
34225: LD_INT 2
34227: DOUBLE
34228: EQUAL
34229: IFTRUE 34233
34231: GO 35041
34233: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 264
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 42
34249: PUSH
34250: LD_INT 24
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: IN
34258: IFFALSE 34279
// points := [ 25 , 5 , 3 ] ;
34260: LD_ADDR_VAR 0 9
34264: PUSH
34265: LD_INT 25
34267: PUSH
34268: LD_INT 5
34270: PUSH
34271: LD_INT 3
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34279: LD_VAR 0 6
34283: PPUSH
34284: CALL_OW 264
34288: PUSH
34289: LD_INT 4
34291: PUSH
34292: LD_INT 43
34294: PUSH
34295: LD_INT 25
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: IN
34303: IFFALSE 34324
// points := [ 40 , 15 , 5 ] ;
34305: LD_ADDR_VAR 0 9
34309: PUSH
34310: LD_INT 40
34312: PUSH
34313: LD_INT 15
34315: PUSH
34316: LD_INT 5
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34324: LD_VAR 0 6
34328: PPUSH
34329: CALL_OW 264
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 23
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: IN
34344: IFFALSE 34365
// points := [ 7 , 25 , 8 ] ;
34346: LD_ADDR_VAR 0 9
34350: PUSH
34351: LD_INT 7
34353: PUSH
34354: LD_INT 25
34356: PUSH
34357: LD_INT 8
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34365: LD_VAR 0 6
34369: PPUSH
34370: CALL_OW 264
34374: PUSH
34375: LD_INT 5
34377: PUSH
34378: LD_INT 27
34380: PUSH
34381: LD_INT 44
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: IN
34389: IFFALSE 34410
// points := [ 14 , 50 , 16 ] ;
34391: LD_ADDR_VAR 0 9
34395: PUSH
34396: LD_INT 14
34398: PUSH
34399: LD_INT 50
34401: PUSH
34402: LD_INT 16
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34410: LD_VAR 0 6
34414: PPUSH
34415: CALL_OW 264
34419: PUSH
34420: LD_INT 6
34422: PUSH
34423: LD_INT 46
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: IN
34430: IFFALSE 34451
// points := [ 32 , 120 , 70 ] ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_INT 32
34439: PUSH
34440: LD_INT 120
34442: PUSH
34443: LD_INT 70
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 264
34460: PUSH
34461: LD_INT 7
34463: PUSH
34464: LD_INT 28
34466: PUSH
34467: LD_INT 45
34469: PUSH
34470: LD_INT 92
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: IN
34479: IFFALSE 34500
// points := [ 35 , 20 , 45 ] ;
34481: LD_ADDR_VAR 0 9
34485: PUSH
34486: LD_INT 35
34488: PUSH
34489: LD_INT 20
34491: PUSH
34492: LD_INT 45
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34500: LD_VAR 0 6
34504: PPUSH
34505: CALL_OW 264
34509: PUSH
34510: LD_INT 47
34512: PUSH
34513: EMPTY
34514: LIST
34515: IN
34516: IFFALSE 34537
// points := [ 67 , 45 , 75 ] ;
34518: LD_ADDR_VAR 0 9
34522: PUSH
34523: LD_INT 67
34525: PUSH
34526: LD_INT 45
34528: PUSH
34529: LD_INT 75
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34537: LD_VAR 0 6
34541: PPUSH
34542: CALL_OW 264
34546: PUSH
34547: LD_INT 26
34549: PUSH
34550: EMPTY
34551: LIST
34552: IN
34553: IFFALSE 34574
// points := [ 120 , 30 , 80 ] ;
34555: LD_ADDR_VAR 0 9
34559: PUSH
34560: LD_INT 120
34562: PUSH
34563: LD_INT 30
34565: PUSH
34566: LD_INT 80
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: LIST
34573: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34574: LD_VAR 0 6
34578: PPUSH
34579: CALL_OW 264
34583: PUSH
34584: LD_INT 22
34586: PUSH
34587: EMPTY
34588: LIST
34589: IN
34590: IFFALSE 34611
// points := [ 40 , 1 , 1 ] ;
34592: LD_ADDR_VAR 0 9
34596: PUSH
34597: LD_INT 40
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34611: LD_VAR 0 6
34615: PPUSH
34616: CALL_OW 264
34620: PUSH
34621: LD_INT 29
34623: PUSH
34624: EMPTY
34625: LIST
34626: IN
34627: IFFALSE 34648
// points := [ 70 , 200 , 400 ] ;
34629: LD_ADDR_VAR 0 9
34633: PUSH
34634: LD_INT 70
34636: PUSH
34637: LD_INT 200
34639: PUSH
34640: LD_INT 400
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34648: LD_VAR 0 6
34652: PPUSH
34653: CALL_OW 264
34657: PUSH
34658: LD_INT 14
34660: PUSH
34661: LD_INT 53
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: IN
34668: IFFALSE 34689
// points := [ 40 , 10 , 20 ] ;
34670: LD_ADDR_VAR 0 9
34674: PUSH
34675: LD_INT 40
34677: PUSH
34678: LD_INT 10
34680: PUSH
34681: LD_INT 20
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: LIST
34688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34689: LD_VAR 0 6
34693: PPUSH
34694: CALL_OW 264
34698: PUSH
34699: LD_INT 9
34701: PUSH
34702: EMPTY
34703: LIST
34704: IN
34705: IFFALSE 34726
// points := [ 5 , 70 , 20 ] ;
34707: LD_ADDR_VAR 0 9
34711: PUSH
34712: LD_INT 5
34714: PUSH
34715: LD_INT 70
34717: PUSH
34718: LD_INT 20
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34726: LD_VAR 0 6
34730: PPUSH
34731: CALL_OW 264
34735: PUSH
34736: LD_INT 10
34738: PUSH
34739: EMPTY
34740: LIST
34741: IN
34742: IFFALSE 34763
// points := [ 35 , 110 , 70 ] ;
34744: LD_ADDR_VAR 0 9
34748: PUSH
34749: LD_INT 35
34751: PUSH
34752: LD_INT 110
34754: PUSH
34755: LD_INT 70
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34763: LD_VAR 0 6
34767: PPUSH
34768: CALL_OW 265
34772: PUSH
34773: LD_INT 25
34775: EQUAL
34776: IFFALSE 34797
// points := [ 80 , 65 , 100 ] ;
34778: LD_ADDR_VAR 0 9
34782: PUSH
34783: LD_INT 80
34785: PUSH
34786: LD_INT 65
34788: PUSH
34789: LD_INT 100
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34797: LD_VAR 0 6
34801: PPUSH
34802: CALL_OW 263
34806: PUSH
34807: LD_INT 1
34809: EQUAL
34810: IFFALSE 34845
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34812: LD_ADDR_VAR 0 10
34816: PUSH
34817: LD_VAR 0 10
34821: PUSH
34822: LD_VAR 0 6
34826: PPUSH
34827: CALL_OW 311
34831: PPUSH
34832: LD_INT 3
34834: PPUSH
34835: CALL_OW 259
34839: PUSH
34840: LD_INT 4
34842: MUL
34843: MUL
34844: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34845: LD_VAR 0 6
34849: PPUSH
34850: CALL_OW 263
34854: PUSH
34855: LD_INT 2
34857: EQUAL
34858: IFFALSE 34909
// begin j := IsControledBy ( i ) ;
34860: LD_ADDR_VAR 0 7
34864: PUSH
34865: LD_VAR 0 6
34869: PPUSH
34870: CALL_OW 312
34874: ST_TO_ADDR
// if j then
34875: LD_VAR 0 7
34879: IFFALSE 34909
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34881: LD_ADDR_VAR 0 10
34885: PUSH
34886: LD_VAR 0 10
34890: PUSH
34891: LD_VAR 0 7
34895: PPUSH
34896: LD_INT 3
34898: PPUSH
34899: CALL_OW 259
34903: PUSH
34904: LD_INT 3
34906: MUL
34907: MUL
34908: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34909: LD_VAR 0 6
34913: PPUSH
34914: CALL_OW 264
34918: PUSH
34919: LD_INT 5
34921: PUSH
34922: LD_INT 6
34924: PUSH
34925: LD_INT 46
34927: PUSH
34928: LD_INT 44
34930: PUSH
34931: LD_INT 47
34933: PUSH
34934: LD_INT 45
34936: PUSH
34937: LD_INT 28
34939: PUSH
34940: LD_INT 7
34942: PUSH
34943: LD_INT 27
34945: PUSH
34946: LD_INT 29
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: IN
34961: IFFALSE 34981
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: LD_INT 52
34971: PPUSH
34972: CALL_OW 321
34976: PUSH
34977: LD_INT 2
34979: EQUAL
34980: AND
34981: IFFALSE 34998
// bpoints := bpoints * 1.2 ;
34983: LD_ADDR_VAR 0 10
34987: PUSH
34988: LD_VAR 0 10
34992: PUSH
34993: LD_REAL  1.20000000000000E+0000
34996: MUL
34997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34998: LD_VAR 0 6
35002: PPUSH
35003: CALL_OW 264
35007: PUSH
35008: LD_INT 6
35010: PUSH
35011: LD_INT 46
35013: PUSH
35014: LD_INT 47
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: IN
35022: IFFALSE 35039
// bpoints := bpoints * 1.2 ;
35024: LD_ADDR_VAR 0 10
35028: PUSH
35029: LD_VAR 0 10
35033: PUSH
35034: LD_REAL  1.20000000000000E+0000
35037: MUL
35038: ST_TO_ADDR
// end ; unit_building :
35039: GO 35053
35041: LD_INT 3
35043: DOUBLE
35044: EQUAL
35045: IFTRUE 35049
35047: GO 35052
35049: POP
// ; end ;
35050: GO 35053
35052: POP
// for j = 1 to 3 do
35053: LD_ADDR_VAR 0 7
35057: PUSH
35058: DOUBLE
35059: LD_INT 1
35061: DEC
35062: ST_TO_ADDR
35063: LD_INT 3
35065: PUSH
35066: FOR_TO
35067: IFFALSE 35120
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35069: LD_ADDR_VAR 0 5
35073: PUSH
35074: LD_VAR 0 5
35078: PPUSH
35079: LD_VAR 0 7
35083: PPUSH
35084: LD_VAR 0 5
35088: PUSH
35089: LD_VAR 0 7
35093: ARRAY
35094: PUSH
35095: LD_VAR 0 9
35099: PUSH
35100: LD_VAR 0 7
35104: ARRAY
35105: PUSH
35106: LD_VAR 0 10
35110: MUL
35111: PLUS
35112: PPUSH
35113: CALL_OW 1
35117: ST_TO_ADDR
35118: GO 35066
35120: POP
35121: POP
// end ;
35122: GO 33595
35124: POP
35125: POP
// result := Replace ( result , 4 , tmp ) ;
35126: LD_ADDR_VAR 0 5
35130: PUSH
35131: LD_VAR 0 5
35135: PPUSH
35136: LD_INT 4
35138: PPUSH
35139: LD_VAR 0 8
35143: PPUSH
35144: CALL_OW 1
35148: ST_TO_ADDR
// end ;
35149: LD_VAR 0 5
35153: RET
// export function DangerAtRange ( unit , range ) ; begin
35154: LD_INT 0
35156: PPUSH
// if not unit then
35157: LD_VAR 0 1
35161: NOT
35162: IFFALSE 35166
// exit ;
35164: GO 35211
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_VAR 0 1
35175: PPUSH
35176: CALL_OW 255
35180: PPUSH
35181: LD_VAR 0 1
35185: PPUSH
35186: CALL_OW 250
35190: PPUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 251
35200: PPUSH
35201: LD_VAR 0 2
35205: PPUSH
35206: CALL 33445 0 4
35210: ST_TO_ADDR
// end ;
35211: LD_VAR 0 3
35215: RET
// export function DangerInArea ( side , area ) ; begin
35216: LD_INT 0
35218: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_VAR 0 2
35228: PPUSH
35229: LD_INT 81
35231: PUSH
35232: LD_VAR 0 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PPUSH
35241: CALL_OW 70
35245: ST_TO_ADDR
// end ;
35246: LD_VAR 0 3
35250: RET
// export function IsExtension ( b ) ; begin
35251: LD_INT 0
35253: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35254: LD_ADDR_VAR 0 2
35258: PUSH
35259: LD_VAR 0 1
35263: PUSH
35264: LD_INT 23
35266: PUSH
35267: LD_INT 20
35269: PUSH
35270: LD_INT 22
35272: PUSH
35273: LD_INT 17
35275: PUSH
35276: LD_INT 24
35278: PUSH
35279: LD_INT 21
35281: PUSH
35282: LD_INT 19
35284: PUSH
35285: LD_INT 16
35287: PUSH
35288: LD_INT 25
35290: PUSH
35291: LD_INT 18
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: IN
35306: ST_TO_ADDR
// end ;
35307: LD_VAR 0 2
35311: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35312: LD_INT 0
35314: PPUSH
35315: PPUSH
35316: PPUSH
// result := [ ] ;
35317: LD_ADDR_VAR 0 4
35321: PUSH
35322: EMPTY
35323: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35324: LD_ADDR_VAR 0 5
35328: PUSH
35329: LD_VAR 0 2
35333: PPUSH
35334: LD_INT 21
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PPUSH
35344: CALL_OW 70
35348: ST_TO_ADDR
// if not tmp then
35349: LD_VAR 0 5
35353: NOT
35354: IFFALSE 35358
// exit ;
35356: GO 35422
// if checkLink then
35358: LD_VAR 0 3
35362: IFFALSE 35412
// begin for i in tmp do
35364: LD_ADDR_VAR 0 6
35368: PUSH
35369: LD_VAR 0 5
35373: PUSH
35374: FOR_IN
35375: IFFALSE 35410
// if GetBase ( i ) <> base then
35377: LD_VAR 0 6
35381: PPUSH
35382: CALL_OW 274
35386: PUSH
35387: LD_VAR 0 1
35391: NONEQUAL
35392: IFFALSE 35408
// ComLinkToBase ( base , i ) ;
35394: LD_VAR 0 1
35398: PPUSH
35399: LD_VAR 0 6
35403: PPUSH
35404: CALL_OW 169
35408: GO 35374
35410: POP
35411: POP
// end ; result := tmp ;
35412: LD_ADDR_VAR 0 4
35416: PUSH
35417: LD_VAR 0 5
35421: ST_TO_ADDR
// end ;
35422: LD_VAR 0 4
35426: RET
// export function ComComplete ( units , b ) ; var i ; begin
35427: LD_INT 0
35429: PPUSH
35430: PPUSH
// if not units then
35431: LD_VAR 0 1
35435: NOT
35436: IFFALSE 35440
// exit ;
35438: GO 35530
// for i in units do
35440: LD_ADDR_VAR 0 4
35444: PUSH
35445: LD_VAR 0 1
35449: PUSH
35450: FOR_IN
35451: IFFALSE 35528
// if BuildingStatus ( b ) = bs_build then
35453: LD_VAR 0 2
35457: PPUSH
35458: CALL_OW 461
35462: PUSH
35463: LD_INT 1
35465: EQUAL
35466: IFFALSE 35526
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35468: LD_VAR 0 4
35472: PPUSH
35473: LD_STRING h
35475: PUSH
35476: LD_VAR 0 2
35480: PPUSH
35481: CALL_OW 250
35485: PUSH
35486: LD_VAR 0 2
35490: PPUSH
35491: CALL_OW 251
35495: PUSH
35496: LD_VAR 0 2
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: PPUSH
35522: CALL_OW 446
35526: GO 35450
35528: POP
35529: POP
// end ;
35530: LD_VAR 0 3
35534: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35535: LD_INT 0
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35543: LD_VAR 0 1
35547: NOT
35548: IFTRUE 35565
35550: PUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 263
35560: PUSH
35561: LD_INT 2
35563: NONEQUAL
35564: OR
35565: IFFALSE 35569
// exit ;
35567: GO 35885
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35569: LD_ADDR_VAR 0 6
35573: PUSH
35574: LD_INT 22
35576: PUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: CALL_OW 255
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: LD_INT 30
35596: PUSH
35597: LD_INT 36
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 34
35606: PUSH
35607: LD_INT 31
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PPUSH
35623: CALL_OW 69
35627: ST_TO_ADDR
// if not tmp then
35628: LD_VAR 0 6
35632: NOT
35633: IFFALSE 35637
// exit ;
35635: GO 35885
// result := [ ] ;
35637: LD_ADDR_VAR 0 2
35641: PUSH
35642: EMPTY
35643: ST_TO_ADDR
// for i in tmp do
35644: LD_ADDR_VAR 0 3
35648: PUSH
35649: LD_VAR 0 6
35653: PUSH
35654: FOR_IN
35655: IFFALSE 35726
// begin t := UnitsInside ( i ) ;
35657: LD_ADDR_VAR 0 4
35661: PUSH
35662: LD_VAR 0 3
35666: PPUSH
35667: CALL_OW 313
35671: ST_TO_ADDR
// if t then
35672: LD_VAR 0 4
35676: IFFALSE 35724
// for j in t do
35678: LD_ADDR_VAR 0 7
35682: PUSH
35683: LD_VAR 0 4
35687: PUSH
35688: FOR_IN
35689: IFFALSE 35722
// result := Replace ( result , result + 1 , j ) ;
35691: LD_ADDR_VAR 0 2
35695: PUSH
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_INT 1
35708: PLUS
35709: PPUSH
35710: LD_VAR 0 7
35714: PPUSH
35715: CALL_OW 1
35719: ST_TO_ADDR
35720: GO 35688
35722: POP
35723: POP
// end ;
35724: GO 35654
35726: POP
35727: POP
// if not result then
35728: LD_VAR 0 2
35732: NOT
35733: IFFALSE 35737
// exit ;
35735: GO 35885
// mech := result [ 1 ] ;
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: LD_VAR 0 2
35746: PUSH
35747: LD_INT 1
35749: ARRAY
35750: ST_TO_ADDR
// if result > 1 then
35751: LD_VAR 0 2
35755: PUSH
35756: LD_INT 1
35758: GREATER
35759: IFFALSE 35871
// begin for i = 2 to result do
35761: LD_ADDR_VAR 0 3
35765: PUSH
35766: DOUBLE
35767: LD_INT 2
35769: DEC
35770: ST_TO_ADDR
35771: LD_VAR 0 2
35775: PUSH
35776: FOR_TO
35777: IFFALSE 35869
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35779: LD_ADDR_VAR 0 4
35783: PUSH
35784: LD_VAR 0 2
35788: PUSH
35789: LD_VAR 0 3
35793: ARRAY
35794: PPUSH
35795: LD_INT 3
35797: PPUSH
35798: CALL_OW 259
35802: PUSH
35803: LD_VAR 0 2
35807: PUSH
35808: LD_VAR 0 3
35812: ARRAY
35813: PPUSH
35814: CALL_OW 432
35818: MINUS
35819: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35820: LD_VAR 0 4
35824: PUSH
35825: LD_VAR 0 5
35829: PPUSH
35830: LD_INT 3
35832: PPUSH
35833: CALL_OW 259
35837: PUSH
35838: LD_VAR 0 5
35842: PPUSH
35843: CALL_OW 432
35847: MINUS
35848: GREATEREQUAL
35849: IFFALSE 35867
// mech := result [ i ] ;
35851: LD_ADDR_VAR 0 5
35855: PUSH
35856: LD_VAR 0 2
35860: PUSH
35861: LD_VAR 0 3
35865: ARRAY
35866: ST_TO_ADDR
// end ;
35867: GO 35776
35869: POP
35870: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35871: LD_VAR 0 1
35875: PPUSH
35876: LD_VAR 0 5
35880: PPUSH
35881: CALL_OW 135
// end ;
35885: LD_VAR 0 2
35889: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35890: LD_INT 0
35892: PPUSH
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
// result := [ ] ;
35905: LD_ADDR_VAR 0 7
35909: PUSH
35910: EMPTY
35911: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35912: LD_VAR 0 1
35916: PPUSH
35917: CALL_OW 266
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: IN
35932: NOT
35933: IFFALSE 35937
// exit ;
35935: GO 37577
// if name then
35937: LD_VAR 0 3
35941: IFFALSE 35957
// SetBName ( base_dep , name ) ;
35943: LD_VAR 0 1
35947: PPUSH
35948: LD_VAR 0 3
35952: PPUSH
35953: CALL_OW 500
// base := GetBase ( base_dep ) ;
35957: LD_ADDR_VAR 0 15
35961: PUSH
35962: LD_VAR 0 1
35966: PPUSH
35967: CALL_OW 274
35971: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35972: LD_ADDR_VAR 0 16
35976: PUSH
35977: LD_VAR 0 1
35981: PPUSH
35982: CALL_OW 255
35986: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35987: LD_ADDR_VAR 0 17
35991: PUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: CALL_OW 248
36001: ST_TO_ADDR
// if sources then
36002: LD_VAR 0 5
36006: IFFALSE 36053
// for i = 1 to 3 do
36008: LD_ADDR_VAR 0 8
36012: PUSH
36013: DOUBLE
36014: LD_INT 1
36016: DEC
36017: ST_TO_ADDR
36018: LD_INT 3
36020: PUSH
36021: FOR_TO
36022: IFFALSE 36051
// AddResourceType ( base , i , sources [ i ] ) ;
36024: LD_VAR 0 15
36028: PPUSH
36029: LD_VAR 0 8
36033: PPUSH
36034: LD_VAR 0 5
36038: PUSH
36039: LD_VAR 0 8
36043: ARRAY
36044: PPUSH
36045: CALL_OW 276
36049: GO 36021
36051: POP
36052: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36053: LD_ADDR_VAR 0 18
36057: PUSH
36058: LD_VAR 0 15
36062: PPUSH
36063: LD_VAR 0 2
36067: PPUSH
36068: LD_INT 1
36070: PPUSH
36071: CALL 35312 0 3
36075: ST_TO_ADDR
// InitHc ;
36076: CALL_OW 19
// InitUc ;
36080: CALL_OW 18
// uc_side := side ;
36084: LD_ADDR_OWVAR 20
36088: PUSH
36089: LD_VAR 0 16
36093: ST_TO_ADDR
// uc_nation := nation ;
36094: LD_ADDR_OWVAR 21
36098: PUSH
36099: LD_VAR 0 17
36103: ST_TO_ADDR
// if buildings then
36104: LD_VAR 0 18
36108: IFFALSE 37436
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36110: LD_ADDR_VAR 0 19
36114: PUSH
36115: LD_VAR 0 18
36119: PPUSH
36120: LD_INT 2
36122: PUSH
36123: LD_INT 30
36125: PUSH
36126: LD_INT 29
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 30
36135: PUSH
36136: LD_INT 30
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: PPUSH
36148: CALL_OW 72
36152: ST_TO_ADDR
// if tmp then
36153: LD_VAR 0 19
36157: IFFALSE 36205
// for i in tmp do
36159: LD_ADDR_VAR 0 8
36163: PUSH
36164: LD_VAR 0 19
36168: PUSH
36169: FOR_IN
36170: IFFALSE 36203
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36172: LD_VAR 0 8
36176: PPUSH
36177: CALL_OW 250
36181: PPUSH
36182: LD_VAR 0 8
36186: PPUSH
36187: CALL_OW 251
36191: PPUSH
36192: LD_VAR 0 16
36196: PPUSH
36197: CALL_OW 441
36201: GO 36169
36203: POP
36204: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36205: LD_VAR 0 18
36209: PPUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 30
36215: PUSH
36216: LD_INT 32
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 30
36225: PUSH
36226: LD_INT 33
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PPUSH
36238: CALL_OW 72
36242: IFFALSE 36330
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36244: LD_ADDR_VAR 0 8
36248: PUSH
36249: LD_VAR 0 18
36253: PPUSH
36254: LD_INT 2
36256: PUSH
36257: LD_INT 30
36259: PUSH
36260: LD_INT 32
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 30
36269: PUSH
36270: LD_INT 33
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: PPUSH
36282: CALL_OW 72
36286: PUSH
36287: FOR_IN
36288: IFFALSE 36328
// begin if not GetBWeapon ( i ) then
36290: LD_VAR 0 8
36294: PPUSH
36295: CALL_OW 269
36299: NOT
36300: IFFALSE 36326
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36302: LD_VAR 0 8
36306: PPUSH
36307: LD_VAR 0 8
36311: PPUSH
36312: LD_VAR 0 2
36316: PPUSH
36317: CALL 37582 0 2
36321: PPUSH
36322: CALL_OW 431
// end ;
36326: GO 36287
36328: POP
36329: POP
// end ; for i = 1 to personel do
36330: LD_ADDR_VAR 0 8
36334: PUSH
36335: DOUBLE
36336: LD_INT 1
36338: DEC
36339: ST_TO_ADDR
36340: LD_VAR 0 6
36344: PUSH
36345: FOR_TO
36346: IFFALSE 37416
// begin if i > 4 then
36348: LD_VAR 0 8
36352: PUSH
36353: LD_INT 4
36355: GREATER
36356: IFFALSE 36360
// break ;
36358: GO 37416
// case i of 1 :
36360: LD_VAR 0 8
36364: PUSH
36365: LD_INT 1
36367: DOUBLE
36368: EQUAL
36369: IFTRUE 36373
36371: GO 36453
36373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36374: LD_ADDR_VAR 0 12
36378: PUSH
36379: LD_VAR 0 18
36383: PPUSH
36384: LD_INT 22
36386: PUSH
36387: LD_VAR 0 16
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 58
36398: PUSH
36399: EMPTY
36400: LIST
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: LD_INT 30
36407: PUSH
36408: LD_INT 32
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 30
36417: PUSH
36418: LD_INT 4
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 30
36427: PUSH
36428: LD_INT 5
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: LIST
36445: PPUSH
36446: CALL_OW 72
36450: ST_TO_ADDR
36451: GO 36675
36453: LD_INT 2
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36461
36459: GO 36523
36461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36462: LD_ADDR_VAR 0 12
36466: PUSH
36467: LD_VAR 0 18
36471: PPUSH
36472: LD_INT 22
36474: PUSH
36475: LD_VAR 0 16
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 30
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 30
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PPUSH
36516: CALL_OW 72
36520: ST_TO_ADDR
36521: GO 36675
36523: LD_INT 3
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36531
36529: GO 36593
36531: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36532: LD_ADDR_VAR 0 12
36536: PUSH
36537: LD_VAR 0 18
36541: PPUSH
36542: LD_INT 22
36544: PUSH
36545: LD_VAR 0 16
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: LD_INT 30
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 30
36569: PUSH
36570: LD_INT 3
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PPUSH
36586: CALL_OW 72
36590: ST_TO_ADDR
36591: GO 36675
36593: LD_INT 4
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36674
36601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36602: LD_ADDR_VAR 0 12
36606: PUSH
36607: LD_VAR 0 18
36611: PPUSH
36612: LD_INT 22
36614: PUSH
36615: LD_VAR 0 16
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 30
36629: PUSH
36630: LD_INT 6
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 30
36639: PUSH
36640: LD_INT 7
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 30
36649: PUSH
36650: LD_INT 8
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PPUSH
36667: CALL_OW 72
36671: ST_TO_ADDR
36672: GO 36675
36674: POP
// if i = 1 then
36675: LD_VAR 0 8
36679: PUSH
36680: LD_INT 1
36682: EQUAL
36683: IFFALSE 36794
// begin tmp := [ ] ;
36685: LD_ADDR_VAR 0 19
36689: PUSH
36690: EMPTY
36691: ST_TO_ADDR
// for j in f do
36692: LD_ADDR_VAR 0 9
36696: PUSH
36697: LD_VAR 0 12
36701: PUSH
36702: FOR_IN
36703: IFFALSE 36776
// if GetBType ( j ) = b_bunker then
36705: LD_VAR 0 9
36709: PPUSH
36710: CALL_OW 266
36714: PUSH
36715: LD_INT 32
36717: EQUAL
36718: IFFALSE 36745
// tmp := Insert ( tmp , 1 , j ) else
36720: LD_ADDR_VAR 0 19
36724: PUSH
36725: LD_VAR 0 19
36729: PPUSH
36730: LD_INT 1
36732: PPUSH
36733: LD_VAR 0 9
36737: PPUSH
36738: CALL_OW 2
36742: ST_TO_ADDR
36743: GO 36774
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36745: LD_ADDR_VAR 0 19
36749: PUSH
36750: LD_VAR 0 19
36754: PPUSH
36755: LD_VAR 0 19
36759: PUSH
36760: LD_INT 1
36762: PLUS
36763: PPUSH
36764: LD_VAR 0 9
36768: PPUSH
36769: CALL_OW 2
36773: ST_TO_ADDR
36774: GO 36702
36776: POP
36777: POP
// if tmp then
36778: LD_VAR 0 19
36782: IFFALSE 36794
// f := tmp ;
36784: LD_ADDR_VAR 0 12
36788: PUSH
36789: LD_VAR 0 19
36793: ST_TO_ADDR
// end ; x := personel [ i ] ;
36794: LD_ADDR_VAR 0 13
36798: PUSH
36799: LD_VAR 0 6
36803: PUSH
36804: LD_VAR 0 8
36808: ARRAY
36809: ST_TO_ADDR
// if x = - 1 then
36810: LD_VAR 0 13
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: EQUAL
36819: IFFALSE 37030
// begin for j in f do
36821: LD_ADDR_VAR 0 9
36825: PUSH
36826: LD_VAR 0 12
36830: PUSH
36831: FOR_IN
36832: IFFALSE 37026
// repeat InitHc ;
36834: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36838: LD_VAR 0 9
36842: PPUSH
36843: CALL_OW 266
36847: PUSH
36848: LD_INT 5
36850: EQUAL
36851: IFFALSE 36921
// begin if UnitsInside ( j ) < 3 then
36853: LD_VAR 0 9
36857: PPUSH
36858: CALL_OW 313
36862: PUSH
36863: LD_INT 3
36865: LESS
36866: IFFALSE 36902
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36868: LD_INT 0
36870: PPUSH
36871: LD_INT 5
36873: PUSH
36874: LD_INT 8
36876: PUSH
36877: LD_INT 9
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: PUSH
36885: LD_VAR 0 17
36889: ARRAY
36890: PPUSH
36891: LD_VAR 0 4
36895: PPUSH
36896: CALL_OW 380
36900: GO 36919
// PrepareHuman ( false , i , skill ) ;
36902: LD_INT 0
36904: PPUSH
36905: LD_VAR 0 8
36909: PPUSH
36910: LD_VAR 0 4
36914: PPUSH
36915: CALL_OW 380
// end else
36919: GO 36938
// PrepareHuman ( false , i , skill ) ;
36921: LD_INT 0
36923: PPUSH
36924: LD_VAR 0 8
36928: PPUSH
36929: LD_VAR 0 4
36933: PPUSH
36934: CALL_OW 380
// un := CreateHuman ;
36938: LD_ADDR_VAR 0 14
36942: PUSH
36943: CALL_OW 44
36947: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36948: LD_ADDR_VAR 0 7
36952: PUSH
36953: LD_VAR 0 7
36957: PPUSH
36958: LD_INT 1
36960: PPUSH
36961: LD_VAR 0 14
36965: PPUSH
36966: CALL_OW 2
36970: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36971: LD_VAR 0 14
36975: PPUSH
36976: LD_VAR 0 9
36980: PPUSH
36981: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36985: LD_VAR 0 9
36989: PPUSH
36990: CALL_OW 313
36994: PUSH
36995: LD_INT 6
36997: EQUAL
36998: IFTRUE 37022
37000: PUSH
37001: LD_VAR 0 9
37005: PPUSH
37006: CALL_OW 266
37010: PUSH
37011: LD_INT 32
37013: PUSH
37014: LD_INT 31
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: IN
37021: OR
37022: IFFALSE 36834
37024: GO 36831
37026: POP
37027: POP
// end else
37028: GO 37414
// for j = 1 to x do
37030: LD_ADDR_VAR 0 9
37034: PUSH
37035: DOUBLE
37036: LD_INT 1
37038: DEC
37039: ST_TO_ADDR
37040: LD_VAR 0 13
37044: PUSH
37045: FOR_TO
37046: IFFALSE 37412
// begin InitHc ;
37048: CALL_OW 19
// if not f then
37052: LD_VAR 0 12
37056: NOT
37057: IFFALSE 37146
// begin PrepareHuman ( false , i , skill ) ;
37059: LD_INT 0
37061: PPUSH
37062: LD_VAR 0 8
37066: PPUSH
37067: LD_VAR 0 4
37071: PPUSH
37072: CALL_OW 380
// un := CreateHuman ;
37076: LD_ADDR_VAR 0 14
37080: PUSH
37081: CALL_OW 44
37085: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37086: LD_ADDR_VAR 0 7
37090: PUSH
37091: LD_VAR 0 7
37095: PPUSH
37096: LD_INT 1
37098: PPUSH
37099: LD_VAR 0 14
37103: PPUSH
37104: CALL_OW 2
37108: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37109: LD_VAR 0 14
37113: PPUSH
37114: LD_VAR 0 1
37118: PPUSH
37119: CALL_OW 250
37123: PPUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: CALL_OW 251
37133: PPUSH
37134: LD_INT 10
37136: PPUSH
37137: LD_INT 0
37139: PPUSH
37140: CALL_OW 50
// continue ;
37144: GO 37045
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37146: LD_VAR 0 12
37150: PUSH
37151: LD_INT 1
37153: ARRAY
37154: PPUSH
37155: CALL_OW 313
37159: IFFALSE 37187
37161: PUSH
37162: LD_VAR 0 12
37166: PUSH
37167: LD_INT 1
37169: ARRAY
37170: PPUSH
37171: CALL_OW 266
37175: PUSH
37176: LD_INT 32
37178: PUSH
37179: LD_INT 31
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: IN
37186: AND
37187: IFTRUE 37208
37189: PUSH
37190: LD_VAR 0 12
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: CALL_OW 313
37203: PUSH
37204: LD_INT 6
37206: EQUAL
37207: OR
37208: IFFALSE 37228
// f := Delete ( f , 1 ) ;
37210: LD_ADDR_VAR 0 12
37214: PUSH
37215: LD_VAR 0 12
37219: PPUSH
37220: LD_INT 1
37222: PPUSH
37223: CALL_OW 3
37227: ST_TO_ADDR
// if not f then
37228: LD_VAR 0 12
37232: NOT
37233: IFFALSE 37251
// begin x := x + 2 ;
37235: LD_ADDR_VAR 0 13
37239: PUSH
37240: LD_VAR 0 13
37244: PUSH
37245: LD_INT 2
37247: PLUS
37248: ST_TO_ADDR
// continue ;
37249: GO 37045
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37251: LD_VAR 0 12
37255: PUSH
37256: LD_INT 1
37258: ARRAY
37259: PPUSH
37260: CALL_OW 266
37264: PUSH
37265: LD_INT 5
37267: EQUAL
37268: IFFALSE 37342
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37270: LD_VAR 0 12
37274: PUSH
37275: LD_INT 1
37277: ARRAY
37278: PPUSH
37279: CALL_OW 313
37283: PUSH
37284: LD_INT 3
37286: LESS
37287: IFFALSE 37323
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37289: LD_INT 0
37291: PPUSH
37292: LD_INT 5
37294: PUSH
37295: LD_INT 8
37297: PUSH
37298: LD_INT 9
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: PUSH
37306: LD_VAR 0 17
37310: ARRAY
37311: PPUSH
37312: LD_VAR 0 4
37316: PPUSH
37317: CALL_OW 380
37321: GO 37340
// PrepareHuman ( false , i , skill ) ;
37323: LD_INT 0
37325: PPUSH
37326: LD_VAR 0 8
37330: PPUSH
37331: LD_VAR 0 4
37335: PPUSH
37336: CALL_OW 380
// end else
37340: GO 37359
// PrepareHuman ( false , i , skill ) ;
37342: LD_INT 0
37344: PPUSH
37345: LD_VAR 0 8
37349: PPUSH
37350: LD_VAR 0 4
37354: PPUSH
37355: CALL_OW 380
// un := CreateHuman ;
37359: LD_ADDR_VAR 0 14
37363: PUSH
37364: CALL_OW 44
37368: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37369: LD_ADDR_VAR 0 7
37373: PUSH
37374: LD_VAR 0 7
37378: PPUSH
37379: LD_INT 1
37381: PPUSH
37382: LD_VAR 0 14
37386: PPUSH
37387: CALL_OW 2
37391: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37392: LD_VAR 0 14
37396: PPUSH
37397: LD_VAR 0 12
37401: PUSH
37402: LD_INT 1
37404: ARRAY
37405: PPUSH
37406: CALL_OW 52
// end ;
37410: GO 37045
37412: POP
37413: POP
// end ;
37414: GO 36345
37416: POP
37417: POP
// result := result ^ buildings ;
37418: LD_ADDR_VAR 0 7
37422: PUSH
37423: LD_VAR 0 7
37427: PUSH
37428: LD_VAR 0 18
37432: ADD
37433: ST_TO_ADDR
// end else
37434: GO 37577
// begin for i = 1 to personel do
37436: LD_ADDR_VAR 0 8
37440: PUSH
37441: DOUBLE
37442: LD_INT 1
37444: DEC
37445: ST_TO_ADDR
37446: LD_VAR 0 6
37450: PUSH
37451: FOR_TO
37452: IFFALSE 37575
// begin if i > 4 then
37454: LD_VAR 0 8
37458: PUSH
37459: LD_INT 4
37461: GREATER
37462: IFFALSE 37466
// break ;
37464: GO 37575
// x := personel [ i ] ;
37466: LD_ADDR_VAR 0 13
37470: PUSH
37471: LD_VAR 0 6
37475: PUSH
37476: LD_VAR 0 8
37480: ARRAY
37481: ST_TO_ADDR
// if x = - 1 then
37482: LD_VAR 0 13
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: EQUAL
37491: IFFALSE 37495
// continue ;
37493: GO 37451
// PrepareHuman ( false , i , skill ) ;
37495: LD_INT 0
37497: PPUSH
37498: LD_VAR 0 8
37502: PPUSH
37503: LD_VAR 0 4
37507: PPUSH
37508: CALL_OW 380
// un := CreateHuman ;
37512: LD_ADDR_VAR 0 14
37516: PUSH
37517: CALL_OW 44
37521: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37522: LD_VAR 0 14
37526: PPUSH
37527: LD_VAR 0 1
37531: PPUSH
37532: CALL_OW 250
37536: PPUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 251
37546: PPUSH
37547: LD_INT 10
37549: PPUSH
37550: LD_INT 0
37552: PPUSH
37553: CALL_OW 50
// result := result ^ un ;
37557: LD_ADDR_VAR 0 7
37561: PUSH
37562: LD_VAR 0 7
37566: PUSH
37567: LD_VAR 0 14
37571: ADD
37572: ST_TO_ADDR
// end ;
37573: GO 37451
37575: POP
37576: POP
// end ; end ;
37577: LD_VAR 0 7
37581: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37582: LD_INT 0
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
// result := false ;
37600: LD_ADDR_VAR 0 3
37604: PUSH
37605: LD_INT 0
37607: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37608: LD_VAR 0 1
37612: NOT
37613: IFTRUE 37638
37615: PUSH
37616: LD_VAR 0 1
37620: PPUSH
37621: CALL_OW 266
37625: PUSH
37626: LD_INT 32
37628: PUSH
37629: LD_INT 33
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: IN
37636: NOT
37637: OR
37638: IFFALSE 37642
// exit ;
37640: GO 38777
// nat := GetNation ( tower ) ;
37642: LD_ADDR_VAR 0 12
37646: PUSH
37647: LD_VAR 0 1
37651: PPUSH
37652: CALL_OW 248
37656: ST_TO_ADDR
// side := GetSide ( tower ) ;
37657: LD_ADDR_VAR 0 16
37661: PUSH
37662: LD_VAR 0 1
37666: PPUSH
37667: CALL_OW 255
37671: ST_TO_ADDR
// x := GetX ( tower ) ;
37672: LD_ADDR_VAR 0 10
37676: PUSH
37677: LD_VAR 0 1
37681: PPUSH
37682: CALL_OW 250
37686: ST_TO_ADDR
// y := GetY ( tower ) ;
37687: LD_ADDR_VAR 0 11
37691: PUSH
37692: LD_VAR 0 1
37696: PPUSH
37697: CALL_OW 251
37701: ST_TO_ADDR
// if not x or not y then
37702: LD_VAR 0 10
37706: NOT
37707: IFTRUE 37716
37709: PUSH
37710: LD_VAR 0 11
37714: NOT
37715: OR
37716: IFFALSE 37720
// exit ;
37718: GO 38777
// weapon := 0 ;
37720: LD_ADDR_VAR 0 18
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
// fac_list := [ ] ;
37728: LD_ADDR_VAR 0 17
37732: PUSH
37733: EMPTY
37734: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37735: LD_ADDR_VAR 0 6
37739: PUSH
37740: LD_VAR 0 1
37744: PPUSH
37745: CALL_OW 274
37749: PPUSH
37750: LD_VAR 0 2
37754: PPUSH
37755: LD_INT 0
37757: PPUSH
37758: CALL 35312 0 3
37762: PPUSH
37763: LD_INT 30
37765: PUSH
37766: LD_INT 3
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PPUSH
37773: CALL_OW 72
37777: ST_TO_ADDR
// if not factories then
37778: LD_VAR 0 6
37782: NOT
37783: IFFALSE 37787
// exit ;
37785: GO 38777
// for i in factories do
37787: LD_ADDR_VAR 0 8
37791: PUSH
37792: LD_VAR 0 6
37796: PUSH
37797: FOR_IN
37798: IFFALSE 37823
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37800: LD_ADDR_VAR 0 17
37804: PUSH
37805: LD_VAR 0 17
37809: PUSH
37810: LD_VAR 0 8
37814: PPUSH
37815: CALL_OW 478
37819: UNION
37820: ST_TO_ADDR
37821: GO 37797
37823: POP
37824: POP
// if not fac_list then
37825: LD_VAR 0 17
37829: NOT
37830: IFFALSE 37834
// exit ;
37832: GO 38777
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37834: LD_ADDR_VAR 0 5
37838: PUSH
37839: LD_INT 4
37841: PUSH
37842: LD_INT 5
37844: PUSH
37845: LD_INT 9
37847: PUSH
37848: LD_INT 10
37850: PUSH
37851: LD_INT 6
37853: PUSH
37854: LD_INT 7
37856: PUSH
37857: LD_INT 11
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 27
37871: PUSH
37872: LD_INT 28
37874: PUSH
37875: LD_INT 26
37877: PUSH
37878: LD_INT 30
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 43
37889: PUSH
37890: LD_INT 44
37892: PUSH
37893: LD_INT 46
37895: PUSH
37896: LD_INT 45
37898: PUSH
37899: LD_INT 47
37901: PUSH
37902: LD_INT 49
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: PUSH
37918: LD_VAR 0 12
37922: ARRAY
37923: ST_TO_ADDR
// list := list isect fac_list ;
37924: LD_ADDR_VAR 0 5
37928: PUSH
37929: LD_VAR 0 5
37933: PUSH
37934: LD_VAR 0 17
37938: ISECT
37939: ST_TO_ADDR
// if not list then
37940: LD_VAR 0 5
37944: NOT
37945: IFFALSE 37949
// exit ;
37947: GO 38777
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37949: LD_VAR 0 12
37953: PUSH
37954: LD_INT 3
37956: EQUAL
37957: IFFALSE 37969
37959: PUSH
37960: LD_INT 49
37962: PUSH
37963: LD_VAR 0 5
37967: IN
37968: AND
37969: IFFALSE 37989
37971: PUSH
37972: LD_INT 31
37974: PPUSH
37975: LD_VAR 0 16
37979: PPUSH
37980: CALL_OW 321
37984: PUSH
37985: LD_INT 2
37987: EQUAL
37988: AND
37989: IFFALSE 38049
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37991: LD_INT 22
37993: PUSH
37994: LD_VAR 0 16
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 35
38005: PUSH
38006: LD_INT 49
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 91
38015: PUSH
38016: LD_VAR 0 1
38020: PUSH
38021: LD_INT 10
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: PPUSH
38034: CALL_OW 69
38038: NOT
38039: IFFALSE 38049
// weapon := ru_time_lapser ;
38041: LD_ADDR_VAR 0 18
38045: PUSH
38046: LD_INT 49
38048: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38049: LD_VAR 0 12
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: IN
38064: IFFALSE 38088
38066: PUSH
38067: LD_INT 11
38069: PUSH
38070: LD_VAR 0 5
38074: IN
38075: IFTRUE 38087
38077: PUSH
38078: LD_INT 30
38080: PUSH
38081: LD_VAR 0 5
38085: IN
38086: OR
38087: AND
38088: IFFALSE 38108
38090: PUSH
38091: LD_INT 6
38093: PPUSH
38094: LD_VAR 0 16
38098: PPUSH
38099: CALL_OW 321
38103: PUSH
38104: LD_INT 2
38106: EQUAL
38107: AND
38108: IFFALSE 38275
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38110: LD_INT 22
38112: PUSH
38113: LD_VAR 0 16
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: LD_INT 35
38127: PUSH
38128: LD_INT 11
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 35
38137: PUSH
38138: LD_INT 30
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 91
38152: PUSH
38153: LD_VAR 0 1
38157: PUSH
38158: LD_INT 18
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: PPUSH
38171: CALL_OW 69
38175: NOT
38176: IFFALSE 38252
38178: PUSH
38179: LD_INT 22
38181: PUSH
38182: LD_VAR 0 16
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 30
38196: PUSH
38197: LD_INT 32
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 30
38206: PUSH
38207: LD_INT 33
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 91
38221: PUSH
38222: LD_VAR 0 1
38226: PUSH
38227: LD_INT 12
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: PPUSH
38243: CALL_OW 69
38247: PUSH
38248: LD_INT 2
38250: GREATER
38251: AND
38252: IFFALSE 38275
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38254: LD_ADDR_VAR 0 18
38258: PUSH
38259: LD_INT 11
38261: PUSH
38262: LD_INT 30
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_VAR 0 12
38273: ARRAY
38274: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38275: LD_VAR 0 18
38279: NOT
38280: IFFALSE 38300
38282: PUSH
38283: LD_INT 40
38285: PPUSH
38286: LD_VAR 0 16
38290: PPUSH
38291: CALL_OW 321
38295: PUSH
38296: LD_INT 2
38298: EQUAL
38299: AND
38300: IFFALSE 38336
38302: PUSH
38303: LD_INT 7
38305: PUSH
38306: LD_VAR 0 5
38310: IN
38311: IFTRUE 38323
38313: PUSH
38314: LD_INT 28
38316: PUSH
38317: LD_VAR 0 5
38321: IN
38322: OR
38323: IFTRUE 38335
38325: PUSH
38326: LD_INT 45
38328: PUSH
38329: LD_VAR 0 5
38333: IN
38334: OR
38335: AND
38336: IFFALSE 38590
// begin hex := GetHexInfo ( x , y ) ;
38338: LD_ADDR_VAR 0 4
38342: PUSH
38343: LD_VAR 0 10
38347: PPUSH
38348: LD_VAR 0 11
38352: PPUSH
38353: CALL_OW 546
38357: ST_TO_ADDR
// if hex [ 1 ] then
38358: LD_VAR 0 4
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: IFFALSE 38370
// exit ;
38368: GO 38777
// height := hex [ 2 ] ;
38370: LD_ADDR_VAR 0 15
38374: PUSH
38375: LD_VAR 0 4
38379: PUSH
38380: LD_INT 2
38382: ARRAY
38383: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38384: LD_ADDR_VAR 0 14
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: LD_INT 5
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// for i in tmp do
38407: LD_ADDR_VAR 0 8
38411: PUSH
38412: LD_VAR 0 14
38416: PUSH
38417: FOR_IN
38418: IFFALSE 38588
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_VAR 0 10
38429: PPUSH
38430: LD_VAR 0 8
38434: PPUSH
38435: LD_INT 5
38437: PPUSH
38438: CALL_OW 272
38442: PUSH
38443: LD_VAR 0 11
38447: PPUSH
38448: LD_VAR 0 8
38452: PPUSH
38453: LD_INT 5
38455: PPUSH
38456: CALL_OW 273
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38465: LD_VAR 0 9
38469: PUSH
38470: LD_INT 1
38472: ARRAY
38473: PPUSH
38474: LD_VAR 0 9
38478: PUSH
38479: LD_INT 2
38481: ARRAY
38482: PPUSH
38483: CALL_OW 488
38487: IFFALSE 38586
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38489: LD_ADDR_VAR 0 4
38493: PUSH
38494: LD_VAR 0 9
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: PPUSH
38503: LD_VAR 0 9
38507: PUSH
38508: LD_INT 2
38510: ARRAY
38511: PPUSH
38512: CALL_OW 546
38516: ST_TO_ADDR
// if hex [ 1 ] then
38517: LD_VAR 0 4
38521: PUSH
38522: LD_INT 1
38524: ARRAY
38525: IFFALSE 38529
// continue ;
38527: GO 38417
// h := hex [ 2 ] ;
38529: LD_ADDR_VAR 0 13
38533: PUSH
38534: LD_VAR 0 4
38538: PUSH
38539: LD_INT 2
38541: ARRAY
38542: ST_TO_ADDR
// if h + 7 < height then
38543: LD_VAR 0 13
38547: PUSH
38548: LD_INT 7
38550: PLUS
38551: PUSH
38552: LD_VAR 0 15
38556: LESS
38557: IFFALSE 38586
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38559: LD_ADDR_VAR 0 18
38563: PUSH
38564: LD_INT 7
38566: PUSH
38567: LD_INT 28
38569: PUSH
38570: LD_INT 45
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: LIST
38577: PUSH
38578: LD_VAR 0 12
38582: ARRAY
38583: ST_TO_ADDR
// break ;
38584: GO 38588
// end ; end ; end ;
38586: GO 38417
38588: POP
38589: POP
// end ; if not weapon then
38590: LD_VAR 0 18
38594: NOT
38595: IFFALSE 38655
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38597: LD_ADDR_VAR 0 5
38601: PUSH
38602: LD_VAR 0 5
38606: PUSH
38607: LD_INT 11
38609: PUSH
38610: LD_INT 30
38612: PUSH
38613: LD_INT 49
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: DIFF
38621: ST_TO_ADDR
// if not list then
38622: LD_VAR 0 5
38626: NOT
38627: IFFALSE 38631
// exit ;
38629: GO 38777
// weapon := list [ rand ( 1 , list ) ] ;
38631: LD_ADDR_VAR 0 18
38635: PUSH
38636: LD_VAR 0 5
38640: PUSH
38641: LD_INT 1
38643: PPUSH
38644: LD_VAR 0 5
38648: PPUSH
38649: CALL_OW 12
38653: ARRAY
38654: ST_TO_ADDR
// end ; if weapon then
38655: LD_VAR 0 18
38659: IFFALSE 38777
// begin tmp := CostOfWeapon ( weapon ) ;
38661: LD_ADDR_VAR 0 14
38665: PUSH
38666: LD_VAR 0 18
38670: PPUSH
38671: CALL_OW 451
38675: ST_TO_ADDR
// j := GetBase ( tower ) ;
38676: LD_ADDR_VAR 0 9
38680: PUSH
38681: LD_VAR 0 1
38685: PPUSH
38686: CALL_OW 274
38690: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38691: LD_VAR 0 9
38695: PPUSH
38696: LD_INT 1
38698: PPUSH
38699: CALL_OW 275
38703: PUSH
38704: LD_VAR 0 14
38708: PUSH
38709: LD_INT 1
38711: ARRAY
38712: GREATEREQUAL
38713: IFFALSE 38739
38715: PUSH
38716: LD_VAR 0 9
38720: PPUSH
38721: LD_INT 2
38723: PPUSH
38724: CALL_OW 275
38728: PUSH
38729: LD_VAR 0 14
38733: PUSH
38734: LD_INT 2
38736: ARRAY
38737: GREATEREQUAL
38738: AND
38739: IFFALSE 38765
38741: PUSH
38742: LD_VAR 0 9
38746: PPUSH
38747: LD_INT 3
38749: PPUSH
38750: CALL_OW 275
38754: PUSH
38755: LD_VAR 0 14
38759: PUSH
38760: LD_INT 3
38762: ARRAY
38763: GREATEREQUAL
38764: AND
38765: IFFALSE 38777
// result := weapon ;
38767: LD_ADDR_VAR 0 3
38771: PUSH
38772: LD_VAR 0 18
38776: ST_TO_ADDR
// end ; end ;
38777: LD_VAR 0 3
38781: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38782: LD_INT 0
38784: PPUSH
38785: PPUSH
// result := true ;
38786: LD_ADDR_VAR 0 3
38790: PUSH
38791: LD_INT 1
38793: ST_TO_ADDR
// if array1 = array2 then
38794: LD_VAR 0 1
38798: PUSH
38799: LD_VAR 0 2
38803: EQUAL
38804: IFFALSE 38864
// begin for i = 1 to array1 do
38806: LD_ADDR_VAR 0 4
38810: PUSH
38811: DOUBLE
38812: LD_INT 1
38814: DEC
38815: ST_TO_ADDR
38816: LD_VAR 0 1
38820: PUSH
38821: FOR_TO
38822: IFFALSE 38860
// if array1 [ i ] <> array2 [ i ] then
38824: LD_VAR 0 1
38828: PUSH
38829: LD_VAR 0 4
38833: ARRAY
38834: PUSH
38835: LD_VAR 0 2
38839: PUSH
38840: LD_VAR 0 4
38844: ARRAY
38845: NONEQUAL
38846: IFFALSE 38858
// begin result := false ;
38848: LD_ADDR_VAR 0 3
38852: PUSH
38853: LD_INT 0
38855: ST_TO_ADDR
// break ;
38856: GO 38860
// end ;
38858: GO 38821
38860: POP
38861: POP
// end else
38862: GO 38872
// result := false ;
38864: LD_ADDR_VAR 0 3
38868: PUSH
38869: LD_INT 0
38871: ST_TO_ADDR
// end ;
38872: LD_VAR 0 3
38876: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38877: LD_INT 0
38879: PPUSH
38880: PPUSH
// if not array1 or not array2 then
38881: LD_VAR 0 1
38885: NOT
38886: IFTRUE 38895
38888: PUSH
38889: LD_VAR 0 2
38893: NOT
38894: OR
38895: IFFALSE 38899
// exit ;
38897: GO 38963
// result := true ;
38899: LD_ADDR_VAR 0 3
38903: PUSH
38904: LD_INT 1
38906: ST_TO_ADDR
// for i = 1 to array1 do
38907: LD_ADDR_VAR 0 4
38911: PUSH
38912: DOUBLE
38913: LD_INT 1
38915: DEC
38916: ST_TO_ADDR
38917: LD_VAR 0 1
38921: PUSH
38922: FOR_TO
38923: IFFALSE 38961
// if array1 [ i ] <> array2 [ i ] then
38925: LD_VAR 0 1
38929: PUSH
38930: LD_VAR 0 4
38934: ARRAY
38935: PUSH
38936: LD_VAR 0 2
38940: PUSH
38941: LD_VAR 0 4
38945: ARRAY
38946: NONEQUAL
38947: IFFALSE 38959
// begin result := false ;
38949: LD_ADDR_VAR 0 3
38953: PUSH
38954: LD_INT 0
38956: ST_TO_ADDR
// break ;
38957: GO 38961
// end ;
38959: GO 38922
38961: POP
38962: POP
// end ;
38963: LD_VAR 0 3
38967: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38968: LD_INT 0
38970: PPUSH
38971: PPUSH
38972: PPUSH
// pom := GetBase ( fac ) ;
38973: LD_ADDR_VAR 0 5
38977: PUSH
38978: LD_VAR 0 1
38982: PPUSH
38983: CALL_OW 274
38987: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38988: LD_ADDR_VAR 0 4
38992: PUSH
38993: LD_VAR 0 2
38997: PUSH
38998: LD_INT 1
39000: ARRAY
39001: PPUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 2
39009: ARRAY
39010: PPUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 3
39018: ARRAY
39019: PPUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 4
39027: ARRAY
39028: PPUSH
39029: CALL_OW 449
39033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39034: LD_ADDR_VAR 0 3
39038: PUSH
39039: LD_VAR 0 5
39043: PPUSH
39044: LD_INT 1
39046: PPUSH
39047: CALL_OW 275
39051: PUSH
39052: LD_VAR 0 4
39056: PUSH
39057: LD_INT 1
39059: ARRAY
39060: GREATEREQUAL
39061: IFFALSE 39087
39063: PUSH
39064: LD_VAR 0 5
39068: PPUSH
39069: LD_INT 2
39071: PPUSH
39072: CALL_OW 275
39076: PUSH
39077: LD_VAR 0 4
39081: PUSH
39082: LD_INT 2
39084: ARRAY
39085: GREATEREQUAL
39086: AND
39087: IFFALSE 39113
39089: PUSH
39090: LD_VAR 0 5
39094: PPUSH
39095: LD_INT 3
39097: PPUSH
39098: CALL_OW 275
39102: PUSH
39103: LD_VAR 0 4
39107: PUSH
39108: LD_INT 3
39110: ARRAY
39111: GREATEREQUAL
39112: AND
39113: ST_TO_ADDR
// end ;
39114: LD_VAR 0 3
39118: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39119: LD_INT 0
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
// pom := GetBase ( building ) ;
39125: LD_ADDR_VAR 0 3
39129: PUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 274
39139: ST_TO_ADDR
// if not pom then
39140: LD_VAR 0 3
39144: NOT
39145: IFFALSE 39149
// exit ;
39147: GO 39323
// btype := GetBType ( building ) ;
39149: LD_ADDR_VAR 0 5
39153: PUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 266
39163: ST_TO_ADDR
// if btype = b_armoury then
39164: LD_VAR 0 5
39168: PUSH
39169: LD_INT 4
39171: EQUAL
39172: IFFALSE 39182
// btype := b_barracks ;
39174: LD_ADDR_VAR 0 5
39178: PUSH
39179: LD_INT 5
39181: ST_TO_ADDR
// if btype = b_depot then
39182: LD_VAR 0 5
39186: PUSH
39187: LD_INT 0
39189: EQUAL
39190: IFFALSE 39200
// btype := b_warehouse ;
39192: LD_ADDR_VAR 0 5
39196: PUSH
39197: LD_INT 1
39199: ST_TO_ADDR
// if btype = b_workshop then
39200: LD_VAR 0 5
39204: PUSH
39205: LD_INT 2
39207: EQUAL
39208: IFFALSE 39218
// btype := b_factory ;
39210: LD_ADDR_VAR 0 5
39214: PUSH
39215: LD_INT 3
39217: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39218: LD_ADDR_VAR 0 4
39222: PUSH
39223: LD_VAR 0 5
39227: PPUSH
39228: LD_VAR 0 1
39232: PPUSH
39233: CALL_OW 248
39237: PPUSH
39238: CALL_OW 450
39242: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39243: LD_ADDR_VAR 0 2
39247: PUSH
39248: LD_VAR 0 3
39252: PPUSH
39253: LD_INT 1
39255: PPUSH
39256: CALL_OW 275
39260: PUSH
39261: LD_VAR 0 4
39265: PUSH
39266: LD_INT 1
39268: ARRAY
39269: GREATEREQUAL
39270: IFFALSE 39296
39272: PUSH
39273: LD_VAR 0 3
39277: PPUSH
39278: LD_INT 2
39280: PPUSH
39281: CALL_OW 275
39285: PUSH
39286: LD_VAR 0 4
39290: PUSH
39291: LD_INT 2
39293: ARRAY
39294: GREATEREQUAL
39295: AND
39296: IFFALSE 39322
39298: PUSH
39299: LD_VAR 0 3
39303: PPUSH
39304: LD_INT 3
39306: PPUSH
39307: CALL_OW 275
39311: PUSH
39312: LD_VAR 0 4
39316: PUSH
39317: LD_INT 3
39319: ARRAY
39320: GREATEREQUAL
39321: AND
39322: ST_TO_ADDR
// end ;
39323: LD_VAR 0 2
39327: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39328: LD_INT 0
39330: PPUSH
39331: PPUSH
39332: PPUSH
// pom := GetBase ( building ) ;
39333: LD_ADDR_VAR 0 4
39337: PUSH
39338: LD_VAR 0 1
39342: PPUSH
39343: CALL_OW 274
39347: ST_TO_ADDR
// if not pom then
39348: LD_VAR 0 4
39352: NOT
39353: IFFALSE 39357
// exit ;
39355: GO 39462
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39357: LD_ADDR_VAR 0 5
39361: PUSH
39362: LD_VAR 0 2
39366: PPUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: CALL_OW 248
39376: PPUSH
39377: CALL_OW 450
39381: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_VAR 0 4
39391: PPUSH
39392: LD_INT 1
39394: PPUSH
39395: CALL_OW 275
39399: PUSH
39400: LD_VAR 0 5
39404: PUSH
39405: LD_INT 1
39407: ARRAY
39408: GREATEREQUAL
39409: IFFALSE 39435
39411: PUSH
39412: LD_VAR 0 4
39416: PPUSH
39417: LD_INT 2
39419: PPUSH
39420: CALL_OW 275
39424: PUSH
39425: LD_VAR 0 5
39429: PUSH
39430: LD_INT 2
39432: ARRAY
39433: GREATEREQUAL
39434: AND
39435: IFFALSE 39461
39437: PUSH
39438: LD_VAR 0 4
39442: PPUSH
39443: LD_INT 3
39445: PPUSH
39446: CALL_OW 275
39450: PUSH
39451: LD_VAR 0 5
39455: PUSH
39456: LD_INT 3
39458: ARRAY
39459: GREATEREQUAL
39460: AND
39461: ST_TO_ADDR
// end ;
39462: LD_VAR 0 3
39466: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39467: LD_INT 0
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
// result := false ;
39480: LD_ADDR_VAR 0 8
39484: PUSH
39485: LD_INT 0
39487: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39488: LD_VAR 0 5
39492: NOT
39493: IFTRUE 39502
39495: PUSH
39496: LD_VAR 0 1
39500: NOT
39501: OR
39502: IFTRUE 39511
39504: PUSH
39505: LD_VAR 0 2
39509: NOT
39510: OR
39511: IFTRUE 39520
39513: PUSH
39514: LD_VAR 0 3
39518: NOT
39519: OR
39520: IFFALSE 39524
// exit ;
39522: GO 40350
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39524: LD_ADDR_VAR 0 14
39528: PUSH
39529: LD_VAR 0 1
39533: PPUSH
39534: LD_VAR 0 2
39538: PPUSH
39539: LD_VAR 0 3
39543: PPUSH
39544: LD_VAR 0 4
39548: PPUSH
39549: LD_VAR 0 5
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PPUSH
39558: CALL_OW 248
39562: PPUSH
39563: LD_INT 0
39565: PPUSH
39566: CALL 41631 0 6
39570: ST_TO_ADDR
// if not hexes then
39571: LD_VAR 0 14
39575: NOT
39576: IFFALSE 39580
// exit ;
39578: GO 40350
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39580: LD_ADDR_VAR 0 17
39584: PUSH
39585: LD_VAR 0 5
39589: PPUSH
39590: LD_INT 22
39592: PUSH
39593: LD_VAR 0 13
39597: PPUSH
39598: CALL_OW 255
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 30
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 30
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PPUSH
39639: CALL_OW 72
39643: ST_TO_ADDR
// for i = 1 to hexes do
39644: LD_ADDR_VAR 0 9
39648: PUSH
39649: DOUBLE
39650: LD_INT 1
39652: DEC
39653: ST_TO_ADDR
39654: LD_VAR 0 14
39658: PUSH
39659: FOR_TO
39660: IFFALSE 40348
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39662: LD_ADDR_VAR 0 13
39666: PUSH
39667: LD_VAR 0 14
39671: PUSH
39672: LD_VAR 0 9
39676: ARRAY
39677: PUSH
39678: LD_INT 1
39680: ARRAY
39681: PPUSH
39682: LD_VAR 0 14
39686: PUSH
39687: LD_VAR 0 9
39691: ARRAY
39692: PUSH
39693: LD_INT 2
39695: ARRAY
39696: PPUSH
39697: CALL_OW 428
39701: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39702: LD_VAR 0 14
39706: PUSH
39707: LD_VAR 0 9
39711: ARRAY
39712: PUSH
39713: LD_INT 1
39715: ARRAY
39716: PPUSH
39717: LD_VAR 0 14
39721: PUSH
39722: LD_VAR 0 9
39726: ARRAY
39727: PUSH
39728: LD_INT 2
39730: ARRAY
39731: PPUSH
39732: CALL_OW 351
39736: IFTRUE 39775
39738: PUSH
39739: LD_VAR 0 14
39743: PUSH
39744: LD_VAR 0 9
39748: ARRAY
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: PPUSH
39754: LD_VAR 0 14
39758: PUSH
39759: LD_VAR 0 9
39763: ARRAY
39764: PUSH
39765: LD_INT 2
39767: ARRAY
39768: PPUSH
39769: CALL_OW 488
39773: NOT
39774: OR
39775: IFTRUE 39792
39777: PUSH
39778: LD_VAR 0 13
39782: PPUSH
39783: CALL_OW 247
39787: PUSH
39788: LD_INT 3
39790: EQUAL
39791: OR
39792: IFFALSE 39798
// exit ;
39794: POP
39795: POP
39796: GO 40350
// if not tmp then
39798: LD_VAR 0 13
39802: NOT
39803: IFFALSE 39807
// continue ;
39805: GO 39659
// result := true ;
39807: LD_ADDR_VAR 0 8
39811: PUSH
39812: LD_INT 1
39814: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39815: LD_VAR 0 6
39819: IFFALSE 39836
39821: PUSH
39822: LD_VAR 0 13
39826: PPUSH
39827: CALL_OW 247
39831: PUSH
39832: LD_INT 2
39834: EQUAL
39835: AND
39836: IFFALSE 39853
39838: PUSH
39839: LD_VAR 0 13
39843: PPUSH
39844: CALL_OW 263
39848: PUSH
39849: LD_INT 1
39851: EQUAL
39852: AND
39853: IFFALSE 40017
// begin if IsDrivenBy ( tmp ) then
39855: LD_VAR 0 13
39859: PPUSH
39860: CALL_OW 311
39864: IFFALSE 39868
// continue ;
39866: GO 39659
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39868: LD_VAR 0 6
39872: PPUSH
39873: LD_INT 3
39875: PUSH
39876: LD_INT 60
39878: PUSH
39879: EMPTY
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: LD_INT 55
39891: PUSH
39892: EMPTY
39893: LIST
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PPUSH
39903: CALL_OW 72
39907: IFFALSE 40015
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39909: LD_ADDR_VAR 0 18
39913: PUSH
39914: LD_VAR 0 6
39918: PPUSH
39919: LD_INT 3
39921: PUSH
39922: LD_INT 60
39924: PUSH
39925: EMPTY
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: LD_INT 55
39937: PUSH
39938: EMPTY
39939: LIST
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PPUSH
39949: CALL_OW 72
39953: PUSH
39954: LD_INT 1
39956: ARRAY
39957: ST_TO_ADDR
// if IsInUnit ( driver ) then
39958: LD_VAR 0 18
39962: PPUSH
39963: CALL_OW 310
39967: IFFALSE 39978
// ComExit ( driver ) ;
39969: LD_VAR 0 18
39973: PPUSH
39974: CALL 65631 0 1
// AddComEnterUnit ( driver , tmp ) ;
39978: LD_VAR 0 18
39982: PPUSH
39983: LD_VAR 0 13
39987: PPUSH
39988: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39992: LD_VAR 0 18
39996: PPUSH
39997: LD_VAR 0 7
40001: PPUSH
40002: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40006: LD_VAR 0 18
40010: PPUSH
40011: CALL_OW 181
// end ; continue ;
40015: GO 39659
// end ; if not cleaners or not tmp in cleaners then
40017: LD_VAR 0 6
40021: NOT
40022: IFTRUE 40037
40024: PUSH
40025: LD_VAR 0 13
40029: PUSH
40030: LD_VAR 0 6
40034: IN
40035: NOT
40036: OR
40037: IFFALSE 40346
// begin if dep then
40039: LD_VAR 0 17
40043: IFFALSE 40179
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40045: LD_ADDR_VAR 0 16
40049: PUSH
40050: LD_VAR 0 17
40054: PUSH
40055: LD_INT 1
40057: ARRAY
40058: PPUSH
40059: CALL_OW 250
40063: PPUSH
40064: LD_VAR 0 17
40068: PUSH
40069: LD_INT 1
40071: ARRAY
40072: PPUSH
40073: CALL_OW 254
40077: PPUSH
40078: LD_INT 5
40080: PPUSH
40081: CALL_OW 272
40085: PUSH
40086: LD_VAR 0 17
40090: PUSH
40091: LD_INT 1
40093: ARRAY
40094: PPUSH
40095: CALL_OW 251
40099: PPUSH
40100: LD_VAR 0 17
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PPUSH
40109: CALL_OW 254
40113: PPUSH
40114: LD_INT 5
40116: PPUSH
40117: CALL_OW 273
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40126: LD_VAR 0 16
40130: PUSH
40131: LD_INT 1
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 16
40139: PUSH
40140: LD_INT 2
40142: ARRAY
40143: PPUSH
40144: CALL_OW 488
40148: IFFALSE 40179
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40150: LD_VAR 0 13
40154: PPUSH
40155: LD_VAR 0 16
40159: PUSH
40160: LD_INT 1
40162: ARRAY
40163: PPUSH
40164: LD_VAR 0 16
40168: PUSH
40169: LD_INT 2
40171: ARRAY
40172: PPUSH
40173: CALL_OW 111
// continue ;
40177: GO 39659
// end ; end ; r := GetDir ( tmp ) ;
40179: LD_ADDR_VAR 0 15
40183: PUSH
40184: LD_VAR 0 13
40188: PPUSH
40189: CALL_OW 254
40193: ST_TO_ADDR
// if r = 5 then
40194: LD_VAR 0 15
40198: PUSH
40199: LD_INT 5
40201: EQUAL
40202: IFFALSE 40212
// r := 0 ;
40204: LD_ADDR_VAR 0 15
40208: PUSH
40209: LD_INT 0
40211: ST_TO_ADDR
// for j = r to 5 do
40212: LD_ADDR_VAR 0 10
40216: PUSH
40217: DOUBLE
40218: LD_VAR 0 15
40222: DEC
40223: ST_TO_ADDR
40224: LD_INT 5
40226: PUSH
40227: FOR_TO
40228: IFFALSE 40344
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40230: LD_ADDR_VAR 0 11
40234: PUSH
40235: LD_VAR 0 13
40239: PPUSH
40240: CALL_OW 250
40244: PPUSH
40245: LD_VAR 0 10
40249: PPUSH
40250: LD_INT 2
40252: PPUSH
40253: CALL_OW 272
40257: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40258: LD_ADDR_VAR 0 12
40262: PUSH
40263: LD_VAR 0 13
40267: PPUSH
40268: CALL_OW 251
40272: PPUSH
40273: LD_VAR 0 10
40277: PPUSH
40278: LD_INT 2
40280: PPUSH
40281: CALL_OW 273
40285: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40286: LD_VAR 0 11
40290: PPUSH
40291: LD_VAR 0 12
40295: PPUSH
40296: CALL_OW 488
40300: IFFALSE 40319
40302: PUSH
40303: LD_VAR 0 11
40307: PPUSH
40308: LD_VAR 0 12
40312: PPUSH
40313: CALL_OW 428
40317: NOT
40318: AND
40319: IFFALSE 40342
// begin ComMoveXY ( tmp , _x , _y ) ;
40321: LD_VAR 0 13
40325: PPUSH
40326: LD_VAR 0 11
40330: PPUSH
40331: LD_VAR 0 12
40335: PPUSH
40336: CALL_OW 111
// break ;
40340: GO 40344
// end ; end ;
40342: GO 40227
40344: POP
40345: POP
// end ; end ;
40346: GO 39659
40348: POP
40349: POP
// end ;
40350: LD_VAR 0 8
40354: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40355: LD_INT 0
40357: PPUSH
// result := true ;
40358: LD_ADDR_VAR 0 3
40362: PUSH
40363: LD_INT 1
40365: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40366: LD_VAR 0 2
40370: PUSH
40371: LD_INT 24
40373: DOUBLE
40374: EQUAL
40375: IFTRUE 40385
40377: LD_INT 33
40379: DOUBLE
40380: EQUAL
40381: IFTRUE 40385
40383: GO 40410
40385: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40386: LD_ADDR_VAR 0 3
40390: PUSH
40391: LD_INT 32
40393: PPUSH
40394: LD_VAR 0 1
40398: PPUSH
40399: CALL_OW 321
40403: PUSH
40404: LD_INT 2
40406: EQUAL
40407: ST_TO_ADDR
40408: GO 40726
40410: LD_INT 20
40412: DOUBLE
40413: EQUAL
40414: IFTRUE 40418
40416: GO 40443
40418: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40419: LD_ADDR_VAR 0 3
40423: PUSH
40424: LD_INT 6
40426: PPUSH
40427: LD_VAR 0 1
40431: PPUSH
40432: CALL_OW 321
40436: PUSH
40437: LD_INT 2
40439: EQUAL
40440: ST_TO_ADDR
40441: GO 40726
40443: LD_INT 22
40445: DOUBLE
40446: EQUAL
40447: IFTRUE 40457
40449: LD_INT 36
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40482
40457: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40458: LD_ADDR_VAR 0 3
40462: PUSH
40463: LD_INT 15
40465: PPUSH
40466: LD_VAR 0 1
40470: PPUSH
40471: CALL_OW 321
40475: PUSH
40476: LD_INT 2
40478: EQUAL
40479: ST_TO_ADDR
40480: GO 40726
40482: LD_INT 30
40484: DOUBLE
40485: EQUAL
40486: IFTRUE 40490
40488: GO 40515
40490: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40491: LD_ADDR_VAR 0 3
40495: PUSH
40496: LD_INT 20
40498: PPUSH
40499: LD_VAR 0 1
40503: PPUSH
40504: CALL_OW 321
40508: PUSH
40509: LD_INT 2
40511: EQUAL
40512: ST_TO_ADDR
40513: GO 40726
40515: LD_INT 28
40517: DOUBLE
40518: EQUAL
40519: IFTRUE 40529
40521: LD_INT 21
40523: DOUBLE
40524: EQUAL
40525: IFTRUE 40529
40527: GO 40554
40529: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_INT 21
40537: PPUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 321
40547: PUSH
40548: LD_INT 2
40550: EQUAL
40551: ST_TO_ADDR
40552: GO 40726
40554: LD_INT 16
40556: DOUBLE
40557: EQUAL
40558: IFTRUE 40562
40560: GO 40587
40562: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40563: LD_ADDR_VAR 0 3
40567: PUSH
40568: LD_INT 84
40570: PPUSH
40571: LD_VAR 0 1
40575: PPUSH
40576: CALL_OW 321
40580: PUSH
40581: LD_INT 2
40583: EQUAL
40584: ST_TO_ADDR
40585: GO 40726
40587: LD_INT 19
40589: DOUBLE
40590: EQUAL
40591: IFTRUE 40601
40593: LD_INT 23
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40626
40601: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 83
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 321
40619: PUSH
40620: LD_INT 2
40622: EQUAL
40623: ST_TO_ADDR
40624: GO 40726
40626: LD_INT 17
40628: DOUBLE
40629: EQUAL
40630: IFTRUE 40634
40632: GO 40659
40634: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40635: LD_ADDR_VAR 0 3
40639: PUSH
40640: LD_INT 39
40642: PPUSH
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 321
40652: PUSH
40653: LD_INT 2
40655: EQUAL
40656: ST_TO_ADDR
40657: GO 40726
40659: LD_INT 18
40661: DOUBLE
40662: EQUAL
40663: IFTRUE 40667
40665: GO 40692
40667: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40668: LD_ADDR_VAR 0 3
40672: PUSH
40673: LD_INT 40
40675: PPUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 321
40685: PUSH
40686: LD_INT 2
40688: EQUAL
40689: ST_TO_ADDR
40690: GO 40726
40692: LD_INT 27
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40700
40698: GO 40725
40700: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40701: LD_ADDR_VAR 0 3
40705: PUSH
40706: LD_INT 35
40708: PPUSH
40709: LD_VAR 0 1
40713: PPUSH
40714: CALL_OW 321
40718: PUSH
40719: LD_INT 2
40721: EQUAL
40722: ST_TO_ADDR
40723: GO 40726
40725: POP
// end ;
40726: LD_VAR 0 3
40730: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40731: LD_INT 0
40733: PPUSH
40734: PPUSH
40735: PPUSH
40736: PPUSH
40737: PPUSH
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
40742: PPUSH
40743: PPUSH
// result := false ;
40744: LD_ADDR_VAR 0 6
40748: PUSH
40749: LD_INT 0
40751: ST_TO_ADDR
// if btype = b_depot then
40752: LD_VAR 0 2
40756: PUSH
40757: LD_INT 0
40759: EQUAL
40760: IFFALSE 40772
// begin result := true ;
40762: LD_ADDR_VAR 0 6
40766: PUSH
40767: LD_INT 1
40769: ST_TO_ADDR
// exit ;
40770: GO 41626
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40772: LD_VAR 0 1
40776: NOT
40777: IFTRUE 40802
40779: PUSH
40780: LD_VAR 0 1
40784: PPUSH
40785: CALL_OW 266
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: IN
40800: NOT
40801: OR
40802: IFTRUE 40811
40804: PUSH
40805: LD_VAR 0 2
40809: NOT
40810: OR
40811: IFTRUE 40847
40813: PUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 2
40827: PUSH
40828: LD_INT 3
40830: PUSH
40831: LD_INT 4
40833: PUSH
40834: LD_INT 5
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: IN
40845: NOT
40846: OR
40847: IFTRUE 40866
40849: PUSH
40850: LD_VAR 0 3
40854: PPUSH
40855: LD_VAR 0 4
40859: PPUSH
40860: CALL_OW 488
40864: NOT
40865: OR
40866: IFFALSE 40870
// exit ;
40868: GO 41626
// side := GetSide ( depot ) ;
40870: LD_ADDR_VAR 0 9
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: CALL_OW 255
40884: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40885: LD_VAR 0 9
40889: PPUSH
40890: LD_VAR 0 2
40894: PPUSH
40895: CALL 40355 0 2
40899: NOT
40900: IFFALSE 40904
// exit ;
40902: GO 41626
// pom := GetBase ( depot ) ;
40904: LD_ADDR_VAR 0 10
40908: PUSH
40909: LD_VAR 0 1
40913: PPUSH
40914: CALL_OW 274
40918: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40919: LD_ADDR_VAR 0 11
40923: PUSH
40924: LD_VAR 0 2
40928: PPUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: CALL_OW 248
40938: PPUSH
40939: CALL_OW 450
40943: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40944: LD_VAR 0 10
40948: PPUSH
40949: LD_INT 1
40951: PPUSH
40952: CALL_OW 275
40956: PUSH
40957: LD_VAR 0 11
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: GREATEREQUAL
40966: IFFALSE 40992
40968: PUSH
40969: LD_VAR 0 10
40973: PPUSH
40974: LD_INT 2
40976: PPUSH
40977: CALL_OW 275
40981: PUSH
40982: LD_VAR 0 11
40986: PUSH
40987: LD_INT 2
40989: ARRAY
40990: GREATEREQUAL
40991: AND
40992: IFFALSE 41018
40994: PUSH
40995: LD_VAR 0 10
40999: PPUSH
41000: LD_INT 3
41002: PPUSH
41003: CALL_OW 275
41007: PUSH
41008: LD_VAR 0 11
41012: PUSH
41013: LD_INT 3
41015: ARRAY
41016: GREATEREQUAL
41017: AND
41018: NOT
41019: IFFALSE 41023
// exit ;
41021: GO 41626
// if GetBType ( depot ) = b_depot then
41023: LD_VAR 0 1
41027: PPUSH
41028: CALL_OW 266
41032: PUSH
41033: LD_INT 0
41035: EQUAL
41036: IFFALSE 41048
// dist := 28 else
41038: LD_ADDR_VAR 0 14
41042: PUSH
41043: LD_INT 28
41045: ST_TO_ADDR
41046: GO 41056
// dist := 36 ;
41048: LD_ADDR_VAR 0 14
41052: PUSH
41053: LD_INT 36
41055: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41056: LD_VAR 0 1
41060: PPUSH
41061: LD_VAR 0 3
41065: PPUSH
41066: LD_VAR 0 4
41070: PPUSH
41071: CALL_OW 297
41075: PUSH
41076: LD_VAR 0 14
41080: GREATER
41081: IFFALSE 41085
// exit ;
41083: GO 41626
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41085: LD_ADDR_VAR 0 12
41089: PUSH
41090: LD_VAR 0 2
41094: PPUSH
41095: LD_VAR 0 3
41099: PPUSH
41100: LD_VAR 0 4
41104: PPUSH
41105: LD_VAR 0 5
41109: PPUSH
41110: LD_VAR 0 1
41114: PPUSH
41115: CALL_OW 248
41119: PPUSH
41120: LD_INT 0
41122: PPUSH
41123: CALL 41631 0 6
41127: ST_TO_ADDR
// if not hexes then
41128: LD_VAR 0 12
41132: NOT
41133: IFFALSE 41137
// exit ;
41135: GO 41626
// hex := GetHexInfo ( x , y ) ;
41137: LD_ADDR_VAR 0 15
41141: PUSH
41142: LD_VAR 0 3
41146: PPUSH
41147: LD_VAR 0 4
41151: PPUSH
41152: CALL_OW 546
41156: ST_TO_ADDR
// if hex [ 1 ] then
41157: LD_VAR 0 15
41161: PUSH
41162: LD_INT 1
41164: ARRAY
41165: IFFALSE 41169
// exit ;
41167: GO 41626
// height := hex [ 2 ] ;
41169: LD_ADDR_VAR 0 13
41173: PUSH
41174: LD_VAR 0 15
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: ST_TO_ADDR
// for i = 1 to hexes do
41183: LD_ADDR_VAR 0 7
41187: PUSH
41188: DOUBLE
41189: LD_INT 1
41191: DEC
41192: ST_TO_ADDR
41193: LD_VAR 0 12
41197: PUSH
41198: FOR_TO
41199: IFFALSE 41543
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41201: LD_VAR 0 12
41205: PUSH
41206: LD_VAR 0 7
41210: ARRAY
41211: PUSH
41212: LD_INT 1
41214: ARRAY
41215: PPUSH
41216: LD_VAR 0 12
41220: PUSH
41221: LD_VAR 0 7
41225: ARRAY
41226: PUSH
41227: LD_INT 2
41229: ARRAY
41230: PPUSH
41231: CALL_OW 488
41235: NOT
41236: IFTRUE 41278
41238: PUSH
41239: LD_VAR 0 12
41243: PUSH
41244: LD_VAR 0 7
41248: ARRAY
41249: PUSH
41250: LD_INT 1
41252: ARRAY
41253: PPUSH
41254: LD_VAR 0 12
41258: PUSH
41259: LD_VAR 0 7
41263: ARRAY
41264: PUSH
41265: LD_INT 2
41267: ARRAY
41268: PPUSH
41269: CALL_OW 428
41273: PUSH
41274: LD_INT 0
41276: GREATER
41277: OR
41278: IFTRUE 41316
41280: PUSH
41281: LD_VAR 0 12
41285: PUSH
41286: LD_VAR 0 7
41290: ARRAY
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: LD_VAR 0 12
41300: PUSH
41301: LD_VAR 0 7
41305: ARRAY
41306: PUSH
41307: LD_INT 2
41309: ARRAY
41310: PPUSH
41311: CALL_OW 351
41315: OR
41316: IFFALSE 41322
// exit ;
41318: POP
41319: POP
41320: GO 41626
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41322: LD_ADDR_VAR 0 8
41326: PUSH
41327: LD_VAR 0 12
41331: PUSH
41332: LD_VAR 0 7
41336: ARRAY
41337: PUSH
41338: LD_INT 1
41340: ARRAY
41341: PPUSH
41342: LD_VAR 0 12
41346: PUSH
41347: LD_VAR 0 7
41351: ARRAY
41352: PUSH
41353: LD_INT 2
41355: ARRAY
41356: PPUSH
41357: CALL_OW 546
41361: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41362: LD_VAR 0 8
41366: PUSH
41367: LD_INT 1
41369: ARRAY
41370: IFTRUE 41392
41372: PUSH
41373: LD_VAR 0 8
41377: PUSH
41378: LD_INT 2
41380: ARRAY
41381: PUSH
41382: LD_VAR 0 13
41386: PUSH
41387: LD_INT 2
41389: PLUS
41390: GREATER
41391: OR
41392: IFTRUE 41414
41394: PUSH
41395: LD_VAR 0 8
41399: PUSH
41400: LD_INT 2
41402: ARRAY
41403: PUSH
41404: LD_VAR 0 13
41408: PUSH
41409: LD_INT 2
41411: MINUS
41412: LESS
41413: OR
41414: IFTRUE 41482
41416: PUSH
41417: LD_VAR 0 8
41421: PUSH
41422: LD_INT 3
41424: ARRAY
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 8
41431: PUSH
41432: LD_INT 9
41434: PUSH
41435: LD_INT 10
41437: PUSH
41438: LD_INT 11
41440: PUSH
41441: LD_INT 12
41443: PUSH
41444: LD_INT 13
41446: PUSH
41447: LD_INT 16
41449: PUSH
41450: LD_INT 17
41452: PUSH
41453: LD_INT 18
41455: PUSH
41456: LD_INT 19
41458: PUSH
41459: LD_INT 20
41461: PUSH
41462: LD_INT 21
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: IN
41480: NOT
41481: OR
41482: IFTRUE 41495
41484: PUSH
41485: LD_VAR 0 8
41489: PUSH
41490: LD_INT 5
41492: ARRAY
41493: NOT
41494: OR
41495: IFTRUE 41535
41497: PUSH
41498: LD_VAR 0 8
41502: PUSH
41503: LD_INT 6
41505: ARRAY
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 7
41515: PUSH
41516: LD_INT 9
41518: PUSH
41519: LD_INT 10
41521: PUSH
41522: LD_INT 11
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: IN
41533: NOT
41534: OR
41535: IFFALSE 41541
// exit ;
41537: POP
41538: POP
41539: GO 41626
// end ;
41541: GO 41198
41543: POP
41544: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41545: LD_VAR 0 9
41549: PPUSH
41550: LD_VAR 0 3
41554: PPUSH
41555: LD_VAR 0 4
41559: PPUSH
41560: LD_INT 20
41562: PPUSH
41563: CALL 33445 0 4
41567: PUSH
41568: LD_INT 4
41570: ARRAY
41571: IFFALSE 41575
// exit ;
41573: GO 41626
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41575: LD_VAR 0 2
41579: PUSH
41580: LD_INT 29
41582: PUSH
41583: LD_INT 30
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: IN
41590: IFFALSE 41614
41592: PUSH
41593: LD_VAR 0 3
41597: PPUSH
41598: LD_VAR 0 4
41602: PPUSH
41603: LD_VAR 0 9
41607: PPUSH
41608: CALL_OW 440
41612: NOT
41613: AND
41614: IFFALSE 41618
// exit ;
41616: GO 41626
// result := true ;
41618: LD_ADDR_VAR 0 6
41622: PUSH
41623: LD_INT 1
41625: ST_TO_ADDR
// end ;
41626: LD_VAR 0 6
41630: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41631: LD_INT 0
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
41641: PPUSH
41642: PPUSH
41643: PPUSH
41644: PPUSH
41645: PPUSH
41646: PPUSH
41647: PPUSH
41648: PPUSH
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
41653: PPUSH
41654: PPUSH
41655: PPUSH
41656: PPUSH
41657: PPUSH
41658: PPUSH
41659: PPUSH
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
41670: PPUSH
41671: PPUSH
41672: PPUSH
41673: PPUSH
41674: PPUSH
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
// result = [ ] ;
41691: LD_ADDR_VAR 0 7
41695: PUSH
41696: EMPTY
41697: ST_TO_ADDR
// temp_list = [ ] ;
41698: LD_ADDR_VAR 0 9
41702: PUSH
41703: EMPTY
41704: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41705: LD_VAR 0 4
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: LD_INT 4
41724: PUSH
41725: LD_INT 5
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: IN
41736: NOT
41737: IFTRUE 41780
41739: PUSH
41740: LD_VAR 0 1
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: IN
41755: IFFALSE 41779
41757: PUSH
41758: LD_VAR 0 5
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: IN
41777: NOT
41778: AND
41779: OR
41780: IFFALSE 41784
// exit ;
41782: GO 60183
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41784: LD_VAR 0 1
41788: PUSH
41789: LD_INT 6
41791: PUSH
41792: LD_INT 7
41794: PUSH
41795: LD_INT 8
41797: PUSH
41798: LD_INT 13
41800: PUSH
41801: LD_INT 12
41803: PUSH
41804: LD_INT 15
41806: PUSH
41807: LD_INT 11
41809: PUSH
41810: LD_INT 14
41812: PUSH
41813: LD_INT 10
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: IN
41827: IFFALSE 41837
// btype = b_lab ;
41829: LD_ADDR_VAR 0 1
41833: PUSH
41834: LD_INT 6
41836: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41837: LD_VAR 0 6
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: IN
41856: NOT
41857: IFTRUE 41925
41859: PUSH
41860: LD_VAR 0 1
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 6
41879: PUSH
41880: LD_INT 36
41882: PUSH
41883: LD_INT 4
41885: PUSH
41886: LD_INT 5
41888: PUSH
41889: LD_INT 31
41891: PUSH
41892: LD_INT 32
41894: PUSH
41895: LD_INT 33
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: IN
41911: NOT
41912: IFFALSE 41924
41914: PUSH
41915: LD_VAR 0 6
41919: PUSH
41920: LD_INT 1
41922: EQUAL
41923: AND
41924: OR
41925: IFTRUE 41957
41927: PUSH
41928: LD_VAR 0 1
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: IN
41943: NOT
41944: IFFALSE 41956
41946: PUSH
41947: LD_VAR 0 6
41951: PUSH
41952: LD_INT 2
41954: EQUAL
41955: AND
41956: OR
41957: IFFALSE 41967
// mode = 0 ;
41959: LD_ADDR_VAR 0 6
41963: PUSH
41964: LD_INT 0
41966: ST_TO_ADDR
// case mode of 0 :
41967: LD_VAR 0 6
41971: PUSH
41972: LD_INT 0
41974: DOUBLE
41975: EQUAL
41976: IFTRUE 41980
41978: GO 53433
41980: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41981: LD_ADDR_VAR 0 11
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 3
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42174: LD_ADDR_VAR 0 12
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: NEG
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42370: LD_ADDR_VAR 0 13
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 2
42505: NEG
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: NEG
42542: PUSH
42543: LD_INT 3
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42569: LD_ADDR_VAR 0 14
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42765: LD_ADDR_VAR 0 15
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42958: LD_ADDR_VAR 0 16
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: NEG
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43151: LD_ADDR_VAR 0 17
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 2
43236: NEG
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 2
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: NEG
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43381: LD_ADDR_VAR 0 18
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 0
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43611: LD_ADDR_VAR 0 19
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43841: LD_ADDR_VAR 0 20
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44071: LD_ADDR_VAR 0 21
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44301: LD_ADDR_VAR 0 22
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 2
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44531: LD_ADDR_VAR 0 23
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 3
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44811: LD_ADDR_VAR 0 24
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45087: LD_ADDR_VAR 0 25
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45361: LD_ADDR_VAR 0 26
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 3
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45637: LD_ADDR_VAR 0 27
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: LD_INT 2
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 2
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 3
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: NEG
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45917: LD_ADDR_VAR 0 28
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 2
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 3
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 3
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46199: LD_ADDR_VAR 0 29
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 2
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 3
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46478: LD_ADDR_VAR 0 30
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 2
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 3
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 2
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46756: LD_ADDR_VAR 0 31
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 2
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 3
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 2
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47034: LD_ADDR_VAR 0 32
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47312: LD_ADDR_VAR 0 33
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 0
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 2
47467: NEG
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 3
47556: NEG
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47591: LD_ADDR_VAR 0 34
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 2
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 3
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47871: LD_ADDR_VAR 0 35
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47983: LD_ADDR_VAR 0 36
47987: PUSH
47988: LD_INT 0
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 2
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48095: LD_ADDR_VAR 0 37
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48207: LD_ADDR_VAR 0 38
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: NEG
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48319: LD_ADDR_VAR 0 39
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48431: LD_ADDR_VAR 0 40
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48543: LD_ADDR_VAR 0 41
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: NEG
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 3
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: NEG
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 3
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48893: LD_ADDR_VAR 0 42
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 3
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: LD_INT 3
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 3
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49243: LD_ADDR_VAR 0 43
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 3
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49591: LD_ADDR_VAR 0 44
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 3
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 3
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49941: LD_ADDR_VAR 0 45
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 3
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 3
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 3
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: LD_INT 3
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50291: LD_ADDR_VAR 0 46
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 3
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 3
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50639: LD_ADDR_VAR 0 47
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50790: LD_ADDR_VAR 0 48
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50937: LD_ADDR_VAR 0 49
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 1
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51081: LD_ADDR_VAR 0 50
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51225: LD_ADDR_VAR 0 51
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 2
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51372: LD_ADDR_VAR 0 52
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51523: LD_ADDR_VAR 0 53
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51753: LD_ADDR_VAR 0 54
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51983: LD_ADDR_VAR 0 55
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 2
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52213: LD_ADDR_VAR 0 56
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52443: LD_ADDR_VAR 0 57
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52673: LD_ADDR_VAR 0 58
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 2
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 2
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52903: LD_ADDR_VAR 0 59
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52991: LD_ADDR_VAR 0 60
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53079: LD_ADDR_VAR 0 61
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53167: LD_ADDR_VAR 0 62
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: NEG
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53255: LD_ADDR_VAR 0 63
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53343: LD_ADDR_VAR 0 64
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: ST_TO_ADDR
// end ; 1 :
53431: GO 59328
53433: LD_INT 1
53435: DOUBLE
53436: EQUAL
53437: IFTRUE 53441
53439: GO 56064
53441: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53442: LD_ADDR_VAR 0 11
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 3
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 3
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53486: LD_ADDR_VAR 0 12
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53527: LD_ADDR_VAR 0 13
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: LD_INT 2
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53567: LD_ADDR_VAR 0 14
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 3
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53608: LD_ADDR_VAR 0 15
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53652: LD_ADDR_VAR 0 16
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53698: LD_ADDR_VAR 0 17
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53742: LD_ADDR_VAR 0 18
53746: PUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53783: LD_ADDR_VAR 0 19
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53823: LD_ADDR_VAR 0 20
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53864: LD_ADDR_VAR 0 21
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 3
53882: NEG
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53908: LD_ADDR_VAR 0 22
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 3
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 3
53939: NEG
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53954: LD_ADDR_VAR 0 23
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 4
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53998: LD_ADDR_VAR 0 24
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 4
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54039: LD_ADDR_VAR 0 25
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 4
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 4
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54079: LD_ADDR_VAR 0 26
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 3
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: LD_INT 4
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54120: LD_ADDR_VAR 0 27
54124: PUSH
54125: LD_INT 3
54127: NEG
54128: PUSH
54129: LD_INT 0
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 3
54138: NEG
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 4
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54164: LD_ADDR_VAR 0 28
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: LD_INT 3
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 3
54183: NEG
54184: PUSH
54185: LD_INT 4
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 4
54195: NEG
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54210: LD_ADDR_VAR 0 29
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 3
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 3
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 4
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 4
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 3
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 5
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 5
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 4
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 6
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 6
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 5
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54365: LD_ADDR_VAR 0 30
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 5
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 5
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 6
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 6
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54508: LD_ADDR_VAR 0 31
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 3
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: LD_INT 4
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: LD_INT 4
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 5
54575: PUSH
54576: LD_INT 4
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 5
54585: PUSH
54586: LD_INT 5
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 4
54595: PUSH
54596: LD_INT 5
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 6
54605: PUSH
54606: LD_INT 5
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 6
54615: PUSH
54616: LD_INT 6
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 5
54625: PUSH
54626: LD_INT 6
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54647: LD_ADDR_VAR 0 32
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 4
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 4
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 5
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 0
54726: PUSH
54727: LD_INT 5
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: LD_INT 4
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 6
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: LD_INT 6
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 5
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54790: LD_ADDR_VAR 0 33
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: NEG
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 4
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 4
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 5
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 5
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 6
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 6
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54945: LD_ADDR_VAR 0 34
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 3
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 4
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 4
55000: NEG
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 4
55012: NEG
55013: PUSH
55014: LD_INT 4
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: LD_INT 5
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 5
55036: NEG
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 5
55048: NEG
55049: PUSH
55050: LD_INT 5
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 5
55060: NEG
55061: PUSH
55062: LD_INT 6
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 6
55072: NEG
55073: PUSH
55074: LD_INT 5
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 6
55084: NEG
55085: PUSH
55086: LD_INT 6
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55108: LD_ADDR_VAR 0 41
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55152: LD_ADDR_VAR 0 42
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: LIST
55192: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55193: LD_ADDR_VAR 0 43
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 3
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55233: LD_ADDR_VAR 0 44
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: LIST
55273: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55274: LD_ADDR_VAR 0 45
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55318: LD_ADDR_VAR 0 46
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55364: LD_ADDR_VAR 0 47
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: NEG
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55397: LD_ADDR_VAR 0 48
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55428: LD_ADDR_VAR 0 49
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55457: LD_ADDR_VAR 0 50
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55486: LD_ADDR_VAR 0 51
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55517: LD_ADDR_VAR 0 52
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55550: LD_ADDR_VAR 0 53
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 3
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 3
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55594: LD_ADDR_VAR 0 54
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 3
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55635: LD_ADDR_VAR 0 55
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 3
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: LIST
55674: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55675: LD_ADDR_VAR 0 56
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55716: LD_ADDR_VAR 0 57
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 3
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 3
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55760: LD_ADDR_VAR 0 58
55764: PUSH
55765: LD_INT 2
55767: NEG
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55806: LD_ADDR_VAR 0 59
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55850: LD_ADDR_VAR 0 60
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55891: LD_ADDR_VAR 0 61
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: LD_INT 2
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55931: LD_ADDR_VAR 0 62
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55972: LD_ADDR_VAR 0 63
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56016: LD_ADDR_VAR 0 64
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: ST_TO_ADDR
// end ; 2 :
56062: GO 59328
56064: LD_INT 2
56066: DOUBLE
56067: EQUAL
56068: IFTRUE 56072
56070: GO 59327
56072: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56073: LD_ADDR_VAR 0 29
56077: PUSH
56078: LD_INT 4
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 4
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 5
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 5
56111: PUSH
56112: LD_INT 1
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 4
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: LD_INT 1
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 3
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 5
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 3
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 4
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 4
56203: PUSH
56204: LD_INT 4
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 4
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 4
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 3
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: LD_INT 4
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 5
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 5
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: LD_INT 4
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: NEG
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 3
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 3
56401: NEG
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 4
56412: NEG
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 4
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 2
56447: NEG
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: LD_INT 4
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: NEG
56471: PUSH
56472: LD_INT 5
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: LD_INT 4
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 3
56494: NEG
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 4
56506: NEG
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: LD_INT 4
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: NEG
56531: PUSH
56532: LD_INT 5
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: LD_INT 5
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 5
56554: NEG
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56611: LD_ADDR_VAR 0 30
56615: PUSH
56616: LD_INT 4
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 4
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 5
56638: PUSH
56639: LD_INT 4
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 5
56648: PUSH
56649: LD_INT 5
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 4
56658: PUSH
56659: LD_INT 5
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 4
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 4
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 4
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 4
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 3
56824: NEG
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 4
56846: NEG
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 5
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 5
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 5
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: LD_INT 3
56907: NEG
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: LD_INT 4
56919: NEG
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: NEG
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 3
56951: NEG
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 4
56963: NEG
56964: PUSH
56965: LD_INT 3
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 4
56975: NEG
56976: PUSH
56977: LD_INT 4
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: LD_INT 4
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 4
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 5
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 4
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: LD_INT 3
57047: NEG
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 3
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: LD_INT 4
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 5
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: LD_INT 5
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57158: LD_ADDR_VAR 0 31
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 4
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 4
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 5
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 5
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 5
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: NEG
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 4
57314: NEG
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 4
57325: NEG
57326: PUSH
57327: LD_INT 1
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 4
57337: NEG
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 5
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 3
57384: NEG
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 5
57420: NEG
57421: PUSH
57422: LD_INT 4
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: NEG
57433: PUSH
57434: LD_INT 5
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: LD_INT 5
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 5
57456: NEG
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 4
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 4
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 4
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 4
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 5
57601: PUSH
57602: LD_INT 1
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 5
57653: PUSH
57654: LD_INT 2
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57708: LD_ADDR_VAR 0 32
57712: PUSH
57713: LD_INT 4
57715: NEG
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 4
57726: NEG
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 4
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: NEG
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 5
57782: NEG
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 5
57794: NEG
57795: PUSH
57796: LD_INT 2
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: NEG
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: LD_INT 3
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 3
57829: NEG
57830: PUSH
57831: LD_INT 4
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 4
57877: NEG
57878: PUSH
57879: LD_INT 3
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: NEG
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 4
57913: NEG
57914: PUSH
57915: LD_INT 2
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 4
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: LD_INT 5
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 4
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: LD_INT 4
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 5
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 5
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 3
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 4
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: PUSH
58121: LD_INT 4
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 4
58130: PUSH
58131: LD_INT 3
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 5
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 5
58150: PUSH
58151: LD_INT 5
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: LD_INT 5
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 5
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58255: LD_ADDR_VAR 0 33
58259: PUSH
58260: LD_INT 4
58262: NEG
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 4
58274: NEG
58275: PUSH
58276: LD_INT 5
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: LD_INT 4
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: NEG
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 4
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 5
58322: NEG
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 5
58334: NEG
58335: PUSH
58336: LD_INT 5
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: NEG
58347: PUSH
58348: LD_INT 5
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 3
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 4
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 2
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 3
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 4
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 4
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 4
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 5
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 4
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 5
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 4
58585: PUSH
58586: LD_INT 3
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 3
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 3
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 4
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: LD_INT 5
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: LD_INT 5
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58793: LD_ADDR_VAR 0 34
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 4
58803: NEG
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 5
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 4
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: LD_INT 5
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: LD_INT 5
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 4
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 3
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 4
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 4
58995: PUSH
58996: LD_INT 4
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 5
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 5
59025: PUSH
59026: LD_INT 5
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 4
59035: PUSH
59036: LD_INT 5
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 4
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 5
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: PUSH
59076: LD_INT 5
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 3
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 4
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 5
59234: NEG
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 5
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 5
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// end ; end ;
59325: GO 59328
59327: POP
// case btype of b_depot , b_warehouse :
59328: LD_VAR 0 1
59332: PUSH
59333: LD_INT 0
59335: DOUBLE
59336: EQUAL
59337: IFTRUE 59347
59339: LD_INT 1
59341: DOUBLE
59342: EQUAL
59343: IFTRUE 59347
59345: GO 59548
59347: POP
// case nation of nation_american :
59348: LD_VAR 0 5
59352: PUSH
59353: LD_INT 1
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59361
59359: GO 59417
59361: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59362: LD_ADDR_VAR 0 9
59366: PUSH
59367: LD_VAR 0 11
59371: PUSH
59372: LD_VAR 0 12
59376: PUSH
59377: LD_VAR 0 13
59381: PUSH
59382: LD_VAR 0 14
59386: PUSH
59387: LD_VAR 0 15
59391: PUSH
59392: LD_VAR 0 16
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: PUSH
59405: LD_VAR 0 4
59409: PUSH
59410: LD_INT 1
59412: PLUS
59413: ARRAY
59414: ST_TO_ADDR
59415: GO 59546
59417: LD_INT 2
59419: DOUBLE
59420: EQUAL
59421: IFTRUE 59425
59423: GO 59481
59425: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59426: LD_ADDR_VAR 0 9
59430: PUSH
59431: LD_VAR 0 17
59435: PUSH
59436: LD_VAR 0 18
59440: PUSH
59441: LD_VAR 0 19
59445: PUSH
59446: LD_VAR 0 20
59450: PUSH
59451: LD_VAR 0 21
59455: PUSH
59456: LD_VAR 0 22
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: PUSH
59469: LD_VAR 0 4
59473: PUSH
59474: LD_INT 1
59476: PLUS
59477: ARRAY
59478: ST_TO_ADDR
59479: GO 59546
59481: LD_INT 3
59483: DOUBLE
59484: EQUAL
59485: IFTRUE 59489
59487: GO 59545
59489: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59490: LD_ADDR_VAR 0 9
59494: PUSH
59495: LD_VAR 0 23
59499: PUSH
59500: LD_VAR 0 24
59504: PUSH
59505: LD_VAR 0 25
59509: PUSH
59510: LD_VAR 0 26
59514: PUSH
59515: LD_VAR 0 27
59519: PUSH
59520: LD_VAR 0 28
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: PUSH
59533: LD_VAR 0 4
59537: PUSH
59538: LD_INT 1
59540: PLUS
59541: ARRAY
59542: ST_TO_ADDR
59543: GO 59546
59545: POP
59546: GO 60101
59548: LD_INT 2
59550: DOUBLE
59551: EQUAL
59552: IFTRUE 59562
59554: LD_INT 3
59556: DOUBLE
59557: EQUAL
59558: IFTRUE 59562
59560: GO 59618
59562: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59563: LD_ADDR_VAR 0 9
59567: PUSH
59568: LD_VAR 0 29
59572: PUSH
59573: LD_VAR 0 30
59577: PUSH
59578: LD_VAR 0 31
59582: PUSH
59583: LD_VAR 0 32
59587: PUSH
59588: LD_VAR 0 33
59592: PUSH
59593: LD_VAR 0 34
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: PUSH
59606: LD_VAR 0 4
59610: PUSH
59611: LD_INT 1
59613: PLUS
59614: ARRAY
59615: ST_TO_ADDR
59616: GO 60101
59618: LD_INT 16
59620: DOUBLE
59621: EQUAL
59622: IFTRUE 59680
59624: LD_INT 17
59626: DOUBLE
59627: EQUAL
59628: IFTRUE 59680
59630: LD_INT 18
59632: DOUBLE
59633: EQUAL
59634: IFTRUE 59680
59636: LD_INT 19
59638: DOUBLE
59639: EQUAL
59640: IFTRUE 59680
59642: LD_INT 22
59644: DOUBLE
59645: EQUAL
59646: IFTRUE 59680
59648: LD_INT 20
59650: DOUBLE
59651: EQUAL
59652: IFTRUE 59680
59654: LD_INT 21
59656: DOUBLE
59657: EQUAL
59658: IFTRUE 59680
59660: LD_INT 23
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59680
59666: LD_INT 24
59668: DOUBLE
59669: EQUAL
59670: IFTRUE 59680
59672: LD_INT 25
59674: DOUBLE
59675: EQUAL
59676: IFTRUE 59680
59678: GO 59736
59680: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59681: LD_ADDR_VAR 0 9
59685: PUSH
59686: LD_VAR 0 35
59690: PUSH
59691: LD_VAR 0 36
59695: PUSH
59696: LD_VAR 0 37
59700: PUSH
59701: LD_VAR 0 38
59705: PUSH
59706: LD_VAR 0 39
59710: PUSH
59711: LD_VAR 0 40
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: PUSH
59724: LD_VAR 0 4
59728: PUSH
59729: LD_INT 1
59731: PLUS
59732: ARRAY
59733: ST_TO_ADDR
59734: GO 60101
59736: LD_INT 6
59738: DOUBLE
59739: EQUAL
59740: IFTRUE 59792
59742: LD_INT 7
59744: DOUBLE
59745: EQUAL
59746: IFTRUE 59792
59748: LD_INT 8
59750: DOUBLE
59751: EQUAL
59752: IFTRUE 59792
59754: LD_INT 13
59756: DOUBLE
59757: EQUAL
59758: IFTRUE 59792
59760: LD_INT 12
59762: DOUBLE
59763: EQUAL
59764: IFTRUE 59792
59766: LD_INT 15
59768: DOUBLE
59769: EQUAL
59770: IFTRUE 59792
59772: LD_INT 11
59774: DOUBLE
59775: EQUAL
59776: IFTRUE 59792
59778: LD_INT 14
59780: DOUBLE
59781: EQUAL
59782: IFTRUE 59792
59784: LD_INT 10
59786: DOUBLE
59787: EQUAL
59788: IFTRUE 59792
59790: GO 59848
59792: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59793: LD_ADDR_VAR 0 9
59797: PUSH
59798: LD_VAR 0 41
59802: PUSH
59803: LD_VAR 0 42
59807: PUSH
59808: LD_VAR 0 43
59812: PUSH
59813: LD_VAR 0 44
59817: PUSH
59818: LD_VAR 0 45
59822: PUSH
59823: LD_VAR 0 46
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: PUSH
59836: LD_VAR 0 4
59840: PUSH
59841: LD_INT 1
59843: PLUS
59844: ARRAY
59845: ST_TO_ADDR
59846: GO 60101
59848: LD_INT 36
59850: DOUBLE
59851: EQUAL
59852: IFTRUE 59856
59854: GO 59912
59856: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59857: LD_ADDR_VAR 0 9
59861: PUSH
59862: LD_VAR 0 47
59866: PUSH
59867: LD_VAR 0 48
59871: PUSH
59872: LD_VAR 0 49
59876: PUSH
59877: LD_VAR 0 50
59881: PUSH
59882: LD_VAR 0 51
59886: PUSH
59887: LD_VAR 0 52
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: PUSH
59900: LD_VAR 0 4
59904: PUSH
59905: LD_INT 1
59907: PLUS
59908: ARRAY
59909: ST_TO_ADDR
59910: GO 60101
59912: LD_INT 4
59914: DOUBLE
59915: EQUAL
59916: IFTRUE 59938
59918: LD_INT 5
59920: DOUBLE
59921: EQUAL
59922: IFTRUE 59938
59924: LD_INT 34
59926: DOUBLE
59927: EQUAL
59928: IFTRUE 59938
59930: LD_INT 37
59932: DOUBLE
59933: EQUAL
59934: IFTRUE 59938
59936: GO 59994
59938: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59939: LD_ADDR_VAR 0 9
59943: PUSH
59944: LD_VAR 0 53
59948: PUSH
59949: LD_VAR 0 54
59953: PUSH
59954: LD_VAR 0 55
59958: PUSH
59959: LD_VAR 0 56
59963: PUSH
59964: LD_VAR 0 57
59968: PUSH
59969: LD_VAR 0 58
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: PUSH
59982: LD_VAR 0 4
59986: PUSH
59987: LD_INT 1
59989: PLUS
59990: ARRAY
59991: ST_TO_ADDR
59992: GO 60101
59994: LD_INT 31
59996: DOUBLE
59997: EQUAL
59998: IFTRUE 60044
60000: LD_INT 32
60002: DOUBLE
60003: EQUAL
60004: IFTRUE 60044
60006: LD_INT 33
60008: DOUBLE
60009: EQUAL
60010: IFTRUE 60044
60012: LD_INT 27
60014: DOUBLE
60015: EQUAL
60016: IFTRUE 60044
60018: LD_INT 26
60020: DOUBLE
60021: EQUAL
60022: IFTRUE 60044
60024: LD_INT 28
60026: DOUBLE
60027: EQUAL
60028: IFTRUE 60044
60030: LD_INT 29
60032: DOUBLE
60033: EQUAL
60034: IFTRUE 60044
60036: LD_INT 30
60038: DOUBLE
60039: EQUAL
60040: IFTRUE 60044
60042: GO 60100
60044: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60045: LD_ADDR_VAR 0 9
60049: PUSH
60050: LD_VAR 0 59
60054: PUSH
60055: LD_VAR 0 60
60059: PUSH
60060: LD_VAR 0 61
60064: PUSH
60065: LD_VAR 0 62
60069: PUSH
60070: LD_VAR 0 63
60074: PUSH
60075: LD_VAR 0 64
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: PUSH
60088: LD_VAR 0 4
60092: PUSH
60093: LD_INT 1
60095: PLUS
60096: ARRAY
60097: ST_TO_ADDR
60098: GO 60101
60100: POP
// temp_list2 = [ ] ;
60101: LD_ADDR_VAR 0 10
60105: PUSH
60106: EMPTY
60107: ST_TO_ADDR
// for i in temp_list do
60108: LD_ADDR_VAR 0 8
60112: PUSH
60113: LD_VAR 0 9
60117: PUSH
60118: FOR_IN
60119: IFFALSE 60171
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60121: LD_ADDR_VAR 0 10
60125: PUSH
60126: LD_VAR 0 10
60130: PUSH
60131: LD_VAR 0 8
60135: PUSH
60136: LD_INT 1
60138: ARRAY
60139: PUSH
60140: LD_VAR 0 2
60144: PLUS
60145: PUSH
60146: LD_VAR 0 8
60150: PUSH
60151: LD_INT 2
60153: ARRAY
60154: PUSH
60155: LD_VAR 0 3
60159: PLUS
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: ADD
60168: ST_TO_ADDR
60169: GO 60118
60171: POP
60172: POP
// result = temp_list2 ;
60173: LD_ADDR_VAR 0 7
60177: PUSH
60178: LD_VAR 0 10
60182: ST_TO_ADDR
// end ;
60183: LD_VAR 0 7
60187: RET
// export function EnemyInRange ( unit , dist ) ; begin
60188: LD_INT 0
60190: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60191: LD_ADDR_VAR 0 3
60195: PUSH
60196: LD_VAR 0 1
60200: PPUSH
60201: CALL_OW 255
60205: PPUSH
60206: LD_VAR 0 1
60210: PPUSH
60211: CALL_OW 250
60215: PPUSH
60216: LD_VAR 0 1
60220: PPUSH
60221: CALL_OW 251
60225: PPUSH
60226: LD_VAR 0 2
60230: PPUSH
60231: CALL 33445 0 4
60235: PUSH
60236: LD_INT 4
60238: ARRAY
60239: ST_TO_ADDR
// end ;
60240: LD_VAR 0 3
60244: RET
// export function PlayerSeeMe ( unit ) ; begin
60245: LD_INT 0
60247: PPUSH
// result := See ( your_side , unit ) ;
60248: LD_ADDR_VAR 0 2
60252: PUSH
60253: LD_OWVAR 2
60257: PPUSH
60258: LD_VAR 0 1
60262: PPUSH
60263: CALL_OW 292
60267: ST_TO_ADDR
// end ;
60268: LD_VAR 0 2
60272: RET
// export function ReverseDir ( unit ) ; begin
60273: LD_INT 0
60275: PPUSH
// if not unit then
60276: LD_VAR 0 1
60280: NOT
60281: IFFALSE 60285
// exit ;
60283: GO 60308
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60285: LD_ADDR_VAR 0 2
60289: PUSH
60290: LD_VAR 0 1
60294: PPUSH
60295: CALL_OW 254
60299: PUSH
60300: LD_INT 3
60302: PLUS
60303: PUSH
60304: LD_INT 6
60306: MOD
60307: ST_TO_ADDR
// end ;
60308: LD_VAR 0 2
60312: RET
// export function ReverseArray ( array ) ; var i ; begin
60313: LD_INT 0
60315: PPUSH
60316: PPUSH
// if not array then
60317: LD_VAR 0 1
60321: NOT
60322: IFFALSE 60326
// exit ;
60324: GO 60381
// result := [ ] ;
60326: LD_ADDR_VAR 0 2
60330: PUSH
60331: EMPTY
60332: ST_TO_ADDR
// for i := array downto 1 do
60333: LD_ADDR_VAR 0 3
60337: PUSH
60338: DOUBLE
60339: LD_VAR 0 1
60343: INC
60344: ST_TO_ADDR
60345: LD_INT 1
60347: PUSH
60348: FOR_DOWNTO
60349: IFFALSE 60379
// result := Join ( result , array [ i ] ) ;
60351: LD_ADDR_VAR 0 2
60355: PUSH
60356: LD_VAR 0 2
60360: PPUSH
60361: LD_VAR 0 1
60365: PUSH
60366: LD_VAR 0 3
60370: ARRAY
60371: PPUSH
60372: CALL 65233 0 2
60376: ST_TO_ADDR
60377: GO 60348
60379: POP
60380: POP
// end ;
60381: LD_VAR 0 2
60385: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60386: LD_INT 0
60388: PPUSH
60389: PPUSH
60390: PPUSH
60391: PPUSH
60392: PPUSH
60393: PPUSH
// if not unit or not hexes then
60394: LD_VAR 0 1
60398: NOT
60399: IFTRUE 60408
60401: PUSH
60402: LD_VAR 0 2
60406: NOT
60407: OR
60408: IFFALSE 60412
// exit ;
60410: GO 60535
// dist := 9999 ;
60412: LD_ADDR_VAR 0 5
60416: PUSH
60417: LD_INT 9999
60419: ST_TO_ADDR
// for i = 1 to hexes do
60420: LD_ADDR_VAR 0 4
60424: PUSH
60425: DOUBLE
60426: LD_INT 1
60428: DEC
60429: ST_TO_ADDR
60430: LD_VAR 0 2
60434: PUSH
60435: FOR_TO
60436: IFFALSE 60523
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60438: LD_ADDR_VAR 0 6
60442: PUSH
60443: LD_VAR 0 1
60447: PPUSH
60448: LD_VAR 0 2
60452: PUSH
60453: LD_VAR 0 4
60457: ARRAY
60458: PUSH
60459: LD_INT 1
60461: ARRAY
60462: PPUSH
60463: LD_VAR 0 2
60467: PUSH
60468: LD_VAR 0 4
60472: ARRAY
60473: PUSH
60474: LD_INT 2
60476: ARRAY
60477: PPUSH
60478: CALL_OW 297
60482: ST_TO_ADDR
// if tdist < dist then
60483: LD_VAR 0 6
60487: PUSH
60488: LD_VAR 0 5
60492: LESS
60493: IFFALSE 60521
// begin hex := hexes [ i ] ;
60495: LD_ADDR_VAR 0 8
60499: PUSH
60500: LD_VAR 0 2
60504: PUSH
60505: LD_VAR 0 4
60509: ARRAY
60510: ST_TO_ADDR
// dist := tdist ;
60511: LD_ADDR_VAR 0 5
60515: PUSH
60516: LD_VAR 0 6
60520: ST_TO_ADDR
// end ; end ;
60521: GO 60435
60523: POP
60524: POP
// result := hex ;
60525: LD_ADDR_VAR 0 3
60529: PUSH
60530: LD_VAR 0 8
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 3
60539: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60540: LD_INT 0
60542: PPUSH
60543: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60544: LD_VAR 0 1
60548: NOT
60549: IFTRUE 60588
60551: PUSH
60552: LD_VAR 0 1
60556: PUSH
60557: LD_INT 21
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 23
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PPUSH
60581: CALL_OW 69
60585: IN
60586: NOT
60587: OR
60588: IFFALSE 60592
// exit ;
60590: GO 60639
// for i = 1 to 3 do
60592: LD_ADDR_VAR 0 3
60596: PUSH
60597: DOUBLE
60598: LD_INT 1
60600: DEC
60601: ST_TO_ADDR
60602: LD_INT 3
60604: PUSH
60605: FOR_TO
60606: IFFALSE 60637
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60608: LD_VAR 0 1
60612: PPUSH
60613: CALL_OW 250
60617: PPUSH
60618: LD_VAR 0 1
60622: PPUSH
60623: CALL_OW 251
60627: PPUSH
60628: LD_INT 1
60630: PPUSH
60631: CALL_OW 453
60635: GO 60605
60637: POP
60638: POP
// end ;
60639: LD_VAR 0 2
60643: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60644: LD_INT 0
60646: PPUSH
60647: PPUSH
60648: PPUSH
60649: PPUSH
60650: PPUSH
60651: PPUSH
// if not unit or not enemy_unit then
60652: LD_VAR 0 1
60656: NOT
60657: IFTRUE 60666
60659: PUSH
60660: LD_VAR 0 2
60664: NOT
60665: OR
60666: IFFALSE 60670
// exit ;
60668: GO 61151
// if GetLives ( i ) < 250 then
60670: LD_VAR 0 4
60674: PPUSH
60675: CALL_OW 256
60679: PUSH
60680: LD_INT 250
60682: LESS
60683: IFFALSE 60696
// begin ComAutodestruct ( i ) ;
60685: LD_VAR 0 4
60689: PPUSH
60690: CALL 60540 0 1
// exit ;
60694: GO 61151
// end ; x := GetX ( enemy_unit ) ;
60696: LD_ADDR_VAR 0 7
60700: PUSH
60701: LD_VAR 0 2
60705: PPUSH
60706: CALL_OW 250
60710: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60711: LD_ADDR_VAR 0 8
60715: PUSH
60716: LD_VAR 0 2
60720: PPUSH
60721: CALL_OW 251
60725: ST_TO_ADDR
// if not x or not y then
60726: LD_VAR 0 7
60730: NOT
60731: IFTRUE 60740
60733: PUSH
60734: LD_VAR 0 8
60738: NOT
60739: OR
60740: IFFALSE 60744
// exit ;
60742: GO 61151
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60744: LD_ADDR_VAR 0 6
60748: PUSH
60749: LD_VAR 0 7
60753: PPUSH
60754: LD_INT 0
60756: PPUSH
60757: LD_INT 4
60759: PPUSH
60760: CALL_OW 272
60764: PUSH
60765: LD_VAR 0 8
60769: PPUSH
60770: LD_INT 0
60772: PPUSH
60773: LD_INT 4
60775: PPUSH
60776: CALL_OW 273
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_VAR 0 7
60789: PPUSH
60790: LD_INT 1
60792: PPUSH
60793: LD_INT 4
60795: PPUSH
60796: CALL_OW 272
60800: PUSH
60801: LD_VAR 0 8
60805: PPUSH
60806: LD_INT 1
60808: PPUSH
60809: LD_INT 4
60811: PPUSH
60812: CALL_OW 273
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_VAR 0 7
60825: PPUSH
60826: LD_INT 2
60828: PPUSH
60829: LD_INT 4
60831: PPUSH
60832: CALL_OW 272
60836: PUSH
60837: LD_VAR 0 8
60841: PPUSH
60842: LD_INT 2
60844: PPUSH
60845: LD_INT 4
60847: PPUSH
60848: CALL_OW 273
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_VAR 0 7
60861: PPUSH
60862: LD_INT 3
60864: PPUSH
60865: LD_INT 4
60867: PPUSH
60868: CALL_OW 272
60872: PUSH
60873: LD_VAR 0 8
60877: PPUSH
60878: LD_INT 3
60880: PPUSH
60881: LD_INT 4
60883: PPUSH
60884: CALL_OW 273
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_VAR 0 7
60897: PPUSH
60898: LD_INT 4
60900: PPUSH
60901: LD_INT 4
60903: PPUSH
60904: CALL_OW 272
60908: PUSH
60909: LD_VAR 0 8
60913: PPUSH
60914: LD_INT 4
60916: PPUSH
60917: LD_INT 4
60919: PPUSH
60920: CALL_OW 273
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_VAR 0 7
60933: PPUSH
60934: LD_INT 5
60936: PPUSH
60937: LD_INT 4
60939: PPUSH
60940: CALL_OW 272
60944: PUSH
60945: LD_VAR 0 8
60949: PPUSH
60950: LD_INT 5
60952: PPUSH
60953: LD_INT 4
60955: PPUSH
60956: CALL_OW 273
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// for i = tmp downto 1 do
60973: LD_ADDR_VAR 0 4
60977: PUSH
60978: DOUBLE
60979: LD_VAR 0 6
60983: INC
60984: ST_TO_ADDR
60985: LD_INT 1
60987: PUSH
60988: FOR_DOWNTO
60989: IFFALSE 61092
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60991: LD_VAR 0 6
60995: PUSH
60996: LD_VAR 0 4
61000: ARRAY
61001: PUSH
61002: LD_INT 1
61004: ARRAY
61005: PPUSH
61006: LD_VAR 0 6
61010: PUSH
61011: LD_VAR 0 4
61015: ARRAY
61016: PUSH
61017: LD_INT 2
61019: ARRAY
61020: PPUSH
61021: CALL_OW 488
61025: NOT
61026: IFTRUE 61068
61028: PUSH
61029: LD_VAR 0 6
61033: PUSH
61034: LD_VAR 0 4
61038: ARRAY
61039: PUSH
61040: LD_INT 1
61042: ARRAY
61043: PPUSH
61044: LD_VAR 0 6
61048: PUSH
61049: LD_VAR 0 4
61053: ARRAY
61054: PUSH
61055: LD_INT 2
61057: ARRAY
61058: PPUSH
61059: CALL_OW 428
61063: PUSH
61064: LD_INT 0
61066: NONEQUAL
61067: OR
61068: IFFALSE 61090
// tmp := Delete ( tmp , i ) ;
61070: LD_ADDR_VAR 0 6
61074: PUSH
61075: LD_VAR 0 6
61079: PPUSH
61080: LD_VAR 0 4
61084: PPUSH
61085: CALL_OW 3
61089: ST_TO_ADDR
61090: GO 60988
61092: POP
61093: POP
// j := GetClosestHex ( unit , tmp ) ;
61094: LD_ADDR_VAR 0 5
61098: PUSH
61099: LD_VAR 0 1
61103: PPUSH
61104: LD_VAR 0 6
61108: PPUSH
61109: CALL 60386 0 2
61113: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61114: LD_VAR 0 1
61118: PPUSH
61119: LD_VAR 0 5
61123: PUSH
61124: LD_INT 1
61126: ARRAY
61127: PPUSH
61128: LD_VAR 0 5
61132: PUSH
61133: LD_INT 2
61135: ARRAY
61136: PPUSH
61137: CALL_OW 111
// result := j ;
61141: LD_ADDR_VAR 0 3
61145: PUSH
61146: LD_VAR 0 5
61150: ST_TO_ADDR
// end ;
61151: LD_VAR 0 3
61155: RET
// export function PrepareApemanSoldier ( ) ; begin
61156: LD_INT 0
61158: PPUSH
// uc_nation := 0 ;
61159: LD_ADDR_OWVAR 21
61163: PUSH
61164: LD_INT 0
61166: ST_TO_ADDR
// hc_sex := sex_male ;
61167: LD_ADDR_OWVAR 27
61171: PUSH
61172: LD_INT 1
61174: ST_TO_ADDR
// hc_name :=  ;
61175: LD_ADDR_OWVAR 26
61179: PUSH
61180: LD_STRING 
61182: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61183: LD_ADDR_OWVAR 28
61187: PUSH
61188: LD_INT 15
61190: ST_TO_ADDR
// hc_gallery :=  ;
61191: LD_ADDR_OWVAR 33
61195: PUSH
61196: LD_STRING 
61198: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61199: LD_ADDR_OWVAR 31
61203: PUSH
61204: LD_INT 0
61206: PPUSH
61207: LD_INT 3
61209: PPUSH
61210: CALL_OW 12
61214: PUSH
61215: LD_INT 0
61217: PPUSH
61218: LD_INT 3
61220: PPUSH
61221: CALL_OW 12
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61238: LD_ADDR_OWVAR 29
61242: PUSH
61243: LD_INT 10
61245: PUSH
61246: LD_INT 12
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: ST_TO_ADDR
// end ;
61253: LD_VAR 0 1
61257: RET
// export function PrepareApemanEngineer ( ) ; begin
61258: LD_INT 0
61260: PPUSH
// uc_nation := 0 ;
61261: LD_ADDR_OWVAR 21
61265: PUSH
61266: LD_INT 0
61268: ST_TO_ADDR
// hc_sex := sex_male ;
61269: LD_ADDR_OWVAR 27
61273: PUSH
61274: LD_INT 1
61276: ST_TO_ADDR
// hc_name :=  ;
61277: LD_ADDR_OWVAR 26
61281: PUSH
61282: LD_STRING 
61284: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61285: LD_ADDR_OWVAR 28
61289: PUSH
61290: LD_INT 16
61292: ST_TO_ADDR
// hc_gallery :=  ;
61293: LD_ADDR_OWVAR 33
61297: PUSH
61298: LD_STRING 
61300: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61301: LD_ADDR_OWVAR 31
61305: PUSH
61306: LD_INT 0
61308: PPUSH
61309: LD_INT 3
61311: PPUSH
61312: CALL_OW 12
61316: PUSH
61317: LD_INT 0
61319: PPUSH
61320: LD_INT 3
61322: PPUSH
61323: CALL_OW 12
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61340: LD_ADDR_OWVAR 29
61344: PUSH
61345: LD_INT 10
61347: PUSH
61348: LD_INT 12
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// end ;
61355: LD_VAR 0 1
61359: RET
// export function PrepareApeman ( agressivity ) ; begin
61360: LD_INT 0
61362: PPUSH
// uc_side := 0 ;
61363: LD_ADDR_OWVAR 20
61367: PUSH
61368: LD_INT 0
61370: ST_TO_ADDR
// uc_nation := 0 ;
61371: LD_ADDR_OWVAR 21
61375: PUSH
61376: LD_INT 0
61378: ST_TO_ADDR
// hc_sex := sex_male ;
61379: LD_ADDR_OWVAR 27
61383: PUSH
61384: LD_INT 1
61386: ST_TO_ADDR
// hc_class := class_apeman ;
61387: LD_ADDR_OWVAR 28
61391: PUSH
61392: LD_INT 12
61394: ST_TO_ADDR
// hc_gallery :=  ;
61395: LD_ADDR_OWVAR 33
61399: PUSH
61400: LD_STRING 
61402: ST_TO_ADDR
// hc_name :=  ;
61403: LD_ADDR_OWVAR 26
61407: PUSH
61408: LD_STRING 
61410: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61411: LD_ADDR_OWVAR 29
61415: PUSH
61416: LD_INT 10
61418: PUSH
61419: LD_INT 12
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: ST_TO_ADDR
// if agressivity = 0 then
61426: LD_VAR 0 1
61430: PUSH
61431: LD_INT 0
61433: EQUAL
61434: IFFALSE 61446
// hc_agressivity := 0 else
61436: LD_ADDR_OWVAR 35
61440: PUSH
61441: LD_INT 0
61443: ST_TO_ADDR
61444: GO 61467
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61446: LD_ADDR_OWVAR 35
61450: PUSH
61451: LD_VAR 0 1
61455: NEG
61456: PPUSH
61457: LD_VAR 0 1
61461: PPUSH
61462: CALL_OW 12
61466: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61467: LD_ADDR_OWVAR 31
61471: PUSH
61472: LD_INT 0
61474: PPUSH
61475: LD_INT 3
61477: PPUSH
61478: CALL_OW 12
61482: PUSH
61483: LD_INT 0
61485: PPUSH
61486: LD_INT 3
61488: PPUSH
61489: CALL_OW 12
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: ST_TO_ADDR
// end ;
61506: LD_VAR 0 2
61510: RET
// export function PrepareTiger ( agressivity ) ; begin
61511: LD_INT 0
61513: PPUSH
// uc_side := 0 ;
61514: LD_ADDR_OWVAR 20
61518: PUSH
61519: LD_INT 0
61521: ST_TO_ADDR
// uc_nation := 0 ;
61522: LD_ADDR_OWVAR 21
61526: PUSH
61527: LD_INT 0
61529: ST_TO_ADDR
// InitHc ;
61530: CALL_OW 19
// hc_class := class_tiger ;
61534: LD_ADDR_OWVAR 28
61538: PUSH
61539: LD_INT 14
61541: ST_TO_ADDR
// hc_gallery :=  ;
61542: LD_ADDR_OWVAR 33
61546: PUSH
61547: LD_STRING 
61549: ST_TO_ADDR
// hc_name :=  ;
61550: LD_ADDR_OWVAR 26
61554: PUSH
61555: LD_STRING 
61557: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61558: LD_ADDR_OWVAR 35
61562: PUSH
61563: LD_VAR 0 1
61567: NEG
61568: PPUSH
61569: LD_VAR 0 1
61573: PPUSH
61574: CALL_OW 12
61578: ST_TO_ADDR
// end ;
61579: LD_VAR 0 2
61583: RET
// export function PrepareEnchidna ( ) ; begin
61584: LD_INT 0
61586: PPUSH
// uc_side := 0 ;
61587: LD_ADDR_OWVAR 20
61591: PUSH
61592: LD_INT 0
61594: ST_TO_ADDR
// uc_nation := 0 ;
61595: LD_ADDR_OWVAR 21
61599: PUSH
61600: LD_INT 0
61602: ST_TO_ADDR
// InitHc ;
61603: CALL_OW 19
// hc_class := class_baggie ;
61607: LD_ADDR_OWVAR 28
61611: PUSH
61612: LD_INT 13
61614: ST_TO_ADDR
// hc_gallery :=  ;
61615: LD_ADDR_OWVAR 33
61619: PUSH
61620: LD_STRING 
61622: ST_TO_ADDR
// hc_name :=  ;
61623: LD_ADDR_OWVAR 26
61627: PUSH
61628: LD_STRING 
61630: ST_TO_ADDR
// end ;
61631: LD_VAR 0 1
61635: RET
// export function PrepareFrog ( ) ; begin
61636: LD_INT 0
61638: PPUSH
// uc_side := 0 ;
61639: LD_ADDR_OWVAR 20
61643: PUSH
61644: LD_INT 0
61646: ST_TO_ADDR
// uc_nation := 0 ;
61647: LD_ADDR_OWVAR 21
61651: PUSH
61652: LD_INT 0
61654: ST_TO_ADDR
// InitHc ;
61655: CALL_OW 19
// hc_class := class_frog ;
61659: LD_ADDR_OWVAR 28
61663: PUSH
61664: LD_INT 19
61666: ST_TO_ADDR
// hc_gallery :=  ;
61667: LD_ADDR_OWVAR 33
61671: PUSH
61672: LD_STRING 
61674: ST_TO_ADDR
// hc_name :=  ;
61675: LD_ADDR_OWVAR 26
61679: PUSH
61680: LD_STRING 
61682: ST_TO_ADDR
// end ;
61683: LD_VAR 0 1
61687: RET
// export function PrepareFish ( ) ; begin
61688: LD_INT 0
61690: PPUSH
// uc_side := 0 ;
61691: LD_ADDR_OWVAR 20
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// uc_nation := 0 ;
61699: LD_ADDR_OWVAR 21
61703: PUSH
61704: LD_INT 0
61706: ST_TO_ADDR
// InitHc ;
61707: CALL_OW 19
// hc_class := class_fish ;
61711: LD_ADDR_OWVAR 28
61715: PUSH
61716: LD_INT 20
61718: ST_TO_ADDR
// hc_gallery :=  ;
61719: LD_ADDR_OWVAR 33
61723: PUSH
61724: LD_STRING 
61726: ST_TO_ADDR
// hc_name :=  ;
61727: LD_ADDR_OWVAR 26
61731: PUSH
61732: LD_STRING 
61734: ST_TO_ADDR
// end ;
61735: LD_VAR 0 1
61739: RET
// export function PrepareBird ( ) ; begin
61740: LD_INT 0
61742: PPUSH
// uc_side := 0 ;
61743: LD_ADDR_OWVAR 20
61747: PUSH
61748: LD_INT 0
61750: ST_TO_ADDR
// uc_nation := 0 ;
61751: LD_ADDR_OWVAR 21
61755: PUSH
61756: LD_INT 0
61758: ST_TO_ADDR
// InitHc ;
61759: CALL_OW 19
// hc_class := class_phororhacos ;
61763: LD_ADDR_OWVAR 28
61767: PUSH
61768: LD_INT 18
61770: ST_TO_ADDR
// hc_gallery :=  ;
61771: LD_ADDR_OWVAR 33
61775: PUSH
61776: LD_STRING 
61778: ST_TO_ADDR
// hc_name :=  ;
61779: LD_ADDR_OWVAR 26
61783: PUSH
61784: LD_STRING 
61786: ST_TO_ADDR
// end ;
61787: LD_VAR 0 1
61791: RET
// export function PrepareHorse ( ) ; begin
61792: LD_INT 0
61794: PPUSH
// uc_side := 0 ;
61795: LD_ADDR_OWVAR 20
61799: PUSH
61800: LD_INT 0
61802: ST_TO_ADDR
// uc_nation := 0 ;
61803: LD_ADDR_OWVAR 21
61807: PUSH
61808: LD_INT 0
61810: ST_TO_ADDR
// InitHc ;
61811: CALL_OW 19
// hc_class := class_horse ;
61815: LD_ADDR_OWVAR 28
61819: PUSH
61820: LD_INT 21
61822: ST_TO_ADDR
// hc_gallery :=  ;
61823: LD_ADDR_OWVAR 33
61827: PUSH
61828: LD_STRING 
61830: ST_TO_ADDR
// hc_name :=  ;
61831: LD_ADDR_OWVAR 26
61835: PUSH
61836: LD_STRING 
61838: ST_TO_ADDR
// end ;
61839: LD_VAR 0 1
61843: RET
// export function PrepareMastodont ( ) ; begin
61844: LD_INT 0
61846: PPUSH
// uc_side := 0 ;
61847: LD_ADDR_OWVAR 20
61851: PUSH
61852: LD_INT 0
61854: ST_TO_ADDR
// uc_nation := 0 ;
61855: LD_ADDR_OWVAR 21
61859: PUSH
61860: LD_INT 0
61862: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61863: LD_ADDR_OWVAR 37
61867: PUSH
61868: LD_INT 31
61870: ST_TO_ADDR
// vc_control := control_rider ;
61871: LD_ADDR_OWVAR 38
61875: PUSH
61876: LD_INT 4
61878: ST_TO_ADDR
// end ;
61879: LD_VAR 0 1
61883: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61884: LD_INT 0
61886: PPUSH
61887: PPUSH
61888: PPUSH
// uc_side = 0 ;
61889: LD_ADDR_OWVAR 20
61893: PUSH
61894: LD_INT 0
61896: ST_TO_ADDR
// uc_nation = 0 ;
61897: LD_ADDR_OWVAR 21
61901: PUSH
61902: LD_INT 0
61904: ST_TO_ADDR
// InitHc_All ( ) ;
61905: CALL_OW 584
// InitVc ;
61909: CALL_OW 20
// if mastodonts then
61913: LD_VAR 0 6
61917: IFFALSE 61984
// for i = 1 to mastodonts do
61919: LD_ADDR_VAR 0 11
61923: PUSH
61924: DOUBLE
61925: LD_INT 1
61927: DEC
61928: ST_TO_ADDR
61929: LD_VAR 0 6
61933: PUSH
61934: FOR_TO
61935: IFFALSE 61982
// begin vc_chassis := 31 ;
61937: LD_ADDR_OWVAR 37
61941: PUSH
61942: LD_INT 31
61944: ST_TO_ADDR
// vc_control := control_rider ;
61945: LD_ADDR_OWVAR 38
61949: PUSH
61950: LD_INT 4
61952: ST_TO_ADDR
// animal := CreateVehicle ;
61953: LD_ADDR_VAR 0 12
61957: PUSH
61958: CALL_OW 45
61962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61963: LD_VAR 0 12
61967: PPUSH
61968: LD_VAR 0 8
61972: PPUSH
61973: LD_INT 0
61975: PPUSH
61976: CALL 64126 0 3
// end ;
61980: GO 61934
61982: POP
61983: POP
// if horses then
61984: LD_VAR 0 5
61988: IFFALSE 62055
// for i = 1 to horses do
61990: LD_ADDR_VAR 0 11
61994: PUSH
61995: DOUBLE
61996: LD_INT 1
61998: DEC
61999: ST_TO_ADDR
62000: LD_VAR 0 5
62004: PUSH
62005: FOR_TO
62006: IFFALSE 62053
// begin hc_class := 21 ;
62008: LD_ADDR_OWVAR 28
62012: PUSH
62013: LD_INT 21
62015: ST_TO_ADDR
// hc_gallery :=  ;
62016: LD_ADDR_OWVAR 33
62020: PUSH
62021: LD_STRING 
62023: ST_TO_ADDR
// animal := CreateHuman ;
62024: LD_ADDR_VAR 0 12
62028: PUSH
62029: CALL_OW 44
62033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62034: LD_VAR 0 12
62038: PPUSH
62039: LD_VAR 0 8
62043: PPUSH
62044: LD_INT 0
62046: PPUSH
62047: CALL 64126 0 3
// end ;
62051: GO 62005
62053: POP
62054: POP
// if birds then
62055: LD_VAR 0 1
62059: IFFALSE 62126
// for i = 1 to birds do
62061: LD_ADDR_VAR 0 11
62065: PUSH
62066: DOUBLE
62067: LD_INT 1
62069: DEC
62070: ST_TO_ADDR
62071: LD_VAR 0 1
62075: PUSH
62076: FOR_TO
62077: IFFALSE 62124
// begin hc_class := 18 ;
62079: LD_ADDR_OWVAR 28
62083: PUSH
62084: LD_INT 18
62086: ST_TO_ADDR
// hc_gallery =  ;
62087: LD_ADDR_OWVAR 33
62091: PUSH
62092: LD_STRING 
62094: ST_TO_ADDR
// animal := CreateHuman ;
62095: LD_ADDR_VAR 0 12
62099: PUSH
62100: CALL_OW 44
62104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62105: LD_VAR 0 12
62109: PPUSH
62110: LD_VAR 0 8
62114: PPUSH
62115: LD_INT 0
62117: PPUSH
62118: CALL 64126 0 3
// end ;
62122: GO 62076
62124: POP
62125: POP
// if tigers then
62126: LD_VAR 0 2
62130: IFFALSE 62214
// for i = 1 to tigers do
62132: LD_ADDR_VAR 0 11
62136: PUSH
62137: DOUBLE
62138: LD_INT 1
62140: DEC
62141: ST_TO_ADDR
62142: LD_VAR 0 2
62146: PUSH
62147: FOR_TO
62148: IFFALSE 62212
// begin hc_class = class_tiger ;
62150: LD_ADDR_OWVAR 28
62154: PUSH
62155: LD_INT 14
62157: ST_TO_ADDR
// hc_gallery =  ;
62158: LD_ADDR_OWVAR 33
62162: PUSH
62163: LD_STRING 
62165: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62166: LD_ADDR_OWVAR 35
62170: PUSH
62171: LD_INT 7
62173: NEG
62174: PPUSH
62175: LD_INT 7
62177: PPUSH
62178: CALL_OW 12
62182: ST_TO_ADDR
// animal := CreateHuman ;
62183: LD_ADDR_VAR 0 12
62187: PUSH
62188: CALL_OW 44
62192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62193: LD_VAR 0 12
62197: PPUSH
62198: LD_VAR 0 8
62202: PPUSH
62203: LD_INT 0
62205: PPUSH
62206: CALL 64126 0 3
// end ;
62210: GO 62147
62212: POP
62213: POP
// if apemans then
62214: LD_VAR 0 3
62218: IFFALSE 62341
// for i = 1 to apemans do
62220: LD_ADDR_VAR 0 11
62224: PUSH
62225: DOUBLE
62226: LD_INT 1
62228: DEC
62229: ST_TO_ADDR
62230: LD_VAR 0 3
62234: PUSH
62235: FOR_TO
62236: IFFALSE 62339
// begin hc_class = class_apeman ;
62238: LD_ADDR_OWVAR 28
62242: PUSH
62243: LD_INT 12
62245: ST_TO_ADDR
// hc_gallery =  ;
62246: LD_ADDR_OWVAR 33
62250: PUSH
62251: LD_STRING 
62253: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62254: LD_ADDR_OWVAR 35
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PPUSH
62263: LD_INT 2
62265: PPUSH
62266: CALL_OW 12
62270: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62271: LD_ADDR_OWVAR 31
62275: PUSH
62276: LD_INT 1
62278: PPUSH
62279: LD_INT 3
62281: PPUSH
62282: CALL_OW 12
62286: PUSH
62287: LD_INT 1
62289: PPUSH
62290: LD_INT 3
62292: PPUSH
62293: CALL_OW 12
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: ST_TO_ADDR
// animal := CreateHuman ;
62310: LD_ADDR_VAR 0 12
62314: PUSH
62315: CALL_OW 44
62319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62320: LD_VAR 0 12
62324: PPUSH
62325: LD_VAR 0 8
62329: PPUSH
62330: LD_INT 0
62332: PPUSH
62333: CALL 64126 0 3
// end ;
62337: GO 62235
62339: POP
62340: POP
// if enchidnas then
62341: LD_VAR 0 4
62345: IFFALSE 62412
// for i = 1 to enchidnas do
62347: LD_ADDR_VAR 0 11
62351: PUSH
62352: DOUBLE
62353: LD_INT 1
62355: DEC
62356: ST_TO_ADDR
62357: LD_VAR 0 4
62361: PUSH
62362: FOR_TO
62363: IFFALSE 62410
// begin hc_class = 13 ;
62365: LD_ADDR_OWVAR 28
62369: PUSH
62370: LD_INT 13
62372: ST_TO_ADDR
// hc_gallery =  ;
62373: LD_ADDR_OWVAR 33
62377: PUSH
62378: LD_STRING 
62380: ST_TO_ADDR
// animal := CreateHuman ;
62381: LD_ADDR_VAR 0 12
62385: PUSH
62386: CALL_OW 44
62390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62391: LD_VAR 0 12
62395: PPUSH
62396: LD_VAR 0 8
62400: PPUSH
62401: LD_INT 0
62403: PPUSH
62404: CALL 64126 0 3
// end ;
62408: GO 62362
62410: POP
62411: POP
// if fishes then
62412: LD_VAR 0 7
62416: IFFALSE 62483
// for i = 1 to fishes do
62418: LD_ADDR_VAR 0 11
62422: PUSH
62423: DOUBLE
62424: LD_INT 1
62426: DEC
62427: ST_TO_ADDR
62428: LD_VAR 0 7
62432: PUSH
62433: FOR_TO
62434: IFFALSE 62481
// begin hc_class = 20 ;
62436: LD_ADDR_OWVAR 28
62440: PUSH
62441: LD_INT 20
62443: ST_TO_ADDR
// hc_gallery =  ;
62444: LD_ADDR_OWVAR 33
62448: PUSH
62449: LD_STRING 
62451: ST_TO_ADDR
// animal := CreateHuman ;
62452: LD_ADDR_VAR 0 12
62456: PUSH
62457: CALL_OW 44
62461: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62462: LD_VAR 0 12
62466: PPUSH
62467: LD_VAR 0 9
62471: PPUSH
62472: LD_INT 0
62474: PPUSH
62475: CALL 64126 0 3
// end ;
62479: GO 62433
62481: POP
62482: POP
// end ;
62483: LD_VAR 0 10
62487: RET
// export function WantHeal ( sci , unit ) ; begin
62488: LD_INT 0
62490: PPUSH
// if GetTaskList ( sci ) > 0 then
62491: LD_VAR 0 1
62495: PPUSH
62496: CALL_OW 437
62500: PUSH
62501: LD_INT 0
62503: GREATER
62504: IFFALSE 62576
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62506: LD_VAR 0 1
62510: PPUSH
62511: CALL_OW 437
62515: PUSH
62516: LD_INT 1
62518: ARRAY
62519: PUSH
62520: LD_INT 1
62522: ARRAY
62523: PUSH
62524: LD_STRING l
62526: EQUAL
62527: IFFALSE 62554
62529: PUSH
62530: LD_VAR 0 1
62534: PPUSH
62535: CALL_OW 437
62539: PUSH
62540: LD_INT 1
62542: ARRAY
62543: PUSH
62544: LD_INT 4
62546: ARRAY
62547: PUSH
62548: LD_VAR 0 2
62552: EQUAL
62553: AND
62554: IFFALSE 62566
// result := true else
62556: LD_ADDR_VAR 0 3
62560: PUSH
62561: LD_INT 1
62563: ST_TO_ADDR
62564: GO 62574
// result := false ;
62566: LD_ADDR_VAR 0 3
62570: PUSH
62571: LD_INT 0
62573: ST_TO_ADDR
// end else
62574: GO 62584
// result := false ;
62576: LD_ADDR_VAR 0 3
62580: PUSH
62581: LD_INT 0
62583: ST_TO_ADDR
// end ;
62584: LD_VAR 0 3
62588: RET
// export function HealTarget ( sci ) ; begin
62589: LD_INT 0
62591: PPUSH
// if not sci then
62592: LD_VAR 0 1
62596: NOT
62597: IFFALSE 62601
// exit ;
62599: GO 62666
// result := 0 ;
62601: LD_ADDR_VAR 0 2
62605: PUSH
62606: LD_INT 0
62608: ST_TO_ADDR
// if GetTaskList ( sci ) then
62609: LD_VAR 0 1
62613: PPUSH
62614: CALL_OW 437
62618: IFFALSE 62666
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62620: LD_VAR 0 1
62624: PPUSH
62625: CALL_OW 437
62629: PUSH
62630: LD_INT 1
62632: ARRAY
62633: PUSH
62634: LD_INT 1
62636: ARRAY
62637: PUSH
62638: LD_STRING l
62640: EQUAL
62641: IFFALSE 62666
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62643: LD_ADDR_VAR 0 2
62647: PUSH
62648: LD_VAR 0 1
62652: PPUSH
62653: CALL_OW 437
62657: PUSH
62658: LD_INT 1
62660: ARRAY
62661: PUSH
62662: LD_INT 4
62664: ARRAY
62665: ST_TO_ADDR
// end ;
62666: LD_VAR 0 2
62670: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62671: LD_INT 0
62673: PPUSH
62674: PPUSH
62675: PPUSH
62676: PPUSH
// if not base_units then
62677: LD_VAR 0 1
62681: NOT
62682: IFFALSE 62686
// exit ;
62684: GO 62773
// result := false ;
62686: LD_ADDR_VAR 0 2
62690: PUSH
62691: LD_INT 0
62693: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62694: LD_ADDR_VAR 0 5
62698: PUSH
62699: LD_VAR 0 1
62703: PPUSH
62704: LD_INT 21
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PPUSH
62714: CALL_OW 72
62718: ST_TO_ADDR
// if not tmp then
62719: LD_VAR 0 5
62723: NOT
62724: IFFALSE 62728
// exit ;
62726: GO 62773
// for i in tmp do
62728: LD_ADDR_VAR 0 3
62732: PUSH
62733: LD_VAR 0 5
62737: PUSH
62738: FOR_IN
62739: IFFALSE 62771
// begin result := EnemyInRange ( i , 22 ) ;
62741: LD_ADDR_VAR 0 2
62745: PUSH
62746: LD_VAR 0 3
62750: PPUSH
62751: LD_INT 22
62753: PPUSH
62754: CALL 60188 0 2
62758: ST_TO_ADDR
// if result then
62759: LD_VAR 0 2
62763: IFFALSE 62769
// exit ;
62765: POP
62766: POP
62767: GO 62773
// end ;
62769: GO 62738
62771: POP
62772: POP
// end ;
62773: LD_VAR 0 2
62777: RET
// export function FilterByTag ( units , tag ) ; begin
62778: LD_INT 0
62780: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62781: LD_ADDR_VAR 0 3
62785: PUSH
62786: LD_VAR 0 1
62790: PPUSH
62791: LD_INT 120
62793: PUSH
62794: LD_VAR 0 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PPUSH
62803: CALL_OW 72
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 3
62812: RET
// export function IsDriver ( un ) ; begin
62813: LD_INT 0
62815: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62816: LD_ADDR_VAR 0 2
62820: PUSH
62821: LD_VAR 0 1
62825: PUSH
62826: LD_INT 55
62828: PUSH
62829: EMPTY
62830: LIST
62831: PPUSH
62832: CALL_OW 69
62836: IN
62837: ST_TO_ADDR
// end ;
62838: LD_VAR 0 2
62842: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62843: LD_INT 0
62845: PPUSH
62846: PPUSH
// list := [ ] ;
62847: LD_ADDR_VAR 0 5
62851: PUSH
62852: EMPTY
62853: ST_TO_ADDR
// case d of 0 :
62854: LD_VAR 0 3
62858: PUSH
62859: LD_INT 0
62861: DOUBLE
62862: EQUAL
62863: IFTRUE 62867
62865: GO 63000
62867: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62868: LD_ADDR_VAR 0 5
62872: PUSH
62873: LD_VAR 0 1
62877: PUSH
62878: LD_INT 4
62880: MINUS
62881: PUSH
62882: LD_VAR 0 2
62886: PUSH
62887: LD_INT 4
62889: MINUS
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: PUSH
62899: LD_VAR 0 1
62903: PUSH
62904: LD_INT 3
62906: MINUS
62907: PUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: PUSH
62921: LD_VAR 0 1
62925: PUSH
62926: LD_INT 4
62928: PLUS
62929: PUSH
62930: LD_VAR 0 2
62934: PUSH
62935: LD_INT 4
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: LIST
62942: PUSH
62943: LD_VAR 0 1
62947: PUSH
62948: LD_INT 3
62950: PLUS
62951: PUSH
62952: LD_VAR 0 2
62956: PUSH
62957: LD_INT 3
62959: PLUS
62960: PUSH
62961: LD_INT 5
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: PUSH
62969: LD_VAR 0 1
62973: PUSH
62974: LD_VAR 0 2
62978: PUSH
62979: LD_INT 4
62981: PLUS
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: LIST
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: ST_TO_ADDR
// end ; 1 :
62998: GO 63698
63000: LD_INT 1
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63008
63006: GO 63141
63008: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63009: LD_ADDR_VAR 0 5
63013: PUSH
63014: LD_VAR 0 1
63018: PUSH
63019: LD_VAR 0 2
63023: PUSH
63024: LD_INT 4
63026: MINUS
63027: PUSH
63028: LD_INT 3
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: PUSH
63036: LD_VAR 0 1
63040: PUSH
63041: LD_INT 3
63043: MINUS
63044: PUSH
63045: LD_VAR 0 2
63049: PUSH
63050: LD_INT 3
63052: MINUS
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: PUSH
63062: LD_VAR 0 1
63066: PUSH
63067: LD_INT 4
63069: MINUS
63070: PUSH
63071: LD_VAR 0 2
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: PUSH
63084: LD_VAR 0 1
63088: PUSH
63089: LD_VAR 0 2
63093: PUSH
63094: LD_INT 3
63096: PLUS
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 4
63113: PLUS
63114: PUSH
63115: LD_VAR 0 2
63119: PUSH
63120: LD_INT 4
63122: PLUS
63123: PUSH
63124: LD_INT 5
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: ST_TO_ADDR
// end ; 2 :
63139: GO 63698
63141: LD_INT 2
63143: DOUBLE
63144: EQUAL
63145: IFTRUE 63149
63147: GO 63278
63149: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63150: LD_ADDR_VAR 0 5
63154: PUSH
63155: LD_VAR 0 1
63159: PUSH
63160: LD_VAR 0 2
63164: PUSH
63165: LD_INT 3
63167: MINUS
63168: PUSH
63169: LD_INT 3
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: PUSH
63177: LD_VAR 0 1
63181: PUSH
63182: LD_INT 4
63184: PLUS
63185: PUSH
63186: LD_VAR 0 2
63190: PUSH
63191: LD_INT 4
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: LIST
63198: PUSH
63199: LD_VAR 0 1
63203: PUSH
63204: LD_VAR 0 2
63208: PUSH
63209: LD_INT 4
63211: PLUS
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: PUSH
63221: LD_VAR 0 1
63225: PUSH
63226: LD_INT 3
63228: MINUS
63229: PUSH
63230: LD_VAR 0 2
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 4
63250: MINUS
63251: PUSH
63252: LD_VAR 0 2
63256: PUSH
63257: LD_INT 4
63259: MINUS
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: LIST
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: ST_TO_ADDR
// end ; 3 :
63276: GO 63698
63278: LD_INT 3
63280: DOUBLE
63281: EQUAL
63282: IFTRUE 63286
63284: GO 63419
63286: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63287: LD_ADDR_VAR 0 5
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: LD_INT 3
63299: PLUS
63300: PUSH
63301: LD_VAR 0 2
63305: PUSH
63306: LD_INT 4
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: PUSH
63314: LD_VAR 0 1
63318: PUSH
63319: LD_INT 4
63321: PLUS
63322: PUSH
63323: LD_VAR 0 2
63327: PUSH
63328: LD_INT 4
63330: PLUS
63331: PUSH
63332: LD_INT 5
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: PUSH
63340: LD_VAR 0 1
63344: PUSH
63345: LD_INT 4
63347: MINUS
63348: PUSH
63349: LD_VAR 0 2
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: LD_VAR 0 2
63371: PUSH
63372: LD_INT 4
63374: MINUS
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: LIST
63383: PUSH
63384: LD_VAR 0 1
63388: PUSH
63389: LD_INT 3
63391: MINUS
63392: PUSH
63393: LD_VAR 0 2
63397: PUSH
63398: LD_INT 3
63400: MINUS
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: ST_TO_ADDR
// end ; 4 :
63417: GO 63698
63419: LD_INT 4
63421: DOUBLE
63422: EQUAL
63423: IFTRUE 63427
63425: GO 63560
63427: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63428: LD_ADDR_VAR 0 5
63432: PUSH
63433: LD_VAR 0 1
63437: PUSH
63438: LD_VAR 0 2
63442: PUSH
63443: LD_INT 4
63445: PLUS
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: LIST
63454: PUSH
63455: LD_VAR 0 1
63459: PUSH
63460: LD_INT 3
63462: PLUS
63463: PUSH
63464: LD_VAR 0 2
63468: PUSH
63469: LD_INT 3
63471: PLUS
63472: PUSH
63473: LD_INT 5
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: LIST
63480: PUSH
63481: LD_VAR 0 1
63485: PUSH
63486: LD_INT 4
63488: PLUS
63489: PUSH
63490: LD_VAR 0 2
63494: PUSH
63495: LD_INT 4
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: PUSH
63503: LD_VAR 0 1
63507: PUSH
63508: LD_VAR 0 2
63512: PUSH
63513: LD_INT 3
63515: MINUS
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: LIST
63524: PUSH
63525: LD_VAR 0 1
63529: PUSH
63530: LD_INT 4
63532: MINUS
63533: PUSH
63534: LD_VAR 0 2
63538: PUSH
63539: LD_INT 4
63541: MINUS
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: ST_TO_ADDR
// end ; 5 :
63558: GO 63698
63560: LD_INT 5
63562: DOUBLE
63563: EQUAL
63564: IFTRUE 63568
63566: GO 63697
63568: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63569: LD_ADDR_VAR 0 5
63573: PUSH
63574: LD_VAR 0 1
63578: PUSH
63579: LD_INT 4
63581: MINUS
63582: PUSH
63583: LD_VAR 0 2
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: PUSH
63596: LD_VAR 0 1
63600: PUSH
63601: LD_VAR 0 2
63605: PUSH
63606: LD_INT 4
63608: MINUS
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: LIST
63617: PUSH
63618: LD_VAR 0 1
63622: PUSH
63623: LD_INT 4
63625: PLUS
63626: PUSH
63627: LD_VAR 0 2
63631: PUSH
63632: LD_INT 4
63634: PLUS
63635: PUSH
63636: LD_INT 5
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: LIST
63643: PUSH
63644: LD_VAR 0 1
63648: PUSH
63649: LD_INT 3
63651: PLUS
63652: PUSH
63653: LD_VAR 0 2
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: LIST
63665: PUSH
63666: LD_VAR 0 1
63670: PUSH
63671: LD_VAR 0 2
63675: PUSH
63676: LD_INT 3
63678: PLUS
63679: PUSH
63680: LD_INT 0
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: ST_TO_ADDR
// end ; end ;
63695: GO 63698
63697: POP
// result := list ;
63698: LD_ADDR_VAR 0 4
63702: PUSH
63703: LD_VAR 0 5
63707: ST_TO_ADDR
// end ;
63708: LD_VAR 0 4
63712: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63713: LD_INT 0
63715: PPUSH
63716: PPUSH
63717: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63718: LD_VAR 0 1
63722: NOT
63723: IFTRUE 63751
63725: PUSH
63726: LD_VAR 0 2
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: LD_INT 4
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: IN
63749: NOT
63750: OR
63751: IFFALSE 63755
// exit ;
63753: GO 63838
// tmp := [ ] ;
63755: LD_ADDR_VAR 0 5
63759: PUSH
63760: EMPTY
63761: ST_TO_ADDR
// for i in units do
63762: LD_ADDR_VAR 0 4
63766: PUSH
63767: LD_VAR 0 1
63771: PUSH
63772: FOR_IN
63773: IFFALSE 63807
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63775: LD_ADDR_VAR 0 5
63779: PUSH
63780: LD_VAR 0 5
63784: PPUSH
63785: LD_VAR 0 4
63789: PPUSH
63790: LD_VAR 0 2
63794: PPUSH
63795: CALL_OW 259
63799: PPUSH
63800: CALL 65233 0 2
63804: ST_TO_ADDR
63805: GO 63772
63807: POP
63808: POP
// if not tmp then
63809: LD_VAR 0 5
63813: NOT
63814: IFFALSE 63818
// exit ;
63816: GO 63838
// result := SortListByListDesc ( units , tmp ) ;
63818: LD_ADDR_VAR 0 3
63822: PUSH
63823: LD_VAR 0 1
63827: PPUSH
63828: LD_VAR 0 5
63832: PPUSH
63833: CALL_OW 77
63837: ST_TO_ADDR
// end ;
63838: LD_VAR 0 3
63842: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63843: LD_INT 0
63845: PPUSH
63846: PPUSH
63847: PPUSH
// result := false ;
63848: LD_ADDR_VAR 0 3
63852: PUSH
63853: LD_INT 0
63855: ST_TO_ADDR
// if not building then
63856: LD_VAR 0 2
63860: NOT
63861: IFFALSE 63865
// exit ;
63863: GO 64009
// x := GetX ( building ) ;
63865: LD_ADDR_VAR 0 4
63869: PUSH
63870: LD_VAR 0 2
63874: PPUSH
63875: CALL_OW 250
63879: ST_TO_ADDR
// y := GetY ( building ) ;
63880: LD_ADDR_VAR 0 5
63884: PUSH
63885: LD_VAR 0 2
63889: PPUSH
63890: CALL_OW 251
63894: ST_TO_ADDR
// if not x or not y then
63895: LD_VAR 0 4
63899: NOT
63900: IFTRUE 63909
63902: PUSH
63903: LD_VAR 0 5
63907: NOT
63908: OR
63909: IFFALSE 63913
// exit ;
63911: GO 64009
// if GetTaskList ( unit ) then
63913: LD_VAR 0 1
63917: PPUSH
63918: CALL_OW 437
63922: IFFALSE 64009
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63924: LD_STRING e
63926: PUSH
63927: LD_VAR 0 1
63931: PPUSH
63932: CALL_OW 437
63936: PUSH
63937: LD_INT 1
63939: ARRAY
63940: PUSH
63941: LD_INT 1
63943: ARRAY
63944: EQUAL
63945: IFFALSE 63972
63947: PUSH
63948: LD_VAR 0 4
63952: PUSH
63953: LD_VAR 0 1
63957: PPUSH
63958: CALL_OW 437
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: PUSH
63967: LD_INT 2
63969: ARRAY
63970: EQUAL
63971: AND
63972: IFFALSE 63999
63974: PUSH
63975: LD_VAR 0 5
63979: PUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 437
63989: PUSH
63990: LD_INT 1
63992: ARRAY
63993: PUSH
63994: LD_INT 3
63996: ARRAY
63997: EQUAL
63998: AND
63999: IFFALSE 64009
// result := true end ;
64001: LD_ADDR_VAR 0 3
64005: PUSH
64006: LD_INT 1
64008: ST_TO_ADDR
// end ;
64009: LD_VAR 0 3
64013: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64014: LD_INT 0
64016: PPUSH
// result := false ;
64017: LD_ADDR_VAR 0 4
64021: PUSH
64022: LD_INT 0
64024: ST_TO_ADDR
// if GetTaskList ( unit ) then
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 437
64034: IFFALSE 64121
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64036: LD_STRING M
64038: PUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: CALL_OW 437
64048: PUSH
64049: LD_INT 1
64051: ARRAY
64052: PUSH
64053: LD_INT 1
64055: ARRAY
64056: EQUAL
64057: IFFALSE 64084
64059: PUSH
64060: LD_VAR 0 2
64064: PUSH
64065: LD_VAR 0 1
64069: PPUSH
64070: CALL_OW 437
64074: PUSH
64075: LD_INT 1
64077: ARRAY
64078: PUSH
64079: LD_INT 2
64081: ARRAY
64082: EQUAL
64083: AND
64084: IFFALSE 64111
64086: PUSH
64087: LD_VAR 0 3
64091: PUSH
64092: LD_VAR 0 1
64096: PPUSH
64097: CALL_OW 437
64101: PUSH
64102: LD_INT 1
64104: ARRAY
64105: PUSH
64106: LD_INT 3
64108: ARRAY
64109: EQUAL
64110: AND
64111: IFFALSE 64121
// result := true ;
64113: LD_ADDR_VAR 0 4
64117: PUSH
64118: LD_INT 1
64120: ST_TO_ADDR
// end ; end ;
64121: LD_VAR 0 4
64125: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64126: LD_INT 0
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
// if not unit or not area then
64132: LD_VAR 0 1
64136: NOT
64137: IFTRUE 64146
64139: PUSH
64140: LD_VAR 0 2
64144: NOT
64145: OR
64146: IFFALSE 64150
// exit ;
64148: GO 64326
// tmp := AreaToList ( area , i ) ;
64150: LD_ADDR_VAR 0 6
64154: PUSH
64155: LD_VAR 0 2
64159: PPUSH
64160: LD_VAR 0 5
64164: PPUSH
64165: CALL_OW 517
64169: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64170: LD_ADDR_VAR 0 5
64174: PUSH
64175: DOUBLE
64176: LD_INT 1
64178: DEC
64179: ST_TO_ADDR
64180: LD_VAR 0 6
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PUSH
64189: FOR_TO
64190: IFFALSE 64324
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64192: LD_ADDR_VAR 0 7
64196: PUSH
64197: LD_VAR 0 6
64201: PUSH
64202: LD_INT 1
64204: ARRAY
64205: PUSH
64206: LD_VAR 0 5
64210: ARRAY
64211: PUSH
64212: LD_VAR 0 6
64216: PUSH
64217: LD_INT 2
64219: ARRAY
64220: PUSH
64221: LD_VAR 0 5
64225: ARRAY
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64231: LD_INT 92
64233: PUSH
64234: LD_VAR 0 7
64238: PUSH
64239: LD_INT 1
64241: ARRAY
64242: PUSH
64243: LD_VAR 0 7
64247: PUSH
64248: LD_INT 2
64250: ARRAY
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: PPUSH
64261: CALL_OW 69
64265: PUSH
64266: LD_INT 0
64268: EQUAL
64269: IFFALSE 64322
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64271: LD_VAR 0 1
64275: PPUSH
64276: LD_VAR 0 7
64280: PUSH
64281: LD_INT 1
64283: ARRAY
64284: PPUSH
64285: LD_VAR 0 7
64289: PUSH
64290: LD_INT 2
64292: ARRAY
64293: PPUSH
64294: LD_VAR 0 3
64298: PPUSH
64299: CALL_OW 48
// result := IsPlaced ( unit ) ;
64303: LD_ADDR_VAR 0 4
64307: PUSH
64308: LD_VAR 0 1
64312: PPUSH
64313: CALL_OW 305
64317: ST_TO_ADDR
// exit ;
64318: POP
64319: POP
64320: GO 64326
// end ; end ;
64322: GO 64189
64324: POP
64325: POP
// end ;
64326: LD_VAR 0 4
64330: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64331: LD_INT 0
64333: PPUSH
64334: PPUSH
64335: PPUSH
// if not side or side > 8 then
64336: LD_VAR 0 1
64340: NOT
64341: IFTRUE 64353
64343: PUSH
64344: LD_VAR 0 1
64348: PUSH
64349: LD_INT 8
64351: GREATER
64352: OR
64353: IFFALSE 64357
// exit ;
64355: GO 64544
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64357: LD_ADDR_VAR 0 4
64361: PUSH
64362: LD_INT 22
64364: PUSH
64365: LD_VAR 0 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 21
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PPUSH
64388: CALL_OW 69
64392: ST_TO_ADDR
// if not tmp then
64393: LD_VAR 0 4
64397: NOT
64398: IFFALSE 64402
// exit ;
64400: GO 64544
// enable_addtolog := true ;
64402: LD_ADDR_OWVAR 81
64406: PUSH
64407: LD_INT 1
64409: ST_TO_ADDR
// AddToLog ( [ ) ;
64410: LD_STRING [
64412: PPUSH
64413: CALL_OW 561
// for i in tmp do
64417: LD_ADDR_VAR 0 3
64421: PUSH
64422: LD_VAR 0 4
64426: PUSH
64427: FOR_IN
64428: IFFALSE 64535
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64430: LD_STRING [
64432: PUSH
64433: LD_VAR 0 3
64437: PPUSH
64438: CALL_OW 266
64442: STR
64443: PUSH
64444: LD_STRING , 
64446: STR
64447: PUSH
64448: LD_VAR 0 3
64452: PPUSH
64453: CALL_OW 250
64457: STR
64458: PUSH
64459: LD_STRING , 
64461: STR
64462: PUSH
64463: LD_VAR 0 3
64467: PPUSH
64468: CALL_OW 251
64472: STR
64473: PUSH
64474: LD_STRING , 
64476: STR
64477: PUSH
64478: LD_VAR 0 3
64482: PPUSH
64483: CALL_OW 254
64487: STR
64488: PUSH
64489: LD_STRING , 
64491: STR
64492: PUSH
64493: LD_VAR 0 3
64497: PPUSH
64498: LD_INT 1
64500: PPUSH
64501: CALL_OW 268
64505: STR
64506: PUSH
64507: LD_STRING , 
64509: STR
64510: PUSH
64511: LD_VAR 0 3
64515: PPUSH
64516: LD_INT 2
64518: PPUSH
64519: CALL_OW 268
64523: STR
64524: PUSH
64525: LD_STRING ],
64527: STR
64528: PPUSH
64529: CALL_OW 561
// end ;
64533: GO 64427
64535: POP
64536: POP
// AddToLog ( ]; ) ;
64537: LD_STRING ];
64539: PPUSH
64540: CALL_OW 561
// end ;
64544: LD_VAR 0 2
64548: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64549: LD_INT 0
64551: PPUSH
64552: PPUSH
64553: PPUSH
64554: PPUSH
64555: PPUSH
// if not area or not rate or not max then
64556: LD_VAR 0 1
64560: NOT
64561: IFTRUE 64570
64563: PUSH
64564: LD_VAR 0 2
64568: NOT
64569: OR
64570: IFTRUE 64579
64572: PUSH
64573: LD_VAR 0 4
64577: NOT
64578: OR
64579: IFFALSE 64583
// exit ;
64581: GO 64772
// while 1 do
64583: LD_INT 1
64585: IFFALSE 64772
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64587: LD_ADDR_VAR 0 9
64591: PUSH
64592: LD_VAR 0 1
64596: PPUSH
64597: LD_INT 1
64599: PPUSH
64600: CALL_OW 287
64604: PUSH
64605: LD_INT 10
64607: MUL
64608: ST_TO_ADDR
// r := rate / 10 ;
64609: LD_ADDR_VAR 0 7
64613: PUSH
64614: LD_VAR 0 2
64618: PUSH
64619: LD_INT 10
64621: DIVREAL
64622: ST_TO_ADDR
// time := 1 1$00 ;
64623: LD_ADDR_VAR 0 8
64627: PUSH
64628: LD_INT 2100
64630: ST_TO_ADDR
// if amount < min then
64631: LD_VAR 0 9
64635: PUSH
64636: LD_VAR 0 3
64640: LESS
64641: IFFALSE 64659
// r := r * 2 else
64643: LD_ADDR_VAR 0 7
64647: PUSH
64648: LD_VAR 0 7
64652: PUSH
64653: LD_INT 2
64655: MUL
64656: ST_TO_ADDR
64657: GO 64685
// if amount > max then
64659: LD_VAR 0 9
64663: PUSH
64664: LD_VAR 0 4
64668: GREATER
64669: IFFALSE 64685
// r := r / 2 ;
64671: LD_ADDR_VAR 0 7
64675: PUSH
64676: LD_VAR 0 7
64680: PUSH
64681: LD_INT 2
64683: DIVREAL
64684: ST_TO_ADDR
// time := time / r ;
64685: LD_ADDR_VAR 0 8
64689: PUSH
64690: LD_VAR 0 8
64694: PUSH
64695: LD_VAR 0 7
64699: DIVREAL
64700: ST_TO_ADDR
// if time < 0 then
64701: LD_VAR 0 8
64705: PUSH
64706: LD_INT 0
64708: LESS
64709: IFFALSE 64726
// time := time * - 1 ;
64711: LD_ADDR_VAR 0 8
64715: PUSH
64716: LD_VAR 0 8
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: MUL
64725: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64726: LD_VAR 0 8
64730: PUSH
64731: LD_INT 35
64733: PPUSH
64734: LD_INT 875
64736: PPUSH
64737: CALL_OW 12
64741: PLUS
64742: PPUSH
64743: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64747: LD_INT 1
64749: PPUSH
64750: LD_INT 5
64752: PPUSH
64753: CALL_OW 12
64757: PPUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_INT 1
64765: PPUSH
64766: CALL_OW 55
// end ;
64770: GO 64583
// end ;
64772: LD_VAR 0 5
64776: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64777: LD_INT 0
64779: PPUSH
64780: PPUSH
64781: PPUSH
64782: PPUSH
64783: PPUSH
64784: PPUSH
64785: PPUSH
64786: PPUSH
// if not turrets or not factories then
64787: LD_VAR 0 1
64791: NOT
64792: IFTRUE 64801
64794: PUSH
64795: LD_VAR 0 2
64799: NOT
64800: OR
64801: IFFALSE 64805
// exit ;
64803: GO 65112
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64805: LD_ADDR_VAR 0 10
64809: PUSH
64810: LD_INT 5
64812: PUSH
64813: LD_INT 6
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 4
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 3
64832: PUSH
64833: LD_INT 5
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 24
64847: PUSH
64848: LD_INT 25
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 23
64857: PUSH
64858: LD_INT 27
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 42
64871: PUSH
64872: LD_INT 43
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 44
64881: PUSH
64882: LD_INT 46
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 45
64891: PUSH
64892: LD_INT 47
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: ST_TO_ADDR
// result := [ ] ;
64909: LD_ADDR_VAR 0 3
64913: PUSH
64914: EMPTY
64915: ST_TO_ADDR
// for i in turrets do
64916: LD_ADDR_VAR 0 4
64920: PUSH
64921: LD_VAR 0 1
64925: PUSH
64926: FOR_IN
64927: IFFALSE 65110
// begin nat := GetNation ( i ) ;
64929: LD_ADDR_VAR 0 7
64933: PUSH
64934: LD_VAR 0 4
64938: PPUSH
64939: CALL_OW 248
64943: ST_TO_ADDR
// weapon := 0 ;
64944: LD_ADDR_VAR 0 8
64948: PUSH
64949: LD_INT 0
64951: ST_TO_ADDR
// if not nat then
64952: LD_VAR 0 7
64956: NOT
64957: IFFALSE 64961
// continue ;
64959: GO 64926
// for j in list [ nat ] do
64961: LD_ADDR_VAR 0 5
64965: PUSH
64966: LD_VAR 0 10
64970: PUSH
64971: LD_VAR 0 7
64975: ARRAY
64976: PUSH
64977: FOR_IN
64978: IFFALSE 65019
// if GetBWeapon ( i ) = j [ 1 ] then
64980: LD_VAR 0 4
64984: PPUSH
64985: CALL_OW 269
64989: PUSH
64990: LD_VAR 0 5
64994: PUSH
64995: LD_INT 1
64997: ARRAY
64998: EQUAL
64999: IFFALSE 65017
// begin weapon := j [ 2 ] ;
65001: LD_ADDR_VAR 0 8
65005: PUSH
65006: LD_VAR 0 5
65010: PUSH
65011: LD_INT 2
65013: ARRAY
65014: ST_TO_ADDR
// break ;
65015: GO 65019
// end ;
65017: GO 64977
65019: POP
65020: POP
// if not weapon then
65021: LD_VAR 0 8
65025: NOT
65026: IFFALSE 65030
// continue ;
65028: GO 64926
// for k in factories do
65030: LD_ADDR_VAR 0 6
65034: PUSH
65035: LD_VAR 0 2
65039: PUSH
65040: FOR_IN
65041: IFFALSE 65106
// begin weapons := AvailableWeaponList ( k ) ;
65043: LD_ADDR_VAR 0 9
65047: PUSH
65048: LD_VAR 0 6
65052: PPUSH
65053: CALL_OW 478
65057: ST_TO_ADDR
// if not weapons then
65058: LD_VAR 0 9
65062: NOT
65063: IFFALSE 65067
// continue ;
65065: GO 65040
// if weapon in weapons then
65067: LD_VAR 0 8
65071: PUSH
65072: LD_VAR 0 9
65076: IN
65077: IFFALSE 65104
// begin result := [ i , weapon ] ;
65079: LD_ADDR_VAR 0 3
65083: PUSH
65084: LD_VAR 0 4
65088: PUSH
65089: LD_VAR 0 8
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: ST_TO_ADDR
// exit ;
65098: POP
65099: POP
65100: POP
65101: POP
65102: GO 65112
// end ; end ;
65104: GO 65040
65106: POP
65107: POP
// end ;
65108: GO 64926
65110: POP
65111: POP
// end ;
65112: LD_VAR 0 3
65116: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65117: LD_INT 0
65119: PPUSH
// if not side or side > 8 then
65120: LD_VAR 0 3
65124: NOT
65125: IFTRUE 65137
65127: PUSH
65128: LD_VAR 0 3
65132: PUSH
65133: LD_INT 8
65135: GREATER
65136: OR
65137: IFFALSE 65141
// exit ;
65139: GO 65200
// if not range then
65141: LD_VAR 0 4
65145: NOT
65146: IFFALSE 65157
// range := - 12 ;
65148: LD_ADDR_VAR 0 4
65152: PUSH
65153: LD_INT 12
65155: NEG
65156: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65157: LD_VAR 0 1
65161: PPUSH
65162: LD_VAR 0 2
65166: PPUSH
65167: LD_VAR 0 3
65171: PPUSH
65172: LD_VAR 0 4
65176: PPUSH
65177: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65181: LD_VAR 0 1
65185: PPUSH
65186: LD_VAR 0 2
65190: PPUSH
65191: LD_VAR 0 3
65195: PPUSH
65196: CALL_OW 331
// end ;
65200: LD_VAR 0 5
65204: RET
// export function Video ( mode ) ; begin
65205: LD_INT 0
65207: PPUSH
// ingame_video = mode ;
65208: LD_ADDR_OWVAR 52
65212: PUSH
65213: LD_VAR 0 1
65217: ST_TO_ADDR
// interface_hidden = mode ;
65218: LD_ADDR_OWVAR 54
65222: PUSH
65223: LD_VAR 0 1
65227: ST_TO_ADDR
// end ;
65228: LD_VAR 0 2
65232: RET
// export function Join ( array , element ) ; begin
65233: LD_INT 0
65235: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65236: LD_ADDR_VAR 0 3
65240: PUSH
65241: LD_VAR 0 1
65245: PPUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_INT 1
65253: PLUS
65254: PPUSH
65255: LD_VAR 0 2
65259: PPUSH
65260: CALL_OW 1
65264: ST_TO_ADDR
// end ;
65265: LD_VAR 0 3
65269: RET
// export function JoinUnion ( array , element ) ; begin
65270: LD_INT 0
65272: PPUSH
// result := array union element ;
65273: LD_ADDR_VAR 0 3
65277: PUSH
65278: LD_VAR 0 1
65282: PUSH
65283: LD_VAR 0 2
65287: UNION
65288: ST_TO_ADDR
// end ;
65289: LD_VAR 0 3
65293: RET
// export function GetBehemoths ( side ) ; begin
65294: LD_INT 0
65296: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65297: LD_ADDR_VAR 0 2
65301: PUSH
65302: LD_INT 22
65304: PUSH
65305: LD_VAR 0 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 31
65316: PUSH
65317: LD_INT 25
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PPUSH
65328: CALL_OW 69
65332: ST_TO_ADDR
// end ;
65333: LD_VAR 0 2
65337: RET
// export function Shuffle ( array ) ; var i , index ; begin
65338: LD_INT 0
65340: PPUSH
65341: PPUSH
65342: PPUSH
// result := [ ] ;
65343: LD_ADDR_VAR 0 2
65347: PUSH
65348: EMPTY
65349: ST_TO_ADDR
// if not array then
65350: LD_VAR 0 1
65354: NOT
65355: IFFALSE 65359
// exit ;
65357: GO 65458
// Randomize ;
65359: CALL_OW 10
// for i = array downto 1 do
65363: LD_ADDR_VAR 0 3
65367: PUSH
65368: DOUBLE
65369: LD_VAR 0 1
65373: INC
65374: ST_TO_ADDR
65375: LD_INT 1
65377: PUSH
65378: FOR_DOWNTO
65379: IFFALSE 65456
// begin index := rand ( 1 , array ) ;
65381: LD_ADDR_VAR 0 4
65385: PUSH
65386: LD_INT 1
65388: PPUSH
65389: LD_VAR 0 1
65393: PPUSH
65394: CALL_OW 12
65398: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65399: LD_ADDR_VAR 0 2
65403: PUSH
65404: LD_VAR 0 2
65408: PPUSH
65409: LD_VAR 0 2
65413: PUSH
65414: LD_INT 1
65416: PLUS
65417: PPUSH
65418: LD_VAR 0 1
65422: PUSH
65423: LD_VAR 0 4
65427: ARRAY
65428: PPUSH
65429: CALL_OW 2
65433: ST_TO_ADDR
// array := Delete ( array , index ) ;
65434: LD_ADDR_VAR 0 1
65438: PUSH
65439: LD_VAR 0 1
65443: PPUSH
65444: LD_VAR 0 4
65448: PPUSH
65449: CALL_OW 3
65453: ST_TO_ADDR
// end ;
65454: GO 65378
65456: POP
65457: POP
// end ;
65458: LD_VAR 0 2
65462: RET
// export function GetBaseMaterials ( base ) ; begin
65463: LD_INT 0
65465: PPUSH
// result := [ 0 , 0 , 0 ] ;
65466: LD_ADDR_VAR 0 2
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: LIST
65484: ST_TO_ADDR
// if not base then
65485: LD_VAR 0 1
65489: NOT
65490: IFFALSE 65494
// exit ;
65492: GO 65543
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65494: LD_ADDR_VAR 0 2
65498: PUSH
65499: LD_VAR 0 1
65503: PPUSH
65504: LD_INT 1
65506: PPUSH
65507: CALL_OW 275
65511: PUSH
65512: LD_VAR 0 1
65516: PPUSH
65517: LD_INT 2
65519: PPUSH
65520: CALL_OW 275
65524: PUSH
65525: LD_VAR 0 1
65529: PPUSH
65530: LD_INT 3
65532: PPUSH
65533: CALL_OW 275
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: ST_TO_ADDR
// end ;
65543: LD_VAR 0 2
65547: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65548: LD_INT 0
65550: PPUSH
65551: PPUSH
// result := array ;
65552: LD_ADDR_VAR 0 3
65556: PUSH
65557: LD_VAR 0 1
65561: ST_TO_ADDR
// if size >= result then
65562: LD_VAR 0 2
65566: PUSH
65567: LD_VAR 0 3
65571: GREATEREQUAL
65572: IFFALSE 65576
// exit ;
65574: GO 65626
// if size then
65576: LD_VAR 0 2
65580: IFFALSE 65626
// for i := array downto size do
65582: LD_ADDR_VAR 0 4
65586: PUSH
65587: DOUBLE
65588: LD_VAR 0 1
65592: INC
65593: ST_TO_ADDR
65594: LD_VAR 0 2
65598: PUSH
65599: FOR_DOWNTO
65600: IFFALSE 65624
// result := Delete ( result , result ) ;
65602: LD_ADDR_VAR 0 3
65606: PUSH
65607: LD_VAR 0 3
65611: PPUSH
65612: LD_VAR 0 3
65616: PPUSH
65617: CALL_OW 3
65621: ST_TO_ADDR
65622: GO 65599
65624: POP
65625: POP
// end ;
65626: LD_VAR 0 3
65630: RET
// export function ComExit ( unit ) ; var tmp ; begin
65631: LD_INT 0
65633: PPUSH
65634: PPUSH
// if not IsInUnit ( unit ) then
65635: LD_VAR 0 1
65639: PPUSH
65640: CALL_OW 310
65644: NOT
65645: IFFALSE 65649
// exit ;
65647: GO 65709
// tmp := IsInUnit ( unit ) ;
65649: LD_ADDR_VAR 0 3
65653: PUSH
65654: LD_VAR 0 1
65658: PPUSH
65659: CALL_OW 310
65663: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65664: LD_VAR 0 3
65668: PPUSH
65669: CALL_OW 247
65673: PUSH
65674: LD_INT 2
65676: EQUAL
65677: IFFALSE 65690
// ComExitVehicle ( unit ) else
65679: LD_VAR 0 1
65683: PPUSH
65684: CALL_OW 121
65688: GO 65699
// ComExitBuilding ( unit ) ;
65690: LD_VAR 0 1
65694: PPUSH
65695: CALL_OW 122
// result := tmp ;
65699: LD_ADDR_VAR 0 2
65703: PUSH
65704: LD_VAR 0 3
65708: ST_TO_ADDR
// end ;
65709: LD_VAR 0 2
65713: RET
// export function ComExitAll ( units ) ; var i ; begin
65714: LD_INT 0
65716: PPUSH
65717: PPUSH
// if not units then
65718: LD_VAR 0 1
65722: NOT
65723: IFFALSE 65727
// exit ;
65725: GO 65753
// for i in units do
65727: LD_ADDR_VAR 0 3
65731: PUSH
65732: LD_VAR 0 1
65736: PUSH
65737: FOR_IN
65738: IFFALSE 65751
// ComExit ( i ) ;
65740: LD_VAR 0 3
65744: PPUSH
65745: CALL 65631 0 1
65749: GO 65737
65751: POP
65752: POP
// end ;
65753: LD_VAR 0 2
65757: RET
// export function ResetHc ; begin
65758: LD_INT 0
65760: PPUSH
// InitHc ;
65761: CALL_OW 19
// hc_importance := 0 ;
65765: LD_ADDR_OWVAR 32
65769: PUSH
65770: LD_INT 0
65772: ST_TO_ADDR
// end ;
65773: LD_VAR 0 1
65777: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65778: LD_INT 0
65780: PPUSH
65781: PPUSH
65782: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65783: LD_ADDR_VAR 0 6
65787: PUSH
65788: LD_VAR 0 1
65792: PUSH
65793: LD_VAR 0 3
65797: PLUS
65798: PUSH
65799: LD_INT 2
65801: DIV
65802: ST_TO_ADDR
// if _x < 0 then
65803: LD_VAR 0 6
65807: PUSH
65808: LD_INT 0
65810: LESS
65811: IFFALSE 65828
// _x := _x * - 1 ;
65813: LD_ADDR_VAR 0 6
65817: PUSH
65818: LD_VAR 0 6
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: MUL
65827: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65828: LD_ADDR_VAR 0 7
65832: PUSH
65833: LD_VAR 0 2
65837: PUSH
65838: LD_VAR 0 4
65842: PLUS
65843: PUSH
65844: LD_INT 2
65846: DIV
65847: ST_TO_ADDR
// if _y < 0 then
65848: LD_VAR 0 7
65852: PUSH
65853: LD_INT 0
65855: LESS
65856: IFFALSE 65873
// _y := _y * - 1 ;
65858: LD_ADDR_VAR 0 7
65862: PUSH
65863: LD_VAR 0 7
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: MUL
65872: ST_TO_ADDR
// result := [ _x , _y ] ;
65873: LD_ADDR_VAR 0 5
65877: PUSH
65878: LD_VAR 0 6
65882: PUSH
65883: LD_VAR 0 7
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: ST_TO_ADDR
// end ;
65892: LD_VAR 0 5
65896: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65897: LD_INT 0
65899: PPUSH
65900: PPUSH
65901: PPUSH
65902: PPUSH
// task := GetTaskList ( unit ) ;
65903: LD_ADDR_VAR 0 7
65907: PUSH
65908: LD_VAR 0 1
65912: PPUSH
65913: CALL_OW 437
65917: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65918: LD_VAR 0 7
65922: NOT
65923: IFFALSE 65942
65925: PUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: LD_VAR 0 2
65935: PPUSH
65936: CALL_OW 308
65940: NOT
65941: AND
65942: IFFALSE 65946
// exit ;
65944: GO 66064
// if IsInArea ( unit , area ) then
65946: LD_VAR 0 1
65950: PPUSH
65951: LD_VAR 0 2
65955: PPUSH
65956: CALL_OW 308
65960: IFFALSE 65978
// begin ComMoveToArea ( unit , goAway ) ;
65962: LD_VAR 0 1
65966: PPUSH
65967: LD_VAR 0 3
65971: PPUSH
65972: CALL_OW 113
// exit ;
65976: GO 66064
// end ; if task [ 1 ] [ 1 ] <> M then
65978: LD_VAR 0 7
65982: PUSH
65983: LD_INT 1
65985: ARRAY
65986: PUSH
65987: LD_INT 1
65989: ARRAY
65990: PUSH
65991: LD_STRING M
65993: NONEQUAL
65994: IFFALSE 65998
// exit ;
65996: GO 66064
// x := task [ 1 ] [ 2 ] ;
65998: LD_ADDR_VAR 0 5
66002: PUSH
66003: LD_VAR 0 7
66007: PUSH
66008: LD_INT 1
66010: ARRAY
66011: PUSH
66012: LD_INT 2
66014: ARRAY
66015: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66016: LD_ADDR_VAR 0 6
66020: PUSH
66021: LD_VAR 0 7
66025: PUSH
66026: LD_INT 1
66028: ARRAY
66029: PUSH
66030: LD_INT 3
66032: ARRAY
66033: ST_TO_ADDR
// if InArea ( x , y , area ) then
66034: LD_VAR 0 5
66038: PPUSH
66039: LD_VAR 0 6
66043: PPUSH
66044: LD_VAR 0 2
66048: PPUSH
66049: CALL_OW 309
66053: IFFALSE 66064
// ComStop ( unit ) ;
66055: LD_VAR 0 1
66059: PPUSH
66060: CALL_OW 141
// end ;
66064: LD_VAR 0 4
66068: RET
// export function Abs ( value ) ; begin
66069: LD_INT 0
66071: PPUSH
// result := value ;
66072: LD_ADDR_VAR 0 2
66076: PUSH
66077: LD_VAR 0 1
66081: ST_TO_ADDR
// if value < 0 then
66082: LD_VAR 0 1
66086: PUSH
66087: LD_INT 0
66089: LESS
66090: IFFALSE 66107
// result := value * - 1 ;
66092: LD_ADDR_VAR 0 2
66096: PUSH
66097: LD_VAR 0 1
66101: PUSH
66102: LD_INT 1
66104: NEG
66105: MUL
66106: ST_TO_ADDR
// end ;
66107: LD_VAR 0 2
66111: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66112: LD_INT 0
66114: PPUSH
66115: PPUSH
66116: PPUSH
66117: PPUSH
66118: PPUSH
66119: PPUSH
66120: PPUSH
66121: PPUSH
// if not unit or not building then
66122: LD_VAR 0 1
66126: NOT
66127: IFTRUE 66136
66129: PUSH
66130: LD_VAR 0 2
66134: NOT
66135: OR
66136: IFFALSE 66140
// exit ;
66138: GO 66368
// x := GetX ( building ) ;
66140: LD_ADDR_VAR 0 4
66144: PUSH
66145: LD_VAR 0 2
66149: PPUSH
66150: CALL_OW 250
66154: ST_TO_ADDR
// y := GetY ( building ) ;
66155: LD_ADDR_VAR 0 6
66159: PUSH
66160: LD_VAR 0 2
66164: PPUSH
66165: CALL_OW 251
66169: ST_TO_ADDR
// d := GetDir ( building ) ;
66170: LD_ADDR_VAR 0 8
66174: PUSH
66175: LD_VAR 0 2
66179: PPUSH
66180: CALL_OW 254
66184: ST_TO_ADDR
// r := 4 ;
66185: LD_ADDR_VAR 0 9
66189: PUSH
66190: LD_INT 4
66192: ST_TO_ADDR
// for i := 1 to 5 do
66193: LD_ADDR_VAR 0 10
66197: PUSH
66198: DOUBLE
66199: LD_INT 1
66201: DEC
66202: ST_TO_ADDR
66203: LD_INT 5
66205: PUSH
66206: FOR_TO
66207: IFFALSE 66366
// begin _x := ShiftX ( x , d , r + i ) ;
66209: LD_ADDR_VAR 0 5
66213: PUSH
66214: LD_VAR 0 4
66218: PPUSH
66219: LD_VAR 0 8
66223: PPUSH
66224: LD_VAR 0 9
66228: PUSH
66229: LD_VAR 0 10
66233: PLUS
66234: PPUSH
66235: CALL_OW 272
66239: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66240: LD_ADDR_VAR 0 7
66244: PUSH
66245: LD_VAR 0 6
66249: PPUSH
66250: LD_VAR 0 8
66254: PPUSH
66255: LD_VAR 0 9
66259: PUSH
66260: LD_VAR 0 10
66264: PLUS
66265: PPUSH
66266: CALL_OW 273
66270: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66271: LD_VAR 0 5
66275: PPUSH
66276: LD_VAR 0 7
66280: PPUSH
66281: CALL_OW 488
66285: IFFALSE 66320
66287: PUSH
66288: LD_VAR 0 5
66292: PPUSH
66293: LD_VAR 0 7
66297: PPUSH
66298: CALL_OW 428
66302: PPUSH
66303: CALL_OW 247
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: IN
66318: NOT
66319: AND
66320: IFFALSE 66364
// begin ComMoveXY ( unit , _x , _y ) ;
66322: LD_VAR 0 1
66326: PPUSH
66327: LD_VAR 0 5
66331: PPUSH
66332: LD_VAR 0 7
66336: PPUSH
66337: CALL_OW 111
// result := [ _x , _y ] ;
66341: LD_ADDR_VAR 0 3
66345: PUSH
66346: LD_VAR 0 5
66350: PUSH
66351: LD_VAR 0 7
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: ST_TO_ADDR
// exit ;
66360: POP
66361: POP
66362: GO 66368
// end ; end ;
66364: GO 66206
66366: POP
66367: POP
// end ;
66368: LD_VAR 0 3
66372: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66373: LD_INT 0
66375: PPUSH
66376: PPUSH
66377: PPUSH
// result := 0 ;
66378: LD_ADDR_VAR 0 3
66382: PUSH
66383: LD_INT 0
66385: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66386: LD_VAR 0 1
66390: PUSH
66391: LD_INT 0
66393: LESS
66394: IFTRUE 66406
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 8
66404: GREATER
66405: OR
66406: IFTRUE 66418
66408: PUSH
66409: LD_VAR 0 2
66413: PUSH
66414: LD_INT 0
66416: LESS
66417: OR
66418: IFTRUE 66430
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_INT 8
66428: GREATER
66429: OR
66430: IFFALSE 66434
// exit ;
66432: GO 66509
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66434: LD_ADDR_VAR 0 4
66438: PUSH
66439: LD_INT 22
66441: PUSH
66442: LD_VAR 0 2
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PPUSH
66451: CALL_OW 69
66455: PUSH
66456: FOR_IN
66457: IFFALSE 66507
// begin un := UnitShoot ( i ) ;
66459: LD_ADDR_VAR 0 5
66463: PUSH
66464: LD_VAR 0 4
66468: PPUSH
66469: CALL_OW 504
66473: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66474: LD_VAR 0 5
66478: PPUSH
66479: CALL_OW 255
66483: PUSH
66484: LD_VAR 0 1
66488: EQUAL
66489: IFFALSE 66505
// begin result := un ;
66491: LD_ADDR_VAR 0 3
66495: PUSH
66496: LD_VAR 0 5
66500: ST_TO_ADDR
// exit ;
66501: POP
66502: POP
66503: GO 66509
// end ; end ;
66505: GO 66456
66507: POP
66508: POP
// end ;
66509: LD_VAR 0 3
66513: RET
// export function GetCargoBay ( units ) ; begin
66514: LD_INT 0
66516: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66517: LD_ADDR_VAR 0 2
66521: PUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: LD_INT 2
66529: PUSH
66530: LD_INT 34
66532: PUSH
66533: LD_INT 12
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 34
66542: PUSH
66543: LD_INT 51
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 34
66552: PUSH
66553: LD_INT 32
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 34
66562: PUSH
66563: LD_INT 89
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: PPUSH
66577: CALL_OW 72
66581: ST_TO_ADDR
// end ;
66582: LD_VAR 0 2
66586: RET
// export function Negate ( value ) ; begin
66587: LD_INT 0
66589: PPUSH
// result := not value ;
66590: LD_ADDR_VAR 0 2
66594: PUSH
66595: LD_VAR 0 1
66599: NOT
66600: ST_TO_ADDR
// end ;
66601: LD_VAR 0 2
66605: RET
// export function Inc ( value ) ; begin
66606: LD_INT 0
66608: PPUSH
// result := value + 1 ;
66609: LD_ADDR_VAR 0 2
66613: PUSH
66614: LD_VAR 0 1
66618: PUSH
66619: LD_INT 1
66621: PLUS
66622: ST_TO_ADDR
// end ;
66623: LD_VAR 0 2
66627: RET
// export function Dec ( value ) ; begin
66628: LD_INT 0
66630: PPUSH
// result := value - 1 ;
66631: LD_ADDR_VAR 0 2
66635: PUSH
66636: LD_VAR 0 1
66640: PUSH
66641: LD_INT 1
66643: MINUS
66644: ST_TO_ADDR
// end ;
66645: LD_VAR 0 2
66649: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66650: LD_INT 0
66652: PPUSH
66653: PPUSH
66654: PPUSH
66655: PPUSH
66656: PPUSH
66657: PPUSH
66658: PPUSH
66659: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66660: LD_VAR 0 1
66664: PPUSH
66665: LD_VAR 0 2
66669: PPUSH
66670: CALL_OW 488
66674: NOT
66675: IFTRUE 66694
66677: PUSH
66678: LD_VAR 0 3
66682: PPUSH
66683: LD_VAR 0 4
66687: PPUSH
66688: CALL_OW 488
66692: NOT
66693: OR
66694: IFFALSE 66707
// begin result := - 1 ;
66696: LD_ADDR_VAR 0 5
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: ST_TO_ADDR
// exit ;
66705: GO 66942
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66707: LD_ADDR_VAR 0 12
66711: PUSH
66712: LD_VAR 0 1
66716: PPUSH
66717: LD_VAR 0 2
66721: PPUSH
66722: LD_VAR 0 3
66726: PPUSH
66727: LD_VAR 0 4
66731: PPUSH
66732: CALL 65778 0 4
66736: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66737: LD_ADDR_VAR 0 11
66741: PUSH
66742: LD_VAR 0 1
66746: PPUSH
66747: LD_VAR 0 2
66751: PPUSH
66752: LD_VAR 0 12
66756: PUSH
66757: LD_INT 1
66759: ARRAY
66760: PPUSH
66761: LD_VAR 0 12
66765: PUSH
66766: LD_INT 2
66768: ARRAY
66769: PPUSH
66770: CALL_OW 298
66774: ST_TO_ADDR
// distance := 9999 ;
66775: LD_ADDR_VAR 0 10
66779: PUSH
66780: LD_INT 9999
66782: ST_TO_ADDR
// for i := 0 to 5 do
66783: LD_ADDR_VAR 0 6
66787: PUSH
66788: DOUBLE
66789: LD_INT 0
66791: DEC
66792: ST_TO_ADDR
66793: LD_INT 5
66795: PUSH
66796: FOR_TO
66797: IFFALSE 66940
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66799: LD_ADDR_VAR 0 7
66803: PUSH
66804: LD_VAR 0 1
66808: PPUSH
66809: LD_VAR 0 6
66813: PPUSH
66814: LD_VAR 0 11
66818: PPUSH
66819: CALL_OW 272
66823: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66824: LD_ADDR_VAR 0 8
66828: PUSH
66829: LD_VAR 0 2
66833: PPUSH
66834: LD_VAR 0 6
66838: PPUSH
66839: LD_VAR 0 11
66843: PPUSH
66844: CALL_OW 273
66848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66849: LD_VAR 0 7
66853: PPUSH
66854: LD_VAR 0 8
66858: PPUSH
66859: CALL_OW 488
66863: NOT
66864: IFFALSE 66868
// continue ;
66866: GO 66796
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66868: LD_ADDR_VAR 0 9
66872: PUSH
66873: LD_VAR 0 12
66877: PUSH
66878: LD_INT 1
66880: ARRAY
66881: PPUSH
66882: LD_VAR 0 12
66886: PUSH
66887: LD_INT 2
66889: ARRAY
66890: PPUSH
66891: LD_VAR 0 7
66895: PPUSH
66896: LD_VAR 0 8
66900: PPUSH
66901: CALL_OW 298
66905: ST_TO_ADDR
// if tmp < distance then
66906: LD_VAR 0 9
66910: PUSH
66911: LD_VAR 0 10
66915: LESS
66916: IFFALSE 66938
// begin result := i ;
66918: LD_ADDR_VAR 0 5
66922: PUSH
66923: LD_VAR 0 6
66927: ST_TO_ADDR
// distance := tmp ;
66928: LD_ADDR_VAR 0 10
66932: PUSH
66933: LD_VAR 0 9
66937: ST_TO_ADDR
// end ; end ;
66938: GO 66796
66940: POP
66941: POP
// end ;
66942: LD_VAR 0 5
66946: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66947: LD_INT 0
66949: PPUSH
66950: PPUSH
// if not driver or not IsInUnit ( driver ) then
66951: LD_VAR 0 1
66955: NOT
66956: IFTRUE 66970
66958: PUSH
66959: LD_VAR 0 1
66963: PPUSH
66964: CALL_OW 310
66968: NOT
66969: OR
66970: IFFALSE 66974
// exit ;
66972: GO 67064
// vehicle := IsInUnit ( driver ) ;
66974: LD_ADDR_VAR 0 3
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: CALL_OW 310
66988: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66989: LD_VAR 0 1
66993: PPUSH
66994: LD_STRING \
66996: PUSH
66997: LD_INT 0
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: LD_INT 0
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: PUSH
67024: LD_STRING E
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 0
67032: PUSH
67033: LD_VAR 0 3
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PPUSH
67060: CALL_OW 446
// end ;
67064: LD_VAR 0 2
67068: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67069: LD_INT 0
67071: PPUSH
67072: PPUSH
// if not driver or not IsInUnit ( driver ) then
67073: LD_VAR 0 1
67077: NOT
67078: IFTRUE 67092
67080: PUSH
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 310
67090: NOT
67091: OR
67092: IFFALSE 67096
// exit ;
67094: GO 67186
// vehicle := IsInUnit ( driver ) ;
67096: LD_ADDR_VAR 0 3
67100: PUSH
67101: LD_VAR 0 1
67105: PPUSH
67106: CALL_OW 310
67110: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67111: LD_VAR 0 1
67115: PPUSH
67116: LD_STRING \
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 0
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: PUSH
67146: LD_STRING E
67148: PUSH
67149: LD_INT 0
67151: PUSH
67152: LD_INT 0
67154: PUSH
67155: LD_VAR 0 3
67159: PUSH
67160: LD_INT 0
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PPUSH
67182: CALL_OW 447
// end ;
67186: LD_VAR 0 2
67190: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67191: LD_INT 0
67193: PPUSH
67194: PPUSH
67195: PPUSH
// tmp := [ ] ;
67196: LD_ADDR_VAR 0 5
67200: PUSH
67201: EMPTY
67202: ST_TO_ADDR
// for i in units do
67203: LD_ADDR_VAR 0 4
67207: PUSH
67208: LD_VAR 0 1
67212: PUSH
67213: FOR_IN
67214: IFFALSE 67252
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67216: LD_ADDR_VAR 0 5
67220: PUSH
67221: LD_VAR 0 5
67225: PPUSH
67226: LD_VAR 0 5
67230: PUSH
67231: LD_INT 1
67233: PLUS
67234: PPUSH
67235: LD_VAR 0 4
67239: PPUSH
67240: CALL_OW 256
67244: PPUSH
67245: CALL_OW 2
67249: ST_TO_ADDR
67250: GO 67213
67252: POP
67253: POP
// if not tmp then
67254: LD_VAR 0 5
67258: NOT
67259: IFFALSE 67263
// exit ;
67261: GO 67311
// if asc then
67263: LD_VAR 0 2
67267: IFFALSE 67291
// result := SortListByListAsc ( units , tmp ) else
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: LD_VAR 0 1
67278: PPUSH
67279: LD_VAR 0 5
67283: PPUSH
67284: CALL_OW 76
67288: ST_TO_ADDR
67289: GO 67311
// result := SortListByListDesc ( units , tmp ) ;
67291: LD_ADDR_VAR 0 3
67295: PUSH
67296: LD_VAR 0 1
67300: PPUSH
67301: LD_VAR 0 5
67305: PPUSH
67306: CALL_OW 77
67310: ST_TO_ADDR
// end ;
67311: LD_VAR 0 3
67315: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67316: LD_INT 0
67318: PPUSH
67319: PPUSH
// task := GetTaskList ( mech ) ;
67320: LD_ADDR_VAR 0 4
67324: PUSH
67325: LD_VAR 0 1
67329: PPUSH
67330: CALL_OW 437
67334: ST_TO_ADDR
// if not task then
67335: LD_VAR 0 4
67339: NOT
67340: IFFALSE 67344
// exit ;
67342: GO 67388
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67344: LD_ADDR_VAR 0 3
67348: PUSH
67349: LD_VAR 0 4
67353: PUSH
67354: LD_INT 1
67356: ARRAY
67357: PUSH
67358: LD_INT 1
67360: ARRAY
67361: PUSH
67362: LD_STRING r
67364: EQUAL
67365: IFFALSE 67387
67367: PUSH
67368: LD_VAR 0 4
67372: PUSH
67373: LD_INT 1
67375: ARRAY
67376: PUSH
67377: LD_INT 4
67379: ARRAY
67380: PUSH
67381: LD_VAR 0 2
67385: EQUAL
67386: AND
67387: ST_TO_ADDR
// end ;
67388: LD_VAR 0 3
67392: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67393: LD_INT 0
67395: PPUSH
// SetDir ( unit , d ) ;
67396: LD_VAR 0 1
67400: PPUSH
67401: LD_VAR 0 4
67405: PPUSH
67406: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67410: LD_ADDR_VAR 0 6
67414: PUSH
67415: LD_VAR 0 1
67419: PPUSH
67420: LD_VAR 0 2
67424: PPUSH
67425: LD_VAR 0 3
67429: PPUSH
67430: LD_VAR 0 5
67434: PPUSH
67435: CALL_OW 48
67439: ST_TO_ADDR
// end ;
67440: LD_VAR 0 6
67444: RET
// export function ToNaturalNumber ( number ) ; begin
67445: LD_INT 0
67447: PPUSH
// result := number div 1 ;
67448: LD_ADDR_VAR 0 2
67452: PUSH
67453: LD_VAR 0 1
67457: PUSH
67458: LD_INT 1
67460: DIV
67461: ST_TO_ADDR
// if number < 0 then
67462: LD_VAR 0 1
67466: PUSH
67467: LD_INT 0
67469: LESS
67470: IFFALSE 67480
// result := 0 ;
67472: LD_ADDR_VAR 0 2
67476: PUSH
67477: LD_INT 0
67479: ST_TO_ADDR
// end ;
67480: LD_VAR 0 2
67484: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67485: LD_INT 0
67487: PPUSH
67488: PPUSH
67489: PPUSH
// if not buildings then
67490: LD_VAR 0 1
67494: NOT
67495: IFFALSE 67499
// exit ;
67497: GO 67614
// tmp := [ ] ;
67499: LD_ADDR_VAR 0 5
67503: PUSH
67504: EMPTY
67505: ST_TO_ADDR
// for b in buildings do
67506: LD_ADDR_VAR 0 4
67510: PUSH
67511: LD_VAR 0 1
67515: PUSH
67516: FOR_IN
67517: IFFALSE 67555
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67519: LD_ADDR_VAR 0 5
67523: PUSH
67524: LD_VAR 0 5
67528: PPUSH
67529: LD_VAR 0 5
67533: PUSH
67534: LD_INT 1
67536: PLUS
67537: PPUSH
67538: LD_VAR 0 4
67542: PPUSH
67543: CALL_OW 266
67547: PPUSH
67548: CALL_OW 1
67552: ST_TO_ADDR
67553: GO 67516
67555: POP
67556: POP
// if not tmp then
67557: LD_VAR 0 5
67561: NOT
67562: IFFALSE 67566
// exit ;
67564: GO 67614
// if asc then
67566: LD_VAR 0 2
67570: IFFALSE 67594
// result := SortListByListAsc ( buildings , tmp ) else
67572: LD_ADDR_VAR 0 3
67576: PUSH
67577: LD_VAR 0 1
67581: PPUSH
67582: LD_VAR 0 5
67586: PPUSH
67587: CALL_OW 76
67591: ST_TO_ADDR
67592: GO 67614
// result := SortListByListDesc ( buildings , tmp ) ;
67594: LD_ADDR_VAR 0 3
67598: PUSH
67599: LD_VAR 0 1
67603: PPUSH
67604: LD_VAR 0 5
67608: PPUSH
67609: CALL_OW 77
67613: ST_TO_ADDR
// end ;
67614: LD_VAR 0 3
67618: RET
// export function SortByClass ( units , class ) ; var un ; begin
67619: LD_INT 0
67621: PPUSH
67622: PPUSH
// if not units or not class then
67623: LD_VAR 0 1
67627: NOT
67628: IFTRUE 67637
67630: PUSH
67631: LD_VAR 0 2
67635: NOT
67636: OR
67637: IFFALSE 67641
// exit ;
67639: GO 67736
// result := [ ] ;
67641: LD_ADDR_VAR 0 3
67645: PUSH
67646: EMPTY
67647: ST_TO_ADDR
// for un in units do
67648: LD_ADDR_VAR 0 4
67652: PUSH
67653: LD_VAR 0 1
67657: PUSH
67658: FOR_IN
67659: IFFALSE 67734
// if GetClass ( un ) = class then
67661: LD_VAR 0 4
67665: PPUSH
67666: CALL_OW 257
67670: PUSH
67671: LD_VAR 0 2
67675: EQUAL
67676: IFFALSE 67703
// result := Insert ( result , 1 , un ) else
67678: LD_ADDR_VAR 0 3
67682: PUSH
67683: LD_VAR 0 3
67687: PPUSH
67688: LD_INT 1
67690: PPUSH
67691: LD_VAR 0 4
67695: PPUSH
67696: CALL_OW 2
67700: ST_TO_ADDR
67701: GO 67732
// result := Replace ( result , result + 1 , un ) ;
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: LD_VAR 0 3
67712: PPUSH
67713: LD_VAR 0 3
67717: PUSH
67718: LD_INT 1
67720: PLUS
67721: PPUSH
67722: LD_VAR 0 4
67726: PPUSH
67727: CALL_OW 1
67731: ST_TO_ADDR
67732: GO 67658
67734: POP
67735: POP
// end ;
67736: LD_VAR 0 3
67740: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67741: LD_INT 0
67743: PPUSH
67744: PPUSH
67745: PPUSH
67746: PPUSH
67747: PPUSH
67748: PPUSH
67749: PPUSH
// result := [ ] ;
67750: LD_ADDR_VAR 0 4
67754: PUSH
67755: EMPTY
67756: ST_TO_ADDR
// if x - r < 0 then
67757: LD_VAR 0 1
67761: PUSH
67762: LD_VAR 0 3
67766: MINUS
67767: PUSH
67768: LD_INT 0
67770: LESS
67771: IFFALSE 67783
// min_x := 0 else
67773: LD_ADDR_VAR 0 8
67777: PUSH
67778: LD_INT 0
67780: ST_TO_ADDR
67781: GO 67799
// min_x := x - r ;
67783: LD_ADDR_VAR 0 8
67787: PUSH
67788: LD_VAR 0 1
67792: PUSH
67793: LD_VAR 0 3
67797: MINUS
67798: ST_TO_ADDR
// if y - r < 0 then
67799: LD_VAR 0 2
67803: PUSH
67804: LD_VAR 0 3
67808: MINUS
67809: PUSH
67810: LD_INT 0
67812: LESS
67813: IFFALSE 67825
// min_y := 0 else
67815: LD_ADDR_VAR 0 7
67819: PUSH
67820: LD_INT 0
67822: ST_TO_ADDR
67823: GO 67841
// min_y := y - r ;
67825: LD_ADDR_VAR 0 7
67829: PUSH
67830: LD_VAR 0 2
67834: PUSH
67835: LD_VAR 0 3
67839: MINUS
67840: ST_TO_ADDR
// max_x := x + r ;
67841: LD_ADDR_VAR 0 9
67845: PUSH
67846: LD_VAR 0 1
67850: PUSH
67851: LD_VAR 0 3
67855: PLUS
67856: ST_TO_ADDR
// max_y := y + r ;
67857: LD_ADDR_VAR 0 10
67861: PUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_VAR 0 3
67871: PLUS
67872: ST_TO_ADDR
// for _x = min_x to max_x do
67873: LD_ADDR_VAR 0 5
67877: PUSH
67878: DOUBLE
67879: LD_VAR 0 8
67883: DEC
67884: ST_TO_ADDR
67885: LD_VAR 0 9
67889: PUSH
67890: FOR_TO
67891: IFFALSE 67992
// for _y = min_y to max_y do
67893: LD_ADDR_VAR 0 6
67897: PUSH
67898: DOUBLE
67899: LD_VAR 0 7
67903: DEC
67904: ST_TO_ADDR
67905: LD_VAR 0 10
67909: PUSH
67910: FOR_TO
67911: IFFALSE 67988
// begin if not ValidHex ( _x , _y ) then
67913: LD_VAR 0 5
67917: PPUSH
67918: LD_VAR 0 6
67922: PPUSH
67923: CALL_OW 488
67927: NOT
67928: IFFALSE 67932
// continue ;
67930: GO 67910
// if GetResourceTypeXY ( _x , _y ) then
67932: LD_VAR 0 5
67936: PPUSH
67937: LD_VAR 0 6
67941: PPUSH
67942: CALL_OW 283
67946: IFFALSE 67986
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67948: LD_ADDR_VAR 0 4
67952: PUSH
67953: LD_VAR 0 4
67957: PPUSH
67958: LD_VAR 0 4
67962: PUSH
67963: LD_INT 1
67965: PLUS
67966: PPUSH
67967: LD_VAR 0 5
67971: PUSH
67972: LD_VAR 0 6
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PPUSH
67981: CALL_OW 1
67985: ST_TO_ADDR
// end ;
67986: GO 67910
67988: POP
67989: POP
67990: GO 67890
67992: POP
67993: POP
// end ;
67994: LD_VAR 0 4
67998: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67999: LD_INT 0
68001: PPUSH
68002: PPUSH
68003: PPUSH
68004: PPUSH
68005: PPUSH
68006: PPUSH
68007: PPUSH
68008: PPUSH
// if not units then
68009: LD_VAR 0 1
68013: NOT
68014: IFFALSE 68018
// exit ;
68016: GO 68550
// result := UnitFilter ( units , [ f_ok ] ) ;
68018: LD_ADDR_VAR 0 3
68022: PUSH
68023: LD_VAR 0 1
68027: PPUSH
68028: LD_INT 50
68030: PUSH
68031: EMPTY
68032: LIST
68033: PPUSH
68034: CALL_OW 72
68038: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68039: LD_ADDR_VAR 0 8
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_INT 1
68051: ARRAY
68052: PPUSH
68053: CALL_OW 255
68057: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68058: LD_ADDR_VAR 0 10
68062: PUSH
68063: LD_INT 29
68065: PUSH
68066: LD_INT 91
68068: PUSH
68069: LD_INT 49
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: ST_TO_ADDR
// if not result then
68077: LD_VAR 0 3
68081: NOT
68082: IFFALSE 68086
// exit ;
68084: GO 68550
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68086: LD_ADDR_VAR 0 5
68090: PUSH
68091: LD_INT 81
68093: PUSH
68094: LD_VAR 0 8
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PPUSH
68103: CALL_OW 69
68107: ST_TO_ADDR
// for i in result do
68108: LD_ADDR_VAR 0 4
68112: PUSH
68113: LD_VAR 0 3
68117: PUSH
68118: FOR_IN
68119: IFFALSE 68548
// begin tag := GetTag ( i ) + 1 ;
68121: LD_ADDR_VAR 0 9
68125: PUSH
68126: LD_VAR 0 4
68130: PPUSH
68131: CALL_OW 110
68135: PUSH
68136: LD_INT 1
68138: PLUS
68139: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68140: LD_ADDR_VAR 0 7
68144: PUSH
68145: LD_VAR 0 4
68149: PPUSH
68150: CALL_OW 250
68154: PPUSH
68155: LD_VAR 0 4
68159: PPUSH
68160: CALL_OW 251
68164: PPUSH
68165: LD_INT 4
68167: PPUSH
68168: CALL 67741 0 3
68172: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68173: LD_VAR 0 4
68177: PPUSH
68178: CALL_OW 247
68182: PUSH
68183: LD_INT 2
68185: EQUAL
68186: IFFALSE 68198
68188: PUSH
68189: LD_VAR 0 7
68193: PUSH
68194: LD_INT 2
68196: GREATER
68197: AND
68198: IFFALSE 68218
68200: PUSH
68201: LD_VAR 0 4
68205: PPUSH
68206: CALL_OW 264
68210: PUSH
68211: LD_VAR 0 10
68215: IN
68216: NOT
68217: AND
68218: IFFALSE 68257
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68220: LD_VAR 0 4
68224: PPUSH
68225: LD_VAR 0 7
68229: PUSH
68230: LD_INT 1
68232: ARRAY
68233: PUSH
68234: LD_INT 1
68236: ARRAY
68237: PPUSH
68238: LD_VAR 0 7
68242: PUSH
68243: LD_INT 1
68245: ARRAY
68246: PUSH
68247: LD_INT 2
68249: ARRAY
68250: PPUSH
68251: CALL_OW 116
68255: GO 68546
// if path > tag then
68257: LD_VAR 0 2
68261: PUSH
68262: LD_VAR 0 9
68266: GREATER
68267: IFFALSE 68475
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68269: LD_ADDR_VAR 0 6
68273: PUSH
68274: LD_VAR 0 5
68278: PPUSH
68279: LD_INT 91
68281: PUSH
68282: LD_VAR 0 4
68286: PUSH
68287: LD_INT 8
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: PPUSH
68295: CALL_OW 72
68299: ST_TO_ADDR
// if nearEnemy then
68300: LD_VAR 0 6
68304: IFFALSE 68373
// begin if GetWeapon ( i ) = ru_time_lapser then
68306: LD_VAR 0 4
68310: PPUSH
68311: CALL_OW 264
68315: PUSH
68316: LD_INT 49
68318: EQUAL
68319: IFFALSE 68347
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68321: LD_VAR 0 4
68325: PPUSH
68326: LD_VAR 0 6
68330: PPUSH
68331: LD_VAR 0 4
68335: PPUSH
68336: CALL_OW 74
68340: PPUSH
68341: CALL_OW 112
68345: GO 68371
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68347: LD_VAR 0 4
68351: PPUSH
68352: LD_VAR 0 6
68356: PPUSH
68357: LD_VAR 0 4
68361: PPUSH
68362: CALL_OW 74
68366: PPUSH
68367: CALL 69631 0 2
// end else
68371: GO 68473
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68373: LD_VAR 0 4
68377: PPUSH
68378: LD_VAR 0 2
68382: PUSH
68383: LD_VAR 0 9
68387: ARRAY
68388: PUSH
68389: LD_INT 1
68391: ARRAY
68392: PPUSH
68393: LD_VAR 0 2
68397: PUSH
68398: LD_VAR 0 9
68402: ARRAY
68403: PUSH
68404: LD_INT 2
68406: ARRAY
68407: PPUSH
68408: CALL_OW 297
68412: PUSH
68413: LD_INT 6
68415: GREATER
68416: IFFALSE 68459
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68418: LD_VAR 0 4
68422: PPUSH
68423: LD_VAR 0 2
68427: PUSH
68428: LD_VAR 0 9
68432: ARRAY
68433: PUSH
68434: LD_INT 1
68436: ARRAY
68437: PPUSH
68438: LD_VAR 0 2
68442: PUSH
68443: LD_VAR 0 9
68447: ARRAY
68448: PUSH
68449: LD_INT 2
68451: ARRAY
68452: PPUSH
68453: CALL_OW 114
68457: GO 68473
// SetTag ( i , tag ) ;
68459: LD_VAR 0 4
68463: PPUSH
68464: LD_VAR 0 9
68468: PPUSH
68469: CALL_OW 109
// end else
68473: GO 68546
// if enemy then
68475: LD_VAR 0 5
68479: IFFALSE 68546
// begin if GetWeapon ( i ) = ru_time_lapser then
68481: LD_VAR 0 4
68485: PPUSH
68486: CALL_OW 264
68490: PUSH
68491: LD_INT 49
68493: EQUAL
68494: IFFALSE 68522
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68496: LD_VAR 0 4
68500: PPUSH
68501: LD_VAR 0 5
68505: PPUSH
68506: LD_VAR 0 4
68510: PPUSH
68511: CALL_OW 74
68515: PPUSH
68516: CALL_OW 112
68520: GO 68546
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68522: LD_VAR 0 4
68526: PPUSH
68527: LD_VAR 0 5
68531: PPUSH
68532: LD_VAR 0 4
68536: PPUSH
68537: CALL_OW 74
68541: PPUSH
68542: CALL 69631 0 2
// end ; end ;
68546: GO 68118
68548: POP
68549: POP
// end ;
68550: LD_VAR 0 3
68554: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68555: LD_INT 0
68557: PPUSH
68558: PPUSH
68559: PPUSH
// if not unit or IsInUnit ( unit ) then
68560: LD_VAR 0 1
68564: NOT
68565: IFTRUE 68578
68567: PUSH
68568: LD_VAR 0 1
68572: PPUSH
68573: CALL_OW 310
68577: OR
68578: IFFALSE 68582
// exit ;
68580: GO 68673
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68582: LD_ADDR_VAR 0 4
68586: PUSH
68587: LD_VAR 0 1
68591: PPUSH
68592: CALL_OW 250
68596: PPUSH
68597: LD_VAR 0 2
68601: PPUSH
68602: LD_INT 1
68604: PPUSH
68605: CALL_OW 272
68609: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68610: LD_ADDR_VAR 0 5
68614: PUSH
68615: LD_VAR 0 1
68619: PPUSH
68620: CALL_OW 251
68624: PPUSH
68625: LD_VAR 0 2
68629: PPUSH
68630: LD_INT 1
68632: PPUSH
68633: CALL_OW 273
68637: ST_TO_ADDR
// if ValidHex ( x , y ) then
68638: LD_VAR 0 4
68642: PPUSH
68643: LD_VAR 0 5
68647: PPUSH
68648: CALL_OW 488
68652: IFFALSE 68673
// ComTurnXY ( unit , x , y ) ;
68654: LD_VAR 0 1
68658: PPUSH
68659: LD_VAR 0 4
68663: PPUSH
68664: LD_VAR 0 5
68668: PPUSH
68669: CALL_OW 118
// end ;
68673: LD_VAR 0 3
68677: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68678: LD_INT 0
68680: PPUSH
68681: PPUSH
// result := false ;
68682: LD_ADDR_VAR 0 3
68686: PUSH
68687: LD_INT 0
68689: ST_TO_ADDR
// if not units then
68690: LD_VAR 0 2
68694: NOT
68695: IFFALSE 68699
// exit ;
68697: GO 68744
// for i in units do
68699: LD_ADDR_VAR 0 4
68703: PUSH
68704: LD_VAR 0 2
68708: PUSH
68709: FOR_IN
68710: IFFALSE 68742
// if See ( side , i ) then
68712: LD_VAR 0 1
68716: PPUSH
68717: LD_VAR 0 4
68721: PPUSH
68722: CALL_OW 292
68726: IFFALSE 68740
// begin result := true ;
68728: LD_ADDR_VAR 0 3
68732: PUSH
68733: LD_INT 1
68735: ST_TO_ADDR
// exit ;
68736: POP
68737: POP
68738: GO 68744
// end ;
68740: GO 68709
68742: POP
68743: POP
// end ;
68744: LD_VAR 0 3
68748: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68749: LD_INT 0
68751: PPUSH
68752: PPUSH
68753: PPUSH
68754: PPUSH
// if not unit or not points then
68755: LD_VAR 0 1
68759: NOT
68760: IFTRUE 68769
68762: PUSH
68763: LD_VAR 0 2
68767: NOT
68768: OR
68769: IFFALSE 68773
// exit ;
68771: GO 68863
// dist := 99999 ;
68773: LD_ADDR_VAR 0 5
68777: PUSH
68778: LD_INT 99999
68780: ST_TO_ADDR
// for i in points do
68781: LD_ADDR_VAR 0 4
68785: PUSH
68786: LD_VAR 0 2
68790: PUSH
68791: FOR_IN
68792: IFFALSE 68861
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68794: LD_ADDR_VAR 0 6
68798: PUSH
68799: LD_VAR 0 1
68803: PPUSH
68804: LD_VAR 0 4
68808: PUSH
68809: LD_INT 1
68811: ARRAY
68812: PPUSH
68813: LD_VAR 0 4
68817: PUSH
68818: LD_INT 2
68820: ARRAY
68821: PPUSH
68822: CALL_OW 297
68826: ST_TO_ADDR
// if tmpDist < dist then
68827: LD_VAR 0 6
68831: PUSH
68832: LD_VAR 0 5
68836: LESS
68837: IFFALSE 68859
// begin result := i ;
68839: LD_ADDR_VAR 0 3
68843: PUSH
68844: LD_VAR 0 4
68848: ST_TO_ADDR
// dist := tmpDist ;
68849: LD_ADDR_VAR 0 5
68853: PUSH
68854: LD_VAR 0 6
68858: ST_TO_ADDR
// end ; end ;
68859: GO 68791
68861: POP
68862: POP
// end ;
68863: LD_VAR 0 3
68867: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68868: LD_INT 0
68870: PPUSH
// uc_side := side ;
68871: LD_ADDR_OWVAR 20
68875: PUSH
68876: LD_VAR 0 1
68880: ST_TO_ADDR
// uc_nation := 3 ;
68881: LD_ADDR_OWVAR 21
68885: PUSH
68886: LD_INT 3
68888: ST_TO_ADDR
// vc_chassis := 25 ;
68889: LD_ADDR_OWVAR 37
68893: PUSH
68894: LD_INT 25
68896: ST_TO_ADDR
// vc_engine := engine_siberite ;
68897: LD_ADDR_OWVAR 39
68901: PUSH
68902: LD_INT 3
68904: ST_TO_ADDR
// vc_control := control_computer ;
68905: LD_ADDR_OWVAR 38
68909: PUSH
68910: LD_INT 3
68912: ST_TO_ADDR
// vc_weapon := 59 ;
68913: LD_ADDR_OWVAR 40
68917: PUSH
68918: LD_INT 59
68920: ST_TO_ADDR
// result := CreateVehicle ;
68921: LD_ADDR_VAR 0 5
68925: PUSH
68926: CALL_OW 45
68930: ST_TO_ADDR
// SetDir ( result , d ) ;
68931: LD_VAR 0 5
68935: PPUSH
68936: LD_VAR 0 4
68940: PPUSH
68941: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68945: LD_VAR 0 5
68949: PPUSH
68950: LD_VAR 0 2
68954: PPUSH
68955: LD_VAR 0 3
68959: PPUSH
68960: LD_INT 0
68962: PPUSH
68963: CALL_OW 48
// end ;
68967: LD_VAR 0 5
68971: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68972: LD_INT 0
68974: PPUSH
68975: PPUSH
68976: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68977: LD_ADDR_VAR 0 2
68981: PUSH
68982: LD_INT 0
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: LD_INT 0
68990: PUSH
68991: LD_INT 0
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69000: LD_VAR 0 1
69004: NOT
69005: IFTRUE 69038
69007: PUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: CALL_OW 264
69017: PUSH
69018: LD_INT 12
69020: PUSH
69021: LD_INT 51
69023: PUSH
69024: LD_INT 32
69026: PUSH
69027: LD_INT 89
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: IN
69036: NOT
69037: OR
69038: IFFALSE 69042
// exit ;
69040: GO 69140
// for i := 1 to 3 do
69042: LD_ADDR_VAR 0 3
69046: PUSH
69047: DOUBLE
69048: LD_INT 1
69050: DEC
69051: ST_TO_ADDR
69052: LD_INT 3
69054: PUSH
69055: FOR_TO
69056: IFFALSE 69138
// begin tmp := GetCargo ( cargo , i ) ;
69058: LD_ADDR_VAR 0 4
69062: PUSH
69063: LD_VAR 0 1
69067: PPUSH
69068: LD_VAR 0 3
69072: PPUSH
69073: CALL_OW 289
69077: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69078: LD_ADDR_VAR 0 2
69082: PUSH
69083: LD_VAR 0 2
69087: PPUSH
69088: LD_VAR 0 3
69092: PPUSH
69093: LD_VAR 0 4
69097: PPUSH
69098: CALL_OW 1
69102: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69103: LD_ADDR_VAR 0 2
69107: PUSH
69108: LD_VAR 0 2
69112: PPUSH
69113: LD_INT 4
69115: PPUSH
69116: LD_VAR 0 2
69120: PUSH
69121: LD_INT 4
69123: ARRAY
69124: PUSH
69125: LD_VAR 0 4
69129: PLUS
69130: PPUSH
69131: CALL_OW 1
69135: ST_TO_ADDR
// end ;
69136: GO 69055
69138: POP
69139: POP
// end ;
69140: LD_VAR 0 2
69144: RET
// export function Length ( array ) ; begin
69145: LD_INT 0
69147: PPUSH
// result := array + 0 ;
69148: LD_ADDR_VAR 0 2
69152: PUSH
69153: LD_VAR 0 1
69157: PUSH
69158: LD_INT 0
69160: PLUS
69161: ST_TO_ADDR
// end ;
69162: LD_VAR 0 2
69166: RET
// export function PrepareArray ( array ) ; begin
69167: LD_INT 0
69169: PPUSH
// result := array diff 0 ;
69170: LD_ADDR_VAR 0 2
69174: PUSH
69175: LD_VAR 0 1
69179: PUSH
69180: LD_INT 0
69182: DIFF
69183: ST_TO_ADDR
// if not result [ 1 ] then
69184: LD_VAR 0 2
69188: PUSH
69189: LD_INT 1
69191: ARRAY
69192: NOT
69193: IFFALSE 69213
// result := Delete ( result , 1 ) ;
69195: LD_ADDR_VAR 0 2
69199: PUSH
69200: LD_VAR 0 2
69204: PPUSH
69205: LD_INT 1
69207: PPUSH
69208: CALL_OW 3
69212: ST_TO_ADDR
// end ;
69213: LD_VAR 0 2
69217: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69218: LD_INT 0
69220: PPUSH
69221: PPUSH
69222: PPUSH
69223: PPUSH
// sibRocketRange := 25 ;
69224: LD_ADDR_VAR 0 6
69228: PUSH
69229: LD_INT 25
69231: ST_TO_ADDR
// result := false ;
69232: LD_ADDR_VAR 0 4
69236: PUSH
69237: LD_INT 0
69239: ST_TO_ADDR
// for i := 0 to 5 do
69240: LD_ADDR_VAR 0 5
69244: PUSH
69245: DOUBLE
69246: LD_INT 0
69248: DEC
69249: ST_TO_ADDR
69250: LD_INT 5
69252: PUSH
69253: FOR_TO
69254: IFFALSE 69321
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69256: LD_VAR 0 1
69260: PPUSH
69261: LD_VAR 0 5
69265: PPUSH
69266: LD_VAR 0 6
69270: PPUSH
69271: CALL_OW 272
69275: PPUSH
69276: LD_VAR 0 2
69280: PPUSH
69281: LD_VAR 0 5
69285: PPUSH
69286: LD_VAR 0 6
69290: PPUSH
69291: CALL_OW 273
69295: PPUSH
69296: LD_VAR 0 3
69300: PPUSH
69301: CALL_OW 309
69305: IFFALSE 69319
// begin result := true ;
69307: LD_ADDR_VAR 0 4
69311: PUSH
69312: LD_INT 1
69314: ST_TO_ADDR
// exit ;
69315: POP
69316: POP
69317: GO 69323
// end ;
69319: GO 69253
69321: POP
69322: POP
// end ;
69323: LD_VAR 0 4
69327: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69328: LD_INT 0
69330: PPUSH
69331: PPUSH
69332: PPUSH
// if btype = b_depot then
69333: LD_VAR 0 2
69337: PUSH
69338: LD_INT 0
69340: EQUAL
69341: IFFALSE 69353
// begin result := true ;
69343: LD_ADDR_VAR 0 3
69347: PUSH
69348: LD_INT 1
69350: ST_TO_ADDR
// exit ;
69351: GO 69473
// end ; pom := GetBase ( depot ) ;
69353: LD_ADDR_VAR 0 4
69357: PUSH
69358: LD_VAR 0 1
69362: PPUSH
69363: CALL_OW 274
69367: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69368: LD_ADDR_VAR 0 5
69372: PUSH
69373: LD_VAR 0 2
69377: PPUSH
69378: LD_VAR 0 1
69382: PPUSH
69383: CALL_OW 248
69387: PPUSH
69388: CALL_OW 450
69392: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69393: LD_ADDR_VAR 0 3
69397: PUSH
69398: LD_VAR 0 4
69402: PPUSH
69403: LD_INT 1
69405: PPUSH
69406: CALL_OW 275
69410: PUSH
69411: LD_VAR 0 5
69415: PUSH
69416: LD_INT 1
69418: ARRAY
69419: GREATEREQUAL
69420: IFFALSE 69446
69422: PUSH
69423: LD_VAR 0 4
69427: PPUSH
69428: LD_INT 2
69430: PPUSH
69431: CALL_OW 275
69435: PUSH
69436: LD_VAR 0 5
69440: PUSH
69441: LD_INT 2
69443: ARRAY
69444: GREATEREQUAL
69445: AND
69446: IFFALSE 69472
69448: PUSH
69449: LD_VAR 0 4
69453: PPUSH
69454: LD_INT 3
69456: PPUSH
69457: CALL_OW 275
69461: PUSH
69462: LD_VAR 0 5
69466: PUSH
69467: LD_INT 3
69469: ARRAY
69470: GREATEREQUAL
69471: AND
69472: ST_TO_ADDR
// end ;
69473: LD_VAR 0 3
69477: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69478: LD_INT 0
69480: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69481: LD_VAR 0 1
69485: PPUSH
69486: LD_VAR 0 2
69490: PPUSH
69491: LD_INT 0
69493: PPUSH
69494: LD_INT 0
69496: PPUSH
69497: LD_INT 1
69499: PPUSH
69500: LD_INT 0
69502: PPUSH
69503: CALL_OW 587
// end ;
69507: LD_VAR 0 3
69511: RET
// export function CenterOnNow ( unit ) ; begin
69512: LD_INT 0
69514: PPUSH
// result := IsInUnit ( unit ) ;
69515: LD_ADDR_VAR 0 2
69519: PUSH
69520: LD_VAR 0 1
69524: PPUSH
69525: CALL_OW 310
69529: ST_TO_ADDR
// if not result then
69530: LD_VAR 0 2
69534: NOT
69535: IFFALSE 69547
// result := unit ;
69537: LD_ADDR_VAR 0 2
69541: PUSH
69542: LD_VAR 0 1
69546: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69547: LD_VAR 0 1
69551: PPUSH
69552: CALL_OW 87
// end ;
69556: LD_VAR 0 2
69560: RET
// export function ComMoveHex ( unit , hex ) ; begin
69561: LD_INT 0
69563: PPUSH
// if not hex then
69564: LD_VAR 0 2
69568: NOT
69569: IFFALSE 69573
// exit ;
69571: GO 69626
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69573: LD_VAR 0 2
69577: PUSH
69578: LD_INT 1
69580: ARRAY
69581: PPUSH
69582: LD_VAR 0 2
69586: PUSH
69587: LD_INT 2
69589: ARRAY
69590: PPUSH
69591: CALL_OW 428
69595: IFFALSE 69599
// exit ;
69597: GO 69626
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69599: LD_VAR 0 1
69603: PPUSH
69604: LD_VAR 0 2
69608: PUSH
69609: LD_INT 1
69611: ARRAY
69612: PPUSH
69613: LD_VAR 0 2
69617: PUSH
69618: LD_INT 2
69620: ARRAY
69621: PPUSH
69622: CALL_OW 111
// end ;
69626: LD_VAR 0 3
69630: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69631: LD_INT 0
69633: PPUSH
69634: PPUSH
69635: PPUSH
// if not unit or not enemy then
69636: LD_VAR 0 1
69640: NOT
69641: IFTRUE 69650
69643: PUSH
69644: LD_VAR 0 2
69648: NOT
69649: OR
69650: IFFALSE 69654
// exit ;
69652: GO 69780
// x := GetX ( enemy ) ;
69654: LD_ADDR_VAR 0 4
69658: PUSH
69659: LD_VAR 0 2
69663: PPUSH
69664: CALL_OW 250
69668: ST_TO_ADDR
// y := GetY ( enemy ) ;
69669: LD_ADDR_VAR 0 5
69673: PUSH
69674: LD_VAR 0 2
69678: PPUSH
69679: CALL_OW 251
69683: ST_TO_ADDR
// if ValidHex ( x , y ) then
69684: LD_VAR 0 4
69688: PPUSH
69689: LD_VAR 0 5
69693: PPUSH
69694: CALL_OW 488
69698: IFFALSE 69780
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69700: LD_VAR 0 2
69704: PPUSH
69705: CALL_OW 247
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: LD_INT 2
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: IN
69720: IFTRUE 69743
69722: PUSH
69723: LD_VAR 0 1
69727: PPUSH
69728: CALL_OW 255
69732: PPUSH
69733: LD_VAR 0 2
69737: PPUSH
69738: CALL_OW 292
69742: OR
69743: IFFALSE 69761
// ComAttackUnit ( unit , enemy ) else
69745: LD_VAR 0 1
69749: PPUSH
69750: LD_VAR 0 2
69754: PPUSH
69755: CALL_OW 115
69759: GO 69780
// ComAgressiveMove ( unit , x , y ) ;
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_VAR 0 4
69770: PPUSH
69771: LD_VAR 0 5
69775: PPUSH
69776: CALL_OW 114
// end ;
69780: LD_VAR 0 3
69784: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69785: LD_INT 0
69787: PPUSH
69788: PPUSH
69789: PPUSH
// list := AreaToList ( area , 0 ) ;
69790: LD_ADDR_VAR 0 5
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: LD_INT 0
69802: PPUSH
69803: CALL_OW 517
69807: ST_TO_ADDR
// if not list then
69808: LD_VAR 0 5
69812: NOT
69813: IFFALSE 69817
// exit ;
69815: GO 69947
// if all then
69817: LD_VAR 0 2
69821: IFFALSE 69909
// begin for i := 1 to list [ 1 ] do
69823: LD_ADDR_VAR 0 4
69827: PUSH
69828: DOUBLE
69829: LD_INT 1
69831: DEC
69832: ST_TO_ADDR
69833: LD_VAR 0 5
69837: PUSH
69838: LD_INT 1
69840: ARRAY
69841: PUSH
69842: FOR_TO
69843: IFFALSE 69905
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69845: LD_ADDR_VAR 0 3
69849: PUSH
69850: LD_VAR 0 3
69854: PPUSH
69855: LD_VAR 0 3
69859: PUSH
69860: LD_INT 1
69862: PLUS
69863: PPUSH
69864: LD_VAR 0 5
69868: PUSH
69869: LD_INT 1
69871: ARRAY
69872: PUSH
69873: LD_VAR 0 4
69877: ARRAY
69878: PUSH
69879: LD_VAR 0 5
69883: PUSH
69884: LD_INT 2
69886: ARRAY
69887: PUSH
69888: LD_VAR 0 4
69892: ARRAY
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PPUSH
69898: CALL_OW 1
69902: ST_TO_ADDR
69903: GO 69842
69905: POP
69906: POP
// exit ;
69907: GO 69947
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69909: LD_ADDR_VAR 0 3
69913: PUSH
69914: LD_VAR 0 5
69918: PUSH
69919: LD_INT 1
69921: ARRAY
69922: PUSH
69923: LD_INT 1
69925: ARRAY
69926: PUSH
69927: LD_VAR 0 5
69931: PUSH
69932: LD_INT 2
69934: ARRAY
69935: PUSH
69936: LD_INT 1
69938: ARRAY
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: EMPTY
69945: LIST
69946: ST_TO_ADDR
// end ;
69947: LD_VAR 0 3
69951: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69952: LD_INT 0
69954: PPUSH
69955: PPUSH
// list := AreaToList ( area , 0 ) ;
69956: LD_ADDR_VAR 0 4
69960: PUSH
69961: LD_VAR 0 1
69965: PPUSH
69966: LD_INT 0
69968: PPUSH
69969: CALL_OW 517
69973: ST_TO_ADDR
// if not list then
69974: LD_VAR 0 4
69978: NOT
69979: IFFALSE 69983
// exit ;
69981: GO 70024
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69983: LD_ADDR_VAR 0 3
69987: PUSH
69988: LD_VAR 0 4
69992: PUSH
69993: LD_INT 1
69995: ARRAY
69996: PUSH
69997: LD_INT 1
69999: ARRAY
70000: PUSH
70001: LD_VAR 0 4
70005: PUSH
70006: LD_INT 2
70008: ARRAY
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PUSH
70014: LD_VAR 0 2
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: ST_TO_ADDR
// end ;
70024: LD_VAR 0 3
70028: RET
// export function First ( array ) ; begin
70029: LD_INT 0
70031: PPUSH
// if not array then
70032: LD_VAR 0 1
70036: NOT
70037: IFFALSE 70041
// exit ;
70039: GO 70055
// result := array [ 1 ] ;
70041: LD_ADDR_VAR 0 2
70045: PUSH
70046: LD_VAR 0 1
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: ST_TO_ADDR
// end ;
70055: LD_VAR 0 2
70059: RET
// export function Last ( array ) ; begin
70060: LD_INT 0
70062: PPUSH
// if not array then
70063: LD_VAR 0 1
70067: NOT
70068: IFFALSE 70072
// exit ;
70070: GO 70088
// result := array [ array ] ;
70072: LD_ADDR_VAR 0 2
70076: PUSH
70077: LD_VAR 0 1
70081: PUSH
70082: LD_VAR 0 1
70086: ARRAY
70087: ST_TO_ADDR
// end ;
70088: LD_VAR 0 2
70092: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70093: LD_INT 0
70095: PPUSH
70096: PPUSH
// result := [ ] ;
70097: LD_ADDR_VAR 0 5
70101: PUSH
70102: EMPTY
70103: ST_TO_ADDR
// if not array then
70104: LD_VAR 0 1
70108: NOT
70109: IFFALSE 70113
// exit ;
70111: GO 70225
// for i := 1 to array do
70113: LD_ADDR_VAR 0 6
70117: PUSH
70118: DOUBLE
70119: LD_INT 1
70121: DEC
70122: ST_TO_ADDR
70123: LD_VAR 0 1
70127: PUSH
70128: FOR_TO
70129: IFFALSE 70223
// if array [ i ] [ index ] = value then
70131: LD_VAR 0 1
70135: PUSH
70136: LD_VAR 0 6
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 2
70146: ARRAY
70147: PUSH
70148: LD_VAR 0 3
70152: EQUAL
70153: IFFALSE 70221
// begin if indexColumn then
70155: LD_VAR 0 4
70159: IFFALSE 70195
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70161: LD_ADDR_VAR 0 5
70165: PUSH
70166: LD_VAR 0 5
70170: PPUSH
70171: LD_VAR 0 1
70175: PUSH
70176: LD_VAR 0 6
70180: ARRAY
70181: PUSH
70182: LD_VAR 0 4
70186: ARRAY
70187: PPUSH
70188: CALL 65233 0 2
70192: ST_TO_ADDR
70193: GO 70221
// result := Join ( result , array [ i ] ) ;
70195: LD_ADDR_VAR 0 5
70199: PUSH
70200: LD_VAR 0 5
70204: PPUSH
70205: LD_VAR 0 1
70209: PUSH
70210: LD_VAR 0 6
70214: ARRAY
70215: PPUSH
70216: CALL 65233 0 2
70220: ST_TO_ADDR
// end ;
70221: GO 70128
70223: POP
70224: POP
// end ;
70225: LD_VAR 0 5
70229: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70230: LD_INT 0
70232: PPUSH
// if not vehicles or not parkingPoint then
70233: LD_VAR 0 1
70237: NOT
70238: IFTRUE 70247
70240: PUSH
70241: LD_VAR 0 2
70245: NOT
70246: OR
70247: IFFALSE 70251
// exit ;
70249: GO 70349
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70251: LD_ADDR_VAR 0 1
70255: PUSH
70256: LD_VAR 0 1
70260: PPUSH
70261: LD_INT 50
70263: PUSH
70264: EMPTY
70265: LIST
70266: PUSH
70267: LD_INT 3
70269: PUSH
70270: LD_INT 92
70272: PUSH
70273: LD_VAR 0 2
70277: PUSH
70278: LD_INT 1
70280: ARRAY
70281: PUSH
70282: LD_VAR 0 2
70286: PUSH
70287: LD_INT 2
70289: ARRAY
70290: PUSH
70291: LD_INT 8
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PPUSH
70308: CALL_OW 72
70312: ST_TO_ADDR
// if not vehicles then
70313: LD_VAR 0 1
70317: NOT
70318: IFFALSE 70322
// exit ;
70320: GO 70349
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70322: LD_VAR 0 1
70326: PPUSH
70327: LD_VAR 0 2
70331: PUSH
70332: LD_INT 1
70334: ARRAY
70335: PPUSH
70336: LD_VAR 0 2
70340: PUSH
70341: LD_INT 2
70343: ARRAY
70344: PPUSH
70345: CALL_OW 111
// end ;
70349: LD_VAR 0 3
70353: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70354: LD_INT 0
70356: PPUSH
70357: PPUSH
70358: PPUSH
// if not side or not area then
70359: LD_VAR 0 1
70363: NOT
70364: IFTRUE 70373
70366: PUSH
70367: LD_VAR 0 2
70371: NOT
70372: OR
70373: IFFALSE 70377
// exit ;
70375: GO 70496
// tmp := AreaToList ( area , 0 ) ;
70377: LD_ADDR_VAR 0 5
70381: PUSH
70382: LD_VAR 0 2
70386: PPUSH
70387: LD_INT 0
70389: PPUSH
70390: CALL_OW 517
70394: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70395: LD_ADDR_VAR 0 4
70399: PUSH
70400: DOUBLE
70401: LD_INT 1
70403: DEC
70404: ST_TO_ADDR
70405: LD_VAR 0 5
70409: PUSH
70410: LD_INT 1
70412: ARRAY
70413: PUSH
70414: FOR_TO
70415: IFFALSE 70494
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70417: LD_VAR 0 5
70421: PUSH
70422: LD_INT 1
70424: ARRAY
70425: PUSH
70426: LD_VAR 0 4
70430: ARRAY
70431: PPUSH
70432: LD_VAR 0 5
70436: PUSH
70437: LD_INT 2
70439: ARRAY
70440: PUSH
70441: LD_VAR 0 4
70445: ARRAY
70446: PPUSH
70447: CALL_OW 351
70451: IFFALSE 70492
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70453: LD_VAR 0 5
70457: PUSH
70458: LD_INT 1
70460: ARRAY
70461: PUSH
70462: LD_VAR 0 4
70466: ARRAY
70467: PPUSH
70468: LD_VAR 0 5
70472: PUSH
70473: LD_INT 2
70475: ARRAY
70476: PUSH
70477: LD_VAR 0 4
70481: ARRAY
70482: PPUSH
70483: LD_VAR 0 1
70487: PPUSH
70488: CALL_OW 244
// end ;
70492: GO 70414
70494: POP
70495: POP
// end ;
70496: LD_VAR 0 3
70500: RET
// export function UniqueArray ( array ) ; var i ; begin
70501: LD_INT 0
70503: PPUSH
70504: PPUSH
// result := [ ] ;
70505: LD_ADDR_VAR 0 2
70509: PUSH
70510: EMPTY
70511: ST_TO_ADDR
// if not array then
70512: LD_VAR 0 1
70516: NOT
70517: IFFALSE 70521
// exit ;
70519: GO 70582
// for i := 1 to array do
70521: LD_ADDR_VAR 0 3
70525: PUSH
70526: DOUBLE
70527: LD_INT 1
70529: DEC
70530: ST_TO_ADDR
70531: LD_VAR 0 1
70535: PUSH
70536: FOR_TO
70537: IFFALSE 70580
// if not array [ i ] in result then
70539: LD_VAR 0 1
70543: PUSH
70544: LD_VAR 0 3
70548: ARRAY
70549: PUSH
70550: LD_VAR 0 2
70554: IN
70555: NOT
70556: IFFALSE 70578
// result := Join ( result , i ) ;
70558: LD_ADDR_VAR 0 2
70562: PUSH
70563: LD_VAR 0 2
70567: PPUSH
70568: LD_VAR 0 3
70572: PPUSH
70573: CALL 65233 0 2
70577: ST_TO_ADDR
70578: GO 70536
70580: POP
70581: POP
// end ; end_of_file
70582: LD_VAR 0 2
70586: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70587: LD_VAR 0 1
70591: PUSH
70592: LD_INT 200
70594: DOUBLE
70595: GREATEREQUAL
70596: IFFALSE 70604
70598: LD_INT 299
70600: DOUBLE
70601: LESSEQUAL
70602: IFTRUE 70606
70604: GO 70638
70606: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70607: LD_VAR 0 1
70611: PPUSH
70612: LD_VAR 0 2
70616: PPUSH
70617: LD_VAR 0 3
70621: PPUSH
70622: LD_VAR 0 4
70626: PPUSH
70627: LD_VAR 0 5
70631: PPUSH
70632: CALL 21309 0 5
70636: GO 70715
70638: LD_INT 300
70640: DOUBLE
70641: GREATEREQUAL
70642: IFFALSE 70650
70644: LD_INT 399
70646: DOUBLE
70647: LESSEQUAL
70648: IFTRUE 70652
70650: GO 70714
70652: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70653: LD_VAR 0 1
70657: PPUSH
70658: LD_VAR 0 2
70662: PPUSH
70663: LD_VAR 0 3
70667: PPUSH
70668: LD_VAR 0 4
70672: PPUSH
70673: LD_VAR 0 5
70677: PPUSH
70678: LD_VAR 0 6
70682: PPUSH
70683: LD_VAR 0 7
70687: PPUSH
70688: LD_VAR 0 8
70692: PPUSH
70693: LD_VAR 0 9
70697: PPUSH
70698: LD_VAR 0 10
70702: PPUSH
70703: LD_VAR 0 11
70707: PPUSH
70708: CALL 17112 0 11
70712: GO 70715
70714: POP
// end ;
70715: PPOPN 11
70717: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70718: LD_VAR 0 1
70722: PPUSH
70723: LD_VAR 0 2
70727: PPUSH
70728: LD_VAR 0 3
70732: PPUSH
70733: LD_VAR 0 4
70737: PPUSH
70738: LD_VAR 0 5
70742: PPUSH
70743: CALL 20609 0 5
// end ; end_of_file
70747: PPOPN 5
70749: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70750: LD_VAR 0 1
70754: PPUSH
70755: LD_VAR 0 2
70759: PPUSH
70760: LD_VAR 0 3
70764: PPUSH
70765: LD_VAR 0 4
70769: PPUSH
70770: LD_VAR 0 5
70774: PPUSH
70775: LD_VAR 0 6
70779: PPUSH
70780: CALL 4652 0 6
// end ;
70784: PPOPN 6
70786: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70787: LD_INT 0
70789: PPUSH
// begin if not units then
70790: LD_VAR 0 1
70794: NOT
70795: IFFALSE 70799
// exit ;
70797: GO 70833
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70799: LD_VAR 0 1
70803: PPUSH
70804: LD_VAR 0 2
70808: PPUSH
70809: LD_VAR 0 3
70813: PPUSH
70814: LD_VAR 0 4
70818: PPUSH
70819: LD_VAR 0 5
70823: PPUSH
70824: LD_VAR 0 6
70828: PPUSH
70829: CALL 27006 0 6
// end ;
70833: PPOPN 7
70835: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70836: CALL 4532 0 0
// end ;
70840: PPOPN 1
70842: END
