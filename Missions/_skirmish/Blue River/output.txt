// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PreparePlayerBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PreparePlayerBase ; var i , un , skill , fac , lab ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
// fac := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
 515: LD_ADDR_VAR 0 5
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 30
 532: PUSH
 533: LD_INT 3
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PPUSH
 544: CALL_OW 69
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 7
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 30
 570: PUSH
 571: LD_INT 8
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: LD_INT 1
 589: ARRAY
 590: ST_TO_ADDR
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 591: LD_INT 30
 593: PPUSH
 594: LD_INT 14
 596: PPUSH
 597: LD_INT 7
 599: PPUSH
 600: LD_INT 20
 602: PPUSH
 603: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 607: LD_INT 49
 609: PPUSH
 610: LD_INT 17
 612: PPUSH
 613: LD_INT 7
 615: PPUSH
 616: LD_INT 20
 618: PPUSH
 619: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 623: LD_INT 35
 625: PPUSH
 626: LD_INT 46
 628: PPUSH
 629: LD_INT 7
 631: PPUSH
 632: LD_INT 20
 634: PPUSH
 635: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 639: LD_INT 70
 641: PPUSH
 642: LD_INT 39
 644: PPUSH
 645: LD_INT 7
 647: PPUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 655: LD_INT 30
 657: PPUSH
 658: LD_INT 14
 660: PPUSH
 661: LD_INT 7
 663: PPUSH
 664: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 668: LD_INT 49
 670: PPUSH
 671: LD_INT 17
 673: PPUSH
 674: LD_INT 7
 676: PPUSH
 677: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 681: LD_INT 35
 683: PPUSH
 684: LD_INT 46
 686: PPUSH
 687: LD_INT 7
 689: PPUSH
 690: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 694: LD_INT 70
 696: PPUSH
 697: LD_INT 39
 699: PPUSH
 700: LD_INT 7
 702: PPUSH
 703: CALL_OW 331
// uc_side := 7 ;
 707: LD_ADDR_OWVAR 20
 711: PUSH
 712: LD_INT 7
 714: ST_TO_ADDR
// uc_nation := 1 ;
 715: LD_ADDR_OWVAR 21
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
// if Difficulty < 3 then
 723: LD_OWVAR 67
 727: PUSH
 728: LD_INT 3
 730: LESS
 731: IFFALSE 832
// begin for i = 1 to 2 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 2
 745: PUSH
 746: FOR_TO
 747: IFFALSE 828
// begin vc_chassis := us_heavy_tracked ;
 749: LD_ADDR_OWVAR 37
 753: PUSH
 754: LD_INT 4
 756: ST_TO_ADDR
// vc_engine := 3 ;
 757: LD_ADDR_OWVAR 39
 761: PUSH
 762: LD_INT 3
 764: ST_TO_ADDR
// vc_control := control_computer ;
 765: LD_ADDR_OWVAR 38
 769: PUSH
 770: LD_INT 3
 772: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 773: LD_ADDR_OWVAR 40
 777: PUSH
 778: LD_INT 10
 780: ST_TO_ADDR
// un := CreateVehicle ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: CALL_OW 45
 790: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 791: LD_VAR 0 3
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: LD_INT 5
 801: PPUSH
 802: CALL_OW 12
 806: PPUSH
 807: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 811: LD_VAR 0 3
 815: PPUSH
 816: LD_INT 6
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ;
 826: GO 746
 828: POP
 829: POP
// end else
 830: GO 921
// begin vc_chassis := us_medium_tracked ;
 832: LD_ADDR_OWVAR 37
 836: PUSH
 837: LD_INT 3
 839: ST_TO_ADDR
// vc_engine := engine_combustion ;
 840: LD_ADDR_OWVAR 39
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// vc_control := control_manual ;
 848: LD_ADDR_OWVAR 38
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 856: LD_ADDR_OWVAR 40
 860: PUSH
 861: LD_INT 4
 863: ST_TO_ADDR
// un := CreateVehicle ;
 864: LD_ADDR_VAR 0 3
 868: PUSH
 869: CALL_OW 45
 873: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 874: LD_VAR 0 3
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: LD_INT 5
 884: PPUSH
 885: CALL_OW 12
 889: PPUSH
 890: CALL_OW 233
// SetFuel ( un , 75 ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 75
 901: PPUSH
 902: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 906: LD_VAR 0 3
 910: PPUSH
 911: LD_INT 6
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: LD_INT 8
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_OWVAR 67
 944: ARRAY
 945: ST_TO_ADDR
// hc_importance := 100 ;
 946: LD_ADDR_OWVAR 32
 950: PUSH
 951: LD_INT 100
 953: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 954: LD_INT 1
 956: PPUSH
 957: LD_INT 1
 959: PPUSH
 960: LD_VAR 0 4
 964: PPUSH
 965: CALL_OW 380
// hc_gallery := skirmish ;
 969: LD_ADDR_OWVAR 33
 973: PUSH
 974: LD_STRING skirmish
 976: ST_TO_ADDR
// hc_face_number := 4 ;
 977: LD_ADDR_OWVAR 34
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// hc_name := Jack Collins ;
 985: LD_ADDR_OWVAR 26
 989: PUSH
 990: LD_STRING Jack Collins
 992: ST_TO_ADDR
// com := CreateHuman ;
 993: LD_ADDR_EXP 1
 997: PUSH
 998: CALL_OW 44
1002: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
1003: LD_EXP 1
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL_OW 52
// hc_importance := 0 ;
1015: LD_ADDR_OWVAR 32
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// hc_gallery :=  ;
1023: LD_ADDR_OWVAR 33
1027: PUSH
1028: LD_STRING 
1030: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: LD_VAR 0 4
1041: PPUSH
1042: CALL_OW 380
// hc_name := Thomas Jackson ;
1046: LD_ADDR_OWVAR 26
1050: PUSH
1051: LD_STRING Thomas Jackson
1053: ST_TO_ADDR
// k1 := CreateHuman ;
1054: LD_ADDR_EXP 3
1058: PUSH
1059: CALL_OW 44
1063: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
1064: LD_EXP 3
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL_OW 52
// hc_name :=  ;
1076: LD_ADDR_OWVAR 26
1080: PUSH
1081: LD_STRING 
1083: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
1084: LD_ADDR_VAR 0 2
1088: PUSH
1089: DOUBLE
1090: LD_INT 1
1092: DEC
1093: ST_TO_ADDR
1094: LD_INT 9
1096: PUSH
1097: LD_INT 8
1099: PUSH
1100: LD_INT 7
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_OWVAR 67
1112: ARRAY
1113: PUSH
1114: FOR_TO
1115: IFFALSE 1290
// begin Randomize ;
1117: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1121: LD_ADDR_OWVAR 21
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: LD_INT 4
1156: PPUSH
1157: CALL_OW 12
1161: PPUSH
1162: LD_VAR 0 4
1166: PPUSH
1167: CALL_OW 380
// un := CreateHuman ;
1171: LD_ADDR_VAR 0 3
1175: PUSH
1176: CALL_OW 44
1180: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1181: LD_VAR 0 3
1185: PPUSH
1186: CALL_OW 257
1190: PUSH
1191: LD_INT 1
1193: DOUBLE
1194: EQUAL
1195: IFTRUE 1199
1197: GO 1214
1199: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_INT 21
1207: PPUSH
1208: CALL_OW 52
1212: GO 1288
1214: LD_INT 2
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1237
1222: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1223: LD_VAR 0 3
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 52
1235: GO 1288
1237: LD_INT 3
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1262
1245: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1246: LD_VAR 0 3
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 52
1260: GO 1288
1262: LD_INT 4
1264: DOUBLE
1265: EQUAL
1266: IFTRUE 1270
1268: GO 1287
1270: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1271: LD_VAR 0 3
1275: PPUSH
1276: LD_VAR 0 6
1280: PPUSH
1281: CALL_OW 52
1285: GO 1288
1287: POP
// end ;
1288: GO 1114
1290: POP
1291: POP
// uc_side := 2 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 2
1299: ST_TO_ADDR
// uc_nation := 2 ;
1300: LD_ADDR_OWVAR 21
1304: PUSH
1305: LD_INT 2
1307: ST_TO_ADDR
// hc_name := _ ;
1308: LD_ADDR_OWVAR 26
1312: PUSH
1313: LD_STRING _
1315: ST_TO_ADDR
// hc_gallery :=  ;
1316: LD_ADDR_OWVAR 33
1320: PUSH
1321: LD_STRING 
1323: ST_TO_ADDR
// hc_class := 4 ;
1324: LD_ADDR_OWVAR 28
1328: PUSH
1329: LD_INT 4
1331: ST_TO_ADDR
// hc_sex := sex_male ;
1332: LD_ADDR_OWVAR 27
1336: PUSH
1337: LD_INT 1
1339: ST_TO_ADDR
// doc := CreateHuman ;
1340: LD_ADDR_EXP 2
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// end ; end_of_file
1350: LD_VAR 0 1
1354: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1355: LD_INT 0
1357: PPUSH
1358: PPUSH
1359: PPUSH
1360: PPUSH
// uc_side := 2 ;
1361: LD_ADDR_OWVAR 20
1365: PUSH
1366: LD_INT 2
1368: ST_TO_ADDR
// uc_nation := 2 ;
1369: LD_ADDR_OWVAR 21
1373: PUSH
1374: LD_INT 2
1376: ST_TO_ADDR
// tmp := [ ] ;
1377: LD_ADDR_VAR 0 5
1381: PUSH
1382: EMPTY
1383: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1384: LD_ADDR_OWVAR 31
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: LD_INT 10
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_OWVAR 67
1407: ARRAY
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 6
1414: PUSH
1415: LD_INT 10
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: PUSH
1423: LD_OWVAR 67
1427: ARRAY
1428: PUSH
1429: LD_INT 3
1431: PUSH
1432: LD_INT 6
1434: PUSH
1435: LD_INT 10
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_OWVAR 67
1447: ARRAY
1448: PUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 6
1454: PUSH
1455: LD_INT 10
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_OWVAR 67
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1475: LD_INT 4
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 7
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PPUSH
1488: CALL_OW 70
1492: IFFALSE 1533
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1494: LD_ADDR_VAR 0 3
1498: PUSH
1499: LD_INT 4
1501: PPUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 7
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 70
1516: PUSH
1517: FOR_IN
1518: IFFALSE 1531
// RemoveUnit ( i ) ;
1520: LD_VAR 0 3
1524: PPUSH
1525: CALL_OW 64
1529: GO 1517
1531: POP
1532: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1533: LD_INT 5
1535: PPUSH
1536: LD_INT 22
1538: PUSH
1539: LD_INT 7
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PPUSH
1546: CALL_OW 70
1550: IFFALSE 1591
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 70
1574: PUSH
1575: FOR_IN
1576: IFFALSE 1589
// RemoveUnit ( i ) ;
1578: LD_VAR 0 3
1582: PPUSH
1583: CALL_OW 64
1587: GO 1575
1589: POP
1590: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 22
1596: PUSH
1597: LD_INT 7
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PPUSH
1604: CALL_OW 70
1608: IFFALSE 1649
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1610: LD_ADDR_VAR 0 3
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 22
1620: PUSH
1621: LD_INT 7
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 70
1632: PUSH
1633: FOR_IN
1634: IFFALSE 1647
// RemoveUnit ( i ) ;
1636: LD_VAR 0 3
1640: PPUSH
1641: CALL_OW 64
1645: GO 1633
1647: POP
1648: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 22
1654: PUSH
1655: LD_INT 7
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PPUSH
1662: CALL_OW 70
1666: IFFALSE 1707
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1668: LD_ADDR_VAR 0 3
1672: PUSH
1673: LD_INT 2
1675: PPUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 7
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: PUSH
1691: FOR_IN
1692: IFFALSE 1705
// RemoveUnit ( i ) ;
1694: LD_VAR 0 3
1698: PPUSH
1699: CALL_OW 64
1703: GO 1691
1705: POP
1706: POP
// case num of 1 :
1707: LD_VAR 0 1
1711: PUSH
1712: LD_INT 1
1714: DOUBLE
1715: EQUAL
1716: IFTRUE 1720
1718: GO 1973
1720: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 5
1733: PUSH
1734: LD_INT 6
1736: PUSH
1737: LD_INT 6
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_OWVAR 67
1749: ARRAY
1750: PUSH
1751: FOR_TO
1752: IFFALSE 1844
// begin uc_nation := 0 ;
1754: LD_ADDR_OWVAR 21
1758: PUSH
1759: LD_INT 0
1761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1762: LD_ADDR_OWVAR 28
1766: PUSH
1767: LD_INT 15
1769: ST_TO_ADDR
// hc_gallery :=  ;
1770: LD_ADDR_OWVAR 33
1774: PUSH
1775: LD_STRING 
1777: ST_TO_ADDR
// hc_name :=  ;
1778: LD_ADDR_OWVAR 26
1782: PUSH
1783: LD_STRING 
1785: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1786: LD_ADDR_OWVAR 29
1790: PUSH
1791: LD_INT 16
1793: PUSH
1794: LD_INT 12
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: ST_TO_ADDR
// un := CreateHuman ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: CALL_OW 44
1810: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1811: LD_VAR 0 4
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_INT 0
1821: PPUSH
1822: CALL_OW 49
// tmp := tmp ^ un ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PUSH
1836: LD_VAR 0 4
1840: ADD
1841: ST_TO_ADDR
// end ;
1842: GO 1751
1844: POP
1845: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: DOUBLE
1852: LD_INT 1
1854: DEC
1855: ST_TO_ADDR
1856: LD_INT 4
1858: PUSH
1859: LD_INT 5
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PUSH
1870: LD_OWVAR 67
1874: ARRAY
1875: PUSH
1876: FOR_TO
1877: IFFALSE 1969
// begin uc_nation := 0 ;
1879: LD_ADDR_OWVAR 21
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1887: LD_ADDR_OWVAR 28
1891: PUSH
1892: LD_INT 15
1894: ST_TO_ADDR
// hc_gallery :=  ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING 
1902: ST_TO_ADDR
// hc_name :=  ;
1903: LD_ADDR_OWVAR 26
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1911: LD_ADDR_OWVAR 29
1915: PUSH
1916: LD_INT 16
1918: PUSH
1919: LD_INT 12
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// un := CreateHuman ;
1926: LD_ADDR_VAR 0 4
1930: PUSH
1931: CALL_OW 44
1935: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_INT 5
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// tmp := tmp ^ un ;
1951: LD_ADDR_VAR 0 5
1955: PUSH
1956: LD_VAR 0 5
1960: PUSH
1961: LD_VAR 0 4
1965: ADD
1966: ST_TO_ADDR
// end ;
1967: GO 1876
1969: POP
1970: POP
// end ; 2 :
1971: GO 2751
1973: LD_INT 2
1975: DOUBLE
1976: EQUAL
1977: IFTRUE 1981
1979: GO 2109
1981: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: DOUBLE
1988: LD_INT 1
1990: DEC
1991: ST_TO_ADDR
1992: LD_INT 3
1994: PUSH
1995: LD_INT 4
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_OWVAR 67
2010: ARRAY
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2105
// begin uc_nation := 0 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 0
2022: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2023: LD_ADDR_OWVAR 28
2027: PUSH
2028: LD_INT 17
2030: ST_TO_ADDR
// hc_gallery :=  ;
2031: LD_ADDR_OWVAR 33
2035: PUSH
2036: LD_STRING 
2038: ST_TO_ADDR
// hc_name :=  ;
2039: LD_ADDR_OWVAR 26
2043: PUSH
2044: LD_STRING 
2046: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
2047: LD_ADDR_OWVAR 29
2051: PUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 12
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: ST_TO_ADDR
// un := CreateHuman ;
2062: LD_ADDR_VAR 0 4
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
2072: LD_VAR 0 4
2076: PPUSH
2077: LD_INT 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// tmp := tmp ^ un ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_VAR 0 4
2101: ADD
2102: ST_TO_ADDR
// end ;
2103: GO 2012
2105: POP
2106: POP
// end ; 3 :
2107: GO 2751
2109: LD_INT 3
2111: DOUBLE
2112: EQUAL
2113: IFTRUE 2117
2115: GO 2277
2117: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 4
2130: PUSH
2131: LD_INT 5
2133: PUSH
2134: LD_INT 6
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_OWVAR 67
2146: ARRAY
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2273
// begin uc_nation := 2 ;
2151: LD_ADDR_OWVAR 21
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2159: LD_ADDR_OWVAR 37
2163: PUSH
2164: LD_INT 14
2166: ST_TO_ADDR
// vc_engine := 3 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// vc_control := control_apeman ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 5
2182: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 27
2190: PUSH
2191: LD_INT 28
2193: PUSH
2194: LD_INT 29
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 4
2211: PPUSH
2212: CALL_OW 12
2216: ARRAY
2217: ST_TO_ADDR
// un := CreateVehicle ;
2218: LD_ADDR_VAR 0 4
2222: PUSH
2223: CALL_OW 45
2227: ST_TO_ADDR
// tmp := tmp ^ un ;
2228: LD_ADDR_VAR 0 5
2232: PUSH
2233: LD_VAR 0 5
2237: PUSH
2238: LD_VAR 0 4
2242: ADD
2243: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2256: LD_VAR 0 4
2260: PPUSH
2261: LD_INT 2
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// end ;
2271: GO 2148
2273: POP
2274: POP
// end ; 4 :
2275: GO 2751
2277: LD_INT 4
2279: DOUBLE
2280: EQUAL
2281: IFTRUE 2285
2283: GO 2453
2285: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: DOUBLE
2292: LD_INT 1
2294: DEC
2295: ST_TO_ADDR
2296: LD_INT 3
2298: PPUSH
2299: LD_INT 4
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: LD_INT 6
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_OWVAR 67
2317: ARRAY
2318: PPUSH
2319: CALL_OW 12
2323: PUSH
2324: FOR_TO
2325: IFFALSE 2449
// begin uc_nation := 2 ;
2327: LD_ADDR_OWVAR 21
2331: PUSH
2332: LD_INT 2
2334: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 14
2342: ST_TO_ADDR
// vc_engine := 3 ;
2343: LD_ADDR_OWVAR 39
2347: PUSH
2348: LD_INT 3
2350: ST_TO_ADDR
// vc_control := control_apeman ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 5
2358: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2359: LD_ADDR_OWVAR 40
2363: PUSH
2364: LD_INT 27
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 29
2372: PUSH
2373: LD_INT 91
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: LD_INT 1
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL_OW 12
2392: ARRAY
2393: ST_TO_ADDR
// un := CreateVehicle ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: CALL_OW 45
2403: ST_TO_ADDR
// tmp := tmp ^ un ;
2404: LD_ADDR_VAR 0 5
2408: PUSH
2409: LD_VAR 0 5
2413: PUSH
2414: LD_VAR 0 4
2418: ADD
2419: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2420: LD_VAR 0 4
2424: PPUSH
2425: LD_INT 3
2427: PPUSH
2428: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 0
2442: PPUSH
2443: CALL_OW 49
// end ;
2447: GO 2324
2449: POP
2450: POP
// end ; 5 :
2451: GO 2751
2453: LD_INT 5
2455: DOUBLE
2456: EQUAL
2457: IFTRUE 2461
2459: GO 2621
2461: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: DOUBLE
2468: LD_INT 1
2470: DEC
2471: ST_TO_ADDR
2472: LD_INT 3
2474: PUSH
2475: LD_INT 4
2477: PUSH
2478: LD_INT 4
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: LD_OWVAR 67
2490: ARRAY
2491: PUSH
2492: FOR_TO
2493: IFFALSE 2617
// begin uc_nation := 2 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 2
2502: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 14
2510: ST_TO_ADDR
// vc_engine := 3 ;
2511: LD_ADDR_OWVAR 39
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// vc_control := control_apeman ;
2519: LD_ADDR_OWVAR 38
2523: PUSH
2524: LD_INT 5
2526: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2527: LD_ADDR_OWVAR 40
2531: PUSH
2532: LD_INT 27
2534: PUSH
2535: LD_INT 28
2537: PUSH
2538: LD_INT 29
2540: PUSH
2541: LD_INT 91
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 1
2552: PPUSH
2553: LD_INT 4
2555: PPUSH
2556: CALL_OW 12
2560: ARRAY
2561: ST_TO_ADDR
// un := CreateVehicle ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: CALL_OW 45
2571: ST_TO_ADDR
// tmp := tmp ^ un ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ADD
2587: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2588: LD_VAR 0 4
2592: PPUSH
2593: LD_INT 4
2595: PPUSH
2596: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2600: LD_VAR 0 4
2604: PPUSH
2605: LD_INT 5
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: CALL_OW 49
// end ;
2615: GO 2492
2617: POP
2618: POP
// end ; 6 :
2619: GO 2751
2621: LD_INT 6
2623: DOUBLE
2624: EQUAL
2625: IFTRUE 2629
2627: GO 2750
2629: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2630: LD_ADDR_VAR 0 3
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 2
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_OWVAR 67
2658: ARRAY
2659: PUSH
2660: FOR_TO
2661: IFFALSE 2746
// begin uc_nation := 2 ;
2663: LD_ADDR_OWVAR 21
2667: PUSH
2668: LD_INT 2
2670: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2671: LD_ADDR_OWVAR 37
2675: PUSH
2676: LD_INT 11
2678: ST_TO_ADDR
// vc_engine := engine_combustion ;
2679: LD_ADDR_OWVAR 39
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// vc_control := control_apeman ;
2687: LD_ADDR_OWVAR 38
2691: PUSH
2692: LD_INT 5
2694: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2695: LD_ADDR_OWVAR 40
2699: PUSH
2700: LD_INT 24
2702: ST_TO_ADDR
// un := CreateVehicle ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 45
2712: ST_TO_ADDR
// tmp := tmp ^ un ;
2713: LD_ADDR_VAR 0 5
2717: PUSH
2718: LD_VAR 0 5
2722: PUSH
2723: LD_VAR 0 4
2727: ADD
2728: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 0
2739: PPUSH
2740: CALL_OW 49
// end ;
2744: GO 2660
2746: POP
2747: POP
// end ; end ;
2748: GO 2751
2750: POP
// result := tmp ;
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: LD_VAR 0 5
2760: ST_TO_ADDR
// end ;
2761: LD_VAR 0 2
2765: RET
// export function ComitSib ; var un ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
// uc_side := 2 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 2
2777: ST_TO_ADDR
// uc_nation := 2 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 2
2785: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: LD_INT 7
2794: PPUSH
2795: CALL_OW 380
// un := CreateHuman ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: CALL_OW 44
2808: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2809: LD_VAR 0 2
2813: PPUSH
2814: LD_INT 4
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_INT 63
2831: PPUSH
2832: LD_INT 37
2834: PPUSH
2835: CALL_OW 158
// end ;
2839: LD_VAR 0 1
2843: RET
// export function DSay ; var i ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
// Randomize ;
2848: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: LD_INT 1
2859: PPUSH
2860: LD_INT 8
2862: PPUSH
2863: CALL_OW 12
2867: ST_TO_ADDR
// case i of 1 :
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: DOUBLE
2876: EQUAL
2877: IFTRUE 2881
2879: GO 2896
2881: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2882: LD_EXP 2
2886: PPUSH
2887: LD_STRING DDocA1
2889: PPUSH
2890: CALL_OW 94
2894: GO 3058
2896: LD_INT 2
2898: DOUBLE
2899: EQUAL
2900: IFTRUE 2904
2902: GO 2919
2904: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2905: LD_EXP 2
2909: PPUSH
2910: LD_STRING DDocA2
2912: PPUSH
2913: CALL_OW 94
2917: GO 3058
2919: LD_INT 3
2921: DOUBLE
2922: EQUAL
2923: IFTRUE 2927
2925: GO 2942
2927: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2928: LD_EXP 2
2932: PPUSH
2933: LD_STRING DDocA3
2935: PPUSH
2936: CALL_OW 94
2940: GO 3058
2942: LD_INT 4
2944: DOUBLE
2945: EQUAL
2946: IFTRUE 2950
2948: GO 2965
2950: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2951: LD_EXP 2
2955: PPUSH
2956: LD_STRING DDocA4
2958: PPUSH
2959: CALL_OW 94
2963: GO 3058
2965: LD_INT 5
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2988
2973: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2974: LD_EXP 2
2978: PPUSH
2979: LD_STRING DDocA5
2981: PPUSH
2982: CALL_OW 94
2986: GO 3058
2988: LD_INT 6
2990: DOUBLE
2991: EQUAL
2992: IFTRUE 2996
2994: GO 3011
2996: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2997: LD_EXP 2
3001: PPUSH
3002: LD_STRING DDocA6
3004: PPUSH
3005: CALL_OW 94
3009: GO 3058
3011: LD_INT 7
3013: DOUBLE
3014: EQUAL
3015: IFTRUE 3019
3017: GO 3034
3019: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
3020: LD_EXP 2
3024: PPUSH
3025: LD_STRING DDocA7
3027: PPUSH
3028: CALL_OW 94
3032: GO 3058
3034: LD_INT 8
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3057
3042: POP
// SayRadio ( doc , DDocA8 ) ; end ;
3043: LD_EXP 2
3047: PPUSH
3048: LD_STRING DDocA8
3050: PPUSH
3051: CALL_OW 94
3055: GO 3058
3057: POP
// end ; end_of_file
3058: LD_VAR 0 1
3062: RET
// every 0 0$01 do
3063: GO 3065
3065: DISABLE
// begin display_strings := [ #tick , tick ] ;
3066: LD_ADDR_OWVAR 47
3070: PUSH
3071: LD_STRING #tick
3073: PUSH
3074: LD_OWVAR 1
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// enable ;
3083: ENABLE
// end ;
3084: END
// export pom , hover , attackN ; every 1 do
3085: GO 3087
3087: DISABLE
// begin pom := [ ] ;
3088: LD_ADDR_EXP 4
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// hover := [ ] ;
3095: LD_ADDR_EXP 5
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// attackN := 0 ;
3102: LD_ADDR_EXP 6
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3111: LD_EXP 4
3115: IFFALSE 3537
3117: GO 3119
3119: DISABLE
3120: LD_INT 0
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// begin enable ;
3126: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: LD_INT 22
3134: PUSH
3135: LD_INT 7
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 69
3146: ST_TO_ADDR
// for i = 1 to pom do
3147: LD_ADDR_VAR 0 1
3151: PUSH
3152: DOUBLE
3153: LD_INT 1
3155: DEC
3156: ST_TO_ADDR
3157: LD_EXP 4
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3221
// if not HasTask ( pom [ i ] ) then
3165: LD_EXP 4
3169: PUSH
3170: LD_VAR 0 1
3174: ARRAY
3175: PPUSH
3176: CALL_OW 314
3180: NOT
3181: IFFALSE 3219
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3183: LD_EXP 4
3187: PUSH
3188: LD_VAR 0 1
3192: ARRAY
3193: PPUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_EXP 4
3203: PUSH
3204: LD_VAR 0 1
3208: ARRAY
3209: PPUSH
3210: CALL_OW 74
3214: PPUSH
3215: CALL_OW 115
3219: GO 3162
3221: POP
3222: POP
// if hover then
3223: LD_EXP 5
3227: IFFALSE 3537
// begin for i = 1 to hover do
3229: LD_ADDR_VAR 0 1
3233: PUSH
3234: DOUBLE
3235: LD_INT 1
3237: DEC
3238: ST_TO_ADDR
3239: LD_EXP 5
3243: PUSH
3244: FOR_TO
3245: IFFALSE 3535
// begin if GetLives ( hover [ i ] ) < 250 then
3247: LD_EXP 5
3251: PUSH
3252: LD_VAR 0 1
3256: ARRAY
3257: PPUSH
3258: CALL_OW 256
3262: PUSH
3263: LD_INT 250
3265: LESS
3266: IFFALSE 3333
// begin for z = 1 to 1 + Difficulty do
3268: LD_ADDR_VAR 0 3
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 1
3280: PUSH
3281: LD_OWVAR 67
3285: PLUS
3286: PUSH
3287: FOR_TO
3288: IFFALSE 3331
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3290: LD_EXP 5
3294: PUSH
3295: LD_VAR 0 1
3299: ARRAY
3300: PPUSH
3301: CALL_OW 250
3305: PPUSH
3306: LD_EXP 5
3310: PUSH
3311: LD_VAR 0 1
3315: ARRAY
3316: PPUSH
3317: CALL_OW 251
3321: PPUSH
3322: LD_INT 10
3324: PPUSH
3325: CALL_OW 453
3329: GO 3287
3331: POP
3332: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 25
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PPUSH
3365: CALL_OW 72
3369: PUSH
3370: LD_INT 0
3372: GREATER
3373: IFFALSE 3455
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3375: LD_ADDR_VAR 0 4
3379: PUSH
3380: LD_VAR 0 2
3384: PPUSH
3385: LD_INT 25
3387: PUSH
3388: LD_INT 2
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 3
3397: PUSH
3398: LD_INT 54
3400: PUSH
3401: EMPTY
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PPUSH
3412: CALL_OW 72
3416: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3417: LD_EXP 5
3421: PUSH
3422: LD_VAR 0 1
3426: ARRAY
3427: PPUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_EXP 5
3437: PUSH
3438: LD_VAR 0 1
3442: ARRAY
3443: PPUSH
3444: CALL_OW 74
3448: PPUSH
3449: CALL_OW 115
// end else
3453: GO 3533
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3455: LD_ADDR_VAR 0 4
3459: PUSH
3460: LD_VAR 0 2
3464: PPUSH
3465: LD_INT 21
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: LD_INT 54
3480: PUSH
3481: EMPTY
3482: LIST
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 72
3496: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3497: LD_EXP 5
3501: PUSH
3502: LD_VAR 0 1
3506: ARRAY
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: LD_EXP 5
3517: PUSH
3518: LD_VAR 0 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 74
3528: PPUSH
3529: CALL_OW 115
// end ; end ;
3533: GO 3244
3535: POP
3536: POP
// end ; end ;
3537: PPOPN 4
3539: END
// every 3 3$10 do var i , un ;
3540: GO 3542
3542: DISABLE
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
// begin uc_side := 7 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 7
3554: ST_TO_ADDR
// uc_nation := 1 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// for i = 1 to 2 do
3563: LD_ADDR_VAR 0 1
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 2
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3742
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3579: LD_INT 1
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 6
3590: PUSH
3591: LD_INT 6
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_OWVAR 67
3603: ARRAY
3604: PPUSH
3605: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3609: LD_ADDR_OWVAR 37
3613: PUSH
3614: LD_INT 1
3616: ST_TO_ADDR
// vc_engine := engine_combustion ;
3617: LD_ADDR_OWVAR 39
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// vc_control := control_manual ;
3625: LD_ADDR_OWVAR 38
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3633: LD_ADDR_OWVAR 41
3637: PUSH
3638: LD_INT 66
3640: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3641: LD_ADDR_OWVAR 40
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 2
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_INT 3
3666: PPUSH
3667: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_INT 48
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3689: CALL_OW 44
3693: PPUSH
3694: LD_VAR 0 2
3698: PPUSH
3699: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3703: LD_VAR 0 2
3707: PPUSH
3708: LD_INT 49
3710: PPUSH
3711: LD_INT 17
3713: PPUSH
3714: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3718: LD_VAR 0 2
3722: PPUSH
3723: LD_INT 48
3725: PPUSH
3726: LD_INT 36
3728: PPUSH
3729: CALL_OW 171
// Wait ( 0 0$02 ) ;
3733: LD_INT 70
3735: PPUSH
3736: CALL_OW 67
// end ;
3740: GO 3576
3742: POP
3743: POP
// end ;
3744: PPOPN 2
3746: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3747: LD_EXP 6
3751: PUSH
3752: LD_INT 10
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 14
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PUSH
3766: LD_OWVAR 67
3770: ARRAY
3771: LESS
3772: IFFALSE 4474
3774: GO 3776
3776: DISABLE
3777: LD_INT 0
3779: PPUSH
3780: PPUSH
// begin enable ;
3781: ENABLE
// Randomize ;
3782: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3786: LD_INT 35
3788: PPUSH
3789: LD_INT 6265
3791: PPUSH
3792: CALL_OW 12
3796: PPUSH
3797: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3801: LD_EXP 6
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 4
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: PUSH
3820: LD_OWVAR 67
3824: ARRAY
3825: LESS
3826: IFFALSE 3846
// c := Rand ( 1 , 2 ) else
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ST_TO_ADDR
3844: GO 3862
// c := Rand ( 1 , 3 ) ;
3846: LD_ADDR_VAR 0 1
3850: PUSH
3851: LD_INT 1
3853: PPUSH
3854: LD_INT 3
3856: PPUSH
3857: CALL_OW 12
3861: ST_TO_ADDR
// if attackN = 0 then
3862: LD_EXP 6
3866: PUSH
3867: LD_INT 0
3869: EQUAL
3870: IFFALSE 3886
// Say ( com , DJackAttack ) else
3872: LD_EXP 1
3876: PPUSH
3877: LD_STRING DJackAttack
3879: PPUSH
3880: CALL_OW 88
3884: GO 3890
// DSay ;
3886: CALL 2844 0 0
// case c of 1 :
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 1
3897: DOUBLE
3898: EQUAL
3899: IFTRUE 3903
3901: GO 4085
3903: POP
// begin pom := pom ^ Attack ( 1 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 1
3916: PPUSH
3917: CALL 1355 0 1
3921: ADD
3922: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3923: LD_INT 420
3925: PPUSH
3926: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3930: LD_ADDR_EXP 4
3934: PUSH
3935: LD_EXP 4
3939: PUSH
3940: LD_INT 3
3942: PPUSH
3943: CALL 1355 0 1
3947: ADD
3948: ST_TO_ADDR
// if Difficulty > 2 then
3949: LD_OWVAR 67
3953: PUSH
3954: LD_INT 2
3956: GREATER
3957: IFFALSE 3985
// begin Wait ( 0 0$46 ) ;
3959: LD_INT 1610
3961: PPUSH
3962: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 4
3978: PPUSH
3979: CALL 1355 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; if attackN > 4 then
3985: LD_EXP 6
3989: PUSH
3990: LD_INT 4
3992: GREATER
3993: IFFALSE 4021
// begin Wait ( 0 0$12 ) ;
3995: LD_INT 420
3997: PPUSH
3998: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4002: LD_ADDR_EXP 4
4006: PUSH
4007: LD_EXP 4
4011: PUSH
4012: LD_INT 3
4014: PPUSH
4015: CALL 1355 0 1
4019: ADD
4020: ST_TO_ADDR
// end ; if attackN > 8 then
4021: LD_EXP 6
4025: PUSH
4026: LD_INT 8
4028: GREATER
4029: IFFALSE 4083
// begin Wait ( 0 0$12 ) ;
4031: LD_INT 420
4033: PPUSH
4034: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: LD_INT 0
4045: PPUSH
4046: LD_INT 100
4048: PPUSH
4049: CALL_OW 12
4053: ST_TO_ADDR
// if l < 45 then
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 45
4061: LESS
4062: IFFALSE 4083
// pom := pom ^ Attack ( 2 ) ;
4064: LD_ADDR_EXP 4
4068: PUSH
4069: LD_EXP 4
4073: PUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL 1355 0 1
4081: ADD
4082: ST_TO_ADDR
// end ; end ; 2 :
4083: GO 4372
4085: LD_INT 2
4087: DOUBLE
4088: EQUAL
4089: IFTRUE 4093
4091: GO 4241
4093: POP
// begin pom := pom ^ Attack ( 2 ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL 1355 0 1
4111: ADD
4112: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4113: LD_ADDR_EXP 4
4117: PUSH
4118: LD_EXP 4
4122: PUSH
4123: LD_INT 3
4125: PPUSH
4126: CALL 1355 0 1
4130: ADD
4131: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 1
4139: GREATER
4140: PUSH
4141: LD_INT 63
4143: PPUSH
4144: LD_INT 37
4146: PPUSH
4147: CALL_OW 428
4151: PPUSH
4152: CALL_OW 266
4156: PUSH
4157: LD_INT 30
4159: EQUAL
4160: AND
4161: IFFALSE 4167
// ComitSib ;
4163: CALL 2766 0 0
// if Difficulty > 2 then
4167: LD_OWVAR 67
4171: PUSH
4172: LD_INT 2
4174: GREATER
4175: IFFALSE 4203
// begin Wait ( 0 0$25 ) ;
4177: LD_INT 875
4179: PPUSH
4180: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4184: LD_ADDR_EXP 4
4188: PUSH
4189: LD_EXP 4
4193: PUSH
4194: LD_INT 4
4196: PPUSH
4197: CALL 1355 0 1
4201: ADD
4202: ST_TO_ADDR
// end ; if attackN > 7 then
4203: LD_EXP 6
4207: PUSH
4208: LD_INT 7
4210: GREATER
4211: IFFALSE 4239
// begin Wait ( 0 0$15 ) ;
4213: LD_INT 525
4215: PPUSH
4216: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4220: LD_ADDR_EXP 4
4224: PUSH
4225: LD_EXP 4
4229: PUSH
4230: LD_INT 2
4232: PPUSH
4233: CALL 1355 0 1
4237: ADD
4238: ST_TO_ADDR
// end ; end ; 3 :
4239: GO 4372
4241: LD_INT 3
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4371
4249: POP
// begin pom := pom ^ Attack ( 1 ) ;
4250: LD_ADDR_EXP 4
4254: PUSH
4255: LD_EXP 4
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL 1355 0 1
4267: ADD
4268: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4269: LD_INT 70
4271: PPUSH
4272: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4276: LD_ADDR_EXP 4
4280: PUSH
4281: LD_EXP 4
4285: PUSH
4286: LD_INT 2
4288: PPUSH
4289: CALL 1355 0 1
4293: ADD
4294: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4295: LD_INT 2100
4297: PPUSH
4298: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4302: LD_ADDR_EXP 4
4306: PUSH
4307: LD_EXP 4
4311: PUSH
4312: LD_INT 3
4314: PPUSH
4315: CALL 1355 0 1
4319: ADD
4320: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4321: LD_ADDR_EXP 4
4325: PUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 5
4333: PPUSH
4334: CALL 1355 0 1
4338: ADD
4339: ST_TO_ADDR
// if attackN > 10 then
4340: LD_EXP 6
4344: PUSH
4345: LD_INT 10
4347: GREATER
4348: IFFALSE 4369
// pom := pom ^ Attack ( 2 ) ;
4350: LD_ADDR_EXP 4
4354: PUSH
4355: LD_EXP 4
4359: PUSH
4360: LD_INT 2
4362: PPUSH
4363: CALL 1355 0 1
4367: ADD
4368: ST_TO_ADDR
// end ; end ;
4369: GO 4372
4371: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4372: LD_OWVAR 67
4376: PUSH
4377: LD_INT 1
4379: GREATER
4380: PUSH
4381: LD_EXP 6
4385: PUSH
4386: LD_INT 4
4388: MOD
4389: PUSH
4390: LD_INT 0
4392: EQUAL
4393: AND
4394: IFFALSE 4460
// begin Wait ( 1 1$45 ) ;
4396: LD_INT 3675
4398: PPUSH
4399: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4403: LD_ADDR_EXP 4
4407: PUSH
4408: LD_EXP 4
4412: PUSH
4413: LD_INT 3
4415: PPUSH
4416: CALL 1355 0 1
4420: ADD
4421: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4422: LD_ADDR_EXP 4
4426: PUSH
4427: LD_EXP 4
4431: PUSH
4432: LD_INT 4
4434: PPUSH
4435: CALL 1355 0 1
4439: ADD
4440: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4441: LD_ADDR_EXP 5
4445: PUSH
4446: LD_EXP 5
4450: PUSH
4451: LD_INT 6
4453: PPUSH
4454: CALL 1355 0 1
4458: ADD
4459: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4460: LD_ADDR_EXP 6
4464: PUSH
4465: LD_EXP 6
4469: PUSH
4470: LD_INT 1
4472: PLUS
4473: ST_TO_ADDR
// end ;
4474: PPOPN 2
4476: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4477: LD_EXP 6
4481: PUSH
4482: LD_INT 10
4484: PUSH
4485: LD_INT 12
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: LD_OWVAR 67
4500: ARRAY
4501: GREATEREQUAL
4502: PUSH
4503: LD_INT 22
4505: PUSH
4506: LD_INT 2
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PPUSH
4513: CALL_OW 69
4517: PUSH
4518: LD_INT 0
4520: EQUAL
4521: AND
4522: IFFALSE 4578
4524: GO 4526
4526: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4527: LD_EXP 2
4531: PPUSH
4532: LD_STRING DDocEnd
4534: PPUSH
4535: CALL_OW 94
// Wait ( 0 0$03 ) ;
4539: LD_INT 105
4541: PPUSH
4542: CALL_OW 67
// case Query ( QWin ) of 1 :
4546: LD_STRING QWin
4548: PPUSH
4549: CALL_OW 97
4553: PUSH
4554: LD_INT 1
4556: DOUBLE
4557: EQUAL
4558: IFTRUE 4562
4560: GO 4565
4562: POP
// ; end ;
4563: GO 4566
4565: POP
// music_nat := 5 ;
4566: LD_ADDR_OWVAR 71
4570: PUSH
4571: LD_INT 5
4573: ST_TO_ADDR
// YouWin ;
4574: CALL_OW 103
// end ; end_of_file
4578: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL 17460 0 1
// if un = brave or un = com then
4588: LD_VAR 0 1
4592: PUSH
4593: LD_INT 1
4595: EQUAL
4596: PUSH
4597: LD_VAR 0 1
4601: PUSH
4602: LD_EXP 1
4606: EQUAL
4607: OR
4608: IFFALSE 4629
// begin SayRadio ( doc , DDocWin ) ;
4610: LD_EXP 2
4614: PPUSH
4615: LD_STRING DDocWin
4617: PPUSH
4618: CALL_OW 94
// YouLost (  ) ;
4622: LD_STRING 
4624: PPUSH
4625: CALL_OW 104
// end ; end ;
4629: PPOPN 1
4631: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_VAR 0 2
4641: PPUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL 17558 0 3
// end ;
4651: PPOPN 3
4653: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL 17566 0 1
// end ; end_of_file
4663: PPOPN 1
4665: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
4666: LD_INT 0
4668: PPUSH
// ar_crane := 88 ;
4669: LD_ADDR_EXP 13
4673: PUSH
4674: LD_INT 88
4676: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4677: LD_ADDR_EXP 8
4681: PUSH
4682: LD_INT 89
4684: ST_TO_ADDR
// us_hack := 99 ;
4685: LD_ADDR_EXP 9
4689: PUSH
4690: LD_INT 99
4692: ST_TO_ADDR
// us_artillery := 97 ;
4693: LD_ADDR_EXP 10
4697: PUSH
4698: LD_INT 97
4700: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4701: LD_ADDR_EXP 11
4705: PUSH
4706: LD_INT 91
4708: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
4709: LD_ADDR_EXP 12
4713: PUSH
4714: LD_INT 92
4716: ST_TO_ADDR
// ru_radar := 98 ;
4717: LD_ADDR_EXP 7
4721: PUSH
4722: LD_INT 98
4724: ST_TO_ADDR
// tech_Artillery := 80 ;
4725: LD_ADDR_EXP 14
4729: PUSH
4730: LD_INT 80
4732: ST_TO_ADDR
// tech_RadMat := 81 ;
4733: LD_ADDR_EXP 15
4737: PUSH
4738: LD_INT 81
4740: ST_TO_ADDR
// tech_BasicTools := 82 ;
4741: LD_ADDR_EXP 16
4745: PUSH
4746: LD_INT 82
4748: ST_TO_ADDR
// tech_Cargo := 83 ;
4749: LD_ADDR_EXP 17
4753: PUSH
4754: LD_INT 83
4756: ST_TO_ADDR
// tech_Track := 84 ;
4757: LD_ADDR_EXP 18
4761: PUSH
4762: LD_INT 84
4764: ST_TO_ADDR
// tech_Crane := 85 ;
4765: LD_ADDR_EXP 19
4769: PUSH
4770: LD_INT 85
4772: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4773: LD_ADDR_EXP 20
4777: PUSH
4778: LD_INT 86
4780: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4781: LD_ADDR_EXP 21
4785: PUSH
4786: LD_INT 87
4788: ST_TO_ADDR
// end ;
4789: LD_VAR 0 1
4793: RET
// every 1 do
4794: GO 4796
4796: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4797: CALL 4666 0 0
4801: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4802: LD_VAR 0 2
4806: PUSH
4807: LD_INT 100
4809: EQUAL
4810: IFFALSE 5759
// begin if not StreamModeActive then
4812: LD_EXP 22
4816: NOT
4817: IFFALSE 4827
// StreamModeActive := true ;
4819: LD_ADDR_EXP 22
4823: PUSH
4824: LD_INT 1
4826: ST_TO_ADDR
// if p3 = 0 then
4827: LD_VAR 0 3
4831: PUSH
4832: LD_INT 0
4834: EQUAL
4835: IFFALSE 4841
// InitStreamMode ;
4837: CALL 5992 0 0
// if p3 = 1 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 1
4848: EQUAL
4849: IFFALSE 4859
// sRocket := true ;
4851: LD_ADDR_EXP 27
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 2 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 2
4866: EQUAL
4867: IFFALSE 4877
// sSpeed := true ;
4869: LD_ADDR_EXP 26
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 3 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 3
4884: EQUAL
4885: IFFALSE 4895
// sEngine := true ;
4887: LD_ADDR_EXP 28
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 4 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 4
4902: EQUAL
4903: IFFALSE 4913
// sSpec := true ;
4905: LD_ADDR_EXP 25
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 5 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 5
4920: EQUAL
4921: IFFALSE 4931
// sLevel := true ;
4923: LD_ADDR_EXP 29
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 6 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 6
4938: EQUAL
4939: IFFALSE 4949
// sArmoury := true ;
4941: LD_ADDR_EXP 30
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 7 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 7
4956: EQUAL
4957: IFFALSE 4967
// sRadar := true ;
4959: LD_ADDR_EXP 31
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 8 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 8
4974: EQUAL
4975: IFFALSE 4985
// sBunker := true ;
4977: LD_ADDR_EXP 32
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 9 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 9
4992: EQUAL
4993: IFFALSE 5003
// sHack := true ;
4995: LD_ADDR_EXP 33
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 10 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 10
5010: EQUAL
5011: IFFALSE 5021
// sFire := true ;
5013: LD_ADDR_EXP 34
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 11 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 11
5028: EQUAL
5029: IFFALSE 5039
// sRefresh := true ;
5031: LD_ADDR_EXP 35
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 12 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 12
5046: EQUAL
5047: IFFALSE 5057
// sExp := true ;
5049: LD_ADDR_EXP 36
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 13 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 13
5064: EQUAL
5065: IFFALSE 5075
// sDepot := true ;
5067: LD_ADDR_EXP 37
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 14 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 14
5082: EQUAL
5083: IFFALSE 5093
// sFlag := true ;
5085: LD_ADDR_EXP 38
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 15 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 15
5100: EQUAL
5101: IFFALSE 5111
// sKamikadze := true ;
5103: LD_ADDR_EXP 46
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 16 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 16
5118: EQUAL
5119: IFFALSE 5129
// sTroll := true ;
5121: LD_ADDR_EXP 47
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 17 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 17
5136: EQUAL
5137: IFFALSE 5147
// sSlow := true ;
5139: LD_ADDR_EXP 48
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 18 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 18
5154: EQUAL
5155: IFFALSE 5165
// sLack := true ;
5157: LD_ADDR_EXP 49
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 19 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 19
5172: EQUAL
5173: IFFALSE 5183
// sTank := true ;
5175: LD_ADDR_EXP 51
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 20 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 20
5190: EQUAL
5191: IFFALSE 5201
// sRemote := true ;
5193: LD_ADDR_EXP 52
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 21 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 21
5208: EQUAL
5209: IFFALSE 5219
// sPowell := true ;
5211: LD_ADDR_EXP 53
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 22 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 22
5226: EQUAL
5227: IFFALSE 5237
// sTeleport := true ;
5229: LD_ADDR_EXP 56
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 23 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 23
5244: EQUAL
5245: IFFALSE 5255
// sOilTower := true ;
5247: LD_ADDR_EXP 58
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 24 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 24
5262: EQUAL
5263: IFFALSE 5273
// sShovel := true ;
5265: LD_ADDR_EXP 59
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// if p3 = 25 then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 25
5280: EQUAL
5281: IFFALSE 5291
// sSheik := true ;
5283: LD_ADDR_EXP 60
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// if p3 = 26 then
5291: LD_VAR 0 3
5295: PUSH
5296: LD_INT 26
5298: EQUAL
5299: IFFALSE 5309
// sEarthquake := true ;
5301: LD_ADDR_EXP 62
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// if p3 = 27 then
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 27
5316: EQUAL
5317: IFFALSE 5327
// sAI := true ;
5319: LD_ADDR_EXP 63
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// if p3 = 28 then
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 28
5334: EQUAL
5335: IFFALSE 5345
// sCargo := true ;
5337: LD_ADDR_EXP 66
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// if p3 = 29 then
5345: LD_VAR 0 3
5349: PUSH
5350: LD_INT 29
5352: EQUAL
5353: IFFALSE 5363
// sDLaser := true ;
5355: LD_ADDR_EXP 67
5359: PUSH
5360: LD_INT 1
5362: ST_TO_ADDR
// if p3 = 30 then
5363: LD_VAR 0 3
5367: PUSH
5368: LD_INT 30
5370: EQUAL
5371: IFFALSE 5381
// sExchange := true ;
5373: LD_ADDR_EXP 68
5377: PUSH
5378: LD_INT 1
5380: ST_TO_ADDR
// if p3 = 31 then
5381: LD_VAR 0 3
5385: PUSH
5386: LD_INT 31
5388: EQUAL
5389: IFFALSE 5399
// sFac := true ;
5391: LD_ADDR_EXP 69
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
// if p3 = 32 then
5399: LD_VAR 0 3
5403: PUSH
5404: LD_INT 32
5406: EQUAL
5407: IFFALSE 5417
// sPower := true ;
5409: LD_ADDR_EXP 70
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// if p3 = 33 then
5417: LD_VAR 0 3
5421: PUSH
5422: LD_INT 33
5424: EQUAL
5425: IFFALSE 5435
// sRandom := true ;
5427: LD_ADDR_EXP 71
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// if p3 = 34 then
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 34
5442: EQUAL
5443: IFFALSE 5453
// sShield := true ;
5445: LD_ADDR_EXP 72
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// if p3 = 35 then
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 35
5460: EQUAL
5461: IFFALSE 5471
// sTime := true ;
5463: LD_ADDR_EXP 73
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// if p3 = 36 then
5471: LD_VAR 0 3
5475: PUSH
5476: LD_INT 36
5478: EQUAL
5479: IFFALSE 5489
// sTools := true ;
5481: LD_ADDR_EXP 74
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// if p3 = 101 then
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 101
5496: EQUAL
5497: IFFALSE 5507
// sSold := true ;
5499: LD_ADDR_EXP 39
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// if p3 = 102 then
5507: LD_VAR 0 3
5511: PUSH
5512: LD_INT 102
5514: EQUAL
5515: IFFALSE 5525
// sDiff := true ;
5517: LD_ADDR_EXP 40
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// if p3 = 103 then
5525: LD_VAR 0 3
5529: PUSH
5530: LD_INT 103
5532: EQUAL
5533: IFFALSE 5543
// sFog := true ;
5535: LD_ADDR_EXP 43
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// if p3 = 104 then
5543: LD_VAR 0 3
5547: PUSH
5548: LD_INT 104
5550: EQUAL
5551: IFFALSE 5561
// sReset := true ;
5553: LD_ADDR_EXP 44
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// if p3 = 105 then
5561: LD_VAR 0 3
5565: PUSH
5566: LD_INT 105
5568: EQUAL
5569: IFFALSE 5579
// sSun := true ;
5571: LD_ADDR_EXP 45
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// if p3 = 106 then
5579: LD_VAR 0 3
5583: PUSH
5584: LD_INT 106
5586: EQUAL
5587: IFFALSE 5597
// sTiger := true ;
5589: LD_ADDR_EXP 41
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// if p3 = 107 then
5597: LD_VAR 0 3
5601: PUSH
5602: LD_INT 107
5604: EQUAL
5605: IFFALSE 5615
// sBomb := true ;
5607: LD_ADDR_EXP 42
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// if p3 = 108 then
5615: LD_VAR 0 3
5619: PUSH
5620: LD_INT 108
5622: EQUAL
5623: IFFALSE 5633
// sWound := true ;
5625: LD_ADDR_EXP 50
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// if p3 = 109 then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 109
5640: EQUAL
5641: IFFALSE 5651
// sBetray := true ;
5643: LD_ADDR_EXP 54
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// if p3 = 110 then
5651: LD_VAR 0 3
5655: PUSH
5656: LD_INT 110
5658: EQUAL
5659: IFFALSE 5669
// sContamin := true ;
5661: LD_ADDR_EXP 55
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// if p3 = 111 then
5669: LD_VAR 0 3
5673: PUSH
5674: LD_INT 111
5676: EQUAL
5677: IFFALSE 5687
// sOil := true ;
5679: LD_ADDR_EXP 57
5683: PUSH
5684: LD_INT 1
5686: ST_TO_ADDR
// if p3 = 112 then
5687: LD_VAR 0 3
5691: PUSH
5692: LD_INT 112
5694: EQUAL
5695: IFFALSE 5705
// sStu := true ;
5697: LD_ADDR_EXP 61
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
// if p3 = 113 then
5705: LD_VAR 0 3
5709: PUSH
5710: LD_INT 113
5712: EQUAL
5713: IFFALSE 5723
// sBazooka := true ;
5715: LD_ADDR_EXP 64
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// if p3 = 114 then
5723: LD_VAR 0 3
5727: PUSH
5728: LD_INT 114
5730: EQUAL
5731: IFFALSE 5741
// sMortar := true ;
5733: LD_ADDR_EXP 65
5737: PUSH
5738: LD_INT 1
5740: ST_TO_ADDR
// if p3 = 115 then
5741: LD_VAR 0 3
5745: PUSH
5746: LD_INT 115
5748: EQUAL
5749: IFFALSE 5759
// sRanger := true ;
5751: LD_ADDR_EXP 75
5755: PUSH
5756: LD_INT 1
5758: ST_TO_ADDR
// end ; if p2 = 101 then
5759: LD_VAR 0 2
5763: PUSH
5764: LD_INT 101
5766: EQUAL
5767: IFFALSE 5970
// begin case p3 of 1 :
5769: LD_VAR 0 3
5773: PUSH
5774: LD_INT 1
5776: DOUBLE
5777: EQUAL
5778: IFTRUE 5782
5780: GO 5789
5782: POP
// hHackUnlimitedResources ; 2 :
5783: CALL 16064 0 0
5787: GO 5970
5789: LD_INT 2
5791: DOUBLE
5792: EQUAL
5793: IFTRUE 5797
5795: GO 5804
5797: POP
// hHackSetLevel10 ; 3 :
5798: CALL 16197 0 0
5802: GO 5970
5804: LD_INT 3
5806: DOUBLE
5807: EQUAL
5808: IFTRUE 5812
5810: GO 5819
5812: POP
// hHackSetLevel10YourUnits ; 4 :
5813: CALL 16282 0 0
5817: GO 5970
5819: LD_INT 4
5821: DOUBLE
5822: EQUAL
5823: IFTRUE 5827
5825: GO 5849
5827: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
5828: LD_VAR 0 4
5832: PPUSH
5833: LD_VAR 0 5
5837: PPUSH
5838: LD_VAR 0 6
5842: PPUSH
5843: CALL 16372 0 3
5847: GO 5970
5849: LD_INT 5
5851: DOUBLE
5852: EQUAL
5853: IFTRUE 5857
5855: GO 5864
5857: POP
// hHackSpawnVehicle ; 6 :
5858: CALL 16433 0 0
5862: GO 5970
5864: LD_INT 6
5866: DOUBLE
5867: EQUAL
5868: IFTRUE 5872
5870: GO 5879
5872: POP
// hHackInvincible ; 7 :
5873: CALL 16979 0 0
5877: GO 5970
5879: LD_INT 7
5881: DOUBLE
5882: EQUAL
5883: IFTRUE 5887
5885: GO 5894
5887: POP
// hHackInvisible ; 8 :
5888: CALL 17090 0 0
5892: GO 5970
5894: LD_INT 8
5896: DOUBLE
5897: EQUAL
5898: IFTRUE 5902
5900: GO 5909
5902: POP
// hHackChangeYourSide ; 9 :
5903: CALL 17147 0 0
5907: GO 5970
5909: LD_INT 9
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5924
5917: POP
// hHackChangeUnitSide ; 10 :
5918: CALL 17189 0 0
5922: GO 5970
5924: LD_INT 10
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 5939
5932: POP
// hHackFog ; 11 :
5933: CALL 17290 0 0
5937: GO 5970
5939: LD_INT 11
5941: DOUBLE
5942: EQUAL
5943: IFTRUE 5947
5945: GO 5954
5947: POP
// hHackApeman ; 12 :
5948: CALL 17305 0 0
5952: GO 5970
5954: LD_INT 12
5956: DOUBLE
5957: EQUAL
5958: IFTRUE 5962
5960: GO 5969
5962: POP
// hHackBoom ; end ;
5963: CALL 17390 0 0
5967: GO 5970
5969: POP
// end ; end ;
5970: PPOPN 6
5972: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5973: GO 5975
5975: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5976: LD_STRING initStreamRollete();
5978: PPUSH
5979: CALL_OW 559
// InitStreamMode ;
5983: CALL 5992 0 0
// DefineStreamItems ( ) ;
5987: CALL 6432 0 0
// end ;
5991: END
// function InitStreamMode ; begin
5992: LD_INT 0
5994: PPUSH
// streamModeActive := false ;
5995: LD_ADDR_EXP 22
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// normalCounter := 36 ;
6003: LD_ADDR_EXP 23
6007: PUSH
6008: LD_INT 36
6010: ST_TO_ADDR
// hardcoreCounter := 16 ;
6011: LD_ADDR_EXP 24
6015: PUSH
6016: LD_INT 16
6018: ST_TO_ADDR
// sRocket := false ;
6019: LD_ADDR_EXP 27
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sSpeed := false ;
6027: LD_ADDR_EXP 26
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sEngine := false ;
6035: LD_ADDR_EXP 28
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sSpec := false ;
6043: LD_ADDR_EXP 25
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sLevel := false ;
6051: LD_ADDR_EXP 29
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sArmoury := false ;
6059: LD_ADDR_EXP 30
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sRadar := false ;
6067: LD_ADDR_EXP 31
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sBunker := false ;
6075: LD_ADDR_EXP 32
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sHack := false ;
6083: LD_ADDR_EXP 33
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sFire := false ;
6091: LD_ADDR_EXP 34
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sRefresh := false ;
6099: LD_ADDR_EXP 35
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sExp := false ;
6107: LD_ADDR_EXP 36
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sDepot := false ;
6115: LD_ADDR_EXP 37
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sFlag := false ;
6123: LD_ADDR_EXP 38
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sKamikadze := false ;
6131: LD_ADDR_EXP 46
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sTroll := false ;
6139: LD_ADDR_EXP 47
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sSlow := false ;
6147: LD_ADDR_EXP 48
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sLack := false ;
6155: LD_ADDR_EXP 49
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sTank := false ;
6163: LD_ADDR_EXP 51
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sRemote := false ;
6171: LD_ADDR_EXP 52
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sPowell := false ;
6179: LD_ADDR_EXP 53
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sTeleport := false ;
6187: LD_ADDR_EXP 56
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sOilTower := false ;
6195: LD_ADDR_EXP 58
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sShovel := false ;
6203: LD_ADDR_EXP 59
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sSheik := false ;
6211: LD_ADDR_EXP 60
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sEarthquake := false ;
6219: LD_ADDR_EXP 62
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sAI := false ;
6227: LD_ADDR_EXP 63
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sCargo := false ;
6235: LD_ADDR_EXP 66
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sDLaser := false ;
6243: LD_ADDR_EXP 67
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sExchange := false ;
6251: LD_ADDR_EXP 68
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sFac := false ;
6259: LD_ADDR_EXP 69
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sPower := false ;
6267: LD_ADDR_EXP 70
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sRandom := false ;
6275: LD_ADDR_EXP 71
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sShield := false ;
6283: LD_ADDR_EXP 72
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sTime := false ;
6291: LD_ADDR_EXP 73
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sTools := false ;
6299: LD_ADDR_EXP 74
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sSold := false ;
6307: LD_ADDR_EXP 39
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// sDiff := false ;
6315: LD_ADDR_EXP 40
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// sFog := false ;
6323: LD_ADDR_EXP 43
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// sReset := false ;
6331: LD_ADDR_EXP 44
6335: PUSH
6336: LD_INT 0
6338: ST_TO_ADDR
// sSun := false ;
6339: LD_ADDR_EXP 45
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// sTiger := false ;
6347: LD_ADDR_EXP 41
6351: PUSH
6352: LD_INT 0
6354: ST_TO_ADDR
// sBomb := false ;
6355: LD_ADDR_EXP 42
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// sWound := false ;
6363: LD_ADDR_EXP 50
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// sBetray := false ;
6371: LD_ADDR_EXP 54
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// sContamin := false ;
6379: LD_ADDR_EXP 55
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sOil := false ;
6387: LD_ADDR_EXP 57
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sStu := false ;
6395: LD_ADDR_EXP 61
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sBazooka := false ;
6403: LD_ADDR_EXP 64
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sMortar := false ;
6411: LD_ADDR_EXP 65
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sRanger := false ;
6419: LD_ADDR_EXP 75
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// end ;
6427: LD_VAR 0 1
6431: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6432: LD_INT 0
6434: PPUSH
6435: PPUSH
6436: PPUSH
6437: PPUSH
6438: PPUSH
// result := [ ] ;
6439: LD_ADDR_VAR 0 1
6443: PUSH
6444: EMPTY
6445: ST_TO_ADDR
// if campaign_id = 1 then
6446: LD_OWVAR 69
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 9392
// begin case mission_number of 1 :
6456: LD_OWVAR 70
6460: PUSH
6461: LD_INT 1
6463: DOUBLE
6464: EQUAL
6465: IFTRUE 6469
6467: GO 6533
6469: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6470: LD_ADDR_VAR 0 1
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 4
6480: PUSH
6481: LD_INT 11
6483: PUSH
6484: LD_INT 12
6486: PUSH
6487: LD_INT 15
6489: PUSH
6490: LD_INT 16
6492: PUSH
6493: LD_INT 22
6495: PUSH
6496: LD_INT 23
6498: PUSH
6499: LD_INT 26
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 101
6515: PUSH
6516: LD_INT 102
6518: PUSH
6519: LD_INT 106
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: ST_TO_ADDR
6531: GO 9390
6533: LD_INT 2
6535: DOUBLE
6536: EQUAL
6537: IFTRUE 6541
6539: GO 6613
6541: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6542: LD_ADDR_VAR 0 1
6546: PUSH
6547: LD_INT 2
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: LD_INT 11
6555: PUSH
6556: LD_INT 12
6558: PUSH
6559: LD_INT 15
6561: PUSH
6562: LD_INT 16
6564: PUSH
6565: LD_INT 22
6567: PUSH
6568: LD_INT 23
6570: PUSH
6571: LD_INT 26
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 101
6587: PUSH
6588: LD_INT 102
6590: PUSH
6591: LD_INT 105
6593: PUSH
6594: LD_INT 106
6596: PUSH
6597: LD_INT 108
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 9390
6613: LD_INT 3
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6697
6621: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 4
6632: PUSH
6633: LD_INT 5
6635: PUSH
6636: LD_INT 11
6638: PUSH
6639: LD_INT 12
6641: PUSH
6642: LD_INT 15
6644: PUSH
6645: LD_INT 16
6647: PUSH
6648: LD_INT 22
6650: PUSH
6651: LD_INT 26
6653: PUSH
6654: LD_INT 36
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 101
6671: PUSH
6672: LD_INT 102
6674: PUSH
6675: LD_INT 105
6677: PUSH
6678: LD_INT 106
6680: PUSH
6681: LD_INT 108
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: ST_TO_ADDR
6695: GO 9390
6697: LD_INT 4
6699: DOUBLE
6700: EQUAL
6701: IFTRUE 6705
6703: GO 6789
6705: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6706: LD_ADDR_VAR 0 1
6710: PUSH
6711: LD_INT 2
6713: PUSH
6714: LD_INT 4
6716: PUSH
6717: LD_INT 5
6719: PUSH
6720: LD_INT 8
6722: PUSH
6723: LD_INT 11
6725: PUSH
6726: LD_INT 12
6728: PUSH
6729: LD_INT 15
6731: PUSH
6732: LD_INT 16
6734: PUSH
6735: LD_INT 22
6737: PUSH
6738: LD_INT 23
6740: PUSH
6741: LD_INT 26
6743: PUSH
6744: LD_INT 36
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 101
6763: PUSH
6764: LD_INT 102
6766: PUSH
6767: LD_INT 105
6769: PUSH
6770: LD_INT 106
6772: PUSH
6773: LD_INT 108
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: ST_TO_ADDR
6787: GO 9390
6789: LD_INT 5
6791: DOUBLE
6792: EQUAL
6793: IFTRUE 6797
6795: GO 6897
6797: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6798: LD_ADDR_VAR 0 1
6802: PUSH
6803: LD_INT 2
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: LD_INT 5
6811: PUSH
6812: LD_INT 6
6814: PUSH
6815: LD_INT 8
6817: PUSH
6818: LD_INT 11
6820: PUSH
6821: LD_INT 12
6823: PUSH
6824: LD_INT 15
6826: PUSH
6827: LD_INT 16
6829: PUSH
6830: LD_INT 22
6832: PUSH
6833: LD_INT 23
6835: PUSH
6836: LD_INT 25
6838: PUSH
6839: LD_INT 26
6841: PUSH
6842: LD_INT 36
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 101
6863: PUSH
6864: LD_INT 102
6866: PUSH
6867: LD_INT 105
6869: PUSH
6870: LD_INT 106
6872: PUSH
6873: LD_INT 108
6875: PUSH
6876: LD_INT 109
6878: PUSH
6879: LD_INT 112
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 9390
6897: LD_INT 6
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 7025
6905: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6906: LD_ADDR_VAR 0 1
6910: PUSH
6911: LD_INT 2
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 6
6922: PUSH
6923: LD_INT 8
6925: PUSH
6926: LD_INT 11
6928: PUSH
6929: LD_INT 12
6931: PUSH
6932: LD_INT 15
6934: PUSH
6935: LD_INT 16
6937: PUSH
6938: LD_INT 20
6940: PUSH
6941: LD_INT 21
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_INT 23
6949: PUSH
6950: LD_INT 25
6952: PUSH
6953: LD_INT 26
6955: PUSH
6956: LD_INT 30
6958: PUSH
6959: LD_INT 31
6961: PUSH
6962: LD_INT 32
6964: PUSH
6965: LD_INT 36
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 101
6991: PUSH
6992: LD_INT 102
6994: PUSH
6995: LD_INT 105
6997: PUSH
6998: LD_INT 106
7000: PUSH
7001: LD_INT 108
7003: PUSH
7004: LD_INT 109
7006: PUSH
7007: LD_INT 112
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: ST_TO_ADDR
7023: GO 9390
7025: LD_INT 7
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7133
7033: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7034: LD_ADDR_VAR 0 1
7038: PUSH
7039: LD_INT 2
7041: PUSH
7042: LD_INT 4
7044: PUSH
7045: LD_INT 5
7047: PUSH
7048: LD_INT 7
7050: PUSH
7051: LD_INT 11
7053: PUSH
7054: LD_INT 12
7056: PUSH
7057: LD_INT 15
7059: PUSH
7060: LD_INT 16
7062: PUSH
7063: LD_INT 20
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 22
7071: PUSH
7072: LD_INT 23
7074: PUSH
7075: LD_INT 25
7077: PUSH
7078: LD_INT 26
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 101
7099: PUSH
7100: LD_INT 102
7102: PUSH
7103: LD_INT 103
7105: PUSH
7106: LD_INT 105
7108: PUSH
7109: LD_INT 106
7111: PUSH
7112: LD_INT 108
7114: PUSH
7115: LD_INT 112
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: ST_TO_ADDR
7131: GO 9390
7133: LD_INT 8
7135: DOUBLE
7136: EQUAL
7137: IFTRUE 7141
7139: GO 7269
7141: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7142: LD_ADDR_VAR 0 1
7146: PUSH
7147: LD_INT 2
7149: PUSH
7150: LD_INT 4
7152: PUSH
7153: LD_INT 5
7155: PUSH
7156: LD_INT 6
7158: PUSH
7159: LD_INT 7
7161: PUSH
7162: LD_INT 8
7164: PUSH
7165: LD_INT 11
7167: PUSH
7168: LD_INT 12
7170: PUSH
7171: LD_INT 15
7173: PUSH
7174: LD_INT 16
7176: PUSH
7177: LD_INT 20
7179: PUSH
7180: LD_INT 21
7182: PUSH
7183: LD_INT 22
7185: PUSH
7186: LD_INT 23
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 26
7194: PUSH
7195: LD_INT 30
7197: PUSH
7198: LD_INT 31
7200: PUSH
7201: LD_INT 32
7203: PUSH
7204: LD_INT 36
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 101
7231: PUSH
7232: LD_INT 102
7234: PUSH
7235: LD_INT 103
7237: PUSH
7238: LD_INT 105
7240: PUSH
7241: LD_INT 106
7243: PUSH
7244: LD_INT 108
7246: PUSH
7247: LD_INT 109
7249: PUSH
7250: LD_INT 112
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: ST_TO_ADDR
7267: GO 9390
7269: LD_INT 9
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7413
7277: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7278: LD_ADDR_VAR 0 1
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: LD_INT 4
7288: PUSH
7289: LD_INT 5
7291: PUSH
7292: LD_INT 6
7294: PUSH
7295: LD_INT 7
7297: PUSH
7298: LD_INT 8
7300: PUSH
7301: LD_INT 11
7303: PUSH
7304: LD_INT 12
7306: PUSH
7307: LD_INT 15
7309: PUSH
7310: LD_INT 16
7312: PUSH
7313: LD_INT 20
7315: PUSH
7316: LD_INT 21
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 23
7324: PUSH
7325: LD_INT 25
7327: PUSH
7328: LD_INT 26
7330: PUSH
7331: LD_INT 28
7333: PUSH
7334: LD_INT 30
7336: PUSH
7337: LD_INT 31
7339: PUSH
7340: LD_INT 32
7342: PUSH
7343: LD_INT 36
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 101
7371: PUSH
7372: LD_INT 102
7374: PUSH
7375: LD_INT 103
7377: PUSH
7378: LD_INT 105
7380: PUSH
7381: LD_INT 106
7383: PUSH
7384: LD_INT 108
7386: PUSH
7387: LD_INT 109
7389: PUSH
7390: LD_INT 112
7392: PUSH
7393: LD_INT 114
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: ST_TO_ADDR
7411: GO 9390
7413: LD_INT 10
7415: DOUBLE
7416: EQUAL
7417: IFTRUE 7421
7419: GO 7605
7421: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7422: LD_ADDR_VAR 0 1
7426: PUSH
7427: LD_INT 2
7429: PUSH
7430: LD_INT 4
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: LD_INT 6
7438: PUSH
7439: LD_INT 7
7441: PUSH
7442: LD_INT 8
7444: PUSH
7445: LD_INT 9
7447: PUSH
7448: LD_INT 10
7450: PUSH
7451: LD_INT 11
7453: PUSH
7454: LD_INT 12
7456: PUSH
7457: LD_INT 13
7459: PUSH
7460: LD_INT 14
7462: PUSH
7463: LD_INT 15
7465: PUSH
7466: LD_INT 16
7468: PUSH
7469: LD_INT 17
7471: PUSH
7472: LD_INT 18
7474: PUSH
7475: LD_INT 19
7477: PUSH
7478: LD_INT 20
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 22
7486: PUSH
7487: LD_INT 23
7489: PUSH
7490: LD_INT 24
7492: PUSH
7493: LD_INT 25
7495: PUSH
7496: LD_INT 26
7498: PUSH
7499: LD_INT 28
7501: PUSH
7502: LD_INT 30
7504: PUSH
7505: LD_INT 31
7507: PUSH
7508: LD_INT 32
7510: PUSH
7511: LD_INT 36
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 101
7547: PUSH
7548: LD_INT 102
7550: PUSH
7551: LD_INT 103
7553: PUSH
7554: LD_INT 104
7556: PUSH
7557: LD_INT 105
7559: PUSH
7560: LD_INT 106
7562: PUSH
7563: LD_INT 107
7565: PUSH
7566: LD_INT 108
7568: PUSH
7569: LD_INT 109
7571: PUSH
7572: LD_INT 110
7574: PUSH
7575: LD_INT 111
7577: PUSH
7578: LD_INT 112
7580: PUSH
7581: LD_INT 114
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: ST_TO_ADDR
7603: GO 9390
7605: LD_INT 11
7607: DOUBLE
7608: EQUAL
7609: IFTRUE 7613
7611: GO 7805
7613: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7614: LD_ADDR_VAR 0 1
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: LD_INT 4
7627: PUSH
7628: LD_INT 5
7630: PUSH
7631: LD_INT 6
7633: PUSH
7634: LD_INT 7
7636: PUSH
7637: LD_INT 8
7639: PUSH
7640: LD_INT 9
7642: PUSH
7643: LD_INT 10
7645: PUSH
7646: LD_INT 11
7648: PUSH
7649: LD_INT 12
7651: PUSH
7652: LD_INT 13
7654: PUSH
7655: LD_INT 14
7657: PUSH
7658: LD_INT 15
7660: PUSH
7661: LD_INT 16
7663: PUSH
7664: LD_INT 17
7666: PUSH
7667: LD_INT 18
7669: PUSH
7670: LD_INT 19
7672: PUSH
7673: LD_INT 20
7675: PUSH
7676: LD_INT 21
7678: PUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 23
7684: PUSH
7685: LD_INT 24
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 26
7693: PUSH
7694: LD_INT 28
7696: PUSH
7697: LD_INT 30
7699: PUSH
7700: LD_INT 31
7702: PUSH
7703: LD_INT 32
7705: PUSH
7706: LD_INT 34
7708: PUSH
7709: LD_INT 36
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 101
7747: PUSH
7748: LD_INT 102
7750: PUSH
7751: LD_INT 103
7753: PUSH
7754: LD_INT 104
7756: PUSH
7757: LD_INT 105
7759: PUSH
7760: LD_INT 106
7762: PUSH
7763: LD_INT 107
7765: PUSH
7766: LD_INT 108
7768: PUSH
7769: LD_INT 109
7771: PUSH
7772: LD_INT 110
7774: PUSH
7775: LD_INT 111
7777: PUSH
7778: LD_INT 112
7780: PUSH
7781: LD_INT 114
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: ST_TO_ADDR
7803: GO 9390
7805: LD_INT 12
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 8021
7813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7814: LD_ADDR_VAR 0 1
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 3
7827: PUSH
7828: LD_INT 4
7830: PUSH
7831: LD_INT 5
7833: PUSH
7834: LD_INT 6
7836: PUSH
7837: LD_INT 7
7839: PUSH
7840: LD_INT 8
7842: PUSH
7843: LD_INT 9
7845: PUSH
7846: LD_INT 10
7848: PUSH
7849: LD_INT 11
7851: PUSH
7852: LD_INT 12
7854: PUSH
7855: LD_INT 13
7857: PUSH
7858: LD_INT 14
7860: PUSH
7861: LD_INT 15
7863: PUSH
7864: LD_INT 16
7866: PUSH
7867: LD_INT 17
7869: PUSH
7870: LD_INT 18
7872: PUSH
7873: LD_INT 19
7875: PUSH
7876: LD_INT 20
7878: PUSH
7879: LD_INT 21
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_INT 23
7887: PUSH
7888: LD_INT 24
7890: PUSH
7891: LD_INT 25
7893: PUSH
7894: LD_INT 26
7896: PUSH
7897: LD_INT 27
7899: PUSH
7900: LD_INT 28
7902: PUSH
7903: LD_INT 30
7905: PUSH
7906: LD_INT 31
7908: PUSH
7909: LD_INT 32
7911: PUSH
7912: LD_INT 33
7914: PUSH
7915: LD_INT 34
7917: PUSH
7918: LD_INT 36
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 101
7959: PUSH
7960: LD_INT 102
7962: PUSH
7963: LD_INT 103
7965: PUSH
7966: LD_INT 104
7968: PUSH
7969: LD_INT 105
7971: PUSH
7972: LD_INT 106
7974: PUSH
7975: LD_INT 107
7977: PUSH
7978: LD_INT 108
7980: PUSH
7981: LD_INT 109
7983: PUSH
7984: LD_INT 110
7986: PUSH
7987: LD_INT 111
7989: PUSH
7990: LD_INT 112
7992: PUSH
7993: LD_INT 113
7995: PUSH
7996: LD_INT 114
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: ST_TO_ADDR
8019: GO 9390
8021: LD_INT 13
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8225
8029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8030: LD_ADDR_VAR 0 1
8034: PUSH
8035: LD_INT 1
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: LD_INT 4
8046: PUSH
8047: LD_INT 5
8049: PUSH
8050: LD_INT 8
8052: PUSH
8053: LD_INT 9
8055: PUSH
8056: LD_INT 10
8058: PUSH
8059: LD_INT 11
8061: PUSH
8062: LD_INT 12
8064: PUSH
8065: LD_INT 14
8067: PUSH
8068: LD_INT 15
8070: PUSH
8071: LD_INT 16
8073: PUSH
8074: LD_INT 17
8076: PUSH
8077: LD_INT 18
8079: PUSH
8080: LD_INT 19
8082: PUSH
8083: LD_INT 20
8085: PUSH
8086: LD_INT 21
8088: PUSH
8089: LD_INT 22
8091: PUSH
8092: LD_INT 23
8094: PUSH
8095: LD_INT 24
8097: PUSH
8098: LD_INT 25
8100: PUSH
8101: LD_INT 26
8103: PUSH
8104: LD_INT 27
8106: PUSH
8107: LD_INT 28
8109: PUSH
8110: LD_INT 30
8112: PUSH
8113: LD_INT 31
8115: PUSH
8116: LD_INT 32
8118: PUSH
8119: LD_INT 33
8121: PUSH
8122: LD_INT 34
8124: PUSH
8125: LD_INT 36
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 101
8163: PUSH
8164: LD_INT 102
8166: PUSH
8167: LD_INT 103
8169: PUSH
8170: LD_INT 104
8172: PUSH
8173: LD_INT 105
8175: PUSH
8176: LD_INT 106
8178: PUSH
8179: LD_INT 107
8181: PUSH
8182: LD_INT 108
8184: PUSH
8185: LD_INT 109
8187: PUSH
8188: LD_INT 110
8190: PUSH
8191: LD_INT 111
8193: PUSH
8194: LD_INT 112
8196: PUSH
8197: LD_INT 113
8199: PUSH
8200: LD_INT 114
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: ST_TO_ADDR
8223: GO 9390
8225: LD_INT 14
8227: DOUBLE
8228: EQUAL
8229: IFTRUE 8233
8231: GO 8445
8233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8234: LD_ADDR_VAR 0 1
8238: PUSH
8239: LD_INT 1
8241: PUSH
8242: LD_INT 2
8244: PUSH
8245: LD_INT 3
8247: PUSH
8248: LD_INT 4
8250: PUSH
8251: LD_INT 5
8253: PUSH
8254: LD_INT 6
8256: PUSH
8257: LD_INT 7
8259: PUSH
8260: LD_INT 8
8262: PUSH
8263: LD_INT 9
8265: PUSH
8266: LD_INT 10
8268: PUSH
8269: LD_INT 11
8271: PUSH
8272: LD_INT 12
8274: PUSH
8275: LD_INT 13
8277: PUSH
8278: LD_INT 14
8280: PUSH
8281: LD_INT 15
8283: PUSH
8284: LD_INT 16
8286: PUSH
8287: LD_INT 17
8289: PUSH
8290: LD_INT 18
8292: PUSH
8293: LD_INT 19
8295: PUSH
8296: LD_INT 20
8298: PUSH
8299: LD_INT 21
8301: PUSH
8302: LD_INT 22
8304: PUSH
8305: LD_INT 23
8307: PUSH
8308: LD_INT 24
8310: PUSH
8311: LD_INT 25
8313: PUSH
8314: LD_INT 26
8316: PUSH
8317: LD_INT 27
8319: PUSH
8320: LD_INT 28
8322: PUSH
8323: LD_INT 29
8325: PUSH
8326: LD_INT 30
8328: PUSH
8329: LD_INT 31
8331: PUSH
8332: LD_INT 32
8334: PUSH
8335: LD_INT 33
8337: PUSH
8338: LD_INT 34
8340: PUSH
8341: LD_INT 36
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 101
8383: PUSH
8384: LD_INT 102
8386: PUSH
8387: LD_INT 103
8389: PUSH
8390: LD_INT 104
8392: PUSH
8393: LD_INT 105
8395: PUSH
8396: LD_INT 106
8398: PUSH
8399: LD_INT 107
8401: PUSH
8402: LD_INT 108
8404: PUSH
8405: LD_INT 109
8407: PUSH
8408: LD_INT 110
8410: PUSH
8411: LD_INT 111
8413: PUSH
8414: LD_INT 112
8416: PUSH
8417: LD_INT 113
8419: PUSH
8420: LD_INT 114
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: ST_TO_ADDR
8443: GO 9390
8445: LD_INT 15
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8665
8453: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8454: LD_ADDR_VAR 0 1
8458: PUSH
8459: LD_INT 1
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: LD_INT 3
8467: PUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: LD_INT 6
8476: PUSH
8477: LD_INT 7
8479: PUSH
8480: LD_INT 8
8482: PUSH
8483: LD_INT 9
8485: PUSH
8486: LD_INT 10
8488: PUSH
8489: LD_INT 11
8491: PUSH
8492: LD_INT 12
8494: PUSH
8495: LD_INT 13
8497: PUSH
8498: LD_INT 14
8500: PUSH
8501: LD_INT 15
8503: PUSH
8504: LD_INT 16
8506: PUSH
8507: LD_INT 17
8509: PUSH
8510: LD_INT 18
8512: PUSH
8513: LD_INT 19
8515: PUSH
8516: LD_INT 20
8518: PUSH
8519: LD_INT 21
8521: PUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 23
8527: PUSH
8528: LD_INT 24
8530: PUSH
8531: LD_INT 25
8533: PUSH
8534: LD_INT 26
8536: PUSH
8537: LD_INT 27
8539: PUSH
8540: LD_INT 28
8542: PUSH
8543: LD_INT 29
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 31
8551: PUSH
8552: LD_INT 32
8554: PUSH
8555: LD_INT 33
8557: PUSH
8558: LD_INT 34
8560: PUSH
8561: LD_INT 36
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 101
8603: PUSH
8604: LD_INT 102
8606: PUSH
8607: LD_INT 103
8609: PUSH
8610: LD_INT 104
8612: PUSH
8613: LD_INT 105
8615: PUSH
8616: LD_INT 106
8618: PUSH
8619: LD_INT 107
8621: PUSH
8622: LD_INT 108
8624: PUSH
8625: LD_INT 109
8627: PUSH
8628: LD_INT 110
8630: PUSH
8631: LD_INT 111
8633: PUSH
8634: LD_INT 112
8636: PUSH
8637: LD_INT 113
8639: PUSH
8640: LD_INT 114
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: ST_TO_ADDR
8663: GO 9390
8665: LD_INT 16
8667: DOUBLE
8668: EQUAL
8669: IFTRUE 8673
8671: GO 8797
8673: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8674: LD_ADDR_VAR 0 1
8678: PUSH
8679: LD_INT 2
8681: PUSH
8682: LD_INT 4
8684: PUSH
8685: LD_INT 5
8687: PUSH
8688: LD_INT 7
8690: PUSH
8691: LD_INT 11
8693: PUSH
8694: LD_INT 12
8696: PUSH
8697: LD_INT 15
8699: PUSH
8700: LD_INT 16
8702: PUSH
8703: LD_INT 20
8705: PUSH
8706: LD_INT 21
8708: PUSH
8709: LD_INT 22
8711: PUSH
8712: LD_INT 23
8714: PUSH
8715: LD_INT 25
8717: PUSH
8718: LD_INT 26
8720: PUSH
8721: LD_INT 30
8723: PUSH
8724: LD_INT 31
8726: PUSH
8727: LD_INT 32
8729: PUSH
8730: LD_INT 33
8732: PUSH
8733: LD_INT 34
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 101
8759: PUSH
8760: LD_INT 102
8762: PUSH
8763: LD_INT 103
8765: PUSH
8766: LD_INT 106
8768: PUSH
8769: LD_INT 108
8771: PUSH
8772: LD_INT 112
8774: PUSH
8775: LD_INT 113
8777: PUSH
8778: LD_INT 114
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: ST_TO_ADDR
8795: GO 9390
8797: LD_INT 17
8799: DOUBLE
8800: EQUAL
8801: IFTRUE 8805
8803: GO 9017
8805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8806: LD_ADDR_VAR 0 1
8810: PUSH
8811: LD_INT 1
8813: PUSH
8814: LD_INT 2
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: LD_INT 4
8822: PUSH
8823: LD_INT 5
8825: PUSH
8826: LD_INT 6
8828: PUSH
8829: LD_INT 7
8831: PUSH
8832: LD_INT 8
8834: PUSH
8835: LD_INT 9
8837: PUSH
8838: LD_INT 10
8840: PUSH
8841: LD_INT 11
8843: PUSH
8844: LD_INT 12
8846: PUSH
8847: LD_INT 13
8849: PUSH
8850: LD_INT 14
8852: PUSH
8853: LD_INT 15
8855: PUSH
8856: LD_INT 16
8858: PUSH
8859: LD_INT 17
8861: PUSH
8862: LD_INT 18
8864: PUSH
8865: LD_INT 19
8867: PUSH
8868: LD_INT 20
8870: PUSH
8871: LD_INT 21
8873: PUSH
8874: LD_INT 22
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 24
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 26
8888: PUSH
8889: LD_INT 27
8891: PUSH
8892: LD_INT 28
8894: PUSH
8895: LD_INT 29
8897: PUSH
8898: LD_INT 30
8900: PUSH
8901: LD_INT 31
8903: PUSH
8904: LD_INT 32
8906: PUSH
8907: LD_INT 33
8909: PUSH
8910: LD_INT 34
8912: PUSH
8913: LD_INT 36
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 101
8955: PUSH
8956: LD_INT 102
8958: PUSH
8959: LD_INT 103
8961: PUSH
8962: LD_INT 104
8964: PUSH
8965: LD_INT 105
8967: PUSH
8968: LD_INT 106
8970: PUSH
8971: LD_INT 107
8973: PUSH
8974: LD_INT 108
8976: PUSH
8977: LD_INT 109
8979: PUSH
8980: LD_INT 110
8982: PUSH
8983: LD_INT 111
8985: PUSH
8986: LD_INT 112
8988: PUSH
8989: LD_INT 113
8991: PUSH
8992: LD_INT 114
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: ST_TO_ADDR
9015: GO 9390
9017: LD_INT 18
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9161
9025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9026: LD_ADDR_VAR 0 1
9030: PUSH
9031: LD_INT 2
9033: PUSH
9034: LD_INT 4
9036: PUSH
9037: LD_INT 5
9039: PUSH
9040: LD_INT 7
9042: PUSH
9043: LD_INT 11
9045: PUSH
9046: LD_INT 12
9048: PUSH
9049: LD_INT 15
9051: PUSH
9052: LD_INT 16
9054: PUSH
9055: LD_INT 20
9057: PUSH
9058: LD_INT 21
9060: PUSH
9061: LD_INT 22
9063: PUSH
9064: LD_INT 23
9066: PUSH
9067: LD_INT 25
9069: PUSH
9070: LD_INT 26
9072: PUSH
9073: LD_INT 30
9075: PUSH
9076: LD_INT 31
9078: PUSH
9079: LD_INT 32
9081: PUSH
9082: LD_INT 33
9084: PUSH
9085: LD_INT 34
9087: PUSH
9088: LD_INT 35
9090: PUSH
9091: LD_INT 36
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 101
9119: PUSH
9120: LD_INT 102
9122: PUSH
9123: LD_INT 103
9125: PUSH
9126: LD_INT 106
9128: PUSH
9129: LD_INT 108
9131: PUSH
9132: LD_INT 112
9134: PUSH
9135: LD_INT 113
9137: PUSH
9138: LD_INT 114
9140: PUSH
9141: LD_INT 115
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: ST_TO_ADDR
9159: GO 9390
9161: LD_INT 19
9163: DOUBLE
9164: EQUAL
9165: IFTRUE 9169
9167: GO 9389
9169: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9170: LD_ADDR_VAR 0 1
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: LD_INT 2
9180: PUSH
9181: LD_INT 3
9183: PUSH
9184: LD_INT 4
9186: PUSH
9187: LD_INT 5
9189: PUSH
9190: LD_INT 6
9192: PUSH
9193: LD_INT 7
9195: PUSH
9196: LD_INT 8
9198: PUSH
9199: LD_INT 9
9201: PUSH
9202: LD_INT 10
9204: PUSH
9205: LD_INT 11
9207: PUSH
9208: LD_INT 12
9210: PUSH
9211: LD_INT 13
9213: PUSH
9214: LD_INT 14
9216: PUSH
9217: LD_INT 15
9219: PUSH
9220: LD_INT 16
9222: PUSH
9223: LD_INT 17
9225: PUSH
9226: LD_INT 18
9228: PUSH
9229: LD_INT 19
9231: PUSH
9232: LD_INT 20
9234: PUSH
9235: LD_INT 21
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_INT 23
9243: PUSH
9244: LD_INT 24
9246: PUSH
9247: LD_INT 25
9249: PUSH
9250: LD_INT 26
9252: PUSH
9253: LD_INT 27
9255: PUSH
9256: LD_INT 28
9258: PUSH
9259: LD_INT 29
9261: PUSH
9262: LD_INT 30
9264: PUSH
9265: LD_INT 31
9267: PUSH
9268: LD_INT 32
9270: PUSH
9271: LD_INT 33
9273: PUSH
9274: LD_INT 34
9276: PUSH
9277: LD_INT 35
9279: PUSH
9280: LD_INT 36
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 101
9323: PUSH
9324: LD_INT 102
9326: PUSH
9327: LD_INT 103
9329: PUSH
9330: LD_INT 104
9332: PUSH
9333: LD_INT 105
9335: PUSH
9336: LD_INT 106
9338: PUSH
9339: LD_INT 107
9341: PUSH
9342: LD_INT 108
9344: PUSH
9345: LD_INT 109
9347: PUSH
9348: LD_INT 110
9350: PUSH
9351: LD_INT 111
9353: PUSH
9354: LD_INT 112
9356: PUSH
9357: LD_INT 113
9359: PUSH
9360: LD_INT 114
9362: PUSH
9363: LD_INT 115
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: ST_TO_ADDR
9387: GO 9390
9389: POP
// end else
9390: GO 9609
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9392: LD_ADDR_VAR 0 1
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: LD_INT 2
9402: PUSH
9403: LD_INT 3
9405: PUSH
9406: LD_INT 4
9408: PUSH
9409: LD_INT 5
9411: PUSH
9412: LD_INT 6
9414: PUSH
9415: LD_INT 7
9417: PUSH
9418: LD_INT 8
9420: PUSH
9421: LD_INT 9
9423: PUSH
9424: LD_INT 10
9426: PUSH
9427: LD_INT 11
9429: PUSH
9430: LD_INT 12
9432: PUSH
9433: LD_INT 13
9435: PUSH
9436: LD_INT 14
9438: PUSH
9439: LD_INT 15
9441: PUSH
9442: LD_INT 16
9444: PUSH
9445: LD_INT 17
9447: PUSH
9448: LD_INT 18
9450: PUSH
9451: LD_INT 19
9453: PUSH
9454: LD_INT 20
9456: PUSH
9457: LD_INT 21
9459: PUSH
9460: LD_INT 22
9462: PUSH
9463: LD_INT 23
9465: PUSH
9466: LD_INT 24
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 26
9474: PUSH
9475: LD_INT 27
9477: PUSH
9478: LD_INT 28
9480: PUSH
9481: LD_INT 29
9483: PUSH
9484: LD_INT 30
9486: PUSH
9487: LD_INT 31
9489: PUSH
9490: LD_INT 32
9492: PUSH
9493: LD_INT 33
9495: PUSH
9496: LD_INT 34
9498: PUSH
9499: LD_INT 35
9501: PUSH
9502: LD_INT 36
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 101
9545: PUSH
9546: LD_INT 102
9548: PUSH
9549: LD_INT 103
9551: PUSH
9552: LD_INT 104
9554: PUSH
9555: LD_INT 105
9557: PUSH
9558: LD_INT 106
9560: PUSH
9561: LD_INT 107
9563: PUSH
9564: LD_INT 108
9566: PUSH
9567: LD_INT 109
9569: PUSH
9570: LD_INT 110
9572: PUSH
9573: LD_INT 111
9575: PUSH
9576: LD_INT 112
9578: PUSH
9579: LD_INT 113
9581: PUSH
9582: LD_INT 114
9584: PUSH
9585: LD_INT 115
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: ST_TO_ADDR
// if result then
9609: LD_VAR 0 1
9613: IFFALSE 9902
// begin normal :=  ;
9615: LD_ADDR_VAR 0 3
9619: PUSH
9620: LD_STRING 
9622: ST_TO_ADDR
// hardcore :=  ;
9623: LD_ADDR_VAR 0 4
9627: PUSH
9628: LD_STRING 
9630: ST_TO_ADDR
// for i = 1 to normalCounter do
9631: LD_ADDR_VAR 0 5
9635: PUSH
9636: DOUBLE
9637: LD_INT 1
9639: DEC
9640: ST_TO_ADDR
9641: LD_EXP 23
9645: PUSH
9646: FOR_TO
9647: IFFALSE 9748
// begin tmp := 0 ;
9649: LD_ADDR_VAR 0 2
9653: PUSH
9654: LD_STRING 0
9656: ST_TO_ADDR
// if result [ 1 ] then
9657: LD_VAR 0 1
9661: PUSH
9662: LD_INT 1
9664: ARRAY
9665: IFFALSE 9730
// if result [ 1 ] [ 1 ] = i then
9667: LD_VAR 0 1
9671: PUSH
9672: LD_INT 1
9674: ARRAY
9675: PUSH
9676: LD_INT 1
9678: ARRAY
9679: PUSH
9680: LD_VAR 0 5
9684: EQUAL
9685: IFFALSE 9730
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9687: LD_ADDR_VAR 0 1
9691: PUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: LD_VAR 0 1
9704: PUSH
9705: LD_INT 1
9707: ARRAY
9708: PPUSH
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 3
9716: PPUSH
9717: CALL_OW 1
9721: ST_TO_ADDR
// tmp := 1 ;
9722: LD_ADDR_VAR 0 2
9726: PUSH
9727: LD_STRING 1
9729: ST_TO_ADDR
// end ; normal := normal & tmp ;
9730: LD_ADDR_VAR 0 3
9734: PUSH
9735: LD_VAR 0 3
9739: PUSH
9740: LD_VAR 0 2
9744: STR
9745: ST_TO_ADDR
// end ;
9746: GO 9646
9748: POP
9749: POP
// for i = 1 to hardcoreCounter do
9750: LD_ADDR_VAR 0 5
9754: PUSH
9755: DOUBLE
9756: LD_INT 1
9758: DEC
9759: ST_TO_ADDR
9760: LD_EXP 24
9764: PUSH
9765: FOR_TO
9766: IFFALSE 9871
// begin tmp := 0 ;
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_STRING 0
9775: ST_TO_ADDR
// if result [ 2 ] then
9776: LD_VAR 0 1
9780: PUSH
9781: LD_INT 2
9783: ARRAY
9784: IFFALSE 9853
// if result [ 2 ] [ 1 ] = 100 + i then
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 2
9793: ARRAY
9794: PUSH
9795: LD_INT 1
9797: ARRAY
9798: PUSH
9799: LD_INT 100
9801: PUSH
9802: LD_VAR 0 5
9806: PLUS
9807: EQUAL
9808: IFFALSE 9853
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9810: LD_ADDR_VAR 0 1
9814: PUSH
9815: LD_VAR 0 1
9819: PPUSH
9820: LD_INT 2
9822: PPUSH
9823: LD_VAR 0 1
9827: PUSH
9828: LD_INT 2
9830: ARRAY
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 3
9839: PPUSH
9840: CALL_OW 1
9844: ST_TO_ADDR
// tmp := 1 ;
9845: LD_ADDR_VAR 0 2
9849: PUSH
9850: LD_STRING 1
9852: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9853: LD_ADDR_VAR 0 4
9857: PUSH
9858: LD_VAR 0 4
9862: PUSH
9863: LD_VAR 0 2
9867: STR
9868: ST_TO_ADDR
// end ;
9869: GO 9765
9871: POP
9872: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9873: LD_STRING getStreamItemsFromMission("
9875: PUSH
9876: LD_VAR 0 3
9880: STR
9881: PUSH
9882: LD_STRING ","
9884: STR
9885: PUSH
9886: LD_VAR 0 4
9890: STR
9891: PUSH
9892: LD_STRING ")
9894: STR
9895: PPUSH
9896: CALL_OW 559
// end else
9900: GO 9909
// ToLua ( getStreamItemsFromMission("","") ) ;
9902: LD_STRING getStreamItemsFromMission("","")
9904: PPUSH
9905: CALL_OW 559
// end ;
9909: LD_VAR 0 1
9913: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9914: LD_EXP 22
9918: PUSH
9919: LD_EXP 27
9923: AND
9924: IFFALSE 10048
9926: GO 9928
9928: DISABLE
9929: LD_INT 0
9931: PPUSH
9932: PPUSH
// begin enable ;
9933: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_OWVAR 2
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 7
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 34
9966: PUSH
9967: LD_INT 45
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 34
9976: PUSH
9977: LD_INT 28
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 34
9986: PUSH
9987: LD_INT 47
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PPUSH
10005: CALL_OW 69
10009: ST_TO_ADDR
// if not tmp then
10010: LD_VAR 0 2
10014: NOT
10015: IFFALSE 10019
// exit ;
10017: GO 10048
// for i in tmp do
10019: LD_ADDR_VAR 0 1
10023: PUSH
10024: LD_VAR 0 2
10028: PUSH
10029: FOR_IN
10030: IFFALSE 10046
// begin SetLives ( i , 0 ) ;
10032: LD_VAR 0 1
10036: PPUSH
10037: LD_INT 0
10039: PPUSH
10040: CALL_OW 234
// end ;
10044: GO 10029
10046: POP
10047: POP
// end ;
10048: PPOPN 2
10050: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10051: LD_EXP 22
10055: PUSH
10056: LD_EXP 28
10060: AND
10061: IFFALSE 10145
10063: GO 10065
10065: DISABLE
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
// begin enable ;
10070: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10071: LD_ADDR_VAR 0 2
10075: PUSH
10076: LD_INT 22
10078: PUSH
10079: LD_OWVAR 2
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 32
10090: PUSH
10091: LD_INT 3
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: ST_TO_ADDR
// if not tmp then
10107: LD_VAR 0 2
10111: NOT
10112: IFFALSE 10116
// exit ;
10114: GO 10145
// for i in tmp do
10116: LD_ADDR_VAR 0 1
10120: PUSH
10121: LD_VAR 0 2
10125: PUSH
10126: FOR_IN
10127: IFFALSE 10143
// begin SetLives ( i , 0 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 0
10136: PPUSH
10137: CALL_OW 234
// end ;
10141: GO 10126
10143: POP
10144: POP
// end ;
10145: PPOPN 2
10147: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10148: LD_EXP 22
10152: PUSH
10153: LD_EXP 25
10157: AND
10158: IFFALSE 10251
10160: GO 10162
10162: DISABLE
10163: LD_INT 0
10165: PPUSH
// begin enable ;
10166: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10167: LD_ADDR_VAR 0 1
10171: PUSH
10172: LD_INT 22
10174: PUSH
10175: LD_OWVAR 2
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 2
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 5
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 9
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 8
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 69
10231: PUSH
10232: FOR_IN
10233: IFFALSE 10249
// begin SetClass ( i , 1 ) ;
10235: LD_VAR 0 1
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 336
// end ;
10247: GO 10232
10249: POP
10250: POP
// end ;
10251: PPOPN 1
10253: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10254: LD_EXP 22
10258: PUSH
10259: LD_EXP 26
10263: AND
10264: PUSH
10265: LD_OWVAR 65
10269: PUSH
10270: LD_INT 7
10272: LESS
10273: AND
10274: IFFALSE 10288
10276: GO 10278
10278: DISABLE
// begin enable ;
10279: ENABLE
// game_speed := 7 ;
10280: LD_ADDR_OWVAR 65
10284: PUSH
10285: LD_INT 7
10287: ST_TO_ADDR
// end ;
10288: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10289: LD_EXP 22
10293: PUSH
10294: LD_EXP 29
10298: AND
10299: IFFALSE 10501
10301: GO 10303
10303: DISABLE
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
10308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10309: LD_ADDR_VAR 0 3
10313: PUSH
10314: LD_INT 81
10316: PUSH
10317: LD_OWVAR 2
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 69
10344: ST_TO_ADDR
// if not tmp then
10345: LD_VAR 0 3
10349: NOT
10350: IFFALSE 10354
// exit ;
10352: GO 10501
// if tmp > 5 then
10354: LD_VAR 0 3
10358: PUSH
10359: LD_INT 5
10361: GREATER
10362: IFFALSE 10374
// k := 5 else
10364: LD_ADDR_VAR 0 2
10368: PUSH
10369: LD_INT 5
10371: ST_TO_ADDR
10372: GO 10384
// k := tmp ;
10374: LD_ADDR_VAR 0 2
10378: PUSH
10379: LD_VAR 0 3
10383: ST_TO_ADDR
// for i := 1 to k do
10384: LD_ADDR_VAR 0 1
10388: PUSH
10389: DOUBLE
10390: LD_INT 1
10392: DEC
10393: ST_TO_ADDR
10394: LD_VAR 0 2
10398: PUSH
10399: FOR_TO
10400: IFFALSE 10499
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10402: LD_VAR 0 3
10406: PUSH
10407: LD_VAR 0 1
10411: ARRAY
10412: PPUSH
10413: LD_VAR 0 1
10417: PUSH
10418: LD_INT 4
10420: MOD
10421: PUSH
10422: LD_INT 1
10424: PLUS
10425: PPUSH
10426: CALL_OW 259
10430: PUSH
10431: LD_INT 10
10433: LESS
10434: IFFALSE 10497
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10436: LD_VAR 0 3
10440: PUSH
10441: LD_VAR 0 1
10445: ARRAY
10446: PPUSH
10447: LD_VAR 0 1
10451: PUSH
10452: LD_INT 4
10454: MOD
10455: PUSH
10456: LD_INT 1
10458: PLUS
10459: PPUSH
10460: LD_VAR 0 3
10464: PUSH
10465: LD_VAR 0 1
10469: ARRAY
10470: PPUSH
10471: LD_VAR 0 1
10475: PUSH
10476: LD_INT 4
10478: MOD
10479: PUSH
10480: LD_INT 1
10482: PLUS
10483: PPUSH
10484: CALL_OW 259
10488: PUSH
10489: LD_INT 1
10491: PLUS
10492: PPUSH
10493: CALL_OW 237
10497: GO 10399
10499: POP
10500: POP
// end ;
10501: PPOPN 3
10503: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10504: LD_EXP 22
10508: PUSH
10509: LD_EXP 30
10513: AND
10514: IFFALSE 10534
10516: GO 10518
10518: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10519: LD_INT 4
10521: PPUSH
10522: LD_OWVAR 2
10526: PPUSH
10527: LD_INT 0
10529: PPUSH
10530: CALL_OW 324
10534: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10535: LD_EXP 22
10539: PUSH
10540: LD_EXP 59
10544: AND
10545: IFFALSE 10565
10547: GO 10549
10549: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10550: LD_INT 19
10552: PPUSH
10553: LD_OWVAR 2
10557: PPUSH
10558: LD_INT 0
10560: PPUSH
10561: CALL_OW 324
10565: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10566: LD_EXP 22
10570: PUSH
10571: LD_EXP 31
10575: AND
10576: IFFALSE 10678
10578: GO 10580
10580: DISABLE
10581: LD_INT 0
10583: PPUSH
10584: PPUSH
// begin enable ;
10585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10586: LD_ADDR_VAR 0 2
10590: PUSH
10591: LD_INT 22
10593: PUSH
10594: LD_OWVAR 2
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: LD_INT 34
10608: PUSH
10609: LD_INT 11
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 34
10618: PUSH
10619: LD_INT 30
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PPUSH
10635: CALL_OW 69
10639: ST_TO_ADDR
// if not tmp then
10640: LD_VAR 0 2
10644: NOT
10645: IFFALSE 10649
// exit ;
10647: GO 10678
// for i in tmp do
10649: LD_ADDR_VAR 0 1
10653: PUSH
10654: LD_VAR 0 2
10658: PUSH
10659: FOR_IN
10660: IFFALSE 10676
// begin SetLives ( i , 0 ) ;
10662: LD_VAR 0 1
10666: PPUSH
10667: LD_INT 0
10669: PPUSH
10670: CALL_OW 234
// end ;
10674: GO 10659
10676: POP
10677: POP
// end ;
10678: PPOPN 2
10680: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10681: LD_EXP 22
10685: PUSH
10686: LD_EXP 32
10690: AND
10691: IFFALSE 10711
10693: GO 10695
10695: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10696: LD_INT 32
10698: PPUSH
10699: LD_OWVAR 2
10703: PPUSH
10704: LD_INT 0
10706: PPUSH
10707: CALL_OW 324
10711: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10712: LD_EXP 22
10716: PUSH
10717: LD_EXP 33
10721: AND
10722: IFFALSE 10903
10724: GO 10726
10726: DISABLE
10727: LD_INT 0
10729: PPUSH
10730: PPUSH
10731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_OWVAR 2
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 33
10751: PUSH
10752: LD_INT 3
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PPUSH
10763: CALL_OW 69
10767: ST_TO_ADDR
// if not tmp then
10768: LD_VAR 0 2
10772: NOT
10773: IFFALSE 10777
// exit ;
10775: GO 10903
// side := 0 ;
10777: LD_ADDR_VAR 0 3
10781: PUSH
10782: LD_INT 0
10784: ST_TO_ADDR
// for i := 1 to 8 do
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: DOUBLE
10791: LD_INT 1
10793: DEC
10794: ST_TO_ADDR
10795: LD_INT 8
10797: PUSH
10798: FOR_TO
10799: IFFALSE 10847
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10801: LD_OWVAR 2
10805: PUSH
10806: LD_VAR 0 1
10810: NONEQUAL
10811: PUSH
10812: LD_OWVAR 2
10816: PPUSH
10817: LD_VAR 0 1
10821: PPUSH
10822: CALL_OW 81
10826: PUSH
10827: LD_INT 2
10829: EQUAL
10830: AND
10831: IFFALSE 10845
// begin side := i ;
10833: LD_ADDR_VAR 0 3
10837: PUSH
10838: LD_VAR 0 1
10842: ST_TO_ADDR
// break ;
10843: GO 10847
// end ;
10845: GO 10798
10847: POP
10848: POP
// if not side then
10849: LD_VAR 0 3
10853: NOT
10854: IFFALSE 10858
// exit ;
10856: GO 10903
// for i := 1 to tmp do
10858: LD_ADDR_VAR 0 1
10862: PUSH
10863: DOUBLE
10864: LD_INT 1
10866: DEC
10867: ST_TO_ADDR
10868: LD_VAR 0 2
10872: PUSH
10873: FOR_TO
10874: IFFALSE 10901
// if Prob ( 60 ) then
10876: LD_INT 60
10878: PPUSH
10879: CALL_OW 13
10883: IFFALSE 10899
// SetSide ( i , side ) ;
10885: LD_VAR 0 1
10889: PPUSH
10890: LD_VAR 0 3
10894: PPUSH
10895: CALL_OW 235
10899: GO 10873
10901: POP
10902: POP
// end ;
10903: PPOPN 3
10905: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10906: LD_EXP 22
10910: PUSH
10911: LD_EXP 35
10915: AND
10916: IFFALSE 11035
10918: GO 10920
10920: DISABLE
10921: LD_INT 0
10923: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10924: LD_ADDR_VAR 0 1
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_OWVAR 2
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 21
10943: PUSH
10944: LD_INT 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 3
10953: PUSH
10954: LD_INT 23
10956: PUSH
10957: LD_INT 0
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: PPUSH
10973: CALL_OW 69
10977: PUSH
10978: FOR_IN
10979: IFFALSE 11033
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10981: LD_VAR 0 1
10985: PPUSH
10986: CALL_OW 257
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: LD_INT 3
10999: PUSH
11000: LD_INT 4
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: IN
11009: IFFALSE 11031
// SetClass ( un , rand ( 1 , 4 ) ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: LD_INT 4
11021: PPUSH
11022: CALL_OW 12
11026: PPUSH
11027: CALL_OW 336
11031: GO 10978
11033: POP
11034: POP
// end ;
11035: PPOPN 1
11037: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11038: LD_EXP 22
11042: PUSH
11043: LD_EXP 34
11047: AND
11048: IFFALSE 11127
11050: GO 11052
11052: DISABLE
11053: LD_INT 0
11055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11056: LD_ADDR_VAR 0 1
11060: PUSH
11061: LD_INT 22
11063: PUSH
11064: LD_OWVAR 2
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 21
11075: PUSH
11076: LD_INT 3
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PPUSH
11087: CALL_OW 69
11091: ST_TO_ADDR
// if not tmp then
11092: LD_VAR 0 1
11096: NOT
11097: IFFALSE 11101
// exit ;
11099: GO 11127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 1
11108: PPUSH
11109: LD_VAR 0 1
11113: PPUSH
11114: CALL_OW 12
11118: ARRAY
11119: PPUSH
11120: LD_INT 100
11122: PPUSH
11123: CALL_OW 234
// end ;
11127: PPOPN 1
11129: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11130: LD_EXP 22
11134: PUSH
11135: LD_EXP 36
11139: AND
11140: IFFALSE 11238
11142: GO 11144
11144: DISABLE
11145: LD_INT 0
11147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11148: LD_ADDR_VAR 0 1
11152: PUSH
11153: LD_INT 22
11155: PUSH
11156: LD_OWVAR 2
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 21
11167: PUSH
11168: LD_INT 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PPUSH
11179: CALL_OW 69
11183: ST_TO_ADDR
// if not tmp then
11184: LD_VAR 0 1
11188: NOT
11189: IFFALSE 11193
// exit ;
11191: GO 11238
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11193: LD_VAR 0 1
11197: PUSH
11198: LD_INT 1
11200: PPUSH
11201: LD_VAR 0 1
11205: PPUSH
11206: CALL_OW 12
11210: ARRAY
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_INT 4
11217: PPUSH
11218: CALL_OW 12
11222: PPUSH
11223: LD_INT 3000
11225: PPUSH
11226: LD_INT 9000
11228: PPUSH
11229: CALL_OW 12
11233: PPUSH
11234: CALL_OW 492
// end ;
11238: PPOPN 1
11240: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11241: LD_EXP 22
11245: PUSH
11246: LD_EXP 37
11250: AND
11251: IFFALSE 11271
11253: GO 11255
11255: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11256: LD_INT 1
11258: PPUSH
11259: LD_OWVAR 2
11263: PPUSH
11264: LD_INT 0
11266: PPUSH
11267: CALL_OW 324
11271: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11272: LD_EXP 22
11276: PUSH
11277: LD_EXP 38
11281: AND
11282: IFFALSE 11365
11284: GO 11286
11286: DISABLE
11287: LD_INT 0
11289: PPUSH
11290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11291: LD_ADDR_VAR 0 2
11295: PUSH
11296: LD_INT 22
11298: PUSH
11299: LD_OWVAR 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PPUSH
11322: CALL_OW 69
11326: ST_TO_ADDR
// if not tmp then
11327: LD_VAR 0 2
11331: NOT
11332: IFFALSE 11336
// exit ;
11334: GO 11365
// for i in tmp do
11336: LD_ADDR_VAR 0 1
11340: PUSH
11341: LD_VAR 0 2
11345: PUSH
11346: FOR_IN
11347: IFFALSE 11363
// SetBLevel ( i , 10 ) ;
11349: LD_VAR 0 1
11353: PPUSH
11354: LD_INT 10
11356: PPUSH
11357: CALL_OW 241
11361: GO 11346
11363: POP
11364: POP
// end ;
11365: PPOPN 2
11367: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11368: LD_EXP 22
11372: PUSH
11373: LD_EXP 39
11377: AND
11378: IFFALSE 11489
11380: GO 11382
11382: DISABLE
11383: LD_INT 0
11385: PPUSH
11386: PPUSH
11387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11388: LD_ADDR_VAR 0 3
11392: PUSH
11393: LD_INT 22
11395: PUSH
11396: LD_OWVAR 2
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: ST_TO_ADDR
// if not tmp then
11424: LD_VAR 0 3
11428: NOT
11429: IFFALSE 11433
// exit ;
11431: GO 11489
// un := tmp [ rand ( 1 , tmp ) ] ;
11433: LD_ADDR_VAR 0 2
11437: PUSH
11438: LD_VAR 0 3
11442: PUSH
11443: LD_INT 1
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: CALL_OW 12
11455: ARRAY
11456: ST_TO_ADDR
// if Crawls ( un ) then
11457: LD_VAR 0 2
11461: PPUSH
11462: CALL_OW 318
11466: IFFALSE 11477
// ComWalk ( un ) ;
11468: LD_VAR 0 2
11472: PPUSH
11473: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11477: LD_VAR 0 2
11481: PPUSH
11482: LD_INT 5
11484: PPUSH
11485: CALL_OW 336
// end ;
11489: PPOPN 3
11491: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11492: LD_EXP 22
11496: PUSH
11497: LD_EXP 40
11501: AND
11502: PUSH
11503: LD_OWVAR 67
11507: PUSH
11508: LD_INT 3
11510: LESS
11511: AND
11512: IFFALSE 11531
11514: GO 11516
11516: DISABLE
// Difficulty := Difficulty + 1 ;
11517: LD_ADDR_OWVAR 67
11521: PUSH
11522: LD_OWVAR 67
11526: PUSH
11527: LD_INT 1
11529: PLUS
11530: ST_TO_ADDR
11531: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11532: LD_EXP 22
11536: PUSH
11537: LD_EXP 41
11541: AND
11542: IFFALSE 11645
11544: GO 11546
11546: DISABLE
11547: LD_INT 0
11549: PPUSH
// begin for i := 1 to 5 do
11550: LD_ADDR_VAR 0 1
11554: PUSH
11555: DOUBLE
11556: LD_INT 1
11558: DEC
11559: ST_TO_ADDR
11560: LD_INT 5
11562: PUSH
11563: FOR_TO
11564: IFFALSE 11643
// begin uc_nation := nation_nature ;
11566: LD_ADDR_OWVAR 21
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// uc_side := 0 ;
11574: LD_ADDR_OWVAR 20
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11582: LD_ADDR_OWVAR 29
11586: PUSH
11587: LD_INT 12
11589: PUSH
11590: LD_INT 12
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: ST_TO_ADDR
// hc_agressivity := 20 ;
11597: LD_ADDR_OWVAR 35
11601: PUSH
11602: LD_INT 20
11604: ST_TO_ADDR
// hc_class := class_tiger ;
11605: LD_ADDR_OWVAR 28
11609: PUSH
11610: LD_INT 14
11612: ST_TO_ADDR
// hc_gallery :=  ;
11613: LD_ADDR_OWVAR 33
11617: PUSH
11618: LD_STRING 
11620: ST_TO_ADDR
// hc_name :=  ;
11621: LD_ADDR_OWVAR 26
11625: PUSH
11626: LD_STRING 
11628: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11629: CALL_OW 44
11633: PPUSH
11634: LD_INT 0
11636: PPUSH
11637: CALL_OW 51
// end ;
11641: GO 11563
11643: POP
11644: POP
// end ;
11645: PPOPN 1
11647: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11648: LD_EXP 22
11652: PUSH
11653: LD_EXP 42
11657: AND
11658: IFFALSE 11667
11660: GO 11662
11662: DISABLE
// StreamSibBomb ;
11663: CALL 11668 0 0
11667: END
// export function StreamSibBomb ; var i , x , y ; begin
11668: LD_INT 0
11670: PPUSH
11671: PPUSH
11672: PPUSH
11673: PPUSH
// result := false ;
11674: LD_ADDR_VAR 0 1
11678: PUSH
11679: LD_INT 0
11681: ST_TO_ADDR
// for i := 1 to 16 do
11682: LD_ADDR_VAR 0 2
11686: PUSH
11687: DOUBLE
11688: LD_INT 1
11690: DEC
11691: ST_TO_ADDR
11692: LD_INT 16
11694: PUSH
11695: FOR_TO
11696: IFFALSE 11895
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11698: LD_ADDR_VAR 0 3
11702: PUSH
11703: LD_INT 10
11705: PUSH
11706: LD_INT 20
11708: PUSH
11709: LD_INT 30
11711: PUSH
11712: LD_INT 40
11714: PUSH
11715: LD_INT 50
11717: PUSH
11718: LD_INT 60
11720: PUSH
11721: LD_INT 70
11723: PUSH
11724: LD_INT 80
11726: PUSH
11727: LD_INT 90
11729: PUSH
11730: LD_INT 100
11732: PUSH
11733: LD_INT 110
11735: PUSH
11736: LD_INT 120
11738: PUSH
11739: LD_INT 130
11741: PUSH
11742: LD_INT 140
11744: PUSH
11745: LD_INT 150
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 15
11770: PPUSH
11771: CALL_OW 12
11775: ARRAY
11776: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11777: LD_ADDR_VAR 0 4
11781: PUSH
11782: LD_INT 10
11784: PUSH
11785: LD_INT 20
11787: PUSH
11788: LD_INT 30
11790: PUSH
11791: LD_INT 40
11793: PUSH
11794: LD_INT 50
11796: PUSH
11797: LD_INT 60
11799: PUSH
11800: LD_INT 70
11802: PUSH
11803: LD_INT 80
11805: PUSH
11806: LD_INT 90
11808: PUSH
11809: LD_INT 100
11811: PUSH
11812: LD_INT 110
11814: PUSH
11815: LD_INT 120
11817: PUSH
11818: LD_INT 130
11820: PUSH
11821: LD_INT 140
11823: PUSH
11824: LD_INT 150
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 1
11846: PPUSH
11847: LD_INT 15
11849: PPUSH
11850: CALL_OW 12
11854: ARRAY
11855: ST_TO_ADDR
// if ValidHex ( x , y ) then
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_VAR 0 4
11865: PPUSH
11866: CALL_OW 488
11870: IFFALSE 11893
// begin result := [ x , y ] ;
11872: LD_ADDR_VAR 0 1
11876: PUSH
11877: LD_VAR 0 3
11881: PUSH
11882: LD_VAR 0 4
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: ST_TO_ADDR
// break ;
11891: GO 11895
// end ; end ;
11893: GO 11695
11895: POP
11896: POP
// if result then
11897: LD_VAR 0 1
11901: IFFALSE 11961
// begin ToLua ( playSibBomb() ) ;
11903: LD_STRING playSibBomb()
11905: PPUSH
11906: CALL_OW 559
// wait ( 0 0$14 ) ;
11910: LD_INT 490
11912: PPUSH
11913: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11917: LD_VAR 0 1
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 2
11933: ARRAY
11934: PPUSH
11935: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11939: LD_VAR 0 1
11943: PUSH
11944: LD_INT 1
11946: ARRAY
11947: PPUSH
11948: LD_VAR 0 1
11952: PUSH
11953: LD_INT 2
11955: ARRAY
11956: PPUSH
11957: CALL_OW 429
// end ; end ;
11961: LD_VAR 0 1
11965: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11966: LD_EXP 22
11970: PUSH
11971: LD_EXP 44
11975: AND
11976: IFFALSE 11988
11978: GO 11980
11980: DISABLE
// YouLost (  ) ;
11981: LD_STRING 
11983: PPUSH
11984: CALL_OW 104
11988: END
// every 0 0$1 trigger StreamModeActive and sFog do
11989: LD_EXP 22
11993: PUSH
11994: LD_EXP 43
11998: AND
11999: IFFALSE 12013
12001: GO 12003
12003: DISABLE
// FogOff ( your_side ) ;
12004: LD_OWVAR 2
12008: PPUSH
12009: CALL_OW 344
12013: END
// every 0 0$1 trigger StreamModeActive and sSun do
12014: LD_EXP 22
12018: PUSH
12019: LD_EXP 45
12023: AND
12024: IFFALSE 12052
12026: GO 12028
12028: DISABLE
// begin solar_recharge_percent := 0 ;
12029: LD_ADDR_OWVAR 79
12033: PUSH
12034: LD_INT 0
12036: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12037: LD_INT 10500
12039: PPUSH
12040: CALL_OW 67
// solar_recharge_percent := 100 ;
12044: LD_ADDR_OWVAR 79
12048: PUSH
12049: LD_INT 100
12051: ST_TO_ADDR
// end ;
12052: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12053: LD_EXP 22
12057: PUSH
12058: LD_EXP 46
12062: AND
12063: IFFALSE 12302
12065: GO 12067
12067: DISABLE
12068: LD_INT 0
12070: PPUSH
12071: PPUSH
12072: PPUSH
// begin tmp := [ ] ;
12073: LD_ADDR_VAR 0 3
12077: PUSH
12078: EMPTY
12079: ST_TO_ADDR
// for i := 1 to 6 do
12080: LD_ADDR_VAR 0 1
12084: PUSH
12085: DOUBLE
12086: LD_INT 1
12088: DEC
12089: ST_TO_ADDR
12090: LD_INT 6
12092: PUSH
12093: FOR_TO
12094: IFFALSE 12199
// begin uc_nation := nation_nature ;
12096: LD_ADDR_OWVAR 21
12100: PUSH
12101: LD_INT 0
12103: ST_TO_ADDR
// uc_side := 0 ;
12104: LD_ADDR_OWVAR 20
12108: PUSH
12109: LD_INT 0
12111: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12112: LD_ADDR_OWVAR 29
12116: PUSH
12117: LD_INT 12
12119: PUSH
12120: LD_INT 12
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: ST_TO_ADDR
// hc_agressivity := 20 ;
12127: LD_ADDR_OWVAR 35
12131: PUSH
12132: LD_INT 20
12134: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12135: LD_ADDR_OWVAR 28
12139: PUSH
12140: LD_INT 17
12142: ST_TO_ADDR
// hc_gallery :=  ;
12143: LD_ADDR_OWVAR 33
12147: PUSH
12148: LD_STRING 
12150: ST_TO_ADDR
// hc_name :=  ;
12151: LD_ADDR_OWVAR 26
12155: PUSH
12156: LD_STRING 
12158: ST_TO_ADDR
// un := CreateHuman ;
12159: LD_ADDR_VAR 0 2
12163: PUSH
12164: CALL_OW 44
12168: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 51
// tmp := tmp ^ un ;
12181: LD_ADDR_VAR 0 3
12185: PUSH
12186: LD_VAR 0 3
12190: PUSH
12191: LD_VAR 0 2
12195: ADD
12196: ST_TO_ADDR
// end ;
12197: GO 12093
12199: POP
12200: POP
// repeat wait ( 0 0$1 ) ;
12201: LD_INT 35
12203: PPUSH
12204: CALL_OW 67
// for un in tmp do
12208: LD_ADDR_VAR 0 2
12212: PUSH
12213: LD_VAR 0 3
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12293
// begin if IsDead ( un ) then
12221: LD_VAR 0 2
12225: PPUSH
12226: CALL_OW 301
12230: IFFALSE 12250
// begin tmp := tmp diff un ;
12232: LD_ADDR_VAR 0 3
12236: PUSH
12237: LD_VAR 0 3
12241: PUSH
12242: LD_VAR 0 2
12246: DIFF
12247: ST_TO_ADDR
// continue ;
12248: GO 12218
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12250: LD_VAR 0 2
12254: PPUSH
12255: LD_INT 3
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_INT 0
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: PPUSH
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 74
12286: PPUSH
12287: CALL_OW 115
// end ;
12291: GO 12218
12293: POP
12294: POP
// until not tmp ;
12295: LD_VAR 0 3
12299: NOT
12300: IFFALSE 12201
// end ;
12302: PPOPN 3
12304: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12305: LD_EXP 22
12309: PUSH
12310: LD_EXP 47
12314: AND
12315: IFFALSE 12369
12317: GO 12319
12319: DISABLE
// begin ToLua ( displayTroll(); ) ;
12320: LD_STRING displayTroll();
12322: PPUSH
12323: CALL_OW 559
// wait ( 3 3$00 ) ;
12327: LD_INT 6300
12329: PPUSH
12330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12334: LD_STRING hideTroll();
12336: PPUSH
12337: CALL_OW 559
// wait ( 1 1$00 ) ;
12341: LD_INT 2100
12343: PPUSH
12344: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12348: LD_STRING displayTroll();
12350: PPUSH
12351: CALL_OW 559
// wait ( 1 1$00 ) ;
12355: LD_INT 2100
12357: PPUSH
12358: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12362: LD_STRING hideTroll();
12364: PPUSH
12365: CALL_OW 559
// end ;
12369: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12370: LD_EXP 22
12374: PUSH
12375: LD_EXP 48
12379: AND
12380: IFFALSE 12443
12382: GO 12384
12384: DISABLE
12385: LD_INT 0
12387: PPUSH
// begin p := 0 ;
12388: LD_ADDR_VAR 0 1
12392: PUSH
12393: LD_INT 0
12395: ST_TO_ADDR
// repeat game_speed := 1 ;
12396: LD_ADDR_OWVAR 65
12400: PUSH
12401: LD_INT 1
12403: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12404: LD_INT 35
12406: PPUSH
12407: CALL_OW 67
// p := p + 1 ;
12411: LD_ADDR_VAR 0 1
12415: PUSH
12416: LD_VAR 0 1
12420: PUSH
12421: LD_INT 1
12423: PLUS
12424: ST_TO_ADDR
// until p >= 60 ;
12425: LD_VAR 0 1
12429: PUSH
12430: LD_INT 60
12432: GREATEREQUAL
12433: IFFALSE 12396
// game_speed := 4 ;
12435: LD_ADDR_OWVAR 65
12439: PUSH
12440: LD_INT 4
12442: ST_TO_ADDR
// end ;
12443: PPOPN 1
12445: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12446: LD_EXP 22
12450: PUSH
12451: LD_EXP 49
12455: AND
12456: IFFALSE 12602
12458: GO 12460
12460: DISABLE
12461: LD_INT 0
12463: PPUSH
12464: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_OWVAR 2
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 0
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: ST_TO_ADDR
// if not depot then
12519: LD_VAR 0 1
12523: NOT
12524: IFFALSE 12528
// exit ;
12526: GO 12602
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12528: LD_ADDR_VAR 0 2
12532: PUSH
12533: LD_VAR 0 1
12537: PUSH
12538: LD_INT 1
12540: PPUSH
12541: LD_VAR 0 1
12545: PPUSH
12546: CALL_OW 12
12550: ARRAY
12551: PPUSH
12552: CALL_OW 274
12556: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: LD_INT 0
12567: PPUSH
12568: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12572: LD_VAR 0 2
12576: PPUSH
12577: LD_INT 2
12579: PPUSH
12580: LD_INT 0
12582: PPUSH
12583: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12587: LD_VAR 0 2
12591: PPUSH
12592: LD_INT 3
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 277
// end ;
12602: PPOPN 2
12604: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12605: LD_EXP 22
12609: PUSH
12610: LD_EXP 50
12614: AND
12615: IFFALSE 12712
12617: GO 12619
12619: DISABLE
12620: LD_INT 0
12622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12623: LD_ADDR_VAR 0 1
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_OWVAR 2
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 21
12642: PUSH
12643: LD_INT 1
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: LD_INT 23
12655: PUSH
12656: LD_INT 0
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: ST_TO_ADDR
// if not tmp then
12677: LD_VAR 0 1
12681: NOT
12682: IFFALSE 12686
// exit ;
12684: GO 12712
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12686: LD_VAR 0 1
12690: PUSH
12691: LD_INT 1
12693: PPUSH
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 12
12703: ARRAY
12704: PPUSH
12705: LD_INT 200
12707: PPUSH
12708: CALL_OW 234
// end ;
12712: PPOPN 1
12714: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12715: LD_EXP 22
12719: PUSH
12720: LD_EXP 51
12724: AND
12725: IFFALSE 12804
12727: GO 12729
12729: DISABLE
12730: LD_INT 0
12732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12733: LD_ADDR_VAR 0 1
12737: PUSH
12738: LD_INT 22
12740: PUSH
12741: LD_OWVAR 2
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 21
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: ST_TO_ADDR
// if not tmp then
12769: LD_VAR 0 1
12773: NOT
12774: IFFALSE 12778
// exit ;
12776: GO 12804
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12778: LD_VAR 0 1
12782: PUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 12
12795: ARRAY
12796: PPUSH
12797: LD_INT 60
12799: PPUSH
12800: CALL_OW 234
// end ;
12804: PPOPN 1
12806: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12807: LD_EXP 22
12811: PUSH
12812: LD_EXP 52
12816: AND
12817: IFFALSE 12916
12819: GO 12821
12821: DISABLE
12822: LD_INT 0
12824: PPUSH
12825: PPUSH
// begin enable ;
12826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_OWVAR 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 61
12846: PUSH
12847: EMPTY
12848: LIST
12849: PUSH
12850: LD_INT 33
12852: PUSH
12853: LD_INT 2
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: PPUSH
12865: CALL_OW 69
12869: ST_TO_ADDR
// if not tmp then
12870: LD_VAR 0 1
12874: NOT
12875: IFFALSE 12879
// exit ;
12877: GO 12916
// for i in tmp do
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: LD_VAR 0 1
12888: PUSH
12889: FOR_IN
12890: IFFALSE 12914
// if IsControledBy ( i ) then
12892: LD_VAR 0 2
12896: PPUSH
12897: CALL_OW 312
12901: IFFALSE 12912
// ComUnlink ( i ) ;
12903: LD_VAR 0 2
12907: PPUSH
12908: CALL_OW 136
12912: GO 12889
12914: POP
12915: POP
// end ;
12916: PPOPN 2
12918: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12919: LD_EXP 22
12923: PUSH
12924: LD_EXP 53
12928: AND
12929: IFFALSE 13069
12931: GO 12933
12933: DISABLE
12934: LD_INT 0
12936: PPUSH
12937: PPUSH
// begin ToLua ( displayPowell(); ) ;
12938: LD_STRING displayPowell();
12940: PPUSH
12941: CALL_OW 559
// uc_side := 0 ;
12945: LD_ADDR_OWVAR 20
12949: PUSH
12950: LD_INT 0
12952: ST_TO_ADDR
// uc_nation := 2 ;
12953: LD_ADDR_OWVAR 21
12957: PUSH
12958: LD_INT 2
12960: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12961: LD_ADDR_OWVAR 37
12965: PUSH
12966: LD_INT 14
12968: ST_TO_ADDR
// vc_engine := engine_siberite ;
12969: LD_ADDR_OWVAR 39
12973: PUSH
12974: LD_INT 3
12976: ST_TO_ADDR
// vc_control := control_apeman ;
12977: LD_ADDR_OWVAR 38
12981: PUSH
12982: LD_INT 5
12984: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12985: LD_ADDR_OWVAR 40
12989: PUSH
12990: LD_INT 29
12992: ST_TO_ADDR
// un := CreateVehicle ;
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: CALL_OW 45
13002: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13003: LD_VAR 0 2
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13015: LD_INT 35
13017: PPUSH
13018: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13022: LD_VAR 0 2
13026: PPUSH
13027: LD_INT 22
13029: PUSH
13030: LD_OWVAR 2
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 69
13043: PPUSH
13044: LD_VAR 0 2
13048: PPUSH
13049: CALL_OW 74
13053: PPUSH
13054: CALL_OW 115
// until IsDead ( un ) ;
13058: LD_VAR 0 2
13062: PPUSH
13063: CALL_OW 301
13067: IFFALSE 13015
// end ;
13069: PPOPN 2
13071: END
// every 0 0$1 trigger StreamModeActive and sStu do
13072: LD_EXP 22
13076: PUSH
13077: LD_EXP 61
13081: AND
13082: IFFALSE 13098
13084: GO 13086
13086: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13087: LD_STRING displayStucuk();
13089: PPUSH
13090: CALL_OW 559
// ResetFog ;
13094: CALL_OW 335
// end ;
13098: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13099: LD_EXP 22
13103: PUSH
13104: LD_EXP 54
13108: AND
13109: IFFALSE 13250
13111: GO 13113
13113: DISABLE
13114: LD_INT 0
13116: PPUSH
13117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13118: LD_ADDR_VAR 0 2
13122: PUSH
13123: LD_INT 22
13125: PUSH
13126: LD_OWVAR 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 21
13137: PUSH
13138: LD_INT 1
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PPUSH
13149: CALL_OW 69
13153: ST_TO_ADDR
// if not tmp then
13154: LD_VAR 0 2
13158: NOT
13159: IFFALSE 13163
// exit ;
13161: GO 13250
// un := tmp [ rand ( 1 , tmp ) ] ;
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_VAR 0 2
13172: PUSH
13173: LD_INT 1
13175: PPUSH
13176: LD_VAR 0 2
13180: PPUSH
13181: CALL_OW 12
13185: ARRAY
13186: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13187: LD_VAR 0 1
13191: PPUSH
13192: LD_INT 0
13194: PPUSH
13195: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13199: LD_VAR 0 1
13203: PPUSH
13204: LD_OWVAR 3
13208: PUSH
13209: LD_VAR 0 1
13213: DIFF
13214: PPUSH
13215: LD_VAR 0 1
13219: PPUSH
13220: CALL_OW 74
13224: PPUSH
13225: CALL_OW 115
// wait ( 0 0$20 ) ;
13229: LD_INT 700
13231: PPUSH
13232: CALL_OW 67
// SetSide ( un , your_side ) ;
13236: LD_VAR 0 1
13240: PPUSH
13241: LD_OWVAR 2
13245: PPUSH
13246: CALL_OW 235
// end ;
13250: PPOPN 2
13252: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13253: LD_EXP 22
13257: PUSH
13258: LD_EXP 55
13262: AND
13263: IFFALSE 13369
13265: GO 13267
13267: DISABLE
13268: LD_INT 0
13270: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: LD_INT 22
13278: PUSH
13279: LD_OWVAR 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 2
13290: PUSH
13291: LD_INT 30
13293: PUSH
13294: LD_INT 0
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: LD_INT 30
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 69
13324: ST_TO_ADDR
// if not depot then
13325: LD_VAR 0 1
13329: NOT
13330: IFFALSE 13334
// exit ;
13332: GO 13369
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: CALL_OW 250
13347: PPUSH
13348: LD_VAR 0 1
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: CALL_OW 251
13361: PPUSH
13362: LD_INT 70
13364: PPUSH
13365: CALL_OW 495
// end ;
13369: PPOPN 1
13371: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13372: LD_EXP 22
13376: PUSH
13377: LD_EXP 56
13381: AND
13382: IFFALSE 13593
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13394: LD_ADDR_VAR 0 5
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_OWVAR 2
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 21
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PPUSH
13425: CALL_OW 69
13429: ST_TO_ADDR
// if not tmp then
13430: LD_VAR 0 5
13434: NOT
13435: IFFALSE 13439
// exit ;
13437: GO 13593
// for i in tmp do
13439: LD_ADDR_VAR 0 1
13443: PUSH
13444: LD_VAR 0 5
13448: PUSH
13449: FOR_IN
13450: IFFALSE 13591
// begin d := rand ( 0 , 5 ) ;
13452: LD_ADDR_VAR 0 4
13456: PUSH
13457: LD_INT 0
13459: PPUSH
13460: LD_INT 5
13462: PPUSH
13463: CALL_OW 12
13467: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13468: LD_ADDR_VAR 0 2
13472: PUSH
13473: LD_VAR 0 1
13477: PPUSH
13478: CALL_OW 250
13482: PPUSH
13483: LD_VAR 0 4
13487: PPUSH
13488: LD_INT 3
13490: PPUSH
13491: LD_INT 12
13493: PPUSH
13494: CALL_OW 12
13498: PPUSH
13499: CALL_OW 272
13503: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13504: LD_ADDR_VAR 0 3
13508: PUSH
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 251
13518: PPUSH
13519: LD_VAR 0 4
13523: PPUSH
13524: LD_INT 3
13526: PPUSH
13527: LD_INT 12
13529: PPUSH
13530: CALL_OW 12
13534: PPUSH
13535: CALL_OW 273
13539: ST_TO_ADDR
// if ValidHex ( x , y ) then
13540: LD_VAR 0 2
13544: PPUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: CALL_OW 488
13554: IFFALSE 13589
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13556: LD_VAR 0 1
13560: PPUSH
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 3
13573: PPUSH
13574: LD_INT 6
13576: PPUSH
13577: CALL_OW 12
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 483
// end ;
13589: GO 13449
13591: POP
13592: POP
// end ;
13593: PPOPN 5
13595: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13596: LD_EXP 22
13600: PUSH
13601: LD_EXP 57
13605: AND
13606: IFFALSE 13700
13608: GO 13610
13610: DISABLE
13611: LD_INT 0
13613: PPUSH
13614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_OWVAR 2
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 32
13634: PUSH
13635: LD_INT 1
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 21
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// if not tmp then
13662: LD_VAR 0 2
13666: NOT
13667: IFFALSE 13671
// exit ;
13669: GO 13700
// for i in tmp do
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_VAR 0 2
13680: PUSH
13681: FOR_IN
13682: IFFALSE 13698
// SetFuel ( i , 0 ) ;
13684: LD_VAR 0 1
13688: PPUSH
13689: LD_INT 0
13691: PPUSH
13692: CALL_OW 240
13696: GO 13681
13698: POP
13699: POP
// end ;
13700: PPOPN 2
13702: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13703: LD_EXP 22
13707: PUSH
13708: LD_EXP 58
13712: AND
13713: IFFALSE 13779
13715: GO 13717
13717: DISABLE
13718: LD_INT 0
13720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13721: LD_ADDR_VAR 0 1
13725: PUSH
13726: LD_INT 22
13728: PUSH
13729: LD_OWVAR 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 30
13740: PUSH
13741: LD_INT 29
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PPUSH
13752: CALL_OW 69
13756: ST_TO_ADDR
// if not tmp then
13757: LD_VAR 0 1
13761: NOT
13762: IFFALSE 13766
// exit ;
13764: GO 13779
// DestroyUnit ( tmp [ 1 ] ) ;
13766: LD_VAR 0 1
13770: PUSH
13771: LD_INT 1
13773: ARRAY
13774: PPUSH
13775: CALL_OW 65
// end ;
13779: PPOPN 1
13781: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13782: LD_EXP 22
13786: PUSH
13787: LD_EXP 60
13791: AND
13792: IFFALSE 13921
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
// begin uc_side := 0 ;
13800: LD_ADDR_OWVAR 20
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// uc_nation := nation_arabian ;
13808: LD_ADDR_OWVAR 21
13812: PUSH
13813: LD_INT 2
13815: ST_TO_ADDR
// hc_gallery :=  ;
13816: LD_ADDR_OWVAR 33
13820: PUSH
13821: LD_STRING 
13823: ST_TO_ADDR
// hc_name :=  ;
13824: LD_ADDR_OWVAR 26
13828: PUSH
13829: LD_STRING 
13831: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13832: LD_INT 1
13834: PPUSH
13835: LD_INT 11
13837: PPUSH
13838: LD_INT 10
13840: PPUSH
13841: CALL_OW 380
// un := CreateHuman ;
13845: LD_ADDR_VAR 0 1
13849: PUSH
13850: CALL_OW 44
13854: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13855: LD_VAR 0 1
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13867: LD_INT 35
13869: PPUSH
13870: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13874: LD_VAR 0 1
13878: PPUSH
13879: LD_INT 22
13881: PUSH
13882: LD_OWVAR 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PPUSH
13891: CALL_OW 69
13895: PPUSH
13896: LD_VAR 0 1
13900: PPUSH
13901: CALL_OW 74
13905: PPUSH
13906: CALL_OW 115
// until IsDead ( un ) ;
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 301
13919: IFFALSE 13867
// end ;
13921: PPOPN 1
13923: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13924: LD_EXP 22
13928: PUSH
13929: LD_EXP 62
13933: AND
13934: IFFALSE 13946
13936: GO 13938
13938: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13939: LD_STRING earthquake(getX(game), 0, 32)
13941: PPUSH
13942: CALL_OW 559
13946: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13947: LD_EXP 22
13951: PUSH
13952: LD_EXP 63
13956: AND
13957: IFFALSE 14048
13959: GO 13961
13961: DISABLE
13962: LD_INT 0
13964: PPUSH
// begin enable ;
13965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13966: LD_ADDR_VAR 0 1
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_OWVAR 2
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 21
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 33
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: PPUSH
14008: CALL_OW 69
14012: ST_TO_ADDR
// if not tmp then
14013: LD_VAR 0 1
14017: NOT
14018: IFFALSE 14022
// exit ;
14020: GO 14048
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14022: LD_VAR 0 1
14026: PUSH
14027: LD_INT 1
14029: PPUSH
14030: LD_VAR 0 1
14034: PPUSH
14035: CALL_OW 12
14039: ARRAY
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: CALL_OW 234
// end ;
14048: PPOPN 1
14050: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14051: LD_EXP 22
14055: PUSH
14056: LD_EXP 64
14060: AND
14061: IFFALSE 14202
14063: GO 14065
14065: DISABLE
14066: LD_INT 0
14068: PPUSH
14069: PPUSH
14070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14071: LD_ADDR_VAR 0 3
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_OWVAR 2
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 25
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: ST_TO_ADDR
// if not tmp then
14107: LD_VAR 0 3
14111: NOT
14112: IFFALSE 14116
// exit ;
14114: GO 14202
// un := tmp [ rand ( 1 , tmp ) ] ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_VAR 0 3
14125: PUSH
14126: LD_INT 1
14128: PPUSH
14129: LD_VAR 0 3
14133: PPUSH
14134: CALL_OW 12
14138: ARRAY
14139: ST_TO_ADDR
// if Crawls ( un ) then
14140: LD_VAR 0 2
14144: PPUSH
14145: CALL_OW 318
14149: IFFALSE 14160
// ComWalk ( un ) ;
14151: LD_VAR 0 2
14155: PPUSH
14156: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14160: LD_VAR 0 2
14164: PPUSH
14165: LD_INT 9
14167: PPUSH
14168: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14172: LD_INT 28
14174: PPUSH
14175: LD_OWVAR 2
14179: PPUSH
14180: LD_INT 2
14182: PPUSH
14183: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14187: LD_INT 29
14189: PPUSH
14190: LD_OWVAR 2
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: CALL_OW 322
// end ;
14202: PPOPN 3
14204: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14205: LD_EXP 22
14209: PUSH
14210: LD_EXP 65
14214: AND
14215: IFFALSE 14326
14217: GO 14219
14219: DISABLE
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14225: LD_ADDR_VAR 0 3
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 25
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 3
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14326
// un := tmp [ rand ( 1 , tmp ) ] ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_VAR 0 3
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// if Crawls ( un ) then
14294: LD_VAR 0 2
14298: PPUSH
14299: CALL_OW 318
14303: IFFALSE 14314
// ComWalk ( un ) ;
14305: LD_VAR 0 2
14309: PPUSH
14310: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14314: LD_VAR 0 2
14318: PPUSH
14319: LD_INT 8
14321: PPUSH
14322: CALL_OW 336
// end ;
14326: PPOPN 3
14328: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14329: LD_EXP 22
14333: PUSH
14334: LD_EXP 66
14338: AND
14339: IFFALSE 14483
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
14347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_OWVAR 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 2
14377: PUSH
14378: LD_INT 34
14380: PUSH
14381: LD_INT 12
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 34
14390: PUSH
14391: LD_INT 51
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 34
14400: PUSH
14401: LD_INT 32
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: PPUSH
14419: CALL_OW 69
14423: ST_TO_ADDR
// if not tmp then
14424: LD_VAR 0 2
14428: NOT
14429: IFFALSE 14433
// exit ;
14431: GO 14483
// for i in tmp do
14433: LD_ADDR_VAR 0 1
14437: PUSH
14438: LD_VAR 0 2
14442: PUSH
14443: FOR_IN
14444: IFFALSE 14481
// if GetCargo ( i , mat_artifact ) = 0 then
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_INT 4
14453: PPUSH
14454: CALL_OW 289
14458: PUSH
14459: LD_INT 0
14461: EQUAL
14462: IFFALSE 14479
// SetCargo ( i , mat_siberit , 100 ) ;
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_INT 3
14471: PPUSH
14472: LD_INT 100
14474: PPUSH
14475: CALL_OW 290
14479: GO 14443
14481: POP
14482: POP
// end ;
14483: PPOPN 2
14485: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14486: LD_EXP 22
14490: PUSH
14491: LD_EXP 67
14495: AND
14496: IFFALSE 14679
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14505: LD_ADDR_VAR 0 2
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_OWVAR 2
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PPUSH
14522: CALL_OW 69
14526: ST_TO_ADDR
// if not tmp then
14527: LD_VAR 0 2
14531: NOT
14532: IFFALSE 14536
// exit ;
14534: GO 14679
// for i := 1 to 2 do
14536: LD_ADDR_VAR 0 1
14540: PUSH
14541: DOUBLE
14542: LD_INT 1
14544: DEC
14545: ST_TO_ADDR
14546: LD_INT 2
14548: PUSH
14549: FOR_TO
14550: IFFALSE 14677
// begin uc_side := your_side ;
14552: LD_ADDR_OWVAR 20
14556: PUSH
14557: LD_OWVAR 2
14561: ST_TO_ADDR
// uc_nation := nation_american ;
14562: LD_ADDR_OWVAR 21
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// vc_chassis := us_morphling ;
14570: LD_ADDR_OWVAR 37
14574: PUSH
14575: LD_INT 5
14577: ST_TO_ADDR
// vc_engine := engine_siberite ;
14578: LD_ADDR_OWVAR 39
14582: PUSH
14583: LD_INT 3
14585: ST_TO_ADDR
// vc_control := control_computer ;
14586: LD_ADDR_OWVAR 38
14590: PUSH
14591: LD_INT 3
14593: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14594: LD_ADDR_OWVAR 40
14598: PUSH
14599: LD_INT 10
14601: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14602: LD_VAR 0 2
14606: PUSH
14607: LD_INT 1
14609: ARRAY
14610: PPUSH
14611: CALL_OW 310
14615: NOT
14616: IFFALSE 14663
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14618: CALL_OW 45
14622: PPUSH
14623: LD_VAR 0 2
14627: PUSH
14628: LD_INT 1
14630: ARRAY
14631: PPUSH
14632: CALL_OW 250
14636: PPUSH
14637: LD_VAR 0 2
14641: PUSH
14642: LD_INT 1
14644: ARRAY
14645: PPUSH
14646: CALL_OW 251
14650: PPUSH
14651: LD_INT 12
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 50
14661: GO 14675
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14663: CALL_OW 45
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 51
// end ;
14675: GO 14549
14677: POP
14678: POP
// end ;
14679: PPOPN 2
14681: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14682: LD_EXP 22
14686: PUSH
14687: LD_EXP 68
14691: AND
14692: IFFALSE 14914
14694: GO 14696
14696: DISABLE
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
14703: PPUSH
14704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14705: LD_ADDR_VAR 0 6
14709: PUSH
14710: LD_INT 22
14712: PUSH
14713: LD_OWVAR 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 1
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: LD_INT 23
14737: PUSH
14738: LD_INT 0
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: LIST
14753: PPUSH
14754: CALL_OW 69
14758: ST_TO_ADDR
// if not tmp then
14759: LD_VAR 0 6
14763: NOT
14764: IFFALSE 14768
// exit ;
14766: GO 14914
// s1 := rand ( 1 , 4 ) ;
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_INT 1
14775: PPUSH
14776: LD_INT 4
14778: PPUSH
14779: CALL_OW 12
14783: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14784: LD_ADDR_VAR 0 4
14788: PUSH
14789: LD_VAR 0 6
14793: PUSH
14794: LD_INT 1
14796: ARRAY
14797: PPUSH
14798: LD_VAR 0 2
14802: PPUSH
14803: CALL_OW 259
14807: ST_TO_ADDR
// if s1 = 1 then
14808: LD_VAR 0 2
14812: PUSH
14813: LD_INT 1
14815: EQUAL
14816: IFFALSE 14836
// s2 := rand ( 2 , 4 ) else
14818: LD_ADDR_VAR 0 3
14822: PUSH
14823: LD_INT 2
14825: PPUSH
14826: LD_INT 4
14828: PPUSH
14829: CALL_OW 12
14833: ST_TO_ADDR
14834: GO 14844
// s2 := 1 ;
14836: LD_ADDR_VAR 0 3
14840: PUSH
14841: LD_INT 1
14843: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14844: LD_ADDR_VAR 0 5
14848: PUSH
14849: LD_VAR 0 6
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: CALL_OW 259
14867: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14868: LD_VAR 0 6
14872: PUSH
14873: LD_INT 1
14875: ARRAY
14876: PPUSH
14877: LD_VAR 0 2
14881: PPUSH
14882: LD_VAR 0 5
14886: PPUSH
14887: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14891: LD_VAR 0 6
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: LD_VAR 0 3
14904: PPUSH
14905: LD_VAR 0 4
14909: PPUSH
14910: CALL_OW 237
// end ;
14914: PPOPN 6
14916: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14917: LD_EXP 22
14921: PUSH
14922: LD_EXP 69
14926: AND
14927: IFFALSE 15006
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14935: LD_ADDR_VAR 0 1
14939: PUSH
14940: LD_INT 22
14942: PUSH
14943: LD_OWVAR 2
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 30
14954: PUSH
14955: LD_INT 3
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PPUSH
14966: CALL_OW 69
14970: ST_TO_ADDR
// if not tmp then
14971: LD_VAR 0 1
14975: NOT
14976: IFFALSE 14980
// exit ;
14978: GO 15006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14980: LD_VAR 0 1
14984: PUSH
14985: LD_INT 1
14987: PPUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 12
14997: ARRAY
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 234
// end ;
15006: PPOPN 1
15008: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15009: LD_EXP 22
15013: PUSH
15014: LD_EXP 70
15018: AND
15019: IFFALSE 15131
15021: GO 15023
15023: DISABLE
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 22
15035: PUSH
15036: LD_OWVAR 2
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 2
15047: PUSH
15048: LD_INT 30
15050: PUSH
15051: LD_INT 27
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 30
15060: PUSH
15061: LD_INT 26
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: LD_INT 30
15070: PUSH
15071: LD_INT 28
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 69
15092: ST_TO_ADDR
// if not tmp then
15093: LD_VAR 0 2
15097: NOT
15098: IFFALSE 15102
// exit ;
15100: GO 15131
// for i in tmp do
15102: LD_ADDR_VAR 0 1
15106: PUSH
15107: LD_VAR 0 2
15111: PUSH
15112: FOR_IN
15113: IFFALSE 15129
// SetLives ( i , 1 ) ;
15115: LD_VAR 0 1
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 234
15127: GO 15112
15129: POP
15130: POP
// end ;
15131: PPOPN 2
15133: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15134: LD_EXP 22
15138: PUSH
15139: LD_EXP 71
15143: AND
15144: IFFALSE 15418
15146: GO 15148
15148: DISABLE
15149: LD_INT 0
15151: PPUSH
15152: PPUSH
15153: PPUSH
// begin i := rand ( 1 , 7 ) ;
15154: LD_ADDR_VAR 0 1
15158: PUSH
15159: LD_INT 1
15161: PPUSH
15162: LD_INT 7
15164: PPUSH
15165: CALL_OW 12
15169: ST_TO_ADDR
// case i of 1 :
15170: LD_VAR 0 1
15174: PUSH
15175: LD_INT 1
15177: DOUBLE
15178: EQUAL
15179: IFTRUE 15183
15181: GO 15193
15183: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15184: LD_STRING earthquake(getX(game), 0, 32)
15186: PPUSH
15187: CALL_OW 559
15191: GO 15418
15193: LD_INT 2
15195: DOUBLE
15196: EQUAL
15197: IFTRUE 15201
15199: GO 15215
15201: POP
// begin ToLua ( displayStucuk(); ) ;
15202: LD_STRING displayStucuk();
15204: PPUSH
15205: CALL_OW 559
// ResetFog ;
15209: CALL_OW 335
// end ; 3 :
15213: GO 15418
15215: LD_INT 3
15217: DOUBLE
15218: EQUAL
15219: IFTRUE 15223
15221: GO 15327
15223: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15224: LD_ADDR_VAR 0 2
15228: PUSH
15229: LD_INT 22
15231: PUSH
15232: LD_OWVAR 2
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 25
15243: PUSH
15244: LD_INT 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PPUSH
15255: CALL_OW 69
15259: ST_TO_ADDR
// if not tmp then
15260: LD_VAR 0 2
15264: NOT
15265: IFFALSE 15269
// exit ;
15267: GO 15418
// un := tmp [ rand ( 1 , tmp ) ] ;
15269: LD_ADDR_VAR 0 3
15273: PUSH
15274: LD_VAR 0 2
15278: PUSH
15279: LD_INT 1
15281: PPUSH
15282: LD_VAR 0 2
15286: PPUSH
15287: CALL_OW 12
15291: ARRAY
15292: ST_TO_ADDR
// if Crawls ( un ) then
15293: LD_VAR 0 3
15297: PPUSH
15298: CALL_OW 318
15302: IFFALSE 15313
// ComWalk ( un ) ;
15304: LD_VAR 0 3
15308: PPUSH
15309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_INT 8
15320: PPUSH
15321: CALL_OW 336
// end ; 4 :
15325: GO 15418
15327: LD_INT 4
15329: DOUBLE
15330: EQUAL
15331: IFTRUE 15335
15333: GO 15396
15335: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15336: LD_ADDR_VAR 0 2
15340: PUSH
15341: LD_INT 22
15343: PUSH
15344: LD_OWVAR 2
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 30
15355: PUSH
15356: LD_INT 29
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PPUSH
15367: CALL_OW 69
15371: ST_TO_ADDR
// if not tmp then
15372: LD_VAR 0 2
15376: NOT
15377: IFFALSE 15381
// exit ;
15379: GO 15418
// DestroyUnit ( tmp [ 1 ] ) ;
15381: LD_VAR 0 2
15385: PUSH
15386: LD_INT 1
15388: ARRAY
15389: PPUSH
15390: CALL_OW 65
// end ; 5 .. 7 :
15394: GO 15418
15396: LD_INT 5
15398: DOUBLE
15399: GREATEREQUAL
15400: IFFALSE 15408
15402: LD_INT 7
15404: DOUBLE
15405: LESSEQUAL
15406: IFTRUE 15410
15408: GO 15417
15410: POP
// StreamSibBomb ; end ;
15411: CALL 11668 0 0
15415: GO 15418
15417: POP
// end ;
15418: PPOPN 3
15420: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15421: LD_EXP 22
15425: PUSH
15426: LD_EXP 72
15430: AND
15431: IFFALSE 15587
15433: GO 15435
15435: DISABLE
15436: LD_INT 0
15438: PPUSH
15439: PPUSH
15440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15441: LD_ADDR_VAR 0 2
15445: PUSH
15446: LD_INT 81
15448: PUSH
15449: LD_OWVAR 2
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 2
15460: PUSH
15461: LD_INT 21
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 2
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PPUSH
15490: CALL_OW 69
15494: ST_TO_ADDR
// if not tmp then
15495: LD_VAR 0 2
15499: NOT
15500: IFFALSE 15504
// exit ;
15502: GO 15587
// p := 0 ;
15504: LD_ADDR_VAR 0 3
15508: PUSH
15509: LD_INT 0
15511: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15512: LD_INT 35
15514: PPUSH
15515: CALL_OW 67
// p := p + 1 ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_VAR 0 3
15528: PUSH
15529: LD_INT 1
15531: PLUS
15532: ST_TO_ADDR
// for i in tmp do
15533: LD_ADDR_VAR 0 1
15537: PUSH
15538: LD_VAR 0 2
15542: PUSH
15543: FOR_IN
15544: IFFALSE 15575
// if GetLives ( i ) < 1000 then
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 256
15555: PUSH
15556: LD_INT 1000
15558: LESS
15559: IFFALSE 15573
// SetLives ( i , 1000 ) ;
15561: LD_VAR 0 1
15565: PPUSH
15566: LD_INT 1000
15568: PPUSH
15569: CALL_OW 234
15573: GO 15543
15575: POP
15576: POP
// until p > 20 ;
15577: LD_VAR 0 3
15581: PUSH
15582: LD_INT 20
15584: GREATER
15585: IFFALSE 15512
// end ;
15587: PPOPN 3
15589: END
// every 0 0$1 trigger StreamModeActive and sTime do
15590: LD_EXP 22
15594: PUSH
15595: LD_EXP 73
15599: AND
15600: IFFALSE 15635
15602: GO 15604
15604: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15605: LD_INT 28
15607: PPUSH
15608: LD_OWVAR 2
15612: PPUSH
15613: LD_INT 2
15615: PPUSH
15616: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15620: LD_INT 30
15622: PPUSH
15623: LD_OWVAR 2
15627: PPUSH
15628: LD_INT 2
15630: PPUSH
15631: CALL_OW 322
// end ;
15635: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15636: LD_EXP 22
15640: PUSH
15641: LD_EXP 74
15645: AND
15646: IFFALSE 15767
15648: GO 15650
15650: DISABLE
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15655: LD_ADDR_VAR 0 2
15659: PUSH
15660: LD_INT 22
15662: PUSH
15663: LD_OWVAR 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 1
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 23
15687: PUSH
15688: LD_INT 0
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: PPUSH
15704: CALL_OW 69
15708: ST_TO_ADDR
// if not tmp then
15709: LD_VAR 0 2
15713: NOT
15714: IFFALSE 15718
// exit ;
15716: GO 15767
// for i in tmp do
15718: LD_ADDR_VAR 0 1
15722: PUSH
15723: LD_VAR 0 2
15727: PUSH
15728: FOR_IN
15729: IFFALSE 15765
// begin if Crawls ( i ) then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 318
15740: IFFALSE 15751
// ComWalk ( i ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: CALL_OW 138
// SetClass ( i , 2 ) ;
15751: LD_VAR 0 1
15755: PPUSH
15756: LD_INT 2
15758: PPUSH
15759: CALL_OW 336
// end ;
15763: GO 15728
15765: POP
15766: POP
// end ;
15767: PPOPN 2
15769: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15770: LD_EXP 22
15774: PUSH
15775: LD_EXP 75
15779: AND
15780: IFFALSE 16061
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
15788: PPUSH
15789: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15790: LD_OWVAR 2
15794: PPUSH
15795: LD_INT 9
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: LD_INT 1
15803: PPUSH
15804: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15808: LD_INT 9
15810: PPUSH
15811: LD_OWVAR 2
15815: PPUSH
15816: CALL_OW 343
// uc_side := 9 ;
15820: LD_ADDR_OWVAR 20
15824: PUSH
15825: LD_INT 9
15827: ST_TO_ADDR
// uc_nation := 2 ;
15828: LD_ADDR_OWVAR 21
15832: PUSH
15833: LD_INT 2
15835: ST_TO_ADDR
// hc_name := Dark Warrior ;
15836: LD_ADDR_OWVAR 26
15840: PUSH
15841: LD_STRING Dark Warrior
15843: ST_TO_ADDR
// hc_gallery :=  ;
15844: LD_ADDR_OWVAR 33
15848: PUSH
15849: LD_STRING 
15851: ST_TO_ADDR
// hc_noskilllimit := true ;
15852: LD_ADDR_OWVAR 76
15856: PUSH
15857: LD_INT 1
15859: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15860: LD_ADDR_OWVAR 31
15864: PUSH
15865: LD_INT 30
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 30
15873: PUSH
15874: LD_INT 30
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: ST_TO_ADDR
// un := CreateHuman ;
15883: LD_ADDR_VAR 0 3
15887: PUSH
15888: CALL_OW 44
15892: ST_TO_ADDR
// hc_noskilllimit := false ;
15893: LD_ADDR_OWVAR 76
15897: PUSH
15898: LD_INT 0
15900: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15901: LD_VAR 0 3
15905: PPUSH
15906: LD_INT 1
15908: PPUSH
15909: CALL_OW 51
// p := 0 ;
15913: LD_ADDR_VAR 0 2
15917: PUSH
15918: LD_INT 0
15920: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15921: LD_INT 35
15923: PPUSH
15924: CALL_OW 67
// p := p + 1 ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_VAR 0 2
15937: PUSH
15938: LD_INT 1
15940: PLUS
15941: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15942: LD_VAR 0 3
15946: PPUSH
15947: CALL_OW 256
15951: PUSH
15952: LD_INT 1000
15954: LESS
15955: IFFALSE 15969
// SetLives ( un , 1000 ) ;
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1000
15964: PPUSH
15965: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 81
15976: PUSH
15977: LD_OWVAR 2
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 91
15988: PUSH
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 30
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 69
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: CALL_OW 74
16020: PPUSH
16021: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16025: LD_VAR 0 2
16029: PUSH
16030: LD_INT 60
16032: GREATER
16033: PUSH
16034: LD_VAR 0 3
16038: PPUSH
16039: CALL_OW 301
16043: OR
16044: IFFALSE 15921
// if un then
16046: LD_VAR 0 3
16050: IFFALSE 16061
// RemoveUnit ( un ) ;
16052: LD_VAR 0 3
16056: PPUSH
16057: CALL_OW 64
// end ;
16061: PPOPN 3
16063: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16070: LD_ADDR_VAR 0 4
16074: PUSH
16075: LD_INT 22
16077: PUSH
16078: LD_OWVAR 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 1
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PPUSH
16119: CALL_OW 69
16123: ST_TO_ADDR
// if not tmp then
16124: LD_VAR 0 4
16128: NOT
16129: IFFALSE 16133
// exit ;
16131: GO 16192
// for i in tmp do
16133: LD_ADDR_VAR 0 2
16137: PUSH
16138: LD_VAR 0 4
16142: PUSH
16143: FOR_IN
16144: IFFALSE 16190
// for j = 1 to 3 do
16146: LD_ADDR_VAR 0 3
16150: PUSH
16151: DOUBLE
16152: LD_INT 1
16154: DEC
16155: ST_TO_ADDR
16156: LD_INT 3
16158: PUSH
16159: FOR_TO
16160: IFFALSE 16186
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 274
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: LD_INT 99999
16179: PPUSH
16180: CALL_OW 277
16184: GO 16159
16186: POP
16187: POP
16188: GO 16143
16190: POP
16191: POP
// end ;
16192: LD_VAR 0 1
16196: RET
// export function hHackSetLevel10 ; var i , j ; begin
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16202: LD_ADDR_VAR 0 2
16206: PUSH
16207: LD_INT 21
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PPUSH
16217: CALL_OW 69
16221: PUSH
16222: FOR_IN
16223: IFFALSE 16275
// if IsSelected ( i ) then
16225: LD_VAR 0 2
16229: PPUSH
16230: CALL_OW 306
16234: IFFALSE 16273
// begin for j := 1 to 4 do
16236: LD_ADDR_VAR 0 3
16240: PUSH
16241: DOUBLE
16242: LD_INT 1
16244: DEC
16245: ST_TO_ADDR
16246: LD_INT 4
16248: PUSH
16249: FOR_TO
16250: IFFALSE 16271
// SetSkill ( i , j , 10 ) ;
16252: LD_VAR 0 2
16256: PPUSH
16257: LD_VAR 0 3
16261: PPUSH
16262: LD_INT 10
16264: PPUSH
16265: CALL_OW 237
16269: GO 16249
16271: POP
16272: POP
// end ;
16273: GO 16222
16275: POP
16276: POP
// end ;
16277: LD_VAR 0 1
16281: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16282: LD_INT 0
16284: PPUSH
16285: PPUSH
16286: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16287: LD_ADDR_VAR 0 2
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_OWVAR 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 21
16306: PUSH
16307: LD_INT 1
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PPUSH
16318: CALL_OW 69
16322: PUSH
16323: FOR_IN
16324: IFFALSE 16365
// begin for j := 1 to 4 do
16326: LD_ADDR_VAR 0 3
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_INT 4
16338: PUSH
16339: FOR_TO
16340: IFFALSE 16361
// SetSkill ( i , j , 10 ) ;
16342: LD_VAR 0 2
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: LD_INT 10
16354: PPUSH
16355: CALL_OW 237
16359: GO 16339
16361: POP
16362: POP
// end ;
16363: GO 16323
16365: POP
16366: POP
// end ;
16367: LD_VAR 0 1
16371: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
16372: LD_INT 0
16374: PPUSH
// uc_side := your_side ;
16375: LD_ADDR_OWVAR 20
16379: PUSH
16380: LD_OWVAR 2
16384: ST_TO_ADDR
// uc_nation := nation ;
16385: LD_ADDR_OWVAR 21
16389: PUSH
16390: LD_VAR 0 1
16394: ST_TO_ADDR
// InitHc ;
16395: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16399: LD_INT 0
16401: PPUSH
16402: LD_VAR 0 2
16406: PPUSH
16407: LD_VAR 0 3
16411: PPUSH
16412: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16416: CALL_OW 44
16420: PPUSH
16421: LD_INT 1
16423: PPUSH
16424: CALL_OW 51
// end ;
16428: LD_VAR 0 4
16432: RET
// export function hHackSpawnVehicle ; begin
16433: LD_INT 0
16435: PPUSH
// uc_side := your_side ;
16436: LD_ADDR_OWVAR 20
16440: PUSH
16441: LD_OWVAR 2
16445: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
16446: LD_ADDR_OWVAR 21
16450: PUSH
16451: LD_INT 1
16453: PPUSH
16454: LD_INT 3
16456: PPUSH
16457: CALL_OW 12
16461: ST_TO_ADDR
// InitVc ;
16462: CALL_OW 20
// case uc_nation of 1 :
16466: LD_OWVAR 21
16470: PUSH
16471: LD_INT 1
16473: DOUBLE
16474: EQUAL
16475: IFTRUE 16479
16477: GO 16623
16479: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
16480: LD_ADDR_OWVAR 37
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 3
16493: PUSH
16494: LD_INT 4
16496: PUSH
16497: LD_INT 5
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 1
16509: PPUSH
16510: LD_INT 5
16512: PPUSH
16513: CALL_OW 12
16517: ARRAY
16518: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16519: LD_ADDR_OWVAR 39
16523: PUSH
16524: LD_INT 1
16526: PPUSH
16527: LD_INT 3
16529: PPUSH
16530: CALL_OW 12
16534: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
16535: LD_ADDR_OWVAR 38
16539: PUSH
16540: LD_INT 1
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: LD_INT 3
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: CALL_OW 12
16564: ARRAY
16565: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
16566: LD_ADDR_OWVAR 40
16570: PUSH
16571: LD_INT 2
16573: PUSH
16574: LD_INT 4
16576: PUSH
16577: LD_INT 5
16579: PUSH
16580: LD_INT 3
16582: PUSH
16583: LD_INT 7
16585: PUSH
16586: LD_INT 8
16588: PUSH
16589: LD_INT 9
16591: PUSH
16592: LD_INT 10
16594: PUSH
16595: LD_INT 6
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 1
16611: PPUSH
16612: LD_INT 9
16614: PPUSH
16615: CALL_OW 12
16619: ARRAY
16620: ST_TO_ADDR
// end ; 2 :
16621: GO 16888
16623: LD_INT 2
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 16755
16631: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16632: LD_ADDR_OWVAR 37
16636: PUSH
16637: LD_INT 11
16639: PUSH
16640: LD_INT 12
16642: PUSH
16643: LD_INT 13
16645: PUSH
16646: LD_INT 14
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 1
16657: PPUSH
16658: LD_INT 4
16660: PPUSH
16661: CALL_OW 12
16665: ARRAY
16666: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16667: LD_ADDR_OWVAR 39
16671: PUSH
16672: LD_INT 1
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: CALL_OW 12
16682: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
16683: LD_ADDR_OWVAR 38
16687: PUSH
16688: LD_INT 1
16690: PUSH
16691: LD_INT 2
16693: PUSH
16694: LD_INT 5
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 1
16704: PPUSH
16705: LD_INT 3
16707: PPUSH
16708: CALL_OW 12
16712: ARRAY
16713: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
16714: LD_ADDR_OWVAR 40
16718: PUSH
16719: LD_INT 24
16721: PUSH
16722: LD_INT 26
16724: PUSH
16725: LD_INT 27
16727: PUSH
16728: LD_INT 28
16730: PUSH
16731: LD_INT 29
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 1
16743: PPUSH
16744: LD_INT 5
16746: PPUSH
16747: CALL_OW 12
16751: ARRAY
16752: ST_TO_ADDR
// end ; 3 :
16753: GO 16888
16755: LD_INT 3
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16887
16763: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
16764: LD_ADDR_OWVAR 37
16768: PUSH
16769: LD_INT 21
16771: PUSH
16772: LD_INT 23
16774: PUSH
16775: LD_INT 22
16777: PUSH
16778: LD_INT 24
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 1
16789: PPUSH
16790: LD_INT 4
16792: PPUSH
16793: CALL_OW 12
16797: ARRAY
16798: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16799: LD_ADDR_OWVAR 39
16803: PUSH
16804: LD_INT 1
16806: PPUSH
16807: LD_INT 3
16809: PPUSH
16810: CALL_OW 12
16814: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
16815: LD_ADDR_OWVAR 38
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_INT 2
16835: PPUSH
16836: CALL_OW 12
16840: ARRAY
16841: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
16842: LD_ADDR_OWVAR 40
16846: PUSH
16847: LD_INT 42
16849: PUSH
16850: LD_INT 43
16852: PUSH
16853: LD_INT 44
16855: PUSH
16856: LD_INT 46
16858: PUSH
16859: LD_INT 48
16861: PUSH
16862: LD_INT 47
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 1
16875: PPUSH
16876: LD_INT 6
16878: PPUSH
16879: CALL_OW 12
16883: ARRAY
16884: ST_TO_ADDR
// end ; end ;
16885: GO 16888
16887: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16888: CALL_OW 45
16892: PPUSH
16893: LD_INT 1
16895: PPUSH
16896: CALL_OW 51
// end ;
16900: LD_VAR 0 1
16904: RET
// export hInvincible ; every 1 do
16905: GO 16907
16907: DISABLE
// hInvincible := [ ] ;
16908: LD_ADDR_EXP 76
16912: PUSH
16913: EMPTY
16914: ST_TO_ADDR
16915: END
// every 10 do var i ;
16916: GO 16918
16918: DISABLE
16919: LD_INT 0
16921: PPUSH
// begin enable ;
16922: ENABLE
// if not hInvincible then
16923: LD_EXP 76
16927: NOT
16928: IFFALSE 16932
// exit ;
16930: GO 16976
// for i in hInvincible do
16932: LD_ADDR_VAR 0 1
16936: PUSH
16937: LD_EXP 76
16941: PUSH
16942: FOR_IN
16943: IFFALSE 16974
// if GetLives ( i ) < 1000 then
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 256
16954: PUSH
16955: LD_INT 1000
16957: LESS
16958: IFFALSE 16972
// SetLives ( i , 1000 ) ;
16960: LD_VAR 0 1
16964: PPUSH
16965: LD_INT 1000
16967: PPUSH
16968: CALL_OW 234
16972: GO 16942
16974: POP
16975: POP
// end ;
16976: PPOPN 1
16978: END
// export function hHackInvincible ; var i ; begin
16979: LD_INT 0
16981: PPUSH
16982: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16983: LD_ADDR_VAR 0 2
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 21
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: PPUSH
17016: CALL_OW 69
17020: PUSH
17021: FOR_IN
17022: IFFALSE 17083
// if IsSelected ( i ) then
17024: LD_VAR 0 2
17028: PPUSH
17029: CALL_OW 306
17033: IFFALSE 17081
// begin if i in hInvincible then
17035: LD_VAR 0 2
17039: PUSH
17040: LD_EXP 76
17044: IN
17045: IFFALSE 17065
// hInvincible := hInvincible diff i else
17047: LD_ADDR_EXP 76
17051: PUSH
17052: LD_EXP 76
17056: PUSH
17057: LD_VAR 0 2
17061: DIFF
17062: ST_TO_ADDR
17063: GO 17081
// hInvincible := hInvincible union i ;
17065: LD_ADDR_EXP 76
17069: PUSH
17070: LD_EXP 76
17074: PUSH
17075: LD_VAR 0 2
17079: UNION
17080: ST_TO_ADDR
// end ;
17081: GO 17021
17083: POP
17084: POP
// end ;
17085: LD_VAR 0 1
17089: RET
// export function hHackInvisible ; var i , j ; begin
17090: LD_INT 0
17092: PPUSH
17093: PPUSH
17094: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17095: LD_ADDR_VAR 0 2
17099: PUSH
17100: LD_INT 21
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PUSH
17115: FOR_IN
17116: IFFALSE 17140
// if IsSelected ( i ) then
17118: LD_VAR 0 2
17122: PPUSH
17123: CALL_OW 306
17127: IFFALSE 17138
// ComForceInvisible ( i ) ;
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 496
17138: GO 17115
17140: POP
17141: POP
// end ;
17142: LD_VAR 0 1
17146: RET
// export function hHackChangeYourSide ; begin
17147: LD_INT 0
17149: PPUSH
// if your_side = 8 then
17150: LD_OWVAR 2
17154: PUSH
17155: LD_INT 8
17157: EQUAL
17158: IFFALSE 17170
// your_side := 0 else
17160: LD_ADDR_OWVAR 2
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
17168: GO 17184
// your_side := your_side + 1 ;
17170: LD_ADDR_OWVAR 2
17174: PUSH
17175: LD_OWVAR 2
17179: PUSH
17180: LD_INT 1
17182: PLUS
17183: ST_TO_ADDR
// end ;
17184: LD_VAR 0 1
17188: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17189: LD_INT 0
17191: PPUSH
17192: PPUSH
17193: PPUSH
// for i in all_units do
17194: LD_ADDR_VAR 0 2
17198: PUSH
17199: LD_OWVAR 3
17203: PUSH
17204: FOR_IN
17205: IFFALSE 17283
// if IsSelected ( i ) then
17207: LD_VAR 0 2
17211: PPUSH
17212: CALL_OW 306
17216: IFFALSE 17281
// begin j := GetSide ( i ) ;
17218: LD_ADDR_VAR 0 3
17222: PUSH
17223: LD_VAR 0 2
17227: PPUSH
17228: CALL_OW 255
17232: ST_TO_ADDR
// if j = 8 then
17233: LD_VAR 0 3
17237: PUSH
17238: LD_INT 8
17240: EQUAL
17241: IFFALSE 17253
// j := 0 else
17243: LD_ADDR_VAR 0 3
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
17251: GO 17267
// j := j + 1 ;
17253: LD_ADDR_VAR 0 3
17257: PUSH
17258: LD_VAR 0 3
17262: PUSH
17263: LD_INT 1
17265: PLUS
17266: ST_TO_ADDR
// SetSide ( i , j ) ;
17267: LD_VAR 0 2
17271: PPUSH
17272: LD_VAR 0 3
17276: PPUSH
17277: CALL_OW 235
// end ;
17281: GO 17204
17283: POP
17284: POP
// end ;
17285: LD_VAR 0 1
17289: RET
// export function hHackFog ; begin
17290: LD_INT 0
17292: PPUSH
// FogOff ( true ) ;
17293: LD_INT 1
17295: PPUSH
17296: CALL_OW 344
// end ;
17300: LD_VAR 0 1
17304: RET
// export function hHackApeman ; begin
17305: LD_INT 0
17307: PPUSH
// uc_side := your_side ;
17308: LD_ADDR_OWVAR 20
17312: PUSH
17313: LD_OWVAR 2
17317: ST_TO_ADDR
// uc_nation := 0 ;
17318: LD_ADDR_OWVAR 21
17322: PUSH
17323: LD_INT 0
17325: ST_TO_ADDR
// hc_name :=  ;
17326: LD_ADDR_OWVAR 26
17330: PUSH
17331: LD_STRING 
17333: ST_TO_ADDR
// hc_gallery :=  ;
17334: LD_ADDR_OWVAR 33
17338: PUSH
17339: LD_STRING 
17341: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17342: LD_ADDR_OWVAR 31
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: ST_TO_ADDR
// hc_class := class_apeman ;
17365: LD_ADDR_OWVAR 28
17369: PUSH
17370: LD_INT 12
17372: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17373: CALL_OW 44
17377: PPUSH
17378: LD_INT 1
17380: PPUSH
17381: CALL_OW 51
// end ;
17385: LD_VAR 0 1
17389: RET
// export function hHackBoom ; begin
17390: LD_INT 0
17392: PPUSH
// uc_side := your_side ;
17393: LD_ADDR_OWVAR 20
17397: PUSH
17398: LD_OWVAR 2
17402: ST_TO_ADDR
// uc_nation := 1 ;
17403: LD_ADDR_OWVAR 21
17407: PUSH
17408: LD_INT 1
17410: ST_TO_ADDR
// vc_chassis := us_morphling ;
17411: LD_ADDR_OWVAR 37
17415: PUSH
17416: LD_INT 5
17418: ST_TO_ADDR
// vc_engine := engine_siberite ;
17419: LD_ADDR_OWVAR 39
17423: PUSH
17424: LD_INT 3
17426: ST_TO_ADDR
// vc_control := control_computer ;
17427: LD_ADDR_OWVAR 38
17431: PUSH
17432: LD_INT 3
17434: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17435: LD_ADDR_OWVAR 40
17439: PUSH
17440: LD_INT 8
17442: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17443: CALL_OW 45
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 51
// end ; end_of_file
17455: LD_VAR 0 1
17459: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17460: LD_INT 0
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 264
17475: PUSH
17476: LD_EXP 11
17480: EQUAL
17481: IFFALSE 17553
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17483: LD_INT 68
17485: PPUSH
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 255
17495: PPUSH
17496: CALL_OW 321
17500: PUSH
17501: LD_INT 2
17503: EQUAL
17504: IFFALSE 17516
// eff := 70 else
17506: LD_ADDR_VAR 0 4
17510: PUSH
17511: LD_INT 70
17513: ST_TO_ADDR
17514: GO 17524
// eff := 30 ;
17516: LD_ADDR_VAR 0 4
17520: PUSH
17521: LD_INT 30
17523: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17524: LD_VAR 0 1
17528: PPUSH
17529: CALL_OW 250
17533: PPUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 251
17543: PPUSH
17544: LD_VAR 0 4
17548: PPUSH
17549: CALL_OW 495
// end ; end ;
17553: LD_VAR 0 2
17557: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17558: LD_INT 0
17560: PPUSH
// end ;
17561: LD_VAR 0 4
17565: RET
// export function SOS_Command ( cmd ) ; begin
17566: LD_INT 0
17568: PPUSH
// end ;
17569: LD_VAR 0 2
17573: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17574: LD_VAR 0 1
17578: PUSH
17579: LD_INT 254
17581: EQUAL
17582: PUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: CALL_OW 264
17592: PUSH
17593: LD_EXP 9
17597: EQUAL
17598: AND
17599: PUSH
17600: LD_VAR 0 3
17604: PPUSH
17605: CALL_OW 263
17609: PUSH
17610: LD_INT 3
17612: EQUAL
17613: AND
17614: IFFALSE 17630
// HackDestroyVehicle ( unit , selectedUnit ) ;
17616: LD_VAR 0 2
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: CALL 19137 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17630: LD_VAR 0 1
17634: PUSH
17635: LD_INT 255
17637: EQUAL
17638: PUSH
17639: LD_VAR 0 2
17643: PPUSH
17644: CALL_OW 264
17648: PUSH
17649: LD_INT 14
17651: PUSH
17652: LD_INT 53
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: IN
17659: AND
17660: PUSH
17661: LD_VAR 0 4
17665: PPUSH
17666: LD_VAR 0 5
17670: PPUSH
17671: CALL_OW 488
17675: AND
17676: IFFALSE 17700
// CutTreeXYR ( unit , x , y , 12 ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: LD_VAR 0 4
17687: PPUSH
17688: LD_VAR 0 5
17692: PPUSH
17693: LD_INT 12
17695: PPUSH
17696: CALL 17703 0 4
// end ;
17700: PPOPN 5
17702: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17703: LD_INT 0
17705: PPUSH
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17714: LD_VAR 0 1
17718: NOT
17719: PUSH
17720: LD_VAR 0 2
17724: PPUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: CALL_OW 488
17734: NOT
17735: OR
17736: PUSH
17737: LD_VAR 0 4
17741: NOT
17742: OR
17743: IFFALSE 17747
// exit ;
17745: GO 18087
// list := [ ] ;
17747: LD_ADDR_VAR 0 13
17751: PUSH
17752: EMPTY
17753: ST_TO_ADDR
// if x - r < 0 then
17754: LD_VAR 0 2
17758: PUSH
17759: LD_VAR 0 4
17763: MINUS
17764: PUSH
17765: LD_INT 0
17767: LESS
17768: IFFALSE 17780
// min_x := 0 else
17770: LD_ADDR_VAR 0 7
17774: PUSH
17775: LD_INT 0
17777: ST_TO_ADDR
17778: GO 17796
// min_x := x - r ;
17780: LD_ADDR_VAR 0 7
17784: PUSH
17785: LD_VAR 0 2
17789: PUSH
17790: LD_VAR 0 4
17794: MINUS
17795: ST_TO_ADDR
// if y - r < 0 then
17796: LD_VAR 0 3
17800: PUSH
17801: LD_VAR 0 4
17805: MINUS
17806: PUSH
17807: LD_INT 0
17809: LESS
17810: IFFALSE 17822
// min_y := 0 else
17812: LD_ADDR_VAR 0 8
17816: PUSH
17817: LD_INT 0
17819: ST_TO_ADDR
17820: GO 17838
// min_y := y - r ;
17822: LD_ADDR_VAR 0 8
17826: PUSH
17827: LD_VAR 0 3
17831: PUSH
17832: LD_VAR 0 4
17836: MINUS
17837: ST_TO_ADDR
// max_x := x + r ;
17838: LD_ADDR_VAR 0 9
17842: PUSH
17843: LD_VAR 0 2
17847: PUSH
17848: LD_VAR 0 4
17852: PLUS
17853: ST_TO_ADDR
// max_y := y + r ;
17854: LD_ADDR_VAR 0 10
17858: PUSH
17859: LD_VAR 0 3
17863: PUSH
17864: LD_VAR 0 4
17868: PLUS
17869: ST_TO_ADDR
// for _x = min_x to max_x do
17870: LD_ADDR_VAR 0 11
17874: PUSH
17875: DOUBLE
17876: LD_VAR 0 7
17880: DEC
17881: ST_TO_ADDR
17882: LD_VAR 0 9
17886: PUSH
17887: FOR_TO
17888: IFFALSE 18005
// for _y = min_y to max_y do
17890: LD_ADDR_VAR 0 12
17894: PUSH
17895: DOUBLE
17896: LD_VAR 0 8
17900: DEC
17901: ST_TO_ADDR
17902: LD_VAR 0 10
17906: PUSH
17907: FOR_TO
17908: IFFALSE 18001
// begin if not ValidHex ( _x , _y ) then
17910: LD_VAR 0 11
17914: PPUSH
17915: LD_VAR 0 12
17919: PPUSH
17920: CALL_OW 488
17924: NOT
17925: IFFALSE 17929
// continue ;
17927: GO 17907
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17929: LD_VAR 0 11
17933: PPUSH
17934: LD_VAR 0 12
17938: PPUSH
17939: CALL_OW 351
17943: PUSH
17944: LD_VAR 0 11
17948: PPUSH
17949: LD_VAR 0 12
17953: PPUSH
17954: CALL_OW 554
17958: AND
17959: IFFALSE 17999
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17961: LD_ADDR_VAR 0 13
17965: PUSH
17966: LD_VAR 0 13
17970: PPUSH
17971: LD_VAR 0 13
17975: PUSH
17976: LD_INT 1
17978: PLUS
17979: PPUSH
17980: LD_VAR 0 11
17984: PUSH
17985: LD_VAR 0 12
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PPUSH
17994: CALL_OW 2
17998: ST_TO_ADDR
// end ;
17999: GO 17907
18001: POP
18002: POP
18003: GO 17887
18005: POP
18006: POP
// if not list then
18007: LD_VAR 0 13
18011: NOT
18012: IFFALSE 18016
// exit ;
18014: GO 18087
// for i in list do
18016: LD_ADDR_VAR 0 6
18020: PUSH
18021: LD_VAR 0 13
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18085
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18029: LD_VAR 0 1
18033: PPUSH
18034: LD_STRING M
18036: PUSH
18037: LD_VAR 0 6
18041: PUSH
18042: LD_INT 1
18044: ARRAY
18045: PUSH
18046: LD_VAR 0 6
18050: PUSH
18051: LD_INT 2
18053: ARRAY
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: LD_INT 0
18060: PUSH
18061: LD_INT 0
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: PPUSH
18079: CALL_OW 447
18083: GO 18026
18085: POP
18086: POP
// end ;
18087: LD_VAR 0 5
18091: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18092: LD_EXP 77
18096: NOT
18097: IFFALSE 18147
18099: GO 18101
18101: DISABLE
// begin initHack := true ;
18102: LD_ADDR_EXP 77
18106: PUSH
18107: LD_INT 1
18109: ST_TO_ADDR
// hackTanks := [ ] ;
18110: LD_ADDR_EXP 78
18114: PUSH
18115: EMPTY
18116: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18117: LD_ADDR_EXP 79
18121: PUSH
18122: EMPTY
18123: ST_TO_ADDR
// hackLimit := 3 ;
18124: LD_ADDR_EXP 80
18128: PUSH
18129: LD_INT 3
18131: ST_TO_ADDR
// hackDist := 12 ;
18132: LD_ADDR_EXP 81
18136: PUSH
18137: LD_INT 12
18139: ST_TO_ADDR
// hackCounter := [ ] ;
18140: LD_ADDR_EXP 82
18144: PUSH
18145: EMPTY
18146: ST_TO_ADDR
// end ;
18147: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18148: LD_EXP 77
18152: PUSH
18153: LD_INT 34
18155: PUSH
18156: LD_EXP 9
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: AND
18170: IFFALSE 18425
18172: GO 18174
18174: DISABLE
18175: LD_INT 0
18177: PPUSH
18178: PPUSH
// begin enable ;
18179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18180: LD_ADDR_VAR 0 1
18184: PUSH
18185: LD_INT 34
18187: PUSH
18188: LD_EXP 9
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PUSH
18202: FOR_IN
18203: IFFALSE 18423
// begin if not i in hackTanks then
18205: LD_VAR 0 1
18209: PUSH
18210: LD_EXP 78
18214: IN
18215: NOT
18216: IFFALSE 18299
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18218: LD_ADDR_EXP 78
18222: PUSH
18223: LD_EXP 78
18227: PPUSH
18228: LD_EXP 78
18232: PUSH
18233: LD_INT 1
18235: PLUS
18236: PPUSH
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 1
18246: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18247: LD_ADDR_EXP 79
18251: PUSH
18252: LD_EXP 79
18256: PPUSH
18257: LD_EXP 79
18261: PUSH
18262: LD_INT 1
18264: PLUS
18265: PPUSH
18266: EMPTY
18267: PPUSH
18268: CALL_OW 1
18272: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18273: LD_ADDR_EXP 82
18277: PUSH
18278: LD_EXP 82
18282: PPUSH
18283: LD_EXP 82
18287: PUSH
18288: LD_INT 1
18290: PLUS
18291: PPUSH
18292: EMPTY
18293: PPUSH
18294: CALL_OW 1
18298: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18299: LD_VAR 0 1
18303: PPUSH
18304: CALL_OW 302
18308: NOT
18309: IFFALSE 18322
// begin HackUnlinkAll ( i ) ;
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL 18428 0 1
// continue ;
18320: GO 18202
// end ; HackCheckCapturedStatus ( i ) ;
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL 18871 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18331: LD_ADDR_VAR 0 2
18335: PUSH
18336: LD_INT 81
18338: PUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 255
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 33
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 91
18365: PUSH
18366: LD_VAR 0 1
18370: PUSH
18371: LD_EXP 81
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 50
18383: PUSH
18384: EMPTY
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 69
18397: ST_TO_ADDR
// if not tmp then
18398: LD_VAR 0 2
18402: NOT
18403: IFFALSE 18407
// continue ;
18405: GO 18202
// HackLink ( i , tmp ) ;
18407: LD_VAR 0 1
18411: PPUSH
18412: LD_VAR 0 2
18416: PPUSH
18417: CALL 18564 0 2
// end ;
18421: GO 18202
18423: POP
18424: POP
// end ;
18425: PPOPN 2
18427: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18428: LD_INT 0
18430: PPUSH
18431: PPUSH
18432: PPUSH
// if not hack in hackTanks then
18433: LD_VAR 0 1
18437: PUSH
18438: LD_EXP 78
18442: IN
18443: NOT
18444: IFFALSE 18448
// exit ;
18446: GO 18559
// index := GetElementIndex ( hackTanks , hack ) ;
18448: LD_ADDR_VAR 0 4
18452: PUSH
18453: LD_EXP 78
18457: PPUSH
18458: LD_VAR 0 1
18462: PPUSH
18463: CALL 23979 0 2
18467: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18468: LD_EXP 79
18472: PUSH
18473: LD_VAR 0 4
18477: ARRAY
18478: IFFALSE 18559
// begin for i in hackTanksCaptured [ index ] do
18480: LD_ADDR_VAR 0 3
18484: PUSH
18485: LD_EXP 79
18489: PUSH
18490: LD_VAR 0 4
18494: ARRAY
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18523
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18499: LD_VAR 0 3
18503: PUSH
18504: LD_INT 1
18506: ARRAY
18507: PPUSH
18508: LD_VAR 0 3
18512: PUSH
18513: LD_INT 2
18515: ARRAY
18516: PPUSH
18517: CALL_OW 235
18521: GO 18496
18523: POP
18524: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18525: LD_ADDR_EXP 79
18529: PUSH
18530: LD_EXP 79
18534: PPUSH
18535: LD_VAR 0 4
18539: PPUSH
18540: EMPTY
18541: PPUSH
18542: CALL_OW 1
18546: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18547: LD_VAR 0 1
18551: PPUSH
18552: LD_INT 0
18554: PPUSH
18555: CALL_OW 505
// end ; end ;
18559: LD_VAR 0 2
18563: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18564: LD_INT 0
18566: PPUSH
18567: PPUSH
18568: PPUSH
// if not hack in hackTanks or not vehicles then
18569: LD_VAR 0 1
18573: PUSH
18574: LD_EXP 78
18578: IN
18579: NOT
18580: PUSH
18581: LD_VAR 0 2
18585: NOT
18586: OR
18587: IFFALSE 18591
// exit ;
18589: GO 18866
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18591: LD_ADDR_VAR 0 2
18595: PUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_VAR 0 2
18605: PPUSH
18606: LD_INT 1
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: CALL 24629 0 4
18616: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18617: LD_ADDR_VAR 0 5
18621: PUSH
18622: LD_EXP 78
18626: PPUSH
18627: LD_VAR 0 1
18631: PPUSH
18632: CALL 23979 0 2
18636: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18637: LD_EXP 79
18641: PUSH
18642: LD_VAR 0 5
18646: ARRAY
18647: PUSH
18648: LD_EXP 80
18652: LESS
18653: IFFALSE 18842
// begin for i := 1 to vehicles do
18655: LD_ADDR_VAR 0 4
18659: PUSH
18660: DOUBLE
18661: LD_INT 1
18663: DEC
18664: ST_TO_ADDR
18665: LD_VAR 0 2
18669: PUSH
18670: FOR_TO
18671: IFFALSE 18840
// begin if hackTanksCaptured [ index ] = hackLimit then
18673: LD_EXP 79
18677: PUSH
18678: LD_VAR 0 5
18682: ARRAY
18683: PUSH
18684: LD_EXP 80
18688: EQUAL
18689: IFFALSE 18693
// break ;
18691: GO 18840
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18693: LD_ADDR_EXP 82
18697: PUSH
18698: LD_EXP 82
18702: PPUSH
18703: LD_VAR 0 5
18707: PPUSH
18708: LD_EXP 82
18712: PUSH
18713: LD_VAR 0 5
18717: ARRAY
18718: PUSH
18719: LD_INT 1
18721: PLUS
18722: PPUSH
18723: CALL_OW 1
18727: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18728: LD_ADDR_EXP 79
18732: PUSH
18733: LD_EXP 79
18737: PPUSH
18738: LD_VAR 0 5
18742: PUSH
18743: LD_EXP 79
18747: PUSH
18748: LD_VAR 0 5
18752: ARRAY
18753: PUSH
18754: LD_INT 1
18756: PLUS
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: LD_VAR 0 2
18766: PUSH
18767: LD_VAR 0 4
18771: ARRAY
18772: PUSH
18773: LD_VAR 0 2
18777: PUSH
18778: LD_VAR 0 4
18782: ARRAY
18783: PPUSH
18784: CALL_OW 255
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PPUSH
18793: CALL 24194 0 3
18797: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18798: LD_VAR 0 2
18802: PUSH
18803: LD_VAR 0 4
18807: ARRAY
18808: PPUSH
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL_OW 255
18818: PPUSH
18819: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18823: LD_VAR 0 2
18827: PUSH
18828: LD_VAR 0 4
18832: ARRAY
18833: PPUSH
18834: CALL_OW 141
// end ;
18838: GO 18670
18840: POP
18841: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18842: LD_VAR 0 1
18846: PPUSH
18847: LD_EXP 79
18851: PUSH
18852: LD_VAR 0 5
18856: ARRAY
18857: PUSH
18858: LD_INT 0
18860: PLUS
18861: PPUSH
18862: CALL_OW 505
// end ;
18866: LD_VAR 0 3
18870: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18871: LD_INT 0
18873: PPUSH
18874: PPUSH
18875: PPUSH
18876: PPUSH
// if not hack in hackTanks then
18877: LD_VAR 0 1
18881: PUSH
18882: LD_EXP 78
18886: IN
18887: NOT
18888: IFFALSE 18892
// exit ;
18890: GO 19132
// index := GetElementIndex ( hackTanks , hack ) ;
18892: LD_ADDR_VAR 0 4
18896: PUSH
18897: LD_EXP 78
18901: PPUSH
18902: LD_VAR 0 1
18906: PPUSH
18907: CALL 23979 0 2
18911: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: DOUBLE
18918: LD_EXP 79
18922: PUSH
18923: LD_VAR 0 4
18927: ARRAY
18928: INC
18929: ST_TO_ADDR
18930: LD_INT 1
18932: PUSH
18933: FOR_DOWNTO
18934: IFFALSE 19106
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18936: LD_ADDR_VAR 0 5
18940: PUSH
18941: LD_EXP 79
18945: PUSH
18946: LD_VAR 0 4
18950: ARRAY
18951: PUSH
18952: LD_VAR 0 3
18956: ARRAY
18957: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18958: LD_VAR 0 5
18962: PUSH
18963: LD_INT 1
18965: ARRAY
18966: PPUSH
18967: CALL_OW 302
18971: NOT
18972: PUSH
18973: LD_VAR 0 5
18977: PUSH
18978: LD_INT 1
18980: ARRAY
18981: PPUSH
18982: CALL_OW 255
18986: PUSH
18987: LD_VAR 0 1
18991: PPUSH
18992: CALL_OW 255
18996: NONEQUAL
18997: OR
18998: IFFALSE 19104
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19000: LD_VAR 0 5
19004: PUSH
19005: LD_INT 1
19007: ARRAY
19008: PPUSH
19009: CALL_OW 305
19013: PUSH
19014: LD_VAR 0 5
19018: PUSH
19019: LD_INT 1
19021: ARRAY
19022: PPUSH
19023: CALL_OW 255
19027: PUSH
19028: LD_VAR 0 1
19032: PPUSH
19033: CALL_OW 255
19037: EQUAL
19038: AND
19039: IFFALSE 19063
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19041: LD_VAR 0 5
19045: PUSH
19046: LD_INT 1
19048: ARRAY
19049: PPUSH
19050: LD_VAR 0 5
19054: PUSH
19055: LD_INT 2
19057: ARRAY
19058: PPUSH
19059: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19063: LD_ADDR_EXP 79
19067: PUSH
19068: LD_EXP 79
19072: PPUSH
19073: LD_VAR 0 4
19077: PPUSH
19078: LD_EXP 79
19082: PUSH
19083: LD_VAR 0 4
19087: ARRAY
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: CALL_OW 3
19098: PPUSH
19099: CALL_OW 1
19103: ST_TO_ADDR
// end ; end ;
19104: GO 18933
19106: POP
19107: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19108: LD_VAR 0 1
19112: PPUSH
19113: LD_EXP 79
19117: PUSH
19118: LD_VAR 0 4
19122: ARRAY
19123: PUSH
19124: LD_INT 0
19126: PLUS
19127: PPUSH
19128: CALL_OW 505
// end ;
19132: LD_VAR 0 2
19136: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19137: LD_INT 0
19139: PPUSH
19140: PPUSH
19141: PPUSH
19142: PPUSH
// if not hack in hackTanks then
19143: LD_VAR 0 1
19147: PUSH
19148: LD_EXP 78
19152: IN
19153: NOT
19154: IFFALSE 19158
// exit ;
19156: GO 19243
// index := GetElementIndex ( hackTanks , hack ) ;
19158: LD_ADDR_VAR 0 5
19162: PUSH
19163: LD_EXP 78
19167: PPUSH
19168: LD_VAR 0 1
19172: PPUSH
19173: CALL 23979 0 2
19177: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19178: LD_ADDR_VAR 0 4
19182: PUSH
19183: DOUBLE
19184: LD_INT 1
19186: DEC
19187: ST_TO_ADDR
19188: LD_EXP 79
19192: PUSH
19193: LD_VAR 0 5
19197: ARRAY
19198: PUSH
19199: FOR_TO
19200: IFFALSE 19241
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19202: LD_EXP 79
19206: PUSH
19207: LD_VAR 0 5
19211: ARRAY
19212: PUSH
19213: LD_VAR 0 4
19217: ARRAY
19218: PUSH
19219: LD_INT 1
19221: ARRAY
19222: PUSH
19223: LD_VAR 0 2
19227: EQUAL
19228: IFFALSE 19239
// KillUnit ( vehicle ) ;
19230: LD_VAR 0 2
19234: PPUSH
19235: CALL_OW 66
19239: GO 19199
19241: POP
19242: POP
// end ; end_of_file
19243: LD_VAR 0 3
19247: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
// if exist_mode then
19252: LD_VAR 0 2
19256: IFFALSE 19281
// unit := CreateCharacter ( prefix & ident ) else
19258: LD_ADDR_VAR 0 5
19262: PUSH
19263: LD_VAR 0 3
19267: PUSH
19268: LD_VAR 0 1
19272: STR
19273: PPUSH
19274: CALL_OW 34
19278: ST_TO_ADDR
19279: GO 19296
// unit := NewCharacter ( ident ) ;
19281: LD_ADDR_VAR 0 5
19285: PUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL_OW 25
19295: ST_TO_ADDR
// result := unit ;
19296: LD_ADDR_VAR 0 4
19300: PUSH
19301: LD_VAR 0 5
19305: ST_TO_ADDR
// end ;
19306: LD_VAR 0 4
19310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19311: LD_INT 0
19313: PPUSH
19314: PPUSH
// if not side or not nation then
19315: LD_VAR 0 1
19319: NOT
19320: PUSH
19321: LD_VAR 0 2
19325: NOT
19326: OR
19327: IFFALSE 19331
// exit ;
19329: GO 20095
// case nation of nation_american :
19331: LD_VAR 0 2
19335: PUSH
19336: LD_INT 1
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19558
19344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19345: LD_ADDR_VAR 0 4
19349: PUSH
19350: LD_INT 35
19352: PUSH
19353: LD_INT 45
19355: PUSH
19356: LD_INT 46
19358: PUSH
19359: LD_INT 47
19361: PUSH
19362: LD_INT 82
19364: PUSH
19365: LD_INT 83
19367: PUSH
19368: LD_INT 84
19370: PUSH
19371: LD_INT 85
19373: PUSH
19374: LD_INT 86
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: LD_INT 6
19385: PUSH
19386: LD_INT 15
19388: PUSH
19389: LD_INT 16
19391: PUSH
19392: LD_INT 7
19394: PUSH
19395: LD_INT 12
19397: PUSH
19398: LD_INT 13
19400: PUSH
19401: LD_INT 10
19403: PUSH
19404: LD_INT 14
19406: PUSH
19407: LD_INT 20
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 22
19415: PUSH
19416: LD_INT 25
19418: PUSH
19419: LD_INT 32
19421: PUSH
19422: LD_INT 27
19424: PUSH
19425: LD_INT 36
19427: PUSH
19428: LD_INT 69
19430: PUSH
19431: LD_INT 39
19433: PUSH
19434: LD_INT 34
19436: PUSH
19437: LD_INT 40
19439: PUSH
19440: LD_INT 48
19442: PUSH
19443: LD_INT 49
19445: PUSH
19446: LD_INT 50
19448: PUSH
19449: LD_INT 51
19451: PUSH
19452: LD_INT 52
19454: PUSH
19455: LD_INT 53
19457: PUSH
19458: LD_INT 54
19460: PUSH
19461: LD_INT 55
19463: PUSH
19464: LD_INT 56
19466: PUSH
19467: LD_INT 57
19469: PUSH
19470: LD_INT 58
19472: PUSH
19473: LD_INT 59
19475: PUSH
19476: LD_INT 60
19478: PUSH
19479: LD_INT 61
19481: PUSH
19482: LD_INT 62
19484: PUSH
19485: LD_INT 80
19487: PUSH
19488: LD_INT 82
19490: PUSH
19491: LD_INT 83
19493: PUSH
19494: LD_INT 84
19496: PUSH
19497: LD_INT 85
19499: PUSH
19500: LD_INT 86
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: ST_TO_ADDR
19556: GO 20019
19558: LD_INT 2
19560: DOUBLE
19561: EQUAL
19562: IFTRUE 19566
19564: GO 19788
19566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19567: LD_ADDR_VAR 0 4
19571: PUSH
19572: LD_INT 35
19574: PUSH
19575: LD_INT 45
19577: PUSH
19578: LD_INT 46
19580: PUSH
19581: LD_INT 47
19583: PUSH
19584: LD_INT 82
19586: PUSH
19587: LD_INT 83
19589: PUSH
19590: LD_INT 84
19592: PUSH
19593: LD_INT 85
19595: PUSH
19596: LD_INT 87
19598: PUSH
19599: LD_INT 70
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 11
19607: PUSH
19608: LD_INT 3
19610: PUSH
19611: LD_INT 4
19613: PUSH
19614: LD_INT 5
19616: PUSH
19617: LD_INT 6
19619: PUSH
19620: LD_INT 15
19622: PUSH
19623: LD_INT 18
19625: PUSH
19626: LD_INT 7
19628: PUSH
19629: LD_INT 17
19631: PUSH
19632: LD_INT 8
19634: PUSH
19635: LD_INT 20
19637: PUSH
19638: LD_INT 21
19640: PUSH
19641: LD_INT 22
19643: PUSH
19644: LD_INT 72
19646: PUSH
19647: LD_INT 26
19649: PUSH
19650: LD_INT 69
19652: PUSH
19653: LD_INT 39
19655: PUSH
19656: LD_INT 40
19658: PUSH
19659: LD_INT 41
19661: PUSH
19662: LD_INT 42
19664: PUSH
19665: LD_INT 43
19667: PUSH
19668: LD_INT 48
19670: PUSH
19671: LD_INT 49
19673: PUSH
19674: LD_INT 50
19676: PUSH
19677: LD_INT 51
19679: PUSH
19680: LD_INT 52
19682: PUSH
19683: LD_INT 53
19685: PUSH
19686: LD_INT 54
19688: PUSH
19689: LD_INT 55
19691: PUSH
19692: LD_INT 56
19694: PUSH
19695: LD_INT 60
19697: PUSH
19698: LD_INT 61
19700: PUSH
19701: LD_INT 62
19703: PUSH
19704: LD_INT 66
19706: PUSH
19707: LD_INT 67
19709: PUSH
19710: LD_INT 68
19712: PUSH
19713: LD_INT 81
19715: PUSH
19716: LD_INT 82
19718: PUSH
19719: LD_INT 83
19721: PUSH
19722: LD_INT 84
19724: PUSH
19725: LD_INT 85
19727: PUSH
19728: LD_INT 87
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: ST_TO_ADDR
19786: GO 20019
19788: LD_INT 3
19790: DOUBLE
19791: EQUAL
19792: IFTRUE 19796
19794: GO 20018
19796: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19797: LD_ADDR_VAR 0 4
19801: PUSH
19802: LD_INT 46
19804: PUSH
19805: LD_INT 47
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 2
19813: PUSH
19814: LD_INT 82
19816: PUSH
19817: LD_INT 83
19819: PUSH
19820: LD_INT 84
19822: PUSH
19823: LD_INT 85
19825: PUSH
19826: LD_INT 86
19828: PUSH
19829: LD_INT 11
19831: PUSH
19832: LD_INT 9
19834: PUSH
19835: LD_INT 20
19837: PUSH
19838: LD_INT 19
19840: PUSH
19841: LD_INT 21
19843: PUSH
19844: LD_INT 24
19846: PUSH
19847: LD_INT 22
19849: PUSH
19850: LD_INT 25
19852: PUSH
19853: LD_INT 28
19855: PUSH
19856: LD_INT 29
19858: PUSH
19859: LD_INT 30
19861: PUSH
19862: LD_INT 31
19864: PUSH
19865: LD_INT 37
19867: PUSH
19868: LD_INT 38
19870: PUSH
19871: LD_INT 32
19873: PUSH
19874: LD_INT 27
19876: PUSH
19877: LD_INT 33
19879: PUSH
19880: LD_INT 69
19882: PUSH
19883: LD_INT 39
19885: PUSH
19886: LD_INT 34
19888: PUSH
19889: LD_INT 40
19891: PUSH
19892: LD_INT 71
19894: PUSH
19895: LD_INT 23
19897: PUSH
19898: LD_INT 44
19900: PUSH
19901: LD_INT 48
19903: PUSH
19904: LD_INT 49
19906: PUSH
19907: LD_INT 50
19909: PUSH
19910: LD_INT 51
19912: PUSH
19913: LD_INT 52
19915: PUSH
19916: LD_INT 53
19918: PUSH
19919: LD_INT 54
19921: PUSH
19922: LD_INT 55
19924: PUSH
19925: LD_INT 56
19927: PUSH
19928: LD_INT 57
19930: PUSH
19931: LD_INT 58
19933: PUSH
19934: LD_INT 59
19936: PUSH
19937: LD_INT 63
19939: PUSH
19940: LD_INT 64
19942: PUSH
19943: LD_INT 65
19945: PUSH
19946: LD_INT 82
19948: PUSH
19949: LD_INT 83
19951: PUSH
19952: LD_INT 84
19954: PUSH
19955: LD_INT 85
19957: PUSH
19958: LD_INT 86
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: ST_TO_ADDR
20016: GO 20019
20018: POP
// if state > - 1 and state < 3 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 1
20026: NEG
20027: GREATER
20028: PUSH
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 3
20036: LESS
20037: AND
20038: IFFALSE 20095
// for i in result do
20040: LD_ADDR_VAR 0 5
20044: PUSH
20045: LD_VAR 0 4
20049: PUSH
20050: FOR_IN
20051: IFFALSE 20093
// if GetTech ( i , side ) <> state then
20053: LD_VAR 0 5
20057: PPUSH
20058: LD_VAR 0 1
20062: PPUSH
20063: CALL_OW 321
20067: PUSH
20068: LD_VAR 0 3
20072: NONEQUAL
20073: IFFALSE 20091
// result := result diff i ;
20075: LD_ADDR_VAR 0 4
20079: PUSH
20080: LD_VAR 0 4
20084: PUSH
20085: LD_VAR 0 5
20089: DIFF
20090: ST_TO_ADDR
20091: GO 20050
20093: POP
20094: POP
// end ;
20095: LD_VAR 0 4
20099: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20100: LD_INT 0
20102: PPUSH
20103: PPUSH
20104: PPUSH
// result := true ;
20105: LD_ADDR_VAR 0 3
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20113: LD_ADDR_VAR 0 5
20117: PUSH
20118: LD_VAR 0 2
20122: PPUSH
20123: CALL_OW 480
20127: ST_TO_ADDR
// if not tmp then
20128: LD_VAR 0 5
20132: NOT
20133: IFFALSE 20137
// exit ;
20135: GO 20186
// for i in tmp do
20137: LD_ADDR_VAR 0 4
20141: PUSH
20142: LD_VAR 0 5
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20184
// if GetTech ( i , side ) <> state_researched then
20150: LD_VAR 0 4
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: CALL_OW 321
20164: PUSH
20165: LD_INT 2
20167: NONEQUAL
20168: IFFALSE 20182
// begin result := false ;
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_INT 0
20177: ST_TO_ADDR
// exit ;
20178: POP
20179: POP
20180: GO 20186
// end ;
20182: GO 20147
20184: POP
20185: POP
// end ;
20186: LD_VAR 0 3
20190: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20191: LD_INT 0
20193: PPUSH
20194: PPUSH
20195: PPUSH
20196: PPUSH
20197: PPUSH
20198: PPUSH
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
20205: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20206: LD_VAR 0 1
20210: NOT
20211: PUSH
20212: LD_VAR 0 1
20216: PPUSH
20217: CALL_OW 257
20221: PUSH
20222: LD_INT 9
20224: NONEQUAL
20225: OR
20226: IFFALSE 20230
// exit ;
20228: GO 20803
// side := GetSide ( unit ) ;
20230: LD_ADDR_VAR 0 9
20234: PUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 255
20244: ST_TO_ADDR
// tech_space := tech_spacanom ;
20245: LD_ADDR_VAR 0 12
20249: PUSH
20250: LD_INT 29
20252: ST_TO_ADDR
// tech_time := tech_taurad ;
20253: LD_ADDR_VAR 0 13
20257: PUSH
20258: LD_INT 28
20260: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20261: LD_ADDR_VAR 0 11
20265: PUSH
20266: LD_VAR 0 1
20270: PPUSH
20271: CALL_OW 310
20275: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20276: LD_VAR 0 11
20280: PPUSH
20281: CALL_OW 247
20285: PUSH
20286: LD_INT 2
20288: EQUAL
20289: IFFALSE 20293
// exit ;
20291: GO 20803
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20293: LD_ADDR_VAR 0 8
20297: PUSH
20298: LD_INT 81
20300: PUSH
20301: LD_VAR 0 9
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PPUSH
20331: CALL_OW 69
20335: ST_TO_ADDR
// if not tmp then
20336: LD_VAR 0 8
20340: NOT
20341: IFFALSE 20345
// exit ;
20343: GO 20803
// if in_unit then
20345: LD_VAR 0 11
20349: IFFALSE 20373
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20351: LD_ADDR_VAR 0 10
20355: PUSH
20356: LD_VAR 0 8
20360: PPUSH
20361: LD_VAR 0 11
20365: PPUSH
20366: CALL_OW 74
20370: ST_TO_ADDR
20371: GO 20393
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20373: LD_ADDR_VAR 0 10
20377: PUSH
20378: LD_VAR 0 8
20382: PPUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 74
20392: ST_TO_ADDR
// if not enemy then
20393: LD_VAR 0 10
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20803
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20402: LD_VAR 0 11
20406: PUSH
20407: LD_VAR 0 11
20411: PPUSH
20412: LD_VAR 0 10
20416: PPUSH
20417: CALL_OW 296
20421: PUSH
20422: LD_INT 13
20424: GREATER
20425: AND
20426: PUSH
20427: LD_VAR 0 1
20431: PPUSH
20432: LD_VAR 0 10
20436: PPUSH
20437: CALL_OW 296
20441: PUSH
20442: LD_INT 12
20444: GREATER
20445: OR
20446: IFFALSE 20450
// exit ;
20448: GO 20803
// missile := [ 1 ] ;
20450: LD_ADDR_VAR 0 14
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: EMPTY
20459: LIST
20460: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20461: LD_VAR 0 9
20465: PPUSH
20466: LD_VAR 0 12
20470: PPUSH
20471: CALL_OW 325
20475: IFFALSE 20504
// missile := Insert ( missile , missile + 1 , 2 ) ;
20477: LD_ADDR_VAR 0 14
20481: PUSH
20482: LD_VAR 0 14
20486: PPUSH
20487: LD_VAR 0 14
20491: PUSH
20492: LD_INT 1
20494: PLUS
20495: PPUSH
20496: LD_INT 2
20498: PPUSH
20499: CALL_OW 2
20503: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20504: LD_VAR 0 9
20508: PPUSH
20509: LD_VAR 0 13
20513: PPUSH
20514: CALL_OW 325
20518: PUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: CALL_OW 255
20528: PPUSH
20529: LD_VAR 0 13
20533: PPUSH
20534: CALL_OW 325
20538: NOT
20539: AND
20540: IFFALSE 20569
// missile := Insert ( missile , missile + 1 , 3 ) ;
20542: LD_ADDR_VAR 0 14
20546: PUSH
20547: LD_VAR 0 14
20551: PPUSH
20552: LD_VAR 0 14
20556: PUSH
20557: LD_INT 1
20559: PLUS
20560: PPUSH
20561: LD_INT 3
20563: PPUSH
20564: CALL_OW 2
20568: ST_TO_ADDR
// if missile < 2 then
20569: LD_VAR 0 14
20573: PUSH
20574: LD_INT 2
20576: LESS
20577: IFFALSE 20581
// exit ;
20579: GO 20803
// x := GetX ( enemy ) ;
20581: LD_ADDR_VAR 0 4
20585: PUSH
20586: LD_VAR 0 10
20590: PPUSH
20591: CALL_OW 250
20595: ST_TO_ADDR
// y := GetY ( enemy ) ;
20596: LD_ADDR_VAR 0 5
20600: PUSH
20601: LD_VAR 0 10
20605: PPUSH
20606: CALL_OW 251
20610: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20611: LD_ADDR_VAR 0 6
20615: PUSH
20616: LD_VAR 0 4
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PPUSH
20625: LD_INT 1
20627: PPUSH
20628: CALL_OW 12
20632: PLUS
20633: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20634: LD_ADDR_VAR 0 7
20638: PUSH
20639: LD_VAR 0 5
20643: PUSH
20644: LD_INT 1
20646: NEG
20647: PPUSH
20648: LD_INT 1
20650: PPUSH
20651: CALL_OW 12
20655: PLUS
20656: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20657: LD_VAR 0 6
20661: PPUSH
20662: LD_VAR 0 7
20666: PPUSH
20667: CALL_OW 488
20671: NOT
20672: IFFALSE 20694
// begin _x := x ;
20674: LD_ADDR_VAR 0 6
20678: PUSH
20679: LD_VAR 0 4
20683: ST_TO_ADDR
// _y := y ;
20684: LD_ADDR_VAR 0 7
20688: PUSH
20689: LD_VAR 0 5
20693: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20694: LD_ADDR_VAR 0 3
20698: PUSH
20699: LD_INT 1
20701: PPUSH
20702: LD_VAR 0 14
20706: PPUSH
20707: CALL_OW 12
20711: ST_TO_ADDR
// case i of 1 :
20712: LD_VAR 0 3
20716: PUSH
20717: LD_INT 1
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20742
20725: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20726: LD_VAR 0 1
20730: PPUSH
20731: LD_VAR 0 10
20735: PPUSH
20736: CALL_OW 115
20740: GO 20803
20742: LD_INT 2
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20772
20750: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20751: LD_VAR 0 1
20755: PPUSH
20756: LD_VAR 0 6
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 153
20770: GO 20803
20772: LD_INT 3
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 20802
20780: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_VAR 0 6
20790: PPUSH
20791: LD_VAR 0 7
20795: PPUSH
20796: CALL_OW 154
20800: GO 20803
20802: POP
// end ;
20803: LD_VAR 0 2
20807: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20808: LD_INT 0
20810: PPUSH
20811: PPUSH
20812: PPUSH
20813: PPUSH
20814: PPUSH
20815: PPUSH
// if not unit or not building then
20816: LD_VAR 0 1
20820: NOT
20821: PUSH
20822: LD_VAR 0 2
20826: NOT
20827: OR
20828: IFFALSE 20832
// exit ;
20830: GO 20990
// x := GetX ( building ) ;
20832: LD_ADDR_VAR 0 5
20836: PUSH
20837: LD_VAR 0 2
20841: PPUSH
20842: CALL_OW 250
20846: ST_TO_ADDR
// y := GetY ( building ) ;
20847: LD_ADDR_VAR 0 6
20851: PUSH
20852: LD_VAR 0 2
20856: PPUSH
20857: CALL_OW 251
20861: ST_TO_ADDR
// for i = 0 to 5 do
20862: LD_ADDR_VAR 0 4
20866: PUSH
20867: DOUBLE
20868: LD_INT 0
20870: DEC
20871: ST_TO_ADDR
20872: LD_INT 5
20874: PUSH
20875: FOR_TO
20876: IFFALSE 20988
// begin _x := ShiftX ( x , i , 3 ) ;
20878: LD_ADDR_VAR 0 7
20882: PUSH
20883: LD_VAR 0 5
20887: PPUSH
20888: LD_VAR 0 4
20892: PPUSH
20893: LD_INT 3
20895: PPUSH
20896: CALL_OW 272
20900: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20901: LD_ADDR_VAR 0 8
20905: PUSH
20906: LD_VAR 0 6
20910: PPUSH
20911: LD_VAR 0 4
20915: PPUSH
20916: LD_INT 3
20918: PPUSH
20919: CALL_OW 273
20923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20924: LD_VAR 0 7
20928: PPUSH
20929: LD_VAR 0 8
20933: PPUSH
20934: CALL_OW 488
20938: NOT
20939: IFFALSE 20943
// continue ;
20941: GO 20875
// if HexInfo ( _x , _y ) = 0 then
20943: LD_VAR 0 7
20947: PPUSH
20948: LD_VAR 0 8
20952: PPUSH
20953: CALL_OW 428
20957: PUSH
20958: LD_INT 0
20960: EQUAL
20961: IFFALSE 20986
// begin ComMoveXY ( unit , _x , _y ) ;
20963: LD_VAR 0 1
20967: PPUSH
20968: LD_VAR 0 7
20972: PPUSH
20973: LD_VAR 0 8
20977: PPUSH
20978: CALL_OW 111
// exit ;
20982: POP
20983: POP
20984: GO 20990
// end ; end ;
20986: GO 20875
20988: POP
20989: POP
// end ;
20990: LD_VAR 0 3
20994: RET
// export function ScanBase ( side , base_area ) ; begin
20995: LD_INT 0
20997: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20998: LD_ADDR_VAR 0 3
21002: PUSH
21003: LD_VAR 0 2
21007: PPUSH
21008: LD_INT 81
21010: PUSH
21011: LD_VAR 0 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL_OW 70
21024: ST_TO_ADDR
// end ;
21025: LD_VAR 0 3
21029: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21030: LD_INT 0
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
// result := false ;
21036: LD_ADDR_VAR 0 2
21040: PUSH
21041: LD_INT 0
21043: ST_TO_ADDR
// side := GetSide ( unit ) ;
21044: LD_ADDR_VAR 0 3
21048: PUSH
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 255
21058: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21059: LD_ADDR_VAR 0 4
21063: PUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 248
21073: ST_TO_ADDR
// case nat of 1 :
21074: LD_VAR 0 4
21078: PUSH
21079: LD_INT 1
21081: DOUBLE
21082: EQUAL
21083: IFTRUE 21087
21085: GO 21098
21087: POP
// tech := tech_lassight ; 2 :
21088: LD_ADDR_VAR 0 5
21092: PUSH
21093: LD_INT 12
21095: ST_TO_ADDR
21096: GO 21137
21098: LD_INT 2
21100: DOUBLE
21101: EQUAL
21102: IFTRUE 21106
21104: GO 21117
21106: POP
// tech := tech_mortar ; 3 :
21107: LD_ADDR_VAR 0 5
21111: PUSH
21112: LD_INT 41
21114: ST_TO_ADDR
21115: GO 21137
21117: LD_INT 3
21119: DOUBLE
21120: EQUAL
21121: IFTRUE 21125
21123: GO 21136
21125: POP
// tech := tech_bazooka ; end ;
21126: LD_ADDR_VAR 0 5
21130: PUSH
21131: LD_INT 44
21133: ST_TO_ADDR
21134: GO 21137
21136: POP
// if Researched ( side , tech ) then
21137: LD_VAR 0 3
21141: PPUSH
21142: LD_VAR 0 5
21146: PPUSH
21147: CALL_OW 325
21151: IFFALSE 21178
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_INT 5
21160: PUSH
21161: LD_INT 8
21163: PUSH
21164: LD_INT 9
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: LD_VAR 0 4
21176: ARRAY
21177: ST_TO_ADDR
// end ;
21178: LD_VAR 0 2
21182: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21183: LD_INT 0
21185: PPUSH
21186: PPUSH
21187: PPUSH
// if not mines then
21188: LD_VAR 0 2
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21341
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21197: LD_ADDR_VAR 0 5
21201: PUSH
21202: LD_INT 81
21204: PUSH
21205: LD_VAR 0 1
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: LD_INT 21
21219: PUSH
21220: LD_INT 3
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: ST_TO_ADDR
// for i in mines do
21240: LD_ADDR_VAR 0 4
21244: PUSH
21245: LD_VAR 0 2
21249: PUSH
21250: FOR_IN
21251: IFFALSE 21339
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21253: LD_VAR 0 4
21257: PUSH
21258: LD_INT 1
21260: ARRAY
21261: PPUSH
21262: LD_VAR 0 4
21266: PUSH
21267: LD_INT 2
21269: ARRAY
21270: PPUSH
21271: CALL_OW 458
21275: NOT
21276: IFFALSE 21280
// continue ;
21278: GO 21250
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21280: LD_VAR 0 4
21284: PUSH
21285: LD_INT 1
21287: ARRAY
21288: PPUSH
21289: LD_VAR 0 4
21293: PUSH
21294: LD_INT 2
21296: ARRAY
21297: PPUSH
21298: CALL_OW 428
21302: PUSH
21303: LD_VAR 0 5
21307: IN
21308: IFFALSE 21337
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21310: LD_VAR 0 4
21314: PUSH
21315: LD_INT 1
21317: ARRAY
21318: PPUSH
21319: LD_VAR 0 4
21323: PUSH
21324: LD_INT 2
21326: ARRAY
21327: PPUSH
21328: LD_VAR 0 1
21332: PPUSH
21333: CALL_OW 456
// end ;
21337: GO 21250
21339: POP
21340: POP
// end ;
21341: LD_VAR 0 3
21345: RET
// export function Count ( array ) ; var i ; begin
21346: LD_INT 0
21348: PPUSH
21349: PPUSH
// result := 0 ;
21350: LD_ADDR_VAR 0 2
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// for i in array do
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_VAR 0 1
21367: PUSH
21368: FOR_IN
21369: IFFALSE 21393
// if i then
21371: LD_VAR 0 3
21375: IFFALSE 21391
// result := result + 1 ;
21377: LD_ADDR_VAR 0 2
21381: PUSH
21382: LD_VAR 0 2
21386: PUSH
21387: LD_INT 1
21389: PLUS
21390: ST_TO_ADDR
21391: GO 21368
21393: POP
21394: POP
// end ;
21395: LD_VAR 0 2
21399: RET
// export function IsEmpty ( building ) ; begin
21400: LD_INT 0
21402: PPUSH
// if not building then
21403: LD_VAR 0 1
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21455
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21412: LD_ADDR_VAR 0 2
21416: PUSH
21417: LD_VAR 0 1
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_VAR 0 1
21429: PPUSH
21430: CALL_OW 255
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 58
21441: PUSH
21442: EMPTY
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PPUSH
21449: CALL_OW 69
21453: IN
21454: ST_TO_ADDR
// end ;
21455: LD_VAR 0 2
21459: RET
// export function IsNotFull ( building ) ; begin
21460: LD_INT 0
21462: PPUSH
// if not building then
21463: LD_VAR 0 1
21467: NOT
21468: IFFALSE 21472
// exit ;
21470: GO 21491
// result := UnitsInside ( building ) < 6 ;
21472: LD_ADDR_VAR 0 2
21476: PUSH
21477: LD_VAR 0 1
21481: PPUSH
21482: CALL_OW 313
21486: PUSH
21487: LD_INT 6
21489: LESS
21490: ST_TO_ADDR
// end ;
21491: LD_VAR 0 2
21495: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21496: LD_INT 0
21498: PPUSH
21499: PPUSH
21500: PPUSH
21501: PPUSH
// tmp := [ ] ;
21502: LD_ADDR_VAR 0 3
21506: PUSH
21507: EMPTY
21508: ST_TO_ADDR
// list := [ ] ;
21509: LD_ADDR_VAR 0 5
21513: PUSH
21514: EMPTY
21515: ST_TO_ADDR
// for i = 16 to 25 do
21516: LD_ADDR_VAR 0 4
21520: PUSH
21521: DOUBLE
21522: LD_INT 16
21524: DEC
21525: ST_TO_ADDR
21526: LD_INT 25
21528: PUSH
21529: FOR_TO
21530: IFFALSE 21603
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21532: LD_ADDR_VAR 0 3
21536: PUSH
21537: LD_VAR 0 3
21541: PUSH
21542: LD_INT 22
21544: PUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 255
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 91
21561: PUSH
21562: LD_VAR 0 1
21566: PUSH
21567: LD_INT 6
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 30
21577: PUSH
21578: LD_VAR 0 4
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: PPUSH
21595: CALL_OW 69
21599: ADD
21600: ST_TO_ADDR
21601: GO 21529
21603: POP
21604: POP
// for i = 1 to tmp do
21605: LD_ADDR_VAR 0 4
21609: PUSH
21610: DOUBLE
21611: LD_INT 1
21613: DEC
21614: ST_TO_ADDR
21615: LD_VAR 0 3
21619: PUSH
21620: FOR_TO
21621: IFFALSE 21709
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21623: LD_ADDR_VAR 0 5
21627: PUSH
21628: LD_VAR 0 5
21632: PUSH
21633: LD_VAR 0 3
21637: PUSH
21638: LD_VAR 0 4
21642: ARRAY
21643: PPUSH
21644: CALL_OW 266
21648: PUSH
21649: LD_VAR 0 3
21653: PUSH
21654: LD_VAR 0 4
21658: ARRAY
21659: PPUSH
21660: CALL_OW 250
21664: PUSH
21665: LD_VAR 0 3
21669: PUSH
21670: LD_VAR 0 4
21674: ARRAY
21675: PPUSH
21676: CALL_OW 251
21680: PUSH
21681: LD_VAR 0 3
21685: PUSH
21686: LD_VAR 0 4
21690: ARRAY
21691: PPUSH
21692: CALL_OW 254
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: ADD
21706: ST_TO_ADDR
21707: GO 21620
21709: POP
21710: POP
// result := list ;
21711: LD_ADDR_VAR 0 2
21715: PUSH
21716: LD_VAR 0 5
21720: ST_TO_ADDR
// end ;
21721: LD_VAR 0 2
21725: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21726: LD_INT 0
21728: PPUSH
21729: PPUSH
21730: PPUSH
21731: PPUSH
21732: PPUSH
21733: PPUSH
21734: PPUSH
// if not factory then
21735: LD_VAR 0 1
21739: NOT
21740: IFFALSE 21744
// exit ;
21742: GO 22337
// if control = control_apeman then
21744: LD_VAR 0 4
21748: PUSH
21749: LD_INT 5
21751: EQUAL
21752: IFFALSE 21861
// begin tmp := UnitsInside ( factory ) ;
21754: LD_ADDR_VAR 0 8
21758: PUSH
21759: LD_VAR 0 1
21763: PPUSH
21764: CALL_OW 313
21768: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21769: LD_VAR 0 8
21773: PPUSH
21774: LD_INT 25
21776: PUSH
21777: LD_INT 12
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 72
21788: NOT
21789: IFFALSE 21799
// control := control_manual ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21799: LD_ADDR_VAR 0 8
21803: PUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL 21496 0 1
21813: ST_TO_ADDR
// if tmp then
21814: LD_VAR 0 8
21818: IFFALSE 21861
// begin for i in tmp do
21820: LD_ADDR_VAR 0 7
21824: PUSH
21825: LD_VAR 0 8
21829: PUSH
21830: FOR_IN
21831: IFFALSE 21859
// if i [ 1 ] = b_ext_radio then
21833: LD_VAR 0 7
21837: PUSH
21838: LD_INT 1
21840: ARRAY
21841: PUSH
21842: LD_INT 22
21844: EQUAL
21845: IFFALSE 21857
// begin control := control_remote ;
21847: LD_ADDR_VAR 0 4
21851: PUSH
21852: LD_INT 2
21854: ST_TO_ADDR
// break ;
21855: GO 21859
// end ;
21857: GO 21830
21859: POP
21860: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21861: LD_VAR 0 1
21865: PPUSH
21866: LD_VAR 0 2
21870: PPUSH
21871: LD_VAR 0 3
21875: PPUSH
21876: LD_VAR 0 4
21880: PPUSH
21881: LD_VAR 0 5
21885: PPUSH
21886: CALL_OW 448
21890: IFFALSE 21925
// begin result := [ chassis , engine , control , weapon ] ;
21892: LD_ADDR_VAR 0 6
21896: PUSH
21897: LD_VAR 0 2
21901: PUSH
21902: LD_VAR 0 3
21906: PUSH
21907: LD_VAR 0 4
21911: PUSH
21912: LD_VAR 0 5
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: ST_TO_ADDR
// exit ;
21923: GO 22337
// end ; _chassis := AvailableChassisList ( factory ) ;
21925: LD_ADDR_VAR 0 9
21929: PUSH
21930: LD_VAR 0 1
21934: PPUSH
21935: CALL_OW 475
21939: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21940: LD_ADDR_VAR 0 11
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 476
21954: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21955: LD_ADDR_VAR 0 12
21959: PUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 477
21969: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21970: LD_ADDR_VAR 0 10
21974: PUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 478
21984: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21985: LD_VAR 0 9
21989: NOT
21990: PUSH
21991: LD_VAR 0 11
21995: NOT
21996: OR
21997: PUSH
21998: LD_VAR 0 12
22002: NOT
22003: OR
22004: PUSH
22005: LD_VAR 0 10
22009: NOT
22010: OR
22011: IFFALSE 22046
// begin result := [ chassis , engine , control , weapon ] ;
22013: LD_ADDR_VAR 0 6
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: LD_VAR 0 3
22027: PUSH
22028: LD_VAR 0 4
22032: PUSH
22033: LD_VAR 0 5
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: ST_TO_ADDR
// exit ;
22044: GO 22337
// end ; if not chassis in _chassis then
22046: LD_VAR 0 2
22050: PUSH
22051: LD_VAR 0 9
22055: IN
22056: NOT
22057: IFFALSE 22083
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22059: LD_ADDR_VAR 0 2
22063: PUSH
22064: LD_VAR 0 9
22068: PUSH
22069: LD_INT 1
22071: PPUSH
22072: LD_VAR 0 9
22076: PPUSH
22077: CALL_OW 12
22081: ARRAY
22082: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22083: LD_VAR 0 2
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: CALL 22342 0 2
22097: NOT
22098: IFFALSE 22157
// repeat engine := _engine [ 1 ] ;
22100: LD_ADDR_VAR 0 3
22104: PUSH
22105: LD_VAR 0 11
22109: PUSH
22110: LD_INT 1
22112: ARRAY
22113: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22114: LD_ADDR_VAR 0 11
22118: PUSH
22119: LD_VAR 0 11
22123: PPUSH
22124: LD_INT 1
22126: PPUSH
22127: CALL_OW 3
22131: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22132: LD_VAR 0 2
22136: PPUSH
22137: LD_VAR 0 3
22141: PPUSH
22142: CALL 22342 0 2
22146: PUSH
22147: LD_VAR 0 11
22151: PUSH
22152: EMPTY
22153: EQUAL
22154: OR
22155: IFFALSE 22100
// if not control in _control then
22157: LD_VAR 0 4
22161: PUSH
22162: LD_VAR 0 12
22166: IN
22167: NOT
22168: IFFALSE 22194
// control := _control [ rand ( 1 , _control ) ] ;
22170: LD_ADDR_VAR 0 4
22174: PUSH
22175: LD_VAR 0 12
22179: PUSH
22180: LD_INT 1
22182: PPUSH
22183: LD_VAR 0 12
22187: PPUSH
22188: CALL_OW 12
22192: ARRAY
22193: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22194: LD_VAR 0 2
22198: PPUSH
22199: LD_VAR 0 5
22203: PPUSH
22204: CALL 22562 0 2
22208: NOT
22209: IFFALSE 22268
// repeat weapon := _weapon [ 1 ] ;
22211: LD_ADDR_VAR 0 5
22215: PUSH
22216: LD_VAR 0 10
22220: PUSH
22221: LD_INT 1
22223: ARRAY
22224: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22225: LD_ADDR_VAR 0 10
22229: PUSH
22230: LD_VAR 0 10
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: CALL_OW 3
22242: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22243: LD_VAR 0 2
22247: PPUSH
22248: LD_VAR 0 5
22252: PPUSH
22253: CALL 22562 0 2
22257: PUSH
22258: LD_VAR 0 10
22262: PUSH
22263: EMPTY
22264: EQUAL
22265: OR
22266: IFFALSE 22211
// result := [ ] ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: EMPTY
22274: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_VAR 0 2
22284: PPUSH
22285: LD_VAR 0 3
22289: PPUSH
22290: LD_VAR 0 4
22294: PPUSH
22295: LD_VAR 0 5
22299: PPUSH
22300: CALL_OW 448
22304: IFFALSE 22337
// result := [ chassis , engine , control , weapon ] ;
22306: LD_ADDR_VAR 0 6
22310: PUSH
22311: LD_VAR 0 2
22315: PUSH
22316: LD_VAR 0 3
22320: PUSH
22321: LD_VAR 0 4
22325: PUSH
22326: LD_VAR 0 5
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: ST_TO_ADDR
// end ;
22337: LD_VAR 0 6
22341: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22342: LD_INT 0
22344: PPUSH
// if not chassis or not engine then
22345: LD_VAR 0 1
22349: NOT
22350: PUSH
22351: LD_VAR 0 2
22355: NOT
22356: OR
22357: IFFALSE 22361
// exit ;
22359: GO 22557
// case engine of engine_solar :
22361: LD_VAR 0 2
22365: PUSH
22366: LD_INT 2
22368: DOUBLE
22369: EQUAL
22370: IFTRUE 22374
22372: GO 22412
22374: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: LD_INT 11
22382: PUSH
22383: LD_INT 12
22385: PUSH
22386: LD_INT 13
22388: PUSH
22389: LD_INT 14
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: ST_TO_ADDR
22410: GO 22541
22412: LD_INT 1
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22482
22420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22421: LD_ADDR_VAR 0 3
22425: PUSH
22426: LD_INT 11
22428: PUSH
22429: LD_INT 12
22431: PUSH
22432: LD_INT 13
22434: PUSH
22435: LD_INT 14
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 3
22446: PUSH
22447: LD_INT 4
22449: PUSH
22450: LD_INT 5
22452: PUSH
22453: LD_INT 21
22455: PUSH
22456: LD_INT 23
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_INT 24
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: ST_TO_ADDR
22480: GO 22541
22482: LD_INT 3
22484: DOUBLE
22485: EQUAL
22486: IFTRUE 22490
22488: GO 22540
22490: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22491: LD_ADDR_VAR 0 3
22495: PUSH
22496: LD_INT 13
22498: PUSH
22499: LD_INT 14
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: LD_INT 4
22510: PUSH
22511: LD_INT 5
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_INT 23
22522: PUSH
22523: LD_INT 24
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: ST_TO_ADDR
22538: GO 22541
22540: POP
// result := ( chassis in result ) ;
22541: LD_ADDR_VAR 0 3
22545: PUSH
22546: LD_VAR 0 1
22550: PUSH
22551: LD_VAR 0 3
22555: IN
22556: ST_TO_ADDR
// end ;
22557: LD_VAR 0 3
22561: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22562: LD_INT 0
22564: PPUSH
// if not chassis or not weapon then
22565: LD_VAR 0 1
22569: NOT
22570: PUSH
22571: LD_VAR 0 2
22575: NOT
22576: OR
22577: IFFALSE 22581
// exit ;
22579: GO 23607
// case weapon of us_machine_gun :
22581: LD_VAR 0 2
22585: PUSH
22586: LD_INT 2
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 22624
22594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22595: LD_ADDR_VAR 0 3
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: LD_INT 3
22608: PUSH
22609: LD_INT 4
22611: PUSH
22612: LD_INT 5
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: ST_TO_ADDR
22622: GO 23591
22624: LD_INT 3
22626: DOUBLE
22627: EQUAL
22628: IFTRUE 22632
22630: GO 22662
22632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22633: LD_ADDR_VAR 0 3
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: LD_INT 4
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 23591
22662: LD_INT 11
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22700
22670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22671: LD_ADDR_VAR 0 3
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 3
22684: PUSH
22685: LD_INT 4
22687: PUSH
22688: LD_INT 5
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: ST_TO_ADDR
22698: GO 23591
22700: LD_INT 4
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22734
22708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
22732: GO 23591
22734: LD_INT 5
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22768
22742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22743: LD_ADDR_VAR 0 3
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 4
22756: PUSH
22757: LD_INT 5
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
22766: GO 23591
22768: LD_INT 9
22770: DOUBLE
22771: EQUAL
22772: IFTRUE 22776
22774: GO 22802
22776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22777: LD_ADDR_VAR 0 3
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: ST_TO_ADDR
22800: GO 23591
22802: LD_INT 7
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22836
22810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 3
22821: PUSH
22822: LD_INT 4
22824: PUSH
22825: LD_INT 5
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: ST_TO_ADDR
22834: GO 23591
22836: LD_INT 12
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 22870
22844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: LD_INT 4
22858: PUSH
22859: LD_INT 5
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: ST_TO_ADDR
22868: GO 23591
22870: LD_INT 13
22872: DOUBLE
22873: EQUAL
22874: IFTRUE 22878
22876: GO 22904
22878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22879: LD_ADDR_VAR 0 3
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: LD_INT 4
22892: PUSH
22893: LD_INT 5
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: ST_TO_ADDR
22902: GO 23591
22904: LD_INT 14
22906: DOUBLE
22907: EQUAL
22908: IFTRUE 22912
22910: GO 22930
22912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22913: LD_ADDR_VAR 0 3
22917: PUSH
22918: LD_INT 4
22920: PUSH
22921: LD_INT 5
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: ST_TO_ADDR
22928: GO 23591
22930: LD_INT 6
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 22956
22938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22939: LD_ADDR_VAR 0 3
22943: PUSH
22944: LD_INT 4
22946: PUSH
22947: LD_INT 5
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: ST_TO_ADDR
22954: GO 23591
22956: LD_INT 10
22958: DOUBLE
22959: EQUAL
22960: IFTRUE 22964
22962: GO 22982
22964: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_INT 4
22972: PUSH
22973: LD_INT 5
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: ST_TO_ADDR
22980: GO 23591
22982: LD_INT 22
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23016
22990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22991: LD_ADDR_VAR 0 3
22995: PUSH
22996: LD_INT 11
22998: PUSH
22999: LD_INT 12
23001: PUSH
23002: LD_INT 13
23004: PUSH
23005: LD_INT 14
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: ST_TO_ADDR
23014: GO 23591
23016: LD_INT 23
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23050
23024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_INT 11
23032: PUSH
23033: LD_INT 12
23035: PUSH
23036: LD_INT 13
23038: PUSH
23039: LD_INT 14
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
23048: GO 23591
23050: LD_INT 24
23052: DOUBLE
23053: EQUAL
23054: IFTRUE 23058
23056: GO 23084
23058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23059: LD_ADDR_VAR 0 3
23063: PUSH
23064: LD_INT 11
23066: PUSH
23067: LD_INT 12
23069: PUSH
23070: LD_INT 13
23072: PUSH
23073: LD_INT 14
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
23082: GO 23591
23084: LD_INT 30
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23118
23092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 12
23103: PUSH
23104: LD_INT 13
23106: PUSH
23107: LD_INT 14
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: ST_TO_ADDR
23116: GO 23591
23118: LD_INT 25
23120: DOUBLE
23121: EQUAL
23122: IFTRUE 23126
23124: GO 23144
23126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: LD_INT 13
23134: PUSH
23135: LD_INT 14
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: ST_TO_ADDR
23142: GO 23591
23144: LD_INT 27
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23170
23152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_INT 13
23160: PUSH
23161: LD_INT 14
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: ST_TO_ADDR
23168: GO 23591
23170: LD_INT 28
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23196
23178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23179: LD_ADDR_VAR 0 3
23183: PUSH
23184: LD_INT 13
23186: PUSH
23187: LD_INT 14
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: ST_TO_ADDR
23194: GO 23591
23196: LD_INT 29
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23204
23202: GO 23222
23204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: LD_INT 13
23212: PUSH
23213: LD_INT 14
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: ST_TO_ADDR
23220: GO 23591
23222: LD_INT 31
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23248
23230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_INT 13
23238: PUSH
23239: LD_INT 14
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: ST_TO_ADDR
23246: GO 23591
23248: LD_INT 26
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23274
23256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_INT 13
23264: PUSH
23265: LD_INT 14
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 23591
23274: LD_INT 42
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23308
23282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23283: LD_ADDR_VAR 0 3
23287: PUSH
23288: LD_INT 21
23290: PUSH
23291: LD_INT 22
23293: PUSH
23294: LD_INT 23
23296: PUSH
23297: LD_INT 24
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: ST_TO_ADDR
23306: GO 23591
23308: LD_INT 43
23310: DOUBLE
23311: EQUAL
23312: IFTRUE 23316
23314: GO 23342
23316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23317: LD_ADDR_VAR 0 3
23321: PUSH
23322: LD_INT 21
23324: PUSH
23325: LD_INT 22
23327: PUSH
23328: LD_INT 23
23330: PUSH
23331: LD_INT 24
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
23340: GO 23591
23342: LD_INT 44
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23376
23350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 23
23364: PUSH
23365: LD_INT 24
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
23374: GO 23591
23376: LD_INT 45
23378: DOUBLE
23379: EQUAL
23380: IFTRUE 23384
23382: GO 23410
23384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23385: LD_ADDR_VAR 0 3
23389: PUSH
23390: LD_INT 21
23392: PUSH
23393: LD_INT 22
23395: PUSH
23396: LD_INT 23
23398: PUSH
23399: LD_INT 24
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
23408: GO 23591
23410: LD_INT 49
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23418
23416: GO 23444
23418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: LD_INT 21
23426: PUSH
23427: LD_INT 22
23429: PUSH
23430: LD_INT 23
23432: PUSH
23433: LD_INT 24
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
23442: GO 23591
23444: LD_INT 51
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23478
23452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23453: LD_ADDR_VAR 0 3
23457: PUSH
23458: LD_INT 21
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 24
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 23591
23478: LD_INT 52
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23512
23486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: LD_INT 21
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_INT 23
23500: PUSH
23501: LD_INT 24
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: ST_TO_ADDR
23510: GO 23591
23512: LD_INT 53
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23538
23520: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23521: LD_ADDR_VAR 0 3
23525: PUSH
23526: LD_INT 23
23528: PUSH
23529: LD_INT 24
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: ST_TO_ADDR
23536: GO 23591
23538: LD_INT 46
23540: DOUBLE
23541: EQUAL
23542: IFTRUE 23546
23544: GO 23564
23546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23547: LD_ADDR_VAR 0 3
23551: PUSH
23552: LD_INT 23
23554: PUSH
23555: LD_INT 24
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 23591
23564: LD_INT 47
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23590
23572: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_INT 23
23580: PUSH
23581: LD_INT 24
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: ST_TO_ADDR
23588: GO 23591
23590: POP
// result := ( chassis in result ) ;
23591: LD_ADDR_VAR 0 3
23595: PUSH
23596: LD_VAR 0 1
23600: PUSH
23601: LD_VAR 0 3
23605: IN
23606: ST_TO_ADDR
// end ;
23607: LD_VAR 0 3
23611: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23612: LD_INT 0
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
23620: PPUSH
// result := array ;
23621: LD_ADDR_VAR 0 5
23625: PUSH
23626: LD_VAR 0 1
23630: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23631: LD_VAR 0 1
23635: NOT
23636: PUSH
23637: LD_VAR 0 2
23641: NOT
23642: OR
23643: PUSH
23644: LD_VAR 0 3
23648: NOT
23649: OR
23650: PUSH
23651: LD_VAR 0 2
23655: PUSH
23656: LD_VAR 0 1
23660: GREATER
23661: OR
23662: PUSH
23663: LD_VAR 0 3
23667: PUSH
23668: LD_VAR 0 1
23672: GREATER
23673: OR
23674: IFFALSE 23678
// exit ;
23676: GO 23974
// if direction then
23678: LD_VAR 0 4
23682: IFFALSE 23746
// begin d := 1 ;
23684: LD_ADDR_VAR 0 9
23688: PUSH
23689: LD_INT 1
23691: ST_TO_ADDR
// if i_from > i_to then
23692: LD_VAR 0 2
23696: PUSH
23697: LD_VAR 0 3
23701: GREATER
23702: IFFALSE 23728
// length := ( array - i_from ) + i_to else
23704: LD_ADDR_VAR 0 11
23708: PUSH
23709: LD_VAR 0 1
23713: PUSH
23714: LD_VAR 0 2
23718: MINUS
23719: PUSH
23720: LD_VAR 0 3
23724: PLUS
23725: ST_TO_ADDR
23726: GO 23744
// length := i_to - i_from ;
23728: LD_ADDR_VAR 0 11
23732: PUSH
23733: LD_VAR 0 3
23737: PUSH
23738: LD_VAR 0 2
23742: MINUS
23743: ST_TO_ADDR
// end else
23744: GO 23807
// begin d := - 1 ;
23746: LD_ADDR_VAR 0 9
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: ST_TO_ADDR
// if i_from > i_to then
23755: LD_VAR 0 2
23759: PUSH
23760: LD_VAR 0 3
23764: GREATER
23765: IFFALSE 23785
// length := i_from - i_to else
23767: LD_ADDR_VAR 0 11
23771: PUSH
23772: LD_VAR 0 2
23776: PUSH
23777: LD_VAR 0 3
23781: MINUS
23782: ST_TO_ADDR
23783: GO 23807
// length := ( array - i_to ) + i_from ;
23785: LD_ADDR_VAR 0 11
23789: PUSH
23790: LD_VAR 0 1
23794: PUSH
23795: LD_VAR 0 3
23799: MINUS
23800: PUSH
23801: LD_VAR 0 2
23805: PLUS
23806: ST_TO_ADDR
// end ; if not length then
23807: LD_VAR 0 11
23811: NOT
23812: IFFALSE 23816
// exit ;
23814: GO 23974
// tmp := array ;
23816: LD_ADDR_VAR 0 10
23820: PUSH
23821: LD_VAR 0 1
23825: ST_TO_ADDR
// for i = 1 to length do
23826: LD_ADDR_VAR 0 6
23830: PUSH
23831: DOUBLE
23832: LD_INT 1
23834: DEC
23835: ST_TO_ADDR
23836: LD_VAR 0 11
23840: PUSH
23841: FOR_TO
23842: IFFALSE 23962
// begin for j = 1 to array do
23844: LD_ADDR_VAR 0 7
23848: PUSH
23849: DOUBLE
23850: LD_INT 1
23852: DEC
23853: ST_TO_ADDR
23854: LD_VAR 0 1
23858: PUSH
23859: FOR_TO
23860: IFFALSE 23948
// begin k := j + d ;
23862: LD_ADDR_VAR 0 8
23866: PUSH
23867: LD_VAR 0 7
23871: PUSH
23872: LD_VAR 0 9
23876: PLUS
23877: ST_TO_ADDR
// if k > array then
23878: LD_VAR 0 8
23882: PUSH
23883: LD_VAR 0 1
23887: GREATER
23888: IFFALSE 23898
// k := 1 ;
23890: LD_ADDR_VAR 0 8
23894: PUSH
23895: LD_INT 1
23897: ST_TO_ADDR
// if not k then
23898: LD_VAR 0 8
23902: NOT
23903: IFFALSE 23915
// k := array ;
23905: LD_ADDR_VAR 0 8
23909: PUSH
23910: LD_VAR 0 1
23914: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23915: LD_ADDR_VAR 0 10
23919: PUSH
23920: LD_VAR 0 10
23924: PPUSH
23925: LD_VAR 0 8
23929: PPUSH
23930: LD_VAR 0 1
23934: PUSH
23935: LD_VAR 0 7
23939: ARRAY
23940: PPUSH
23941: CALL_OW 1
23945: ST_TO_ADDR
// end ;
23946: GO 23859
23948: POP
23949: POP
// array := tmp ;
23950: LD_ADDR_VAR 0 1
23954: PUSH
23955: LD_VAR 0 10
23959: ST_TO_ADDR
// end ;
23960: GO 23841
23962: POP
23963: POP
// result := array ;
23964: LD_ADDR_VAR 0 5
23968: PUSH
23969: LD_VAR 0 1
23973: ST_TO_ADDR
// end ;
23974: LD_VAR 0 5
23978: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23979: LD_INT 0
23981: PPUSH
23982: PPUSH
// result := 0 ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// if not array or not value in array then
23991: LD_VAR 0 1
23995: NOT
23996: PUSH
23997: LD_VAR 0 2
24001: PUSH
24002: LD_VAR 0 1
24006: IN
24007: NOT
24008: OR
24009: IFFALSE 24013
// exit ;
24011: GO 24067
// for i = 1 to array do
24013: LD_ADDR_VAR 0 4
24017: PUSH
24018: DOUBLE
24019: LD_INT 1
24021: DEC
24022: ST_TO_ADDR
24023: LD_VAR 0 1
24027: PUSH
24028: FOR_TO
24029: IFFALSE 24065
// if value = array [ i ] then
24031: LD_VAR 0 2
24035: PUSH
24036: LD_VAR 0 1
24040: PUSH
24041: LD_VAR 0 4
24045: ARRAY
24046: EQUAL
24047: IFFALSE 24063
// begin result := i ;
24049: LD_ADDR_VAR 0 3
24053: PUSH
24054: LD_VAR 0 4
24058: ST_TO_ADDR
// exit ;
24059: POP
24060: POP
24061: GO 24067
// end ;
24063: GO 24028
24065: POP
24066: POP
// end ;
24067: LD_VAR 0 3
24071: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24072: LD_INT 0
24074: PPUSH
// vc_chassis := chassis ;
24075: LD_ADDR_OWVAR 37
24079: PUSH
24080: LD_VAR 0 1
24084: ST_TO_ADDR
// vc_engine := engine ;
24085: LD_ADDR_OWVAR 39
24089: PUSH
24090: LD_VAR 0 2
24094: ST_TO_ADDR
// vc_control := control ;
24095: LD_ADDR_OWVAR 38
24099: PUSH
24100: LD_VAR 0 3
24104: ST_TO_ADDR
// vc_weapon := weapon ;
24105: LD_ADDR_OWVAR 40
24109: PUSH
24110: LD_VAR 0 4
24114: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24115: LD_ADDR_OWVAR 41
24119: PUSH
24120: LD_VAR 0 5
24124: ST_TO_ADDR
// end ;
24125: LD_VAR 0 6
24129: RET
// export function WantPlant ( unit ) ; var task ; begin
24130: LD_INT 0
24132: PPUSH
24133: PPUSH
// result := false ;
24134: LD_ADDR_VAR 0 2
24138: PUSH
24139: LD_INT 0
24141: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24142: LD_ADDR_VAR 0 3
24146: PUSH
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 437
24156: ST_TO_ADDR
// if task then
24157: LD_VAR 0 3
24161: IFFALSE 24189
// if task [ 1 ] [ 1 ] = p then
24163: LD_VAR 0 3
24167: PUSH
24168: LD_INT 1
24170: ARRAY
24171: PUSH
24172: LD_INT 1
24174: ARRAY
24175: PUSH
24176: LD_STRING p
24178: EQUAL
24179: IFFALSE 24189
// result := true ;
24181: LD_ADDR_VAR 0 2
24185: PUSH
24186: LD_INT 1
24188: ST_TO_ADDR
// end ;
24189: LD_VAR 0 2
24193: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24194: LD_INT 0
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
// if pos < 1 then
24200: LD_VAR 0 2
24204: PUSH
24205: LD_INT 1
24207: LESS
24208: IFFALSE 24212
// exit ;
24210: GO 24515
// if pos = 1 then
24212: LD_VAR 0 2
24216: PUSH
24217: LD_INT 1
24219: EQUAL
24220: IFFALSE 24253
// result := Replace ( arr , pos [ 1 ] , value ) else
24222: LD_ADDR_VAR 0 4
24226: PUSH
24227: LD_VAR 0 1
24231: PPUSH
24232: LD_VAR 0 2
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: PPUSH
24241: LD_VAR 0 3
24245: PPUSH
24246: CALL_OW 1
24250: ST_TO_ADDR
24251: GO 24515
// begin tmp := arr ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_VAR 0 1
24262: ST_TO_ADDR
// s_arr := [ tmp ] ;
24263: LD_ADDR_VAR 0 7
24267: PUSH
24268: LD_VAR 0 6
24272: PUSH
24273: EMPTY
24274: LIST
24275: ST_TO_ADDR
// for i = 1 to pos - 1 do
24276: LD_ADDR_VAR 0 5
24280: PUSH
24281: DOUBLE
24282: LD_INT 1
24284: DEC
24285: ST_TO_ADDR
24286: LD_VAR 0 2
24290: PUSH
24291: LD_INT 1
24293: MINUS
24294: PUSH
24295: FOR_TO
24296: IFFALSE 24341
// begin tmp := tmp [ pos [ i ] ] ;
24298: LD_ADDR_VAR 0 6
24302: PUSH
24303: LD_VAR 0 6
24307: PUSH
24308: LD_VAR 0 2
24312: PUSH
24313: LD_VAR 0 5
24317: ARRAY
24318: ARRAY
24319: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24320: LD_ADDR_VAR 0 7
24324: PUSH
24325: LD_VAR 0 7
24329: PUSH
24330: LD_VAR 0 6
24334: PUSH
24335: EMPTY
24336: LIST
24337: ADD
24338: ST_TO_ADDR
// end ;
24339: GO 24295
24341: POP
24342: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24343: LD_ADDR_VAR 0 6
24347: PUSH
24348: LD_VAR 0 6
24352: PPUSH
24353: LD_VAR 0 2
24357: PUSH
24358: LD_VAR 0 2
24362: ARRAY
24363: PPUSH
24364: LD_VAR 0 3
24368: PPUSH
24369: CALL_OW 1
24373: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24374: LD_ADDR_VAR 0 7
24378: PUSH
24379: LD_VAR 0 7
24383: PPUSH
24384: LD_VAR 0 7
24388: PPUSH
24389: LD_VAR 0 6
24393: PPUSH
24394: CALL_OW 1
24398: ST_TO_ADDR
// for i = s_arr downto 2 do
24399: LD_ADDR_VAR 0 5
24403: PUSH
24404: DOUBLE
24405: LD_VAR 0 7
24409: INC
24410: ST_TO_ADDR
24411: LD_INT 2
24413: PUSH
24414: FOR_DOWNTO
24415: IFFALSE 24499
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24417: LD_ADDR_VAR 0 6
24421: PUSH
24422: LD_VAR 0 7
24426: PUSH
24427: LD_VAR 0 5
24431: PUSH
24432: LD_INT 1
24434: MINUS
24435: ARRAY
24436: PPUSH
24437: LD_VAR 0 2
24441: PUSH
24442: LD_VAR 0 5
24446: PUSH
24447: LD_INT 1
24449: MINUS
24450: ARRAY
24451: PPUSH
24452: LD_VAR 0 7
24456: PUSH
24457: LD_VAR 0 5
24461: ARRAY
24462: PPUSH
24463: CALL_OW 1
24467: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24468: LD_ADDR_VAR 0 7
24472: PUSH
24473: LD_VAR 0 7
24477: PPUSH
24478: LD_VAR 0 5
24482: PUSH
24483: LD_INT 1
24485: MINUS
24486: PPUSH
24487: LD_VAR 0 6
24491: PPUSH
24492: CALL_OW 1
24496: ST_TO_ADDR
// end ;
24497: GO 24414
24499: POP
24500: POP
// result := s_arr [ 1 ] ;
24501: LD_ADDR_VAR 0 4
24505: PUSH
24506: LD_VAR 0 7
24510: PUSH
24511: LD_INT 1
24513: ARRAY
24514: ST_TO_ADDR
// end ; end ;
24515: LD_VAR 0 4
24519: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24520: LD_INT 0
24522: PPUSH
24523: PPUSH
// if not list then
24524: LD_VAR 0 1
24528: NOT
24529: IFFALSE 24533
// exit ;
24531: GO 24624
// i := list [ pos1 ] ;
24533: LD_ADDR_VAR 0 5
24537: PUSH
24538: LD_VAR 0 1
24542: PUSH
24543: LD_VAR 0 2
24547: ARRAY
24548: ST_TO_ADDR
// if not i then
24549: LD_VAR 0 5
24553: NOT
24554: IFFALSE 24558
// exit ;
24556: GO 24624
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24558: LD_ADDR_VAR 0 1
24562: PUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: LD_VAR 0 2
24572: PPUSH
24573: LD_VAR 0 1
24577: PUSH
24578: LD_VAR 0 3
24582: ARRAY
24583: PPUSH
24584: CALL_OW 1
24588: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24589: LD_ADDR_VAR 0 1
24593: PUSH
24594: LD_VAR 0 1
24598: PPUSH
24599: LD_VAR 0 3
24603: PPUSH
24604: LD_VAR 0 5
24608: PPUSH
24609: CALL_OW 1
24613: ST_TO_ADDR
// result := list ;
24614: LD_ADDR_VAR 0 4
24618: PUSH
24619: LD_VAR 0 1
24623: ST_TO_ADDR
// end ;
24624: LD_VAR 0 4
24628: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24629: LD_INT 0
24631: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24632: LD_ADDR_VAR 0 5
24636: PUSH
24637: LD_VAR 0 1
24641: PPUSH
24642: CALL_OW 250
24646: PPUSH
24647: LD_VAR 0 1
24651: PPUSH
24652: CALL_OW 251
24656: PPUSH
24657: LD_VAR 0 2
24661: PPUSH
24662: LD_VAR 0 3
24666: PPUSH
24667: LD_VAR 0 4
24671: PPUSH
24672: CALL 24682 0 5
24676: ST_TO_ADDR
// end ;
24677: LD_VAR 0 5
24681: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24682: LD_INT 0
24684: PPUSH
24685: PPUSH
24686: PPUSH
24687: PPUSH
// if not list then
24688: LD_VAR 0 3
24692: NOT
24693: IFFALSE 24697
// exit ;
24695: GO 25085
// result := [ ] ;
24697: LD_ADDR_VAR 0 6
24701: PUSH
24702: EMPTY
24703: ST_TO_ADDR
// for i in list do
24704: LD_ADDR_VAR 0 7
24708: PUSH
24709: LD_VAR 0 3
24713: PUSH
24714: FOR_IN
24715: IFFALSE 24917
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24717: LD_ADDR_VAR 0 9
24721: PUSH
24722: LD_VAR 0 7
24726: PPUSH
24727: LD_VAR 0 1
24731: PPUSH
24732: LD_VAR 0 2
24736: PPUSH
24737: CALL_OW 297
24741: ST_TO_ADDR
// if not result then
24742: LD_VAR 0 6
24746: NOT
24747: IFFALSE 24773
// result := [ [ i , tmp ] ] else
24749: LD_ADDR_VAR 0 6
24753: PUSH
24754: LD_VAR 0 7
24758: PUSH
24759: LD_VAR 0 9
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: ST_TO_ADDR
24771: GO 24915
// begin if result [ result ] [ 2 ] < tmp then
24773: LD_VAR 0 6
24777: PUSH
24778: LD_VAR 0 6
24782: ARRAY
24783: PUSH
24784: LD_INT 2
24786: ARRAY
24787: PUSH
24788: LD_VAR 0 9
24792: LESS
24793: IFFALSE 24835
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24795: LD_ADDR_VAR 0 6
24799: PUSH
24800: LD_VAR 0 6
24804: PPUSH
24805: LD_VAR 0 6
24809: PUSH
24810: LD_INT 1
24812: PLUS
24813: PPUSH
24814: LD_VAR 0 7
24818: PUSH
24819: LD_VAR 0 9
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PPUSH
24828: CALL_OW 2
24832: ST_TO_ADDR
24833: GO 24915
// for j = 1 to result do
24835: LD_ADDR_VAR 0 8
24839: PUSH
24840: DOUBLE
24841: LD_INT 1
24843: DEC
24844: ST_TO_ADDR
24845: LD_VAR 0 6
24849: PUSH
24850: FOR_TO
24851: IFFALSE 24913
// begin if tmp < result [ j ] [ 2 ] then
24853: LD_VAR 0 9
24857: PUSH
24858: LD_VAR 0 6
24862: PUSH
24863: LD_VAR 0 8
24867: ARRAY
24868: PUSH
24869: LD_INT 2
24871: ARRAY
24872: LESS
24873: IFFALSE 24911
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24875: LD_ADDR_VAR 0 6
24879: PUSH
24880: LD_VAR 0 6
24884: PPUSH
24885: LD_VAR 0 8
24889: PPUSH
24890: LD_VAR 0 7
24894: PUSH
24895: LD_VAR 0 9
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PPUSH
24904: CALL_OW 2
24908: ST_TO_ADDR
// break ;
24909: GO 24913
// end ; end ;
24911: GO 24850
24913: POP
24914: POP
// end ; end ;
24915: GO 24714
24917: POP
24918: POP
// if result and not asc then
24919: LD_VAR 0 6
24923: PUSH
24924: LD_VAR 0 4
24928: NOT
24929: AND
24930: IFFALSE 25005
// begin tmp := result ;
24932: LD_ADDR_VAR 0 9
24936: PUSH
24937: LD_VAR 0 6
24941: ST_TO_ADDR
// for i = tmp downto 1 do
24942: LD_ADDR_VAR 0 7
24946: PUSH
24947: DOUBLE
24948: LD_VAR 0 9
24952: INC
24953: ST_TO_ADDR
24954: LD_INT 1
24956: PUSH
24957: FOR_DOWNTO
24958: IFFALSE 25003
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
24960: LD_ADDR_VAR 0 6
24964: PUSH
24965: LD_VAR 0 6
24969: PPUSH
24970: LD_VAR 0 9
24974: PUSH
24975: LD_VAR 0 7
24979: MINUS
24980: PUSH
24981: LD_INT 1
24983: PLUS
24984: PPUSH
24985: LD_VAR 0 9
24989: PUSH
24990: LD_VAR 0 7
24994: ARRAY
24995: PPUSH
24996: CALL_OW 1
25000: ST_TO_ADDR
25001: GO 24957
25003: POP
25004: POP
// end ; tmp := [ ] ;
25005: LD_ADDR_VAR 0 9
25009: PUSH
25010: EMPTY
25011: ST_TO_ADDR
// if mode then
25012: LD_VAR 0 5
25016: IFFALSE 25085
// begin for i = 1 to result do
25018: LD_ADDR_VAR 0 7
25022: PUSH
25023: DOUBLE
25024: LD_INT 1
25026: DEC
25027: ST_TO_ADDR
25028: LD_VAR 0 6
25032: PUSH
25033: FOR_TO
25034: IFFALSE 25073
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25036: LD_ADDR_VAR 0 9
25040: PUSH
25041: LD_VAR 0 9
25045: PPUSH
25046: LD_VAR 0 7
25050: PPUSH
25051: LD_VAR 0 6
25055: PUSH
25056: LD_VAR 0 7
25060: ARRAY
25061: PUSH
25062: LD_INT 1
25064: ARRAY
25065: PPUSH
25066: CALL_OW 1
25070: ST_TO_ADDR
25071: GO 25033
25073: POP
25074: POP
// result := tmp ;
25075: LD_ADDR_VAR 0 6
25079: PUSH
25080: LD_VAR 0 9
25084: ST_TO_ADDR
// end ; end ;
25085: LD_VAR 0 6
25089: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25090: LD_INT 0
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25098: LD_ADDR_VAR 0 5
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: EMPTY
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: ST_TO_ADDR
// if not x or not y then
25120: LD_VAR 0 2
25124: NOT
25125: PUSH
25126: LD_VAR 0 3
25130: NOT
25131: OR
25132: IFFALSE 25136
// exit ;
25134: GO 26782
// if not range then
25136: LD_VAR 0 4
25140: NOT
25141: IFFALSE 25151
// range := 10 ;
25143: LD_ADDR_VAR 0 4
25147: PUSH
25148: LD_INT 10
25150: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25151: LD_ADDR_VAR 0 8
25155: PUSH
25156: LD_INT 81
25158: PUSH
25159: LD_VAR 0 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 92
25170: PUSH
25171: LD_VAR 0 2
25175: PUSH
25176: LD_VAR 0 3
25180: PUSH
25181: LD_VAR 0 4
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 3
25194: PUSH
25195: LD_INT 21
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: PPUSH
25214: CALL_OW 69
25218: ST_TO_ADDR
// if not tmp then
25219: LD_VAR 0 8
25223: NOT
25224: IFFALSE 25228
// exit ;
25226: GO 26782
// for i in tmp do
25228: LD_ADDR_VAR 0 6
25232: PUSH
25233: LD_VAR 0 8
25237: PUSH
25238: FOR_IN
25239: IFFALSE 26757
// begin points := [ 0 , 0 , 0 ] ;
25241: LD_ADDR_VAR 0 9
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: ST_TO_ADDR
// bpoints := 1 ;
25260: LD_ADDR_VAR 0 10
25264: PUSH
25265: LD_INT 1
25267: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25268: LD_VAR 0 6
25272: PPUSH
25273: CALL_OW 247
25277: PUSH
25278: LD_INT 1
25280: DOUBLE
25281: EQUAL
25282: IFTRUE 25286
25284: GO 25864
25286: POP
// begin if GetClass ( i ) = 1 then
25287: LD_VAR 0 6
25291: PPUSH
25292: CALL_OW 257
25296: PUSH
25297: LD_INT 1
25299: EQUAL
25300: IFFALSE 25321
// points := [ 10 , 5 , 3 ] ;
25302: LD_ADDR_VAR 0 9
25306: PUSH
25307: LD_INT 10
25309: PUSH
25310: LD_INT 5
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25321: LD_VAR 0 6
25325: PPUSH
25326: CALL_OW 257
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 4
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: IN
25345: IFFALSE 25366
// points := [ 3 , 2 , 1 ] ;
25347: LD_ADDR_VAR 0 9
25351: PUSH
25352: LD_INT 3
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25366: LD_VAR 0 6
25370: PPUSH
25371: CALL_OW 257
25375: PUSH
25376: LD_INT 5
25378: EQUAL
25379: IFFALSE 25400
// points := [ 130 , 5 , 2 ] ;
25381: LD_ADDR_VAR 0 9
25385: PUSH
25386: LD_INT 130
25388: PUSH
25389: LD_INT 5
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25400: LD_VAR 0 6
25404: PPUSH
25405: CALL_OW 257
25409: PUSH
25410: LD_INT 8
25412: EQUAL
25413: IFFALSE 25434
// points := [ 35 , 35 , 30 ] ;
25415: LD_ADDR_VAR 0 9
25419: PUSH
25420: LD_INT 35
25422: PUSH
25423: LD_INT 35
25425: PUSH
25426: LD_INT 30
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25434: LD_VAR 0 6
25438: PPUSH
25439: CALL_OW 257
25443: PUSH
25444: LD_INT 9
25446: EQUAL
25447: IFFALSE 25468
// points := [ 20 , 55 , 40 ] ;
25449: LD_ADDR_VAR 0 9
25453: PUSH
25454: LD_INT 20
25456: PUSH
25457: LD_INT 55
25459: PUSH
25460: LD_INT 40
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: LIST
25467: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25468: LD_VAR 0 6
25472: PPUSH
25473: CALL_OW 257
25477: PUSH
25478: LD_INT 12
25480: PUSH
25481: LD_INT 16
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: IN
25488: IFFALSE 25509
// points := [ 5 , 3 , 2 ] ;
25490: LD_ADDR_VAR 0 9
25494: PUSH
25495: LD_INT 5
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25509: LD_VAR 0 6
25513: PPUSH
25514: CALL_OW 257
25518: PUSH
25519: LD_INT 17
25521: EQUAL
25522: IFFALSE 25543
// points := [ 100 , 50 , 75 ] ;
25524: LD_ADDR_VAR 0 9
25528: PUSH
25529: LD_INT 100
25531: PUSH
25532: LD_INT 50
25534: PUSH
25535: LD_INT 75
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: LIST
25542: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25543: LD_VAR 0 6
25547: PPUSH
25548: CALL_OW 257
25552: PUSH
25553: LD_INT 15
25555: EQUAL
25556: IFFALSE 25577
// points := [ 10 , 5 , 3 ] ;
25558: LD_ADDR_VAR 0 9
25562: PUSH
25563: LD_INT 10
25565: PUSH
25566: LD_INT 5
25568: PUSH
25569: LD_INT 3
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25577: LD_VAR 0 6
25581: PPUSH
25582: CALL_OW 257
25586: PUSH
25587: LD_INT 14
25589: EQUAL
25590: IFFALSE 25611
// points := [ 10 , 0 , 0 ] ;
25592: LD_ADDR_VAR 0 9
25596: PUSH
25597: LD_INT 10
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25611: LD_VAR 0 6
25615: PPUSH
25616: CALL_OW 257
25620: PUSH
25621: LD_INT 11
25623: EQUAL
25624: IFFALSE 25645
// points := [ 30 , 10 , 5 ] ;
25626: LD_ADDR_VAR 0 9
25630: PUSH
25631: LD_INT 30
25633: PUSH
25634: LD_INT 10
25636: PUSH
25637: LD_INT 5
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: LIST
25644: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25645: LD_VAR 0 1
25649: PPUSH
25650: LD_INT 5
25652: PPUSH
25653: CALL_OW 321
25657: PUSH
25658: LD_INT 2
25660: EQUAL
25661: IFFALSE 25678
// bpoints := bpoints * 1.8 ;
25663: LD_ADDR_VAR 0 10
25667: PUSH
25668: LD_VAR 0 10
25672: PUSH
25673: LD_REAL  1.80000000000000E+0000
25676: MUL
25677: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25678: LD_VAR 0 6
25682: PPUSH
25683: CALL_OW 257
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: LD_INT 4
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: IN
25706: PUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: LD_INT 51
25714: PPUSH
25715: CALL_OW 321
25719: PUSH
25720: LD_INT 2
25722: EQUAL
25723: AND
25724: IFFALSE 25741
// bpoints := bpoints * 1.2 ;
25726: LD_ADDR_VAR 0 10
25730: PUSH
25731: LD_VAR 0 10
25735: PUSH
25736: LD_REAL  1.20000000000000E+0000
25739: MUL
25740: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25741: LD_VAR 0 6
25745: PPUSH
25746: CALL_OW 257
25750: PUSH
25751: LD_INT 5
25753: PUSH
25754: LD_INT 7
25756: PUSH
25757: LD_INT 9
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: IN
25765: PUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: LD_INT 52
25773: PPUSH
25774: CALL_OW 321
25778: PUSH
25779: LD_INT 2
25781: EQUAL
25782: AND
25783: IFFALSE 25800
// bpoints := bpoints * 1.5 ;
25785: LD_ADDR_VAR 0 10
25789: PUSH
25790: LD_VAR 0 10
25794: PUSH
25795: LD_REAL  1.50000000000000E+0000
25798: MUL
25799: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_INT 66
25807: PPUSH
25808: CALL_OW 321
25812: PUSH
25813: LD_INT 2
25815: EQUAL
25816: IFFALSE 25833
// bpoints := bpoints * 1.1 ;
25818: LD_ADDR_VAR 0 10
25822: PUSH
25823: LD_VAR 0 10
25827: PUSH
25828: LD_REAL  1.10000000000000E+0000
25831: MUL
25832: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25833: LD_ADDR_VAR 0 10
25837: PUSH
25838: LD_VAR 0 10
25842: PUSH
25843: LD_VAR 0 6
25847: PPUSH
25848: LD_INT 1
25850: PPUSH
25851: CALL_OW 259
25855: PUSH
25856: LD_REAL  1.15000000000000E+0000
25859: MUL
25860: MUL
25861: ST_TO_ADDR
// end ; unit_vehicle :
25862: GO 26686
25864: LD_INT 2
25866: DOUBLE
25867: EQUAL
25868: IFTRUE 25872
25870: GO 26674
25872: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25873: LD_VAR 0 6
25877: PPUSH
25878: CALL_OW 264
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 42
25888: PUSH
25889: LD_INT 24
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: LIST
25896: IN
25897: IFFALSE 25918
// points := [ 25 , 5 , 3 ] ;
25899: LD_ADDR_VAR 0 9
25903: PUSH
25904: LD_INT 25
25906: PUSH
25907: LD_INT 5
25909: PUSH
25910: LD_INT 3
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
25918: LD_VAR 0 6
25922: PPUSH
25923: CALL_OW 264
25927: PUSH
25928: LD_INT 4
25930: PUSH
25931: LD_INT 43
25933: PUSH
25934: LD_INT 25
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: IN
25942: IFFALSE 25963
// points := [ 40 , 15 , 5 ] ;
25944: LD_ADDR_VAR 0 9
25948: PUSH
25949: LD_INT 40
25951: PUSH
25952: LD_INT 15
25954: PUSH
25955: LD_INT 5
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
25963: LD_VAR 0 6
25967: PPUSH
25968: CALL_OW 264
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: LD_INT 23
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: IN
25983: IFFALSE 26004
// points := [ 7 , 25 , 8 ] ;
25985: LD_ADDR_VAR 0 9
25989: PUSH
25990: LD_INT 7
25992: PUSH
25993: LD_INT 25
25995: PUSH
25996: LD_INT 8
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26004: LD_VAR 0 6
26008: PPUSH
26009: CALL_OW 264
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: LD_INT 27
26019: PUSH
26020: LD_INT 44
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: IN
26028: IFFALSE 26049
// points := [ 14 , 50 , 16 ] ;
26030: LD_ADDR_VAR 0 9
26034: PUSH
26035: LD_INT 14
26037: PUSH
26038: LD_INT 50
26040: PUSH
26041: LD_INT 16
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26049: LD_VAR 0 6
26053: PPUSH
26054: CALL_OW 264
26058: PUSH
26059: LD_INT 6
26061: PUSH
26062: LD_INT 46
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: IN
26069: IFFALSE 26090
// points := [ 32 , 120 , 70 ] ;
26071: LD_ADDR_VAR 0 9
26075: PUSH
26076: LD_INT 32
26078: PUSH
26079: LD_INT 120
26081: PUSH
26082: LD_INT 70
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26090: LD_VAR 0 6
26094: PPUSH
26095: CALL_OW 264
26099: PUSH
26100: LD_INT 7
26102: PUSH
26103: LD_INT 28
26105: PUSH
26106: LD_INT 45
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: IN
26114: IFFALSE 26135
// points := [ 35 , 20 , 45 ] ;
26116: LD_ADDR_VAR 0 9
26120: PUSH
26121: LD_INT 35
26123: PUSH
26124: LD_INT 20
26126: PUSH
26127: LD_INT 45
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26135: LD_VAR 0 6
26139: PPUSH
26140: CALL_OW 264
26144: PUSH
26145: LD_INT 47
26147: PUSH
26148: EMPTY
26149: LIST
26150: IN
26151: IFFALSE 26172
// points := [ 67 , 45 , 75 ] ;
26153: LD_ADDR_VAR 0 9
26157: PUSH
26158: LD_INT 67
26160: PUSH
26161: LD_INT 45
26163: PUSH
26164: LD_INT 75
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26172: LD_VAR 0 6
26176: PPUSH
26177: CALL_OW 264
26181: PUSH
26182: LD_INT 26
26184: PUSH
26185: EMPTY
26186: LIST
26187: IN
26188: IFFALSE 26209
// points := [ 120 , 30 , 80 ] ;
26190: LD_ADDR_VAR 0 9
26194: PUSH
26195: LD_INT 120
26197: PUSH
26198: LD_INT 30
26200: PUSH
26201: LD_INT 80
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: LIST
26208: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26209: LD_VAR 0 6
26213: PPUSH
26214: CALL_OW 264
26218: PUSH
26219: LD_INT 22
26221: PUSH
26222: EMPTY
26223: LIST
26224: IN
26225: IFFALSE 26246
// points := [ 40 , 1 , 1 ] ;
26227: LD_ADDR_VAR 0 9
26231: PUSH
26232: LD_INT 40
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26246: LD_VAR 0 6
26250: PPUSH
26251: CALL_OW 264
26255: PUSH
26256: LD_INT 29
26258: PUSH
26259: EMPTY
26260: LIST
26261: IN
26262: IFFALSE 26283
// points := [ 70 , 200 , 400 ] ;
26264: LD_ADDR_VAR 0 9
26268: PUSH
26269: LD_INT 70
26271: PUSH
26272: LD_INT 200
26274: PUSH
26275: LD_INT 400
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: LIST
26282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26283: LD_VAR 0 6
26287: PPUSH
26288: CALL_OW 264
26292: PUSH
26293: LD_INT 14
26295: PUSH
26296: LD_INT 53
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: IN
26303: IFFALSE 26324
// points := [ 40 , 10 , 20 ] ;
26305: LD_ADDR_VAR 0 9
26309: PUSH
26310: LD_INT 40
26312: PUSH
26313: LD_INT 10
26315: PUSH
26316: LD_INT 20
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26324: LD_VAR 0 6
26328: PPUSH
26329: CALL_OW 264
26333: PUSH
26334: LD_INT 9
26336: PUSH
26337: EMPTY
26338: LIST
26339: IN
26340: IFFALSE 26361
// points := [ 5 , 70 , 20 ] ;
26342: LD_ADDR_VAR 0 9
26346: PUSH
26347: LD_INT 5
26349: PUSH
26350: LD_INT 70
26352: PUSH
26353: LD_INT 20
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26361: LD_VAR 0 6
26365: PPUSH
26366: CALL_OW 264
26370: PUSH
26371: LD_INT 10
26373: PUSH
26374: EMPTY
26375: LIST
26376: IN
26377: IFFALSE 26398
// points := [ 35 , 110 , 70 ] ;
26379: LD_ADDR_VAR 0 9
26383: PUSH
26384: LD_INT 35
26386: PUSH
26387: LD_INT 110
26389: PUSH
26390: LD_INT 70
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26398: LD_VAR 0 6
26402: PPUSH
26403: CALL_OW 265
26407: PUSH
26408: LD_INT 25
26410: EQUAL
26411: IFFALSE 26432
// points := [ 80 , 65 , 100 ] ;
26413: LD_ADDR_VAR 0 9
26417: PUSH
26418: LD_INT 80
26420: PUSH
26421: LD_INT 65
26423: PUSH
26424: LD_INT 100
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26432: LD_VAR 0 6
26436: PPUSH
26437: CALL_OW 263
26441: PUSH
26442: LD_INT 1
26444: EQUAL
26445: IFFALSE 26480
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26447: LD_ADDR_VAR 0 10
26451: PUSH
26452: LD_VAR 0 10
26456: PUSH
26457: LD_VAR 0 6
26461: PPUSH
26462: CALL_OW 311
26466: PPUSH
26467: LD_INT 3
26469: PPUSH
26470: CALL_OW 259
26474: PUSH
26475: LD_INT 4
26477: MUL
26478: MUL
26479: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26480: LD_VAR 0 6
26484: PPUSH
26485: CALL_OW 263
26489: PUSH
26490: LD_INT 2
26492: EQUAL
26493: IFFALSE 26544
// begin j := IsControledBy ( i ) ;
26495: LD_ADDR_VAR 0 7
26499: PUSH
26500: LD_VAR 0 6
26504: PPUSH
26505: CALL_OW 312
26509: ST_TO_ADDR
// if j then
26510: LD_VAR 0 7
26514: IFFALSE 26544
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26516: LD_ADDR_VAR 0 10
26520: PUSH
26521: LD_VAR 0 10
26525: PUSH
26526: LD_VAR 0 7
26530: PPUSH
26531: LD_INT 3
26533: PPUSH
26534: CALL_OW 259
26538: PUSH
26539: LD_INT 3
26541: MUL
26542: MUL
26543: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26544: LD_VAR 0 6
26548: PPUSH
26549: CALL_OW 264
26553: PUSH
26554: LD_INT 5
26556: PUSH
26557: LD_INT 6
26559: PUSH
26560: LD_INT 46
26562: PUSH
26563: LD_INT 44
26565: PUSH
26566: LD_INT 47
26568: PUSH
26569: LD_INT 45
26571: PUSH
26572: LD_INT 28
26574: PUSH
26575: LD_INT 7
26577: PUSH
26578: LD_INT 27
26580: PUSH
26581: LD_INT 29
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: IN
26596: PUSH
26597: LD_VAR 0 1
26601: PPUSH
26602: LD_INT 52
26604: PPUSH
26605: CALL_OW 321
26609: PUSH
26610: LD_INT 2
26612: EQUAL
26613: AND
26614: IFFALSE 26631
// bpoints := bpoints * 1.2 ;
26616: LD_ADDR_VAR 0 10
26620: PUSH
26621: LD_VAR 0 10
26625: PUSH
26626: LD_REAL  1.20000000000000E+0000
26629: MUL
26630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26631: LD_VAR 0 6
26635: PPUSH
26636: CALL_OW 264
26640: PUSH
26641: LD_INT 6
26643: PUSH
26644: LD_INT 46
26646: PUSH
26647: LD_INT 47
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: IN
26655: IFFALSE 26672
// bpoints := bpoints * 1.2 ;
26657: LD_ADDR_VAR 0 10
26661: PUSH
26662: LD_VAR 0 10
26666: PUSH
26667: LD_REAL  1.20000000000000E+0000
26670: MUL
26671: ST_TO_ADDR
// end ; unit_building :
26672: GO 26686
26674: LD_INT 3
26676: DOUBLE
26677: EQUAL
26678: IFTRUE 26682
26680: GO 26685
26682: POP
// ; end ;
26683: GO 26686
26685: POP
// for j = 1 to 3 do
26686: LD_ADDR_VAR 0 7
26690: PUSH
26691: DOUBLE
26692: LD_INT 1
26694: DEC
26695: ST_TO_ADDR
26696: LD_INT 3
26698: PUSH
26699: FOR_TO
26700: IFFALSE 26753
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26702: LD_ADDR_VAR 0 5
26706: PUSH
26707: LD_VAR 0 5
26711: PPUSH
26712: LD_VAR 0 7
26716: PPUSH
26717: LD_VAR 0 5
26721: PUSH
26722: LD_VAR 0 7
26726: ARRAY
26727: PUSH
26728: LD_VAR 0 9
26732: PUSH
26733: LD_VAR 0 7
26737: ARRAY
26738: PUSH
26739: LD_VAR 0 10
26743: MUL
26744: PLUS
26745: PPUSH
26746: CALL_OW 1
26750: ST_TO_ADDR
26751: GO 26699
26753: POP
26754: POP
// end ;
26755: GO 25238
26757: POP
26758: POP
// result := Replace ( result , 4 , tmp ) ;
26759: LD_ADDR_VAR 0 5
26763: PUSH
26764: LD_VAR 0 5
26768: PPUSH
26769: LD_INT 4
26771: PPUSH
26772: LD_VAR 0 8
26776: PPUSH
26777: CALL_OW 1
26781: ST_TO_ADDR
// end ;
26782: LD_VAR 0 5
26786: RET
// export function DangerAtRange ( unit , range ) ; begin
26787: LD_INT 0
26789: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 255
26804: PPUSH
26805: LD_VAR 0 1
26809: PPUSH
26810: CALL_OW 250
26814: PPUSH
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 251
26824: PPUSH
26825: LD_VAR 0 2
26829: PPUSH
26830: CALL 25090 0 4
26834: ST_TO_ADDR
// end ;
26835: LD_VAR 0 3
26839: RET
// export function DangerInArea ( side , area ) ; begin
26840: LD_INT 0
26842: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26843: LD_ADDR_VAR 0 3
26847: PUSH
26848: LD_VAR 0 2
26852: PPUSH
26853: LD_INT 81
26855: PUSH
26856: LD_VAR 0 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PPUSH
26865: CALL_OW 70
26869: ST_TO_ADDR
// end ;
26870: LD_VAR 0 3
26874: RET
// export function IsExtension ( b ) ; begin
26875: LD_INT 0
26877: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_VAR 0 1
26887: PUSH
26888: LD_INT 23
26890: PUSH
26891: LD_INT 20
26893: PUSH
26894: LD_INT 22
26896: PUSH
26897: LD_INT 17
26899: PUSH
26900: LD_INT 24
26902: PUSH
26903: LD_INT 21
26905: PUSH
26906: LD_INT 19
26908: PUSH
26909: LD_INT 16
26911: PUSH
26912: LD_INT 25
26914: PUSH
26915: LD_INT 18
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: IN
26930: ST_TO_ADDR
// end ;
26931: LD_VAR 0 2
26935: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
26936: LD_INT 0
26938: PPUSH
26939: PPUSH
26940: PPUSH
// result := [ ] ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: EMPTY
26947: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
26948: LD_ADDR_VAR 0 4
26952: PUSH
26953: LD_VAR 0 2
26957: PPUSH
26958: LD_INT 21
26960: PUSH
26961: LD_INT 3
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 70
26972: ST_TO_ADDR
// if not tmp then
26973: LD_VAR 0 4
26977: NOT
26978: IFFALSE 26982
// exit ;
26980: GO 27040
// for i in tmp do
26982: LD_ADDR_VAR 0 5
26986: PUSH
26987: LD_VAR 0 4
26991: PUSH
26992: FOR_IN
26993: IFFALSE 27028
// if GetBase ( i ) <> base then
26995: LD_VAR 0 5
26999: PPUSH
27000: CALL_OW 274
27004: PUSH
27005: LD_VAR 0 1
27009: NONEQUAL
27010: IFFALSE 27026
// ComLinkToBase ( base , i ) ;
27012: LD_VAR 0 1
27016: PPUSH
27017: LD_VAR 0 5
27021: PPUSH
27022: CALL_OW 169
27026: GO 26992
27028: POP
27029: POP
// result := tmp ;
27030: LD_ADDR_VAR 0 3
27034: PUSH
27035: LD_VAR 0 4
27039: ST_TO_ADDR
// end ;
27040: LD_VAR 0 3
27044: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27045: LD_INT 0
27047: PPUSH
27048: PPUSH
// if BuildingStatus ( b ) = bs_build then
27049: LD_VAR 0 2
27053: PPUSH
27054: CALL_OW 461
27058: PUSH
27059: LD_INT 1
27061: EQUAL
27062: IFFALSE 27122
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27064: LD_VAR 0 1
27068: PPUSH
27069: LD_STRING h
27071: PUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: CALL_OW 250
27081: PUSH
27082: LD_VAR 0 2
27086: PPUSH
27087: CALL_OW 251
27091: PUSH
27092: LD_VAR 0 2
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: PUSH
27115: EMPTY
27116: LIST
27117: PPUSH
27118: CALL_OW 446
// end ;
27122: LD_VAR 0 3
27126: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27127: LD_INT 0
27129: PPUSH
27130: PPUSH
27131: PPUSH
27132: PPUSH
27133: PPUSH
27134: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27135: LD_VAR 0 1
27139: NOT
27140: PUSH
27141: LD_VAR 0 1
27145: PPUSH
27146: CALL_OW 263
27150: PUSH
27151: LD_INT 2
27153: EQUAL
27154: NOT
27155: OR
27156: IFFALSE 27160
// exit ;
27158: GO 27476
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27160: LD_ADDR_VAR 0 6
27164: PUSH
27165: LD_INT 22
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: CALL_OW 255
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 30
27187: PUSH
27188: LD_INT 36
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 34
27197: PUSH
27198: LD_INT 31
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: LIST
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PPUSH
27214: CALL_OW 69
27218: ST_TO_ADDR
// if not tmp then
27219: LD_VAR 0 6
27223: NOT
27224: IFFALSE 27228
// exit ;
27226: GO 27476
// result := [ ] ;
27228: LD_ADDR_VAR 0 2
27232: PUSH
27233: EMPTY
27234: ST_TO_ADDR
// for i in tmp do
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_VAR 0 6
27244: PUSH
27245: FOR_IN
27246: IFFALSE 27317
// begin t := UnitsInside ( i ) ;
27248: LD_ADDR_VAR 0 4
27252: PUSH
27253: LD_VAR 0 3
27257: PPUSH
27258: CALL_OW 313
27262: ST_TO_ADDR
// if t then
27263: LD_VAR 0 4
27267: IFFALSE 27315
// for j in t do
27269: LD_ADDR_VAR 0 7
27273: PUSH
27274: LD_VAR 0 4
27278: PUSH
27279: FOR_IN
27280: IFFALSE 27313
// result := Insert ( result , result + 1 , j ) ;
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_VAR 0 2
27291: PPUSH
27292: LD_VAR 0 2
27296: PUSH
27297: LD_INT 1
27299: PLUS
27300: PPUSH
27301: LD_VAR 0 7
27305: PPUSH
27306: CALL_OW 2
27310: ST_TO_ADDR
27311: GO 27279
27313: POP
27314: POP
// end ;
27315: GO 27245
27317: POP
27318: POP
// if not result then
27319: LD_VAR 0 2
27323: NOT
27324: IFFALSE 27328
// exit ;
27326: GO 27476
// mech := result [ 1 ] ;
27328: LD_ADDR_VAR 0 5
27332: PUSH
27333: LD_VAR 0 2
27337: PUSH
27338: LD_INT 1
27340: ARRAY
27341: ST_TO_ADDR
// if result > 1 then
27342: LD_VAR 0 2
27346: PUSH
27347: LD_INT 1
27349: GREATER
27350: IFFALSE 27462
// for i = 2 to result do
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: DOUBLE
27358: LD_INT 2
27360: DEC
27361: ST_TO_ADDR
27362: LD_VAR 0 2
27366: PUSH
27367: FOR_TO
27368: IFFALSE 27460
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27370: LD_ADDR_VAR 0 4
27374: PUSH
27375: LD_VAR 0 2
27379: PUSH
27380: LD_VAR 0 3
27384: ARRAY
27385: PPUSH
27386: LD_INT 3
27388: PPUSH
27389: CALL_OW 259
27393: PUSH
27394: LD_VAR 0 2
27398: PUSH
27399: LD_VAR 0 3
27403: ARRAY
27404: PPUSH
27405: CALL_OW 432
27409: MINUS
27410: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27411: LD_VAR 0 4
27415: PUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: LD_INT 3
27423: PPUSH
27424: CALL_OW 259
27428: PUSH
27429: LD_VAR 0 5
27433: PPUSH
27434: CALL_OW 432
27438: MINUS
27439: GREATEREQUAL
27440: IFFALSE 27458
// mech := result [ i ] ;
27442: LD_ADDR_VAR 0 5
27446: PUSH
27447: LD_VAR 0 2
27451: PUSH
27452: LD_VAR 0 3
27456: ARRAY
27457: ST_TO_ADDR
// end ;
27458: GO 27367
27460: POP
27461: POP
// ComLinkTo ( vehicle , mech ) ;
27462: LD_VAR 0 1
27466: PPUSH
27467: LD_VAR 0 5
27471: PPUSH
27472: CALL_OW 135
// end ;
27476: LD_VAR 0 2
27480: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27481: LD_INT 0
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
27487: PPUSH
27488: PPUSH
27489: PPUSH
27490: PPUSH
27491: PPUSH
27492: PPUSH
27493: PPUSH
27494: PPUSH
27495: PPUSH
// result := [ ] ;
27496: LD_ADDR_VAR 0 7
27500: PUSH
27501: EMPTY
27502: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27503: LD_VAR 0 1
27507: PPUSH
27508: CALL_OW 266
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: IN
27523: NOT
27524: IFFALSE 27528
// exit ;
27526: GO 29159
// if name then
27528: LD_VAR 0 3
27532: IFFALSE 27548
// SetBName ( base_dep , name ) ;
27534: LD_VAR 0 1
27538: PPUSH
27539: LD_VAR 0 3
27543: PPUSH
27544: CALL_OW 500
// base := GetBase ( base_dep ) ;
27548: LD_ADDR_VAR 0 15
27552: PUSH
27553: LD_VAR 0 1
27557: PPUSH
27558: CALL_OW 274
27562: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27563: LD_ADDR_VAR 0 16
27567: PUSH
27568: LD_VAR 0 1
27572: PPUSH
27573: CALL_OW 255
27577: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27578: LD_ADDR_VAR 0 17
27582: PUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 248
27592: ST_TO_ADDR
// if sources then
27593: LD_VAR 0 5
27597: IFFALSE 27644
// for i = 1 to 3 do
27599: LD_ADDR_VAR 0 8
27603: PUSH
27604: DOUBLE
27605: LD_INT 1
27607: DEC
27608: ST_TO_ADDR
27609: LD_INT 3
27611: PUSH
27612: FOR_TO
27613: IFFALSE 27642
// AddResourceType ( base , i , sources [ i ] ) ;
27615: LD_VAR 0 15
27619: PPUSH
27620: LD_VAR 0 8
27624: PPUSH
27625: LD_VAR 0 5
27629: PUSH
27630: LD_VAR 0 8
27634: ARRAY
27635: PPUSH
27636: CALL_OW 276
27640: GO 27612
27642: POP
27643: POP
// buildings := GetBaseBuildings ( base , area ) ;
27644: LD_ADDR_VAR 0 18
27648: PUSH
27649: LD_VAR 0 15
27653: PPUSH
27654: LD_VAR 0 2
27658: PPUSH
27659: CALL 26936 0 2
27663: ST_TO_ADDR
// InitHc ;
27664: CALL_OW 19
// InitUc ;
27668: CALL_OW 18
// uc_side := side ;
27672: LD_ADDR_OWVAR 20
27676: PUSH
27677: LD_VAR 0 16
27681: ST_TO_ADDR
// uc_nation := nation ;
27682: LD_ADDR_OWVAR 21
27686: PUSH
27687: LD_VAR 0 17
27691: ST_TO_ADDR
// if buildings then
27692: LD_VAR 0 18
27696: IFFALSE 29018
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27698: LD_ADDR_VAR 0 19
27702: PUSH
27703: LD_VAR 0 18
27707: PPUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 30
27713: PUSH
27714: LD_INT 29
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 30
27723: PUSH
27724: LD_INT 30
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 72
27740: ST_TO_ADDR
// if tmp then
27741: LD_VAR 0 19
27745: IFFALSE 27793
// for i in tmp do
27747: LD_ADDR_VAR 0 8
27751: PUSH
27752: LD_VAR 0 19
27756: PUSH
27757: FOR_IN
27758: IFFALSE 27791
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27760: LD_VAR 0 8
27764: PPUSH
27765: CALL_OW 250
27769: PPUSH
27770: LD_VAR 0 8
27774: PPUSH
27775: CALL_OW 251
27779: PPUSH
27780: LD_VAR 0 16
27784: PPUSH
27785: CALL_OW 441
27789: GO 27757
27791: POP
27792: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27793: LD_VAR 0 18
27797: PPUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 30
27803: PUSH
27804: LD_INT 32
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 33
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: PPUSH
27826: CALL_OW 72
27830: IFFALSE 27918
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27832: LD_ADDR_VAR 0 8
27836: PUSH
27837: LD_VAR 0 18
27841: PPUSH
27842: LD_INT 2
27844: PUSH
27845: LD_INT 30
27847: PUSH
27848: LD_INT 32
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 30
27857: PUSH
27858: LD_INT 33
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: PPUSH
27870: CALL_OW 72
27874: PUSH
27875: FOR_IN
27876: IFFALSE 27916
// begin if not GetBWeapon ( i ) then
27878: LD_VAR 0 8
27882: PPUSH
27883: CALL_OW 269
27887: NOT
27888: IFFALSE 27914
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27890: LD_VAR 0 8
27894: PPUSH
27895: LD_VAR 0 8
27899: PPUSH
27900: LD_VAR 0 2
27904: PPUSH
27905: CALL 29164 0 2
27909: PPUSH
27910: CALL_OW 431
// end ;
27914: GO 27875
27916: POP
27917: POP
// end ; for i = 1 to personel do
27918: LD_ADDR_VAR 0 8
27922: PUSH
27923: DOUBLE
27924: LD_INT 1
27926: DEC
27927: ST_TO_ADDR
27928: LD_VAR 0 6
27932: PUSH
27933: FOR_TO
27934: IFFALSE 28998
// begin if i > 4 then
27936: LD_VAR 0 8
27940: PUSH
27941: LD_INT 4
27943: GREATER
27944: IFFALSE 27948
// break ;
27946: GO 28998
// case i of 1 :
27948: LD_VAR 0 8
27952: PUSH
27953: LD_INT 1
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 28041
27961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
27962: LD_ADDR_VAR 0 12
27966: PUSH
27967: LD_VAR 0 18
27971: PPUSH
27972: LD_INT 22
27974: PUSH
27975: LD_VAR 0 16
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 58
27986: PUSH
27987: EMPTY
27988: LIST
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 30
27995: PUSH
27996: LD_INT 32
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 30
28005: PUSH
28006: LD_INT 4
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 30
28015: PUSH
28016: LD_INT 5
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: PPUSH
28034: CALL_OW 72
28038: ST_TO_ADDR
28039: GO 28263
28041: LD_INT 2
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28111
28049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28050: LD_ADDR_VAR 0 12
28054: PUSH
28055: LD_VAR 0 18
28059: PPUSH
28060: LD_INT 22
28062: PUSH
28063: LD_VAR 0 16
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: LD_INT 30
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 30
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: LIST
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PPUSH
28104: CALL_OW 72
28108: ST_TO_ADDR
28109: GO 28263
28111: LD_INT 3
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28119
28117: GO 28181
28119: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28120: LD_ADDR_VAR 0 12
28124: PUSH
28125: LD_VAR 0 18
28129: PPUSH
28130: LD_INT 22
28132: PUSH
28133: LD_VAR 0 16
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 30
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 30
28157: PUSH
28158: LD_INT 3
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PPUSH
28174: CALL_OW 72
28178: ST_TO_ADDR
28179: GO 28263
28181: LD_INT 4
28183: DOUBLE
28184: EQUAL
28185: IFTRUE 28189
28187: GO 28262
28189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28190: LD_ADDR_VAR 0 12
28194: PUSH
28195: LD_VAR 0 18
28199: PPUSH
28200: LD_INT 22
28202: PUSH
28203: LD_VAR 0 16
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: LD_INT 30
28217: PUSH
28218: LD_INT 6
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 30
28227: PUSH
28228: LD_INT 7
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 30
28237: PUSH
28238: LD_INT 8
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PPUSH
28255: CALL_OW 72
28259: ST_TO_ADDR
28260: GO 28263
28262: POP
// if i = 1 then
28263: LD_VAR 0 8
28267: PUSH
28268: LD_INT 1
28270: EQUAL
28271: IFFALSE 28382
// begin tmp := [ ] ;
28273: LD_ADDR_VAR 0 19
28277: PUSH
28278: EMPTY
28279: ST_TO_ADDR
// for j in f do
28280: LD_ADDR_VAR 0 9
28284: PUSH
28285: LD_VAR 0 12
28289: PUSH
28290: FOR_IN
28291: IFFALSE 28364
// if GetBType ( j ) = b_bunker then
28293: LD_VAR 0 9
28297: PPUSH
28298: CALL_OW 266
28302: PUSH
28303: LD_INT 32
28305: EQUAL
28306: IFFALSE 28333
// tmp := Insert ( tmp , 1 , j ) else
28308: LD_ADDR_VAR 0 19
28312: PUSH
28313: LD_VAR 0 19
28317: PPUSH
28318: LD_INT 1
28320: PPUSH
28321: LD_VAR 0 9
28325: PPUSH
28326: CALL_OW 2
28330: ST_TO_ADDR
28331: GO 28362
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28333: LD_ADDR_VAR 0 19
28337: PUSH
28338: LD_VAR 0 19
28342: PPUSH
28343: LD_VAR 0 19
28347: PUSH
28348: LD_INT 1
28350: PLUS
28351: PPUSH
28352: LD_VAR 0 9
28356: PPUSH
28357: CALL_OW 2
28361: ST_TO_ADDR
28362: GO 28290
28364: POP
28365: POP
// if tmp then
28366: LD_VAR 0 19
28370: IFFALSE 28382
// f := tmp ;
28372: LD_ADDR_VAR 0 12
28376: PUSH
28377: LD_VAR 0 19
28381: ST_TO_ADDR
// end ; x := personel [ i ] ;
28382: LD_ADDR_VAR 0 13
28386: PUSH
28387: LD_VAR 0 6
28391: PUSH
28392: LD_VAR 0 8
28396: ARRAY
28397: ST_TO_ADDR
// if x = - 1 then
28398: LD_VAR 0 13
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: EQUAL
28407: IFFALSE 28616
// begin for j in f do
28409: LD_ADDR_VAR 0 9
28413: PUSH
28414: LD_VAR 0 12
28418: PUSH
28419: FOR_IN
28420: IFFALSE 28612
// repeat InitHc ;
28422: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28426: LD_VAR 0 9
28430: PPUSH
28431: CALL_OW 266
28435: PUSH
28436: LD_INT 5
28438: EQUAL
28439: IFFALSE 28509
// begin if UnitsInside ( j ) < 3 then
28441: LD_VAR 0 9
28445: PPUSH
28446: CALL_OW 313
28450: PUSH
28451: LD_INT 3
28453: LESS
28454: IFFALSE 28490
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28456: LD_INT 0
28458: PPUSH
28459: LD_INT 5
28461: PUSH
28462: LD_INT 8
28464: PUSH
28465: LD_INT 9
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: PUSH
28473: LD_VAR 0 17
28477: ARRAY
28478: PPUSH
28479: LD_VAR 0 4
28483: PPUSH
28484: CALL_OW 380
28488: GO 28507
// PrepareHuman ( false , i , skill ) ;
28490: LD_INT 0
28492: PPUSH
28493: LD_VAR 0 8
28497: PPUSH
28498: LD_VAR 0 4
28502: PPUSH
28503: CALL_OW 380
// end else
28507: GO 28526
// PrepareHuman ( false , i , skill ) ;
28509: LD_INT 0
28511: PPUSH
28512: LD_VAR 0 8
28516: PPUSH
28517: LD_VAR 0 4
28521: PPUSH
28522: CALL_OW 380
// un := CreateHuman ;
28526: LD_ADDR_VAR 0 14
28530: PUSH
28531: CALL_OW 44
28535: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28536: LD_ADDR_VAR 0 7
28540: PUSH
28541: LD_VAR 0 7
28545: PPUSH
28546: LD_INT 1
28548: PPUSH
28549: LD_VAR 0 14
28553: PPUSH
28554: CALL_OW 2
28558: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28559: LD_VAR 0 14
28563: PPUSH
28564: LD_VAR 0 9
28568: PPUSH
28569: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28573: LD_VAR 0 9
28577: PPUSH
28578: CALL_OW 313
28582: PUSH
28583: LD_INT 6
28585: EQUAL
28586: PUSH
28587: LD_VAR 0 9
28591: PPUSH
28592: CALL_OW 266
28596: PUSH
28597: LD_INT 32
28599: PUSH
28600: LD_INT 31
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: IN
28607: OR
28608: IFFALSE 28422
28610: GO 28419
28612: POP
28613: POP
// end else
28614: GO 28996
// for j = 1 to x do
28616: LD_ADDR_VAR 0 9
28620: PUSH
28621: DOUBLE
28622: LD_INT 1
28624: DEC
28625: ST_TO_ADDR
28626: LD_VAR 0 13
28630: PUSH
28631: FOR_TO
28632: IFFALSE 28994
// begin InitHc ;
28634: CALL_OW 19
// if not f then
28638: LD_VAR 0 12
28642: NOT
28643: IFFALSE 28732
// begin PrepareHuman ( false , i , skill ) ;
28645: LD_INT 0
28647: PPUSH
28648: LD_VAR 0 8
28652: PPUSH
28653: LD_VAR 0 4
28657: PPUSH
28658: CALL_OW 380
// un := CreateHuman ;
28662: LD_ADDR_VAR 0 14
28666: PUSH
28667: CALL_OW 44
28671: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28672: LD_ADDR_VAR 0 7
28676: PUSH
28677: LD_VAR 0 7
28681: PPUSH
28682: LD_INT 1
28684: PPUSH
28685: LD_VAR 0 14
28689: PPUSH
28690: CALL_OW 2
28694: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28695: LD_VAR 0 14
28699: PPUSH
28700: LD_VAR 0 1
28704: PPUSH
28705: CALL_OW 250
28709: PPUSH
28710: LD_VAR 0 1
28714: PPUSH
28715: CALL_OW 251
28719: PPUSH
28720: LD_INT 10
28722: PPUSH
28723: LD_INT 0
28725: PPUSH
28726: CALL_OW 50
// continue ;
28730: GO 28631
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28732: LD_VAR 0 12
28736: PUSH
28737: LD_INT 1
28739: ARRAY
28740: PPUSH
28741: CALL_OW 313
28745: PUSH
28746: LD_VAR 0 12
28750: PUSH
28751: LD_INT 1
28753: ARRAY
28754: PPUSH
28755: CALL_OW 266
28759: PUSH
28760: LD_INT 32
28762: PUSH
28763: LD_INT 31
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: IN
28770: AND
28771: PUSH
28772: LD_VAR 0 12
28776: PUSH
28777: LD_INT 1
28779: ARRAY
28780: PPUSH
28781: CALL_OW 313
28785: PUSH
28786: LD_INT 6
28788: EQUAL
28789: OR
28790: IFFALSE 28810
// f := Delete ( f , 1 ) ;
28792: LD_ADDR_VAR 0 12
28796: PUSH
28797: LD_VAR 0 12
28801: PPUSH
28802: LD_INT 1
28804: PPUSH
28805: CALL_OW 3
28809: ST_TO_ADDR
// if not f then
28810: LD_VAR 0 12
28814: NOT
28815: IFFALSE 28833
// begin x := x + 2 ;
28817: LD_ADDR_VAR 0 13
28821: PUSH
28822: LD_VAR 0 13
28826: PUSH
28827: LD_INT 2
28829: PLUS
28830: ST_TO_ADDR
// continue ;
28831: GO 28631
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28833: LD_VAR 0 12
28837: PUSH
28838: LD_INT 1
28840: ARRAY
28841: PPUSH
28842: CALL_OW 266
28846: PUSH
28847: LD_INT 5
28849: EQUAL
28850: IFFALSE 28924
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28852: LD_VAR 0 12
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PPUSH
28861: CALL_OW 313
28865: PUSH
28866: LD_INT 3
28868: LESS
28869: IFFALSE 28905
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28871: LD_INT 0
28873: PPUSH
28874: LD_INT 5
28876: PUSH
28877: LD_INT 8
28879: PUSH
28880: LD_INT 9
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: PUSH
28888: LD_VAR 0 17
28892: ARRAY
28893: PPUSH
28894: LD_VAR 0 4
28898: PPUSH
28899: CALL_OW 380
28903: GO 28922
// PrepareHuman ( false , i , skill ) ;
28905: LD_INT 0
28907: PPUSH
28908: LD_VAR 0 8
28912: PPUSH
28913: LD_VAR 0 4
28917: PPUSH
28918: CALL_OW 380
// end else
28922: GO 28941
// PrepareHuman ( false , i , skill ) ;
28924: LD_INT 0
28926: PPUSH
28927: LD_VAR 0 8
28931: PPUSH
28932: LD_VAR 0 4
28936: PPUSH
28937: CALL_OW 380
// un := CreateHuman ;
28941: LD_ADDR_VAR 0 14
28945: PUSH
28946: CALL_OW 44
28950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28951: LD_ADDR_VAR 0 7
28955: PUSH
28956: LD_VAR 0 7
28960: PPUSH
28961: LD_INT 1
28963: PPUSH
28964: LD_VAR 0 14
28968: PPUSH
28969: CALL_OW 2
28973: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
28974: LD_VAR 0 14
28978: PPUSH
28979: LD_VAR 0 12
28983: PUSH
28984: LD_INT 1
28986: ARRAY
28987: PPUSH
28988: CALL_OW 52
// end ;
28992: GO 28631
28994: POP
28995: POP
// end ;
28996: GO 27933
28998: POP
28999: POP
// result := result ^ buildings ;
29000: LD_ADDR_VAR 0 7
29004: PUSH
29005: LD_VAR 0 7
29009: PUSH
29010: LD_VAR 0 18
29014: ADD
29015: ST_TO_ADDR
// end else
29016: GO 29159
// begin for i = 1 to personel do
29018: LD_ADDR_VAR 0 8
29022: PUSH
29023: DOUBLE
29024: LD_INT 1
29026: DEC
29027: ST_TO_ADDR
29028: LD_VAR 0 6
29032: PUSH
29033: FOR_TO
29034: IFFALSE 29157
// begin if i > 4 then
29036: LD_VAR 0 8
29040: PUSH
29041: LD_INT 4
29043: GREATER
29044: IFFALSE 29048
// break ;
29046: GO 29157
// x := personel [ i ] ;
29048: LD_ADDR_VAR 0 13
29052: PUSH
29053: LD_VAR 0 6
29057: PUSH
29058: LD_VAR 0 8
29062: ARRAY
29063: ST_TO_ADDR
// if x = - 1 then
29064: LD_VAR 0 13
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: EQUAL
29073: IFFALSE 29077
// continue ;
29075: GO 29033
// PrepareHuman ( false , i , skill ) ;
29077: LD_INT 0
29079: PPUSH
29080: LD_VAR 0 8
29084: PPUSH
29085: LD_VAR 0 4
29089: PPUSH
29090: CALL_OW 380
// un := CreateHuman ;
29094: LD_ADDR_VAR 0 14
29098: PUSH
29099: CALL_OW 44
29103: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29104: LD_VAR 0 14
29108: PPUSH
29109: LD_VAR 0 1
29113: PPUSH
29114: CALL_OW 250
29118: PPUSH
29119: LD_VAR 0 1
29123: PPUSH
29124: CALL_OW 251
29128: PPUSH
29129: LD_INT 10
29131: PPUSH
29132: LD_INT 0
29134: PPUSH
29135: CALL_OW 50
// result := result ^ un ;
29139: LD_ADDR_VAR 0 7
29143: PUSH
29144: LD_VAR 0 7
29148: PUSH
29149: LD_VAR 0 14
29153: ADD
29154: ST_TO_ADDR
// end ;
29155: GO 29033
29157: POP
29158: POP
// end ; end ;
29159: LD_VAR 0 7
29163: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29164: LD_INT 0
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
29174: PPUSH
29175: PPUSH
29176: PPUSH
29177: PPUSH
29178: PPUSH
29179: PPUSH
29180: PPUSH
29181: PPUSH
// result := false ;
29182: LD_ADDR_VAR 0 3
29186: PUSH
29187: LD_INT 0
29189: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29190: LD_VAR 0 1
29194: NOT
29195: PUSH
29196: LD_VAR 0 1
29200: PPUSH
29201: CALL_OW 266
29205: PUSH
29206: LD_INT 32
29208: PUSH
29209: LD_INT 33
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: IN
29216: NOT
29217: OR
29218: IFFALSE 29222
// exit ;
29220: GO 30358
// nat := GetNation ( tower ) ;
29222: LD_ADDR_VAR 0 12
29226: PUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 248
29236: ST_TO_ADDR
// side := GetSide ( tower ) ;
29237: LD_ADDR_VAR 0 16
29241: PUSH
29242: LD_VAR 0 1
29246: PPUSH
29247: CALL_OW 255
29251: ST_TO_ADDR
// x := GetX ( tower ) ;
29252: LD_ADDR_VAR 0 10
29256: PUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 250
29266: ST_TO_ADDR
// y := GetY ( tower ) ;
29267: LD_ADDR_VAR 0 11
29271: PUSH
29272: LD_VAR 0 1
29276: PPUSH
29277: CALL_OW 251
29281: ST_TO_ADDR
// if not x or not y then
29282: LD_VAR 0 10
29286: NOT
29287: PUSH
29288: LD_VAR 0 11
29292: NOT
29293: OR
29294: IFFALSE 29298
// exit ;
29296: GO 30358
// weapon := 0 ;
29298: LD_ADDR_VAR 0 18
29302: PUSH
29303: LD_INT 0
29305: ST_TO_ADDR
// fac_list := [ ] ;
29306: LD_ADDR_VAR 0 17
29310: PUSH
29311: EMPTY
29312: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29313: LD_ADDR_VAR 0 6
29317: PUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 274
29327: PPUSH
29328: LD_VAR 0 2
29332: PPUSH
29333: CALL 26936 0 2
29337: PPUSH
29338: LD_INT 30
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 72
29352: ST_TO_ADDR
// if not factories then
29353: LD_VAR 0 6
29357: NOT
29358: IFFALSE 29362
// exit ;
29360: GO 30358
// for i in factories do
29362: LD_ADDR_VAR 0 8
29366: PUSH
29367: LD_VAR 0 6
29371: PUSH
29372: FOR_IN
29373: IFFALSE 29398
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29375: LD_ADDR_VAR 0 17
29379: PUSH
29380: LD_VAR 0 17
29384: PUSH
29385: LD_VAR 0 8
29389: PPUSH
29390: CALL_OW 478
29394: UNION
29395: ST_TO_ADDR
29396: GO 29372
29398: POP
29399: POP
// if not fac_list then
29400: LD_VAR 0 17
29404: NOT
29405: IFFALSE 29409
// exit ;
29407: GO 30358
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29409: LD_ADDR_VAR 0 5
29413: PUSH
29414: LD_INT 4
29416: PUSH
29417: LD_INT 5
29419: PUSH
29420: LD_INT 9
29422: PUSH
29423: LD_INT 10
29425: PUSH
29426: LD_INT 6
29428: PUSH
29429: LD_INT 7
29431: PUSH
29432: LD_INT 11
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 27
29446: PUSH
29447: LD_INT 28
29449: PUSH
29450: LD_INT 26
29452: PUSH
29453: LD_INT 30
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 43
29464: PUSH
29465: LD_INT 44
29467: PUSH
29468: LD_INT 46
29470: PUSH
29471: LD_INT 45
29473: PUSH
29474: LD_INT 47
29476: PUSH
29477: LD_INT 49
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: PUSH
29493: LD_VAR 0 12
29497: ARRAY
29498: ST_TO_ADDR
// for i in list do
29499: LD_ADDR_VAR 0 8
29503: PUSH
29504: LD_VAR 0 5
29508: PUSH
29509: FOR_IN
29510: IFFALSE 29543
// if not i in fac_list then
29512: LD_VAR 0 8
29516: PUSH
29517: LD_VAR 0 17
29521: IN
29522: NOT
29523: IFFALSE 29541
// list := list diff i ;
29525: LD_ADDR_VAR 0 5
29529: PUSH
29530: LD_VAR 0 5
29534: PUSH
29535: LD_VAR 0 8
29539: DIFF
29540: ST_TO_ADDR
29541: GO 29509
29543: POP
29544: POP
// if not list then
29545: LD_VAR 0 5
29549: NOT
29550: IFFALSE 29554
// exit ;
29552: GO 30358
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29554: LD_VAR 0 12
29558: PUSH
29559: LD_INT 3
29561: EQUAL
29562: PUSH
29563: LD_INT 49
29565: PUSH
29566: LD_VAR 0 5
29570: IN
29571: AND
29572: PUSH
29573: LD_INT 31
29575: PPUSH
29576: LD_VAR 0 16
29580: PPUSH
29581: CALL_OW 321
29585: PUSH
29586: LD_INT 2
29588: EQUAL
29589: AND
29590: IFFALSE 29650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29592: LD_INT 22
29594: PUSH
29595: LD_VAR 0 16
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 35
29606: PUSH
29607: LD_INT 49
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 91
29616: PUSH
29617: LD_VAR 0 1
29621: PUSH
29622: LD_INT 10
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: LIST
29634: PPUSH
29635: CALL_OW 69
29639: NOT
29640: IFFALSE 29650
// weapon := ru_time_lapser ;
29642: LD_ADDR_VAR 0 18
29646: PUSH
29647: LD_INT 49
29649: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29650: LD_VAR 0 12
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: IN
29665: PUSH
29666: LD_INT 11
29668: PUSH
29669: LD_VAR 0 5
29673: IN
29674: PUSH
29675: LD_INT 30
29677: PUSH
29678: LD_VAR 0 5
29682: IN
29683: OR
29684: AND
29685: PUSH
29686: LD_INT 6
29688: PPUSH
29689: LD_VAR 0 16
29693: PPUSH
29694: CALL_OW 321
29698: PUSH
29699: LD_INT 2
29701: EQUAL
29702: AND
29703: IFFALSE 29868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29705: LD_INT 22
29707: PUSH
29708: LD_VAR 0 16
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 35
29722: PUSH
29723: LD_INT 11
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 35
29732: PUSH
29733: LD_INT 30
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 91
29747: PUSH
29748: LD_VAR 0 1
29752: PUSH
29753: LD_INT 18
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: PPUSH
29766: CALL_OW 69
29770: NOT
29771: PUSH
29772: LD_INT 22
29774: PUSH
29775: LD_VAR 0 16
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 30
29789: PUSH
29790: LD_INT 32
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 30
29799: PUSH
29800: LD_INT 33
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 91
29814: PUSH
29815: LD_VAR 0 1
29819: PUSH
29820: LD_INT 12
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: PUSH
29833: EMPTY
29834: LIST
29835: PPUSH
29836: CALL_OW 69
29840: PUSH
29841: LD_INT 2
29843: GREATER
29844: AND
29845: IFFALSE 29868
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29847: LD_ADDR_VAR 0 18
29851: PUSH
29852: LD_INT 11
29854: PUSH
29855: LD_INT 30
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_VAR 0 12
29866: ARRAY
29867: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29868: LD_VAR 0 18
29872: NOT
29873: PUSH
29874: LD_INT 40
29876: PPUSH
29877: LD_VAR 0 16
29881: PPUSH
29882: CALL_OW 321
29886: PUSH
29887: LD_INT 2
29889: EQUAL
29890: AND
29891: PUSH
29892: LD_INT 7
29894: PUSH
29895: LD_VAR 0 5
29899: IN
29900: PUSH
29901: LD_INT 28
29903: PUSH
29904: LD_VAR 0 5
29908: IN
29909: OR
29910: PUSH
29911: LD_INT 45
29913: PUSH
29914: LD_VAR 0 5
29918: IN
29919: OR
29920: AND
29921: IFFALSE 30175
// begin hex := GetHexInfo ( x , y ) ;
29923: LD_ADDR_VAR 0 4
29927: PUSH
29928: LD_VAR 0 10
29932: PPUSH
29933: LD_VAR 0 11
29937: PPUSH
29938: CALL_OW 546
29942: ST_TO_ADDR
// if hex [ 1 ] then
29943: LD_VAR 0 4
29947: PUSH
29948: LD_INT 1
29950: ARRAY
29951: IFFALSE 29955
// exit ;
29953: GO 30358
// height := hex [ 2 ] ;
29955: LD_ADDR_VAR 0 15
29959: PUSH
29960: LD_VAR 0 4
29964: PUSH
29965: LD_INT 2
29967: ARRAY
29968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
29969: LD_ADDR_VAR 0 14
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 3
29982: PUSH
29983: LD_INT 5
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
// for i in tmp do
29992: LD_ADDR_VAR 0 8
29996: PUSH
29997: LD_VAR 0 14
30001: PUSH
30002: FOR_IN
30003: IFFALSE 30173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30005: LD_ADDR_VAR 0 9
30009: PUSH
30010: LD_VAR 0 10
30014: PPUSH
30015: LD_VAR 0 8
30019: PPUSH
30020: LD_INT 5
30022: PPUSH
30023: CALL_OW 272
30027: PUSH
30028: LD_VAR 0 11
30032: PPUSH
30033: LD_VAR 0 8
30037: PPUSH
30038: LD_INT 5
30040: PPUSH
30041: CALL_OW 273
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30050: LD_VAR 0 9
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: LD_VAR 0 9
30063: PUSH
30064: LD_INT 2
30066: ARRAY
30067: PPUSH
30068: CALL_OW 488
30072: IFFALSE 30171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30074: LD_ADDR_VAR 0 4
30078: PUSH
30079: LD_VAR 0 9
30083: PUSH
30084: LD_INT 1
30086: ARRAY
30087: PPUSH
30088: LD_VAR 0 9
30092: PUSH
30093: LD_INT 2
30095: ARRAY
30096: PPUSH
30097: CALL_OW 546
30101: ST_TO_ADDR
// if hex [ 1 ] then
30102: LD_VAR 0 4
30106: PUSH
30107: LD_INT 1
30109: ARRAY
30110: IFFALSE 30114
// continue ;
30112: GO 30002
// h := hex [ 2 ] ;
30114: LD_ADDR_VAR 0 13
30118: PUSH
30119: LD_VAR 0 4
30123: PUSH
30124: LD_INT 2
30126: ARRAY
30127: ST_TO_ADDR
// if h + 7 < height then
30128: LD_VAR 0 13
30132: PUSH
30133: LD_INT 7
30135: PLUS
30136: PUSH
30137: LD_VAR 0 15
30141: LESS
30142: IFFALSE 30171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30144: LD_ADDR_VAR 0 18
30148: PUSH
30149: LD_INT 7
30151: PUSH
30152: LD_INT 28
30154: PUSH
30155: LD_INT 45
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: PUSH
30163: LD_VAR 0 12
30167: ARRAY
30168: ST_TO_ADDR
// break ;
30169: GO 30173
// end ; end ; end ;
30171: GO 30002
30173: POP
30174: POP
// end ; if not weapon then
30175: LD_VAR 0 18
30179: NOT
30180: IFFALSE 30240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30182: LD_ADDR_VAR 0 5
30186: PUSH
30187: LD_VAR 0 5
30191: PUSH
30192: LD_INT 11
30194: PUSH
30195: LD_INT 30
30197: PUSH
30198: LD_INT 49
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: DIFF
30206: ST_TO_ADDR
// if not list then
30207: LD_VAR 0 5
30211: NOT
30212: IFFALSE 30216
// exit ;
30214: GO 30358
// weapon := list [ rand ( 1 , list ) ] ;
30216: LD_ADDR_VAR 0 18
30220: PUSH
30221: LD_VAR 0 5
30225: PUSH
30226: LD_INT 1
30228: PPUSH
30229: LD_VAR 0 5
30233: PPUSH
30234: CALL_OW 12
30238: ARRAY
30239: ST_TO_ADDR
// end ; if weapon then
30240: LD_VAR 0 18
30244: IFFALSE 30358
// begin tmp := CostOfWeapon ( weapon ) ;
30246: LD_ADDR_VAR 0 14
30250: PUSH
30251: LD_VAR 0 18
30255: PPUSH
30256: CALL_OW 451
30260: ST_TO_ADDR
// j := GetBase ( tower ) ;
30261: LD_ADDR_VAR 0 9
30265: PUSH
30266: LD_VAR 0 1
30270: PPUSH
30271: CALL_OW 274
30275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30276: LD_VAR 0 9
30280: PPUSH
30281: LD_INT 1
30283: PPUSH
30284: CALL_OW 275
30288: PUSH
30289: LD_VAR 0 14
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: GREATEREQUAL
30298: PUSH
30299: LD_VAR 0 9
30303: PPUSH
30304: LD_INT 2
30306: PPUSH
30307: CALL_OW 275
30311: PUSH
30312: LD_VAR 0 14
30316: PUSH
30317: LD_INT 2
30319: ARRAY
30320: GREATEREQUAL
30321: AND
30322: PUSH
30323: LD_VAR 0 9
30327: PPUSH
30328: LD_INT 3
30330: PPUSH
30331: CALL_OW 275
30335: PUSH
30336: LD_VAR 0 14
30340: PUSH
30341: LD_INT 3
30343: ARRAY
30344: GREATEREQUAL
30345: AND
30346: IFFALSE 30358
// result := weapon ;
30348: LD_ADDR_VAR 0 3
30352: PUSH
30353: LD_VAR 0 18
30357: ST_TO_ADDR
// end ; end ;
30358: LD_VAR 0 3
30362: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30363: LD_INT 0
30365: PPUSH
30366: PPUSH
// result := true ;
30367: LD_ADDR_VAR 0 3
30371: PUSH
30372: LD_INT 1
30374: ST_TO_ADDR
// if array1 = array2 then
30375: LD_VAR 0 1
30379: PUSH
30380: LD_VAR 0 2
30384: EQUAL
30385: IFFALSE 30445
// begin for i = 1 to array1 do
30387: LD_ADDR_VAR 0 4
30391: PUSH
30392: DOUBLE
30393: LD_INT 1
30395: DEC
30396: ST_TO_ADDR
30397: LD_VAR 0 1
30401: PUSH
30402: FOR_TO
30403: IFFALSE 30441
// if array1 [ i ] <> array2 [ i ] then
30405: LD_VAR 0 1
30409: PUSH
30410: LD_VAR 0 4
30414: ARRAY
30415: PUSH
30416: LD_VAR 0 2
30420: PUSH
30421: LD_VAR 0 4
30425: ARRAY
30426: NONEQUAL
30427: IFFALSE 30439
// begin result := false ;
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_INT 0
30436: ST_TO_ADDR
// break ;
30437: GO 30441
// end ;
30439: GO 30402
30441: POP
30442: POP
// end else
30443: GO 30453
// result := false ;
30445: LD_ADDR_VAR 0 3
30449: PUSH
30450: LD_INT 0
30452: ST_TO_ADDR
// end ;
30453: LD_VAR 0 3
30457: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30458: LD_INT 0
30460: PPUSH
30461: PPUSH
30462: PPUSH
// pom := GetBase ( fac ) ;
30463: LD_ADDR_VAR 0 5
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 274
30477: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30478: LD_ADDR_VAR 0 4
30482: PUSH
30483: LD_VAR 0 2
30487: PUSH
30488: LD_INT 1
30490: ARRAY
30491: PPUSH
30492: LD_VAR 0 2
30496: PUSH
30497: LD_INT 2
30499: ARRAY
30500: PPUSH
30501: LD_VAR 0 2
30505: PUSH
30506: LD_INT 3
30508: ARRAY
30509: PPUSH
30510: LD_VAR 0 2
30514: PUSH
30515: LD_INT 4
30517: ARRAY
30518: PPUSH
30519: CALL_OW 449
30523: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30524: LD_ADDR_VAR 0 3
30528: PUSH
30529: LD_VAR 0 5
30533: PPUSH
30534: LD_INT 1
30536: PPUSH
30537: CALL_OW 275
30541: PUSH
30542: LD_VAR 0 4
30546: PUSH
30547: LD_INT 1
30549: ARRAY
30550: GREATEREQUAL
30551: PUSH
30552: LD_VAR 0 5
30556: PPUSH
30557: LD_INT 2
30559: PPUSH
30560: CALL_OW 275
30564: PUSH
30565: LD_VAR 0 4
30569: PUSH
30570: LD_INT 2
30572: ARRAY
30573: GREATEREQUAL
30574: AND
30575: PUSH
30576: LD_VAR 0 5
30580: PPUSH
30581: LD_INT 3
30583: PPUSH
30584: CALL_OW 275
30588: PUSH
30589: LD_VAR 0 4
30593: PUSH
30594: LD_INT 3
30596: ARRAY
30597: GREATEREQUAL
30598: AND
30599: ST_TO_ADDR
// end ;
30600: LD_VAR 0 3
30604: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30605: LD_INT 0
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
// pom := GetBase ( building ) ;
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_VAR 0 1
30620: PPUSH
30621: CALL_OW 274
30625: ST_TO_ADDR
// if not pom then
30626: LD_VAR 0 3
30630: NOT
30631: IFFALSE 30635
// exit ;
30633: GO 30805
// btype := GetBType ( building ) ;
30635: LD_ADDR_VAR 0 5
30639: PUSH
30640: LD_VAR 0 1
30644: PPUSH
30645: CALL_OW 266
30649: ST_TO_ADDR
// if btype = b_armoury then
30650: LD_VAR 0 5
30654: PUSH
30655: LD_INT 4
30657: EQUAL
30658: IFFALSE 30668
// btype := b_barracks ;
30660: LD_ADDR_VAR 0 5
30664: PUSH
30665: LD_INT 5
30667: ST_TO_ADDR
// if btype = b_depot then
30668: LD_VAR 0 5
30672: PUSH
30673: LD_INT 0
30675: EQUAL
30676: IFFALSE 30686
// btype := b_warehouse ;
30678: LD_ADDR_VAR 0 5
30682: PUSH
30683: LD_INT 1
30685: ST_TO_ADDR
// if btype = b_workshop then
30686: LD_VAR 0 5
30690: PUSH
30691: LD_INT 2
30693: EQUAL
30694: IFFALSE 30704
// btype := b_factory ;
30696: LD_ADDR_VAR 0 5
30700: PUSH
30701: LD_INT 3
30703: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30704: LD_ADDR_VAR 0 4
30708: PUSH
30709: LD_VAR 0 5
30713: PPUSH
30714: LD_VAR 0 1
30718: PPUSH
30719: CALL_OW 248
30723: PPUSH
30724: CALL_OW 450
30728: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30729: LD_ADDR_VAR 0 2
30733: PUSH
30734: LD_VAR 0 3
30738: PPUSH
30739: LD_INT 1
30741: PPUSH
30742: CALL_OW 275
30746: PUSH
30747: LD_VAR 0 4
30751: PUSH
30752: LD_INT 1
30754: ARRAY
30755: GREATEREQUAL
30756: PUSH
30757: LD_VAR 0 3
30761: PPUSH
30762: LD_INT 2
30764: PPUSH
30765: CALL_OW 275
30769: PUSH
30770: LD_VAR 0 4
30774: PUSH
30775: LD_INT 2
30777: ARRAY
30778: GREATEREQUAL
30779: AND
30780: PUSH
30781: LD_VAR 0 3
30785: PPUSH
30786: LD_INT 3
30788: PPUSH
30789: CALL_OW 275
30793: PUSH
30794: LD_VAR 0 4
30798: PUSH
30799: LD_INT 3
30801: ARRAY
30802: GREATEREQUAL
30803: AND
30804: ST_TO_ADDR
// end ;
30805: LD_VAR 0 2
30809: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30810: LD_INT 0
30812: PPUSH
30813: PPUSH
30814: PPUSH
// pom := GetBase ( building ) ;
30815: LD_ADDR_VAR 0 4
30819: PUSH
30820: LD_VAR 0 1
30824: PPUSH
30825: CALL_OW 274
30829: ST_TO_ADDR
// if not pom then
30830: LD_VAR 0 4
30834: NOT
30835: IFFALSE 30839
// exit ;
30837: GO 30940
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30839: LD_ADDR_VAR 0 5
30843: PUSH
30844: LD_VAR 0 2
30848: PPUSH
30849: LD_VAR 0 1
30853: PPUSH
30854: CALL_OW 248
30858: PPUSH
30859: CALL_OW 450
30863: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_VAR 0 4
30873: PPUSH
30874: LD_INT 1
30876: PPUSH
30877: CALL_OW 275
30881: PUSH
30882: LD_VAR 0 5
30886: PUSH
30887: LD_INT 1
30889: ARRAY
30890: GREATEREQUAL
30891: PUSH
30892: LD_VAR 0 4
30896: PPUSH
30897: LD_INT 2
30899: PPUSH
30900: CALL_OW 275
30904: PUSH
30905: LD_VAR 0 5
30909: PUSH
30910: LD_INT 2
30912: ARRAY
30913: GREATEREQUAL
30914: AND
30915: PUSH
30916: LD_VAR 0 4
30920: PPUSH
30921: LD_INT 3
30923: PPUSH
30924: CALL_OW 275
30928: PUSH
30929: LD_VAR 0 5
30933: PUSH
30934: LD_INT 3
30936: ARRAY
30937: GREATEREQUAL
30938: AND
30939: ST_TO_ADDR
// end ;
30940: LD_VAR 0 3
30944: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
30945: LD_INT 0
30947: PPUSH
30948: PPUSH
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
// result := false ;
30957: LD_ADDR_VAR 0 6
30961: PUSH
30962: LD_INT 0
30964: ST_TO_ADDR
// if not base or not btype or not x or not y then
30965: LD_VAR 0 1
30969: NOT
30970: PUSH
30971: LD_VAR 0 2
30975: NOT
30976: OR
30977: PUSH
30978: LD_VAR 0 3
30982: NOT
30983: OR
30984: PUSH
30985: LD_VAR 0 4
30989: NOT
30990: OR
30991: IFFALSE 30995
// exit ;
30993: GO 31604
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
30995: LD_ADDR_VAR 0 12
30999: PUSH
31000: LD_VAR 0 2
31004: PPUSH
31005: LD_VAR 0 3
31009: PPUSH
31010: LD_VAR 0 4
31014: PPUSH
31015: LD_VAR 0 5
31019: PPUSH
31020: LD_VAR 0 1
31024: PUSH
31025: LD_INT 1
31027: ARRAY
31028: PPUSH
31029: CALL_OW 248
31033: PPUSH
31034: LD_INT 0
31036: PPUSH
31037: CALL 32441 0 6
31041: ST_TO_ADDR
// if not hexes then
31042: LD_VAR 0 12
31046: NOT
31047: IFFALSE 31051
// exit ;
31049: GO 31604
// for i = 1 to hexes do
31051: LD_ADDR_VAR 0 7
31055: PUSH
31056: DOUBLE
31057: LD_INT 1
31059: DEC
31060: ST_TO_ADDR
31061: LD_VAR 0 12
31065: PUSH
31066: FOR_TO
31067: IFFALSE 31602
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31069: LD_ADDR_VAR 0 11
31073: PUSH
31074: LD_VAR 0 12
31078: PUSH
31079: LD_VAR 0 7
31083: ARRAY
31084: PUSH
31085: LD_INT 1
31087: ARRAY
31088: PPUSH
31089: LD_VAR 0 12
31093: PUSH
31094: LD_VAR 0 7
31098: ARRAY
31099: PUSH
31100: LD_INT 2
31102: ARRAY
31103: PPUSH
31104: CALL_OW 428
31108: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31109: LD_VAR 0 12
31113: PUSH
31114: LD_VAR 0 7
31118: ARRAY
31119: PUSH
31120: LD_INT 1
31122: ARRAY
31123: PPUSH
31124: LD_VAR 0 12
31128: PUSH
31129: LD_VAR 0 7
31133: ARRAY
31134: PUSH
31135: LD_INT 2
31137: ARRAY
31138: PPUSH
31139: CALL_OW 351
31143: PUSH
31144: LD_VAR 0 12
31148: PUSH
31149: LD_VAR 0 7
31153: ARRAY
31154: PUSH
31155: LD_INT 1
31157: ARRAY
31158: PPUSH
31159: LD_VAR 0 12
31163: PUSH
31164: LD_VAR 0 7
31168: ARRAY
31169: PUSH
31170: LD_INT 2
31172: ARRAY
31173: PPUSH
31174: CALL_OW 488
31178: NOT
31179: OR
31180: PUSH
31181: LD_VAR 0 11
31185: PPUSH
31186: CALL_OW 247
31190: PUSH
31191: LD_INT 3
31193: EQUAL
31194: OR
31195: IFFALSE 31201
// exit ;
31197: POP
31198: POP
31199: GO 31604
// if not tmp or not tmp in base then
31201: LD_VAR 0 11
31205: NOT
31206: PUSH
31207: LD_VAR 0 11
31211: PUSH
31212: LD_VAR 0 1
31216: IN
31217: NOT
31218: OR
31219: IFFALSE 31223
// continue ;
31221: GO 31066
// result := true ;
31223: LD_ADDR_VAR 0 6
31227: PUSH
31228: LD_INT 1
31230: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31231: LD_ADDR_VAR 0 15
31235: PUSH
31236: LD_VAR 0 1
31240: PPUSH
31241: LD_INT 22
31243: PUSH
31244: LD_VAR 0 11
31248: PPUSH
31249: CALL_OW 255
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: LD_INT 30
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 30
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PPUSH
31290: CALL_OW 72
31294: ST_TO_ADDR
// if dep then
31295: LD_VAR 0 15
31299: IFFALSE 31435
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31301: LD_ADDR_VAR 0 14
31305: PUSH
31306: LD_VAR 0 15
31310: PUSH
31311: LD_INT 1
31313: ARRAY
31314: PPUSH
31315: CALL_OW 250
31319: PPUSH
31320: LD_VAR 0 15
31324: PUSH
31325: LD_INT 1
31327: ARRAY
31328: PPUSH
31329: CALL_OW 254
31333: PPUSH
31334: LD_INT 5
31336: PPUSH
31337: CALL_OW 272
31341: PUSH
31342: LD_VAR 0 15
31346: PUSH
31347: LD_INT 1
31349: ARRAY
31350: PPUSH
31351: CALL_OW 251
31355: PPUSH
31356: LD_VAR 0 15
31360: PUSH
31361: LD_INT 1
31363: ARRAY
31364: PPUSH
31365: CALL_OW 254
31369: PPUSH
31370: LD_INT 5
31372: PPUSH
31373: CALL_OW 273
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31382: LD_VAR 0 14
31386: PUSH
31387: LD_INT 1
31389: ARRAY
31390: PPUSH
31391: LD_VAR 0 14
31395: PUSH
31396: LD_INT 2
31398: ARRAY
31399: PPUSH
31400: CALL_OW 488
31404: IFFALSE 31435
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31406: LD_VAR 0 11
31410: PPUSH
31411: LD_VAR 0 14
31415: PUSH
31416: LD_INT 1
31418: ARRAY
31419: PPUSH
31420: LD_VAR 0 14
31424: PUSH
31425: LD_INT 2
31427: ARRAY
31428: PPUSH
31429: CALL_OW 111
// continue ;
31433: GO 31066
// end ; end ; r := GetDir ( tmp ) ;
31435: LD_ADDR_VAR 0 13
31439: PUSH
31440: LD_VAR 0 11
31444: PPUSH
31445: CALL_OW 254
31449: ST_TO_ADDR
// if r = 5 then
31450: LD_VAR 0 13
31454: PUSH
31455: LD_INT 5
31457: EQUAL
31458: IFFALSE 31468
// r := 0 ;
31460: LD_ADDR_VAR 0 13
31464: PUSH
31465: LD_INT 0
31467: ST_TO_ADDR
// for j = r to 5 do
31468: LD_ADDR_VAR 0 8
31472: PUSH
31473: DOUBLE
31474: LD_VAR 0 13
31478: DEC
31479: ST_TO_ADDR
31480: LD_INT 5
31482: PUSH
31483: FOR_TO
31484: IFFALSE 31598
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31486: LD_ADDR_VAR 0 9
31490: PUSH
31491: LD_VAR 0 11
31495: PPUSH
31496: CALL_OW 250
31500: PPUSH
31501: LD_VAR 0 8
31505: PPUSH
31506: LD_INT 2
31508: PPUSH
31509: CALL_OW 272
31513: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31514: LD_ADDR_VAR 0 10
31518: PUSH
31519: LD_VAR 0 11
31523: PPUSH
31524: CALL_OW 251
31528: PPUSH
31529: LD_VAR 0 8
31533: PPUSH
31534: LD_INT 2
31536: PPUSH
31537: CALL_OW 273
31541: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31542: LD_VAR 0 9
31546: PPUSH
31547: LD_VAR 0 10
31551: PPUSH
31552: CALL_OW 488
31556: PUSH
31557: LD_VAR 0 9
31561: PPUSH
31562: LD_VAR 0 10
31566: PPUSH
31567: CALL_OW 428
31571: NOT
31572: AND
31573: IFFALSE 31596
// begin ComMoveXY ( tmp , _x , _y ) ;
31575: LD_VAR 0 11
31579: PPUSH
31580: LD_VAR 0 9
31584: PPUSH
31585: LD_VAR 0 10
31589: PPUSH
31590: CALL_OW 111
// break ;
31594: GO 31598
// end ; end ;
31596: GO 31483
31598: POP
31599: POP
// end ;
31600: GO 31066
31602: POP
31603: POP
// end ;
31604: LD_VAR 0 6
31608: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31609: LD_INT 0
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
31615: PPUSH
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
// result := false ;
31621: LD_ADDR_VAR 0 6
31625: PUSH
31626: LD_INT 0
31628: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31629: LD_VAR 0 1
31633: NOT
31634: PUSH
31635: LD_VAR 0 1
31639: PPUSH
31640: CALL_OW 266
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: IN
31655: NOT
31656: OR
31657: PUSH
31658: LD_VAR 0 2
31662: NOT
31663: OR
31664: PUSH
31665: LD_VAR 0 5
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 3
31681: PUSH
31682: LD_INT 4
31684: PUSH
31685: LD_INT 5
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: IN
31696: NOT
31697: OR
31698: PUSH
31699: LD_VAR 0 3
31703: PPUSH
31704: LD_VAR 0 4
31708: PPUSH
31709: CALL_OW 488
31713: NOT
31714: OR
31715: IFFALSE 31719
// exit ;
31717: GO 32436
// pom := GetBase ( depot ) ;
31719: LD_ADDR_VAR 0 10
31723: PUSH
31724: LD_VAR 0 1
31728: PPUSH
31729: CALL_OW 274
31733: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31734: LD_ADDR_VAR 0 11
31738: PUSH
31739: LD_VAR 0 2
31743: PPUSH
31744: LD_VAR 0 1
31748: PPUSH
31749: CALL_OW 248
31753: PPUSH
31754: CALL_OW 450
31758: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31759: LD_VAR 0 10
31763: PPUSH
31764: LD_INT 1
31766: PPUSH
31767: CALL_OW 275
31771: PUSH
31772: LD_VAR 0 11
31776: PUSH
31777: LD_INT 1
31779: ARRAY
31780: GREATEREQUAL
31781: PUSH
31782: LD_VAR 0 10
31786: PPUSH
31787: LD_INT 2
31789: PPUSH
31790: CALL_OW 275
31794: PUSH
31795: LD_VAR 0 11
31799: PUSH
31800: LD_INT 2
31802: ARRAY
31803: GREATEREQUAL
31804: AND
31805: PUSH
31806: LD_VAR 0 10
31810: PPUSH
31811: LD_INT 3
31813: PPUSH
31814: CALL_OW 275
31818: PUSH
31819: LD_VAR 0 11
31823: PUSH
31824: LD_INT 3
31826: ARRAY
31827: GREATEREQUAL
31828: AND
31829: NOT
31830: IFFALSE 31834
// exit ;
31832: GO 32436
// if GetBType ( depot ) = b_depot then
31834: LD_VAR 0 1
31838: PPUSH
31839: CALL_OW 266
31843: PUSH
31844: LD_INT 0
31846: EQUAL
31847: IFFALSE 31859
// dist := 28 else
31849: LD_ADDR_VAR 0 14
31853: PUSH
31854: LD_INT 28
31856: ST_TO_ADDR
31857: GO 31867
// dist := 36 ;
31859: LD_ADDR_VAR 0 14
31863: PUSH
31864: LD_INT 36
31866: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31867: LD_VAR 0 1
31871: PPUSH
31872: LD_VAR 0 3
31876: PPUSH
31877: LD_VAR 0 4
31881: PPUSH
31882: CALL_OW 297
31886: PUSH
31887: LD_VAR 0 14
31891: GREATER
31892: IFFALSE 31896
// exit ;
31894: GO 32436
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31896: LD_ADDR_VAR 0 12
31900: PUSH
31901: LD_VAR 0 2
31905: PPUSH
31906: LD_VAR 0 3
31910: PPUSH
31911: LD_VAR 0 4
31915: PPUSH
31916: LD_VAR 0 5
31920: PPUSH
31921: LD_VAR 0 1
31925: PPUSH
31926: CALL_OW 248
31930: PPUSH
31931: LD_INT 0
31933: PPUSH
31934: CALL 32441 0 6
31938: ST_TO_ADDR
// if not hexes then
31939: LD_VAR 0 12
31943: NOT
31944: IFFALSE 31948
// exit ;
31946: GO 32436
// hex := GetHexInfo ( x , y ) ;
31948: LD_ADDR_VAR 0 15
31952: PUSH
31953: LD_VAR 0 3
31957: PPUSH
31958: LD_VAR 0 4
31962: PPUSH
31963: CALL_OW 546
31967: ST_TO_ADDR
// if hex [ 1 ] then
31968: LD_VAR 0 15
31972: PUSH
31973: LD_INT 1
31975: ARRAY
31976: IFFALSE 31980
// exit ;
31978: GO 32436
// height := hex [ 2 ] ;
31980: LD_ADDR_VAR 0 13
31984: PUSH
31985: LD_VAR 0 15
31989: PUSH
31990: LD_INT 2
31992: ARRAY
31993: ST_TO_ADDR
// for i = 1 to hexes do
31994: LD_ADDR_VAR 0 7
31998: PUSH
31999: DOUBLE
32000: LD_INT 1
32002: DEC
32003: ST_TO_ADDR
32004: LD_VAR 0 12
32008: PUSH
32009: FOR_TO
32010: IFFALSE 32340
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32012: LD_VAR 0 12
32016: PUSH
32017: LD_VAR 0 7
32021: ARRAY
32022: PUSH
32023: LD_INT 1
32025: ARRAY
32026: PPUSH
32027: LD_VAR 0 12
32031: PUSH
32032: LD_VAR 0 7
32036: ARRAY
32037: PUSH
32038: LD_INT 2
32040: ARRAY
32041: PPUSH
32042: CALL_OW 488
32046: NOT
32047: PUSH
32048: LD_VAR 0 12
32052: PUSH
32053: LD_VAR 0 7
32057: ARRAY
32058: PUSH
32059: LD_INT 1
32061: ARRAY
32062: PPUSH
32063: LD_VAR 0 12
32067: PUSH
32068: LD_VAR 0 7
32072: ARRAY
32073: PUSH
32074: LD_INT 2
32076: ARRAY
32077: PPUSH
32078: CALL_OW 428
32082: PUSH
32083: LD_INT 0
32085: GREATER
32086: OR
32087: PUSH
32088: LD_VAR 0 12
32092: PUSH
32093: LD_VAR 0 7
32097: ARRAY
32098: PUSH
32099: LD_INT 1
32101: ARRAY
32102: PPUSH
32103: LD_VAR 0 12
32107: PUSH
32108: LD_VAR 0 7
32112: ARRAY
32113: PUSH
32114: LD_INT 2
32116: ARRAY
32117: PPUSH
32118: CALL_OW 351
32122: OR
32123: IFFALSE 32129
// exit ;
32125: POP
32126: POP
32127: GO 32436
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32129: LD_ADDR_VAR 0 8
32133: PUSH
32134: LD_VAR 0 12
32138: PUSH
32139: LD_VAR 0 7
32143: ARRAY
32144: PUSH
32145: LD_INT 1
32147: ARRAY
32148: PPUSH
32149: LD_VAR 0 12
32153: PUSH
32154: LD_VAR 0 7
32158: ARRAY
32159: PUSH
32160: LD_INT 2
32162: ARRAY
32163: PPUSH
32164: CALL_OW 546
32168: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32169: LD_VAR 0 8
32173: PUSH
32174: LD_INT 1
32176: ARRAY
32177: PUSH
32178: LD_VAR 0 8
32182: PUSH
32183: LD_INT 2
32185: ARRAY
32186: PUSH
32187: LD_VAR 0 13
32191: PUSH
32192: LD_INT 2
32194: PLUS
32195: GREATER
32196: OR
32197: PUSH
32198: LD_VAR 0 8
32202: PUSH
32203: LD_INT 2
32205: ARRAY
32206: PUSH
32207: LD_VAR 0 13
32211: PUSH
32212: LD_INT 2
32214: MINUS
32215: LESS
32216: OR
32217: PUSH
32218: LD_VAR 0 8
32222: PUSH
32223: LD_INT 3
32225: ARRAY
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 8
32232: PUSH
32233: LD_INT 9
32235: PUSH
32236: LD_INT 10
32238: PUSH
32239: LD_INT 11
32241: PUSH
32242: LD_INT 12
32244: PUSH
32245: LD_INT 13
32247: PUSH
32248: LD_INT 16
32250: PUSH
32251: LD_INT 17
32253: PUSH
32254: LD_INT 18
32256: PUSH
32257: LD_INT 19
32259: PUSH
32260: LD_INT 20
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: IN
32281: NOT
32282: OR
32283: PUSH
32284: LD_VAR 0 8
32288: PUSH
32289: LD_INT 5
32291: ARRAY
32292: NOT
32293: OR
32294: PUSH
32295: LD_VAR 0 8
32299: PUSH
32300: LD_INT 6
32302: ARRAY
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 7
32312: PUSH
32313: LD_INT 9
32315: PUSH
32316: LD_INT 10
32318: PUSH
32319: LD_INT 11
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: IN
32330: NOT
32331: OR
32332: IFFALSE 32338
// exit ;
32334: POP
32335: POP
32336: GO 32436
// end ;
32338: GO 32009
32340: POP
32341: POP
// side := GetSide ( depot ) ;
32342: LD_ADDR_VAR 0 9
32346: PUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 255
32356: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32357: LD_VAR 0 9
32361: PPUSH
32362: LD_VAR 0 3
32366: PPUSH
32367: LD_VAR 0 4
32371: PPUSH
32372: LD_INT 20
32374: PPUSH
32375: CALL 25090 0 4
32379: PUSH
32380: LD_INT 4
32382: ARRAY
32383: IFFALSE 32387
// exit ;
32385: GO 32436
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32387: LD_VAR 0 2
32391: PUSH
32392: LD_INT 29
32394: PUSH
32395: LD_INT 30
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: IN
32402: PUSH
32403: LD_VAR 0 3
32407: PPUSH
32408: LD_VAR 0 4
32412: PPUSH
32413: LD_VAR 0 9
32417: PPUSH
32418: CALL_OW 440
32422: NOT
32423: AND
32424: IFFALSE 32428
// exit ;
32426: GO 32436
// result := true ;
32428: LD_ADDR_VAR 0 6
32432: PUSH
32433: LD_INT 1
32435: ST_TO_ADDR
// end ;
32436: LD_VAR 0 6
32440: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32441: LD_INT 0
32443: PPUSH
32444: PPUSH
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
// result = [ ] ;
32501: LD_ADDR_VAR 0 7
32505: PUSH
32506: EMPTY
32507: ST_TO_ADDR
// temp_list = [ ] ;
32508: LD_ADDR_VAR 0 9
32512: PUSH
32513: EMPTY
32514: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32515: LD_VAR 0 4
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 1
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 3
32531: PUSH
32532: LD_INT 4
32534: PUSH
32535: LD_INT 5
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: IN
32546: NOT
32547: PUSH
32548: LD_VAR 0 1
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: IN
32563: PUSH
32564: LD_VAR 0 5
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: IN
32583: NOT
32584: AND
32585: OR
32586: IFFALSE 32590
// exit ;
32588: GO 50981
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32590: LD_VAR 0 1
32594: PUSH
32595: LD_INT 6
32597: PUSH
32598: LD_INT 7
32600: PUSH
32601: LD_INT 8
32603: PUSH
32604: LD_INT 13
32606: PUSH
32607: LD_INT 12
32609: PUSH
32610: LD_INT 15
32612: PUSH
32613: LD_INT 11
32615: PUSH
32616: LD_INT 14
32618: PUSH
32619: LD_INT 10
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: IN
32633: IFFALSE 32643
// btype = b_lab ;
32635: LD_ADDR_VAR 0 1
32639: PUSH
32640: LD_INT 6
32642: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32643: LD_VAR 0 6
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: IN
32662: NOT
32663: PUSH
32664: LD_VAR 0 1
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: LD_INT 6
32683: PUSH
32684: LD_INT 36
32686: PUSH
32687: LD_INT 4
32689: PUSH
32690: LD_INT 5
32692: PUSH
32693: LD_INT 31
32695: PUSH
32696: LD_INT 32
32698: PUSH
32699: LD_INT 33
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: IN
32715: NOT
32716: PUSH
32717: LD_VAR 0 6
32721: PUSH
32722: LD_INT 1
32724: EQUAL
32725: AND
32726: OR
32727: PUSH
32728: LD_VAR 0 1
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: IN
32743: NOT
32744: PUSH
32745: LD_VAR 0 6
32749: PUSH
32750: LD_INT 2
32752: EQUAL
32753: AND
32754: OR
32755: IFFALSE 32765
// mode = 0 ;
32757: LD_ADDR_VAR 0 6
32761: PUSH
32762: LD_INT 0
32764: ST_TO_ADDR
// case mode of 0 :
32765: LD_VAR 0 6
32769: PUSH
32770: LD_INT 0
32772: DOUBLE
32773: EQUAL
32774: IFTRUE 32778
32776: GO 44231
32778: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32779: LD_ADDR_VAR 0 11
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 1
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 3
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 3
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32972: LD_ADDR_VAR 0 12
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 3
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33168: LD_ADDR_VAR 0 13
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 3
33327: NEG
33328: PUSH
33329: LD_INT 2
33331: NEG
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 3
33339: NEG
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33367: LD_ADDR_VAR 0 14
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: NEG
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 2
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 3
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 3
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: LD_INT 2
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33563: LD_ADDR_VAR 0 15
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 2
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 3
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33756: LD_ADDR_VAR 0 16
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33949: LD_ADDR_VAR 0 17
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 2
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: LD_INT 2
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34179: LD_ADDR_VAR 0 18
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: LD_INT 1
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 2
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 2
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34409: LD_ADDR_VAR 0 19
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 2
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 2
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: NEG
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34639: LD_ADDR_VAR 0 20
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: NEG
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34869: LD_ADDR_VAR 0 21
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: NEG
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35099: LD_ADDR_VAR 0 22
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: NEG
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 2
35298: NEG
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35329: LD_ADDR_VAR 0 23
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: LD_INT 2
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 2
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: LD_INT 3
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: LD_INT 3
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35609: LD_ADDR_VAR 0 24
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 3
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35885: LD_ADDR_VAR 0 25
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 3
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 3
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 3
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 3
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36159: LD_ADDR_VAR 0 26
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 2
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 2
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 3
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: LD_INT 3
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36435: LD_ADDR_VAR 0 27
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: NEG
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 3
36668: NEG
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 3
36680: NEG
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36715: LD_ADDR_VAR 0 28
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 2
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: NEG
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: LD_INT 3
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 3
36950: NEG
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36997: LD_ADDR_VAR 0 29
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 3
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: NEG
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37276: LD_ADDR_VAR 0 30
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 3
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: NEG
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 3
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37554: LD_ADDR_VAR 0 31
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 2
37743: NEG
37744: PUSH
37745: LD_INT 3
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 3
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 3
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 3
37797: NEG
37798: PUSH
37799: LD_INT 2
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37832: LD_ADDR_VAR 0 32
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 3
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 3
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 3
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38110: LD_ADDR_VAR 0 33
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: NEG
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 3
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38389: LD_ADDR_VAR 0 34
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: NEG
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 3
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: LD_INT 3
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 3
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38669: LD_ADDR_VAR 0 35
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38781: LD_ADDR_VAR 0 36
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38893: LD_ADDR_VAR 0 37
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39005: LD_ADDR_VAR 0 38
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39117: LD_ADDR_VAR 0 39
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39229: LD_ADDR_VAR 0 40
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39341: LD_ADDR_VAR 0 41
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: LD_INT 3
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 3
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 3
39615: NEG
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 3
39626: NEG
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 3
39650: NEG
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39691: LD_ADDR_VAR 0 42
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 3
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 3
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 3
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 3
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40041: LD_ADDR_VAR 0 43
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: LD_INT 3
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 3
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 3
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 3
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40389: LD_ADDR_VAR 0 44
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: NEG
40580: PUSH
40581: LD_INT 3
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 3
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 3
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 3
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 3
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: NEG
40699: PUSH
40700: LD_INT 3
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40739: LD_ADDR_VAR 0 45
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 3
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 3
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 2
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 3
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 3
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 3
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 3
41036: NEG
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 3
41048: NEG
41049: PUSH
41050: LD_INT 3
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41089: LD_ADDR_VAR 0 46
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: NEG
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: LD_INT 3
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 3
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 3
41385: NEG
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 3
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41437: LD_ADDR_VAR 0 47
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41588: LD_ADDR_VAR 0 48
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 2
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41735: LD_ADDR_VAR 0 49
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41879: LD_ADDR_VAR 0 50
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42023: LD_ADDR_VAR 0 51
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42170: LD_ADDR_VAR 0 52
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 2
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42321: LD_ADDR_VAR 0 53
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 2
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42551: LD_ADDR_VAR 0 54
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42781: LD_ADDR_VAR 0 55
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43011: LD_ADDR_VAR 0 56
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43241: LD_ADDR_VAR 0 57
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43471: LD_ADDR_VAR 0 58
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43701: LD_ADDR_VAR 0 59
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43789: LD_ADDR_VAR 0 60
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43877: LD_ADDR_VAR 0 61
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43965: LD_ADDR_VAR 0 62
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44053: LD_ADDR_VAR 0 63
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44141: LD_ADDR_VAR 0 64
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: ST_TO_ADDR
// end ; 1 :
44229: GO 50126
44231: LD_INT 1
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44239
44237: GO 46862
44239: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44240: LD_ADDR_VAR 0 11
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 3
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44284: LD_ADDR_VAR 0 12
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44325: LD_ADDR_VAR 0 13
44329: PUSH
44330: LD_INT 3
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44365: LD_ADDR_VAR 0 14
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 3
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44406: LD_ADDR_VAR 0 15
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44450: LD_ADDR_VAR 0 16
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: LD_INT 3
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: LD_INT 3
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44496: LD_ADDR_VAR 0 17
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 3
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 3
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44540: LD_ADDR_VAR 0 18
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44581: LD_ADDR_VAR 0 19
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 3
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: LD_INT 3
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44621: LD_ADDR_VAR 0 20
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44662: LD_ADDR_VAR 0 21
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 3
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 3
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44706: LD_ADDR_VAR 0 22
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 3
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: NEG
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 3
44737: NEG
44738: PUSH
44739: LD_INT 3
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44752: LD_ADDR_VAR 0 23
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 4
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 3
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44796: LD_ADDR_VAR 0 24
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 4
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44837: LD_ADDR_VAR 0 25
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 4
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: LD_INT 4
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44877: LD_ADDR_VAR 0 26
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 4
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44918: LD_ADDR_VAR 0 27
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 3
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 4
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44962: LD_ADDR_VAR 0 28
44966: PUSH
44967: LD_INT 3
44969: NEG
44970: PUSH
44971: LD_INT 3
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 3
44981: NEG
44982: PUSH
44983: LD_INT 4
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 4
44993: NEG
44994: PUSH
44995: LD_INT 3
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45008: LD_ADDR_VAR 0 29
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 4
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: LD_INT 4
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 3
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 5
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 5
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 4
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 6
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 6
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 5
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45163: LD_ADDR_VAR 0 30
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 4
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 4
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 5
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 5
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 5
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 6
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 6
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45306: LD_ADDR_VAR 0 31
45310: PUSH
45311: LD_INT 3
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 3
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 4
45343: PUSH
45344: LD_INT 3
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 4
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 5
45373: PUSH
45374: LD_INT 4
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 5
45383: PUSH
45384: LD_INT 5
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 4
45393: PUSH
45394: LD_INT 5
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 6
45403: PUSH
45404: LD_INT 5
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 6
45413: PUSH
45414: LD_INT 6
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 5
45423: PUSH
45424: LD_INT 6
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45445: LD_ADDR_VAR 0 32
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: LD_INT 3
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 4
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 4
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 5
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 5
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 4
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 6
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 6
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 5
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45588: LD_ADDR_VAR 0 33
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 3
45606: NEG
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 3
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 3
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 4
45651: NEG
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 4
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 5
45674: NEG
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 5
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 5
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 6
45708: NEG
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 6
45719: NEG
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45743: LD_ADDR_VAR 0 34
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 3
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 3
45774: NEG
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: NEG
45787: PUSH
45788: LD_INT 4
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 4
45798: NEG
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 4
45810: NEG
45811: PUSH
45812: LD_INT 4
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 4
45822: NEG
45823: PUSH
45824: LD_INT 5
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 5
45834: NEG
45835: PUSH
45836: LD_INT 4
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 5
45846: NEG
45847: PUSH
45848: LD_INT 5
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 5
45858: NEG
45859: PUSH
45860: LD_INT 6
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 6
45870: NEG
45871: PUSH
45872: LD_INT 5
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 6
45882: NEG
45883: PUSH
45884: LD_INT 6
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45906: LD_ADDR_VAR 0 41
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45950: LD_ADDR_VAR 0 42
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 3
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45991: LD_ADDR_VAR 0 43
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 3
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46031: LD_ADDR_VAR 0 44
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: LD_INT 3
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46072: LD_ADDR_VAR 0 45
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46116: LD_ADDR_VAR 0 46
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46162: LD_ADDR_VAR 0 47
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 3
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46195: LD_ADDR_VAR 0 48
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46226: LD_ADDR_VAR 0 49
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 3
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46255: LD_ADDR_VAR 0 50
46259: PUSH
46260: LD_INT 2
46262: PUSH
46263: LD_INT 3
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46284: LD_ADDR_VAR 0 51
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46315: LD_ADDR_VAR 0 52
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 3
46334: NEG
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46348: LD_ADDR_VAR 0 53
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46392: LD_ADDR_VAR 0 54
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46433: LD_ADDR_VAR 0 55
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46473: LD_ADDR_VAR 0 56
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 3
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46514: LD_ADDR_VAR 0 57
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46558: LD_ADDR_VAR 0 58
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46604: LD_ADDR_VAR 0 59
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46648: LD_ADDR_VAR 0 60
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46689: LD_ADDR_VAR 0 61
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46729: LD_ADDR_VAR 0 62
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46770: LD_ADDR_VAR 0 63
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46814: LD_ADDR_VAR 0 64
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// end ; 2 :
46860: GO 50126
46862: LD_INT 2
46864: DOUBLE
46865: EQUAL
46866: IFTRUE 46870
46868: GO 50125
46870: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46871: LD_ADDR_VAR 0 29
46875: PUSH
46876: LD_INT 4
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 4
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 4
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 5
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 4
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 4
47001: PUSH
47002: LD_INT 4
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: PUSH
47012: LD_INT 4
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 4
47041: PUSH
47042: LD_INT 2
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: LD_INT 4
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 4
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 4
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 5
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 5
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 4
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: LD_INT 5
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 3
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 4
47210: NEG
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 4
47221: NEG
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 4
47233: NEG
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 4
47256: NEG
47257: PUSH
47258: LD_INT 4
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 4
47268: NEG
47269: PUSH
47270: LD_INT 5
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 4
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 4
47304: NEG
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 5
47316: NEG
47317: PUSH
47318: LD_INT 4
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 5
47328: NEG
47329: PUSH
47330: LD_INT 5
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: NEG
47341: PUSH
47342: LD_INT 5
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 5
47352: NEG
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47409: LD_ADDR_VAR 0 30
47413: PUSH
47414: LD_INT 4
47416: PUSH
47417: LD_INT 4
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 4
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 5
47436: PUSH
47437: LD_INT 4
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 5
47446: PUSH
47447: LD_INT 5
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 4
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 4
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 5
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: LD_INT 5
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 4
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 4
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 4
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 4
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 5
47655: NEG
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 5
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 5
47678: NEG
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: NEG
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: LD_INT 4
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 4
47761: NEG
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 4
47773: NEG
47774: PUSH
47775: LD_INT 4
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 4
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 4
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: LD_INT 4
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 5
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 4
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 4
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 5
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 5
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47956: LD_ADDR_VAR 0 31
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 4
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 4
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 5
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 5
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 4
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 5
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 3
48101: NEG
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 4
48112: NEG
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 4
48123: NEG
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 4
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: NEG
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: LD_INT 4
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 4
48170: NEG
48171: PUSH
48172: LD_INT 5
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: LD_INT 4
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 4
48206: NEG
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 5
48218: NEG
48219: PUSH
48220: LD_INT 4
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 5
48230: NEG
48231: PUSH
48232: LD_INT 5
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: NEG
48243: PUSH
48244: LD_INT 5
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 5
48254: NEG
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 4
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 3
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 4
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 4
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 4
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 5
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 5
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 4
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 5
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48506: LD_ADDR_VAR 0 32
48510: PUSH
48511: LD_INT 4
48513: NEG
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 4
48524: NEG
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 4
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 5
48569: NEG
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 5
48580: NEG
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 5
48592: NEG
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 4
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 4
48675: NEG
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 4
48687: NEG
48688: PUSH
48689: LD_INT 4
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: LD_INT 4
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 4
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 4
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 5
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 4
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 5
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 3
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 5
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 4
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 4
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 4
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 4
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 4
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 5
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 5
48948: PUSH
48949: LD_INT 5
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 4
48958: PUSH
48959: LD_INT 5
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 4
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 5
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 3
48998: PUSH
48999: LD_INT 5
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49053: LD_ADDR_VAR 0 33
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 4
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 4
49072: NEG
49073: PUSH
49074: LD_INT 5
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 4
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 4
49108: NEG
49109: PUSH
49110: LD_INT 3
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 5
49120: NEG
49121: PUSH
49122: LD_INT 4
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 5
49132: NEG
49133: PUSH
49134: LD_INT 5
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: LD_INT 5
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 5
49156: NEG
49157: PUSH
49158: LD_INT 3
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 4
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 3
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 3
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 4
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 4
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 4
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 4
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 5
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 5
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 4
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 3
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 3
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 5
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 4
49383: PUSH
49384: LD_INT 3
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 4
49393: PUSH
49394: LD_INT 4
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 4
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 4
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 4
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 4
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 5
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 5
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 4
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 5
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49591: LD_ADDR_VAR 0 34
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 4
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 5
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 4
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 4
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 5
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 5
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 4
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 4
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 4
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 4
49793: PUSH
49794: LD_INT 4
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 4
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 5
49813: PUSH
49814: LD_INT 4
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: LD_INT 5
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 4
49833: PUSH
49834: LD_INT 5
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 4
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 5
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: LD_INT 5
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 4
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 4
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 4
49976: NEG
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 4
49987: NEG
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: NEG
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 4
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 5
50032: NEG
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 5
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 5
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// end ; end ;
50123: GO 50126
50125: POP
// case btype of b_depot , b_warehouse :
50126: LD_VAR 0 1
50130: PUSH
50131: LD_INT 0
50133: DOUBLE
50134: EQUAL
50135: IFTRUE 50145
50137: LD_INT 1
50139: DOUBLE
50140: EQUAL
50141: IFTRUE 50145
50143: GO 50346
50145: POP
// case nation of nation_american :
50146: LD_VAR 0 5
50150: PUSH
50151: LD_INT 1
50153: DOUBLE
50154: EQUAL
50155: IFTRUE 50159
50157: GO 50215
50159: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50160: LD_ADDR_VAR 0 9
50164: PUSH
50165: LD_VAR 0 11
50169: PUSH
50170: LD_VAR 0 12
50174: PUSH
50175: LD_VAR 0 13
50179: PUSH
50180: LD_VAR 0 14
50184: PUSH
50185: LD_VAR 0 15
50189: PUSH
50190: LD_VAR 0 16
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: PUSH
50203: LD_VAR 0 4
50207: PUSH
50208: LD_INT 1
50210: PLUS
50211: ARRAY
50212: ST_TO_ADDR
50213: GO 50344
50215: LD_INT 2
50217: DOUBLE
50218: EQUAL
50219: IFTRUE 50223
50221: GO 50279
50223: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50224: LD_ADDR_VAR 0 9
50228: PUSH
50229: LD_VAR 0 17
50233: PUSH
50234: LD_VAR 0 18
50238: PUSH
50239: LD_VAR 0 19
50243: PUSH
50244: LD_VAR 0 20
50248: PUSH
50249: LD_VAR 0 21
50253: PUSH
50254: LD_VAR 0 22
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: PUSH
50267: LD_VAR 0 4
50271: PUSH
50272: LD_INT 1
50274: PLUS
50275: ARRAY
50276: ST_TO_ADDR
50277: GO 50344
50279: LD_INT 3
50281: DOUBLE
50282: EQUAL
50283: IFTRUE 50287
50285: GO 50343
50287: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50288: LD_ADDR_VAR 0 9
50292: PUSH
50293: LD_VAR 0 23
50297: PUSH
50298: LD_VAR 0 24
50302: PUSH
50303: LD_VAR 0 25
50307: PUSH
50308: LD_VAR 0 26
50312: PUSH
50313: LD_VAR 0 27
50317: PUSH
50318: LD_VAR 0 28
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: PUSH
50331: LD_VAR 0 4
50335: PUSH
50336: LD_INT 1
50338: PLUS
50339: ARRAY
50340: ST_TO_ADDR
50341: GO 50344
50343: POP
50344: GO 50899
50346: LD_INT 2
50348: DOUBLE
50349: EQUAL
50350: IFTRUE 50360
50352: LD_INT 3
50354: DOUBLE
50355: EQUAL
50356: IFTRUE 50360
50358: GO 50416
50360: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50361: LD_ADDR_VAR 0 9
50365: PUSH
50366: LD_VAR 0 29
50370: PUSH
50371: LD_VAR 0 30
50375: PUSH
50376: LD_VAR 0 31
50380: PUSH
50381: LD_VAR 0 32
50385: PUSH
50386: LD_VAR 0 33
50390: PUSH
50391: LD_VAR 0 34
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: PUSH
50404: LD_VAR 0 4
50408: PUSH
50409: LD_INT 1
50411: PLUS
50412: ARRAY
50413: ST_TO_ADDR
50414: GO 50899
50416: LD_INT 16
50418: DOUBLE
50419: EQUAL
50420: IFTRUE 50478
50422: LD_INT 17
50424: DOUBLE
50425: EQUAL
50426: IFTRUE 50478
50428: LD_INT 18
50430: DOUBLE
50431: EQUAL
50432: IFTRUE 50478
50434: LD_INT 19
50436: DOUBLE
50437: EQUAL
50438: IFTRUE 50478
50440: LD_INT 22
50442: DOUBLE
50443: EQUAL
50444: IFTRUE 50478
50446: LD_INT 20
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50478
50452: LD_INT 21
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50478
50458: LD_INT 23
50460: DOUBLE
50461: EQUAL
50462: IFTRUE 50478
50464: LD_INT 24
50466: DOUBLE
50467: EQUAL
50468: IFTRUE 50478
50470: LD_INT 25
50472: DOUBLE
50473: EQUAL
50474: IFTRUE 50478
50476: GO 50534
50478: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50479: LD_ADDR_VAR 0 9
50483: PUSH
50484: LD_VAR 0 35
50488: PUSH
50489: LD_VAR 0 36
50493: PUSH
50494: LD_VAR 0 37
50498: PUSH
50499: LD_VAR 0 38
50503: PUSH
50504: LD_VAR 0 39
50508: PUSH
50509: LD_VAR 0 40
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: LD_VAR 0 4
50526: PUSH
50527: LD_INT 1
50529: PLUS
50530: ARRAY
50531: ST_TO_ADDR
50532: GO 50899
50534: LD_INT 6
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50590
50540: LD_INT 7
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50590
50546: LD_INT 8
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50590
50552: LD_INT 13
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50590
50558: LD_INT 12
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50590
50564: LD_INT 15
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50590
50570: LD_INT 11
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50590
50576: LD_INT 14
50578: DOUBLE
50579: EQUAL
50580: IFTRUE 50590
50582: LD_INT 10
50584: DOUBLE
50585: EQUAL
50586: IFTRUE 50590
50588: GO 50646
50590: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50591: LD_ADDR_VAR 0 9
50595: PUSH
50596: LD_VAR 0 41
50600: PUSH
50601: LD_VAR 0 42
50605: PUSH
50606: LD_VAR 0 43
50610: PUSH
50611: LD_VAR 0 44
50615: PUSH
50616: LD_VAR 0 45
50620: PUSH
50621: LD_VAR 0 46
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: PUSH
50634: LD_VAR 0 4
50638: PUSH
50639: LD_INT 1
50641: PLUS
50642: ARRAY
50643: ST_TO_ADDR
50644: GO 50899
50646: LD_INT 36
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50654
50652: GO 50710
50654: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50655: LD_ADDR_VAR 0 9
50659: PUSH
50660: LD_VAR 0 47
50664: PUSH
50665: LD_VAR 0 48
50669: PUSH
50670: LD_VAR 0 49
50674: PUSH
50675: LD_VAR 0 50
50679: PUSH
50680: LD_VAR 0 51
50684: PUSH
50685: LD_VAR 0 52
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: PUSH
50698: LD_VAR 0 4
50702: PUSH
50703: LD_INT 1
50705: PLUS
50706: ARRAY
50707: ST_TO_ADDR
50708: GO 50899
50710: LD_INT 4
50712: DOUBLE
50713: EQUAL
50714: IFTRUE 50736
50716: LD_INT 5
50718: DOUBLE
50719: EQUAL
50720: IFTRUE 50736
50722: LD_INT 34
50724: DOUBLE
50725: EQUAL
50726: IFTRUE 50736
50728: LD_INT 37
50730: DOUBLE
50731: EQUAL
50732: IFTRUE 50736
50734: GO 50792
50736: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50737: LD_ADDR_VAR 0 9
50741: PUSH
50742: LD_VAR 0 53
50746: PUSH
50747: LD_VAR 0 54
50751: PUSH
50752: LD_VAR 0 55
50756: PUSH
50757: LD_VAR 0 56
50761: PUSH
50762: LD_VAR 0 57
50766: PUSH
50767: LD_VAR 0 58
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: LD_VAR 0 4
50784: PUSH
50785: LD_INT 1
50787: PLUS
50788: ARRAY
50789: ST_TO_ADDR
50790: GO 50899
50792: LD_INT 31
50794: DOUBLE
50795: EQUAL
50796: IFTRUE 50842
50798: LD_INT 32
50800: DOUBLE
50801: EQUAL
50802: IFTRUE 50842
50804: LD_INT 33
50806: DOUBLE
50807: EQUAL
50808: IFTRUE 50842
50810: LD_INT 27
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50842
50816: LD_INT 26
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50842
50822: LD_INT 28
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50842
50828: LD_INT 29
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50842
50834: LD_INT 30
50836: DOUBLE
50837: EQUAL
50838: IFTRUE 50842
50840: GO 50898
50842: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50843: LD_ADDR_VAR 0 9
50847: PUSH
50848: LD_VAR 0 59
50852: PUSH
50853: LD_VAR 0 60
50857: PUSH
50858: LD_VAR 0 61
50862: PUSH
50863: LD_VAR 0 62
50867: PUSH
50868: LD_VAR 0 63
50872: PUSH
50873: LD_VAR 0 64
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: PUSH
50886: LD_VAR 0 4
50890: PUSH
50891: LD_INT 1
50893: PLUS
50894: ARRAY
50895: ST_TO_ADDR
50896: GO 50899
50898: POP
// temp_list2 = [ ] ;
50899: LD_ADDR_VAR 0 10
50903: PUSH
50904: EMPTY
50905: ST_TO_ADDR
// for i in temp_list do
50906: LD_ADDR_VAR 0 8
50910: PUSH
50911: LD_VAR 0 9
50915: PUSH
50916: FOR_IN
50917: IFFALSE 50969
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50919: LD_ADDR_VAR 0 10
50923: PUSH
50924: LD_VAR 0 10
50928: PUSH
50929: LD_VAR 0 8
50933: PUSH
50934: LD_INT 1
50936: ARRAY
50937: PUSH
50938: LD_VAR 0 2
50942: PLUS
50943: PUSH
50944: LD_VAR 0 8
50948: PUSH
50949: LD_INT 2
50951: ARRAY
50952: PUSH
50953: LD_VAR 0 3
50957: PLUS
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: ADD
50966: ST_TO_ADDR
50967: GO 50916
50969: POP
50970: POP
// result = temp_list2 ;
50971: LD_ADDR_VAR 0 7
50975: PUSH
50976: LD_VAR 0 10
50980: ST_TO_ADDR
// end ;
50981: LD_VAR 0 7
50985: RET
// export function EnemyInRange ( unit , dist ) ; begin
50986: LD_INT 0
50988: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50989: LD_ADDR_VAR 0 3
50993: PUSH
50994: LD_VAR 0 1
50998: PPUSH
50999: CALL_OW 255
51003: PPUSH
51004: LD_VAR 0 1
51008: PPUSH
51009: CALL_OW 250
51013: PPUSH
51014: LD_VAR 0 1
51018: PPUSH
51019: CALL_OW 251
51023: PPUSH
51024: LD_VAR 0 2
51028: PPUSH
51029: CALL 25090 0 4
51033: PUSH
51034: LD_INT 4
51036: ARRAY
51037: ST_TO_ADDR
// end ;
51038: LD_VAR 0 3
51042: RET
// export function PlayerSeeMe ( unit ) ; begin
51043: LD_INT 0
51045: PPUSH
// result := See ( your_side , unit ) ;
51046: LD_ADDR_VAR 0 2
51050: PUSH
51051: LD_OWVAR 2
51055: PPUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: CALL_OW 292
51065: ST_TO_ADDR
// end ;
51066: LD_VAR 0 2
51070: RET
// export function ReverseDir ( unit ) ; begin
51071: LD_INT 0
51073: PPUSH
// if not unit then
51074: LD_VAR 0 1
51078: NOT
51079: IFFALSE 51083
// exit ;
51081: GO 51106
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51083: LD_ADDR_VAR 0 2
51087: PUSH
51088: LD_VAR 0 1
51092: PPUSH
51093: CALL_OW 254
51097: PUSH
51098: LD_INT 3
51100: PLUS
51101: PUSH
51102: LD_INT 6
51104: MOD
51105: ST_TO_ADDR
// end ;
51106: LD_VAR 0 2
51110: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51111: LD_INT 0
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
51117: PPUSH
// if not hexes then
51118: LD_VAR 0 2
51122: NOT
51123: IFFALSE 51127
// exit ;
51125: GO 51275
// dist := 9999 ;
51127: LD_ADDR_VAR 0 5
51131: PUSH
51132: LD_INT 9999
51134: ST_TO_ADDR
// for i = 1 to hexes do
51135: LD_ADDR_VAR 0 4
51139: PUSH
51140: DOUBLE
51141: LD_INT 1
51143: DEC
51144: ST_TO_ADDR
51145: LD_VAR 0 2
51149: PUSH
51150: FOR_TO
51151: IFFALSE 51263
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51153: LD_VAR 0 1
51157: PPUSH
51158: LD_VAR 0 2
51162: PUSH
51163: LD_VAR 0 4
51167: ARRAY
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: PPUSH
51173: LD_VAR 0 2
51177: PUSH
51178: LD_VAR 0 4
51182: ARRAY
51183: PUSH
51184: LD_INT 2
51186: ARRAY
51187: PPUSH
51188: CALL_OW 297
51192: PUSH
51193: LD_VAR 0 5
51197: LESS
51198: IFFALSE 51261
// begin hex := hexes [ i ] ;
51200: LD_ADDR_VAR 0 7
51204: PUSH
51205: LD_VAR 0 2
51209: PUSH
51210: LD_VAR 0 4
51214: ARRAY
51215: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51216: LD_ADDR_VAR 0 5
51220: PUSH
51221: LD_VAR 0 1
51225: PPUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_VAR 0 4
51235: ARRAY
51236: PUSH
51237: LD_INT 1
51239: ARRAY
51240: PPUSH
51241: LD_VAR 0 2
51245: PUSH
51246: LD_VAR 0 4
51250: ARRAY
51251: PUSH
51252: LD_INT 2
51254: ARRAY
51255: PPUSH
51256: CALL_OW 297
51260: ST_TO_ADDR
// end ; end ;
51261: GO 51150
51263: POP
51264: POP
// result := hex ;
51265: LD_ADDR_VAR 0 3
51269: PUSH
51270: LD_VAR 0 7
51274: ST_TO_ADDR
// end ;
51275: LD_VAR 0 3
51279: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51280: LD_INT 0
51282: PPUSH
51283: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51284: LD_VAR 0 1
51288: NOT
51289: PUSH
51290: LD_VAR 0 1
51294: PUSH
51295: LD_INT 21
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 23
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PPUSH
51319: CALL_OW 69
51323: IN
51324: NOT
51325: OR
51326: IFFALSE 51330
// exit ;
51328: GO 51377
// for i = 1 to 3 do
51330: LD_ADDR_VAR 0 3
51334: PUSH
51335: DOUBLE
51336: LD_INT 1
51338: DEC
51339: ST_TO_ADDR
51340: LD_INT 3
51342: PUSH
51343: FOR_TO
51344: IFFALSE 51375
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51346: LD_VAR 0 1
51350: PPUSH
51351: CALL_OW 250
51355: PPUSH
51356: LD_VAR 0 1
51360: PPUSH
51361: CALL_OW 251
51365: PPUSH
51366: LD_INT 1
51368: PPUSH
51369: CALL_OW 453
51373: GO 51343
51375: POP
51376: POP
// end ;
51377: LD_VAR 0 2
51381: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51382: LD_INT 0
51384: PPUSH
51385: PPUSH
51386: PPUSH
51387: PPUSH
51388: PPUSH
51389: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51390: LD_VAR 0 1
51394: NOT
51395: PUSH
51396: LD_VAR 0 2
51400: NOT
51401: OR
51402: PUSH
51403: LD_VAR 0 1
51407: PPUSH
51408: CALL_OW 314
51412: OR
51413: IFFALSE 51417
// exit ;
51415: GO 51858
// x := GetX ( enemy_unit ) ;
51417: LD_ADDR_VAR 0 7
51421: PUSH
51422: LD_VAR 0 2
51426: PPUSH
51427: CALL_OW 250
51431: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51432: LD_ADDR_VAR 0 8
51436: PUSH
51437: LD_VAR 0 2
51441: PPUSH
51442: CALL_OW 251
51446: ST_TO_ADDR
// if not x or not y then
51447: LD_VAR 0 7
51451: NOT
51452: PUSH
51453: LD_VAR 0 8
51457: NOT
51458: OR
51459: IFFALSE 51463
// exit ;
51461: GO 51858
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51463: LD_ADDR_VAR 0 6
51467: PUSH
51468: LD_VAR 0 7
51472: PPUSH
51473: LD_INT 0
51475: PPUSH
51476: LD_INT 4
51478: PPUSH
51479: CALL_OW 272
51483: PUSH
51484: LD_VAR 0 8
51488: PPUSH
51489: LD_INT 0
51491: PPUSH
51492: LD_INT 4
51494: PPUSH
51495: CALL_OW 273
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_VAR 0 7
51508: PPUSH
51509: LD_INT 1
51511: PPUSH
51512: LD_INT 4
51514: PPUSH
51515: CALL_OW 272
51519: PUSH
51520: LD_VAR 0 8
51524: PPUSH
51525: LD_INT 1
51527: PPUSH
51528: LD_INT 4
51530: PPUSH
51531: CALL_OW 273
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_VAR 0 7
51544: PPUSH
51545: LD_INT 2
51547: PPUSH
51548: LD_INT 4
51550: PPUSH
51551: CALL_OW 272
51555: PUSH
51556: LD_VAR 0 8
51560: PPUSH
51561: LD_INT 2
51563: PPUSH
51564: LD_INT 4
51566: PPUSH
51567: CALL_OW 273
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_VAR 0 7
51580: PPUSH
51581: LD_INT 3
51583: PPUSH
51584: LD_INT 4
51586: PPUSH
51587: CALL_OW 272
51591: PUSH
51592: LD_VAR 0 8
51596: PPUSH
51597: LD_INT 3
51599: PPUSH
51600: LD_INT 4
51602: PPUSH
51603: CALL_OW 273
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_VAR 0 7
51616: PPUSH
51617: LD_INT 4
51619: PPUSH
51620: LD_INT 4
51622: PPUSH
51623: CALL_OW 272
51627: PUSH
51628: LD_VAR 0 8
51632: PPUSH
51633: LD_INT 4
51635: PPUSH
51636: LD_INT 4
51638: PPUSH
51639: CALL_OW 273
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_VAR 0 7
51652: PPUSH
51653: LD_INT 5
51655: PPUSH
51656: LD_INT 4
51658: PPUSH
51659: CALL_OW 272
51663: PUSH
51664: LD_VAR 0 8
51668: PPUSH
51669: LD_INT 5
51671: PPUSH
51672: LD_INT 4
51674: PPUSH
51675: CALL_OW 273
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: ST_TO_ADDR
// for i = tmp downto 1 do
51692: LD_ADDR_VAR 0 4
51696: PUSH
51697: DOUBLE
51698: LD_VAR 0 6
51702: INC
51703: ST_TO_ADDR
51704: LD_INT 1
51706: PUSH
51707: FOR_DOWNTO
51708: IFFALSE 51809
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51710: LD_VAR 0 6
51714: PUSH
51715: LD_VAR 0 4
51719: ARRAY
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: PPUSH
51725: LD_VAR 0 6
51729: PUSH
51730: LD_VAR 0 4
51734: ARRAY
51735: PUSH
51736: LD_INT 2
51738: ARRAY
51739: PPUSH
51740: CALL_OW 488
51744: NOT
51745: PUSH
51746: LD_VAR 0 6
51750: PUSH
51751: LD_VAR 0 4
51755: ARRAY
51756: PUSH
51757: LD_INT 1
51759: ARRAY
51760: PPUSH
51761: LD_VAR 0 6
51765: PUSH
51766: LD_VAR 0 4
51770: ARRAY
51771: PUSH
51772: LD_INT 2
51774: ARRAY
51775: PPUSH
51776: CALL_OW 428
51780: PUSH
51781: LD_INT 0
51783: NONEQUAL
51784: OR
51785: IFFALSE 51807
// tmp := Delete ( tmp , i ) ;
51787: LD_ADDR_VAR 0 6
51791: PUSH
51792: LD_VAR 0 6
51796: PPUSH
51797: LD_VAR 0 4
51801: PPUSH
51802: CALL_OW 3
51806: ST_TO_ADDR
51807: GO 51707
51809: POP
51810: POP
// j := GetClosestHex ( unit , tmp ) ;
51811: LD_ADDR_VAR 0 5
51815: PUSH
51816: LD_VAR 0 1
51820: PPUSH
51821: LD_VAR 0 6
51825: PPUSH
51826: CALL 51111 0 2
51830: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51831: LD_VAR 0 1
51835: PPUSH
51836: LD_VAR 0 5
51840: PUSH
51841: LD_INT 1
51843: ARRAY
51844: PPUSH
51845: LD_VAR 0 5
51849: PUSH
51850: LD_INT 2
51852: ARRAY
51853: PPUSH
51854: CALL_OW 111
// end ;
51858: LD_VAR 0 3
51862: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51863: LD_INT 0
51865: PPUSH
51866: PPUSH
51867: PPUSH
// uc_side = 0 ;
51868: LD_ADDR_OWVAR 20
51872: PUSH
51873: LD_INT 0
51875: ST_TO_ADDR
// uc_nation = 0 ;
51876: LD_ADDR_OWVAR 21
51880: PUSH
51881: LD_INT 0
51883: ST_TO_ADDR
// InitHc ;
51884: CALL_OW 19
// InitVc ;
51888: CALL_OW 20
// if mastodonts then
51892: LD_VAR 0 6
51896: IFFALSE 51963
// for i = 1 to mastodonts do
51898: LD_ADDR_VAR 0 11
51902: PUSH
51903: DOUBLE
51904: LD_INT 1
51906: DEC
51907: ST_TO_ADDR
51908: LD_VAR 0 6
51912: PUSH
51913: FOR_TO
51914: IFFALSE 51961
// begin vc_chassis := 31 ;
51916: LD_ADDR_OWVAR 37
51920: PUSH
51921: LD_INT 31
51923: ST_TO_ADDR
// vc_control := control_rider ;
51924: LD_ADDR_OWVAR 38
51928: PUSH
51929: LD_INT 4
51931: ST_TO_ADDR
// animal := CreateVehicle ;
51932: LD_ADDR_VAR 0 12
51936: PUSH
51937: CALL_OW 45
51941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51942: LD_VAR 0 12
51946: PPUSH
51947: LD_VAR 0 8
51951: PPUSH
51952: LD_INT 0
51954: PPUSH
51955: CALL 54032 0 3
// end ;
51959: GO 51913
51961: POP
51962: POP
// if horses then
51963: LD_VAR 0 5
51967: IFFALSE 52034
// for i = 1 to horses do
51969: LD_ADDR_VAR 0 11
51973: PUSH
51974: DOUBLE
51975: LD_INT 1
51977: DEC
51978: ST_TO_ADDR
51979: LD_VAR 0 5
51983: PUSH
51984: FOR_TO
51985: IFFALSE 52032
// begin hc_class := 21 ;
51987: LD_ADDR_OWVAR 28
51991: PUSH
51992: LD_INT 21
51994: ST_TO_ADDR
// hc_gallery :=  ;
51995: LD_ADDR_OWVAR 33
51999: PUSH
52000: LD_STRING 
52002: ST_TO_ADDR
// animal := CreateHuman ;
52003: LD_ADDR_VAR 0 12
52007: PUSH
52008: CALL_OW 44
52012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52013: LD_VAR 0 12
52017: PPUSH
52018: LD_VAR 0 8
52022: PPUSH
52023: LD_INT 0
52025: PPUSH
52026: CALL 54032 0 3
// end ;
52030: GO 51984
52032: POP
52033: POP
// if birds then
52034: LD_VAR 0 1
52038: IFFALSE 52105
// for i = 1 to birds do
52040: LD_ADDR_VAR 0 11
52044: PUSH
52045: DOUBLE
52046: LD_INT 1
52048: DEC
52049: ST_TO_ADDR
52050: LD_VAR 0 1
52054: PUSH
52055: FOR_TO
52056: IFFALSE 52103
// begin hc_class = 18 ;
52058: LD_ADDR_OWVAR 28
52062: PUSH
52063: LD_INT 18
52065: ST_TO_ADDR
// hc_gallery =  ;
52066: LD_ADDR_OWVAR 33
52070: PUSH
52071: LD_STRING 
52073: ST_TO_ADDR
// animal := CreateHuman ;
52074: LD_ADDR_VAR 0 12
52078: PUSH
52079: CALL_OW 44
52083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52084: LD_VAR 0 12
52088: PPUSH
52089: LD_VAR 0 8
52093: PPUSH
52094: LD_INT 0
52096: PPUSH
52097: CALL 54032 0 3
// end ;
52101: GO 52055
52103: POP
52104: POP
// if tigers then
52105: LD_VAR 0 2
52109: IFFALSE 52193
// for i = 1 to tigers do
52111: LD_ADDR_VAR 0 11
52115: PUSH
52116: DOUBLE
52117: LD_INT 1
52119: DEC
52120: ST_TO_ADDR
52121: LD_VAR 0 2
52125: PUSH
52126: FOR_TO
52127: IFFALSE 52191
// begin hc_class = class_tiger ;
52129: LD_ADDR_OWVAR 28
52133: PUSH
52134: LD_INT 14
52136: ST_TO_ADDR
// hc_gallery =  ;
52137: LD_ADDR_OWVAR 33
52141: PUSH
52142: LD_STRING 
52144: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52145: LD_ADDR_OWVAR 35
52149: PUSH
52150: LD_INT 7
52152: NEG
52153: PPUSH
52154: LD_INT 7
52156: PPUSH
52157: CALL_OW 12
52161: ST_TO_ADDR
// animal := CreateHuman ;
52162: LD_ADDR_VAR 0 12
52166: PUSH
52167: CALL_OW 44
52171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52172: LD_VAR 0 12
52176: PPUSH
52177: LD_VAR 0 8
52181: PPUSH
52182: LD_INT 0
52184: PPUSH
52185: CALL 54032 0 3
// end ;
52189: GO 52126
52191: POP
52192: POP
// if apemans then
52193: LD_VAR 0 3
52197: IFFALSE 52320
// for i = 1 to apemans do
52199: LD_ADDR_VAR 0 11
52203: PUSH
52204: DOUBLE
52205: LD_INT 1
52207: DEC
52208: ST_TO_ADDR
52209: LD_VAR 0 3
52213: PUSH
52214: FOR_TO
52215: IFFALSE 52318
// begin hc_class = class_apeman ;
52217: LD_ADDR_OWVAR 28
52221: PUSH
52222: LD_INT 12
52224: ST_TO_ADDR
// hc_gallery =  ;
52225: LD_ADDR_OWVAR 33
52229: PUSH
52230: LD_STRING 
52232: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52233: LD_ADDR_OWVAR 35
52237: PUSH
52238: LD_INT 5
52240: NEG
52241: PPUSH
52242: LD_INT 5
52244: PPUSH
52245: CALL_OW 12
52249: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52250: LD_ADDR_OWVAR 31
52254: PUSH
52255: LD_INT 1
52257: PPUSH
52258: LD_INT 3
52260: PPUSH
52261: CALL_OW 12
52265: PUSH
52266: LD_INT 1
52268: PPUSH
52269: LD_INT 3
52271: PPUSH
52272: CALL_OW 12
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// animal := CreateHuman ;
52289: LD_ADDR_VAR 0 12
52293: PUSH
52294: CALL_OW 44
52298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52299: LD_VAR 0 12
52303: PPUSH
52304: LD_VAR 0 8
52308: PPUSH
52309: LD_INT 0
52311: PPUSH
52312: CALL 54032 0 3
// end ;
52316: GO 52214
52318: POP
52319: POP
// if enchidnas then
52320: LD_VAR 0 4
52324: IFFALSE 52391
// for i = 1 to enchidnas do
52326: LD_ADDR_VAR 0 11
52330: PUSH
52331: DOUBLE
52332: LD_INT 1
52334: DEC
52335: ST_TO_ADDR
52336: LD_VAR 0 4
52340: PUSH
52341: FOR_TO
52342: IFFALSE 52389
// begin hc_class = 13 ;
52344: LD_ADDR_OWVAR 28
52348: PUSH
52349: LD_INT 13
52351: ST_TO_ADDR
// hc_gallery =  ;
52352: LD_ADDR_OWVAR 33
52356: PUSH
52357: LD_STRING 
52359: ST_TO_ADDR
// animal := CreateHuman ;
52360: LD_ADDR_VAR 0 12
52364: PUSH
52365: CALL_OW 44
52369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52370: LD_VAR 0 12
52374: PPUSH
52375: LD_VAR 0 8
52379: PPUSH
52380: LD_INT 0
52382: PPUSH
52383: CALL 54032 0 3
// end ;
52387: GO 52341
52389: POP
52390: POP
// if fishes then
52391: LD_VAR 0 7
52395: IFFALSE 52462
// for i = 1 to fishes do
52397: LD_ADDR_VAR 0 11
52401: PUSH
52402: DOUBLE
52403: LD_INT 1
52405: DEC
52406: ST_TO_ADDR
52407: LD_VAR 0 7
52411: PUSH
52412: FOR_TO
52413: IFFALSE 52460
// begin hc_class = 20 ;
52415: LD_ADDR_OWVAR 28
52419: PUSH
52420: LD_INT 20
52422: ST_TO_ADDR
// hc_gallery =  ;
52423: LD_ADDR_OWVAR 33
52427: PUSH
52428: LD_STRING 
52430: ST_TO_ADDR
// animal := CreateHuman ;
52431: LD_ADDR_VAR 0 12
52435: PUSH
52436: CALL_OW 44
52440: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52441: LD_VAR 0 12
52445: PPUSH
52446: LD_VAR 0 9
52450: PPUSH
52451: LD_INT 0
52453: PPUSH
52454: CALL 54032 0 3
// end ;
52458: GO 52412
52460: POP
52461: POP
// end ;
52462: LD_VAR 0 10
52466: RET
// export function WantHeal ( sci , unit ) ; begin
52467: LD_INT 0
52469: PPUSH
// if GetTaskList ( sci ) > 0 then
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 437
52479: PUSH
52480: LD_INT 0
52482: GREATER
52483: IFFALSE 52553
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52485: LD_VAR 0 1
52489: PPUSH
52490: CALL_OW 437
52494: PUSH
52495: LD_INT 1
52497: ARRAY
52498: PUSH
52499: LD_INT 1
52501: ARRAY
52502: PUSH
52503: LD_STRING l
52505: EQUAL
52506: PUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 437
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: PUSH
52521: LD_INT 4
52523: ARRAY
52524: PUSH
52525: LD_VAR 0 2
52529: EQUAL
52530: AND
52531: IFFALSE 52543
// result := true else
52533: LD_ADDR_VAR 0 3
52537: PUSH
52538: LD_INT 1
52540: ST_TO_ADDR
52541: GO 52551
// result := false ;
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_INT 0
52550: ST_TO_ADDR
// end else
52551: GO 52561
// result := false ;
52553: LD_ADDR_VAR 0 3
52557: PUSH
52558: LD_INT 0
52560: ST_TO_ADDR
// end ;
52561: LD_VAR 0 3
52565: RET
// export function HealTarget ( sci ) ; begin
52566: LD_INT 0
52568: PPUSH
// if not sci then
52569: LD_VAR 0 1
52573: NOT
52574: IFFALSE 52578
// exit ;
52576: GO 52643
// result := 0 ;
52578: LD_ADDR_VAR 0 2
52582: PUSH
52583: LD_INT 0
52585: ST_TO_ADDR
// if GetTaskList ( sci ) then
52586: LD_VAR 0 1
52590: PPUSH
52591: CALL_OW 437
52595: IFFALSE 52643
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52597: LD_VAR 0 1
52601: PPUSH
52602: CALL_OW 437
52606: PUSH
52607: LD_INT 1
52609: ARRAY
52610: PUSH
52611: LD_INT 1
52613: ARRAY
52614: PUSH
52615: LD_STRING l
52617: EQUAL
52618: IFFALSE 52643
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52620: LD_ADDR_VAR 0 2
52624: PUSH
52625: LD_VAR 0 1
52629: PPUSH
52630: CALL_OW 437
52634: PUSH
52635: LD_INT 1
52637: ARRAY
52638: PUSH
52639: LD_INT 4
52641: ARRAY
52642: ST_TO_ADDR
// end ;
52643: LD_VAR 0 2
52647: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52648: LD_INT 0
52650: PPUSH
52651: PPUSH
52652: PPUSH
52653: PPUSH
// if not base_units then
52654: LD_VAR 0 1
52658: NOT
52659: IFFALSE 52663
// exit ;
52661: GO 52750
// result := false ;
52663: LD_ADDR_VAR 0 2
52667: PUSH
52668: LD_INT 0
52670: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52671: LD_ADDR_VAR 0 5
52675: PUSH
52676: LD_VAR 0 1
52680: PPUSH
52681: LD_INT 21
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PPUSH
52691: CALL_OW 72
52695: ST_TO_ADDR
// if not tmp then
52696: LD_VAR 0 5
52700: NOT
52701: IFFALSE 52705
// exit ;
52703: GO 52750
// for i in tmp do
52705: LD_ADDR_VAR 0 3
52709: PUSH
52710: LD_VAR 0 5
52714: PUSH
52715: FOR_IN
52716: IFFALSE 52748
// begin result := EnemyInRange ( i , 22 ) ;
52718: LD_ADDR_VAR 0 2
52722: PUSH
52723: LD_VAR 0 3
52727: PPUSH
52728: LD_INT 22
52730: PPUSH
52731: CALL 50986 0 2
52735: ST_TO_ADDR
// if result then
52736: LD_VAR 0 2
52740: IFFALSE 52746
// exit ;
52742: POP
52743: POP
52744: GO 52750
// end ;
52746: GO 52715
52748: POP
52749: POP
// end ;
52750: LD_VAR 0 2
52754: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52755: LD_INT 0
52757: PPUSH
52758: PPUSH
// if not units then
52759: LD_VAR 0 1
52763: NOT
52764: IFFALSE 52768
// exit ;
52766: GO 52838
// result := [ ] ;
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: EMPTY
52774: ST_TO_ADDR
// for i in units do
52775: LD_ADDR_VAR 0 4
52779: PUSH
52780: LD_VAR 0 1
52784: PUSH
52785: FOR_IN
52786: IFFALSE 52836
// if GetTag ( i ) = tag then
52788: LD_VAR 0 4
52792: PPUSH
52793: CALL_OW 110
52797: PUSH
52798: LD_VAR 0 2
52802: EQUAL
52803: IFFALSE 52834
// result := Insert ( result , result + 1 , i ) ;
52805: LD_ADDR_VAR 0 3
52809: PUSH
52810: LD_VAR 0 3
52814: PPUSH
52815: LD_VAR 0 3
52819: PUSH
52820: LD_INT 1
52822: PLUS
52823: PPUSH
52824: LD_VAR 0 4
52828: PPUSH
52829: CALL_OW 2
52833: ST_TO_ADDR
52834: GO 52785
52836: POP
52837: POP
// end ;
52838: LD_VAR 0 3
52842: RET
// export function IsDriver ( un ) ; begin
52843: LD_INT 0
52845: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52846: LD_ADDR_VAR 0 2
52850: PUSH
52851: LD_VAR 0 1
52855: PUSH
52856: LD_INT 55
52858: PUSH
52859: EMPTY
52860: LIST
52861: PPUSH
52862: CALL_OW 69
52866: IN
52867: ST_TO_ADDR
// end ;
52868: LD_VAR 0 2
52872: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52873: LD_INT 0
52875: PPUSH
52876: PPUSH
// list := [ ] ;
52877: LD_ADDR_VAR 0 5
52881: PUSH
52882: EMPTY
52883: ST_TO_ADDR
// case d of 0 :
52884: LD_VAR 0 3
52888: PUSH
52889: LD_INT 0
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52897
52895: GO 53030
52897: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52898: LD_ADDR_VAR 0 5
52902: PUSH
52903: LD_VAR 0 1
52907: PUSH
52908: LD_INT 4
52910: MINUS
52911: PUSH
52912: LD_VAR 0 2
52916: PUSH
52917: LD_INT 4
52919: MINUS
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: PUSH
52929: LD_VAR 0 1
52933: PUSH
52934: LD_INT 3
52936: MINUS
52937: PUSH
52938: LD_VAR 0 2
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: LIST
52950: PUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_INT 4
52958: PLUS
52959: PUSH
52960: LD_VAR 0 2
52964: PUSH
52965: LD_INT 4
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: PUSH
52973: LD_VAR 0 1
52977: PUSH
52978: LD_INT 3
52980: PLUS
52981: PUSH
52982: LD_VAR 0 2
52986: PUSH
52987: LD_INT 3
52989: PLUS
52990: PUSH
52991: LD_INT 5
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: PUSH
52999: LD_VAR 0 1
53003: PUSH
53004: LD_VAR 0 2
53008: PUSH
53009: LD_INT 4
53011: PLUS
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: ST_TO_ADDR
// end ; 1 :
53028: GO 53728
53030: LD_INT 1
53032: DOUBLE
53033: EQUAL
53034: IFTRUE 53038
53036: GO 53171
53038: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53039: LD_ADDR_VAR 0 5
53043: PUSH
53044: LD_VAR 0 1
53048: PUSH
53049: LD_VAR 0 2
53053: PUSH
53054: LD_INT 4
53056: MINUS
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: PUSH
53066: LD_VAR 0 1
53070: PUSH
53071: LD_INT 3
53073: MINUS
53074: PUSH
53075: LD_VAR 0 2
53079: PUSH
53080: LD_INT 3
53082: MINUS
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: PUSH
53092: LD_VAR 0 1
53096: PUSH
53097: LD_INT 4
53099: MINUS
53100: PUSH
53101: LD_VAR 0 2
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: PUSH
53114: LD_VAR 0 1
53118: PUSH
53119: LD_VAR 0 2
53123: PUSH
53124: LD_INT 3
53126: PLUS
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_VAR 0 1
53140: PUSH
53141: LD_INT 4
53143: PLUS
53144: PUSH
53145: LD_VAR 0 2
53149: PUSH
53150: LD_INT 4
53152: PLUS
53153: PUSH
53154: LD_INT 5
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// end ; 2 :
53169: GO 53728
53171: LD_INT 2
53173: DOUBLE
53174: EQUAL
53175: IFTRUE 53179
53177: GO 53308
53179: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53180: LD_ADDR_VAR 0 5
53184: PUSH
53185: LD_VAR 0 1
53189: PUSH
53190: LD_VAR 0 2
53194: PUSH
53195: LD_INT 3
53197: MINUS
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: PUSH
53207: LD_VAR 0 1
53211: PUSH
53212: LD_INT 4
53214: PLUS
53215: PUSH
53216: LD_VAR 0 2
53220: PUSH
53221: LD_INT 4
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: PUSH
53229: LD_VAR 0 1
53233: PUSH
53234: LD_VAR 0 2
53238: PUSH
53239: LD_INT 4
53241: PLUS
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: LIST
53250: PUSH
53251: LD_VAR 0 1
53255: PUSH
53256: LD_INT 3
53258: MINUS
53259: PUSH
53260: LD_VAR 0 2
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: LIST
53272: PUSH
53273: LD_VAR 0 1
53277: PUSH
53278: LD_INT 4
53280: MINUS
53281: PUSH
53282: LD_VAR 0 2
53286: PUSH
53287: LD_INT 4
53289: MINUS
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// end ; 3 :
53306: GO 53728
53308: LD_INT 3
53310: DOUBLE
53311: EQUAL
53312: IFTRUE 53316
53314: GO 53449
53316: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53317: LD_ADDR_VAR 0 5
53321: PUSH
53322: LD_VAR 0 1
53326: PUSH
53327: LD_INT 3
53329: PLUS
53330: PUSH
53331: LD_VAR 0 2
53335: PUSH
53336: LD_INT 4
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: PUSH
53344: LD_VAR 0 1
53348: PUSH
53349: LD_INT 4
53351: PLUS
53352: PUSH
53353: LD_VAR 0 2
53357: PUSH
53358: LD_INT 4
53360: PLUS
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: PUSH
53370: LD_VAR 0 1
53374: PUSH
53375: LD_INT 4
53377: MINUS
53378: PUSH
53379: LD_VAR 0 2
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: LIST
53391: PUSH
53392: LD_VAR 0 1
53396: PUSH
53397: LD_VAR 0 2
53401: PUSH
53402: LD_INT 4
53404: MINUS
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: PUSH
53414: LD_VAR 0 1
53418: PUSH
53419: LD_INT 3
53421: MINUS
53422: PUSH
53423: LD_VAR 0 2
53427: PUSH
53428: LD_INT 3
53430: MINUS
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// end ; 4 :
53447: GO 53728
53449: LD_INT 4
53451: DOUBLE
53452: EQUAL
53453: IFTRUE 53457
53455: GO 53590
53457: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53458: LD_ADDR_VAR 0 5
53462: PUSH
53463: LD_VAR 0 1
53467: PUSH
53468: LD_VAR 0 2
53472: PUSH
53473: LD_INT 4
53475: PLUS
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: PUSH
53485: LD_VAR 0 1
53489: PUSH
53490: LD_INT 3
53492: PLUS
53493: PUSH
53494: LD_VAR 0 2
53498: PUSH
53499: LD_INT 3
53501: PLUS
53502: PUSH
53503: LD_INT 5
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: PUSH
53511: LD_VAR 0 1
53515: PUSH
53516: LD_INT 4
53518: PLUS
53519: PUSH
53520: LD_VAR 0 2
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: PUSH
53533: LD_VAR 0 1
53537: PUSH
53538: LD_VAR 0 2
53542: PUSH
53543: LD_INT 3
53545: MINUS
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: PUSH
53555: LD_VAR 0 1
53559: PUSH
53560: LD_INT 4
53562: MINUS
53563: PUSH
53564: LD_VAR 0 2
53568: PUSH
53569: LD_INT 4
53571: MINUS
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// end ; 5 :
53588: GO 53728
53590: LD_INT 5
53592: DOUBLE
53593: EQUAL
53594: IFTRUE 53598
53596: GO 53727
53598: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53599: LD_ADDR_VAR 0 5
53603: PUSH
53604: LD_VAR 0 1
53608: PUSH
53609: LD_INT 4
53611: MINUS
53612: PUSH
53613: LD_VAR 0 2
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: PUSH
53626: LD_VAR 0 1
53630: PUSH
53631: LD_VAR 0 2
53635: PUSH
53636: LD_INT 4
53638: MINUS
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: LIST
53647: PUSH
53648: LD_VAR 0 1
53652: PUSH
53653: LD_INT 4
53655: PLUS
53656: PUSH
53657: LD_VAR 0 2
53661: PUSH
53662: LD_INT 4
53664: PLUS
53665: PUSH
53666: LD_INT 5
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: PUSH
53674: LD_VAR 0 1
53678: PUSH
53679: LD_INT 3
53681: PLUS
53682: PUSH
53683: LD_VAR 0 2
53687: PUSH
53688: LD_INT 4
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: PUSH
53696: LD_VAR 0 1
53700: PUSH
53701: LD_VAR 0 2
53705: PUSH
53706: LD_INT 3
53708: PLUS
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: ST_TO_ADDR
// end ; end ;
53725: GO 53728
53727: POP
// result := list ;
53728: LD_ADDR_VAR 0 4
53732: PUSH
53733: LD_VAR 0 5
53737: ST_TO_ADDR
// end ;
53738: LD_VAR 0 4
53742: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53743: LD_INT 0
53745: PPUSH
53746: PPUSH
53747: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53748: LD_VAR 0 1
53752: NOT
53753: PUSH
53754: LD_VAR 0 2
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: IN
53777: NOT
53778: OR
53779: IFFALSE 53783
// exit ;
53781: GO 53875
// tmp := [ ] ;
53783: LD_ADDR_VAR 0 5
53787: PUSH
53788: EMPTY
53789: ST_TO_ADDR
// for i in units do
53790: LD_ADDR_VAR 0 4
53794: PUSH
53795: LD_VAR 0 1
53799: PUSH
53800: FOR_IN
53801: IFFALSE 53844
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53803: LD_ADDR_VAR 0 5
53807: PUSH
53808: LD_VAR 0 5
53812: PPUSH
53813: LD_VAR 0 5
53817: PUSH
53818: LD_INT 1
53820: PLUS
53821: PPUSH
53822: LD_VAR 0 4
53826: PPUSH
53827: LD_VAR 0 2
53831: PPUSH
53832: CALL_OW 259
53836: PPUSH
53837: CALL_OW 2
53841: ST_TO_ADDR
53842: GO 53800
53844: POP
53845: POP
// if not tmp then
53846: LD_VAR 0 5
53850: NOT
53851: IFFALSE 53855
// exit ;
53853: GO 53875
// result := SortListByListDesc ( units , tmp ) ;
53855: LD_ADDR_VAR 0 3
53859: PUSH
53860: LD_VAR 0 1
53864: PPUSH
53865: LD_VAR 0 5
53869: PPUSH
53870: CALL_OW 77
53874: ST_TO_ADDR
// end ;
53875: LD_VAR 0 3
53879: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53880: LD_INT 0
53882: PPUSH
53883: PPUSH
53884: PPUSH
// x := GetX ( building ) ;
53885: LD_ADDR_VAR 0 4
53889: PUSH
53890: LD_VAR 0 2
53894: PPUSH
53895: CALL_OW 250
53899: ST_TO_ADDR
// y := GetY ( building ) ;
53900: LD_ADDR_VAR 0 5
53904: PUSH
53905: LD_VAR 0 2
53909: PPUSH
53910: CALL_OW 251
53914: ST_TO_ADDR
// if GetTaskList ( unit ) then
53915: LD_VAR 0 1
53919: PPUSH
53920: CALL_OW 437
53924: IFFALSE 54019
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53926: LD_STRING e
53928: PUSH
53929: LD_VAR 0 1
53933: PPUSH
53934: CALL_OW 437
53938: PUSH
53939: LD_INT 1
53941: ARRAY
53942: PUSH
53943: LD_INT 1
53945: ARRAY
53946: EQUAL
53947: PUSH
53948: LD_VAR 0 4
53952: PUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: CALL_OW 437
53962: PUSH
53963: LD_INT 1
53965: ARRAY
53966: PUSH
53967: LD_INT 2
53969: ARRAY
53970: EQUAL
53971: AND
53972: PUSH
53973: LD_VAR 0 5
53977: PUSH
53978: LD_VAR 0 1
53982: PPUSH
53983: CALL_OW 437
53987: PUSH
53988: LD_INT 1
53990: ARRAY
53991: PUSH
53992: LD_INT 3
53994: ARRAY
53995: EQUAL
53996: AND
53997: IFFALSE 54009
// result := true else
53999: LD_ADDR_VAR 0 3
54003: PUSH
54004: LD_INT 1
54006: ST_TO_ADDR
54007: GO 54017
// result := false ;
54009: LD_ADDR_VAR 0 3
54013: PUSH
54014: LD_INT 0
54016: ST_TO_ADDR
// end else
54017: GO 54027
// result := false ;
54019: LD_ADDR_VAR 0 3
54023: PUSH
54024: LD_INT 0
54026: ST_TO_ADDR
// end ;
54027: LD_VAR 0 3
54031: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54032: LD_INT 0
54034: PPUSH
54035: PPUSH
54036: PPUSH
54037: PPUSH
// if not unit or not area then
54038: LD_VAR 0 1
54042: NOT
54043: PUSH
54044: LD_VAR 0 2
54048: NOT
54049: OR
54050: IFFALSE 54054
// exit ;
54052: GO 54218
// tmp := AreaToList ( area , i ) ;
54054: LD_ADDR_VAR 0 6
54058: PUSH
54059: LD_VAR 0 2
54063: PPUSH
54064: LD_VAR 0 5
54068: PPUSH
54069: CALL_OW 517
54073: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54074: LD_ADDR_VAR 0 5
54078: PUSH
54079: DOUBLE
54080: LD_INT 1
54082: DEC
54083: ST_TO_ADDR
54084: LD_VAR 0 6
54088: PUSH
54089: LD_INT 1
54091: ARRAY
54092: PUSH
54093: FOR_TO
54094: IFFALSE 54216
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54096: LD_ADDR_VAR 0 7
54100: PUSH
54101: LD_VAR 0 6
54105: PUSH
54106: LD_INT 1
54108: ARRAY
54109: PUSH
54110: LD_VAR 0 5
54114: ARRAY
54115: PUSH
54116: LD_VAR 0 6
54120: PUSH
54121: LD_INT 2
54123: ARRAY
54124: PUSH
54125: LD_VAR 0 5
54129: ARRAY
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54135: LD_VAR 0 7
54139: PUSH
54140: LD_INT 1
54142: ARRAY
54143: PPUSH
54144: LD_VAR 0 7
54148: PUSH
54149: LD_INT 2
54151: ARRAY
54152: PPUSH
54153: CALL_OW 428
54157: PUSH
54158: LD_INT 0
54160: EQUAL
54161: IFFALSE 54214
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54163: LD_VAR 0 1
54167: PPUSH
54168: LD_VAR 0 7
54172: PUSH
54173: LD_INT 1
54175: ARRAY
54176: PPUSH
54177: LD_VAR 0 7
54181: PUSH
54182: LD_INT 2
54184: ARRAY
54185: PPUSH
54186: LD_VAR 0 3
54190: PPUSH
54191: CALL_OW 48
// result := IsPlaced ( unit ) ;
54195: LD_ADDR_VAR 0 4
54199: PUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: CALL_OW 305
54209: ST_TO_ADDR
// exit ;
54210: POP
54211: POP
54212: GO 54218
// end ; end ;
54214: GO 54093
54216: POP
54217: POP
// end ;
54218: LD_VAR 0 4
54222: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54223: LD_INT 0
54225: PPUSH
54226: PPUSH
54227: PPUSH
// if not side or side > 8 then
54228: LD_VAR 0 1
54232: NOT
54233: PUSH
54234: LD_VAR 0 1
54238: PUSH
54239: LD_INT 8
54241: GREATER
54242: OR
54243: IFFALSE 54247
// exit ;
54245: GO 54434
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54247: LD_ADDR_VAR 0 4
54251: PUSH
54252: LD_INT 22
54254: PUSH
54255: LD_VAR 0 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 21
54266: PUSH
54267: LD_INT 3
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PPUSH
54278: CALL_OW 69
54282: ST_TO_ADDR
// if not tmp then
54283: LD_VAR 0 4
54287: NOT
54288: IFFALSE 54292
// exit ;
54290: GO 54434
// enable_addtolog := true ;
54292: LD_ADDR_OWVAR 81
54296: PUSH
54297: LD_INT 1
54299: ST_TO_ADDR
// AddToLog ( [ ) ;
54300: LD_STRING [
54302: PPUSH
54303: CALL_OW 561
// for i in tmp do
54307: LD_ADDR_VAR 0 3
54311: PUSH
54312: LD_VAR 0 4
54316: PUSH
54317: FOR_IN
54318: IFFALSE 54425
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54320: LD_STRING [
54322: PUSH
54323: LD_VAR 0 3
54327: PPUSH
54328: CALL_OW 266
54332: STR
54333: PUSH
54334: LD_STRING , 
54336: STR
54337: PUSH
54338: LD_VAR 0 3
54342: PPUSH
54343: CALL_OW 250
54347: STR
54348: PUSH
54349: LD_STRING , 
54351: STR
54352: PUSH
54353: LD_VAR 0 3
54357: PPUSH
54358: CALL_OW 251
54362: STR
54363: PUSH
54364: LD_STRING , 
54366: STR
54367: PUSH
54368: LD_VAR 0 3
54372: PPUSH
54373: CALL_OW 254
54377: STR
54378: PUSH
54379: LD_STRING , 
54381: STR
54382: PUSH
54383: LD_VAR 0 3
54387: PPUSH
54388: LD_INT 1
54390: PPUSH
54391: CALL_OW 268
54395: STR
54396: PUSH
54397: LD_STRING , 
54399: STR
54400: PUSH
54401: LD_VAR 0 3
54405: PPUSH
54406: LD_INT 2
54408: PPUSH
54409: CALL_OW 268
54413: STR
54414: PUSH
54415: LD_STRING ],
54417: STR
54418: PPUSH
54419: CALL_OW 561
// end ;
54423: GO 54317
54425: POP
54426: POP
// AddToLog ( ]; ) ;
54427: LD_STRING ];
54429: PPUSH
54430: CALL_OW 561
// end ;
54434: LD_VAR 0 2
54438: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54439: LD_INT 0
54441: PPUSH
54442: PPUSH
54443: PPUSH
54444: PPUSH
54445: PPUSH
// if not area or not rate or not max then
54446: LD_VAR 0 1
54450: NOT
54451: PUSH
54452: LD_VAR 0 2
54456: NOT
54457: OR
54458: PUSH
54459: LD_VAR 0 4
54463: NOT
54464: OR
54465: IFFALSE 54469
// exit ;
54467: GO 54661
// while 1 do
54469: LD_INT 1
54471: IFFALSE 54661
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54473: LD_ADDR_VAR 0 9
54477: PUSH
54478: LD_VAR 0 1
54482: PPUSH
54483: LD_INT 1
54485: PPUSH
54486: CALL_OW 287
54490: PUSH
54491: LD_INT 10
54493: MUL
54494: ST_TO_ADDR
// r := rate / 10 ;
54495: LD_ADDR_VAR 0 7
54499: PUSH
54500: LD_VAR 0 2
54504: PUSH
54505: LD_INT 10
54507: DIVREAL
54508: ST_TO_ADDR
// time := 1 1$00 ;
54509: LD_ADDR_VAR 0 8
54513: PUSH
54514: LD_INT 2100
54516: ST_TO_ADDR
// if amount < min then
54517: LD_VAR 0 9
54521: PUSH
54522: LD_VAR 0 3
54526: LESS
54527: IFFALSE 54545
// r := r * 2 else
54529: LD_ADDR_VAR 0 7
54533: PUSH
54534: LD_VAR 0 7
54538: PUSH
54539: LD_INT 2
54541: MUL
54542: ST_TO_ADDR
54543: GO 54571
// if amount > max then
54545: LD_VAR 0 9
54549: PUSH
54550: LD_VAR 0 4
54554: GREATER
54555: IFFALSE 54571
// r := r / 2 ;
54557: LD_ADDR_VAR 0 7
54561: PUSH
54562: LD_VAR 0 7
54566: PUSH
54567: LD_INT 2
54569: DIVREAL
54570: ST_TO_ADDR
// time := time / r ;
54571: LD_ADDR_VAR 0 8
54575: PUSH
54576: LD_VAR 0 8
54580: PUSH
54581: LD_VAR 0 7
54585: DIVREAL
54586: ST_TO_ADDR
// if time < 0 then
54587: LD_VAR 0 8
54591: PUSH
54592: LD_INT 0
54594: LESS
54595: IFFALSE 54612
// time := time * - 1 ;
54597: LD_ADDR_VAR 0 8
54601: PUSH
54602: LD_VAR 0 8
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: MUL
54611: ST_TO_ADDR
// wait ( time ) ;
54612: LD_VAR 0 8
54616: PPUSH
54617: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54621: LD_INT 35
54623: PPUSH
54624: LD_INT 875
54626: PPUSH
54627: CALL_OW 12
54631: PPUSH
54632: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54636: LD_INT 1
54638: PPUSH
54639: LD_INT 5
54641: PPUSH
54642: CALL_OW 12
54646: PPUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_INT 1
54654: PPUSH
54655: CALL_OW 55
// end ;
54659: GO 54469
// end ;
54661: LD_VAR 0 5
54665: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54666: LD_INT 0
54668: PPUSH
54669: PPUSH
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
// if not turrets or not factories then
54676: LD_VAR 0 1
54680: NOT
54681: PUSH
54682: LD_VAR 0 2
54686: NOT
54687: OR
54688: IFFALSE 54692
// exit ;
54690: GO 54999
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54692: LD_ADDR_VAR 0 10
54696: PUSH
54697: LD_INT 5
54699: PUSH
54700: LD_INT 6
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 5
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 24
54734: PUSH
54735: LD_INT 25
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 23
54744: PUSH
54745: LD_INT 27
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 42
54758: PUSH
54759: LD_INT 43
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 44
54768: PUSH
54769: LD_INT 46
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 45
54778: PUSH
54779: LD_INT 47
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// result := [ ] ;
54796: LD_ADDR_VAR 0 3
54800: PUSH
54801: EMPTY
54802: ST_TO_ADDR
// for i in turrets do
54803: LD_ADDR_VAR 0 4
54807: PUSH
54808: LD_VAR 0 1
54812: PUSH
54813: FOR_IN
54814: IFFALSE 54997
// begin nat := GetNation ( i ) ;
54816: LD_ADDR_VAR 0 7
54820: PUSH
54821: LD_VAR 0 4
54825: PPUSH
54826: CALL_OW 248
54830: ST_TO_ADDR
// weapon := 0 ;
54831: LD_ADDR_VAR 0 8
54835: PUSH
54836: LD_INT 0
54838: ST_TO_ADDR
// if not nat then
54839: LD_VAR 0 7
54843: NOT
54844: IFFALSE 54848
// continue ;
54846: GO 54813
// for j in list [ nat ] do
54848: LD_ADDR_VAR 0 5
54852: PUSH
54853: LD_VAR 0 10
54857: PUSH
54858: LD_VAR 0 7
54862: ARRAY
54863: PUSH
54864: FOR_IN
54865: IFFALSE 54906
// if GetBWeapon ( i ) = j [ 1 ] then
54867: LD_VAR 0 4
54871: PPUSH
54872: CALL_OW 269
54876: PUSH
54877: LD_VAR 0 5
54881: PUSH
54882: LD_INT 1
54884: ARRAY
54885: EQUAL
54886: IFFALSE 54904
// begin weapon := j [ 2 ] ;
54888: LD_ADDR_VAR 0 8
54892: PUSH
54893: LD_VAR 0 5
54897: PUSH
54898: LD_INT 2
54900: ARRAY
54901: ST_TO_ADDR
// break ;
54902: GO 54906
// end ;
54904: GO 54864
54906: POP
54907: POP
// if not weapon then
54908: LD_VAR 0 8
54912: NOT
54913: IFFALSE 54917
// continue ;
54915: GO 54813
// for k in factories do
54917: LD_ADDR_VAR 0 6
54921: PUSH
54922: LD_VAR 0 2
54926: PUSH
54927: FOR_IN
54928: IFFALSE 54993
// begin weapons := AvailableWeaponList ( k ) ;
54930: LD_ADDR_VAR 0 9
54934: PUSH
54935: LD_VAR 0 6
54939: PPUSH
54940: CALL_OW 478
54944: ST_TO_ADDR
// if not weapons then
54945: LD_VAR 0 9
54949: NOT
54950: IFFALSE 54954
// continue ;
54952: GO 54927
// if weapon in weapons then
54954: LD_VAR 0 8
54958: PUSH
54959: LD_VAR 0 9
54963: IN
54964: IFFALSE 54991
// begin result := [ i , weapon ] ;
54966: LD_ADDR_VAR 0 3
54970: PUSH
54971: LD_VAR 0 4
54975: PUSH
54976: LD_VAR 0 8
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: ST_TO_ADDR
// exit ;
54985: POP
54986: POP
54987: POP
54988: POP
54989: GO 54999
// end ; end ;
54991: GO 54927
54993: POP
54994: POP
// end ;
54995: GO 54813
54997: POP
54998: POP
// end ;
54999: LD_VAR 0 3
55003: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55004: LD_INT 0
55006: PPUSH
// if not side or side > 8 then
55007: LD_VAR 0 3
55011: NOT
55012: PUSH
55013: LD_VAR 0 3
55017: PUSH
55018: LD_INT 8
55020: GREATER
55021: OR
55022: IFFALSE 55026
// exit ;
55024: GO 55085
// if not range then
55026: LD_VAR 0 4
55030: NOT
55031: IFFALSE 55042
// range := - 12 ;
55033: LD_ADDR_VAR 0 4
55037: PUSH
55038: LD_INT 12
55040: NEG
55041: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55042: LD_VAR 0 1
55046: PPUSH
55047: LD_VAR 0 2
55051: PPUSH
55052: LD_VAR 0 3
55056: PPUSH
55057: LD_VAR 0 4
55061: PPUSH
55062: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55066: LD_VAR 0 1
55070: PPUSH
55071: LD_VAR 0 2
55075: PPUSH
55076: LD_VAR 0 3
55080: PPUSH
55081: CALL_OW 331
// end ;
55085: LD_VAR 0 5
55089: RET
// export function Video ( mode ) ; begin
55090: LD_INT 0
55092: PPUSH
// ingame_video = mode ;
55093: LD_ADDR_OWVAR 52
55097: PUSH
55098: LD_VAR 0 1
55102: ST_TO_ADDR
// interface_hidden = mode ;
55103: LD_ADDR_OWVAR 54
55107: PUSH
55108: LD_VAR 0 1
55112: ST_TO_ADDR
// end ;
55113: LD_VAR 0 2
55117: RET
// export function Join ( array , element ) ; begin
55118: LD_INT 0
55120: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55121: LD_ADDR_VAR 0 3
55125: PUSH
55126: LD_VAR 0 1
55130: PPUSH
55131: LD_VAR 0 1
55135: PUSH
55136: LD_INT 1
55138: PLUS
55139: PPUSH
55140: LD_VAR 0 2
55144: PPUSH
55145: CALL_OW 1
55149: ST_TO_ADDR
// end ;
55150: LD_VAR 0 3
55154: RET
// export function JoinUnion ( array , element ) ; begin
55155: LD_INT 0
55157: PPUSH
// result := array union element ;
55158: LD_ADDR_VAR 0 3
55162: PUSH
55163: LD_VAR 0 1
55167: PUSH
55168: LD_VAR 0 2
55172: UNION
55173: ST_TO_ADDR
// end ;
55174: LD_VAR 0 3
55178: RET
// export function GetBehemoths ( side ) ; begin
55179: LD_INT 0
55181: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55182: LD_ADDR_VAR 0 2
55186: PUSH
55187: LD_INT 22
55189: PUSH
55190: LD_VAR 0 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 31
55201: PUSH
55202: LD_INT 25
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PPUSH
55213: CALL_OW 69
55217: ST_TO_ADDR
// end ;
55218: LD_VAR 0 2
55222: RET
// export function Shuffle ( array ) ; var i , index ; begin
55223: LD_INT 0
55225: PPUSH
55226: PPUSH
55227: PPUSH
// result := [ ] ;
55228: LD_ADDR_VAR 0 2
55232: PUSH
55233: EMPTY
55234: ST_TO_ADDR
// if not array then
55235: LD_VAR 0 1
55239: NOT
55240: IFFALSE 55244
// exit ;
55242: GO 55343
// Randomize ;
55244: CALL_OW 10
// for i = array downto 1 do
55248: LD_ADDR_VAR 0 3
55252: PUSH
55253: DOUBLE
55254: LD_VAR 0 1
55258: INC
55259: ST_TO_ADDR
55260: LD_INT 1
55262: PUSH
55263: FOR_DOWNTO
55264: IFFALSE 55341
// begin index := rand ( 1 , array ) ;
55266: LD_ADDR_VAR 0 4
55270: PUSH
55271: LD_INT 1
55273: PPUSH
55274: LD_VAR 0 1
55278: PPUSH
55279: CALL_OW 12
55283: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55284: LD_ADDR_VAR 0 2
55288: PUSH
55289: LD_VAR 0 2
55293: PPUSH
55294: LD_VAR 0 2
55298: PUSH
55299: LD_INT 1
55301: PLUS
55302: PPUSH
55303: LD_VAR 0 1
55307: PUSH
55308: LD_VAR 0 4
55312: ARRAY
55313: PPUSH
55314: CALL_OW 2
55318: ST_TO_ADDR
// array := Delete ( array , index ) ;
55319: LD_ADDR_VAR 0 1
55323: PUSH
55324: LD_VAR 0 1
55328: PPUSH
55329: LD_VAR 0 4
55333: PPUSH
55334: CALL_OW 3
55338: ST_TO_ADDR
// end ;
55339: GO 55263
55341: POP
55342: POP
// end ;
55343: LD_VAR 0 2
55347: RET
// export function GetBaseMaterials ( base ) ; begin
55348: LD_INT 0
55350: PPUSH
// result := [ 0 , 0 , 0 ] ;
55351: LD_ADDR_VAR 0 2
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: ST_TO_ADDR
// if not base then
55370: LD_VAR 0 1
55374: NOT
55375: IFFALSE 55379
// exit ;
55377: GO 55428
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55379: LD_ADDR_VAR 0 2
55383: PUSH
55384: LD_VAR 0 1
55388: PPUSH
55389: LD_INT 1
55391: PPUSH
55392: CALL_OW 275
55396: PUSH
55397: LD_VAR 0 1
55401: PPUSH
55402: LD_INT 2
55404: PPUSH
55405: CALL_OW 275
55409: PUSH
55410: LD_VAR 0 1
55414: PPUSH
55415: LD_INT 3
55417: PPUSH
55418: CALL_OW 275
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// end ;
55428: LD_VAR 0 2
55432: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55433: LD_INT 0
55435: PPUSH
55436: PPUSH
// result := array ;
55437: LD_ADDR_VAR 0 3
55441: PUSH
55442: LD_VAR 0 1
55446: ST_TO_ADDR
// if size > 0 then
55447: LD_VAR 0 2
55451: PUSH
55452: LD_INT 0
55454: GREATER
55455: IFFALSE 55501
// for i := array downto size do
55457: LD_ADDR_VAR 0 4
55461: PUSH
55462: DOUBLE
55463: LD_VAR 0 1
55467: INC
55468: ST_TO_ADDR
55469: LD_VAR 0 2
55473: PUSH
55474: FOR_DOWNTO
55475: IFFALSE 55499
// result := Delete ( result , result ) ;
55477: LD_ADDR_VAR 0 3
55481: PUSH
55482: LD_VAR 0 3
55486: PPUSH
55487: LD_VAR 0 3
55491: PPUSH
55492: CALL_OW 3
55496: ST_TO_ADDR
55497: GO 55474
55499: POP
55500: POP
// end ;
55501: LD_VAR 0 3
55505: RET
// export function ComExit ( unit ) ; var tmp ; begin
55506: LD_INT 0
55508: PPUSH
55509: PPUSH
// if not IsInUnit ( unit ) then
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 310
55519: NOT
55520: IFFALSE 55524
// exit ;
55522: GO 55584
// tmp := IsInUnit ( unit ) ;
55524: LD_ADDR_VAR 0 3
55528: PUSH
55529: LD_VAR 0 1
55533: PPUSH
55534: CALL_OW 310
55538: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55539: LD_VAR 0 3
55543: PPUSH
55544: CALL_OW 247
55548: PUSH
55549: LD_INT 2
55551: EQUAL
55552: IFFALSE 55565
// ComExitVehicle ( unit ) else
55554: LD_VAR 0 1
55558: PPUSH
55559: CALL_OW 121
55563: GO 55574
// ComExitBuilding ( unit ) ;
55565: LD_VAR 0 1
55569: PPUSH
55570: CALL_OW 122
// result := tmp ;
55574: LD_ADDR_VAR 0 2
55578: PUSH
55579: LD_VAR 0 3
55583: ST_TO_ADDR
// end ;
55584: LD_VAR 0 2
55588: RET
// export function ResetHc ; begin
55589: LD_INT 0
55591: PPUSH
// InitHc ;
55592: CALL_OW 19
// hc_importance := 0 ;
55596: LD_ADDR_OWVAR 32
55600: PUSH
55601: LD_INT 0
55603: ST_TO_ADDR
// end ;
55604: LD_VAR 0 1
55608: RET
