// starting begin ResetFog ;
   0: CALL_OW 335
// PlaceSeeing ( 0 , 0 , 7 , - 37963 ) ;
   4: LD_INT 0
   6: PPUSH
   7: LD_INT 0
   9: PPUSH
  10: LD_INT 7
  12: PPUSH
  13: LD_INT 37963
  15: NEG
  16: PPUSH
  17: CALL_OW 330
// RemoveSeeing ( 0 , 0 , 7 ) ;
  21: LD_INT 0
  23: PPUSH
  24: LD_INT 0
  26: PPUSH
  27: LD_INT 7
  29: PPUSH
  30: CALL_OW 331
// PrepareBase ;
  34: CALL 507 0 0
// Action ;
  38: CALL 47 0 0
// SaveForQuickRestart ;
  42: CALL_OW 22
// end ;
  46: END
// function Action ; var un , f , i ; begin
  47: LD_INT 0
  49: PPUSH
  50: PPUSH
  51: PPUSH
  52: PPUSH
// SetBName ( brave , brave ) ;
  53: LD_INT 1
  55: PPUSH
  56: LD_STRING brave
  58: PPUSH
  59: CALL_OW 500
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// SetResourceType ( GetBase ( brave ) , mat_cans , [ 6000 , 4500 , 3000 ] [ Difficulty ] ) ;
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 274
  83: PPUSH
  84: LD_INT 1
  86: PPUSH
  87: LD_INT 6000
  89: PUSH
  90: LD_INT 4500
  92: PUSH
  93: LD_INT 3000
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PPUSH
 107: CALL_OW 277
// InGameOn ;
 111: CALL_OW 8
// CenterNowOnUnits ( brave ) ;
 115: LD_INT 1
 117: PPUSH
 118: CALL_OW 87
// Say ( com , DJack1 ) ;
 122: LD_EXP 1
 126: PPUSH
 127: LD_STRING DJack1
 129: PPUSH
 130: CALL_OW 88
// Say ( k1 , DUn1 ) ;
 134: LD_EXP 3
 138: PPUSH
 139: LD_STRING DUn1
 141: PPUSH
 142: CALL_OW 88
// Say ( com , DJack2 ) ;
 146: LD_EXP 1
 150: PPUSH
 151: LD_STRING DJack2
 153: PPUSH
 154: CALL_OW 88
// Say ( k1 , DUn2 ) ;
 158: LD_EXP 3
 162: PPUSH
 163: LD_STRING DUn2
 165: PPUSH
 166: CALL_OW 88
// Say ( com , DJack3 ) ;
 170: LD_EXP 1
 174: PPUSH
 175: LD_STRING DJack3
 177: PPUSH
 178: CALL_OW 88
// uc_side := 7 ;
 182: LD_ADDR_OWVAR 20
 186: PUSH
 187: LD_INT 7
 189: ST_TO_ADDR
// uc_nation := 1 ;
 190: LD_ADDR_OWVAR 21
 194: PUSH
 195: LD_INT 1
 197: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 0 ) ;
 198: LD_INT 1
 200: PPUSH
 201: LD_INT 1
 203: PPUSH
 204: LD_INT 0
 206: PPUSH
 207: CALL_OW 380
// hc_name :=  ;
 211: LD_ADDR_OWVAR 26
 215: PUSH
 216: LD_STRING 
 218: ST_TO_ADDR
// un := CreateHuman ;
 219: LD_ADDR_VAR 0 2
 223: PUSH
 224: CALL_OW 44
 228: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
 229: LD_INT 105
 231: PPUSH
 232: CALL_OW 67
// SayRadio ( un , DRadio1 ) ;
 236: LD_VAR 0 2
 240: PPUSH
 241: LD_STRING DRadio1
 243: PPUSH
 244: CALL_OW 94
// Say ( com , DJack4 ) ;
 248: LD_EXP 1
 252: PPUSH
 253: LD_STRING DJack4
 255: PPUSH
 256: CALL_OW 88
// SayRadio ( un , DRadio2 ) ;
 260: LD_VAR 0 2
 264: PPUSH
 265: LD_STRING DRadio2
 267: PPUSH
 268: CALL_OW 94
// Wait ( 0 0$01 ) ;
 272: LD_INT 35
 274: PPUSH
 275: CALL_OW 67
// SayRadio ( doc , DDoc1 ) ;
 279: LD_EXP 2
 283: PPUSH
 284: LD_STRING DDoc1
 286: PPUSH
 287: CALL_OW 94
// Say ( com , DJack5 ) ;
 291: LD_EXP 1
 295: PPUSH
 296: LD_STRING DJack5
 298: PPUSH
 299: CALL_OW 88
// SayRadio ( doc , DDoc2 ) ;
 303: LD_EXP 2
 307: PPUSH
 308: LD_STRING DDoc2
 310: PPUSH
 311: CALL_OW 94
// SayRadio ( un , DRadio3 ) ;
 315: LD_VAR 0 2
 319: PPUSH
 320: LD_STRING DRadio3
 322: PPUSH
 323: CALL_OW 94
// Say ( com , DJack6 ) ;
 327: LD_EXP 1
 331: PPUSH
 332: LD_STRING DJack6
 334: PPUSH
 335: CALL_OW 88
// f := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) ;
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_INT 22
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: LD_INT 21
 356: PUSH
 357: LD_INT 1
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PPUSH
 368: CALL_OW 69
 372: ST_TO_ADDR
// for i = 2 to f do
 373: LD_ADDR_VAR 0 4
 377: PUSH
 378: DOUBLE
 379: LD_INT 2
 381: DEC
 382: ST_TO_ADDR
 383: LD_VAR 0 3
 387: PUSH
 388: FOR_TO
 389: IFFALSE 446
// begin ComExitBuilding ( f [ i ] ) ;
 391: LD_VAR 0 3
 395: PUSH
 396: LD_VAR 0 4
 400: ARRAY
 401: PPUSH
 402: CALL_OW 122
// AddComMoveToArea ( f [ i ] , act_area ) ;
 406: LD_VAR 0 3
 410: PUSH
 411: LD_VAR 0 4
 415: ARRAY
 416: PPUSH
 417: LD_INT 7
 419: PPUSH
 420: CALL_OW 173
// AddComTurnUnit ( f [ i ] , com ) ;
 424: LD_VAR 0 3
 428: PUSH
 429: LD_VAR 0 4
 433: ARRAY
 434: PPUSH
 435: LD_EXP 1
 439: PPUSH
 440: CALL_OW 179
// end ;
 444: GO 388
 446: POP
 447: POP
// ComExitBuilding ( com ) ;
 448: LD_EXP 1
 452: PPUSH
 453: CALL_OW 122
// AddComTurnXY ( com , 45 , 32 ) ;
 457: LD_EXP 1
 461: PPUSH
 462: LD_INT 45
 464: PPUSH
 465: LD_INT 32
 467: PPUSH
 468: CALL_OW 178
// Wait ( 0 0$03 ) ;
 472: LD_INT 105
 474: PPUSH
 475: CALL_OW 67
// Say ( com , DJack7 ) ;
 479: LD_EXP 1
 483: PPUSH
 484: LD_STRING DJack7
 486: PPUSH
 487: CALL_OW 88
// InGameOff ;
 491: CALL_OW 9
// ChangeMissionObjectives ( TDef ) ;
 495: LD_STRING TDef
 497: PPUSH
 498: CALL_OW 337
// end ; end_of_file
 502: LD_VAR 0 1
 506: RET
// export com , doc , k1 ; export function PrepareBase ; var i , un , skill ; begin
 507: LD_INT 0
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
// PlaceSeeing ( 30 , 14 , 7 , 20 ) ;
 513: LD_INT 30
 515: PPUSH
 516: LD_INT 14
 518: PPUSH
 519: LD_INT 7
 521: PPUSH
 522: LD_INT 20
 524: PPUSH
 525: CALL_OW 330
// PlaceSeeing ( 49 , 17 , 7 , 20 ) ;
 529: LD_INT 49
 531: PPUSH
 532: LD_INT 17
 534: PPUSH
 535: LD_INT 7
 537: PPUSH
 538: LD_INT 20
 540: PPUSH
 541: CALL_OW 330
// PlaceSeeing ( 35 , 46 , 7 , 20 ) ;
 545: LD_INT 35
 547: PPUSH
 548: LD_INT 46
 550: PPUSH
 551: LD_INT 7
 553: PPUSH
 554: LD_INT 20
 556: PPUSH
 557: CALL_OW 330
// PlaceSeeing ( 70 , 39 , 7 , 20 ) ;
 561: LD_INT 70
 563: PPUSH
 564: LD_INT 39
 566: PPUSH
 567: LD_INT 7
 569: PPUSH
 570: LD_INT 20
 572: PPUSH
 573: CALL_OW 330
// RemoveSeeing ( 30 , 14 , 7 ) ;
 577: LD_INT 30
 579: PPUSH
 580: LD_INT 14
 582: PPUSH
 583: LD_INT 7
 585: PPUSH
 586: CALL_OW 331
// RemoveSeeing ( 49 , 17 , 7 ) ;
 590: LD_INT 49
 592: PPUSH
 593: LD_INT 17
 595: PPUSH
 596: LD_INT 7
 598: PPUSH
 599: CALL_OW 331
// RemoveSeeing ( 35 , 46 , 7 ) ;
 603: LD_INT 35
 605: PPUSH
 606: LD_INT 46
 608: PPUSH
 609: LD_INT 7
 611: PPUSH
 612: CALL_OW 331
// RemoveSeeing ( 70 , 39 , 7 ) ;
 616: LD_INT 70
 618: PPUSH
 619: LD_INT 39
 621: PPUSH
 622: LD_INT 7
 624: PPUSH
 625: CALL_OW 331
// uc_side := 7 ;
 629: LD_ADDR_OWVAR 20
 633: PUSH
 634: LD_INT 7
 636: ST_TO_ADDR
// uc_nation := 1 ;
 637: LD_ADDR_OWVAR 21
 641: PUSH
 642: LD_INT 1
 644: ST_TO_ADDR
// if Difficulty < 3 then
 645: LD_OWVAR 67
 649: PUSH
 650: LD_INT 3
 652: LESS
 653: IFFALSE 754
// begin for i = 1 to 2 do
 655: LD_ADDR_VAR 0 2
 659: PUSH
 660: DOUBLE
 661: LD_INT 1
 663: DEC
 664: ST_TO_ADDR
 665: LD_INT 2
 667: PUSH
 668: FOR_TO
 669: IFFALSE 750
// begin vc_chassis := us_heavy_tracked ;
 671: LD_ADDR_OWVAR 37
 675: PUSH
 676: LD_INT 4
 678: ST_TO_ADDR
// vc_engine := 3 ;
 679: LD_ADDR_OWVAR 39
 683: PUSH
 684: LD_INT 3
 686: ST_TO_ADDR
// vc_control := control_computer ;
 687: LD_ADDR_OWVAR 38
 691: PUSH
 692: LD_INT 3
 694: ST_TO_ADDR
// vc_weapon := us_double_laser ;
 695: LD_ADDR_OWVAR 40
 699: PUSH
 700: LD_INT 10
 702: ST_TO_ADDR
// un := CreateVehicle ;
 703: LD_ADDR_VAR 0 3
 707: PUSH
 708: CALL_OW 45
 712: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 713: LD_VAR 0 3
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: LD_INT 5
 723: PPUSH
 724: CALL_OW 12
 728: PPUSH
 729: CALL_OW 233
// PlaceUnitArea ( un , base_spawn , false ) ;
 733: LD_VAR 0 3
 737: PPUSH
 738: LD_INT 6
 740: PPUSH
 741: LD_INT 0
 743: PPUSH
 744: CALL_OW 49
// end ;
 748: GO 668
 750: POP
 751: POP
// end else
 752: GO 843
// begin vc_chassis := us_medium_tracked ;
 754: LD_ADDR_OWVAR 37
 758: PUSH
 759: LD_INT 3
 761: ST_TO_ADDR
// vc_engine := engine_combustion ;
 762: LD_ADDR_OWVAR 39
 766: PUSH
 767: LD_INT 1
 769: ST_TO_ADDR
// vc_control := control_manual ;
 770: LD_ADDR_OWVAR 38
 774: PUSH
 775: LD_INT 1
 777: ST_TO_ADDR
// vc_weapon := us_gatling_gun ;
 778: LD_ADDR_OWVAR 40
 782: PUSH
 783: LD_INT 4
 785: ST_TO_ADDR
// un := CreateVehicle ;
 786: LD_ADDR_VAR 0 3
 790: PUSH
 791: CALL_OW 45
 795: ST_TO_ADDR
// SetDir ( un , Rand ( 0 , 5 ) ) ;
 796: LD_VAR 0 3
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: LD_INT 5
 806: PPUSH
 807: CALL_OW 12
 811: PPUSH
 812: CALL_OW 233
// SetFuel ( un , 75 ) ;
 816: LD_VAR 0 3
 820: PPUSH
 821: LD_INT 75
 823: PPUSH
 824: CALL_OW 240
// PlaceUnitArea ( un , base_spawn , false ) ;
 828: LD_VAR 0 3
 832: PPUSH
 833: LD_INT 6
 835: PPUSH
 836: LD_INT 0
 838: PPUSH
 839: CALL_OW 49
// end ; skill := [ 8 , 7 , 6 ] [ Difficulty ] ;
 843: LD_ADDR_VAR 0 4
 847: PUSH
 848: LD_INT 8
 850: PUSH
 851: LD_INT 7
 853: PUSH
 854: LD_INT 6
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: LIST
 861: PUSH
 862: LD_OWVAR 67
 866: ARRAY
 867: ST_TO_ADDR
// hc_importance := 100 ;
 868: LD_ADDR_OWVAR 32
 872: PUSH
 873: LD_INT 100
 875: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: LD_VAR 0 4
 886: PPUSH
 887: CALL_OW 380
// hc_name := Jack Collins ;
 891: LD_ADDR_OWVAR 26
 895: PUSH
 896: LD_STRING Jack Collins
 898: ST_TO_ADDR
// com := CreateHuman ;
 899: LD_ADDR_EXP 1
 903: PUSH
 904: CALL_OW 44
 908: ST_TO_ADDR
// PlaceHumanInUnit ( com , brave ) ;
 909: LD_EXP 1
 913: PPUSH
 914: LD_INT 1
 916: PPUSH
 917: CALL_OW 52
// hc_importance := 0 ;
 921: LD_ADDR_OWVAR 32
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// hc_gallery :=  ;
 929: LD_ADDR_OWVAR 33
 933: PUSH
 934: LD_STRING 
 936: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
 937: LD_INT 1
 939: PPUSH
 940: LD_INT 1
 942: PPUSH
 943: LD_VAR 0 4
 947: PPUSH
 948: CALL_OW 380
// hc_name := Thomas Jackson ;
 952: LD_ADDR_OWVAR 26
 956: PUSH
 957: LD_STRING Thomas Jackson
 959: ST_TO_ADDR
// k1 := CreateHuman ;
 960: LD_ADDR_EXP 3
 964: PUSH
 965: CALL_OW 44
 969: ST_TO_ADDR
// PlaceHumanInUnit ( k1 , brave ) ;
 970: LD_EXP 3
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL_OW 52
// hc_name :=  ;
 982: LD_ADDR_OWVAR 26
 986: PUSH
 987: LD_STRING 
 989: ST_TO_ADDR
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
 990: LD_ADDR_VAR 0 2
 994: PUSH
 995: DOUBLE
 996: LD_INT 1
 998: DEC
 999: ST_TO_ADDR
1000: LD_INT 9
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 7
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_OWVAR 67
1018: ARRAY
1019: PUSH
1020: FOR_TO
1021: IFFALSE 1192
// begin Randomize ;
1023: CALL_OW 10
// uc_nation := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1027: LD_ADDR_OWVAR 21
1031: PUSH
1032: LD_INT 1
1034: PUSH
1035: LD_INT 3
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 1
1044: PPUSH
1045: LD_INT 2
1047: PPUSH
1048: CALL_OW 12
1052: ARRAY
1053: ST_TO_ADDR
// PrepareHuman ( false , Rand ( 1 , 4 ) , skill ) ;
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 4
1062: PPUSH
1063: CALL_OW 12
1067: PPUSH
1068: LD_VAR 0 4
1072: PPUSH
1073: CALL_OW 380
// un := CreateHuman ;
1077: LD_ADDR_VAR 0 3
1081: PUSH
1082: CALL_OW 44
1086: ST_TO_ADDR
// case GetClass ( un ) of 1 :
1087: LD_VAR 0 3
1091: PPUSH
1092: CALL_OW 257
1096: PUSH
1097: LD_INT 1
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1120
1105: POP
// PlaceHumanInUnit ( un , br ) ; 2 :
1106: LD_VAR 0 3
1110: PPUSH
1111: LD_INT 21
1113: PPUSH
1114: CALL_OW 52
1118: GO 1190
1120: LD_INT 2
1122: DOUBLE
1123: EQUAL
1124: IFTRUE 1128
1126: GO 1143
1128: POP
// PlaceHumanInUnit ( un , brave ) ; 3 :
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: CALL_OW 52
1141: GO 1190
1143: LD_INT 3
1145: DOUBLE
1146: EQUAL
1147: IFTRUE 1151
1149: GO 1166
1151: POP
// PlaceHumanInUnit ( un , fac ) ; 4 :
1152: LD_VAR 0 3
1156: PPUSH
1157: LD_INT 38
1159: PPUSH
1160: CALL_OW 52
1164: GO 1190
1166: LD_INT 4
1168: DOUBLE
1169: EQUAL
1170: IFTRUE 1174
1172: GO 1189
1174: POP
// PlaceHumanInUnit ( un , lab ) ; end ;
1175: LD_VAR 0 3
1179: PPUSH
1180: LD_INT 36
1182: PPUSH
1183: CALL_OW 52
1187: GO 1190
1189: POP
// end ;
1190: GO 1020
1192: POP
1193: POP
// uc_side := 2 ;
1194: LD_ADDR_OWVAR 20
1198: PUSH
1199: LD_INT 2
1201: ST_TO_ADDR
// uc_nation := 2 ;
1202: LD_ADDR_OWVAR 21
1206: PUSH
1207: LD_INT 2
1209: ST_TO_ADDR
// hc_name := _ ;
1210: LD_ADDR_OWVAR 26
1214: PUSH
1215: LD_STRING _
1217: ST_TO_ADDR
// hc_gallery :=  ;
1218: LD_ADDR_OWVAR 33
1222: PUSH
1223: LD_STRING 
1225: ST_TO_ADDR
// hc_class := 4 ;
1226: LD_ADDR_OWVAR 28
1230: PUSH
1231: LD_INT 4
1233: ST_TO_ADDR
// hc_sex := sex_male ;
1234: LD_ADDR_OWVAR 27
1238: PUSH
1239: LD_INT 1
1241: ST_TO_ADDR
// doc := CreateHuman ;
1242: LD_ADDR_EXP 2
1246: PUSH
1247: CALL_OW 44
1251: ST_TO_ADDR
// end ; end_of_file
1252: LD_VAR 0 1
1256: RET
// export function Attack ( num ) ; var i , un , tmp ; begin
1257: LD_INT 0
1259: PPUSH
1260: PPUSH
1261: PPUSH
1262: PPUSH
// uc_side := 2 ;
1263: LD_ADDR_OWVAR 20
1267: PUSH
1268: LD_INT 2
1270: ST_TO_ADDR
// uc_nation := 2 ;
1271: LD_ADDR_OWVAR 21
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// tmp := [ ] ;
1279: LD_ADDR_VAR 0 5
1283: PUSH
1284: EMPTY
1285: ST_TO_ADDR
// hc_skills := [ [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] , [ 3 , 6 , 10 ] [ Difficulty ] ] ;
1286: LD_ADDR_OWVAR 31
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 6
1296: PUSH
1297: LD_INT 10
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_OWVAR 67
1309: ARRAY
1310: PUSH
1311: LD_INT 3
1313: PUSH
1314: LD_INT 6
1316: PUSH
1317: LD_INT 10
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: PUSH
1325: LD_OWVAR 67
1329: ARRAY
1330: PUSH
1331: LD_INT 3
1333: PUSH
1334: LD_INT 6
1336: PUSH
1337: LD_INT 10
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: PUSH
1345: LD_OWVAR 67
1349: ARRAY
1350: PUSH
1351: LD_INT 3
1353: PUSH
1354: LD_INT 6
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: PUSH
1365: LD_OWVAR 67
1369: ARRAY
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: ST_TO_ADDR
// if FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) then
1377: LD_INT 4
1379: PPUSH
1380: LD_INT 22
1382: PUSH
1383: LD_INT 7
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PPUSH
1390: CALL_OW 70
1394: IFFALSE 1435
// for i in FilterUnitsInArea ( east1_spawn , [ f_side , 7 ] ) do
1396: LD_ADDR_VAR 0 3
1400: PUSH
1401: LD_INT 4
1403: PPUSH
1404: LD_INT 22
1406: PUSH
1407: LD_INT 7
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 70
1418: PUSH
1419: FOR_IN
1420: IFFALSE 1433
// RemoveUnit ( i ) ;
1422: LD_VAR 0 3
1426: PPUSH
1427: CALL_OW 64
1431: GO 1419
1433: POP
1434: POP
// if FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) then
1435: LD_INT 5
1437: PPUSH
1438: LD_INT 22
1440: PUSH
1441: LD_INT 7
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PPUSH
1448: CALL_OW 70
1452: IFFALSE 1493
// for i in FilterUnitsInArea ( east2_spawn , [ f_side , 7 ] ) do
1454: LD_ADDR_VAR 0 3
1458: PUSH
1459: LD_INT 5
1461: PPUSH
1462: LD_INT 22
1464: PUSH
1465: LD_INT 7
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 70
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1491
// RemoveUnit ( i ) ;
1480: LD_VAR 0 3
1484: PPUSH
1485: CALL_OW 64
1489: GO 1477
1491: POP
1492: POP
// if FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) then
1493: LD_INT 1
1495: PPUSH
1496: LD_INT 22
1498: PUSH
1499: LD_INT 7
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PPUSH
1506: CALL_OW 70
1510: IFFALSE 1551
// for i in FilterUnitsInArea ( north_spawn , [ f_side , 7 ] ) do
1512: LD_ADDR_VAR 0 3
1516: PUSH
1517: LD_INT 1
1519: PPUSH
1520: LD_INT 22
1522: PUSH
1523: LD_INT 7
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PPUSH
1530: CALL_OW 70
1534: PUSH
1535: FOR_IN
1536: IFFALSE 1549
// RemoveUnit ( i ) ;
1538: LD_VAR 0 3
1542: PPUSH
1543: CALL_OW 64
1547: GO 1535
1549: POP
1550: POP
// if FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) then
1551: LD_INT 2
1553: PPUSH
1554: LD_INT 22
1556: PUSH
1557: LD_INT 7
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PPUSH
1564: CALL_OW 70
1568: IFFALSE 1609
// for i in FilterUnitsInArea ( south_spawn , [ f_side , 7 ] ) do
1570: LD_ADDR_VAR 0 3
1574: PUSH
1575: LD_INT 2
1577: PPUSH
1578: LD_INT 22
1580: PUSH
1581: LD_INT 7
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PPUSH
1588: CALL_OW 70
1592: PUSH
1593: FOR_IN
1594: IFFALSE 1607
// RemoveUnit ( i ) ;
1596: LD_VAR 0 3
1600: PPUSH
1601: CALL_OW 64
1605: GO 1593
1607: POP
1608: POP
// case num of 1 :
1609: LD_VAR 0 1
1613: PUSH
1614: LD_INT 1
1616: DOUBLE
1617: EQUAL
1618: IFTRUE 1622
1620: GO 1875
1622: POP
// begin for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1623: LD_ADDR_VAR 0 3
1627: PUSH
1628: DOUBLE
1629: LD_INT 1
1631: DEC
1632: ST_TO_ADDR
1633: LD_INT 5
1635: PUSH
1636: LD_INT 6
1638: PUSH
1639: LD_INT 6
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_OWVAR 67
1651: ARRAY
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1746
// begin uc_nation := 0 ;
1656: LD_ADDR_OWVAR 21
1660: PUSH
1661: LD_INT 0
1663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1664: LD_ADDR_OWVAR 28
1668: PUSH
1669: LD_INT 15
1671: ST_TO_ADDR
// hc_gallery :=  ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_name :=  ;
1680: LD_ADDR_OWVAR 26
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1688: LD_ADDR_OWVAR 29
1692: PUSH
1693: LD_INT 16
1695: PUSH
1696: LD_INT 12
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: ST_TO_ADDR
// un := CreateHuman ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: CALL_OW 44
1712: ST_TO_ADDR
// PlaceUnitArea ( un , north_spawn , false ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_INT 1
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 49
// tmp := tmp ^ un ;
1728: LD_ADDR_VAR 0 5
1732: PUSH
1733: LD_VAR 0 5
1737: PUSH
1738: LD_VAR 0 4
1742: ADD
1743: ST_TO_ADDR
// end ;
1744: GO 1653
1746: POP
1747: POP
// for i = 1 to [ 4 , 5 , 5 ] [ Difficulty ] do
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: DOUBLE
1754: LD_INT 1
1756: DEC
1757: ST_TO_ADDR
1758: LD_INT 4
1760: PUSH
1761: LD_INT 5
1763: PUSH
1764: LD_INT 5
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_OWVAR 67
1776: ARRAY
1777: PUSH
1778: FOR_TO
1779: IFFALSE 1871
// begin uc_nation := 0 ;
1781: LD_ADDR_OWVAR 21
1785: PUSH
1786: LD_INT 0
1788: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
1789: LD_ADDR_OWVAR 28
1793: PUSH
1794: LD_INT 15
1796: ST_TO_ADDR
// hc_gallery :=  ;
1797: LD_ADDR_OWVAR 33
1801: PUSH
1802: LD_STRING 
1804: ST_TO_ADDR
// hc_name :=  ;
1805: LD_ADDR_OWVAR 26
1809: PUSH
1810: LD_STRING 
1812: ST_TO_ADDR
// hc_attr := [ 16 , 12 ] ;
1813: LD_ADDR_OWVAR 29
1817: PUSH
1818: LD_INT 16
1820: PUSH
1821: LD_INT 12
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: ST_TO_ADDR
// un := CreateHuman ;
1828: LD_ADDR_VAR 0 4
1832: PUSH
1833: CALL_OW 44
1837: ST_TO_ADDR
// PlaceUnitArea ( un , east2_spawn , false ) ;
1838: LD_VAR 0 4
1842: PPUSH
1843: LD_INT 5
1845: PPUSH
1846: LD_INT 0
1848: PPUSH
1849: CALL_OW 49
// tmp := tmp ^ un ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_VAR 0 5
1862: PUSH
1863: LD_VAR 0 4
1867: ADD
1868: ST_TO_ADDR
// end ;
1869: GO 1778
1871: POP
1872: POP
// end ; 2 :
1873: GO 2653
1875: LD_INT 2
1877: DOUBLE
1878: EQUAL
1879: IFTRUE 1883
1881: GO 2011
1883: POP
// begin for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
1884: LD_ADDR_VAR 0 3
1888: PUSH
1889: DOUBLE
1890: LD_INT 1
1892: DEC
1893: ST_TO_ADDR
1894: LD_INT 3
1896: PUSH
1897: LD_INT 4
1899: PUSH
1900: LD_INT 5
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: PUSH
1908: LD_OWVAR 67
1912: ARRAY
1913: PUSH
1914: FOR_TO
1915: IFFALSE 2007
// begin uc_nation := 0 ;
1917: LD_ADDR_OWVAR 21
1921: PUSH
1922: LD_INT 0
1924: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 17
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// hc_name :=  ;
1941: LD_ADDR_OWVAR 26
1945: PUSH
1946: LD_STRING 
1948: ST_TO_ADDR
// hc_attr := [ 22 , 12 ] ;
1949: LD_ADDR_OWVAR 29
1953: PUSH
1954: LD_INT 22
1956: PUSH
1957: LD_INT 12
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: ST_TO_ADDR
// un := CreateHuman ;
1964: LD_ADDR_VAR 0 4
1968: PUSH
1969: CALL_OW 44
1973: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
1974: LD_VAR 0 4
1978: PPUSH
1979: LD_INT 3
1981: PPUSH
1982: LD_INT 0
1984: PPUSH
1985: CALL_OW 49
// tmp := tmp ^ un ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PUSH
1999: LD_VAR 0 4
2003: ADD
2004: ST_TO_ADDR
// end ;
2005: GO 1914
2007: POP
2008: POP
// end ; 3 :
2009: GO 2653
2011: LD_INT 3
2013: DOUBLE
2014: EQUAL
2015: IFTRUE 2019
2017: GO 2179
2019: POP
// begin for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 4
2032: PUSH
2033: LD_INT 5
2035: PUSH
2036: LD_INT 6
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_OWVAR 67
2048: ARRAY
2049: PUSH
2050: FOR_TO
2051: IFFALSE 2175
// begin uc_nation := 2 ;
2053: LD_ADDR_OWVAR 21
2057: PUSH
2058: LD_INT 2
2060: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2061: LD_ADDR_OWVAR 37
2065: PUSH
2066: LD_INT 14
2068: ST_TO_ADDR
// vc_engine := 3 ;
2069: LD_ADDR_OWVAR 39
2073: PUSH
2074: LD_INT 3
2076: ST_TO_ADDR
// vc_control := control_apeman ;
2077: LD_ADDR_OWVAR 38
2081: PUSH
2082: LD_INT 5
2084: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2085: LD_ADDR_OWVAR 40
2089: PUSH
2090: LD_INT 27
2092: PUSH
2093: LD_INT 28
2095: PUSH
2096: LD_INT 29
2098: PUSH
2099: LD_INT 91
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 1
2110: PPUSH
2111: LD_INT 4
2113: PPUSH
2114: CALL_OW 12
2118: ARRAY
2119: ST_TO_ADDR
// un := CreateVehicle ;
2120: LD_ADDR_VAR 0 4
2124: PUSH
2125: CALL_OW 45
2129: ST_TO_ADDR
// tmp := tmp ^ un ;
2130: LD_ADDR_VAR 0 5
2134: PUSH
2135: LD_VAR 0 5
2139: PUSH
2140: LD_VAR 0 4
2144: ADD
2145: ST_TO_ADDR
// SetDir ( un , 0 ) ;
2146: LD_VAR 0 4
2150: PPUSH
2151: LD_INT 0
2153: PPUSH
2154: CALL_OW 233
// PlaceUnitArea ( un , south_spawn , false ) ;
2158: LD_VAR 0 4
2162: PPUSH
2163: LD_INT 2
2165: PPUSH
2166: LD_INT 0
2168: PPUSH
2169: CALL_OW 49
// end ;
2173: GO 2050
2175: POP
2176: POP
// end ; 4 :
2177: GO 2653
2179: LD_INT 4
2181: DOUBLE
2182: EQUAL
2183: IFTRUE 2187
2185: GO 2355
2187: POP
// begin for i = 1 to Rand ( 3 , [ 4 , 5 , 6 ] [ Difficulty ] ) do
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: DOUBLE
2194: LD_INT 1
2196: DEC
2197: ST_TO_ADDR
2198: LD_INT 3
2200: PPUSH
2201: LD_INT 4
2203: PUSH
2204: LD_INT 5
2206: PUSH
2207: LD_INT 6
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: PUSH
2215: LD_OWVAR 67
2219: ARRAY
2220: PPUSH
2221: CALL_OW 12
2225: PUSH
2226: FOR_TO
2227: IFFALSE 2351
// begin uc_nation := 2 ;
2229: LD_ADDR_OWVAR 21
2233: PUSH
2234: LD_INT 2
2236: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2237: LD_ADDR_OWVAR 37
2241: PUSH
2242: LD_INT 14
2244: ST_TO_ADDR
// vc_engine := 3 ;
2245: LD_ADDR_OWVAR 39
2249: PUSH
2250: LD_INT 3
2252: ST_TO_ADDR
// vc_control := control_apeman ;
2253: LD_ADDR_OWVAR 38
2257: PUSH
2258: LD_INT 5
2260: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2261: LD_ADDR_OWVAR 40
2265: PUSH
2266: LD_INT 27
2268: PUSH
2269: LD_INT 28
2271: PUSH
2272: LD_INT 29
2274: PUSH
2275: LD_INT 91
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 1
2286: PPUSH
2287: LD_INT 4
2289: PPUSH
2290: CALL_OW 12
2294: ARRAY
2295: ST_TO_ADDR
// un := CreateVehicle ;
2296: LD_ADDR_VAR 0 4
2300: PUSH
2301: CALL_OW 45
2305: ST_TO_ADDR
// tmp := tmp ^ un ;
2306: LD_ADDR_VAR 0 5
2310: PUSH
2311: LD_VAR 0 5
2315: PUSH
2316: LD_VAR 0 4
2320: ADD
2321: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2322: LD_VAR 0 4
2326: PPUSH
2327: LD_INT 3
2329: PPUSH
2330: CALL_OW 233
// PlaceUnitArea ( un , north_spawn , false ) ;
2334: LD_VAR 0 4
2338: PPUSH
2339: LD_INT 1
2341: PPUSH
2342: LD_INT 0
2344: PPUSH
2345: CALL_OW 49
// end ;
2349: GO 2226
2351: POP
2352: POP
// end ; 5 :
2353: GO 2653
2355: LD_INT 5
2357: DOUBLE
2358: EQUAL
2359: IFTRUE 2363
2361: GO 2523
2363: POP
// begin for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
2364: LD_ADDR_VAR 0 3
2368: PUSH
2369: DOUBLE
2370: LD_INT 1
2372: DEC
2373: ST_TO_ADDR
2374: LD_INT 3
2376: PUSH
2377: LD_INT 4
2379: PUSH
2380: LD_INT 4
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_OWVAR 67
2392: ARRAY
2393: PUSH
2394: FOR_TO
2395: IFFALSE 2519
// begin uc_nation := 2 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 2
2404: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2405: LD_ADDR_OWVAR 37
2409: PUSH
2410: LD_INT 14
2412: ST_TO_ADDR
// vc_engine := 3 ;
2413: LD_ADDR_OWVAR 39
2417: PUSH
2418: LD_INT 3
2420: ST_TO_ADDR
// vc_control := control_apeman ;
2421: LD_ADDR_OWVAR 38
2425: PUSH
2426: LD_INT 5
2428: ST_TO_ADDR
// vc_weapon := [ ar_gun , ar_rocket_launcher , 29 , 91 ] [ Rand ( 1 , 4 ) ] ;
2429: LD_ADDR_OWVAR 40
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 29
2442: PUSH
2443: LD_INT 91
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 1
2454: PPUSH
2455: LD_INT 4
2457: PPUSH
2458: CALL_OW 12
2462: ARRAY
2463: ST_TO_ADDR
// un := CreateVehicle ;
2464: LD_ADDR_VAR 0 4
2468: PUSH
2469: CALL_OW 45
2473: ST_TO_ADDR
// tmp := tmp ^ un ;
2474: LD_ADDR_VAR 0 5
2478: PUSH
2479: LD_VAR 0 5
2483: PUSH
2484: LD_VAR 0 4
2488: ADD
2489: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2490: LD_VAR 0 4
2494: PPUSH
2495: LD_INT 4
2497: PPUSH
2498: CALL_OW 233
// PlaceUnitArea ( un , east2_spawn , false ) ;
2502: LD_VAR 0 4
2506: PPUSH
2507: LD_INT 5
2509: PPUSH
2510: LD_INT 0
2512: PPUSH
2513: CALL_OW 49
// end ;
2517: GO 2394
2519: POP
2520: POP
// end ; 6 :
2521: GO 2653
2523: LD_INT 6
2525: DOUBLE
2526: EQUAL
2527: IFTRUE 2531
2529: GO 2652
2531: POP
// begin for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
2532: LD_ADDR_VAR 0 3
2536: PUSH
2537: DOUBLE
2538: LD_INT 1
2540: DEC
2541: ST_TO_ADDR
2542: LD_INT 2
2544: PUSH
2545: LD_INT 3
2547: PUSH
2548: LD_INT 4
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: LD_OWVAR 67
2560: ARRAY
2561: PUSH
2562: FOR_TO
2563: IFFALSE 2648
// begin uc_nation := 2 ;
2565: LD_ADDR_OWVAR 21
2569: PUSH
2570: LD_INT 2
2572: ST_TO_ADDR
// vc_chassis := ar_hovercraft ;
2573: LD_ADDR_OWVAR 37
2577: PUSH
2578: LD_INT 11
2580: ST_TO_ADDR
// vc_engine := engine_combustion ;
2581: LD_ADDR_OWVAR 39
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// vc_control := control_apeman ;
2589: LD_ADDR_OWVAR 38
2593: PUSH
2594: LD_INT 5
2596: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
2597: LD_ADDR_OWVAR 40
2601: PUSH
2602: LD_INT 24
2604: ST_TO_ADDR
// un := CreateVehicle ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: CALL_OW 45
2614: ST_TO_ADDR
// tmp := tmp ^ un ;
2615: LD_ADDR_VAR 0 5
2619: PUSH
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 4
2629: ADD
2630: ST_TO_ADDR
// PlaceUnitArea ( un , river , false ) ;
2631: LD_VAR 0 4
2635: PPUSH
2636: LD_INT 8
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// end ;
2646: GO 2562
2648: POP
2649: POP
// end ; end ;
2650: GO 2653
2652: POP
// result := tmp ;
2653: LD_ADDR_VAR 0 2
2657: PUSH
2658: LD_VAR 0 5
2662: ST_TO_ADDR
// end ;
2663: LD_VAR 0 2
2667: RET
// export function ComitSib ; var un ; begin
2668: LD_INT 0
2670: PPUSH
2671: PPUSH
// uc_side := 2 ;
2672: LD_ADDR_OWVAR 20
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// uc_nation := 2 ;
2680: LD_ADDR_OWVAR 21
2684: PUSH
2685: LD_INT 2
2687: ST_TO_ADDR
// PrepareHuman ( false , 4 , 7 ) ;
2688: LD_INT 0
2690: PPUSH
2691: LD_INT 4
2693: PPUSH
2694: LD_INT 7
2696: PPUSH
2697: CALL_OW 380
// un := CreateHuman ;
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: CALL_OW 44
2710: ST_TO_ADDR
// PlaceUnitArea ( un , east1_spawn , false ) ;
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_INT 4
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// ComContaminate ( un , 63 , 37 ) ;
2726: LD_VAR 0 2
2730: PPUSH
2731: LD_INT 63
2733: PPUSH
2734: LD_INT 37
2736: PPUSH
2737: CALL_OW 158
// end ;
2741: LD_VAR 0 1
2745: RET
// export function DSay ; var i ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
// Randomize ;
2750: CALL_OW 10
// i := Rand ( 1 , 8 ) ;
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: LD_INT 1
2761: PPUSH
2762: LD_INT 8
2764: PPUSH
2765: CALL_OW 12
2769: ST_TO_ADDR
// case i of 1 :
2770: LD_VAR 0 2
2774: PUSH
2775: LD_INT 1
2777: DOUBLE
2778: EQUAL
2779: IFTRUE 2783
2781: GO 2798
2783: POP
// SayRadio ( doc , DDocA1 ) ; 2 :
2784: LD_EXP 2
2788: PPUSH
2789: LD_STRING DDocA1
2791: PPUSH
2792: CALL_OW 94
2796: GO 2960
2798: LD_INT 2
2800: DOUBLE
2801: EQUAL
2802: IFTRUE 2806
2804: GO 2821
2806: POP
// SayRadio ( doc , DDocA2 ) ; 3 :
2807: LD_EXP 2
2811: PPUSH
2812: LD_STRING DDocA2
2814: PPUSH
2815: CALL_OW 94
2819: GO 2960
2821: LD_INT 3
2823: DOUBLE
2824: EQUAL
2825: IFTRUE 2829
2827: GO 2844
2829: POP
// SayRadio ( doc , DDocA3 ) ; 4 :
2830: LD_EXP 2
2834: PPUSH
2835: LD_STRING DDocA3
2837: PPUSH
2838: CALL_OW 94
2842: GO 2960
2844: LD_INT 4
2846: DOUBLE
2847: EQUAL
2848: IFTRUE 2852
2850: GO 2867
2852: POP
// SayRadio ( doc , DDocA4 ) ; 5 :
2853: LD_EXP 2
2857: PPUSH
2858: LD_STRING DDocA4
2860: PPUSH
2861: CALL_OW 94
2865: GO 2960
2867: LD_INT 5
2869: DOUBLE
2870: EQUAL
2871: IFTRUE 2875
2873: GO 2890
2875: POP
// SayRadio ( doc , DDocA5 ) ; 6 :
2876: LD_EXP 2
2880: PPUSH
2881: LD_STRING DDocA5
2883: PPUSH
2884: CALL_OW 94
2888: GO 2960
2890: LD_INT 6
2892: DOUBLE
2893: EQUAL
2894: IFTRUE 2898
2896: GO 2913
2898: POP
// SayRadio ( doc , DDocA6 ) ; 7 :
2899: LD_EXP 2
2903: PPUSH
2904: LD_STRING DDocA6
2906: PPUSH
2907: CALL_OW 94
2911: GO 2960
2913: LD_INT 7
2915: DOUBLE
2916: EQUAL
2917: IFTRUE 2921
2919: GO 2936
2921: POP
// SayRadio ( doc , DDocA7 ) ; 8 :
2922: LD_EXP 2
2926: PPUSH
2927: LD_STRING DDocA7
2929: PPUSH
2930: CALL_OW 94
2934: GO 2960
2936: LD_INT 8
2938: DOUBLE
2939: EQUAL
2940: IFTRUE 2944
2942: GO 2959
2944: POP
// SayRadio ( doc , DDocA8 ) ; end ;
2945: LD_EXP 2
2949: PPUSH
2950: LD_STRING DDocA8
2952: PPUSH
2953: CALL_OW 94
2957: GO 2960
2959: POP
// end ; end_of_file
2960: LD_VAR 0 1
2964: RET
// every 0 0$01 do
2965: GO 2967
2967: DISABLE
// begin display_strings := [ #tick , tick ] ;
2968: LD_ADDR_OWVAR 47
2972: PUSH
2973: LD_STRING #tick
2975: PUSH
2976: LD_OWVAR 1
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: ST_TO_ADDR
// enable ;
2985: ENABLE
// end ;
2986: END
// export pom , hover , attackN ; every 1 do
2987: GO 2989
2989: DISABLE
// begin pom := [ ] ;
2990: LD_ADDR_EXP 4
2994: PUSH
2995: EMPTY
2996: ST_TO_ADDR
// hover := [ ] ;
2997: LD_ADDR_EXP 5
3001: PUSH
3002: EMPTY
3003: ST_TO_ADDR
// attackN := 0 ;
3004: LD_ADDR_EXP 6
3008: PUSH
3009: LD_INT 0
3011: ST_TO_ADDR
// end ;
3012: END
// every 0 0$01 trigger pom do var i , f , z , target ;
3013: LD_EXP 4
3017: IFFALSE 3439
3019: GO 3021
3021: DISABLE
3022: LD_INT 0
3024: PPUSH
3025: PPUSH
3026: PPUSH
3027: PPUSH
// begin enable ;
3028: ENABLE
// f := FilterAllUnits ( [ f_side , 7 ] ) ;
3029: LD_ADDR_VAR 0 2
3033: PUSH
3034: LD_INT 22
3036: PUSH
3037: LD_INT 7
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// for i = 1 to pom do
3049: LD_ADDR_VAR 0 1
3053: PUSH
3054: DOUBLE
3055: LD_INT 1
3057: DEC
3058: ST_TO_ADDR
3059: LD_EXP 4
3063: PUSH
3064: FOR_TO
3065: IFFALSE 3123
// if not HasTask ( pom [ i ] ) then
3067: LD_EXP 4
3071: PUSH
3072: LD_VAR 0 1
3076: ARRAY
3077: PPUSH
3078: CALL_OW 314
3082: NOT
3083: IFFALSE 3121
// ComAttackUnit ( pom [ i ] , NearestUnitToUnit ( f , pom [ i ] ) ) ;
3085: LD_EXP 4
3089: PUSH
3090: LD_VAR 0 1
3094: ARRAY
3095: PPUSH
3096: LD_VAR 0 2
3100: PPUSH
3101: LD_EXP 4
3105: PUSH
3106: LD_VAR 0 1
3110: ARRAY
3111: PPUSH
3112: CALL_OW 74
3116: PPUSH
3117: CALL_OW 115
3121: GO 3064
3123: POP
3124: POP
// if hover then
3125: LD_EXP 5
3129: IFFALSE 3439
// begin for i = 1 to hover do
3131: LD_ADDR_VAR 0 1
3135: PUSH
3136: DOUBLE
3137: LD_INT 1
3139: DEC
3140: ST_TO_ADDR
3141: LD_EXP 5
3145: PUSH
3146: FOR_TO
3147: IFFALSE 3437
// begin if GetLives ( hover [ i ] ) < 250 then
3149: LD_EXP 5
3153: PUSH
3154: LD_VAR 0 1
3158: ARRAY
3159: PPUSH
3160: CALL_OW 256
3164: PUSH
3165: LD_INT 250
3167: LESS
3168: IFFALSE 3235
// begin for z = 1 to 1 + Difficulty do
3170: LD_ADDR_VAR 0 3
3174: PUSH
3175: DOUBLE
3176: LD_INT 1
3178: DEC
3179: ST_TO_ADDR
3180: LD_INT 1
3182: PUSH
3183: LD_OWVAR 67
3187: PLUS
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3233
// MineExplosion ( GetX ( hover [ i ] ) , GetY ( hover [ i ] ) , 10 ) ;
3192: LD_EXP 5
3196: PUSH
3197: LD_VAR 0 1
3201: ARRAY
3202: PPUSH
3203: CALL_OW 250
3207: PPUSH
3208: LD_EXP 5
3212: PUSH
3213: LD_VAR 0 1
3217: ARRAY
3218: PPUSH
3219: CALL_OW 251
3223: PPUSH
3224: LD_INT 10
3226: PPUSH
3227: CALL_OW 453
3231: GO 3189
3233: POP
3234: POP
// end ; if UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) > 0 then
3235: LD_VAR 0 2
3239: PPUSH
3240: LD_INT 25
3242: PUSH
3243: LD_INT 2
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 3
3252: PUSH
3253: LD_INT 54
3255: PUSH
3256: EMPTY
3257: LIST
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PPUSH
3267: CALL_OW 72
3271: PUSH
3272: LD_INT 0
3274: GREATER
3275: IFFALSE 3357
// begin target := UnitFilter ( f , [ [ f_class , 2 ] , [ f_not , [ f_inside ] ] ] ) ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_INT 25
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 3
3299: PUSH
3300: LD_INT 54
3302: PUSH
3303: EMPTY
3304: LIST
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PPUSH
3314: CALL_OW 72
3318: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3319: LD_EXP 5
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_VAR 0 4
3334: PPUSH
3335: LD_EXP 5
3339: PUSH
3340: LD_VAR 0 1
3344: ARRAY
3345: PPUSH
3346: CALL_OW 74
3350: PPUSH
3351: CALL_OW 115
// end else
3355: GO 3435
// begin target := UnitFilter ( f , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) ;
3357: LD_ADDR_VAR 0 4
3361: PUSH
3362: LD_VAR 0 2
3366: PPUSH
3367: LD_INT 21
3369: PUSH
3370: LD_INT 1
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 54
3382: PUSH
3383: EMPTY
3384: LIST
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PPUSH
3394: CALL_OW 72
3398: ST_TO_ADDR
// ComAttackUnit ( hover [ i ] , NearestUnitToUnit ( target , hover [ i ] ) ) ;
3399: LD_EXP 5
3403: PUSH
3404: LD_VAR 0 1
3408: ARRAY
3409: PPUSH
3410: LD_VAR 0 4
3414: PPUSH
3415: LD_EXP 5
3419: PUSH
3420: LD_VAR 0 1
3424: ARRAY
3425: PPUSH
3426: CALL_OW 74
3430: PPUSH
3431: CALL_OW 115
// end ; end ;
3435: GO 3146
3437: POP
3438: POP
// end ; end ;
3439: PPOPN 4
3441: END
// every 3 3$10 do var i , un ;
3442: GO 3444
3444: DISABLE
3445: LD_INT 0
3447: PPUSH
3448: PPUSH
// begin uc_side := 7 ;
3449: LD_ADDR_OWVAR 20
3453: PUSH
3454: LD_INT 7
3456: ST_TO_ADDR
// uc_nation := 1 ;
3457: LD_ADDR_OWVAR 21
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// for i = 1 to 2 do
3465: LD_ADDR_VAR 0 1
3469: PUSH
3470: DOUBLE
3471: LD_INT 1
3473: DEC
3474: ST_TO_ADDR
3475: LD_INT 2
3477: PUSH
3478: FOR_TO
3479: IFFALSE 3644
// begin PrepareHuman ( sex_male , class_sniper , [ 7 , 6 , 6 ] [ Difficulty ] ) ;
3481: LD_INT 1
3483: PPUSH
3484: LD_INT 5
3486: PPUSH
3487: LD_INT 7
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: LD_INT 6
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: LD_OWVAR 67
3505: ARRAY
3506: PPUSH
3507: CALL_OW 380
// vc_chassis := us_light_wheeled ;
3511: LD_ADDR_OWVAR 37
3515: PUSH
3516: LD_INT 1
3518: ST_TO_ADDR
// vc_engine := engine_combustion ;
3519: LD_ADDR_OWVAR 39
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// vc_control := control_manual ;
3527: LD_ADDR_OWVAR 38
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// vc_fuel_battery := 66 ;
3535: LD_ADDR_OWVAR 41
3539: PUSH
3540: LD_INT 66
3542: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
3543: LD_ADDR_OWVAR 40
3547: PUSH
3548: LD_INT 2
3550: ST_TO_ADDR
// un := CreateVehicle ;
3551: LD_ADDR_VAR 0 2
3555: PUSH
3556: CALL_OW 45
3560: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3561: LD_VAR 0 2
3565: PPUSH
3566: LD_INT 3
3568: PPUSH
3569: CALL_OW 233
// PlaceUnitXY ( un , 48 , 3 , false ) ;
3573: LD_VAR 0 2
3577: PPUSH
3578: LD_INT 48
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_INT 0
3586: PPUSH
3587: CALL_OW 48
// PlaceHumanInUnit ( CreateHuman , un ) ;
3591: CALL_OW 44
3595: PPUSH
3596: LD_VAR 0 2
3600: PPUSH
3601: CALL_OW 52
// ComMoveXY ( un , 49 , 17 ) ;
3605: LD_VAR 0 2
3609: PPUSH
3610: LD_INT 49
3612: PPUSH
3613: LD_INT 17
3615: PPUSH
3616: CALL_OW 111
// AddComMoveXY ( un , 48 , 36 ) ;
3620: LD_VAR 0 2
3624: PPUSH
3625: LD_INT 48
3627: PPUSH
3628: LD_INT 36
3630: PPUSH
3631: CALL_OW 171
// Wait ( 0 0$02 ) ;
3635: LD_INT 70
3637: PPUSH
3638: CALL_OW 67
// end ;
3642: GO 3478
3644: POP
3645: POP
// end ;
3646: PPOPN 2
3648: END
// every 5 5$00 + 3 3$00 trigger attackN < [ 10 , 12 , 14 ] [ Difficulty ] do var c , l ;
3649: LD_EXP 6
3653: PUSH
3654: LD_INT 10
3656: PUSH
3657: LD_INT 12
3659: PUSH
3660: LD_INT 14
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: LESS
3674: IFFALSE 4376
3676: GO 3678
3678: DISABLE
3679: LD_INT 0
3681: PPUSH
3682: PPUSH
// begin enable ;
3683: ENABLE
// Randomize ;
3684: CALL_OW 10
// Wait ( Rand ( 0 0$01 , 2 2$59 ) ) ;
3688: LD_INT 35
3690: PPUSH
3691: LD_INT 6265
3693: PPUSH
3694: CALL_OW 12
3698: PPUSH
3699: CALL_OW 67
// if attackN < [ 4 , 4 , 5 ] [ Difficulty ] then
3703: LD_EXP 6
3707: PUSH
3708: LD_INT 4
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: LD_INT 5
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: LESS
3728: IFFALSE 3748
// c := Rand ( 1 , 2 ) else
3730: LD_ADDR_VAR 0 1
3734: PUSH
3735: LD_INT 1
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 12
3745: ST_TO_ADDR
3746: GO 3764
// c := Rand ( 1 , 3 ) ;
3748: LD_ADDR_VAR 0 1
3752: PUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 3
3758: PPUSH
3759: CALL_OW 12
3763: ST_TO_ADDR
// if attackN = 0 then
3764: LD_EXP 6
3768: PUSH
3769: LD_INT 0
3771: EQUAL
3772: IFFALSE 3788
// Say ( com , DJackAttack ) else
3774: LD_EXP 1
3778: PPUSH
3779: LD_STRING DJackAttack
3781: PPUSH
3782: CALL_OW 88
3786: GO 3792
// DSay ;
3788: CALL 2746 0 0
// case c of 1 :
3792: LD_VAR 0 1
3796: PUSH
3797: LD_INT 1
3799: DOUBLE
3800: EQUAL
3801: IFTRUE 3805
3803: GO 3987
3805: POP
// begin pom := pom ^ Attack ( 1 ) ;
3806: LD_ADDR_EXP 4
3810: PUSH
3811: LD_EXP 4
3815: PUSH
3816: LD_INT 1
3818: PPUSH
3819: CALL 1257 0 1
3823: ADD
3824: ST_TO_ADDR
// Wait ( 0 0$12 ) ;
3825: LD_INT 420
3827: PPUSH
3828: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3832: LD_ADDR_EXP 4
3836: PUSH
3837: LD_EXP 4
3841: PUSH
3842: LD_INT 3
3844: PPUSH
3845: CALL 1257 0 1
3849: ADD
3850: ST_TO_ADDR
// if Difficulty > 2 then
3851: LD_OWVAR 67
3855: PUSH
3856: LD_INT 2
3858: GREATER
3859: IFFALSE 3887
// begin Wait ( 0 0$46 ) ;
3861: LD_INT 1610
3863: PPUSH
3864: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
3868: LD_ADDR_EXP 4
3872: PUSH
3873: LD_EXP 4
3877: PUSH
3878: LD_INT 4
3880: PPUSH
3881: CALL 1257 0 1
3885: ADD
3886: ST_TO_ADDR
// end ; if attackN > 4 then
3887: LD_EXP 6
3891: PUSH
3892: LD_INT 4
3894: GREATER
3895: IFFALSE 3923
// begin Wait ( 0 0$12 ) ;
3897: LD_INT 420
3899: PPUSH
3900: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
3904: LD_ADDR_EXP 4
3908: PUSH
3909: LD_EXP 4
3913: PUSH
3914: LD_INT 3
3916: PPUSH
3917: CALL 1257 0 1
3921: ADD
3922: ST_TO_ADDR
// end ; if attackN > 8 then
3923: LD_EXP 6
3927: PUSH
3928: LD_INT 8
3930: GREATER
3931: IFFALSE 3985
// begin Wait ( 0 0$12 ) ;
3933: LD_INT 420
3935: PPUSH
3936: CALL_OW 67
// l := Rand ( 0 , 100 ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 0
3947: PPUSH
3948: LD_INT 100
3950: PPUSH
3951: CALL_OW 12
3955: ST_TO_ADDR
// if l < 45 then
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 45
3963: LESS
3964: IFFALSE 3985
// pom := pom ^ Attack ( 2 ) ;
3966: LD_ADDR_EXP 4
3970: PUSH
3971: LD_EXP 4
3975: PUSH
3976: LD_INT 2
3978: PPUSH
3979: CALL 1257 0 1
3983: ADD
3984: ST_TO_ADDR
// end ; end ; 2 :
3985: GO 4274
3987: LD_INT 2
3989: DOUBLE
3990: EQUAL
3991: IFTRUE 3995
3993: GO 4143
3995: POP
// begin pom := pom ^ Attack ( 2 ) ;
3996: LD_ADDR_EXP 4
4000: PUSH
4001: LD_EXP 4
4005: PUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL 1257 0 1
4013: ADD
4014: ST_TO_ADDR
// pom := pom ^ Attack ( 3 ) ;
4015: LD_ADDR_EXP 4
4019: PUSH
4020: LD_EXP 4
4024: PUSH
4025: LD_INT 3
4027: PPUSH
4028: CALL 1257 0 1
4032: ADD
4033: ST_TO_ADDR
// if Difficulty > 1 and GetBType ( HexInfo ( 63 , 37 ) ) = b_siberite_mine then
4034: LD_OWVAR 67
4038: PUSH
4039: LD_INT 1
4041: GREATER
4042: PUSH
4043: LD_INT 63
4045: PPUSH
4046: LD_INT 37
4048: PPUSH
4049: CALL_OW 428
4053: PPUSH
4054: CALL_OW 266
4058: PUSH
4059: LD_INT 30
4061: EQUAL
4062: AND
4063: IFFALSE 4069
// ComitSib ;
4065: CALL 2668 0 0
// if Difficulty > 2 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 2
4076: GREATER
4077: IFFALSE 4105
// begin Wait ( 0 0$25 ) ;
4079: LD_INT 875
4081: PPUSH
4082: CALL_OW 67
// pom := pom ^ Attack ( 4 ) ;
4086: LD_ADDR_EXP 4
4090: PUSH
4091: LD_EXP 4
4095: PUSH
4096: LD_INT 4
4098: PPUSH
4099: CALL 1257 0 1
4103: ADD
4104: ST_TO_ADDR
// end ; if attackN > 7 then
4105: LD_EXP 6
4109: PUSH
4110: LD_INT 7
4112: GREATER
4113: IFFALSE 4141
// begin Wait ( 0 0$15 ) ;
4115: LD_INT 525
4117: PPUSH
4118: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4122: LD_ADDR_EXP 4
4126: PUSH
4127: LD_EXP 4
4131: PUSH
4132: LD_INT 2
4134: PPUSH
4135: CALL 1257 0 1
4139: ADD
4140: ST_TO_ADDR
// end ; end ; 3 :
4141: GO 4274
4143: LD_INT 3
4145: DOUBLE
4146: EQUAL
4147: IFTRUE 4151
4149: GO 4273
4151: POP
// begin pom := pom ^ Attack ( 1 ) ;
4152: LD_ADDR_EXP 4
4156: PUSH
4157: LD_EXP 4
4161: PUSH
4162: LD_INT 1
4164: PPUSH
4165: CALL 1257 0 1
4169: ADD
4170: ST_TO_ADDR
// Wait ( 0 0$02 ) ;
4171: LD_INT 70
4173: PPUSH
4174: CALL_OW 67
// pom := pom ^ Attack ( 2 ) ;
4178: LD_ADDR_EXP 4
4182: PUSH
4183: LD_EXP 4
4187: PUSH
4188: LD_INT 2
4190: PPUSH
4191: CALL 1257 0 1
4195: ADD
4196: ST_TO_ADDR
// Wait ( 1 1$00 ) ;
4197: LD_INT 2100
4199: PPUSH
4200: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4204: LD_ADDR_EXP 4
4208: PUSH
4209: LD_EXP 4
4213: PUSH
4214: LD_INT 3
4216: PPUSH
4217: CALL 1257 0 1
4221: ADD
4222: ST_TO_ADDR
// pom := pom ^ Attack ( 5 ) ;
4223: LD_ADDR_EXP 4
4227: PUSH
4228: LD_EXP 4
4232: PUSH
4233: LD_INT 5
4235: PPUSH
4236: CALL 1257 0 1
4240: ADD
4241: ST_TO_ADDR
// if attackN > 10 then
4242: LD_EXP 6
4246: PUSH
4247: LD_INT 10
4249: GREATER
4250: IFFALSE 4271
// pom := pom ^ Attack ( 2 ) ;
4252: LD_ADDR_EXP 4
4256: PUSH
4257: LD_EXP 4
4261: PUSH
4262: LD_INT 2
4264: PPUSH
4265: CALL 1257 0 1
4269: ADD
4270: ST_TO_ADDR
// end ; end ;
4271: GO 4274
4273: POP
// if Difficulty > 1 and attackN mod 4 = 0 then
4274: LD_OWVAR 67
4278: PUSH
4279: LD_INT 1
4281: GREATER
4282: PUSH
4283: LD_EXP 6
4287: PUSH
4288: LD_INT 4
4290: MOD
4291: PUSH
4292: LD_INT 0
4294: EQUAL
4295: AND
4296: IFFALSE 4362
// begin Wait ( 1 1$45 ) ;
4298: LD_INT 3675
4300: PPUSH
4301: CALL_OW 67
// pom := pom ^ Attack ( 3 ) ;
4305: LD_ADDR_EXP 4
4309: PUSH
4310: LD_EXP 4
4314: PUSH
4315: LD_INT 3
4317: PPUSH
4318: CALL 1257 0 1
4322: ADD
4323: ST_TO_ADDR
// pom := pom ^ Attack ( 4 ) ;
4324: LD_ADDR_EXP 4
4328: PUSH
4329: LD_EXP 4
4333: PUSH
4334: LD_INT 4
4336: PPUSH
4337: CALL 1257 0 1
4341: ADD
4342: ST_TO_ADDR
// hover := hover ^ Attack ( 6 ) ;
4343: LD_ADDR_EXP 5
4347: PUSH
4348: LD_EXP 5
4352: PUSH
4353: LD_INT 6
4355: PPUSH
4356: CALL 1257 0 1
4360: ADD
4361: ST_TO_ADDR
// end ; attackN := attackN + 1 ;
4362: LD_ADDR_EXP 6
4366: PUSH
4367: LD_EXP 6
4371: PUSH
4372: LD_INT 1
4374: PLUS
4375: ST_TO_ADDR
// end ;
4376: PPOPN 2
4378: END
// every 0 0$10 trigger attackN >= [ 10 , 12 , 14 ] [ Difficulty ] and FilterAllUnits ( [ f_side , 2 ] ) = 0 do
4379: LD_EXP 6
4383: PUSH
4384: LD_INT 10
4386: PUSH
4387: LD_INT 12
4389: PUSH
4390: LD_INT 14
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_OWVAR 67
4402: ARRAY
4403: GREATEREQUAL
4404: PUSH
4405: LD_INT 22
4407: PUSH
4408: LD_INT 2
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PPUSH
4415: CALL_OW 69
4419: PUSH
4420: LD_INT 0
4422: EQUAL
4423: AND
4424: IFFALSE 4472
4426: GO 4428
4428: DISABLE
// begin SayRadio ( doc , DDocEnd ) ;
4429: LD_EXP 2
4433: PPUSH
4434: LD_STRING DDocEnd
4436: PPUSH
4437: CALL_OW 94
// Wait ( 0 0$03 ) ;
4441: LD_INT 105
4443: PPUSH
4444: CALL_OW 67
// case Query ( QWin ) of 1 :
4448: LD_STRING QWin
4450: PPUSH
4451: CALL_OW 97
4455: PUSH
4456: LD_INT 1
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4467
4464: POP
// ; end ;
4465: GO 4468
4467: POP
// YouWin ;
4468: CALL_OW 103
// end ; end_of_file
4472: END
// on UnitDestroyed ( un ) do begin if un = brave or un = com then
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: EQUAL
4481: PUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_EXP 1
4491: EQUAL
4492: OR
4493: IFFALSE 4514
// begin SayRadio ( doc , DDocWin ) ;
4495: LD_EXP 2
4499: PPUSH
4500: LD_STRING DDocWin
4502: PPUSH
4503: CALL_OW 94
// YouLost (  ) ;
4507: LD_STRING 
4509: PPUSH
4510: CALL_OW 104
// end ; if un in FilterAllUnits ( [ f_weapon , 91 ] ) then
4514: LD_VAR 0 1
4518: PUSH
4519: LD_INT 34
4521: PUSH
4522: LD_INT 91
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: IN
4534: IFFALSE 4579
// begin if Rand ( 1 , 100 ) <= 70 then
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 100
4541: PPUSH
4542: CALL_OW 12
4546: PUSH
4547: LD_INT 70
4549: LESSEQUAL
4550: IFFALSE 4579
// ArtContamination ( GetX ( un ) , GetY ( un ) , 10 ) ;
4552: LD_VAR 0 1
4556: PPUSH
4557: CALL_OW 250
4561: PPUSH
4562: LD_VAR 0 1
4566: PPUSH
4567: CALL_OW 251
4571: PPUSH
4572: LD_INT 10
4574: PPUSH
4575: CALL_OW 495
// end ; end ;
4579: PPOPN 1
4581: END
